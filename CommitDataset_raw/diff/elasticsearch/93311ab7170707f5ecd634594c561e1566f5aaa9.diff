[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Marks operations in the translog as completed. This is used to restore the state of the local checkpoint tracker on primary, +     * promotion., +     *, +     * @throws IOException if an I/O exception occurred reading the translog, +     */, +    public abstract void restoreLocalCheckpointFromTranslog() throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Marks operations in the translog as completed. This is used to restore the state of the local checkpoint tracker on primary, +     * promotion., +     *, +     * @throws IOException if an I/O exception occurred reading the translog, +     */, +    public abstract void restoreLocalCheckpointFromTranslog() throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void restoreLocalCheckpointFromTranslog() throws IOException {, +        try (ReleasableLock ignored = writeLock.acquire()) {, +            ensureOpen();, +            final long localCheckpoint = seqNoService().getLocalCheckpoint();, +            try (Translog.View view = getTranslog().newView()) {, +                final Translog.Snapshot snapshot = view.snapshot(localCheckpoint + 1);, +                Translog.Operation operation;, +                while ((operation = snapshot.next()) != null) {, +                    if (operation.seqNo() > localCheckpoint) {, +                        seqNoService().markSeqNoAsCompleted(operation.seqNo());, +                    }, +                }, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Marks operations in the translog as completed. This is used to restore the state of the local checkpoint tracker on primary, +     * promotion., +     *, +     * @throws IOException if an I/O exception occurred reading the translog, +     */, +    public abstract void restoreLocalCheckpointFromTranslog() throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void restoreLocalCheckpointFromTranslog() throws IOException {, +        try (ReleasableLock ignored = writeLock.acquire()) {, +            ensureOpen();, +            final long localCheckpoint = seqNoService().getLocalCheckpoint();, +            try (Translog.View view = getTranslog().newView()) {, +                final Translog.Snapshot snapshot = view.snapshot(localCheckpoint + 1);, +                Translog.Operation operation;, +                while ((operation = snapshot.next()) != null) {, +                    if (operation.seqNo() > localCheckpoint) {, +                        seqNoService().markSeqNoAsCompleted(operation.seqNo());, +                    }, +                }, +            }, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                /*, +                                 * If this shard was serving as a replica shard when another shard was promoted to primary then the state of, +                                 * its local checkpoint tracker was reset during the primary term transition. In particular, the local, +                                 * checkpoint on this shard was thrown back to the global checkpoint and the state of the local checkpoint, +                                 * tracker above the local checkpoint was destroyed. If the other shard that was promoted to primary, +                                 * subsequently fails before the primary/replica re-sync completes successfully and we are now being, +                                 * promoted, the local checkpoint tracker here could be left in a state where it would re-issue sequence, +                                 * numbers. To ensure that this is not the case, we restore the state of the local checkpoint tracker by, +                                 * replaying the translog and marking any operations there are completed., +                                 */, +                                getEngine().restoreLocalCheckpointFromTranslog();, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Marks operations in the translog as completed. This is used to restore the state of the local checkpoint tracker on primary, +     * promotion., +     *, +     * @throws IOException if an I/O exception occurred reading the translog, +     */, +    public abstract void restoreLocalCheckpointFromTranslog() throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void restoreLocalCheckpointFromTranslog() throws IOException {, +        try (ReleasableLock ignored = writeLock.acquire()) {, +            ensureOpen();, +            final long localCheckpoint = seqNoService().getLocalCheckpoint();, +            try (Translog.View view = getTranslog().newView()) {, +                final Translog.Snapshot snapshot = view.snapshot(localCheckpoint + 1);, +                Translog.Operation operation;, +                while ((operation = snapshot.next()) != null) {, +                    if (operation.seqNo() > localCheckpoint) {, +                        seqNoService().markSeqNoAsCompleted(operation.seqNo());, +                    }, +                }, +            }, +        }, +    }]