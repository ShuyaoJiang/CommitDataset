[+++ b/docs/plugins/discovery-ec2.asciidoc, +    An ec2 access key. The `secret_key` setting must also be specified. (Secure), +    An ec2 secret key. The `access_key` setting must also be specified. (Secure), +, +`session_token`::, +    An ec2 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +++ b/docs/plugins/discovery-ec2.asciidoc, +    An ec2 access key. The `secret_key` setting must also be specified. (Secure), +    An ec2 secret key. The `access_key` setting must also be specified. (Secure), +, +`session_token`::, +    An ec2 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +++ b/docs/plugins/repository-s3.asciidoc, +`session_token`::, +    An s3 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +, +++ b/docs/plugins/discovery-ec2.asciidoc, +    An ec2 access key. The `secret_key` setting must also be specified. (Secure), +    An ec2 secret key. The `access_key` setting must also be specified. (Secure), +, +`session_token`::, +    An ec2 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +++ b/docs/plugins/repository-s3.asciidoc, +`session_token`::, +    An s3 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java, +import com.amazonaws.auth.AWSCredentials;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicReference;, +, +        final AWSCredentials credentials = clientSettings.credentials;, +++ b/docs/plugins/discovery-ec2.asciidoc, +    An ec2 access key. The `secret_key` setting must also be specified. (Secure), +    An ec2 secret key. The `access_key` setting must also be specified. (Secure), +, +`session_token`::, +    An ec2 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +++ b/docs/plugins/repository-s3.asciidoc, +`session_token`::, +    An s3 session token. The `access_key` and `secret_key` settings must also, +    be specified. (Secure), +, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2ServiceImpl.java, +import com.amazonaws.auth.AWSCredentials;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicReference;, +, +        final AWSCredentials credentials = clientSettings.credentials;, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/Ec2ClientSettings.java, +import com.amazonaws.auth.AWSCredentials;, +import com.amazonaws.auth.BasicSessionCredentials;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsException;, +, +    /** The session token for connecting to ec2. */, +    static final Setting<SecureString> SESSION_TOKEN_SETTING = SecureSetting.secureString("discovery.ec2.session_token", null);, +, +    private static final Logger logger = Loggers.getLogger(Ec2ClientSettings.class);, +, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(logger);, +, +    final AWSCredentials credentials;, +    protected Ec2ClientSettings(AWSCredentials credentials, String endpoint, Protocol protocol, String proxyHost, int proxyPort,, +    static AWSCredentials loadCredentials(Settings settings) {, +        try (SecureString key = ACCESS_KEY_SETTING.get(settings);, +             SecureString secret = SECRET_KEY_SETTING.get(settings);, +             SecureString sessionToken = SESSION_TOKEN_SETTING.get(settings)) {, +            if (key.length() == 0 && secret.length() == 0) {, +                if (sessionToken.length() > 0) {, +                    throw new SettingsException("Setting [{}] is set but [{}] and [{}] are not",, +                        SESSION_TOKEN_SETTING.getKey(), ACCESS_KEY_SETTING.getKey(), SECRET_KEY_SETTING.getKey());, +, +                logger.debug("Using either environment variables, system properties or instance profile credentials");, +            } else {, +                if (key.length() == 0) {, +                    DEPRECATION_LOGGER.deprecated("Setting [{}] is set but [{}] is not, which will be unsupported in future",, +                        SECRET_KEY_SETTING.getKey(), ACCESS_KEY_SETTING.getKey());, +                }, +                if (secret.length() == 0) {, +                    DEPRECATION_LOGGER.deprecated("Setting [{}] is set but [{}] is not, which will be unsupported in future",, +                        ACCESS_KEY_SETTING.getKey(), SECRET_KEY_SETTING.getKey());, +                }, +, +                final AWSCredentials credentials;, +                if (sessionToken.length() == 0) {, +                    logger.debug("Using basic key/secret credentials");, +                    credentials = new BasicAWSCredentials(key.toString(), secret.toString());, +                } else {, +                    logger.debug("Using basic session credentials");, +                    credentials = new BasicSessionCredentials(key.toString(), secret.toString(), sessionToken.toString());]