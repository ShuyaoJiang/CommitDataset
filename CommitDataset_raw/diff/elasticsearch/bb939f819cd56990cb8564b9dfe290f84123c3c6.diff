[+++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.engine.DocumentAlreadyExistsException;, +                    if (t instanceof VersionConflictEngineException || (t instanceof DocumentAlreadyExistsException && translate.operation() == UpdateHelper.Operation.UPSERT)) {, +                    final Engine.IndexingOperation operation;, +                    if (indexRequest.opType() == IndexRequest.OpType.INDEX) {, +                        operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    } else {, +                        assert indexRequest.opType() == IndexRequest.OpType.CREATE : indexRequest.opType();, +                        operation = indexShard.prepareCreate(sourceToParse,, +                                indexRequest.version(), indexRequest.versionType(),, +                                Engine.Operation.Origin.REPLICA);, +                    }, +                    operation.execute(indexShard);, +++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.engine.DocumentAlreadyExistsException;, +                    if (t instanceof VersionConflictEngineException || (t instanceof DocumentAlreadyExistsException && translate.operation() == UpdateHelper.Operation.UPSERT)) {, +                    final Engine.IndexingOperation operation;, +                    if (indexRequest.opType() == IndexRequest.OpType.INDEX) {, +                        operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    } else {, +                        assert indexRequest.opType() == IndexRequest.OpType.CREATE : indexRequest.opType();, +                        operation = indexShard.prepareCreate(sourceToParse,, +                                indexRequest.version(), indexRequest.versionType(),, +                                Engine.Operation.Origin.REPLICA);, +                    }, +                    operation.execute(indexShard);, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, + * <p>, + * <p>, + * <p>, +     * <p>, +++ b/Vagrantfile, +    ubuntu_common config, +def ubuntu_common(config), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', +def deb_common(config, add_openjdk_repository_command, openjdk_list), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        CREATE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.CreateFailedEngineException.class, org.elasticsearch.index.engine.CreateFailedEngineException::new, 22),, +        DOCUMENT_ALREADY_EXISTS_EXCEPTION(org.elasticsearch.index.engine.DocumentAlreadyExistsException.class, org.elasticsearch.index.engine.DocumentAlreadyExistsException::new, 54),, +++ b/core/src/main/java/org/elasticsearch/action/UnavailableShardsException.java, +    public UnavailableShardsException(@Nullable ShardId shardId, String message) {, +        super(buildMessage(shardId, message));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.engine.DocumentAlreadyExistsException;, +                    if (t instanceof VersionConflictEngineException || (t instanceof DocumentAlreadyExistsException && translate.operation() == UpdateHelper.Operation.UPSERT)) {, +                    final Engine.IndexingOperation operation;, +                    if (indexRequest.opType() == IndexRequest.OpType.INDEX) {, +                        operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    } else {, +                        assert indexRequest.opType() == IndexRequest.OpType.CREATE : indexRequest.opType();, +                        operation = indexShard.prepareCreate(sourceToParse,, +                                indexRequest.version(), indexRequest.versionType(),, +                                Engine.Operation.Origin.REPLICA);, +                    }]