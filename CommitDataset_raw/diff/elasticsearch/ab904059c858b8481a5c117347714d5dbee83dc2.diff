[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +                TransportSearchQueryAndFetchAction.class,, +                TransportSearchScanAction.class, +                TransportSearchScrollScanAction.class,, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +                TransportSearchQueryAndFetchAction.class,, +                TransportSearchScanAction.class, +                TransportSearchScrollScanAction.class,, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchType.java, +import org.elasticsearch.common.ParseField;, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     * @deprecated will be removed in 3.0, you should do a regular scroll instead, ordered by `_doc`, +     */, +    @Deprecated, +    SCAN((byte) 4),, +    /**, +     * Only counts the results, will still execute aggregations and the like., +     * @deprecated does not any improvements compared to {@link #QUERY_THEN_FETCH} with a `size` of {@code 0}, +     */, +    @Deprecated, +    COUNT((byte) 5);, +    private static final ParseField COUNT_VALUE = new ParseField("count").withAllDeprecated("query_then_fetch");, +    private static final ParseField SCAN_VALUE = new ParseField("scan").withAllDeprecated("query_then_fetch sorting on `_doc`");, +, +        } else if (id == 4) {, +            return SCAN;, +        } else if (id == 5) {, +            return COUNT;, +     * "query_then_fetch"/"queryThenFetch", "query_and_fetch"/"queryAndFetch", and "scan"., +        } else if (parseFieldMatcher.match(searchType, SCAN_VALUE)) {, +            return SearchType.SCAN;, +        } else if (parseFieldMatcher.match(searchType, COUNT_VALUE)) {, +            return SearchType.COUNT;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +                TransportSearchQueryAndFetchAction.class,, +                TransportSearchScanAction.class, +                TransportSearchScrollScanAction.class,, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchType.java, +import org.elasticsearch.common.ParseField;, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     * @deprecated will be removed in 3.0, you should do a regular scroll instead, ordered by `_doc`, +     */, +    @Deprecated, +    SCAN((byte) 4),, +    /**, +     * Only counts the results, will still execute aggregations and the like., +     * @deprecated does not any improvements compared to {@link #QUERY_THEN_FETCH} with a `size` of {@code 0}, +     */, +    @Deprecated, +    COUNT((byte) 5);, +    private static final ParseField COUNT_VALUE = new ParseField("count").withAllDeprecated("query_then_fetch");, +    private static final ParseField SCAN_VALUE = new ParseField("scan").withAllDeprecated("query_then_fetch sorting on `_doc`");, +, +        } else if (id == 4) {, +            return SCAN;, +        } else if (id == 5) {, +            return COUNT;, +     * "query_then_fetch"/"queryThenFetch", "query_and_fetch"/"queryAndFetch", and "scan"., +        } else if (parseFieldMatcher.match(searchType, SCAN_VALUE)) {, +            return SearchType.SCAN;, +        } else if (parseFieldMatcher.match(searchType, COUNT_VALUE)) {, +            return SearchType.COUNT;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private final TransportSearchScanAction scanAction;, +    private final TransportSearchCountAction countAction;, +                                 TransportSearchScanAction scanAction,, +                                 TransportSearchCountAction countAction,, +        this.scanAction = scanAction;, +        this.countAction = countAction;, +        if (optimizeSingleShard && searchRequest.searchType() != SCAN && searchRequest.searchType() != COUNT) {, +        } else if (searchRequest.searchType() == SearchType.SCAN) {, +            scanAction.execute(searchRequest, listener);, +        } else if (searchRequest.searchType() == SearchType.COUNT) {, +            countAction.execute(searchRequest, listener);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.search.type.TransportSearchScanAction;, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +                TransportSearchQueryAndFetchAction.class,, +                TransportSearchScanAction.class, +                TransportSearchScrollScanAction.class,, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchType.java, +import org.elasticsearch.common.ParseField;, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     * @deprecated will be removed in 3.0, you should do a regular scroll instead, ordered by `_doc`, +     */]