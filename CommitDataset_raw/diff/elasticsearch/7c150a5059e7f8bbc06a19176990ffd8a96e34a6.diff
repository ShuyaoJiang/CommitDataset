[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +        public static final boolean NORMALIZE_LAT = true;, +        public static final boolean NORMALIZE_LON = true;, +        public static final boolean VALIDATE_LAT = true;, +        public static final boolean VALIDATE_LON = true;, +        boolean normalizeLat = Defaults.NORMALIZE_LAT;, +        boolean normalizeLon = Defaults.NORMALIZE_LON;, +                    validateLon, validateLat, normalizeLon, normalizeLat);, +                } else if (fieldName.equals("normalize")) {, +                    builder.normalizeLat = XContentMapValues.nodeBooleanValue(fieldNode);, +                    builder.normalizeLon = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("normalize_lat")) {, +                    builder.normalizeLat = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("normalize_lon")) {, +                    builder.normalizeLon = XContentMapValues.nodeBooleanValue(fieldNode);, +    private final boolean normalizeLon;, +    private final boolean normalizeLat;, +, +                               boolean validateLon, boolean validateLat,, +                               boolean normalizeLon, boolean normalizeLat) {, +, +        this.normalizeLat = normalizeLat;, +        this.normalizeLon = normalizeLon;, +                    double lon = context.parser().doubleValue();, +                    double lat = context.parser().doubleValue();, +                    double lon = context.parser().doubleValue();, +                    double lat = context.parser().doubleValue();, +    private void parseLatLon(ParseContext context, double lat, double lon) throws IOException {, +        if (normalizeLon) {, +            lon = normalizeLon(lon);, +        }, +        if (normalizeLat) {, +            lat = normalizeLat(lat);, +        }, +, +        if (validateLat) {, +            if (lat > 90.0 || lat < -90.0) {, +                throw new ElasticSearchIllegalArgumentException("illegal latitude value [" + lat + "] for " + name);, +            }, +        }, +        if (validateLon) {, +            if (lon > 180.0 || lon < -180) {, +                throw new ElasticSearchIllegalArgumentException("illegal longitude value [" + lon + "] for " + name);, +            }, +        }, +, +        context.externalValue(Double.toString(lat) + ',' + Double.toString(lon));, +, +        if (normalizeLon) {, +            lon = normalizeLon(lon);, +        }, +        if (normalizeLat) {, +            lat = normalizeLat(lat);, +        }, +, +        if (validateLat) {, +            if (lat > 90.0 || lat < -90.0) {, +                throw new ElasticSearchIllegalArgumentException("illegal latitude value [" + lat + "] for " + name);, +            }, +        }, +        if (validateLon) {, +            if (lon > 180.0 || lon < -180) {, +                throw new ElasticSearchIllegalArgumentException("illegal longitude value [" + lon + "] for " + name);, +            }, +        }, +, +    private double normalizeLon(double lon) {, +        double delta = 0;, +        if (lon < 0) {, +            delta = 360;, +        } else if (lon >= 0) {, +            delta = -360;, +        }, +, +        double newLng = lon;, +        while (newLng <= -180 || newLng >= 180) {, +            newLng += delta;, +        }, +        return newLng;, +    }, +, +    private double normalizeLat(double lat) {, +        double delta = 0;, +        if (lat < 0) {, +            delta = 180;, +        } else if (lat >= 0) {, +            delta = -180;, +        }, +, +        double newLat = lat;, +        while (newLat <= -90 || newLat >= 90) {, +            newLat += delta;, +        }, +        return newLat;, +    }, +, +        if (!validateLat && !validateLon) {, +            builder.field("validate", false);, +        if (!normalizeLat && !normalizeLon) {, +            builder.field("normalize", false);]