[+++ b/core/pom.xml, +            <id>package-rpm</id>, +++ b/core/pom.xml, +            <id>package-rpm</id>, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("failed to perform " + actionName + " on remote replica " + node + shardIt.shardId(), exp);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +                                            "Failed to perform [" + actionName + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +++ b/core/pom.xml, +            <id>package-rpm</id>, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("failed to perform " + actionName + " on remote replica " + node + shardIt.shardId(), exp);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +                                            "Failed to perform [" + actionName + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason) {, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", shardRouting.shardId(), shardRouting, indexUUID, reason);, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +            logger.warn("can't send shard started for {}. no master known.", shardRouting);, +, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +, +        logger.debug("sending shard started for {}", shardRoutingEntry);, +, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask("shard-failed (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                    shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(entry.shardRouting, entry.reason));, +        clusterService.submitStateUpdateTask("shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.URGENT,, +, +, +        String reason;, +        ShardRoutingEntry(ShardRouting shardRouting, String indexUUID, String reason) {, +            this.reason = reason;, +            reason = in.readString();, +            out.writeString(reason);, +            return "" + shardRouting + ", indexUUID [" + indexUUID + "], reason [" + reason + "]";, +++ b/core/pom.xml, +            <id>package-rpm</id>, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("failed to perform " + actionName + " on remote replica " + node + shardIt.shardId(), exp);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +                                            "Failed to perform [" + actionName + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason) {, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", shardRouting.shardId(), shardRouting, indexUUID, reason);, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +            logger.warn("can't send shard started for {}. no master known.", shardRouting);, +, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +, +        logger.debug("sending shard started for {}", shardRoutingEntry);, +, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask("shard-failed (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                    shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(entry.shardRouting, entry.reason));, +        clusterService.submitStateUpdateTask("shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.URGENT,, +, +, +        String reason;, +        ShardRoutingEntry(ShardRouting shardRouting, String indexUUID, String reason) {, +            this.reason = reason;, +            reason = in.readString();, +            out.writeString(reason);, +            return "" + shardRouting + ", indexUUID [" + indexUUID + "], reason [" + reason + "]";, +++ /dev/null, +++ b/core/pom.xml, +            <id>package-rpm</id>, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    logger.warn("failed to perform " + actionName + " on remote replica " + node + shardIt.shardId(), exp);, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(),, +                                            "Failed to perform [" + actionName + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason) {, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        logger.trace("{} re-sending failed shard for {}, indexUUID [{}], reason [{}]", shardRouting.shardId(), shardRouting, indexUUID, reason);, +        innerShardFailed(shardRouting, indexUUID, reason, masterNode);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +            logger.warn("can't send shard started for {}. no master known.", shardRouting);, +, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason);, +, +        logger.debug("sending shard started for {}", shardRoutingEntry);, +, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask("shard-failed (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                    shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(entry.shardRouting, entry.reason));, +        clusterService.submitStateUpdateTask("shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.reason + "]", Priority.URGENT,]