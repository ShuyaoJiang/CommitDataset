[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +import java.util.*;, +            validateIncomingState(incomingState, lastSeenClusterState);, +    void validateIncomingState(ClusterState incomingState, ClusterState lastSeenClusterState) {, +        final ClusterName incomingClusterName = incomingState.getClusterName();, +            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]", incomingState.nodes().masterNode(), incomingClusterName);, +        if (currentNodes.localNode().equals(incomingState.nodes().localNode()) == false) {, +            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen", incomingState.nodes().masterNode());, +            ZenDiscovery.validateStateIsFromCurrentMaster(logger, currentNodes, incomingState);, +        }, +, +        if (lastSeenClusterState != null, +                && Objects.equals(lastSeenClusterState.nodes().masterNodeId(), incomingState.nodes().masterNodeId()), +                && lastSeenClusterState.version() > incomingState.version()) {, +            logger.debug("received an older cluster state from master, rejecting (received version [{}], last version is [{}])",, +                    incomingState.version(), lastSeenClusterState.version());, +            throw new IllegalStateException("cluster state version [" + incomingState.version() + "] is old (last seen version [" + lastSeenClusterState.version() + "])");, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +import java.util.*;, +            validateIncomingState(incomingState, lastSeenClusterState);, +    void validateIncomingState(ClusterState incomingState, ClusterState lastSeenClusterState) {, +        final ClusterName incomingClusterName = incomingState.getClusterName();, +            logger.warn("received cluster state from [{}] which is also master but with a different cluster name [{}]", incomingState.nodes().masterNode(), incomingClusterName);, +        if (currentNodes.localNode().equals(incomingState.nodes().localNode()) == false) {, +            logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen", incomingState.nodes().masterNode());, +            ZenDiscovery.validateStateIsFromCurrentMaster(logger, currentNodes, incomingState);, +        }, +, +        if (lastSeenClusterState != null, +                && Objects.equals(lastSeenClusterState.nodes().masterNodeId(), incomingState.nodes().masterNodeId()), +                && lastSeenClusterState.version() > incomingState.version()) {, +            logger.debug("received an older cluster state from master, rejecting (received version [{}], last version is [{}])",, +                    incomingState.version(), lastSeenClusterState.version());, +            throw new IllegalStateException("cluster state version [" + incomingState.version() + "] is old (last seen version [" + lastSeenClusterState.version() + "])");, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateActionTests.java, +    public void testIncomingClusterStateValidation() throws Exception {, +                .nodes(DiscoveryNodes.builder(node.nodes()).masterNodeId(randomAsciiOfLength(10))).incrementVersion().build();, +        node.action.validateIncomingState(state, null);, +            node.action.validateIncomingState(state, node.clusterState);, +                .nodes(DiscoveryNodes.builder(node.nodes()).masterNodeId("master")).build(), node.clusterState);, +            node.action.validateIncomingState(ClusterState.builder(new ClusterName(randomAsciiOfLength(10))).nodes(node.nodes()).build(), node.clusterState);, +            state = ClusterState.builder(node.clusterState), +                    .nodes(DiscoveryNodes.builder(node.nodes()).localNodeId("_non_existing_").build()), +                    .incrementVersion().build();, +            node.action.validateIncomingState(state, node.clusterState);, +            ).incrementVersion().build();, +            node.action.validateIncomingState(state, node.clusterState);, +, +        logger.info("--> testing rejection of an old cluster state");, +        state = node.clusterState;, +        node.clusterState = ClusterState.builder(node.clusterState).incrementVersion().build();, +        try {, +            node.action.validateIncomingState(state, node.clusterState);, +            fail("node accepted state with an older version");, +        } catch (IllegalStateException OK) {, +        }, +, +        // an older version from a *new* master is OK!, +        ClusterState previousState = ClusterState.builder(node.clusterState).incrementVersion().build();, +        state = ClusterState.builder(node.clusterState), +                .nodes(DiscoveryNodes.builder(node.clusterState.nodes()).masterNodeId("_new_master_").build()), +                .build();, +        // remove the master of the node (but still have a previous cluster state with it)!, +        node.clusterState = ClusterState.builder(node.clusterState), +                .nodes(DiscoveryNodes.builder(node.clusterState.nodes()).masterNodeId(null).build()), +                .build();, +, +        node.action.validateIncomingState(state, previousState);]