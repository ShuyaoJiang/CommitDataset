[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java, +    public XContentGenerator createGenerator(OutputStream os) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os);, +    }, +, +    @Override, +    public XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java, +    public XContentGenerator createGenerator(OutputStream os) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os);, +    }, +, +    @Override, +    public XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContentGenerator.java, +        super(jsonGenerator, os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java, +    public XContentGenerator createGenerator(OutputStream os) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os);, +    }, +, +    @Override, +    public XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException {, +        return new CborXContentGenerator(cborFactory.createGenerator(os, JsonEncoding.UTF8), os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContentGenerator.java, +        super(jsonGenerator, os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContent.java, +    public XContentGenerator createGenerator(OutputStream os) throws IOException {, +        return new JsonXContentGenerator(jsonFactory.createGenerator(os, JsonEncoding.UTF8), os);, +    }, +, +    @Override, +    public XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException {, +        return new JsonXContentGenerator(jsonFactory.createGenerator(os, JsonEncoding.UTF8), os, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +    XContentGenerator createGenerator(OutputStream os) throws IOException;, +     * Creates a new generator using the provided output stream and some filters., +    XContentGenerator createGenerator(OutputStream os, String[] filters) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +     * Constructs a new builder using the provided xcontent, an OutputStream and some filters. The, +     * filters are used to filter fields that won't be written to the OutputStream. Make sure, +     * to call {@link #close()} when the builder is done with., +        this.generator = xContent.createGenerator(bos, filters);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/cbor/CborXContent.java]