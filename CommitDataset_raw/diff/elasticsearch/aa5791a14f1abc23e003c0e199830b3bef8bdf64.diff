[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.AliasAction;, +    @Override protected void checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        for (AliasAction aliasAction : request.aliasActions()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, aliasAction.index());, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.AliasAction;, +    @Override protected void checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        for (AliasAction aliasAction : request.aliasActions()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, aliasAction.index());, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CreateIndexRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.AliasAction;, +    @Override protected void checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        for (AliasAction aliasAction : request.aliasActions()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, aliasAction.index());, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CreateIndexRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(DeleteIndexRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.AliasAction;, +    @Override protected void checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        for (AliasAction aliasAction : request.aliasActions()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, aliasAction.index());, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CreateIndexRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(DeleteIndexRequest request, ClusterState state) {, +        state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, request.index());, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/TransportPutMappingAction.java, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(PutMappingRequest request, ClusterState state) {, +        // update to concrete indices, +        request.indices(state.metaData().concreteIndices(request.indices()));, +, +        for (String index : request.indices()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, index);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.AliasAction;, +    @Override protected void checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        for (AliasAction aliasAction : request.aliasActions()) {, +            state.blocks().indexBlockedRaiseException(ClusterBlockLevel.METADATA, aliasAction.index());, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    @Override protected void checkBlock(CreateIndexRequest request, ClusterState state) {]