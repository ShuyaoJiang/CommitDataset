[+++ b/server/src/test/java/org/elasticsearch/indices/recovery/RecoverySourceHandlerTests.java, +, +        final List<Translog.Operation> shippedOps = new ArrayList<>();, +        RecoveryTargetHandler recoveryTarget = new TestRecoveryTargetHandler() {, +            @Override, +            public long indexTranslogOperations(List<Translog.Operation> operations, int totalTranslogOps, long timestamp, long msu) {, +                shippedOps.addAll(operations);, +                return SequenceNumbers.NO_OPS_PERFORMED;, +            }, +        };, +        RecoverySourceHandler handler = new RecoverySourceHandler(shard, recoveryTarget, request, fileChunkSizeInBytes, between(1, 10));, +            endingSeqNo, newTranslogSnapshot(operations, Collections.emptyList()), randomNonNegativeLong(), randomNonNegativeLong());, +            expectThrows(IllegalStateException.class, () -> handler.phase2(startingSeqNo, requiredStartingSeqNo,, +                endingSeqNo, newTranslogSnapshot(operations, opsToSkip), randomNonNegativeLong(), randomNonNegativeLong()));, +, +    private Translog.Snapshot newTranslogSnapshot(List<Translog.Operation> operations, List<Translog.Operation> operationsToSkip) {, +        return new Translog.Snapshot() {, +            int index = 0;, +            int skippedCount = 0;, +, +            @Override, +            public int totalOperations() {, +                return operations.size();, +            }, +, +            @Override, +            public int skippedOperations() {, +                return skippedCount;, +            }, +, +            @Override, +            public Translog.Operation next() {, +                while (index < operations.size()) {, +                    Translog.Operation op = operations.get(index++);, +                    if (operationsToSkip.contains(op)) {, +                        skippedCount++;, +                    } else {, +                        return op;, +                    }, +                }, +                return null;, +            }, +, +            @Override, +            public void close() {, +, +            }, +        };, +    }]