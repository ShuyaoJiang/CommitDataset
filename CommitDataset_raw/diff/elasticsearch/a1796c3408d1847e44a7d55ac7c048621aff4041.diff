[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static String threadName(Settings settings, String namePrefix) {, +        return name + namePrefix;, +    }, +, +    public static ThreadFactory daemonThreadFactory(Settings settings, String namePrefix) {, +        return daemonThreadFactory(threadName(settings, namePrefix));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static String threadName(Settings settings, String namePrefix) {, +        return name + namePrefix;, +    }, +, +    public static ThreadFactory daemonThreadFactory(Settings settings, String namePrefix) {, +        return daemonThreadFactory(threadName(settings, namePrefix));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    private final ThreadPool threadPool;, +, +        this.threadPool = threadPool;, +        context.accessed(threadPool.estimatedTimeInMillis());, +            long time = threadPool.estimatedTimeInMillis();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static String threadName(Settings settings, String namePrefix) {, +        return name + namePrefix;, +    }, +, +    public static ThreadFactory daemonThreadFactory(Settings settings, String namePrefix) {, +        return daemonThreadFactory(threadName(settings, namePrefix));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +    private final ThreadPool threadPool;, +, +        this.threadPool = threadPool;, +        context.accessed(threadPool.estimatedTimeInMillis());, +            long time = threadPool.estimatedTimeInMillis();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +    private final EstimatedTimeThread estimatedTimeThread;, +, +, +        TimeValue estimatedTimeInterval = componentSettings.getAsTime("estimated_time_interval", TimeValue.timeValueMillis(200));, +        this.estimatedTimeThread = new EstimatedTimeThread(EsExecutors.threadName(settings, "[timer]"), estimatedTimeInterval.millis());, +        this.estimatedTimeThread.start();, +    }, +, +    public long estimatedTimeInMillis() {, +        return estimatedTimeThread.estimatedTimeInMillis();, +        estimatedTimeThread.running = false;, +        estimatedTimeThread.interrupt();, +    public void shutdownNow() {, +        estimatedTimeThread.running = false;, +        estimatedTimeThread.interrupt();, +        scheduler.shutdownNow();, +        for (Executor executor : executors.values()) {, +            if (executor instanceof ThreadPoolExecutor) {, +                ((ThreadPoolExecutor) executor).shutdownNow();, +            }, +        }, +    }, +, +, +    static class EstimatedTimeThread extends Thread {, +, +        final long interval;, +, +        volatile boolean running = true;, +, +        volatile long estimatedTimeInMillis;, +, +        EstimatedTimeThread(String name, long interval) {, +            super(name);, +            this.interval = interval;, +            setDaemon(true);, +        }, +, +        public long estimatedTimeInMillis() {, +            return this.estimatedTimeInMillis;, +        }, +, +        @Override public void run() {, +            while (running) {, +                estimatedTimeInMillis = System.currentTimeMillis();, +                try {, +                    Thread.sleep(interval);, +                } catch (InterruptedException e) {, +                    running = false;, +                    return;, +                }, +            }, +        }, +    }]