[+++ b/.github/ISSUE_TEMPLATE.md, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.put(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.put(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        repos.maven {, +            name 'netty-snapshots', +            url "http://s3.amazonaws.com/download.elasticsearch.org/nettysnapshots/20160722", +        }, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.put(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        repos.maven {, +            name 'netty-snapshots', +            url "http://s3.amazonaws.com/download.elasticsearch.org/nettysnapshots/20160722", +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +        void emitDo(String method, String pathAndQuery,, +                String body, String catchPart, boolean inSetup) {, +                emitDo(method, pathAndQuery, body, catchPart, inSetup), +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.put(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        repos.maven {, +            name 'netty-snapshots', +            url "http://s3.amazonaws.com/download.elasticsearch.org/nettysnapshots/20160722", +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +        void emitDo(String method, String pathAndQuery,, +                String body, String catchPart, boolean inSetup) {, +                emitDo(method, pathAndQuery, body, catchPart, inSetup), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +        /(?:$CATCH|$SUBSTITUTION|$SKIP|(continued)|$SETUP) ?/, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc, +run it using Maven:, +  -Dtests.class=org.elasticsearch.test.rest.RestIT, +  -Dtests.class=org.elasticsearch.test.rest.RestIT \, +`RestIT` are the executable test classes that runs all the, +destructive. When working with a single package its generally faster to run its, +tests in a tighter loop than maven provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.put(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        repos.maven {, +            name 'netty-snapshots', +            url "http://s3.amazonaws.com/download.elasticsearch.org/nettysnapshots/20160722", +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +        void emitDo(String method, String pathAndQuery,, +                String body, String catchPart, boolean inSetup) {, +                emitDo(method, pathAndQuery, body, catchPart, inSetup), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +        /(?:$CATCH|$SUBSTITUTION|$SKIP|(continued)|$SETUP) ?/, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addJarPomGeneration(project), +    protected static void addJarPomGeneration(Project project) {, +++ b/.github/ISSUE_TEMPLATE.md, +++ b/TESTING.asciidoc]