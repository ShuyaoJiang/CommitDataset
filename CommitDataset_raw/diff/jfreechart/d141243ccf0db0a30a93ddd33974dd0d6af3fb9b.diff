[+++ b/ChangeLog, +    * source/org/jfree/chart/LegendItemCollection.java, +    (clone): Reimplemented,, +    * source/org/jfree/chart/plot/CategoryPlot.java, +    (equals): Check additional fields,, +    (clone): Clone some internal structures., +, +2008-04-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/LegendItemCollection.java, +    (clone): Reimplemented,, +    * source/org/jfree/chart/plot/CategoryPlot.java, +    (equals): Check additional fields,, +    (clone): Clone some internal structures., +, +2008-04-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/LegendItemCollection.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2008, by Object Refinery Limited., + * 23-Apr-2008 : Fixed clone() method (DG);, +import org.jfree.util.ObjectUtilities;, +, +        LegendItemCollection clone = (LegendItemCollection) super.clone();, +        clone.items = (List) ObjectUtilities.deepClone(this.items);, +    	return clone;, +++ b/ChangeLog, +    * source/org/jfree/chart/LegendItemCollection.java, +    (clone): Reimplemented,, +    * source/org/jfree/chart/plot/CategoryPlot.java, +    (equals): Check additional fields,, +    (clone): Clone some internal structures., +, +2008-04-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/LegendItemCollection.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2008, by Object Refinery Limited., + * 23-Apr-2008 : Fixed clone() method (DG);, +import org.jfree.util.ObjectUtilities;, +, +        LegendItemCollection clone = (LegendItemCollection) super.clone();, +        clone.items = (List) ObjectUtilities.deepClone(this.items);, +    	return clone;, +++ b/source/org/jfree/chart/plot/CategoryPlot.java, + * 23-Apr-2008 : Fixed equals() and clone() methods (DG);, +        if (!ObjectUtilities.equal(this.foregroundDomainMarkers,, +                that.foregroundDomainMarkers)) {, +            return false;, +        }, +        if (!ObjectUtilities.equal(this.backgroundDomainMarkers,, +                that.backgroundDomainMarkers)) {, +            return false;, +        }, +        if (!ObjectUtilities.equal(this.fixedLegendItems,, +        		that.fixedLegendItems)) {, +        	return false;, +        }, +        return super.equals(obj);, +        clone.annotations = (List) ObjectUtilities.deepClone(this.annotations);, +        clone.foregroundDomainMarkers = cloneMarkerMap(, +        		this.foregroundDomainMarkers);, +        clone.backgroundDomainMarkers = cloneMarkerMap(, +        		this.backgroundDomainMarkers);, +        clone.foregroundRangeMarkers = cloneMarkerMap(, +        		this.foregroundRangeMarkers);, +        clone.backgroundRangeMarkers = cloneMarkerMap(, +        		this.backgroundRangeMarkers);, +        if (this.fixedLegendItems != null) {, +            clone.fixedLegendItems, +                    = (LegendItemCollection) this.fixedLegendItems.clone();, +        }, +	 * A utility method to clone the marker maps., +	 *, +	 * @param map  the map to clone., +	 *, +	 * @return A clone of the map., +	 *, +	 * @throws CloneNotSupportedException if there is some problem cloning the, +	 *                                    map., +	 */, +	private Map cloneMarkerMap(Map map) throws CloneNotSupportedException {, +		Map clone = new HashMap();, +        Set keys = map.keySet();, +        Iterator iterator = keys.iterator();, +        while (iterator.hasNext()) {, +            Object key = iterator.next();, +            List entry = (List) map.get(key);, +            Object toAdd = ObjectUtilities.deepClone(entry);, +            clone.put(key, toAdd);, +        }, +		return clone;, +	}, +, +    /**, +++ b/ChangeLog, +    * source/org/jfree/chart/LegendItemCollection.java, +    (clone): Reimplemented,, +    * source/org/jfree/chart/plot/CategoryPlot.java]