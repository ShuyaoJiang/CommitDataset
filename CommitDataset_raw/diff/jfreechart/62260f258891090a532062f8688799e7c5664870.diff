[+++ b/source/org/jfree/data/general/DatasetUtilities.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * 22-Sep-2015 : Fix bugs in iterateToFindDomainBounds() and , + *               iterateToFindRangeBounds() (DG);, +     * the dataset contains negative or {@code null} values, they are, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param source  the source dataset ({@code null} not permitted)., +     * @param key  a new key for the aggregated items ({@code null} not, +     * @param source  the source dataset ({@code null} not permitted)., +     * @param rowKeys  the row keys ({@code null} not permitted)., +     * @param columnKeys  the column keys ({@code null} not permitted)., +     * @param rowKey  the row key ({@code null} not permitted)., +     * @param rowData  the row data ({@code null} not permitted)., +     * @param f  the function ({@code null} not permitted)., +     * @param seriesKey  the key to give the resulting series ({@code null} not, +     *     permitted)., +     * @param f  the function ({@code null} not permitted)., +     *                   ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @return The x-range (possibly {@code null})., +                    double xvalue = ixyd.getXValue(series, item);, +                    if (!Double.isNaN(xvalue)) {, +                        minimum = Math.min(minimum, xvalue);, +                        maximum = Math.max(maximum, xvalue);, +                    }, +        } else {, +        } else {, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @param xRange  the x-range ({@code null} not permitted)., +     * @return The y-range (possibly {@code null})., +                        double yvalue = ixyd.getYValue(series, item);, +                        if (!Double.isNaN(yvalue)) {, +                            minimum = Math.min(minimum, yvalue);, +                            maximum = Math.max(maximum, yvalue);, +                        }, +        } else {, +        } else {, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @param xRange  the x-range ({@code null} not permitted)., +     * @return The y-range (possibly {@code null})., +        } else {, +++ b/source/org/jfree/data/general/DatasetUtilities.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * 22-Sep-2015 : Fix bugs in iterateToFindDomainBounds() and , + *               iterateToFindRangeBounds() (DG);, +     * the dataset contains negative or {@code null} values, they are, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param source  the source dataset ({@code null} not permitted)., +     * @param key  a new key for the aggregated items ({@code null} not, +     * @param source  the source dataset ({@code null} not permitted)., +     * @param rowKeys  the row keys ({@code null} not permitted)., +     * @param columnKeys  the column keys ({@code null} not permitted)., +     * @param rowKey  the row key ({@code null} not permitted)., +     * @param rowData  the row data ({@code null} not permitted)., +     * @param f  the function ({@code null} not permitted)., +     * @param seriesKey  the key to give the resulting series ({@code null} not, +     *     permitted)., +     * @param f  the function ({@code null} not permitted)., +     *                   ({@code null} not permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @return The x-range (possibly {@code null})., +                    double xvalue = ixyd.getXValue(series, item);, +                    if (!Double.isNaN(xvalue)) {, +                        minimum = Math.min(minimum, xvalue);, +                        maximum = Math.max(maximum, xvalue);, +                    }, +        } else {, +        } else {, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @param xRange  the x-range ({@code null} not permitted)., +     * @return The y-range (possibly {@code null})., +                        double yvalue = ixyd.getYValue(series, item);, +                        if (!Double.isNaN(yvalue)) {, +                            minimum = Math.min(minimum, yvalue);, +                            maximum = Math.max(maximum, yvalue);, +                        }, +        } else {, +        } else {, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param visibleSeriesKeys  the visible series keys ({@code null} not, +     * @param xRange  the x-range ({@code null} not permitted)., +     * @return The y-range (possibly {@code null})., +        } else {, +++ b/tests/org/jfree/data/general/DatasetUtilitiesTest.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors.]