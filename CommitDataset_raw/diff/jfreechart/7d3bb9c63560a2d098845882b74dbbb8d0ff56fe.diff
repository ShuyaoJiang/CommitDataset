[+++ b/ChangeLog, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +	(hints): New field,, +	(SWTGraphics2D): Initialise new field,, +	(getRenderingHint): Implemented,, +	(setRenderingHint): Likewise,, +	(getRenderingHints): Likewise,, +	(addRenderingHints): Likewise,, +	(setRenderingHints): Likewise., +, +2007-10-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +	(hints): New field,, +	(SWTGraphics2D): Initialise new field,, +	(getRenderingHint): Implemented,, +	(setRenderingHint): Likewise,, +	(getRenderingHints): Likewise,, +	(addRenderingHints): Likewise,, +	(setRenderingHints): Likewise., +, +2007-10-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/swt/org/jfree/experimental/swt/SWTGraphics2D.java, + * 23-Oct-2007 : Added mechanism for storing RenderingHints (which are , + *               still ignored at this point) (DG);, +    /** , +     * The rendering hints.  For now, these are not used, but at least the, +     * basic mechanism is present., +     */, +    private RenderingHints hints;, +    , +        this.hints = new RenderingHints(null);, +    /**, +     * Returns the current value for the specified hint key, or , +     * <code>null</code> if no value is set., +     * , +     * @param hintKey  the hint key (<code>null</code> permitted)., +     * , +     * @return The hint value, or <code>null</code>., +     * , +     * @see #setRenderingHint(Key, Object), +        return this.hints.get(hintKey);, +    /**, +     * Sets the value for a rendering hint.  For now, this graphics context, +     * ignores all hints., +     * , +     * @param hintKey  the key (<code>null</code> not permitted)., +     * @param hintValue  the value (must be compatible with the specified key)., +     * , +     * @throws IllegalArgumentException if <code>hintValue</code> is not, +     *         compatible with the <code>hintKey</code>., +     *         , +     * @see #getRenderingHint(Key), +    public void setRenderingHint(Key hintKey, Object hintValue) {, +        this.hints.put(hintKey, hintValue);, +    /**, +     * Returns a copy of the hints collection for this graphics context., +     * , +     * @return A copy of the hints collection., +        return (RenderingHints) this.hints.clone();, +    }, +, +    /**, +     * Adds the hints in the specified map to the graphics context, replacing, +     * any existing hints.  For now, this graphics context ignores all hints., +     * , +     * @param hints  the hints (<code>null</code> not permitted)., +     * , +     * @see #setRenderingHints(Map), +     */, +    public void addRenderingHints(Map hints) {, +        this.hints.putAll(hints);, +    }, +, +    /**, +     * Replaces the existing hints with those contained in the specified, +     * map.  Note that, for now, this graphics context ignores all hints., +     * , +     * @param hints  the hints (<code>null</code> not permitted)., +     * , +     * @see #addRenderingHints(Map), +     */, +    public void setRenderingHints(Map hints) {, +        if (hints == null) {, +            throw new NullPointerException("Null 'hints' argument.");, +        }, +        this.hints = new RenderingHints(hints);]