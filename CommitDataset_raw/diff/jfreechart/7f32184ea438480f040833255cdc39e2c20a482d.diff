[+++ b/ChangeLog, +	* source/org/jfree/chart/plot/XYPlot.java, +	(removeDomainMarker(Marker)): New method,, +	(removeDomainMarker(Marker, Layer)): Likewise,, +	(removeDomainMarker(int, Marker, Layer)): Likewise,, +	(removeRangeMarker(Marker)): New method,, +	(removeRangeMarker(Marker, Layer)): Likewise,, +	(removeRangeMarker(int, Marker, Layer)): Likewise., +	, +2007-11-05  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/chart/plot/XYPlot.java, +	(removeDomainMarker(Marker)): New method,, +	(removeDomainMarker(Marker, Layer)): Likewise,, +	(removeDomainMarker(int, Marker, Layer)): Likewise,, +	(removeRangeMarker(Marker)): New method,, +	(removeRangeMarker(Marker, Layer)): Likewise,, +	(removeRangeMarker(int, Marker, Layer)): Likewise., +	, +2007-11-05  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/plot/XYPlot.java, + *                   Richard West;, + * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain, + *               and range markers (DG);, +     * Adds a marker for a specific dataset/renderer and sends a , +     * {@link PlotChangeEvent} to all registered listeners., +     * <P>, +     * Typically a marker will be drawn by the renderer as a line perpendicular, +     * to the domain axis (that the renderer is mapped to), however this is, +     * entirely up to the renderer., +     *, +     * @param index  the dataset/renderer index., +     * @param marker  the marker., +     * @param layer  the layer (foreground or background)., +     * , +     * @see #clearDomainMarkers(int), +     * @see #addRangeMarker(int, Marker, Layer), +     */, +    public void addDomainMarker(int index, Marker marker, Layer layer) {, +        if (marker == null) {, +            throw new IllegalArgumentException("Null 'marker' not permitted.");, +        }, +        if (layer == null) {, +            throw new IllegalArgumentException("Null 'layer' not permitted.");, +        }, +        Collection markers;, +        if (layer == Layer.FOREGROUND) {, +            markers = (Collection) this.foregroundDomainMarkers.get(, +                    new Integer(index));, +            if (markers == null) {, +                markers = new java.util.ArrayList();, +                this.foregroundDomainMarkers.put(new Integer(index), markers);, +            }, +            markers.add(marker);, +        }, +        else if (layer == Layer.BACKGROUND) {, +            markers = (Collection) this.backgroundDomainMarkers.get(, +                    new Integer(index));, +            if (markers == null) {, +                markers = new java.util.ArrayList();, +                this.backgroundDomainMarkers.put(new Integer(index), markers);, +            }, +            markers.add(marker);, +        }, +        marker.addChangeListener(this);, +        notifyListeners(new PlotChangeEvent(this));, +    }, +, +    /**, +     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent} , +     * to all registered listeners., +     *, +     * @param marker  the marker., +     *, +     * @return A boolean indicating whether or not the marker was actually , +     *         removed., +     *, +     * @since 1.0.7, +     */, +    public boolean removeDomainMarker(Marker marker) {, +        return removeDomainMarker(marker, Layer.FOREGROUND);, +    }, +, +    /**, +     * Removes a marker for the domain axis in the specified layer and sends a, +     *, +     * @param marker the marker (<code>null</code> not permitted)., +     * @param layer the layer (foreground or background)., +     *, +     * @return A boolean indicating whether or not the marker was actually , +     *         removed., +     *, +     * @since 1.0.7, +     */, +    public boolean removeDomainMarker(Marker marker, Layer layer) {, +        return removeDomainMarker(0, marker, layer);, +    }, +]