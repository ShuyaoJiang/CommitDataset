[+++ b/ChangeLog, +2007-10-11  David Gilbert  <david.gilbert@object-refinery.com>, +, +	* source/org/jfree/chart/plot/ThermometerPlot.java, +	(DEFAULT_GAP_RADIUS): Renamed DEFAULT_GAP,, +	(gapRadius): Renamed gap,, +	(getGapRadius): Renamed getGap(),, +	(setGapRadius): Renamed setGap(),, +	(getGapDiameter): Removed,, +	(draw): Updated for method name changes,, +	(equals): Likewise., +, +++ b/ChangeLog, +2007-10-11  David Gilbert  <david.gilbert@object-refinery.com>, +, +	* source/org/jfree/chart/plot/ThermometerPlot.java, +	(DEFAULT_GAP_RADIUS): Renamed DEFAULT_GAP,, +	(gapRadius): Renamed gap,, +	(getGapRadius): Renamed getGap(),, +	(setGapRadius): Renamed setGap(),, +	(getGapDiameter): Removed,, +	(draw): Updated for method name changes,, +	(equals): Likewise., +, +++ b/source/org/jfree/chart/plot/ThermometerPlot.java, +     * @deprecated As of 1.0.7, use {@link #getGap()}., +     * @deprecated As of 1.0.7, use {@link #getGap()} times two., +     * The default gap between the outlines representing the thermometer., +    protected static final int DEFAULT_GAP = 5;, +     * The gap between the two outlines the represent the thermometer., +    private int gap = DEFAULT_GAP;, +     * Returns the gap, in Java2D units, between the two outlines that , +     * represent the thermometer., +     * @return The gap., +     * @see #setGap(int), +    public int getGap() {, +        return this.gap;, +     * Sets the gap (in Java2D units) between the two outlines that represent, +     * the thermometer, and sends a {@link PlotChangeEvent} to all registered , +     * listeners., +     * @param gap  the new gap., +     * @see #getGap(), +    public void setGap(int gap) {, +        this.gap = gap;, +        innerBulb.setFrame(midX - getBulbRadius() + getGap(), stemBottom , +                + getGap(), getBulbDiameter() - getGap() * 2, getBulbDiameter(), +                - getGap() * 2);, +        innerStem.setRoundRect(midX - getColumnRadius() + getGap(), , +                interior.getMinY() + getGap(), getColumnDiameter() , +                - getGap() * 2, stemBottom + getBulbDiameter() - getGap() * 2 , +                - stemTop, getColumnDiameter() - getGap() * 2, , +                getColumnDiameter() - getGap() * 2);, +            int i = getColumnDiameter() - getGap() * 2; // already calculated, +            int j = getColumnRadius() - getGap(); // already calculated, +            if (k < (getGap() + interior.getMinY())) {, +                k = (int) (getGap() + interior.getMinY());, +                            midX + getColumnRadius() + getGap(), midY);, +                            - getGap() - stringWidth, midY);, +                            stemBottom + getBulbRadius() + getGap());, +        int tickX1 = midX - getColumnRadius() - getGap() * 2, +        if (this.gap != that.gap) {]