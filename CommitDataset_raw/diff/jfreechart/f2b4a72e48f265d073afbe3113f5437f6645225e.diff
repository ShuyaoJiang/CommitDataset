[+++ b/tests/org/jfree/chart/axis/junit/SegmentedTimelineTests.java, + * Contributor(s):   David Gilbert (for Object Refinery Limited);, +    private static final long FIVE_YEARS = 5 * 365 , +            * SegmentedTimeline.DAY_SEGMENT_SIZE;, +    private static final String[] MS_EXCEPTIONS = {"0", "2", "4", "10", "15", , +        "16", "17", "18", "19", "20", "21", "22", "23", "24", "47", "58", , +        "100", "101"};, +     private static final String[] MS2_BASE_TIMELINE_EXCEPTIONS = {"0", "8", , +         "16", "24", "32", "40", "48", "56", "64", "72", "80", "88", "96", , +         "104", "112", "120", "128", "136"};, +    private static final String[] US_HOLIDAYS = {"2000-01-17", "2000-02-21", , +        "2000-04-21", "2000-05-29", "2000-07-04", "2000-09-04", "2000-11-23", , +        "2000-12-25", "2001-01-01", "2001-01-15", "2001-02-19", "2001-04-13", , +        "2001-05-28", "2001-07-04", "2001-09-03", "2001-09-11", "2001-09-12", , +        "2001-09-13", "2001-09-14", "2001-11-22", "2001-12-25", "2002-01-01", , +        "2002-01-21", "2002-02-18", "2002-03-29", "2002-05-27", "2002-07-04", , +        "2002-09-02", "2002-11-28", "2002-12-25"};, +     private static final String[] FIFTEEN_MIN_EXCEPTIONS = {, +         "2000-01-10 09:00:00", "2000-01-10 09:15:00", "2000-01-10 09:30:00",, +                SegmentedTimeline.NO_DST_TIME_ZONE);, +        assertEquals(SegmentedTimeline.DAY_SEGMENT_SIZE, , +                this.mondayFridayTimeline.getSegmentSize());, +        assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900, , +                this.mondayFridayTimeline.getStartTime());, +                    this.monday.getTime().getTime() + testCycle);, +            SegmentedTimeline.Segment segment2 = timeline.getSegment(, +                    segment1.getSegmentEnd() + 1);, +            assertEquals(segment1.getSegmentNumber() + 1, , +                    segment2.getSegmentNumber());, +            assertEquals(segment1.getSegmentEnd() + 1, , +                    segment2.getSegmentStart());, +            assertEquals(segment1.getSegmentStart() , +                    + timeline.getSegmentSize() - 1, segment1.getSegmentEnd());, +            assertEquals(segment1.getSegmentStart() + timeline.getSegmentSize(),, +                    segment2.getSegmentStart());, +            assertEquals(segment1.getSegmentEnd() + timeline.getSegmentSize(),, +                    segment2.getSegmentEnd());, +                    segment1.getSegmentStart());, +                assertEquals(lastSeg.getSegmentNumber(), , +                        seg.getSegmentNumber());, +                    assertTrue(!timeline.containsDomainRange(, +                            seg1.getSegmentEnd() + 1, , +                            seg2.getSegmentStart() - 1));, +                    assertEquals(0, (seg2.getSegmentStart() , +                            - seg1.getSegmentStart()) % m);, +                    assertEquals(0, (seg2.getSegmentEnd() , +                            - seg1.getSegmentEnd()) % m);, +                    assertEquals(0, (seg2.getMillisecond() , +                            - seg1.getMillisecond()) % m);, +                    assertEquals(seg1.getSegmentStart() + m, , +                            seg2.getSegmentStart());, +                    assertEquals(seg1.getSegmentEnd() + m, , +                            seg2.getSegmentEnd());, +                    assertEquals(seg1.getMillisecond() + m, , +                            seg2.getMillisecond());, +        verifyIncludedAndExcludedSegments(this.mondayFridayTimeline, , +                this.monday.getTime().getTime());, +        verifyIncludedAndExcludedSegments(this.fifteenMinTimeline, , +                this.monday9am.getTime().getTime());, +        verifyExceptionSegments(this.ms2BaseTimeline, , +                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);, +        verifyExceptionSegments(this.mondayFridayTimeline, , +                US_HOLIDAYS, DATE_FORMAT);, +        verifyExceptionSegments(this.fifteenMinTimeline, , +                FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT);, +        long[] exception = verifyFillInExceptions(timeline, exceptionString, , +                fmt);, +        SegmentedTimeline.Segment lastSegment = timeline.getSegment(, +                exception[m - 1]);, +            SegmentedTimeline.Segment segment = timeline.getSegment(, +                    exception[i]);, +            assertEquals(Math.max(0, m - i - 2), , +                    timeline.getExceptionSegmentCount(exception[i] + 1, , +                    exception[m - 1] - 1));, +        verifyFillInExceptions(this.ms2BaseTimeline, , +                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);, +        fillInBaseTimelineExceptions(this.ms2Timeline, , +                MS2_BASE_TIMELINE_EXCEPTIONS, NUMBER_FORMAT);, +    public void textMondayThroughFridayTranslations() throws ParseException {, +        verifyFillInExceptions(this.mondayFridayTimeline, US_HOLIDAYS, , +                DATE_FORMAT);, +        verifyTranslations(this.mondayFridayTimeline, , +                this.monday.getTime().getTime());, +        verifyFillInExceptions(this.fifteenMinTimeline, , +                FIFTEEN_MIN_EXCEPTIONS, DATE_TIME_FORMAT);, +        fillInBaseTimelineExceptions(this.fifteenMinTimeline, , +                US_HOLIDAYS, DATE_FORMAT);, +        fillInBaseTimelineExclusionsAsExceptions(this.fifteenMinTimeline,, +                this.monday9am.getTime().getTime() + FIVE_YEARS);, +        verifyTranslations(this.fifteenMinTimeline, , +                this.monday9am.getTime().getTime());, +            SegmentedTimeline.Segment segment = timeline.getSegment(, +                    millisecond);, +                long translatedValue = timeline.toTimelineValue(, +                        segment.getMillisecond());, +                    new ByteArrayInputStream(buffer.toByteArray()));, +            e.printStackTrace();, +                e = timeline.getTime(((SimpleDateFormat) fmt), +                        .parse(exceptionString[i]));, +                assertEquals(exceptionList.size(), ]