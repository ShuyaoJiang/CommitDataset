[+++ b/ChangeLog, +    * org/jfree/chart/plot/PiePlot.java, +    (drawItem): Use new Paint lookup,, +    (getArcCenter): New protected method,, +    (lookupSectionPaint): Handle GradientPaint., +, +2011-10-16  David Gilbert <david.gilbert@object-refinery.com>, +, +    (Series(Comparable, String)): Initialise vetoableChangeSupport,, +    (setKey): Fire vetoable property change,, +    (clone): Initialise vetoableChangeSupport,, +    (XYSeriesCollection(XYSeries)): Register listener,, +    (addSeries): Check for duplicate key, register listener,, +    (removeSeries): Deregister listener,, +    (removeAllSeries): Likewise,, +    (getSeriesIndex): New method,, +++ b/ChangeLog, +    * org/jfree/chart/plot/PiePlot.java, +    (drawItem): Use new Paint lookup,, +    (getArcCenter): New protected method,, +    (lookupSectionPaint): Handle GradientPaint., +, +2011-10-16  David Gilbert <david.gilbert@object-refinery.com>, +, +    (Series(Comparable, String)): Initialise vetoableChangeSupport,, +    (setKey): Fire vetoable property change,, +    (clone): Initialise vetoableChangeSupport,, +    (XYSeriesCollection(XYSeries)): Register listener,, +    (addSeries): Check for duplicate key, register listener,, +    (removeSeries): Deregister listener,, +    (removeAllSeries): Likewise,, +    (getSeriesIndex): New method,, +++ b/source/org/jfree/chart/plot/PiePlot.java, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +     * {@link PlotChangeEvent} to all registered listeners.  Note that this is, +     * a bitmap drop-shadow generation facility and is separate from the, +     * vector based show option that is controlled via the, +     * {@link setShadowPaint()} method., +                Paint paint = lookupSectionPaint(key, state);, +     * Returns the center for the specified section., +     * Checks to see if the section is exploded and recalculates the, +     * new center if so., +     *, +     * @param state  PiePlotState, +     * @param key  section key., +     *, +     * @return The center for the specified section., +     *, +     * @since 1.0.14, +     */, +    protected Point2D getArcCenter(PiePlotState state, Comparable key) {, +        Point2D center = new Point2D.Double(state.getPieCenterX(), state, +            .getPieCenterY());, +, +        double ep = getExplodePercent(key);, +        double mep = getMaximumExplodePercent();, +        if (mep > 0.0) {, +            ep = ep / mep;, +        }, +        if (ep != 0) {, +            Rectangle2D pieArea = state.getPieArea();, +            Rectangle2D expPieArea = state.getExplodedPieArea();, +            double angle1, angle2;, +            Number n = this.dataset.getValue(key);, +            double value = n.doubleValue();, +, +            if (this.direction == Rotation.CLOCKWISE) {, +                angle1 = state.getLatestAngle();, +                angle2 = angle1 - value / state.getTotal() * 360.0;, +            } else if (this.direction == Rotation.ANTICLOCKWISE) {, +                angle1 = state.getLatestAngle();, +                angle2 = angle1 + value / state.getTotal() * 360.0;, +            } else {, +                throw new IllegalStateException("Rotation type not recognised.");, +            }, +            double angle = (angle2 - angle1);, +, +            Arc2D arc1 = new Arc2D.Double(pieArea, angle1, angle / 2,, +                    Arc2D.OPEN);, +            Point2D point1 = arc1.getEndPoint();, +            Arc2D.Double arc2 = new Arc2D.Double(expPieArea, angle1, angle / 2,, +                    Arc2D.OPEN);, +            Point2D point2 = arc2.getEndPoint();, +            double deltaX = (point1.getX() - point2.getX()) * ep;, +            double deltaY = (point1.getY() - point2.getY()) * ep;, +, +            center = new Point2D.Double(state.getPieCenterX() - deltaX,, +                     state.getPieCenterY() - deltaY);, +, +        }, +        return center;, +    }, +, +    /**, +     * Returns the paint for the specified section. This is equivalent to, +     * <code>lookupSectionPaint(section)</code>., +     * Checks to see if the user set the Paint to be of type RadialGradientPaint, +     * If so it adjusts the center and radius to match the Pie, +     *]