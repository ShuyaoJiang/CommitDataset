[+++ b/ChangeLog, +2009-02-27  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/renderer/RendererUtilities.java, +    (findLiveItemsLowerBound): Added argument checks,, +    (findLiveItemsUpperBound): Correct calculation of mid., +, +++ b/ChangeLog, +2009-02-27  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/renderer/RendererUtilities.java, +    (findLiveItemsLowerBound): Added argument checks,, +    (findLiveItemsUpperBound): Correct calculation of mid., +, +++ b/source/org/jfree/chart/renderer/RendererUtilities.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2007-2009, by Object Refinery Limited., +        if (dataset == null) {, +            throw new IllegalArgumentException("Null 'dataset' argument.");, +        }, +        if (xLow >= xHigh) {, +            throw new IllegalArgumentException("Requires xLow < xHigh.");, +        }, +            // for the index of the highest x-value that is less than xLow, +                int mid = (low + high) / 2;, +            return high;, +                int mid = (low + high) / 2;, +            return high;, +     * Finds the upper index of the range of live items in the specified data, +     * series., +        if (dataset == null) {, +            throw new IllegalArgumentException("Null 'dataset' argument.");, +        }, +        if (xLow >= xHigh) {, +            throw new IllegalArgumentException("Requires xLow < xHigh.");, +        }, +            int mid = (low + high) / 2;, +                mid = (low + high) / 2;, +++ b/ChangeLog, +2009-02-27  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/renderer/RendererUtilities.java, +    (findLiveItemsLowerBound): Added argument checks,, +    (findLiveItemsUpperBound): Correct calculation of mid., +, +++ b/source/org/jfree/chart/renderer/RendererUtilities.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2007-2009, by Object Refinery Limited., +        if (dataset == null) {, +            throw new IllegalArgumentException("Null 'dataset' argument.");, +        }, +        if (xLow >= xHigh) {, +            throw new IllegalArgumentException("Requires xLow < xHigh.");, +        }, +            // for the index of the highest x-value that is less than xLow, +                int mid = (low + high) / 2;, +            return high;, +                int mid = (low + high) / 2;, +            return high;, +     * Finds the upper index of the range of live items in the specified data, +     * series., +        if (dataset == null) {, +            throw new IllegalArgumentException("Null 'dataset' argument.");, +        }, +        if (xLow >= xHigh) {, +            throw new IllegalArgumentException("Requires xLow < xHigh.");, +        }, +            int mid = (low + high) / 2;, +                mid = (low + high) / 2;, +++ b/tests/org/jfree/chart/renderer/junit/RendererUtilitiesTests.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2007-2009, by Object Refinery Limited and Contributors., +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 2.0,, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 2.0,, +        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 3.0,, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0,, +        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0,, +        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 4.0,, +        // check a series with repeating items, +        d.addSeries("S5", new double[][] {{1.0, 2.0, 2.0, 2.0, 3.0}, {2.0, 2.0,, +                2.0, 2.0, 2.0}});, +        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.0,, +                4.0));, +        assertEquals(0, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.0,, +                4.0));, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.0,, +                4.0));, +        assertEquals(4, RendererUtilities.findLiveItemsLowerBound(d, 4, 3.0,, +                4.0));, +, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 2, 0.1,, +        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 3, 0.0,, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 3, 1.0,, +        assertEquals(3, RendererUtilities.findLiveItemsLowerBound(d, 4, 0.1,, +        assertEquals(2, RendererUtilities.findLiveItemsLowerBound(d, 4, 1.1,, +        assertEquals(1, RendererUtilities.findLiveItemsLowerBound(d, 4, 2.2,, +, +        // check a series with repeating items, +        d.addSeries("S6", new double[][] {{3.0, 2.0, 2.0, 2.0, 1.0}, {2.0, 2.0,, +                2.0, 2.0, 2.0}});]