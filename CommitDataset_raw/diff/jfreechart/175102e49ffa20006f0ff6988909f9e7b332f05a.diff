[+++ b/ChangeLog, +    * source/org/jfree/chart/StandardChartTheme.java, +    (smallFont): New field,, +    (crosshairPaint): New field,, +    (createDarknessTheme): Initilise crosshairPaint,, +    (StandardChartTheme): Initialise new fields,, +    (getCrosshairPaint): New method,, +    (setCrosshairPaint): Likewise,, +    (applyToXYPlot): Apply crosshair paint and process annotations,, +    (applyToXYAnnotation): New method,, +    (equals): Check new fields,, +    (writeObject): Handle crosshairPaint,, +    (readObject): Likewise., +    , +2008-09-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/StandardChartTheme.java, +    (smallFont): New field,, +    (crosshairPaint): New field,, +    (createDarknessTheme): Initilise crosshairPaint,, +    (StandardChartTheme): Initialise new fields,, +    (getCrosshairPaint): New method,, +    (setCrosshairPaint): Likewise,, +    (applyToXYPlot): Apply crosshair paint and process annotations,, +    (applyToXYAnnotation): New method,, +    (equals): Check new fields,, +    (writeObject): Handle crosshairPaint,, +    (readObject): Likewise., +    , +2008-09-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/StandardChartTheme.java, +import org.jfree.chart.annotations.XYAnnotation;, +import org.jfree.chart.annotations.XYTextAnnotation;, +    /**, +     * The small font size., +     */, +    private Font smallFont;, +, +    /** The crosshair paint. */, +    private transient Paint crosshairPaint;, +, +        theme.crosshairPaint = Color.red;, +        this.smallFont = new Font("Tahoma", Font.PLAIN, 10);, +        this.crosshairPaint = Color.blue;, +     * Returns the crosshair paint., +     *, +     * @return The crosshair paint., +     */, +    public Paint getCrosshairPaint() {, +        return this.crosshairPaint;, +    }, +, +    /**, +     * Sets the crosshair paint., +     *, +     * @param paint  the paint (<code>null</code> not permitted)., +     */, +    public void setCrosshairPaint(Paint paint) {, +        if (paint == null) {, +            throw new IllegalArgumentException("Null 'paint' argument.");, +        }, +        this.crosshairPaint = paint;, +    }, +, +    /**, +        plot.setDomainCrosshairPaint(this.crosshairPaint);, +        plot.setRangeCrosshairPaint(this.crosshairPaint);, +, +        // process all annotations, +        Iterator iter = plot.getAnnotations().iterator();, +        while (iter.hasNext()) {, +            XYAnnotation a = (XYAnnotation) iter.next();, +            applyToXYAnnotation(a);, +        }, +, +     * Applies the settings of this theme to the specified annotation., +     *, +     * @param annotation  the annotation., +     */, +    protected void applyToXYAnnotation(XYAnnotation annotation) {, +        if (annotation == null) {, +            throw new IllegalArgumentException("Null 'annotation' argument.");, +        }, +        if (annotation instanceof XYTextAnnotation) {, +            XYTextAnnotation xyta = (XYTextAnnotation) annotation;, +            xyta.setFont(this.smallFont);, +            xyta.setPaint(this.itemLabelPaint);, +        }, +    }, +, +    /**, +        if (!this.smallFont.equals(that.smallFont)) {, +            return false;, +        }, +        if (!PaintUtilities.equal(this.crosshairPaint, that.crosshairPaint)) {, +            return false;, +        }, +        SerialUtilities.writePaint(this.crosshairPaint, stream);]