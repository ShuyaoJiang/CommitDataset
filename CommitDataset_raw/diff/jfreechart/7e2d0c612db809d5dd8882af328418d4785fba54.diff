[+++ b/source/org/jfree/chart/plot/CategoryPlot.java, +        CategoryAxis result = (CategoryAxis) this.domainAxes.get(index);, +        AxisLocation result = this.domainAxisLocations.get(index);, +        } else {, +        for (CategoryAxis xAxis : this.domainAxes.values()) {, +            if (xAxis != null) {, +                xAxis.removeChangeListener(this);, +        for (CategoryAxis xAxis : this.domainAxes.values()) {, +            if (xAxis != null) {, +                xAxis.configure();, +        ValueAxis result = this.rangeAxes.get(index);, +        ValueAxis existing = this.rangeAxes.get(index);, +        AxisLocation result = this.rangeAxisLocations.get(index);, +        for (ValueAxis yAxis : this.rangeAxes.values()) {, +            if (yAxis != null) {, +                yAxis.removeChangeListener(this);, +        for (ValueAxis yAxis : this.rangeAxes.values()) {, +            if (yAxis != null) {, +                yAxis.configure();, +     * Returns the dataset with the given index, or {@code null} if there is, +     * no dataset., +     * @param index  the dataset index (must be &gt;= 0)., +     * @return The dataset (possibly {@code null})., +        return this.datasets.get(index);, +     * Sets a dataset for the plot and sends a change notification to all, +     * registered listeners., +     * @param index  the dataset index (must be &gt;= 0)., +     * @param dataset  the dataset ({@code null} permitted)., +     * @param dataset  the dataset ({@code null} not permitted)., +        for (Entry<Integer, CategoryDataset> entry: this.datasets.entrySet()) {, +            if (entry.getValue() == dataset) {, +                return entry.getKey();, +        return -1;, +        List<Integer> axisIndices = new java.util.ArrayList<Integer>(1);, +        axisIndices.add(axisIndex);, +        ParamChecks.requireNonNegative(index, "index");, +        this.datasetToDomainAxesMap.put(index, new ArrayList(axisIndices));, +     * @param index  the dataset index (must be &gt;= 0)., +        ParamChecks.requireNonNegative(index, "index");, +        } else {, +        ParamChecks.requireNonNegative(index, "index");, +        this.datasetToRangeAxesMap.put(index, new ArrayList(axisIndices));, +     * @param index  the dataset index (must be &gt;= 0)., +        ParamChecks.requireNonNegative(index, "index");, +        ValueAxis axis;, +        } else {, +     * @return The renderer (possibly {@code null})., +        CategoryItemRenderer renderer = this.renderers.get(index);, +        if (renderer == null) {, +            return this.renderers.get(0);, +        return renderer;, +        int datasetIndex = indexOf(dataset);, +        if (datasetIndex < 0) {, +            return null;, +        CategoryItemRenderer renderer = this.renderers.get(datasetIndex);, +        if (renderer == null) {, +            return getRenderer();, +        return renderer;, +        for (CategoryDataset dataset: this.datasets.values()) {, +                int datasetIndex = indexOf(dataset);, +            } else if (this.orientation == PlotOrientation.VERTICAL) {, +        } else {, +        for (ValueAxis yAxis : this.rangeAxes.values()) {, +        } else {, +            } else {, +        } else {, +        } else if (layer == Layer.BACKGROUND) {, +        } else {, +        } else if (layer == Layer.BACKGROUND) {, +        } else {, +            Rectangle2D plotArea, AxisSpace space) {, +            if (this.orientation.isHorizontal()) {, +            } else if (this.orientation.isVertical()) {, +            for (CategoryAxis xAxis : this.domainAxes.values()) {, +                    int i = getDomainAxisIndex(xAxis);, +            Rectangle2D plotArea, AxisSpace space) {, +            if (this.orientation.isHorizontal()) {, +            } else if (this.orientation == PlotOrientation.VERTICAL) {, +        } else {, +            for (ValueAxis yAxis : this.rangeAxes.values()) {, +                    int i = findRangeAxisIndex(yAxis);, +        } else {, +        for (CategoryItemRenderer renderer : this.renderers.values()) {, +            int i = getIndexOf(renderer);, +        for (CategoryItemRenderer renderer : this.renderers.values()) {, +            int i = getIndexOf(renderer);, +        List<Integer> datasetIndices = getDatasetIndices(order);, +        for (int i : datasetIndices) {, +, +        List<Integer> rendererIndices = getRendererIndices(order);, +        for (int i : rendererIndices) {, +        for (int i : rendererIndices) {, +     * Returns the indices of the non-null datasets in the specified order., +     * , +     * @param order  the order ({@code null} not permitted)., +     * , +     * @return The list of indices. , +     */, +    private List<Integer> getDatasetIndices(DatasetRenderingOrder order) {, +        List<Integer> result = new ArrayList<Integer>();]