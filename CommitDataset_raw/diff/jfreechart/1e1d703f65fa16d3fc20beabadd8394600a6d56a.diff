[+++ b/ChangeLog, +	* source/org/jfree/chart/HashUtilities.java, +	(hashCode(int, BooleanList)): New method,, +	(hashCode(int, PaintList)): Likewise,, +	(hashCode(int, StrokeList)): Likewise., +, +2007-12-05  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/chart/HashUtilities.java, +	(hashCode(int, BooleanList)): New method,, +	(hashCode(int, PaintList)): Likewise,, +	(hashCode(int, StrokeList)): Likewise., +, +2007-12-05  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/HashUtilities.java, + * 05-Dec-2007 : Added special methods to handle BooleanList, PaintList,, + *               and StrokeList (DG);, +import org.jfree.util.BooleanList;, +import org.jfree.util.PaintList;, +import org.jfree.util.StrokeList;, +, +    /**, +     * Computes a hash code for a {@link BooleanList}.  In the latest version, +     * of JCommon, the {@link BooleanList} class should implement the hashCode(), +     * method correctly, but we compute it here anyway so that we can work with , +     * older versions of JCommon (back to 1.0.0)., +     * , +     * @param pre  the seed value., +     * @param list  the list (<code>null</code> permitted)., +     * , +     * @return The hash code., +     * , +     * @since 1.0.9, +     */, +    public static int hashCode(int pre, BooleanList list) {, +        if (list == null) {, +            return pre;, +        }, +        int result = 127;, +        int size = list.size();, +        result = HashUtilities.hashCode(result, size);, +        , +        // for efficiency, we just use the first, last and middle items to, +        // compute a hashCode..., +        if (size > 0) {, +            result = HashUtilities.hashCode(result, list.getBoolean(0));, +            if (size > 1) {, +                result = HashUtilities.hashCode(result, , +                        list.getBoolean(size - 1));, +                if (size > 2) {, +                    result = HashUtilities.hashCode(result, , +                            list.getBoolean(size / 2));, +                }, +            }, +        }, +        return 37 * pre + result;, +    }, +, +    /**, +     * Computes a hash code for a {@link PaintList}.  In the latest version, +     * of JCommon, the {@link PaintList} class should implement the hashCode(), +     * method correctly, but we compute it here anyway so that we can work with , +     * older versions of JCommon (back to 1.0.0)., +     * , +     * @param pre  the seed value., +     * @param list  the list (<code>null</code> permitted)., +     * , +     * @return The hash code., +     * , +     * @since 1.0.9, +     */, +    public static int hashCode(int pre, PaintList list) {, +        if (list == null) {, +            return pre;, +        }, +        int result = 127;, +        int size = list.size();, +        result = HashUtilities.hashCode(result, size);, +        , +        // for efficiency, we just use the first, last and middle items to, +        // compute a hashCode..., +        if (size > 0) {, +            result = HashUtilities.hashCode(result, list.getPaint(0));, +            if (size > 1) {, +                result = HashUtilities.hashCode(result, , +                        list.getPaint(size - 1));, +                if (size > 2) {, +                    result = HashUtilities.hashCode(result, , +                            list.getPaint(size / 2));, +                }, +            }, +        }, +        return 37 * pre + result;, +    }, +, +    /**, +     * Computes a hash code for a {@link StrokeList}.  In the latest version, +     * of JCommon, the {@link StrokeList} class should implement the hashCode()]