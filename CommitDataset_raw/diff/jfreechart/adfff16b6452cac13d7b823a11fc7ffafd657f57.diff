[+++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +        if (this.autoRange != auto) {, +    }, +++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +        if (this.autoRange != auto) {, +    }, +++ b/src/main/java/org/jfree/chart/fx/interaction/ZoomHandlerFX.java, + * Contributor(s):   -;, +import javafx.scene.input.MouseEvent;, +import org.jfree.util.ShapeUtilities;, +            this.startPoint = ShapeUtilities.getPointInRectangle(e.getX(),, +                    e.getY(), dataArea);, +        boolean hZoom, vZoom;, +        , +        boolean hZoom, vZoom;, +        if (z.getOrientation().isHorizontal()) {, +            hZoom = z.isRangeZoomable();, +            vZoom = z.isDomainZoomable();, +        } else {, +            hZoom = z.isDomainZoomable();, +            vZoom = z.isRangeZoomable();, +        }, +                Rectangle2D zoomArea = new Rectangle2D.Double(x, y, w, h);, +++ b/src/main/java/org/jfree/chart/axis/ValueAxis.java, +        if (this.autoRange != auto) {, +    }, +++ b/src/main/java/org/jfree/chart/fx/interaction/ZoomHandlerFX.java, + * Contributor(s):   -;, +import javafx.scene.input.MouseEvent;, +import org.jfree.util.ShapeUtilities;, +            this.startPoint = ShapeUtilities.getPointInRectangle(e.getX(),, +                    e.getY(), dataArea);, +        boolean hZoom, vZoom;, +        , +        boolean hZoom, vZoom;, +        if (z.getOrientation().isHorizontal()) {, +            hZoom = z.isRangeZoomable();, +            vZoom = z.isDomainZoomable();, +        } else {, +            hZoom = z.isDomainZoomable();, +            vZoom = z.isRangeZoomable();, +        }, +                Rectangle2D zoomArea = new Rectangle2D.Double(x, y, w, h);, +++ b/src/main/java/org/jfree/chart/renderer/xy/XYStepRenderer.java, + *                   Matthias Noebl (for Cropster GmbH);, + * 29-Feb-2015 : Improved performance by only drawing visible lines, +import org.jfree.chart.util.LineUtilities;, +                            transX1, dataArea);, +                            transXs, dataArea);, +                            transXs, dataArea);, +                            transX1, dataArea);, +                            transY1, dataArea);, +                            transY0, dataArea);, +                            transY1, dataArea);, +                            transY1, dataArea);, +            double x1, double y1, Rectangle2D dataArea) {, +        boolean visible = LineUtilities.clipLine(line, dataArea);, +        if (visible), +        {, +    }]