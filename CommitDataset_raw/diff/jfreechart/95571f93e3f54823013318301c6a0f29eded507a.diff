[+++ b/source/org/jfree/chart/axis/LogAxis.java, +        double axisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +++ b/source/org/jfree/chart/axis/LogAxis.java, +        double axisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +++ b/source/org/jfree/chart/axis/NumberAxis.java, + * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors., +        return new NumberTickUnitSource();, +        return new NumberTickUnitSource(true);, +        return new NumberTickUnitSource(false, numberFormat);, +        return new NumberTickUnitSource(true, numberFormat);, +        double guess = unit1.getSize();, +        if (unitHeight > 0) {, +            guess = (tickLabelHeight / unitHeight) * unit1.getSize();, +        }, +        NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(, +                guess);, +++ b/source/org/jfree/chart/axis/LogAxis.java, +        double axisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +        double logAxisMin = calculateLog(Math.max(this.smallestValue, , +                range.getLowerBound()));, +++ b/source/org/jfree/chart/axis/NumberAxis.java, + * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors., +        return new NumberTickUnitSource();, +        return new NumberTickUnitSource(true);, +        return new NumberTickUnitSource(false, numberFormat);, +        return new NumberTickUnitSource(true, numberFormat);, +        double guess = unit1.getSize();, +        if (unitHeight > 0) {, +            guess = (tickLabelHeight / unitHeight) * unit1.getSize();, +        }, +        NumberTickUnit unit2 = (NumberTickUnit) tickUnits.getCeilingTickUnit(, +                guess);, +++ b/source/org/jfree/chart/axis/NumberTickUnitSource.java, +import org.jfree.util.ObjectUtilities;, + * that are multiples of 1, 2 or 5 times some power of 10., +    private boolean integers;, +    , +    /** The number formatter to use (an override, it can be null). */, +    private NumberFormat formatter;, +, +        this(false);, +    }, +    , +    /**, +     * Creates a new instance., +     * , +     * @param integers  show integers only. , +     */, +    public NumberTickUnitSource(boolean integers) {, +        this(integers, null);, +    }, +    , +    /**, +     * Creates a new instance., +     * , +     * @param integers  show integers only?, +     * @param formatter  a formatter for the axis tick labels ({@code null} , +     *         permitted)., +     */, +    public NumberTickUnitSource(boolean integers, NumberFormat formatter) {, +        this.integers = integers;, +        this.formatter = formatter;, +        if (Double.isInfinite(size)) {, +            throw new IllegalArgumentException("Must be finite.");, +        }, +        if (this.integers) {, +            power = Math.max(this.power, 0);, +        }, +        boolean done = false;, +        // step down in size until the current size is too small or there are , +        // no more units, +        while (!done) {, +            done = !previous();, +            if (getTickSize() < size) {, +                next();, +                done = true;, +            }, +        }, +            factor = 2;, +            return true;, +        }, +        if (factor == 2) {, +            if (power == 300) {, +                return false;, +            }, +            if (this.integers && power == 0 || power == -300) {, +                return false;]