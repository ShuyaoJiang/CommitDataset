[+++ b/ChangeLog, +    Patch 2868585 by Peter Becker:, +    * source/org/jfree/chart/renderer/BoxAndWhiskerRenderer.java, +    (useOutlinePaintForWhiskers): New field,, +    (getUseOutlinePaintForWhiskers): New method,, +    (setUseOutlinePaintForWhiskers): Likewise,, +    (drawHorizontalItem): Use new flag,, +    (drawVerticalItem): Likewise,, +    (equals): Check new flag., +, +2009-09-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    Patch 2868585 by Peter Becker:, +    * source/org/jfree/chart/renderer/BoxAndWhiskerRenderer.java, +    (useOutlinePaintForWhiskers): New field,, +    (getUseOutlinePaintForWhiskers): New method,, +    (setUseOutlinePaintForWhiskers): Likewise,, +    (drawHorizontalItem): Use new flag,, +    (drawVerticalItem): Likewise,, +    (equals): Check new flag., +, +2009-09-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java, + *                   Peter Becker (patch 2868585);, + * 28-Sep-2009 : Added useOutlinePaintForWhiskers flag, see patch 2868585, + *               by Peter Becker (DG);, +     * A flag that, if <code>true</code>, causes the whiskers to be drawn, +     * using the outline paint for the series.  The default value is, +     * <code>false</code> and in that case the regular series paint is used., +     *, +     * @since 1.0.14, +     */, +    private boolean useOutlinePaintForWhiskers;, +, +    /**, +        this.useOutlinePaintForWhiskers = false;, +     * Returns the flag that, if <code>true</code>, causes the whiskers to, +     * be drawn using the series outline paint., +     *, +     * @return A boolean., +     *, +     * @since 1.0.14, +     */, +    public boolean getUseOutlinePaintForWhiskers() {, +        return useOutlinePaintForWhiskers;, +    }, +, +    /**, +     * Sets the flag that, if <code>true</code>, causes the whiskers to, +     * be drawn using the series outline paint, and sends a, +     * {@link RendererChangeEvent} to all registered listeners., +     *, +     * @@param flag  the new flag value., +     *, +     * @since 1.0.14, +     */, +    public void setUseOutlinePaintForWhiskers(boolean flag) {, +        if (this.useOutlinePaintForWhiskers == flag) {, +            return;, +        }, +        this.useOutlinePaintForWhiskers = flag;, +        fireChangeEvent();, +    }, +, +    /**, +    public void drawItem(Graphics2D g2, CategoryItemRendererState state,, +        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,, +        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column,, +            CategoryItemRendererState state, Rectangle2D dataArea,, +            CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis,, +            CategoryDataset dataset, int row, int column) {, +            // draw the box..., +            box = new Rectangle2D.Double(Math.min(xxQ1, xxQ3), yy,, +                    Math.abs(xxQ1 - xxQ3), state.getBarWidth());, +            if (this.fillBox) {, +                g2.fill(box);, +            }, +, +            Paint outlinePaint = getItemOutlinePaint(row, column);, +            if (this.useOutlinePaintForWhiskers) {, +                g2.setPaint(outlinePaint);, +            }, +            g2.setPaint(outlinePaint);, +    public void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state,, +        Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,, +        ValueAxis rangeAxis, CategoryDataset dataset, int row, int column) {, +            // draw the body..., +            box = new Rectangle2D.Double(xx, Math.min(yyQ1, yyQ3),, +                    state.getBarWidth(), Math.abs(yyQ1 - yyQ3));, +            if (this.fillBox) {, +                g2.fill(box);, +            }, +, +            Paint outlinePaint = getItemOutlinePaint(row, column);, +            if (this.useOutlinePaintForWhiskers) {, +                g2.setPaint(outlinePaint);, +            }, +            g2.setPaint(outlinePaint);]