[+++ b/source/org/jfree/data/time/TimeSeriesCollection.java, +import java.beans.PropertyChangeEvent;, +import java.beans.PropertyVetoException;, +import java.beans.VetoableChangeListener;, +import org.jfree.data.general.Series;, +        XYRangeInfo, VetoableChangeListener, Serializable {, +     * Returns the index of the series with the specified key, or -1 if no, +     * series has that key., +     * , +     * @param key  the key (<code>null</code> not permitted)., +     * , +     * @return The index., +     * , +     * @since 1.0.17, +     */, +    public int getSeriesIndex(Comparable key) {, +        ParamChecks.nullNotPermitted(key, "key");, +        int seriesCount = getSeriesCount();, +        for (int i = 0; i < seriesCount; i++) {, +            TimeSeries series = (TimeSeries) this.data.get(i);, +            if (key.equals(series.getKey())) {, +                return i;, +            }, +        }, +        return -1;, +    }, +, +    /**, +        series.addVetoableChangeListener(this);, +        series.removeVetoableChangeListener(this);, +            series.removeVetoableChangeListener(this);, +     * Receives notification that the key for one of the series in the , +     * collection has changed, and vetos it if the key is already present in , +     * the collection., +     * , +     * @param e  the event., +     * , +     * @since 1.0.17, +     */, +    @Override, +    public void vetoableChange(PropertyChangeEvent e), +            throws PropertyVetoException {, +        // if it is not the series name, then we have no interest, +        if (!"Key".equals(e.getPropertyName())) {, +            return;, +        }, +        , +        // to be defensive, let's check that the source series does in fact, +        // belong to this collection, +        Series s = (Series) e.getSource();, +        if (getSeriesIndex(s.getKey()) == -1) {, +            throw new IllegalStateException("Receiving events from a series " +, +                    "that does not belong to this collection.");, +        }, +        // check if the new series name already exists for another series, +        Comparable key = (Comparable) e.getNewValue();, +        if (getSeriesIndex(key) >= 0) {, +            throw new PropertyVetoException("Duplicate key2", e);, +        }, +    }, +, +    /**]