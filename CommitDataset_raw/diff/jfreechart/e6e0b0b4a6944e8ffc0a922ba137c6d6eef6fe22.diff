[+++ b/ChangeLog, +2008-07-09  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/title/CompositeTitle.java, +    (backgroundPaint): New field,, +    (CompositeTitle): Initialise new field,, +    (getBackgroundPaint): New method,, +    (setBackgroundPaint): Likewise,, +    (draw): Fill background if necessary,, +    (equals): Check backgroundPaint,, +    (writeObject): Added serialization support for backgroundPaint,, +    (readObject): Likewise., +, +++ b/ChangeLog, +2008-07-09  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/title/CompositeTitle.java, +    (backgroundPaint): New field,, +    (CompositeTitle): Initialise new field,, +    (getBackgroundPaint): New method,, +    (setBackgroundPaint): Likewise,, +    (draw): Fill background if necessary,, +    (equals): Check backgroundPaint,, +    (writeObject): Added serialization support for backgroundPaint,, +    (readObject): Likewise., +, +++ b/source/org/jfree/chart/title/CompositeTitle.java, + * 09-Jul-2008 : Added backgroundPaint field (DG);, +import java.awt.Paint;, +import java.io.IOException;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import org.jfree.chart.event.TitleChangeEvent;, +import org.jfree.io.SerialUtilities;, +import org.jfree.util.PaintUtilities;, +    /**, +     * The background paint., +     *, +     * @since 1.0.11, +     */, +    private transient Paint backgroundPaint;, +, +        this.backgroundPaint = null;, +    }, +, +    /**, +     * Returns the background paint., +     *, +     * @return The paint (possibly <code>null</code>)., +     *, +     * @since 1.0.11, +     */, +    public Paint getBackgroundPaint() {, +        return this.backgroundPaint;, +    }, +, +    /**, +     * Sets the background paint and sends a {@link TitleChangeEvent} to all, +     * registered listeners.  If you set this attribute to <code>null</code>,, +     * no background is painted (which makes the title background transparent)., +     *, +     * @param paint  the background paint (<code>null</code> permitted)., +     *, +     * @since 1.0.11, +     */, +    public void setBackgroundPaint(Paint paint) {, +        this.backgroundPaint = paint;, +        notifyListeners(new TitleChangeEvent(this));, +        if (this.backgroundPaint != null) {, +            g2.setPaint(this.backgroundPaint);, +            g2.fill(area);, +        }, +        if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {, +            return false;, +        return super.equals(obj);, +    }, +, +    /**, +     * Provides serialization support., +     *, +     * @param stream  the output stream., +     *, +     * @throws IOException  if there is an I/O error., +     */, +    private void writeObject(ObjectOutputStream stream) throws IOException {, +        stream.defaultWriteObject();, +        SerialUtilities.writePaint(this.backgroundPaint, stream);, +    }, +, +    /**, +     * Provides serialization support., +     *, +     * @param stream  the input stream., +     *, +     * @throws IOException  if there is an I/O error., +     * @throws ClassNotFoundException  if there is a classpath problem., +     */, +    private void readObject(ObjectInputStream stream), +            throws IOException, ClassNotFoundException {, +        stream.defaultReadObject();]