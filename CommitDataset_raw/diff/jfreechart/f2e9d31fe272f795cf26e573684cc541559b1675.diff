[+++ b/source/org/jfree/chart/util/PaintAlpha.java, + * (C) Copyright 2011-2013 by DaveLaw and Contributors., + * Contributor(s):   David Gilbert (for Object Refinery Limited);, + * 03-Jul-2012 : JDK 1.6 References made reflective for JDK 1.3 compatibility , + *               (DaveLaw);, + * 16-Sep-2013 : Removed reflection since we are requiring JDK 1.6 now (DG), +import java.awt.LinearGradientPaint;, +import java.awt.RadialGradientPaint;, + * , + * @since 1.0.15, +        if (paint instanceof LinearGradientPaint) {, +            return darkerLinearGradientPaint((LinearGradientPaint) paint);, +        if (paint instanceof RadialGradientPaint) {, +            return darkerRadialGradientPaint((RadialGradientPaint) paint);, +            try {, +                return darkerTexturePaint((TexturePaint) paint);, +            }, +            catch (Exception e) {, +                /*, +                 * Lots can go wrong while fiddling with Images, Color Models, +                 * & such!  If anything at all goes awry, just return the original, +                 * TexturePaint.  (TexturePaint's are immutable anyway, so no harm, +                 * done), +                 */, +                return paint;, +            }, +     * Create a new <code>GradientPaint</code> with its colors darkened., +     * @param paint  the gradient paint (<code>null</code> not permitted)., +    private static Paint darkerLinearGradientPaint(LinearGradientPaint paint) {, +        final Color[] paintColors = paint.getColors();, +        for (int i = 0; i < paintColors.length; i++) {, +            paintColors[i] = darker(paintColors[i]);, +        return new LinearGradientPaint(paint.getStartPoint(),, +                paint.getEndPoint(), paint.getFractions(), paintColors,, +                paint.getCycleMethod(), paint.getColorSpace(), , +                paint.getTransform());, +    private static Paint darkerRadialGradientPaint(RadialGradientPaint paint) {, +        final Color[] paintColors = paint.getColors();, +        for (int i = 0; i < paintColors.length; i++) {, +            paintColors[i] = darker(paintColors[i]);, +        return new RadialGradientPaint(paint.getCenterPoint(), , +                paint.getRadius(), paint.getFocusPoint(), , +                paint.getFractions(), paintColors, paint.getCycleMethod(),, +                paint.getColorSpace(), paint.getTransform());, +     * Create a new <code>TexturePaint</code> with its colors darkened., +     * then darkening each color-pixel individually!, +    private static TexturePaint darkerTexturePaint(TexturePaint paint) {, +         * Color Models with pre-multiplied Alpha tested OK without any, +         * Indexed Color Models (sort of a Palette) CANNOT be simply, +         * Fortunately, IndexColorModel.getComponents(..) resolves the colors., +         * The resolved colors can then be multiplied by our FACTOR., +         * color to the "nearest" in the Palette., +         * It is quite possible that the "nearest" color is the ORIGINAL, +         * color!  In the worst case, the returned Image will be identical to, +         * For the other 2 Color Models, java.awt.image.ComponentColorModel and, +             * applicable Image Types consist only of color or grey channels:, +     * Note: when constructing the clone, the original Color Model Object is, +     * known Color Models<br>, +     * @return a new BufferedImage reusing the original's Color Model &]