[+++ b/src/main/java/org/jfree/chart/ui/LCBLayout.java, +/* ===========================================================, + * JFreeChart : a free chart library for the Java(tm) platform, + * ===========================================================, + *, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + *, + * Project Info:  http://www.jfree.org/jfreechart/index.html, + *, + * This library is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as published by, + * the Free Software Foundation; either version 2.1 of the License, or, + * (at your option) any later version., + *, + * This library is distributed in the hope that it will be useful, but, + * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY, + * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public, + * License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this library; if not, write to the Free Software, + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,, + * USA., + *, + * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. , + * Other names may be trademarks of their respective owners.], + *, + */, +    public LCBLayout(int maxrows) {, +    @Override, +    public Dimension preferredLayoutSize(Container parent) {, +            Insets insets = parent.getInsets();, +            int ncomponents = parent.getComponentCount();, +            int nrows = ncomponents / COLUMNS;, +                    Component component = parent.getComponent(r * COLUMNS + c);, +                    Dimension d = component.getPreferredSize();, +            int totalWidth = this.colWidth[0] + this.labelGap , +    @Override, +    public Dimension minimumLayoutSize(Container parent) {, +            Insets insets = parent.getInsets();, +            int ncomponents = parent.getComponentCount();, +            int nrows = ncomponents / COLUMNS;, +                    Component component = parent.getComponent(r * COLUMNS + c);, +                    Dimension d = component.getMinimumSize();, +            int totalWidth = this.colWidth[0] + this.labelGap , +    @Override, +    public void layoutContainer(Container parent) {, +            Insets insets = parent.getInsets();, +            int ncomponents = parent.getComponentCount();, +            int nrows = ncomponents / COLUMNS;, +                    Component component = parent.getComponent(r * COLUMNS + c);, +                    Dimension d = component.getPreferredSize();, +            int totalWidth = this.colWidth[0] + this.colWidth[1] , +            int available = parent.getWidth() - insets.left , +                    int i = r * COLUMNS + c;, +                        Component component = parent.getComponent(i);, +                        Dimension d = component.getPreferredSize();, +                        int h = d.height;, +                        int adjust = (this.rowHeight[r] - h) / 2;, +    public void addLayoutComponent(Component comp) {, +    @Override, +    public void removeLayoutComponent(Component comp) {, +    @Override, +    public void addLayoutComponent(String name, Component comp) {, +    public void removeLayoutComponent(String name, Component comp) {]