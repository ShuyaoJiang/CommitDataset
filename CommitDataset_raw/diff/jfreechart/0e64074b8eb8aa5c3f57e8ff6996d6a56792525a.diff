[+++ b/ChangeLog, +    * source/org/jfree/chart/title/TextTitle.java, +    (maximumLinesToDisplay): New field,, +    (getMaximumLinesToDisplay): New method,, +    (setMaximumLinesToDisplay): Likewise,, +    (arrangeFN): Pass maximumLinesToDisplay,, +    (arrangeRR): Likewise,, +    (equals): Added tests for additional fields., +, +2008-04-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/title/TextTitle.java, +    (maximumLinesToDisplay): New field,, +    (getMaximumLinesToDisplay): New method,, +    (setMaximumLinesToDisplay): Likewise,, +    (arrangeFN): Pass maximumLinesToDisplay,, +    (arrangeRR): Likewise,, +    (equals): Added tests for additional fields., +, +2008-04-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/title/TextTitle.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2008, by David Berry and Contributors., + * 28-Apr-2008 : Added option for maximum lines, and fixed minor bugs in, + *               equals() method (DG);, +     * The maximum number of lines to display., +     *, +     * @since 1.0.10, +     */, +    private int maximumLinesToDisplay = Integer.MAX_VALUE;, +, +    /**, +     * Sets the text alignment and sends a {@link TitleChangeEvent} to, +     * all registered listeners., +     * Returns the maximum number of lines to display., +     *, +     * @return The maximum., +     *, +     * @since 1.0.10, +     *, +     * @see #setMaximumLinesToDisplay(int), +     */, +    public int getMaximumLinesToDisplay() {, +    	return this.maximumLinesToDisplay;, +    }, +, +    /**, +     * Sets the maximum number of lines to display and sends a, +     * {@link TitleChangeEvent} to all registered listeners., +     *, +     * @param max  the maximum., +     *, +     * @since 1.0.10., +     *, +     * @see #getMaximumLinesToDisplay(), +     */, +    public void setMaximumLinesToDisplay(int max) {, +    	this.maximumLinesToDisplay = max;, +    	notifyListeners(new TitleChangeEvent(this));, +    }, +, +    /**, +                    this.paint, maxWidth, this.maximumLinesToDisplay,, +                    new G2TextMeasurer(g2));, +                    this.paint, maxWidth, this.maximumLinesToDisplay,, +                    new G2TextMeasurer(g2));, +                    this.paint, maxWidth, this.maximumLinesToDisplay,, +                    new G2TextMeasurer(g2));, +                    this.paint, maxWidth, this.maximumLinesToDisplay,, +                    new G2TextMeasurer(g2));, +        if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {, +        	return false;, +        }, +        if (this.expandToFitSpace != that.expandToFitSpace) {, +        	return false;, +        }, +        if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {, +        	return false;, +        }, +        if (!ObjectUtilities.equal(this.urlText, that.urlText)) {, +        	return false;, +        }, +        return super.equals(obj);, +            throws IOException, ClassNotFoundException {]