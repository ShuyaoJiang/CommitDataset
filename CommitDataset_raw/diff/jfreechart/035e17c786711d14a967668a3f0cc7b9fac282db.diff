[+++ b/ChangeLog, +    * source/org/jfree/chart/plot/dial/StandardDialScale.java, +    (angleToValue): Implemented and removed FIXME., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/plot/dial/StandardDialScale.java, +    (angleToValue): Implemented and removed FIXME., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/plot/dial/StandardDialScale.java, + * (C) Copyright 2000-2012, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2012, by Object Refinery Limited., + * 08-Jan-2012 : Added missing angleToValue() implementation (DG);, +     * @param angle  the angle (in degrees)., +        double range = this.upperBound - this.lowerBound;, +        double unit = range / this.extent;, +        return (angle - this.startAngle) * unit;, +++ b/ChangeLog, +    * source/org/jfree/chart/plot/dial/StandardDialScale.java, +    (angleToValue): Implemented and removed FIXME., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/plot/dial/StandardDialScale.java, + * (C) Copyright 2000-2012, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2012, by Object Refinery Limited., + * 08-Jan-2012 : Added missing angleToValue() implementation (DG);, +     * @param angle  the angle (in degrees)., +        double range = this.upperBound - this.lowerBound;, +        double unit = range / this.extent;, +        return (angle - this.startAngle) * unit;, +++ b/tests/org/jfree/chart/plot/dial/junit/StandardDialScaleTests.java, + * (C) Copyright 2000-2012, by Object Refinery Limited and Contributors., + * (C) Copyright 2006-2012, by Object Refinery Limited and Contributors., + * 08-Jan-2012 : Added tests for valueToAngle() and angleToValue();, +    private static final double EPSILON = 0.0000000001;, +, +    /**, +     * Some checks for the valueToAngle() method., +     */, +    public void testValueToAngle() {, +        StandardDialScale s = new StandardDialScale();, +        assertEquals(175.0, s.valueToAngle(0.0), EPSILON);, +        assertEquals(90.0, s.valueToAngle(50.0), EPSILON);, +        assertEquals(5.0, s.valueToAngle(100.0), EPSILON);, +        assertEquals(192.0, s.valueToAngle(-10.0), EPSILON);, +        assertEquals(-12.0, s.valueToAngle(110.0), EPSILON);, +, +        s = new StandardDialScale(0, 20, 180, -180.0, 10, 3);, +        assertEquals(180.0, s.valueToAngle(0.0), EPSILON);, +        assertEquals(90.0, s.valueToAngle(10.0), EPSILON);, +        assertEquals(0.0, s.valueToAngle(20.0), EPSILON);, +    }, +, +    /**, +     * Some checks for the angleToValue() method., +     */, +    public void testAngleToValue() {, +        StandardDialScale s = new StandardDialScale();, +        assertEquals(0.0, s.angleToValue(175.0), EPSILON);, +        assertEquals(50.0, s.angleToValue(90.0), EPSILON);, +        assertEquals(100.0, s.angleToValue(5.0), EPSILON);, +        assertEquals(-10.0, s.angleToValue(192.0), EPSILON);, +        assertEquals(110.0, s.angleToValue(-12.0), EPSILON);, +, +        s = new StandardDialScale(0, 20, 180, -180.0, 10, 3);, +        assertEquals(0.0, s.angleToValue(180.0), EPSILON);, +        assertEquals(10.0, s.angleToValue(90.0), EPSILON);, +        assertEquals(20.0, s.angleToValue(0.0), EPSILON);, +    }]