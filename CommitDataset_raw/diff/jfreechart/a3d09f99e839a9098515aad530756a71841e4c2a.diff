[+++ b/swt/org/jfree/experimental/chart/swt/ChartComposite.java, + * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors., + * (C) Copyright 2006, 2007, by Henry Proudhon and Contributors., + *                   Christoph Beck;, + * 31-Jan-2007 : Fixed some issues with the trace lines, fixed cross hair not , + *               being drawn, added getter and setter methods for the trace , + *               lines (HP); , + * 07-Apr-2007 : Changed this.redraw() into canvas.redraw() to fix redraw , + *               problems (HP);, + * 19-May-2007 : Small fix in paintControl to check for null charts, bug , + *               1719260 (HP);, + * 23-May-2007 : Added some dispose call to free SWT resources, patch sent by , + *               CÃ©dric Chabanois (CC);, +        this.canvas = new Canvas(this, SWT.NO_BACKGROUND);, +        this.canvas.addPaintListener(this);, +        this.canvas.addMouseListener(this);, +        this.canvas.addMouseMoveListener(this);, +        if (this.chart != null) {, +            this.chart.addChangeListener(this);, +            Plot plot = this.chart.getPlot();, +        SWTChartEditor editor = new SWTChartEditor(this.canvas.getDisplay(), , +                this.chart);, +        FileDialog fileDialog = new FileDialog(this.canvas.getShell(), , +                SWT.SAVE);, +                    this.canvas.getSize().x, this.canvas.getSize().y);, +    private org.eclipse.swt.graphics.Point getPointInRectangle(int x, int y, , +            Rectangle area) {, +        x = Math.max(area.x, Math.min(x, area.x + area.width));   , +        y = Math.max(area.y, Math.min(y, area.y + area.height));, +                (selection.x + selection.width / 2), , +                (selection.y + selection.height/2));, +            double vLower = (scaledDataArea.y + scaledDataArea.height , +                    - selection.y - selection.height) , +            double vUpper = (scaledDataArea.y + scaledDataArea.height , +                    - selection.y) / (double) scaledDataArea.height;, +        Plot plot = this.chart.getPlot();, +        this.canvas.redraw();, +        ev.gc = new GC(this.canvas);, +        ev.width = this.canvas.getBounds().width;, +        ev.height = this.canvas.getBounds().height;, +        this.canvas.notifyListeners(SWT.Paint, ev);, +                (this.zoomPoint != null ? this.zoomPoint : , +                    new org.eclipse.swt.graphics.Point(0,0));, +            z.zoomDomainAxes(0.0, this.info.getPlotInfo(), , +                    SWTUtils.toAwtPoint(zp));, +                (this.zoomPoint != null ? this.zoomPoint : , +                    new org.eclipse.swt.graphics.Point(0,0));, +            z.zoomRangeAxes(0.0, this.info.getPlotInfo(), , +                    SWTUtils.toAwtPoint(zp)); , +                            this.canvas.getShell(), SWT.OK | SWT.ICON_ERROR );, +     * @see org.eclipse.swt.events.MouseListener#mouseDoubleClick(, +     * org.eclipse.swt.events.MouseEvent), +     * @see org.eclipse.swt.events.MouseListener#mouseDown(, +     * org.eclipse.swt.events.MouseEvent), +        this.zoomPoint = getPointInRectangle(event.x, event.y, scaledDataArea);, +        int x = (int) ((event.x - getClientArea().x) / this.scaleX);, +        int y = (int) ((event.y - getClientArea().y) / this.scaleY);, +        this.anchor = new Point2D.Double(x, y);, +        this.chart.setNotify(true);  // force a redraw , +        this.canvas.redraw();, +        if (this.info != null) {, +            EntityCollection entities = this.info.getEntityCollection();, +        Object[] listeners = this.chartMouseListeners.getListeners(, +        ChartMouseEvent chartEvent = new ChartMouseEvent(getChart(), , +                mouseEvent, entity);, +     * @see org.eclipse.swt.events.MouseListener#mouseUp(, +     * org.eclipse.swt.events.MouseEvent), +        if (this.zoomRectangle == null) {, +                this.zoomPoint = getPointInRectangle(event.x, event.y, , +                        screenDataArea);, +            if (this.popup != null && event.button == 3) {, +                org.eclipse.swt.graphics.Point pt = this.canvas.toDisplay(, +                        event.x, event.y);, +            if (this.orientation == PlotOrientation.HORIZONTAL) {, +                hZoom = this.rangeZoomable;, +                vZoom = this.domainZoomable;, +                hZoom = this.domainZoomable;              , +                vZoom = this.rangeZoomable;, +            boolean zoomTrigger1 = hZoom && Math.abs(this.zoomRectangle.width) , +                    >= this.zoomTriggerDistance;, +                    && Math.abs(this.zoomRectangle.height) , +                    >= this.zoomTriggerDistance;, +                if ((hZoom && (this.zoomRectangle.x + this.zoomRectangle.width , +                        < this.zoomPoint.x)) || (vZoom && (this.zoomRectangle.y, +                        + this.zoomRectangle.height < this.zoomPoint.y))) , +                    zoom(this.zoomRectangle);, +                this.canvas.redraw();, +        this.zoomPoint = null;, +        this.zoomRectangle = null;, +     * @see org.eclipse.swt.events.MouseMoveListener#mouseMove(, +     * org.eclipse.swt.events.MouseEvent), +        if (this.horizontalAxisTrace || this.verticalAxisTrace) {, +            this.horizontalTraceLineY = event.y;, +            this.verticalTraceLineX = event.x;, +            this.canvas.redraw();, +        if (this.displayToolTips) {                            , +            if (s == null && this.canvas.getToolTipText() != null, +                    || s!=null && !s.equals(this.canvas.getToolTipText())), +                this.canvas.setToolTipText(s);, +        if (this.zoomPoint != null) {]