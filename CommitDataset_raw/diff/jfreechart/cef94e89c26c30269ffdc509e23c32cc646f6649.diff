[+++ b/src/main/java/org/jfree/chart/util/CloneUtils.java, + * (C) Copyright 2000-2019, by Object Refinery Limited and Contributors., + * (C) Copyright 2014-2019, by Object Refinery Limited., +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Modifier;, +     * Returns a clone of the specified object, if it can be cloned, otherwise, +     * throws a {@code CloneNotSupportedException}.  If the object is , +     * {@code null} this method returns {@code null}., +     *, +     * @param object the object to clone ({@code null} permitted)., +     * , +     * @return A clone of the specified object, or {@code null}., +     * , +     * @throws CloneNotSupportedException if the object cannot be cloned., +     */, +    public static Object clone(Object object), +        throws CloneNotSupportedException {, +        if (object == null) {, +            return null;, +        }, +        if (object instanceof PublicCloneable) {, +            PublicCloneable pc = (PublicCloneable) object;, +            return pc.clone();, +        } else {, +            try {, +                Method method = object.getClass().getMethod("clone",, +                        (Class[]) null);, +                if (Modifier.isPublic(method.getModifiers())) {, +                    return method.invoke(object, (Object[]) null);, +                }, +            } catch (NoSuchMethodException e) {, +                throw new CloneNotSupportedException("Object without clone() method is impossible.");, +            } catch (IllegalAccessException e) {, +                throw new CloneNotSupportedException("Object.clone(): unable to call method.");, +            } catch (InvocationTargetException e) {, +                throw new CloneNotSupportedException("Object without clone() method is impossible.");, +            }, +        }, +        throw new CloneNotSupportedException("Failed to clone.");, +    }, +, +    /**, +                result.add(CloneUtils.clone(obj));]