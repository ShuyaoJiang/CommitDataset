[+++ b/src/main/java/org/jfree/chart/date/SerialDate.java, +     * Returns {@code true} if the supplied integer code represents a , +     * valid day-of-the-week, and {@code false} otherwise., +     * @return {@code true} if the supplied integer code represents a , +     *         valid day-of-the-week, and {@code false} otherwise., +    public static boolean isValidWeekdayCode(int code) {, +    public static String weekdayCodeToString(int weekday) {, +    public static String[] getMonths(boolean shortened) {, +     * @return {@code true} if the supplied integer code represents a , +    public static boolean isValidMonthCode(int code) {, +    public static int monthCodeToQuarter(int code) {, +    public static String monthCodeToString(int month) {, +     * @param shortened  if {@code true} return the abbreviation of the month., +    public static String monthCodeToString(int month, boolean shortened) {, +     * @return {@code true} if the supplied integer code represents a , +    public static boolean isValidWeekInMonthCode(int code) {, +     * @return {@code true} if the specified year is a leap year., +    public static boolean isLeapYear(int yyyy) {, +    public static int leapYearCount(int yyyy) {, +        int leap4 = (yyyy - 1896) / 4;, +        int leap100 = (yyyy - 1800) / 100;, +        int leap400 = (yyyy - 1600) / 400;, +    public static int lastDayOfMonth(int month, int yyyy) {, +    public static SerialDate addDays(int days, SerialDate base) {, +        int serialDayNumber = base.toSerial() + days;, +    public static SerialDate addMonths(int months, SerialDate base) {, +        int yy = (12 * base.getYYYY() + base.getMonth() + months - 1) / 12;, +        int mm = (12 * base.getYYYY() + base.getMonth() + months - 1) % 12 + 1;, +        int dd = Math.min(base.getDayOfMonth(), , +                SerialDate.lastDayOfMonth(mm, yy));, +    public static SerialDate addYears(int years, SerialDate base) {, +        int baseY = base.getYYYY();, +        int baseM = base.getMonth();, +        int baseD = base.getDayOfMonth();, +        int targetY = baseY + years;, +        int targetD = Math.min(baseD, SerialDate.lastDayOfMonth(baseM, targetY));, +    public static SerialDate getPreviousDayOfWeek(int targetWeekday, , +            SerialDate base) {, +            throw new IllegalArgumentException("Invalid day-of-the-week code.");, +        int adjust;, +        int baseDOW = base.getDayOfWeek();, +        } else {, +    public static SerialDate getFollowingDayOfWeek(int targetWeekday, , +            SerialDate base) {, +        int adjust;, +        int baseDOW = base.getDayOfWeek();, +        } else {, +    public static SerialDate getNearestDayOfWeek(int targetDOW, SerialDate base) {, +            throw new IllegalArgumentException("Invalid day-of-the-week code.");]