[+++ b/source/org/jfree/chart/axis/Axis.java, +    /** The axis label location (new in 1.0.16). */, +    private AxisLabelLocation labelLocation;, +, +        this.labelLocation = AxisLabelLocation.MIDDLE;, +     * Returns the location of the axis label.  The default is, +     * {@link AxisLabelLocation#MIDDLE}., +     * , +     * @return The location of the axis label (never <code>null</code>). , +     * , +     * @since 1.0.16, +     */, +    public AxisLabelLocation getLabelLocation() {, +        return this.labelLocation;, +    }, +    , +    /**, +     * Sets the axis label location and sends an {@link AxisChangeEvent} to, +     * all registered listeners., +     * , +     * @param location  the new location (<code>null</code> not permitted)., +     * , +     * @since 1.0.16, +     */, +    public void setLabelLocation(AxisLabelLocation location) {, +        ParamChecks.nullNotPermitted(location, "location");, +        this.labelLocation = location;, +        fireChangeEvent();, +    }, +, +    /**, +    protected double labelLocationX(AxisLabelLocation location, , +            Rectangle2D dataArea) {, +        if (location.equals(AxisLabelLocation.HIGH_END)) {, +            return dataArea.getMaxX();, +        }, +        if (location.equals(AxisLabelLocation.MIDDLE)) {, +            return dataArea.getCenterX();, +        }, +        if (location.equals(AxisLabelLocation.LOW_END)) {, +            return dataArea.getMinX();, +        }, +        throw new RuntimeException("Unexpected AxisLabelLocation: " + location);, +    }, +    , +    protected double labelLocationY(AxisLabelLocation location, , +            Rectangle2D dataArea) {, +        if (location.equals(AxisLabelLocation.HIGH_END)) {, +            return dataArea.getMinY();, +        }, +        if (location.equals(AxisLabelLocation.MIDDLE)) {, +            return dataArea.getCenterY();, +        }, +        if (location.equals(AxisLabelLocation.LOW_END)) {, +            return dataArea.getMaxY();, +        }, +        throw new RuntimeException("Unexpected AxisLabelLocation: " + location);, +    }, +    , +    protected TextAnchor labelAnchorH(AxisLabelLocation location, , +            Rectangle2D dataArea) {, +        if (location.equals(AxisLabelLocation.HIGH_END)) {, +            return TextAnchor.CENTER_RIGHT;, +        }, +        if (location.equals(AxisLabelLocation.MIDDLE)) {, +            return TextAnchor.CENTER;, +        }, +        if (location.equals(AxisLabelLocation.LOW_END)) {, +            return TextAnchor.CENTER_LEFT;, +        }, +        throw new RuntimeException("Unexpected AxisLabelLocation: " + location);, +    }, +    , +    protected TextAnchor labelAnchorV(AxisLabelLocation location, , +            Rectangle2D dataArea) {, +        if (location.equals(AxisLabelLocation.HIGH_END)) {, +            return TextAnchor.CENTER_RIGHT;, +        }, +        if (location.equals(AxisLabelLocation.MIDDLE)) {, +            return TextAnchor.CENTER;, +        }, +        if (location.equals(AxisLabelLocation.LOW_END)) {, +            return TextAnchor.CENTER_LEFT;, +        }, +        throw new RuntimeException("Unexpected AxisLabelLocation: " + location);, +    }, +, +            double labelx = labelLocationX(this.labelLocation, dataArea);, +            TextAnchor anchor = labelAnchorH(this.labelLocation, dataArea);, +                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);, +            double labelx = labelLocationX(this.labelLocation, dataArea);, +            TextAnchor anchor = labelAnchorH(this.labelLocation, dataArea);, +                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);, +            double labely = labelLocationY(this.labelLocation, dataArea);, +            TextAnchor anchor = labelAnchorV(this.labelLocation, dataArea);, +                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, , +                    anchor);, +            double labely = labelLocationY(this.labelLocation, dataArea);, +            TextAnchor anchor = labelAnchorV(this.labelLocation, dataArea);, +                    (float) labely, anchor, getLabelAngle() + Math.PI / 2.0, ]