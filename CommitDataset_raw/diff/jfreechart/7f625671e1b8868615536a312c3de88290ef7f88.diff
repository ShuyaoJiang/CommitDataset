[+++ b/ChangeLog, +	* source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java, +	(add): Fire dataset change event,, +	(getY): Removed redundant constructor call,, +	(equals): New method override,, +	(clone): Likewise., +, +2007-11-12  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java, +	(add): Fire dataset change event,, +	(getY): Removed redundant constructor call,, +	(equals): New method override,, +	(clone): Likewise., +, +2007-11-12  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java, + * 12-Nov-2007 : Implemented equals() and clone() (DG);, +import org.jfree.data.general.DatasetChangeEvent;, +import org.jfree.util.ObjectUtilities;, + * A simple implementation of the {@link BoxAndWhiskerXYDataset} interface.  , + * This dataset implementation can hold only one series., +            implements BoxAndWhiskerXYDataset, RangeInfo {, +     * Returns the value used as the outlier coefficient. The outlier , +     * coefficient gives an indication of the degree of certainty in an , +     * unskewed distribution.  Increasing the coefficient increases the number , +     * of values included. Currently only used to ensure farout coefficient is , +     * greater than the outlier coefficient, +     * @return A <code>double</code> representing the value used to calculate , +     *         outliers., +     *         , +     * @see #setOutlierCoefficient(double), +     */, +    public double getOutlierCoefficient() {, +        return this.outlierCoefficient;, +    }, +, +    /**, +     * Sets the value used as the outlier coefficient, +     *, +     * @param outlierCoefficient  being a <code>double</code> representing the , +     *                            value used to calculate outliers., +     *                            , +     * @see #getOutlierCoefficient(), +     */, +    public void setOutlierCoefficient(double outlierCoefficient) {, +        this.outlierCoefficient = outlierCoefficient;, +    }, +, +    /**, +     * Returns the value used as the farout coefficient. The farout coefficient, +     * allows the calculation of which values will be off the graph., +     *, +     * @return A <code>double</code> representing the value used to calculate , +     *         farouts., +     *         , +     * @see #setFaroutCoefficient(double), +     */, +    public double getFaroutCoefficient() {, +        return this.faroutCoefficient;, +    }, +, +    /**, +     * Sets the value used as the farouts coefficient. The farout coefficient , +     * must b greater than the outlier coefficient., +     * , +     * @param faroutCoefficient being a <code>double</code> representing the , +     *                          value used to calculate farouts., +     *                          , +     * @see #getFaroutCoefficient(), +     */, +    public void setFaroutCoefficient(double faroutCoefficient) {, +, +        if (faroutCoefficient > getOutlierCoefficient()) {, +            this.faroutCoefficient = faroutCoefficient;, +        } , +        else {, +            throw new IllegalArgumentException("Farout value must be greater " , +                + "than the outlier value, which is currently set at: (" , +                + getOutlierCoefficient() + ")");, +        }, +    }, +, +    /**, +     * Returns the number of series in the dataset., +     * <p>, +     * This implementation only allows one series., +     *, +     * @return The number of series., +     */, +    public int getSeriesCount() {, +        return 1;, +    }, +, +    /**, +     * Returns the number of items in the specified series., +     *, +     * @param series  the index (zero-based) of the series.]