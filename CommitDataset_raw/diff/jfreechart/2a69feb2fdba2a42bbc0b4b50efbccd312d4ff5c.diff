[+++ b/source/org/jfree/chart/plot/Marker.java, + * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2014, by Object Refinery Limited., +    /** The label background color. */, +    private Color labelBackgroundColor;, +, +     * The offset type for the domain or range axis (never {@code null})., +     * @param paint  the paint ({@code null} not permitted)., +     * @param paint  the paint ({@code null} not permitted)., +     * @param stroke  the stroke ({@code null} not permitted)., +     * @param outlinePaint  the outline paint ({@code null} permitted)., +     * @param outlineStroke  the outline stroke ({@code null} permitted)., +     * @throws IllegalArgumentException if {@code paint} or, +     *     {@code stroke} is {@code null}, or {@code alpha} is, +        this.labelBackgroundColor = new Color(100, 100, 100, 100);, +     * @return The paint (never {@code null})., +     * @param paint  the paint ({@code null} not permitted)., +     * @return The stroke (never {@code null})., +     * @param stroke  the stroke ({@code null}not permitted)., +     * @return The outline paint (possibly {@code null})., +     * @param paint  the paint ({@code null} permitted)., +     * @return The outline stroke (possibly {@code null})., +     * @param stroke  the stroke ({@code null} permitted)., +     * @throws IllegalArgumentException if {@code alpha} is not in the, +     * Returns the label (if {@code null} no label is displayed)., +     * @return The label (possibly {@code null})., +     * Sets the label (if {@code null} no label is displayed) and sends a, +     * @param label  the label ({@code null} permitted)., +     * @return The label font (never {@code null})., +     * @param font  the font ({@code null} not permitted)., +     * @return The label paint (never {@code null})., +     * @param paint  the paint ({@code null} not permitted)., +     * Returns the label background color.  The default value is , +     * {@code Color(100, 100, 100, 100)}.., +     * , +     * @return The label background color (never {@code null})., +     * , +     * @since 1.0.18, +     */, +    public Color getLabelBackgroundColor() {, +        return this.labelBackgroundColor;, +    }, +, +    /**, +     * Sets the label background color., +     * , +     * @param color  the color ({@code null} not permitted)., +     * , +     * @since 1.0.18, +     */, +    public void setLabelBackgroundColor(Color color) {, +        ParamChecks.nullNotPermitted(color, "color");, +        this.labelBackgroundColor = color;, +    }, +, +    /**, +     * @return The label anchor (never {@code null})., +     * @param anchor  the anchor ({@code null} not permitted)., +     * @return The label offset (never {@code null})., +     * @param offset  the label offset ({@code null} not permitted)., +     * @return The type (never {@code null})., +     * @param adj  the type ({@code null} not permitted)., +     * @return The label text anchor (never {@code null})., +     * @param anchor  the label text anchor ({@code null} not permitted)., +     * @param obj  the object ({@code null} permitted)., +        if (!this.labelBackgroundColor.equals(that.labelBackgroundColor)) {, +            return false;, +        }]