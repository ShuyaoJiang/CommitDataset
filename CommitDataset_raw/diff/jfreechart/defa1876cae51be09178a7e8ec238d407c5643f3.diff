[+++ b/src/main/java/org/jfree/chart/editor/DefaultPlotEditor.java, +                this.drawLines = Boolean.valueOf(r.getDefaultLinesVisible());, +                this.drawShapes = Boolean.valueOf(r.getDefaultShapesVisible());, +                    ((LineAndShapeRenderer) r).setDefaultLinesVisible(, +                    ((LineAndShapeRenderer) r).setDefaultShapesVisible(, +                        this.drawShapes);, +++ b/src/main/java/org/jfree/chart/editor/DefaultPlotEditor.java, +                this.drawLines = Boolean.valueOf(r.getDefaultLinesVisible());, +                this.drawShapes = Boolean.valueOf(r.getDefaultShapesVisible());, +                    ((LineAndShapeRenderer) r).setDefaultLinesVisible(, +                    ((LineAndShapeRenderer) r).setDefaultShapesVisible(, +                        this.drawShapes);, +++ b/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java, +    private boolean defaultLinesVisible;, +    private boolean defaultShapesVisible;, +    private boolean defaultShapesFilled;, +        this.defaultLinesVisible = lines;, +        this.defaultShapesVisible = shapes;, +        this.defaultShapesFilled = true;, +            return flag;, +        return this.defaultLinesVisible;, +     * Returns the default 'lines visible' attribute., +     * @return The default flag., +     * @see #getDefaultLinesVisible(), +    public boolean getDefaultLinesVisible() {, +        return this.defaultLinesVisible;, +     * Sets the default 'lines visible' flag and sends a, +     * @see #getDefaultLinesVisible(), +    public void setDefaultLinesVisible(boolean flag) {, +        this.defaultLinesVisible = flag;, +            return flag;, +        return this.defaultShapesVisible;, +     * Returns the default 'shape visible' attribute., +     * @see #setDefaultShapesVisible(boolean), +    public boolean getDefaultShapesVisible() {, +        return this.defaultShapesVisible;, +     * Sets the default 'shapes visible' flag and sends a, +     * @see #getDefaultShapesVisible(), +    public void setDefaultShapesVisible(boolean flag) {, +        this.defaultShapesVisible = flag;, +            return flag;, +        return this.defaultShapesFilled;, +     * Returns the default 'shape filled' attribute., +     * @see #setDefaultShapesFilled(boolean), +    public boolean getDefaultShapesFilled() {, +        return this.defaultShapesFilled;, +     * Sets the default 'shapes filled' flag and sends a, +     * @see #getDefaultShapesFilled(), +    public void setDefaultShapesFilled(boolean flag) {, +        this.defaultShapesFilled = flag;, +        if (this.defaultLinesVisible != that.defaultLinesVisible) {, +        if (this.defaultShapesVisible != that.defaultShapesVisible) {, +        if (this.defaultShapesFilled != that.defaultShapesFilled) {, +++ b/src/main/java/org/jfree/chart/editor/DefaultPlotEditor.java, +                this.drawLines = Boolean.valueOf(r.getDefaultLinesVisible());, +                this.drawShapes = Boolean.valueOf(r.getDefaultShapesVisible());, +                    ((LineAndShapeRenderer) r).setDefaultLinesVisible(, +                    ((LineAndShapeRenderer) r).setDefaultShapesVisible(, +                        this.drawShapes);, +++ b/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java, +    private boolean defaultLinesVisible;, +    private boolean defaultShapesVisible;, +    private boolean defaultShapesFilled;, +        this.defaultLinesVisible = lines;, +        this.defaultShapesVisible = shapes;, +        this.defaultShapesFilled = true;, +            return flag;, +        return this.defaultLinesVisible;, +     * Returns the default 'lines visible' attribute., +     * @return The default flag., +     * @see #getDefaultLinesVisible(), +    public boolean getDefaultLinesVisible() {, +        return this.defaultLinesVisible;, +     * Sets the default 'lines visible' flag and sends a, +     * @see #getDefaultLinesVisible(), +    public void setDefaultLinesVisible(boolean flag) {, +        this.defaultLinesVisible = flag;, +            return flag;, +        return this.defaultShapesVisible;, +     * Returns the default 'shape visible' attribute., +     * @see #setDefaultShapesVisible(boolean), +    public boolean getDefaultShapesVisible() {, +        return this.defaultShapesVisible;, +     * Sets the default 'shapes visible' flag and sends a, +     * @see #getDefaultShapesVisible(), +    public void setDefaultShapesVisible(boolean flag) {, +        this.defaultShapesVisible = flag;, +            return flag;, +        return this.defaultShapesFilled;, +     * Returns the default 'shape filled' attribute., +     * @see #setDefaultShapesFilled(boolean), +    public boolean getDefaultShapesFilled() {, +        return this.defaultShapesFilled;, +     * Sets the default 'shapes filled' flag and sends a, +     * @see #getDefaultShapesFilled(), +    public void setDefaultShapesFilled(boolean flag) {, +        this.defaultShapesFilled = flag;, +        if (this.defaultLinesVisible != that.defaultLinesVisible) {, +        if (this.defaultShapesVisible != that.defaultShapesVisible) {, +        if (this.defaultShapesFilled != that.defaultShapesFilled) {]