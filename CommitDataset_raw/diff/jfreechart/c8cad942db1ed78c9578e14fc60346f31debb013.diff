[+++ b/ChangeLog, +2008-12-30  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/plot/MultiplePiePlot.java, +    (legendItemShape): New field,, +    (MultiplePiePlot(CategoryDataset)): Initialise new field,, +    (getLegendItemShape): New method,, +    (setLegendItemShape): New method,, +    (getLegendItems): Use new field,, +    (equals): Check new field,, +    (clone): Implemented,, +    (readObject): Handle new field,, +    (writeObject): Likewise., +, +++ b/ChangeLog, +2008-12-30  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/plot/MultiplePiePlot.java, +    (legendItemShape): New field,, +    (MultiplePiePlot(CategoryDataset)): Initialise new field,, +    (getLegendItemShape): New method,, +    (setLegendItemShape): New method,, +    (getLegendItems): Use new field,, +    (equals): Check new field,, +    (clone): Implemented,, +    (readObject): Handle new field,, +    (writeObject): Likewise., +, +++ b/source/org/jfree/chart/plot/MultiplePiePlot.java, + * 30-Dec-2008 : Added legendItemShape field, and fixed cloning bug (DG);, +import java.awt.Shape;, +import java.awt.geom.Ellipse2D;, +import org.jfree.util.ShapeUtilities;, +     * The legend item shape (never null)., +     * @since 1.0.12, +     */, +    private transient Shape legendItemShape;, +, +    /**, +        this.legendItemShape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);, +     * Note that there are some attributes on this chart instance that will, +     * be ignored at rendering time (for example, legend item settings)., +     * Returns the shape used for legend items., +     *, +     * @return The shape (never <code>null</code>)., +     *, +     * @see #setLegendItemShape(Shape), +     *, +     * @since 1.0.12, +     */, +    public Shape getLegendItemShape() {, +        return this.legendItemShape;, +    }, +, +    /**, +     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}, +     * to all registered listeners., +     *, +     * @param shape  the shape (<code>null</code> not permitted)., +     *, +     * @see #getLegendItemShape(), +     *, +     * @since 1.0.12, +     */, +    public void setLegendItemShape(Shape shape) {, +        if (shape == null) {, +            throw new IllegalArgumentException("Null 'shape' argument.");, +        }, +        this.legendItemShape = shape;, +        fireChangeEvent();, +    }, +, +    /**, +        if (this.dataset == null) {, +            return result;, +        }, +                String label = key.toString();  // TODO: use a generator here, +                LegendItem item = new LegendItem(label, description, null,, +                        null, getLegendItemShape(), paint,, +                        Plot.DEFAULT_OUTLINE_STROKE, paint);, +                    getLegendItemShape(), this.aggregatedItemsPaint,, +                    Plot.DEFAULT_OUTLINE_STROKE, this.aggregatedItemsPaint));, +        if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {, +            return false;, +        }, +     * Returns a clone of the plot., +     *, +     * @return A clone., +     *, +     * @throws CloneNotSupportedException if some component of the plot does, +     *         not support cloning., +     */, +    public Object clone() throws CloneNotSupportedException {, +        MultiplePiePlot clone = (MultiplePiePlot) super.clone();, +        clone.pieChart = (JFreeChart) this.pieChart.clone();, +        clone.sectionPaints = new HashMap(this.sectionPaints);, +        clone.legendItemShape = ShapeUtilities.clone(this.legendItemShape);, +        return clone;, +    }, +]