[+++ b/ChangeLog, +	* source/org/jfree/data/KeyedObjects2D.java, +	(getObject(Comparable, Comparable)): Check arguments for null or , +	unrecognised keys,, +	(setObject(Object, Comparable, Comparable): Check for null arguments,, +	(removeObject): Check if row or column needs removing, , +	(removeRow(Comparable)): Check for unrecognised key,, +	(removeColumn(Comparable)): Likewise,, +	* tests/org/jfree/data/junit/KeyedObjects2DTests.java, +	(testGetValueByIndex): New test method,, +	(testGetValueByKey): Likewise,, +	(testSetObject): Likewise,, +	(testRemoveRowByIndex): Likewise,, +	(testRemoveColumnByIndex): Likewise,, +	(testRemoveRowByKey): Likewise,, +	(testRemoveColumnByKey): Likewise,, +	(testRemoveValue): Likewise., +, +2007-10-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/data/KeyedObjects2D.java, +	(getObject(Comparable, Comparable)): Check arguments for null or , +	unrecognised keys,, +	(setObject(Object, Comparable, Comparable): Check for null arguments,, +	(removeObject): Check if row or column needs removing, , +	(removeRow(Comparable)): Check for unrecognised key,, +	(removeColumn(Comparable)): Likewise,, +	* tests/org/jfree/data/junit/KeyedObjects2DTests.java, +	(testGetValueByIndex): New test method,, +	(testGetValueByKey): Likewise,, +	(testSetObject): Likewise,, +	(testRemoveRowByIndex): Likewise,, +	(testRemoveColumnByIndex): Likewise,, +	(testRemoveRowByKey): Likewise,, +	(testRemoveColumnByKey): Likewise,, +	(testRemoveValue): Likewise., +, +2007-10-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/KeyedObjects2D.java, +     * @param row  the row index (in the range 0 to getRowCount() - 1)., +     * @param column  the column index (in the range 0 to getColumnCount() - 1)., +     * @return The object (possibly <code>null</code>)., +     * , +     * @see #getObject(Comparable, Comparable), +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +     * @return The object (possibly <code>null</code>)., +     * , +     * @throws IllegalArgumentException if <code>rowKey<code> or , +     *         <code>columnKey</code> is <code>null</code>., +     * @throws UnknownKeyException if <code>rowKey</code> or , +     *         <code>columnKey</code> is not recognised., +        if (rowKey == null) {, +            throw new IllegalArgumentException("Null 'rowKey' argument.");, +        if (columnKey == null) {, +            throw new IllegalArgumentException("Null 'columnKey' argument.");, +        }, +        int row = this.rowKeys.indexOf(rowKey);, +        if (row < 0) {, +            throw new UnknownKeyException("Row key (" + rowKey , +                    + ") not recognised.");, +        }, +        int column = this.columnKeys.indexOf(columnKey);, +        if (column < 0) {, +            throw new UnknownKeyException("Column key (" + columnKey , +                    + ") not recognised.");, +        }, +        KeyedObjects rowData = (KeyedObjects) this.rows.get(row);, +        int index = rowData.getIndex(columnKey);, +        if (index >= 0) {, +            return rowData.getObject(index);, +        }, +        else {, +            return null;, +        }, +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +    public void addObject(Object object, Comparable rowKey, , +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +    public void setObject(Object object, Comparable rowKey, , +        if (rowKey == null) {, +            throw new IllegalArgumentException("Null 'rowKey' argument.");, +        }, +        if (columnKey == null) {, +            throw new IllegalArgumentException("Null 'columnKey' argument.");, +        }, +     * Removes an object from the table by setting it to <code>null</code>.  If, +     * all the objects in the specified row and/or column are now , +     * <code>null</code>, the row and/or column is removed from the table., +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +     * , +     * @see #addObject(Object, Comparable, Comparable), +        , +        // 1. check whether the row is now empty., +        boolean allNull = true;, +        int rowIndex = getRowIndex(rowKey);]