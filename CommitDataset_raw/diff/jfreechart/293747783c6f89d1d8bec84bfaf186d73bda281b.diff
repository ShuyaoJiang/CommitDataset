[+++ b/src/main/java/org/jfree/chart/util/SerialUtils.java, +     * Returns {@code true} if a class implements {@code Serializable}, +     * and {@code false} otherwise., +    public static boolean isSerializable(Class c) {, +     * @param stream  the input stream ({@code null} not permitted)., +     * @return The paint object (possibly {@code null})., +    public static Paint readPaint(ObjectInputStream stream), +        boolean isNull = stream.readBoolean();, +                float x1 = stream.readFloat();, +                float y1 = stream.readFloat();, +                Color c1 = (Color) stream.readObject();, +                float x2 = stream.readFloat();, +                float y2 = stream.readFloat();, +                Color c2 = (Color) stream.readObject();, +                boolean isCyclic = stream.readBoolean();, +     * Serialises a {@code Paint} object., +     * @param paint  the paint object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted)., +    public static void writePaint(Paint paint, ObjectOutputStream stream), +    public static Stroke readStroke(ObjectInputStream stream), +        boolean isNull = stream.readBoolean();, +            Class c = (Class) stream.readObject();, +                float width = stream.readFloat();, +                int cap = stream.readInt();, +                int join = stream.readInt();, +                float miterLimit = stream.readFloat();, +                float[] dash = (float[]) stream.readObject();, +                float dashPhase = stream.readFloat();, +                result = new BasicStroke(width, cap, join, miterLimit, dash, , +                        dashPhase);, +     * Serialises a {@code Stroke} object.  This code handles the, +     * {@code BasicStroke} class which is the only {@code Stroke}, +     * {@code Serializable})., +     * @param stroke  the stroke object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted)., +    public static void writeStroke(Stroke stroke, ObjectOutputStream stream), +                BasicStroke s = (BasicStroke) stroke;, +            } else {, +        } else {, +    public static Composite readComposite(ObjectInputStream stream), +        boolean isNull = stream.readBoolean();, +            Class c = (Class) stream.readObject();, +                int rule = stream.readInt();, +                float alpha = stream.readFloat();, +     * Serialises a {@code Composite} object., +     * @param composite  the composite object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted)., +    public static void writeComposite(Composite composite, , +            ObjectOutputStream stream) throws IOException {, +                AlphaComposite ac = (AlphaComposite) composite;, +        } else {, +     * Reads a {@code Shape} object that has been serialised by the, +     * @param stream  the input stream ({@code null} not permitted)., +     * @return The shape object (possibly {@code null})., +    public static Shape readShape(ObjectInputStream stream), +        boolean isNull = stream.readBoolean();, +            Class c = (Class) stream.readObject();, +                double x1 = stream.readDouble();, +                double y1 = stream.readDouble();, +                double x2 = stream.readDouble();, +                double y2 = stream.readDouble();, +                double x = stream.readDouble();, +                double y = stream.readDouble();, +                double w = stream.readDouble();, +                double h = stream.readDouble();, +                double x = stream.readDouble();, +                double y = stream.readDouble();, +                double w = stream.readDouble();, +                double h = stream.readDouble();, +                double x = stream.readDouble();, +                double y = stream.readDouble();, +                double w = stream.readDouble();, +                double h = stream.readDouble();, +                double as = stream.readDouble(); // Angle Start, +                double ae = stream.readDouble(); // Angle Extent, +                int at = stream.readInt();       // Arc type, +                GeneralPath gp = new GeneralPath();, +                float[] args = new float[6];, +                    int type = stream.readInt();, +     * Serialises a {@code Shape} object., +     * @param shape  the shape object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted)., +    public static void writeShape(Shape shape, ObjectOutputStream stream), +     * Reads a {@code Point2D} object that has been serialised by the, +     * @param stream  the input stream ({@code null} not permitted)., +     * @return The point object (possibly {@code null})., +    public static Point2D readPoint2D(ObjectInputStream stream), +        boolean isNull = stream.readBoolean();, +            double x = stream.readDouble();, +            double y = stream.readDouble();, +     * Serialises a {@code Point2D} object., +     * @param p  the point object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted)., +    public static void writePoint2D(Point2D p, ObjectOutputStream stream), +     * Serialises an {@code AttributedString} object., +     * @param as  the attributed string object ({@code null} permitted)., +     * @param stream  the output stream ({@code null} not permitted).]