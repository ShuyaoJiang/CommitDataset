[+++ b/source/org/jfree/chart/axis/CategoryAxis.java, + * 25-Jul-2013 : Added support for URLs on category labels (DG);, +    /** Storage for the category label URLs (if any). */, +    private Map categoryLabelURLs;, +    , +        this.categoryLabelURLs = new HashMap();, +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +     * positioning is taken into account) and sends a change event to all , +     * registered listeners., +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +        fireChangeEvent();, +     * Removes the tooltip for the specified category and, if there was a value, +     * associated with that category, sends an {@link AxisChangeEvent} to all , +     * registered listeners., +        if (this.categoryLabelToolTips.remove(category) != null) {, +            fireChangeEvent();, +        }, +        fireChangeEvent();, +    }, +, +    /**, +     * Adds a URL (to be used in image maps) to the specified category and , +     * sends an {@link AxisChangeEvent} to all registered listeners., +     *, +     * @param category  the category (<code>null</code> not permitted)., +     * @param url  the URL text (<code>null</code> permitted)., +     *, +     * @see #removeCategoryLabelURL(Comparable), +     * , +     * @since 1.0.16, +     */, +    public void addCategoryLabelURL(Comparable category, String url) {, +        ParamChecks.nullNotPermitted(category, "category");, +        this.categoryLabelURLs.put(category, url);, +        fireChangeEvent();, +    }, +, +    /**, +     * Returns the URL for the label belonging to the specified category., +     *, +     * @param category  the category (<code>null</code> not permitted)., +     *, +     * @return The URL text (possibly <code>null</code>)., +     * , +     * @see #addCategoryLabelURL(Comparable, String), +     * @see #removeCategoryLabelURL(Comparable), +     * , +     * @since 1.0.16, +     */, +    public String getCategoryLabelURL(Comparable category) {, +        ParamChecks.nullNotPermitted(category, "category");, +        return (String) this.categoryLabelURLs.get(category);, +    }, +, +    /**, +     * Removes the URL for the specified category and, if there was a URL , +     * associated with that category, sends an {@link AxisChangeEvent} to all , +     * registered listeners., +     *, +     * @param category  the category (<code>null</code> not permitted)., +     *, +     * @see #addCategoryLabelURL(Comparable, String), +     * @see #clearCategoryLabelURLs(), +     * , +     * @since 1.0.16, +     */, +    public void removeCategoryLabelURL(Comparable category) {, +        ParamChecks.nullNotPermitted(category, "category");, +        if (this.categoryLabelURLs.remove(category) != null) {, +            fireChangeEvent();, +        }, +    }, +, +    /**, +     * Clears the category label URLs and sends an {@link AxisChangeEvent}, +     * to all registered listeners., +     *, +     * @see #addCategoryLabelURL(Comparable, String), +     * @see #removeCategoryLabelURL(Comparable), +     * , +     * @since 1.0.16, +     */, +    public void clearCategoryLabelURLs() {, +        this.categoryLabelURLs.clear();, +        fireChangeEvent();, +            int category, int categoryCount, Rectangle2D area, , +            Rectangle2D area, RectangleEdge edge) {, +        if (!isTickLabelsVisible()) {, +            return state;, +        }, +                x0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, , +                        edge);, +                x0 = getCategoryStart(categoryIndex, ticks.size(), dataArea, ]