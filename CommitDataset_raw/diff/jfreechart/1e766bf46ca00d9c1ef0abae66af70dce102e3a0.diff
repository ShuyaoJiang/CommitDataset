[+++ b/tests/org/jfree/data/time/TimeSeriesTest.java, + * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors., + * (C) Copyright 2001-2014, by Object Refinery Limited., +import java.util.Calendar;, +import java.util.GregorianCalendar;, +import java.util.Locale;, +import java.util.TimeZone;, +import org.jfree.data.Range;, +    @Test, +    public void testGetMinY2() {, +        TimeSeries ts = new TimeSeries("Time Series");, +        assertTrue(Double.isNaN(ts.getMinY()));, +        , +        ts.add(new Year(2014), 1.0);, +        assertEquals(1.0, ts.getMinY(), EPSILON);, +        , +        ts.addOrUpdate(new Year(2014), null);, +        assertTrue(Double.isNaN(ts.getMinY()));, +        , +        ts.addOrUpdate(new Year(2014), 1.0);, +        assertEquals(1.0, ts.getMinY(), EPSILON);, +, +        ts.clear();, +        assertTrue(Double.isNaN(ts.getMinY()));, +    }, +    , +    @Test, +    public void testGetMaxY2() {, +        TimeSeries ts = new TimeSeries("Time Series");, +        assertTrue(Double.isNaN(ts.getMaxY()));, +        , +        ts.add(new Year(2014), 1.0);, +        assertEquals(1.0, ts.getMaxY(), EPSILON);, +        , +        ts.addOrUpdate(new Year(2014), null);, +        assertTrue(Double.isNaN(ts.getMaxY()));, +        , +        ts.addOrUpdate(new Year(2014), 1.0);, +        assertEquals(1.0, ts.getMaxY(), EPSILON);, +, +        ts.clear();, +        assertTrue(Double.isNaN(ts.getMaxY()));, +    }, +, +    @Test, +    public void testFindValueRange() {, +        TimeSeries ts = new TimeSeries("Time Series");, +        assertNull(ts.findValueRange());, +        , +        ts.add(new Year(2014), 1.0);, +        assertEquals(new Range(1.0, 1.0), ts.findValueRange());, +        , +        ts.add(new Year(2015), 2.0);, +        assertEquals(new Range(1.0, 2.0), ts.findValueRange());, +, +        // null items are ignored, +        ts.add(new Year(2016), null);, +        assertEquals(new Range(1.0, 2.0), ts.findValueRange());, +        , +        ts.clear();, +        assertNull(ts.findValueRange());, +        , +        // if there are only null items, we get a NaNRange, +        ts.add(new Year(2014), null);, +        assertTrue(ts.findValueRange().isNaNRange()); , +    }, +    , +    @Test, +    public void testFindValueRange2() {, +        TimeZone tzone = TimeZone.getTimeZone("Europe/London");, +        Calendar calendar = new GregorianCalendar(tzone, Locale.UK);, +        calendar.clear();, +        calendar.set(2014, Calendar.FEBRUARY, 23, 6, 0);, +        System.out.println(calendar.getTime());, +        long start = calendar.getTimeInMillis();, +        calendar.clear();, +        calendar.set(2014, Calendar.FEBRUARY, 24, 18, 0);, +        System.out.println(calendar.getTime());, +        long end = calendar.getTimeInMillis();, +        Range range = new Range(start, end);, +        , +        TimeSeries ts = new TimeSeries("Time Series");, +        assertNull(ts.findValueRange(range, TimePeriodAnchor.START, tzone));, +        assertNull(ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));, +        assertNull(ts.findValueRange(range, TimePeriodAnchor.END, tzone));, +        , +        ts.add(new Day(23, 2, 2014), 5.0);, +        assertTrue(ts.findValueRange(range, TimePeriodAnchor.START, tzone).isNaNRange());, +        assertEquals(new Range(5.0, 5.0), , +                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));, +        assertEquals(new Range(5.0, 5.0), , +                ts.findValueRange(range, TimePeriodAnchor.END, tzone));, +        , +        ts.add(new Day(24, 2, 2014), 6.0);, +        assertEquals(new Range(6.0, 6.0), , +                ts.findValueRange(range, TimePeriodAnchor.START, tzone));, +        assertEquals(new Range(5.0, 6.0), , +                ts.findValueRange(range, TimePeriodAnchor.MIDDLE, tzone));, +        assertEquals(new Range(5.0, 5.0), , +                ts.findValueRange(range, TimePeriodAnchor.END, tzone));]