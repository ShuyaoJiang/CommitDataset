[+++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java, +    (createStackedValueList): Deprecated,, +    (createStackedValueList(CategoryDataset, Comparable, int[], double,, +    boolean)): New method,, +    (drawItem): Check for hidden series., +, +2009-02-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java, +    (createStackedValueList): Deprecated,, +    (createStackedValueList(CategoryDataset, Comparable, int[], double,, +    boolean)): New method,, +    (drawItem): Check for hidden series., +, +2009-02-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java, + * 04-Feb-2009 : Handle seriesVisible flag (DG);, +     *, +     * @deprecated As of 1.0.13, use {@link #createStackedValueList(, +     *     CategoryDataset, Comparable, int[], double, boolean)}., +        int[] rows = new int[dataset.getRowCount()];, +        for (int i = 0; i < rows.length; i++) {, +            rows[i] = i;, +        }, +        return createStackedValueList(dataset, category, rows, base,, +                asPercentages);, +    }, +, +    /**, +     * Returns a list containing the stacked values for the specified series, +     * in the given dataset, plus the supplied base value., +     *, +     * @param dataset  the dataset (<code>null</code> not permitted)., +     * @param category  the category key (<code>null</code> not permitted)., +     * @param base  the base value., +     * @param asPercentages  a flag that controls whether the values in the, +     *     list are converted to percentages of the total., +     *, +     * @return The value list., +     *, +     * @since 1.0.13, +     */, +    protected static List createStackedValueList(CategoryDataset dataset,, +            Comparable category, int[] includedRows, double base,, +            boolean asPercentages) {, +                    dataset.getColumnIndex(category), includedRows);, +        int rowCount = includedRows.length;, +        for (int i = 0; i < rowCount; i++) {, +            int r = includedRows[i];, +            Number n = dataset.getValue(dataset.getRowKey(r), category);, +                result.add(new Object[] {new Integer(r), new Double(posBase)});, +                result.add(0, new Object[] {new Integer(-r - 1),, +                dataset.getColumnKey(column), state.getVisibleSeriesArray(),, +                getBase(), this.renderAsPercentages);]