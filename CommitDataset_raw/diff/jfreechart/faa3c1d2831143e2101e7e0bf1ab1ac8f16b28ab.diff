[+++ b/ChangeLog, +    Patch 1874890 (Ulrich Voigt with contributions from Martin Hoeller):, +    * source/org/jfree/chart/renderer/xy/XYStepRenderer.java, +    (stepPoint): New field,, +    (getStepPoint): New method,, +    (setStepPoint): Likewise,, +    (drawItem): Calculate step point using new field,, +    (drawLine): New private method,, +    (equals): New method override,, +    (hashCode): Likewise., +, +2008-02-14  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    Patch 1874890 (Ulrich Voigt with contributions from Martin Hoeller):, +    * source/org/jfree/chart/renderer/xy/XYStepRenderer.java, +    (stepPoint): New field,, +    (getStepPoint): New method,, +    (setStepPoint): Likewise,, +    (drawItem): Calculate step point using new field,, +    (drawLine): New private method,, +    (equals): New method override,, +    (hashCode): Likewise., +, +2008-02-14  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/xy/XYStepRenderer.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2008, by Roger Studner and Contributors., + *                   Ulrich Voigt (patch 1874890);, + *                   Martin Hoeller (contribution to patch 1874890);, + * 14-Feb-2008 : Applied patch 1874890 by Ulrich Voigt (with contribution from, + *               Martin Hoeller) (DG);, +import org.jfree.chart.HashUtilities;, +import org.jfree.chart.event.RendererChangeEvent;, +        implements XYItemRenderer, Cloneable, PublicCloneable, Serializable {, +     * The factor (from 0.0 to 1.0) that determines the position of the , +     * step.  , +     *, +     * @since 1.0.10. , +     */, +    private double stepPoint = 1.0d;, +, +    /**, +     * Returns the fraction of the domain position between two points on which, +     * the step is drawn.  The default is 1.0d, which means the step is drawn , +     * at the domain position of the second`point. If the stepPoint is 0.5d the, +     * step is drawn at half between the two points., +     * , +     * @return The fraction of the domain position between two points where the, +     *         step is drawn., +     *         , +     * @see #setStepPoint(double), +     * , +     * @since 1.0.10, +     */, +    public double getStepPoint() {, +        return this.stepPoint;, +    }, +    , +    /**, +     * Sets the step point and sends a {@link RendererChangeEvent} to all , +     * registered listeners., +     * , +     * @param stepPoint  the step point (in the range 0.0 to 1.0), +     * , +     * @see #getStepPoint(), +     * , +     * @since 1.0.10, +     */, +    public void setStepPoint(double stepPoint) {, +        if (stepPoint < 0.0d || stepPoint > 1.0d) {, +            throw new IllegalArgumentException(, +            		"Requires stepPoint in [0.0;1.0]");, +        }, +        this.stepPoint = stepPoint;, +        fireChangeEvent();, +    }, +, +    /**, +        double transY1 = (Double.isNaN(y1) ? Double.NaN , +        		: rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation));, +            double transY0 = (Double.isNaN(y0) ? Double.NaN , +            		: rangeAxis.valueToJava2D(y0, dataArea, yAxisLocation));, +                if (transY0 == transY1) { , +                	// this represents the situation, +                    drawLine(g2, state.workingLine, transY0, transX0, transY1, , +                    		transX1);, +, +                    // calculate the step point, +                    double transXs = transX0 + (getStepPoint() , +                    		* (transX1 - transX0));, +                    drawLine(g2, state.workingLine, transY0, transX0, transY0, , +                    		transXs);, +                    drawLine(g2, state.workingLine, transY0, transXs, transY1, , +                    		transXs);, +                    drawLine(g2, state.workingLine, transY1, transXs, transY1, , +                    		transX1);, +                    drawLine(g2, state.workingLine, transX0, transY0, transX1, , +                    		transY1);]