[+++ b/ChangeLog, +2009-01-13  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeries.java, +    (TimeSeries(Comparable, Class)): Deprecated,, +    (TimeSeries(Comparable, String, String, Class)): Likewise,, +    (TimeSeries(Comparable)): Delegate to new constructor,, +    (TimeSeries(Comparable, String, String)): New constructor,, +    (add): Update timePeriodClass if necessary,, +    (addAndOrUpdate): Use new constructor,, +    (addOrUpdate): Reset timePeriodClass if necessary,, +    (removeAgedItems): Check for empty series,, +    (clear): Reset timePeriodClass,, +    (delete): Reset timePeriodClass if series is empty,, +    (delete(int, int)): Likewise,, +    (equals): Reorganised,, +    * tests/org/jfree/data/time/junit/TimeSeriesTests.java, +    (testEquals3): New test,, +    (testRemoveAgedItems3): Likewise., +, +++ b/ChangeLog, +2009-01-13  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeries.java, +    (TimeSeries(Comparable, Class)): Deprecated,, +    (TimeSeries(Comparable, String, String, Class)): Likewise,, +    (TimeSeries(Comparable)): Delegate to new constructor,, +    (TimeSeries(Comparable, String, String)): New constructor,, +    (add): Update timePeriodClass if necessary,, +    (addAndOrUpdate): Use new constructor,, +    (addOrUpdate): Reset timePeriodClass if necessary,, +    (removeAgedItems): Check for empty series,, +    (clear): Reset timePeriodClass,, +    (delete): Reset timePeriodClass if series is empty,, +    (delete(int, int)): Likewise,, +    (equals): Reorganised,, +    * tests/org/jfree/data/time/junit/TimeSeriesTests.java, +    (testEquals3): New test,, +    (testRemoveAgedItems3): Likewise., +, +++ b/source/org/jfree/data/time/TimeSeries.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2001-2009, by Object Refinery Limited., + * 13-Jan-2009 : Fixed constructors so that timePeriodClass doesn't need to, + *               be specified in advance (DG);, + * Represents a sequence of zero or more data items in the form (period, value), + * where 'period' is some instance of a subclass of {@link RegularTimePeriod}., + * The time series will ensure that (a) all data items have the same type of, + * period (for example, {@link Day}) and (b) that each period appears at, + * most one time in the series., +        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);, +     *, +     * @since 1.0.13, +    public TimeSeries(Comparable name, String domain, String range) {, +        this.timePeriodClass = null;, +     * @return The time period class (may be <code>null</code> but only for, +     *     an empty series)., +     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to, +     * all registered listeners., +     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to, +     * all registered listeners., +        Class c = item.getPeriod().getClass();, +        if (this.timePeriodClass == null) {, +            this.timePeriodClass = c;, +        }, +        else if (!this.timePeriodClass.equals(c)) {, +     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}, +     * to all registered listeners., +            throw new SeriesException("There is no existing value for the ", +                    + "specified 'period'.");, +                + getKey());, +            this.timePeriodClass = period.getClass();, +                if (this.data.isEmpty()) {, +                    this.timePeriodClass = null;, +                }, +        if (this.data.isEmpty()) {, +            return;  // nothing to do, +        }, +            this.timePeriodClass = null;, +            if (this.data.isEmpty()) {, +                this.timePeriodClass = null;, +            }, +        if (this.data.isEmpty()) {, +            this.timePeriodClass = null;, +        }, +        if (!(object instanceof TimeSeries)) {, +        TimeSeries that = (TimeSeries) object;, +                that.getDomainDescription())) {, +                that.getRangeDescription())) {, +        if (!ObjectUtilities.equal(this.timePeriodClass,, +                that.timePeriodClass)) {, +        if (getMaximumItemAge() != that.getMaximumItemAge()) {, +        if (getMaximumItemCount() != that.getMaximumItemCount()) {, +        if (count != that.getItemCount()) {, +            if (!getDataItem(i).equals(that.getDataItem(i))) {, +        return super.equals(object);, +    /**, +     * Creates a new (empty) time series with the specified name and class, +     * of {@link RegularTimePeriod}., +     *]