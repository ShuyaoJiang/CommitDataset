[+++ b/ChangeLog, +2008-02-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/util/LogFormat.java, +    (powerLabel): New field,, +    (LogFormat(double, String, boolean)): Delegate to new constructor,, +    (LogFormat(double, String, String, boolean)): New constructor,, +    (format): Use new powerLabel,, +    (equals): New method override,, +    (clone): Likewise., +, +++ b/ChangeLog, +2008-02-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/util/LogFormat.java, +    (powerLabel): New field,, +    (LogFormat(double, String, boolean)): Delegate to new constructor,, +    (LogFormat(double, String, String, boolean)): New constructor,, +    (format): Use new powerLabel,, +    (equals): New method override,, +    (clone): Likewise., +, +++ b/source/org/jfree/chart/util/LogFormat.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2007, 2008, by Object Refinery Limited and Contributors., + * 19-Feb-2008 : Implemented equals() and clone(), and added new powerLabel, + *               attribute as per Feature Request 1886036 (DG);, +    /** , +     * The label for the power symbol., +     * , +     * @since 1.0.10, +     */, +    private String powerLabel;, +    , +     * @param baseLabel  the base label (<code>null</code> not permitted)., +        this(base, baseLabel, "^", showBase);, +    }, +    , +    /**, +     * Creates a new instance., +     * , +     * @param base  the base., +     * @param baseLabel  the base label (<code>null</code> not permitted)., +     * @param powerLabel  the power label (<code>null</code> not permitted)., +     * @param showBase  a flag that controls whether or not the base value is, +     *                  shown., +     *                  , +     * @since 1.0.10, +     */, +    public LogFormat(double base, String baseLabel, String powerLabel, , +    		boolean showBase) {, +    	if (baseLabel == null) {, +    		throw new IllegalArgumentException("Null 'baseLabel' argument.");, +    	}, +    	if (powerLabel == null) {, +    		throw new IllegalArgumentException("Null 'powerLabel' argument.");, +    	}, +        this.powerLabel = powerLabel;, +            result.append(this.powerLabel);, +    /**, +     * Tests this formatter for equality with an arbitrary object., +     * , +     * @param obj  the object (<code>null</code> permitted)., +     * , +     * @return A boolean., +     */, +    public boolean equals(Object obj) {, +    	if (obj == this) {, +    		return true;, +    	}, +    	if (!(obj instanceof LogFormat)) {, +    		return false;, +    	}, +    	LogFormat that = (LogFormat) obj;, +    	if (this.base != that.base) {, +    		return false;, +    	}, +    	if (!this.baseLabel.equals(that.baseLabel)) {, +    		return false;, +    	}, +    	if (this.baseLog != that.baseLog) {, +    		return false;, +    	}, +    	if (this.showBase != that.showBase) {, +    		return false;, +    	}, +    	return super.equals(obj);, +    }, +    , +    /**, +     * Returns a clone of this instance., +     * , +     * @return A clone., +     */, +    public Object clone() {, +        LogFormat clone = (LogFormat) super.clone();, +        clone.formatter = (NumberFormat) this.formatter.clone();, +        return clone;, +    }, +]