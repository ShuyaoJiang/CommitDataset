[+++ b/ChangeLog, +    * source/org/jfree/chart/annotations/XYPointerAnnotation.java, +    (draw): Added support for rotated text, plus background paint and, +    outline paint/stroke., +, +2009-02-12  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/annotations/XYPointerAnnotation.java, +    (draw): Added support for rotated text, plus background paint and, +    outline paint/stroke., +, +2009-02-12  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/annotations/XYPointerAnnotation.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2003-2009, by Object Refinery Limited., + * 12-Feb-2009 : Added support for rotated label, plus background and, + *               outline (DG);, +import java.awt.Shape;, + * An arrow and label that can be placed on an {@link XYPlot}.  The arrow is, + * drawn at a user-definable angle so that it points towards the (x, y), + * location for the annotation., +        double labelX = j2DX + Math.cos(this.angle) * (this.baseRadius, +                + this.labelOffset);, +        double labelY = j2DY + Math.sin(this.angle) * (this.baseRadius, +                + this.labelOffset);, +        Shape hotspot = TextUtilities.calculateRotatedStringBounds(, +                getText(), g2, (float) labelX, (float) labelY, getTextAnchor(),, +                getRotationAngle(), getRotationAnchor());, +        if (getBackgroundPaint() != null) {, +            g2.setPaint(getBackgroundPaint());, +            g2.fill(hotspot);, +        }, +        TextUtilities.drawRotatedString(getText(), g2, (float) labelX,, +                (float) labelY, getTextAnchor(), getRotationAngle(), getRotationAnchor());, +        if (isOutlineVisible()) {, +            g2.setStroke(getOutlineStroke());, +            g2.setPaint(getOutlinePaint());, +            g2.draw(hotspot);, +        }, +        return super.equals(obj);]