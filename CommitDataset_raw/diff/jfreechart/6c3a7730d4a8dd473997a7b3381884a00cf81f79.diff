[+++ b/ChangeLog, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, + , +    * org/jfree/data/time/TimeSeriesCollection.java, +    (getRangeBounds(List, Range, boolean)): Observe the xRange,, +    * org/jfree/data/Range.java, +    (combineIgnoringNaN): Improve NaN handling consistency., +, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/labels/StandardPieSectionLabelGenerator.java, +    (attributedLabels): Change from ObjectList to Map,, +    (StandardPieSectionLabelGenerator): Modify initialisation of storage,, +    (setAttributedLabel): Storage changed to map,, +    (equals): Simplification,, +    (clone): Clone the attributed labels,, +    * org/jfree/chart/StrokeMap.java, +    (clone): Clone the storage,, +    * org/jfree/chart/PaintMap.java, +    (clone): Likewise,, +    * org/jfree/chart/plot/PiePlot.java, +    (clone): Clone required fields., +, +++ b/ChangeLog, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, + , +    * org/jfree/data/time/TimeSeriesCollection.java, +    (getRangeBounds(List, Range, boolean)): Observe the xRange,, +    * org/jfree/data/Range.java, +    (combineIgnoringNaN): Improve NaN handling consistency., +, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/labels/StandardPieSectionLabelGenerator.java, +    (attributedLabels): Change from ObjectList to Map,, +    (StandardPieSectionLabelGenerator): Modify initialisation of storage,, +    (setAttributedLabel): Storage changed to map,, +    (equals): Simplification,, +    (clone): Clone the attributed labels,, +    * org/jfree/chart/StrokeMap.java, +    (clone): Clone the storage,, +    * org/jfree/chart/PaintMap.java, +    (clone): Likewise,, +    * org/jfree/chart/plot/PiePlot.java, +    (clone): Clone required fields., +, +++ b/source/org/jfree/data/Range.java, +            if (range2 != null && range2.isNaNRange()) {, +                return null;, +            }, +            if (range1.isNaNRange()) {, +                return null;, +            }, +        if (Double.isNaN(l) && Double.isNaN(u)) {, +            return null;, +        }, +    /**, +     * Returns the minimum value.  If either value is NaN, the other value is , +     * returned.  If both are NaN, NaN is returned., +     * , +     * @param d1  value 1., +     * @param d2  value 2., +     * , +     * @return The minimum of the two values. , +     */, +++ b/ChangeLog, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, + , +    * org/jfree/data/time/TimeSeriesCollection.java, +    (getRangeBounds(List, Range, boolean)): Observe the xRange,, +    * org/jfree/data/Range.java, +    (combineIgnoringNaN): Improve NaN handling consistency., +, +2013-04-07  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/labels/StandardPieSectionLabelGenerator.java, +    (attributedLabels): Change from ObjectList to Map,, +    (StandardPieSectionLabelGenerator): Modify initialisation of storage,, +    (setAttributedLabel): Storage changed to map,, +    (equals): Simplification,, +    (clone): Clone the attributed labels,, +    * org/jfree/chart/StrokeMap.java, +    (clone): Clone the storage,, +    * org/jfree/chart/PaintMap.java, +    (clone): Likewise,, +    * org/jfree/chart/plot/PiePlot.java, +    (clone): Clone required fields., +, +++ b/source/org/jfree/data/Range.java, +            if (range2 != null && range2.isNaNRange()) {, +                return null;, +            }, +            if (range1.isNaNRange()) {, +                return null;, +            }, +        if (Double.isNaN(l) && Double.isNaN(u)) {, +            return null;, +        }, +    /**, +     * Returns the minimum value.  If either value is NaN, the other value is ]