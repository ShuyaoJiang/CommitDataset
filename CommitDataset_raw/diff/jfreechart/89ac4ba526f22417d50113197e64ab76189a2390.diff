[+++ b/source/org/jfree/chart/ChartPanel.java, + * 12-Sep-2013 : Provide auto-detection for JFreeSVG and OrsonPDF , + *               libraries (no compile time dependencies) (DG);, +import java.io.BufferedWriter;, +import java.io.FileWriter;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import javax.swing.filechooser.FileNameExtensionFilter;, +    /** Action command to save as PNG. */, +    private static final String SAVE_AS_PNG_COMMAND = "SAVE_AS_PNG";, +    , +    /** Action command to save as SVG. */, +    private static final String SAVE_AS_SVG_COMMAND = "SAVE_AS_SVG";, +    , +    /** Action command to save as PDF. */, +    private static final String SAVE_AS_PDF_COMMAND = "SAVE_AS_PDF";, +    , +    @Override, +    @Override, +        else if (command.equals(SAVE_AS_PNG_COMMAND)) {, +                JOptionPane.showMessageDialog(this, "I/O error occurred.", , +                        "Save As PNG", JOptionPane.WARNING_MESSAGE);, +        else if (command.equals(SAVE_AS_SVG_COMMAND)) {, +            try {, +                saveAsSVG(null);, +            } catch (IOException e) {, +                JOptionPane.showMessageDialog(this, "I/O error occurred.", , +                        "Save As SVG", JOptionPane.WARNING_MESSAGE);, +            }, +        }, +        else if (command.equals(SAVE_AS_PDF_COMMAND)) {, +            saveAsPDF(null);, +        }, +        FileNameExtensionFilter filter = new FileNameExtensionFilter(, +                    localizationResources.getString("PNG_Image_Files"), "png");, +        fileChooser.setFileFilter(filter);, +    }, +    /**, +     * Saves the chart in SVG format (a filechooser will be displayed so that, +     * the user can specify the filename).  Note that this method only works, +     * if the JFreeSVG library is on the classpath...if this library is not , +     * present, the method will fail., +     */, +    private void saveAsSVG(File f) throws IOException {, +        File file = f;, +        if (file == null) {, +            JFileChooser fileChooser = new JFileChooser();, +            fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);, +            FileNameExtensionFilter filter = new FileNameExtensionFilter(, +                    localizationResources.getString("SVG_Files"), "svg");, +            fileChooser.addChoosableFileFilter(filter);, +            fileChooser.setFileFilter(filter);, +, +            int option = fileChooser.showSaveDialog(this);, +            if (option == JFileChooser.APPROVE_OPTION) {, +                String filename = fileChooser.getSelectedFile().getPath();, +                if (isEnforceFileExtensions()) {, +                    if (!filename.endsWith(".svg")) {, +                        filename = filename + ".svg";, +                    }, +                }, +                file = new File(filename);, +                if (file.exists()) {, +                    String fileExists = localizationResources.getString(, +                            "FILE_EXISTS_CONFIRM_OVERWRITE");, +                    int response = JOptionPane.showConfirmDialog(this, , +                            fileExists, "Save As SVG", , +                            JOptionPane.OK_CANCEL_OPTION);, +                    if (response == JOptionPane.CANCEL_OPTION) {, +                        file = null;, +                    }, +                }, +            }, +        }, +        , +        if (file != null) {, +            // use reflection to get the SVG string, +            String svg = generateSVG(getWidth(), getHeight());, +            BufferedWriter writer = null;, +            try {, +                writer = new BufferedWriter(new FileWriter(file));, +                writer.write("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");, +                writer.write(svg + "\n");, +                writer.flush();, +            } finally {, +                try {, +                    if (writer != null) {, +                        writer.close();, +                    }, +                } catch (IOException ex) {, +                    throw new RuntimeException(ex);, +                }, +            } , +, +        }, +    }, +    , +    /**, +     * Generates a string containing a rendering of the chart in SVG format.]