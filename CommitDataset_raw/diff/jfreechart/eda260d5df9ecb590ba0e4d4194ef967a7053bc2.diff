[+++ b/ChangeLog, +2008-12-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/block/GridArrangement.java, +    (arrange): Fill in missing constraint combinations,, +    (arrangeNN): Check for null block,, +    (arrangeFF): Likewise,, +    (arrangeRF): New method,, +    (arrangeRN): Likewise,, +    (arrangeNR): Likewise,, +    (arrangeRR): Likewise,, +    (arrangeFN): Check for null block,, +    (arrangeNF): New method,, +    * tests/org/jfree/chart/block/junit/GridArrangementTests.java:, +    Added various new tests., +, +++ b/ChangeLog, +2008-12-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/block/GridArrangement.java, +    (arrange): Fill in missing constraint combinations,, +    (arrangeNN): Check for null block,, +    (arrangeFF): Likewise,, +    (arrangeRF): New method,, +    (arrangeRN): Likewise,, +    (arrangeNR): Likewise,, +    (arrangeRR): Likewise,, +    (arrangeFN): Check for null block,, +    (arrangeNF): New method,, +    * tests/org/jfree/chart/block/junit/GridArrangementTests.java:, +    Added various new tests., +, +++ b/source/org/jfree/chart/block/GridArrangement.java, + * 03-Dec-2008 : Implemented missing methods, and fixed bugs reported in, + *               patch 2370487 (DG);, +     * @param container  the container (<code>null</code> not permitted)., +                return arrangeNF(container, g2, constraint);, +                return arrangeNR(container, g2, constraint);, +                return arrangeRN(container, g2, constraint);, +                return arrangeRF(container, g2, constraint);, +                return arrangeRR(container, g2, constraint);, +        throw new RuntimeException("Should never get to here!");, +     * @param container  the container (<code>null</code> not permitted)., +            if (b != null) {, +        }, +     * @param container  the container (<code>null</code> not permitted)., +     * @param constraint  the constraint (<code>null</code> not permitted)., +                if (index >= blocks.size()) {, +                if (b != null) {, +                    b.setBounds(new Rectangle2D.Double(c * width, r * height,, +                            width, height));, +                }, +     * Arrange with a fixed height and a width within a given range., +     *, +     * @param container  the container., +     * @param constraint  the constraint., +     * @param g2  the graphics device., +     *, +     * @return The size of the arrangement., +     */, +    protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,, +                               RectangleConstraint constraint) {, +, +        RectangleConstraint c1 = constraint.toUnconstrainedWidth();, +        Size2D size1 = arrange(container, g2, c1);, +, +        if (constraint.getWidthRange().contains(size1.getWidth())) {, +            return size1;, +        }, +        else {, +            double w = constraint.getWidthRange().constrain(size1.getWidth());, +            RectangleConstraint c2 = constraint.toFixedWidth(w);, +            return arrange(container, g2, c2);, +        }, +    }, +, +    /**, +     * Arrange with a fixed width and no height constraint., +     *, +     * @param container  the container., +     * @param constraint  the constraint., +     * @param g2  the graphics device., +     *, +     * @return The size of the arrangement., +     */, +    protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,, +                               RectangleConstraint constraint) {, +, +        RectangleConstraint c1 = constraint.toUnconstrainedWidth();, +        Size2D size1 = arrange(container, g2, c1);, +, +        if (constraint.getWidthRange().contains(size1.getWidth())) {, +            return size1;, +        }, +        else {, +            double w = constraint.getWidthRange().constrain(size1.getWidth());, +            RectangleConstraint c2 = constraint.toFixedWidth(w);, +            return arrange(container, g2, c2);, +        }, +    }]