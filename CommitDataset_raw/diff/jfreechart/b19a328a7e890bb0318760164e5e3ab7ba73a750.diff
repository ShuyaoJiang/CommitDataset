[+++ b/src/main/java/org/jfree/chart/plot/XYPlot.java, +import org.jfree.chart.renderer.RendererUtils;, +                            int[] itemBounds = RendererUtils.findLiveItems(, +                            int[] itemBounds = RendererUtils.findLiveItems(, +++ b/src/main/java/org/jfree/chart/plot/XYPlot.java, +import org.jfree.chart.renderer.RendererUtils;, +                            int[] itemBounds = RendererUtils.findLiveItems(, +                            int[] itemBounds = RendererUtils.findLiveItems(, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/plot/XYPlot.java, +import org.jfree.chart.renderer.RendererUtils;, +                            int[] itemBounds = RendererUtils.findLiveItems(, +                            int[] itemBounds = RendererUtils.findLiveItems(, +++ /dev/null, +++ b/src/main/java/org/jfree/chart/renderer/RendererUtils.java, +/* ===========================================================, + * JFreeChart : a free chart library for the Java(tm) platform, + * ===========================================================, + *, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + *, + * Project Info:  http://www.jfree.org/jfreechart/index.html, + *, + * This library is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as published by, + * the Free Software Foundation; either version 2.1 of the License, or, + * (at your option) any later version., + *, + * This library is distributed in the hope that it will be useful, but, + * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY, + * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public, + * License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this library; if not, write to the Free Software, + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,, + * USA., + *, + * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. , + * Other names may be trademarks of their respective owners.], + *, + * ------------------, + * RendererUtils.java, + * ------------------, + * (C) Copyright 2007-2017, by Object Refinery Limited., + *, + * Original Author:  David Gilbert (for Object Refinery Limited);, + * Contributor(s):   -;, + *, + * Changes, + * -------, + * 19-Apr-2007 : Version 1 (DG);, + * 27-Mar-2009 : Fixed results for unsorted datasets (DG);, + * 19-May-2009 : Fixed FindBugs warnings, patch by Michal Wozniak (DG);, + * 23-Aug-2012 : Fixed rendering anomaly bug 3561093 (DG);, + * 03-Jul-2013 : Use ParamChecks (DG);, + *, + */, +, +package org.jfree.chart.renderer;, +, +import org.jfree.chart.util.ParamChecks;, +import org.jfree.data.DomainOrder;, +import org.jfree.data.xy.XYDataset;, +, +/**, + * Utility methods related to the rendering process., + *, + * @since 1.0.6, + */, +public class RendererUtils {, +, +    /**, +     * Finds the lower index of the range of live items in the specified data, +     * series., +     *, +     * @param dataset  the dataset ({@code null} not permitted)., +     * @param series  the series index., +     * @param xLow  the lowest x-value in the live range., +     * @param xHigh  the highest x-value in the live range., +     *, +     * @return The index of the required item., +     *, +     * @since 1.0.6, +     *, +     * @see #findLiveItemsUpperBound(XYDataset, int, double, double), +     */, +    public static int findLiveItemsLowerBound(XYDataset dataset, int series,, +            double xLow, double xHigh) {, +        ParamChecks.nullNotPermitted(dataset, "dataset");, +        if (xLow >= xHigh) {, +            throw new IllegalArgumentException("Requires xLow < xHigh.");, +        }, +        int itemCount = dataset.getItemCount(series);, +        if (itemCount <= 1) {, +            return 0;, +        }, +        if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {, +            // for data in ascending order by x-value, we are (broadly) looking, +            // for the index of the highest x-value that is less than xLow]