[+++ b/source/org/jfree/data/time/TimeSeriesCollection.java, + * 26-Jun-2009 : Fixed clone() (DG);, + * {@link XYDataset} interface, as well as the extended, +    /**, +     * Returns a clone of this time series collection., +     *, +     * @return A clone., +     *, +     * @throws java.lang.CloneNotSupportedException, +     */, +    public Object clone() throws CloneNotSupportedException {, +        TimeSeriesCollection clone = (TimeSeriesCollection) super.clone();, +        clone.data = (List) ObjectUtilities.deepClone(this.data);, +        clone.workingCalendar = (Calendar) this.workingCalendar.clone();, +        return clone;, +    }, +, +++ b/source/org/jfree/data/time/TimeSeriesCollection.java, + * 26-Jun-2009 : Fixed clone() (DG);, + * {@link XYDataset} interface, as well as the extended, +    /**, +     * Returns a clone of this time series collection., +     *, +     * @return A clone., +     *, +     * @throws java.lang.CloneNotSupportedException, +     */, +    public Object clone() throws CloneNotSupportedException {, +        TimeSeriesCollection clone = (TimeSeriesCollection) super.clone();, +        clone.data = (List) ObjectUtilities.deepClone(this.data);, +        clone.workingCalendar = (Calendar) this.workingCalendar.clone();, +        return clone;, +    }, +, +++ b/tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java, +     * Some checks for the {@link TimeSeriesCollection#removeSeries(int)}, +     * method., +     */, +    public void testRemoveSeries_int() {, +        TimeSeriesCollection c1 = new TimeSeriesCollection();, +        TimeSeries s1 = new TimeSeries("Series 1");, +        TimeSeries s2 = new TimeSeries("Series 2");, +        TimeSeries s3 = new TimeSeries("Series 3");, +        TimeSeries s4 = new TimeSeries("Series 4");, +        c1.addSeries(s1);, +        c1.addSeries(s2);, +        c1.addSeries(s3);, +        c1.addSeries(s4);, +        c1.removeSeries(2);, +        assertTrue(c1.getSeries(2).equals(s4));, +        c1.removeSeries(0);, +        assertTrue(c1.getSeries(0).equals(s2));, +        assertEquals(2, c1.getSeriesCount());, +    }, +, +    /**, +        TimeSeries series = new TimeSeries("Series 1");, +                    new ByteArrayInputStream(buffer.toByteArray()));, +            e.printStackTrace();, +    /**, +     * Basic checks for cloning., +     */, +    public void testCloning() {, +        TimeSeries s1 = new TimeSeries("Series");, +        s1.add(new Year(2009), 1.1);, +        TimeSeriesCollection c1 = new TimeSeriesCollection();, +        c1.addSeries(s1);, +        TimeSeriesCollection c2 = null;, +        try {, +            c2 = (TimeSeriesCollection) c1.clone();, +        }, +        catch (CloneNotSupportedException e) {, +            e.printStackTrace();, +        }, +        assertTrue(c1 != c2);, +        assertTrue(c1.getClass() == c2.getClass());, +        assertTrue(c1.equals(c2));, +, +        // check independence, +        s1.setDescription("XYZ");, +        assertFalse(c1.equals(c2));, +        c2.getSeries(0).setDescription("XYZ");, +        assertTrue(c1.equals(c2));, +    }, +]