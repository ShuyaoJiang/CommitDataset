[+++ b/ChangeLog, +2009-05-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeriesCollection.java: Implemented, +    XYDomainInfo,, +    (getDomainBounds(List, boolean)): New method,, +    * tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java, +    (testFindDomainBounds): New test method., +, +++ b/ChangeLog, +2009-05-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeriesCollection.java: Implemented, +    XYDomainInfo,, +    (getDomainBounds(List, boolean)): New method,, +    * tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java, +    (testFindDomainBounds): New test method., +, +++ b/source/org/jfree/data/time/TimeSeriesCollection.java, + * 19-May-2009 : Implemented XYDomainInfo (DG);, +import org.jfree.data.xy.XYDomainInfo;, +        implements XYDataset, IntervalXYDataset, DomainInfo, XYDomainInfo,, +        Serializable {, +     * Returns the bounds of the domain values for the specified series., +     * , +     * @param visibleSeriesKeys  a list of keys for the visible series., +     * @param includeInterval  include the x-interval?, +     * , +     * @return A range., +     * , +     * @since 1.0.13, +     */, +    public Range getDomainBounds(List visibleSeriesKeys,, +            boolean includeInterval) {, +        Range result = null;, +        Iterator iterator = visibleSeriesKeys.iterator();, +        while (iterator.hasNext()) {, +            Comparable seriesKey = (Comparable) iterator.next();, +            TimeSeries series = getSeries(seriesKey);, +            int count = series.getItemCount();, +            if (count > 0) {, +                RegularTimePeriod start = series.getTimePeriod(0);, +                RegularTimePeriod end = series.getTimePeriod(count - 1);, +                Range temp;, +                if (!includeInterval) {, +                    temp = new Range(getX(start), getX(end));, +                }, +                else {, +                    temp = new Range(, +                            start.getFirstMillisecond(this.workingCalendar),, +                            end.getLastMillisecond(this.workingCalendar));, +                }, +                result = Range.combine(result, temp);, +            }, +        }, +        return result;, +    }, +, +    /**, +++ b/ChangeLog, +2009-05-19  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeriesCollection.java: Implemented, +    XYDomainInfo,, +    (getDomainBounds(List, boolean)): New method,, +    * tests/org/jfree/data/time/junit/TimeSeriesCollectionTests.java, +    (testFindDomainBounds): New test method., +, +++ b/source/org/jfree/data/time/TimeSeriesCollection.java, + * 19-May-2009 : Implemented XYDomainInfo (DG);, +import org.jfree.data.xy.XYDomainInfo;, +        implements XYDataset, IntervalXYDataset, DomainInfo, XYDomainInfo,, +        Serializable {, +     * Returns the bounds of the domain values for the specified series., +     * , +     * @param visibleSeriesKeys  a list of keys for the visible series., +     * @param includeInterval  include the x-interval?, +     * , +     * @return A range., +     * , +     * @since 1.0.13, +     */, +    public Range getDomainBounds(List visibleSeriesKeys,, +            boolean includeInterval) {, +        Range result = null;, +        Iterator iterator = visibleSeriesKeys.iterator();, +        while (iterator.hasNext()) {, +            Comparable seriesKey = (Comparable) iterator.next();, +            TimeSeries series = getSeries(seriesKey);, +            int count = series.getItemCount();, +            if (count > 0) {, +                RegularTimePeriod start = series.getTimePeriod(0);, +                RegularTimePeriod end = series.getTimePeriod(count - 1);, +                Range temp;, +                if (!includeInterval) {, +                    temp = new Range(getX(start), getX(end));, +                }, +                else {, +                    temp = new Range(, +                            start.getFirstMillisecond(this.workingCalendar),]