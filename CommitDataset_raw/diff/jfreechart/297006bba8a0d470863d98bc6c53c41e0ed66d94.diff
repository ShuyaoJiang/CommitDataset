[+++ b/source/org/jfree/chart/axis/NumberAxis.java, + * (C) Copyright 2000-2016, by Object Refinery Limited and Contributors., + * (C) Copyright 2000-2016, by Object Refinery Limited and Contributors., + * 18-Jan-2016 : Update auto-tick unit selection to work better for large , + *               values (DG);, + * this) by setting the {@code autoRangeIncludesZero} flag to, + * {@code true}., + * The {@code NumberAxis} class has a mechanism for automatically, + * selecting a tick unit that is appropriate for the current axis range., +     * @param label  the axis label ({@code null} permitted)., +     * @return The axis range type (never {@code null})., +     * @param rangeType  the range type ({@code null} not permitted)., +     * If the flag is changed to {@code true}, the axis range is, +     * Note: if the {@code autoTickUnitSelection} flag is, +     * {@code true} the tick unit may be changed while the axis is being, +     * @param unit  the new tick unit ({@code null} not permitted)., +     * @param unit  the new tick unit ({@code null} not permitted)., +     * @return The number formatter (possibly {@code null})., +     * @param formatter  the number formatter ({@code null} permitted)., +     * @return The marker band (possibly {@code null})., +     * The marker band is optional, leave it set to {@code null} if you, +     * @param band the new band ({@code null} permitted)., +     * @param g2  the graphics device ({@code null} not permitted)., +     *                  ({@code null} not permitted)., +     *                  ({@code null} not permitted)., +     * @param edge  the location of the axis ({@code null} not permitted)., +     *                   ({@code null} permitted)., +     * @return The axis state (never {@code null})., +     * {@code NumberFormat})., +     * {@code setStandardTickUnits()} method., +        TickUnit unit = getTickUnit();, +        TickUnitSource tickUnitSource = getStandardTickUnits();, +        // we should use the current tick unit if it gives a count in the range, +        // 2 to 40 otherwise just estimate one that will give a count <= 20, +        double length = getRange().getLength();, +        int count = (int) (length / unit.getSize());, +        if (count < 2 || count > 40) {, +            unit = tickUnitSource.getCeilingTickUnit(length / 20);, +        }, +        double tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit);, +        TickUnit unit1 = tickUnitSource.getCeilingTickUnit(unit);, +        NumberTickUnit unit2 = (NumberTickUnit) , +                tickUnitSource.getCeilingTickUnit(guess);, +            unit2 = (NumberTickUnit) tickUnitSource.getLargerTickUnit(unit2);, +        double guess;, +        if (unitHeight > 0) { // then extrapolate..., +        } else { , +            guess = getRange().getLength() / 20.0;, +     * @param obj  the object ({@code null} permitted).]