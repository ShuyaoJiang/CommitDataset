[+++ b/ChangeLog, +    * source/org/jfree/chart/axis/CategoryAxis.java, +    (CategoryAxis): Leave tick marks visible by default,, +    (draw): Call drawTickMarks(),, +    (drawTickMarks): New method,, +    * source/org/jfree/chart/axis/CategoryAxis3D.java, +    (draw): Call drawTickMarks(),, +    * source/org/jfree/chart/axis/NumberAxis3D.java, +    (NumberAxis3D): Leave axis line visible by default., +, +2009-04-16  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/axis/CategoryAxis.java, +    (CategoryAxis): Leave tick marks visible by default,, +    (draw): Call drawTickMarks(),, +    (drawTickMarks): New method,, +    * source/org/jfree/chart/axis/CategoryAxis3D.java, +    (draw): Call drawTickMarks(),, +    * source/org/jfree/chart/axis/NumberAxis3D.java, +    (NumberAxis3D): Leave axis line visible by default., +, +2009-04-16  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/axis/CategoryAxis.java, + * 16-Apr-2009 : Added tick mark drawing (DG);, +import java.awt.geom.Line2D;, +        AxisState state = new AxisState(cursor);, +        if (isTickMarksVisible()) {, +            drawTickMarks(g2, cursor, dataArea, edge, state);, +        }, +     * Draws the tick marks., +     *, +     * @since 1.0.13, +     */, +    public void drawTickMarks(Graphics2D g2, double cursor,, +            Rectangle2D dataArea, RectangleEdge edge, AxisState state) {, +, +        Plot p = getPlot();, +        if (p == null) {, +            return;, +        }, +        CategoryPlot plot = (CategoryPlot) p;, +        double il = getTickMarkInsideLength();, +        double ol = getTickMarkOutsideLength();, +        Line2D line = new Line2D.Double();, +        List categories = plot.getCategoriesForAxis(this);, +        g2.setPaint(getTickMarkPaint());, +        g2.setStroke(getTickMarkStroke());, +        if (edge.equals(RectangleEdge.TOP)) {, +            Iterator iterator = categories.iterator();, +            while (iterator.hasNext()) {, +                Comparable key = (Comparable) iterator.next();, +                double x = getCategoryMiddle(key, categories, dataArea, edge);, +                line.setLine(x, cursor, x, cursor + il);, +                g2.draw(line);, +                line.setLine(x, cursor, x, cursor - ol);, +                g2.draw(line);, +            }, +            state.cursorUp(ol);, +        }, +        else if (edge.equals(RectangleEdge.BOTTOM)) {, +            Iterator iterator = categories.iterator();, +            while (iterator.hasNext()) {, +                Comparable key = (Comparable) iterator.next();, +                double x = getCategoryMiddle(key, categories, dataArea, edge);, +                line.setLine(x, cursor, x, cursor - il);, +                g2.draw(line);, +                line.setLine(x, cursor, x, cursor + ol);, +                g2.draw(line);, +            }, +            state.cursorDown(ol);, +        }, +        else if (edge.equals(RectangleEdge.LEFT)) {, +            Iterator iterator = categories.iterator();, +            while (iterator.hasNext()) {, +                Comparable key = (Comparable) iterator.next();, +                double y = getCategoryMiddle(key, categories, dataArea, edge);, +                line.setLine(cursor, y, cursor + il, y);, +                g2.draw(line);, +                line.setLine(cursor, y, cursor - ol, y);, +                g2.draw(line);, +            }, +            state.cursorLeft(ol);, +        }, +        else if (edge.equals(RectangleEdge.RIGHT)) {, +            Iterator iterator = categories.iterator();, +            while (iterator.hasNext()) {, +                Comparable key = (Comparable) iterator.next();, +                double y = getCategoryMiddle(key, categories, dataArea, edge);, +                line.setLine(cursor, y, cursor - il, y);, +                g2.draw(line);, +                line.setLine(cursor, y, cursor + ol, y);, +                g2.draw(line);, +            }, +            state.cursorRight(ol);, +        }, +    }, +, +    /**]