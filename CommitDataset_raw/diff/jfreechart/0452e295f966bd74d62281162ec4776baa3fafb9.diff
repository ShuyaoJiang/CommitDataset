[+++ b/ChangeLog, +	(drawPolygon): Implemented., +, +2007-10-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +++ b/ChangeLog, +	(drawPolygon): Implemented., +, +2007-10-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +++ b/swt/org/jfree/experimental/swt/SWTGraphics2D.java, + * 23-Oct-2007 : Implemented drawPolygon(int[], int[], int) (DG);, +     * Returns the current value for the specified hint key, or , +     * <code>null</code> if no value is set., +     * , +     * @param hintKey  the hint key (<code>null</code> permitted)., +     * , +     * @return The hint value, or <code>null</code>., +     * , +     * @see #setRenderingHint(Key, Object), +     */, +    public Object getRenderingHint(Key hintKey) {, +        return this.hints.get(hintKey);, +    }, +, +    /**, +     * Sets the value for a rendering hint.  For now, this graphics context, +     * ignores all hints., +     * , +     * @param hintKey  the key (<code>null</code> not permitted)., +     * @param hintValue  the value (must be compatible with the specified key)., +     * , +     * @throws IllegalArgumentException if <code>hintValue</code> is not, +     *         compatible with the <code>hintKey</code>., +     *         , +     * @see #getRenderingHint(Key), +     */, +    public void setRenderingHint(Key hintKey, Object hintValue) {, +        this.hints.put(hintKey, hintValue);, +    }, +, +    /**, +     * Returns a copy of the hints collection for this graphics context., +     * , +     * @return A copy of the hints collection., +     */, +    public RenderingHints getRenderingHints() {, +        return (RenderingHints) this.hints.clone();, +    }, +, +    /**, +     * Adds the hints in the specified map to the graphics context, replacing, +     * any existing hints.  For now, this graphics context ignores all hints., +     * , +     * @param hints  the hints (<code>null</code> not permitted)., +     * , +     * @see #setRenderingHints(Map), +     */, +    public void addRenderingHints(Map hints) {, +        this.hints.putAll(hints);, +    }, +, +    /**, +     * Replaces the existing hints with those contained in the specified, +     * map.  Note that, for now, this graphics context ignores all hints., +     * , +     * @param hints  the hints (<code>null</code> not permitted)., +     * , +     * @see #addRenderingHints(Map), +     */, +    public void setRenderingHints(Map hints) {, +        if (hints == null) {, +            throw new NullPointerException("Null 'hints' argument.");, +        }, +        this.hints = new RenderingHints(hints);, +    }, +, +    /**, +    /**, +     * Draws the outline of the polygon specified by the given points, using, +     * the current paint and stroke settings., +     * , +     * @param xPoints  the x-coordinates., +     * @param yPoints  the y-coordinates., +     * @param npoints  the number of points in the polygon., +     * , +     * @see #draw(Shape), +        if (npoints > 0) {, +            int x0 = xPoints[0];, +            int y0 = yPoints[0];, +            int x1 = 0, y1 = 0;, +            for (int i = 1; i < npoints; i++) {, +                x1 = xPoints[i];, +                y1 = yPoints[i];, +                this.gc.drawLine(x0, y0, x1, y1);, +                x0 = x1;, +                y0 = y1;, +            }]