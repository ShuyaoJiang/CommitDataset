[+++ b/src/main/java/org/jfree/chart/ui/RectangleInsets.java, +/* ===========================================================, + * JFreeChart : a free chart library for the Java(tm) platform, + * ===========================================================, + *, + * (C) Copyright 2000-2017, by Object Refinery Limited and Contributors., + *, + * Project Info:  http://www.jfree.org/jfreechart/index.html, + *, + * This library is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as published by, + * the Free Software Foundation; either version 2.1 of the License, or, + * (at your option) any later version., + *, + * This library is distributed in the hope that it will be useful, but, + * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY, + * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public, + * License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this library; if not, write to the Free Software, + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,, + * USA., + *, + * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. , + * Other names may be trademarks of their respective owners.], + *, + */, +, +     * Creates a new instance with all insets initialised to {@code 1.0}., +    public RectangleInsets(double top, double left, double bottom, , +            double right) {, +     * @param unitType  absolute or relative units ({@code null} not , +    public RectangleInsets(UnitType unitType, double top, double left, , +            double bottom, double right) {, +     * @return The unit type (never {@code null})., +     * @param obj  the object ({@code null} permitted)., +    @Override, +    public boolean equals(Object obj) {, +    @Override, +    @Override, +     * @param base  the base rectangle ({@code null} not permitted)., +     * @param horizontal  the horizontal adjustment type ({@code null} not, +     * @param vertical  the vertical adjustment type ({@code null} not , +    public Rectangle2D createAdjustedRectangle(Rectangle2D base,, +            LengthAdjustmentType horizontal, LengthAdjustmentType vertical) {, +     * @param base  the base rectangle ({@code null} not permitted)., +    public Rectangle2D createInsetRectangle(Rectangle2D base) {, +     * @param base  the base rectangle ({@code null} not permitted)., +    public Rectangle2D createInsetRectangle(Rectangle2D base,, +            boolean horizontal, boolean vertical) {, +        return new Rectangle2D.Double(base.getX() + leftMargin, , +                base.getHeight() - topMargin - bottomMargin);, +     * @param base  the base rectangle ({@code null} not permitted)., +    public Rectangle2D createOutsetRectangle(Rectangle2D base) {, +     * @param base  the base rectangle ({@code null} not permitted)., +    public Rectangle2D createOutsetRectangle(Rectangle2D base,, +            boolean horizontal, boolean vertical) {, +        return new Rectangle2D.Double(base.getX() - leftMargin, , +                base.getHeight() + topMargin + bottomMargin);, +    public double calculateTopInset(double height) {, +    public double calculateTopOutset(double height) {, +    public double calculateBottomInset(double height) {, +    public double calculateBottomOutset(double height) {, +    public double calculateLeftInset(double width) {, +    public double calculateLeftOutset(double width) {, +    public double calculateRightInset(double width) {, +    public double calculateRightOutset(double width) {, +    public double trimWidth(double width) {, +    public double extendWidth(double width) {, +    public double trimHeight(double height) {, +        return height - calculateTopInset(height) , +                - calculateBottomInset(height);   , +    public double extendHeight(double height) {, +        return height + calculateTopOutset(height) , +                + calculateBottomOutset(height);   , +     * @param area  the area ({@code null} not permitted)., +    public void trim(Rectangle2D area) {, +        double w = area.getWidth();, +        double h = area.getHeight();, +        double l = calculateLeftInset(w);, +        double r = calculateRightInset(w);, +        double t = calculateTopInset(h);, +        double b = calculateBottomInset(h);]