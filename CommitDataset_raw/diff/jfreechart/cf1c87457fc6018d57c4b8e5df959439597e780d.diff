[+++ b/ChangeLog, +	* source/org/jfree/data/DefaultKeyedValues.java, +	(data): Removed,, +	(keys): New field,, +	(values): Likewise,, +	(indexMap): New field,, +	(DefaultKeyedValues): Initialise new fields,, +	(getItemCount): Use new data fields,, +	(getValue(int)): Likewise,, +	(getKey(int)): Likewise,, +	(getIndex(Comparable)): Likewise,, +	(getKeys): Likewise,, +	(setValue(Comparable, Number)): Likewise,, +	(insertValue): Likewise,, +	(rebuildIndex): Likewise,, +	(removeValue): Likewise,, +	(clear): Likewise,, +	(sortByKeys): Likewise,, +	(sortByValue): Likewise,, +	(hashCode): Likewise,, +	(clone): Likewise., +	, +2007-10-31  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/data/DefaultKeyedValues.java, +	(data): Removed,, +	(keys): New field,, +	(values): Likewise,, +	(indexMap): New field,, +	(DefaultKeyedValues): Initialise new fields,, +	(getItemCount): Use new data fields,, +	(getValue(int)): Likewise,, +	(getKey(int)): Likewise,, +	(getIndex(Comparable)): Likewise,, +	(getKeys): Likewise,, +	(setValue(Comparable, Number)): Likewise,, +	(insertValue): Likewise,, +	(rebuildIndex): Likewise,, +	(removeValue): Likewise,, +	(clear): Likewise,, +	(sortByKeys): Likewise,, +	(sortByValue): Likewise,, +	(hashCode): Likewise,, +	(clone): Likewise., +	, +2007-10-31  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/DefaultKeyedValues.java, + * Contributor(s):   Thomas Morgner;, + * ------------- JFREECHART 1.0.x ---------------------------------------------, + * 31-Oct-2007 : Performance improvements by using separate lists for keys and , + *               values (TM);, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +    private ArrayList keys;, +    private ArrayList values;, +    , +    /** , +     * Contains (key, Integer) mappings, where the Integer is the index for, +     * the key in the list. , +     */, +    private HashMap indexMap; , +        this.keys = new ArrayList();, +        this.values = new ArrayList();, +        this.indexMap = new HashMap();, +        return this.indexMap.size();, +        return (Number) this.values.get(item);, +        return (Comparable) this.keys.get(index);, +        final Integer i = (Integer) this.indexMap.get(key);, +        if (i == null) {, +        return i.intValue();, +    }, +        return (List) this.keys.clone();, +            this.keys.set(keyIndex, key);, +            this.values.set(keyIndex, value);, +            this.keys.add(key);, +            this.values.add(value);, +            this.indexMap.put(key, new Integer(this.keys.size() - 1));, +        if (position < 0 || position > getItemCount()) {, +        if (pos == position) {, +            this.keys.set(pos, key);, +            this.values.set(pos, value);, +            if (pos >= 0) {, +                this.keys.remove(pos);, +                this.values.remove(pos);, +            }, +          , +            this.keys.add(position, key);, +            this.values.add(position, value);, +            rebuildIndex();, +        }, +    }, +, +    /**, +     * Rebuilds the key to indexed-position mapping after an positioned insert, +     * or a remove operation., +     */, +    private void rebuildIndex () {]