[+++ b/ChangeLog, +    Committing for Sergei Ivanov:, +    * source/org/jfree/data/Range.java, +    (intersects(Range)): New method,, +    (expand): Handle special case for negative margins,, +    (shift): Added argument check,, +    (scale): New method,, +    * tests/org/jfree/data/junit/RangeTests.java, +    (testConstructor): New test,, +    (testHashCode): Likewise,, +    (testExpand): Additional checks,, +    (testShift): New test,, +    (testScale): Likewise.    , +, +2007-12-18  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    Committing for Sergei Ivanov:, +    * source/org/jfree/data/Range.java, +    (intersects(Range)): New method,, +    (expand): Handle special case for negative margins,, +    (shift): Added argument check,, +    (scale): New method,, +    * tests/org/jfree/data/junit/RangeTests.java, +    (testConstructor): New test,, +    (testHashCode): Likewise,, +    (testExpand): Additional checks,, +    (testShift): New test,, +    (testScale): Likewise.    , +, +2007-12-18  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/Range.java, + *                   Sergei Ivanov;, + * 18-Dec-2007 : New methods intersects(Range) and scale(...) thanks to Sergei, + *               Ivanov (DG);, +     * Returns <code>true</code> if the range intersects with the specified , +     * range, and <code>false</code> otherwise., +     * , +     * @param range  another range (<code>null</code> not permitted)., +     * , +     * @return A boolean., +     *, +     * @since 1.0.9, +     */, +    public boolean intersects(Range range) {, +        return intersects(range.getLowerBound(), range.getUpperBound());, +    }, +, +    /**, +        double lower = range.getLowerBound() - length * lowerMargin;, +        double upper = range.getUpperBound() + length * upperMargin;, +        if (lower > upper) {, +            lower = lower / 2.0 + upper / 2.0;, +            upper = lower;, +        }, +        return new Range(lower, upper);, +     * @param base  the base range (<code>null</code> not permitted)., +     * @param base  the base range (<code>null</code> not permitted)., +        if (base == null) {, +            throw new IllegalArgumentException("Null 'base' argument.");, +        }, +     * Scales the range by the specified factor., +     *, +     * @param base the base range (<code>null</code> not permitted)., +     * @param factor the scaling factor (must be non-negative)., +     *, +     * @return A new range., +     *, +     * @since 1.0.9, +     */, +    public static Range scale(Range base, double factor) {, +        if (base == null) {, +            throw new IllegalArgumentException("Null 'base' argument.");, +        }, +        if (factor < 0) {, +            throw new IllegalArgumentException("Negative 'factor' argument.");, +        }, +        return new Range(base.getLowerBound() * factor,, +                base.getUpperBound() * factor);, +    }, +, +    /**, +++ b/ChangeLog, +    Committing for Sergei Ivanov:, +    * source/org/jfree/data/Range.java, +    (intersects(Range)): New method,, +    (expand): Handle special case for negative margins,, +    (shift): Added argument check,, +    (scale): New method,, +    * tests/org/jfree/data/junit/RangeTests.java, +    (testConstructor): New test,, +    (testHashCode): Likewise,, +    (testExpand): Additional checks,, +    (testShift): New test,, +    (testScale): Likewise.    , +, +2007-12-18  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/Range.java]