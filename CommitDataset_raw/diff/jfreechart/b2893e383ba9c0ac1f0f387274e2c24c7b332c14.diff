[+++ b/ChangeLog, +    (iterateRangeBounds(CategoryDataset, boolean)): Modified implementation,, +    (iterateRangeBounds(XYDataset, boolean)): Likewise,, +    * tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java, +    (testFindRangeBounds3): New test,, +    (testIterateCategoryRangeBounds): Renamed , +    testIterateRangeBounds_CategoryDataset(),, +    (testIterateRangeBounds2_CategoryDataset): New method,, +    (testIterateRangeBounds3_CategoryDataset): Likewise,, +    (testIterateXYRangeBounds): Renamed testIterateRangeBounds(),, +    (testIterateXYRangeBounds2): Renamed testIterateRangeBounds2(),, +    (testIterateRangeBounds3): New method,, +    (testIterateRangeBounds4): Likewise,, +    (testCumulativeRange3): Likewise,, +    (testSampleFunction2D): Likewise., +, +2008-03-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/general/DatasetUtilities.java, +++ b/ChangeLog, +    (iterateRangeBounds(CategoryDataset, boolean)): Modified implementation,, +    (iterateRangeBounds(XYDataset, boolean)): Likewise,, +    * tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java, +    (testFindRangeBounds3): New test,, +    (testIterateCategoryRangeBounds): Renamed , +    testIterateRangeBounds_CategoryDataset(),, +    (testIterateRangeBounds2_CategoryDataset): New method,, +    (testIterateRangeBounds3_CategoryDataset): Likewise,, +    (testIterateXYRangeBounds): Renamed testIterateRangeBounds(),, +    (testIterateXYRangeBounds2): Renamed testIterateRangeBounds2(),, +    (testIterateRangeBounds3): New method,, +    (testIterateRangeBounds4): Likewise,, +    (testCumulativeRange3): Likewise,, +    (testSampleFunction2D): Likewise., +, +2008-03-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/general/DatasetUtilities.java, +++ b/source/org/jfree/data/general/DatasetUtilities.java, + *                   Rafal Skalny (patch 1925366);, + * 28-Mar-2008 : Applied a variation of patch 1925366 (from Rafal Skalny) for , + *               slightly more efficient iterateRangeBounds() methods (DG);, +        if (includeInterval && dataset instanceof IntervalCategoryDataset) {, +        	// handle the special case where the dataset has y-intervals that, +        	// we want to measure, +            IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;, +            Number lvalue, uvalue;, +        }, +        else {, +        	// handle the standard case (plain CategoryDataset), +            for (int row = 0; row < rowCount; row++) {, +                for (int column = 0; column < columnCount; column++) {, +                    Number value = dataset.getValue(row, column);, +                    if (value != null) {, +                    	double v = value.doubleValue();, +                        minimum = Math.min(minimum, v);, +                        maximum = Math.max(maximum, v);, +                    }, +                }, +            }, +        	, +        }, +     * Iterates over the data items of the xy dataset to find, +        , +        // handle three cases by dataset type, +        if (includeInterval && dataset instanceof IntervalXYDataset) {, +        	// handle special case of IntervalXYDataset, +        	IntervalXYDataset ixyd = (IntervalXYDataset) dataset;, +                    double lvalue = ixyd.getStartYValue(series, item);, +                    double uvalue = ixyd.getEndYValue(series, item);, +        }, +        else if (includeInterval && dataset instanceof OHLCDataset) {, +        	// handle special case of OHLCDataset, +        	OHLCDataset ohlc = (OHLCDataset) dataset;, +            for (int series = 0; series < seriesCount; series++) {, +                int itemCount = dataset.getItemCount(series);, +                for (int item = 0; item < itemCount; item++) {, +                    double lvalue = ohlc.getLowValue(series, item);, +                    double uvalue = ohlc.getLowValue(series, item);, +                    if (!Double.isNaN(lvalue)) {, +                        minimum = Math.min(minimum, lvalue);, +                    }, +                    if (!Double.isNaN(uvalue)) {     , +                        maximum = Math.max(maximum, uvalue);, +                    }, +                }, +            }, +        }, +        else {, +        	// standard case - plain XYDataset, +            for (int series = 0; series < seriesCount; series++) {, +                int itemCount = dataset.getItemCount(series);, +                for (int item = 0; item < itemCount; item++) {, +                    double value = dataset.getYValue(series, item);, +                    if (!Double.isNaN(value)) {, +                        minimum = Math.min(minimum, value);, +                        maximum = Math.max(maximum, value);, +                    }, +                }, +            }]