[+++ b/source/org/jfree/chart/annotations/AbstractAnnotation.java, +/* ===========================================================, + * JFreeChart : a free chart library for the Java(tm) platform, + * ===========================================================, + *, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + *, + * Project Info:  http://www.jfree.org/jfreechart/index.html, + *, + * This library is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as published by, + * the Free Software Foundation; either version 2.1 of the License, or, + * (at your option) any later version., + *, + * This library is distributed in the hope that it will be useful, but, + * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY, + * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public, + * License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this library; if not, write to the Free Software, + * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,, + * USA., + *, + * [Java is a trademark or registered trademark of Sun Microsystems, Inc., + * in the United States and other countries.], + *, + * -----------------------, + * AbstractAnnotation.java, + * -----------------------, + * (C) Copyright 2009, by Object Refinery Limited and Contributors., + *, + * Original Author:  Peter Kolb (see patch 2809117);, + * Contributor(s):   ;, + *, + * Changes:, + * --------, + * 20-Jun-2009 : Version 1 (PK);, + *, + */, +, +package org.jfree.chart.annotations;, +, +import java.io.IOException;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import java.io.Serializable;, +import java.util.Arrays;, +import java.util.EventListener;, +import java.util.List;, +, +import javax.swing.event.EventListenerList;, +, +import org.jfree.chart.event.AnnotationChangeEvent;, +import org.jfree.chart.event.AnnotationChangeListener;, +, +/**, + * An abstract implementation of the {@link Annotation} interface, containing a, + * mechanism for registering change listeners., + *, + * @since 1.0.14, + */, +public abstract class AbstractAnnotation implements Annotation, Cloneable,, +        Serializable {, +, +    /** Storage for registered change listeners. */, +    private transient EventListenerList listenerList;, +, +    /**, +     * A flag that indicates whether listeners should be notified, +     * about changes of the annotation., +     */, +    private boolean notify = true;, +, +    /**, +     * Constructs an annotation., +     */, +    protected AbstractAnnotation() {, +        this.listenerList = new EventListenerList();, +    }, +, +    /**, +     * Registers an object to receive notification of changes to the, +     * annotation., +     *, +     * @param listener  the object to register., +     *, +     * @see #removeChangeListener(AnnotationChangeListener), +     */, +    public void addChangeListener(AnnotationChangeListener listener) {, +        this.listenerList.add(AnnotationChangeListener.class, listener);, +    }, +, +    /**, +     * Deregisters an object so that it no longer receives notification of, +     * changes to the annotation., +     *, +     * @param listener  the object to deregister., +     *, +     * @see #addChangeListener(AnnotationChangeListener)]