[+++ b/source/org/jfree/chart/fx/FXGraphics2D.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2014, 2015 by Object Refinery Limited and Contributors., + *, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +    /** A flag to permit clipping to be disabled (because...JavaFX bugs). */, +    /** Stores the AWT Paint object for get/setPaint(). */, +    /** Stores the AWT Color object for get/setColor(). */, +     * A Graphics2D instance for the hidden image that is used for font, +     * metrics.  Used in the getFontMetrics(Font f) method., +     */, +    private final Graphics2D fmImageG2 = fmImage.createGraphics();, +, +    /** , +     * The device configuration (this is lazily instantiated in the , +     * getDeviceConfiguration() method)., +     */, +    private GraphicsConfiguration deviceConfiguration;, +    , +    /**, +     * @param name  the name of the argument (to display in the exception , +     *         message)., +     * Returns the device configuration., +     * , +     * @return The device configuration (never {@code null})., +        if (this.deviceConfiguration == null) {, +            int width = (int) this.gc.getCanvas().getWidth();, +            int height = (int) this.gc.getCanvas().getHeight();, +            this.deviceConfiguration = new FXGraphicsConfiguration(width,, +                    height);, +        }, +        return this.deviceConfiguration;, +     * This attribute is updated by the {@link #setColor(java.awt.Color)}, +     * method, and also by the {@link #setPaint(java.awt.Paint)} method if, +     * a {@code Color} instance is passed to the method., +    private double[] floatToDoubleArray(float[] f) {, +        if (f == null) {, +            return null;, +        }, +        double[] d = new double[f.length];, +        for (int i = 0; i < f.length; i++) {, +            d[i] = (double) f[i];, +        }, +        return d;, +    }, +, +    /**, +     * A utility method that calls {@code GraphicsContext.setLineDashes()} , +     * using reflection (since this method is only available in 8u40).  On, +     * runtimes where the method is not available, this method will do nothing., +     * , +     * @param gc  the graphics context ({@code null} permitted)., +     * @param dashes  the dashes., +     */, +    private void setLineDashes(GraphicsContext gc, double... dashes) {, +        if (dashes == null) {, +            dashes = new double[] { 0.0 };, +        }, +        try {, +            Method m = GraphicsContext.class.getMethod("setLineDashes", , +                    double[].class);, +            try {, +                m.invoke(gc, dashes);, +            } catch (IllegalAccessException | IllegalArgumentException , +                    | InvocationTargetException e) {, +                // ignore , +            }, +        } catch (NoSuchMethodException | SecurityException e) {, +            // ignore, +        }, +    }, +    , +    /**, +     * A utility method that calls {@code GraphicsContext.setLineDashOffset()} , +     * using reflection (since this method is only available in 8u40).  On, +     * runtimes where the method is not available, this method will do nothing., +     * , +     * @param gc  the graphics context ({@code null} not permitted)., +     * @param dashes  the dashes., +     */, +    private void setLineDashOffset(GraphicsContext gc, double dashOffset) {, +        try {, +            Method m = GraphicsContext.class.getMethod("setLineDashOffset", , +                   double.class);, +            try {, +                m.invoke(gc, dashOffset);, +            } catch (IllegalAccessException | IllegalArgumentException , +                    | InvocationTargetException e) {, +                // ignore , +            }, +        } catch (NoSuchMethodException | SecurityException e) {, +            // ignore, +        }, +    }, +    , +    private double[] coords = new double[6];, +    , +        if (clip != null && !this.clippingDisabled) {, +    public boolean drawImage(final Image img, int x, int y, ]