[+++ b/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java, + *                   Ulrich Voigt (patch #312);, + * 04-Aug-2014 : Restrict entity hotspot to plot area (patch #312) (UV);, +     * never be {@code null})., +     * the constants: {@code SHAPES}, {@code LINES}, {@code SHAPES_AND_LINES}, , +     * {@code AREA} or {@code AREA_AND_SHAPES}., +     * @param toolTipGenerator  the tool tip generator ({@code null} permitted)., +     * @param urlGenerator  the URL generator ({@code null} permitted)., +     * @return {@code true} if shapes are being plotted by the renderer., +     * @return {@code true} if lines are being plotted by the renderer., +     * @return {@code true} if Area is being plotted by the renderer., +     * @return The legend area (never {@code null})., +     * @param area  the area ({@code null} not permitted)., +     * @return The gradient paint transformer (never {@code null})., +     * @param transformer  the transformer ({@code null} not permitted)., +     *                        ({@code null} permitted)., +            if (plot.getOrientation().isVertical()) {, +            } else if (plot.getOrientation().isHorizontal()) {, +        if (plot.getOrientation().isVertical()) {, +        } else if (plot.getOrientation().isHorizontal()) {, +            } else if (orientation == PlotOrientation.HORIZONTAL) {, +                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {, +            } else if (orientation == PlotOrientation.HORIZONTAL) {, +            GeneralPath hotspot = new GeneralPath();, +            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {, +                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));, +                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));, +                lineTo(hotspot, transY1, transX1);, +                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));, +                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));, +            } else { // vertical orientation, +                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);, +                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));, +                lineTo(hotspot, transX1, transY1);, +                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));, +                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);, +            }, +            hotspot.closePath();, +, +            // limit the entity hotspot area to the data area, +            Area dataAreaHotspot = new Area(hotspot);, +            dataAreaHotspot.intersect(new Area(dataArea));, +, +            if (dataAreaHotspot.isEmpty() == false) {, +                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);, +            }, +++ b/source/org/jfree/chart/renderer/xy/XYAreaRenderer.java, + *                   Ulrich Voigt (patch #312);, + * 04-Aug-2014 : Restrict entity hotspot to plot area (patch #312) (UV);, +     * never be {@code null})., +     * the constants: {@code SHAPES}, {@code LINES}, {@code SHAPES_AND_LINES}, , +     * {@code AREA} or {@code AREA_AND_SHAPES}., +     * @param toolTipGenerator  the tool tip generator ({@code null} permitted)., +     * @param urlGenerator  the URL generator ({@code null} permitted)., +     * @return {@code true} if shapes are being plotted by the renderer., +     * @return {@code true} if lines are being plotted by the renderer., +     * @return {@code true} if Area is being plotted by the renderer., +     * @return The legend area (never {@code null})., +     * @param area  the area ({@code null} not permitted)., +     * @return The gradient paint transformer (never {@code null})., +     * @param transformer  the transformer ({@code null} not permitted)., +     *                        ({@code null} permitted)., +            if (plot.getOrientation().isVertical()) {, +            } else if (plot.getOrientation().isHorizontal()) {, +        if (plot.getOrientation().isVertical()) {, +        } else if (plot.getOrientation().isHorizontal()) {, +            } else if (orientation == PlotOrientation.HORIZONTAL) {, +                } else if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {, +            } else if (orientation == PlotOrientation.HORIZONTAL) {, +            GeneralPath hotspot = new GeneralPath();, +            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {, +                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));, +                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));, +                lineTo(hotspot, transY1, transX1);, +                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));, +                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));, +            } else { // vertical orientation, +                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);, +                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));, +                lineTo(hotspot, transX1, transY1);, +                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));, +                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);, +            }, +            hotspot.closePath();, +, +            // limit the entity hotspot area to the data area, +            Area dataAreaHotspot = new Area(hotspot);, +            dataAreaHotspot.intersect(new Area(dataArea));, +, +            if (dataAreaHotspot.isEmpty() == false) {, +                addEntity(entities, dataAreaHotspot, dataset, series, item, 0.0, 0.0);, +            }, +++ b/source/org/jfree/chart/renderer/xy/XYAreaRenderer2.java, + *                   Ulrich Voigt (patch #312);, + * 04-Aug-2014 : Restrict entity hotspot to plot area (patch #312) (UV);, +import java.awt.geom.Area;, +     * never be {@code null})., +     * @param labelGenerator  the tool tip generator to use ({@code null} , +     *     permitted)., +     * @param urlGenerator  the URL generator ({@code null} permitted).]