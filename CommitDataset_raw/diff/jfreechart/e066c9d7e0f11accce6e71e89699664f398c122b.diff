[+++ b/ChangeLog, +2007-10-22  Henry Proudhon  <henry.proudhon@ensmp.fr>, +, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +	(composite): New field,, +	(setComposite): Implemented,, +	(getComposite): Return from field., +, +++ b/ChangeLog, +2007-10-22  Henry Proudhon  <henry.proudhon@ensmp.fr>, +, +	* swt/org/jfree/experimental/swt/SWTGraphics2D.java, +	(composite): New field,, +	(setComposite): Implemented,, +	(getComposite): Return from field., +, +++ b/swt/org/jfree/experimental/swt/SWTGraphics2D.java, + * 22-Oct-2007 : Implemented some AlphaComposite support (HP);, +import java.awt.AlphaComposite;, +    /** A reference to the compositing rule to apply. This is necessary , +     * due to the poor compositing interface of the SWT toolkit. */, +    private java.awt.Composite composite;, +    , +        this.composite = AlphaComposite.getInstance(AlphaComposite.SRC, 1.0f);, +        this.composite = comp;, +        if (comp instanceof AlphaComposite) {, +            AlphaComposite acomp = (AlphaComposite) comp; , +            int alpha = (int) (acomp.getAlpha()*0xFF);, +            this.gc.setAlpha(alpha);, +        } , +        else {, +            System.out.println("warning, can only handle alpha composite at the moment.");, +        }, +        return this.composite;, +        // handle transparency and compositing., +        if (this.composite instanceof AlphaComposite) {, +            AlphaComposite acomp = (AlphaComposite) this.composite;, +            switch (acomp.getRule()) {, +            case AlphaComposite.SRC_OVER:, +                this.gc.setAlpha((int) (color.getAlpha()*acomp.getAlpha()));, +                break;, +            default:, +                this.gc.setAlpha(color.getAlpha());, +                break;, +            }, +        }]