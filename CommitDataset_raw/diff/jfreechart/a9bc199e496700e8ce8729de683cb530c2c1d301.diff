[+++ b/source/org/jfree/chart/axis/DateAxis.java, + * 18-Sep-2008 : Added locale to go with timezone (DG);, +import java.util.Locale;, +    /**, +     * The locale for the axis (<code>null</code> is not permitted)., +     *, +     * @since 1.0.11, +     */, +    private Locale locale;, +, +     *, +     * @deprecated From 1.0.11 onwards, use {@link #DateAxis(String, TimeZone,, +     *         Locale)} instead, to explicitly set the locale., +        this(label, zone, Locale.getDefault());, +    }, +, +    /**, +     * Creates a date axis. A timeline is specified for the axis. This allows, +     * special transformations to occur between a domain of values and the, +     * values included in the axis., +     *, +     * @see org.jfree.chart.axis.SegmentedTimeline, +     *, +     * @param label  the axis label (<code>null</code> permitted)., +     * @param zone  the time zone., +     * @param locale  the locale (<code>null</code> not permitted)., +     *, +     * @since 1.0.11, +     */, +    public DateAxis(String label, TimeZone zone, Locale locale) {, +        super(label, DateAxis.createStandardDateTickUnits(zone, locale));, +        this.locale = locale;, +     * @return The time zone (never <code>null</code>)., +     *, +     *, +        if (zone == null) {, +            throw new IllegalArgumentException("Null 'zone' argument.");, +        }, +            setStandardTickUnits(createStandardDateTickUnits(zone,, +                    this.locale));, +        Calendar calendar = Calendar.getInstance(this.timeZone, this.locale);, +                // FIXME:  the following month needs a locale, +        Calendar calendar = Calendar.getInstance(this.timeZone, this.locale);, +        return createStandardDateTickUnits(TimeZone.getDefault(),, +                Locale.getDefault());, +     *, +     * @deprecated Since 1.0.11, use {@link #createStandardDateTickUnits(, +     *         TimeZone, Locale)} to explicitly set the locale as well as the, +     *         time zone., +    	return createStandardDateTickUnits(zone, Locale.getDefault());, +    }, +, +    /**, +     * Returns a collection of standard date tick units.  This collection will, +     * be used by default, but you are free to create your own collection if, +     * you want to (see the, +     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited, +     * from the {@link ValueAxis} class)., +     *, +     * @param zone  the time zone (<code>null</code> not permitted)., +     * @param locale  the locale (<code>null</code> not permitted)., +     *, +     * @return A collection of standard date tick units., +     *, +     * @since 1.0.11, +     */, +    public static TickUnitSource createStandardDateTickUnits(TimeZone zone,, +    		Locale locale) {, +        if (locale == null) {, +        	throw new IllegalArgumentException("Null 'locale' argument.");, +        }, +        DateFormat f1 = new SimpleDateFormat("HH:mm:ss.SSS", locale);, +        DateFormat f2 = new SimpleDateFormat("HH:mm:ss", locale);, +        DateFormat f3 = new SimpleDateFormat("HH:mm", locale);, +        DateFormat f4 = new SimpleDateFormat("d-MMM, HH:mm", locale);, +        DateFormat f5 = new SimpleDateFormat("d-MMM", locale);, +        DateFormat f6 = new SimpleDateFormat("MMM-yyyy", locale);, +        DateFormat f7 = new SimpleDateFormat("yyyy", locale);, +                    // FIXME:  the following month needs a locale, +                    // FIXME:  the following year needs a locale]