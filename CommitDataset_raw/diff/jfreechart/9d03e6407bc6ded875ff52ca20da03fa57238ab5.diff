[+++ b/source/org/jfree/chart/plot/FastScatterPlot.java, +     * Tests an arbitrary object for equality with this plot.  Note that, +     * <code>FastScatterPlot</code> carries its data around with it (rather, +     * than referencing a dataset), and the data is included in the, +     * equality test., +++ b/source/org/jfree/chart/plot/FastScatterPlot.java, +     * Tests an arbitrary object for equality with this plot.  Note that, +     * <code>FastScatterPlot</code> carries its data around with it (rather, +     * than referencing a dataset), and the data is included in the, +     * equality test., +++ b/tests/org/jfree/chart/plot/junit/FastScatterPlotTests.java, + * (C) Copyright 2000-2009, by Object Refinery Limited and Contributors., + * (C) Copyright 2003-2009, by Object Refinery Limited and Contributors., + * 29-Jan-2009 : Updated testEquals() (DG);, +     * Some tests for the data array equality in the equals() method., +     */, +    public void testEquals2() {, +        FastScatterPlot plot1 = new FastScatterPlot();, +        FastScatterPlot plot2 = new FastScatterPlot();, +        assertTrue(plot1.equals(plot2));, +        assertTrue(plot2.equals(plot1));, +, +        float[][] a = new float[2][];, +        float[][] b = new float[2][];, +        plot1.setData(a);, +        assertFalse(plot1.equals(plot2));, +        plot2.setData(b);, +        assertTrue(plot1.equals(plot2));, +, +        a[0] = new float[6];, +        assertFalse(plot1.equals(plot2));, +        b[0] = new float[6];, +        assertTrue(plot1.equals(plot2));, +, +        a[0][0] = 1.0f;, +        assertFalse(plot1.equals(plot2));, +        b[0][0] = 1.0f;, +        assertTrue(plot1.equals(plot2));, +, +        a[0][1] = Float.NaN;, +        assertFalse(plot1.equals(plot2));, +        b[0][1] = Float.NaN;, +        assertTrue(plot1.equals(plot2));, +, +        a[0][2] = Float.POSITIVE_INFINITY;, +        assertFalse(plot1.equals(plot2));, +        b[0][2] = Float.POSITIVE_INFINITY;, +        assertTrue(plot1.equals(plot2));, +, +        a[0][3] = Float.NEGATIVE_INFINITY;, +        assertFalse(plot1.equals(plot2));, +        b[0][3] = Float.NEGATIVE_INFINITY;, +        assertTrue(plot1.equals(plot2));, +    }, +, +    /**, +            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                    buffer.toByteArray()));, +            e.printStackTrace();]