[+++ b/ChangeLog, +    (iterateRangeBounds(XYDataste, boolean)): For IntervalXYDataset, include, +    regular value and account for nulls / Double.NaN., +, +2009-09-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    Bug 2849731:, +    * source/org/jfree/chart/DatasetUtilities.java, +++ b/ChangeLog, +    (iterateRangeBounds(XYDataste, boolean)): For IntervalXYDataset, include, +    regular value and account for nulls / Double.NaN., +, +2009-09-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    Bug 2849731:, +    * source/org/jfree/chart/DatasetUtilities.java, +++ b/source/org/jfree/data/general/DatasetUtilities.java, +                    double value = intervalXYData.getXValue(series, item);, +                    if (!Double.isNaN(value)) {, +                        minimum = Math.min(minimum, value);, +                        maximum = Math.max(maximum, value);, +                    }, +                        maximum = Math.max(maximum, lvalue);, +                        minimum = Math.min(minimum, uvalue);, +                    double value = ixyd.getYValue(series, item);, +                    if (!Double.isNaN(value)) {, +                        minimum = Math.min(minimum, value);, +                        maximum = Math.max(maximum, value);, +                    }, +                        maximum = Math.max(maximum, lvalue);, +                        minimum = Math.min(minimum, uvalue);, +++ b/ChangeLog, +    (iterateRangeBounds(XYDataste, boolean)): For IntervalXYDataset, include, +    regular value and account for nulls / Double.NaN., +, +2009-09-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    Bug 2849731:, +    * source/org/jfree/chart/DatasetUtilities.java, +++ b/source/org/jfree/data/general/DatasetUtilities.java, +                    double value = intervalXYData.getXValue(series, item);, +                    if (!Double.isNaN(value)) {, +                        minimum = Math.min(minimum, value);, +                        maximum = Math.max(maximum, value);, +                    }, +                        maximum = Math.max(maximum, lvalue);, +                        minimum = Math.min(minimum, uvalue);, +                    double value = ixyd.getYValue(series, item);, +                    if (!Double.isNaN(value)) {, +                        minimum = Math.min(minimum, value);, +                        maximum = Math.max(maximum, value);, +                    }, +                        maximum = Math.max(maximum, lvalue);, +                        minimum = Math.min(minimum, uvalue);, +++ b/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java, +import org.jfree.data.xy.XYIntervalSeries;, +import org.jfree.data.xy.XYIntervalSeriesCollection;, +, +    /**, +     * Another test for bug 2849731., +     */, +    public void testBug2849731_2() {, +        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();, +        XYIntervalSeries s = new XYIntervalSeries("S1");, +        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);, +        d.addSeries(s);, +        Range r = DatasetUtilities.iterateDomainBounds(d);, +        assertEquals(1.0, r.getLowerBound(), EPSILON);, +        assertEquals(1.0, r.getUpperBound(), EPSILON);, +, +        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);, +        r = DatasetUtilities.iterateDomainBounds(d);, +        assertEquals(1.0, r.getLowerBound(), EPSILON);, +        assertEquals(1.5, r.getUpperBound(), EPSILON);, +, +        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);, +        r = DatasetUtilities.iterateDomainBounds(d);, +        assertEquals(0.5, r.getLowerBound(), EPSILON);, +        assertEquals(1.5, r.getUpperBound(), EPSILON);, +    }, +    /**, +     * Yet another test for bug 2849731., +     */, +    public void testBug2849731_3() {, +        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();, +        XYIntervalSeries s = new XYIntervalSeries("S1");, +        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);, +        d.addSeries(s);, +        Range r = DatasetUtilities.iterateRangeBounds(d);, +        assertEquals(1.5, r.getLowerBound(), EPSILON);, +        assertEquals(1.5, r.getUpperBound(), EPSILON);, +, +        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);, +        r = DatasetUtilities.iterateRangeBounds(d);, +        assertEquals(1.5, r.getLowerBound(), EPSILON);, +        assertEquals(2.5, r.getUpperBound(), EPSILON);, +, +        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);, +        r = DatasetUtilities.iterateRangeBounds(d);, +        assertEquals(1.5, r.getLowerBound(), EPSILON);]