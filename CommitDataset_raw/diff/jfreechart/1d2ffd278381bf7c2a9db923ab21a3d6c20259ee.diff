[+++ b/source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java, +import org.jfree.chart.util.ShadowGenerator;, +     * Sets the shadow generator for the plot (and all subplots) and sends, +     * a {@link PlotChangeEvent} to all registered listeners., +     * , +     * @param generator  the new generator (<code>null</code> permitted)., +     */, +    @Override, +    public void setShadowGenerator(ShadowGenerator generator) {, +        setNotify(false);, +        super.setShadowGenerator(generator);, +        Iterator iterator = this.subplots.iterator();, +        while (iterator.hasNext()) {, +            CategoryPlot plot = (CategoryPlot) iterator.next();, +            plot.setShadowGenerator(generator);, +        }, +        setNotify(true);, +    }, +, +    /**, +++ b/source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java, +import org.jfree.chart.util.ShadowGenerator;, +     * Sets the shadow generator for the plot (and all subplots) and sends, +     * a {@link PlotChangeEvent} to all registered listeners., +     * , +     * @param generator  the new generator (<code>null</code> permitted)., +     */, +    @Override, +    public void setShadowGenerator(ShadowGenerator generator) {, +        setNotify(false);, +        super.setShadowGenerator(generator);, +        Iterator iterator = this.subplots.iterator();, +        while (iterator.hasNext()) {, +            CategoryPlot plot = (CategoryPlot) iterator.next();, +            plot.setShadowGenerator(generator);, +        }, +        setNotify(true);, +    }, +, +    /**, +++ b/source/org/jfree/chart/plot/CombinedDomainXYPlot.java, +import org.jfree.chart.util.ShadowGenerator;, +     * Sets the shadow generator for the plot (and all subplots) and sends, +     * a {@link PlotChangeEvent} to all registered listeners., +     * , +     * @param generator  the new generator (<code>null</code> permitted)., +     */, +    @Override, +    public void setShadowGenerator(ShadowGenerator generator) {, +        setNotify(false);, +        super.setShadowGenerator(generator);, +        Iterator iterator = this.subplots.iterator();, +        while (iterator.hasNext()) {, +            XYPlot plot = (XYPlot) iterator.next();, +            plot.setShadowGenerator(generator);, +        }, +        setNotify(true);, +    }, +, +    /**, +++ b/source/org/jfree/chart/plot/CombinedDomainCategoryPlot.java, +import org.jfree.chart.util.ShadowGenerator;, +     * Sets the shadow generator for the plot (and all subplots) and sends, +     * a {@link PlotChangeEvent} to all registered listeners., +     * , +     * @param generator  the new generator (<code>null</code> permitted)., +     */, +    @Override, +    public void setShadowGenerator(ShadowGenerator generator) {, +        setNotify(false);, +        super.setShadowGenerator(generator);, +        Iterator iterator = this.subplots.iterator();, +        while (iterator.hasNext()) {, +            CategoryPlot plot = (CategoryPlot) iterator.next();, +            plot.setShadowGenerator(generator);, +        }, +        setNotify(true);, +    }, +, +    /**, +++ b/source/org/jfree/chart/plot/CombinedDomainXYPlot.java, +import org.jfree.chart.util.ShadowGenerator;, +     * Sets the shadow generator for the plot (and all subplots) and sends, +     * a {@link PlotChangeEvent} to all registered listeners., +     * , +     * @param generator  the new generator (<code>null</code> permitted)., +     */, +    @Override, +    public void setShadowGenerator(ShadowGenerator generator) {, +        setNotify(false);, +        super.setShadowGenerator(generator);, +        Iterator iterator = this.subplots.iterator();, +        while (iterator.hasNext()) {, +            XYPlot plot = (XYPlot) iterator.next();, +            plot.setShadowGenerator(generator);, +        }, +        setNotify(true);, +    }, +, +    /**]