[+++ b/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java, + * (C) Copyright 2000-2016, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2016, by Object Refinery Limited and Contributors., +import org.jfree.chart.util.TextUtils;, +     * both {@code null}., +     * @return The plot (possibly {@code null})., +     * @param plot  the plot ({@code null} permitted)., +     * @return The renderer state (never {@code null})., +            XYPlot plot, XYDataset data, PlotRenderingInfo info) {, +        return new XYItemRendererState(info);, +     * @return The generator (possibly {@code null})., +     * @return The generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @return The generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @return The generator (possibly {@code null})., +     * @return The generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @return The generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @return The URL generator (possibly {@code null})., +     * @param urlGenerator  the URL generator ({@code null} permitted)., +     * @param annotation  the annotation ({@code null} not permitted)., +     * @param annotation  the annotation ({@code null} not permitted)., +     * @param layer  the layer ({@code null} not permitted)., +     * @param annotation  the annotation to remove ({@code null} not, +     *     {@code null})., +     * @return The label generator (never {@code null})., +     * @param generator  the generator ({@code null} not permitted)., +     * @return The tool tip generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @return The URL generator (possibly {@code null})., +     * @param generator  the generator ({@code null} permitted)., +     * @param dataset  the dataset ({@code null} permitted)., +     * @return The range ({@code null} if the dataset is {@code null}, +     * @param dataset  the dataset ({@code null} permitted)., +     * @return The range ({@code null} if the dataset is {@code null}, +     * @param dataset  the dataset ({@code null} permitted)., +     * @return The range ({@code null} if the dataset is {@code null}, +     * @param dataset  the dataset ({@code null} permitted)., +     * @return The range ({@code null} if the dataset is {@code null}, +     * @return The legend item collection (never {@code null})., +     * @param paint  the paint ({@code null} not permitted)., +     * @param stroke  the stroke ({@code null} not permitted)., +     * Draws a line on the chart perpendicular to the x-axis to mark, +     * a value or range of values., +            } else if (orientation == PlotOrientation.VERTICAL) {, +                throw new IllegalStateException("Unrecognised orientation.");, +                Point2D coords = calculateDomainMarkerTextAnchorPoint(, +                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, , +                        g2, (float) coords.getX(), (float) coords.getY(), , +                        marker.getLabelTextAnchor());, +                g2.setPaint(marker.getLabelBackgroundColor());, +                g2.fill(r);, +                g2.setPaint(marker.getLabelPaint());, +                TextUtils.drawAlignedString(label, g2,, +                        (float) coords.getX(), (float) coords.getY(),, +        } else if (marker instanceof IntervalMarker) {, +            } else if (orientation == PlotOrientation.VERTICAL) {, +            } else {, +                } else { // PlotOrientation.HORIZONTAL, +                Point2D coords = calculateDomainMarkerTextAnchorPoint(, +                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, , +                        g2, (float) coords.getX(), (float) coords.getY(), , +                        marker.getLabelTextAnchor());, +                g2.setPaint(marker.getLabelBackgroundColor());, +                g2.fill(r);, +                g2.setPaint(marker.getLabelPaint());, +                        (float) coords.getX(), (float) coords.getY(),, +     * Calculates the {@code (x, y)} coordinates for drawing a marker label., +     * Draws a line on the chart perpendicular to the y-axis to mark a value, +     * or range of values., +            } else if (orientation == PlotOrientation.VERTICAL) {, +            } else {, +                throw new IllegalStateException("Unrecognised orientation.");, +                Point2D coords = calculateRangeMarkerTextAnchorPoint(, +                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, , +                        g2, (float) coords.getX(), (float) coords.getY(), , +                        marker.getLabelTextAnchor());, +                g2.setPaint(marker.getLabelBackgroundColor());, +                g2.fill(r);, +                g2.setPaint(marker.getLabelPaint());, +                        (float) coords.getX(), (float) coords.getY(),, +        } else if (marker instanceof IntervalMarker) {, +            } else if (orientation == PlotOrientation.VERTICAL) {, +            } else {, +                } else { // PlotOrientation.HORIZONTAL, +                Point2D coords = calculateRangeMarkerTextAnchorPoint(, +                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, , +                        g2, (float) coords.getX(), (float) coords.getY(), , +                        marker.getLabelTextAnchor());, +                g2.setPaint(marker.getLabelBackgroundColor());, +                g2.fill(r);, +                g2.setPaint(marker.getLabelPaint());, +                        (float) coords.getX(), (float) coords.getY(),, +     * @param obj  the object ({@code null} permitted)., +     * @return The drawing supplier (possibly {@code null})., +     * @param crosshairState  the crosshair state ({@code null} permitted,, +     * @param orientation  the plot orientation ({@code null} not, +     * @param area  the entity area (if {@code null} a default will be]