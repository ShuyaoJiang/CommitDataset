[+++ b/source/org/jfree/data/time/TimeSeries.java, + * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors., + * (C) Copyright 2001-2014, by Object Refinery Limited., +import java.util.Calendar;, +import org.jfree.chart.util.ParamChecks;, +import org.jfree.data.Range;, +     * Returns the range of y-values in the time series.  Any <code>null</code> , +     * data values in the series will be ignored (except for the special case , +     * where all data values are <code>null</code>, in which case the return , +     * value is <code>Range(Double.NaN, Double.NaN)</code>).  If the time , +     * series contains no items, this method will return <code>null</code>., +     * , +     * @return The range of y-values in the time series (possibly , +     *     <code>null</code>)., +     * , +     * @since 1.0.18, +     */, +    public Range findValueRange() {, +        if (this.data.isEmpty()) {, +            return null;, +        }, +        return new Range(this.minY, this.maxY);, +    }, +    , +    /**, +     * Returns the range of y-values in the time series that fall within , +     * the specified range of x-values.  This is equivalent to, +     * <code>findValueRange(xRange, TimePeriodAnchor.MIDDLE, timeZone)</code>., +     * , +     * @param xRange  the subrange of x-values (<code>null</code> not , +     *     permitted)., +     * @param timeZone  the time zone used to convert x-values to time periods, +     *     (<code>null</code> not permitted)., +     * , +     * @return The range. , +     * , +     * @since 1.0.18, +     */, +    public Range findValueRange(Range xRange, TimeZone timeZone) {, +        return findValueRange(xRange, TimePeriodAnchor.MIDDLE, timeZone);, +    }, +    , +    /**, +     * Finds the range of y-values that fall within the specified range of, +     * x-values (where the x-values are interpreted as milliseconds since the, +     * epoch and converted to time periods using the specified timezone)., +     * , +     * @param xRange  the subset of x-values to use (<coded>null</code> not, +     *     permitted)., +     * @param xAnchor  the anchor point for the x-values (<code>null</code>, +     *     not permitted)., +     * @param zone  the time zone (<code>null</code> not permitted)., +     * , +     * @return The range of y-values., +     * , +     * @since 1.0.18, +     */, +    public Range findValueRange(Range xRange, TimePeriodAnchor xAnchor, , +            TimeZone zone) {, +        ParamChecks.nullNotPermitted(xRange, "xRange");, +        ParamChecks.nullNotPermitted(xAnchor, "xAnchor");, +        ParamChecks.nullNotPermitted(zone, "zone");, +        if (this.data.isEmpty()) {, +            return null;, +        }, +        Calendar calendar = Calendar.getInstance(zone);, +        // since the items are ordered, we could be more clever here and avoid, +        // iterating over all the data, +        double lowY = Double.POSITIVE_INFINITY;, +        double highY = Double.NEGATIVE_INFINITY;, +        for (int i = 0; i < this.data.size(); i++) {, +            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);, +            long millis = item.getPeriod().getMillisecond(xAnchor, calendar);, +            if (xRange.contains(millis)) {, +                Number n = item.getValue();, +                if (n != null) {, +                    double v = n.doubleValue();, +                    lowY = Math.min(lowY, v);, +                    highY = Math.max(highY, v);, +                }, +            }, +        }, +        if (Double.isInfinite(lowY) && Double.isInfinite(highY)) {, +            if (lowY < highY) {, +                return new Range(lowY, highY);, +            } else {, +                return new Range(Double.NaN, Double.NaN);, +            }, +        }, +        return new Range(lowY, highY);, +    }, +, +    /**, +     * Returns the smallest y-value in the series, ignoring any , +     * <code>null</code> and <code>Double.NaN</code> values.  This method , +     * returns <code>Double.NaN</code> if there is no smallest y-value (for , +     * example, when the series is empty)., +     * Returns the largest y-value in the series, ignoring any , +     * <code>null</code> and <code>Double.NaN</code> values.  This method , +     * returns <code>Double.NaN</code> if there is no largest y-value]