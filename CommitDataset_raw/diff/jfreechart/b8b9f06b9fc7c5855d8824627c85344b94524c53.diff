[+++ b/ChangeLog, +    * source/org/jfree/data/statistics/HistogramDataset.java, +    (clone): Reimplemented., +, +2008-05-22  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/data/statistics/HistogramDataset.java, +    (clone): Reimplemented., +, +2008-05-22  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/statistics/HistogramDataset.java, + * 22-May-2008 : Implemented clone() method override (DG);, +    	HistogramDataset clone = (HistogramDataset) super.clone();, +        int seriesCount = getSeriesCount();, +    	clone.list = new java.util.ArrayList(seriesCount);, +        for (int i = 0; i < seriesCount; i++) {, +        	clone.list.add(new HashMap((Map) this.list.get(i)));, +        }, +    	return clone;, +++ b/ChangeLog, +    * source/org/jfree/data/statistics/HistogramDataset.java, +    (clone): Reimplemented., +, +2008-05-22  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/statistics/HistogramDataset.java, + * 22-May-2008 : Implemented clone() method override (DG);, +    	HistogramDataset clone = (HistogramDataset) super.clone();, +        int seriesCount = getSeriesCount();, +    	clone.list = new java.util.ArrayList(seriesCount);, +        for (int i = 0; i < seriesCount; i++) {, +        	clone.list.add(new HashMap((Map) this.list.get(i)));, +        }, +    	return clone;, +++ b/tests/org/jfree/data/statistics/junit/HistogramDatasetTests.java, + * 22-May-2008 : Added testAddSeries2() and enhanced testCloning() (DG);, +, +        d1.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertFalse(d1.equals(d2));, +        d2.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertTrue(d1.equals(d2));, +            e.printStackTrace();, +, +        // simple check for independence, +        d1.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertFalse(d1.equals(d2));, +        d2.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertTrue(d1.equals(d2));, +, +        // simple check for independence, +        d1.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertFalse(d1.equals(d2));, +        d2.addSeries("Series 2", new double[] {1.0, 2.0, 3.0}, 2);, +        assertTrue(d1.equals(d2));, +     * Another check for the addSeries() method., +     */, +    public void testAddSeries2() {, +        double[] values = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};, +        HistogramDataset hd = new HistogramDataset();, +        hd.addSeries("S1", values, 5);, +        assertEquals(0.0, hd.getStartXValue(0, 0), EPSILON);, +        assertEquals(1.0, hd.getEndXValue(0, 0), EPSILON);, +        assertEquals(1.0, hd.getYValue(0, 0), EPSILON);, +        assertEquals(1.0, hd.getStartXValue(0, 1), EPSILON);, +        assertEquals(2.0, hd.getEndXValue(0, 1), EPSILON);, +        assertEquals(1.0, hd.getYValue(0, 1), EPSILON);, +        assertEquals(2.0, hd.getStartXValue(0, 2), EPSILON);, +        assertEquals(3.0, hd.getEndXValue(0, 2), EPSILON);, +        assertEquals(1.0, hd.getYValue(0, 2), EPSILON);, +        assertEquals(3.0, hd.getStartXValue(0, 3), EPSILON);, +        assertEquals(4.0, hd.getEndXValue(0, 3), EPSILON);, +        assertEquals(1.0, hd.getYValue(0, 3), EPSILON);, +        assertEquals(4.0, hd.getStartXValue(0, 4), EPSILON);, +        assertEquals(5.0, hd.getEndXValue(0, 4), EPSILON);, +        assertEquals(2.0, hd.getYValue(0, 4), EPSILON);, +    }, +, +    /**]