[+++ b/ChangeLog, +2009-06-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeries.java, +    (addOrUpdate(RegularTimePeriod, Number)): Delegate to new method,, +    (addOrUpdate(TimeSeriesDataItem)): New method., +, +++ b/ChangeLog, +2009-06-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeries.java, +    (addOrUpdate(RegularTimePeriod, Number)): Delegate to new method,, +    (addOrUpdate(TimeSeriesDataItem)): New method., +, +++ b/source/org/jfree/data/time/TimeSeries.java, + * 10-Jun-2009 : Added addOrUpdate(TimeSeriesDataItem) method (DG);, +     * {@link SeriesChangeEvent} to all registered listeners., +        return addOrUpdate(new TimeSeriesDataItem(period, value));, +    }, +    /**, +     * Adds or updates an item in the times series and sends a, +     * {@link SeriesChangeEvent} to all registered listeners., +     *, +     * @param item  the data item (<code>null</code> not permitted)., +     *, +     * @return A copy of the overwritten data item, or <code>null</code> if no, +     *         item was overwritten., +     *, +     * @since 1.0.14, +     */, +    public TimeSeriesDataItem addOrUpdate(TimeSeriesDataItem item) {, +, +        if (item == null) {, +        Class periodClass = item.getPeriod().getClass();, +            this.timePeriodClass = periodClass;, +        else if (!this.timePeriodClass.equals(periodClass)) {, +                    + "period class is " + periodClass.getName(), +        int index = Collections.binarySearch(this.data, item);, +            overwritten = (TimeSeriesDataItem) existing.clone();, +            existing.setValue(item.getValue());, +            else if (item.getValue() != null) {, +                double yy = item.getValue().doubleValue();, +            item = (TimeSeriesDataItem) item.clone();, +++ b/ChangeLog, +2009-06-10  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/data/time/TimeSeries.java, +    (addOrUpdate(RegularTimePeriod, Number)): Delegate to new method,, +    (addOrUpdate(TimeSeriesDataItem)): New method., +, +++ b/source/org/jfree/data/time/TimeSeries.java, + * 10-Jun-2009 : Added addOrUpdate(TimeSeriesDataItem) method (DG);, +     * {@link SeriesChangeEvent} to all registered listeners., +        return addOrUpdate(new TimeSeriesDataItem(period, value));, +    }, +    /**, +     * Adds or updates an item in the times series and sends a, +     * {@link SeriesChangeEvent} to all registered listeners., +     *, +     * @param item  the data item (<code>null</code> not permitted)., +     *, +     * @return A copy of the overwritten data item, or <code>null</code> if no, +     *         item was overwritten., +     *, +     * @since 1.0.14, +     */, +    public TimeSeriesDataItem addOrUpdate(TimeSeriesDataItem item) {, +, +        if (item == null) {, +        Class periodClass = item.getPeriod().getClass();, +            this.timePeriodClass = periodClass;, +        else if (!this.timePeriodClass.equals(periodClass)) {, +                    + "period class is " + periodClass.getName(), +        int index = Collections.binarySearch(this.data, item);, +            overwritten = (TimeSeriesDataItem) existing.clone();, +            existing.setValue(item.getValue());, +            else if (item.getValue() != null) {, +                double yy = item.getValue().doubleValue();, +            item = (TimeSeriesDataItem) item.clone();, +++ b/tests/org/jfree/data/time/junit/TimeSeriesTests.java, +     * Some more checks for the addOrUpdate() method., +     */, +    public void testAddOrUpdate4() {, +        TimeSeries ts = new TimeSeries("S");, +        TimeSeriesDataItem overwritten = ts.addOrUpdate(new Year(2009), 20.09);, +        assertNull(overwritten);, +        overwritten = ts.addOrUpdate(new Year(2009), 1.0);, +        assertEquals(new Double(20.09), overwritten.getValue());, +        assertEquals(new Double(1.0), ts.getValue(new Year(2009)));, +, +        // changing the overwritten record shouldn't affect the series, +        overwritten.setValue(null);, +        assertEquals(new Double(1.0), ts.getValue(new Year(2009)));, +, +        TimeSeriesDataItem item = new TimeSeriesDataItem(new Year(2010), 20.10);, +        overwritten = ts.addOrUpdate(item);, +        assertNull(overwritten);, +        assertEquals(new Double(20.10), ts.getValue(new Year(2010)));, +        // changing the item that was added should not change the series, +        item.setValue(null);]