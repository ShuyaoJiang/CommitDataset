[+++ b/src/main/java/org/jfree/chart/util/ShapeUtils.java, +     * Returns a clone of the specified shape, or {@code null}.  At the, +     * {@code Line2D}, {@code RectangularShape}, {@code Area}, +     * and {@code GeneralPath}., +     * {@code RectangularShape} includes {@code Arc2D},, +     * {@code Ellipse2D}, {@code Rectangle2D},, +     * {@code RoundRectangle2D}., +     * @param shape  the shape to clone ({@code null} permitted,, +     *               returns {@code null})., +     * @return A clone or {@code null}., +     * Tests two shapes for equality.  If both shapes are {@code null},, +     * this method will return {@code true}., +     * {@code Ellipse2D}, {@code Line2D} and {@code Rectangle2D}, +     * @param s1  the first shape ({@code null} permitted)., +     * @param s2  the second shape ({@code null} permitted)., +     * Compares two lines are returns {@code true} if they are equal or, +     * both {@code null}., +     * @param l1  the first line ({@code null} permitted)., +     * @param l2  the second line ({@code null} permitted)., +     * Compares two ellipses and returns {@code true} if they are equal or, +     * both {@code null}., +     * @param e1  the first ellipse ({@code null} permitted)., +     * @param e2  the second ellipse ({@code null} permitted)., +     * Compares two arcs and returns {@code true} if they are equal or, +     * both {@code null}., +     * @param a1  the first arc ({@code null} permitted)., +     * @param a2  the second arc ({@code null} permitted)., +     * Tests two polygons for equality.  If both are {@code null} this, +     * method returns {@code true}., +     * @param p1  polygon 1 ({@code null} permitted)., +     * @param p2  polygon 2 ({@code null} permitted)., +     * Tests two polygons for equality.  If both are {@code null} this, +     * method returns {@code true}., +     * @param p1  path 1 ({@code null} permitted)., +     * @param p2  path 2 ({@code null} permitted)., +     * @param shape  the shape ({@code null} not permitted)., +     * @param shape  the shape ({@code null} not permitted)., +     * @param anchor  the anchor ({@code null} not permitted)., +     * @param base  the shape ({@code null} permitted, returns, +     *              {@code null})., +     * Draws a shape with the specified rotation about {@code (x, y)}., +     * @param g2  the graphics device ({@code null} not permitted)., +     * @param shape  the shape ({@code null} not permitted)., +     * @param line  the line ({@code null} not permitted)., +     * @param area  the constraining rectangle ({@code null} not, +     * @throws NullPointerException if {@code area} is {@code null}.]