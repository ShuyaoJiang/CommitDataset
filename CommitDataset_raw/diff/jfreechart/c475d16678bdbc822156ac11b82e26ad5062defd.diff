[+++ b/ChangeLog, +2015-11-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/util/ParamChecks.java, +    (requireInRange): New method,, +    * org/jfree/data/time/Second.java, +    (Second(int, Minute)) : Check argument is in range., +, +++ b/ChangeLog, +2015-11-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/util/ParamChecks.java, +    (requireInRange): New method,, +    * org/jfree/data/time/Second.java, +    (Second(int, Minute)) : Check argument is in range., +, +++ b/source/org/jfree/chart/util/ParamChecks.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2011-2015, by Object Refinery Limited., + * 23-Nov-2015 : Added requireInRange() method (DG);, +    , +    /**, +     * Checks that the value falls within the specified range and, if it does, +     * not, throws an {@code IllegalArgumentException}., +     * , +     * @param value  the value., +     * @param name  the parameter name., +     * @param lowerBound  the lower bound of the permitted range., +     * @param upperBound  the upper bound fo the permitted range., +     * , +     * @since 1.0.20, +     */, +    public static void requireInRange(int value, String name, , +            int lowerBound, int upperBound) {, +        if (value < lowerBound) {, +            throw new IllegalArgumentException("Require '" + name + "' (" , +                    + value + ") to be in the range " + lowerBound + " to " , +                    + upperBound);, +        }, +    }, +++ b/ChangeLog, +2015-11-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * org/jfree/chart/util/ParamChecks.java, +    (requireInRange): New method,, +    * org/jfree/data/time/Second.java, +    (Second(int, Minute)) : Check argument is in range., +, +++ b/source/org/jfree/chart/util/ParamChecks.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2011-2015, by Object Refinery Limited., + * 23-Nov-2015 : Added requireInRange() method (DG);, +    , +    /**, +     * Checks that the value falls within the specified range and, if it does, +     * not, throws an {@code IllegalArgumentException}., +     * , +     * @param value  the value., +     * @param name  the parameter name., +     * @param lowerBound  the lower bound of the permitted range., +     * @param upperBound  the upper bound fo the permitted range., +     * , +     * @since 1.0.20, +     */, +    public static void requireInRange(int value, String name, , +            int lowerBound, int upperBound) {, +        if (value < lowerBound) {, +            throw new IllegalArgumentException("Require '" + name + "' (" , +                    + value + ") to be in the range " + lowerBound + " to " , +                    + upperBound);, +        }, +    }, +++ b/source/org/jfree/data/time/Second.java, + * (C) Copyright 2000-2015, by Object Refinery Limited and Contributors., + * (C) Copyright 2001-2015, by Object Refinery Limited., +     * @param second  the second (0 to 59)., +     * @param minute  the minute ({@code null} not permitted)., +        ParamChecks.requireInRange(second, "second", , +                Second.FIRST_SECOND_IN_MINUTE, Second.LAST_SECOND_IN_MINUTE);, +     * time zone., +     * @param time  the time ({@code null} not permitted)., +     * @param time  the time ({@code null} not permitted)., +     * @param zone  the time zone ({@code null} not permitted)., +     * @param locale  the locale ({@code null} not permitted)., +     * @return The minute (never {@code null})., +     * @param calendar  the calendar ({@code null} not permitted)., +     * @param calendar  the calendar/timezone ({@code null} not permitted)., +     * @throws NullPointerException if {@code calendar} is {@code null}., +     * @param calendar  the calendar/timezone ({@code null} not permitted)., +     * @throws NullPointerException if {@code calendar} is {@code null}., +     * @param obj  the object to compare ({@code null} permitted)., +     * @return {@code true} if second and minute of this and the object, +     * @return The second, or {@code null} if the string is not parseable.]