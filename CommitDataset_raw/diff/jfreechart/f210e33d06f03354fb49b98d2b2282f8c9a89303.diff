[+++ b/ChangeLog, +    * source/org/jfree/data/Range.java, +    (combineIgnoringNaN): New method., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/data/Range.java, +    (combineIgnoringNaN): New method., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/Range.java, + * (C) Copyright 2000-2012, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2012, by Object Refinery Limited and Contributors., + * 08-Jan-2012 : New method combineIgnoringNaN() (DG);, +        double l = Math.min(range1.getLowerBound(), range2.getLowerBound());, +        double u = Math.max(range1.getUpperBound(), range2.getUpperBound());, +, +    /**, +     * Combines two ranges.  This method has a special handling for Double.NaN., +     *, +     * @param range1  the first range (<code>null</code> permitted)., +     * @param range2  the second range (<code>null</code> permitted)., +     *, +     * @return A new range (possibly <code>null</code>)., +     *, +     * @since 1.0.15, +     */, +    public static Range combineIgnoringNaN(Range range1, Range range2) {, +        if (range1 == null) {, +            return range2;, +        if (range2 == null) {, +            return range1;, +        }, +        double l = min(range1.getLowerBound(), range2.getLowerBound());, +        double u = max(range1.getUpperBound(), range2.getUpperBound());, +        return new Range(l, u);, +    }, +, +    private static double min(double d1, double d2) {, +        if (Double.isNaN(d1)) {, +            return d2;, +        }, +        if (Double.isNaN(d2)) {, +            return d1;, +        }, +        return Math.min(d1, d2);, +    }, +, +    private static double max(double d1, double d2) {, +        if (Double.isNaN(d1)) {, +            return d2;, +        }, +        if (Double.isNaN(d2)) {, +            return d1;, +        }, +        return Math.max(d1, d2);, +++ b/ChangeLog, +    * source/org/jfree/data/Range.java, +    (combineIgnoringNaN): New method., +, +2012-01-08  David Gilbert <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/Range.java, + * (C) Copyright 2000-2012, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2012, by Object Refinery Limited and Contributors., + * 08-Jan-2012 : New method combineIgnoringNaN() (DG);, +        double l = Math.min(range1.getLowerBound(), range2.getLowerBound());, +        double u = Math.max(range1.getUpperBound(), range2.getUpperBound());, +, +    /**, +     * Combines two ranges.  This method has a special handling for Double.NaN., +     *, +     * @param range1  the first range (<code>null</code> permitted)., +     * @param range2  the second range (<code>null</code> permitted)., +     *, +     * @return A new range (possibly <code>null</code>)., +     *, +     * @since 1.0.15, +     */, +    public static Range combineIgnoringNaN(Range range1, Range range2) {, +        if (range1 == null) {, +            return range2;, +        if (range2 == null) {, +            return range1;, +        }, +        double l = min(range1.getLowerBound(), range2.getLowerBound());, +        double u = max(range1.getUpperBound(), range2.getUpperBound());, +        return new Range(l, u);, +    }, +, +    private static double min(double d1, double d2) {, +        if (Double.isNaN(d1)) {, +            return d2;, +        }, +        if (Double.isNaN(d2)) {, +            return d1;, +        }, +        return Math.min(d1, d2);]