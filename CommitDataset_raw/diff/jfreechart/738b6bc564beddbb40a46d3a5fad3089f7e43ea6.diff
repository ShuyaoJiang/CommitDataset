[+++ b/ChangeLog, +	* source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java, +	(add(BoxAndWhiskerItem, Comparable, Comparable)): Update cached bounds by, +	iteration if necessary,, +	(updateBounds): New private method,, +	* tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java, +	(testGetRangeBounds): New test method., +, +2007-10-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java, +	(add(BoxAndWhiskerItem, Comparable, Comparable)): Update cached bounds by, +	iteration if necessary,, +	(updateBounds): New private method,, +	* tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java, +	(testGetRangeBounds): New test method., +, +2007-10-03  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java, + * 03-Oct-2007 : Fixed another bug in updating cached bounds (DG);, +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +     * , +     * @see #add(BoxAndWhiskerItem, Comparable, Comparable), +        BoxAndWhiskerItem item = BoxAndWhiskerCalculator, +                .calculateBoxAndWhiskerStatistics(list);, +     * @param rowKey  the row key (<code>null</code> not permitted)., +     * @param columnKey  the column key (<code>null</code> not permitted)., +     * , +     * @see #add(List, Comparable, Comparable), +    public void add(BoxAndWhiskerItem item, Comparable rowKey, , +        if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn , +                == c) || (this.minimumRangeValueRow == r , +                && this.minimumRangeValueColumn == c))  {, +            updateBounds();, +        else {, +        }, +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getColumnKey(int), +     * , +     * @see #getColumnIndex(Comparable), +     * , +     * @see #getRowKeys(), +     * , +     * @see #getRowKey(int), +     * , +     * @see #getRowIndex(Comparable), +     * , +     * @see #getColumnKeys(), +     * , +     * @see #getColumnCount(), +     * , +     * @see #getRowCount(), +     * , +     * @see #getRangeUpperBound(boolean), +     * , +     * @see #getRangeLowerBound(boolean), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * , +     * @see #getItem(int, int), +     * Resets the cached bounds, by iterating over the entire dataset to find, +     * the current bounds., +     */, +    private void updateBounds() {, +        this.minimumRangeValue = Double.NaN;]