[+++ b/ChangeLog, +    * source/org/jfree/data/DefaultKeyedValues.java, +    (removeValue): Always rebuild index,, +    * source/org/jfree/data/DefaultKeyedValues2D.java, +    (removeColumn(Comparable)): Added argument checks, and protect against, +    rows not containing the specified key,, +    * tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java, +    (testBug1835955): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java, +    (testRemoveColumnByKey): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValuesTests.java, +    (testGetIndex2): New method., +, +2007-11-21  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/data/DefaultKeyedValues.java, +    (removeValue): Always rebuild index,, +    * source/org/jfree/data/DefaultKeyedValues2D.java, +    (removeColumn(Comparable)): Added argument checks, and protect against, +    rows not containing the specified key,, +    * tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java, +    (testBug1835955): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java, +    (testRemoveColumnByKey): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValuesTests.java, +    (testGetIndex2): New method., +, +2007-11-21  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/DefaultKeyedValues.java, + * 21-Nov-2007 : Fixed bug in removeValue() method from previous patch (DG);, +++ b/ChangeLog, +    * source/org/jfree/data/DefaultKeyedValues.java, +    (removeValue): Always rebuild index,, +    * source/org/jfree/data/DefaultKeyedValues2D.java, +    (removeColumn(Comparable)): Added argument checks, and protect against, +    rows not containing the specified key,, +    * tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java, +    (testBug1835955): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java, +    (testRemoveColumnByKey): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValuesTests.java, +    (testGetIndex2): New method., +, +2007-11-21  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/DefaultKeyedValues.java, + * 21-Nov-2007 : Fixed bug in removeValue() method from previous patch (DG);, +++ b/source/org/jfree/data/DefaultKeyedValues2D.java, + * 21-Nov-2007 : Fixed bug (1835955) in removeColumn(Comparable) method (DG);, +     * Removes a column from the table., +     * @throws UnknownKeyException if the table does not contain a column with, +     *     the specified key., +     * @throws IllegalArgumentException if <code>columnKey</code> is , +     *     <code>null</code>., +     * , +    	if (columnKey == null) {, +    		throw new IllegalArgumentException("Null 'columnKey' argument.");, +    	}, +    	if (!this.columnKeys.contains(columnKey)) {, +    		throw new UnknownKeyException("Unknown key: " + columnKey);, +    	}, +            int index = rowData.getIndex(columnKey);, +            if (index >= 0) {, +        }, +++ b/ChangeLog, +    * source/org/jfree/data/DefaultKeyedValues.java, +    (removeValue): Always rebuild index,, +    * source/org/jfree/data/DefaultKeyedValues2D.java, +    (removeColumn(Comparable)): Added argument checks, and protect against, +    rows not containing the specified key,, +    * tests/org/jfree/data/category/junit/DefaultCategoryDatasetTests.java, +    (testBug1835955): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValues2DTests.java, +    (testRemoveColumnByKey): New method,, +    * tests/org/jfree/data/junit/DefaultKeyedValuesTests.java, +    (testGetIndex2): New method., +, +2007-11-21  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/DefaultKeyedValues.java, + * 21-Nov-2007 : Fixed bug in removeValue() method from previous patch (DG);, +++ b/source/org/jfree/data/DefaultKeyedValues2D.java, + * 21-Nov-2007 : Fixed bug (1835955) in removeColumn(Comparable) method (DG);, +     * Removes a column from the table., +     * @throws UnknownKeyException if the table does not contain a column with, +     *     the specified key., +     * @throws IllegalArgumentException if <code>columnKey</code> is , +     *     <code>null</code>., +     * , +    	if (columnKey == null) {, +    		throw new IllegalArgumentException("Null 'columnKey' argument.");, +    	}, +    	if (!this.columnKeys.contains(columnKey)) {, +    		throw new UnknownKeyException("Unknown key: " + columnKey);, +    	}, +            int index = rowData.getIndex(columnKey);, +            if (index >= 0) {, +        }]