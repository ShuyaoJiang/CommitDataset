[+++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/CategoryItemRendererState.java, +    (getVisibleSeriesArray()): New method,, +    * source/org/jfree/chart/renderer/StackedAreaRenderer.java, +    (drawItem): Fix handling of renderAsPercentages,, +    (getStackValues): Likewise,, +    * source/org/jfree/data/DataUtilities.java, +    (calculateColumnTotal): New method,, +    (calculateRowTotal): Likewise., +, +2009-02-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/CategoryItemRendererState.java, +    (getVisibleSeriesArray()): New method,, +    * source/org/jfree/chart/renderer/StackedAreaRenderer.java, +    (drawItem): Fix handling of renderAsPercentages,, +    (getStackValues): Likewise,, +    * source/org/jfree/data/DataUtilities.java, +    (calculateColumnTotal): New method,, +    (calculateRowTotal): Likewise., +, +2009-02-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/category/CategoryItemRendererState.java, + * 04-Feb-2009 : Added getVisibleSeriesArray() method (DG);, +     * Returns a copy of the visible series array., +     * , +     * @return The visible series array (possibly <code>null</code>)., +     * , +     * @since 1.0.13, +     */, +    public int[] getVisibleSeriesArray() {, +        if (this.visibleSeries == null) {, +            return null;, +        }, +        int[] result = new int[this.visibleSeries.length];, +        System.arraycopy(this.visibleSeries, 0, result, 0,, +                this.visibleSeries.length);, +        return result;, +    }, +, +    /**, +++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/CategoryItemRendererState.java, +    (getVisibleSeriesArray()): New method,, +    * source/org/jfree/chart/renderer/StackedAreaRenderer.java, +    (drawItem): Fix handling of renderAsPercentages,, +    (getStackValues): Likewise,, +    * source/org/jfree/data/DataUtilities.java, +    (calculateColumnTotal): New method,, +    (calculateRowTotal): Likewise., +, +2009-02-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/category/CategoryItemRendererState.java, + * 04-Feb-2009 : Added getVisibleSeriesArray() method (DG);, +     * Returns a copy of the visible series array., +     * , +     * @return The visible series array (possibly <code>null</code>)., +     * , +     * @since 1.0.13, +     */, +    public int[] getVisibleSeriesArray() {, +        if (this.visibleSeries == null) {, +            return null;, +        }, +        int[] result = new int[this.visibleSeries.length];, +        System.arraycopy(this.visibleSeries, 0, result, 0,, +                this.visibleSeries.length);, +        return result;, +    }, +, +    /**, +++ b/source/org/jfree/chart/renderer/category/StackedAreaRenderer.java, + * 04-Feb-2009 : Fixed bug for renderAsPercentages == true (DG);, +            if (this.renderAsPercentages) {, +                double total = DataUtilities.calculateColumnTotal(dataset,, +                        column, state.getVisibleSeriesArray());, +                y1 = y1 / total;, +        }, +        double[] stack1 = getStackValues(dataset, row, column,, +                state.getVisibleSeriesArray());, +            if (this.renderAsPercentages) {, +                double total = DataUtilities.calculateColumnTotal(dataset,, +                        Math.max(column - 1, 0), state.getVisibleSeriesArray());, +                y0 = y0 / total;, +        }, +        double[] stack0 = getStackValues(dataset, row, Math.max(column - 1, 0),, +                state.getVisibleSeriesArray());, +            if (this.renderAsPercentages) {, +                double total = DataUtilities.calculateColumnTotal(dataset,, +                        Math.min(column + 1, itemCount - 1),, +                        state.getVisibleSeriesArray());, +                y2 = y2 / total;, +            }, +                itemCount - 1), state.getVisibleSeriesArray());, +            int series, int index, int[] validRows) {, +        double total = 0.0;, +        if (this.renderAsPercentages) {]