[+++ b/tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        DefaultCategoryItemRenderer r2 = (DefaultCategoryItemRenderer) , +                r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        DefaultCategoryItemRenderer r2;, +                new ByteArrayInputStream(buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        DefaultCategoryItemRenderer r2 = (DefaultCategoryItemRenderer) , +                r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        DefaultCategoryItemRenderer r2;, +                new ByteArrayInputStream(buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java, +    public void testCloning() throws CloneNotSupportedException {, +        IntervalBarRenderer r2 = (IntervalBarRenderer) r1.clone();, +++ b/tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        DefaultCategoryItemRenderer r2 = (DefaultCategoryItemRenderer) , +                r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        DefaultCategoryItemRenderer r2;, +                new ByteArrayInputStream(buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java, +    public void testCloning() throws CloneNotSupportedException {, +        IntervalBarRenderer r2 = (IntervalBarRenderer) r1.clone();, +++ b/tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        LayeredBarRenderer r2 = (LayeredBarRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        LayeredBarRenderer r2;, +        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        DefaultCategoryItemRenderer r2 = (DefaultCategoryItemRenderer) , +                r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        DefaultCategoryItemRenderer r2;, +                new ByteArrayInputStream(buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java, +    public void testCloning() throws CloneNotSupportedException {, +        IntervalBarRenderer r2 = (IntervalBarRenderer) r1.clone();, +++ b/tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        LayeredBarRenderer r2 = (LayeredBarRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        LayeredBarRenderer r2;, +        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java, + * (C) Copyright 2005-2013, by Object Refinery Limited and Contributors., +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        LevelRenderer r2 = (LevelRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        LevelRenderer r2;, +        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/DefaultCategoryItemRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        DefaultCategoryItemRenderer r2 = (DefaultCategoryItemRenderer) , +                r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        DefaultCategoryItemRenderer r2;, +                new ByteArrayInputStream(buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java, +    public void testCloning() throws CloneNotSupportedException {, +        IntervalBarRenderer r2 = (IntervalBarRenderer) r1.clone();, +++ b/tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        LayeredBarRenderer r2 = (LayeredBarRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        LayeredBarRenderer r2;, +        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java, + * (C) Copyright 2005-2013, by Object Refinery Limited and Contributors., +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        LevelRenderer r2 = (LevelRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        LevelRenderer r2;, +        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(, +                buffer.toByteArray()));, +++ b/tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java, +import java.io.IOException;, +    public void testCloning() throws CloneNotSupportedException {, +        MinMaxCategoryRenderer r2 = (MinMaxCategoryRenderer) r1.clone();, +    public void testSerialization() throws IOException, ClassNotFoundException {, +        MinMaxCategoryRenderer r2;]