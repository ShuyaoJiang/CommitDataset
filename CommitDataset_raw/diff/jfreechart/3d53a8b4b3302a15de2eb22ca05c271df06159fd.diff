[+++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java, +    (drawItem): Put drawing code in separate passes., +, +2009-01-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +    * source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java, +    (drawItem): Put drawing code in separate passes., +, +2009-01-23  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java, + * 23-Jan-2009 : In drawItem, divide code into passes (DG);, +        if (meanValue == null) {, +            return;, +        }, +            x1 = domainAxis.getCategorySeriesMiddle(column,, +                    dataset.getColumnCount(),, +        // draw the standard deviation lines *before* the shapes (if they're, +        // visible) - it looks better if the shape fill colour is different to, +        // the line colour, +        Number sdv = statDataset.getStdDevValue(row, column);, +        if (pass == 1 && sdv != null) {, +            double valueDelta = sdv.doubleValue();, +        }, +, +        Shape hotspot = null;, +        if (pass == 1 && getItemShapeVisible(row, column)) {, +            Shape shape = getItemShape(row, column);, +            if (orientation == PlotOrientation.HORIZONTAL) {, +                shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);, +            }, +            else if (orientation == PlotOrientation.VERTICAL) {, +                shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);, +            }, +            hotspot = shape;, +            , +            if (getItemShapeFilled(row, column)) {, +                if (getUseFillPaint()) {, +                    g2.setPaint(getItemFillPaint(row, column));, +                }, +                else {, +                    g2.setPaint(getItemPaint(row, column));, +                }, +                g2.fill(shape);, +            }, +            if (getDrawOutlines()) {, +                if (getUseOutlinePaint()) {, +                    g2.setPaint(getItemOutlinePaint(row, column));, +                }, +                else {, +                    g2.setPaint(getItemPaint(row, column));, +                }, +                g2.setStroke(getItemOutlineStroke(row, column));, +                g2.draw(shape);, +            }, +        }, +        if (pass == 0 && getItemLineVisible(row, column)) {, +            if (column != 0) {, +, +                Number previousValue = statDataset.getValue(row, column - 1);, +                if (previousValue != null) {, +, +                    // previous data point..., +                    double previous = previousValue.doubleValue();, +                    double x0;, +                    if (getUseSeriesOffset()) {, +                        x0 = domainAxis.getCategorySeriesMiddle(, +                                column - 1, dataset.getColumnCount(),, +                                visibleRow, visibleRowCount,, +                                getItemMargin(), dataArea,, +                                plot.getDomainAxisEdge());, +                    }, +                    else {, +                        x0 = domainAxis.getCategoryMiddle(column - 1,, +                                getColumnCount(), dataArea,, +                                plot.getDomainAxisEdge());, +                    }, +                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,, +                            plot.getRangeAxisEdge());, +, +                    Line2D line = null;, +                    if (orientation == PlotOrientation.HORIZONTAL) {, +                        line = new Line2D.Double(y0, x0, y1, x1);, +                    }, +                    else if (orientation == PlotOrientation.VERTICAL) {, +                        line = new Line2D.Double(x0, y0, x1, y1);, +                    }, +                    g2.setPaint(getItemPaint(row, column));, +                    g2.setStroke(getItemStroke(row, column));, +                    g2.draw(line);, +                }, +            }, +        }, +, +        if (pass == 1) {, +            if (entities != null) {, +                addItemEntity(entities, dataset, row, column, hotspot);, +            }]