[+++ b/ChangeLog, +	* source/org/jfree/data/time/Week.java, +	(Week(Date, TimeZone)): Deprecated,, +	(Week(Date, TimeZone, Locale)): New constructor,, +	* tests/org/jfree/data/time/junit/WeekTests.java, +	(testConstructor): New test., +, +2007-08-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	* source/org/jfree/data/time/Week.java, +	(Week(Date, TimeZone)): Deprecated,, +	(Week(Date, TimeZone, Locale)): New constructor,, +	* tests/org/jfree/data/time/junit/WeekTests.java, +	(testConstructor): New test., +, +2007-08-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/time/Week.java, + * 28-Aug-2007 : Added new constructor to avoid problem in creating new , + *               instances (DG);, +import java.util.Locale;, +        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());, +     * , +     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}., +        // defer argument checking..., +        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());, +    }, +    , +    /**, +     * Creates a time period for the week in which the specified date/time , +     * falls, calculated relative to the specified time zone., +     *, +     * @param time  the date/time (<code>null</code> not permitted)., +     * @param zone  the time zone (<code>null</code> not permitted)., +     * @param locale  the locale (<code>null</code> not permitted)., +     * , +     * @since 1.0.7, +     */, +    public Week(Date time, TimeZone zone, Locale locale) {, +        if (locale == null) {, +            throw new IllegalArgumentException("Null 'locale' argument.");, +        }, +        Calendar calendar = Calendar.getInstance(zone, locale);, +                                "Can't evaluate the week.");, +                                    "Can't evaluate the week.");, +                                "Can't evaluate the year.");, +                        "Could not find separator.");, +++ b/ChangeLog, +	* source/org/jfree/data/time/Week.java, +	(Week(Date, TimeZone)): Deprecated,, +	(Week(Date, TimeZone, Locale)): New constructor,, +	* tests/org/jfree/data/time/junit/WeekTests.java, +	(testConstructor): New test., +, +2007-08-28  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/data/time/Week.java, + * 28-Aug-2007 : Added new constructor to avoid problem in creating new , + *               instances (DG);, +import java.util.Locale;, +        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());, +     * , +     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}., +        // defer argument checking..., +        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());, +    }, +    , +    /**, +     * Creates a time period for the week in which the specified date/time , +     * falls, calculated relative to the specified time zone., +     *, +     * @param time  the date/time (<code>null</code> not permitted)., +     * @param zone  the time zone (<code>null</code> not permitted)., +     * @param locale  the locale (<code>null</code> not permitted)., +     * , +     * @since 1.0.7, +     */, +    public Week(Date time, TimeZone zone, Locale locale) {, +        if (locale == null) {, +            throw new IllegalArgumentException("Null 'locale' argument.");, +        }, +        Calendar calendar = Calendar.getInstance(zone, locale);, +                                "Can't evaluate the week.");, +                                    "Can't evaluate the week.");, +                                "Can't evaluate the year.");, +                        "Could not find separator.");, +++ b/tests/org/jfree/data/time/junit/WeekTests.java, + * 28-Aug-2007 : Added test for constructor problem (DG);, +            e.printStackTrace();, +    /**, +     * A test for a problem in constructing a new Week instance., +     */, +    public void testConstructor() {, +        Locale savedLocale = Locale.getDefault();, +        TimeZone savedZone = TimeZone.getDefault();, +        Locale.setDefault(new Locale("da", "DK"));, +        TimeZone.setDefault(TimeZone.getTimeZone("Europe/Copenhagen"));, +        GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(, +                TimeZone.getDefault(), Locale.getDefault());]