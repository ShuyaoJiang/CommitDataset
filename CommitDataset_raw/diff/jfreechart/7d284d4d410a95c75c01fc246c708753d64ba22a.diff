[+++ b/source/org/jfree/chart/util/PaintAlpha.java, + * 03-Jul-2012 : JDK 1.6 References made reflective for JDK 1.3 compatibility (, + *               DaveLaw), +import java.awt.geom.AffineTransform;, +import java.awt.geom.Point2D;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +    // TODO Revert to SVN revision 2469 in JFreeChart 1.0.16, +    //      (MultipleGradientPaint's / JDK issues), +    // TODO THEN: change visibility of ALL darker(...) Methods EXCEPT, +    //      darker(Paint) to private!, +        if (paint.getClass().getName().equals("java.awt.LinearGradientPaint")) {, +            // TODO -> instanceof, +            return darkerLinearGradientPaint(paint);, +        if (paint.getClass().getName().equals("java.awt.RadialGradientPaint")) {, +            // TODO -> instanceof, +            return darkerRadialGradientPaint(paint);, +    private static Color darker(Color paint) {, +    private static GradientPaint darker(GradientPaint paint) {, +    private static final Paint darkerLinearGradientPaint(Paint paint) {, +        // TODO Rename->darker & change Paint->LinearGradientPaint, +        try {, +            final Color[] paintColours = (Color[]) invokeZeroArgumentMethod(, +                    paint, "getColors");, +            final Constructor[] constructors, +                    = paint.getClass().getConstructors();, +, +            for (int i = 0; i < constructors.length; i++) {, +, +                final Class[] args = constructors[i].getParameterTypes();, +, +                if (args.length == 7, +                        &&  args[args.length-1].equals(AffineTransform.class)) {, +, +                    return (Paint) constructors[i].newInstance(new Object[] {, +                        (Point2D) invokeZeroArgumentMethod(paint, "getStartPoint"),, +                        (Point2D) invokeZeroArgumentMethod(paint, "getEndPoint"),, +                        (float[]) invokeZeroArgumentMethod(paint, "getFractions"),, +                        (Object) invokeZeroArgumentMethod(paint, "getCycleMethod"),, +                        (Object) invokeZeroArgumentMethod(paint, "getColorSpace"),, +                        (AffineTransform) invokeZeroArgumentMethod(paint,, +                            "getTransform") });, +                    }, +                }, +            } catch (IllegalArgumentException e) {, +            } catch (SecurityException e) {, +            } catch (IllegalAccessException e) {, +            } catch (InvocationTargetException e) {, +            } catch (NoSuchMethodException e) {, +            } catch (InstantiationException e) {, +        }, +        throw new UnsupportedOperationException(, +                "Probably new Constructor signatures in newer JDK");, +    private static final Paint darkerRadialGradientPaint(Paint paint) {, +        // TODO Rename->darker & change Paint->RadialGradientPaint, +        try {, +            final Color[] paintColours, +                    = (Color[]) invokeZeroArgumentMethod(paint, "getColors");, +            final Constructor[] constructors, +                    = paint.getClass().getConstructors();, +, +            for (int i = 0; i < constructors.length; i++) {, +, +                final Class[] args = constructors[i].getParameterTypes();, +, +                if (     args.length == 8, +                &&  args[args.length-1].equals(AffineTransform.class)) {, +, +                    return (Paint) constructors[i].newInstance(new Object[] {, +                        (Point2D) invokeZeroArgumentMethod(paint, "getCenterPoint"),, +                        (Float) invokeZeroArgumentMethod(paint, "getRadius"),, +                        (Point2D) invokeZeroArgumentMethod(paint, "getFocusPoint"),, +                        (float[]) invokeZeroArgumentMethod(paint, "getFractions"),, +                        (Object) invokeZeroArgumentMethod(paint, "getCycleMethod"),, +                        (Object) invokeZeroArgumentMethod(paint, "getColorSpace"),, +                        (AffineTransform) invokeZeroArgumentMethod(paint,, +                            "getTransform") });, +                }, +            }, +        } catch (IllegalArgumentException e) {, +        } catch (SecurityException e) {, +        } catch (IllegalAccessException e) {, +        } catch (InvocationTargetException e) {, +        } catch (NoSuchMethodException e) {, +        } catch (InstantiationException e) {, +        }, +        throw new UnsupportedOperationException(, +                "Probably new Constructor signatures in newer JDK");, +    }, +, +    /**, +     * Convenience method to invoke the zero argument <code>methodName</code>, +     * method of <code>object</code> via Reflection., +     *, +     * @param object, +     * @param methodName, +     *, +     * @return the result, +     *, +     * @throws IllegalArgumentException]