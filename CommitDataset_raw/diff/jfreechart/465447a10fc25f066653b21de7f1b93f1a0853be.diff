[+++ b/ChangeLog, +	Bugs 1363043 and 1840139:, +	* source/org/jfree/chart/entity/ChartEntity.java, +	(getImageMapAreaTag): Escape toolTipText and urlText,, +	* source/org/jfree/chart/imagemap/ImageMapUtilities.java, +	(getImageMap): Escape name,, +	(htmlEscape): New method., +, +2007-12-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/ChangeLog, +	Bugs 1363043 and 1840139:, +	* source/org/jfree/chart/entity/ChartEntity.java, +	(getImageMapAreaTag): Escape toolTipText and urlText,, +	* source/org/jfree/chart/imagemap/ImageMapUtilities.java, +	(getImageMap): Escape name,, +	(htmlEscape): New method., +, +2007-12-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/entity/ChartEntity.java, + * 04-Dec-2007 : Escape the toolTipText and urlText in getImageMapAreaTag() to, + *               prevent special characters corrupting the HTML (DG);, +import org.jfree.chart.imagemap.ImageMapUtilities;, +                        ImageMapUtilities.htmlEscape(this.toolTipText)));, +                        ImageMapUtilities.htmlEscape(this.urlText)));, +++ b/ChangeLog, +	Bugs 1363043 and 1840139:, +	* source/org/jfree/chart/entity/ChartEntity.java, +	(getImageMapAreaTag): Escape toolTipText and urlText,, +	* source/org/jfree/chart/imagemap/ImageMapUtilities.java, +	(getImageMap): Escape name,, +	(htmlEscape): New method., +, +2007-12-04  David Gilbert  <david.gilbert@object-refinery.com>, +, +++ b/source/org/jfree/chart/entity/ChartEntity.java, + * 04-Dec-2007 : Escape the toolTipText and urlText in getImageMapAreaTag() to, + *               prevent special characters corrupting the HTML (DG);, +import org.jfree.chart.imagemap.ImageMapUtilities;, +                        ImageMapUtilities.htmlEscape(this.toolTipText)));, +                        ImageMapUtilities.htmlEscape(this.urlText)));, +++ b/source/org/jfree/chart/imagemap/ImageMapUtilities.java, + * 04-Dec-2007 : Added htmlEscape() method, and escape 'name' in , + *               getImageMap() (DG);, +        sb.append("<map id=\"" + htmlEscape(name) + "\" name=\"" , +                + htmlEscape(name) + "\">");, +    /**, +     * Returns a string that is equivalent to the input string, but with , +     * special characters converted to HTML escape sequences., +     * , +     * @param input  the string to escape (<code>null</code> not permitted)., +     *, +     * @return A string with characters escaped., +     * , +     * @since 1.0.9, +     */, +    public static String htmlEscape(String input) {, +        if (input == null) {, +            throw new IllegalArgumentException("Null 'input' argument.");, +        }, +        StringBuffer result = new StringBuffer();, +        int length = input.length();, +        for (int i = 0; i < length; i++) {, +            char c = input.charAt(i);, +            if (c == '&') {, +                result.append("&amp;");, +            }, +            else if (c == '\"') {, +                result.append("&quot;");, +            }, +            else if (c == '<') {, +                result.append("&lt;");, +            }, +            else if (c == '>') {, +                result.append("&gt;");, +            }, +            else if (c == '\'') {, +                result.append("&#39;");, +            }, +            else if (c == '\\') {, +                result.append("&#092;");, +            }            , +            else {, +                result.append(c);, +            }, +        }, +        return result.toString();, +    }]