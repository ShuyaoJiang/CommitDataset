[+++ b/swt/org/jfree/experimental/swt/SWTGraphics2D.java, +     * Returns the current paint for this graphics context., +     * @return The current paint., +     * , +     * @see #setPaint(Paint), +    public Paint getPaint() {, +        // TODO: it might be a good idea to keep a reference to the color, +        // specified in setPaint() or setColor(), rather than creating a , +        // new object every time getPaint() is called., +        return SWTUtils.toAwtColor(this.gc.getForeground());, +     * Sets the paint for this graphics context.  For now, this graphics, +     * context only supports instances of {@link Color}., +     * , +     * @param paint  the paint (<code>null</code> not permitted)., +     * , +     * @see #getPaint(), +     * @see #setColor(Color), +    public void setPaint(Paint paint) {, +        if (paint instanceof Color) {, +            setColor((Color) paint);, +        else {, +            throw new RuntimeException("Can only handle 'Color' at present.");, +        }, +     * Returns the current color for this graphics context., +     * @return The current color., +     * , +     * @see #setColor(Color), +    public Color getColor() {, +        // TODO: it might be a good idea to keep a reference to the color, +        // specified in setPaint() or setColor(), rather than creating a , +        // new object every time getPaint() is called., +        return SWTUtils.toAwtColor(this.gc.getForeground());, +     * Sets the current color for this graphics context., +     * @param color  the color., +     * @see #getColor(), +    public void setColor(Color color) {, +        org.eclipse.swt.graphics.Color swtColor = getSwtColorFromPool(color);, +        this.gc.setForeground(swtColor);, +        // handle transparency and compositing., +        if (this.composite instanceof AlphaComposite) {, +            AlphaComposite acomp = (AlphaComposite) this.composite;, +            switch (acomp.getRule()) {, +            case AlphaComposite.SRC_OVER:, +                this.gc.setAlpha((int) (color.getAlpha()*acomp.getAlpha()));, +                this.gc.setAlpha(color.getAlpha());, +    /* (non-Javadoc), +     * @see java.awt.Graphics#setPaintMode(), +    public void setPaintMode() {, +        // TODO Auto-generated method stub, +    /* (non-Javadoc), +     * @see java.awt.Graphics#setXORMode(java.awt.Color), +    public void setXORMode(Color color) {, +        // TODO Auto-generated method stub, +, +    /**, +     * Add given swt resource to the resource pool. All resources added, +     * to the resource pool will be disposed when {@link #dispose()} is called., +     *  , +     * @param resource the resource to add to the pool., +     * @return the swt <code>Resource</code> just added., +     */, +    private Resource addToResourcePool(Resource resource) {, +        this.resourcePool.add(resource);, +        return resource;, +    }, +, +    /**, +     * Dispose the resource pool., +     */, +    private void disposeResourcePool() {, +        for (Iterator it = this.resourcePool.iterator(); it.hasNext();) {, +            Resource resource = (Resource) it.next();, +            resource.dispose();, +        }, +        this.resourcePool.clear();, +        this.colorsPool.clear();, +        this.resourcePool.clear();, +    }, +, +    /**, +     * Internal method to convert a AWT font object into , +     * a SWT font resource. If a corresponding SWT font, +     * instance is already in the pool, it will be used , +     * instead of creating a new one. This is used in , +     * {@link #setFont()} for instance. , +     * , +     * @param font The AWT font to convert., +     * @return The SWT font instance., +     */, +    private org.eclipse.swt.graphics.Font getSwtFontFromPool(Font font) {, +        org.eclipse.swt.graphics.Font swtFont = (org.eclipse.swt.graphics.Font), +        this.fontsPool.get(font);, +        if (swtFont == null) {, +            swtFont = new org.eclipse.swt.graphics.Font(this.gc.getDevice(), , +                    SWTUtils.toSwtFontData(this.gc.getDevice(), font, true));, +            addToResourcePool(swtFont);, +            this.fontsPool.put(font, swtFont);, +        }, +        return swtFont;, +    }]