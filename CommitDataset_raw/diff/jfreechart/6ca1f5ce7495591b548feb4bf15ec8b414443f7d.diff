[+++ b/ChangeLog, +2008-05-07  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/renderer/category/BarRenderer.java, +    (drawItem): Ensure that minimumBarLength, if used, extends the non-base, +    end of the bar., +, +++ b/ChangeLog, +2008-05-07  David Gilbert  <david.gilbert@object-refinery.com>, +, +    * source/org/jfree/chart/renderer/category/BarRenderer.java, +    (drawItem): Ensure that minimumBarLength, if used, extends the non-base, +    end of the bar., +, +++ b/source/org/jfree/chart/renderer/category/BarRenderer.java, + * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors., + * (C) Copyright 2002-2008, by Object Refinery Limited., + * 07-May-2008 : If minimumBarLength is > 0.0, extend the non-base end of the, + *               bar (DG);, +     * Returns the minimum bar length (in Java2D units).  The default value is, +     * 0.0., +     * values from disappearing when drawn on the screen.  Typically you would, +     * set this to (say) 0.5 or 1.0 Java 2D units.  Use this attribute with, +     * caution, however, because setting it to a non-zero value will, +     * artificially increase the length of bars representing small values,, +     * which may misrepresent your data., +     * @param min  the minimum bar length (in Java2D units, must be >= 0.0)., +    	if (min < 0.0) {, +    		throw new IllegalArgumentException("Requires 'min' >= 0.0");, +    	}, +, +        // in the following code, barL0 is (in Java2D coordinates) the LEFT, +        // end of the bar for a horizontal bar chart, and the TOP end of the, +        // bar for a vertical bar chart.  Whether this is the BASE of the bar, +        // or not depends also on (a) whether the data value is 'negative', +        // relative to the base value and (b) whether or not the range axis is, +        // inverted.  This only matters if/when we apply the minimumBarLength, +        // attribute, because we should extend the non-base end of the bar, +        boolean positive = (value >= this.base);, +        boolean inverted = rangeAxis.isInverted();, +        double barLength = Math.abs(transL1 - transL0);, +        double barLengthAdj = 0.0;, +        if (barLength > 0.0 && barLength < getMinimumBarLength()) {, +        	barLengthAdj = getMinimumBarLength() - barLength;, +        }, +        double barL0Adj = 0.0;, +        if (orientation == PlotOrientation.HORIZONTAL) {, +        	if (positive && inverted || !positive && !inverted) {, +        		barL0Adj = barLengthAdj;, +        	}, +        }, +        else {, +        	if (positive && !inverted || !positive && inverted) {, +        		barL0Adj = barLengthAdj;, +        	}, +        }, +            bar = new Rectangle2D.Double(barL0 - barL0Adj, barW0,, +            		barLength + barLengthAdj, state.getBarWidth());, +            bar = new Rectangle2D.Double(barW0, barL0 - barL0Adj,, +            		state.getBarWidth(), barLength + barLengthAdj);]