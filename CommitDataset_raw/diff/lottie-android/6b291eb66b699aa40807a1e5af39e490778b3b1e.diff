[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setMinProgress(1f);, +    view.setProgress(0f);, +    view.setMaxProgress(1f);, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setMinProgress(1f);, +    view.setProgress(0f);, +    view.setMaxProgress(1f);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +   setMinFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress));, +    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setMinProgress(1f);, +    view.setProgress(0f);, +    view.setMaxProgress(1f);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +   setMinFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress));, +    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));, +++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java, +  private static final Object bitmapHashLock = new Object();, +, +    return putBitmap(id, bitmap);, +        putBitmap(id, bitmap);, +      return putBitmap(id, bitmap);, +    return putBitmap(id, bitmap);, +    synchronized (bitmapHashLock) {, +  }, +, +  private Bitmap putBitmap(String key, @Nullable Bitmap bitmap) {, +    synchronized (bitmapHashLock) {, +      return bitmaps.put(key, bitmap);, +    }, +  }, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setProgress(0f);, +    view.setMinProgress(1f);, +    view.setProgress(0f);, +    view.setMaxProgress(1f);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +   setMinFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress));, +    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));, +++ b/lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java, +  private static final Object bitmapHashLock = new Object();, +, +    return putBitmap(id, bitmap);, +        putBitmap(id, bitmap);, +      return putBitmap(id, bitmap);, +    return putBitmap(id, bitmap);, +    synchronized (bitmapHashLock) {, +  }, +, +  private Bitmap putBitmap(String key, @Nullable Bitmap bitmap) {, +    synchronized (bitmapHashLock) {, +      return bitmaps.put(key, bitmap);, +    }, +  }, +++ b/lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java, +package com.airbnb.lottie;, +, +import android.graphics.Rect;, +import android.support.v4.util.LongSparseArray;, +import android.support.v4.util.SparseArrayCompat;, +, +import com.airbnb.lottie.model.Font;, +import com.airbnb.lottie.model.FontCharacter;, +import com.airbnb.lottie.model.layer.Layer;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +, +import static junit.framework.Assert.assertEquals;, +, +@RunWith(RobolectricTestRunner.class), +@Config(constants = BuildConfig.class), +public class LottieDrawableTest {, +, +  @SuppressWarnings("SameParameterValue"), +  private LottieComposition createComposition(int startFrame, int endFrame) {, +    LottieComposition composition = new LottieComposition();, +    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),, +            new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),, +            new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),, +            new HashMap<String, Font>(0));]