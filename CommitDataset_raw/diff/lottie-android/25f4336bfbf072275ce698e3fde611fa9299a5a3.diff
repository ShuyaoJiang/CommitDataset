[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import org.json.JSONObject;, +, +    /**, +     * Sets the animation from a JSONObject., +     * This will load and deserialize the file asynchronously., +     */, +    public void setAnimation(final JSONObject json) {, +        isAnimationLoading = true;, +        setProgressWhenCompositionSet = false;, +        playAnimationWhenCompositionSet = false;, +, +        LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import org.json.JSONObject;, +, +    /**, +     * Sets the animation from a JSONObject., +     * This will load and deserialize the file asynchronously., +     */, +    public void setAnimation(final JSONObject json) {, +        isAnimationLoading = true;, +        setProgressWhenCompositionSet = false;, +        playAnimationWhenCompositionSet = false;, +, +        LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java, +        new FileCompositionLoader(loadedListener).execute(file);, +    public static void fromJson(Context context, JSONObject json, OnCompositionLoadedListener loadedListener) {, +        new JsonCompositionLoader(loadedListener).execute(json);, +    }, +, +    private static final class FileCompositionLoader extends AsyncTask<InputStream, Void, LottieComposition> {, +        FileCompositionLoader(OnCompositionLoadedListener loadedListener) {, +, +    private static final class JsonCompositionLoader extends AsyncTask<JSONObject, Void, LottieComposition> {, +, +        private final OnCompositionLoadedListener loadedListener;, +, +        JsonCompositionLoader(OnCompositionLoadedListener loadedListener) {, +            this.loadedListener = loadedListener;, +        }, +, +        @Override, +        protected LottieComposition doInBackground(JSONObject... params) {, +            return fromJsonSync(params[0]);, +        }, +, +        @Override, +        protected void onPostExecute(LottieComposition composition) {, +            loadedListener.onCompositionLoaded(composition);, +        }, +    }]