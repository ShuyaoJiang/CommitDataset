[+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +                .addListener { addComposition(it) }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +                .addListener { addComposition(it) }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programmatically:, + *      {@link #setAnimation(String)}, + *      {@link #setAnimation(JsonReader, String)}, + *      {@link #setAnimationFromJson(String, String)}, + *      {@link #setAnimationFromUrl(String)}, + *      {@link #setComposition(LottieComposition)}, +  @Nullable private LottieTask<LottieComposition> compositionTask;, +    setCompositionTask(LottieCompositionFactory.fromRawRes(getContext(), rawRes));, +    setCompositionTask(LottieCompositionFactory.fromAsset(getContext(), assetName));, +    setCompositionTask(LottieCompositionFactory.fromJsonReader(reader, cacheKey));, +    setCompositionTask(LottieCompositionFactory.fromUrl(getContext(), url));, +  }, +, +  private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {, +    this.compositionTask = compositionTask, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +                .addListener { addComposition(it) }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programmatically:, + *      {@link #setAnimation(String)}, + *      {@link #setAnimation(JsonReader, String)}, + *      {@link #setAnimationFromJson(String, String)}, + *      {@link #setAnimationFromUrl(String)}, + *      {@link #setComposition(LottieComposition)}, +  @Nullable private LottieTask<LottieComposition> compositionTask;, +    setCompositionTask(LottieCompositionFactory.fromRawRes(getContext(), rawRes));, +    setCompositionTask(LottieCompositionFactory.fromAsset(getContext(), assetName));, +    setCompositionTask(LottieCompositionFactory.fromJsonReader(reader, cacheKey));, +    setCompositionTask(LottieCompositionFactory.fromUrl(getContext(), url));, +  }, +, +  private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {, +    this.compositionTask = compositionTask, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +import android.util.Log;, +@SuppressWarnings({"WeakerAccess", "unused"}), +      @Override public LottieResult<LottieComposition> call() {, +   * @see #fromJsonInputStreamSync(InputStream, String, boolean), +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +        //noinspection deprecation, +   * @see #fromJsonStringSync(String, String), +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +  private static LottieTask<LottieComposition> cache(, +          @Nullable final String cacheKey, Callable<LottieResult<LottieComposition>> callable) {, +    final LottieComposition cachedComposition = LottieCompositionCache.getInstance().get(cacheKey);, +    if (cachedComposition != null) {, +      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {, +        @Override, +        public LottieResult<LottieComposition> call() {, +          Log.d("Gabe", "call\treturning from cache");, +          return new LottieResult<>(cachedComposition);, +        }, +      });, +    }, +        if (cacheKey != null) {, +          LottieCompositionCache.getInstance().put(cacheKey, result);, +        }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +                .addListener { addComposition(it) }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programmatically:, + *      {@link #setAnimation(String)}, + *      {@link #setAnimation(JsonReader, String)}, + *      {@link #setAnimationFromJson(String, String)}, + *      {@link #setAnimationFromUrl(String)}, + *      {@link #setComposition(LottieComposition)}, +  @Nullable private LottieTask<LottieComposition> compositionTask;, +    setCompositionTask(LottieCompositionFactory.fromRawRes(getContext(), rawRes));, +    setCompositionTask(LottieCompositionFactory.fromAsset(getContext(), assetName));, +    setCompositionTask(LottieCompositionFactory.fromJsonReader(reader, cacheKey));, +    setCompositionTask(LottieCompositionFactory.fromUrl(getContext(), url));, +  }, +, +  private void setCompositionTask(LottieTask<LottieComposition> compositionTask) {, +    this.compositionTask = compositionTask, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +import android.util.Log;, +@SuppressWarnings({"WeakerAccess", "unused"}), +      @Override public LottieResult<LottieComposition> call() {, +   * @see #fromJsonInputStreamSync(InputStream, String, boolean), +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +        //noinspection deprecation, +   * @see #fromJsonStringSync(String, String), +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +      @Override public LottieResult<LottieComposition> call() {, +  private static LottieTask<LottieComposition> cache(, +          @Nullable final String cacheKey, Callable<LottieResult<LottieComposition>> callable) {, +    final LottieComposition cachedComposition = LottieCompositionCache.getInstance().get(cacheKey);, +    if (cachedComposition != null) {, +      return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {]