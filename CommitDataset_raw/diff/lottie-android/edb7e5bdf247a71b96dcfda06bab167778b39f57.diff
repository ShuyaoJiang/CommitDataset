[+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +  AnimatableFloatValue(JSONObject json, LottieComposition composition) {, +  AnimatableFloatValue(JSONObject json, LottieComposition composition, boolean isDp) {, +  @Override public Float valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +  AnimatableFloatValue(JSONObject json, LottieComposition composition) {, +  AnimatableFloatValue(JSONObject json, LottieComposition composition, boolean isDp) {, +  @Override public Float valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      boolean isDp, boolean remap100To255) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +  AnimatableFloatValue(JSONObject json, LottieComposition composition) {, +  AnimatableFloatValue(JSONObject json, LottieComposition composition, boolean isDp) {, +  @Override public Float valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      boolean isDp, boolean remap100To255) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +      JSONObject json, LottieComposition composition) {, +      return new AnimatablePathValue(json.opt("k"), composition);, +          new AnimatableFloatValue(json.optJSONObject("x"), composition),, +          new AnimatableFloatValue(json.optJSONObject("y"), composition), +  AnimatablePathValue(Object json, LottieComposition composition) {, +        JSONObject jsonKeyframe = jsonArray.optJSONObject(i);, +  private boolean hasKeyframes(Object json) {, +    Object firstObject = ((JSONArray) json).opt(0);, +  @Override public PointF valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +  AnimatableFloatValue(JSONObject json, LottieComposition composition) {, +  AnimatableFloatValue(JSONObject json, LottieComposition composition, boolean isDp) {, +  @Override public Float valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      boolean isDp, boolean remap100To255) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +      JSONObject json, LottieComposition composition) {, +      return new AnimatablePathValue(json.opt("k"), composition);, +          new AnimatableFloatValue(json.optJSONObject("x"), composition),, +          new AnimatableFloatValue(json.optJSONObject("y"), composition), +  AnimatablePathValue(Object json, LottieComposition composition) {, +        JSONObject jsonKeyframe = jsonArray.optJSONObject(i);, +  private boolean hasKeyframes(Object json) {, +    Object firstObject = ((JSONArray) json).opt(0);, +  @Override public PointF valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +  AnimatablePointValue(JSONObject pointValues, LottieComposition composition) {, +  @Override public PointF valueFromObject(Object object, float scale) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +  AnimatableColorValue(JSONObject json, LottieComposition composition) {, +  @Override public Integer valueFromObject(Object object, float scale) {, +        double colorChannel = colorArray.optDouble(i);, +          (int) (colorArray.optDouble(3) * multiplier),, +          (int) (colorArray.optDouble(0) * multiplier),, +          (int) (colorArray.optDouble(1) * multiplier),, +          (int) (colorArray.optDouble(2) * multiplier));, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +  AnimatableFloatValue(JSONObject json, LottieComposition composition) {, +  AnimatableFloatValue(JSONObject json, LottieComposition composition, boolean isDp) {, +  @Override public Float valueFromObject(Object object, float scale) {]