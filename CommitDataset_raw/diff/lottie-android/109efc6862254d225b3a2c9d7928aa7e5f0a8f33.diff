[+++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java, +    private LottieComposition composition;, +        this.composition = composition;, +        view.setPivotX(anchor.x * view.getWidth() / (100f * composition.getScale()));, +        view.setPivotY(anchor.y * view.getHeight() / (100f * composition.getScale()));, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java, +    private LottieComposition composition;, +        this.composition = composition;, +        view.setPivotX(anchor.x * view.getWidth() / (100f * composition.getScale()));, +        view.setPivotY(anchor.y * view.getHeight() / (100f * composition.getScale()));, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableColorValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableColorValue(JSONObject json, int frameRate, LottieComposition composition) {, +        super(json, frameRate, composition, false);, +        ColorKeyframeAnimation animation = new ColorKeyframeAnimation(duration, composition, keyTimes, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java, +    private LottieComposition composition;, +        this.composition = composition;, +        view.setPivotX(anchor.x * view.getWidth() / (100f * composition.getScale()));, +        view.setPivotY(anchor.y * view.getHeight() / (100f * composition.getScale()));, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableColorValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableColorValue(JSONObject json, int frameRate, LottieComposition composition) {, +        super(json, frameRate, composition, false);, +        ColorKeyframeAnimation animation = new ColorKeyframeAnimation(duration, composition, keyTimes, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableFloatValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition) {, +        this(json, frameRate, composition, true);, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition, boolean isDp) {, +        super(json, frameRate, composition, isDp);, +        KeyframeAnimation<Float> animation = new NumberKeyframeAnimation<>(duration, composition, keyTimes, Float.class, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java, +    private LottieComposition composition;, +        this.composition = composition;, +        view.setPivotX(anchor.x * view.getWidth() / (100f * composition.getScale()));, +        view.setPivotY(anchor.y * view.getHeight() / (100f * composition.getScale()));, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableColorValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableColorValue(JSONObject json, int frameRate, LottieComposition composition) {, +        super(json, frameRate, composition, false);, +        ColorKeyframeAnimation animation = new ColorKeyframeAnimation(duration, composition, keyTimes, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableFloatValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition) {, +        this(json, frameRate, composition, true);, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition, boolean isDp) {, +        super(json, frameRate, composition, isDp);, +        KeyframeAnimation<Float> animation = new NumberKeyframeAnimation<>(duration, composition, keyTimes, Float.class, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableIntegerValue(JSONObject json, int frameRate, LottieComposition composition, boolean isDp, boolean remap100To255) {, +        super(json, frameRate, composition, isDp);, +        KeyframeAnimation<Integer> animation = new NumberKeyframeAnimation<>(duration, composition, keyTimes, Integer.class, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        compositionLoader = LottieComposition.fromJson(getResources(), json, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java, +    private LottieComposition composition;, +        this.composition = composition;, +        view.setPivotX(anchor.x * view.getWidth() / (100f * composition.getScale()));, +        view.setPivotY(anchor.y * view.getHeight() / (100f * composition.getScale()));, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableColorValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableColorValue(JSONObject json, int frameRate, LottieComposition composition) {, +        super(json, frameRate, composition, false);, +        ColorKeyframeAnimation animation = new ColorKeyframeAnimation(duration, composition, keyTimes, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableFloatValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition) {, +        this(json, frameRate, composition, true);, +    public AnimatableFloatValue(JSONObject json, int frameRate, LottieComposition composition, boolean isDp) {, +        super(json, frameRate, composition, isDp);, +        KeyframeAnimation<Float> animation = new NumberKeyframeAnimation<>(duration, composition, keyTimes, Float.class, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java, +import com.airbnb.lottie.model.LottieComposition;, +    public AnimatableIntegerValue(JSONObject json, int frameRate, LottieComposition composition, boolean isDp, boolean remap100To255) {, +        super(json, frameRate, composition, isDp);, +        KeyframeAnimation<Integer> animation = new NumberKeyframeAnimation<>(duration, composition, keyTimes, Integer.class, keyValues, interpolators);, +++ b/lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java, +import com.airbnb.lottie.model.LottieComposition;, +import com.airbnb.lottie.utils.JsonUtils;, +    private final LottieComposition composition;, +    public AnimatablePathValue(JSONObject pointValues, int frameRate, LottieComposition composition) {]