[+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PreviewFragment.kt, +import android.Manifest, +import android.content.pm.PackageManager, +import android.support.design.widget.Snackbar, +private const val RC_FILE = 1000, +private const val RC_CAMERA_PERMISSION = 1001, +            if (requireContext().hasPermission(Manifest.permission.CAMERA)) {, +            } else {, +                requestPermissions(arrayOf(Manifest.permission.CAMERA), RC_CAMERA_PERMISSION), +            }, +, +    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {, +        when (requestCode) {, +            RC_CAMERA_PERMISSION -> {, +                if (grantResults.firstOrNull() == PackageManager.PERMISSION_GRANTED) {, +                    startActivity(QRScanActivity.intent(requireContext())), +                } else {, +                    Snackbar.make(container, R.string.qr_permission_denied, Snackbar.LENGTH_LONG).show(), +                }, +            }, +        }, +    }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PreviewFragment.kt, +import android.Manifest, +import android.content.pm.PackageManager, +import android.support.design.widget.Snackbar, +private const val RC_FILE = 1000, +private const val RC_CAMERA_PERMISSION = 1001, +            if (requireContext().hasPermission(Manifest.permission.CAMERA)) {, +            } else {, +                requestPermissions(arrayOf(Manifest.permission.CAMERA), RC_CAMERA_PERMISSION), +            }, +, +    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {, +        when (requestCode) {, +            RC_CAMERA_PERMISSION -> {, +                if (grantResults.firstOrNull() == PackageManager.PERMISSION_GRANTED) {, +                    startActivity(QRScanActivity.intent(requireContext())), +                } else {, +                    Snackbar.make(container, R.string.qr_permission_denied, Snackbar.LENGTH_LONG).show(), +                }, +            }, +        }, +    }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/QRScanActivity.kt, +    // Sometimes the qr code is read twice in rapid succession. This prevents it from being read, +    // multiple times., +    private var hasReadQrCode = false, +, +        hasReadQrCode = false, +        if (hasReadQrCode) return, +        hasReadQrCode = true, +        vibrator.vibrateCompat(100), +        finish(), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PreviewFragment.kt, +import android.Manifest, +import android.content.pm.PackageManager, +import android.support.design.widget.Snackbar, +private const val RC_FILE = 1000, +private const val RC_CAMERA_PERMISSION = 1001, +            if (requireContext().hasPermission(Manifest.permission.CAMERA)) {, +            } else {, +                requestPermissions(arrayOf(Manifest.permission.CAMERA), RC_CAMERA_PERMISSION), +            }, +, +    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {, +        when (requestCode) {, +            RC_CAMERA_PERMISSION -> {, +                if (grantResults.firstOrNull() == PackageManager.PERMISSION_GRANTED) {, +                    startActivity(QRScanActivity.intent(requireContext())), +                } else {, +                    Snackbar.make(container, R.string.qr_permission_denied, Snackbar.LENGTH_LONG).show(), +                }, +            }, +        }, +    }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/QRScanActivity.kt, +    // Sometimes the qr code is read twice in rapid succession. This prevents it from being read, +    // multiple times., +    private var hasReadQrCode = false, +, +        hasReadQrCode = false, +        if (hasReadQrCode) return, +        hasReadQrCode = true, +        vibrator.vibrateCompat(100), +        finish(), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TypeExtensions.kt, +import android.os.Build, +import android.os.VibrationEffect, +import android.os.Vibrator, +, +fun Context.hasPermission(permission: String): Boolean {, +    return ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED, +}, +, +fun Vibrator.vibrateCompat(millis: Long) {, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {, +        vibrate(VibrationEffect.createOneShot(millis, VibrationEffect.DEFAULT_AMPLITUDE)), +    } else {, +        @Suppress("DEPRECATION")]