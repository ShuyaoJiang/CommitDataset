[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +import com.airbnb.lottie.parser.LayerParser;, +        this, LayerParser.parse(composition), composition.getLayers(), composition);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +import com.airbnb.lottie.parser.LayerParser;, +        this, LayerParser.parse(composition), composition.getLayers(), composition);, +++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java, +  public enum MatteType {, +  public Layer(List<ContentModel> shapes, LottieComposition composition, String layerName, long layerId,, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +import com.airbnb.lottie.parser.LayerParser;, +        this, LayerParser.parse(composition), composition.getLayers(), composition);, +++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java, +  public enum MatteType {, +  public Layer(List<ContentModel> shapes, LottieComposition composition, String layerName, long layerId,, +++ b/lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java, +package com.airbnb.lottie.parser;, +, +import android.graphics.Color;, +import android.graphics.Rect;, +import android.util.JsonReader;, +, +import com.airbnb.lottie.LottieComposition;, +import com.airbnb.lottie.animation.Keyframe;, +import com.airbnb.lottie.model.animatable.AnimatableFloatValue;, +import com.airbnb.lottie.model.animatable.AnimatableTextFrame;, +import com.airbnb.lottie.model.animatable.AnimatableTextProperties;, +import com.airbnb.lottie.model.animatable.AnimatableTransform;, +import com.airbnb.lottie.model.content.ContentModel;, +import com.airbnb.lottie.model.content.Mask;, +import com.airbnb.lottie.model.content.ShapeGroup;, +import com.airbnb.lottie.model.layer.Layer;, +import com.airbnb.lottie.utils.Utils;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +public class LayerParser {, +, +  public static Layer parse(LottieComposition composition) {, +    Rect bounds = composition.getBounds();, +    return new Layer(, +        Collections.<ContentModel>emptyList(), composition, "__container", -1,, +        Layer.LayerType.PreComp, -1, null, Collections.<Mask>emptyList(),, +        AnimatableTransform.Factory.newInstance(), 0, 0, 0, 0, 0,, +        bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),, +        Layer.MatteType.None, null);, +  }, +, +  public static Layer parse(JsonReader reader, LottieComposition composition) throws IOException {, +    String layerName = null;, +    Layer.LayerType layerType = null;, +    String refId = null;, +    long layerId = 0;, +    int solidWidth = 0;, +    int solidHeight = 0;, +    int solidColor = 0;, +    int preCompWidth = 0;, +    int preCompHeight = 0;, +    long parentId = -1;, +    float timeStretch = 1f;, +    float startFrame = 0f;, +    float inFrame = 0f;, +    float outFrame = 0f;, +    String cl = null;, +, +    Layer.MatteType matteType = Layer.MatteType.None;, +    AnimatableTransform transform = null;, +    AnimatableTextFrame text = null;, +    AnimatableTextProperties textProperties = null;, +    AnimatableFloatValue timeRemapping = null;, +, +    List<Mask> masks = new ArrayList<>();, +    List<ContentModel> shapes = new ArrayList<>();, +, +    reader.beginObject();, +    while (reader.hasNext()) {, +      switch (reader.nextName()) {, +        case "nm":, +          layerName = reader.nextString();, +          break;, +        case "ind":, +          layerId = reader.nextInt();, +          break;, +        case "refId":, +          refId = reader.nextString();, +          break;, +        case "ty":, +          int layerTypeInt = reader.nextInt();, +          if (layerTypeInt < Layer.LayerType.Unknown.ordinal()) {, +            layerType = Layer.LayerType.values()[layerTypeInt];, +          } else {, +            layerType = Layer.LayerType.Unknown;, +          }, +          break;, +        case "parent":, +          parentId = reader.nextInt();, +          break;]