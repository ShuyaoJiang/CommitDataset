[+++ b/lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java, +package com.airbnb.lottie;, +, +import android.graphics.Canvas;, +import android.graphics.DashPathEffect;, +import android.graphics.Matrix;, +import android.graphics.Paint;, +import android.graphics.Path;, +import android.graphics.PathMeasure;, +import android.graphics.RectF;, +import android.support.annotation.Nullable;, +, +import java.util.ArrayList;, +import java.util.List;, +, +abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {, +  private final PathMeasure pm = new PathMeasure();, +  private final Path path = new Path();, +  private final Path trimPathPath = new Path();, +  private final RectF rect = new RectF();, +  private final LottieDrawable lottieDrawable;, +  private final List<PathGroup> pathGroups = new ArrayList<>();, +  private final float[] dashPatternValues;, +  final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);, +, +  private final BaseKeyframeAnimation<?, Float> widthAnimation;, +  private final BaseKeyframeAnimation<?, Integer> opacityAnimation;, +  private final List<BaseKeyframeAnimation<?, Float>> dashPatternAnimations;, +  @Nullable private final BaseKeyframeAnimation<?, Float> dashPatternOffsetAnimation;, +, +  BaseStrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Paint.Cap cap,, +      Paint.Join join, AnimatableIntegerValue opacity, AnimatableFloatValue width,, +      List<AnimatableFloatValue> dashPattern, AnimatableFloatValue offset) {, +    this.lottieDrawable = lottieDrawable;, +    paint.setStyle(Paint.Style.STROKE);, +    paint.setStrokeCap(cap);, +    paint.setStrokeJoin(join);, +, +    opacityAnimation = opacity.createAnimation();, +    widthAnimation = width.createAnimation();, +, +    if (offset == null) {, +      dashPatternOffsetAnimation = null;, +    } else {, +      dashPatternOffsetAnimation = offset.createAnimation();, +    }, +    dashPatternAnimations = new ArrayList<>(dashPattern.size());, +    dashPatternValues = new float[dashPattern.size()];, +, +    for (int i = 0; i < dashPattern.size(); i++) {, +      dashPatternAnimations.add(dashPattern.get(i).createAnimation());, +    }, +, +    layer.addAnimation(opacityAnimation);, +    layer.addAnimation(widthAnimation);, +    for (int i = 0; i < dashPatternAnimations.size(); i++) {, +      layer.addAnimation(dashPatternAnimations.get(i));, +    }, +    if (dashPatternOffsetAnimation != null) {, +      layer.addAnimation(dashPatternOffsetAnimation);, +    }, +, +    opacityAnimation.addUpdateListener(this);, +    widthAnimation.addUpdateListener(this);, +, +    for (int i = 0; i < dashPattern.size(); i++) {, +      dashPatternAnimations.get(i).addUpdateListener(this);, +    }, +    if (dashPatternOffsetAnimation != null) {, +      dashPatternOffsetAnimation.addUpdateListener(this);, +    }, +  }, +, +  @Override public void onValueChanged() {, +    lottieDrawable.invalidateSelf();, +  }, +, +  @Override public void setContents(List<Content> contentsBefore, List<Content> contentsAfter) {, +    TrimPathContent trimPathContentBefore = null;, +    for (int i = contentsBefore.size() - 1; i >= 0; i--) {, +      Content content = contentsBefore.get(i);, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Individually) {, +        trimPathContentBefore = (TrimPathContent) content;, +      }, +    }, +    if (trimPathContentBefore != null) {, +      trimPathContentBefore.addListener(this);, +    }, +, +    PathGroup currentPathGroup = null;, +    for (int i = contentsAfter.size() - 1; i >= 0; i--) {, +      Content content = contentsAfter.get(i);, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Individually) {, +        if (currentPathGroup != null) {, +          pathGroups.add(currentPathGroup);, +        }, +        currentPathGroup = new PathGroup((TrimPathContent) content);, +        ((TrimPathContent) content).addListener(this);]