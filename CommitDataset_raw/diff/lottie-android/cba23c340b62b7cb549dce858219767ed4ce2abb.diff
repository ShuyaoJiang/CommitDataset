[+++ b/LottieSample/build.gradle, +    multiDexEnabled true, +  implementation 'com.android.support:multidex:1.0.1', +  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion", +++ b/LottieSample/build.gradle, +    multiDexEnabled true, +  implementation 'com.android.support:multidex:1.0.1', +  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion", +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import android.support.multidex.MultiDexApplication, +class LottieApplication : MultiDexApplication() {, +                .baseUrl("http://lottiefiles.com/api/v1/"), +++ b/LottieSample/build.gradle, +    multiDexEnabled true, +  implementation 'com.android.support:multidex:1.0.1', +  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion", +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import android.support.multidex.MultiDexApplication, +class LottieApplication : MultiDexApplication() {, +                .baseUrl("http://lottiefiles.com/api/v1/"), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +import com.airbnb.lottie.samples.views.LottiefilesTabBarModel_, +import com.airbnb.lottie.samples.views.SearchInputItemViewModel_, +        LottiefilesTabBarModel_(), +                .mode(viewModel.mode()), +                .recentClickListener { _-> viewModel.setMode(LottiefilesMode.Recent) }, +                .popularClickListener { _ -> viewModel.setMode(LottiefilesMode.Popular) }, +                .searchClickListener { _ -> viewModel.setMode(LottiefilesMode.Search) }, +                .addTo(controller), +        SearchInputItemViewModel_(), +                .id("search"), +                .searchClickListener { viewModel.setMode(LottiefilesMode.Search, it) }, +                .addIf(viewModel.mode() == LottiefilesMode.Search, controller), +, +        val lastAnimationData = viewModel.animationDataList.value?.lastOrNull(), +++ b/LottieSample/build.gradle, +    multiDexEnabled true, +  implementation 'com.android.support:multidex:1.0.1', +  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion", +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import android.support.multidex.MultiDexApplication, +class LottieApplication : MultiDexApplication() {, +                .baseUrl("http://lottiefiles.com/api/v1/"), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +import com.airbnb.lottie.samples.views.LottiefilesTabBarModel_, +import com.airbnb.lottie.samples.views.SearchInputItemViewModel_, +        LottiefilesTabBarModel_(), +                .mode(viewModel.mode()), +                .recentClickListener { _-> viewModel.setMode(LottiefilesMode.Recent) }, +                .popularClickListener { _ -> viewModel.setMode(LottiefilesMode.Popular) }, +                .searchClickListener { _ -> viewModel.setMode(LottiefilesMode.Search) }, +                .addTo(controller), +        SearchInputItemViewModel_(), +                .id("search"), +                .searchClickListener { viewModel.setMode(LottiefilesMode.Search, it) }, +                .addIf(viewModel.mode() == LottiefilesMode.Search, controller), +, +        val lastAnimationData = viewModel.animationDataList.value?.lastOrNull(), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesService.kt, +    fun getCollection(@Path("collection") collection: String): Observable<AnimationResponse>, +, +    @GET("search/{query}"), +    fun search(@Path("query") query: String): Observable<AnimationResponse>, +++ b/LottieSample/build.gradle, +    multiDexEnabled true, +  implementation 'com.android.support:multidex:1.0.1', +  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion", +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import android.support.multidex.MultiDexApplication, +class LottieApplication : MultiDexApplication() {, +                .baseUrl("http://lottiefiles.com/api/v1/"), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +import com.airbnb.lottie.samples.views.LottiefilesTabBarModel_, +import com.airbnb.lottie.samples.views.SearchInputItemViewModel_, +        LottiefilesTabBarModel_(), +                .mode(viewModel.mode()), +                .recentClickListener { _-> viewModel.setMode(LottiefilesMode.Recent) }, +                .popularClickListener { _ -> viewModel.setMode(LottiefilesMode.Popular) }, +                .searchClickListener { _ -> viewModel.setMode(LottiefilesMode.Search) }, +                .addTo(controller), +        SearchInputItemViewModel_(), +                .id("search"), +                .searchClickListener { viewModel.setMode(LottiefilesMode.Search, it) }, +                .addIf(viewModel.mode() == LottiefilesMode.Search, controller), +, +        val lastAnimationData = viewModel.animationDataList.value?.lastOrNull(), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesService.kt, +    fun getCollection(@Path("collection") collection: String): Observable<AnimationResponse>, +, +    @GET("search/{query}"), +    fun search(@Path("query") query: String): Observable<AnimationResponse>, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesViewModel.kt, +import io.reactivex.Observable, +    val mode = MutableLiveData<LottiefilesMode>().apply { value = LottiefilesMode.Recent }, +    private var searchQuery: String? = null, +, +    fun setMode(mode: LottiefilesMode, searchQuery: String? = null) {, +        this.searchQuery = searchQuery, +        this.mode.value = mode, +        val observable = when (mode()) {]