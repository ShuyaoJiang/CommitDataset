[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            TRIM_PATH_OFFSET, PATH, CIRCLE_POSITION, CIRCLE_SIZE, DASH_PATTERN, DASH_PATTERN_OFFSET, DASH_PATTERN_GAP}), +    public static final int DASH_PATTERN = 19;, +    public static final int DASH_PATTERN_OFFSET = 20;, +    public static final int DASH_PATTERN_GAP = 21;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            TRIM_PATH_OFFSET, PATH, CIRCLE_POSITION, CIRCLE_SIZE, DASH_PATTERN, DASH_PATTERN_OFFSET, DASH_PATTERN_GAP}), +    public static final int DASH_PATTERN = 19;, +    public static final int DASH_PATTERN_OFFSET = 20;, +    public static final int DASH_PATTERN_GAP = 21;, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java, +import com.airbnb.lotte.animation.LotteAnimatableNumberValue;, +            if (!stroke.getLineDashPattern().isEmpty()) {, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN, stroke.getLineDashPattern().get(0));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_GAP, stroke.getLineDashPattern().get(1));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_OFFSET, stroke.getDashOffset());, +            }, +        private final Observable.OnChangedListener dashPatternChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onDashPatternChanged();, +            }, +        };, +, +, +        @Nullable private List<LotteAnimatableNumberValue> lineDashPattern;, +        @Nullable private LotteAnimatableNumberValue lineDashPatternOffset;, +        public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {, +            if (this.lineDashPattern != null) {, +                this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);, +            }, +            if (this.lineDashPatternOffset != null) {, +                this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);, +            }, +            this.lineDashPattern = lineDashPattern;, +            this.lineDashPatternOffset = offset;, +            lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);, +            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);, +            offset.getObservable().addChangeListener(dashPatternChangedListener);, +            onDashPatternChanged();, +        }, +, +        private void onDashPatternChanged() {, +                values[i] = (float) lineDashPattern.get(i).getObservable().getValue();, +            paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));, +            invalidateSelf();, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            TRIM_PATH_OFFSET, PATH, CIRCLE_POSITION, CIRCLE_SIZE, DASH_PATTERN, DASH_PATTERN_OFFSET, DASH_PATTERN_GAP}), +    public static final int DASH_PATTERN = 19;, +    public static final int DASH_PATTERN_OFFSET = 20;, +    public static final int DASH_PATTERN_GAP = 21;, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java, +import com.airbnb.lotte.animation.LotteAnimatableNumberValue;, +            if (!stroke.getLineDashPattern().isEmpty()) {, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN, stroke.getLineDashPattern().get(0));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_GAP, stroke.getLineDashPattern().get(1));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_OFFSET, stroke.getDashOffset());, +            }, +        private final Observable.OnChangedListener dashPatternChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onDashPatternChanged();, +            }, +        };, +, +, +        @Nullable private List<LotteAnimatableNumberValue> lineDashPattern;, +        @Nullable private LotteAnimatableNumberValue lineDashPatternOffset;, +        public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {, +            if (this.lineDashPattern != null) {, +                this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);, +            }, +            if (this.lineDashPatternOffset != null) {, +                this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);, +            }, +            this.lineDashPattern = lineDashPattern;, +            this.lineDashPatternOffset = offset;, +            lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);, +            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);, +            offset.getObservable().addChangeListener(dashPatternChangedListener);, +            onDashPatternChanged();, +        }, +, +        private void onDashPatternChanged() {, +                values[i] = (float) lineDashPattern.get(i).getObservable().getValue();, +            paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));, +            invalidateSelf();, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java, +import com.airbnb.lotte.animation.LotteAnimatableNumberValue;, +            if (!stroke.getLineDashPattern().isEmpty()) {, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN, stroke.getLineDashPattern().get(0));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_GAP, stroke.getLineDashPattern().get(1));, +                propertyAnimations.put(LotteAnimatableProperty.DASH_PATTERN_OFFSET, stroke.getDashOffset());, +            }, +        private final Observable.OnChangedListener dashPatternChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onDashPatternChanged();, +            }, +        };]