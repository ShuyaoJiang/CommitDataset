[+++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 5.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 5.png, +++ b/LottieSample/screenshots/Tests_Polygon 50.png, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 5.png, +++ b/LottieSample/screenshots/Tests_Polygon 50.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testAnimation(getActivity(), "Tests/Polygon.json");, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 5.png, +++ b/LottieSample/screenshots/Tests_Polygon 50.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testAnimation(getActivity(), "Tests/Polygon.json");, +++ b/LottieSample/src/main/assets/Tests/Polygon.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[310,328.86,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"sr","sy":2,"d":1,"pt":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[3],"e":[10]},{"t":239}],"ix":3},"p":{"k":[0,0],"ix":4},"r":{"k":0,"ix":5},"or":{"k":136,"ix":7},"os":{"k":50,"ix":9},"ix":1,"nm":"Polystar Path 1","mn":"ADBE Vector Shape - Star"},{"ty":"st","fillEnabled":true,"c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":2},"lc":1,"lj":1,"ml":4,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0,1]},"o":{"k":100},"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-110,-114],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Polystar 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":240,"st":0,"bm":0,"sr":1}],"v":"4.5.0","ddd":0,"ip":0,"op":240,"fr":60,"w":400,"h":400}, +++ b/LottieSample/screenshots/Tests_Polygon 0.png, +++ b/LottieSample/screenshots/Tests_Polygon 10.png, +++ b/LottieSample/screenshots/Tests_Polygon 100.png, +++ b/LottieSample/screenshots/Tests_Polygon 20.png, +++ b/LottieSample/screenshots/Tests_Polygon 5.png, +++ b/LottieSample/screenshots/Tests_Polygon 50.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testAnimation(getActivity(), "Tests/Polygon.json");, +++ b/LottieSample/src/main/assets/Tests/Polygon.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":4,"nm":"Shape Layer 1","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[310,328.86,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"ao":0,"shapes":[{"ty":"gr","it":[{"ty":"sr","sy":2,"d":1,"pt":{"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"n":["0p833_0p833_0p167_0p167"],"t":0,"s":[3],"e":[10]},{"t":239}],"ix":3},"p":{"k":[0,0],"ix":4},"r":{"k":0,"ix":5},"or":{"k":136,"ix":7},"os":{"k":50,"ix":9},"ix":1,"nm":"Polystar Path 1","mn":"ADBE Vector Shape - Star"},{"ty":"st","fillEnabled":true,"c":{"k":[1,1,1,1]},"o":{"k":100},"w":{"k":2},"lc":1,"lj":1,"ml":4,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke"},{"ty":"fl","fillEnabled":true,"c":{"k":[1,0,0,1]},"o":{"k":100},"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill"},{"ty":"tr","p":{"k":[-110,-114],"ix":2},"a":{"k":[0,0],"ix":1},"s":{"k":[100,100],"ix":3},"r":{"k":0,"ix":6},"o":{"k":100,"ix":7},"sk":{"k":0,"ix":4},"sa":{"k":0,"ix":5},"nm":"Transform"}],"nm":"Polystar 1","np":3,"mn":"ADBE Vector Group"}],"ip":0,"op":240,"st":0,"bm":0,"sr":1}],"v":"4.5.0","ddd":0,"ip":0,"op":240,"fr":60,"w":400,"h":400}, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarLayer.java, +      fillLayer.setShape(polystarShape);, +      strokeLayer.setShape(polystarShape);, +     * It works best for polygons and stars with 3 points and needs more, +     * work otherwise., +    private static final float POLYGON_MAGIC_NUMBER = .25f;, +    void setShape(PolystarShape polystarShape) {, +      // Not used for polygons., +      if (polystarShape.getInnerRadius() != null) {, +      }, +      if (polystarShape.getInnerRoundedness() != null) {, +      }, +      if (innerRadiusAnimation != null) {, +      }, +      if (innerRoundednessAnimation != null) {, +      }, +      if (innerRadiusAnimation != null) {, +      }, +      if (innerRoundednessAnimation != null) {, +      }, +      int points = (int) Math.floor(pointsAnimation.getValue());, +      double currentAngle = rotationAnimation == null ? 0f : rotationAnimation.getValue();, +      // Start at +y instead of +x, +      currentAngle -= 90;, +      // convert to radians, +      currentAngle = Math.toRadians(currentAngle);, +      // adjust current angle for partial points, +      float anglePerPoint = (float) (2 * Math.PI / points);, +      path.reset();, +, +      float roundedness = outerRoundednessAnimation.getValue() / 100f;, +      float radius = outerRadiusAnimation.getValue();, +      float x;, +      float y;, +      float previousX;, +      float previousY;, +      x = (float) (radius * Math.cos(currentAngle));, +      y = (float) (radius * Math.sin(currentAngle));, +      path.moveTo(x, y);, +      currentAngle += anglePerPoint;, +, +      double numPoints = Math.ceil(points);, +      for (int i = 0; i < numPoints; i++) {, +        previousX = x;, +        previousY = y;, +        x = (float) (radius * Math.cos(currentAngle));, +        y = (float) (radius * Math.sin(currentAngle));, +, +        if (roundedness != 0) {, +          float cp1Theta = (float) (Math.atan2(previousY, previousX) - Math.PI / 2f);, +          float cp1Dx = (float) Math.cos(cp1Theta);]