[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);, +    if (cacheKey != null && taskCache.containsKey(cacheKey)) {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);, +    if (cacheKey != null && taskCache.containsKey(cacheKey)) {, +++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java, +import static junit.framework.Assert.assertFalse;, +, +  @Test, +  public void testNullMultipleTimesAsync() {, +    JsonReader reader = new JsonReader(new StringReader(JSON));, +    LottieTask<LottieComposition> task1 = LottieCompositionFactory.fromJsonReader(reader, null);, +    LottieTask<LottieComposition> task2 = LottieCompositionFactory.fromJsonReader(reader, null);, +    assertFalse(task1 == task2);, +  }, +, +  @Test, +  public void testNullMultipleTimesSync() {, +    JsonReader reader = new JsonReader(new StringReader(JSON));, +    LottieResult<LottieComposition> task1 = LottieCompositionFactory.fromJsonReaderSync(reader, null);, +    LottieResult<LottieComposition> task2 = LottieCompositionFactory.fromJsonReaderSync(reader, null);, +    assertFalse(task1 == task2);, +  }]