[+++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import android.graphics.PorterDuff;, +import android.graphics.PorterDuffXfermode;, +//        mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));, +        Bitmap mainBitmap;, +            mainBitmap = maskBitmap;, +            mainBitmap = bitmap;, +            mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));, +            matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);, +            mainCanvas.drawBitmap(matteBitmap, 0, 0, new Paint());, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import android.graphics.PorterDuff;, +import android.graphics.PorterDuffXfermode;, +//        mattePaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));, +        Bitmap mainBitmap;, +            mainBitmap = maskBitmap;, +            mainBitmap = bitmap;, +            mattePaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));, +            matteCanvas.drawBitmap(mainBitmap, 0, 0, mattePaint);, +            mainCanvas.drawBitmap(matteBitmap, 0, 0, new Paint());, +++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java, +import android.support.v4.view.animation.PathInterpolatorCompat;, +import android.view.animation.LinearInterpolator;, +    private final List<PointF> pointKeyframes = new ArrayList<>();, +    private float delayMs;, +    private float durationMs;, +    private long startFrame;, +    private long durationFrames;, +        try {, +            for (int i = 0; i < keyframes.length(); i++) {, +                JSONObject kf = keyframes.getJSONObject(i);, +                if (kf.has("t")) {, +                    startFrame = kf.getLong("t");, +                    break;, +                }, +            }, +, +            for (int i = keyframes.length() - 1; i >= 0; i--) {, +                JSONObject keyframe = keyframes.getJSONObject(i);, +                if (keyframe.has("t")) {, +                    long endFrame = keyframe.getLong("t");, +                    if (endFrame <= startFrame) {, +                        throw new IllegalStateException("Invalid frame duration " + startFrame + "->" + endFrame);, +                    }, +                    durationFrames = endFrame - startFrame;, +                    durationMs = durationFrames / frameRate;, +                    delayMs = startFrame / frameRate;, +                    break;, +                }, +            }, +, +            boolean addStartValue = true;, +            boolean addTimePadding =  false;, +            JSONArray outPoint = null;, +, +            for (int i = 0; i < keyframes.length(); i++) {, +                JSONObject keyframe = keyframes.getJSONObject(i);, +                long frame = keyframe.getLong("t");, +                float timePercentage = (frame - startFrame) / durationFrames;, +, +                if (outPoint != null) {, +                    PointF vertex = pointFromValueArray(outPoint);, +                    animationPath.lineTo(vertex.x, vertex.y);, +                    pointKeyframes.add(vertex);, +                    timingFunctions.add(new LinearInterpolator());, +                    outPoint = null;, +                }, +, +                PointF startPoint = pointFromValueArray(keyframe.getJSONArray("s"));, +                if (addStartValue) {, +                    if (i == 0) {, +                        pointKeyframes.add(startPoint);, +                        animationPath.moveTo(startPoint.x, startPoint.y);, +                        initialPoint = startPoint;, +                    } else {, +                        animationPath.lineTo(startPoint.x, startPoint.y);, +                        pointKeyframes.add(startPoint);, +                        timingFunctions.add(new LinearInterpolator());, +                    }, +                    addStartValue = false;, +                }, +, +                if (addTimePadding) {, +                    float holdPercentage = timePercentage - 0.00001f;, +                    keyTimes.add(holdPercentage);, +                    addTimePadding = false;, +                }, +, +                if (keyframe.has("e")) {, +                    PointF vertex = pointFromValueArray(keyframe.getJSONArray("e"));, +, +                    Interpolator timingFunction;, +                    if (keyframe.has("o") && keyframe.has("i")) {, +                        PointF cp1 = pointFromValueArray(keyframe.getJSONArray("to"));, +                        PointF cp2 = pointFromValueArray(keyframe.getJSONArray("ti"));, +                        // TODO: inVertex, +//                        animationPath.cubicTo(inVer);, +, +                        timingFunction = PathInterpolatorCompat.create(cp1.x, cp1.y, cp2.x, cp2.y);, +                    } else {]