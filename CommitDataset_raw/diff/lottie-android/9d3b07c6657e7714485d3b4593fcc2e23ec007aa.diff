[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableColorValue implements LotteAnimatableValue<Integer> {, +    private final Observable<Integer> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Integer> getObservable() {, +        return observable;, +    }, +, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableColorValue implements LotteAnimatableValue<Integer> {, +    private final Observable<Integer> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Integer> getObservable() {, +        return observable;, +    }, +, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableNumberValue implements LotteAnimatableValue<Number> {, +    private final Observable<Number> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Number> getObservable() {, +        return observable;, +    }, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableColorValue implements LotteAnimatableValue<Integer> {, +    private final Observable<Integer> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Integer> getObservable() {, +        return observable;, +    }, +, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableNumberValue implements LotteAnimatableValue<Number> {, +    private final Observable<Number> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Number> getObservable() {, +        return observable;, +    }, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatablePointValue implements LotteAnimatableValue<PointF> {, +    private final Observable<PointF> observable = new Observable<>();, +    private long delay;, +    private long duration;, +                observable.setValue(initialPoint);, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<PointF> getObservable() {, +        return observable;, +    }, +, +            animation = new LottePathKeyframeAnimation(property, duration, keyTimes, animationPath);, +            animation = new LottePointKeyframeAnimation(property, duration, keyTimes, pointKeyframes);, +        animation.setStartDelay(delay);, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableColorValue implements LotteAnimatableValue<Integer> {, +    private final Observable<Integer> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Integer> getObservable() {, +        return observable;, +    }, +, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatableNumberValue implements LotteAnimatableValue<Number> {, +    private final Observable<Number> observable = new Observable<>();, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;, +    @Override, +    public Observable<Number> getObservable() {, +        return observable;, +    }, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +import com.airbnb.lotte.utils.Observable;, +public class LotteAnimatablePointValue implements LotteAnimatableValue<PointF> {, +    private final Observable<PointF> observable = new Observable<>();, +    private long delay;, +    private long duration;, +                observable.setValue(initialPoint);, +                    duration = durationFrames / frameRate * 1000;, +                    delay = startFrame / frameRate * 1000;]