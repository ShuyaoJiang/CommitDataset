[+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +    List<GreedyContent> greedyContents = new ArrayList<>();, +        if (content instanceof GreedyContent) {, +          greedyContents.add((GreedyContent) content);, +        }, +    for (int i = greedyContents.size() - 1; i >= 0; i--) {, +      greedyContents.get(i).absorbContent(contents.listIterator(contents.size()));, +++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +    List<GreedyContent> greedyContents = new ArrayList<>();, +        if (content instanceof GreedyContent) {, +          greedyContents.add((GreedyContent) content);, +        }, +    for (int i = greedyContents.size() - 1; i >= 0; i--) {, +      greedyContents.get(i).absorbContent(contents.listIterator(contents.size()));, +++ b/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java, +package com.airbnb.lottie;, +, +import java.util.ListIterator;, +, +/**, + * Content that may want to absorb and take ownership of the content around it., + * For example, merge paths will absorb the shapes above it and repeaters will absorb the content, + * above it., + */, +interface GreedyContent {, +  /**, +   * An iterator of contents that can be used to take ownership of contents. If ownership is taken,, +   * the content should be removed from the iterator., +   *, +   * The contents should be iterated by calling hasPrevious() and previous() so that the list of, +   * contents is traversed from bottom to top which is the correct order for handling AE logic., +   */, +  void absorbContent(ListIterator<Content> contents);, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +    List<GreedyContent> greedyContents = new ArrayList<>();, +        if (content instanceof GreedyContent) {, +          greedyContents.add((GreedyContent) content);, +        }, +    for (int i = greedyContents.size() - 1; i >= 0; i--) {, +      greedyContents.get(i).absorbContent(contents.listIterator(contents.size()));, +++ b/lottie/src/main/java/com/airbnb/lottie/GreedyContent.java, +package com.airbnb.lottie;, +, +import java.util.ListIterator;, +, +/**, + * Content that may want to absorb and take ownership of the content around it., + * For example, merge paths will absorb the shapes above it and repeaters will absorb the content, + * above it., + */, +interface GreedyContent {, +  /**, +   * An iterator of contents that can be used to take ownership of contents. If ownership is taken,, +   * the content should be removed from the iterator., +   *, +   * The contents should be iterated by calling hasPrevious() and previous() so that the list of, +   * contents is traversed from bottom to top which is the correct order for handling AE logic., +   */, +  void absorbContent(ListIterator<Content> contents);, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/MergePathsContent.java, +import java.util.ListIterator;, +class MergePathsContent implements PathContent, GreedyContent {, +  @Override public void absorbContent(ListIterator<Content> contents) {, +    // Fast forward the iterator until after this content., +    //noinspection StatementWithEmptyBody, +    while (contents.hasPrevious() && contents.previous() != this) {}, +    while (contents.hasPrevious()) {, +      Content content = contents.previous();, +        contents.remove();, +      }]