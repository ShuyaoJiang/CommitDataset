[+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +import java.util.List;, +class AnimatableColorValue extends BaseAnimatableValue<Integer, Integer> {, +  private AnimatableColorValue(List<Keyframe<Integer>> keyframes, LottieComposition composition,, +      Integer initialValue) {, +    super(keyframes, composition, initialValue);, +, +  static final class Factory {, +    private Factory() {, +    }, +, +    static AnimatableColorValue newInstance(JSONObject json, LottieComposition composition) {, +      AnimatableValueParser.Result<Integer> result = AnimatableValueParser, +          .newInstance(json, 1f, composition, ColorFactory.INSTANCE), +          .parseJson();, +      return new AnimatableColorValue(result.keyframes, composition, result.initialValue);, +    }, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +import java.util.List;, +class AnimatableColorValue extends BaseAnimatableValue<Integer, Integer> {, +  private AnimatableColorValue(List<Keyframe<Integer>> keyframes, LottieComposition composition,, +      Integer initialValue) {, +    super(keyframes, composition, initialValue);, +, +  static final class Factory {, +    private Factory() {, +    }, +, +    static AnimatableColorValue newInstance(JSONObject json, LottieComposition composition) {, +      AnimatableValueParser.Result<Integer> result = AnimatableValueParser, +          .newInstance(json, 1f, composition, ColorFactory.INSTANCE), +          .parseJson();, +      return new AnimatableColorValue(result.keyframes, composition, result.initialValue);, +    }, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +import java.util.List;, +, +  private AnimatableFloatValue(LottieComposition composition, Float initialValue) {, +    super(composition, initialValue);, +  private AnimatableFloatValue(List<Keyframe<Float>> keyframes,, +      LottieComposition composition, Float initialValue) {, +    super(keyframes, composition, initialValue);, +, +  private static class ValueFactory implements AnimatableValue.Factory<Float> {, +    static final ValueFactory INSTANCE = new ValueFactory();, +, +    private ValueFactory() {, +    }, +, +    @Override public Float valueFromObject(Object object, float scale) {, +      return JsonUtils.valueFromObject(object) * scale;, +    }, +  }, +, +  static final class Factory {, +    private Factory() {, +    }, +, +    static AnimatableFloatValue newInstance(LottieComposition composition, Float initialValue) {, +      return new AnimatableFloatValue(composition, initialValue);, +    }, +, +    static AnimatableFloatValue newInstance(JSONObject json, LottieComposition composition) {, +      return newInstance(json, composition, true);, +    }, +, +    static AnimatableFloatValue newInstance(JSONObject json, LottieComposition composition,, +        boolean isDp) {, +      float scale = isDp ? composition.getScale() : 1f;, +      AnimatableValueParser.Result<Float> result = AnimatableValueParser, +          .newInstance(json, scale, composition, ValueFactory.INSTANCE), +          .parseJson();, +      return new AnimatableFloatValue(result.keyframes, composition, result.initialValue);, +    }, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +import java.util.List;, +class AnimatableColorValue extends BaseAnimatableValue<Integer, Integer> {, +  private AnimatableColorValue(List<Keyframe<Integer>> keyframes, LottieComposition composition,, +      Integer initialValue) {, +    super(keyframes, composition, initialValue);, +, +  static final class Factory {, +    private Factory() {, +    }, +, +    static AnimatableColorValue newInstance(JSONObject json, LottieComposition composition) {, +      AnimatableValueParser.Result<Integer> result = AnimatableValueParser, +          .newInstance(json, 1f, composition, ColorFactory.INSTANCE), +          .parseJson();, +      return new AnimatableColorValue(result.keyframes, composition, result.initialValue);, +    }, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +import java.util.List;, +, +  private AnimatableFloatValue(LottieComposition composition, Float initialValue) {, +    super(composition, initialValue);]