[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        rootLayer.recycleBitmaps();, +, +        rootLayer.setComposition(composition);, +        isAnimationLoading = false;, +        requestLayout();, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +        rootLayer.recycleBitmaps();, +, +        rootLayer.setComposition(composition);, +        isAnimationLoading = false;, +        requestLayout();, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/RootLayer.java, +import android.graphics.Bitmap;, +import android.graphics.Rect;, +import android.support.annotation.Nullable;, +import android.support.annotation.VisibleForTesting;, +import android.util.LongSparseArray;, +import com.airbnb.lottie.model.Layer;, +import com.airbnb.lottie.model.LottieComposition;, +, +import java.util.ArrayList;, +import java.util.List;, +, +    @Nullable private Bitmap mainBitmap = null;, +    @Nullable private Bitmap maskBitmap = null;, +    @Nullable private Bitmap matteBitmap = null;, +    @Nullable private Bitmap mainBitmapForMatte = null;, +    @Nullable private Bitmap maskBitmapForMatte = null;, +    private void clearComposition() {, +        recycleBitmaps();, +        clearLayers();, +    }, +, +    public void setComposition(@NonNull LottieComposition composition) {, +        clearComposition();, +        setCompDuration(composition.getDuration());, +        setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());, +        buildLayersForComposition(composition);, +    }, +, +    private void buildLayersForComposition(LottieComposition composition) {, +        if (composition == null) {, +            throw new IllegalStateException("Composition is null");, +        }, +        Rect bounds = composition.getBounds();, +        if (composition.hasMasks() || composition.hasMattes()) {, +            mainBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);, +        }, +        if (composition.hasMasks()) {, +            maskBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +        }, +        if (composition.hasMattes()) {, +            matteBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);, +        }, +        LongSparseArray<LayerView> layerMap = new LongSparseArray<>(composition.getLayers().size());, +        List<LayerView> layers = new ArrayList<>(composition.getLayers().size());, +        LayerView maskedLayer = null;, +        for (int i = composition.getLayers().size() - 1; i >= 0; i--) {, +            Layer layer = composition.getLayers().get(i);, +            LayerView layerView;, +            if (maskedLayer == null) {, +                layerView = new LayerView(layer, composition, getCallback(), mainBitmap, maskBitmap, matteBitmap);, +            } else {, +                if (mainBitmapForMatte == null) {, +                    mainBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +                }, +                if (maskBitmapForMatte == null && !layer.getMasks().isEmpty()) {, +                    maskBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +                }, +, +                layerView = new LayerView(layer, composition, getCallback(), mainBitmapForMatte, maskBitmapForMatte, null);, +            }, +            layerMap.put(layerView.getId(), layerView);, +            if (maskedLayer != null) {, +                maskedLayer.setMatteLayer(layerView);, +                maskedLayer = null;, +            } else {, +                layers.add(layerView);, +                if (layer.getMatteType() == Layer.MatteType.Add) {, +                    maskedLayer = layerView;, +                }, +            }, +        }, +, +        for (int i = 0; i < layers.size(); i++) {, +            LayerView layerView = layers.get(i);, +            addLayer(layerView);, +        }, +, +        for (int i = 0; i < layerMap.size(); i++) {, +            long key = layerMap.keyAt(i);, +            LayerView layerView = layerMap.get(key);, +            LayerView parentLayer = layerMap.get(layerView.getLayerModel().getParentId());, +            if (parentLayer != null) {, +                layerView.setParentLayer(parentLayer);, +            }, +        }, +    }, +]