[+++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationItemView.kt, +) : FrameLayout(context, attrs, defStyleAttr) {, +        authorView.text = animationData.userInfo?.name, +        animationView.setImageUrl(animationData.preview), +++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationItemView.kt, +) : FrameLayout(context, attrs, defStyleAttr) {, +        authorView.text = animationData.userInfo?.name, +        animationView.setImageUrl(animationData.preview), +++ /dev/null, +++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationItemView.kt, +) : FrameLayout(context, attrs, defStyleAttr) {, +        authorView.text = animationData.userInfo?.name, +        animationView.setImageUrl(animationData.preview), +++ /dev/null, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +        viewModel.fetchMoreAnimations(), +        viewModel.animationDataList.observe(this, Observer { recyclerView.requestModelBuild() }), +, +                .id("mode"), +                .title(when (viewModel.mode()) {, +                    LottiefilesViewModel.Mode.Popular -> R.string.popular, +                    LottiefilesViewModel.Mode.Recent -> R.string.recent, +                }), +                .onClickListener { _ -> viewModel.switchMode() }, +                .addIf(viewModel.animationDataList.value != null, controller), +        val lastAnimationData = viewModel.animationDataList.value?.last(), +        viewModel.animationDataList.value?.forEach {, +            it ?: return@forEach, +                    .onBind({ _, _, _ ->, +                        if (it == lastAnimationData) {, +                            viewModel.fetchMoreAnimations(), +                    }), +, +        LoadingViewModel_(), +                .id("loading"), +                .onBind { _, _, _ -> viewModel.fetchMoreAnimations() }, +                .addIf(viewModel.loading.value ?: false, controller), +++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationItemView.kt, +) : FrameLayout(context, attrs, defStyleAttr) {, +        authorView.text = animationData.userInfo?.name, +        animationView.setImageUrl(animationData.preview), +++ /dev/null, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +        viewModel.fetchMoreAnimations(), +        viewModel.animationDataList.observe(this, Observer { recyclerView.requestModelBuild() }), +, +                .id("mode"), +                .title(when (viewModel.mode()) {, +                    LottiefilesViewModel.Mode.Popular -> R.string.popular, +                    LottiefilesViewModel.Mode.Recent -> R.string.recent, +                }), +                .onClickListener { _ -> viewModel.switchMode() }, +                .addIf(viewModel.animationDataList.value != null, controller), +        val lastAnimationData = viewModel.animationDataList.value?.last(), +        viewModel.animationDataList.value?.forEach {, +            it ?: return@forEach, +                    .onBind({ _, _, _ ->, +                        if (it == lastAnimationData) {, +                            viewModel.fetchMoreAnimations(), +                    }), +, +        LoadingViewModel_(), +                .id("loading"), +                .onBind { _, _, _ -> viewModel.fetchMoreAnimations() }, +                .addIf(viewModel.loading.value ?: false, controller), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesService.kt, +import retrofit2.http.Query, +    fun getRecent(@Query("page") page: Int): Observable<AnimationResponse>, +, +    @GET("popular"), +    fun getPopular(@Query("page") page: Int): Observable<AnimationResponse>, +++ b/LottieSample/build.gradle, +  implementation 'android.arch.lifecycle:extensions:1.1.0', +  implementation 'com.github.bumptech.glide:glide:4.6.1', +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationItemView.kt, +) : FrameLayout(context, attrs, defStyleAttr) {, +        authorView.text = animationData.userInfo?.name, +        animationView.setImageUrl(animationData.preview), +++ /dev/null, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesFragment.kt, +        viewModel.fetchMoreAnimations(), +        viewModel.animationDataList.observe(this, Observer { recyclerView.requestModelBuild() }), +, +                .id("mode"), +                .title(when (viewModel.mode()) {]