[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/HappoSnapshotter.kt, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility, +    private suspend fun TransferUtility.uploadDeferred(key: String, file: File): TransferObserver {, +        return transferUtility.upload(key, file, CannedAccessControlList.PublicRead).await(), +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/HappoSnapshotter.kt, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility, +    private suspend fun TransferUtility.uploadDeferred(key: String, file: File): TransferObserver {, +        return transferUtility.upload(key, file, CannedAccessControlList.PublicRead).await(), +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.kt, +import com.airbnb.lottie.model.LottieCompositionCache, +import com.airbnb.lottie.samples.BuildConfig, +import com.amazonaws.auth.BasicAWSCredentials, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility, +import com.amazonaws.services.s3.AmazonS3Client, +import com.amazonaws.services.s3.model.S3ObjectSummary, +import java.io.File, +import java.io.FileInputStream, +import java.util.zip.ZipInputStream, +    private lateinit var prodAnimationsTransferUtility: TransferUtility, +, +        prodAnimationsTransferUtility = TransferUtility.builder(), +                .context(activity), +                .s3Client(AmazonS3Client(BasicAWSCredentials(BuildConfig.S3AccessKey, BuildConfig.S3SecretKey))), +                .defaultBucket("lottie-prod-animations"), +                .build(), +, +                snapshotProdAnimations(), +    private suspend fun snapshotProdAnimations() {, +        Log.d(L.TAG, "Downloading prod animations from S3."), +        val s3Client = AmazonS3Client(BasicAWSCredentials(BuildConfig.S3AccessKey, BuildConfig.S3SecretKey)), +        val objectListing = s3Client.listObjects("lottie-prod-animations"), +        objectListing.objectSummaries.forEach { snapshotProdAnimation(it) }, +    }, +, +    private suspend fun snapshotProdAnimation(objectSummary: S3ObjectSummary) {, +        val (fileName, extension) = objectSummary.key.split("."), +        val file = File(activity.cacheDir, fileName.md5 + ".$extension"), +        prodAnimationsTransferUtility.download(objectSummary.key, file).await(), +        Log.d(L.TAG, "Downloaded ${objectSummary.key}"), +, +        val composition = parseComposition(file), +        val bitmap = activity.snapshotFilmstrip(composition), +        snapshotter.record(bitmap, "prod-" + objectSummary.key, "default"), +        file.delete(), +        LottieCompositionCache.getInstance().clear(), +    }, +, +            LottieCompositionCache.getInstance().clear(), +            LottieCompositionCache.getInstance().clear(), +    private suspend fun parseComposition(file: File) = suspendCoroutine<LottieComposition> { continuation ->, +        var isResumed = false, +        val task = if (file.name.endsWith("zip")) LottieCompositionFactory.fromZipStream(ZipInputStream(FileInputStream(file)), file.name), +                else LottieCompositionFactory.fromJsonInputStream(FileInputStream(file), file.name), +        task, +                .addFailureListener {, +                    if (isResumed) return@addFailureListener, +                    continuation.resumeWithException(it), +                    isResumed = true, +                }, +                .addListener {, +                    if (isResumed) return@addListener, +                    continuation.resume(it), +                    isResumed = true, +                }, +    }, +, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/HappoSnapshotter.kt, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility, +    private suspend fun TransferUtility.uploadDeferred(key: String, file: File): TransferObserver {, +        return transferUtility.upload(key, file, CannedAccessControlList.PublicRead).await(), +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.kt, +import com.airbnb.lottie.model.LottieCompositionCache, +import com.airbnb.lottie.samples.BuildConfig, +import com.amazonaws.auth.BasicAWSCredentials, +import com.amazonaws.mobileconnectors.s3.transferutility.TransferUtility, +import com.amazonaws.services.s3.AmazonS3Client, +import com.amazonaws.services.s3.model.S3ObjectSummary, +import java.io.File, +import java.io.FileInputStream, +import java.util.zip.ZipInputStream, +    private lateinit var prodAnimationsTransferUtility: TransferUtility, +, +        prodAnimationsTransferUtility = TransferUtility.builder(), +                .context(activity), +                .s3Client(AmazonS3Client(BasicAWSCredentials(BuildConfig.S3AccessKey, BuildConfig.S3SecretKey))), +                .defaultBucket("lottie-prod-animations"), +                .build(), +, +                snapshotProdAnimations(), +    private suspend fun snapshotProdAnimations() {, +        Log.d(L.TAG, "Downloading prod animations from S3."), +        val s3Client = AmazonS3Client(BasicAWSCredentials(BuildConfig.S3AccessKey, BuildConfig.S3SecretKey)), +        val objectListing = s3Client.listObjects("lottie-prod-animations"), +        objectListing.objectSummaries.forEach { snapshotProdAnimation(it) }, +    }, +, +    private suspend fun snapshotProdAnimation(objectSummary: S3ObjectSummary) {]