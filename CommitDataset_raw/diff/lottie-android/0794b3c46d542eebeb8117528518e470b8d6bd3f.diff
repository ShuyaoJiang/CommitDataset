[+++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java, +  @SuppressWarnings("WeakerAccess") public final double lineHeight;, +++ b/lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java, +  @SuppressWarnings("WeakerAccess") public final double lineHeight;, +++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java, +import java.util.Arrays;, +, +    // Line height, +    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();, +, +    // Split full text in multiple lines, +    List<String> textLines = getTextLines(text);, +    int textLineCount = textLines.size();, +    for (int l = 0; l < textLineCount; l++) {, +, +      String textLine = textLines.get(l);, +      float textLineWidth = getTextLineWidthForGlyphs(textLine, font, fontScale, parentScale);, +, +      canvas.save();, +, +      // Apply horizontal justification, +      applyJustification(documentData.justification, canvas, textLineWidth);, +, +      // Center text vertically, +      float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;, +      float translateY = l * lineHeight - multilineTranslateY;, +      canvas.translate(0, translateY);, +, +      // Draw each line, +      drawGlyphTextLine(textLine, documentData, parentMatrix, font, canvas, parentScale, fontScale);, +, +      // Reset canvas, +      canvas.restore();, +    }, +  }, +, +  private void drawGlyphTextLine(String text, DocumentData documentData, Matrix parentMatrix,, +                                 Font font, Canvas canvas, float parentScale, float fontScale) {, +    // Line height, +    float lineHeight = (float) documentData.lineHeight * Utils.dpScale();, +    // Split full text in multiple lines, +    List<String> textLines = getTextLines(text);, +    int textLineCount = textLines.size();, +    for (int l = 0; l < textLineCount; l++) {, +, +      String textLine = textLines.get(l);, +      float textLineWidth = strokePaint.measureText(textLine);, +, +      // Apply horizontal justification, +      applyJustification(documentData.justification, canvas, textLineWidth);, +, +      // Center text vertically, +      float multilineTranslateY = (textLineCount - 1) * lineHeight / 2;, +      float translateY = l * lineHeight - multilineTranslateY;, +      canvas.translate(0, translateY);, +, +      // Draw each line, +      drawFontTextLine(textLine, documentData, canvas, parentScale);, +, +      // Reset canvas, +      canvas.setMatrix(parentMatrix);, +    }, +  }, +, +  private List<String> getTextLines(String text) {, +    // Split full text by carriage return character, +    String formattedText = text.replaceAll("\r\n", "\r"), +        .replaceAll("\n", "\r");, +    String[] textLinesArray = formattedText.split("\r");, +    return Arrays.asList(textLinesArray);, +  }, +, +  private void drawFontTextLine(String text, DocumentData documentData, Canvas canvas, float parentScale) {, +  private float getTextLineWidthForGlyphs(, +      String textLine, Font font, float fontScale, float parentScale) {, +    float textLineWidth = 0;, +    for (int i = 0; i < textLine.length(); i++) {, +      char c = textLine.charAt(i);, +      textLineWidth += character.getWidth() * fontScale * Utils.dpScale() * parentScale;, +    return textLineWidth;, +  private void applyJustification(Justification justification, Canvas canvas, float textLineWidth) {, +        canvas.translate(-textLineWidth, 0);, +        canvas.translate(-textLineWidth / 2, 0);]