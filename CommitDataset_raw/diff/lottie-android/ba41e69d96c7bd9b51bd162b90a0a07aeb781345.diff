[+++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 50.png, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 50.png, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 50.png, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 50.png, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java, +class LotteEllipseShapeLayer extends LotteAnimatableLayer {, +    LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill, LotteShapeStroke stroke,, +            fillLayer = new LotteCircleShapeLayer(getCallback());, +            strokeLayer = new LotteCircleShapeLayer(getCallback());, +    private static final class LotteCircleShapeLayer extends LotteShapeLayer {, +        private final Observable<Path> observable = new Observable<>(path);, +        LotteCircleShapeLayer(Drawable.Callback callback) {, +            super(callback);, +            setPath(observable);, +        void updateCircle(Observable<PointF> circlePosition, Observable<PointF> circleSize) {, +            observable.setValue(path);, +            onTrimPathChanged();, +++ b/LotteSample/screenshots/CheckSwitch 10.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 20.png, +++ b/LotteSample/screenshots/CheckSwitch 25.png, +++ b/LotteSample/screenshots/CheckSwitch 50.png, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java, +class LotteEllipseShapeLayer extends LotteAnimatableLayer {, +    LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill, LotteShapeStroke stroke,, +            fillLayer = new LotteCircleShapeLayer(getCallback());, +            strokeLayer = new LotteCircleShapeLayer(getCallback());, +    private static final class LotteCircleShapeLayer extends LotteShapeLayer {, +        private final Observable<Path> observable = new Observable<>(path);, +        LotteCircleShapeLayer(Drawable.Callback callback) {, +            super(callback);, +            setPath(observable);, +        void updateCircle(Observable<PointF> circlePosition, Observable<PointF> circleSize) {, +            observable.setValue(path);, +            onTrimPathChanged();, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java, +    private final Observable.OnChangedListener trimPathChangedListener = new Observable.OnChangedListener() {, +        @Override, +        public void onChanged() {, +            onTrimPathChanged();, +        }, +    };, +    LotteShapeLayer(Drawable.Callback callback) {, +        invalidateSelf();, +        if (!trimPath.isEmpty()) {, +    void setShapeAlpha(Observable<Number> shapeAlpha) {, +    void setTransformAlpha(Observable<Number> transformAlpha) {, +    void setLineWidth(Observable<Number> lineWidth) {, +    void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {, +    void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {, +        invalidateSelf();, +    void setLineJoinType(LotteShapeStroke.LineJoinType lineJoinType) {, +    void setTrimPath(Observable<Number> strokeStart, Observable<Number> strokeEnd) {, +            this.strokeStart.removeChangeListemer(trimPathChangedListener);, +            this.strokeEnd.removeChangeListemer(trimPathChangedListener);, +        strokeStart.addChangeListener(trimPathChangedListener);, +        strokeEnd.addChangeListener(trimPathChangedListener);, +        onTrimPathChanged();, +    void onTrimPathChanged() {, +        if (strokeStart != null && strokeEnd != null) {, +            float length = pathMeasure.getLength();, +            float start = length * ((Float) strokeStart.getValue()) / 100f;, +            float end = length * ((Float) strokeEnd.getValue()) / 100f;, +]