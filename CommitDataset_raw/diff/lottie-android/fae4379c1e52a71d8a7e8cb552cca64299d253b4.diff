[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +    animator.clearComposition();, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +    animator.clearComposition();, +++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java, +  public void clearComposition() {, +    this.composition = null;, +    minFrame = Integer.MIN_VALUE;, +    maxFrame = Integer.MAX_VALUE;, +  }, +, +    // Because the initial composition is loaded async, the first min/max frame may be set, +    boolean keepMinAndMaxFrames = this.composition == null;, +    if (keepMinAndMaxFrames) {, +    } else {, +      setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());, +    }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +    animator.clearComposition();, +++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java, +  public void clearComposition() {, +    this.composition = null;, +    minFrame = Integer.MIN_VALUE;, +    maxFrame = Integer.MAX_VALUE;, +  }, +, +    // Because the initial composition is loaded async, the first min/max frame may be set, +    boolean keepMinAndMaxFrames = this.composition == null;, +    if (keepMinAndMaxFrames) {, +    } else {, +      setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());, +    }, +++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java, +    animator = createAnimator();, +    composition = createComposition(0, 1000);, +, +    animator.setComposition(composition);, +    spyListener = Mockito.mock(Animator.AnimatorListener.class);, +    isDone = new AtomicBoolean(false);, +  }, +, +  private LottieValueAnimator createAnimator() {, +    return new LottieValueAnimator() {, +  }, +, +  private LottieComposition createComposition(int startFrame, int endFrame) {, +    LottieComposition composition = new LottieComposition();, +    composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),, +    return composition;, +  @Test, +  public void setMinFrameBeforeComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setMinFrame(100);, +    animator.setComposition(composition);, +    assertEquals(100.0f, animator.getMinFrame());, +  }, +, +  @Test, +  public void setMaxFrameBeforeComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setMaxFrame(100);, +    animator.setComposition(composition);, +    assertEquals(100.0f, animator.getMaxFrame());, +  }, +, +  @Test, +  public void setMinAndMaxFrameBeforeComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setMinAndMaxFrames(100, 900);, +    animator.setComposition(composition);, +    assertEquals(100.0f, animator.getMinFrame());, +    assertEquals(900.0f, animator.getMaxFrame());, +  }, +, +  @Test, +  public void setMinFrameAfterComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setComposition(composition);, +    animator.setMinFrame(100);, +    assertEquals(100.0f, animator.getMinFrame());, +  }, +, +  @Test, +  public void setMaxFrameAfterComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setComposition(composition);, +    animator.setMaxFrame(100);, +    assertEquals(100.0f, animator.getMaxFrame());, +  }, +, +  @Test, +  public void setMinAndMaxFrameAfterComposition() {, +    LottieValueAnimator animator = createAnimator();, +    animator.setComposition(composition);, +    animator.setMinAndMaxFrames(100, 900);, +    assertEquals(100.0f, animator.getMinFrame());, +    assertEquals(900.0f, animator.getMaxFrame());, +  }, +, +  @Test]