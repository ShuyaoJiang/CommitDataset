[+++ b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java, +++ b/lottie/src/main/java/com/airbnb/lottie/GradientFill.java, +++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java, +import android.graphics.RadialGradient;, +  private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();, +  private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();, +  private final GradientFill.GradientType type;, +    type = fill.getGradientType();, +    if (type == GradientFill.GradientType.Linear) {, +      paint.setShader(getLinearGradient());, +    } else {, +      paint.setShader(getRadialGradient());, +    }, +  private LinearGradient getLinearGradient() {, +    LinearGradient gradient = linearGradientCache.get(gradientHash);, +    linearGradientCache.put(gradientHash, gradient);, +    return gradient;, +  }, +, +  private RadialGradient getRadialGradient() {, +    int gradientHash = getGradientHash();, +    RadialGradient gradient = radialGradientCache.get(gradientHash);, +    if (gradient != null) {, +      return gradient;, +    }, +    PointF startPoint = startPointAnimation.getValue();, +    PointF endPoint = endPointAnimation.getValue();, +    GradientColor gradientColor = colorAnimation.getValue();, +    int[] colors = gradientColor.getColors();, +    float[] positions = gradientColor.getPositions();, +    int x0 = (int) (boundsRect.left + boundsRect.width() / 2 + startPoint.x);, +    int y0 = (int) (boundsRect.top + boundsRect.height() / 2 + startPoint.y);, +    int x1 = (int) (boundsRect.left + boundsRect.width() / 2 + endPoint.x);, +    int y1 = (int) (boundsRect.top + boundsRect.height() / 2 + endPoint.y);, +    float r = (float) Math.hypot(x1 - x0, y1 - y0);, +    gradient = new RadialGradient(x0, y0, r, colors, positions, Shader.TileMode.CLAMP);, +    radialGradientCache.put(gradientHash, gradient);]