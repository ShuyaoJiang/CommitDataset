[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)}, or {@link #setAnimation(JSONObject)}., +    private final LottieDrawable lottieDrawable = new LottieDrawable();, +    @Override, +    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {, +        super.onMeasure(widthMeasureSpec, heightMeasureSpec);, +    }, +, +     *, +     * You may also specify a cache strategy. Specifying {@link CacheStrategy#Strong} will hold a strong reference to the composition once it is loaded, +     * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition., +     *, +     * This is particularly useful for animations loaded from the network. You can fetch the bodymovin json from the network and pass it directly here., +        setImageDrawable(lottieDrawable);, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)}, or {@link #setAnimation(JSONObject)}., +    private final LottieDrawable lottieDrawable = new LottieDrawable();, +    @Override, +    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {, +        super.onMeasure(widthMeasureSpec, heightMeasureSpec);, +    }, +, +     *, +     * You may also specify a cache strategy. Specifying {@link CacheStrategy#Strong} will hold a strong reference to the composition once it is loaded, +     * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition., +     *, +     * This is particularly useful for animations loaded from the network. You can fetch the bodymovin json from the network and pass it directly here., +        setImageDrawable(lottieDrawable);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java, +    AnimatableLayer(Drawable.Callback callback) {, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)}, or {@link #setAnimation(JSONObject)}., +    private final LottieDrawable lottieDrawable = new LottieDrawable();, +    @Override, +    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {, +        super.onMeasure(widthMeasureSpec, heightMeasureSpec);, +    }, +, +     *, +     * You may also specify a cache strategy. Specifying {@link CacheStrategy#Strong} will hold a strong reference to the composition once it is loaded, +     * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition., +     *, +     * This is particularly useful for animations loaded from the network. You can fetch the bodymovin json from the network and pass it directly here., +        setImageDrawable(lottieDrawable);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java, +    AnimatableLayer(Drawable.Callback callback) {, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            ShapeTrimPath trim, ShapeTransform transform, Drawable.Callback callback) {, +        super(callback);, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)}, or {@link #setAnimation(JSONObject)}., +    private final LottieDrawable lottieDrawable = new LottieDrawable();, +    @Override, +    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {, +        super.onMeasure(widthMeasureSpec, heightMeasureSpec);, +    }, +, +     *, +     * You may also specify a cache strategy. Specifying {@link CacheStrategy#Strong} will hold a strong reference to the composition once it is loaded, +     * and deserialized. {@link CacheStrategy#Weak} will hold a weak reference to said composition., +     *, +     * This is particularly useful for animations loaded from the network. You can fetch the bodymovin json from the network and pass it directly here., +        setImageDrawable(lottieDrawable);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java, +    AnimatableLayer(Drawable.Callback callback) {, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            ShapeTrimPath trim, ShapeTransform transform, Drawable.Callback callback) {, +        super(callback);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/GroupLayerView.java, +            @Nullable ShapeTransform previousTransform, Drawable.Callback callback) {, +        super(callback);, +                ShapeLayerView shapeLayer = new ShapeLayerView(shapePath, currentFill, currentStroke, currentTrim, currentTransform, getCallback());, +                RectLayer shapeLayer = new RectLayer(shapeRect, currentFill, currentStroke, currentTransform, getCallback());, +                EllipseShapeLayer shapeLayer = new EllipseShapeLayer(shapeCircle, currentFill, currentStroke, currentTrim, currentTransform, getCallback());, +                GroupLayerView groupLayer = new GroupLayerView(shapeGroup, currentFill, currentStroke, currentTrim, currentTransform, getCallback());, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +        LottieAnimationView view = new LottieAnimationView(activity);, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/ListFragment.java, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, + * 2) Programatically: {@link #setAnimation(String)}, {@link #setComposition(LottieComposition)}, or {@link #setAnimation(JSONObject)}., +    private final LottieDrawable lottieDrawable = new LottieDrawable();, +    @Override, +    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {]