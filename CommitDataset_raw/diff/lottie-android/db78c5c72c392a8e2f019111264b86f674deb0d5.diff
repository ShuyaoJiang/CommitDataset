[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/BaseLotteAnimatableValue.java, +package com.airbnb.lotte.animation;, +, +, +import android.graphics.PointF;, +import android.support.v4.view.animation.PathInterpolatorCompat;, +import android.view.animation.Interpolator;, +import android.view.animation.LinearInterpolator;, +, +import com.airbnb.lotte.utils.JsonUtils;, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +import com.airbnb.lotte.utils.Observable;, +, +import org.json.JSONArray;, +import org.json.JSONException;, +import org.json.JSONObject;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public abstract class BaseLotteAnimatableValue<T> implements LotteAnimatableValue<T> {, +, +    protected final Observable<T> observable = new Observable<>();, +    protected final List<T> keyFrames = new ArrayList<>();, +    protected final List<Float> keyTimes = new ArrayList<>();, +    protected final List<Interpolator> timingFunctions = new ArrayList<>();, +    protected long delay;, +    protected long duration;, +, +    protected long startFrame;, +    protected long durationFrames;, +    protected int frameRate;, +    protected final long compDuration;, +, +    protected T initialValue;, +, +    public BaseLotteAnimatableValue(JSONObject json, int frameRate, long compDuration) {, +        this.frameRate = frameRate;, +        this.compDuration = compDuration;, +, +        try {, +            Object value = json.get("k");, +, +            if (value instanceof JSONArray) {, +                Object firstObject = ((JSONArray) value).get(0);, +                if (firstObject instanceof JSONObject && ((JSONObject) firstObject).has("t")) {, +                    // Keyframes, +                    buildAnimationForKeyframes((JSONArray) value);, +                } else {, +                    initialValue = valueFromArray((JSONArray) value);, +                    observable.setValue(initialValue);, +                }, +            } else {, +                throw new IllegalStateException("Invalid color values.");, +            }, +        } catch (JSONException e) {, +            throw new IllegalStateException("Unable to parse color " + json, e);, +        }, +    }, +, +    private void buildAnimationForKeyframes(JSONArray keyframes) {, +        try {, +            for (int i = 0; i < keyframes.length(); i++) {, +                JSONObject kf = keyframes.getJSONObject(i);, +                if (kf.has("t")) {, +                    startFrame = kf.getLong("t");, +                    break;, +                }, +            }, +, +            for (int i = keyframes.length() - 1; i >= 0; i--) {, +                JSONObject keyframe = keyframes.getJSONObject(i);, +                if (keyframe.has("t")) {, +                    long endFrame = keyframe.getLong("t");, +                    if (endFrame <= startFrame) {, +                        throw new IllegalStateException("Invalid frame compDuration " + startFrame + "->" + endFrame);, +                    }, +                    durationFrames = endFrame - startFrame;, +                    duration = (long) (durationFrames / (float) frameRate * 1000);, +                    delay = (long) (startFrame / (float) frameRate * 1000);, +                    break;, +                }, +            }, +, +            boolean addStartValue = true;, +            boolean addTimePadding =  false;, +            T outColor = null;, +, +            for (int i = 0; i < keyframes.length(); i++) {, +                JSONObject keyframe = keyframes.getJSONObject(i);, +                long frame = keyframe.getLong("t");, +                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;, +, +                if (outColor != null) {, +                    keyFrames.add(outColor);, +                    timingFunctions.add(new LinearInterpolator());, +                    outColor = null;, +                }, +, +                T startColor = keyframe.has("s") ? valueFromArray(keyframe.getJSONArray("s")) : null;]