[+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +        Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;, +        Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +        Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;, +        Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import android.support.annotation.Nullable;, +    @Nullable private final Bitmap contentBitmap;, +    @Nullable private final Bitmap maskBitmap;, +    @Nullable private final Bitmap matteBitmap;, +    @Nullable private Canvas contentCanvas;, +    @Nullable private Canvas maskCanvas;, +    @Nullable private Canvas matteCanvas;, +    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {, +        this.contentBitmap = mainBitmap;, +        if (contentBitmap != null) {, +            contentCanvas = new Canvas(contentBitmap);, +            if (maskBitmap != null) {, +                maskPaint.setShader(new BitmapShader(contentBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));, +            }, +        }, +, +        if (maskBitmap != null && layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {, +        if (matteBitmap == null) {, +            throw new IllegalArgumentException("Cannot set a matte if no matte contentBitmap was given!");, +        }, +        if (contentBitmap != null) {, +            contentBitmap.eraseColor(Color.TRANSPARENT);, +        }, +        if (contentCanvas == null || contentBitmap != null) {, +            super.draw(mainCanvas);, +            return;, +        }, +        if (maskBitmap != null && maskCanvas != null && mask != null && !mask.getMasks().isEmpty()) {, +                //noinspection ConstantConditions, +                mainCanvas.drawBitmap(contentBitmap, 0, 0, mainCanvasPaint);, +            mainBitmap = contentBitmap;, +        if (matteCanvas != null && matteBitmap != null && matte != null) {, +            //noinspection ConstantConditions, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +        Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;, +        Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import android.support.annotation.Nullable;, +    @Nullable private final Bitmap contentBitmap;, +    @Nullable private final Bitmap maskBitmap;, +    @Nullable private final Bitmap matteBitmap;, +    @Nullable private Canvas contentCanvas;, +    @Nullable private Canvas maskCanvas;, +    @Nullable private Canvas matteCanvas;, +    public LotteLayerView(LotteLayer layerModel, LotteComposition composition, Callback callback, @Nullable Bitmap mainBitmap, @Nullable Bitmap maskBitmap, @Nullable Bitmap matteBitmap) {, +        this.contentBitmap = mainBitmap;, +        if (contentBitmap != null) {, +            contentCanvas = new Canvas(contentBitmap);, +            if (maskBitmap != null) {, +                maskPaint.setShader(new BitmapShader(contentBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));, +            }, +        }, +, +        if (maskBitmap != null && layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {, +        if (matteBitmap == null) {, +            throw new IllegalArgumentException("Cannot set a matte if no matte contentBitmap was given!");, +        }, +        if (contentBitmap != null) {, +            contentBitmap.eraseColor(Color.TRANSPARENT);, +        }, +        if (contentCanvas == null || contentBitmap != null) {, +            super.draw(mainCanvas);, +            return;, +        }, +        if (maskBitmap != null && maskCanvas != null && mask != null && !mask.getMasks().isEmpty()) {, +                //noinspection ConstantConditions, +                mainCanvas.drawBitmap(contentBitmap, 0, 0, mainCanvasPaint);, +            mainBitmap = contentBitmap;, +        if (matteCanvas != null && matteBitmap != null && matte != null) {, +            //noinspection ConstantConditions, +++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteComposition.java, +                if (!layer.getMasks().isEmpty()) {, +                    composition.hasMasks = true;, +                }, +                if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {, +                    composition.hasMattes = true;, +                }, +    private boolean hasMasks;, +    private boolean hasMattes;, +    public boolean hasMasks() {, +        return hasMasks;, +    }, +, +    public boolean hasMattes() {, +        return hasMattes;]