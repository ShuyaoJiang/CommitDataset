[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +            compositionLoader = null;, +    @Nullable private LottieComposition.Cancellable compositionLoader;, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +    private void cancelLoaderTask() {, +        if (compositionLoader != null) {, +            compositionLoader.cancel();, +            compositionLoader = null;, +        }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +            compositionLoader = null;, +    @Nullable private LottieComposition.Cancellable compositionLoader;, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +    private void cancelLoaderTask() {, +        if (compositionLoader != null) {, +            compositionLoader.cancel();, +            compositionLoader = null;, +        }, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +            listeners.get(i).onValueChanged(getValue());, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +            compositionLoader = null;, +    @Nullable private LottieComposition.Cancellable compositionLoader;, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +    private void cancelLoaderTask() {, +        if (compositionLoader != null) {, +            compositionLoader.cancel();, +            compositionLoader = null;, +        }, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +            listeners.get(i).onValueChanged(getValue());, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            onTrimPathChanged();, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +            compositionLoader = null;, +    @Nullable private LottieComposition.Cancellable compositionLoader;, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromFile(getContext(), animationName, loadedListener);, +        cancelLoaderTask();, +        compositionLoader = LottieComposition.fromJson(getContext(), json, loadedListener);, +    }, +, +    private void cancelLoaderTask() {, +        if (compositionLoader != null) {, +            compositionLoader.cancel();, +            compositionLoader = null;, +        }, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +            listeners.get(i).onValueChanged(getValue());, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            onTrimPathChanged();, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java, +    private final Observable.OnChangedListener trimPathChangedListener = new Observable.OnChangedListener() {, +            onTrimPathChanged();, +    private final Path trimPath = new Path();, +    private final Path scaledPath = new Path();, +    private void onPathChanged() {, +        if (path != null && path.getValue() != null && scale != null) {, +            path.getValue().computeBounds(scaleRect, true);, +            scaleMatrix.setScale(scale.getValue().getScaleX(), scale.getValue().getScaleY(), scaleRect.centerX(), scaleRect.centerY());, +            path.getValue().transform(scaleMatrix, scaledPath);, +        } else {, +            scaledPath.reset();, +            scaledPath.set(path.getValue());, +        }, +        pathMeasure.setPath(scaledPath, false);, +        updateBounds();, +    private void updateBounds() {, +        scaledPath.computeBounds(bounds, true);, +        bounds.left -= paint.getStrokeWidth();, +        bounds.top -= paint.getStrokeWidth();, +        bounds.right += paint.getStrokeWidth();, +        bounds.bottom += paint.getStrokeWidth();, +        setBounds(0, 0, (int) bounds.width(), (int) bounds.height());, +        if (!trimPath.isEmpty()) {, +            canvas.drawPath(trimPath, paint);, +        } else {, +            canvas.drawPath(scaledPath, paint);, +        }, +        updateBounds();, +            this.strokeStart.removeChangeListener(trimPathChangedListener);, +            this.strokeEnd.removeChangeListener(trimPathChangedListener);, +        strokeStart.addChangeListener(trimPathChangedListener);, +        strokeEnd.addChangeListener(trimPathChangedListener);, +        onTrimPathChanged();]