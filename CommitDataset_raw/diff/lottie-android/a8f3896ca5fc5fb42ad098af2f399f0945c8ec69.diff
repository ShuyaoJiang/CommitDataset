[+++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java, +import android.support.v4.util.SparseArrayCompat;, +import java.lang.ref.WeakReference;, +    private static final SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache =, +        new SparseArrayCompat<>();, +, +          int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);, +          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache.get(hash);, +          if (interpolatorRef == null || interpolatorRef.get() == null) {, +            pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));, +          } else {, +            interpolator = pathInterpolatorCache.get(hash).get();, +          }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/Keyframe.java, +import android.support.v4.util.SparseArrayCompat;, +import java.lang.ref.WeakReference;, +    private static final SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache =, +        new SparseArrayCompat<>();, +, +          int hash = Utils.hashFor(cp1.x, cp1.y, cp2.x, cp2.y);, +          WeakReference<Interpolator> interpolatorRef = pathInterpolatorCache.get(hash);, +          if (interpolatorRef == null || interpolatorRef.get() == null) {, +            pathInterpolatorCache.put(hash, new WeakReference<>(interpolator));, +          } else {, +            interpolator = pathInterpolatorCache.get(hash).get();, +          }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/Utils.java, +, +  static int hashFor(float a, float b, float c, float d) {, +    int result = 17;, +    result = (int) (31 * result * a);, +    result = (int) (31 * result * b);, +    result = (int) (31 * result * c);, +    result = (int) (31 * result * d);, +    return result;, +  }]