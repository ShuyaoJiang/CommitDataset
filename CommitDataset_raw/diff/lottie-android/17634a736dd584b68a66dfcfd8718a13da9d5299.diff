[+++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableFloatValue.java, +import android.support.annotation.Nullable;, +, +import com.airbnb.lotte.model.RemapInterface;, +, +    @Nullable private RemapInterface<Float> remapInterface;, +, +, +    public void remapValues(final float fromMin, final float fromMax, final float toMin, final float toMax) {, +        remapInterface = new RemapInterface<Float>() {, +            @Override, +            public Float remap(Float inValue) {, +                if (inValue < fromMin) {, +                    return toMin;, +                } else if (inValue > fromMax) {, +                    return toMax;, +                } else {, +                    return toMin + (inValue / (fromMax - fromMin) * (toMax - toMin));, +                }, +            }, +        };, +        observable.setValue(remapInterface.remap(observable.getValue()));, +    }, +, +    public Float getInitialValue() {, +        if (remapInterface != null) {, +            return remapInterface.remap(initialValue);, +        }, +        return initialValue;, +    }, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableFloatValue.java, +import android.support.annotation.Nullable;, +, +import com.airbnb.lotte.model.RemapInterface;, +, +    @Nullable private RemapInterface<Float> remapInterface;, +, +, +    public void remapValues(final float fromMin, final float fromMax, final float toMin, final float toMax) {, +        remapInterface = new RemapInterface<Float>() {, +            @Override, +            public Float remap(Float inValue) {, +                if (inValue < fromMin) {, +                    return toMin;, +                } else if (inValue > fromMax) {, +                    return toMax;, +                } else {, +                    return toMin + (inValue / (fromMax - fromMin) * (toMax - toMin));, +                }, +            }, +        };, +        observable.setValue(remapInterface.remap(observable.getValue()));, +    }, +, +    public Float getInitialValue() {, +        if (remapInterface != null) {, +            return remapInterface.remap(initialValue);, +        }, +        return initialValue;, +    }, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableIntegerValue.java, +import android.support.annotation.Nullable;, +, +import com.airbnb.lotte.model.RemapInterface;, +, +    @Nullable private RemapInterface<Integer> remapInterface;, +, +, +    public void remapValues(final int fromMin, final int fromMax, final int toMin, final int toMax) {, +        remapInterface = new RemapInterface<Integer>() {, +            @Override, +            public Integer remap(Integer inValue) {, +                Integer remappedValue;, +                if (inValue < fromMin) {, +                    remappedValue = toMin;, +                } else if (inValue > fromMax) {, +                    remappedValue = toMax;, +                } else {, +                    remappedValue = (int) (toMin + (inValue / (float) (fromMax - fromMin) * (toMax - toMin)));, +                }, +                return remappedValue;, +            }, +        };, +        observable.setValue(remapInterface.remap(observable.getValue()));, +    }, +, +    public Integer getInitialValue() {, +        if (remapInterface != null) {, +            return remapInterface.remap(initialValue);, +        }, +        return initialValue;, +    }, +++ b/LotteSample/screenshots/CheckSwitch 15.png, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableFloatValue.java, +import android.support.annotation.Nullable;, +, +import com.airbnb.lotte.model.RemapInterface;]