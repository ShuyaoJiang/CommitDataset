[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId, composition -> {, +    compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName, composition -> {, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId, composition -> {, +    compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName, composition -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +      lazyCompositionTasks.add(c -> playAnimation());, +      lazyCompositionTasks.add(c -> resumeAnimation());, +       lazyCompositionTasks.add(c -> setMinProgress(minProgress));, +      lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));, +      lazyCompositionTasks.add(c -> setMinAndMaxProgress(minProgress, maxProgress));, +      lazyCompositionTasks.add(c -> setFrame(frame));, +      lazyCompositionTasks.add(c -> setProgress(progress));, +      lazyCompositionTasks.add(c -> addValueCallback(keyPath, property, callback));, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId, composition -> {, +    compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName, composition -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +      lazyCompositionTasks.add(c -> playAnimation());, +      lazyCompositionTasks.add(c -> resumeAnimation());, +       lazyCompositionTasks.add(c -> setMinProgress(minProgress));, +      lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));, +      lazyCompositionTasks.add(c -> setMinAndMaxProgress(minProgress, maxProgress));, +      lazyCompositionTasks.add(c -> setFrame(frame));, +      lazyCompositionTasks.add(c -> setProgress(progress));, +      lazyCompositionTasks.add(c -> addValueCallback(keyPath, property, callback));, +++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java, +  private final Comparator<Pair<String, Float>> floatComparator = (o1, o2) -> {, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId, composition -> {, +    compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName, composition -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +      lazyCompositionTasks.add(c -> playAnimation());, +      lazyCompositionTasks.add(c -> resumeAnimation());, +       lazyCompositionTasks.add(c -> setMinProgress(minProgress));, +      lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));, +      lazyCompositionTasks.add(c -> setMinAndMaxProgress(minProgress, maxProgress));, +      lazyCompositionTasks.add(c -> setFrame(frame));, +      lazyCompositionTasks.add(c -> setProgress(progress));, +      lazyCompositionTasks.add(c -> addValueCallback(keyPath, property, callback));, +++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java, +  private final Comparator<Pair<String, Float>> floatComparator = (o1, o2) -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java, +      inOutAnimation.addUpdateListener(() -> setVisible(inOutAnimation.getValue() == 1f));, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +      executor.execute(() -> {, +    view.setImageAssetDelegate(asset -> dummyBitmap);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    compositionLoader = LottieComposition.Factory.fromRawFile(getContext(), animationResId, composition -> {, +    compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName, composition -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +      lazyCompositionTasks.add(c -> playAnimation());, +      lazyCompositionTasks.add(c -> resumeAnimation());, +       lazyCompositionTasks.add(c -> setMinProgress(minProgress));, +      lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));, +      lazyCompositionTasks.add(c -> setMinAndMaxProgress(minProgress, maxProgress));, +      lazyCompositionTasks.add(c -> setFrame(frame));, +      lazyCompositionTasks.add(c -> setProgress(progress));, +      lazyCompositionTasks.add(c -> addValueCallback(keyPath, property, callback));, +++ b/lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java, +  private final Comparator<Pair<String, Float>> floatComparator = (o1, o2) -> {, +++ b/lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java, +      inOutAnimation.addUpdateListener(() -> setVisible(inOutAnimation.getValue() == 1f));, +++ b/lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java, +    testAnimator(inOrder -> {, +    testAnimator(inOrder -> {, +    testAnimator(inOrder -> {, +    testAnimator(inOrder -> {, +    testAnimator(inOrder -> {, +    testAnimator(inOrder -> {]