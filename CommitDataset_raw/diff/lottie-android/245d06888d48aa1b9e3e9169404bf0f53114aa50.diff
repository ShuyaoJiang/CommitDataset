[+++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +        // Trim path individually will be handled by the stroke where paths are combined., +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +        // Trim path individually will be handled by the stroke where paths are combined., +++ b/lottie/src/main/java/com/airbnb/lottie/ShapeTrimPath.java, +, +  enum Type {, +    Simultaneously,, +    Individually;, +, +    static Type forId(int id) {, +      switch (id) {, +        case 1:, +          return Simultaneously;, +        case 2:, +          return Individually;, +        default:, +          throw new IllegalArgumentException("Unknown trim path type " + id);, +      }, +    }, +  }, +, +  private final Type type;, +  private ShapeTrimPath(Type type, AnimatableFloatValue start, AnimatableFloatValue end,, +      AnimatableFloatValue offset) {, +    this.type = type;, +          Type.forId(json.optInt("m", 1)),, +  Type getType() {, +    return type;, +  }, +, +++ b/LottieSample/screenshots/Tests_GradientFill.png, +++ b/LottieSample/screenshots/Tests_TrimPaths.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/PolystarContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/RectangleContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +++ b/lottie/src/main/java/com/airbnb/lottie/ShapeContent.java, +      if (content instanceof TrimPathContent &&, +          ((TrimPathContent) content).getType() == ShapeTrimPath.Type.Simultaneously) {, +        // Trim path individually will be handled by the stroke where paths are combined., +++ b/lottie/src/main/java/com/airbnb/lottie/ShapeTrimPath.java]