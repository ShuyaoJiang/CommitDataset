[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +                    cp1 = keyframe.has("to") ? pointFromValueArray(keyframe.getJSONArray("to")) : null;, +                    cp2 = keyframe.has("ti") ? pointFromValueArray(keyframe.getJSONArray("ti")) : null;, +                    if (cp1 != null && cp2 != null) {, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +                    cp1 = keyframe.has("to") ? pointFromValueArray(keyframe.getJSONArray("to")) : null;, +                    cp2 = keyframe.has("ti") ? pointFromValueArray(keyframe.getJSONArray("ti")) : null;, +                    if (cp1 != null && cp2 != null) {, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +            throw new IllegalArgumentException("Unable to parse shape animation", e);, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +                    cp1 = keyframe.has("to") ? pointFromValueArray(keyframe.getJSONArray("to")) : null;, +                    cp2 = keyframe.has("ti") ? pointFromValueArray(keyframe.getJSONArray("ti")) : null;, +                    if (cp1 != null && cp2 != null) {, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +            throw new IllegalArgumentException("Unable to parse shape animation", e);, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java, +        }, +    };, +, +    private final Observable.OnChangedListener alphaChangedListener = new Observable.OnChangedListener() {, +        @Override, +        public void onChanged() {, +            onAlphaChanged();, +    private Observable<Number> shapeAlpha;, +    private Observable<Number> transformAlpha;, +        if (path != null && path.getValue() != null && scale != null && scale.getValue() != null) {, +    public void setShapeAlpha(Observable<Number> alpha) {, +        if (this.shapeAlpha != null) {, +            this.shapeAlpha.removeChangeListemer(alphaChangedListener);, +        }, +        alpha.addChangeListener(alphaChangedListener);, +        onAlphaChanged();, +    public void setTransformAlpha(Observable<Number> alpha) {, +        if (this.transformAlpha != null) {, +            this.transformAlpha.removeChangeListemer(alphaChangedListener);, +        }, +        alpha.addChangeListener(alphaChangedListener);, +        onAlphaChanged();, +    }, +, +    private void onAlphaChanged() {, +        Float shapeAlpha = this.shapeAlpha == null ? 1f : (Float) this.shapeAlpha.getValue();, +        Float transformAlpha = this.transformAlpha == null ? 1f : (Float) this.transformAlpha.getValue();, +        setAlpha((int) ((shapeAlpha * transformAlpha) * 255));, +        invalidateSelf();, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java, +                    cp1 = keyframe.has("to") ? pointFromValueArray(keyframe.getJSONArray("to")) : null;, +                    cp2 = keyframe.has("ti") ? pointFromValueArray(keyframe.getJSONArray("ti")) : null;, +                    if (cp1 != null && cp2 != null) {, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +                if (keyframe.has("h") && keyframe.getInt("h") == 1) {, +            throw new IllegalArgumentException("Unable to parse shape animation", e);, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java, +        }, +    };, +, +    private final Observable.OnChangedListener alphaChangedListener = new Observable.OnChangedListener() {, +        @Override, +        public void onChanged() {, +            onAlphaChanged();, +    private Observable<Number> shapeAlpha;, +    private Observable<Number> transformAlpha;, +        if (path != null && path.getValue() != null && scale != null && scale.getValue() != null) {, +    public void setShapeAlpha(Observable<Number> alpha) {, +        if (this.shapeAlpha != null) {, +            this.shapeAlpha.removeChangeListemer(alphaChangedListener);, +        }, +        alpha.addChangeListener(alphaChangedListener);, +        onAlphaChanged();, +    public void setTransformAlpha(Observable<Number> alpha) {, +        if (this.transformAlpha != null) {, +            this.transformAlpha.removeChangeListemer(alphaChangedListener);, +        }, +        alpha.addChangeListener(alphaChangedListener);, +        onAlphaChanged();, +    }, +, +    private void onAlphaChanged() {, +        Float shapeAlpha = this.shapeAlpha == null ? 1f : (Float) this.shapeAlpha.getValue();, +        Float transformAlpha = this.transformAlpha == null ? 1f : (Float) this.transformAlpha.getValue();, +        setAlpha((int) ((shapeAlpha * transformAlpha) * 255));, +        invalidateSelf();, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java, +            fillLayer.setShapeAlpha(fill.getOpacity().getObservable());, +            fillLayer.setTransformAlpha(transformModel.getOpacity().getObservable());, +            strokeLayer.setShapeAlpha(stroke.getOpacity().getObservable());, +            strokeLayer.setTransformAlpha(transformModel.getOpacity().getObservable());]