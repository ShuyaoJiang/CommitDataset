[+++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/lotte/build.gradle, +    compile fileTree(include: ['*.jar'], dir: 'libs'), +    testCompile "org.robolectric:robolectric:3.1.2", +++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/lotte/build.gradle, +    compile fileTree(include: ['*.jar'], dir: 'libs'), +    testCompile "org.robolectric:robolectric:3.1.2", +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/lotte/build.gradle, +    compile fileTree(include: ['*.jar'], dir: 'libs'), +    testCompile "org.robolectric:robolectric:3.1.2", +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java, +    private final List<Float> valueKeyframes = new ArrayList<>();, +    private final List<Float> keyTimes = new ArrayList<>();, +++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/lotte/build.gradle, +    compile fileTree(include: ['*.jar'], dir: 'libs'), +    testCompile "org.robolectric:robolectric:3.1.2", +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java, +    private final List<Float> valueKeyframes = new ArrayList<>();, +    private final List<Float> keyTimes = new ArrayList<>();, +++ /dev/null, +++ b/LotteSample/build.gradle, +    compile 'com.android.support:appcompat-v7:24.2.0', +    compile 'com.android.support:recyclerview-v7:24.2.0', +    compile 'com.android.support:design:24.2.0', +++ b/lotte/build.gradle, +    compile fileTree(include: ['*.jar'], dir: 'libs'), +    testCompile "org.robolectric:robolectric:3.1.2", +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +++ b/lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableNumberValue.java, +    private final List<Float> valueKeyframes = new ArrayList<>();, +    private final List<Float> keyTimes = new ArrayList<>();, +++ /dev/null, +++ b/lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java, +package com.airbnb.lotte.utils;, +, +import android.animation.ValueAnimator;, +import android.support.annotation.FloatRange;, +import android.support.annotation.Nullable;, +import android.view.animation.Interpolator;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public class LotteKeyframeAnimation {, +, +    public interface AnimationListener {, +        void onValueChanged(float progress);, +    }, +, +    private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);, +    private final List<AnimationListener> listeners = new ArrayList<>();, +    private final String objectProperty;, +    private final List<Float> values;, +    private final List<Float> keyTimes;, +    private final long duration;, +, +    private long startDelay;, +    @Nullable private List<Interpolator> interpolators;, +, +    private float progress;, +, +    public LotteKeyframeAnimation(String objectProperty, long duration, List<Float> keyTimes, List<Float> values) {, +        if (keyTimes.size() != values.size()) {, +            throw new IllegalArgumentException("Key times and values must be the same length " + keyTimes.size() + " vs " + values.size());, +        }, +, +        this.objectProperty = objectProperty;, +        this.duration = duration;, +        this.keyTimes = keyTimes;, +        this.values = values;, +        animator.setDuration(duration);, +        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {, +            @Override, +            public void onAnimationUpdate(ValueAnimator animation) {]