[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import java.lang.ref.WeakReference;, +import java.util.HashMap;, +import java.util.Map;, +    /**, +     * Caching strategy for compositions that will be reused frequently., +     * Weak or Strong indicates the GC reference strength of the composition in the cache., +     */, +    public enum CacheStrategy {, +        None,, +        Weak,, +        Strong, +    }, +, +    @Nullable private static Map<String, LottieComposition> strongRefCache;, +    @Nullable private static Map<String, WeakReference<LottieComposition>> weakRefCache;, +    public void setAnimation(String animationName) {, +        setAnimation(animationName, CacheStrategy.None);, +    }, +, +    @SuppressWarnings("WeakerAccess"), +    public void setAnimation(final String animationName, final CacheStrategy cacheStrategy) {, +        this.animationName = animationName;, +        if (weakRefCache != null && weakRefCache.containsKey(animationName)) {, +            WeakReference<LottieComposition> compRef = weakRefCache.get(animationName);, +            if (compRef.get() != null) {, +                setComposition(compRef.get());, +                return;, +            }, +        } else if (strongRefCache != null && strongRefCache.containsKey(animationName)) {, +            setComposition(strongRefCache.get(animationName));, +            return;, +        }, +, +        LottieComposition.fromFile(getContext(), animationName, new LottieComposition.OnCompositionLoadedListener() {, +            @Override, +            public void onCompositionLoaded(LottieComposition composition) {, +                if (cacheStrategy == CacheStrategy.Strong) {, +                    if (strongRefCache == null) {, +                        strongRefCache = new HashMap<>();, +                    }, +                    strongRefCache.put(animationName, composition);, +                } else if (cacheStrategy == CacheStrategy.Weak) {, +                    if (weakRefCache == null) {, +                        weakRefCache = new HashMap<>();, +                    }, +                    weakRefCache.put(animationName, new WeakReference<>(composition));, +                }, +, +                setComposition(composition);, +            }, +        });]