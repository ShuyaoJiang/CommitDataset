[+++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    return composition != null ? (long) composition.getDuration() : 0;, +++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    return composition != null ? (long) composition.getDuration() : 0;, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  private final float startFrame;, +  private final float endFrame;, +  @SuppressWarnings("WeakerAccess") public float getDuration() {, +    float frameDuration = endFrame - startFrame;, +  public float getStartFrame() {, +  public float getEndFrame() {, +++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    return composition != null ? (long) composition.getDuration() : 0;, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  private final float startFrame;, +  private final float endFrame;, +  @SuppressWarnings("WeakerAccess") public float getDuration() {, +    float frameDuration = endFrame - startFrame;, +  public float getStartFrame() {, +  public float getEndFrame() {, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +  @Nullable private final LottieComposition composition;, +, +  public Keyframe(@SuppressWarnings("NullableProblems") LottieComposition composition,, +      @Nullable T startValue, @Nullable T endValue,, +  /**, +   * Non-animated value., +   */, +  public Keyframe(@SuppressWarnings("NullableProblems") T value) {, +    composition = null;, +    startValue = value;, +    endValue = value;, +    interpolator = null;, +    startFrame = Float.MIN_VALUE;, +    endFrame = Float.MAX_VALUE;, +  }, +, +    if (composition == null) {, +      return 0f;, +    }, +    if (composition == null) {, +      return 1f;, +    }, +++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    return composition != null ? (long) composition.getDuration() : 0;, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  private final float startFrame;, +  private final float endFrame;, +  @SuppressWarnings("WeakerAccess") public float getDuration() {, +    float frameDuration = endFrame - startFrame;, +  public float getStartFrame() {, +  public float getEndFrame() {, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +  @Nullable private final LottieComposition composition;, +, +  public Keyframe(@SuppressWarnings("NullableProblems") LottieComposition composition,, +      @Nullable T startValue, @Nullable T endValue,, +  /**, +   * Non-animated value., +   */, +  public Keyframe(@SuppressWarnings("NullableProblems") T value) {, +    composition = null;, +    startValue = value;, +    endValue = value;, +    interpolator = null;, +    startFrame = Float.MIN_VALUE;, +    endFrame = Float.MAX_VALUE;, +  }, +, +    if (composition == null) {, +      return 0f;, +    }, +    if (composition == null) {, +      return 1f;, +    }, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java, +import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;, +      if (callback == null) {, +        colorFilterAnimation = null;, +      } else {, +        colorFilterAnimation =, +            new ValueCallbackKeyframeAnimation<>((LottieValueCallback<ColorFilter>) callback);, +++ b/.idea/codeStyleSettings.xml, +          <option name="WRAP_ON_TYPING" value="0" />, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +    return composition != null ? (long) composition.getDuration() : 0;, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  private final float startFrame;, +  private final float endFrame;, +  @SuppressWarnings("WeakerAccess") public float getDuration() {]