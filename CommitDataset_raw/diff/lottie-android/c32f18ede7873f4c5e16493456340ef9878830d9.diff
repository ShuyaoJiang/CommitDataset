[+++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromAsset(context, "Mobilo/BlinkingCursor.json"), +                .addListener {, +                    cursorView.setComposition(it), +            LottieCompositionFactory.fromAsset(context, fileName), +                    .addListener {, +                        compositionMap.put(fileName, it), +                        addComposition(it), +++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromAsset(context, "Mobilo/BlinkingCursor.json"), +                .addListener {, +                    cursorView.setComposition(it), +            LottieCompositionFactory.fromAsset(context, fileName), +                    .addListener {, +                        compositionMap.put(fileName, it), +                        addComposition(it), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesViewModel.kt, +import com.airbnb.lottie.L, +                    Log.d(L.TAG, "e#\t", it);, +++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromAsset(context, "Mobilo/BlinkingCursor.json"), +                .addListener {, +                    cursorView.setComposition(it), +            LottieCompositionFactory.fromAsset(context, fileName), +                    .addListener {, +                        compositionMap.put(fileName, it), +                        addComposition(it), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesViewModel.kt, +import com.airbnb.lottie.L, +                    Log.d(L.TAG, "e#\t", it);, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +import android.util.Log, +            Snackbar.make(coordinatorLayout, R.string.composition_load_error, Snackbar.LENGTH_LONG).show(), +            Log.w(L.TAG, "Error loading composition.", viewModel.error.value);, +++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromAsset(context, "Mobilo/BlinkingCursor.json"), +                .addListener {, +                    cursorView.setComposition(it), +            LottieCompositionFactory.fromAsset(context, fileName), +                    .addListener {, +                        compositionMap.put(fileName, it), +                        addComposition(it), +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottiefilesViewModel.kt, +import com.airbnb.lottie.L, +                    Log.d(L.TAG, "e#\t", it);, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +import android.util.Log, +            Snackbar.make(coordinatorLayout, R.string.composition_load_error, Snackbar.LENGTH_LONG).show(), +            Log.w(L.TAG, "Error loading composition.", viewModel.error.value);, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerViewModel.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromJsonString(jsonString), +                .addListener {, +                    this.composition.value = CompositionData(it), +                .addFailureListener {, +                    this.error.value = it, +                                val result = LottieCompositionFactory.fromJsonInputStreamSync(zis, false), +                                val composition = result.value, +        LottieCompositionFactory.fromJsonInputStream(fis), +                .addListener {, +                    this.composition.value = CompositionData(it), +                .addFailureListener {, +                    this.error.value = it, +        LottieCompositionFactory.fromAsset(getApplication(), asset), +                .addListener {, +                .addFailureListener {, +                    error.value = it, +++ b/CHANGELOG.md, +* Deprecated `LottieComposition.Factory` in favor of LottieCompositionFactory., +    * The new factory methods make it easier to catch exceptions by separating out success and, +    failure handlers. Previously, catching exceptions was impossible and would crash your app., +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieFontViewGroup.kt, +import com.airbnb.lottie.LottieCompositionFactory, +        LottieCompositionFactory.fromAsset(context, "Mobilo/BlinkingCursor.json"), +                .addListener {, +                    cursorView.setComposition(it)]