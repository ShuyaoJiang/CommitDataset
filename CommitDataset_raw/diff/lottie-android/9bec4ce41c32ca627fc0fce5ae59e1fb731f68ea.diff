[+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java, +    return ScaleXY.Factory.newInstance(object, scale);, +    } else {, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java, +    return ScaleXY.Factory.newInstance(object, scale);, +    } else {, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java, +    return ShapeData.Factory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java, +    return ScaleXY.Factory.newInstance(object, scale);, +    } else {, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java, +    return ShapeData.Factory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableSplitDimensionPathValue.java, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java, +    return ScaleXY.Factory.newInstance(object, scale);, +    } else {, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java, +    return ShapeData.Factory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableSplitDimensionPathValue.java, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java, +    private Factory() {, +    }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableColorValue.java, +    return ColorFactory.newInstance(object);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java, +          new AnimatableFloatValue(json.optJSONObject("y"), composition));, +      int length = jsonArray.length();, +      for (int i = 0; i < length; i++) {, +        PathKeyframe keyframe = PathKeyframe.Factory.newInstance(jsonKeyframe, composition, this);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatablePointValue.java, +    return PointFFactory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableScaleValue.java, +    return ScaleXY.Factory.newInstance(object, scale);, +    } else {, +}, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java, +    return ShapeData.Factory.newInstance(object, scale);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableSplitDimensionPathValue.java, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTransform.java, +    private Factory() {]