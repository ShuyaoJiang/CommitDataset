[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +  public void setMinAndMaxFrame(final int minFrame, final int maxFrame) {, +    if (composition == null) {, +      lazyCompositionTasks.add(new LazyCompositionTask() {, +        @Override public void run(LottieComposition composition) {, +          setMinAndMaxFrame(minFrame, maxFrame);, +        }, +      });, +      return;, +    }, +    animator.setMinAndMaxValues(, +        minFrame / composition.getDurationFrames(),, +        maxFrame / composition.getDurationFrames());, +    animator.setMinAndMaxValues(minProgress, maxProgress);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java, +  public void setMinAndMaxFrame(final int minFrame, final int maxFrame) {, +    if (composition == null) {, +      lazyCompositionTasks.add(new LazyCompositionTask() {, +        @Override public void run(LottieComposition composition) {, +          setMinAndMaxFrame(minFrame, maxFrame);, +        }, +      });, +      return;, +    }, +    animator.setMinAndMaxValues(, +        minFrame / composition.getDurationFrames(),, +        maxFrame / composition.getDurationFrames());, +    animator.setMinAndMaxValues(minProgress, maxProgress);, +++ b/lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java, +  public void setMinAndMaxValues(, +      @FloatRange(from = 0f, to = 1f) float minValue,, +      @FloatRange(from = 0f, to = 1f) float maxValue) {, +    this.minValue = minValue;, +    this.maxValue = maxValue;, +    updateValues();, +  }, +]