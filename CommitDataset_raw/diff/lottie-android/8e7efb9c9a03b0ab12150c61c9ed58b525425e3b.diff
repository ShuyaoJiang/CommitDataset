[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(getInitialShape());, +                    LotteShapeData shape = bezierShapeFromValue(endShape, closed);, +                    shapeKeyframes.add(shape);, +                }, +    private Path getInitialShape() {, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(getInitialShape());, +                    LotteShapeData shape = bezierShapeFromValue(endShape, closed);, +                    shapeKeyframes.add(shape);, +                }, +    private Path getInitialShape() {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +                maskCanvas.drawPath(m.getMaskPath().getObservable().getValue(), maskShapePaint);, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(getInitialShape());, +                    LotteShapeData shape = bezierShapeFromValue(endShape, closed);, +                    shapeKeyframes.add(shape);, +                }, +    private Path getInitialShape() {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +                maskCanvas.drawPath(m.getMaskPath().getObservable().getValue(), maskShapePaint);, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java, +            maskLayer.setPath(mask.getMaskPath().getObservable());, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(getInitialShape());, +                    LotteShapeData shape = bezierShapeFromValue(endShape, closed);, +                    shapeKeyframes.add(shape);, +                }, +    private Path getInitialShape() {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +                maskCanvas.drawPath(m.getMaskPath().getObservable().getValue(), maskShapePaint);, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java, +            maskLayer.setPath(mask.getMaskPath().getObservable());, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java, +    private final Observable.OnChangedListener pathChangedListener = new Observable.OnChangedListener() {, +        @Override, +        public void onChanged() {, +            onPathChanged();, +            invalidateSelf();, +        }, +    };, +, +    private Observable<Path> path;, +    public void setPath(Observable<Path> path) {, +        if (this.path != null) {, +            this.path.removeChangeListemer(pathChangedListener);, +        }, +, +        // TODO: When the path changes, we probably have to scale it again., +        path.addChangeListener(pathChangedListener);, +        onPathChanged();, +    }, +, +    private void onPathChanged() {, +        if (path != null && path.getValue() != null) {, +            path.getValue().computeBounds(scaleRect, true);, +            scaleMatrix.setScale(scale.getValue().getScaleX(), scale.getValue().getScaleY(), scaleRect.centerX(), scaleRect.centerY());, +            path.getValue().transform(scaleMatrix, scaledPath);, +        }, +        onPathChanged();, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableProperty.java, +            RECT_POSITION, RECT_CORNER_RADIUS, BACKGROUND_COLOR, HIDDEN, TRIM_PATH_START, TRIM_PATH_END,, +            TRIM_PATH_OFFSET, PATH}), +    public static final int PATH = 16;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(getInitialShape());, +                    LotteShapeData shape = bezierShapeFromValue(endShape, closed);, +                    shapeKeyframes.add(shape);, +                }, +    private Path getInitialShape() {, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java, +                maskCanvas.drawPath(m.getMaskPath().getObservable().getValue(), maskShapePaint);, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteMaskLayer.java, +            maskLayer.setPath(mask.getMaskPath().getObservable());, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java, +    private final Observable.OnChangedListener pathChangedListener = new Observable.OnChangedListener() {, +        @Override, +        public void onChanged() {, +            onPathChanged();]