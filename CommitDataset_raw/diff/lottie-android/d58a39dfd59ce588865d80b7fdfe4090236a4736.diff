[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +      if (marker.matchesName(markerName)) {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +      if (marker.matchesName(markerName)) {, +++ b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java, +  private static String CARRIAGE_RETURN = "\r";, +  private final String name;, +, +  public boolean matchesName(String name) {, +    if (this.name.equalsIgnoreCase(name)) {, +      return true;, +    }, +, +    // It is easy for a designer to accidentally include an extra newline which will cause the name to not match what they would, +    // expect. This is a convenience to precent unneccesary confusion., +    if (this.name.endsWith(CARRIAGE_RETURN) && this.name.substring(0, this.name.length() - 1).equalsIgnoreCase(name)) {, +      return true;, +    }, +    return false;, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +      if (marker.matchesName(markerName)) {, +++ b/lottie/src/main/java/com/airbnb/lottie/model/Marker.java, +  private static String CARRIAGE_RETURN = "\r";, +  private final String name;, +, +  public boolean matchesName(String name) {, +    if (this.name.equalsIgnoreCase(name)) {, +      return true;, +    }, +, +    // It is easy for a designer to accidentally include an extra newline which will cause the name to not match what they would, +    // expect. This is a convenience to precent unneccesary confusion., +    if (this.name.endsWith(CARRIAGE_RETURN) && this.name.substring(0, this.name.length() - 1).equalsIgnoreCase(name)) {, +      return true;, +    }, +    return false;, +  }, +++ b/lottie/src/test/java/com/airbnb/lottie/model/MarkerTest.java, +package com.airbnb.lottie.model;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +public class MarkerTest {, +, +  @Test, +  public void testMarkerWithCarriageReturn() {, +    Marker marker = new Marker("Foo\r", 0f, 0f);, +    assertTrue(marker.matchesName("foo"));, +  }, +}]