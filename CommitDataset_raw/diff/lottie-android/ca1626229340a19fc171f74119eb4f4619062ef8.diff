[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.model.Layer;, +import com.airbnb.lottie.layers.LayerView;, +import com.airbnb.lottie.layers.RootAnimatableLayer;, +import com.airbnb.lottie.model.Composition;, +    private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();, +    private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);, +    @Nullable private Composition composition;, +        new AsyncTask<JSONObject, Void, Composition>() {, +            protected Composition doInBackground(JSONObject... params) {, +                return Composition.fromJson(params[0]);, +            protected void onPostExecute(Composition model) {, +        Composition composition = Composition.fromJson(json);, +    private void setComposition(@NonNull Composition composition) {, +        List<Layer> reversedLayers = composition.getLayers();, +        LayerView maskedLayer = null;, +            Layer layer = reversedLayers.get(i);, +            LayerView layerView;, +                layerView = new LayerView(layer, composition, this, mainBitmap, maskBitmap, matteBitmap);, +                layerView = new LayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, null);, +                if (layer.getMatteType() == Layer.MatteType.Add) {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.model.Layer;, +import com.airbnb.lottie.layers.LayerView;, +import com.airbnb.lottie.layers.RootAnimatableLayer;, +import com.airbnb.lottie.model.Composition;, +    private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();, +    private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);, +    @Nullable private Composition composition;, +        new AsyncTask<JSONObject, Void, Composition>() {, +            protected Composition doInBackground(JSONObject... params) {, +                return Composition.fromJson(params[0]);, +            protected void onPostExecute(Composition model) {, +        Composition composition = Composition.fromJson(json);, +    private void setComposition(@NonNull Composition composition) {, +        List<Layer> reversedLayers = composition.getLayers();, +        LayerView maskedLayer = null;, +            Layer layer = reversedLayers.get(i);, +            LayerView layerView;, +                layerView = new LayerView(layer, composition, this, mainBitmap, maskBitmap, matteBitmap);, +                layerView = new LayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, null);, +                if (layer.getMatteType() == Layer.MatteType.Add) {, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/AnimatableShapeValue.java, +import com.airbnb.lottie.model.CubicCurveData;, +import com.airbnb.lottie.model.ShapeData;, +public class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {, +    protected ShapeData valueFromObject(Object object, float scale) throws JSONException {, +        ShapeData shape = new ShapeData();, +            shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));, +            shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));, +    Path convertType(ShapeData shapeData) {, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.model.Layer;, +import com.airbnb.lottie.layers.LayerView;, +import com.airbnb.lottie.layers.RootAnimatableLayer;, +import com.airbnb.lottie.model.Composition;, +    private final LongSparseArray<LayerView> layerMap = new LongSparseArray<>();, +    private final RootAnimatableLayer rootAnimatableLayer = new RootAnimatableLayer(this);, +    @Nullable private Composition composition;, +        new AsyncTask<JSONObject, Void, Composition>() {, +            protected Composition doInBackground(JSONObject... params) {, +                return Composition.fromJson(params[0]);, +            protected void onPostExecute(Composition model) {, +        Composition composition = Composition.fromJson(json);, +    private void setComposition(@NonNull Composition composition) {, +        List<Layer> reversedLayers = composition.getLayers();, +        LayerView maskedLayer = null;, +            Layer layer = reversedLayers.get(i);, +            LayerView layerView;, +                layerView = new LayerView(layer, composition, this, mainBitmap, maskBitmap, matteBitmap);, +                layerView = new LayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, null);, +                if (layer.getMatteType() == Layer.MatteType.Add) {, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/AnimatableShapeValue.java, +import com.airbnb.lottie.model.CubicCurveData;, +import com.airbnb.lottie.model.ShapeData;, +public class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {, +    protected ShapeData valueFromObject(Object object, float scale) throws JSONException {, +        ShapeData shape = new ShapeData();, +            shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));, +            shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));, +    Path convertType(ShapeData shapeData) {, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java, +package com.airbnb.lottie.layers;, +, +import android.graphics.Canvas;, +import android.graphics.Color;, +import android.graphics.ColorFilter;, +import android.graphics.Paint;, +import android.graphics.PixelFormat;, +import android.graphics.PointF;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.ColorInt;, +import android.support.annotation.FloatRange;, +import android.support.annotation.NonNull;, +, +import com.airbnb.lottie.animation.AnimationGroup;, +import com.airbnb.lottie.utils.LottieTransform3D;, +import com.airbnb.lottie.utils.Observable;, +, +import java.util.ArrayList;]