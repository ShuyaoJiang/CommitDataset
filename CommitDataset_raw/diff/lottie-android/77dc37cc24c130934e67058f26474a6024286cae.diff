[+++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java, +  @Nullable final AnimatableFloatValue tracking;, +      @Nullable AnimatableColorValue stroke, @Nullable AnimatableFloatValue strokeWidth,, +      @Nullable AnimatableFloatValue tracking) {, +    this.tracking = tracking;, +        return new AnimatableTextProperties(null, null, null, null);, +      AnimatableColorValue color = null;, +      if (colorJson != null) {, +        color = AnimatableColorValue.Factory.newInstance(colorJson, composition);, +      }, +      AnimatableColorValue stroke = null;, +      if (strokeJson != null) {, +        stroke = AnimatableColorValue.Factory.newInstance(strokeJson, composition);, +      }, +      AnimatableFloatValue strokeWidth = null;, +      if (strokeWidthJson != null) {, +        strokeWidth = AnimatableFloatValue.Factory.newInstance(strokeWidthJson, composition);, +      }, +, +      JSONObject trackingJson = animatablePropertiesJson.optJSONObject("t");, +      AnimatableFloatValue tracking = null;, +      if (trackingJson != null) {, +        tracking = AnimatableFloatValue.Factory.newInstance(trackingJson, composition);, +      }, +      return new AnimatableTextProperties(color, stroke, strokeWidth, tracking);, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableFloatValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextFrame.java, +      if (json != null && json.has("x")) {, +++ b/lottie/src/main/java/com/airbnb/lottie/AnimatableTextProperties.java, +  @Nullable final AnimatableFloatValue tracking;, +      @Nullable AnimatableColorValue stroke, @Nullable AnimatableFloatValue strokeWidth,, +      @Nullable AnimatableFloatValue tracking) {, +    this.tracking = tracking;, +        return new AnimatableTextProperties(null, null, null, null);, +      AnimatableColorValue color = null;, +      if (colorJson != null) {, +        color = AnimatableColorValue.Factory.newInstance(colorJson, composition);, +      }, +      AnimatableColorValue stroke = null;, +      if (strokeJson != null) {, +        stroke = AnimatableColorValue.Factory.newInstance(strokeJson, composition);, +      }, +      AnimatableFloatValue strokeWidth = null;, +      if (strokeWidthJson != null) {, +        strokeWidth = AnimatableFloatValue.Factory.newInstance(strokeWidthJson, composition);, +      }, +, +      JSONObject trackingJson = animatablePropertiesJson.optJSONObject("t");, +      AnimatableFloatValue tracking = null;, +      if (trackingJson != null) {, +        tracking = AnimatableFloatValue.Factory.newInstance(trackingJson, composition);, +      }, +      return new AnimatableTextProperties(color, stroke, strokeWidth, tracking);, +++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java, +  @Nullable private KeyframeAnimation<Float> trackingAnimation;, +, +    if (textProperties != null && textProperties.tracking != null) {, +      trackingAnimation = textProperties.tracking.createAnimation();, +      trackingAnimation.addUpdateListener(this);, +      addAnimation(trackingAnimation);, +    }, +      // Add tracking, +      float tracking = documentData.tracking / 25f;, +      if (trackingAnimation != null) {, +        tracking += trackingAnimation.getValue() / 2.5f;, +      }, +      tx += tracking * composition.getDpScale();]