[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    testUrl();, +  private void testUrl() {, +    LottieComposition composition = LottieCompositionFactory.fromUrlSync(context, "https://www.lottiefiles.com/download/427").getValue();, +    drawComposition(composition, "GiftBox from LottieFiles URL (427)");, +  }, +, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    testUrl();, +  private void testUrl() {, +    LottieComposition composition = LottieCompositionFactory.fromUrlSync(context, "https://www.lottiefiles.com/download/427").getValue();, +    drawComposition(composition, "GiftBox from LottieFiles URL (427)");, +  }, +, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import com.airbnb.lottie.L, +, +    override fun onCreate() {, +        super.onCreate(), +        L.DBG = true;, +    }, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    testUrl();, +  private void testUrl() {, +    LottieComposition composition = LottieCompositionFactory.fromUrlSync(context, "https://www.lottiefiles.com/download/427").getValue();, +    drawComposition(composition, "GiftBox from LottieFiles URL (427)");, +  }, +, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import com.airbnb.lottie.L, +, +    override fun onCreate() {, +        super.onCreate(), +        L.DBG = true;, +    }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerViewModel.kt, +import com.airbnb.lottie.LottieTask, +, +        val task = when {, +            url != null -> LottieCompositionFactory.fromUrl(getApplication(), url), +            args.fileUri != null -> taskForUri(args.fileUri), +            args.asset != null -> LottieCompositionFactory.fromAsset(getApplication(), args.asset), +            else -> throw IllegalArgumentException("Don't know how to fetch animation for $args"), +        registerTask(task), +    private fun taskForUri(uri: Uri): LottieTask<LottieComposition> {, +                else -> return LottieTask() { throw IllegalArgumentException("Unknown scheme ${uri.scheme}") }, +            return LottieTask() { throw e }, +        return LottieCompositionFactory.fromJsonInputStream(fis, uri.toString()), +    private fun registerTask(task: LottieTask<LottieComposition>) {, +        task, +                .addListener { composition.value = it }, +                .addFailureListener { error.value = it }, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    testUrl();, +  private void testUrl() {, +    LottieComposition composition = LottieCompositionFactory.fromUrlSync(context, "https://www.lottiefiles.com/download/427").getValue();, +    drawComposition(composition, "GiftBox from LottieFiles URL (427)");, +  }, +, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import com.airbnb.lottie.L, +, +    override fun onCreate() {, +        super.onCreate(), +        L.DBG = true;, +    }, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerViewModel.kt, +import com.airbnb.lottie.LottieTask, +, +        val task = when {, +            url != null -> LottieCompositionFactory.fromUrl(getApplication(), url), +            args.fileUri != null -> taskForUri(args.fileUri), +            args.asset != null -> LottieCompositionFactory.fromAsset(getApplication(), args.asset), +            else -> throw IllegalArgumentException("Don't know how to fetch animation for $args"), +        registerTask(task), +    private fun taskForUri(uri: Uri): LottieTask<LottieComposition> {, +                else -> return LottieTask() { throw IllegalArgumentException("Unknown scheme ${uri.scheme}") }, +            return LottieTask() { throw e }, +        return LottieCompositionFactory.fromJsonInputStream(fis, uri.toString()), +    private fun registerTask(task: LottieTask<LottieComposition>) {, +        task, +                .addListener { composition.value = it }, +                .addFailureListener { error.value = it }, +++ b/lottie/src/main/java/com/airbnb/lottie/L.java, +  public static boolean DBG = false;, +  public static void debug(String msg) {, +    if (DBG) Log.d(TAG, msg);, +  }, +, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieSnapshotProvider.java, +    testUrl();, +  private void testUrl() {, +    LottieComposition composition = LottieCompositionFactory.fromUrlSync(context, "https://www.lottiefiles.com/download/427").getValue();, +    drawComposition(composition, "GiftBox from LottieFiles URL (427)");, +  }, +, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/LottieApplication.kt, +import com.airbnb.lottie.L, +, +    override fun onCreate() {]