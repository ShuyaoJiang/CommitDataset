[+++ b/lotte/src/main/java/com/airbnb/lotte/animation/BaseLotteAnimatableValue.java, +    final List<T> keyValues = new ArrayList<>();, +    final List<Interpolator> timingFunctions = new ArrayList<>();, +    long delay;, +    private long startFrame;, +    private long durationFrames;, +    T initialValue;, +    BaseLotteAnimatableValue(JSONObject json, int frameRate, long compDuration) {, +            if (value instanceof JSONArray &&, +                    ((JSONArray) value).get(0) instanceof JSONObject &&, +                    ((JSONArray) value).getJSONObject(0).has("t")) {, +                initialValue = valueFromObject(value);, +            throw new IllegalStateException("Unable to parse json " + json, e);, +            T outValue = null;, +                if (outValue != null) {, +                    keyValues.add(outValue);, +                    outValue = null;, +                T startValue = keyframe.has("s") ? valueFromObject(keyframe.getJSONArray("s")) : null;, +                    if (startValue != null) {, +                            initialValue = startValue;, +                        keyValues.add(startValue);, +                    T endValue = valueFromObject(keyframe.getJSONArray("e"));, +                    keyValues.add(endValue);, +                    outValue = startValue;, +        return !keyValues.isEmpty();, +    protected abstract T valueFromObject(Object array) throws JSONException;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/BaseLotteAnimatableValue.java, +    final List<T> keyValues = new ArrayList<>();, +    final List<Interpolator> timingFunctions = new ArrayList<>();, +    long delay;, +    private long startFrame;, +    private long durationFrames;, +    T initialValue;, +    BaseLotteAnimatableValue(JSONObject json, int frameRate, long compDuration) {, +            if (value instanceof JSONArray &&, +                    ((JSONArray) value).get(0) instanceof JSONObject &&, +                    ((JSONArray) value).getJSONObject(0).has("t")) {, +                initialValue = valueFromObject(value);, +            throw new IllegalStateException("Unable to parse json " + json, e);, +            T outValue = null;, +                if (outValue != null) {, +                    keyValues.add(outValue);, +                    outValue = null;, +                T startValue = keyframe.has("s") ? valueFromObject(keyframe.getJSONArray("s")) : null;, +                    if (startValue != null) {, +                            initialValue = startValue;, +                        keyValues.add(startValue);, +                    T endValue = valueFromObject(keyframe.getJSONArray("e"));, +                    keyValues.add(endValue);, +                    outValue = startValue;, +        return !keyValues.isEmpty();, +    protected abstract T valueFromObject(Object array) throws JSONException;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +    protected Integer valueFromObject(Object object) throws JSONException {, +        JSONArray colorArray = (JSONArray) object;, +        LotteKeyframeAnimation animation = new LotteColorKeyframeAnimation(property, duration, compDuration, keyTimes, keyValues);, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/BaseLotteAnimatableValue.java, +    final List<T> keyValues = new ArrayList<>();, +    final List<Interpolator> timingFunctions = new ArrayList<>();, +    long delay;, +    private long startFrame;, +    private long durationFrames;, +    T initialValue;, +    BaseLotteAnimatableValue(JSONObject json, int frameRate, long compDuration) {, +            if (value instanceof JSONArray &&, +                    ((JSONArray) value).get(0) instanceof JSONObject &&, +                    ((JSONArray) value).getJSONObject(0).has("t")) {, +                initialValue = valueFromObject(value);, +            throw new IllegalStateException("Unable to parse json " + json, e);, +            T outValue = null;, +                if (outValue != null) {, +                    keyValues.add(outValue);, +                    outValue = null;, +                T startValue = keyframe.has("s") ? valueFromObject(keyframe.getJSONArray("s")) : null;, +                    if (startValue != null) {, +                            initialValue = startValue;, +                        keyValues.add(startValue);, +                    T endValue = valueFromObject(keyframe.getJSONArray("e"));, +                    keyValues.add(endValue);, +                    outValue = startValue;, +        return !keyValues.isEmpty();, +    protected abstract T valueFromObject(Object array) throws JSONException;, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java, +    protected Integer valueFromObject(Object object) throws JSONException {, +        JSONArray colorArray = (JSONArray) object;, +        LotteKeyframeAnimation animation = new LotteColorKeyframeAnimation(property, duration, compDuration, keyTimes, keyValues);, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableFloatValue.java, +package com.airbnb.lotte.animation;, +, +import com.airbnb.lotte.utils.LotteKeyframeAnimation;, +import com.airbnb.lotte.utils.LotteNumberKeyframeAnimation;, +, +import org.json.JSONArray;, +import org.json.JSONException;, +import org.json.JSONObject;, +, +public class LotteAnimatableFloatValue extends BaseLotteAnimatableValue<Float> {, +    public LotteAnimatableFloatValue(JSONObject json, int frameRate, long compDuration) {, +        super(json, frameRate, compDuration);, +    }]