[+++ b/.travis.yml, +- ./decrypt.sh, +++ b/.travis.yml, +- ./decrypt.sh, +++ b/LottieSample/build.gradle, +  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion", +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0', +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1', +  implementation 'com.amazonaws:aws-android-sdk-s3:2.7.+', +  implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') { transitive = true }, +  implementation ('com.amazonaws:aws-android-sdk-auth-userpools:2.7.+@aar') { transitive = true }, +++ b/.travis.yml, +- ./decrypt.sh, +++ b/LottieSample/build.gradle, +  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion", +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0', +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1', +  implementation 'com.amazonaws:aws-android-sdk-s3:2.7.+', +  implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') { transitive = true }, +  implementation ('com.amazonaws:aws-android-sdk-auth-userpools:2.7.+@aar') { transitive = true }, +++ /dev/null, +++ b/.travis.yml, +- ./decrypt.sh, +++ b/LottieSample/build.gradle, +  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion", +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0', +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1', +  implementation 'com.amazonaws:aws-android-sdk-s3:2.7.+', +  implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') { transitive = true }, +  implementation ('com.amazonaws:aws-android-sdk-auth-userpools:2.7.+@aar') { transitive = true }, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +- ./decrypt.sh, +++ b/LottieSample/build.gradle, +  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion", +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0', +  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1', +  implementation 'com.amazonaws:aws-android-sdk-s3:2.7.+', +  implementation ('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') { transitive = true }, +  implementation ('com.amazonaws:aws-android-sdk-auth-userpools:2.7.+@aar') { transitive = true }, +++ /dev/null, +++ /dev/null, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/HappoSnapshotter.kt, +package com.airbnb.lottie, +, +import android.content.Context, +import android.graphics.Bitmap, +import android.os.Build, +import android.util.Log, +import com.amazonaws.auth.BasicAWSCredentials, +import com.amazonaws.mobileconnectors.s3.transferutility.*, +import com.amazonaws.services.s3.AmazonS3Client, +import com.amazonaws.services.s3.model.CannedAccessControlList, +import com.google.gson.JsonArray, +import com.google.gson.JsonElement, +import com.google.gson.JsonObject, +import kotlinx.coroutines.*, +import okhttp3.*, +import java.io.ByteArrayOutputStream, +import java.io.File, +import java.io.FileOutputStream, +import java.io.IOException, +import java.lang.Exception, +import java.lang.IllegalStateException, +import java.math.BigInteger, +import java.net.URLEncoder, +import java.nio.charset.Charset, +import java.security.MessageDigest, +import kotlin.coroutines.CoroutineContext, +import kotlin.coroutines.resume, +import kotlin.coroutines.resumeWithException, +import kotlin.coroutines.suspendCoroutine, +import com.airbnb.lottie.samples.BuildConfig as BC, +, +private const val TAG = "HappotSnapshotter", +, +/**, + * Use this class to record Bitmap snapshots and upload them to happo., + *, + * To use it:, + *    1) Call record with each bitmap you want to save, + *    2) Call finalizeAndUpload, + */, +class HappoSnapshotter(, +        private val context: Context, +) : CoroutineScope {, +    private val job = Job(), +    override val coroutineContext: CoroutineContext, +        get() = Dispatchers.Main + job, +, +    private val bucket = "lottie-happo", +    private val happoApiKey = BC.HappoApiKey, +    private val happoSecretKey = BC.HappoSecretKey, +    private val gitBranch = URLEncoder.encode((if (BC.TRAVIS_GIT_BRANCH == "null") BC.GIT_BRANCH else BC.TRAVIS_GIT_BRANCH).replace("/", "_"), "UTF-8"), +    private val androidVersion = "android${Build.VERSION.SDK_INT}", +    private val reportNames = listOfNotNull(, +            "${BC.GIT_SHA}-$androidVersion",, +            "$gitBranch-$androidVersion",, +            "${BuildConfig.VERSION_NAME}-$androidVersion"]