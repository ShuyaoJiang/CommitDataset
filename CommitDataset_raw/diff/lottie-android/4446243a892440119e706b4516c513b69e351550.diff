[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.layers.LottieDrawable;, +    private final LottieDrawable lottieDrawable = new LottieDrawable(this);, +            lottieDrawable.playAnimation();, +        lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));, +        ss.progress = lottieDrawable.getProgress();, +        ss.isAnimating = lottieDrawable.isAnimating();, +        ss.isLooping = lottieDrawable.isLooping();, +        if (!hasInvalidatedThisFrame && lottieDrawable != null) {, +            super.invalidateDrawable(lottieDrawable);, +        lottieDrawable.recycleBitmaps();, +        lottieDrawable.setComposition(composition);, +        setImageDrawable(lottieDrawable);, +        lottieDrawable.addAnimatorUpdateListener(updateListener);, +        lottieDrawable.removeAnimatorUpdateListener(updateListener);, +        lottieDrawable.addAnimatorListener(listener);, +        lottieDrawable.removeAnimatorListener(listener);, +        lottieDrawable.loop(loop);, +        return lottieDrawable.isAnimating();, +        lottieDrawable.playAnimation();, +        lottieDrawable.cancelAnimation();, +        lottieDrawable.setProgress(progress);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.layers.LottieDrawable;, +    private final LottieDrawable lottieDrawable = new LottieDrawable(this);, +            lottieDrawable.playAnimation();, +        lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));, +        ss.progress = lottieDrawable.getProgress();, +        ss.isAnimating = lottieDrawable.isAnimating();, +        ss.isLooping = lottieDrawable.isLooping();, +        if (!hasInvalidatedThisFrame && lottieDrawable != null) {, +            super.invalidateDrawable(lottieDrawable);, +        lottieDrawable.recycleBitmaps();, +        lottieDrawable.setComposition(composition);, +        setImageDrawable(lottieDrawable);, +        lottieDrawable.addAnimatorUpdateListener(updateListener);, +        lottieDrawable.removeAnimatorUpdateListener(updateListener);, +        lottieDrawable.addAnimatorListener(listener);, +        lottieDrawable.removeAnimatorListener(listener);, +        lottieDrawable.loop(loop);, +        return lottieDrawable.isAnimating();, +        lottieDrawable.playAnimation();, +        lottieDrawable.cancelAnimation();, +        lottieDrawable.setProgress(progress);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java, +package com.airbnb.lottie.layers;, +, +import android.animation.Animator;, +import android.animation.ValueAnimator;, +import android.graphics.Bitmap;, +import android.graphics.Canvas;, +import android.graphics.Rect;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +import android.support.annotation.VisibleForTesting;, +import android.util.LongSparseArray;, +import android.view.animation.LinearInterpolator;, +, +import com.airbnb.lottie.model.Layer;, +import com.airbnb.lottie.model.LottieComposition;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public class LottieDrawable extends AnimatableLayer {, +, +    private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);, +, +    @Nullable private Bitmap mainBitmap = null;, +    @Nullable private Bitmap maskBitmap = null;, +    @Nullable private Bitmap matteBitmap = null;, +    @Nullable private Bitmap mainBitmapForMatte = null;, +    @Nullable private Bitmap maskBitmapForMatte = null;, +    private boolean playAnimationWhenLayerAdded;, +, +    public LottieDrawable(Drawable.Callback callback) {, +        super(0, callback);, +        animator.setRepeatCount(0);, +        animator.setInterpolator(new LinearInterpolator());, +        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {, +            @Override, +            public void onAnimationUpdate(ValueAnimator animation) {, +                setProgress(animation.getAnimatedFraction());, +            }, +        });, +    }, +, +    private void clearComposition() {, +        recycleBitmaps();, +        clearLayers();, +    }, +, +    public void setComposition(@NonNull LottieComposition composition) {, +        clearComposition();, +        setCompDuration(composition.getDuration());, +        setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());, +        buildLayersForComposition(composition);, +    }, +]