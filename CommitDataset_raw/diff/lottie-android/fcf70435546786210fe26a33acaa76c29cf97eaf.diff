[+++ b/LotteSample/src/main/res/layout/fragment_animation.xml, +        android:layout_width="wrap_content", +        android:layout_height="wrap_content", +++ b/LotteSample/src/main/res/layout/fragment_animation.xml, +        android:layout_width="wrap_content", +        android:layout_height="wrap_content", +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +++ b/LotteSample/src/main/res/layout/fragment_animation.xml, +        android:layout_width="wrap_content", +        android:layout_height="wrap_content", +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(new Path());, +            MiscUtils.getPathFromData(initialShape, observable.getValue());, +++ b/LotteSample/src/main/res/layout/fragment_animation.xml, +        android:layout_width="wrap_content", +        android:layout_height="wrap_content", +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +        observable.setValue(remapInterface.remap((float) observable.getValue()));, +++ b/lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java, +            observable.setValue(new Path());, +            MiscUtils.getPathFromData(initialShape, observable.getValue());, +++ b/lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java, +import static android.R.attr.width;, +, +            fillLayer.setColor(fill.getColor().getObservable());, +                    circleShape.getPosition().getObservable(),, +                    circleShape.getSize().getObservable());, +            strokeLayer.setColor(stroke.getColor().getObservable());, +            strokeLayer.setLineWidth(stroke.getWidth().getObservable());, +                    circleShape.getPosition().getObservable(),, +                    circleShape.getSize().getObservable());, +        private final Observable.OnChangedListener lineWidthChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onLineWidthChanged();, +            }, +        };, +, +        private final Observable.OnChangedListener colorChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onColorChanged();, +            }, +        };, +, +        private final Observable.OnChangedListener circleSizeChangedListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                onCircleSizeChanged();, +            }, +        };, +, +        private final Observable.OnChangedListener circlePositionListener = new Observable.OnChangedListener() {, +            @Override, +            public void onChanged() {, +                invalidateSelf();, +            }, +        };, +, +        private Observable<PointF> circleSize;, +        private Observable<PointF> circlePosition;, +        @Nullable private Observable<Number> lineWidth;, +        @Nullable private Observable<Integer> color;, +        public void updateCircle(Observable<PointF> circlePosition, Observable<PointF> circleSize) {, +            if (this.circleSize != null) {, +                this.circleSize.removeChangeListemer(circleSizeChangedListener);, +            }, +            if (this.circlePosition != null), +                this.circlePosition.removeChangeListemer(circlePositionListener);, +            circleSize.addChangeListener(circleSizeChangedListener);, +            circlePosition.addChangeListener(circlePositionListener);, +            onCircleSizeChanged();, +        }, +, +        private void onCircleSizeChanged() {, +            float halfWidth = circleSize.getValue().x / 2f;, +            float halfHeight = circleSize.getValue().y / 2f;, +        public void setLineWidth(Observable<Number> lineWidth) {, +            if (this.lineWidth != null) {, +                this.lineWidth.removeChangeListemer(lineWidthChangedListener);, +            }, +            this.lineWidth = lineWidth;, +            lineWidth.addChangeListener(lineWidthChangedListener);, +            onLineWidthChanged();, +        }, +, +        private void onLineWidthChanged() {, +        void setColor(Observable<Integer> color) {, +            if (this.color != null) {, +                this.color.removeChangeListemer(colorChangedListener);, +            }, +            this.color = color;, +            color.addChangeListener(colorChangedListener);, +            onColorChanged();]