[+++ b/LottieSample/libs/happo.aar, +++ b/LottieSample/libs/happo.aar, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +import android.util.JsonReader;, +import java.io.StringReader;, +  private Rect bounds;, +  private float startFrame;, +  private float endFrame;, +  private float frameRate;, +  private int majorVersion;, +  private int minorVersion;, +  private int patchVersion;, +  @SuppressWarnings("WeakerAccess") public void setPerformanceTrackingEnabled(boolean enabled) {, +    @SuppressWarnings("WeakerAccess") public static Cancellable fromRawFile(, +        Context context, @RawRes int resId, OnCompositionLoadedListener loadedListener) {, +      JsonCompositionLoader loader = new JsonCompositionLoader(loadedListener);, +        return fromJsonSync(new JsonReader(new InputStreamReader(stream)));, +    /**, +     * Use {@link #fromJsonSync(JsonReader)}, +     */, +    @Deprecated, +      try {, +        return fromJsonSync(res, new JsonReader(new StringReader(json.toString())));, +      } catch (IOException e) {, +        throw new IllegalArgumentException("Unable to parse json", e);, +      }, +    /**, +     * Use {@link #fromJsonSync(JsonReader)}, +     */, +    @Deprecated, +    public static LottieComposition fromJsonSync(, +        @SuppressWarnings("unused") Resources res, JsonReader reader) throws IOException {, +      return fromJsonSync(reader);, +    }, +, +    public static LottieComposition fromJsonSync(JsonReader reader) throws IOException {, +      float scale = Utils.dpScale();, +      int width = -1;, +      LottieComposition composition = new LottieComposition();, +, +      reader.beginObject();, +      while (reader.hasNext()) {, +        switch (reader.nextName()) {, +          case "w":, +            width = reader.nextInt();, +            break;, +          case "h":, +            int height = reader.nextInt();, +            int scaledWidth = (int) (width * scale);, +            int scaledHeight = (int) (height * scale);, +            composition.bounds = new Rect(0, 0, scaledWidth, scaledHeight);, +            break;, +          case "ip":, +            composition.startFrame = (float) reader.nextDouble();, +            break;, +          case "op":, +            composition.endFrame = (float) reader.nextDouble();, +            break;, +          case "fr":, +            composition.frameRate = (float) reader.nextDouble();, +            break;, +          case "v":, +            String version = reader.nextString();, +            composition.majorVersion = Integer.parseInt(versions[0]);, +            composition.minorVersion = Integer.parseInt(versions[1]);, +            composition.patchVersion = Integer.parseInt(versions[2]);, +            if (!Utils.isAtLeastVersion(composition, 4, 5, 0)) {, +              composition.addWarning("Lottie only supports bodymovin >= 4.5.0");, +            }, +            break;, +          case "layers":, +            parseLayers(reader, composition);, +            break;, +          case "assets":, +            parseAssets(reader, composition);, +            break;, +          case "fonts":, +            parseFonts(reader, composition);, +            break;, +          case "chars":, +            parseChars(reader, composition);, +            break;, +          default:, +            reader.skipValue();, +        }, +      }, +      reader.endObject();, +    private static void parseLayers(JsonReader reader, LottieComposition composition), +        throws IOException {, +      reader.beginArray();, +      while (reader.hasNext()) {, +        Layer layer = Layer.Factory.newInstance(reader, composition);, +          composition.warnings.add("You have " + imageCount + " images. Lottie should primarily be " +, +      reader.endArray();, +    }, +    private static void parseAssets(, +        JsonReader reader, LottieComposition composition) throws IOException {, +      reader.beginArray();, +      while (reader.hasNext()) {, +        String id = null;]