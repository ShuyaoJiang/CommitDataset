[+++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java, + * If you run that command, it completes successfully, and nothing shows up in git, then you haven't broken anything!, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java, + * If you run that command, it completes successfully, and nothing shows up in git, then you haven't broken anything!, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +import com.airbnb.lottie.model.LottieComposition;, +        view.setComposition(LottieComposition.fromFileSync(activity, fileName));, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java, + * If you run that command, it completes successfully, and nothing shows up in git, then you haven't broken anything!, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +import com.airbnb.lottie.model.LottieComposition;, +        view.setComposition(LottieComposition.fromFileSync(activity, fileName));, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.model.Layer;, + * 2) Programatically: {@link #setAnimation(String)} or {@link #setComposition(LottieComposition)} (JSONObject)}., +, +    private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {, +        @Override, +        public void onCompositionLoaded(LottieComposition composition) {, +            setComposition(composition);, +        }, +    };, +, +        LottieComposition.fromFile(getContext(), animationName, loadedListener);, +    public void setComposition(@NonNull LottieComposition composition) {, +    @SuppressWarnings("unused"), +    @SuppressWarnings("unused"), +    private static class SavedState extends BaseSavedState {, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/LottieTest.java, + * If you run that command, it completes successfully, and nothing shows up in git, then you haven't broken anything!, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java, +import com.airbnb.lottie.model.LottieComposition;, +        view.setComposition(LottieComposition.fromFileSync(activity, fileName));, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import com.airbnb.lottie.model.Layer;, + * 2) Programatically: {@link #setAnimation(String)} or {@link #setComposition(LottieComposition)} (JSONObject)}., +, +    private final LottieComposition.OnCompositionLoadedListener loadedListener = new LottieComposition.OnCompositionLoadedListener() {, +        @Override, +        public void onCompositionLoaded(LottieComposition composition) {, +            setComposition(composition);, +        }, +    };, +, +        LottieComposition.fromFile(getContext(), animationName, loadedListener);, +    public void setComposition(@NonNull LottieComposition composition) {, +    @SuppressWarnings("unused"), +    @SuppressWarnings("unused"), +    private static class SavedState extends BaseSavedState {, +++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java, +import android.content.Context;, +import android.os.AsyncTask;, +import java.io.IOException;, +import java.io.InputStream;, +import java.lang.ref.WeakReference;, +, +    public interface OnCompositionLoadedListener {, +        void onCompositionLoaded(LottieComposition composition);, +    }, +, +    public static void fromFile(Context context, String fileName, OnCompositionLoadedListener loadedListener) {, +        InputStream file;, +        try {, +            file = context.getAssets().open(fileName);, +        } catch (IOException e) {, +            throw new IllegalStateException("Unable to find file " + fileName, e);, +        }, +        new CompositionLoader(loadedListener).execute(file);, +    }, +, +    public static LottieComposition fromFileSync(Context context, String fileName) {, +        InputStream file;, +        try {, +            file = context.getAssets().open(fileName);, +        } catch (IOException e) {, +            throw new IllegalStateException("Unable to find file " + fileName, e);, +        }, +        return fromInputStream(file);, +    }, +, +    private static LottieComposition fromInputStream(InputStream file) {, +        try {, +            int size = file.available();, +            byte[] buffer = new byte[size];, +            //noinspection ResultOfMethodCallIgnored, +            file.read(buffer);, +            file.close();, +            String json = new String(buffer, "UTF-8");, +, +            JSONObject jsonObject = new JSONObject(json);, +            return LottieComposition.fromJsonSync(jsonObject);, +        } catch (IOException e) {, +            throw new IllegalStateException("Unable to find file.", e);, +        } catch (JSONException e) {, +            throw new IllegalStateException("Unable to load JSON.", e);, +        }, +    }, +, +    private static LottieComposition fromJsonSync(JSONObject json) {, +    long getEndFrame() {]