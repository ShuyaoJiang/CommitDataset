[+++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +        RectContentFillAndStroke shapeLayer = new RectContentFillAndStroke(, +++ b/lottie/src/main/java/com/airbnb/lottie/ContentGroup.java, +        RectContentFillAndStroke shapeLayer = new RectContentFillAndStroke(, +++ b/lottie/src/main/java/com/airbnb/lottie/RectContentFillAndStroke.java, +package com.airbnb.lottie;, +, +import android.graphics.Canvas;, +import android.graphics.Path;, +import android.graphics.PointF;, +import android.graphics.RectF;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +, +import java.util.ArrayList;, +import java.util.List;, +, +class RectContentFillAndStroke extends AnimatableLayer {, +  @Nullable private RectContent fillLayer;, +  @Nullable private RectContent strokeLayer;, +, +  RectContentFillAndStroke(RectangleShape rectShape, @Nullable ShapeFill fill,, +      @Nullable ShapeStroke stroke, @Nullable ShapeTrimPath trim, AnimatableTransform transform,, +      LottieDrawable lottieDrawable) {, +    super(lottieDrawable);, +, +    setTransform(transform.createAnimation());, +, +    if (fill != null) {, +      fillLayer = new RectContent(lottieDrawable);, +      //noinspection ConstantConditions, +      fillLayer.setColor(fill.getColor().createAnimation());, +      //noinspection ConstantConditions, +      fillLayer.setShapeOpacity(fill.getOpacity().createAnimation());, +      fillLayer.setTransformOpacity(transform.getOpacity().createAnimation());, +      fillLayer.setRectCornerRadius(rectShape.getCornerRadius().createAnimation());, +      fillLayer.setRectSize(rectShape.getSize().createAnimation());, +      fillLayer.setRectPosition(rectShape.getPosition().createAnimation());, +      if (trim != null) {, +        fillLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),, +            trim.getOffset().createAnimation());, +      }, +      addLayer(fillLayer);, +    }, +, +    if (stroke != null) {, +      strokeLayer = new RectContent(lottieDrawable);, +      strokeLayer.setIsStroke();, +      strokeLayer.setColor(stroke.getColor().createAnimation());, +      strokeLayer.setShapeOpacity(stroke.getOpacity().createAnimation());, +      strokeLayer.setTransformOpacity(transform.getOpacity().createAnimation());, +      strokeLayer.setLineWidth(stroke.getWidth().createAnimation());, +      if (!stroke.getLineDashPattern().isEmpty()) {, +        List<BaseKeyframeAnimation<?, Float>> dashPatternAnimations = new ArrayList<>(stroke, +            .getLineDashPattern().size());, +        for (AnimatableFloatValue dashPattern : stroke.getLineDashPattern()) {, +          dashPatternAnimations.add(dashPattern.createAnimation());, +        }, +        strokeLayer.setDashPattern(dashPatternAnimations, stroke.getDashOffset().createAnimation());, +      }, +      strokeLayer.setLineCapType(stroke.getCapType());, +      strokeLayer.setRectCornerRadius(rectShape.getCornerRadius().createAnimation());, +      strokeLayer.setRectSize(rectShape.getSize().createAnimation());, +      strokeLayer.setRectPosition(rectShape.getPosition().createAnimation());, +      strokeLayer.setLineJoinType(stroke.getJoinType());, +      if (trim != null) {, +        strokeLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),, +            trim.getOffset().createAnimation());, +      }, +      addLayer(strokeLayer);, +    }, +  }, +, +  public void setAlpha(int alpha) {, +    if (fillLayer != null) {, +      fillLayer.setAlpha(alpha);, +    }, +    if (strokeLayer != null) {, +      strokeLayer.setAlpha(alpha);, +    }, +  }, +, +  private static class RectContent extends ShapeContent {, +, +    private final KeyframeAnimation.AnimationListener<PointF> sizeChangedListener =, +        new KeyframeAnimation.AnimationListener<PointF>() {, +          @Override, +          public void onValueChanged(PointF value) {, +            onRectChanged();, +          }, +        };, +, +    private final KeyframeAnimation.AnimationListener<Float> cornerRadiusChangedListener =, +        new KeyframeAnimation.AnimationListener<Float>() {, +          @Override, +          public void onValueChanged(Float value) {, +            onRectChanged();, +          }, +        };, +]