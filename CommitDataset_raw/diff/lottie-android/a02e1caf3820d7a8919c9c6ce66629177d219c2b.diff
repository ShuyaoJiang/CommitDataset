[+++ b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java, +  float getProgress() {, +    return progress;, +  }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java, +  float getProgress() {, +    return progress;, +  }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java, +import android.support.v4.util.LongSparseArray;, +  /**, +   * Gradient values will be slightly rounded and cached for performance. There will be N, +   * number of items cached., +   */, +  private static final int CACHE_STEPS = 100;, +  private final LongSparseArray<LinearGradient> gradientCache = new LongSparseArray<>();, +    paint.setShader(getGradient());, +  private LinearGradient getGradient() {, +    int gradientHash = getGradientHash();, +    LinearGradient gradient = gradientCache.get(gradientHash);, +    if (gradient != null) {, +      return gradient;, +    }, +    gradient = new LinearGradient(x0, y0, x1, y1, colors, positions, Shader.TileMode.CLAMP);, +    gradientCache.put(gradientHash, gradient);, +    return gradient;, +  }, +, +  private int getGradientHash() {, +    int startPointProgress = Math.round(startPointAnimation.getProgress() * CACHE_STEPS);, +    int endPointProgress = Math.round(endPointAnimation.getProgress() * CACHE_STEPS);, +    int colorProgress = Math.round(colorAnimation.getProgress() * CACHE_STEPS);, +    int hash = 17;, +    hash = hash * 31 * startPointProgress;, +    hash = hash * 31 * endPointProgress;, +    hash = hash * 31 * colorProgress;, +    return hash;]