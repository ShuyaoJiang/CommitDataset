[+++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java, +      for (KeyframeAnimation<Integer> animation : mask.getOpacityAnimations()) {, +        addAnimation(animation);, +        animation.addUpdateListener(this);, +      }, +  @SuppressLint("WrongConstant") private void applyMasks(Canvas canvas, Matrix matrix) {, +      KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);, +      contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));, +++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java, +      for (KeyframeAnimation<Integer> animation : mask.getOpacityAnimations()) {, +        addAnimation(animation);, +        animation.addUpdateListener(this);, +      }, +  @SuppressLint("WrongConstant") private void applyMasks(Canvas canvas, Matrix matrix) {, +      KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);, +      contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));, +++ b/lottie/src/main/java/com/airbnb/lottie/Mask.java, +  private final AnimatableIntegerValue opacity;, +  private Mask(MaskMode maskMode, AnimatableShapeValue maskPath, AnimatableIntegerValue opacity) {, +    this.opacity = opacity;, +      JSONObject opacityJson = json.optJSONObject("o");, +      AnimatableIntegerValue opacity =, +          AnimatableIntegerValue.Factory.newInstance(opacityJson, composition);, +      return new Mask(maskMode, maskPath, opacity);, +, +  AnimatableIntegerValue getOpacity() {, +    return opacity;, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/BaseLayer.java, +      for (KeyframeAnimation<Integer> animation : mask.getOpacityAnimations()) {, +        addAnimation(animation);, +        animation.addUpdateListener(this);, +      }, +  @SuppressLint("WrongConstant") private void applyMasks(Canvas canvas, Matrix matrix) {, +      KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);, +      contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));, +++ b/lottie/src/main/java/com/airbnb/lottie/Mask.java, +  private final AnimatableIntegerValue opacity;, +  private Mask(MaskMode maskMode, AnimatableShapeValue maskPath, AnimatableIntegerValue opacity) {, +    this.opacity = opacity;, +      JSONObject opacityJson = json.optJSONObject("o");, +      AnimatableIntegerValue opacity =, +          AnimatableIntegerValue.Factory.newInstance(opacityJson, composition);, +      return new Mask(maskMode, maskPath, opacity);, +, +  AnimatableIntegerValue getOpacity() {, +    return opacity;, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/MaskKeyframeAnimation.java, +  private final List<KeyframeAnimation<Integer>> opacityAnimations;, +    this.opacityAnimations = new ArrayList<>(masks.size());, +      AnimatableIntegerValue opacity = masks.get(i).getOpacity();, +      opacityAnimations.add(opacity.createAnimation());, +, +  List<KeyframeAnimation<Integer>> getOpacityAnimations() {, +    return opacityAnimations;, +  }]