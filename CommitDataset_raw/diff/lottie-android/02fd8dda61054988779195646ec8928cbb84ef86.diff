[+++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 100.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 100.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 20.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 100.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 20.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 5.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 100.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 20.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 5.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 50.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 0.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 10.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 100.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 20.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 5.png, +++ b/LottieSample/screenshots/Tests_SplitDimensions 50.png, +++ b/lottie/src/main/java/com/airbnb/lottie/EllipseLayer.java, +package com.airbnb.lottie;, +, +import android.graphics.Path;, +import android.graphics.PointF;, +import android.graphics.drawable.Drawable;, +, +import java.util.ArrayList;, +import java.util.List;, +, +class EllipseLayer extends AnimatableLayer {, +  EllipseLayer(CircleShape circleShape, ShapeFill fill, ShapeStroke stroke,, +      ShapeTrimPath trim, Transform transform, Drawable.Callback callback) {, +    super(callback);, +, +    setBounds(transform.getBounds());, +    setAnchorPoint(transform.getAnchor().createAnimation());, +    setAlpha(transform.getOpacity().createAnimation());, +    setPosition(transform.getPosition().createAnimation());, +    setTransform(transform.getScale().createAnimation());, +    setRotation(transform.getRotation().createAnimation());, +, +    if (fill != null) {, +      EllipseShapeLayer fillLayer = new EllipseShapeLayer(getCallback());, +      fillLayer.setColor(fill.getColor().createAnimation());, +      fillLayer.setAlpha(fill.getOpacity().createAnimation());, +      fillLayer.updateCircle(, +          circleShape.getPosition().createAnimation(),, +          circleShape.getSize().createAnimation());, +      if (trim != null) {, +        fillLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),, +            trim.getOffset().createAnimation());, +      }, +      addLayer(fillLayer);, +    }, +, +    if (stroke != null) {, +      EllipseShapeLayer strokeLayer = new EllipseShapeLayer(getCallback());, +      strokeLayer.setIsStroke();, +      strokeLayer.setColor(stroke.getColor().createAnimation());, +      strokeLayer.setAlpha(stroke.getOpacity().createAnimation());, +      strokeLayer.setLineWidth(stroke.getWidth().createAnimation());, +      if (!stroke.getLineDashPattern().isEmpty()) {, +        List<KeyframeAnimation<Float>> dashPatternAnimations =, +            new ArrayList<>(stroke.getLineDashPattern().size());, +        for (AnimatableFloatValue dashPattern : stroke.getLineDashPattern()) {, +          dashPatternAnimations.add(dashPattern.createAnimation());, +        }, +        strokeLayer.setDashPattern(dashPatternAnimations, stroke.getDashOffset().createAnimation());, +      }, +      strokeLayer.setLineCapType(stroke.getCapType());, +      strokeLayer.updateCircle(, +          circleShape.getPosition().createAnimation(),, +          circleShape.getSize().createAnimation());, +      if (trim != null) {, +        strokeLayer.setTrimPath(trim.getStart().createAnimation(), trim.getEnd().createAnimation(),, +            trim.getOffset().createAnimation());, +      }, +, +      addLayer(strokeLayer);, +    }, +  }, +, +  private static final class EllipseShapeLayer extends ShapeLayer {, +    private static final float ELLIPSE_CONTROL_POINT_PERCENTAGE = 0.55228f;, +, +    private final KeyframeAnimation.AnimationListener<PointF> circleSizeChangedListener =, +        new KeyframeAnimation.AnimationListener<PointF>() {, +          @Override, +          public void onValueChanged(PointF progress) {, +            onCircleSizeChanged();, +          }, +        };]