[+++ /dev/null, +++ /dev/null, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.kt, +package com.airbnb.lottie.samples, +, +import android.Manifest, +import android.app.Activity, +import android.app.AlertDialog, +import android.content.Intent, +import android.content.pm.PackageManager, +import android.net.Uri, +import android.os.Bundle, +import android.os.Handler, +import android.support.v4.app.Fragment, +import android.support.v7.app.AppCompatActivity, +import android.text.TextUtils, +import android.util.Log, +import android.view.*, +import android.widget.EditText, +import android.widget.Toast, +import com.airbnb.lottie.L, +import com.airbnb.lottie.LottieComposition, +import kotlinx.android.synthetic.main.fragment_animation.*, +import kotlinx.android.synthetic.main.fragment_animation.view.*, +import okhttp3.OkHttpClient, +import okhttp3.Request, +import org.json.JSONException, +import org.json.JSONObject, +import java.io.FileInputStream, +import java.io.FileNotFoundException, +import java.io.InputStream, +import java.util.*, +, +inline fun consume(f: () -> Unit): Boolean {, +    f(), +    return true, +}, +, +class AnimationFragment : Fragment() {, +    private val TAG = AnimationFragment::class.java.simpleName, +    private val RC_CAMERA = 1341, +    private val RC_ASSET = 1337, +    private val RC_FILE = 1338, +    private val RC_QR = 1340, +    private val SCALE_SLIDER_FACTOR = 50f, +, +    private val assetFolders = object : HashMap<String, String>() {, +        init {, +            put("WeAccept.json", "Images/WeAccept"), +        }, +    }, +, +    private val client: OkHttpClient by lazy { OkHttpClient() }, +    private val application: ILottieApplication, +        get() = activity.application as ILottieApplication, +, +    override fun onCreateView(, +            inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {, +        val view = container!!.inflate(R.layout.fragment_animation, false), +, +        L.setTraceEnabled(true), +        view.animationView.setPerformanceTrackingEnabled(true), +, +        (activity as AppCompatActivity).setSupportActionBar(view.toolbar), +        view.toolbar.setNavigationIcon(R.drawable.ic_back), +        view.toolbar.setNavigationOnClickListener { fragmentManager.popBackStack() }, +        setHasOptionsMenu(true), +        postUpdatePlayButtonText(), +, +        view.qrCode.setDrawableLeft(R.drawable.ic_qr_scan, activity), +        view.sampleAnimations.setDrawableLeft(R.drawable.ic_assets, activity), +        view.loadAnimation.setDrawableLeft(R.drawable.ic_file, activity), +        view.loadFromJson.setDrawableLeft(R.drawable.ic_network, activity), +, +        view.animationView.addAnimatorListener(AnimatorListenerAdapter(, +                onStart = { startRecordingDroppedFrames() },, +                onEnd = {, +                    recordDroppedFrames(), +                    postUpdatePlayButtonText(), +                    animationView.performanceTracker?.logRenderTimes(), +                },, +                onCancel = { postUpdatePlayButtonText() },, +                onRepeat =  {, +                    animationView.performanceTracker?.logRenderTimes(), +                    animationView.performanceTracker?.clearRenderTimes(), +                    recordDroppedFrames(), +                    startRecordingDroppedFrames(), +                }, +        )), +, +        view.animationView.addAnimatorUpdateListener {, +            animation -> seekBar.progress = (animation.animatedFraction * 100).toInt(), +        }, +, +        view.seekBar.setOnSeekBarChangeListener(OnSeekBarChangeListenerAdapter(, +            onProgressChanged = { _, progress, _ ->, +                if (!animationView.isAnimating) {, +                    animationView.progress = progress / 100f, +                }, +            }]