[+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +        animationView.setOnClickListener {, +            // Click the animation view to re-render it for debugging purposes., +            animationView.invalidate(), +        }, +, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/PlayerFragment.kt, +        animationView.setOnClickListener {, +            // Click the animation view to re-render it for debugging purposes., +            animationView.invalidate(), +        }, +, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java, +import com.airbnb.lottie.value.LottieValueCallback;, +import androidx.annotation.FloatRange;, +import androidx.annotation.Nullable;, +, +  @Nullable private Keyframe<K> cachedGetValueKeyframe;, +  private float cachedGetValueProgress = -1f;, +  @Nullable private A cachedGetValue = null;, +, +    // Must use hashCode() since the actual object instance will be returned, +    // from getValue() below with the new values., +    int previousValue = valueCallback == null ? 0 : getValue().hashCode();, +    // Just trigger a change but don't compute values if there is a value callback., +    int newValue = valueCallback == null ? -1 : getValue().hashCode();, +    if (previousValue != newValue) {, +  }, +    Keyframe<K> keyframe = getCurrentKeyframe();, +    float progress = getInterpolatedCurrentKeyframeProgress();, +    if (valueCallback == null && keyframe == cachedGetValueKeyframe && cachedGetValueProgress == progress) {, +      return cachedGetValue;, +    }, +, +    cachedGetValueKeyframe = keyframe;, +    cachedGetValueProgress = progress;, +    A value = getValue(keyframe, progress);, +    cachedGetValue = value;, +, +    return value;]