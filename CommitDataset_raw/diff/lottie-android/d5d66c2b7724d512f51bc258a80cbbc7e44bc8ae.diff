[+++ b/LottieSample/src/main/AndroidManifest.xml, +        <activity, +            android:name="com.airbnb.lottie.samples.FontActivity", +            android:windowSoftInputMode="stateVisible"/>, +++ b/LottieSample/src/main/AndroidManifest.xml, +        <activity, +            android:name="com.airbnb.lottie.samples.FontActivity", +            android:windowSoftInputMode="stateVisible"/>, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java, +++ b/LottieSample/src/main/AndroidManifest.xml, +        <activity, +            android:name="com.airbnb.lottie.samples.FontActivity", +            android:windowSoftInputMode="stateVisible"/>, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/FontActivity.java, +++ b/LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java, +import android.text.InputType;, +import android.view.KeyEvent;, +import android.view.inputmethod.BaseInputConnection;, +import android.view.inputmethod.EditorInfo;, +import android.view.inputmethod.InputConnection;, +import com.airbnb.lottie.LottieAnimationView;, +import com.airbnb.lottie.model.LottieComposition;, +, +import java.util.HashMap;, +import java.util.Map;, +    private final Map<Character, LottieComposition> compositionMap = new HashMap<>();, +        init();, +        init();, +        init();, +    }, +, +    private void init() {, +        setFocusableInTouchMode(true);, +    @Override, +    public InputConnection onCreateInputConnection(EditorInfo outAttrs) {, +        BaseInputConnection fic = new BaseInputConnection(this, false);, +        outAttrs.actionLabel = null;, +        outAttrs.inputType = InputType.TYPE_NULL;, +        outAttrs.imeOptions = EditorInfo.IME_ACTION_NEXT;, +        return fic;, +    }, +, +    @Override, +    public boolean onCheckIsTextEditor() {, +        return true;, +    }, +, +    @Override, +    public boolean onKeyUp(int keyCode, KeyEvent event) {, +        if (keyCode == KeyEvent.KEYCODE_SPACE) {, +            addSpace();, +            return true;, +        }, +, +        if (keyCode == KeyEvent.KEYCODE_DEL) {, +            removeLastView();, +            return true;, +        }, +, +        if (event.getKeyCode() < KeyEvent.KEYCODE_A || event.getKeyCode() > KeyEvent.KEYCODE_Z) {, +            return super.onKeyDown(keyCode, event);, +        }, +, +, +        final char letter = Character.toUpperCase((char) event.getUnicodeChar());, +        if (compositionMap.containsKey(letter)) {, +            addComposition(compositionMap.get(letter));, +        } else {, +            String fileName = "Amelie/" + letter + ".json";, +            LottieComposition.fromAssetFileName(getContext(), fileName, new LottieComposition.OnCompositionLoadedListener() {, +                @Override, +                public void onCompositionLoaded(LottieComposition composition) {, +                    compositionMap.put(letter, composition);, +                    addComposition(composition);, +                }, +            });, +        }, +, +        return true;, +    }, +, +    private void addComposition(LottieComposition composition) {, +        LottieAnimationView lottieAnimationView = new LottieAnimationView(getContext());, +        lottieAnimationView.setLayoutParams(new LottieFontViewGroup.LayoutParams(, +                ViewGroup.LayoutParams.WRAP_CONTENT,, +                ViewGroup.LayoutParams.WRAP_CONTENT, +        ));, +        lottieAnimationView.setComposition(composition);, +        lottieAnimationView.playAnimation();, +        addView(lottieAnimationView);, +    }, +]