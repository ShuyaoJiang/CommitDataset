[+++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +import android.graphics.Canvas;, +import android.graphics.Rect;, +    private final RootLotteAnimatableLayer rootAnimatableLayer = new RootLotteAnimatableLayer(this);, +        setImageDrawable(rootAnimatableLayer);, +    @Override, +    public void draw(Canvas canvas) {, +        super.draw(canvas);, +    }, +, +        // TODO: cancel these if the iew gets detached., +                return LotteComposition.fromJson(params[0]);, +                setComposition(model);, +        setComposition(composition);, +    public void setComposition(LotteComposition composition) {, +        rootAnimatableLayer.setCompDuration(composition.getDuration());, +        buildSubviewsForComposition();, +        requestLayout();, +    private void buildSubviewsForComposition() {, +        List<LotteLayer> reversedLayers = composition.getLayers();, +        Collections.reverse(reversedLayers);, +, +        boolean needsMatte = false;, +        boolean needsMask = false;, +        for (LotteLayer layer : reversedLayers) {, +            if (layer.getMatteType() != null && layer.getMatteType() != LotteLayer.MatteType.None) {, +                needsMatte = true;, +            }, +            if (!layer.getMasks().isEmpty()) {, +                needsMask = true;, +            }, +            if (needsMatte && needsMask) {, +                break;, +            }, +        }, +, +        Rect bounds = composition.getBounds();, +        Bitmap mainBitmap = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888);, +        Bitmap maskBitmap = needsMask ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;, +        Bitmap matteBitmap = needsMatte ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;, +, +        Bitmap mainBitmapForMatte = null;, +        Bitmap maskBitmapForMatte = null;, +        Bitmap matteBitmapForMatte = null;, +        LotteLayerView maskedLayer = null;, +        for (LotteLayer layer : reversedLayers) {, +            LotteLayerView layerView;, +            if (maskedLayer == null) {, +                layerView = new LotteLayerView(layer, composition, this, mainBitmap, maskBitmap, matteBitmap);, +            } else {, +                if (mainBitmapForMatte == null) {, +                    mainBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +                    // TODO: only create matte mask and matte if necessary., +                    maskBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +                    matteBitmapForMatte = Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8);, +                }, +                layerView = new LotteLayerView(layer, composition, this, mainBitmapForMatte, maskBitmapForMatte, matteBitmapForMatte);, +            }, +            layerMap.put(layerView.getId(), layerView);, +            if (maskedLayer != null) {, +                maskedLayer.setMatte(layerView);, +                maskedLayer = null;, +            } else {, +                if (layer.getMatteType() == LotteLayer.MatteType.Add) {, +                    maskedLayer = layerView;, +                }, +                rootAnimatableLayer.addLayer(layerView);, +            }, +        }, +    }, +, +, +    public void pause() {, +        rootAnimatableLayer.pause();, +    }, +, +++ b/lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java, +import android.graphics.Canvas;, +import android.graphics.Rect;, +    private final RootLotteAnimatableLayer rootAnimatableLayer = new RootLotteAnimatableLayer(this);, +        setImageDrawable(rootAnimatableLayer);, +    @Override, +    public void draw(Canvas canvas) {, +        super.draw(canvas);, +    }, +, +        // TODO: cancel these if the iew gets detached., +                return LotteComposition.fromJson(params[0]);, +                setComposition(model);, +        setComposition(composition);, +    public void setComposition(LotteComposition composition) {, +        rootAnimatableLayer.setCompDuration(composition.getDuration());, +        buildSubviewsForComposition();, +        requestLayout();, +    private void buildSubviewsForComposition() {, +        List<LotteLayer> reversedLayers = composition.getLayers();, +        Collections.reverse(reversedLayers);, +, +        boolean needsMatte = false;, +        boolean needsMask = false;]