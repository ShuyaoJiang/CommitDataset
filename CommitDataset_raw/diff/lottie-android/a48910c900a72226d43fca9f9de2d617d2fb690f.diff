[+++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +        T value = getValue();, +            listeners.get(i).onValueChanged(value);, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +        T value = getValue();, +            listeners.get(i).onValueChanged(value);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            onPathChanged();, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java, +        T value = getValue();, +            listeners.get(i).onValueChanged(value);, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java, +            onPathChanged();, +++ b/lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java, +    private final Observable.OnChangedListener pathPropertyChangedListener = new Observable.OnChangedListener() {, +            onPathPropertiesChanged();, +    private final Path tempPath = new Path();, +    private final Path currentPath = new Path();, +    private float currentPathScaleX;, +    private float currentPathScaleY;, +    private float currentPathStrokeStart;, +    private float currentPathStrokeEnd = 100;, +, +    void onPathChanged() {, +        currentPath.reset();, +        currentPath.set(path.getValue());, +        onPathPropertiesChanged();, +    private void onPathPropertiesChanged() {, +        boolean needsStrokeStart = strokeStart != null && strokeStart.getValue() != currentPathStrokeStart;, +        boolean needsStrokeEnd = strokeEnd != null && strokeEnd.getValue() != currentPathStrokeEnd;, +        boolean needsScaleX = scale != null && scale.getValue().getScaleX() != currentPathScaleX;, +        boolean needsScaleY = scale != null && scale.getValue().getScaleY() != currentPathScaleY;, +, +        if (!needsStrokeStart && !needsStrokeEnd && !needsScaleX && !needsScaleY) {, +            return;, +        }, +        currentPath.set(path.getValue());, +, +        if (needsScaleX || needsScaleY) {, +            currentPath.computeBounds(scaleRect, true);, +            currentPathScaleX = scale.getValue().getScaleX();, +            currentPathScaleY = scale.getValue().getScaleY();, +            scaleMatrix.setScale(currentPathScaleX, currentPathScaleY, scaleRect.centerX(), scaleRect.centerY());, +            currentPath.transform(scaleMatrix, currentPath);, +        }, +, +        if (needsStrokeStart || needsStrokeEnd) {, +            tempPath.set(currentPath);, +            pathMeasure.setPath(tempPath, false);, +            float length = pathMeasure.getLength();, +            float start = length * strokeStart.getValue() / 100f;, +            float end = length * strokeEnd.getValue() / 100f;, +, +            currentPath.reset();, +            // Workaround to get hardware acceleration on KitKat, +            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean), +            currentPath.rLineTo(0, 0);, +            currentPathStrokeStart = Math.min(start, end);, +            currentPathStrokeEnd = Math.max(start, end);, +            pathMeasure.getSegment(, +                    currentPathStrokeStart,, +                    currentPathStrokeEnd,, +                    currentPath,, +                    true);, +        }, +, +        invalidateSelf();, +        canvas.drawPath(currentPath, paint);, +            this.strokeStart.removeChangeListener(pathPropertyChangedListener);, +            this.strokeEnd.removeChangeListener(pathPropertyChangedListener);, +        strokeStart.addChangeListener(pathPropertyChangedListener);, +        strokeEnd.addChangeListener(pathPropertyChangedListener);, +        onPathPropertiesChanged();, +            this.scale.removeChangeListener(pathPropertyChangedListener);, +        scale.addChangeListener(pathPropertyChangedListener);, +        onPathPropertiesChanged();]