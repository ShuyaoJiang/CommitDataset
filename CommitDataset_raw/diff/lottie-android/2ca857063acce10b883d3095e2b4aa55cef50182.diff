[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  public void init(Rect bounds, float startFrame, float endFrame, float frameRate,, +      List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,, +      List<Layer>> precomps, Map<String, LottieImageAsset> images,, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  public void init(Rect bounds, float startFrame, float endFrame, float frameRate,, +      List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,, +      List<Layer>> precomps, Map<String, LottieImageAsset> images,, +++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java, +          int majorVersion = Integer.parseInt(versions[0]);, +          int minorVersion = Integer.parseInt(versions[1]);, +          int patchVersion = Integer.parseInt(versions[2]);, +          if (!Utils.isAtLeastVersion(majorVersion, minorVersion, patchVersion,, +              4, 5, 0)) {, +    composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,, +        images, characters, fonts);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  public void init(Rect bounds, float startFrame, float endFrame, float frameRate,, +      List<Layer> layers, LongSparseArray<Layer> layerMap, Map<String,, +      List<Layer>> precomps, Map<String, LottieImageAsset> images,, +++ b/lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java, +          int majorVersion = Integer.parseInt(versions[0]);, +          int minorVersion = Integer.parseInt(versions[1]);, +          int patchVersion = Integer.parseInt(versions[2]);, +          if (!Utils.isAtLeastVersion(majorVersion, minorVersion, patchVersion,, +              4, 5, 0)) {, +    composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,, +        images, characters, fonts);, +++ b/lottie/src/main/java/com/airbnb/lottie/utils/Utils.java, +  public static boolean isAtLeastVersion(int major, int minor, int patch, int minMajor, int minMinor, int, +      minPatch) {, +    if (major < minMajor) {, +    } else if (major > minMajor) {, +    if (minor < minMinor) {, +    } else if (minor > minMinor) {, +    return patch >= minPatch;]