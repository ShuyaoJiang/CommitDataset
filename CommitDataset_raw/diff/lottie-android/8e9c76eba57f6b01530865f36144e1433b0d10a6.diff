[+++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationFragment.kt, +import com.airbnb.lottie.L, +import com.airbnb.lottie.LottieComposition, +import com.airbnb.lottie.LottieDrawable, +        LottieComposition.Factory.fromInputStream(fis, { composition ->, +            LottieComposition.Factory.fromJsonString(jsonString, { composition ->, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationFragment.kt, +import com.airbnb.lottie.L, +import com.airbnb.lottie.LottieComposition, +import com.airbnb.lottie.LottieDrawable, +        LottieComposition.Factory.fromInputStream(fis, { composition ->, +            LottieComposition.Factory.fromJsonString(jsonString, { composition ->, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import android.util.JsonReader;, +import java.io.StringReader;, +   * @see #setAnimation(JsonReader) which is more efficient than using a JSONObject., +   * For animations loaded from the network, use {@link #setAnimationFromJson(String)}, +   */, +  @Deprecated, +  public void setAnimation(JSONObject json) {, +    setAnimation(new JsonReader(new StringReader(json.toString())));, +  }, +, +  /**, +   * Sets the animation from json string. This is the ideal API to use when loading an animation, +   * over the network because you can use the raw response body here and a converstion to a, +   * JSONObject never has to be done., +   */, +  public void setAnimationFromJson(String jsonString) {, +    setAnimation(new JsonReader(new StringReader(jsonString)));, +  }, +, +  /**, +   * Sets the animation from a JSONReader., +  public void setAnimation(JsonReader reader) {, +    compositionLoader = LottieComposition.Factory.fromJsonReader(reader, loadedListener);, +++ b/LottieSample/src/main/kotlin/com/airbnb/lottie/samples/AnimationFragment.kt, +import com.airbnb.lottie.L, +import com.airbnb.lottie.LottieComposition, +import com.airbnb.lottie.LottieDrawable, +        LottieComposition.Factory.fromInputStream(fis, { composition ->, +            LottieComposition.Factory.fromJsonString(jsonString, { composition ->, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java, +import android.util.JsonReader;, +import java.io.StringReader;, +   * @see #setAnimation(JsonReader) which is more efficient than using a JSONObject., +   * For animations loaded from the network, use {@link #setAnimationFromJson(String)}, +   */, +  @Deprecated, +  public void setAnimation(JSONObject json) {, +    setAnimation(new JsonReader(new StringReader(json.toString())));, +  }, +, +  /**, +   * Sets the animation from json string. This is the ideal API to use when loading an animation, +   * over the network because you can use the raw response body here and a converstion to a, +   * JSONObject never has to be done., +   */, +  public void setAnimationFromJson(String jsonString) {, +    setAnimation(new JsonReader(new StringReader(jsonString)));, +  }, +, +  /**, +   * Sets the animation from a JSONReader., +  public void setAnimation(JsonReader reader) {, +    compositionLoader = LottieComposition.Factory.fromJsonReader(reader, loadedListener);, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieComposition.java, +  final PerformanceTracker performanceTracker = new PerformanceTracker();, +  final Map<String, List<Layer>> precomps = new HashMap<>();, +  final Map<String, LottieImageAsset> images = new HashMap<>();, +  final Map<String, Font> fonts = new HashMap<>();, +  final SparseArrayCompat<FontCharacter> characters = new SparseArrayCompat<>();, +  final LongSparseArray<Layer> layerMap = new LongSparseArray<>();, +  final List<Layer> layers = new ArrayList<>();, +  final HashSet<String> warnings = new HashSet<>();, +  Rect bounds;, +  float startFrame;, +  float endFrame;, +  float frameRate;, +  int majorVersion;, +  int minorVersion;, +  int patchVersion;, +  @SuppressWarnings({"WeakerAccess", "unused"}), +    public static Cancellable fromAssetFileName(, +        Context context, String fileName, OnCompositionLoadedListener listener) {, +        throw new IllegalArgumentException("Unable to find file " + fileName, e);, +      return fromInputStream(stream, listener);, +     public static Cancellable fromRawFile(, +         Context context, @RawRes int resId, OnCompositionLoadedListener listener) {, +      return fromInputStream(context.getResources().openRawResource(resId), listener);, +    public static Cancellable fromInputStream(, +        InputStream stream, OnCompositionLoadedListener listener) {, +      return fromJsonReader(new JsonReader(new InputStreamReader(stream)), listener);, +     * Loads a composition from a json string. This is preferable to loading a JSONObject because, +     * internally, Lottie uses {@link JsonReader} so any original overhead to create the JSONObject, +     * is wasted., +     *, +     * This is the preferred method to use when loading an animation from the network because you, +     * have the response body as a raw string already. No need to convert it to a JSONObject., +     *]