[+++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java, +      // In chars[], fontFamily has spaces but in documentData it doesn't so they hash to different, +      // things., +      // TODO: make bodymovin be consistent, +      String fontFamily = json.optString("fFamily").replace(" ", "");, +++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java, +      // In chars[], fontFamily has spaces but in documentData it doesn't so they hash to different, +      // things., +      // TODO: make bodymovin be consistent, +      String fontFamily = json.optString("fFamily").replace(" ", "");, +++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java, +, +    if (layerType == LayerType.Text && composition.getCharacters().size() == 0) {, +      composition.addWarning("To use text, you must export text as glyphs in Bodymovin.");, +    }, +++ b/lottie/src/main/java/com/airbnb/lottie/FontCharacter.java, +      // In chars[], fontFamily has spaces but in documentData it doesn't so they hash to different, +      // things., +      // TODO: make bodymovin be consistent, +      String fontFamily = json.optString("fFamily").replace(" ", "");, +++ b/lottie/src/main/java/com/airbnb/lottie/Layer.java, +, +    if (layerType == LayerType.Text && composition.getCharacters().size() == 0) {, +      composition.addWarning("To use text, you must export text as glyphs in Bodymovin.");, +    }, +++ b/lottie/src/main/java/com/airbnb/lottie/TextLayer.java, +      if (character == null) {, +        // Something is wrong. Potentially, they didn't export the text as a glyph., +        continue;, +      }, +    List<ShapeGroup> shapes = character.getShapes();, +    int size = shapes.size();, +      ShapeGroup sg = shapes.get(i);]