[+++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +   * Set the maximum number of compositions to keep cached in memory., +   * This must be > 0., +   */, +  public static void setMaxCacheSize(int size) {, +    LottieCompositionCache.getInstance().resize(size);, +  }, +, +  /**, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +   * Set the maximum number of compositions to keep cached in memory., +   * This must be > 0., +   */, +  public static void setMaxCacheSize(int size) {, +    LottieCompositionCache.getInstance().resize(size);, +  }, +, +  /**, +++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java, +  private final LruCache<String, LottieComposition> cache = new LruCache<>(20);, +, +  /**, +   * Set the maximum number of compositions to keep cached in memory., +   * This must be > 0., +   */, +  public void resize(int size) {, +    cache.resize(size);, +  }, +++ b/lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java, +   * Set the maximum number of compositions to keep cached in memory., +   * This must be > 0., +   */, +  public static void setMaxCacheSize(int size) {, +    LottieCompositionCache.getInstance().resize(size);, +  }, +, +  /**, +++ b/lottie/src/main/java/com/airbnb/lottie/model/LottieCompositionCache.java, +  private final LruCache<String, LottieComposition> cache = new LruCache<>(20);, +, +  /**, +   * Set the maximum number of compositions to keep cached in memory., +   * This must be > 0., +   */, +  public void resize(int size) {, +    cache.resize(size);, +  }, +++ b/lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java, +import com.airbnb.lottie.model.LottieCompositionCache;, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, +    @Before, +    public void setup() {, +        LottieCompositionCache.getInstance().clear();, +        LottieCompositionCache.getInstance().resize(20);, +    }, +, +, +    @Test, +    public void testCacheWorks() {, +        JsonReader reader = new JsonReader(new StringReader(JSON));, +        LottieTask<LottieComposition> task1 = LottieCompositionFactory.fromJsonReader(reader, "foo");, +        LottieTask<LottieComposition> task2 = LottieCompositionFactory.fromJsonReader(reader, "foo");, +        assertTrue(task1 == task2);, +    }, +, +    @Test, +    public void testZeroCacheWorks() {, +        JsonReader reader = new JsonReader(new StringReader(JSON));, +        LottieCompositionFactory.setMaxCacheSize(1);, +        LottieResult<LottieComposition> taskFoo1 = LottieCompositionFactory.fromJsonReaderSync(reader, "foo");, +        LottieResult<LottieComposition> taskBar = LottieCompositionFactory.fromJsonReaderSync(reader, "bar");, +        LottieResult<LottieComposition> taskFoo2 = LottieCompositionFactory.fromJsonReaderSync(reader, "foo");, +        assertFalse(taskFoo1 == taskFoo2);, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testCannotSetCacheSizeToZero() {, +        LottieCompositionFactory.setMaxCacheSize(0);, +    }]