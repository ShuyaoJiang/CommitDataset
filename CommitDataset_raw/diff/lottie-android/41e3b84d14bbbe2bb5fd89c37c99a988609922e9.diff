[+++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java, +import com.airbnb.lottie.parser.KeyframeParser;, +      Keyframe<PointF> keyframe = KeyframeParser.parse(, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java, +import com.airbnb.lottie.parser.KeyframeParser;, +      Keyframe<PointF> keyframe = KeyframeParser.parse(, +++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatablePathValue.java, +import com.airbnb.lottie.parser.KeyframesParser;, +      KeyframesParser.setEndFrames(keyframes);, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java, +import com.airbnb.lottie.parser.KeyframeParser;, +      Keyframe<PointF> keyframe = KeyframeParser.parse(, +++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatablePathValue.java, +import com.airbnb.lottie.parser.KeyframesParser;, +      KeyframesParser.setEndFrames(keyframes);, +++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableValueParser.java, +import com.airbnb.lottie.parser.KeyframesParser;, +    return KeyframesParser.parse(reader, composition, scale, valueFactory);, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java, +++ b/lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java, +import com.airbnb.lottie.parser.KeyframeParser;, +      Keyframe<PointF> keyframe = KeyframeParser.parse(, +++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatablePathValue.java, +import com.airbnb.lottie.parser.KeyframesParser;, +      KeyframesParser.setEndFrames(keyframes);, +++ b/lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableValueParser.java, +import com.airbnb.lottie.parser.KeyframesParser;, +    return KeyframesParser.parse(reader, composition, scale, valueFactory);, +++ b/lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java, +package com.airbnb.lottie.parser;, +, +import android.graphics.PointF;, +import android.support.annotation.Nullable;, +import android.support.v4.util.SparseArrayCompat;, +import android.support.v4.view.animation.PathInterpolatorCompat;, +import android.util.JsonReader;, +import android.view.animation.Interpolator;, +import android.view.animation.LinearInterpolator;, +, +import com.airbnb.lottie.LottieComposition;, +import com.airbnb.lottie.animation.Keyframe;, +import com.airbnb.lottie.model.animatable.AnimatableValue;, +import com.airbnb.lottie.utils.JsonUtils;, +import com.airbnb.lottie.utils.MiscUtils;, +import com.airbnb.lottie.utils.Utils;, +, +import java.io.IOException;, +import java.lang.ref.WeakReference;, +, +public class KeyframeParser {, +  /**, +   * Some animations get exported with insane cp values in the tens of thousands., +   * PathInterpolator fails to create the interpolator in those cases and hangs., +   * Clamping the cp helps prevent that., +   */, +  private static final float MAX_CP_VALUE = 100;, +  private static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();, +  private static SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache;, +, +  // https://github.com/airbnb/lottie-android/issues/464, +  private static SparseArrayCompat<WeakReference<Interpolator>> pathInterpolatorCache() {, +    if (pathInterpolatorCache == null) {, +      pathInterpolatorCache = new SparseArrayCompat<>();, +    }, +    return pathInterpolatorCache;, +  }, +, +  @Nullable, +  private static WeakReference<Interpolator> getInterpolator(int hash) {, +    // This must be synchronized because get and put isn't thread safe because, +    // SparseArrayCompat has to create new sized arrays sometimes., +    synchronized (KeyframeParser.class) {, +      return pathInterpolatorCache().get(hash);, +    }, +  }, +, +  private static void putInterpolator(int hash, WeakReference<Interpolator> interpolator) {, +    // This must be synchronized because get and put isn't thread safe because, +    // SparseArrayCompat has to create new sized arrays sometimes., +    synchronized (KeyframeParser.class) {, +      pathInterpolatorCache.put(hash, interpolator);, +    }, +  }, +, +  public static <T> Keyframe<T> parse(JsonReader reader, LottieComposition composition,, +      float scale, AnimatableValue.Factory<T> valueFactory, boolean animated) throws IOException {, +, +    if (animated) {, +      return parseKeyframe(composition, reader, scale, valueFactory);, +    } else {, +      return parseStaticValue(reader, scale, valueFactory);, +    }, +  }, +, +  /**, +   * beginObject will already be called on the keyframe so it can be differentiated with]