[+++ b/After Effects Samples/Test/MatteMask.aep, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/LottieSample/screenshots/Tests_Mask_26 0.png, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/LottieSample/screenshots/Tests_Mask_26 0.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testStatic(getActivity(), "Tests/MaskInv.json");, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/LottieSample/screenshots/Tests_Mask_26 0.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testStatic(getActivity(), "Tests/MaskInv.json");, +++ b/LottieSample/src/main/assets/Tests/MaskInv.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":1,"nm":"Background","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[0,0,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"ao":0,"hasMask":true,"masksProperties":[{"inv":false,"mode":"a","pt":{"k":{"i":[[50.031,0],[0,-50.031],[-50.031,0],[0,50.031]],"o":[[-50.031,0],[0,50.031],[50.031,0],[0,-50.031]],"v":[[150.59,88],[60,178.59],[150.59,269.18],[241.18,178.59]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 2"},{"inv":false,"mode":"s","pt":{"k":{"i":[[55.912,0],[0,-55.912],[-55.912,0],[0,55.912]],"o":[[-55.912,0],[0,55.912],[55.912,0],[0,-55.912]],"v":[[221.238,126],[120,227.238],[221.238,328.477],[322.477,227.238]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 1"}],"sw":400,"sh":400,"sc":"#ff0000","ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"v":"4.5.0","ddd":0,"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":400,"h":400}, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/LottieSample/screenshots/Tests_Mask_26 0.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testStatic(getActivity(), "Tests/MaskInv.json");, +++ b/LottieSample/src/main/assets/Tests/MaskInv.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":1,"nm":"Background","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[0,0,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"ao":0,"hasMask":true,"masksProperties":[{"inv":false,"mode":"a","pt":{"k":{"i":[[50.031,0],[0,-50.031],[-50.031,0],[0,50.031]],"o":[[-50.031,0],[0,50.031],[50.031,0],[0,-50.031]],"v":[[150.59,88],[60,178.59],[150.59,269.18],[241.18,178.59]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 2"},{"inv":false,"mode":"s","pt":{"k":{"i":[[55.912,0],[0,-55.912],[-55.912,0],[0,55.912]],"o":[[-55.912,0],[0,55.912],[55.912,0],[0,-55.912]],"v":[[221.238,126],[120,227.238],[221.238,328.477],[322.477,227.238]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 1"}],"sw":400,"sh":400,"sc":"#ff0000","ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"v":"4.5.0","ddd":0,"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":400,"h":400}, +++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java, +  private final PorterDuffXfermode DST_OUT = new PorterDuffXfermode(PorterDuff.Mode.DST_OUT);, +  private final PorterDuffXfermode DST_IN = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);, +  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +      mattePaint.setXfermode(DST_OUT);, +      mattePaint.setXfermode(DST_IN);, +    for (BaseKeyframeAnimation<?, Path> animation : mask.getMaskAnimations()) {, +      List<Mask> masks = mask.getMasks();, +      List<BaseKeyframeAnimation<?, Path>> maskAnimations = mask.getMaskAnimations();, +      for (int i = 0; i < masks.size(); i++) {, +        applyMask(bitmapCanvas, masks.get(i), maskAnimations.get(i));, +  private void applyMask(BitmapCanvas canvas, Mask mask,, +      BaseKeyframeAnimation<?, Path> maskAnimation) {, +    switch (mask.getMaskMode()) {, +      case MaskModeSubtract:, +        maskPaint.setXfermode(DST_OUT);, +        break;, +      case MaskModeAdd:, +      default:, +        maskPaint.setXfermode(DST_IN);, +    }, +, +    canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);, +    for (int i = transformLayers.size() - 1; i >= 0; i--) {, +      LayerView layer = transformLayers.get(i);, +      applyTransformForLayer(canvas, layer);, +    }, +    applyTransformForLayer(canvas, this);, +    canvas.drawPath(maskAnimation.getValue(), mainCanvasPaint);, +    canvas.restore();, +  }, +, +    return mask != null && !mask.getMaskAnimations().isEmpty();, +++ b/After Effects Samples/Test/MatteMask.aep, +++ b/LottieSample/screenshots/Tests_MaskInv 0.png, +++ b/LottieSample/screenshots/Tests_Mask_26 0.png, +++ b/LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java, +    TestRobot.testStatic(getActivity(), "Tests/MaskInv.json");, +++ b/LottieSample/src/main/assets/Tests/MaskInv.json, +{"assets":[],"layers":[{"ddd":0,"ind":0,"ty":1,"nm":"Background","ks":{"o":{"k":100},"r":{"k":0},"p":{"k":[0,0,0]},"a":{"k":[0,0,0]},"s":{"k":[100,100,100]}},"ao":0,"hasMask":true,"masksProperties":[{"inv":false,"mode":"a","pt":{"k":{"i":[[50.031,0],[0,-50.031],[-50.031,0],[0,50.031]],"o":[[-50.031,0],[0,50.031],[50.031,0],[0,-50.031]],"v":[[150.59,88],[60,178.59],[150.59,269.18],[241.18,178.59]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 2"},{"inv":false,"mode":"s","pt":{"k":{"i":[[55.912,0],[0,-55.912],[-55.912,0],[0,55.912]],"o":[[-55.912,0],[0,55.912],[55.912,0],[0,-55.912]],"v":[[221.238,126],[120,227.238],[221.238,328.477],[322.477,227.238]],"c":true}},"o":{"k":100},"x":{"k":0},"nm":"Mask 1"}],"sw":400,"sh":400,"sc":"#ff0000","ip":0,"op":900.000036657751,"st":0,"bm":0,"sr":1}],"v":"4.5.0","ddd":0,"ip":0,"op":900.000036657751,"fr":29.9700012207031,"w":400,"h":400}, +++ b/lottie/src/main/java/com/airbnb/lottie/LayerView.java, +  private final PorterDuffXfermode DST_OUT = new PorterDuffXfermode(PorterDuff.Mode.DST_OUT);, +  private final PorterDuffXfermode DST_IN = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);, +  private final Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);, +      mattePaint.setXfermode(DST_OUT);, +      mattePaint.setXfermode(DST_IN);, +    for (BaseKeyframeAnimation<?, Path> animation : mask.getMaskAnimations()) {, +      List<Mask> masks = mask.getMasks();, +      List<BaseKeyframeAnimation<?, Path>> maskAnimations = mask.getMaskAnimations();, +      for (int i = 0; i < masks.size(); i++) {, +        applyMask(bitmapCanvas, masks.get(i), maskAnimations.get(i));, +  private void applyMask(BitmapCanvas canvas, Mask mask,, +      BaseKeyframeAnimation<?, Path> maskAnimation) {, +    switch (mask.getMaskMode()) {, +      case MaskModeSubtract:, +        maskPaint.setXfermode(DST_OUT);, +        break;, +      case MaskModeAdd:, +      default:, +        maskPaint.setXfermode(DST_IN);, +    }, +, +    canvas.saveLayer(rect, maskPaint, SAVE_FLAGS);, +    for (int i = transformLayers.size() - 1; i >= 0; i--) {, +      LayerView layer = transformLayers.get(i);, +      applyTransformForLayer(canvas, layer);, +    }, +    applyTransformForLayer(canvas, this);, +    canvas.drawPath(maskAnimation.getValue(), mainCanvasPaint);, +    canvas.restore();, +  }, +, +    return mask != null && !mask.getMaskAnimations().isEmpty();, +++ b/lottie/src/main/java/com/airbnb/lottie/Mask.java, +  enum MaskMode {]