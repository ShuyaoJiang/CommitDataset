[+++ b/common/src/main/java/io/netty/util/Attribute.java, +/**, + * An attribute which allows to store an value reference. It may be updated atomically and so is thread-safe., + *, + * @param <T>   the type of the value it holds., + */, +    /**, +     * Returns the current value, which may be {@code null}, +     */, +, +    /**, +     * Sets the value, +     */, +, +    /**, +     *  Atomically sets to the given value and returns the old value which may be {@code null} if non was set before., +     */, +, +    /**, +     *  Atomically sets to the given value if this {@link Attribute} does not contain a value at the moment., +     *  If it was not possible to set the value as it contains a value it will just return the current value., +     */, +, +    /**, +     * Atomically sets the value to the given updated value if the current value == the expected value., +     * If it the set was successful it returns {@code true} otherwise {@code false}., +     */, +, +    /**, +     * Remove the current value which is stored in this {@link Attribute}, which means after this call {@link #get()}, +     * will return {@code null}., +     */, +++ b/common/src/main/java/io/netty/util/Attribute.java, +/**, + * An attribute which allows to store an value reference. It may be updated atomically and so is thread-safe., + *, + * @param <T>   the type of the value it holds., + */, +    /**, +     * Returns the current value, which may be {@code null}, +     */, +, +    /**, +     * Sets the value, +     */, +, +    /**, +     *  Atomically sets to the given value and returns the old value which may be {@code null} if non was set before., +     */, +, +    /**, +     *  Atomically sets to the given value if this {@link Attribute} does not contain a value at the moment., +     *  If it was not possible to set the value as it contains a value it will just return the current value., +     */, +, +    /**, +     * Atomically sets the value to the given updated value if the current value == the expected value., +     * If it the set was successful it returns {@code true} otherwise {@code false}., +     */, +, +    /**, +     * Remove the current value which is stored in this {@link Attribute}, which means after this call {@link #get()}, +     * will return {@code null}., +     */, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +/**, + * Key which can be used to access {@link Attribute} out of the {@link AttributeMap}. Be aware that it is not be, + * possible to have multiple keys with the same name., + *, + *, + * @param <T>   the type of the {@link Attribute} which can be accessed via this {@link AttributeKey}., + */, +    /**, +     * Create a new instance, +     *, +     * @param name  the name under which the {@link AttributeKey} will be registered, +     */, +++ b/common/src/main/java/io/netty/util/Attribute.java, +/**, + * An attribute which allows to store an value reference. It may be updated atomically and so is thread-safe., + *, + * @param <T>   the type of the value it holds., + */, +    /**, +     * Returns the current value, which may be {@code null}, +     */, +, +    /**, +     * Sets the value, +     */, +, +    /**, +     *  Atomically sets to the given value and returns the old value which may be {@code null} if non was set before., +     */, +, +    /**, +     *  Atomically sets to the given value if this {@link Attribute} does not contain a value at the moment., +     *  If it was not possible to set the value as it contains a value it will just return the current value., +     */, +]