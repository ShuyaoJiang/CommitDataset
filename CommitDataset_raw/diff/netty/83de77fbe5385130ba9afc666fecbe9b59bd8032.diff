[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +        Set<String> libNames = new LinkedHashSet<String>(4);, +        // in Java 8, statically compiled JNI code is namespaced, +        libNames.add("netty_tcnative");, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +        Set<String> libNames = new LinkedHashSet<String>(4);, +        // in Java 8, statically compiled JNI code is namespaced, +        libNames.add("netty_tcnative");, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +, +#include "netty_unix_errors.h", +#include "netty_unix_filedescriptor.h", +#include "netty_unix_jni.h", +#include "netty_unix_socket.h", +#include "netty_unix_util.h", +    return NETTY_JNI_VERSION;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +        Set<String> libNames = new LinkedHashSet<String>(4);, +        // in Java 8, statically compiled JNI code is namespaced, +        libNames.add("netty_tcnative");, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +, +#include "netty_unix_errors.h", +#include "netty_unix_filedescriptor.h", +#include "netty_unix_jni.h", +#include "netty_unix_socket.h", +#include "netty_unix_util.h", +    return NETTY_JNI_VERSION;, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +, +#include "netty_unix_errors.h", +#include "netty_unix_filedescriptor.h", +#include "netty_unix_jni.h", +#include "netty_unix_limits.h", +#include "netty_unix_socket.h", +#include "netty_unix_util.h", +    return NETTY_JNI_VERSION;, +// Invoked by the JVM when statically linked, +jint JNI_OnLoad_netty_transport_native_epoll(JavaVM* vm, void* reserved) {, +    if ((*vm)->GetEnv(vm, (void**) &env, NETTY_JNI_VERSION) != JNI_OK) {, +    char* packagePrefix = NULL;, +#ifndef NETTY_NOT_DYNAMIC, +    packagePrefix = netty_unix_util_parse_package_prefix(dlinfo.dli_fname, "netty-transport-native-epoll", &status);, +#endif /* NETTY_NOT_DYNAMIC */, +jint JNI_OnLoad(JavaVM* vm, void* reserved) {, +    return JNI_OnLoad_netty_transport_native_epoll(vm, reserved);, +}, +, +// Invoked by the JVM when statically linked, +void JNI_OnUnload_netty_transport_native_epoll(JavaVM* vm, void* reserved) {, +    if ((*vm)->GetEnv(vm, (void**) &env, NETTY_JNI_VERSION) != JNI_OK) {, +, +void JNI_OnUnload(JavaVM* vm, void* reserved) {, +  JNI_OnUnload_netty_transport_native_epoll(vm, reserved);, +}, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +        Set<String> libNames = new LinkedHashSet<String>(4);, +        // in Java 8, statically compiled JNI code is namespaced, +        libNames.add("netty_tcnative");, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +, +#include "netty_unix_errors.h", +#include "netty_unix_filedescriptor.h", +#include "netty_unix_jni.h", +#include "netty_unix_socket.h", +#include "netty_unix_util.h", +    return NETTY_JNI_VERSION;, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +, +#include "netty_unix_errors.h", +#include "netty_unix_filedescriptor.h", +#include "netty_unix_jni.h", +#include "netty_unix_limits.h", +#include "netty_unix_socket.h", +#include "netty_unix_util.h", +    return NETTY_JNI_VERSION;, +// Invoked by the JVM when statically linked, +jint JNI_OnLoad_netty_transport_native_epoll(JavaVM* vm, void* reserved) {, +    if ((*vm)->GetEnv(vm, (void**) &env, NETTY_JNI_VERSION) != JNI_OK) {, +    char* packagePrefix = NULL;, +#ifndef NETTY_NOT_DYNAMIC, +    packagePrefix = netty_unix_util_parse_package_prefix(dlinfo.dli_fname, "netty-transport-native-epoll", &status);, +#endif /* NETTY_NOT_DYNAMIC */, +jint JNI_OnLoad(JavaVM* vm, void* reserved) {, +    return JNI_OnLoad_netty_transport_native_epoll(vm, reserved);, +}, +, +// Invoked by the JVM when statically linked, +void JNI_OnUnload_netty_transport_native_epoll(JavaVM* vm, void* reserved) {, +    if ((*vm)->GetEnv(vm, (void**) &env, NETTY_JNI_VERSION) != JNI_OK) {, +, +void JNI_OnUnload(JavaVM* vm, void* reserved) {, +  JNI_OnUnload_netty_transport_native_epoll(vm, reserved);, +}, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Native.java, +        String []libraryNames = new String[] {, +          "netty-transport-native-epoll",, +          "netty_transport_native_epoll", +        };, +        NativeLibraryLoader.loadFirstAvailable(PlatformDependent.getClassLoader(Native.class), libraryNames);]