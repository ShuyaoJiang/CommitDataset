[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            // total unknown, +            total = -1; // normalize, +            if (progress < 0) {, +                throw new IllegalArgumentException("progress: " + progress + " (expected: >= 0)");, +            }, +        } else if (progress < 0 || progress > total) {, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            // total unknown, +            total = -1; // normalize, +            if (progress < 0) {, +                throw new IllegalArgumentException("progress: " + progress + " (expected: >= 0)");, +            }, +        } else if (progress < 0 || progress > total) {, +++ b/common/src/main/java/io/netty/util/concurrent/GenericProgressiveFutureListener.java, +    /**, +     * Invoked when the operation has progressed., +     *, +     * @param progress the progress of the operation so far (cumulative), +     * @param total the number that signifies the end of the operation when {@code progress} reaches at it., +     *              {@code -1} if the end of operation is unknown., +     */, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            // total unknown, +            total = -1; // normalize, +            if (progress < 0) {, +                throw new IllegalArgumentException("progress: " + progress + " (expected: >= 0)");, +            }, +        } else if (progress < 0 || progress > total) {, +++ b/common/src/main/java/io/netty/util/concurrent/GenericProgressiveFutureListener.java, +    /**, +     * Invoked when the operation has progressed., +     *, +     * @param progress the progress of the operation so far (cumulative), +     * @param total the number that signifies the end of the operation when {@code progress} reaches at it., +     *              {@code -1} if the end of operation is unknown., +     */, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +import io.netty.channel.ChannelProgressiveFuture;, +import io.netty.channel.ChannelProgressiveFutureListener;, +        ctx.write(new ChunkedFile(raf, 0, fileLength, 8192), ctx.newProgressivePromise()).addListener(new ChannelProgressiveFutureListener() {, +            @Override, +            public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) throws Exception {, +                System.err.println("Transfer progress: " + progress);, +            }, +, +            @Override, +            public void operationComplete(ChannelProgressiveFuture future) throws Exception {, +                System.err.println("Transfer complete.");, +            }, +        });, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            // total unknown, +            total = -1; // normalize, +            if (progress < 0) {, +                throw new IllegalArgumentException("progress: " + progress + " (expected: >= 0)");, +            }, +        } else if (progress < 0 || progress > total) {, +++ b/common/src/main/java/io/netty/util/concurrent/GenericProgressiveFutureListener.java, +    /**, +     * Invoked when the operation has progressed., +     *, +     * @param progress the progress of the operation so far (cumulative), +     * @param total the number that signifies the end of the operation when {@code progress} reaches at it., +     *              {@code -1} if the end of operation is unknown., +     */, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +import io.netty.channel.ChannelProgressiveFuture;, +import io.netty.channel.ChannelProgressiveFutureListener;, +        ctx.write(new ChunkedFile(raf, 0, fileLength, 8192), ctx.newProgressivePromise()).addListener(new ChannelProgressiveFutureListener() {, +            @Override, +            public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) throws Exception {, +                System.err.println("Transfer progress: " + progress);, +            }, +, +            @Override, +            public void operationComplete(ChannelProgressiveFuture future) throws Exception {, +                System.err.println("Transfer complete.");, +            }, +        });, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +import io.netty.channel.ChannelProgressivePromise;, +                            } else {, +                                currentWrite.progress();, +                                currentWrite.progress();, +                            } else {, +                                currentWrite.progress();, +        private long progress;, +, +        void progress() {, +            progress ++;, +            if (promise instanceof ChannelProgressivePromise) {, +                ((ChannelProgressivePromise) promise).setProgress(progress, -1);, +            }, +        }, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java]