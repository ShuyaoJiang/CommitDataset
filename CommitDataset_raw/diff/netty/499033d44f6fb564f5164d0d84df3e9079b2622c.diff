[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, "REPLAY");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, "REPLAY");, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +            ContextBoundUnmarshallerProvider.class, "UNMARSHALLER");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, "REPLAY");, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +            ContextBoundUnmarshallerProvider.class, "UNMARSHALLER");, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/CompatibleObjectEncoder.java, +            AttributeKey.valueOf(CompatibleObjectEncoder.class, "OOS");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, "REPLAY");, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +            ContextBoundUnmarshallerProvider.class, "UNMARSHALLER");, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/CompatibleObjectEncoder.java, +            AttributeKey.valueOf(CompatibleObjectEncoder.class, "OOS");, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +    /**, +     * Shortcut of {@link #valueOf(String) valueOf(firstNameComponent.getName() + "#" + secondNameComponent)}., +     */, +    @SuppressWarnings("unchecked"), +    public static <T> AttributeKey<T> valueOf(Class<?> firstNameComponent, String secondNameComponent) {, +        return (AttributeKey<T>) pool.valueOf(firstNameComponent, secondNameComponent);, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +            AttributeKey.valueOf(WebSocketServerHandshaker.class, "HANDSHAKER");, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +    protected static final Signal SIGNAL_UNFINISHED = Signal.valueOf(DecoderResult.class, "UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = Signal.valueOf(DecoderResult.class, "SUCCESS");, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    static final Signal REPLAY = Signal.valueOf(ReplayingDecoder.class, "REPLAY");, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +            ContextBoundUnmarshallerProvider.class, "UNMARSHALLER");, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/CompatibleObjectEncoder.java, +            AttributeKey.valueOf(CompatibleObjectEncoder.class, "OOS");, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +    /**, +     * Shortcut of {@link #valueOf(String) valueOf(firstNameComponent.getName() + "#" + secondNameComponent)}., +     */, +    @SuppressWarnings("unchecked"), +    public static <T> AttributeKey<T> valueOf(Class<?> firstNameComponent, String secondNameComponent) {, +        return (AttributeKey<T>) pool.valueOf(firstNameComponent, secondNameComponent);, +    }, +, +++ b/common/src/main/java/io/netty/util/ConstantPool.java, +     * Shortcut of {@link #valueOf(String) valueOf(firstNameComponent.getName() + "#" + secondNameComponent)}., +     */, +    public T valueOf(Class<?> firstNameComponent, String secondNameComponent) {, +        if (firstNameComponent == null) {, +            throw new NullPointerException("firstNameComponent");, +        }, +        if (secondNameComponent == null) {, +            throw new NullPointerException("secondNameComponent");, +        }, +, +        return valueOf(firstNameComponent.getName() + '#' + secondNameComponent);, +    }, +, +    /**, +     * Returns the {@link Constant} which is assigned to the specified {@code name}., +     * If there's no such {@link Constant}, a new one will be created and returned., +     * Once created, the subsequent calls with the same {@code name} will always return the previously created one, +     * (i.e. singleton.), +     *, +     * @param name the name of the {@link Constant}, +        if (name.isEmpty()) {, +            throw new IllegalArgumentException("empty name");, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java]