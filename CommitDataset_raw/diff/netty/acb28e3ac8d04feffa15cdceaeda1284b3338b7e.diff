[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +    private static final ThreadLocal<StringBuilder> BUILDERS = new ThreadLocal<StringBuilder>() {, +        @Override, +        protected StringBuilder initialValue() {, +            return new StringBuilder(512);, +        }, +, +        @Override, +        public StringBuilder get() {, +            StringBuilder builder = super.get();, +            builder.setLength(0);, +            return builder;, +        }, +    };, +, +, +            StringBuilder line = readLine(buffer, maxInitialLineLength);, +            int chunkSize = getChunkSize(line.toString());, +        StringBuilder line = readHeader(buffer);, +        if (line.length() > 0) {, +                    value = value + ' ' + line.toString().trim();, +            } while (line.length() > 0);, +        StringBuilder line = readHeader(buffer);, +        if (line.length() > 0) {, +                        String newString = current.get(lastPos) + line.toString().trim();, +            } while (line.length() > 0);, +    private StringBuilder readHeader(ByteBuf buffer) {, +        StringBuilder sb = BUILDERS.get();, +        return sb;, +    private static StringBuilder readLine(ByteBuf buffer, int maxLineLength) {, +        StringBuilder sb = BUILDERS.get();, +                    return sb;, +                return sb;, +    private static String[] splitInitialLine(StringBuilder sb) {, +    private static String[] splitHeader(StringBuilder sb) {, +    private static int findNonWhitespace(CharSequence sb, int offset) {, +    private static int findWhitespace(CharSequence sb, int offset) {, +    private static int findEndOfString(CharSequence sb) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +    private static final ThreadLocal<StringBuilder> BUILDERS = new ThreadLocal<StringBuilder>() {, +        @Override, +        protected StringBuilder initialValue() {, +            return new StringBuilder(512);, +        }, +, +        @Override, +        public StringBuilder get() {, +            StringBuilder builder = super.get();, +            builder.setLength(0);, +            return builder;, +        }, +    };, +, +, +            StringBuilder line = readLine(buffer, maxInitialLineLength);, +            int chunkSize = getChunkSize(line.toString());, +        StringBuilder line = readHeader(buffer);, +        if (line.length() > 0) {, +                    value = value + ' ' + line.toString().trim();, +            } while (line.length() > 0);, +        StringBuilder line = readHeader(buffer);, +        if (line.length() > 0) {, +                        String newString = current.get(lastPos) + line.toString().trim();, +            } while (line.length() > 0);, +    private StringBuilder readHeader(ByteBuf buffer) {, +        StringBuilder sb = BUILDERS.get();, +        return sb;, +    private static StringBuilder readLine(ByteBuf buffer, int maxLineLength) {, +        StringBuilder sb = BUILDERS.get();, +                    return sb;, +                return sb;, +    private static String[] splitInitialLine(StringBuilder sb) {, +    private static String[] splitHeader(StringBuilder sb) {, +    private static int findNonWhitespace(CharSequence sb, int offset) {, +    private static int findWhitespace(CharSequence sb, int offset) {, +    private static int findEndOfString(CharSequence sb) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpVersion.java, +    private static final String HTTP_1_0_STRING = "HTTP/1.0";, +    private static final String HTTP_1_1_STRING = "HTTP/1.1";, +, +        text = text.trim();, +        // Try to match without convert to uppercase first as this is what 99% of all clients, +        // will send anyway. Also there is a change to the RFC to make it clear that it is, +        // expected to be case-sensitive, +        //, +        // See:, +        // * http://trac.tools.ietf.org/wg/httpbis/trac/ticket/1, +        // * http://trac.tools.ietf.org/wg/httpbis/trac/wiki, +        //, +        // TODO: Remove the uppercase conversion in 4.1.0 as the RFC state it must be HTTP (uppercase), +        //       See https://github.com/netty/netty/issues/1682, +        //, +        HttpVersion version = version0(text);, +        if (version == null) {, +            text = text.toUpperCase();, +            // try again after convert to uppercase, +            version = version0(text);, +            if (version == null) {, +                // still no match, construct a new one, +                version = new HttpVersion(text, true);]