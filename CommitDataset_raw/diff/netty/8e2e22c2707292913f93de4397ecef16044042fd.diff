[+++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private ChannelHandlerContext ctx;, +    private final ReplayingDecoderBuffer replayable = new ReplayingDecoderBuffer();, +        checkpoint = internalBuffer().readerIndex();, +        return ctx.inboundByteBuffer();, +    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +            ByteBuf in = internalBuffer();, +            replayable.setCumulation(in);, +        ByteBuf in = internalBuffer();, +        replayable.setCumulation(in);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private ChannelHandlerContext ctx;, +    private final ReplayingDecoderBuffer replayable = new ReplayingDecoderBuffer();, +        checkpoint = internalBuffer().readerIndex();, +        return ctx.inboundByteBuffer();, +    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +            ByteBuf in = internalBuffer();, +            replayable.setCumulation(in);, +        ByteBuf in = internalBuffer();, +        replayable.setCumulation(in);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +    private ByteBuf buffer;, +    private SwappedByteBuf swapped;, +    ReplayingDecoderBuffer() { }, +, +        setCumulation(buffer);, +    }, +, +    void setCumulation(ByteBuf buffer) {, +, +        SwappedByteBuf swapped = this.swapped;, +        if (swapped == null) {, +            this.swapped = swapped = new SwappedByteBuf(this);, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private ChannelHandlerContext ctx;, +    private final ReplayingDecoderBuffer replayable = new ReplayingDecoderBuffer();, +        checkpoint = internalBuffer().readerIndex();, +        return ctx.inboundByteBuffer();, +    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +            ByteBuf in = internalBuffer();, +            replayable.setCumulation(in);, +        ByteBuf in = internalBuffer();, +        replayable.setCumulation(in);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +    private ByteBuf buffer;, +    private SwappedByteBuf swapped;, +    ReplayingDecoderBuffer() { }, +, +        setCumulation(buffer);, +    }, +, +    void setCumulation(ByteBuf buffer) {, +, +        SwappedByteBuf swapped = this.swapped;, +        if (swapped == null) {, +            this.swapped = swapped = new SwappedByteBuf(this);, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundByteHandler.java, +     * {@inheritDoc}, +     * An implementation should respect the {@link ChannelConfig#getDefaultHandlerByteBufType()} setting unless, +     * there's a good reason to ignore it.  If in doubt, use {@link ChannelHandlerUtil#allocate(ChannelHandlerContext)}., +     * </p>, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private ChannelHandlerContext ctx;, +    private final ReplayingDecoderBuffer replayable = new ReplayingDecoderBuffer();, +        checkpoint = internalBuffer().readerIndex();, +        return ctx.inboundByteBuffer();, +    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +            ByteBuf in = internalBuffer();, +            replayable.setCumulation(in);, +        ByteBuf in = internalBuffer();, +        replayable.setCumulation(in);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +    private ByteBuf buffer;, +    private SwappedByteBuf swapped;, +    ReplayingDecoderBuffer() { }, +, +        setCumulation(buffer);, +    }, +, +    void setCumulation(ByteBuf buffer) {, +, +        SwappedByteBuf swapped = this.swapped;, +        if (swapped == null) {, +            this.swapped = swapped = new SwappedByteBuf(this);, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundByteHandler.java, +     * {@inheritDoc}, +     * An implementation should respect the {@link ChannelConfig#getDefaultHandlerByteBufType()} setting unless, +     * there's a good reason to ignore it.  If in doubt, use {@link ChannelHandlerUtil#allocate(ChannelHandlerContext)}., +     * </p>, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundHandler.java, +     * Returns a new buffer which will be used to consume inbound data for the given {@link ChannelHandlerContext}., +     * <p>, +     * Please note that this method can be called from any thread repeatatively, and thus you should neither perform]