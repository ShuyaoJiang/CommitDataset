[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriterTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.handler.codec.http2;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.buffer.UnpooledByteBufAllocator;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelPromise;, +import io.netty.channel.DefaultChannelPromise;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.concurrent.ImmediateEventExecutor;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.util.Arrays;, +, +import static org.junit.Assert.*;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.*;, +, +/**, + * Tests for {@link DefaultHttp2FrameWriter}., + */, +public class DefaultHttp2FrameWriterTest {, +    private DefaultHttp2FrameWriter frameWriter;, +, +    private ByteBuf outbound;, +, +    private ByteBuf expectedOutbound;, +, +    private ChannelPromise promise;, +, +    private Http2HeadersEncoder http2HeadersEncoder;, +, +    @Mock, +    private Channel channel;, +, +    @Mock, +    private ChannelFuture future;, +, +    @Mock, +    private ChannelHandlerContext ctx;, +, +    @Before, +    public void setUp() throws Exception {, +        MockitoAnnotations.initMocks(this);, +, +        frameWriter = new DefaultHttp2FrameWriter();, +, +        outbound = Unpooled.buffer();, +, +        expectedOutbound = Unpooled.EMPTY_BUFFER;, +, +        promise = new DefaultChannelPromise(channel, ImmediateEventExecutor.INSTANCE);, +, +        http2HeadersEncoder = new DefaultHttp2HeadersEncoder();, +, +        Answer<Object> answer = new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock var1) throws Throwable {, +                Object msg = var1.getArgument(0);, +                if (msg instanceof ByteBuf) {, +                    outbound.writeBytes((ByteBuf) msg);, +                }, +                ReferenceCountUtil.release(msg);, +                return future;, +            }, +        };, +        when(ctx.write(any())).then(answer);, +        when(ctx.write(any(), any(ChannelPromise.class))).then(answer);, +        when(ctx.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);, +        when(ctx.channel()).thenReturn(channel);, +        when(ctx.executor()).thenReturn(ImmediateEventExecutor.INSTANCE);, +    }, +, +    @After, +    public void tearDown() throws Exception {]