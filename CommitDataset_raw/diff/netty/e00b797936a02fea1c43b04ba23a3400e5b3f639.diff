[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +        final int majorVersion;, +            majorVersion = 6;, +        } else {, +            majorVersion = majorVersionFromJavaSpecificationVersion();, +        logger.debug("Java version: {}", majorVersion);, +, +        return majorVersion;, +    }, +, +    static int majorVersionFromJavaSpecificationVersion() {, +            final String javaSpecVersion = AccessController.doPrivileged(new PrivilegedAction<String>() {, +                @Override, +                public String run() {, +                    return System.getProperty("java.specification.version");, +                }, +            });, +            return majorVersion(javaSpecVersion);, +        } catch (SecurityException e) {, +            logger.debug("security exception while reading java.specification.version", e);, +            return 6;, +        }, +    static int majorVersion(final String javaSpecVersion) {, +        final String[] components = javaSpecVersion.split("\\.");, +        final int[] version = new int[components.length];, +        for (int i = 0; i < components.length; i++) {, +            version[i] = Integer.parseInt(components[i]);, +        if (version[0] == 1) {, +            assert version[1] >= 6;, +            return version[1];, +        } else {, +            return version[0];, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +        final int majorVersion;, +            majorVersion = 6;, +        } else {, +            majorVersion = majorVersionFromJavaSpecificationVersion();, +        logger.debug("Java version: {}", majorVersion);, +, +        return majorVersion;, +    }, +, +    static int majorVersionFromJavaSpecificationVersion() {, +            final String javaSpecVersion = AccessController.doPrivileged(new PrivilegedAction<String>() {, +                @Override, +                public String run() {, +                    return System.getProperty("java.specification.version");, +                }, +            });, +            return majorVersion(javaSpecVersion);, +        } catch (SecurityException e) {, +            logger.debug("security exception while reading java.specification.version", e);, +            return 6;, +        }, +    static int majorVersion(final String javaSpecVersion) {, +        final String[] components = javaSpecVersion.split("\\.");, +        final int[] version = new int[components.length];, +        for (int i = 0; i < components.length; i++) {, +            version[i] = Integer.parseInt(components[i]);, +        if (version[0] == 1) {, +            assert version[1] >= 6;, +            return version[1];, +        } else {, +            return version[0];, +++ b/common/src/test/java/io/netty/util/internal/PlatformDependentTest.java, +import java.security.Permission;, +, +    @Test, +    public void testMajorVersionFromJavaSpecificationVersion() {, +        final SecurityManager current = System.getSecurityManager();, +, +        try {, +            System.setSecurityManager(new SecurityManager() {, +                @Override, +                public void checkPropertyAccess(String key) {, +                    if (key.equals("java.specification.version")) {, +                        // deny, +                        throw new SecurityException(key);, +                    }, +                }, +, +                // so we can restore the security manager, +                @Override, +                public void checkPermission(Permission perm) {, +                }, +            });, +, +            assertEquals(6, PlatformDependent.majorVersionFromJavaSpecificationVersion());, +        } finally {, +            System.setSecurityManager(current);, +        }, +    }, +, +    @Test, +    public void testMajorVersion() {, +        assertEquals(6, PlatformDependent.majorVersion("1.6"));]