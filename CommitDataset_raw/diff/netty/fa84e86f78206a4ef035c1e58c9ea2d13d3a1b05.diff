[+++ b/codec/src/main/java/io/netty/handler/codec/compression/Lz4FrameEncoder.java, +import io.netty.buffer.Unpooled;, +import java.nio.ByteBuffer;, +    private final int blockSize;, +, +    private ByteBuf buffer;, +     * @param factory         user customizable {@link LZ4Factory} instance, +        this.blockSize = blockSize;, +        final ByteBuf buffer = this.buffer;, +        final int blockSize = buffer.capacity();, +        checksum.update(buffer.array(), buffer.arrayOffset(), currentBlockLength);, +            ByteBuffer outNioBuffer = out.internalNioBuffer(idx + HEADER_LENGTH, out.writableBytes() - HEADER_LENGTH);, +            int pos = outNioBuffer.position();, +            // We always want to start at position 0 as we take care of reusing the buffer in the encode(...) loop., +            compressor.compress(buffer.internalNioBuffer(0, currentBlockLength), outNioBuffer);, +            compressedLength = outNioBuffer.position() - pos;, +            out.setBytes(idx + HEADER_LENGTH, buffer, 0, currentBlockLength);, +        out.setByte(idx + TOKEN_OFFSET, (byte) (blockType | compressionLevel));, +        out.setIntLE(idx + COMPRESSED_LENGTH_OFFSET, compressedLength);, +        out.setIntLE(idx + DECOMPRESSED_LENGTH_OFFSET, currentBlockLength);, +        out.setIntLE(idx + CHECKSUM_OFFSET, check);, +        try {, +            footer.setByte(idx + TOKEN_OFFSET, (byte) (BLOCK_TYPE_NON_COMPRESSED | compressionLevel));, +            footer.setInt(idx + COMPRESSED_LENGTH_OFFSET, 0);, +            footer.setInt(idx + DECOMPRESSED_LENGTH_OFFSET, 0);, +            footer.setInt(idx + CHECKSUM_OFFSET, 0);, +, +        } finally {, +            cleanup();, +        }, +    private void cleanup() {, +        compressor = null;, +        checksum = null;, +        if (buffer != null) {, +            buffer.release();, +            buffer = null;, +        }, +        // Ensure we use a heap based ByteBuf., +        buffer = Unpooled.wrappedBuffer(new byte[blockSize]);, +    }, +, +    @Override, +    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {, +        super.handlerRemoved(ctx);, +        cleanup();]