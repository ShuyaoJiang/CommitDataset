[+++ b/microbench/src/main/java/io/netty/microbench/http2/NoPriorityByteDistributionBenchmark.java, +        private static final ChannelMetadata TEST_METADATA = new ChannelMetadata(false);, +            return TEST_METADATA;, +++ b/microbench/src/main/java/io/netty/microbench/http2/NoPriorityByteDistributionBenchmark.java, +        private static final ChannelMetadata TEST_METADATA = new ChannelMetadata(false);, +            return TEST_METADATA;, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +    /**, +     * @deprecated There is state for {@link #maxMessagesPerRead()} which is typically based upon channel type., +     */, +    @Deprecated, +    public AdaptiveRecvByteBufAllocator() {, +++ b/microbench/src/main/java/io/netty/microbench/http2/NoPriorityByteDistributionBenchmark.java, +        private static final ChannelMetadata TEST_METADATA = new ChannelMetadata(false);, +            return TEST_METADATA;, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +    /**, +     * @deprecated There is state for {@link #maxMessagesPerRead()} which is typically based upon channel type., +     */, +    @Deprecated, +    public AdaptiveRecvByteBufAllocator() {, +++ b/transport/src/main/java/io/netty/channel/ChannelMetadata.java, +    private final int defaultMaxMessagesPerRead;, +     * @param defaultMaxMessagesPerRead If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this value will be, +     * set for {@link MaxMessagesRecvByteBufAllocator#maxMessagesPerRead()}. Must be {@code > 0}., +    public ChannelMetadata(boolean hasDisconnect, int defaultMaxMessagesPerRead) {, +        if (defaultMaxMessagesPerRead <= 0) {, +            throw new IllegalArgumentException("defaultMaxMessagesPerRead: " + defaultMaxMessagesPerRead +, +                                               " (expected > 0)");, +        this.defaultMaxMessagesPerRead = defaultMaxMessagesPerRead;, +     * If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this is the default value for, +    public int defaultMaxMessagesPerRead() {, +        return defaultMaxMessagesPerRead;, +++ b/microbench/src/main/java/io/netty/microbench/http2/NoPriorityByteDistributionBenchmark.java, +        private static final ChannelMetadata TEST_METADATA = new ChannelMetadata(false);, +            return TEST_METADATA;, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +    /**, +     * @deprecated There is state for {@link #maxMessagesPerRead()} which is typically based upon channel type., +     */, +    @Deprecated, +    public AdaptiveRecvByteBufAllocator() {, +++ b/transport/src/main/java/io/netty/channel/ChannelMetadata.java, +    private final int defaultMaxMessagesPerRead;, +     * @param defaultMaxMessagesPerRead If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this value will be, +     * set for {@link MaxMessagesRecvByteBufAllocator#maxMessagesPerRead()}. Must be {@code > 0}., +    public ChannelMetadata(boolean hasDisconnect, int defaultMaxMessagesPerRead) {, +        if (defaultMaxMessagesPerRead <= 0) {, +            throw new IllegalArgumentException("defaultMaxMessagesPerRead: " + defaultMaxMessagesPerRead +, +                                               " (expected > 0)");, +        this.defaultMaxMessagesPerRead = defaultMaxMessagesPerRead;, +     * If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this is the default value for, +    public int defaultMaxMessagesPerRead() {, +        return defaultMaxMessagesPerRead;, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +    private volatile RecvByteBufAllocator rcvBufAllocator;, +        this(channel, new AdaptiveRecvByteBufAllocator());, +, +    protected DefaultChannelConfig(Channel channel, RecvByteBufAllocator allocator) {, +        setRecvByteBufAllocator(allocator, channel.metadata());, +        rcvBufAllocator = checkNotNull(allocator, "allocator");, +        return this;, +     * @param metadata Used to set the {@link ChannelMetadata#defaultMaxMessagesPerRead()} if {@code allocator}, +    private void setRecvByteBufAllocator(RecvByteBufAllocator allocator, ChannelMetadata metadata) {, +        if (allocator instanceof MaxMessagesRecvByteBufAllocator) {, +            ((MaxMessagesRecvByteBufAllocator) allocator).maxMessagesPerRead(metadata.defaultMaxMessagesPerRead());, +        } else if (allocator == null) {, +++ b/microbench/src/main/java/io/netty/microbench/http2/NoPriorityByteDistributionBenchmark.java, +        private static final ChannelMetadata TEST_METADATA = new ChannelMetadata(false);, +            return TEST_METADATA;, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +    /**, +     * @deprecated There is state for {@link #maxMessagesPerRead()} which is typically based upon channel type., +     */, +    @Deprecated, +    public AdaptiveRecvByteBufAllocator() {, +++ b/transport/src/main/java/io/netty/channel/ChannelMetadata.java, +    private final int defaultMaxMessagesPerRead;, +     * @param defaultMaxMessagesPerRead If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this value will be, +     * set for {@link MaxMessagesRecvByteBufAllocator#maxMessagesPerRead()}. Must be {@code > 0}., +    public ChannelMetadata(boolean hasDisconnect, int defaultMaxMessagesPerRead) {, +        if (defaultMaxMessagesPerRead <= 0) {, +            throw new IllegalArgumentException("defaultMaxMessagesPerRead: " + defaultMaxMessagesPerRead +, +                                               " (expected > 0)");, +        this.defaultMaxMessagesPerRead = defaultMaxMessagesPerRead;, +     * If a {@link MaxMessagesRecvByteBufAllocator} is in use, then this is the default value for, +    public int defaultMaxMessagesPerRead() {, +        return defaultMaxMessagesPerRead;, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +    private volatile RecvByteBufAllocator rcvBufAllocator;, +        this(channel, new AdaptiveRecvByteBufAllocator());, +, +    protected DefaultChannelConfig(Channel channel, RecvByteBufAllocator allocator) {, +        setRecvByteBufAllocator(allocator, channel.metadata());, +        rcvBufAllocator = checkNotNull(allocator, "allocator");, +        return this;, +     * @param metadata Used to set the {@link ChannelMetadata#defaultMaxMessagesPerRead()} if {@code allocator}, +    private void setRecvByteBufAllocator(RecvByteBufAllocator allocator, ChannelMetadata metadata) {]