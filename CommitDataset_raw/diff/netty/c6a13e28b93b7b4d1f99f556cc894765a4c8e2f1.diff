[+++ b/common/src/main/java/io/netty/util/ConstantPool.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.atomic.AtomicInteger;, +    private final ConcurrentMap<String, T> constants = PlatformDependent.newConcurrentHashMap();, +    private AtomicInteger nextId = new AtomicInteger(1);, +        checkNotNullAndNotEmpty(name);, +        return getOrCreate(name);, +    }, +    /**, +     * Get existing constant by name or creates new one if not exists. Threadsafe, +     *, +     * @param name the name of the {@link Constant}, +     */, +    private T getOrCreate(String name) {, +        T constant = constants.get(name);, +        if (constant == null) {, +            final T tempConstant = newConstant(nextId(), name);, +            constant = constants.putIfAbsent(name, tempConstant);, +            if (constant == null) {, +                return tempConstant;, +        return constant;, +        checkNotNullAndNotEmpty(name);, +        return createOrThrow(name);, +    }, +, +    /**, +     * Creates constant by name or throws exception. Threadsafe, +     *, +     * @param name the name of the {@link Constant}, +     */, +    private T createOrThrow(String name) {, +        T constant = constants.get(name);, +        if (constant == null) {, +            final T tempConstant = newConstant(nextId(), name);, +            constant = constants.putIfAbsent(name, tempConstant);, +            if (constant == null) {, +                return tempConstant;, +            }, +        }, +, +        return nextId.getAndIncrement();]