[+++ b/src/main/java/org/jboss/netty/buffer/ReadOnlyChannelBuffer.java, +        return buffer.copy(index, length);, +    @Override, +    public ByteBuffer[] toByteBuffers(int index, int length) {, +        ByteBuffer[] bufs = buffer.toByteBuffers(index, length);, +        for (int i = 0; i < bufs.length; i ++) {, +            bufs[i] = bufs[i].asReadOnlyBuffer();, +        }, +        return bufs;, +    }, +, +++ b/src/main/java/org/jboss/netty/buffer/ReadOnlyChannelBuffer.java, +        return buffer.copy(index, length);, +    @Override, +    public ByteBuffer[] toByteBuffers(int index, int length) {, +        ByteBuffer[] bufs = buffer.toByteBuffers(index, length);, +        for (int i = 0; i < bufs.length; i ++) {, +            bufs[i] = bufs[i].asReadOnlyBuffer();, +        }, +        return bufs;, +    }, +, +++ b/src/test/java/org/jboss/netty/buffer/ReadOnlyChannelBufferTest.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.buffer;, +, +import static org.easymock.EasyMock.*;, +import static org.jboss.netty.buffer.ChannelBuffers.*;, +import static org.junit.Assert.*;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +, +import org.junit.Test;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public class ReadOnlyChannelBufferTest {, +, +    @Test(expected = NullPointerException.class), +    public void shouldNotAllowNullInConstructor() {, +        new ReadOnlyChannelBuffer(null);, +    }, +, +    @Test, +    public void testUnmodifiableBuffer() {, +        assertTrue(ChannelBuffers.unmodifiableBuffer(ChannelBuffers.buffer(1)) instanceof ReadOnlyChannelBuffer);, +    }, +, +    @Test, +    public void testUnwrap() {, +        ChannelBuffer buf = ChannelBuffers.buffer(1);, +        assertSame(buf, ((WrappedChannelBuffer) ChannelBuffers.unmodifiableBuffer(buf)).unwrap());, +    }, +, +    @Test, +    public void shouldHaveSameByteOrder() {, +        ChannelBuffer buf = ChannelBuffers.buffer(ChannelBuffers.LITTLE_ENDIAN, 1);, +        assertSame(ChannelBuffers.LITTLE_ENDIAN, ChannelBuffers.unmodifiableBuffer(buf).order());, +    }, +, +    @Test, +    public void shouldReturnReadOnlyDerivedBuffer() {, +        ChannelBuffer buf = ChannelBuffers.unmodifiableBuffer(ChannelBuffers.buffer(1));, +        assertTrue(buf.duplicate() instanceof ReadOnlyChannelBuffer);, +        assertTrue(buf.slice() instanceof ReadOnlyChannelBuffer);, +        assertTrue(buf.slice(0, 1) instanceof ReadOnlyChannelBuffer);, +        assertTrue(buf.duplicate() instanceof ReadOnlyChannelBuffer);, +    }, +]