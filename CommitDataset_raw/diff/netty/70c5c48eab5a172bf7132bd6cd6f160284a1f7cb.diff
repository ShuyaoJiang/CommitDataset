[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +, +            sanitizeHeadersBeforeEncode(m, state == ST_CONTENT_ALWAYS_EMPTY);, +, +            encodeHeaders(m.headers(), buf);, +            ByteBufUtil.writeShortBE(buf, CRLF_SHORT);, +, +            headersEncodedSizeAccumulator = HEADERS_WEIGHT_NEW * padSizeForAccumulation(buf.readableBytes()) +, +                                            HEADERS_WEIGHT_HISTORICAL * headersEncodedSizeAccumulator;, +     * Allows to sanitize headers of the message before encoding these., +     */, +    protected void sanitizeHeadersBeforeEncode(@SuppressWarnings("unused") H msg, boolean isAlwaysEmpty) {, +        // noop, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +, +            sanitizeHeadersBeforeEncode(m, state == ST_CONTENT_ALWAYS_EMPTY);, +, +            encodeHeaders(m.headers(), buf);, +            ByteBufUtil.writeShortBE(buf, CRLF_SHORT);, +, +            headersEncodedSizeAccumulator = HEADERS_WEIGHT_NEW * padSizeForAccumulation(buf.readableBytes()) +, +                                            HEADERS_WEIGHT_HISTORICAL * headersEncodedSizeAccumulator;, +     * Allows to sanitize headers of the message before encoding these., +     */, +    protected void sanitizeHeadersBeforeEncode(@SuppressWarnings("unused") H msg, boolean isAlwaysEmpty) {, +        // noop, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseEncoder.java, +, +    @Override, +    protected void sanitizeHeadersBeforeEncode(HttpResponse msg, boolean isAlwaysEmpty) {, +        if (isAlwaysEmpty) {, +            HttpResponseStatus status = msg.status();, +            if (status.codeClass() == HttpStatusClass.INFORMATIONAL ||, +                    status.code() == HttpResponseStatus.NO_CONTENT.code()) {, +, +                // Stripping Content-Length:, +                // See https://tools.ietf.org/html/rfc7230#section-3.3.2, +                msg.headers().remove(HttpHeaderNames.CONTENT_LENGTH);, +, +                // Stripping Transfer-Encoding:, +                // See https://tools.ietf.org/html/rfc7230#section-3.3.1, +                msg.headers().remove(HttpHeaderNames.TRANSFER_ENCODING);, +            }, +        }, +    }, +, +    @Override, +    protected boolean isContentAlwaysEmpty(HttpResponse msg) {, +        // Correctly handle special cases as stated in:, +        // https://tools.ietf.org/html/rfc7230#section-3.3.3, +        HttpResponseStatus status = msg.status();, +, +        if (status.codeClass() == HttpStatusClass.INFORMATIONAL) {, +, +            if (status.code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {, +                // We need special handling for WebSockets version 00 as it will include an body., +                // Fortunally this version should not really be used in the wild very often., +                // See https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00#section-1.2, +                return msg.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_VERSION);, +            }, +            return true;, +        }, +        return status.code() == HttpResponseStatus.NO_CONTENT.code() ||, +                status.code() == HttpResponseStatus.NOT_MODIFIED.code();, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +, +            sanitizeHeadersBeforeEncode(m, state == ST_CONTENT_ALWAYS_EMPTY);, +, +            encodeHeaders(m.headers(), buf);, +            ByteBufUtil.writeShortBE(buf, CRLF_SHORT);, +, +            headersEncodedSizeAccumulator = HEADERS_WEIGHT_NEW * padSizeForAccumulation(buf.readableBytes()) +, +                                            HEADERS_WEIGHT_HISTORICAL * headersEncodedSizeAccumulator;, +     * Allows to sanitize headers of the message before encoding these., +     */, +    protected void sanitizeHeadersBeforeEncode(@SuppressWarnings("unused") H msg, boolean isAlwaysEmpty) {, +        // noop, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseEncoder.java, +, +    @Override, +    protected void sanitizeHeadersBeforeEncode(HttpResponse msg, boolean isAlwaysEmpty) {, +        if (isAlwaysEmpty) {, +            HttpResponseStatus status = msg.status();, +            if (status.codeClass() == HttpStatusClass.INFORMATIONAL ||, +                    status.code() == HttpResponseStatus.NO_CONTENT.code()) {, +, +                // Stripping Content-Length:, +                // See https://tools.ietf.org/html/rfc7230#section-3.3.2, +                msg.headers().remove(HttpHeaderNames.CONTENT_LENGTH);, +]