[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +jint _write(JNIEnv* env, jclass clazz, jint fd, void* buffer, jint pos, jint limit) {, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_write0(JNIEnv* env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    return _write(env, clazz, fd, buffer, pos, limit);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_writeAddress0(JNIEnv* env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return _write(env, clazz, fd, (void*) address, pos, limit);, +jint _sendTo(JNIEnv* env, jint fd, void* buffer, jint pos, jint limit ,jbyteArray address, jint scopeId, jint port) {, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendTo0(JNIEnv* env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit, jbyteArray address, jint scopeId, jint port) {, +    return _sendTo(env, fd, buffer, pos, limit, address, scopeId, port);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendToAddress0(JNIEnv* env, jclass clazz, jint fd, jlong memoryAddress, jint pos, jint limit ,jbyteArray address, jint scopeId, jint port) {, +    return _sendTo(env, fd, (void*) memoryAddress, pos, limit, address, scopeId, port);, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendmmsg0(JNIEnv* env, jclass clazz, jint fd, jobjectArray packets, jint offset, jint len) {, +        return -err;, +jlong _writev(JNIEnv* env, jclass clazz, jint fd, struct iovec* iov, jint length) {, +        return -err;, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_writev0(JNIEnv* env, jclass clazz, jint fd, jobjectArray buffers, jint offset, jint length) {, +    return _writev(env, clazz, fd, iov, length);, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_writevAddresses0(JNIEnv* env, jclass clazz, jint fd, jlong memoryAddress, jint length) {, +    return _writev(env, clazz, fd, iov, length);, +jint _read(JNIEnv* env, jclass clazz, jint fd, void* buffer, jint pos, jint limit) {, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_read0(JNIEnv* env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    return _read(env, clazz, fd, buffer, pos, limit);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_readAddress0(JNIEnv* env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return _read(env, clazz, fd, (void*) address, pos, limit);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_close0(JNIEnv* env, jclass clazz, jint fd) {, +       return -errno;, +   return 0;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_shutdown0(JNIEnv* env, jclass clazz, jint fd, jboolean read, jboolean write) {, +        return -errno;, +    return 0;, +        return -errno;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_bind(JNIEnv* env, jclass clazz, jint fd, jbyteArray address, jint scopeId, jint port) {, +        return -1;, +        return -errno;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_listen0(JNIEnv* env, jclass clazz, jint fd, jint backlog) {, +        return -errno;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_connect(JNIEnv* env, jclass clazz, jint fd, jbyteArray address, jint scopeId, jint port) {, +        // A runtime exception was thrown, +        return -err;, +    return 0;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_finishConnect0(JNIEnv* env, jclass clazz, jint fd) {, +        return -1;, +    if (optval == 0) {, +        // connect succeeded, +        return 0;, +    }, +    return -optval;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_accept0(JNIEnv* env, jclass clazz, jint fd) {, +        return -err;, +            return -errno;, +            return -errno;, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_errnoEBADF(JNIEnv* env, jclass clazz) {, +    return EBADF;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_errnoEPIPE(JNIEnv* env, jclass clazz) {, +    return EPIPE;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_errnoEAGAIN(JNIEnv* env, jclass clazz) {, +    return EAGAIN;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_errnoEWOULDBLOCK(JNIEnv* env, jclass clazz) {, +    return EWOULDBLOCK;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_errnoEINPROGRESS(JNIEnv* env, jclass clazz) {, +    return EINPROGRESS;, +}, +, +JNIEXPORT jstring JNICALL Java_io_netty_channel_epoll_Native_strError(JNIEnv* env, jclass clazz, jint error) {, +    char* err = strerror(error);, +    return (*env)->NewStringUTF(env, err);, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +jint _write(JNIEnv* env, jclass clazz, jint fd, void* buffer, jint pos, jint limit) {, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_write0(JNIEnv* env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    return _write(env, clazz, fd, buffer, pos, limit);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_writeAddress0(JNIEnv* env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return _write(env, clazz, fd, (void*) address, pos, limit);, +jint _sendTo(JNIEnv* env, jint fd, void* buffer, jint pos, jint limit ,jbyteArray address, jint scopeId, jint port) {, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendTo0(JNIEnv* env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit, jbyteArray address, jint scopeId, jint port) {, +    return _sendTo(env, fd, buffer, pos, limit, address, scopeId, port);, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendToAddress0(JNIEnv* env, jclass clazz, jint fd, jlong memoryAddress, jint pos, jint limit ,jbyteArray address, jint scopeId, jint port) {, +    return _sendTo(env, fd, (void*) memoryAddress, pos, limit, address, scopeId, port);, +        return -err;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sendmmsg0(JNIEnv* env, jclass clazz, jint fd, jobjectArray packets, jint offset, jint len) {, +        return -err;, +jlong _writev(JNIEnv* env, jclass clazz, jint fd, struct iovec* iov, jint length) {, +        return -err;, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_writev0(JNIEnv* env, jclass clazz, jint fd, jobjectArray buffers, jint offset, jint length) {, +    return _writev(env, clazz, fd, iov, length);]