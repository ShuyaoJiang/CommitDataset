[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    private final Queue<Runnable> registerTaskQueue = new LinkedTransferQueue<Runnable>();, +    private final Queue<Runnable> writeTaskQueue = new LinkedTransferQueue<Runnable>();, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    private final Queue<Runnable> registerTaskQueue = new LinkedTransferQueue<Runnable>();, +    private final Queue<Runnable> writeTaskQueue = new LinkedTransferQueue<Runnable>();, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.LinkedTransferQueue;, +        super(corePoolSize, corePoolSize, keepAliveTime, unit, new LinkedTransferQueue<Runnable>(), threadFactory);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    private final Queue<Runnable> registerTaskQueue = new LinkedTransferQueue<Runnable>();, +    private final Queue<Runnable> writeTaskQueue = new LinkedTransferQueue<Runnable>();, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.LinkedTransferQueue;, +        super(corePoolSize, corePoolSize, keepAliveTime, unit, new LinkedTransferQueue<Runnable>(), threadFactory);, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    private final Queue<Runnable> registerTaskQueue = new LinkedTransferQueue<Runnable>();, +    private final Queue<Runnable> writeTaskQueue = new LinkedTransferQueue<Runnable>();, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.LinkedTransferQueue;, +        super(corePoolSize, corePoolSize, keepAliveTime, unit, new LinkedTransferQueue<Runnable>(), threadFactory);, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import java.util.Queue;, +import org.jboss.netty.util.LinkedTransferQueue;, +    private final Queue<Runnable> registerTaskQueue = new LinkedTransferQueue<Runnable>();, +    private final Queue<Runnable> writeTaskQueue = new LinkedTransferQueue<Runnable>();, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +            Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.LinkedTransferQueue;, +        super(corePoolSize, corePoolSize, keepAliveTime, unit, new LinkedTransferQueue<Runnable>(), threadFactory);, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/util/LinkedTransferQueue.java, +//    static final class PaddedAtomicReference<T> extends AtomicReference<T> {, +//        private static final long serialVersionUID = 4684288940772921317L;, +//, +//        // enough padding for 64bytes with 4byte refs, +//        Object p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pa, pb, pc, pd, pe;, +//        PaddedAtomicReference(T r) { super(r); }, +//    }, +    private transient final AtomicReference<QNode> head;, +    private transient final AtomicReference<QNode> tail;, +    private transient final AtomicReference<QNode> cleanMe;, +        final AtomicReference<QNode> head = this.head;, +        final AtomicReference<QNode> tail = this.tail;, +        final AtomicReference<QNode> head = this.head;, +        final AtomicReference<QNode> tail = this.tail;, +        head = new AtomicReference<QNode>(dummy);, +        tail = new AtomicReference<QNode>(dummy);, +        cleanMe = new AtomicReference<QNode>(null);]