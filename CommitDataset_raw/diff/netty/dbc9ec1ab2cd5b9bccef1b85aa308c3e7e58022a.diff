[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.Collections;, +                // Use SNI if peerHost was specified and a valid hostname, +                if (clientMode && SslUtils.isValidHostNameForSNI(peerHost)) {, +                    sniHostNames = Collections.singletonList(peerHost);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.Collections;, +                // Use SNI if peerHost was specified and a valid hostname, +                if (clientMode && SslUtils.isValidHostNameForSNI(peerHost)) {, +                    sniHostNames = Collections.singletonList(peerHost);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslUtils.java, +import io.netty.util.NetUtil;, +    /**, +     * Validate that the given hostname can be used in SNI extension., +     */, +    static boolean isValidHostNameForSNI(String hostname) {, +        return hostname != null &&, +               hostname.indexOf('.') > 0 &&, +               !hostname.endsWith(".") &&, +               !NetUtil.isValidIpV4Address(hostname) &&, +               !NetUtil.isValidIpV6Address(hostname);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.Collections;, +                // Use SNI if peerHost was specified and a valid hostname, +                if (clientMode && SslUtils.isValidHostNameForSNI(peerHost)) {, +                    sniHostNames = Collections.singletonList(peerHost);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslUtils.java, +import io.netty.util.NetUtil;, +    /**, +     * Validate that the given hostname can be used in SNI extension., +     */, +    static boolean isValidHostNameForSNI(String hostname) {, +        return hostname != null &&, +               hostname.indexOf('.') > 0 &&, +               !hostname.endsWith(".") &&, +               !NetUtil.isValidIpV4Address(hostname) &&, +               !NetUtil.isValidIpV6Address(hostname);, +    }, +, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +import javax.net.ssl.SNIHostName;, +                if (SslUtils.isValidHostNameForSNI(expectedHost)) {, +                    assertEquals(1, parameters.getServerNames().size());, +                    assertEquals(new SNIHostName(expectedHost), parameters.getServerNames().get(0));, +                }]