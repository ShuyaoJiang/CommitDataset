[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java, +import java.util.ArrayList;, +            readTrailingHeaders(buffer);, +    private void readTrailingHeaders(ChannelBuffer buffer) throws TooLongFrameException {, +        headerSize = 0;, +        String line = readHeader(buffer);, +        String lastHeader = null;, +        if (line.length() != 0) {, +            List<String> names = new ArrayList<String>(4);, +            List<String> values = new ArrayList<String>(4);, +            do {, +                char firstChar = line.charAt(0);, +                if (lastHeader != null && (firstChar == ' ' || firstChar == '\t')) {, +                    int lastPos = values.size() - 1;, +                    String newString = values.get(lastPos) + line.trim();, +                    values.set(lastPos, newString);, +                } else {, +                    String[] header = splitHeader(line);, +                    names.add(header[0]);, +                    values.add(header[1]);, +                    lastHeader = header[0];, +                }, +, +                line = readHeader(buffer);, +            } while (line.length() != 0);, +, +            // Merge the trailing headers into the message., +            HttpMessage message = this.message;, +            for (int i = 0; i < names.size(); i ++) {, +                String name = names.get(i);, +                String value = values.get(i);, +, +                // Discard the prohibited headers., +                if (name.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH)) {, +                    continue;, +                }, +                if (name.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING)) {, +                    continue;, +                }, +                if (name.equalsIgnoreCase(HttpHeaders.Names.TRAILER)) {, +                    continue;, +                }, +, +                message.addHeader(name, value);, +            }, +        }, +    }, +]