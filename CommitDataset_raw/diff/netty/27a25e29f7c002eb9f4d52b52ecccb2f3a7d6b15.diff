[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import io.netty.util.CharsetUtil;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    // See https://github.com/netty/netty/pull/3263, +    @Test, +    public void testFireChannelReadCompleteOnlyWhenDecoded() {, +        final AtomicInteger readComplete = new AtomicInteger();, +        EmbeddedChannel ch = new EmbeddedChannel(new ByteToMessageDecoder() {, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                // Do nothing, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +                readComplete.incrementAndGet();, +            }, +        });, +        Assert.assertFalse(ch.writeInbound(Unpooled.copiedBuffer("test", CharsetUtil.US_ASCII)));, +        Assert.assertFalse(ch.finish());, +        Assert.assertEquals(0, readComplete.get());, +    }, +, +    // See https://github.com/netty/netty/pull/3263, +    @Test, +    public void testFireChannelReadCompleteWhenDecodeOnce() {, +        final AtomicInteger readComplete = new AtomicInteger();, +        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +                ctx.fireChannelRead(msg);, +                ctx.fireChannelRead(Unpooled.EMPTY_BUFFER);, +            }, +        }, new ByteToMessageDecoder() {, +            private boolean first = true;, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                if (first) {, +                    first = false;, +                    out.add(in.readSlice(in.readableBytes()).retain());, +                }, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +                readComplete.incrementAndGet();, +            }, +        });, +        Assert.assertTrue(ch.writeInbound(Unpooled.copiedBuffer("test", CharsetUtil.US_ASCII)));, +        Assert.assertTrue(ch.finish());, +        Assert.assertEquals(1, readComplete.get());, +        for (;;) {, +            ByteBuf buf = ch.readInbound();, +            if (buf == null) {, +                break;, +            }, +            buf.release();, +        }, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import io.netty.util.CharsetUtil;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    // See https://github.com/netty/netty/pull/3263, +    @Test, +    public void testFireChannelReadCompleteOnlyWhenDecoded() {, +        final AtomicInteger readComplete = new AtomicInteger();, +        EmbeddedChannel ch = new EmbeddedChannel(new ByteToMessageDecoder() {, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                // Do nothing, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +                readComplete.incrementAndGet();, +            }, +        });, +        Assert.assertFalse(ch.writeInbound(Unpooled.copiedBuffer("test", CharsetUtil.US_ASCII)));, +        Assert.assertFalse(ch.finish());, +        Assert.assertEquals(0, readComplete.get());, +    }, +, +    // See https://github.com/netty/netty/pull/3263, +    @Test, +    public void testFireChannelReadCompleteWhenDecodeOnce() {, +        final AtomicInteger readComplete = new AtomicInteger();, +        EmbeddedChannel ch = new EmbeddedChannel(new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +                ctx.fireChannelRead(msg);, +                ctx.fireChannelRead(Unpooled.EMPTY_BUFFER);, +            }, +        }, new ByteToMessageDecoder() {, +            private boolean first = true;, +            @Override]