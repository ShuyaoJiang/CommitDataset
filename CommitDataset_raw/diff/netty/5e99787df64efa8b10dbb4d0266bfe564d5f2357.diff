[+++ b/src/main/java/org/jboss/netty/example/discard/DiscardClient.java, +/**, + * Keeps sending random data to the specified address., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + */, +        DiscardClientHandler handler = new DiscardClientHandler(firstMessageSize);, +++ b/src/main/java/org/jboss/netty/example/discard/DiscardClient.java, +/**, + * Keeps sending random data to the specified address., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + */, +        DiscardClientHandler handler = new DiscardClientHandler(firstMessageSize);, +++ b/src/main/java/org/jboss/netty/example/discard/DiscardClientHandler.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.example.discard;, +, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelEvent;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelHandler;, +, +/**, + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + */, +@ChannelPipelineCoverage("all"), +public class DiscardClientHandler extends SimpleChannelHandler {, +, +    private static final Logger logger = Logger.getLogger(, +            DiscardClientHandler.class.getName());, +, +    private final Random random = new Random();, +    private final int messageSize;, +    private final AtomicLong transferredBytes = new AtomicLong();, +, +    public DiscardClientHandler(int messageSize) {, +        if (messageSize <= 0) {, +            throw new IllegalArgumentException(, +                    "messageSize: " + messageSize);, +        }, +        this.messageSize = messageSize;, +    }, +, +    public long getTransferredBytes() {, +        return transferredBytes.get();, +    }, +, +    @Override, +    public void handleUpstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, +        if (e instanceof ChannelStateEvent) {, +            logger.info(e.toString());, +        }, +, +        // Let SimpleChannelHandler call actual event handler methods below., +        super.handleUpstream(ctx, e);, +    }, +]