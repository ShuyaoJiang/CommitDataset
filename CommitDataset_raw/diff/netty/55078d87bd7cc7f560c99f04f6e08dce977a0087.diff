[+++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * <h3>Retrieving for later use</h3>, + *, + * You can keep the {@link ChannelHandlerContext} for later use, such as, + * triggering an event outside the handler methods, even from a different thread., + * <pre>, + * public class MyHandler extends SimpleChannelHandler, + *                        implements LifeCycleAwareChannelHandler {, + *, + *     private ChannelHandlerContex ctx;, + *, + *     public void beforeAdd(ChannelHandlerContext ctx) {, + *         this.ctx = ctx;, + *     }, + *, + *     public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) {, + *         ctx.setAttachment(evt.getMessage());, + *     }, + *, + *     public Object getLastReceivedMessage() {, + *         return ctx.getAttachment();, + *     }, + *     ..., + * }, + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * <h3>Retrieving for later use</h3>, + *, + * You can keep the {@link ChannelHandlerContext} for later use, such as, + * triggering an event outside the handler methods, even from a different thread., + * <pre>, + * public class MyHandler extends SimpleChannelHandler, + *                        implements LifeCycleAwareChannelHandler {, + *, + *     private ChannelHandlerContex ctx;, + *, + *     public void beforeAdd(ChannelHandlerContext ctx) {, + *         this.ctx = ctx;, + *     }, + *, + *     public void messageReceived(ChannelHandlerContext ctx, MessageEvent evt) {, + *         ctx.setAttachment(evt.getMessage());, + *     }, + *, + *     public Object getLastReceivedMessage() {, + *         return ctx.getAttachment();, + *     }, + *     ..., + * }, + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/channel/LifeCycleAwareChannelHandler.java, + * might lead to an unexpected behavior.  It is because the context object, + * might not have been fully added to the pipeline or the context object is not, + * a part of the pipeline anymore respectively.]