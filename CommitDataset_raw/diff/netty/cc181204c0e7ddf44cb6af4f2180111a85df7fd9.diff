[+++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounter.java, +    private final AtomicLong cumulativeWrittenBytes = new AtomicLong(0);, +    private final AtomicLong cumulativeReadBytes = new AtomicLong(0);, +    private long lastWrittenBytes = 0;, +    private long lastReadBytes = 0;, +            checkInterval1 = checkInterval;, +            factory1 = factory;, +                    if (checkInterval1 > 0) {, +                        Thread.sleep(checkInterval1);, +                    counter.resetAccounting(endTime);, +                    if (factory1 != null) {, +                        factory1.accounting(counter);, +        synchronized (lastTime) {, +            if (monitorFuture != null) {, +            lastTime.set(System.currentTimeMillis());, +            if (checkInterval > 0) {, +                monitorFuture =, +                    executorService.submit(new TrafficMonitoring(checkInterval,, +                        factory, this));, +        synchronized (lastTime) {, +            if (monitorFuture == null) {, +            monitorFuture.cancel(true);, +            monitorFuture = null;, +            if (factory != null) {, +                factory.accounting(this);, +        synchronized (lastTime) {, +            long interval = newLastTime - lastTime.getAndSet(newLastTime);, +            lastReadBytes = currentReadingBytes.getAndSet(0);, +            lastWrittenBytes = currentWritingBytes.getAndSet(0);, +            lastReadingThroughput = lastReadBytes / interval * 1000;, +            lastWritingThroughput = lastWrittenBytes / interval * 1000;, +            monitoredChannel = channel;, +            isPerChannel = true;, +            isPerChannel = false;, +            monitoredChannel = null;, +        limitWrite = writeLimit;, +        limitRead = readLimit;, +        if (checkInterval != delayToSet) {, +            checkInterval = delayToSet;, +            if (monitorFuture == null) {, +            if (checkInterval > 0) {, +                lastTime.set(System.currentTimeMillis());, +        synchronized (lastTime) {, +            long interval = System.currentTimeMillis() - lastTime.get();, +            long wait = currentReadingBytes.get() * 1000 / limitRead -, +        synchronized (lastTime) {, +            long interval = System.currentTimeMillis() - lastTime.get();, +            long wait = currentWritingBytes.get() * 1000 /, +                limitWrite - interval;, +                Thread.sleep(timeToWait);, +            if (monitor != null &&, +                    monitor.monitoredChannel != null &&, +                    monitor.monitoredChannel.isConnected()) {, +                if (ctx.getHandler() instanceof TrafficShapingHandler) {, +                    ctx.setAttachment(null);, +                monitor.monitoredChannel.setReadable(true);, +        currentReadingBytes.addAndGet(recv);, +        cumulativeReadBytes.addAndGet(recv);, +        if (limitRead == 0) {, +        if (isPerChannel && monitoredChannel != null &&, +                !monitoredChannel.isConnected()) {, +            if (isPerChannel && monitoredChannel != null &&, +                    monitoredChannel.isConnected()) {, +                if (executorService == null) {, +                    monitoredChannel.setReadable(false);, +                    executorService, +        currentWritingBytes.addAndGet(write);, +        cumulativeWrittenBytes.addAndGet(write);, +        if (limitWrite == 0) {, +        return checkInterval;, +        return lastReadingThroughput;, +        return lastWritingThroughput;, +    public long getLastReadBytes() {, +        return lastReadBytes;, +    public long getLastWrittenBytes() {, +        return lastWrittenBytes;, +    public long getCumulativeWrittenBytes() {, +        return cumulativeWrittenBytes.get();, +    public long getCumulativeReadBytes() {, +        return cumulativeReadBytes.get();, +        return "Monitor " + name + " Current Speed Read: " +, +                (lastReadingThroughput >> 10) + " KB/s, Write: " +, +                (lastWritingThroughput >> 10) + " KB/s Current Read: " +, +                (currentReadingBytes.get() >> 10) + " KB Current Write: " +, +                (currentWritingBytes.get() >> 10) + " KB";]