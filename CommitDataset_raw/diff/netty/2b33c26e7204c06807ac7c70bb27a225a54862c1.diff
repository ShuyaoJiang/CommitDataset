[+++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, + * The default {@link DatagramChannelConfig} implementation., +++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, + * The default {@link DatagramChannelConfig} implementation., +++ b/src/main/java/org/jboss/netty/channel/socket/ServerSocketChannel.java, + * A TCP/IP {@link ServerChannel} which accepts incoming TCP/IP connections., +++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, + * The default {@link DatagramChannelConfig} implementation., +++ b/src/main/java/org/jboss/netty/channel/socket/ServerSocketChannel.java, + * A TCP/IP {@link ServerChannel} which accepts incoming TCP/IP connections., +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, + * Provides an NIO based {@link org.jboss.netty.channel.socket.DatagramChannel}., +++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, + * The default {@link DatagramChannelConfig} implementation., +++ b/src/main/java/org/jboss/netty/channel/socket/ServerSocketChannel.java, + * A TCP/IP {@link ServerChannel} which accepts incoming TCP/IP connections., +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, + * Provides an NIO based {@link org.jboss.netty.channel.socket.DatagramChannel}., +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannelFactory.java, +import java.nio.channels.Selector;, +import java.util.concurrent.Executors;, +import java.util.concurrent.RejectedExecutionException;, +import org.jboss.netty.channel.group.ChannelGroup;, +import org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory;, + * A {@link NioDatagramChannelFactory} creates a NIO-based connectionless, + * There is only one thread type in a {@link NioDatagramChannelFactory};, + * worker threads., + * more {@link DatagramChannel}s in a non-blocking mode., + *, + * <h3>Life cycle of threads and graceful shutdown</h3>, + * <p>, + * All worker threads are acquired from the {@link Executor} which was specified, + * when a {@link NioDatagramChannelFactory} was created.  Therefore, you should, + * make sure the specified {@link Executor} is able to lend the sufficient, + * number of threads.  It is the best bet to specify, + * {@linkplain Executors#newCachedThreadPool() a cached thread pool}., + * <p>, + * All worker threads are acquired lazily, and then released when there's, + * nothing left to process.  All the related resources such as {@link Selector}, + * are also released when the worker threads are released.  Therefore, to shut, + * down a service gracefully, you should do the following:, + *, + * <ol>, + * <li>close all channels created by the factory usually using, + *     {@link ChannelGroup#close()}, and</li>, + * <li>call {@link #releaseExternalResources()}.</li>, + * </ol>, + *, + * Please make sure not to shut down the executor until all channels are, + * closed.  Otherwise, you will end up with a {@link RejectedExecutionException}, + * and the related resources might not be released properly., + *, + * <h3>Limitation</h3>, + * <p>, + * Multicast is not supported.  Please use {@link OioDatagramChannelFactory}, + * instead., +    private final Executor workerExecutor;, +     * Creates a new instance.  Calling this constructor is same with calling, +     * {@link #NioDatagramChannelFactory(Executor, int)} with the number of, +     * available processors in the machine.  The number of available processors, +     * is obtained by {@link Runtime#availableProcessors()}., +     * @param workerExecutor, +     *        the {@link Executor} which will execute the I/O worker threads, +     * @param workerExecutor, +     *        the {@link Executor} which will execute the I/O worker threads, +     * @param workerCount, +     *        the maximum number of I/O worker threads, +++ b/src/main/java/org/jboss/netty/channel/socket/DatagramChannel.java, + * A UDP/IP {@link Channel} which is created by {@link DatagramChannelFactory}., +++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, + * The default {@link DatagramChannelConfig} implementation., +++ b/src/main/java/org/jboss/netty/channel/socket/ServerSocketChannel.java, + * A TCP/IP {@link ServerChannel} which accepts incoming TCP/IP connections., +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, + * Provides an NIO based {@link org.jboss.netty.channel.socket.DatagramChannel}., +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannelFactory.java, +import java.nio.channels.Selector;, +import java.util.concurrent.Executors;, +import java.util.concurrent.RejectedExecutionException;, +import org.jboss.netty.channel.group.ChannelGroup;, +import org.jboss.netty.channel.socket.oio.OioDatagramChannelFactory;, + * A {@link NioDatagramChannelFactory} creates a NIO-based connectionless, + * There is only one thread type in a {@link NioDatagramChannelFactory};, + * worker threads., + * more {@link DatagramChannel}s in a non-blocking mode., + *, + * <h3>Life cycle of threads and graceful shutdown</h3>, + * <p>, + * All worker threads are acquired from the {@link Executor} which was specified, + * when a {@link NioDatagramChannelFactory} was created.  Therefore, you should]