[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +    private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +    private ScheduledFuture<?> connectTimeoutFuture;, +    private ConnectException connectTimeoutException;, +, +, +                        // Schedule connect timeout., +                        int connectTimeoutMillis = config().getConnectTimeoutMillis();, +                        if (connectTimeoutMillis > 0) {, +                            connectTimeoutFuture = eventLoop().schedule(new Runnable() {, +                                @Override, +                                public void run() {, +                                    if (connectTimeoutException == null) {, +                                        connectTimeoutException = new ConnectException("connection timed out");, +                                    }, +                                    ChannelFuture connectFuture = AbstractChannel.this.connectFuture;, +                                    if (connectFuture == null) {, +                                        return;, +                                    } else {, +                                        if (connectFuture.setFailure(connectTimeoutException)) {, +                                            pipeline().fireExceptionCaught(connectTimeoutException);, +                                            close(voidFuture());, +                                        }, +                                    }, +                                }, +                            }, connectTimeoutMillis, TimeUnit.MILLISECONDS);, +                        }, +                connectTimeoutFuture.cancel(false);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +    private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +    private ScheduledFuture<?> connectTimeoutFuture;, +    private ConnectException connectTimeoutException;, +, +, +                        // Schedule connect timeout., +                        int connectTimeoutMillis = config().getConnectTimeoutMillis();, +                        if (connectTimeoutMillis > 0) {, +                            connectTimeoutFuture = eventLoop().schedule(new Runnable() {, +                                @Override, +                                public void run() {, +                                    if (connectTimeoutException == null) {, +                                        connectTimeoutException = new ConnectException("connection timed out");, +                                    }, +                                    ChannelFuture connectFuture = AbstractChannel.this.connectFuture;, +                                    if (connectFuture == null) {, +                                        return;, +                                    } else {, +                                        if (connectFuture.setFailure(connectTimeoutException)) {, +                                            pipeline().fireExceptionCaught(connectTimeoutException);, +                                            close(voidFuture());, +                                        }, +                                    }, +                                }, +                            }, connectTimeoutMillis, TimeUnit.MILLISECONDS);, +                        }, +                connectTimeoutFuture.cancel(false);, +++ b/transport/src/main/java/io/netty/channel/ChannelConfig.java, +import io.netty.channel.socket.nio.NioChannelConfig;, + * All {@link ChannelConfig} has the following options:, + *, + * <table border="1" cellspacing="0" cellpadding="6">, + * <tr>, + * <th>Name</th><th>Associated setter method</th>, + * </tr><tr>, + * <td>{@code "connectTimeoutMillis"}</td><td>{@link #setConnectTimeoutMillis(int)}</td>, + * </tr>, + * </table>, + * <p>, + * More options are available in the sub-types of {@link ChannelConfig}.  For, + * socket as explained in {@link SocketChannelConfig} or {@link NioChannelConfig}., +, +    /**, +     * Returns the connect timeout of the channel in milliseconds.  If the, +     * {@link Channel} does not support connect operation, this property is not, +     * used at all, and therefore will be ignored., +     *, +     * @return the connect timeout in milliseconds.  {@code 0} if disabled., +     */, +    int getConnectTimeoutMillis();, +, +    /**, +     * Sets the connect timeout of the channel in milliseconds.  If the, +     * {@link Channel} does not support connect operation, this property is not, +     * used at all, and therefore will be ignored., +     *, +     * @param connectTimeoutMillis the connect timeout in milliseconds., +     *                             {@code 0} to disable., +     */, +    void setConnectTimeoutMillis(int connectTimeoutMillis);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +    private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);]