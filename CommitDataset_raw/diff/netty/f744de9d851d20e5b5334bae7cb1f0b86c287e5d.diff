[+++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompatibleObjectDecoder.java, +import java.io.ObjectOutputStream;, + * A decoder which deserializes the received {@link ChannelBuffer}s into Java, + * objects (interoperability version)., + * <p>, + * This decoder is interoperable with the standard Java object, + * streams such as {@link ObjectInputStream} and {@link ObjectOutputStream}., + * <p>, + * However, this decoder might perform worse than {@link ObjectDecoder} if, + * the serialized object is big and complex.  Also, it doesn't limit the, + * maximum size of the object, and consequently your application might face, + * the risk of <a href="http://en.wikipedia.org/wiki/DoS">DoS attack</a>., + * Please use {@link ObjectEncoder} and {@link ObjectDecoder} if you are not, + * required to keep the interoperability with the standard object streams., + *, + *, +    /**, +     * Creates a new decoder., +     */, +    /**, +     * Creates a new {@link ObjectInputStream} which wraps the specified, +     * {@link InputStream}.  Override this method to use a subclass of the, +     * {@link ObjectInputStream}., +     */, +    protected ObjectInputStream newObjectInputStream(InputStream in) throws Exception {, +        return new ObjectInputStream(in);, +    }, +, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompatibleObjectDecoder.java, +import java.io.ObjectOutputStream;, + * A decoder which deserializes the received {@link ChannelBuffer}s into Java, + * objects (interoperability version)., + * <p>, + * This decoder is interoperable with the standard Java object, + * streams such as {@link ObjectInputStream} and {@link ObjectOutputStream}., + * <p>, + * However, this decoder might perform worse than {@link ObjectDecoder} if, + * the serialized object is big and complex.  Also, it doesn't limit the, + * maximum size of the object, and consequently your application might face, + * the risk of <a href="http://en.wikipedia.org/wiki/DoS">DoS attack</a>., + * Please use {@link ObjectEncoder} and {@link ObjectDecoder} if you are not, + * required to keep the interoperability with the standard object streams., + *, + *, +    /**, +     * Creates a new decoder., +     */, +    /**, +     * Creates a new {@link ObjectInputStream} which wraps the specified, +     * {@link InputStream}.  Override this method to use a subclass of the, +     * {@link ObjectInputStream}., +     */, +    protected ObjectInputStream newObjectInputStream(InputStream in) throws Exception {, +        return new ObjectInputStream(in);, +    }, +, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompatibleObjectEncoder.java, +import java.io.ObjectInputStream;, + * An encoder which serializes a Java object into a {@link ChannelBuffer}, + * (interoperability version)., + * <p>, + * This encoder is interoperable with the standard Java object streams such as, + * {@link ObjectInputStream} and {@link ObjectOutputStream}., + *, +    /**, +     * Creates a new instance with the reset interval of {@code 16}., +     */, +    /**, +     * Creates a new instance., +     *, +     * @param resetInterval, +     *        the number of objects between {@link ObjectOutputStream#reset()}., +     *        {@code 0} will disable resetting the stream, but the remote, +     *        peer will be at the risk of getting {@link OutOfMemoryError} in, +     *        the long term., +     */, +    /**, +     * Creates a new {@link ObjectOutputStream} which wraps the specified, +     * {@link OutputStream}.  Override this method to use a subclass of the, +     * {@link ObjectOutputStream}., +     */, +    protected ObjectOutputStream newObjectOutputStream(OutputStream out) throws Exception {, +        return new ObjectOutputStream(out);, +    }, +, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompatibleObjectDecoder.java, +import java.io.ObjectOutputStream;, + * A decoder which deserializes the received {@link ChannelBuffer}s into Java, + * objects (interoperability version)., + * <p>, + * This decoder is interoperable with the standard Java object, + * streams such as {@link ObjectInputStream} and {@link ObjectOutputStream}., + * <p>, + * However, this decoder might perform worse than {@link ObjectDecoder} if, + * the serialized object is big and complex.  Also, it doesn't limit the, + * maximum size of the object, and consequently your application might face, + * the risk of <a href="http://en.wikipedia.org/wiki/DoS">DoS attack</a>., + * Please use {@link ObjectEncoder} and {@link ObjectDecoder} if you are not, + * required to keep the interoperability with the standard object streams., + *]