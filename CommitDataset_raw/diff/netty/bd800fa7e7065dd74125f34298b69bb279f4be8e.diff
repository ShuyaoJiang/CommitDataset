[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +        // Upgraded requests are ineligible for stream control. We add the null check, +        // in case the stream has been deregistered., +        if (stream != null && streamId == Http2CodecUtil.HTTP_UPGRADE_STREAM_ID) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +        // Upgraded requests are ineligible for stream control. We add the null check, +        // in case the stream has been deregistered., +        if (stream != null && streamId == Http2CodecUtil.HTTP_UPGRADE_STREAM_ID) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +     public void flowControlShouldBeResilientToMissingStreams() throws Http2Exception {, +         Http2Connection conn = new DefaultHttp2Connection(true);, +         Http2ConnectionEncoder enc = new DefaultHttp2ConnectionEncoder(conn, new DefaultHttp2FrameWriter());, +         Http2ConnectionDecoder dec = new DefaultHttp2ConnectionDecoder(conn, enc, new DefaultHttp2FrameReader());, +         Http2FrameCodec codec = new Http2FrameCodec(enc, dec, new Http2Settings());, +         EmbeddedChannel em = new EmbeddedChannel(codec);, +, +         // We call #consumeBytes on a stream id which has not been seen yet to emulate the case, +         // where a stream is deregistered which in reality can happen in response to a RST., +         assertFalse(codec.consumeBytes(1, 1));, +         assertTrue(em.finishAndReleaseAll());, +     }, +, +    @Test]