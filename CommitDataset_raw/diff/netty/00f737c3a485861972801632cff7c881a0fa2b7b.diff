[+++ b/common/src/main/java/io/netty/util/internal/DetectionUtil.java, +        String os = SystemPropertyUtil.get("os.name").toLowerCase();, +        boolean noUnsafe = SystemPropertyUtil.getBoolean("io.netty.noUnsafe", false);, +        if (noUnsafe) {, +        boolean tryUnsafe = false;, +        if (SystemPropertyUtil.contains("io.netty.tryUnsafe")) {, +            tryUnsafe = SystemPropertyUtil.getBoolean("io.netty.tryUnsafe", true);, +        } else {, +            tryUnsafe = SystemPropertyUtil.getBoolean("org.jboss.netty.tryUnsafe", true);, +, +        if (!tryUnsafe) {, +, +++ b/common/src/main/java/io/netty/util/internal/DetectionUtil.java, +        String os = SystemPropertyUtil.get("os.name").toLowerCase();, +        boolean noUnsafe = SystemPropertyUtil.getBoolean("io.netty.noUnsafe", false);, +        if (noUnsafe) {, +        boolean tryUnsafe = false;, +        if (SystemPropertyUtil.contains("io.netty.tryUnsafe")) {, +            tryUnsafe = SystemPropertyUtil.getBoolean("io.netty.tryUnsafe", true);, +        } else {, +            tryUnsafe = SystemPropertyUtil.getBoolean("org.jboss.netty.tryUnsafe", true);, +, +        if (!tryUnsafe) {, +, +++ b/common/src/main/java/io/netty/util/internal/SystemPropertyUtil.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +import java.util.Properties;, + * A collection of utility methods to retrieve and parse the values of the Java system properties., +public final class SystemPropertyUtil {, +, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(SystemPropertyUtil.class);, +, +    private static final Properties props;, +, +    // Retrieve all system properties at once so that there's no need to deal with, +    // security exceptions from next time.  Otherwise, we might end up with logging every, +    // security exceptions on every system property access or introducing more complexity, +    // just because of less verbose logging., +    static {, +        Properties newProps = null;, +        try {, +            newProps = System.getProperties();, +        } catch (SecurityException e) {, +            logger.warn("Unable to access the system properties; default values will be used.", e);, +            newProps = new Properties();, +        }, +, +        props = newProps;, +    }, +, +    /**, +     * Returns {@code true} if and only if the system property with the specified {@code key}, +     * exists., +     */, +    public static boolean contains(String key) {, +        if (key == null) {, +            throw new NullPointerException("key");, +        }, +        return props.containsKey(key);, +    }, +     * {@code key}, while falling back to {@code null} if the property access fails., +     * @return the property value or {@code null}, +        return get(key, null);, +        if (key == null) {, +            throw new NullPointerException("key");, +, +        String value = props.getProperty(key);, +        if (value == null) {, +            return def;, +        }, +, +    public static boolean getBoolean(String key, boolean def) {, +        if (key == null) {, +            throw new NullPointerException("key");, +        }, +, +        String value = props.getProperty(key);, +        value = value.trim().toLowerCase();, +        if (value.length() == 0) {, +            return true;, +        }, +, +        if (value.equals("true") || value.equals("yes") || value.equals("1")) {, +            return true;, +        }, +, +        if (value.equals("false") || value.equals("no") || value.equals("0")) {, +            return false;, +        }, +, +        logger.warn(, +                "Unable to parse the boolean system property '" + key + "':" + value + " - " +, +                "using the default value: " + def);, +, +, +    /**, +     * Returns the value of the Java system property with the specified]