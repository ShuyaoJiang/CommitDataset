[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuf readRetainedSlice(int length) {, +        ByteBuf slice = retainedSlice(readerIndex, length);, +        readerIndex += length;, +        return slice;, +    }, +, +    @Override, +    public ByteBuf retainedDuplicate() {, +        return duplicate().retain();, +    }, +, +    @Override, +    public ByteBuf retainedSlice() {, +        return slice().retain();, +    }, +, +    @Override, +    public ByteBuf retainedSlice(int index, int length) {, +        return slice(index, length).retain();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuf readRetainedSlice(int length) {, +        ByteBuf slice = retainedSlice(readerIndex, length);, +        readerIndex += length;, +        return slice;, +    }, +, +    @Override, +    public ByteBuf retainedDuplicate() {, +        return duplicate().retain();, +    }, +, +    @Override, +    public ByteBuf retainedSlice() {, +        return slice().retain();, +    }, +, +    @Override, +    public ByteBuf retainedSlice(int index, int length) {, +        return slice(index, length).retain();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.buffer;, +, +import io.netty.util.Recycler.Handle;, +, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +, +/**, + * Abstract base class for derived {@link ByteBuf} implementations., + */, +abstract class AbstractPooledDerivedByteBuf<T> extends AbstractReferenceCountedByteBuf {, +, +    private final Handle<AbstractPooledDerivedByteBuf<T>> recyclerHandle;, +    private AbstractByteBuf buffer;, +, +    @SuppressWarnings("unchecked"), +    AbstractPooledDerivedByteBuf(Handle<? extends AbstractPooledDerivedByteBuf<T>> recyclerHandle) {, +        super(0);, +        this.recyclerHandle = (Handle<AbstractPooledDerivedByteBuf<T>>) recyclerHandle;, +    }, +, +    @Override, +    public final AbstractByteBuf unwrap() {, +        return buffer;, +    }, +, +    final <U extends AbstractPooledDerivedByteBuf<T>> U init(, +            AbstractByteBuf buffer, int readerIndex, int writerIndex, int maxCapacity) {, +, +        buffer.retain();, +        this.buffer = buffer;, +, +        boolean success = false;, +        try {, +            maxCapacity(maxCapacity);, +            setIndex(readerIndex, writerIndex);, +            setRefCnt(1);]