[+++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer());, +, +        Queue<Object> msgBuf = buf.messageBuffer();, +        if (!msgBuf.isEmpty()) {, +            productQueue.addAll(msgBuf);, +            msgBuf.clear();, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer());, +, +        Queue<Object> msgBuf = buf.messageBuffer();, +        if (!msgBuf.isEmpty()) {, +            productQueue.addAll(msgBuf);, +            msgBuf.clear();, +        }, +++ b/handler/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer());, +, +        Queue<Object> msgBuf = buf.messageBuffer();, +        if (!msgBuf.isEmpty()) {, +            productQueue.addAll(msgBuf);, +            msgBuf.clear();, +        }, +++ b/handler/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedFile.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer());, +, +        Queue<Object> msgBuf = buf.messageBuffer();, +        if (!msgBuf.isEmpty()) {, +            productQueue.addAll(msgBuf);, +            msgBuf.clear();, +        }, +++ b/handler/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedFile.java, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedNioFile.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer());, +, +        Queue<Object> msgBuf = buf.messageBuffer();, +        if (!msgBuf.isEmpty()) {, +            productQueue.addAll(msgBuf);, +            msgBuf.clear();, +        }, +++ b/handler/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +      <version>${project.version}</version>, +    </dependency>, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedFile.java, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedNioFile.java, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelHandlerAdapter;, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import java.util.concurrent.atomic.AtomicInteger;, +public class ChunkedWriteHandler extends ChannelHandlerAdapter<Object, Object> {, +    private static final int MAX_PENDING_WRITES = 4;, +, +    private final Queue<Object> queue = QueueFactory.createQueue();, +    private final AtomicInteger pendingWrites = new AtomicInteger();, +    private Object currentEvent;, +, +    @Override, +    public ChannelBufferHolder<Object> newInboundBuffer(, +            ChannelInboundHandlerContext<Object> ctx) throws Exception {, +        this.ctx = ctx;, +        return ChannelBufferHolders.inboundBypassBuffer(ctx);, +    }, +, +    @Override, +    public ChannelBufferHolder<Object> newOutboundBuffer(, +            ChannelOutboundHandlerContext<Object> ctx) throws Exception {, +        return ChannelBufferHolders.messageBuffer(queue);, +    }, +, +    private boolean isWritable() {, +        return pendingWrites.get() < MAX_PENDING_WRITES;, +    }]