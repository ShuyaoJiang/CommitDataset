[+++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        logger.debug("io.netty.resourceLeakDetection: {}", ENABLED);, +, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        logger.debug("io.netty.resourceLeakDetection: {}", ENABLED);, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import io.netty.util.CharsetUtil;, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(PlatformDependent.class);, +, +        if (logger.isDebugEnabled()) {, +            logger.debug("io.netty.preferDirect: {}", DIRECT_BUFFER_PREFERRED);, +        }, +, +                    "Unless explicitly requested, heap buffer will always be preferred to avoid potential system " +, +                    "unstability.");, +, +        logger.debug("Platform: Android");, +        boolean windows = SystemPropertyUtil.get("os.name", "").toLowerCase(Locale.US).contains("win");, +        if (windows) {, +            logger.debug("Platform: Windows");, +        }, +        return windows;, +        if (isWindows()) {, +            return false;, +        }, +, +        String[] ID_COMMANDS = { "/usr/bin/id", "/bin/id", "id" };, +        Pattern UID_PATTERN = Pattern.compile("^(?:0|[1-9][0-9]*)$");, +        for (String idCmd: ID_COMMANDS) {, +            Process p = null;, +            BufferedReader in = null;, +            String uid = null;, +            try {, +                p = Runtime.getRuntime().exec(new String[] { idCmd, "-u" });, +                in = new BufferedReader(new InputStreamReader(p.getInputStream(), CharsetUtil.US_ASCII));, +                uid = in.readLine();, +                in.close();, +, +                for (;;) {, +                    try {, +                        int exitCode = p.waitFor();, +                        if (exitCode != 0) {, +                            uid = null;, +                        }, +                        break;, +                    } catch (InterruptedException e) {, +                        // Ignore, +                    }, +                }, +            } catch (Exception e) {, +                uid = null;, +            } finally {, +                if (in != null) {, +                    try {, +                        in.close();, +                    } catch (IOException e) {, +                        // Ignore, +                    }, +                }, +                if (p != null) {, +                    p.destroy();, +                }, +            }, +, +            if (uid != null && UID_PATTERN.matcher(uid).matches()) {, +                logger.debug("UID: {}", uid);, +                return "0".equals(uid);, +            }, +        }, +, +        logger.debug("Could not determine the current UID using /usr/bin/id; attempting to bind at privileged ports.");, +, +        Pattern PERMISSION_DENIED = Pattern.compile(".*(?:denied|not.*permitted).*");, +                if (logger.isDebugEnabled()) {, +                    logger.debug("UID: 0 (succeded to bind at port {})", i);, +                }, +                return true;, +, +        logger.debug("UID: non-root (failed to bind at any privileged ports)");, +        return false;, +    @SuppressWarnings("LoopStatementThatDoesntLoop"), +        int javaVersion;, +, +        // Not really a loop, +        for (;;) {, +                javaVersion = 6;, +                break;, +                javaVersion = 8;, +                break;, +                javaVersion = 7;, +                break;, +            javaVersion = 6;, +            break;, +        }, +, +        if (logger.isDebugEnabled()) {]