[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPromise.java, +import java.util.Arrays;, +                notifyListeners0(this, (DefaultChannelPromiseListeners) listeners);, +                        notifyListeners0(DefaultChannelPromise.this, (DefaultChannelPromiseListeners) listeners);, +    private static void notifyListeners0(ChannelFuture f, DefaultChannelPromiseListeners listeners) {, +        final ChannelFutureListener[] a = listeners.listeners();, +        final int size = listeners.size();, +        for (int i = 0; i < size; i ++) {, +            notifyListener0(f, a[i]);, +        }, +    }, +, +    private static final class DefaultChannelPromiseListeners {, +        private ChannelFutureListener[] listeners;, +        private int size;, +            listeners = new ChannelFutureListener[] { firstListener, secondListener };, +            size = 2;, +        }, +, +        void add(ChannelFutureListener l) {, +            ChannelFutureListener[] listeners = this.listeners;, +            final int size = this.size;, +            if (size == listeners.length) {, +                this.listeners = listeners = Arrays.copyOf(listeners, size << 1);, +            }, +            listeners[size] = l;, +            this.size = size + 1;, +        }, +, +        void remove(ChannelFutureListener l) {, +            final ChannelFutureListener[] listeners = this.listeners;, +            int size = this.size;, +            for (int i = 0; i < size; i ++) {, +                if (listeners[i] == l) {, +                    int listenersToMove = size - i - 1;, +                    if (listenersToMove > 0) {, +                        System.arraycopy(listeners, i + 1, listeners, i, listenersToMove);, +                    }, +                    listeners[-- size] = null;, +                    this.size = size;, +                    return;, +                }, +            }, +        }, +, +        ChannelFutureListener[] listeners() {, +            return listeners;, +        }, +, +        int size() {, +            return size;]