[+++ b/common/src/main/java/io/netty/util/Recycler.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(Recycler.class);, +, +    private static final int DEFAULT_MAX_CAPACITY;, +    private static final int INITIAL_CAPACITY;, +, +, +    static {, +        // In the future, we might have different maxCapacity for different object types., +        // e.g. io.netty.recycler.maxCapacity.writeTask, +        //      io.netty.recycler.maxCapacity.outboundBuffer, +        int maxCapacity = SystemPropertyUtil.getInt("io.netty.recycler.maxCapacity.default", 0);, +        if (maxCapacity <= 0) {, +            // TODO: Some arbitrary large number - should adjust as we get more production experience., +            maxCapacity = 262144;, +        }, +, +        DEFAULT_MAX_CAPACITY = maxCapacity;, +        if (logger.isDebugEnabled()) {, +            logger.debug("-Dio.netty.recycler.maxCapacity.default: {}", DEFAULT_MAX_CAPACITY);, +        }, +, +        INITIAL_CAPACITY = Math.min(DEFAULT_MAX_CAPACITY, 256);, +    }, +, +    private final int maxCapacity;, +, +            return new Stack<T>(Recycler.this, Thread.currentThread(), maxCapacity);, +    protected Recycler() {, +        this(DEFAULT_MAX_CAPACITY);, +    }, +, +    protected Recycler(int maxCapacity) {, +        if (maxCapacity <= 0) {, +            maxCapacity = 0;, +        }, +        this.maxCapacity = maxCapacity;, +    }, +, +        private T[] elements;, +        private int size;, +        private final int maxCapacity;, +, +        private final Map<T, Boolean> map;, +        @SuppressWarnings("AssertWithSideEffects"), +        Stack(Recycler<T> parent, Thread thread, int maxCapacity) {, +            this.maxCapacity = maxCapacity;, +, +            // *assigns* true if assertions are on., +            @SuppressWarnings("UnusedAssignment"), +            boolean assertionEnabled = false;, +            assert assertionEnabled = true;, +, +            if (assertionEnabled) {, +                map = new IdentityHashMap<T, Boolean>(INITIAL_CAPACITY);, +            } else {, +                map = null;, +            }, +            assert map == null || map.remove(ret) != null;, +            assert map == null || map.put(o, Boolean.TRUE) == null: "recycled already";, +                if (size == maxCapacity) {, +                    // Hit the maximum capacity - drop the possibly youngest object., +                    return;, +                }, +, +                T[] newElements = newArray(Math.min(maxCapacity, size << 1));]