[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +            // We return the bytes in consumeBytes() once the stream channel consumed the bytes., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +            // We return the bytes in consumeBytes() once the stream channel consumed the bytes., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerUpgradeCodec.java, +import io.netty.channel.ChannelHandlerAdapter;, +    /**, +     * Creates the codec using a default name for the connection handler when adding to the, +     * pipeline., +     *, +     * @param http2Codec the HTTP/2 frame handler., +     * @param handlers the handlers that will handle the {@link Http2Frame}s., +     */, +    public Http2ServerUpgradeCodec(final Http2FrameCodec http2Codec, final ChannelHandler... handlers) {, +        this(null, http2Codec.connectionHandler(), new ChannelHandlerAdapter() {, +, +            @Override, +            public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +                ctx.pipeline().addLast(http2Codec);, +                ctx.pipeline().addLast(handlers);, +                ctx.pipeline().remove(this);, +            }, +        });, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +            // We return the bytes in consumeBytes() once the stream channel consumed the bytes., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerUpgradeCodec.java, +import io.netty.channel.ChannelHandlerAdapter;, +    /**, +     * Creates the codec using a default name for the connection handler when adding to the, +     * pipeline., +     *, +     * @param http2Codec the HTTP/2 frame handler., +     * @param handlers the handlers that will handle the {@link Http2Frame}s., +     */, +    public Http2ServerUpgradeCodec(final Http2FrameCodec http2Codec, final ChannelHandler... handlers) {, +        this(null, http2Codec.connectionHandler(), new ChannelHandlerAdapter() {, +, +            @Override, +            public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +                ctx.pipeline().addLast(http2Codec);, +                ctx.pipeline().addLast(handlers);, +                ctx.pipeline().remove(this);, +            }, +        });, +    }, +, +++ b/example/src/main/java/io/netty/example/http2/helloworld/frame/server/HelloWorldHttp2Handler.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package io.netty.example.http2.helloworld.frame.server;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.channel.ChannelDuplexHandler;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.http2.DefaultHttp2DataFrame;, +import io.netty.handler.codec.http2.DefaultHttp2Headers;, +import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;, +import io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame;, +import io.netty.handler.codec.http2.Http2DataFrame;, +import io.netty.handler.codec.http2.Http2Headers;, +import io.netty.handler.codec.http2.Http2HeadersFrame;, +import io.netty.util.CharsetUtil;, +, +import static io.netty.buffer.Unpooled.copiedBuffer;, +import static io.netty.buffer.Unpooled.unreleasableBuffer;, +import static io.netty.handler.codec.http.HttpResponseStatus.OK;, +, +/**, + * A simple handler that responds with the message "Hello World!"., + *, + * <p>This example is making use of the "frame codec" http2 API. This API is very experimental and incomplete., + */, +@Sharable, +public class HelloWorldHttp2Handler extends ChannelDuplexHandler {, +, +    static final ByteBuf RESPONSE_BYTES = unreleasableBuffer(copiedBuffer("Hello World", CharsetUtil.UTF_8));, +, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +        super.exceptionCaught(ctx, cause);, +        cause.printStackTrace();, +        ctx.close();, +    }]