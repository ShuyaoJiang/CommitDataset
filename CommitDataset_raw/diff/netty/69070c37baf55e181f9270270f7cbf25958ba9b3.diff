[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        ByteBuf buf = alloc().buffer(length, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        ByteBuf buf = alloc().buffer(length, maxCapacity);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +            actualValue.release();, +    @Test, +    public void testReadBytes() {, +        ByteBuf buffer = newBuffer(8);, +        byte[] bytes = new byte[8];, +        buffer.writeBytes(bytes);, +, +        ByteBuf buffer2 = buffer.readBytes(4);, +        assertSame(buffer.alloc(), buffer2.alloc());, +        assertEquals(4, buffer.readerIndex());, +        assertTrue(buffer.release());, +        assertEquals(0, buffer.refCnt());, +        assertTrue(buffer2.release());, +        assertEquals(0, buffer2.refCnt());, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        ByteBuf buf = alloc().buffer(length, maxCapacity);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +            actualValue.release();, +    @Test, +    public void testReadBytes() {, +        ByteBuf buffer = newBuffer(8);, +        byte[] bytes = new byte[8];, +        buffer.writeBytes(bytes);, +, +        ByteBuf buffer2 = buffer.readBytes(4);, +        assertSame(buffer.alloc(), buffer2.alloc());, +        assertEquals(4, buffer.readerIndex());, +        assertTrue(buffer.release());, +        assertEquals(0, buffer.refCnt());, +        assertTrue(buffer2.release());, +        assertEquals(0, buffer2.refCnt());, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +    }, +, +    @Test, +    @Override, +    public void testReadBytes() {, +        // ignore for SlicedByteBuf]