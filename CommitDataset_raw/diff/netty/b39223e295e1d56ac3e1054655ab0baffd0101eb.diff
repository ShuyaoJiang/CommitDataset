[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/StreamBufferingEncoderTest.java, +import static io.netty.buffer.Unpooled.EMPTY_BUFFER;, +import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_MAX_FRAME_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.SMALLEST_MAX_CONCURRENT_STREAMS;, +import static io.netty.handler.codec.http2.Http2Error.CANCEL;, +import static io.netty.handler.codec.http2.Http2Stream.State.HALF_CLOSED_LOCAL;, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyBoolean;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.ReferenceCounted;, +import org.junit.After;, +        when(writer.writeData(eq(ctx), anyInt(), any(ByteBuf.class), anyInt(), anyBoolean(),, +                eq(promise))).thenAnswer(successAnswer());, +        when(ctx.newPromise()).thenReturn(promise);, +    @After, +    public void teardown() {, +        // Close and release any buffered frames., +        encoder.close();, +    }, +, +        encoder.writeData(ctx, 3, EMPTY_BUFFER, 0, false, promise);, +        encoder.writeData(ctx, 5, EMPTY_BUFFER, 0, false, promise);, +        encoder.writeData(ctx, 3, EMPTY_BUFFER, 0, true, promise);, +                    ReferenceCountUtil.safeRelease(a);]