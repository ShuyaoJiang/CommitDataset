[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import static io.netty.handler.codec.http.HttpHeaders.*;, +, +    private static final FullHttpResponse CONTINUE =, +            new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE, Unpooled.EMPTY_BUFFER);, +    protected void decode(final ChannelHandlerContext ctx, HttpObject msg, List<Object> out) throws Exception {, +                ctx.writeAndFlush(CONTINUE).addListener(new ChannelFutureListener() {, +                    @Override, +                    public void operationComplete(ChannelFuture future) throws Exception {, +                        if (!future.isSuccess()) {, +                            ctx.fireExceptionCaught(future.cause());, +                        }, +                    }, +                });, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import static io.netty.handler.codec.http.HttpHeaders.*;, +, +    private static final FullHttpResponse CONTINUE =, +            new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE, Unpooled.EMPTY_BUFFER);, +    protected void decode(final ChannelHandlerContext ctx, HttpObject msg, List<Object> out) throws Exception {, +                ctx.writeAndFlush(CONTINUE).addListener(new ChannelFutureListener() {, +                    @Override, +                    public void operationComplete(ChannelFuture future) throws Exception {, +                        if (!future.isSuccess()) {, +                            ctx.fireExceptionCaught(future.cause());, +                        }, +                    }, +                });, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpServerCodecTest.java, +import static io.netty.handler.codec.http.HttpHeaders.Names.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +        assertNotNull(httpMessage);, +            assertFalse(httpChunk instanceof LastHttpContent);, +        assertFalse(empty);, +        assertEquals(offeredContentLength, totalBytesPolled);, +    }, +, +    @Test, +    public void test100Continue() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpServerCodec(), new HttpObjectAggregator(1024));, +, +        // Send the request headers., +        ch.writeInbound(Unpooled.copiedBuffer(, +                "PUT /upload-large HTTP/1.1\r\n" +, +                "Expect: 100-continue\r\n" +, +                "Content-Length: 1\r\n\r\n", CharsetUtil.UTF_8));, +, +        // Ensure the aggregator generates nothing., +        assertThat(ch.readInbound(), is(nullValue()));, +, +        // Ensure the aggregator writes a 100 Continue response., +        ByteBuf continueResponse = (ByteBuf) ch.readOutbound();, +        assertThat(continueResponse.toString(CharsetUtil.UTF_8), is("HTTP/1.1 100 Continue\r\n\r\n"));, +, +        // But nothing more., +        assertThat(ch.readOutbound(), is(nullValue()));, +, +        // Send the content of the request., +        ch.writeInbound(Unpooled.wrappedBuffer(new byte[] { 42 }));, +, +        // Ensure the aggregator generates a full request., +        FullHttpRequest req = (FullHttpRequest) ch.readInbound();, +        assertThat(req.headers().get(CONTENT_LENGTH), is("1"));, +        assertThat(req.content().readableBytes(), is(1));, +        assertThat(req.content().readByte(), is((byte) 42));, +        req.release();, +, +        // But nothing more., +        assertThat(ch.readInbound(), is(nullValue()));, +, +        ch.finish();]