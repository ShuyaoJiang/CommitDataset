[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import java.util.Set;, +import static org.junit.Assert.*;, +    @Test, +    public void providesHeaderNamesAsArray() throws Exception {, +        Set<String> nettyHeaders = new DefaultHttpHeaders(), +                .add(HttpHeaderNames.CONTENT_LENGTH, 10), +                .names();, +, +        String[] namesArray = nettyHeaders.toArray(new String[nettyHeaders.size()]);, +        assertArrayEquals(namesArray, new String[] { HttpHeaderNames.CONTENT_LENGTH.toString() });, +    }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import java.util.Set;, +import static org.junit.Assert.*;, +    @Test, +    public void providesHeaderNamesAsArray() throws Exception {, +        Set<String> nettyHeaders = new DefaultHttpHeaders(), +                .add(HttpHeaderNames.CONTENT_LENGTH, 10), +                .names();, +, +        String[] namesArray = nettyHeaders.toArray(new String[nettyHeaders.size()]);, +        assertArrayEquals(namesArray, new String[] { HttpHeaderNames.CONTENT_LENGTH.toString() });, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/HeadersUtils.java, +import java.util.AbstractCollection;, +        StringEntryIterator(Iterator<Entry<CharSequence, CharSequence>> iter) {, +        StringIterator(Iterator<T> iter) {, +        CharSequenceDelegatingStringSet(Set<CharSequence> allNames) {, +    private abstract static class DelegatingStringSet<T> extends AbstractCollection<String> implements Set<String> {, +        DelegatingStringSet(Set<T> allNames) {]