[+++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBufferBuf.java, +    public boolean isWritable() {, +        return false;, +    }, +, +    @Override, +    public boolean isWritable(int numBytes) {, +        return false;, +    }, +, +    @Override, +    public ByteBuf ensureWritable(int minWritableBytes) {, +        throw new ReadOnlyBufferException();, +    }, +, +    @Override, +    public int ensureWritable(int minWritableBytes, boolean force) {, +        return 1;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBufferBuf.java, +    public boolean isWritable() {, +        return false;, +    }, +, +    @Override, +    public boolean isWritable(int numBytes) {, +        return false;, +    }, +, +    @Override, +    public ByteBuf ensureWritable(int minWritableBytes) {, +        throw new ReadOnlyBufferException();, +    }, +, +    @Override, +    public int ensureWritable(int minWritableBytes, boolean force) {, +        return 1;, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyDirectByteBufferBufTest.java, +    @Test, +    public void shouldIndicateNotWritable() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer()).clear();, +        try {, +            Assert.assertFalse(buf.isWritable());, +        } finally {, +            buf.release();, +        }, +    }, +, +    @Test, +    public void shouldIndicateNotWritableAnyNumber() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer()).clear();, +        try {, +            Assert.assertFalse(buf.isWritable(1));, +        } finally {, +            buf.release();, +        }, +    }, +, +    @Test, +    public void ensureWritableIntStatusShouldFailButNotThrow() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer()).clear();, +        try {, +            int result = buf.ensureWritable(1, false);, +            Assert.assertEquals(1, result);, +        } finally {, +            buf.release();, +        }, +    }, +, +    @Test, +    public void ensureWritableForceIntStatusShouldFailButNotThrow() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer()).clear();, +        try {, +            int result = buf.ensureWritable(1, true);, +            Assert.assertEquals(1, result);, +        } finally {, +            buf.release();, +        }, +    }, +, +    @Test(expected = ReadOnlyBufferException.class), +    public void ensureWritableShouldThrow() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer()).clear();, +        try {, +            buf.ensureWritable(1);, +        } finally {, +            buf.release();, +        }, +    }, +]