[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import org.jboss.netty.util.ThreadRenamingRunnable;, +    private static final long AUTODETECTION_TIMEOUT = 7000L;, +, +                ConstraintLevelAutodetector autodetector =, +                    new ConstraintLevelAutodetector();, +                , +                try {, +                    constraintLevel = autodetector.autodetectWithTimeout();, +                } catch (Exception e) {, +                    // Probably because of security manager - try again without, +                    // creating a new thread directly., +                    constraintLevel = autodetector.autodetectWithoutTimeout();, +                }, +, +    private static class ConstraintLevelAutodetector {, +, +        ConstraintLevelAutodetector() {, +            super();, +        }, +, +        int autodetectWithTimeout() {, +            final BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<Integer>();, +            Runnable detector = new ThreadRenamingRunnable(new Runnable() {, +                public void run() {, +                    int level = -1;, +                    try {, +                        level = autodetectWithoutTimeout();, +                    } finally {, +                        resultQueue.offer(Integer.valueOf(level));, +                    }, +                }, +            }, "NIO constraint level detector");, +            , +            Thread detectorThread = new Thread(detector);, +            detectorThread.start();, +, +            for (;;) {, +                try {, +                    Integer result = resultQueue.poll(AUTODETECTION_TIMEOUT, TimeUnit.MILLISECONDS);, +                    if (result == null) {, +                        logger.warn("NIO constraint level autodetection timed out.");, +                        return -1;, +                    } else {, +                        return result.intValue();, +                    }, +                } catch (InterruptedException e) {, +                    // Ignored, +                }, +            }, +        }, +, +        int autodetectWithoutTimeout() {, +                    try {, +                            loop.selector.wakeup();, +    }]