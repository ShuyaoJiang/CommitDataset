[+++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, + * @deprecated Use {@link DomainNameMappingBuilder} instead., +@Deprecated, +    private final DomainNameMappingBuilder<V> builder;, +        builder = new DomainNameMappingBuilder<V>(defaultValue);, +        builder = new DomainNameMappingBuilder<V>(initialCapacity, defaultValue);, +        builder.add(hostname, output);, +        return builder.build();, +++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, + * @deprecated Use {@link DomainNameMappingBuilder} instead., +@Deprecated, +    private final DomainNameMappingBuilder<V> builder;, +        builder = new DomainNameMappingBuilder<V>(defaultValue);, +        builder = new DomainNameMappingBuilder<V>(initialCapacity, defaultValue);, +        builder.add(hostname, output);, +        return builder.build();, +++ b/common/src/main/java/io/netty/util/DomainNameMapping.java, +    private final Map<String, V> unmodifiableMap;, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +        unmodifiableMap = Collections.unmodifiableMap(map);, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +     * Returns a read-only {@link Map} of the domain mapping patterns and their associated value objects., +        return unmodifiableMap;, +++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, + * @deprecated Use {@link DomainNameMappingBuilder} instead., +@Deprecated, +    private final DomainNameMappingBuilder<V> builder;, +        builder = new DomainNameMappingBuilder<V>(defaultValue);, +        builder = new DomainNameMappingBuilder<V>(initialCapacity, defaultValue);, +        builder.add(hostname, output);, +        return builder.build();, +++ b/common/src/main/java/io/netty/util/DomainNameMapping.java, +    private final Map<String, V> unmodifiableMap;, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +        unmodifiableMap = Collections.unmodifiableMap(map);, +     * @deprecated use {@link DomainNameMappingBuilder} to create and fill the mapping instead, +     * Returns a read-only {@link Map} of the domain mapping patterns and their associated value objects., +        return unmodifiableMap;, +++ b/common/src/main/java/io/netty/util/DomainNameMappingBuilder.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.util;, +, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Set;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +/**, + * Builder for immutable {@link DomainNameMapping} instances., + *, + * @param <V> concrete type of value objects, + */, +public final class DomainNameMappingBuilder<V> {, +, +    private final V defaultValue;, +    private final Map<String, V> map;, +, +    /**, +     * Constructor with default initial capacity of the map holding the mappings, +     *, +     * @param defaultValue the default value for {@link DomainNameMapping#map(String)} to return, +     *                     when nothing matches the input, +     */, +    public DomainNameMappingBuilder(V defaultValue) {, +        this(4, defaultValue);, +    }, +, +    /**, +     * Constructor with initial capacity of the map holding the mappings, +     *, +     * @param initialCapacity initial capacity for the internal map, +     * @param defaultValue    the default value for {@link DomainNameMapping#map(String)} to return, +     *                        when nothing matches the input, +     */, +    public DomainNameMappingBuilder(int initialCapacity, V defaultValue) {, +        this.defaultValue = checkNotNull(defaultValue, "defaultValue");, +        map = new LinkedHashMap<String, V>(initialCapacity);, +    }, +, +    /**, +     * Adds a mapping that maps the specified (optionally wildcard) host name to the specified output value.]