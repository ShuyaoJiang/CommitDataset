[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +        RFC3986,, +, +        /**, +         * The HTML5 spec disallows mixed mode in multipart/form-data, +         * requests. More concretely this means that more files submitted, +         * under the same name will not be encoded using mixed mode, but, +         * will be treated as distinct fields., +         *, +         * Reference:, +         *   http://www.w3.org/TR/html5/forms.html#multipart-form-data, +         */, +        HTML5, +     * Add a series of Files associated with one File parameter, +                if (encoderMode != EncoderMode.HTML5 && currentFileUpload != null, +                        && currentFileUpload.getName().equals(fileUpload.getName())) {, +                    // * Content-Disposition: attachment; filename="file1.txt", +                // Content-Disposition: attachment; filename="file1.txt", +                    if (HttpHeaders.equalsIgnoreCase(v, HttpHeaders.Values.CHUNKED)) {, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +        RFC3986,, +, +        /**, +         * The HTML5 spec disallows mixed mode in multipart/form-data, +         * requests. More concretely this means that more files submitted, +         * under the same name will not be encoded using mixed mode, but, +         * will be treated as distinct fields., +         *, +         * Reference:, +         *   http://www.w3.org/TR/html5/forms.html#multipart-form-data, +         */, +        HTML5, +     * Add a series of Files associated with one File parameter, +                if (encoderMode != EncoderMode.HTML5 && currentFileUpload != null, +                        && currentFileUpload.getName().equals(fileUpload.getName())) {, +                    // * Content-Disposition: attachment; filename="file1.txt", +                // Content-Disposition: attachment; filename="file1.txt", +                    if (HttpHeaders.equalsIgnoreCase(v, HttpHeaders.Values.CHUNKED)) {, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoderTest.java, +import io.netty.handler.codec.http.multipart.HttpPostRequestEncoder.EncoderMode;, +    @Test, +    public void testSingleFileUploadInHtml5Mode() throws Exception {, +        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                HttpMethod.POST, "http://localhost");, +, +        DefaultHttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);, +, +        HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(factory,, +                request, true, CharsetUtil.UTF_8, EncoderMode.HTML5);, +        File file1 = new File(getClass().getResource("/file-01.txt").toURI());, +        File file2 = new File(getClass().getResource("/file-02.txt").toURI());, +        encoder.addBodyAttribute("foo", "bar");, +        encoder.addBodyFileUpload("quux", file1, "text/plain", false);, +        encoder.addBodyFileUpload("quux", file2, "text/plain", false);, +, +        String multipartDataBoundary = encoder.multipartDataBoundary;, +        String content = getRequestBody(encoder);, +, +        String expected = "--" + multipartDataBoundary + "\r\n" +, +                "Content-Disposition: form-data; name=\"foo\"" + "\r\n" +, +                "Content-Type: text/plain; charset=UTF-8" + "\r\n" +, +                "\r\n" +, +                "bar" + "\r\n" +, +                "--" + multipartDataBoundary + "\r\n" +, +                "Content-Disposition: form-data; name=\"quux\"; filename=\"file-01.txt\"" + "\r\n" +, +                "Content-Type: text/plain" + "\r\n" +, +                "Content-Transfer-Encoding: binary" + "\r\n" +, +                "\r\n" +, +                "File 01" + StringUtil.NEWLINE + "\r\n" +, +                "--" + multipartDataBoundary + "\r\n" +, +                "Content-Disposition: form-data; name=\"quux\"; filename=\"file-02.txt\"" + "\r\n" +, +                "Content-Type: text/plain" + "\r\n" +, +                "Content-Transfer-Encoding: binary" + "\r\n" +, +                "\r\n" +, +                "File 02" + StringUtil.NEWLINE +, +                "\r\n" +, +                "--" + multipartDataBoundary + "--" + "\r\n";, +, +        assertEquals(expected, content);, +    }, +, +    @Test, +    public void testMultiFileUploadInHtml5Mode() throws Exception {, +        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                HttpMethod.POST, "http://localhost");, +, +        DefaultHttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);, +, +        HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(factory,, +                request, true, CharsetUtil.UTF_8, EncoderMode.HTML5);, +        File file1 = new File(getClass().getResource("/file-01.txt").toURI());, +        encoder.addBodyAttribute("foo", "bar");, +        encoder.addBodyFileUpload("quux", file1, "text/plain", false);, +, +        String multipartDataBoundary = encoder.multipartDataBoundary;, +        String content = getRequestBody(encoder);, +, +        String expected = "--" + multipartDataBoundary + "\r\n" +]