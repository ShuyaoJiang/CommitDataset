[+++ b/codec/src/main/java/io/netty/handler/codec/base64/Base64.java, +import io.netty.buffer.ByteBufUtil;, +import io.netty.util.ByteProcessor;, +import io.netty.util.internal.PlatformDependent;, +, +import java.nio.ByteOrder;, +        int len43 = (len << 2) / 3;, +        byte[] alphabet = alphabet(dialect);, +            encode3to4(src, d + off, 3, dest, e, alphabet);, +            encode3to4(src, d + off, len - d, dest, e, alphabet);, +            ByteBuf src, int srcOffset, int numSigBytes, ByteBuf dest, int destOffset, byte[] alphabet) {, +        if (src.order() == ByteOrder.BIG_ENDIAN) {, +            final int inBuff;, +                case 1:, +                    inBuff = toInt(src.getByte(srcOffset));, +                    inBuff = toIntBE(src.getShort(srcOffset));, +                    break;, +                default:, +                    inBuff = numSigBytes <= 0 ? 0 : toIntBE(src.getMedium(srcOffset));, +                    break;, +            }, +            encode3to4BigEndian(inBuff, numSigBytes, dest, destOffset, alphabet);, +        } else {, +            final int inBuff;, +            switch (numSigBytes) {, +                case 1:, +                    inBuff = toInt(src.getByte(srcOffset));, +                    break;, +                case 2:, +                    inBuff = toIntLE(src.getShort(srcOffset));, +                    break;, +                default:, +                    inBuff = numSigBytes <= 0 ? 0 : toIntLE(src.getMedium(srcOffset));, +                    break;, +            }, +            encode3to4LittleEndian(inBuff, numSigBytes, dest, destOffset, alphabet);, +        }, +    }, +, +    private static int toInt(byte value) {, +        return (value & 0xff) << 16;, +    }, +, +    private static int toIntBE(short value) {, +        return (value & 0xff00) << 8 | (value & 0xff) << 8;, +    }, +, +    private static int toIntLE(short value) {, +        return (value & 0xff) << 16 | (value & 0xff00);, +    }, +, +    private static int toIntBE(int mediumValue) {, +        return (mediumValue & 0xff0000) | (mediumValue & 0xff00) | (mediumValue & 0xff);, +    }, +, +    private static int toIntLE(int mediumValue) {, +        return (mediumValue & 0xff) << 16 | (mediumValue & 0xff00) | (mediumValue & 0xff0000) >>> 16;, +    }, +, +    private static void encode3to4BigEndian(, +            int inBuff, int numSigBytes, ByteBuf dest, int destOffset, byte[] alphabet) {, +        // Packing bytes into an int to reduce bound and reference count checking., +        switch (numSigBytes) {, +            case 3:, +                dest.setInt(destOffset, alphabet[inBuff >>> 18       ] << 24 |, +                                        alphabet[inBuff >>> 12 & 0x3f] << 16 |, +                                        alphabet[inBuff >>>  6 & 0x3f] << 8  |, +                                        alphabet[inBuff        & 0x3f]);, +                break;, +            case 2:, +                dest.setInt(destOffset, alphabet[inBuff >>> 18       ] << 24 |, +                                        alphabet[inBuff >>> 12 & 0x3f] << 16 |, +                                        alphabet[inBuff >>> 6  & 0x3f] << 8  |, +                                        EQUALS_SIGN);, +                dest.setInt(destOffset, alphabet[inBuff >>> 18       ] << 24 |, +                                        alphabet[inBuff >>> 12 & 0x3f] << 16 |, +                                        EQUALS_SIGN << 8                     |, +                                        EQUALS_SIGN);, +                break;, +            default:, +                // NOOP, +                break;, +        }, +    }, +, +    private static void encode3to4LittleEndian(, +            int inBuff, int numSigBytes, ByteBuf dest, int destOffset, byte[] alphabet) {, +        // Packing bytes into an int to reduce bound and reference count checking., +        switch (numSigBytes) {, +            case 3:, +                dest.setInt(destOffset, alphabet[inBuff >>> 18       ]       |, +                                        alphabet[inBuff >>> 12 & 0x3f] << 8  |, +                                        alphabet[inBuff >>>  6 & 0x3f] << 16 |, +                                        alphabet[inBuff        & 0x3f] << 24);, +                break;, +            case 2:, +                dest.setInt(destOffset, alphabet[inBuff >>> 18       ]       |, +                                        alphabet[inBuff >>> 12 & 0x3f] << 8  |, +                                        alphabet[inBuff >>> 6  & 0x3f] << 16 |, +                                        EQUALS_SIGN << 24);]