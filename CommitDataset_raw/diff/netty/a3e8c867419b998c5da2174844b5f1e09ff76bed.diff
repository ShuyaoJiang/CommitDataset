[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setTimeToLive(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TTL, &optval, sizeof(optval));, +}, +, +static void netty_epoll_linuxsocket_setInterface(JNIEnv* env, jclass clazz, jint fd, jbyteArray interfaceAddress, jint scopeId) {, +    struct sockaddr_storage interfaceAddr;, +    socklen_t interfaceAddrSize;, +    struct sockaddr_in* interfaceIpAddr;, +    struct sockaddr_in6* interfaceIp6Addr;, +, +    if (netty_unix_socket_initSockaddr(env, interfaceAddress, scopeId, 0, &interfaceAddr, &interfaceAddrSize) == -1) {, +        return;, +    }, +, +    switch (interfaceAddr.ss_family) {, +    case AF_INET:, +        interfaceIpAddr = (struct sockaddr_in*) &interfaceAddr;, +        netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_MULTICAST_IF, &interfaceIpAddr->sin_addr, sizeof(interfaceIpAddr->sin_addr));, +        break;, +    case AF_INET6:, +        interfaceIp6Addr = (struct sockaddr_in6*) &interfaceAddr;, +        netty_unix_socket_setOption(env, fd, IPPROTO_IPV6, IPV6_MULTICAST_IF, &interfaceIp6Addr->sin6_addr, sizeof(interfaceIp6Addr->sin6_addr));, +        break;, +    }, +}, +, +static void netty_epoll_linuxsocket_joinGroup(JNIEnv* env, jclass clazz, jint fd, jbyteArray groupAddress, jbyteArray interfaceAddress, jint scopeId) {, +    struct sockaddr_storage groupAddr;, +    socklen_t groupAddrSize;, +    struct sockaddr_storage interfaceAddr;, +    socklen_t interfaceAddrSize;, +    struct sockaddr_in* groupIpAddr;, +    struct sockaddr_in* interfaceIpAddr;, +    struct ip_mreq mreq;, +, +    if (netty_unix_socket_initSockaddr(env, groupAddress, scopeId, 0, &groupAddr, &groupAddrSize) == -1) {, +        return;, +    }, +, +    if (netty_unix_socket_initSockaddr(env, interfaceAddress, scopeId, 0, &interfaceAddr, &interfaceAddrSize) == -1) {, +        return;, +    }, +, +    switch (groupAddr.ss_family) {, +    case AF_INET:, +        groupIpAddr = (struct sockaddr_in*) &groupAddr;, +        interfaceIpAddr = (struct sockaddr_in*) &interfaceAddr;, +        memcpy(&mreq.imr_multiaddr, &groupIpAddr->sin_addr, sizeof(groupIpAddr->sin_addr));, +        memcpy(&mreq.imr_interface, &interfaceIpAddr->sin_addr, sizeof(interfaceIpAddr->sin_addr));, +        netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));, +        break;, +    case AF_INET6:, +        break;, +    }, +}, +, +static void netty_epoll_linuxsocket_joinSsmGroup(JNIEnv* env, jclass clazz, jint fd, jbyteArray groupAddress, jbyteArray interfaceAddress, jint scopeId, jbyteArray sourceAddress) {, +    struct sockaddr_storage groupAddr;, +    socklen_t groupAddrSize;, +    struct sockaddr_storage interfaceAddr;, +    socklen_t interfaceAddrSize;, +    struct sockaddr_storage sourceAddr;, +    socklen_t sourceAddrSize;, +    struct sockaddr_in* groupIpAddr;, +    struct sockaddr_in* interfaceIpAddr;, +    struct sockaddr_in* sourceIpAddr;, +    struct ip_mreq_source mreq;, +, +, +    if (netty_unix_socket_initSockaddr(env, groupAddress, scopeId, 0, &groupAddr, &groupAddrSize) == -1) {, +        return;, +    }, +, +    if (netty_unix_socket_initSockaddr(env, interfaceAddress, scopeId, 0, &interfaceAddr, &interfaceAddrSize) == -1) {, +        return;, +    }, +, +    if (netty_unix_socket_initSockaddr(env, sourceAddress, scopeId, 0, &sourceAddr, &sourceAddrSize) == -1) {, +        return;, +    }, +, +    switch (groupAddr.ss_family) {, +    case AF_INET:, +        groupIpAddr = (struct sockaddr_in*) &groupAddr;, +        interfaceIpAddr = (struct sockaddr_in*) &interfaceAddr;, +        sourceIpAddr = (struct sockaddr_in*) &sourceAddr;, +        memcpy(&mreq.imr_multiaddr, &groupIpAddr->sin_addr, sizeof(groupIpAddr->sin_addr));, +        memcpy(&mreq.imr_interface, &interfaceIpAddr->sin_addr, sizeof(interfaceIpAddr->sin_addr));, +        memcpy(&mreq.imr_sourceaddr, &sourceIpAddr->sin_addr, sizeof(sourceIpAddr->sin_addr));, +        netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_ADD_SOURCE_MEMBERSHIP, &mreq, sizeof(mreq));, +        break;, +    case AF_INET6:, +        break;, +    }, +}, +, +static void netty_epoll_linuxsocket_leaveGroup(JNIEnv* env, jclass clazz, jint fd, jbyteArray groupAddress, jbyteArray interfaceAddress, jint scopeId) {, +    struct sockaddr_storage groupAddr;, +    socklen_t groupAddrSize;]