[+++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Boolean> SINGLE_EVENTEXECUTOR_PER_GROUP =, +            valueOf("SINGLE_EVENTEXECUTOR_PER_GROUP");, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Boolean> SINGLE_EVENTEXECUTOR_PER_GROUP =, +            valueOf("SINGLE_EVENTEXECUTOR_PER_GROUP");, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, +import static io.netty.channel.ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP;, +    private volatile boolean pinEventExecutor = true;, +                WRITE_BUFFER_LOW_WATER_MARK, WRITE_BUFFER_WATER_MARK, MESSAGE_SIZE_ESTIMATOR,, +                SINGLE_EVENTEXECUTOR_PER_GROUP);, +        if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            return (T) Boolean.valueOf(getPinEventExecutorPerGroup());, +        }, +        } else if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            setPinEventExecutorPerGroup((Boolean) value);, +, +    private ChannelConfig setPinEventExecutorPerGroup(boolean pinEventExecutor) {, +        this.pinEventExecutor = pinEventExecutor;, +        return this;, +    }, +, +    private boolean getPinEventExecutorPerGroup() {, +        return pinEventExecutor;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Boolean> SINGLE_EVENTEXECUTOR_PER_GROUP =, +            valueOf("SINGLE_EVENTEXECUTOR_PER_GROUP");, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, +import static io.netty.channel.ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP;, +    private volatile boolean pinEventExecutor = true;, +                WRITE_BUFFER_LOW_WATER_MARK, WRITE_BUFFER_WATER_MARK, MESSAGE_SIZE_ESTIMATOR,, +                SINGLE_EVENTEXECUTOR_PER_GROUP);, +        if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            return (T) Boolean.valueOf(getPinEventExecutorPerGroup());, +        }, +        } else if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            setPinEventExecutorPerGroup((Boolean) value);, +, +    private ChannelConfig setPinEventExecutorPerGroup(boolean pinEventExecutor) {, +        this.pinEventExecutor = pinEventExecutor;, +        return this;, +    }, +, +    private boolean getPinEventExecutorPerGroup() {, +        return pinEventExecutor;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +        Boolean pinEventExecutor = channel.config().getOption(ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP);, +        if (pinEventExecutor != null && !pinEventExecutor) {, +            return group.next();, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Boolean> SINGLE_EVENTEXECUTOR_PER_GROUP =, +            valueOf("SINGLE_EVENTEXECUTOR_PER_GROUP");, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelConfig.java, +import static io.netty.channel.ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP;, +    private volatile boolean pinEventExecutor = true;, +                WRITE_BUFFER_LOW_WATER_MARK, WRITE_BUFFER_WATER_MARK, MESSAGE_SIZE_ESTIMATOR,, +                SINGLE_EVENTEXECUTOR_PER_GROUP);, +        if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            return (T) Boolean.valueOf(getPinEventExecutorPerGroup());, +        }, +        } else if (option == SINGLE_EVENTEXECUTOR_PER_GROUP) {, +            setPinEventExecutorPerGroup((Boolean) value);, +, +    private ChannelConfig setPinEventExecutorPerGroup(boolean pinEventExecutor) {, +        this.pinEventExecutor = pinEventExecutor;, +        return this;, +    }, +, +    private boolean getPinEventExecutorPerGroup() {, +        return pinEventExecutor;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +        Boolean pinEventExecutor = channel.config().getOption(ChannelOption.SINGLE_EVENTEXECUTOR_PER_GROUP);, +        if (pinEventExecutor != null && !pinEventExecutor) {, +            return group.next();, +        }, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +    @Test, +    public void testPinExecutor() {, +        EventExecutorGroup group = new DefaultEventExecutorGroup(2);, +        ChannelPipeline pipeline = new LocalChannel().pipeline();, +        ChannelPipeline pipeline2 = new LocalChannel().pipeline();, +, +        pipeline.addLast(group, "h1", new ChannelInboundHandlerAdapter());, +        pipeline.addLast(group, "h2", new ChannelInboundHandlerAdapter());, +        pipeline2.addLast(group, "h3", new ChannelInboundHandlerAdapter());, +, +        EventExecutor executor1 = pipeline.context("h1").executor();, +        EventExecutor executor2 = pipeline.context("h2").executor();, +        assertNotNull(executor1);]