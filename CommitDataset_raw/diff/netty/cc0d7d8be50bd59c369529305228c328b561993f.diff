[+++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +            if (!writeBuffer.isEmpty()) {, +                }, +, +                for (;;) {, +                    evt = writeBuffer.poll();, +                    if (evt == null) {, +                        break;, +                    fireExceptionCaught = true;, +                }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +            if (!writeBuffer.isEmpty()) {, +                }, +, +                for (;;) {, +                    evt = writeBuffer.poll();, +                    if (evt == null) {, +                        break;, +                    fireExceptionCaught = true;, +                }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import io.netty.util.internal.SocketUtil;, +import java.net.InetSocketAddress;, +            remoteAddress = SocketUtil.stripZoneId((InetSocketAddress) remoteAddress);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +            if (!writeBuffer.isEmpty()) {, +                }, +, +                for (;;) {, +                    evt = writeBuffer.poll();, +                    if (evt == null) {, +                        break;, +                    fireExceptionCaught = true;, +                }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import io.netty.util.internal.SocketUtil;, +import java.net.InetSocketAddress;, +            remoteAddress = SocketUtil.stripZoneId((InetSocketAddress) remoteAddress);, +++ b/transport/src/main/java/io/netty/channel/socket/oio/OioClientSocketPipelineSink.java, +import java.net.InetSocketAddress;, +import io.netty.util.internal.SocketUtil;, +            remoteAddress = SocketUtil.stripZoneId((InetSocketAddress) remoteAddress);, +]