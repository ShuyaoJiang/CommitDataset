[+++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java, +        if (!in.readable()) {, +            return;, +        }, +, +            try {, +                    int resultCode = z.inflate(JZlib.Z_SYNC_FLUSH);, +                if (inHasArray) {, +                    in.skipBytes(z.next_in_index - oldNextInIndex);, +                }, +            }, +        } finally {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java, +        if (!in.readable()) {, +            return;, +        }, +, +            try {, +                    int resultCode = z.inflate(JZlib.Z_SYNC_FLUSH);, +                if (inHasArray) {, +                    in.skipBytes(z.next_in_index - oldNextInIndex);, +                }, +            }, +        } finally {, +++ b/example/src/main/java/io/netty/example/factorial/BigIntegerDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.StreamToMessageDecoder;, +, +import java.math.BigInteger;, +public class BigIntegerDecoder extends StreamToMessageDecoder<BigInteger> {, +    public BigInteger decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) {, +        if (in.readableBytes() < 5) {, +        in.markReaderIndex();, +        int magicNumber = in.readUnsignedByte();, +            in.resetReaderIndex();, +        int dataLength = in.readInt();, +        if (in.readableBytes() < dataLength) {, +            in.resetReaderIndex();, +        in.readBytes(decoded);, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java, +        if (!in.readable()) {, +            return;, +        }, +, +            try {, +                    int resultCode = z.inflate(JZlib.Z_SYNC_FLUSH);, +                if (inHasArray) {, +                    in.skipBytes(z.next_in_index - oldNextInIndex);, +                }, +            }, +        } finally {, +++ b/example/src/main/java/io/netty/example/factorial/BigIntegerDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.StreamToMessageDecoder;, +, +import java.math.BigInteger;, +public class BigIntegerDecoder extends StreamToMessageDecoder<BigInteger> {, +    public BigInteger decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) {, +        if (in.readableBytes() < 5) {, +        in.markReaderIndex();, +        int magicNumber = in.readUnsignedByte();, +            in.resetReaderIndex();, +        int dataLength = in.readInt();, +        if (in.readableBytes() < dataLength) {, +            in.resetReaderIndex();, +        in.readBytes(decoded);, +++ b/example/src/main/java/io/netty/example/factorial/FactorialClient.java, +import io.netty.channel.ChannelBootstrap;, +import io.netty.channel.socket.nio.NioEventLoop;, +import io.netty.channel.socket.nio.NioSocketChannel;, +    public void run() throws Exception {, +        ChannelBootstrap b = new ChannelBootstrap();, +        try {, +            b.eventLoop(new NioEventLoop()), +             .channel(new NioSocketChannel()), +             .remoteAddress(host, port), +             .initializer(new FactorialClientInitializer(count));, +            ChannelFuture f = b.connect().sync();, +                (FactorialClientHandler) f.channel().pipeline().last();, +        } finally {, +            b.shutdown();, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java, +        if (!in.readable()) {, +            return;, +        }, +, +            try {, +                    int resultCode = z.inflate(JZlib.Z_SYNC_FLUSH);, +                if (inHasArray) {, +                    in.skipBytes(z.next_in_index - oldNextInIndex);, +                }, +            }, +        } finally {, +++ b/example/src/main/java/io/netty/example/factorial/BigIntegerDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.StreamToMessageDecoder;, +, +import java.math.BigInteger;, +public class BigIntegerDecoder extends StreamToMessageDecoder<BigInteger> {]