[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    private boolean destroyed;, +    private void checkDestroyed(ChannelHandler handler) {, +        if (destroyed) {, +            throw new ChannelPipelineException("Channel already closed, can not add handler " + handler);, +        }, +    }, +, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(newHandler);, +        destroyed = true;, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    private boolean destroyed;, +    private void checkDestroyed(ChannelHandler handler) {, +        if (destroyed) {, +            throw new ChannelPipelineException("Channel already closed, can not add handler " + handler);, +        }, +    }, +, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(handler);, +            checkDestroyed(newHandler);, +        destroyed = true;, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +    @Test, +    public void testHandlerAfterClose() throws Exception {, +        EmbeddedChannel channel = new EmbeddedChannel();, +        channel.close().syncUninterruptibly();, +, +        assertFalse(channel.isActive());, +, +        final AtomicBoolean addedHandler = new AtomicBoolean();, +        final AtomicBoolean removedHandler = new AtomicBoolean();, +, +        ChannelPipeline pipeline = channel.pipeline();, +        try {, +            pipeline.addLast(new ChannelHandlerAdapter() {, +                @Override, +                public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +                    addedHandler.set(true);, +                }, +, +                @Override, +                public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {, +                    removedHandler.set(true);, +                }, +            });, +            fail();, +        } catch (ChannelPipelineException e) {, +            // expected, +        }, +, +        assertFalse(addedHandler.get());, +        assertFalse(removedHandler.get());, +    }, +]