[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        final FlowState state;, +            cancel(null);, +        }, +, +        /**, +         * Clears the pending queue and writes errors for each remaining frame., +         *, +         * @param cause the {@link Throwable} that caused this method to be invoked., +         */, +        void cancel(Throwable cause) {, +                writeError(frame, streamError(stream.id(), INTERNAL_ERROR, cause,, +            // In case an exception is thrown we want to, +            // remember it and pass it to cancel(Throwable)., +            Throwable cause = null;, +            } catch (Throwable t) {, +                cause = t;, +                    cancel(cause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        final FlowState state;, +            cancel(null);, +        }, +, +        /**, +         * Clears the pending queue and writes errors for each remaining frame., +         *, +         * @param cause the {@link Throwable} that caused this method to be invoked., +         */, +        void cancel(Throwable cause) {, +                writeError(frame, streamError(stream.id(), INTERNAL_ERROR, cause,, +            // In case an exception is thrown we want to, +            // remember it and pass it to cancel(Throwable)., +            Throwable cause = null;, +            } catch (Throwable t) {, +                cause = t;, +                    cancel(cause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2RemoteFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        final FlowState state;, +            cancel(null);, +        }, +, +        /**, +         * Clears the pending queue and writes errors for each remaining frame., +         *, +         * @param cause the {@link Throwable} that caused this method to be invoked., +         */, +        void cancel(Throwable cause) {, +                writeError(frame, streamError(stream.id(), INTERNAL_ERROR, cause,, +            // In case an exception is thrown we want to, +            // remember it and pass it to cancel(Throwable)., +            Throwable cause = null;, +            } catch (Throwable t) {, +                cause = t;, +                    cancel(cause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2RemoteFlowController.java, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowControllerTest.java]