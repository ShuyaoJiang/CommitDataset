[+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.AttributeKey;, +, +    private final Map<AttributeKey<?>, Object> attrs = new LinkedHashMap<AttributeKey<?>, Object>();, +     * Allow to specify an initial attribute of the newly created {@link Channel}.  If the {@code value} is, +     * {@code null}, the attribute of the specified {@code key} is removed., +     */, +    public <T> B attr(AttributeKey<T> key, T value) {, +        if (key == null) {, +            throw new NullPointerException("key");, +        }, +        if (value == null) {, +            attrs.remove(key);, +        } else {, +            attrs.put(key, value);, +        }, +, +        return (B) this;, +    }, +, +    /**, +    protected final Map<AttributeKey<?>, Object> attrs() {, +        return attrs;, +    }, +, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.AttributeKey;, +, +    private final Map<AttributeKey<?>, Object> attrs = new LinkedHashMap<AttributeKey<?>, Object>();, +     * Allow to specify an initial attribute of the newly created {@link Channel}.  If the {@code value} is, +     * {@code null}, the attribute of the specified {@code key} is removed., +     */, +    public <T> B attr(AttributeKey<T> key, T value) {, +        if (key == null) {, +            throw new NullPointerException("key");, +        }, +        if (value == null) {, +            attrs.remove(key);, +        } else {, +            attrs.put(key, value);, +        }, +, +        return (B) this;, +    }, +, +    /**, +    protected final Map<AttributeKey<?>, Object> attrs() {, +        return attrs;, +    }, +, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelPipeline;, +import io.netty.util.AttributeKey;, +        for (Entry<AttributeKey<?>, Object> e: attrs().entrySet()) {, +            channel.attr((AttributeKey<Object>) e.getKey()).set(e.getValue());, +        }, +, +     * Create a new {@link Bootstrap} which has the identical configuration with this {@link Bootstrap}., +     * This method is useful when you make multiple connections with similar settings., +    public Bootstrap duplicate() {, +        Bootstrap b = new Bootstrap(), +                .group(group()).channelFactory(factory()).handler(handler()), +                .localAddress(localAddress()).remoteAddress(remoteAddress);, +        b.options().putAll(options());, +        b.attrs().putAll(attrs());, +        return b;, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.AttributeKey;, +, +    private final Map<AttributeKey<?>, Object> attrs = new LinkedHashMap<AttributeKey<?>, Object>();, +     * Allow to specify an initial attribute of the newly created {@link Channel}.  If the {@code value} is, +     * {@code null}, the attribute of the specified {@code key} is removed., +     */, +    public <T> B attr(AttributeKey<T> key, T value) {, +        if (key == null) {, +            throw new NullPointerException("key");, +        }, +        if (value == null) {, +            attrs.remove(key);, +        } else {, +            attrs.put(key, value);]