[+++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpClientPipelineFactory.java, +import org.jboss.netty.handler.codec.http.HttpContentDecompressor;, +        pipeline.addLast("inflater", new HttpContentDecompressor());, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpClientPipelineFactory.java, +import org.jboss.netty.handler.codec.http.HttpContentDecompressor;, +        pipeline.addLast("inflater", new HttpContentDecompressor());, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentDecoder.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.codec.http;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.Channels;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelUpstreamHandler;, +import org.jboss.netty.handler.codec.embedder.DecoderEmbedder;, +, +/**, + * Decodes the content of the received {@link HttpMessage} and {@link HttpChunk}., + * The original content ({@link HttpMessage#getContent()} or {@link HttpChunk#getContent()}), + * is replaced with the new content decoded by the {@link DecoderEmbedder},, + * which is created by {@link #beginDecode(String)}.  Once decoding is finished,, + * the value of the <tt>'Content-Encoding'</tt> header is set to <tt>'identity'</tt>, + * and the <tt>'Content-Length'</tt> header is updated to the length of the, + * decoded content.  If the content encoding of the original is not supported, + * by the decoder, {@link #beginDecode(String)} returns {@code null} and no, + * decoding occurs (i.e. pass-through)., + * <p>, + * Please note that this is an abstract class.  You have to extend this class, + * and implement {@link #beginDecode(String)} properly to make this class, + * functional.  For example, refer to the source code of {@link HttpContentDecompressor}., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + * @version $Rev$, $Date$, + */, +@ChannelPipelineCoverage("one"), +public abstract class HttpContentDecoder extends SimpleChannelUpstreamHandler {, +, +    private volatile HttpMessage previous;, +    private volatile DecoderEmbedder<ChannelBuffer> decoder;, +, +    /**, +     * Creates a new instance., +     */, +    protected HttpContentDecoder() {, +        super();, +    }, +, +    @Override, +    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {, +        Object msg = e.getMessage();, +        if (msg instanceof HttpMessage) {, +            HttpMessage m = (HttpMessage) msg;, +, +            decoder = null;, +            if (m.isChunked()) {, +                previous = m;, +            } else {, +                previous = null;, +            }, +, +            // Determine the content encoding., +            String contentEncoding = m.getHeader(HttpHeaders.Names.CONTENT_ENCODING);, +            if (contentEncoding != null) {, +                contentEncoding = contentEncoding.trim();, +            }, +, +            if (contentEncoding != null && (decoder = beginDecode(contentEncoding)) != null) {, +                // Decode the content and remove or replace the existing headers, +                // so that the message looks like a decoded message., +                m.setHeader(HttpHeaders.Names.CONTENT_ENCODING, HttpHeaders.Values.IDENTITY);, +, +                if (!m.isChunked()) {, +                    ChannelBuffer content = m.getContent();, +                    if (content.readable()) {, +                        content = decode(content);, +, +                        // Finish decoding., +                        ChannelBuffer lastProduct = finishDecode();, +, +                        // Merge the last product into the content., +                        if (content == null) {, +                            if (lastProduct != null) {]