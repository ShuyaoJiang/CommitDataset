[+++ b/handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java, +            EmbeddedChannel ch = new EmbeddedChannel(false, false,, +            ch.register();, +, +            assertTrue(readIssued);, +            readIssued = false;, +, +++ b/handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java, +            EmbeddedChannel ch = new EmbeddedChannel(false, false,, +            ch.register();, +, +            assertTrue(readIssued);, +            readIssued = false;, +, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +     * Create a new instance with the pipeline initialized with the specified handlers., +     *, +     * @param register {@code true} if this {@link Channel} is registered to the {@link EventLoop} in the, +     *                 constructor. If {@code false} the user will need to call {@link #register()}., +     * @param hasDisconnect {@code false} if this {@link Channel} will delegate {@link #disconnect()}, +     *                      to {@link #close()}, {@link false} otherwise., +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(boolean register, boolean hasDisconnect, ChannelHandler... handlers) {, +        this(EmbeddedChannelId.INSTANCE, register, hasDisconnect, handlers);, +    }, +, +    /**, +    public EmbeddedChannel(ChannelId channelId, ChannelHandler... handlers) {, +    public EmbeddedChannel(ChannelId channelId, boolean hasDisconnect, ChannelHandler... handlers) {, +        this(channelId, true, hasDisconnect, handlers);, +    }, +, +    /**, +     * Create a new instance with the channel ID set to the given ID and the pipeline, +     * initialized with the specified handlers., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     * @param register {@code true} if this {@link Channel} is registered to the {@link EventLoop} in the, +     *                 constructor. If {@code false} the user will need to call {@link #register()}., +     * @param hasDisconnect {@code false} if this {@link Channel} will delegate {@link #disconnect()}, +     *                      to {@link #close()}, {@link false} otherwise., +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(ChannelId channelId, boolean register, boolean hasDisconnect,, +                           final ChannelHandler... handlers) {, +        setup(register, handlers);, +        setup(true, handlers);, +    private void setup(boolean register, final ChannelHandler... handlers) {, +        if (register) {, +    }, +, +    /**, +     * Register this {@code Channel} on its {@link EventLoop}., +     */, +    public void register() throws Exception {, +        ChannelFuture future = loop.register(this);, +        assert future.isDone();, +        Throwable cause = future.cause();, +        if (cause != null) {, +            PlatformDependent.throwException(cause);, +        }, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java, +            EmbeddedChannel ch = new EmbeddedChannel(false, false,, +            ch.register();, +, +            assertTrue(readIssued);, +            readIssued = false;, +, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +     * Create a new instance with the pipeline initialized with the specified handlers., +     *, +     * @param register {@code true} if this {@link Channel} is registered to the {@link EventLoop} in the, +     *                 constructor. If {@code false} the user will need to call {@link #register()}., +     * @param hasDisconnect {@code false} if this {@link Channel} will delegate {@link #disconnect()}, +     *                      to {@link #close()}, {@link false} otherwise., +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(boolean register, boolean hasDisconnect, ChannelHandler... handlers) {, +        this(EmbeddedChannelId.INSTANCE, register, hasDisconnect, handlers);, +    }, +, +    /**, +    public EmbeddedChannel(ChannelId channelId, ChannelHandler... handlers) {, +    public EmbeddedChannel(ChannelId channelId, boolean hasDisconnect, ChannelHandler... handlers) {, +        this(channelId, true, hasDisconnect, handlers);, +    }, +, +    /**, +     * Create a new instance with the channel ID set to the given ID and the pipeline, +     * initialized with the specified handlers., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     * @param register {@code true} if this {@link Channel} is registered to the {@link EventLoop} in the, +     *                 constructor. If {@code false} the user will need to call {@link #register()}., +     * @param hasDisconnect {@code false} if this {@link Channel} will delegate {@link #disconnect()}, +     *                      to {@link #close()}, {@link false} otherwise., +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */]