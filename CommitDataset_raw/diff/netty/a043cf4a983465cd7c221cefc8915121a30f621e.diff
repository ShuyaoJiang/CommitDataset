[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        ClassLoader systemClassLoader = null;, +            systemClassLoader = getSystemClassLoader();, +            Class<?> vmClass = Class.forName("sun.misc.VM", true, systemClassLoader);, +                    "java.lang.management.ManagementFactory", true, systemClassLoader);, +                    "java.lang.management.RuntimeMXBean", true, systemClassLoader);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        ClassLoader systemClassLoader = null;, +            systemClassLoader = getSystemClassLoader();, +            Class<?> vmClass = Class.forName("sun.misc.VM", true, systemClassLoader);, +                    "java.lang.management.ManagementFactory", true, systemClassLoader);, +                    "java.lang.management.RuntimeMXBean", true, systemClassLoader);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +                    } catch (Throwable cause) {, +                        return cause;, +                Throwable t = (Throwable) maybeUnaligned;, +                logger.debug("java.nio.Bits.unaligned: unavailable {}", unaligned, t);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        ClassLoader systemClassLoader = null;, +            systemClassLoader = getSystemClassLoader();, +            Class<?> vmClass = Class.forName("sun.misc.VM", true, systemClassLoader);, +                    "java.lang.management.ManagementFactory", true, systemClassLoader);, +                    "java.lang.management.RuntimeMXBean", true, systemClassLoader);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +                    } catch (Throwable cause) {, +                        return cause;, +                Throwable t = (Throwable) maybeUnaligned;, +                logger.debug("java.nio.Bits.unaligned: unavailable {}", unaligned, t);, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +                } catch (Throwable cause) {, +                    return cause;, +            if (maybeSelectorImplClass instanceof Throwable) {, +                Throwable t = (Throwable) maybeSelectorImplClass;, +                logger.trace("failed to instrument a special java.util.Set into: {}", selector, t);]