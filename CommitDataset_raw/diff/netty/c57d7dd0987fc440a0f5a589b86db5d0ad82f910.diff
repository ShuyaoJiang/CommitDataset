[+++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        final EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +                    //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        final EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +                    //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/transport/src/main/java/io/netty/channel/EventLoopFactory.java, +package io.netty.channel;, +, +import java.util.concurrent.ThreadFactory;, +, +public interface EventLoopFactory<T extends EventLoop> {, +    T newEventLoop(ThreadFactory threadFactory) throws Exception;, +}, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        final EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +                    //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/transport/src/main/java/io/netty/channel/EventLoopFactory.java, +package io.netty.channel;, +, +import java.util.concurrent.ThreadFactory;, +, +public interface EventLoopFactory<T extends EventLoop> {, +    T newEventLoop(ThreadFactory threadFactory) throws Exception;, +}, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory) {, +        this(loopFactory, Runtime.getRuntime().availableProcessors() * 2);, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory, int nThreads) {, +        this(loopFactory, nThreads, Executors.defaultThreadFactory());, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory, int nThreads, ThreadFactory threadFactory) {, +        if (loopFactory == null) {, +            throw new NullPointerException("loopFactory");, +            throw new IllegalArgumentException(String.format(, +                    "nThreads: %d (expected: > 0)", nThreads));, +                children[i] = loopFactory.newEventLoop(threadFactory);, +                throw new EventLoopException("failed to create a child event loop", e);, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        final EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +                    //s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/transport/src/main/java/io/netty/channel/EventLoopFactory.java, +package io.netty.channel;, +, +import java.util.concurrent.ThreadFactory;, +, +public interface EventLoopFactory<T extends EventLoop> {, +    T newEventLoop(ThreadFactory threadFactory) throws Exception;, +}, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory) {, +        this(loopFactory, Runtime.getRuntime().availableProcessors() * 2);, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory, int nThreads) {, +        this(loopFactory, nThreads, Executors.defaultThreadFactory());, +    public MultithreadEventLoop(EventLoopFactory<? extends SingleThreadEventLoop> loopFactory, int nThreads, ThreadFactory threadFactory) {, +        if (loopFactory == null) {, +            throw new NullPointerException("loopFactory");, +            throw new IllegalArgumentException(String.format(, +                    "nThreads: %d (expected: > 0)", nThreads));, +                children[i] = loopFactory.newEventLoop(threadFactory);, +                throw new EventLoopException("failed to create a child event loop", e);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/SelectorEventLoop.java, +import io.netty.channel.EventLoopFactory;, +, +    public static final EventLoopFactory<SelectorEventLoop> FACTORY = new EventLoopFactory<SelectorEventLoop>() {, +        @Override, +        public SelectorEventLoop newEventLoop(ThreadFactory threadFactory), +                throws Exception {, +            return new SelectorEventLoop(threadFactory);, +        }, +    };, +]