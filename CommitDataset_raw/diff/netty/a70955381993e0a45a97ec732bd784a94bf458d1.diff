[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.concurrent;, +, +import io.netty.util.internal.ObjectUtil;, +, +import java.util.Iterator;, +import java.util.PriorityQueue;, +import java.util.Queue;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Abstract base class for {@link EventExecutor}s that want to support scheduling., + */, +public abstract class AbstractScheduledEventExecutor extends AbstractEventExecutor {, +, +    Queue<ScheduledFutureTask<?>> scheduledTaskQueue;, +, +    protected AbstractScheduledEventExecutor() {, +    }, +, +    protected AbstractScheduledEventExecutor(EventExecutorGroup parent) {, +        super(parent);, +    }, +, +    protected static long nanoTime() {, +        return ScheduledFutureTask.nanoTime();, +    }, +, +    Queue<ScheduledFutureTask<?>> scheduledTaskQueue() {, +        if (scheduledTaskQueue == null) {, +            scheduledTaskQueue = new PriorityQueue<ScheduledFutureTask<?>>();, +        }, +        return scheduledTaskQueue;, +    }, +, +    private static  boolean isNullOrEmpty(Queue<ScheduledFutureTask<?>> queue) {, +        return queue == null || queue.isEmpty();, +    }, +, +    /**, +     * Cancel all scheduled tasks., +     *, +     * This method MUST be called only when {@link #inEventLoop()} is {@code true}., +     */, +    protected void cancelScheduledTasks() {, +        assert inEventLoop();, +        Queue<ScheduledFutureTask<?>> scheduledTaskQueue = this.scheduledTaskQueue;, +        if (isNullOrEmpty(scheduledTaskQueue)) {, +            return;, +        }, +, +        final ScheduledFutureTask<?>[] scheduledTasks =, +                scheduledTaskQueue.toArray(new ScheduledFutureTask<?>[scheduledTaskQueue.size()]);, +, +        for (ScheduledFutureTask<?> task: scheduledTasks) {, +            task.cancel(false);, +        }, +, +        scheduledTaskQueue.clear();, +    }, +, +    /**, +     * @see {@link #pollScheduledTask(long)}, +     */, +    protected final Runnable pollScheduledTask() {, +        return pollScheduledTask(nanoTime());, +    }, +, +    /**, +     * Return the {@link Runnable} which is ready to be executed with the given {@code nanoTime}., +     * You should use {@link #nanoTime()} to retrieve the the correct {@code nanoTime}., +     */, +    protected final Runnable pollScheduledTask(long nanoTime) {, +        assert inEventLoop();, +, +        Queue<ScheduledFutureTask<?>> scheduledTaskQueue = this.scheduledTaskQueue;, +        ScheduledFutureTask<?> scheduledTask = scheduledTaskQueue == null ? null : scheduledTaskQueue.peek();, +        if (scheduledTask == null) {, +            return null;, +        }, +, +        if (scheduledTask.deadlineNanos() <= nanoTime) {, +            scheduledTaskQueue.remove();]