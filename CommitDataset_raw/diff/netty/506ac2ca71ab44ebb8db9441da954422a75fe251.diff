[+++ b/codec-socks/src/main/java/io/netty/handler/codec/socksx/v5/Socks5AddressDecoder.java, +                    return NetUtil.bytesToIpAddress(tmp);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socksx/v5/Socks5AddressDecoder.java, +                    return NetUtil.bytesToIpAddress(tmp);, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandRequestDecoderTest.java, +                NetUtil.bytesToIpAddress(IPAddressUtil.textToNumericFormatV6("::1")) };, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socksx/v5/Socks5AddressDecoder.java, +                    return NetUtil.bytesToIpAddress(tmp);, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandRequestDecoderTest.java, +                NetUtil.bytesToIpAddress(IPAddressUtil.textToNumericFormatV6("::1")) };, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandResponseDecoderTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +                 "1111:111:11:1::1", 80);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socksx/v5/Socks5AddressDecoder.java, +                    return NetUtil.bytesToIpAddress(tmp);, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandRequestDecoderTest.java, +                NetUtil.bytesToIpAddress(IPAddressUtil.textToNumericFormatV6("::1")) };, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandResponseDecoderTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +                 "1111:111:11:1::1", 80);, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +    public static String bytesToIpAddress(byte[] bytes) {, +        return bytesToIpAddress(bytes, 0, bytes.length);, +    }, +, +    /**, +     * Converts 4-byte or 16-byte data into an IPv4 or IPv6 string respectively., +     *, +     * @throws IllegalArgumentException, +     *         if {@code length} is not {@code 4} nor {@code 16}, +     */, +        switch (length) {, +            case 4: {, +                return new StringBuilder(15), +                        .append(bytes[offset] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 1] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 2] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 3] & 0xff).toString();, +            case 16:, +                return toAddressString(bytes, offset, false);, +            default:, +    }, +            throw new IllegalArgumentException("Unhandled type: " + ip);, +        return toAddressString(ip.getAddress(), 0, ipv4Mapped);, +    }, +, +    private static String toAddressString(byte[] bytes, int offset, boolean ipv4Mapped) {, +        final int end = offset + words.length;, +        for (i = offset; i < end; ++i) {, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socksx/v5/Socks5AddressDecoder.java, +                    return NetUtil.bytesToIpAddress(tmp);, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandRequestDecoderTest.java, +                NetUtil.bytesToIpAddress(IPAddressUtil.textToNumericFormatV6("::1")) };, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socksx/v5/Socks5CommandResponseDecoderTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +                 "1111:111:11:1::1", 80);, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +    public static String bytesToIpAddress(byte[] bytes) {, +        return bytesToIpAddress(bytes, 0, bytes.length);, +    }, +, +    /**, +     * Converts 4-byte or 16-byte data into an IPv4 or IPv6 string respectively., +     *, +     * @throws IllegalArgumentException, +     *         if {@code length} is not {@code 4} nor {@code 16}, +     */, +        switch (length) {, +            case 4: {, +                return new StringBuilder(15), +                        .append(bytes[offset] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 1] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 2] & 0xff), +                        .append('.'), +                        .append(bytes[offset + 3] & 0xff).toString();, +            case 16:, +                return toAddressString(bytes, offset, false);, +            default:, +    }, +            throw new IllegalArgumentException("Unhandled type: " + ip);, +        return toAddressString(ip.getAddress(), 0, ipv4Mapped);, +    }, +, +    private static String toAddressString(byte[] bytes, int offset, boolean ipv4Mapped) {, +        final int end = offset + words.length;, +        for (i = offset; i < end; ++i) {, +++ b/common/src/test/java/io/netty/util/NetUtilTest.java, +import java.net.Inet6Address;, +import static io.netty.util.NetUtil.bytesToIpAddress;, +import static io.netty.util.NetUtil.createByteArrayFromIpAddressString;, +import static io.netty.util.NetUtil.getByName;, +import static io.netty.util.NetUtil.toAddressString;]