[+++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +import java.util.List;, +, +public class LengthFieldPrepender extends MessageToMessageEncoder<ByteBuf> {, +    protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {, +            out.add(ctx.alloc().buffer(1).writeByte((byte) length));, +            out.add(ctx.alloc().buffer(2).writeShort((short) length));, +            out.add(ctx.alloc().buffer(3).writeMedium(length));, +            out.add(ctx.alloc().buffer(4).writeInt(length));, +            out.add(ctx.alloc().buffer(8).writeLong(length));, +        out.add(msg.retain());, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +import java.util.List;, +, +public class LengthFieldPrepender extends MessageToMessageEncoder<ByteBuf> {, +    protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {, +            out.add(ctx.alloc().buffer(1).writeByte((byte) length));, +            out.add(ctx.alloc().buffer(2).writeShort((short) length));, +            out.add(ctx.alloc().buffer(3).writeMedium(length));, +            out.add(ctx.alloc().buffer(4).writeInt(length));, +            out.add(ctx.alloc().buffer(8).writeLong(length));, +        out.add(msg.retain());, +++ b/codec/src/test/java/io/netty/handler/codec/frame/LengthFieldPrependerTest.java, +        ByteBuf buf = (ByteBuf) ch.readOutbound();, +        assertEquals(4, buf.readableBytes());, +        assertEquals(msg.readableBytes(), buf.readInt());, +        buf.release();, +, +        buf = (ByteBuf) ch.readOutbound();, +        assertSame(buf, msg);, +        ByteBuf buf = (ByteBuf) ch.readOutbound();, +        assertEquals(4, buf.readableBytes());, +        assertEquals(5, buf.readInt());, +        buf.release();, +, +        buf = (ByteBuf) ch.readOutbound();, +        assertSame(buf, msg);, +        ByteBuf buf = (ByteBuf) ch.readOutbound();, +        assertEquals(4, buf.readableBytes());, +        assertEquals(msg.readableBytes() - 1, buf.readInt());, +        buf.release();, +, +        buf = (ByteBuf) ch.readOutbound();, +        assertSame(buf, msg);]