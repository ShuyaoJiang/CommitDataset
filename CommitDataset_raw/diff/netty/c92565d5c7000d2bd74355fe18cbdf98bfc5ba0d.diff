[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        if (HttpUtil.isUnsupportedExpectation(start)) {, +            // if the request contains an unsupported expectation, we return 417, +            pipeline.fireUserEventTriggered(HttpExpectationFailedEvent.INSTANCE);, +            return EXPECTATION_FAILED.retainedDuplicate();, +        } else if (HttpUtil.is100ContinueExpected(start)) {, +            // if the request contains 100-continue but the content-length is too large, we return 413, +            return TOO_LARGE.retainedDuplicate();, +, +        if (msg instanceof HttpResponse) {, +            final HttpResponse httpResponse = (HttpResponse) msg;, +            return httpResponse.status().codeClass().equals(HttpStatusClass.CLIENT_ERROR);, +        }, +        return false;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        if (HttpUtil.isUnsupportedExpectation(start)) {, +            // if the request contains an unsupported expectation, we return 417, +            pipeline.fireUserEventTriggered(HttpExpectationFailedEvent.INSTANCE);, +            return EXPECTATION_FAILED.retainedDuplicate();, +        } else if (HttpUtil.is100ContinueExpected(start)) {, +            // if the request contains 100-continue but the content-length is too large, we return 413, +            return TOO_LARGE.retainedDuplicate();, +, +        if (msg instanceof HttpResponse) {, +            final HttpResponse httpResponse = (HttpResponse) msg;, +            return httpResponse.status().codeClass().equals(HttpStatusClass.CLIENT_ERROR);, +        }, +        return false;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * Returns {@code true} if and only if the specified message contains an expect header and the only expectation, +     * present is the 100-continue expectation. Note that this method returns {@code false} if the expect header is, +     * not valid for the message (e.g., the message is a response, or the version on the message is HTTP/1.0)., +     *, +     * @param message the message, +     * @return {@code true} if and only if the expectation 100-continue is present and it is the only expectation, +     * present, +        if (!isExpectHeaderValid(message)) {, +        final String expectValue = message.headers().get(HttpHeaderNames.EXPECT);, +        // unquoted tokens in the expect header are case-insensitive, thus 100-continue is case insensitive, +        return HttpHeaderValues.CONTINUE.toString().equalsIgnoreCase(expectValue);, +    }, +, +    /**, +     * Returns {@code true} if the specified message contains an expect header specifying an expectation that is not, +     * supported. Note that this method returns {@code false} if the expect header is not valid for the message, +     * (e.g., the message is a response, or the version on the message is HTTP/1.0)., +     *, +     * @param message the message, +     * @return {@code true} if and only if an expectation is present that is not supported, +     */, +    static boolean isUnsupportedExpectation(HttpMessage message) {, +        if (!isExpectHeaderValid(message)) {, +        final String expectValue = message.headers().get(HttpHeaderNames.EXPECT);, +        return expectValue != null && !HttpHeaderValues.CONTINUE.toString().equalsIgnoreCase(expectValue);, +    private static boolean isExpectHeaderValid(final HttpMessage message) {, +        /*, +         * Expect: 100-continue is for requests only and it works only on HTTP/1.1 or later. Note further that RFC 7231, +         * section 5.1.1 says "A server that receives a 100-continue expectation in an HTTP/1.0 request MUST ignore, +         * that expectation.", +         */, +        return message instanceof HttpRequest &&, +                message.protocolVersion().compareTo(HttpVersion.HTTP_1_1) >= 0;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        if (HttpUtil.isUnsupportedExpectation(start)) {, +            // if the request contains an unsupported expectation, we return 417, +            pipeline.fireUserEventTriggered(HttpExpectationFailedEvent.INSTANCE);, +            return EXPECTATION_FAILED.retainedDuplicate();, +        } else if (HttpUtil.is100ContinueExpected(start)) {, +            // if the request contains 100-continue but the content-length is too large, we return 413, +            return TOO_LARGE.retainedDuplicate();, +, +        if (msg instanceof HttpResponse) {, +            final HttpResponse httpResponse = (HttpResponse) msg;, +            return httpResponse.status().codeClass().equals(HttpStatusClass.CLIENT_ERROR);, +        }, +        return false;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * Returns {@code true} if and only if the specified message contains an expect header and the only expectation, +     * present is the 100-continue expectation. Note that this method returns {@code false} if the expect header is, +     * not valid for the message (e.g., the message is a response, or the version on the message is HTTP/1.0)., +     *, +     * @param message the message, +     * @return {@code true} if and only if the expectation 100-continue is present and it is the only expectation, +     * present, +        if (!isExpectHeaderValid(message)) {, +        final String expectValue = message.headers().get(HttpHeaderNames.EXPECT);, +        // unquoted tokens in the expect header are case-insensitive, thus 100-continue is case insensitive, +        return HttpHeaderValues.CONTINUE.toString().equalsIgnoreCase(expectValue);, +    }, +, +    /**, +     * Returns {@code true} if the specified message contains an expect header specifying an expectation that is not, +     * supported. Note that this method returns {@code false} if the expect header is not valid for the message, +     * (e.g., the message is a response, or the version on the message is HTTP/1.0)., +     *, +     * @param message the message, +     * @return {@code true} if and only if an expectation is present that is not supported, +     */, +    static boolean isUnsupportedExpectation(HttpMessage message) {, +        if (!isExpectHeaderValid(message)) {]