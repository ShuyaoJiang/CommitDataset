[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private final long maxFramePayloadLength;, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > maxFramePayloadLength) {, +                protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private final long maxFramePayloadLength;, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > maxFramePayloadLength) {, +                protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        super(maskedPayload, allowExtensions, maxFramePayloadLength);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private final long maxFramePayloadLength;, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > maxFramePayloadLength) {, +                protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        super(maskedPayload, allowExtensions, maxFramePayloadLength);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import java.net.URI;, +import java.util.Map;, +, +    private final long maxFramePayloadLength;, +, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload, +            Map<String, String> customHeaders, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +     * Returns the max length for any frame's payload, +     */, +    public long getMaxFramePayloadLength() {, +        return maxFramePayloadLength;, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private final long maxFramePayloadLength;, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > maxFramePayloadLength) {, +                protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks.]