[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        return localEndpoint.lastStreamKnownByPeer >= 0;, +        localEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        return remoteEndpoint.lastStreamKnownByPeer >= 0;, +        remoteEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        private int lastStreamKnownByPeer = -1;, +        public int lastStreamKnownByPeer() {, +            return lastStreamKnownByPeer;, +        private void lastStreamKnownByPeer(int lastKnownStream) {, +            this.lastStreamKnownByPeer = lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastStreamKnownByPeer()) {, +                                                      localEndpoint.lastStreamKnownByPeer());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        return localEndpoint.lastStreamKnownByPeer >= 0;, +        localEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        return remoteEndpoint.lastStreamKnownByPeer >= 0;, +        remoteEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        private int lastStreamKnownByPeer = -1;, +        public int lastStreamKnownByPeer() {, +            return lastStreamKnownByPeer;, +        private void lastStreamKnownByPeer(int lastKnownStream) {, +            this.lastStreamKnownByPeer = lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastStreamKnownByPeer()) {, +                                                      localEndpoint.lastStreamKnownByPeer());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        /**, +         * Helper method for determining whether or not to ignore inbound frames. A stream is considered to be created, +         * after a go away is sent if the following conditions hold:, +         * <p/>, +         * <ul>, +         *     <li>A {@code GOAWAY} must have been sent by the local endpoint</li>, +         *     <li>The {@code streamId} must identify a legitimate stream id for the remote endpoint to be creating</li>, +         *     <li>{@code streamId} is greater than the Last Known Stream ID which was sent by the local endpoint, +         *     in the last {@code GOAWAY} frame</li>, +         * </ul>, +         * <p/>, +         */, +            Http2Connection.Endpoint<?> remote = connection.remote();, +            return connection.goAwaySent() && remote.isValidStreamId(streamId) &&, +                    streamId > remote.lastStreamKnownByPeer();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        return localEndpoint.lastStreamKnownByPeer >= 0;, +        localEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        return remoteEndpoint.lastStreamKnownByPeer >= 0;, +        remoteEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        private int lastStreamKnownByPeer = -1;, +        public int lastStreamKnownByPeer() {, +            return lastStreamKnownByPeer;, +        private void lastStreamKnownByPeer(int lastKnownStream) {, +            this.lastStreamKnownByPeer = lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastStreamKnownByPeer()) {, +                                                      localEndpoint.lastStreamKnownByPeer());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        /**, +         * Helper method for determining whether or not to ignore inbound frames. A stream is considered to be created, +         * after a go away is sent if the following conditions hold:, +         * <p/>, +         * <ul>, +         *     <li>A {@code GOAWAY} must have been sent by the local endpoint</li>, +         *     <li>The {@code streamId} must identify a legitimate stream id for the remote endpoint to be creating</li>, +         *     <li>{@code streamId} is greater than the Last Known Stream ID which was sent by the local endpoint, +         *     in the last {@code GOAWAY} frame</li>, +         * </ul>, +         * <p/>, +         */, +            Http2Connection.Endpoint<?> remote = connection.remote();, +            return connection.goAwaySent() && remote.isValidStreamId(streamId) &&, +                    streamId > remote.lastStreamKnownByPeer();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +         * This method differs from {@link #createIdleStream(int)} because the initial state of the stream will be, +        int lastStreamKnownByPeer();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        return localEndpoint.lastStreamKnownByPeer >= 0;, +        localEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        return remoteEndpoint.lastStreamKnownByPeer >= 0;, +        remoteEndpoint.lastStreamKnownByPeer(lastKnownStream);, +        private int lastStreamKnownByPeer = -1;, +        public int lastStreamKnownByPeer() {, +            return lastStreamKnownByPeer;, +        private void lastStreamKnownByPeer(int lastKnownStream) {, +            this.lastStreamKnownByPeer = lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastStreamKnownByPeer()) {, +                                                      localEndpoint.lastStreamKnownByPeer());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        /**, +         * Helper method for determining whether or not to ignore inbound frames. A stream is considered to be created, +         * after a go away is sent if the following conditions hold:, +         * <p/>, +         * <ul>, +         *     <li>A {@code GOAWAY} must have been sent by the local endpoint</li>, +         *     <li>The {@code streamId} must identify a legitimate stream id for the remote endpoint to be creating</li>, +         *     <li>{@code streamId} is greater than the Last Known Stream ID which was sent by the local endpoint, +         *     in the last {@code GOAWAY} frame</li>, +         * </ul>, +         * <p/>, +         */, +            Http2Connection.Endpoint<?> remote = connection.remote();, +            return connection.goAwaySent() && remote.isValidStreamId(streamId) &&, +                    streamId > remote.lastStreamKnownByPeer();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java]