[+++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +import java.nio.CharBuffer;, +import java.nio.charset.CharsetDecoder;, +import org.jboss.netty.util.CharsetUtil;, +, +    public String getString(int index, int length, Charset charset) {, +        if (length == 0) {, +            return "";, +        }, +, +        final CharsetDecoder decoder = CharsetUtil.getDecoder(charset);, +        final CharBuffer dst = CharBuffer.allocate(, +                (int) ((double) length * decoder.maxCharsPerByte()));, +, +        int decodedChars = getString(index, length, dst, charset);, +        if (decodedChars == 0) {, +            return "";, +        }, +        return dst.flip().toString();, +    }, +, +    public int getString(int index, int length, char[] dst, Charset charset) {, +        return getString(index, length, CharBuffer.wrap(dst), charset);, +    }, +, +    public int getString(, +            int index, int length,, +            char[] dst, int dstOffset, int dstLength, Charset charset) {, +        return getString(index, length, CharBuffer.wrap(, +                        dst, dstOffset, dstLength), charset);, +    }, +, +    public int getString(int index, int length, Appendable out, Charset charset), +            throws IOException {, +        if (out instanceof CharBuffer) {, +            return getString(index, length, out, charset);, +        }, +, +        String str = getString(index, length, charset);, +        out.append(str);, +        return str.length();, +    }, +, +    public int readString(int length, char[] dst, Charset charset) {, +        checkReadableBytes(length);, +        int result = getString(readerIndex, length, dst, charset);, +        readerIndex += length;, +        return result;, +    }, +, +    public int readString(int length, char[] dst, int dstOffset, int dstLength, Charset charset) {, +        checkReadableBytes(length);, +        int result = getString(readerIndex, length, dst, dstOffset, dstLength, charset);, +        readerIndex += length;, +        return result;, +    }, +, +    public int readString(int length, Appendable out, Charset charset), +            throws IOException {, +        checkReadableBytes(length);, +        int result = getString(readerIndex, length, out, charset);, +        readerIndex += length;, +        return result;, +    }, +, +    public String readString(int length, Charset charset) {, +        checkReadableBytes(length);, +        String result = getString(readerIndex, length, charset);, +        readerIndex += length;, +        return result;, +    }, +, +        return getString(readerIndex, readableBytes(), charset);, +        if (terminatorFinder == null) {, +            return toString(index, length, charsetName);, +        }, +, +        int terminatorIndex = indexOf(index, index + length, terminatorFinder);, +        if (terminatorIndex < 0) {, +            return toString(index, length, charsetName);, +        }, +, +        return toString(index, terminatorIndex - index, charsetName);, +        return getString(index, length, Charset.forName(charsetName));, +        return toString(readerIndex, readableBytes(), charsetName, terminatorFinder);, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +import java.nio.CharBuffer;, +import java.nio.charset.CharsetDecoder;, +import org.jboss.netty.util.CharsetUtil;, +, +    public String getString(int index, int length, Charset charset) {, +        if (length == 0) {, +            return "";, +        }, +, +        final CharsetDecoder decoder = CharsetUtil.getDecoder(charset);, +        final CharBuffer dst = CharBuffer.allocate(, +                (int) ((double) length * decoder.maxCharsPerByte()));, +, +        int decodedChars = getString(index, length, dst, charset);]