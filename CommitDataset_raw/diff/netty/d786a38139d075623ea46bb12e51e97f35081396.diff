[+++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import org.jboss.netty.channel.ChannelFutureListener;, +    final AtomicInteger state = new AtomicInteger(ST_OPEN);, +, +        // TODO Move the state variable to AbstractChannel so that we don't need, +        //      to add many listeners., +        getCloseFuture().addListener(new ChannelFutureListener() {, +            public void operationComplete(ChannelFuture future) throws Exception {, +                state.set(ST_CLOSED);, +            }, +        });, +, +++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import org.jboss.netty.channel.ChannelFutureListener;, +    final AtomicInteger state = new AtomicInteger(ST_OPEN);, +, +        // TODO Move the state variable to AbstractChannel so that we don't need, +        //      to add many listeners., +        getCloseFuture().addListener(new ChannelFutureListener() {, +            public void operationComplete(ChannelFuture future) throws Exception {, +                state.set(ST_CLOSED);, +            }, +        });, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.channel.ChannelFutureListener;, +    volatile int state = ST_OPEN;, +, +        // TODO Move the state variable to AbstractChannel so that we don't need, +        //      to add many listeners., +        getCloseFuture().addListener(new ChannelFutureListener() {, +            public void operationComplete(ChannelFuture future) throws Exception {, +                state = ST_CLOSED;, +            }, +        });]