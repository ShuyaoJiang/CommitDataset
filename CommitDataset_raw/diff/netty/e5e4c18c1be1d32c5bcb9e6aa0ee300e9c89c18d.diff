[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +    public void testEmptyContentsChunked() throws Exception {, +        testEmptyContents(true, false);, +    public void testEmptyContentsChunkedWithTrailers() throws Exception {, +        testEmptyContents(true, true);, +    @Test, +    public void testEmptyContentsNotChunked() throws Exception {, +        testEmptyContents(false, false);, +    }, +, +    @Test, +    public void testEmptyContentNotsChunkedWithTrailers() throws Exception {, +        testEmptyContents(false, true);, +    }, +, +    private void testEmptyContents(boolean chunked, boolean trailers) throws Exception {, +        LastHttpContent last = new DefaultLastHttpContent(lastContentBuffer);, +        if (trailers) {, +            last.trailingHeaders().set("X-Netty-Test", "true");, +        }, +        assertTrue(channel.writeOutbound(last));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +    public void testEmptyContentsChunked() throws Exception {, +        testEmptyContents(true, false);, +    public void testEmptyContentsChunkedWithTrailers() throws Exception {, +        testEmptyContents(true, true);, +    @Test, +    public void testEmptyContentsNotChunked() throws Exception {, +        testEmptyContents(false, false);, +    }, +, +    @Test, +    public void testEmptyContentNotsChunkedWithTrailers() throws Exception {, +        testEmptyContents(false, true);, +    }, +, +    private void testEmptyContents(boolean chunked, boolean trailers) throws Exception {, +        LastHttpContent last = new DefaultLastHttpContent(lastContentBuffer);, +        if (trailers) {, +            last.trailingHeaders().set("X-Netty-Test", "true");, +        }, +        assertTrue(channel.writeOutbound(last));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseEncoderTest.java, +, +    @Test, +    public void testEmptyContentsChunked() throws Exception {, +        testEmptyContents(true, false);, +    }, +, +    @Test, +    public void testEmptyContentsChunkedWithTrailers() throws Exception {, +        testEmptyContents(true, true);, +    }, +, +    @Test, +    public void testEmptyContentsNotChunked() throws Exception {, +        testEmptyContents(false, false);, +    }, +, +    @Test, +    public void testEmptyContentNotsChunkedWithTrailers() throws Exception {, +        testEmptyContents(false, true);, +    }, +, +    private void testEmptyContents(boolean chunked, boolean trailers) throws Exception {, +        HttpResponseEncoder encoder = new HttpResponseEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        HttpResponse request = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        if (chunked) {, +            HttpUtil.setTransferEncodingChunked(request, true);, +        }, +        assertTrue(channel.writeOutbound(request));, +, +        ByteBuf contentBuffer = Unpooled.buffer();, +        assertTrue(channel.writeOutbound(new DefaultHttpContent(contentBuffer)));, +, +        ByteBuf lastContentBuffer = Unpooled.buffer();, +        LastHttpContent last = new DefaultLastHttpContent(lastContentBuffer);, +        if (trailers) {, +            last.trailingHeaders().set("X-Netty-Test", "true");, +        }, +        assertTrue(channel.writeOutbound(last));, +, +        // Ensure we only produce ByteBuf instances., +        ByteBuf head = channel.readOutbound();, +        assertTrue(head.release());, +, +        ByteBuf content = channel.readOutbound();, +        content.release();, +, +        ByteBuf lastContent = channel.readOutbound();, +        lastContent.release();, +        assertFalse(channel.finish());, +    }]