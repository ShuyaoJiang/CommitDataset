[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled(delay, unit);, +, +        validateScheduled(delay, unit);, +, +        validateScheduled(initialDelay, unit);, +        validateScheduled(period, unit);, +        validateScheduled(initialDelay, unit);, +        validateScheduled(delay, unit);, +, +    /**, +     * Sub-classes may override this to restrict the maximal amount of time someone can use to schedule a task., +     */, +    protected void validateScheduled(long amount, TimeUnit unit) {, +        // NOOP, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled(delay, unit);, +, +        validateScheduled(delay, unit);, +, +        validateScheduled(initialDelay, unit);, +        validateScheduled(period, unit);, +        validateScheduled(initialDelay, unit);, +        validateScheduled(delay, unit);, +, +    /**, +     * Sub-classes may override this to restrict the maximal amount of time someone can use to schedule a task., +     */, +    protected void validateScheduled(long amount, TimeUnit unit) {, +        // NOOP, +    }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import java.util.concurrent.TimeUnit;, +    // See http://man7.org/linux/man-pages/man2/timerfd_create.2.html., +    static final long MAX_SCHEDULED_DAYS = TimeUnit.SECONDS.toDays(999999999);, +, +, +    @Override, +    protected void validateScheduled(long amount, TimeUnit unit) {, +        long days = unit.toDays(amount);, +        if (days > MAX_SCHEDULED_DAYS) {, +            throw new IllegalArgumentException("days: " + days + " (expected: < " + MAX_SCHEDULED_DAYS + ')');, +        }, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled(delay, unit);, +, +        validateScheduled(delay, unit);, +, +        validateScheduled(initialDelay, unit);, +        validateScheduled(period, unit);, +        validateScheduled(initialDelay, unit);, +        validateScheduled(delay, unit);, +, +    /**, +     * Sub-classes may override this to restrict the maximal amount of time someone can use to schedule a task., +     */, +    protected void validateScheduled(long amount, TimeUnit unit) {, +        // NOOP, +    }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import java.util.concurrent.TimeUnit;, +    // See http://man7.org/linux/man-pages/man2/timerfd_create.2.html., +    static final long MAX_SCHEDULED_DAYS = TimeUnit.SECONDS.toDays(999999999);, +, +, +    @Override, +    protected void validateScheduled(long amount, TimeUnit unit) {, +        long days = unit.toDays(amount);, +        if (days > MAX_SCHEDULED_DAYS) {, +            throw new IllegalArgumentException("days: " + days + " (expected: < " + MAX_SCHEDULED_DAYS + ')');, +        }, +    }, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollEventLoopTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.epoll;, +, +import io.netty.channel.EventLoop;, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.Future;, +import org.junit.Test;, +]