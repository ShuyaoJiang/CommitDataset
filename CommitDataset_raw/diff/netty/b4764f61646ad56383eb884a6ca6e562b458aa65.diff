[+++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());, +                }, +            close(newVoidFuture());, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());, +                }, +            close(newVoidFuture());, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, +            throw new IllegalStateException("not done yet");, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());, +                }, +            close(newVoidFuture());, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, +            throw new IllegalStateException("not done yet");, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +        selectionKey = javaChannel().register(loop.selector, SelectionKey.OP_READ, this);, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());, +                }, +            close(newVoidFuture());, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, +            throw new IllegalStateException("not done yet");, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +        selectionKey = javaChannel().register(loop.selector, SelectionKey.OP_READ, this);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +        return javaChannel().socket().isBound();, +        selectionKey = javaChannel().register(, +                loop.selector, isActive()? SelectionKey.OP_ACCEPT : 0, this);, +        selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_ACCEPT);, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());, +                }, +            close(newVoidFuture());, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, +            throw new IllegalStateException("not done yet");, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +        selectionKey = javaChannel().register(loop.selector, SelectionKey.OP_READ, this);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +        return javaChannel().socket().isBound();, +        selectionKey = javaChannel().register(, +                loop.selector, isActive()? SelectionKey.OP_ACCEPT : 0, this);, +        selectionKey.interestOps(selectionKey.interestOps() | SelectionKey.OP_ACCEPT);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +            if (!connected) {, +                selectionKey().interestOps(selectionKey().interestOps() | SelectionKey.OP_CONNECT);, +            }, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port), ssc.newFuture()).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.io.IOException;, +                boolean closed = false;, +                        closed = true;, +                if (closed) {, +                    close(newFuture());, +                if (t instanceof IOException) {, +                    close(newFuture());]