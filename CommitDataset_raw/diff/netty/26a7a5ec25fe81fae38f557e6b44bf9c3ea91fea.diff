[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            }, +            notifyClosed(stream);, +            removeStream(stream);, +        }, +        private void notifyClosed(DefaultStream stream) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            }, +            notifyClosed(stream);, +            removeStream(stream);, +        }, +        private void notifyClosed(DefaultStream stream) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +import io.netty.util.internal.PlatformDependent;, +    private ChannelHandlerContext ctx;, +, +            @Override, +            public void onStreamClosed(Http2Stream stream) {, +                try {, +                    // When a stream is closed, consume any remaining bytes so that they, +                    // are restored to the connection window., +                    DefaultFlowState state = state(stream);, +                    int unconsumedBytes = state.unconsumedBytes();, +                    if (ctx != null && unconsumedBytes > 0) {, +                        connectionState().consumeBytes(ctx, unconsumedBytes);, +                        state.consumeBytes(ctx, unconsumedBytes);, +                    }, +                } catch (Http2Exception e) {, +                    PlatformDependent.throwException(e);, +                }, +            }, +        if (stream.id() == CONNECTION_STREAM_ID) {, +            throw new UnsupportedOperationException("Returning bytes for the connection window is not supported");, +        }, +        if (numBytes <= 0) {, +            throw new IllegalArgumentException("numBytes must be positive");, +        }, +, +        // Streams automatically consume all remaining bytes when they are closed, so just ignore, +        // if already closed., +        if (!isClosed(stream)) {, +            connectionState().consumeBytes(ctx, numBytes);, +    }, +        this.ctx = checkNotNull(ctx, "ctx");, +        DefaultFlowState connectionState = connectionState();, +        connectionState.receiveFlowControlledFrame(dataLength);, +, +        if (!isClosed(stream)) {, +        } else if (dataLength > 0) {, +            // Immediately consume the bytes for the connection window., +            connectionState.consumeBytes(ctx, dataLength);, +        }, +    private static boolean isClosed(Http2Stream stream) {, +        return stream.state() == Http2Stream.State.CLOSED;, +    }, +, +            if (endOfStream || initialStreamWindowSize <= 0 || isClosed(stream)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            }, +            notifyClosed(stream);, +            removeStream(stream);, +        }, +        private void notifyClosed(DefaultStream stream) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +import io.netty.util.internal.PlatformDependent;, +    private ChannelHandlerContext ctx;, +, +            @Override, +            public void onStreamClosed(Http2Stream stream) {, +                try {, +                    // When a stream is closed, consume any remaining bytes so that they, +                    // are restored to the connection window., +                    DefaultFlowState state = state(stream);, +                    int unconsumedBytes = state.unconsumedBytes();, +                    if (ctx != null && unconsumedBytes > 0) {, +                        connectionState().consumeBytes(ctx, unconsumedBytes);, +                        state.consumeBytes(ctx, unconsumedBytes);, +                    }, +                } catch (Http2Exception e) {, +                    PlatformDependent.throwException(e);, +                }, +            }, +        if (stream.id() == CONNECTION_STREAM_ID) {, +            throw new UnsupportedOperationException("Returning bytes for the connection window is not supported");, +        }, +        if (numBytes <= 0) {, +            throw new IllegalArgumentException("numBytes must be positive");, +        }, +, +        // Streams automatically consume all remaining bytes when they are closed, so just ignore, +        // if already closed., +        if (!isClosed(stream)) {, +            connectionState().consumeBytes(ctx, numBytes);, +    }, +        this.ctx = checkNotNull(ctx, "ctx");, +        DefaultFlowState connectionState = connectionState();, +        connectionState.receiveFlowControlledFrame(dataLength);, +, +        if (!isClosed(stream)) {, +        } else if (dataLength > 0) {]