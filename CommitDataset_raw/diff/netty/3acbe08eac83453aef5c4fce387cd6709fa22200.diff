[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMethod.java, +    public static HttpMethod valueOf(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        name = name.trim().toUpperCase();, +        if (name.length() == 0) {, +            throw new IllegalArgumentException("empty name");, +        }, +, +        HttpMethod result = methodMap.get(name);, +            return new HttpMethod(name);, +    private final String name;, +    public HttpMethod(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        name = name.trim().toUpperCase();, +        if (name.length() == 0) {, +            throw new IllegalArgumentException("empty name");, +        for (int i = 0; i < name.length(); i ++) {, +            if (Character.isISOControl(name.charAt(i))) {, +                throw new IllegalArgumentException("control character in name");, +            }, +        }, +, +        this.name = name;, +    }, +, +    public String getName() {, +        return name;, +        return getName().hashCode();, +        return getName().equals(that.getName());, +        return getName();, +        return getName().compareTo(o.getName());, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMethod.java, +    public static HttpMethod valueOf(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        name = name.trim().toUpperCase();, +        if (name.length() == 0) {, +            throw new IllegalArgumentException("empty name");, +        }, +, +        HttpMethod result = methodMap.get(name);, +            return new HttpMethod(name);, +    private final String name;, +    public HttpMethod(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        name = name.trim().toUpperCase();, +        if (name.length() == 0) {, +            throw new IllegalArgumentException("empty name");, +        for (int i = 0; i < name.length(); i ++) {, +            if (Character.isISOControl(name.charAt(i))) {, +                throw new IllegalArgumentException("control character in name");, +            }, +        }, +, +        this.name = name;, +    }, +, +    public String getName() {, +        return name;, +        return getName().hashCode();, +        return getName().equals(that.getName());, +        return getName();, +        return getName().compareTo(o.getName());, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpVersion.java, +    public static HttpVersion valueOf(String text) {, +        if (text == null) {, +            throw new NullPointerException("text");, +        }, +, +        text = text.trim().toUpperCase();, +        if (text.equals("HTTP/1.1")) {, +        if (text.equals("HTTP/1.0")) {, +        return new HttpVersion(text);, +    private final String text;, +    public HttpVersion(String text) {, +        if (text == null) {, +            throw new NullPointerException("text");, +        text = text.trim().toUpperCase();, +        if (text.length() == 0) {, +            throw new IllegalArgumentException("empty text");, +        }, +, +        Matcher m = VERSION_PATTERN.matcher(text);, +            throw new IllegalArgumentException("invalid version format: " + text);, +        this.text = protocolName + '/' + majorVersion + '.' + minorVersion;, +            if (Character.isISOControl(protocolName.charAt(i))) {, +                throw new IllegalArgumentException("control character in protocolName");, +        text = protocolName + '/' + majorVersion + '.' + minorVersion;, +    public String getText() {, +        return text;, +    }, +, +        return getText();]