[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +        // It is assumed there are all validated at a higher level. For example in the Http2FrameReader., +        assert weight >= MIN_WEIGHT && weight <= MAX_WEIGHT : "Invalid weight";, +        assert childStreamId != parentStreamId : "A stream cannot depend on itself";, +        assert childStreamId > 0 && parentStreamId >= 0 : "childStreamId must be > 0. parentStreamId must be >= 0.";, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +        // It is assumed there are all validated at a higher level. For example in the Http2FrameReader., +        assert weight >= MIN_WEIGHT && weight <= MAX_WEIGHT : "Invalid weight";, +        assert childStreamId != parentStreamId : "A stream cannot depend on itself";, +        assert childStreamId > 0 && parentStreamId >= 0 : "childStreamId must be > 0. parentStreamId must be >= 0.";, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/WeightedFairQueueByteDistributor.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +        // It is assumed there are all validated at a higher level. For example in the Http2FrameReader., +        assert weight >= MIN_WEIGHT && weight <= MAX_WEIGHT : "Invalid weight";, +        assert childStreamId != parentStreamId : "A stream cannot depend on itself";, +        assert childStreamId > 0 && parentStreamId >= 0 : "childStreamId must be > 0. parentStreamId must be >= 0.";, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/WeightedFairQueueByteDistributor.java, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowControllerTest.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +    @Test(expected = AssertionError.class), +    public void invalidParentStreamIdThrows() {, +        controller.updateDependencyTree(STREAM_D, -1, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidChildStreamIdThrows() {, +        controller.updateDependencyTree(-1, STREAM_D, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void connectionChildStreamIdThrows() {, +        controller.updateDependencyTree(0, STREAM_D, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidWeightTooSmallThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_D, (short) (MIN_WEIGHT - 1), true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidWeightTooBigThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_D, (short) (MAX_WEIGHT + 1), true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void dependencyOnSelfThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_A, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +        // It is assumed there are all validated at a higher level. For example in the Http2FrameReader., +        assert weight >= MIN_WEIGHT && weight <= MAX_WEIGHT : "Invalid weight";, +        assert childStreamId != parentStreamId : "A stream cannot depend on itself";, +        assert childStreamId > 0 && parentStreamId >= 0 : "childStreamId must be > 0. parentStreamId must be >= 0.";, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/WeightedFairQueueByteDistributor.java, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowControllerTest.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_WEIGHT;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_WEIGHT;, +    @Test(expected = AssertionError.class), +    public void invalidParentStreamIdThrows() {, +        controller.updateDependencyTree(STREAM_D, -1, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidChildStreamIdThrows() {, +        controller.updateDependencyTree(-1, STREAM_D, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void connectionChildStreamIdThrows() {, +        controller.updateDependencyTree(0, STREAM_D, DEFAULT_PRIORITY_WEIGHT, true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidWeightTooSmallThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_D, (short) (MIN_WEIGHT - 1), true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void invalidWeightTooBigThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_D, (short) (MAX_WEIGHT + 1), true);, +    }, +, +    @Test(expected = AssertionError.class), +    public void dependencyOnSelfThrows() {, +        controller.updateDependencyTree(STREAM_A, STREAM_A, DEFAULT_PRIORITY_WEIGHT, true);, +    }]