[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DataCompressionHttp2Test.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.util.Random;, +import java.util.concurrent.CountDownLatch;, +, +import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT;, +import static io.netty.handler.codec.http2.Http2TestUtil.as;, +import static io.netty.handler.codec.http2.Http2TestUtil.runInChannel;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyBoolean;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyShort;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.verify;, +, +    private CountDownLatch serverLatch;, +    public void setup() throws InterruptedException, Http2Exception {, +        doAnswer(new Answer<Void>() {, +            @Override, +            public Void answer(InvocationOnMock invocation) throws Throwable {, +                if (invocation.getArgumentAt(4, Boolean.class)) {, +                    serverConnection.stream(invocation.getArgumentAt(1, Integer.class)).close();, +                }, +                return null;, +            }, +        }).when(serverListener).onHeadersRead(any(ChannelHandlerContext.class), anyInt(), any(Http2Headers.class),, +                anyInt(), anyBoolean());, +        doAnswer(new Answer<Void>() {, +            @Override, +            public Void answer(InvocationOnMock invocation) throws Throwable {, +                if (invocation.getArgumentAt(7, Boolean.class)) {, +                    serverConnection.stream(invocation.getArgumentAt(1, Integer.class)).close();, +                }, +                return null;, +            }, +        }).when(serverListener).onHeadersRead(any(ChannelHandlerContext.class), anyInt(), any(Http2Headers.class),, +                anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());, +        serverLatch = new CountDownLatch(1);, +            public void onStreamClosed(Http2Stream stream) {, +                serverLatch.countDown();, +, +                if (in.getArgumentAt(4, Boolean.class)) {, +                    serverConnection.stream(in.getArgumentAt(1, Integer.class)).close();, +                }, +        assertTrue(serverLatch.await(5, SECONDS));]