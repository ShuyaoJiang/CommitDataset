[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +, +    public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +            forEachActiveStream(new Http2StreamVisitor() {, +            forEachActiveStream(new Http2StreamVisitor() {, +        public Http2Stream forEachChild(Http2StreamVisitor visitor) throws Http2Exception {, +            for (IntObjectHashMap.Entry<DefaultStream> entry : children.entries()) {, +                Http2Stream stream = entry.value();, +                if (!visitor.visit(stream)) {, +                    return stream;, +            return null;, +        public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +                        return stream;, +                return null;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +, +    public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +            forEachActiveStream(new Http2StreamVisitor() {, +            forEachActiveStream(new Http2StreamVisitor() {, +        public Http2Stream forEachChild(Http2StreamVisitor visitor) throws Http2Exception {, +            for (IntObjectHashMap.Entry<DefaultStream> entry : children.entries()) {, +                Http2Stream stream = entry.value();, +                if (!visitor.visit(stream)) {, +                    return stream;, +            return null;, +        public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +                        return stream;, +                return null;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +    private static final class WindowUpdateVisitor implements Http2StreamVisitor {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +, +    public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +            forEachActiveStream(new Http2StreamVisitor() {, +            forEachActiveStream(new Http2StreamVisitor() {, +        public Http2Stream forEachChild(Http2StreamVisitor visitor) throws Http2Exception {, +            for (IntObjectHashMap.Entry<DefaultStream> entry : children.entries()) {, +                Http2Stream stream = entry.value();, +                if (!visitor.visit(stream)) {, +                    return stream;, +            return null;, +        public Http2Stream forEachActiveStream(Http2StreamVisitor visitor) throws Http2Exception {, +                        return stream;, +                return null;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +    private static final class WindowUpdateVisitor implements Http2StreamVisitor {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +, +import java.util.Arrays;, +    private static final Http2StreamVisitor WRITE_ALLOCATED_BYTES = new Http2StreamVisitor() {, +        connection.forEachActiveStream(new Http2StreamVisitor() {, +    static int allocateBytesForTree(Http2Stream parent, int connectionWindow) throws Http2Exception {, +            SimpleChildFeeder childFeeder = new SimpleChildFeeder(connectionWindow);, +            parent.forEachChild(childFeeder);, +            return childFeeder.bytesAllocated;, +        ChildFeeder childFeeder = new ChildFeeder(parent, connectionWindow);, +        // Iterate once over all children of this parent and try to feed all the children., +        parent.forEachChild(childFeeder);, +        // Now feed any remaining children that are still hungry until the connection, +        // window collapses., +        childFeeder.feedHungryChildren();, +, +        return childFeeder.bytesAllocated;, +    }, +, +    /**, +     * A {@link Http2StreamVisitor} that performs the HTTP/2 priority algorithm to distribute the available connection, +     * window appropriately to the children of a given stream., +     */, +    private static final class ChildFeeder implements Http2StreamVisitor {, +        final int maxSize;, +        int totalWeight;, +        int connectionWindow;, +        int nextTotalWeight;, +        int nextConnectionWindow;, +        int bytesAllocated;, +        Http2Stream[] stillHungry;, +        int nextTail;, +, +        ChildFeeder(Http2Stream parent, int connectionWindow) {, +            maxSize = parent.numChildren();, +            totalWeight = parent.totalChildWeights();, +            this.connectionWindow = connectionWindow;, +            this.nextConnectionWindow = connectionWindow;, +        }, +, +        @Override, +        public boolean visit(Http2Stream child) throws Http2Exception {, +            int connectionWindowChunk = max(1, (int) (connectionWindow * (child.weight() / (double) totalWeight)));, +            int bytesForTree = min(nextConnectionWindow, connectionWindowChunk);, +            FlowState state = state(child);, +            int bytesForChild = min(state.streamableBytes(), bytesForTree);, +, +            // Allocate the bytes to this child., +, +                if (nextConnectionWindow > 0 && state.streamableBytesForTree() > 0) {, +                    stillHungry(child);, +                    nextTotalWeight += child.weight();, +            // Allocate any remaining bytes to the children of this stream., +]