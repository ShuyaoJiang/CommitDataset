[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketShutdownOutputBySelfTest.java, +import io.netty.channel.ChannelInboundHandlerAdapter;, +    @Test(timeout = 30000), +    public void testShutdownOutputSoLingerNoAssertError() throws Throwable {, +        run();, +    }, +, +    public void testShutdownOutputSoLingerNoAssertError(Bootstrap cb) throws Throwable {, +        testShutdownSoLingerNoAssertError0(cb, true);, +    }, +, +    @Test(timeout = 30000), +    public void testShutdownSoLingerNoAssertError() throws Throwable {, +        run();, +    }, +, +    public void testShutdownSoLingerNoAssertError(Bootstrap cb) throws Throwable {, +        testShutdownSoLingerNoAssertError0(cb, false);, +    }, +, +    private void testShutdownSoLingerNoAssertError0(Bootstrap cb, boolean output) throws Throwable {, +        ServerSocket ss = new ServerSocket();, +        Socket s = null;, +, +        ChannelFuture cf = null;, +        try {, +            ss.bind(newSocketAddress());, +            cf = cb.option(ChannelOption.SO_LINGER, 1).handler(new ChannelInboundHandlerAdapter()), +                    .connect(ss.getLocalSocketAddress()).sync();, +            s = ss.accept();, +, +            cf.sync();, +, +            if (output) {, +                ((SocketChannel) cf.channel()).shutdownOutput().sync();, +            } else {, +                ((SocketChannel) cf.channel()).shutdown().sync();, +            }, +        } finally {, +            if (s != null) {, +                s.close();, +            }, +            if (cf != null) {, +                cf.channel().close();, +            }, +            ss.close();, +        }, +    }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketShutdownOutputBySelfTest.java, +import io.netty.channel.ChannelInboundHandlerAdapter;, +    @Test(timeout = 30000), +    public void testShutdownOutputSoLingerNoAssertError() throws Throwable {, +        run();, +    }, +, +    public void testShutdownOutputSoLingerNoAssertError(Bootstrap cb) throws Throwable {, +        testShutdownSoLingerNoAssertError0(cb, true);, +    }, +, +    @Test(timeout = 30000), +    public void testShutdownSoLingerNoAssertError() throws Throwable {, +        run();, +    }, +, +    public void testShutdownSoLingerNoAssertError(Bootstrap cb) throws Throwable {, +        testShutdownSoLingerNoAssertError0(cb, false);, +    }, +, +    private void testShutdownSoLingerNoAssertError0(Bootstrap cb, boolean output) throws Throwable {, +        ServerSocket ss = new ServerSocket();, +        Socket s = null;, +, +        ChannelFuture cf = null;, +        try {, +            ss.bind(newSocketAddress());, +            cf = cb.option(ChannelOption.SO_LINGER, 1).handler(new ChannelInboundHandlerAdapter()), +                    .connect(ss.getLocalSocketAddress()).sync();, +            s = ss.accept();, +, +            cf.sync();, +, +            if (output) {, +                ((SocketChannel) cf.channel()).shutdownOutput().sync();, +            } else {, +                ((SocketChannel) cf.channel()).shutdown().sync();, +            }, +        } finally {, +            if (s != null) {, +                s.close();, +            }, +            if (cf != null) {, +                cf.channel().close();, +            }, +            ss.close();, +        }, +    }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +                // Need to check if we are on the EventLoop as doClose() may be triggered by the GlobalEventExecutor, +                // if SO_LINGER is used., +                //]