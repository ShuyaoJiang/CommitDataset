[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import io.netty.util.internal.SystemPropertyUtil;, +    /**, +     * To make it easier for users to replace JDK implemention with OpenSsl version we also use, +     * {@code jdk.tls.rejectClientInitiatedRenegotiation} to allow disabling client initiated renegotiation., +     * Java8+ uses this system property as well., +     *, +     * See also <a href="http://blog.ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html">, +     * Significant SSL/TLS improvements in Java 8</a>, +     */, +    private static final boolean JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION =, +            SystemPropertyUtil.getBoolean("jdk.tls.rejectClientInitiatedRenegotiation", false);, +    private volatile boolean rejectRemoteInitiatedRenegotiation;, +        if (mode == SSL.SSL_MODE_SERVER) {, +            rejectRemoteInitiatedRenegotiation =, +                    JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION;, +        }, +        final OpenSslEngine engine = new OpenSslEngine(, +                ctx, alloc, isClient(), sessionContext(), apn, engineMap, rejectRemoteInitiatedRenegotiation);, +    /**, +     * Specify if remote initiated renegotiation is supported or not. If not supported and the remote side tries, +     * to initiate a renegotiation a {@link SSLHandshakeException} will be thrown during decoding., +     */, +    public void setRejectRemoteInitiatedRenegotiation(boolean rejectRemoteInitiatedRenegotiation) {, +        this.rejectRemoteInitiatedRenegotiation = rejectRemoteInitiatedRenegotiation;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import io.netty.util.internal.SystemPropertyUtil;, +    /**, +     * To make it easier for users to replace JDK implemention with OpenSsl version we also use, +     * {@code jdk.tls.rejectClientInitiatedRenegotiation} to allow disabling client initiated renegotiation., +     * Java8+ uses this system property as well., +     *, +     * See also <a href="http://blog.ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html">, +     * Significant SSL/TLS improvements in Java 8</a>, +     */, +    private static final boolean JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION =, +            SystemPropertyUtil.getBoolean("jdk.tls.rejectClientInitiatedRenegotiation", false);, +    private volatile boolean rejectRemoteInitiatedRenegotiation;, +        if (mode == SSL.SSL_MODE_SERVER) {, +            rejectRemoteInitiatedRenegotiation =, +                    JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION;, +        }, +        final OpenSslEngine engine = new OpenSslEngine(, +                ctx, alloc, isClient(), sessionContext(), apn, engineMap, rejectRemoteInitiatedRenegotiation);, +    /**, +     * Specify if remote initiated renegotiation is supported or not. If not supported and the remote side tries, +     * to initiate a renegotiation a {@link SSLHandshakeException} will be thrown during decoding., +     */, +    public void setRejectRemoteInitiatedRenegotiation(boolean rejectRemoteInitiatedRenegotiation) {, +        this.rejectRemoteInitiatedRenegotiation = rejectRemoteInitiatedRenegotiation;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +    private final boolean rejectRemoteInitiatedRenegation;, +        this(sslCtx, alloc, false, null, OpenSslContext.NONE_PROTOCOL_NEGOTIATOR, OpenSslEngineMap.EMPTY, false);, +                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,, +                  boolean rejectRemoteInitiatedRenegation) {, +        this.rejectRemoteInitiatedRenegation = rejectRemoteInitiatedRenegation;, +, +            rejectRemoteInitiatedRenegation();, +                rejectRemoteInitiatedRenegation();, +, +    private void rejectRemoteInitiatedRenegation() throws SSLHandshakeException {, +        if (rejectRemoteInitiatedRenegation && SSL.getHandshakeCount(ssl) > 1) {, +            // TODO: In future versions me may also want to send a fatal_alert to the client and so notify it, +            // that the renegotiation failed., +            shutdown();, +            throw new SSLHandshakeException("remote-initiated renegotation not allowed");, +        }, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import io.netty.util.internal.SystemPropertyUtil;, +    /**, +     * To make it easier for users to replace JDK implemention with OpenSsl version we also use, +     * {@code jdk.tls.rejectClientInitiatedRenegotiation} to allow disabling client initiated renegotiation., +     * Java8+ uses this system property as well., +     *, +     * See also <a href="http://blog.ivanristic.com/2014/03/ssl-tls-improvements-in-java-8.html">, +     * Significant SSL/TLS improvements in Java 8</a>, +     */, +    private static final boolean JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION =, +            SystemPropertyUtil.getBoolean("jdk.tls.rejectClientInitiatedRenegotiation", false);, +    private volatile boolean rejectRemoteInitiatedRenegotiation;, +        if (mode == SSL.SSL_MODE_SERVER) {, +            rejectRemoteInitiatedRenegotiation =, +                    JDK_REJECT_CLIENT_INITIATED_RENEGOTIATION;, +        }, +        final OpenSslEngine engine = new OpenSslEngine(, +                ctx, alloc, isClient(), sessionContext(), apn, engineMap, rejectRemoteInitiatedRenegotiation);, +    /**, +     * Specify if remote initiated renegotiation is supported or not. If not supported and the remote side tries, +     * to initiate a renegotiation a {@link SSLHandshakeException} will be thrown during decoding., +     */, +    public void setRejectRemoteInitiatedRenegotiation(boolean rejectRemoteInitiatedRenegotiation) {, +        this.rejectRemoteInitiatedRenegotiation = rejectRemoteInitiatedRenegotiation;, +    }, +]