[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * Handles or intercepts a downstream {@link ChannelEvent}, and fires a, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * <p>, + * A downstream event is an event which is supposed to be processed from the, + * last handler to the first handler in the {@link ChannelPipeline}., + * For example, all I/O requests made by a user application are downstream, + * events., + * <p>, + * In most common use case of this interface is to intercept an I/O request, + * such as {@link Channel#write(Object)} and {@link Channel#close()}., + *, + * <h3>Thread safety</h3>, + * <p>, + * {@link #handleDownstream(ChannelHandlerContext, ChannelEvent) handleDownstream}, + * may be invoked by more than one thread simultaneously.  If the handler, + * accesses a shared resource or stores stateful information, you might need, + * proper synchronization in the handler implementation., +, +    /**, +     * Handles the specified downstream event., +     *, +     * @param ctx  the context object for this handler, +     * @param e    the downstream event to process or intercept, +     */, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * Handles or intercepts a downstream {@link ChannelEvent}, and fires a, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * <p>, + * A downstream event is an event which is supposed to be processed from the, + * last handler to the first handler in the {@link ChannelPipeline}., + * For example, all I/O requests made by a user application are downstream, + * events., + * <p>, + * In most common use case of this interface is to intercept an I/O request, + * such as {@link Channel#write(Object)} and {@link Channel#close()}., + *, + * <h3>Thread safety</h3>, + * <p>, + * {@link #handleDownstream(ChannelHandlerContext, ChannelEvent) handleDownstream}, + * may be invoked by more than one thread simultaneously.  If the handler, + * accesses a shared resource or stores stateful information, you might need, + * proper synchronization in the handler implementation., +, +    /**, +     * Handles the specified downstream event., +     *, +     * @param ctx  the context object for this handler, +     * @param e    the downstream event to process or intercept, +     */, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * Handles or intercepts a {@link ChannelEvent}, and fires a new, modified, or, + * existing {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * <p>, + * This is a tag interface.  There are two sub-interfaces which processes, + * a received event actually, one for upstream events and the other for, + * downstream events:, + * <ul>, + * <li>{@link ChannelUpstreamHandler} handles and intercepts, + *     a {@link ChannelEvent} fired by an I/O thread.</li>, + * <li>{@link ChannelDownstreamHandler} handles and intercepts, + *     a {@link ChannelEvent} fired by a user via the methods in, + *     the {@link Channel} interface and the {@link Channels} utility class.</li>, + * </ul>, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * Handles or intercepts a downstream {@link ChannelEvent}, and fires a, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * <p>, + * A downstream event is an event which is supposed to be processed from the, + * last handler to the first handler in the {@link ChannelPipeline}., + * For example, all I/O requests made by a user application are downstream, + * events., + * <p>, + * In most common use case of this interface is to intercept an I/O request, + * such as {@link Channel#write(Object)} and {@link Channel#close()}., + *, + * <h3>Thread safety</h3>, + * <p>, + * {@link #handleDownstream(ChannelHandlerContext, ChannelEvent) handleDownstream}, + * may be invoked by more than one thread simultaneously.  If the handler, + * accesses a shared resource or stores stateful information, you might need, + * proper synchronization in the handler implementation., +, +    /**, +     * Handles the specified downstream event., +     *, +     * @param ctx  the context object for this handler, +     * @param e    the downstream event to process or intercept, +     */, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * Handles or intercepts a {@link ChannelEvent}, and fires a new, modified, or, + * existing {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * <p>, + * This is a tag interface.  There are two sub-interfaces which processes, + * a received event actually, one for upstream events and the other for, + * downstream events:, + * <ul>, + * <li>{@link ChannelUpstreamHandler} handles and intercepts, + *     a {@link ChannelEvent} fired by an I/O thread.</li>, + * <li>{@link ChannelDownstreamHandler} handles and intercepts]