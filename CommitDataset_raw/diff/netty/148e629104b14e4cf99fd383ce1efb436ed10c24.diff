[+++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/pom.xml, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/pom.xml, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/pom.xml, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +    private final AioEventLoopGroup childGroup;, +    public AioServerSocketChannel(AioEventLoopGroup group) {, +        this(group, group);, +    }, +, +    public AioServerSocketChannel(AioEventLoopGroup parentGroup, AioEventLoopGroup childGroup) {, +        super(null, null, parentGroup, newSocket(parentGroup.group));, +        this.childGroup = childGroup;, +        this.config = new AioServerSocketChannelConfig(javaChannel());, +                    new AioSocketChannel(channel, null, channel.childGroup, ch));, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/pom.xml, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +    private final AioEventLoopGroup childGroup;, +    public AioServerSocketChannel(AioEventLoopGroup group) {, +        this(group, group);, +    }, +, +    public AioServerSocketChannel(AioEventLoopGroup parentGroup, AioEventLoopGroup childGroup) {, +        super(null, null, parentGroup, newSocket(parentGroup.group));, +        this.childGroup = childGroup;, +        this.config = new AioServerSocketChannelConfig(javaChannel());, +                    new AioSocketChannel(channel, null, channel.childGroup, ch));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +import static java.util.concurrent.TimeUnit.SECONDS;, +                javaChannel().write(buffers, 0, buffers.length, 0L, SECONDS, AioSocketChannel.this,, +                        GATHERING_WRITE_HANDLER);, +                javaChannel().write(buf.nioBuffer(), this, WRITE_HANDLER);, +            javaChannel().read(buffers, 0, buffers.length, 0L, SECONDS, AioSocketChannel.this,, +                    SCATTERING_READ_HANDLER);, +            javaChannel().read(buffer, AioSocketChannel.this, READ_HANDLER);, +            if (t instanceof IOException) {, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +++ b/pom.xml, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +    private final AioEventLoopGroup childGroup;, +    public AioServerSocketChannel(AioEventLoopGroup group) {, +        this(group, group);, +    }, +, +    public AioServerSocketChannel(AioEventLoopGroup parentGroup, AioEventLoopGroup childGroup) {, +        super(null, null, parentGroup, newSocket(parentGroup.group));, +        this.childGroup = childGroup;, +        this.config = new AioServerSocketChannelConfig(javaChannel());, +                    new AioSocketChannel(channel, null, channel.childGroup, ch));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +import static java.util.concurrent.TimeUnit.SECONDS;, +                javaChannel().write(buffers, 0, buffers.length, 0L, SECONDS, AioSocketChannel.this,, +                        GATHERING_WRITE_HANDLER);, +                javaChannel().write(buf.nioBuffer(), this, WRITE_HANDLER);, +            javaChannel().read(buffers, 0, buffers.length, 0L, SECONDS, AioSocketChannel.this,, +                    SCATTERING_READ_HANDLER);, +            javaChannel().read(buffer, AioSocketChannel.this, READ_HANDLER);, +            if (t instanceof IOException) {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannelConfig.java, +                SO_RCVBUF, SO_SNDBUF, TCP_NODELAY, SO_KEEPALIVE, SO_REUSEADDR, SO_LINGER, IP_TOS);]