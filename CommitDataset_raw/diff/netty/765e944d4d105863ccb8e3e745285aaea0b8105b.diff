[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            --createdBy().numStreams;, +        private int maxStreams;, +        int numStreams;, +            maxStreams = maxActiveStreams = Integer.MAX_VALUE;, +            ++numStreams;, +            return streamId > 0 && server == ((streamId & 1) == 0);, +            return numActiveStreams < maxActiveStreams;, +        public int maxStreams() {, +            return maxStreams;, +        }, +, +        @Override, +        public void maxStreams(int maxActiveStreams, int maxStreams) throws Http2Exception {, +            if (maxStreams < maxActiveStreams) {, +                throw connectionError(PROTOCOL_ERROR, "maxStream[%d] streams must be >= maxActiveStreams[%d]",, +                        maxStreams,  maxActiveStreams);, +            }, +            this.maxStreams = maxStreams;, +            if (state.localSideOpen() || state.remoteSideOpen()) {, +                if (!canOpenStream()) {, +            } else if (numStreams == maxStreams) {, +                throw streamError(streamId, REFUSED_STREAM, "Maximum streams violated for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            --createdBy().numStreams;, +        private int maxStreams;, +        int numStreams;, +            maxStreams = maxActiveStreams = Integer.MAX_VALUE;, +            ++numStreams;, +            return streamId > 0 && server == ((streamId & 1) == 0);, +            return numActiveStreams < maxActiveStreams;, +        public int maxStreams() {, +            return maxStreams;, +        }, +, +        @Override, +        public void maxStreams(int maxActiveStreams, int maxStreams) throws Http2Exception {, +            if (maxStreams < maxActiveStreams) {, +                throw connectionError(PROTOCOL_ERROR, "maxStream[%d] streams must be >= maxActiveStreams[%d]",, +                        maxStreams,  maxActiveStreams);, +            }, +            this.maxStreams = maxStreams;, +            if (state.localSideOpen() || state.remoteSideOpen()) {, +                if (!canOpenStream()) {, +            } else if (numStreams == maxStreams) {, +                throw streamError(streamId, REFUSED_STREAM, "Maximum streams violated for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                // By default just enforce the SETTINGS_MAX_CONCURRENT_STREAMS limit for stream in all states., +                connection.remote().maxStreams(value, value);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            --createdBy().numStreams;, +        private int maxStreams;, +        int numStreams;, +            maxStreams = maxActiveStreams = Integer.MAX_VALUE;, +            ++numStreams;, +            return streamId > 0 && server == ((streamId & 1) == 0);, +            return numActiveStreams < maxActiveStreams;, +        public int maxStreams() {, +            return maxStreams;, +        }, +, +        @Override, +        public void maxStreams(int maxActiveStreams, int maxStreams) throws Http2Exception {, +            if (maxStreams < maxActiveStreams) {, +                throw connectionError(PROTOCOL_ERROR, "maxStream[%d] streams must be >= maxActiveStreams[%d]",, +                        maxStreams,  maxActiveStreams);, +            }, +            this.maxStreams = maxStreams;, +            if (state.localSideOpen() || state.remoteSideOpen()) {, +                if (!canOpenStream()) {, +            } else if (numStreams == maxStreams) {, +                throw streamError(streamId, REFUSED_STREAM, "Maximum streams violated for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                // By default just enforce the SETTINGS_MAX_CONCURRENT_STREAMS limit for stream in all states., +                connection.remote().maxStreams(value, value);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +import static java.lang.Integer.MAX_VALUE;, +            // TODO(scott): define an extension setting so we can communicate/enforce the maxStreams limit locally., +            connection.local().maxStreams((int) min(maxConcurrentStreams, MAX_VALUE), MAX_VALUE);, +            outboundHeaderTable.maxHeaderTableSize((int) min(headerTableSize, MAX_VALUE));, +                MAX_VALUE - (nextData = (FlowControlledData) next).size() < size()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            --createdBy().numStreams;, +        private int maxStreams;, +        int numStreams;, +            maxStreams = maxActiveStreams = Integer.MAX_VALUE;, +            ++numStreams;, +            return streamId > 0 && server == ((streamId & 1) == 0);, +            return numActiveStreams < maxActiveStreams;, +        public int maxStreams() {, +            return maxStreams;, +        }, +, +        @Override, +        public void maxStreams(int maxActiveStreams, int maxStreams) throws Http2Exception {, +            if (maxStreams < maxActiveStreams) {, +                throw connectionError(PROTOCOL_ERROR, "maxStream[%d] streams must be >= maxActiveStreams[%d]",]