[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            int writtenBytes;, +                frame.write(max(0, allowedBytes));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            int writtenBytes;, +                frame.write(max(0, allowedBytes));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        ctx.flush();, +    @Override, +    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +        // Trigger flush after read on the assumption that flush is cheap if there is nothing to write and that, +        // for flow-control the read may release window that causes data to be written that can now be flushed., +        ctx.flush();, +    }, +, +        ctx.flush();, +     * Close the remote endpoint with with a {@code GO_AWAY} frame. Does <strong>not</strong> flush, +     * immediately, this is the responsibility of the caller., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            int writtenBytes;, +                frame.write(max(0, allowedBytes));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        ctx.flush();, +    @Override, +    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +        // Trigger flush after read on the assumption that flush is cheap if there is nothing to write and that, +        // for flow-control the read may release window that causes data to be written that can now be flushed., +        ctx.flush();, +    }, +, +        ctx.flush();, +     * Close the remote endpoint with with a {@code GO_AWAY} frame. Does <strong>not</strong> flush, +     * immediately, this is the responsibility of the caller., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2RemoteFlowController.java, +     * Manually flushing the {@link ChannelHandlerContext} is required for writes as the flow controller will, +     * <strong>not</strong> flush by itself., +         * the payload is fully written, i.e it's size after the write is 0., +        void write(int allowedBytes);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        public void write(int allowedBytes) {, +            if (data == null || (allowedBytes == 0 && size != 0)) {, +                return;, +            try {, +        public void write(int allowedBytes) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            int writtenBytes;, +                frame.write(max(0, allowedBytes));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        ctx.flush();, +    @Override, +    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +        // Trigger flush after read on the assumption that flush is cheap if there is nothing to write and that, +        // for flow-control the read may release window that causes data to be written that can now be flushed., +        ctx.flush();, +    }, +, +        ctx.flush();, +     * Close the remote endpoint with with a {@code GO_AWAY} frame. Does <strong>not</strong> flush]