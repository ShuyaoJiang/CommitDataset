[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +import java.util.List;, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultHttp2ConnectionDecoder.class);, +        public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf data, int padding,, +                              boolean endOfStream) throws Http2Exception {, +            boolean shouldIgnore = true;, +            try {, +                shouldIgnore = shouldIgnoreHeadersOrDataFrame(ctx, streamId, stream, "DATA");, +            } finally {, +                if (shouldIgnore) {, +            }, +            if (shouldIgnoreHeadersOrDataFrame(ctx, streamId, stream, "HEADERS")) {, +                        if (logger.isInfoEnabled()) {, +                            logger.info("%s ignoring PRIORITY frame for stream id %d. Stream doesn't exist but may " +, +                                        " have existed", ctx.channel(), streamId);, +                        }, +                    if (logger.isInfoEnabled()) {, +                        logger.info("%s ignoring PRIORITY frame for stream id %d. Stream created after GOAWAY sent. " +, +                                    "Last known stream by peer " + connection.remote().lastStreamKnownByPeer(),, +                                    ctx.channel(), streamId);, +                    }, +            if (shouldIgnoreHeadersOrDataFrame(ctx, streamId, parentStream, "PUSH_PROMISE")) {, +         * Helper method to determine if a frame that has the semantics of headers or data should be ignored for the, +         * {@code stream} (which may be {@code null}) associated with {@code streamId}., +         */, +        private boolean shouldIgnoreHeadersOrDataFrame(ChannelHandlerContext ctx, int streamId, Http2Stream stream,, +                String frameName) throws Http2Exception {, +            if (stream == null) {, +                if (streamCreatedAfterGoAwaySent(streamId)) {, +                    if (logger.isInfoEnabled()) {, +                        logger.info("%s ignoring %s frame for stream id %d. Stream sent after GOAWAY sent",, +                                ctx.channel(), frameName, streamId);, +                    }, +                    return true;, +                }, +                // Its possible that this frame would result in stream ID out of order creation (PROTOCOL ERROR) and its, +                // also possible that this frame is received on a CLOSED stream (STREAM_CLOSED after a RST_STREAM is, +                // sent). We don't have enough information to know for sure, so we choose the lesser of the two errors., +                throw streamError(streamId, STREAM_CLOSED, "Received HEADERS frame for an unknown stream %d", streamId);, +            } else if (stream.isResetSent() || streamCreatedAfterGoAwaySent(streamId)) {, +                if (logger.isInfoEnabled()) {, +                    logger.info("%s ignoring %s frame for stream id %d. %s", ctx.channel(), frameName,, +                            stream.isResetSent() ? "RST_STREAM sent." :, +                                ("Stream created after GOAWAY sent. Last known stream by peer " +, +                                 connection.remote().lastStreamKnownByPeer()));, +                }, +                return true;, +            }, +            return false;, +        }, +, +        /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +import java.util.List;, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultHttp2ConnectionDecoder.class);, +        public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf data, int padding,, +                              boolean endOfStream) throws Http2Exception {, +            boolean shouldIgnore = true;, +            try {, +                shouldIgnore = shouldIgnoreHeadersOrDataFrame(ctx, streamId, stream, "DATA");, +            } finally {, +                if (shouldIgnore) {, +            }, +            if (shouldIgnoreHeadersOrDataFrame(ctx, streamId, stream, "HEADERS")) {, +                        if (logger.isInfoEnabled()) {, +                            logger.info("%s ignoring PRIORITY frame for stream id %d. Stream doesn't exist but may " +, +                                        " have existed", ctx.channel(), streamId);, +                        }, +                    if (logger.isInfoEnabled()) {, +                        logger.info("%s ignoring PRIORITY frame for stream id %d. Stream created after GOAWAY sent. " +, +                                    "Last known stream by peer " + connection.remote().lastStreamKnownByPeer(),, +                                    ctx.channel(), streamId);, +                    }, +            if (shouldIgnoreHeadersOrDataFrame(ctx, streamId, parentStream, "PUSH_PROMISE")) {, +         * Helper method to determine if a frame that has the semantics of headers or data should be ignored for the, +         * {@code stream} (which may be {@code null}) associated with {@code streamId}., +         */, +        private boolean shouldIgnoreHeadersOrDataFrame(ChannelHandlerContext ctx, int streamId, Http2Stream stream,, +                String frameName) throws Http2Exception {, +            if (stream == null) {, +                if (streamCreatedAfterGoAwaySent(streamId)) {, +                    if (logger.isInfoEnabled()) {, +                        logger.info("%s ignoring %s frame for stream id %d. Stream sent after GOAWAY sent",]