[+++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +            try {, +            } finally {, +                context.sendUpstream(event);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +            try {, +            } finally {, +                context.sendUpstream(event);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +, +            try {, +            } finally {, +                ctx.sendUpstream(evt);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +            try {, +            } finally {, +                context.sendUpstream(event);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +, +            try {, +            } finally {, +                ctx.sendUpstream(evt);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, +, +            try {, +            } finally {, +                ctx.sendUpstream(evt);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +            try {, +            } finally {, +                context.sendUpstream(event);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +, +            try {, +            } finally {, +                ctx.sendUpstream(evt);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, +, +            try {, +            } finally {, +                ctx.sendUpstream(evt);, +            }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +import java.net.SocketAddress;, +import org.jboss.netty.channel.ChannelFutureListener;, +                    connect(channel, future, (InetSocketAddress) value);, +                    NioUdpWorker.disconnect(channel, future);, +    private void connect(, +            NioDatagramChannel channel, ChannelFuture future,, +            SocketAddress remoteAddress) {, +, +        boolean bound = channel.isBound();, +        boolean connected = false;, +        boolean workerStarted = false;, +, +        future.addListener(ChannelFutureListener.CLOSE_ON_FAILURE);, +, +        try {, +            channel.getDatagramChannel().connect(remoteAddress);, +            connected = true;, +, +            // Fire events., +            future.setSuccess();, +            if (!bound) {, +                fireChannelBound(channel, channel.getLocalAddress());, +            }, +            fireChannelConnected(channel, channel.getRemoteAddress());, +, +            if (!bound) {, +                channel.worker.register(channel, future);, +            }, +, +            workerStarted = true;, +        } catch (Throwable t) {, +            future.setFailure(t);, +            fireExceptionCaught(channel, t);, +        } finally {, +            if (connected && !workerStarted) {, +                NioUdpWorker.close(channel, future);, +            }, +        }, +    }, +, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +            try {, +            } finally {, +                context.sendUpstream(event);, +            }, +++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +, +            try {, +            } finally {]