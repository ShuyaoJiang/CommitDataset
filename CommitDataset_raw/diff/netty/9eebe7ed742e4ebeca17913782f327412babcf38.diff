[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +     * @deprecated Use {@link #JdkSslContext(SSLContext, boolean, Iterable, CipherSuiteFilter,, +     * ApplicationProtocolConfig, ClientAuth, String[], boolean)}, +    @Deprecated, +     * @deprecated Use {@link #JdkSslContext(SSLContext, boolean, Iterable, CipherSuiteFilter,, +     * ApplicationProtocolConfig, ClientAuth, String[], boolean)}, +    @Deprecated, +        this(sslContext, isClient, ciphers, cipherFilter, apn, clientAuth, null, false);, +    }, +, +    /**, +     * Creates a new {@link JdkSslContext} from a pre-configured {@link SSLContext}., +     *, +     * @param sslContext the {@link SSLContext} to use., +     * @param isClient {@code true} if this context should create {@link SSLEngine}s for client-side usage., +     * @param ciphers the ciphers to use or {@code null} if the standard should be used., +     * @param cipherFilter the filter to use., +     * @param apn the {@link ApplicationProtocolConfig} to use., +     * @param clientAuth the {@link ClientAuth} to use. This will only be used when {@param isClient} is {@code false}., +     * @param protocols the protocols to enable, or {@code null} to enable the default protocols., +     * @param startTls {@code true} if the first write request shouldn't be encrypted, +     */, +    public JdkSslContext(SSLContext sslContext,, +                         boolean isClient,, +                         Iterable<String> ciphers,, +                         CipherSuiteFilter cipherFilter,, +                         ApplicationProtocolConfig apn,, +                         ClientAuth clientAuth,, +                         String[] protocols,, +                         boolean startTls) {, +        this(sslContext,, +                isClient,, +                ciphers,, +                cipherFilter,, +                toNegotiator(apn, !isClient),, +                clientAuth,, +                protocols == null ? null : protocols.clone(),, +                startTls);]