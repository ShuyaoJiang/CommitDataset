[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #beginEncode(HttpMessage, String)}., +     *         target content encoding and a new {@link EmbeddedByteChannel} that, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #beginEncode(HttpMessage, String)}., +     *         target content encoding and a new {@link EmbeddedByteChannel} that, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, + * <li>An {@link HttpRequest} whose {@link HttpMessage#getTransferEncoding()}, + *     property is {@link HttpTransferEncoding#CHUNKED},</li>, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #beginEncode(HttpMessage, String)}., +     *         target content encoding and a new {@link EmbeddedByteChannel} that, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, + * <li>An {@link HttpRequest} whose {@link HttpMessage#getTransferEncoding()}, + *     property is {@link HttpTransferEncoding#CHUNKED},</li>, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java, +     * @param method The {@link HttpMethod} to set, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #beginEncode(HttpMessage, String)}., +     *         target content encoding and a new {@link EmbeddedByteChannel} that, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, + * <li>An {@link HttpRequest} whose {@link HttpMessage#getTransferEncoding()}, + *     property is {@link HttpTransferEncoding#CHUNKED},</li>, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java, +     * @param method The {@link HttpMethod} to set, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/CloseWebSocketFrame.java, +    private static final byte[] EMTPY_REASON = new byte[0];, +, +        byte[] reasonBytes = EMTPY_REASON;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +     * @param headerValue The value being validated, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #newContentDecoder(String)}., +     * Returns a new {@link EmbeddedByteChannel} that decodes the HTTP message, +     * @return a new {@link EmbeddedByteChannel} if the specified encoding is supported., +    @SuppressWarnings("unused"), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EmbeddedByteChannel}, which is created by {@link #beginEncode(HttpMessage, String)}., +     *         target content encoding and a new {@link EmbeddedByteChannel} that, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, + * <li>An {@link HttpRequest} whose {@link HttpMessage#getTransferEncoding()}, + *     property is {@link HttpTransferEncoding#CHUNKED},</li>, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequest.java, +     * @param method The {@link HttpMethod} to set, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/CloseWebSocketFrame.java, +    private static final byte[] EMTPY_REASON = new byte[0];, +, +        byte[] reasonBytes = EMTPY_REASON;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpResponseStreamIdHandler.java, + * {@link MessageToMessageCodec} that takes care of adding the right {@link SpdyHttpHeaders.Names#STREAM_ID} to the]