[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +public abstract class AbstractByteBuf implements UnsafeByteBuf {, +    private final int maxCapacity;, +    private SwappedByteBuf swappedBuf;, +, +    protected AbstractByteBuf(int maxCapacity) {, +        if (endianness == order() || capacity() == 0) {, +, +        SwappedByteBuf swappedBuf = this.swappedBuf;, +        if (swappedBuf == null) {, +            this.swappedBuf = swappedBuf = new SwappedByteBuf(this);, +        }, +, +        // Use an unpooled heap buffer because there's no way to mandate a user to free the returned buffer., +        ByteBuf buf = Unpooled.buffer(length, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +public abstract class AbstractByteBuf implements UnsafeByteBuf {, +    private final int maxCapacity;, +    private SwappedByteBuf swappedBuf;, +, +    protected AbstractByteBuf(int maxCapacity) {, +        if (endianness == order() || capacity() == 0) {, +, +        SwappedByteBuf swappedBuf = this.swappedBuf;, +        if (swappedBuf == null) {, +            this.swappedBuf = swappedBuf = new SwappedByteBuf(this);, +        }, +, +        // Use an unpooled heap buffer because there's no way to mandate a user to free the returned buffer., +        ByteBuf buf = Unpooled.buffer(length, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.buffer;, +, +public abstract class AbstractByteBufAllocator implements ByteBufAllocator {, +, +    private final boolean directByDefault;, +    private final ByteBuf emptyBuf;, +, +    protected AbstractByteBufAllocator() {, +        this(false);, +    }, +, +    protected AbstractByteBufAllocator(boolean directByDefault) {, +        this.directByDefault = directByDefault;, +        emptyBuf = new UnpooledHeapByteBuf(this, 0, 0);, +    }, +, +    @Override, +    public ByteBuf buffer() {, +        if (directByDefault) {, +            return directBuffer();, +        }, +        return heapBuffer();, +    }, +, +    @Override, +    public ByteBuf buffer(int initialCapacity) {, +        if (directByDefault) {, +            return directBuffer(initialCapacity);, +        }, +        return heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf buffer(int initialCapacity, int maxCapacity) {, +        if (directByDefault) {, +            return directBuffer(initialCapacity, maxCapacity);, +        }, +        return heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    public ByteBuf heapBuffer() {, +        return heapBuffer(256, Integer.MAX_VALUE);, +    }, +, +    public ByteBuf heapBuffer(int initialCapacity) {, +        return buffer(initialCapacity, Integer.MAX_VALUE);, +    }, +, +    public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {, +        if (initialCapacity == 0 && maxCapacity == 0) {, +            return emptyBuf;, +        }, +        return newHeapBuffer(initialCapacity, maxCapacity);]