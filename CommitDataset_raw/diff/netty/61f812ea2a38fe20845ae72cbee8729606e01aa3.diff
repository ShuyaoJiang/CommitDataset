[+++ b/handler/src/main/java/io/netty/handler/ssl/PemReader.java, +import java.io.FileNotFoundException;, +        try {, +            InputStream in = new FileInputStream(file);, +, +            try {, +                return readCertificates(in);, +            } finally {, +                safeClose(in);, +            }, +        } catch (FileNotFoundException e) {, +            throw new CertificateException("could not find certificate file: " + file);, +        }, +    }, +, +    static ByteBuf[] readCertificates(InputStream in) throws CertificateException {, +            content = readContent(in);, +            throw new CertificateException("failed to read certificate input stream", e);, +            throw new CertificateException("found no certificates in input stream");, +        try {, +            InputStream in = new FileInputStream(file);, +, +            try {, +                return readPrivateKey(in);, +            } finally {, +                safeClose(in);, +            }, +        } catch (FileNotFoundException e) {, +            throw new KeyException("could not fine key file: " + file);, +        }, +    }, +, +    static ByteBuf readPrivateKey(InputStream in) throws KeyException {, +            content = readContent(in);, +            throw new KeyException("failed to read key input stream", e);, +            throw new KeyException("found no private key in input stream");, +    private static String readContent(InputStream in) throws IOException {, +++ b/handler/src/main/java/io/netty/handler/ssl/PemReader.java, +import java.io.FileNotFoundException;, +        try {, +            InputStream in = new FileInputStream(file);, +, +            try {, +                return readCertificates(in);, +            } finally {, +                safeClose(in);, +            }, +        } catch (FileNotFoundException e) {, +            throw new CertificateException("could not find certificate file: " + file);, +        }, +    }, +, +    static ByteBuf[] readCertificates(InputStream in) throws CertificateException {, +            content = readContent(in);, +            throw new CertificateException("failed to read certificate input stream", e);, +            throw new CertificateException("found no certificates in input stream");, +        try {, +            InputStream in = new FileInputStream(file);, +, +            try {, +                return readPrivateKey(in);, +            } finally {, +                safeClose(in);, +            }, +        } catch (FileNotFoundException e) {, +            throw new KeyException("could not fine key file: " + file);, +        }, +    }, +, +    static ByteBuf readPrivateKey(InputStream in) throws KeyException {, +            content = readContent(in);, +            throw new KeyException("failed to read key input stream", e);, +            throw new KeyException("found no private key in input stream");, +    private static String readContent(InputStream in) throws IOException {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +import java.io.InputStream;, +        return getPrivateKeyFromByteBuffer(PemReader.readPrivateKey(keyFile), keyPassword);, +    }, +, +    static PrivateKey toPrivateKey(InputStream keyInputStream, String keyPassword) throws NoSuchAlgorithmException,, +                                                                NoSuchPaddingException, InvalidKeySpecException,, +                                                                InvalidAlgorithmParameterException,, +                                                                KeyException, IOException {, +        if (keyInputStream == null) {, +            return null;, +        }, +        return getPrivateKeyFromByteBuffer(PemReader.readPrivateKey(keyInputStream), keyPassword);, +    }, +, +    private static PrivateKey getPrivateKeyFromByteBuffer(ByteBuf encodedKeyBuf, String keyPassword), +            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException,, +            InvalidAlgorithmParameterException, KeyException, IOException {, +, +        return getCertificatesFromBuffers(PemReader.readCertificates(file));, +    }, +, +    static X509Certificate[] toX509Certificates(InputStream in) throws CertificateException {, +        if (in == null) {, +            return null;, +        }]