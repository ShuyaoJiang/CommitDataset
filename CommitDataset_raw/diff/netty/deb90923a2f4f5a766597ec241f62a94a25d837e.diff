[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +        init0(chunk, handle, offset, length, maxLength, cache);, +    }, +, +    void initUnpooled(PoolChunk<T> chunk, int length) {, +        init0(chunk, 0, chunk.offset, length, length, null);, +    }, +, +    private void init0(PoolChunk<T> chunk, long handle, int offset, int length, int maxLength, PoolThreadCache cache) {, +        this.cache = cache;, +        this.handle = handle;, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +        init0(chunk, handle, offset, length, maxLength, cache);, +    }, +, +    void initUnpooled(PoolChunk<T> chunk, int length) {, +        init0(chunk, 0, chunk.offset, length, length, null);, +    }, +, +    private void init0(PoolChunk<T> chunk, long handle, int offset, int length, int maxLength, PoolThreadCache cache) {, +        this.cache = cache;, +        this.handle = handle;, +++ b/buffer/src/test/java/io/netty/buffer/PooledByteBufAllocatorTest.java, +import static org.junit.Assert.assertNotNull;, +    public void testAllocNotNull() {, +        PooledByteBufAllocator allocator = new PooledByteBufAllocator(true, 1, 1, 8192, 11, 0, 0, 0);, +        // Huge allocation, +        testAllocNotNull(allocator, allocator.chunkSize() + 1);, +        // Normal allocation, +        testAllocNotNull(allocator, 1024);, +        // Small allocation, +        testAllocNotNull(allocator, 512);, +        // Tiny allocation, +        testAllocNotNull(allocator, 1);, +    }, +, +    private static void testAllocNotNull(PooledByteBufAllocator allocator, int capacity) {, +        ByteBuf buffer = allocator.heapBuffer(capacity);, +        assertNotNull(buffer.alloc());, +        assertTrue(buffer.release());, +        assertNotNull(buffer.alloc());, +    }, +, +    @Test]