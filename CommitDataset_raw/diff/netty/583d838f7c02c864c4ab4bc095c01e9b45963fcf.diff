[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.AsciiString;, +        if (CharsetUtil.US_ASCII.equals(charset) || CharsetUtil.ISO_8859_1.equals(charset)) {, +            // ByteBufUtil.getBytes(...) will return a new copy which the AsciiString uses directly, +            return new AsciiString(ByteBufUtil.getBytes(this, index, length, true), false);, +        }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.AsciiString;, +        if (CharsetUtil.US_ASCII.equals(charset) || CharsetUtil.ISO_8859_1.equals(charset)) {, +            // ByteBufUtil.getBytes(...) will return a new copy which the AsciiString uses directly, +            return new AsciiString(ByteBufUtil.getBytes(this, index, length, true), false);, +        }, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.nio.CharBuffer;, +    private static final CharBuffer EXTENDED_ASCII_CHARS, ASCII_CHARS;, +, +    static {, +        char[] chars = new char[256];, +        for (char c = 0; c < chars.length; c++) {, +            chars[c] = c;, +        }, +        EXTENDED_ASCII_CHARS = CharBuffer.wrap(chars);, +        ASCII_CHARS = CharBuffer.wrap(chars, 0, 128);, +    }, +, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.getCharSequence(1, bytes, charset)));, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.readCharSequence(bytes, charset)));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.AsciiString;, +        if (CharsetUtil.US_ASCII.equals(charset) || CharsetUtil.ISO_8859_1.equals(charset)) {, +            // ByteBufUtil.getBytes(...) will return a new copy which the AsciiString uses directly, +            return new AsciiString(ByteBufUtil.getBytes(this, index, length, true), false);, +        }, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.nio.CharBuffer;, +    private static final CharBuffer EXTENDED_ASCII_CHARS, ASCII_CHARS;, +, +    static {, +        char[] chars = new char[256];, +        for (char c = 0; c < chars.length; c++) {, +            chars[c] = c;, +        }, +        EXTENDED_ASCII_CHARS = CharBuffer.wrap(chars);, +        ASCII_CHARS = CharBuffer.wrap(chars, 0, 128);, +    }, +, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.getCharSequence(1, bytes, charset)));, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.readCharSequence(bytes, charset)));, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socks/SocksCmdRequestTest.java, +import java.nio.CharBuffer;, +        CharBuffer asciiHost = CharBuffer.wrap(IDN.toASCII(host));, +        assertEquals(asciiHost,, +            CharBuffer.wrap(buffer.readCharSequence(asciiHost.length(), CharsetUtil.US_ASCII)));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.AsciiString;, +        if (CharsetUtil.US_ASCII.equals(charset) || CharsetUtil.ISO_8859_1.equals(charset)) {, +            // ByteBufUtil.getBytes(...) will return a new copy which the AsciiString uses directly, +            return new AsciiString(ByteBufUtil.getBytes(this, index, length, true), false);, +        }, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.nio.CharBuffer;, +    private static final CharBuffer EXTENDED_ASCII_CHARS, ASCII_CHARS;, +, +    static {, +        char[] chars = new char[256];, +        for (char c = 0; c < chars.length; c++) {, +            chars[c] = c;, +        }, +        EXTENDED_ASCII_CHARS = CharBuffer.wrap(chars);, +        ASCII_CHARS = CharBuffer.wrap(chars, 0, 128);, +    }, +, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.getCharSequence(1, bytes, charset)));, +        ByteBuf buf = newBuffer(1024);, +        CharBuffer sequence = CharsetUtil.US_ASCII.equals(charset), +                ? ASCII_CHARS : EXTENDED_ASCII_CHARS;, +        assertEquals(sequence, CharBuffer.wrap(buf.readCharSequence(bytes, charset)));, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socks/SocksCmdRequestTest.java, +import java.nio.CharBuffer;, +        CharBuffer asciiHost = CharBuffer.wrap(IDN.toASCII(host));, +        assertEquals(asciiHost,, +            CharBuffer.wrap(buffer.readCharSequence(asciiHost.length(), CharsetUtil.US_ASCII)));, +++ b/codec-socks/src/test/java/io/netty/handler/codec/socks/SocksCmdResponseTest.java, +import java.nio.CharBuffer;, +        CharBuffer asciiHost = CharBuffer.wrap(IDN.toASCII(host));]