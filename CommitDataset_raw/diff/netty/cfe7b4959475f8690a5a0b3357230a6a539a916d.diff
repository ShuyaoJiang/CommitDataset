[+++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannelSink.java, +            if (!AbstractNioWorker.isIoThread(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannelSink.java, +            if (!AbstractNioWorker.isIoThread(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +        return Thread.currentThread() == channel.worker.thread;, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannelSink.java, +            if (!AbstractNioWorker.isIoThread(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +        return Thread.currentThread() == channel.worker.thread;, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannelSink.java, +            if (worker != null && !AbstractOioWorker.isIoThead(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannelSink.java, +            if (!AbstractNioWorker.isIoThread(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +        return Thread.currentThread() == channel.worker.thread;, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannelSink.java, +            if (worker != null && !AbstractOioWorker.isIoThead(channel)) {, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioWorker.java, +        close(channel, succeededFuture(channel), true);, +        return Thread.currentThread() == channel.workerThread;, +        close(channel, future, isIoThead(channel));, +    }, +    , +    private static void close(AbstractOioChannel channel, ChannelFuture future, boolean iothread) {]