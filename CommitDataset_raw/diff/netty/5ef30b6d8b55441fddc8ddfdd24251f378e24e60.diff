[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +            executor.execute(WriteTask.newInstance(next, msg, size, false, promise));, +        if (msg == null) {, +            throw new NullPointerException("msg");, +        }, +        validatePromise(promise, true);, +, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +        if (executor.inEventLoop()) {, +            next.invokeWrite(msg, promise);, +            next.invokeFlush();, +        } else {, +            final int size = channel.estimatorHandle().size(msg);, +            if (size > 0) {, +                ChannelOutboundBuffer buffer = channel.unsafe().outboundBuffer();, +                // Check for null as it may be set to null if the channel is closed already, +                if (buffer != null) {, +                    buffer.incrementPendingOutboundBytes(size);, +                }, +            }, +            executor.execute(WriteTask.newInstance(next, msg, size, true, promise));, +        }, +, +        return promise;, +        private boolean flush;, +                DefaultChannelHandlerContext ctx, Object msg, int size, boolean flush, ChannelPromise promise) {, +            task.flush = flush;, +                if (flush) {, +                    ctx.invokeFlush();, +                }]