[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_iovMax(JNIEnv *env, jclass clazz) {, +    return IOV_MAX;, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_iovMax(JNIEnv *env, jclass clazz) {, +    return IOV_MAX;, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_iovMax(JNIEnv *env, jclass clazz);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +    struct iovec iov[length];, +    int i;, +    int num = offset + length;, +    return writev0(env, clazz, fd, iov, length);, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_iovMax(JNIEnv *env, jclass clazz) {, +    return IOV_MAX;, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_iovMax(JNIEnv *env, jclass clazz);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +            EpollChannelOutboundBuffer in, int msgCount, AddressEntry[] addresses) throws IOException {, +        int addressCnt = in.addressCount();, +        boolean done = false;, +        boolean setEpollOut = false;, +        long writtenBytes = 0;, +        int offset = 0;, +        int end = offset + addressCnt;, +        int spinCount = config.getWriteSpinCount();, +        loop: while (addressCnt > 0) {, +            for (int i = spinCount - 1; i >= 0; i --) {, +                int cnt = addressCnt > Native.IOV_MAX? Native.IOV_MAX : addressCnt;, +                long localWrittenBytes = Native.writevAddresses(fd, addresses, offset, cnt);, +                if (localWrittenBytes == 0) {, +                    setEpollOut = true;, +                    break loop;, +                expectedWrittenBytes -= localWrittenBytes;, +                writtenBytes += localWrittenBytes;, +, +                while (offset < end && localWrittenBytes > 0) {, +                    AddressEntry address = addresses[offset];, +                    int readerIndex = address.readerIndex;, +                    int bytes = address.writerIndex - readerIndex;, +                    if (bytes > localWrittenBytes) {, +                        address.readerIndex += (int) localWrittenBytes;, +                        // incomplete write, +                        break;, +                        offset++;, +                        addressCnt--;, +                        localWrittenBytes -= bytes;, +            if (expectedWrittenBytes == 0) {, +                done = true;, +                break;, +            }, +        }, +, +        updateOutboundBuffer(in, writtenBytes, msgCount, done, setEpollOut);, +    }, +, +        int offset = 0;, +        int end = offset + nioBufferCnt;, +        int spinCount = config.getWriteSpinCount();, +        loop: while (nioBufferCnt > 0) {, +            for (int i = spinCount - 1; i >= 0; i --) {, +                int cnt = nioBufferCnt > Native.IOV_MAX? Native.IOV_MAX : nioBufferCnt;, +                long localWrittenBytes = Native.writev(fd, nioBuffers, offset, cnt);, +                    break loop;, +, +                while (offset < end && localWrittenBytes > 0) {, +                    ByteBuffer buffer = nioBuffers[offset];, +                    int pos = buffer.position();, +                    int bytes = buffer.limit() - pos;, +                    if (bytes > localWrittenBytes) {, +                        buffer.position(pos + (int) localWrittenBytes);, +                        // incomplete write, +                        break;, +                    } else {]