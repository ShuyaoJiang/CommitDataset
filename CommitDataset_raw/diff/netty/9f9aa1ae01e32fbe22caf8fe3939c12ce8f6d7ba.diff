[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    /**, +     * The current status of the read-processing for a {@link Http2StreamChannel}., +     */, +    private enum ReadStatus {, +        /**, +         * No read in progress and no read was requested (yet), +         */, +        IDLE,, +, +        /**, +         * Reading in progress, +         */, +        IN_PROGRESS,, +, +        /**, +         * A read operation was requested., +         */, +        REQUESTED, +    }, +, +, +         * This variable represents if a read is in progress for the current channel or was requested., +         * Note that depending upon the {@link RecvByteBufAllocator} behavior a read may extend beyond the, +         * {@link Http2ChannelUnsafe#beginRead()} method scope. The {@link Http2ChannelUnsafe#beginRead()} loop may, +         * drain all pending data, and then if the parent channel is reading this channel may still accept frames., +        private ReadStatus readStatus = ReadStatus.IDLE;, +, +            } else if (readStatus != ReadStatus.IDLE) {, +                // If a read is in progress or has been requested, there cannot be anything in the queue,, +                // otherwise we would have drained it from the queue and processed it during the read cycle., +            assert readStatus == ReadStatus.IN_PROGRESS;, +                if (!isActive()) {, +                switch (readStatus) {, +                    case IDLE:, +                        readStatus = ReadStatus.IN_PROGRESS;, +                        break;, +                    case IN_PROGRESS:, +                        readStatus = ReadStatus.REQUESTED;, +                        break;, +                    default:, +                        break;, +                }, +                if (readStatus == ReadStatus.REQUESTED) {, +                    readStatus = ReadStatus.IN_PROGRESS;, +                } else {, +                    readStatus = ReadStatus.IDLE;, +                }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    /**, +     * The current status of the read-processing for a {@link Http2StreamChannel}., +     */, +    private enum ReadStatus {, +        /**, +         * No read in progress and no read was requested (yet), +         */, +        IDLE,, +, +        /**, +         * Reading in progress, +         */, +        IN_PROGRESS,, +, +        /**, +         * A read operation was requested., +         */, +        REQUESTED, +    }, +, +, +         * This variable represents if a read is in progress for the current channel or was requested., +         * Note that depending upon the {@link RecvByteBufAllocator} behavior a read may extend beyond the, +         * {@link Http2ChannelUnsafe#beginRead()} method scope. The {@link Http2ChannelUnsafe#beginRead()} loop may, +         * drain all pending data, and then if the parent channel is reading this channel may still accept frames., +        private ReadStatus readStatus = ReadStatus.IDLE;, +, +            } else if (readStatus != ReadStatus.IDLE) {, +                // If a read is in progress or has been requested, there cannot be anything in the queue,, +                // otherwise we would have drained it from the queue and processed it during the read cycle., +            assert readStatus == ReadStatus.IN_PROGRESS;, +                if (!isActive()) {, +                switch (readStatus) {, +                    case IDLE:, +                        readStatus = ReadStatus.IN_PROGRESS;, +                        break;, +                    case IN_PROGRESS:, +                        readStatus = ReadStatus.REQUESTED;, +                        break;, +                    default:, +                        break;, +                }, +                if (readStatus == ReadStatus.REQUESTED) {, +                    readStatus = ReadStatus.IN_PROGRESS;, +                } else {, +                    readStatus = ReadStatus.IDLE;, +                }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecTest.java, +    @Test, +    public void readInChannelReadWithoutAutoRead() {, +        useReadWithoutAutoRead(false);]