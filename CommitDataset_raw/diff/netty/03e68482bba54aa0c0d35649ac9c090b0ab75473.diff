[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @Override, +    public ByteBuf discardSomeReadBytes() {, +        if (readerIndex == 0) {, +            return this;, +        }, +, +        if (readerIndex == writerIndex) {, +            adjustMarkers(readerIndex);, +            writerIndex = readerIndex = 0;, +            return this;, +        }, +, +        if (readerIndex >= capacity() >>> 1) {, +            setBytes(0, this, readerIndex, writerIndex - readerIndex);, +            writerIndex -= readerIndex;, +            adjustMarkers(readerIndex);, +            readerIndex = 0;, +        }, +        return this;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @Override, +    public ByteBuf discardSomeReadBytes() {, +        if (readerIndex == 0) {, +            return this;, +        }, +, +        if (readerIndex == writerIndex) {, +            adjustMarkers(readerIndex);, +            writerIndex = readerIndex = 0;, +            return this;, +        }, +, +        if (readerIndex >= capacity() >>> 1) {, +            setBytes(0, this, readerIndex, writerIndex - readerIndex);, +            writerIndex -= readerIndex;, +            adjustMarkers(readerIndex);, +            readerIndex = 0;, +        }, +        return this;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +     * some, all, or none of read bytes depending on its internal implementation to reduce, +     * overall memory bandwidth consumption at the cost of potentially additional memory, +     * consumption., +     */, +    ByteBuf discardSomeReadBytes();, +, +    /**, +     * Suspends the intermediary deallocation of the internal memory block of this buffer until asked via, +     * {@link #resumeIntermediaryDeallocations()}. An intermediary deallocation is usually made when the capacity of, +     * a buffer changes., +     *, +     * @throws UnsupportedOperationException if this buffer is derived, +     */, +    ByteBuf suspendIntermediaryDeallocations();, +, +    /**, +     * Resumes the intermediary deallocation of the internal memory block of this buffer, suspended by, +     * {@link #suspendIntermediaryDeallocations()}., +     *, +     * @throws UnsupportedOperationException if this buffer is derived, +     */, +    ByteBuf resumeIntermediaryDeallocations();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @Override, +    public ByteBuf discardSomeReadBytes() {, +        if (readerIndex == 0) {, +            return this;, +        }, +, +        if (readerIndex == writerIndex) {, +            adjustMarkers(readerIndex);, +            writerIndex = readerIndex = 0;, +            return this;, +        }, +, +        if (readerIndex >= capacity() >>> 1) {, +            setBytes(0, this, readerIndex, writerIndex - readerIndex);, +            writerIndex -= readerIndex;, +            adjustMarkers(readerIndex);, +            readerIndex = 0;, +        }, +        return this;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +     * some, all, or none of read bytes depending on its internal implementation to reduce, +     * overall memory bandwidth consumption at the cost of potentially additional memory, +     * consumption., +     */, +    ByteBuf discardSomeReadBytes();, +]