[+++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +import io.netty.channel.ChannelId;, +     * Create a new instance with an {@link EmbeddedChannelId} and an empty pipeline., +     * Create a new instance with the specified ID and an empty pipeline., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     */, +    public EmbeddedChannel(ChannelId channelId) {, +        this(channelId, EMPTY_HANDLERS);, +    }, +, +    /**, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +        this(EmbeddedChannelId.INSTANCE, handlers);, +    }, +, +    /**, +     * Create a new instance with the channel ID set to the given ID and the pipeline, +     * initialized with the specified handlers., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(ChannelId channelId, final ChannelHandler... handlers) {, +        super(null, channelId);, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +import io.netty.channel.ChannelId;, +     * Create a new instance with an {@link EmbeddedChannelId} and an empty pipeline., +     * Create a new instance with the specified ID and an empty pipeline., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     */, +    public EmbeddedChannel(ChannelId channelId) {, +        this(channelId, EMPTY_HANDLERS);, +    }, +, +    /**, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +        this(EmbeddedChannelId.INSTANCE, handlers);, +    }, +, +    /**, +     * Create a new instance with the channel ID set to the given ID and the pipeline, +     * initialized with the specified handlers., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(ChannelId channelId, final ChannelHandler... handlers) {, +        super(null, channelId);, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannelId.java, +        if (o instanceof EmbeddedChannelId) {, +        return 0;, +        return obj instanceof EmbeddedChannelId;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +import io.netty.channel.ChannelId;, +     * Create a new instance with an {@link EmbeddedChannelId} and an empty pipeline., +     * Create a new instance with the specified ID and an empty pipeline., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     */, +    public EmbeddedChannel(ChannelId channelId) {, +        this(channelId, EMPTY_HANDLERS);, +    }, +, +    /**, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +        this(EmbeddedChannelId.INSTANCE, handlers);, +    }, +, +    /**, +     * Create a new instance with the channel ID set to the given ID and the pipeline, +     * initialized with the specified handlers., +     *, +     * @param channelId the {@link ChannelId} that will be used to identify this channel, +     * @param handlers the {@link ChannelHandler}s which will be add in the {@link ChannelPipeline}, +     */, +    public EmbeddedChannel(ChannelId channelId, final ChannelHandler... handlers) {, +        super(null, channelId);, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannelId.java, +        if (o instanceof EmbeddedChannelId) {, +        return 0;, +        return obj instanceof EmbeddedChannelId;, +++ b/transport/src/test/java/io/netty/channel/embedded/CustomChannelId.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.embedded;]