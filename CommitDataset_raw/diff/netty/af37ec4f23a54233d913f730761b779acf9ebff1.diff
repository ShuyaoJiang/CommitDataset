[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpChunkAggregator.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +import java.util.List;, +import java.util.Map.Entry;, +, +public class HttpChunkAggregator extends MessageToMessageDecoder<Object, HttpMessage> {, +    @Override, +    public HttpMessage decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +                ctx.write(CONTINUE.duplicate());, +                m.setContent(ChannelBuffers.dynamicBuffer());, +                return null;, +                return m;, +                // All done, +                return currentMessage;, +            } else {, +                return null;, +            throw new IllegalStateException(, +                    "Only " + HttpMessage.class.getSimpleName() + " and " +, +                    HttpChunk.class.getSimpleName() + " are accepted: " + msg.getClass().getName());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpChunkAggregator.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +import java.util.List;, +import java.util.Map.Entry;, +, +public class HttpChunkAggregator extends MessageToMessageDecoder<Object, HttpMessage> {, +    @Override, +    public HttpMessage decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +                ctx.write(CONTINUE.duplicate());, +                m.setContent(ChannelBuffers.dynamicBuffer());, +                return null;, +                return m;, +                // All done, +                return currentMessage;, +            } else {, +                return null;, +            throw new IllegalStateException(, +                    "Only " + HttpMessage.class.getSimpleName() + " and " +, +                    HttpChunk.class.getSimpleName() + " are accepted: " + msg.getClass().getName());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import io.netty.channel.CombinedChannelHandler;, +import java.util.Queue;, +, +public class HttpClientCodec extends CombinedChannelHandler {, +        init(, +                new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize),, +                new Encoder());, +        public void encode(, +                ChannelOutboundHandlerContext<Object> ctx, Object msg, ChannelBuffer out) throws Exception {, +            super.encode(ctx, msg, out);, +        public Object decode(, +                ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +                return super.decode(ctx, buffer);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpChunkAggregator.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +import java.util.List;, +import java.util.Map.Entry;, +, +public class HttpChunkAggregator extends MessageToMessageDecoder<Object, HttpMessage> {, +    @Override, +    public HttpMessage decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +                ctx.write(CONTINUE.duplicate());, +                m.setContent(ChannelBuffers.dynamicBuffer());, +                return null;, +                return m;, +                // All done, +                return currentMessage;, +            } else {, +                return null;, +            throw new IllegalStateException(, +                    "Only " + HttpMessage.class.getSimpleName() + " and " +, +                    HttpChunk.class.getSimpleName() + " are accepted: " + msg.getClass().getName());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import io.netty.channel.CombinedChannelHandler;, +import java.util.Queue;, +, +public class HttpClientCodec extends CombinedChannelHandler {, +        init(, +                new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize),, +                new Encoder());, +        public void encode(, +                ChannelOutboundHandlerContext<Object> ctx, Object msg, ChannelBuffer out) throws Exception {, +            super.encode(ctx, msg, out);, +        public Object decode(, +                ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +                return super.decode(ctx, buffer);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import java.util.List;, +, +public abstract class HttpMessageDecoder extends ReplayingDecoder<Object, HttpMessageDecoder.State> {, +        super(State.SKIP_CONTROL_CHARS);, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +        switch (state()) {]