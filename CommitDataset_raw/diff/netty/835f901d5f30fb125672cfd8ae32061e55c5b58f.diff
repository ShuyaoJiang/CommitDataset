[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, +                path = "";, +                int pathEndPos = uri.indexOf('?');, +                path = decodeComponent(pathEndPos < 0 ? uri : uri.substring(0, pathEndPos), this.charset);, +                int pathEndPos = uri.indexOf('?');, +                if (pathEndPos >= 0 && pathEndPos < uri.length() - 1) {, +                    decodeParams(uri.substring(pathEndPos + 1));, +                } else {, +                    params = Collections.emptyMap();, +                    params = Collections.emptyMap();, +                } else {, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, +                path = "";, +                int pathEndPos = uri.indexOf('?');, +                path = decodeComponent(pathEndPos < 0 ? uri : uri.substring(0, pathEndPos), this.charset);, +                int pathEndPos = uri.indexOf('?');, +                if (pathEndPos >= 0 && pathEndPos < uri.length() - 1) {, +                    decodeParams(uri.substring(pathEndPos + 1));, +                } else {, +                    params = Collections.emptyMap();, +                    params = Collections.emptyMap();, +                } else {, +        }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/QueryStringDecoderTest.java, +        d = new QueryStringDecoder("/foo");, +        Assert.assertEquals("/foo", d.path());, +        Assert.assertEquals(0, d.parameters().size());, +, +        d = new QueryStringDecoder("/foo%20bar");, +        Assert.assertEquals("/foo bar", d.path());, +        Assert.assertEquals(0, d.parameters().size());, +, +        d = new QueryStringDecoder("/foo%20bar?a=1&a=2");, +        Assert.assertEquals("/foo bar", d.path());, +        Assert.assertEquals(1, d.parameters().size());, +        Assert.assertEquals(2, d.parameters().get("a").size());, +        Assert.assertEquals("1", d.parameters().get("a").get(0));, +        Assert.assertEquals("2", d.parameters().get("a").get(1));, +, +        assertQueryString("foo", "foo?");, +        assertQueryString("/foo", "/foo?");]