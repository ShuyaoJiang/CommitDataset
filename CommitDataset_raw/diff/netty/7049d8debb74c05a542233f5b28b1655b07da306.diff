[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaders.java, +        this(true);, +    }, +, +    public DefaultSpdyHeaders(boolean validate) {, +        super(CASE_INSENSITIVE_HASHER,, +                validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE,, +                validate ? SpydNameValidator : NameValidator.NOT_NULL);, +    private static class HeaderValueConverter extends CharSequenceValueConverter {, +        public static final HeaderValueConverter INSTANCE = new HeaderValueConverter();, +            return seq;, +        }, +    }, +, +    private static final class HeaderValueConverterAndValidator extends HeaderValueConverter {, +        public static final HeaderValueConverterAndValidator INSTANCE = new HeaderValueConverterAndValidator();, +, +        @Override, +        public CharSequence convertObject(Object value) {, +            final CharSequence seq = super.convertObject(value);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaders.java, +        this(true);, +    }, +, +    public DefaultSpdyHeaders(boolean validate) {, +        super(CASE_INSENSITIVE_HASHER,, +                validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE,, +                validate ? SpydNameValidator : NameValidator.NOT_NULL);, +    private static class HeaderValueConverter extends CharSequenceValueConverter {, +        public static final HeaderValueConverter INSTANCE = new HeaderValueConverter();, +            return seq;, +        }, +    }, +, +    private static final class HeaderValueConverterAndValidator extends HeaderValueConverter {, +        public static final HeaderValueConverterAndValidator INSTANCE = new HeaderValueConverterAndValidator();, +, +        @Override, +        public CharSequence convertObject(Object value) {, +            final CharSequence seq = super.convertObject(value);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, +    private final SpdyHeaders headers;, +        this(streamId, true);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param streamId the Stream-ID of this frame, +     * @param validate validate the header names and values when adding them to the {@link SpdyHeaders}, +     */, +    public DefaultSpdyHeadersFrame(int streamId, boolean validate) {, +        headers = new DefaultSpdyHeaders(validate);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaders.java, +        this(true);, +    }, +, +    public DefaultSpdyHeaders(boolean validate) {, +        super(CASE_INSENSITIVE_HASHER,, +                validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE,, +                validate ? SpydNameValidator : NameValidator.NOT_NULL);, +    private static class HeaderValueConverter extends CharSequenceValueConverter {, +        public static final HeaderValueConverter INSTANCE = new HeaderValueConverter();, +            return seq;, +        }, +    }, +, +    private static final class HeaderValueConverterAndValidator extends HeaderValueConverter {, +        public static final HeaderValueConverterAndValidator INSTANCE = new HeaderValueConverterAndValidator();, +, +        @Override, +        public CharSequence convertObject(Object value) {, +            final CharSequence seq = super.convertObject(value);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersFrame.java, +    private final SpdyHeaders headers;, +        this(streamId, true);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param streamId the Stream-ID of this frame, +     * @param validate validate the header names and values when adding them to the {@link SpdyHeaders}, +     */, +    public DefaultSpdyHeadersFrame(int streamId, boolean validate) {, +        headers = new DefaultSpdyHeaders(validate);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdySynReplyFrame.java, +    /**, +     * Creates a new instance., +     *, +     * @param streamId        the Stream-ID of this frame, +     * @param validateHeaders validate the header names and values when adding them to the {@link SpdyHeaders}, +     */, +    public DefaultSpdySynReplyFrame(int streamId, boolean validateHeaders) {, +        super(streamId, validateHeaders);, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaders.java, +        this(true);, +    }]