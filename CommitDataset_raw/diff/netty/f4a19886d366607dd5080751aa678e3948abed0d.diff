[+++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +, +    @Override, +    protected boolean isCompatible(EventLoop loop) {, +        return loop instanceof NioChildEventLoop;, +    }, +, +    @Override, +    protected boolean isFlushPending() {, +        return (selectionKey.interestOps() & SelectionKey.OP_WRITE) != 0;, +    }, +, +    @Override, +    protected void doRegister() throws Exception {, +        NioChildEventLoop loop = (NioChildEventLoop) eventLoop();, +        selectionKey = javaChannel().register(, +                loop.selector, isActive()? defaultInterestOps : 0, this);, +    }, +, +    @Override, +    protected void doDeregister() throws Exception {, +        ((NioChildEventLoop) eventLoop()).cancel(selectionKey());, +    }, +, +    protected abstract boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception;, +    protected abstract void doFinishConnect() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +, +    @Override, +    protected boolean isCompatible(EventLoop loop) {, +        return loop instanceof NioChildEventLoop;, +    }, +, +    @Override, +    protected boolean isFlushPending() {, +        return (selectionKey.interestOps() & SelectionKey.OP_WRITE) != 0;, +    }, +, +    @Override, +    protected void doRegister() throws Exception {, +        NioChildEventLoop loop = (NioChildEventLoop) eventLoop();, +        selectionKey = javaChannel().register(, +                loop.selector, isActive()? defaultInterestOps : 0, this);, +    }, +, +    @Override, +    protected void doDeregister() throws Exception {, +        ((NioChildEventLoop) eventLoop()).cancel(selectionKey());, +    }, +, +    protected abstract boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception;, +    protected abstract void doFinishConnect() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioMessageChannel.java, +    @Override, +    protected void doFlush(ChannelBufferHolder<Object> buf) throws Exception {, +        flushMessageBuf(buf.messageBuffer());, +    }, +, +    private void flushMessageBuf(Queue<Object> buf) throws Exception {, +        final int writeSpinCount = config().getWriteSpinCount() - 1;, +        while (!buf.isEmpty()) {, +            boolean wrote = false;, +            for (int i = writeSpinCount; i >= 0; i --) {, +                int localFlushedAmount = doWriteMessages(buf, i == 0);, +                if (localFlushedAmount > 0) {, +                    writeCounter += localFlushedAmount;, +                    wrote = true;, +                    notifyFlushFutures();, +                    break;, +                }, +            }, +, +            if (!wrote) {, +                break;, +            }, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +, +    @Override, +    protected boolean isCompatible(EventLoop loop) {, +        return loop instanceof NioChildEventLoop;, +    }, +, +    @Override, +    protected boolean isFlushPending() {, +        return (selectionKey.interestOps() & SelectionKey.OP_WRITE) != 0;, +    }, +, +    @Override, +    protected void doRegister() throws Exception {, +        NioChildEventLoop loop = (NioChildEventLoop) eventLoop();, +        selectionKey = javaChannel().register(, +                loop.selector, isActive()? defaultInterestOps : 0, this);, +    }, +, +    @Override, +    protected void doDeregister() throws Exception {, +        ((NioChildEventLoop) eventLoop()).cancel(selectionKey());]