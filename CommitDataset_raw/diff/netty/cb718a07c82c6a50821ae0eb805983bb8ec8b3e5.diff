[+++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port)).awaitUninterruptibly().rethrowIfFailed();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port)).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline().bind(localAddress, newFuture());, +        return pipeline().connect(remoteAddress, newFuture());, +        return pipeline().connect(remoteAddress, localAddress, newFuture());, +        return pipeline().disconnect(newFuture());, +        return pipeline().close(newFuture());, +        return pipeline().deregister(newFuture());, +        return pipeline().flush(newFuture());, +        return pipeline().write(message, newFuture());, +        private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +, +        public ChannelFuture voidFuture() {, +            return voidFuture;, +        }, +, +        @Override, +                    deregister(voidFuture());, +                    close(voidFuture());, +                    close(voidFuture());, +            close(voidFuture());, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port)).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline().bind(localAddress, newFuture());, +        return pipeline().connect(remoteAddress, newFuture());, +        return pipeline().connect(remoteAddress, localAddress, newFuture());, +        return pipeline().disconnect(newFuture());, +        return pipeline().close(newFuture());, +        return pipeline().deregister(newFuture());, +        return pipeline().flush(newFuture());, +        return pipeline().write(message, newFuture());, +        private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +, +        public ChannelFuture voidFuture() {, +            return voidFuture;, +        }, +, +        @Override, +                    deregister(voidFuture());, +                    close(voidFuture());, +                    close(voidFuture());, +            close(voidFuture());, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +        ChannelFuture voidFuture();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port)).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline().bind(localAddress, newFuture());, +        return pipeline().connect(remoteAddress, newFuture());, +        return pipeline().connect(remoteAddress, localAddress, newFuture());, +        return pipeline().disconnect(newFuture());, +        return pipeline().close(newFuture());, +        return pipeline().deregister(newFuture());, +        return pipeline().flush(newFuture());, +        return pipeline().write(message, newFuture());, +        private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +, +        public ChannelFuture voidFuture() {, +            return voidFuture;, +        }, +, +        @Override, +                    deregister(voidFuture());, +                    close(voidFuture());, +                    close(voidFuture());, +            close(voidFuture());, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +        ChannelFuture voidFuture();, +++ b/transport/src/main/java/io/netty/channel/ChannelFutureFactory.java, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +        ssc.bind(new InetSocketAddress(port)).awaitUninterruptibly().rethrowIfFailed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline().bind(localAddress, newFuture());, +        return pipeline().connect(remoteAddress, newFuture());, +        return pipeline().connect(remoteAddress, localAddress, newFuture());, +        return pipeline().disconnect(newFuture());, +        return pipeline().close(newFuture());, +        return pipeline().deregister(newFuture());, +        return pipeline().flush(newFuture());, +        return pipeline().write(message, newFuture());, +        private final ChannelFuture voidFuture = new VoidChannelFuture(AbstractChannel.this);, +, +        public ChannelFuture voidFuture() {, +            return voidFuture;, +        }, +, +        @Override, +                    deregister(voidFuture());, +                    close(voidFuture());, +                    close(voidFuture());, +            close(voidFuture());, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +        ChannelFuture voidFuture();, +++ b/transport/src/main/java/io/netty/channel/ChannelFutureFactory.java, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +        return bind(localAddress, channel().newFuture());]