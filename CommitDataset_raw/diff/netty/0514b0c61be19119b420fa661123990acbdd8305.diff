[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpScheme.java, +, +    /**, +     * Scheme for non-secure HTTP connection., +     */, +, +    /**, +     * Scheme for secure HTTP connection., +     */, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpScheme.java, +, +    /**, +     * Scheme for non-secure HTTP connection., +     */, +, +    /**, +     * Scheme for secure HTTP connection., +     */, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +            return WebSocketScheme.WSS.name().contentEquals(wsURL.getScheme()), +                    ? WebSocketScheme.WSS.port() : WebSocketScheme.WS.port();, +    static CharSequence websocketHostValue(URI wsURL) {, +        int port = wsURL.getPort();, +        if (port == -1) {, +            return wsURL.getHost();, +        }, +        String host = wsURL.getHost();, +        if (port == HttpScheme.HTTP.port()) {, +            return HttpScheme.HTTP.name().contentEquals(wsURL.getScheme()), +                    || WebSocketScheme.WS.name().contentEquals(wsURL.getScheme()) ?, +                    host : NetUtil.toSocketAddressString(host, port);, +        }, +        if (port == HttpScheme.HTTPS.port()) {, +            return HttpScheme.HTTPS.name().contentEquals(wsURL.getScheme()), +                    || WebSocketScheme.WSS.name().contentEquals(wsURL.getScheme()) ?, +                    host : NetUtil.toSocketAddressString(host, port);, +        }, +, +        // if the port is not standard (80/443) its needed to add the port to the header., +        // See http://tools.ietf.org/html/rfc6454#section-6.2, +        return NetUtil.toSocketAddressString(InetSocketAddress.createUnresolved(host, port));, +    }, +, +            return NetUtil.toSocketAddressString(originValue, wsPort);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpScheme.java, +, +    /**, +     * Scheme for non-secure HTTP connection., +     */, +, +    /**, +     * Scheme for secure HTTP connection., +     */, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +            return WebSocketScheme.WSS.name().contentEquals(wsURL.getScheme()), +                    ? WebSocketScheme.WSS.port() : WebSocketScheme.WS.port();, +    static CharSequence websocketHostValue(URI wsURL) {, +        int port = wsURL.getPort();, +        if (port == -1) {, +            return wsURL.getHost();, +        }, +        String host = wsURL.getHost();, +        if (port == HttpScheme.HTTP.port()) {, +            return HttpScheme.HTTP.name().contentEquals(wsURL.getScheme()), +                    || WebSocketScheme.WS.name().contentEquals(wsURL.getScheme()) ?, +                    host : NetUtil.toSocketAddressString(host, port);, +        }, +        if (port == HttpScheme.HTTPS.port()) {, +            return HttpScheme.HTTPS.name().contentEquals(wsURL.getScheme()), +                    || WebSocketScheme.WSS.name().contentEquals(wsURL.getScheme()) ?, +                    host : NetUtil.toSocketAddressString(host, port);, +        }, +, +        // if the port is not standard (80/443) its needed to add the port to the header., +        // See http://tools.ietf.org/html/rfc6454#section-6.2, +        return NetUtil.toSocketAddressString(InetSocketAddress.createUnresolved(host, port));, +    }, +, +            return NetUtil.toSocketAddressString(originValue, wsPort);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +               .add(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpScheme.java, +, +    /**, +     * Scheme for non-secure HTTP connection., +     */, +, +    /**, +     * Scheme for secure HTTP connection., +     */, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +            return WebSocketScheme.WSS.name().contentEquals(wsURL.getScheme()), +                    ? WebSocketScheme.WSS.port() : WebSocketScheme.WS.port();, +    static CharSequence websocketHostValue(URI wsURL) {]