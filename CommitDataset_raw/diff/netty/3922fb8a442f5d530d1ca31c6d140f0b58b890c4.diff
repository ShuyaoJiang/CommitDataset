[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, +    private final HttpTunnelingClientSocketChannel channel;, +    HttpTunnelWorker(HttpTunnelingClientSocketChannel channel) {, +          HttpTunnelingClientSocketChannel channel, ChannelFuture future,, +          HttpTunnelingClientSocketChannel channel, ChannelFuture future, int interestOps) {, +    static void close(HttpTunnelingClientSocketChannel channel, ChannelFuture future) {, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, +    private final HttpTunnelingClientSocketChannel channel;, +    HttpTunnelWorker(HttpTunnelingClientSocketChannel channel) {, +          HttpTunnelingClientSocketChannel channel, ChannelFuture future,, +          HttpTunnelingClientSocketChannel channel, ChannelFuture future, int interestOps) {, +    static void close(HttpTunnelingClientSocketChannel channel, ChannelFuture future) {, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel.socket.http;, +, +import static org.jboss.netty.channel.Channels.*;, +, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.net.SocketAddress;, +import java.net.URI;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.AbstractChannel;, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.ChannelSink;, +import org.jboss.netty.channel.DefaultChannelPipeline;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelHandler;, +import org.jboss.netty.channel.socket.ClientSocketChannelFactory;, +import org.jboss.netty.channel.socket.SocketChannel;, +import org.jboss.netty.channel.socket.SocketChannelConfig;, +import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;, +import org.jboss.netty.util.LinkedTransferQueue;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Andy Taylor (andy.taylor@jboss.org), + * @version $Rev$, $Date$, + */, +class HttpTunnelingClientSocketChannel extends AbstractChannel, +        implements org.jboss.netty.channel.socket.SocketChannel {, +, +    private final Lock reconnectLock = new ReentrantLock();, +, +    volatile boolean awaitingInitialResponse = true;, +, +    private final Object writeLock = new Object();, +, +    volatile Thread workerThread;, +, +    String sessionId;]