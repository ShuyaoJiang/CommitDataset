[+++ b/transport/src/main/java/io/netty/channel/CompleteChannelFuture.java, +import java.util.concurrent.TimeUnit;, +, +    public void addListener(final ChannelFutureListener listener) {, +        if (channel().eventLoop().inEventLoop()) {, +            notifyListener(listener);, +        } else {, +            channel().eventLoop().execute(new Runnable() {, +                @Override, +                public void run() {, +                    notifyListener(listener);, +                }, +            });, +        }, +    }, +, +    private void notifyListener(ChannelFutureListener listener) {, +++ b/transport/src/main/java/io/netty/channel/CompleteChannelFuture.java, +import java.util.concurrent.TimeUnit;, +, +    public void addListener(final ChannelFutureListener listener) {, +        if (channel().eventLoop().inEventLoop()) {, +            notifyListener(listener);, +        } else {, +            channel().eventLoop().execute(new Runnable() {, +                @Override, +                public void run() {, +                    notifyListener(listener);, +                }, +            });, +        }, +    }, +, +    private void notifyListener(ChannelFutureListener listener) {, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +import io.netty.util.internal.DeadLockProofWorker;, +import java.nio.channels.Channels;, +    public void addListener(final ChannelFutureListener listener) {, +            if (channel().eventLoop().inEventLoop()) {, +            } else {, +                channel().eventLoop().execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        notifyListener(listener);, +, +                    }, +                });, +            }, +, +        if (firstListener == null) {, +            return;, +        }, +, +        if (channel().eventLoop().inEventLoop()) {, +        } else {, +            final ChannelFutureListener firstListener = this.firstListener;, +            final List<ChannelFutureListener> otherListeners = this.otherListeners;, +            this.firstListener = null;, +            this.otherListeners = null;, +            channel().eventLoop().execute(new Runnable() {, +                @Override, +                public void run() {, +                    notifyListener(firstListener);, +                    if (otherListeners != null) {, +                        for (ChannelFutureListener l: otherListeners) {, +                            notifyListener(l);, +                        }, +                    }, +                }, +            });]