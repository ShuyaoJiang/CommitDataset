[+++ b/pom.xml, +        <version>2.3.0-SNAPSHOT</version>, +++ b/pom.xml, +        <version>2.3.0-SNAPSHOT</version>, +++ b/testsuite/.gitignore, +, +#, +# UDT native libraries extract location., +#, +, +/lib, +++ b/pom.xml, +        <version>2.3.0-SNAPSHOT</version>, +++ b/testsuite/.gitignore, +, +#, +# UDT native libraries extract location., +#, +, +/lib, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/udt/UDTClientServerConnectionTest.java, +import static org.junit.Assert.*;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +/**, + * Verify UDT connect/disconnect life cycle., + */, +    static class Client implements Runnable {, +        static final Logger log = LoggerFactory.getLogger(Client.class);, +        final String host;, +        final int port;, +        volatile Channel channel;, +        volatile boolean isRunning;, +        volatile boolean isShutdown;, +        Client(final String host, final int port) {, +            this.host = host;, +        @Override, +            final Bootstrap boot = new Bootstrap();, +            final ThreadFactory clientFactory = new ThreadFactory("client");, +                    clientFactory, NioUdtProvider.BYTE_PROVIDER);, +                boot.group(connectGroup), +                        .channelFactory(NioUdtProvider.BYTE_CONNECTOR), +                        .handler(new ChannelInitializer<UdtChannel>() {, +                            protected void initChannel(final UdtChannel ch), +                                final ChannelPipeline pipeline = ch.pipeline();, +                                        CharsetUtil.UTF_8));, +                                pipeline.addLast("handler", new ClientHandler());, +                            }, +                        });, +                channel = boot.connect(host, port).sync().channel();, +                isRunning = true;, +                log.info("Client ready.");, +                waitForRunning(false);, +                log.info("Client closing...");, +                channel.close().sync();, +                isShutdown = true;, +                log.info("Client is done.");, +            } catch (final Throwable e) {, +                log.error("Client failed.", e);, +            } finally {, +                connectGroup.shutdownGracefully();, +            }, +        }, +        void shutdown() {, +            isRunning = false;, +        }, +, +        void waitForActive(final boolean isActive) throws Exception {, +            for (int k = 0; k < WAIT_COUNT; k++) {, +                Thread.sleep(WAIT_SLEEP);, +                final ClientHandler handler = channel.pipeline().get(, +                        ClientHandler.class);, +                if (handler != null && isActive == handler.isActive) {, +                    return;, +                }, +            }, +        }, +, +        void waitForRunning(final boolean isRunning) throws Exception {, +            for (int k = 0; k < WAIT_COUNT; k++) {, +                if (isRunning == this.isRunning) {, +                    return;, +                }, +                Thread.sleep(WAIT_SLEEP);, +            }, +        }, +, +        private void waitForShutdown() throws Exception {, +            for (int k = 0; k < WAIT_COUNT; k++) {, +                if (isShutdown) {, +                    return;, +                }, +                Thread.sleep(WAIT_SLEEP);, +            }, +        }, +    }, +, +    static class ClientHandler extends, +            ChannelInboundMessageHandlerAdapter<String> {, +]