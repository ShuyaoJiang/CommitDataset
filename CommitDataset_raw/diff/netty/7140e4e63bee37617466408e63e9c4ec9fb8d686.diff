[+++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +    @Test(timeout = 10000), +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +    @Test(timeout = 10000), +++ b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java, +        ch.close().sync();, +, +        while (h1.outboundThreadNames.size() < 3 || h3.inboundThreadNames.size() < 3 ||, +               h1.removalThreadNames.size() < 1) {, +            Assert.assertFalse(h1.removalThreadNames.contains(currentName));, +            Assert.assertFalse(h2.removalThreadNames.contains(currentName));, +            Assert.assertFalse(h3.removalThreadNames.contains(currentName));, +            for (String name: h1.removalThreadNames) {, +                Assert.assertTrue(name.startsWith("l-"));, +            }, +            for (String name: h2.removalThreadNames) {, +                Assert.assertTrue(name.startsWith("e1-"));, +            }, +            for (String name: h3.removalThreadNames) {, +                Assert.assertTrue(name.startsWith("e2-"));, +            }, +            names.addAll(h1.removalThreadNames);, +            names.addAll(h2.removalThreadNames);, +            names.addAll(h3.removalThreadNames);, +            Assert.assertEquals(1, h1.removalThreadNames.size());, +            Assert.assertEquals(1, h2.removalThreadNames.size());, +            Assert.assertEquals(1, h3.removalThreadNames.size());, +            System.out.println("H1R: " + h1.removalThreadNames);, +            System.out.println("H2R: " + h2.removalThreadNames);, +            System.out.println("H3R: " + h3.removalThreadNames);, +        private final Queue<String> removalThreadNames = new ConcurrentLinkedQueue<String>();, +        public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {, +            removalThreadNames.add(Thread.currentThread().getName());, +        }, +, +        @Override]