[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +                        uri = new StringBuilder(uri).insert(index, SLASH).toString();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +                        uri = new StringBuilder(uri).insert(index, SLASH).toString();, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +        buffer.release();, +        buffer.release();, +    }, +, +    @Test, +    public void testUriWithEmptyPath() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        ByteBuf buffer = Unpooled.buffer(64);, +        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +                "http://localhost:9999/?p1=v1"));, +        String req = buffer.toString(Charset.forName("US-ASCII"));, +        assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req);, +        buffer.release();, +        buffer.release();, +        buffer.release();, +        buffer.release();, +        buffer.release();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +                        uri = new StringBuilder(uri).insert(index, SLASH).toString();, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +        buffer.release();, +        buffer.release();, +    }, +, +    @Test, +    public void testUriWithEmptyPath() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        ByteBuf buffer = Unpooled.buffer(64);, +        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +                "http://localhost:9999/?p1=v1"));, +        String req = buffer.toString(Charset.forName("US-ASCII"));, +        assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req);, +        buffer.release();, +        buffer.release();, +        buffer.release();, +        buffer.release();, +        buffer.release();, +++ b/microbench/src/main/java/io/netty/handler/codec/http/HttpRequestEncoderInsertBenchmark.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.buffer.Unpooled;, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import io.netty.util.AsciiString;, +import io.netty.util.CharsetUtil;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.Measurement;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.State;, +import org.openjdk.jmh.annotations.Warmup;, +, +import static io.netty.handler.codec.http.HttpConstants.SP;, +, +@State(Scope.Benchmark), +@Warmup(iterations = 10), +@Measurement(iterations = 20), +public class HttpRequestEncoderInsertBenchmark extends AbstractMicrobenchmark {, +, +    private String uri = "http://localhost?eventType=CRITICAL&from=0&to=1497437160327&limit=10&offset=0";, +    private OldHttpRequestEncoder encoderOld = new OldHttpRequestEncoder();, +    private HttpRequestEncoder encoderNew = new HttpRequestEncoder();, +, +    @Benchmark, +    public ByteBuf oldEncoder() throws Exception {, +        ByteBuf buffer = Unpooled.buffer(100);, +        try {, +            encoderOld.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,, +                    HttpMethod.GET, uri));, +            return buffer;, +        } finally {, +            buffer.release();, +        }, +    }, +, +    @Benchmark, +    public ByteBuf newEncoder() throws Exception {, +        ByteBuf buffer = Unpooled.buffer(100);, +        try {, +            encoderNew.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1,]