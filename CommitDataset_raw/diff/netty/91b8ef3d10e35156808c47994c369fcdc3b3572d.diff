[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        protected final boolean initialWindowSize(int newWindowSize, Writer writer) throws Http2Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        protected final boolean initialWindowSize(int newWindowSize, Writer writer) throws Http2Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/PriorityStreamByteDistributor.java, +import java.util.Arrays;, +, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +    public boolean distribute(int maxBytes, Writer writer) throws Http2Exception {, +    private final class WriteVisitor implements Http2StreamVisitor {, +        private boolean iterating;, +        private Writer writer;, +        void writeAllocatedBytes(Writer writer) throws Http2Exception {, +            if (iterating) {, +                throw connectionError(INTERNAL_ERROR, "byte distribution re-entry error");, +            }, +                iterating = true;, +                iterating = false;, +        public boolean visit(Http2Stream stream) throws Http2Exception {, +            try {, +            } catch (Throwable t) { // catch Throwable in case any unchecked re-throw tricks are used., +                // Stop calling the visitor and close the connection as exceptions from the writer are not supported., +                // If we don't close the connection there is risk that our internal state may be corrupted., +                throw connectionError(INTERNAL_ERROR, t, "byte distribution write error");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        protected final boolean initialWindowSize(int newWindowSize, Writer writer) throws Http2Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/PriorityStreamByteDistributor.java, +import java.util.Arrays;, +, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +    public boolean distribute(int maxBytes, Writer writer) throws Http2Exception {, +    private final class WriteVisitor implements Http2StreamVisitor {, +        private boolean iterating;, +        private Writer writer;, +        void writeAllocatedBytes(Writer writer) throws Http2Exception {, +            if (iterating) {, +                throw connectionError(INTERNAL_ERROR, "byte distribution re-entry error");, +            }, +                iterating = true;, +                iterating = false;, +        public boolean visit(Http2Stream stream) throws Http2Exception {, +            try {, +            } catch (Throwable t) { // catch Throwable in case any unchecked re-throw tricks are used., +                // Stop calling the visitor and close the connection as exceptions from the writer are not supported., +                // If we don't close the connection there is risk that our internal state may be corrupted., +                throw connectionError(INTERNAL_ERROR, t, "byte distribution write error");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamByteDistributor.java, +         * <p>, +         * Any {@link Throwable} thrown from this method is considered a programming error., +         * A {@code GOAWAY} frame will be sent and the will be connection closed., +     * @throws Http2Exception If an internal exception occurs and internal connection state would otherwise be, +     * corrupted., +    boolean distribute(int maxBytes, Writer writer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        protected final boolean initialWindowSize(int newWindowSize, Writer writer) throws Http2Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/PriorityStreamByteDistributor.java, +import java.util.Arrays;, +, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +    public boolean distribute(int maxBytes, Writer writer) throws Http2Exception {, +    private final class WriteVisitor implements Http2StreamVisitor {, +        private boolean iterating;, +        private Writer writer;, +        void writeAllocatedBytes(Writer writer) throws Http2Exception {, +            if (iterating) {, +                throw connectionError(INTERNAL_ERROR, "byte distribution re-entry error");, +            }, +                iterating = true;, +                iterating = false;, +        public boolean visit(Http2Stream stream) throws Http2Exception {, +            try {, +            } catch (Throwable t) { // catch Throwable in case any unchecked re-throw tricks are used., +                // Stop calling the visitor and close the connection as exceptions from the writer are not supported., +                // If we don't close the connection there is risk that our internal state may be corrupted., +                throw connectionError(INTERNAL_ERROR, t, "byte distribution write error");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamByteDistributor.java, +         * <p>, +         * Any {@link Throwable} thrown from this method is considered a programming error., +         * A {@code GOAWAY} frame will be sent and the will be connection closed., +     * @throws Http2Exception If an internal exception occurs and internal connection state would otherwise be, +     * corrupted., +    boolean distribute(int maxBytes, Writer writer) throws Http2Exception;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowControllerTest.java, +import static org.junit.Assert.assertSame;, +        final RuntimeException fakeException = new RuntimeException("error failed");, +                throw fakeException;, +            fail();, +        } catch (Http2Exception e) {, +            assertSame(fakeException, e.getCause());, +        } catch (Throwable t) {, +            fail();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        protected final boolean initialWindowSize(int newWindowSize, Writer writer) throws Http2Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/PriorityStreamByteDistributor.java, +import java.util.Arrays;, +, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;]