[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private final ChannelFuture voidFuture = new VoidChannelFuture(this);, +    private final CloseFuture closeFuture = new CloseFuture(this);, +        closeFuture().addListener(new ChannelFutureListener() {, +    public ChannelFuture closeFuture() {, +        return closeFuture;, +                    closeFuture.setClosed();, +    private static final class CloseFuture extends DefaultChannelFuture implements ChannelFuture.Unsafe {, +, +        CloseFuture(AbstractChannel ch) {, +            super(ch, false);, +        }, +, +        @Override, +        public boolean setSuccess() {, +            throw new IllegalStateException();, +        }, +, +        @Override, +        public boolean setFailure(Throwable cause) {, +            throw new IllegalStateException();, +        }, +, +        void setClosed() {, +            boolean set = super.setSuccess();, +            assert set;, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private final ChannelFuture voidFuture = new VoidChannelFuture(this);, +    private final CloseFuture closeFuture = new CloseFuture(this);, +        closeFuture().addListener(new ChannelFutureListener() {, +    public ChannelFuture closeFuture() {, +        return closeFuture;, +                    closeFuture.setClosed();, +    private static final class CloseFuture extends DefaultChannelFuture implements ChannelFuture.Unsafe {, +, +        CloseFuture(AbstractChannel ch) {, +            super(ch, false);, +        }, +, +        @Override, +        public boolean setSuccess() {, +            throw new IllegalStateException();, +        }, +, +        @Override, +        public boolean setFailure(Throwable cause) {, +            throw new IllegalStateException();, +        }, +, +        void setClosed() {, +            boolean set = super.setSuccess();, +            assert set;, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    /**, +     * Returns the {@link ChannelFuture} which will be notified when this, +     * channel is closed.  This method always returns the same future instance., +     */, +    ChannelFuture closeFuture();]