[+++ b/transport/src/main/java/io/netty/channel/Channel.java, + * <li>the {@link ChannelPipeline} which handles all I/O events and requests, + * A {@link Channel} can have a {@linkplain #parent() parent} depending on, + * as its parent on {@link #parent()}., +    /**, +     * Returns {@code true} if the {@link Channel} is open an may get active later, +     */, +, +    /**, +     * Returns {@code true} if the {@link Channel} is registered with an {@link EventLoop}., +     */, +, +    /**, +     * Return {@code true} if the {@link Channel} is active and so connected., +     */, +++ b/transport/src/main/java/io/netty/channel/Channel.java, + * <li>the {@link ChannelPipeline} which handles all I/O events and requests, + * A {@link Channel} can have a {@linkplain #parent() parent} depending on, + * as its parent on {@link #parent()}., +    /**, +     * Returns {@code true} if the {@link Channel} is open an may get active later, +     */, +, +    /**, +     * Returns {@code true} if the {@link Channel} is registered with an {@link EventLoop}., +     */, +, +    /**, +     * Return {@code true} if the {@link Channel} is active and so connected., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +import io.netty.util.Attribute;, +import io.netty.util.AttributeKey;, + * and other handlers.  A handler can notify the next {@link ChannelHandler} in the {@link ChannelPipeline},, + * modify the {@link ChannelPipeline} it belongs to dynamically., + * <h3>Notify</h3>, + * You can notify the closest handler in the, + * same {@link ChannelPipeline} by calling one of the various methods which are listed in {@link ChannelInboundInvoker}, + * and {@link ChannelOutboundInvoker}.  Please refer to {@link ChannelPipeline} to understand how an event flows., + * {@link #pipeline()}.  A non-trivial application could insert, remove, or, + * public class MyHandler extends {@link ChannelHandlerAdapter} {, + *         ctx.write(new LoginMessage(username, password));, + * {@link #attr(AttributeKey)} allow you to, + * public class FactorialHandler extends {@link ChannelInboundMessageHandlerAdapter}&lt{@link Integer}&gt {, + *, + *   private final {@link AttributeKey}&lt{@link Integer}&gt counter =, + *           new {@link AttributeKey}&lt{@link Integer}&gt("counter");, + *   public void messageReceived({@link ChannelHandlerContext} ctx, {@link Integer} integer) {, + *     {@link Attribute}&lt{@link Integer}&gt} attr = ctx.getAttr(counter);, + *     Integer a = ctx.getAttr(counter).get();, + *     attr.set(a * integer));, + * Please refer to the {@link ChannelHandler}, and, + * {@link ChannelPipeline} to find out more about inbound and outbound operations,, + * what fundamental differences they have, how they flow in a  pipeline,  and how to handle, + * the operation in your application., +++ b/transport/src/main/java/io/netty/channel/Channel.java, + * <li>the {@link ChannelPipeline} which handles all I/O events and requests, + * A {@link Channel} can have a {@linkplain #parent() parent} depending on, + * as its parent on {@link #parent()}., +    /**, +     * Returns {@code true} if the {@link Channel} is open an may get active later, +     */, +, +    /**, +     * Returns {@code true} if the {@link Channel} is registered with an {@link EventLoop}., +     */, +, +    /**, +     * Return {@code true} if the {@link Channel} is active and so connected., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +import io.netty.util.Attribute;, +import io.netty.util.AttributeKey;, + * and other handlers.  A handler can notify the next {@link ChannelHandler} in the {@link ChannelPipeline},, + * modify the {@link ChannelPipeline} it belongs to dynamically., + * <h3>Notify</h3>, + * You can notify the closest handler in the, + * same {@link ChannelPipeline} by calling one of the various methods which are listed in {@link ChannelInboundInvoker}, + * and {@link ChannelOutboundInvoker}.  Please refer to {@link ChannelPipeline} to understand how an event flows., + * {@link #pipeline()}.  A non-trivial application could insert, remove, or, + * public class MyHandler extends {@link ChannelHandlerAdapter} {, + *         ctx.write(new LoginMessage(username, password));, + * {@link #attr(AttributeKey)} allow you to, + * public class FactorialHandler extends {@link ChannelInboundMessageHandlerAdapter}&lt{@link Integer}&gt {, + *, + *   private final {@link AttributeKey}&lt{@link Integer}&gt counter =, + *           new {@link AttributeKey}&lt{@link Integer}&gt("counter");, + *   public void messageReceived({@link ChannelHandlerContext} ctx, {@link Integer} integer) {, + *     {@link Attribute}&lt{@link Integer}&gt} attr = ctx.getAttr(counter);, + *     Integer a = ctx.getAttr(counter).get();, + *     attr.set(a * integer));, + * Please refer to the {@link ChannelHandler}, and, + * {@link ChannelPipeline} to find out more about inbound and outbound operations,, + * what fundamental differences they have, how they flow in a  pipeline,  and how to handle, + * the operation in your application., +++ b/transport/src/main/java/io/netty/channel/ChannelOperationHandler.java, +/**, + * {@link ChannelHandler} which will get notified for IO-outbound-operations., + */, +    /**]