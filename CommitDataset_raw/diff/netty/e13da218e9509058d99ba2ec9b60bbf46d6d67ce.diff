[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2FrameWriter.java, +                                      boolean endStream, ChannelPromise promise) {, +                                      boolean endStream, ChannelPromise promise) {, +                                          Http2Headers headers, int padding, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2FrameWriter.java, +                                      boolean endStream, ChannelPromise promise) {, +                                      boolean endStream, ChannelPromise promise) {, +                                          Http2Headers headers, int padding, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                // Writing headers may fail during the encode state if they violate HPACK limits., +                Throwable failureCause = future.cause();, +                if (failureCause == null) {, +                } else {, +                    lifecycleManager.onError(ctx, failureCause);, +                }, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = future.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +            ChannelFuture f = frameWriter.writeHeaders(ctx, stream.id(), headers, streamDependency, weight, exclusive,, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = f.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2FrameWriter.java, +                                      boolean endStream, ChannelPromise promise) {, +                                      boolean endStream, ChannelPromise promise) {, +                                          Http2Headers headers, int padding, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                // Writing headers may fail during the encode state if they violate HPACK limits., +                Throwable failureCause = future.cause();, +                if (failureCause == null) {, +                } else {, +                    lifecycleManager.onError(ctx, failureCause);, +                }, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = future.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +            ChannelFuture f = frameWriter.writeHeaders(ctx, stream.id(), headers, streamDependency, weight, exclusive,, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = f.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            Http2Headers headers, int padding, boolean endStream, ChannelPromise promise) {, +            int padding, boolean endStream, ChannelPromise promise) {, +            int promisedStreamId, Http2Headers headers, int padding, ChannelPromise promise) {, +            boolean hasPriority, int streamDependency, short weight, boolean exclusive, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2FrameWriter.java, +                                      boolean endStream, ChannelPromise promise) {, +                                      boolean endStream, ChannelPromise promise) {, +                                          Http2Headers headers, int padding, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                // Writing headers may fail during the encode state if they violate HPACK limits., +                Throwable failureCause = future.cause();, +                if (failureCause == null) {, +                } else {, +                    lifecycleManager.onError(ctx, failureCause);, +                }, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = future.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +            ChannelFuture f = frameWriter.writeHeaders(ctx, stream.id(), headers, streamDependency, weight, exclusive,, +            // Writing headers may fail during the encode state if they violate HPACK limits., +            Throwable failureCause = f.cause();, +            if (failureCause == null) {, +            } else {, +                lifecycleManager.onError(ctx, failureCause);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            Http2Headers headers, int padding, boolean endStream, ChannelPromise promise) {, +            int padding, boolean endStream, ChannelPromise promise) {, +            int promisedStreamId, Http2Headers headers, int padding, ChannelPromise promise) {, +            boolean hasPriority, int streamDependency, short weight, boolean exclusive, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +    protected void handleServerHeaderDecodeSizeError(ChannelHandlerContext ctx, Http2Stream stream) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2FrameWriter.java, +                                      boolean endStream, ChannelPromise promise) {, +                                      boolean endStream, ChannelPromise promise) {, +                                          Http2Headers headers, int padding, ChannelPromise promise) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                // Writing headers may fail during the encode state if they violate HPACK limits., +                Throwable failureCause = future.cause();, +                if (failureCause == null) {, +                } else {]