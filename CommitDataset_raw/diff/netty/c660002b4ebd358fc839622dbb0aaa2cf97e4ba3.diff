[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +                        DecoderResult.failure(chunk.getDecoderResult().cause()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +                        DecoderResult.failure(chunk.getDecoderResult().cause()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +                        DecoderResult.failure(chunk.getDecoderResult().cause()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +                        DecoderResult.failure(chunk.getDecoderResult().cause()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +import io.netty.util.Signal;, +, +    protected static final Signal SIGNAL_UNFINISHED = new Signal(DecoderResult.class.getName() + ".UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = new Signal(DecoderResult.class.getName() + ".SUCCESS");, +, +    public static final DecoderResult UNFINISHED = new DecoderResult(SIGNAL_UNFINISHED);, +    public static final DecoderResult SUCCESS = new DecoderResult(SIGNAL_SUCCESS);, +        return new DecoderResult(cause);, +    private final Throwable cause;, +, +    protected DecoderResult(Throwable cause) {, +    public boolean isFinished() {, +        return cause != SIGNAL_UNFINISHED;, +    }, +, +        return cause == SIGNAL_SUCCESS;, +        return cause != SIGNAL_SUCCESS && cause != SIGNAL_UNFINISHED;, +        if (isFailure()) {, +        } else {, +            return null;, +        }, +        if (isFinished()) {, +        } else {, +            return "unfinished";, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +                        DecoderResult.failure(chunk.getDecoderResult().cause()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpInvalidMessageTest.java, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +        assertTrue(dr.isFailure());, +        assertFalse(dr.isFailure());, +++ b/codec/src/main/java/io/netty/handler/codec/DecoderResult.java, +import io.netty.util.Signal;, +, +    protected static final Signal SIGNAL_UNFINISHED = new Signal(DecoderResult.class.getName() + ".UNFINISHED");, +    protected static final Signal SIGNAL_SUCCESS = new Signal(DecoderResult.class.getName() + ".SUCCESS");, +, +    public static final DecoderResult UNFINISHED = new DecoderResult(SIGNAL_UNFINISHED);, +    public static final DecoderResult SUCCESS = new DecoderResult(SIGNAL_SUCCESS);, +        return new DecoderResult(cause);, +    private final Throwable cause;, +, +    protected DecoderResult(Throwable cause) {, +    public boolean isFinished() {, +        return cause != SIGNAL_UNFINISHED;, +    }, +, +        return cause == SIGNAL_SUCCESS;, +        return cause != SIGNAL_SUCCESS && cause != SIGNAL_UNFINISHED;, +        if (isFailure()) {, +        } else {, +            return null;, +        }, +        if (isFinished()) {, +        } else {, +            return "unfinished";, +        }, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopServerHandler.java, +        buf.append(".. WITH DECODER FAILURE: ");]