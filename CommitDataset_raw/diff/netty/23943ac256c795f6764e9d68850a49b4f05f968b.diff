[+++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +++ b/src/main/java/org/jboss/netty/bootstrap/MapUtil.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.bootstrap;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +, +/**, + * A set of utility methods related with a {@link Map}., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (trustin@gmail.com), + *, + * @version $Rev$, $Date$, + */, +class MapUtil {, +, +    /**, +     * Returns {@code true} if and only if the specified {@code map} is an, +     * ordered map, like {@link LinkedHashMap} is., +     */, +    @SuppressWarnings("unchecked"), +    static boolean isOrderedMap(Map<?, ?> map) {, +        Class<?> mapType = map.getClass();, +        if (LinkedHashMap.class.isAssignableFrom(mapType)) {, +            // LinkedHashMap is an ordered map., +            return true;, +        }, +, +        // Not a LinkedHashMap - start autodetection., +, +        // Detect Apache Commons Collections OrderedMap implementations., +        Class<?> type = mapType;, +        while (type != null) {, +            for (Class<?> i: type.getInterfaces()) {, +                if (i.getName().endsWith("OrderedMap")) {, +                    // Seems like it's an ordered map - guessed from that, +                    // it implements OrderedMap interface., +                    return true;, +                }, +            }, +            type = type.getSuperclass();, +        }, +, +        // Does not implement OrderedMap interface.  As a last resort, try to, +        // create a new instance and test if the insertion order is maintained., +        Map newMap;, +        try {, +            newMap = (Map) mapType.newInstance();, +        } catch (Exception e) {, +            // No default constructor - cannot proceed anymore., +            return false;, +        }, +, +        // Run some tests., +        List<String> expectedKeys = new ArrayList<String>();, +        String dummyValue = "dummyValue";, +        for (short element: ORDER_TEST_SAMPLES) {, +            String key = String.valueOf(element);, +            newMap.put(key, dummyValue);, +            expectedKeys.add(key);, +, +            Iterator<String> it = expectedKeys.iterator();, +            for (Object actualKey: newMap.keySet()) {, +                if (!it.next().equals(actualKey)) {, +                    // Did not pass the test., +                    return false;, +                }, +            }, +        }, +, +        // The specified map passed the insertion order test., +        return true;, +    }, +, +    private MapUtil() {, +        // Unused, +    }, +, +    private static final short[] ORDER_TEST_SAMPLES = {, +        682, 807, 637, 358, 570, 828, 407, 319,]