[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +    private Runnable invokeReadTask;, +    private Runnable invokeFlushTask;, +        final DefaultChannelHandlerContext next = this.next;, +        EventExecutor executor = next.executor();, +            next.invokeExceptionCaught(cause);, +                        next.invokeExceptionCaught(cause);, +, +        return this;, +    private void invokeExceptionCaught(final Throwable cause) {, +    public ChannelFuture bind(final SocketAddress localAddress, final ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeBind(localAddress, promise);, +                    next.invokeBind(localAddress, promise);, +, +    private void invokeBind(SocketAddress localAddress, ChannelPromise promise) {, +    public ChannelFuture connect(, +            final SocketAddress remoteAddress, final SocketAddress localAddress, final ChannelPromise promise) {, +, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeConnect(remoteAddress, localAddress, promise);, +                    next.invokeConnect(remoteAddress, localAddress, promise);, +    private void invokeConnect(SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise) {, +    public ChannelFuture disconnect(final ChannelPromise promise) {, +            findContextOutbound().invokeClose(promise);, +            return promise;, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeDisconnect(promise);, +                    next.invokeDisconnect(promise);, +    private void invokeDisconnect(ChannelPromise promise) {, +    public ChannelFuture close(final ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeClose(promise);, +                    next.invokeClose(promise);, +    private void invokeClose(ChannelPromise promise) {, +    public ChannelFuture deregister(final ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeDeregister(promise);, +                    next.invokeDeregister(promise);, +    private void invokeDeregister(ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeRead();, +            Runnable task = next.invokeReadTask;, +                next.invokeReadTask = task = new Runnable() {, +                        next.invokeRead();, +, +        return this;, +    private void invokeRead() {, +    public ChannelFuture write(final Object msg, final ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeWrite(msg, promise);, +                    next.invokeWrite(msg, promise);, +, +        return promise;, +    private void invokeWrite(Object msg, ChannelPromise promise) {, +        final DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +            next.invokeFlush();, +            Runnable task = next.invokeFlushTask;, +                next.invokeFlushTask = task = new Runnable() {, +                        next.invokeFlush();, +, +        return this;, +    private void invokeFlush() {]