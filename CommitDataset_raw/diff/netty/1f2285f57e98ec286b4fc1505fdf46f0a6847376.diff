[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +            int interestOps = channel.getRawInterestOps();, +    }, +            int interestOps = channel.getRawInterestOps();, +    }, +                if (changed) {, +                    channel.setRawInterestOpsNow(interestOps);, +                }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +            int interestOps = channel.getRawInterestOps();, +    }, +            int interestOps = channel.getRawInterestOps();, +    }, +                if (changed) {, +                    channel.setRawInterestOpsNow(interestOps);, +                }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +            int interestOps = channel.getRawInterestOps();, +    }, +            int interestOps = channel.getRawInterestOps();, +    }, +, +                if (changed) {, +                    channel.setRawInterestOpsNow(interestOps);, +                }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +            int interestOps = channel.getRawInterestOps();, +    }, +            int interestOps = channel.getRawInterestOps();, +    }, +                if (changed) {, +                    channel.setRawInterestOpsNow(interestOps);, +                }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +            int interestOps = channel.getRawInterestOps();, +    }, +            int interestOps = channel.getRawInterestOps();, +    }, +, +                if (changed) {, +                    channel.setRawInterestOpsNow(interestOps);, +                }, +++ b/src/main/java/org/jboss/netty/example/proxy/HexDumpProxyInboundHandler.java, +    // This lock guards against the race condition that overrides the, +    // OP_READ flag incorrectly., +    // See the related discussion: http://markmail.org/message/x7jc6mqx6ripynqf, +    final Object trafficLock = new Object();, +, +    public void messageReceived(ChannelHandlerContext ctx, final MessageEvent e), +        //System.out.println(">>> " + ChannelBuffers.hexDump(msg));, +        synchronized (trafficLock) {, +    }, +        synchronized (trafficLock) {, +    }, +    private class OutboundHandler extends SimpleChannelUpstreamHandler {, +        public void messageReceived(ChannelHandlerContext ctx, final MessageEvent e), +            //System.out.println("<<< " + ChannelBuffers.hexDump(msg));, +            synchronized (trafficLock) {, +        }, +            synchronized (trafficLock) {, +        }]