[+++ b/transport/src/main/java/io/netty/channel/socket/oio/OioSctpChannel.java, +import java.nio.channels.SelectionKey;, +import java.nio.channels.Selector;, +, +    private final Selector readSelector;, +    private final Selector writeSelector;, +    private final Selector connectSelector;, +, +            ch.configureBlocking(false);, +            readSelector = Selector.open();, +            writeSelector = Selector.open();, +            connectSelector = Selector.open();, +, +            ch.register(readSelector, SelectionKey.OP_READ);, +            ch.register(writeSelector, SelectionKey.OP_WRITE);, +            ch.register(connectSelector, SelectionKey.OP_CONNECT);, +, +        if (readSuspended || !readSelector.isOpen()) {, +        int readMessages = 0;, +, +        final int selectedKeys = readSelector.select(SO_TIMEOUT);, +        final boolean keysSelected = selectedKeys > 0;, +, +        if (!keysSelected) {, +            return readMessages;, +        }, +, +        Set<SelectionKey> reableKeys = readSelector.selectedKeys();, +        try {, +            for (SelectionKey _ : reableKeys) {, +                    return readMessages;, +                readMessages ++;, +, +                    return readMessages;, +        } finally {, +            reableKeys.clear();, +        }, +, +        return readMessages;, +    }, +        if (!writeSelector.isOpen()) {, +            return;, +        }, +        final int selectedKeys = writeSelector.select(SO_TIMEOUT);, +        if (selectedKeys > 0) {, +            final Set<SelectionKey> writableKeys = writeSelector.selectedKeys();, +            for (SelectionKey _ : writableKeys) {, +                if (packet == null) {, +                    return;, +                }, +, +                if (data.nioBufferCount() != -1) {, +            writableKeys.clear();, +        }, +    }, +            boolean  finishConnect = false;, +            while (!finishConnect) {, +                if (connectSelector.select(SO_TIMEOUT) >= 0) {, +                    final Set<SelectionKey> selectionKeys = connectSelector.selectedKeys();, +                    for (SelectionKey key : selectionKeys) {, +                       if (key.isConnectable()) {, +                           selectionKeys.clear();, +                           finishConnect = true;, +                           break;, +                       }, +                    }, +                    selectionKeys.clear();, +                }, +            }, +            success = ch.finishConnect();, +        closeSelector("read", readSelector);, +        closeSelector("write", writeSelector);, +        closeSelector("connect", connectSelector);, +    private void closeSelector(String selectorName, Selector selector) {, +        try {, +            selector.close();, +        } catch (IOException e) {, +            logger.warn("Failed to close a " + selectorName + " selector.", e);, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/socket/oio/OioSctpChannel.java, +import java.nio.channels.SelectionKey;, +import java.nio.channels.Selector;, +, +    private final Selector readSelector;, +    private final Selector writeSelector;, +    private final Selector connectSelector;, +, +            ch.configureBlocking(false);, +            readSelector = Selector.open();, +            writeSelector = Selector.open();, +            connectSelector = Selector.open();, +, +            ch.register(readSelector, SelectionKey.OP_READ);, +            ch.register(writeSelector, SelectionKey.OP_WRITE);, +            ch.register(connectSelector, SelectionKey.OP_CONNECT);, +, +        if (readSuspended || !readSelector.isOpen()) {, +        int readMessages = 0;]