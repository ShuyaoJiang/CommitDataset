[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        if (stream.state() == IDLE) {, +            // We cannot write RST_STREAM frames on IDLE streams https://tools.ietf.org/html/rfc7540#section-6.4., +        if (future.isDone()) {, +            processRstStreamWriteResult(ctx, stream, future);, +        } else {, +                    processRstStreamWriteResult(ctx, stream, future);, +        }, +            ChannelFutureListener closeListener = this.closeListener;, +            this.closeListener = null;, +    private void processRstStreamWriteResult(ChannelHandlerContext ctx, Http2Stream stream, ChannelFuture future) {, +        if (future.isSuccess()) {, +            closeStream(stream, future);, +        } else {, +            // The connection will be closed and so no need to change the resetSent flag to false., +            onConnectionError(ctx, future.cause(), null);, +        }, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        if (stream.state() == IDLE) {, +            // We cannot write RST_STREAM frames on IDLE streams https://tools.ietf.org/html/rfc7540#section-6.4., +        if (future.isDone()) {, +            processRstStreamWriteResult(ctx, stream, future);, +        } else {, +                    processRstStreamWriteResult(ctx, stream, future);, +        }, +            ChannelFutureListener closeListener = this.closeListener;, +            this.closeListener = null;, +    private void processRstStreamWriteResult(ChannelHandlerContext ctx, Http2Stream stream, ChannelFuture future) {, +        if (future.isSuccess()) {, +            closeStream(stream, future);, +        } else {, +            // The connection will be closed and so no need to change the resetSent flag to false., +            onConnectionError(ctx, future.cause(), null);, +        }, +    }, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +import static io.netty.handler.codec.http2.Http2Stream.State.IDLE;, +    @Test, +    public void writeRstOnIdleStreamShouldNotWriteButStillSucceed() throws Exception {, +        handler = newHandler();, +        when(stream.state()).thenReturn(IDLE);, +        handler.resetStream(ctx, STREAM_ID, STREAM_CLOSED.code(), promise);, +        verify(frameWriter, never()).writeRstStream(eq(ctx), eq(STREAM_ID), anyLong(), any(ChannelPromise.class));, +        verify(stream).close();, +    }, +]