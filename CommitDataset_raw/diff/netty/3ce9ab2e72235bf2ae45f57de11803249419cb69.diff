[+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +import java.lang.reflect.Field;, +    private static final boolean DISABLE_KEYSET_OPTIMIZATION =, +            SystemPropertyUtil.getBoolean("io.netty.noKeySetOptimization", false);, +            logger.debug("io.netty.noKeySetOptimization: {}", DISABLE_KEYSET_OPTIMIZATION);, +    private SelectedSelectionKeySet selectedKeys;, +        final Selector selector;, +            selector = provider.openSelector();, +, +        if (DISABLE_KEYSET_OPTIMIZATION) {, +            return selector;, +        }, +, +        try {, +            SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();, +, +            Class<?> selectorImplClass =, +                    Class.forName("sun.nio.ch.SelectorImpl", false, ClassLoader.getSystemClassLoader());, +            selectorImplClass.isAssignableFrom(selector.getClass());, +            Field selectedKeysField = selectorImplClass.getDeclaredField("selectedKeys");, +            Field publicSelectedKeysField = selectorImplClass.getDeclaredField("publicSelectedKeys");, +, +            selectedKeysField.setAccessible(true);, +            publicSelectedKeysField.setAccessible(true);, +, +            selectedKeysField.set(selector, selectedKeySet);, +            publicSelectedKeysField.set(selector, selectedKeySet);, +, +            selectedKeys = selectedKeySet;, +            logger.trace("Instrumented an optimized java.util.Set into: {}", selector);, +        } catch (Throwable t) {, +            selectedKeys = null;, +            logger.trace("Failed to instrument an optimized java.util.Set into: {}", selector, t);, +        }, +, +        return selector;, +                needsToSelectAgain = false;, +                if (selectedKeys != null) {, +                    processSelectedKeysOptimized(selectedKeys.flip());, +                } else {, +                    processSelectedKeysPlain(selector.selectedKeys());, +                }, +    private void processSelectedKeysPlain(Set<SelectionKey> selectedKeys) {, +    private void processSelectedKeysOptimized(SelectionKey[] selectedKeys) {, +        for (int i = 0;; i ++) {, +            final SelectionKey k = selectedKeys[i];, +            if (k == null) {, +                break;, +            }, +, +            final Object a = k.attachment();, +, +            if (a instanceof AbstractNioChannel) {, +                processSelectedKey(k, (AbstractNioChannel) a);, +            } else {, +                @SuppressWarnings("unchecked"), +                NioTask<SelectableChannel> task = (NioTask<SelectableChannel>) a;, +                processSelectedKey(k, task);, +            }, +, +            if (needsToSelectAgain) {, +                selectAgain();, +            }, +        }, +    }, +, +                    selector = this.selector;, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +import java.lang.reflect.Field;, +    private static final boolean DISABLE_KEYSET_OPTIMIZATION =, +            SystemPropertyUtil.getBoolean("io.netty.noKeySetOptimization", false);, +            logger.debug("io.netty.noKeySetOptimization: {}", DISABLE_KEYSET_OPTIMIZATION);, +    private SelectedSelectionKeySet selectedKeys;, +        final Selector selector;, +            selector = provider.openSelector();, +, +        if (DISABLE_KEYSET_OPTIMIZATION) {, +            return selector;, +        }, +, +        try {, +            SelectedSelectionKeySet selectedKeySet = new SelectedSelectionKeySet();, +, +            Class<?> selectorImplClass =, +                    Class.forName("sun.nio.ch.SelectorImpl", false, ClassLoader.getSystemClassLoader());, +            selectorImplClass.isAssignableFrom(selector.getClass());, +            Field selectedKeysField = selectorImplClass.getDeclaredField("selectedKeys");, +            Field publicSelectedKeysField = selectorImplClass.getDeclaredField("publicSelectedKeys");, +, +            selectedKeysField.setAccessible(true);, +            publicSelectedKeysField.setAccessible(true);, +, +            selectedKeysField.set(selector, selectedKeySet);, +            publicSelectedKeysField.set(selector, selectedKeySet);, +, +            selectedKeys = selectedKeySet;, +            logger.trace("Instrumented an optimized java.util.Set into: {}", selector);, +        } catch (Throwable t) {, +            selectedKeys = null;, +            logger.trace("Failed to instrument an optimized java.util.Set into: {}", selector, t);]