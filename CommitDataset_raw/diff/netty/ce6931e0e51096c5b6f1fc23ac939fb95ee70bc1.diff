[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +         * Will schedule a {@link #epollInReady()} call on the event loop if necessary., +         * @param edgeTriggered {@code true} if the channel is using ET mode. {@code false} otherwise., +         */, +        final void checkResetEpollIn(boolean edgeTriggered) {, +            if (edgeTriggered && !isInputShutdown0()) {, +                // trigger a read again as there may be something left to read and because of epoll ET we, +                // will not get notified again until we read everything from the socket, +                eventLoop().execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        epollInReady();, +                    }, +                });, +            }, +        }, +, +        /**, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +         * Will schedule a {@link #epollInReady()} call on the event loop if necessary., +         * @param edgeTriggered {@code true} if the channel is using ET mode. {@code false} otherwise., +         */, +        final void checkResetEpollIn(boolean edgeTriggered) {, +            if (edgeTriggered && !isInputShutdown0()) {, +                // trigger a read again as there may be something left to read and because of epoll ET we, +                // will not get notified again until we read everything from the socket, +                eventLoop().execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        epollInReady();, +                    }, +                });, +            }, +        }, +, +        /**, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollServerChannel.java, +        // Will hold the remote address after accept(...) was successful., +                    checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +         * Will schedule a {@link #epollInReady()} call on the event loop if necessary., +         * @param edgeTriggered {@code true} if the channel is using ET mode. {@code false} otherwise., +         */, +        final void checkResetEpollIn(boolean edgeTriggered) {, +            if (edgeTriggered && !isInputShutdown0()) {, +                // trigger a read again as there may be something left to read and because of epoll ET we, +                // will not get notified again until we read everything from the socket, +                eventLoop().execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        epollInReady();, +                    }, +                });, +            }, +        }, +, +        /**, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollServerChannel.java, +        // Will hold the remote address after accept(...) was successful., +                    checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +        private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Throwable cause, boolean close) {, +                handleReadException(pipeline, byteBuf, t, close);, +                checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +         * Will schedule a {@link #epollInReady()} call on the event loop if necessary., +         * @param edgeTriggered {@code true} if the channel is using ET mode. {@code false} otherwise., +         */, +        final void checkResetEpollIn(boolean edgeTriggered) {, +            if (edgeTriggered && !isInputShutdown0()) {, +                // trigger a read again as there may be something left to read and because of epoll ET we, +                // will not get notified again until we read everything from the socket, +                eventLoop().execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        epollInReady();, +                    }, +                });, +            }, +        }, +, +        /**, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollServerChannel.java, +        // Will hold the remote address after accept(...) was successful., +                    checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +        private void handleReadException(ChannelPipeline pipeline, ByteBuf byteBuf, Throwable cause, boolean close) {, +                handleReadException(pipeline, byteBuf, t, close);, +                checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, +                    do {, +                    } while (allocHandle.continueReading());, +                    checkResetEpollIn(edgeTriggered);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +         * Will schedule a {@link #epollInReady()} call on the event loop if necessary., +         * @param edgeTriggered {@code true} if the channel is using ET mode. {@code false} otherwise., +         */, +        final void checkResetEpollIn(boolean edgeTriggered) {, +            if (edgeTriggered && !isInputShutdown0()) {, +                // trigger a read again as there may be something left to read and because of epoll ET we]