[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            decodeLast(ctx, replayable, out);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            decodeLast(ctx, replayable, out);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +            if (sessionCacheSize <= 0) {, +                // Get the default session cache size using SSLContext.setSessionCacheSize(), +                sessionCacheSize = SSLContext.setSessionCacheSize(ctx, 20480);, +            }, +            if (sessionTimeout <= 0) {, +                // Get the default session timeout using SSLContext.setSessionCacheTimeout(), +                sessionTimeout = SSLContext.setSessionCacheTimeout(ctx, 300);, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            decodeLast(ctx, replayable, out);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +            if (sessionCacheSize <= 0) {, +                // Get the default session cache size using SSLContext.setSessionCacheSize(), +                sessionCacheSize = SSLContext.setSessionCacheSize(ctx, 20480);, +            }, +            if (sessionTimeout <= 0) {, +                // Get the default session timeout using SSLContext.setSessionCacheTimeout(), +                sessionTimeout = SSLContext.setSessionCacheTimeout(ctx, 300);, +            }, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        if (lastTask != null) {, +        lastTask = task;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        if (message == null) {, +        message.setDecoderResult(DecoderResult.failure(cause));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +    @SuppressWarnings("rawtypes"), +        if (!isMultipart) {, +        iterator = multipartHttpDatas.listIterator();, +, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostStandardRequestDecoder.java, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +            } else if (contRead && currentAttribute != null && currentStatus == MultiPartStatus.FIELD) {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java]