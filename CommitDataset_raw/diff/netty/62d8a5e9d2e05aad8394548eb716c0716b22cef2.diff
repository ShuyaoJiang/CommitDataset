[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    public final <T extends ChannelHandler> T removeIfExists(String name) {, +        return removeIfExists(context(name));, +    }, +, +    public final <T extends ChannelHandler> T removeIfExists(Class<T> handlerType) {, +        return removeIfExists(context(handlerType));, +    }, +, +    public final <T extends ChannelHandler> T removeIfExists(ChannelHandler handler) {, +        return removeIfExists(context(handler));, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T extends ChannelHandler> T removeIfExists(ChannelHandlerContext ctx) {, +        if (ctx == null) {, +            return null;, +        }, +        return (T) remove((AbstractChannelHandlerContext) ctx).handler();, +    }, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    public final <T extends ChannelHandler> T removeIfExists(String name) {, +        return removeIfExists(context(name));, +    }, +, +    public final <T extends ChannelHandler> T removeIfExists(Class<T> handlerType) {, +        return removeIfExists(context(handlerType));, +    }, +, +    public final <T extends ChannelHandler> T removeIfExists(ChannelHandler handler) {, +        return removeIfExists(context(handler));, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T extends ChannelHandler> T removeIfExists(ChannelHandlerContext ctx) {, +        if (ctx == null) {, +            return null;, +        }, +        return (T) remove((AbstractChannelHandlerContext) ctx).handler();, +    }, +, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +import java.util.NoSuchElementException;, +    public void testRemoveIfExists() {, +        DefaultChannelPipeline pipeline = new DefaultChannelPipeline(new LocalChannel());, +, +        ChannelHandler handler1 = newHandler();, +        ChannelHandler handler2 = newHandler();, +        ChannelHandler handler3 = newHandler();, +, +        pipeline.addLast("handler1", handler1);, +        pipeline.addLast("handler2", handler2);, +        pipeline.addLast("handler3", handler3);, +, +        assertNotNull(pipeline.removeIfExists(handler1));, +        assertNull(pipeline.get("handler1"));, +, +        assertNotNull(pipeline.removeIfExists("handler2"));, +        assertNull(pipeline.get("handler2"));, +, +        assertNotNull(pipeline.removeIfExists(TestHandler.class));, +        assertNull(pipeline.get("handler3"));, +    }, +, +    @Test, +    public void testRemoveIfExistsDoesNotThrowException() {, +        DefaultChannelPipeline pipeline = new DefaultChannelPipeline(new LocalChannel());, +, +        ChannelHandler handler1 = newHandler();, +        ChannelHandler handler2 = newHandler();, +        pipeline.addLast("handler1", handler1);, +, +        assertNull(pipeline.removeIfExists("handlerXXX"));, +        assertNull(pipeline.removeIfExists(handler2));, +        assertNull(pipeline.removeIfExists(ChannelOutboundHandlerAdapter.class));, +        assertNotNull(pipeline.get("handler1"));, +    }, +, +    @Test(expected = NoSuchElementException.class), +    public void testRemoveThrowNoSuchElementException() {, +        DefaultChannelPipeline pipeline = new DefaultChannelPipeline(new LocalChannel());, +, +        ChannelHandler handler1 = newHandler();, +        pipeline.addLast("handler1", handler1);, +, +        pipeline.remove("handlerXXX");, +    }, +, +    @Test]