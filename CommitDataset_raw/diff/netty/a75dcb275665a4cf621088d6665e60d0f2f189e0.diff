[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        id = newId();, +    /**, +     * Returns a new {@link DefaultChannelId} instance. Subclasses may override this method to assign custom, +     * {@link ChannelId}s to {@link Channel}s that use the {@link AbstractChannel#AbstractChannel(Channel)} constructor., +     */, +    protected ChannelId newId() {, +        return DefaultChannelId.newInstance();, +    }, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        id = newId();, +    /**, +     * Returns a new {@link DefaultChannelId} instance. Subclasses may override this method to assign custom, +     * {@link ChannelId}s to {@link Channel}s that use the {@link AbstractChannel#AbstractChannel(Channel)} constructor., +     */, +    protected ChannelId newId() {, +        return DefaultChannelId.newInstance();, +    }, +, +++ b/transport/src/test/java/io/netty/channel/AbstractChannelTest.java, +import static org.junit.Assert.*;, +import static org.hamcrest.CoreMatchers.*;, +    @Test, +    public void ensureDefaultChannelId() {, +        TestChannel channel = new TestChannel();, +        final ChannelId channelId = channel.id();, +        assertThat(channelId, instanceOf(DefaultChannelId.class));, +    }, +]