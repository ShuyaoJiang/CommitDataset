[+++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +            Entry entry = buffer[i];, +                int count = entry.count;, +                if (count == -1) {, +                    entry.count = count =  buf.nioBufferCount();, +                }, +                    if (count == 1) {, +                        ByteBuffer nioBuf = entry.buf;, +                        if (nioBuf == null) {, +                            // cache ByteBuffer as it may need to create a new ByteBuffer instance if its a, +                            // derived buffer, +                            entry.buf = nioBuf = buf.internalNioBuffer(readerIndex, readableBytes);, +                        }, +                        nioBuffers[nioBufferCount ++] = nioBuf;, +                        ByteBuffer[] nioBufs = entry.buffers;, +                        if (nioBufs == null) {, +                            // cached ByteBuffers as they may be expensive to create in terms of Object allocation, +                            entry.buffers = nioBufs = buf.nioBuffers();, +                        }, +                        nioBufferCount = fillBufferArray(nioBufs, nioBuffers, nioBufferCount);, +                    nioBufferCount = fillBufferArrayNonDirect(entry, buf, readerIndex,, +    private static int fillBufferArray(ByteBuffer[] nioBufs, ByteBuffer[] nioBuffers, int nioBufferCount) {, +        // cache ByteBuffer, +        ByteBuffer nioBuf = entry.buf = directBuf.internalNioBuffer(0, readableBytes);, +        entry.count = 1;, +        nioBuffers[nioBufferCount ++] = nioBuf;, +        ByteBuffer[] buffers;, +        ByteBuffer buf;, +        int count = -1;, +            buffers = null;, +            buf = null;, +            count = -1;]