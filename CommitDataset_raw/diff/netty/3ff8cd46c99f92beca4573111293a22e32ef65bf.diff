[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +, +        private static final long serialVersionUID = 5057413071460766376L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +, +        private static final long serialVersionUID = 5057413071460766376L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +        private static final long serialVersionUID = -246694024103520626L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +, +        private static final long serialVersionUID = 5057413071460766376L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +        private static final long serialVersionUID = -246694024103520626L;, +, +++ b/src/main/java/org/jboss/netty/channel/xnio/BaseXnioChannel.java, +        private static final long serialVersionUID = 9223361436545857472L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +, +        private static final long serialVersionUID = 5057413071460766376L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +        private static final long serialVersionUID = -246694024103520626L;, +, +++ b/src/main/java/org/jboss/netty/channel/xnio/BaseXnioChannel.java, +        private static final long serialVersionUID = 9223361436545857472L;, +, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClient.java, +            lastWriteFuture = channel.write(line + '\r' + '\n');, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +, +        private static final long serialVersionUID = 5057413071460766376L;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +        private static final long serialVersionUID = -246694024103520626L;, +, +++ b/src/main/java/org/jboss/netty/channel/xnio/BaseXnioChannel.java, +        private static final long serialVersionUID = 9223361436545857472L;, +, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClient.java, +            lastWriteFuture = channel.write(line + '\r' + '\n');, +++ b/src/main/java/org/jboss/netty/util/internal/AtomicFieldUpdaterUtil.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.util.internal;, +, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (trustin@gmail.com), + * @version $Rev$, $Date$, + */, +class AtomicFieldUpdaterUtil {, +, +    private static final boolean AVAILABLE;, +, +    static final class Node {, +        volatile Node next;, +        Node() {, +            super();, +        }, +    }, +, +    static {, +        boolean available = false;, +        try {, +            AtomicReferenceFieldUpdater<Node, Node> tmp =, +                AtomicReferenceFieldUpdater.newUpdater(, +                        Node.class, Node.class, "next");, +, +            // Test if AtomicReferenceFieldUpdater is really working., +            Node testNode = new Node();, +            tmp.set(testNode, testNode);, +            if (testNode.next != testNode) {, +                // Not set as expected - fall back to the safe mode., +                throw new Exception();, +            }, +            available = true;, +        } catch (Throwable t) {, +            // Running in a restricted environment with a security manager., +        }]