[+++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import org.jboss.netty.handler.codec.http.HttpCookie;, +import org.jboss.netty.handler.codec.http.HttpCookieDecoder;, +import org.jboss.netty.handler.codec.http.HttpCookieEncoder;, +, +        Map<String, HttpCookie> cookies = cookieDecoder.decode(request.getHeader(HttpHeaders.Names.COOKIE));, +        if(!cookies.isEmpty()) {, +            // Reset the cookies if necessary., +            for (HttpCookie cookie : cookies.values()) {, +, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import org.jboss.netty.handler.codec.http.HttpCookie;, +import org.jboss.netty.handler.codec.http.HttpCookieDecoder;, +import org.jboss.netty.handler.codec.http.HttpCookieEncoder;, +, +        Map<String, HttpCookie> cookies = cookieDecoder.decode(request.getHeader(HttpHeaders.Names.COOKIE));, +        if(!cookies.isEmpty()) {, +            // Reset the cookies if necessary., +            for (HttpCookie cookie : cookies.values()) {, +, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private final Map<String, List<String>> headers = new TreeMap<String, List<String>>(CaseIgnoringComparator.INSTANCE);, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import org.jboss.netty.handler.codec.http.HttpCookie;, +import org.jboss.netty.handler.codec.http.HttpCookieDecoder;, +import org.jboss.netty.handler.codec.http.HttpCookieEncoder;, +, +        Map<String, HttpCookie> cookies = cookieDecoder.decode(request.getHeader(HttpHeaders.Names.COOKIE));, +        if(!cookies.isEmpty()) {, +            // Reset the cookies if necessary., +            for (HttpCookie cookie : cookies.values()) {, +, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private final Map<String, List<String>> headers = new TreeMap<String, List<String>>(CaseIgnoringComparator.INSTANCE);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCookieDecoder.java, +import java.util.Map;, +import java.util.TreeMap;, +, +import org.jboss.netty.util.CaseIgnoringComparator;, +    public Map<String, HttpCookie> decode(String header) {, +        Map<String, HttpCookie> cookies = new TreeMap<String, HttpCookie>(CaseIgnoringComparator.INSTANCE);, +                String name = cookie[0].trim();, +                String value = cookie[1].trim();, +                cookies.put(name, new HttpCookie(name, value));, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import org.jboss.netty.handler.codec.http.HttpCookie;, +import org.jboss.netty.handler.codec.http.HttpCookieDecoder;, +import org.jboss.netty.handler.codec.http.HttpCookieEncoder;, +, +        Map<String, HttpCookie> cookies = cookieDecoder.decode(request.getHeader(HttpHeaders.Names.COOKIE));, +        if(!cookies.isEmpty()) {, +            // Reset the cookies if necessary., +            for (HttpCookie cookie : cookies.values()) {, +, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private final Map<String, List<String>> headers = new TreeMap<String, List<String>>(CaseIgnoringComparator.INSTANCE);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCookieDecoder.java, +import java.util.Map;, +import java.util.TreeMap;, +, +import org.jboss.netty.util.CaseIgnoringComparator;, +    public Map<String, HttpCookie> decode(String header) {, +        Map<String, HttpCookie> cookies = new TreeMap<String, HttpCookie>(CaseIgnoringComparator.INSTANCE);, +                String name = cookie[0].trim();, +                String value = cookie[1].trim();, +                cookies.put(name, new HttpCookie(name, value));, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCookieEncoder.java, +import java.util.Collection;, +, +import org.jboss.netty.util.CaseIgnoringComparator;, +    private final Map<String, HttpCookie> cookies = new TreeMap<String, HttpCookie>(CaseIgnoringComparator.INSTANCE);, +            sb.append((char) HttpCodecUtil.EQUALS);, +            sb.append((char) HttpCodecUtil.SEMICOLON);, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import org.jboss.netty.handler.codec.http.HttpCookie;, +import org.jboss.netty.handler.codec.http.HttpCookieDecoder;, +import org.jboss.netty.handler.codec.http.HttpCookieEncoder;, +, +        Map<String, HttpCookie> cookies = cookieDecoder.decode(request.getHeader(HttpHeaders.Names.COOKIE));, +        if(!cookies.isEmpty()) {, +            // Reset the cookies if necessary., +            for (HttpCookie cookie : cookies.values()) {, +, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private final Map<String, List<String>> headers = new TreeMap<String, List<String>>(CaseIgnoringComparator.INSTANCE);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCookieDecoder.java, +import java.util.Map;, +import java.util.TreeMap;, +, +import org.jboss.netty.util.CaseIgnoringComparator;, +    public Map<String, HttpCookie> decode(String header) {, +        Map<String, HttpCookie> cookies = new TreeMap<String, HttpCookie>(CaseIgnoringComparator.INSTANCE);, +                String name = cookie[0].trim();, +                String value = cookie[1].trim();, +                cookies.put(name, new HttpCookie(name, value));, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCookieEncoder.java, +import java.util.Collection;, +, +import org.jboss.netty.util.CaseIgnoringComparator;, +    private final Map<String, HttpCookie> cookies = new TreeMap<String, HttpCookie>(CaseIgnoringComparator.INSTANCE);]