[+++ b/codec/src/main/java/io/netty/handler/codec/MessageAggregator.java, +import static io.netty.buffer.Unpooled.EMPTY_BUFFER;, +, +    /**, +     * @deprecated This method will be removed in future releases., +     */, +    @Deprecated, +                currentMessage.release();, +                currentMessage = null;, +                    aggregated = beginAggregation(m, EMPTY_BUFFER);, +            currentMessage = beginAggregation(m, content);, +                // it is possible that a TooLongFrameException was already thrown but we can still discard data, +                // until the begging of the next request/response., +                return;, +            @SuppressWarnings("unchecked"), +            final C m = (C) msg;, +            if (content.readableBytes() > maxContentLength - m.content().readableBytes()) {, +            appendPartialContent(content, m.content());, +                    last = isLastContentMessage(m);, +                last = isLastContentMessage(m);, +                currentMessage = null;, +            content.addComponent(true, partialContent.retain());, +     * Determine if the channel should be closed after the result of, +     * {@link #newContinueResponse(Object, int, ChannelPipeline)} is written., +     * @param msg The return value from {@link #newContinueResponse(Object, int, ChannelPipeline)}., +     * @return {@code true} if the channel should be closed after the result of, +     * {@link #newContinueResponse(Object, int, ChannelPipeline)} is written. {@code false} otherwise., +     * @param msg The return value from {@link #newContinueResponse(Object, int, ChannelPipeline)}., +        try {, +        } finally {, +            releaseCurrentMessage();, +        }, +        try {, +        } finally {, +            releaseCurrentMessage();, +        }, +    }, +, +    private void releaseCurrentMessage() {, +            handlingOversizedMessage = false;]