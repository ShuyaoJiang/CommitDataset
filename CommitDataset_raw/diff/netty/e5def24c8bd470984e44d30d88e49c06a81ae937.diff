[+++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, + * The result of an asynchronous {@link Channel} I/O operation.  Methods are, + * provided to check if the I/O operation is complete, to wait for its, + * completion, and to retrieve the result of the I/O operation. It also allows, + * you to add more than one {@link ChannelFutureListener} so you can get, + * notified when the I/O operation is complete., +, +    /**, +     * Returns a channel where the I/O operation associated with this future, +     * takes place., +     */, +    /**, +     * Returns {@code true} if and only if this future is complete, regardless, +     * the operation was successful, failed, or canceled., +     */, +, +    /**, +     * Returns {@code true} if and only if this future was canceled by, +     * a {@link #cancel()} method., +     */, +, +    /**, +     * Returns {@code true} if and only if the I/O operation was done, +     * successfully., +     */, +, +    /**, +     * Returns the cause of the failed I/O operation if the I/O operation has, +     * failed., +     *, +     * @return the cause of the failure., +     *         {@code null} if succeeded or this future is not done yet., +     */, +    /**, +     * Cancels the I/O operation associated with this future and notifies all, +     * listeners if canceled successfully., +     *, +     * @return {@code true} if and only if the operation has been canceled., +     *         {@code false} if the operation can't be canceled or is already done., +     */, +    /**, +     * Marks this future as a success and notifies all listeners., +     */, +, +    /**, +     * Marks this future as a failure and notifies all listeners., +     */, +    /**, +     * Adds the specified listener to this future.  The specified listener is, +     * notified when this future is {@linkplain #isDone() done}.  If this, +     * future is already done, the specified listener is notified immediately., +     */, +, +    /**, +     * Removes the specified listener from this future.  The specified, +     * listener is no longer notified when this future is, +     * {@linkplain #isDone() done}.  If this future is already done, this, +     * method has no effect and returns silently., +     */, +    /**, +     * Waits for this future to be done., +     *, +     * @throws InterruptedException, +     *         if the current thread was interrupted, +     */, +, +    /**, +     * Waits for this future to be done uninterruptibly.  This method catches, +     * an {@link InterruptedException} and discards it silently., +     */, +, +    /**, +     * Waits for this future to be done with the specified time limit., +     *, +     * @return {@code true} if and only if the future was done within, +     *         the specified time limit, +     *, +     * @throws InterruptedException, +     *         if the current thread was interrupted, +     */, +, +    /**, +     * Waits for this future to be done with the specified time limit., +     *, +     * @return {@code true} if and only if the future was done within, +     *         the specified time limit, +     *, +     * @throws InterruptedException, +     *         if the current thread was interrupted, +     */, +, +    /**, +     * Waits for this future to be done with the specified time limit.  This, +     * method catches an {@link InterruptedException} and discards it silently., +     *, +     * @return {@code true} if and only if the future was done within, +     *         the specified time limit, +     */, +, +    /**]