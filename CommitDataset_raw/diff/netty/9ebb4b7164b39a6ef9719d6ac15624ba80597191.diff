[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +        this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +            ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, +    JdkSslClientContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, +        ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +    private static SSLContext newSSLContext(X509Certificate[] trustCertCollection,, +                                            TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain,, +                                            PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory,, +                                            long sessionCacheSize, long sessionTimeout) throws SSLException {, +            if (trustCertCollection != null) {, +                trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +        this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +            ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, +    JdkSslClientContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, +        ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +    private static SSLContext newSSLContext(X509Certificate[] trustCertCollection,, +                                            TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain,, +                                            PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory,, +                                            long sessionCacheSize, long sessionTimeout) throws SSLException {, +            if (trustCertCollection != null) {, +                trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                      This provides the certificate collection used for mutual authentication., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}., +    public JdkSslServerContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +        this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                      This provides the certificate collection used for mutual authentication., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslServerContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +            ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, +    JdkSslServerContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, +        ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key,, +    private static SSLContext newSSLContext(X509Certificate[] trustCertCollection,, +                                     TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain,, +                                     PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory,, +                                     long sessionCacheSize, long sessionTimeout), +            if (trustCertCollection != null) {, +                trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +        this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslClientContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +            ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, +    JdkSslClientContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, +        ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +    private static SSLContext newSSLContext(X509Certificate[] trustCertCollection,, +                                            TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain,, +                                            PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory,, +                                            long sessionCacheSize, long sessionTimeout) throws SSLException {, +            if (trustCertCollection != null) {, +                trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                      This provides the certificate collection used for mutual authentication., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}., +    public JdkSslServerContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +        this(trustCertCollectionFile, trustManagerFactory, keyCertChainFile, keyFile, keyPassword, keyManagerFactory,, +     * @param trustCertCollectionFile an X.509 certificate collection file in PEM format., +     *                      This provides the certificate collection used for mutual authentication., +     *                            {@code null} to use the default or the results of parsing, +     *                            {@code trustCertCollectionFile}, +    public JdkSslServerContext(File trustCertCollectionFile, TrustManagerFactory trustManagerFactory,, +            ctx = newSSLContext(toX509Certificates(trustCertCollectionFile), trustManagerFactory,, +    JdkSslServerContext(X509Certificate[] trustCertCollection, TrustManagerFactory trustManagerFactory,, +        ctx = newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key,, +    private static SSLContext newSSLContext(X509Certificate[] trustCertCollection,, +                                     TrustManagerFactory trustManagerFactory, X509Certificate[] keyCertChain,, +                                     PrivateKey key, String keyPassword, KeyManagerFactory keyManagerFactory,, +                                     long sessionCacheSize, long sessionTimeout), +            if (trustCertCollection != null) {, +                trustManagerFactory = buildTrustManagerFactory(trustCertCollection, trustManagerFactory);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java]