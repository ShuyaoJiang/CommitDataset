[+++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private final ReplayingDecoderByteBuf replayable = new ReplayingDecoderByteBuf();, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private final ReplayingDecoderByteBuf replayable = new ReplayingDecoderByteBuf();, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private final ReplayingDecoderByteBuf replayable = new ReplayingDecoderByteBuf();, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderByteBuf.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.ByteBufProcessor;, +import io.netty.buffer.SwappedByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.util.Signal;, +import io.netty.util.internal.StringUtil;, +, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +import java.nio.charset.Charset;, +, +/**, + * Special {@link ByteBuf} implementation which is used by the {@link ReplayingDecoder}, + */, +final class ReplayingDecoderByteBuf extends ByteBuf {, +, +    private static final Signal REPLAY = ReplayingDecoder.REPLAY;, +, +    private ByteBuf buffer;, +    private boolean terminated;, +    private SwappedByteBuf swapped;, +, +    static final ReplayingDecoderByteBuf EMPTY_BUFFER = new ReplayingDecoderByteBuf(Unpooled.EMPTY_BUFFER);, +, +    static {, +        EMPTY_BUFFER.terminate();, +    }, +, +    ReplayingDecoderByteBuf() { }, +, +    ReplayingDecoderByteBuf(ByteBuf buffer) {, +        setCumulation(buffer);, +    }, +, +    void setCumulation(ByteBuf buffer) {, +        this.buffer = buffer;, +    }, +, +    void terminate() {, +        terminated = true;, +    }, +, +    @Override, +    public int capacity() {, +        if (terminated) {, +            return buffer.capacity();, +        } else {, +            return Integer.MAX_VALUE;, +        }, +    }, +, +    @Override, +    public ByteBuf capacity(int newCapacity) {, +        reject();, +        return this;, +    }, +, +    @Override, +    public int maxCapacity() {, +        return capacity();, +    }, +, +    @Override, +    public ByteBufAllocator alloc() {, +        return buffer.alloc();, +    }, +, +    @Override, +    public boolean isDirect() {]