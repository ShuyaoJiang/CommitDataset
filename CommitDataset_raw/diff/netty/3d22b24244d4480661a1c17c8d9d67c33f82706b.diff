[+++ b/transport-native-unix-common/src/main/c/netty_unix_socket.c, +static void netty_unix_socket_optionHandleError(JNIEnv* env, int err, char* method) {, +    if (err == EBADF) {, +        netty_unix_errors_throwClosedChannelException(env);, +    } else {, +        netty_unix_errors_throwChannelExceptionErrorNo(env, method, err);, +    }, +}, +, +static void netty_unix_socket_setOptionHandleError(JNIEnv* env, int err) {, +    netty_unix_socket_optionHandleError(env, err, "setsockopt() failed: ");, +}, +, +static int netty_unix_socket_setOption0(jint fd, int level, int optname, const void* optval, socklen_t len) {, +    return setsockopt(fd, level, optname, optval, len);, +}, +, +        // Try to allow listen /connect ipv4 and ipv6, +        if (netty_unix_socket_setOption0(fd, IPPROTO_IPV6, IPV6_V6ONLY, &optval, sizeof(optval)) < 0) {, +            if (errno != EAFNOSUPPORT) {, +              netty_unix_socket_setOptionHandleError(env, errno);, +            // else we failed to enable dual stack mode., +            // It is assumed the socket is re‐stricted to sending and receiving IPv6 packets only., +            // Don't close fd and don't return -1. At best we can do is log., +            // TODO: bubble this up to an actual Logger., +        }]