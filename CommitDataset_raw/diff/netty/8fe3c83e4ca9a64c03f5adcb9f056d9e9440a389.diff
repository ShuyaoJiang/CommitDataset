[+++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +    /**, +     * {@link ChannelHandler#handlerAdded(ChannelHandlerContext)} was called., +     */, +    private static final int ADDED = 1;, +    /**, +     * {@link ChannelHandler#handlerRemoved(ChannelHandlerContext)} was called., +     */, +    private static final int REMOVED = 2;, +    /**, +     * Neither {@link ChannelHandler#handlerAdded(ChannelHandlerContext)}, +     * nor {@link ChannelHandler#handlerRemoved(ChannelHandlerContext)} was called., +     */, +    private static final int INIT = 0;, +, +    private int handlerState = INIT;, +        if (isAdded()) {, +        } else {, +            fireChannelRegistered();, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelUnregistered();, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelActive();, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelInactive();, +        }, +        if (isAdded()) {, +        } else {, +            fireExceptionCaught(cause);, +        }, +        if (isAdded()) {, +        } else {, +            fireUserEventTriggered(event);, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelRead(msg);, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelReadComplete();, +        }, +        if (isAdded()) {, +        } else {, +            fireChannelWritabilityChanged();, +        }, +        if (isAdded()) {, +        } else {, +            bind(localAddress, promise);, +        }, +        if (isAdded()) {, +        } else {, +            connect(remoteAddress, localAddress, promise);, +        }, +        if (isAdded()) {, +        } else {, +            disconnect(promise);, +        }, +        if (isAdded()) {, +        } else {, +            close(promise);, +        }, +        if (isAdded()) {, +        } else {, +            deregister(promise);, +        }, +        if (isAdded()) {, +        } else {, +            read();, +        }, +        if (isAdded()) {, +            invokeWrite0(msg, promise);, +        } else {, +            write(msg, promise);, +        }, +    }, +, +    private void invokeWrite0(Object msg, ChannelPromise promise) {, +        if (isAdded()) {, +            invokeFlush0();, +        } else {, +            flush();, +        }, +    }, +, +    private void invokeFlush0() {, +    private void invokeWriteAndFlush(Object msg, ChannelPromise promise) {, +        if (isAdded()) {, +            invokeWrite0(msg, promise);, +            invokeFlush0();, +        } else {, +            writeAndFlush(msg, promise);, +        }, +    }]