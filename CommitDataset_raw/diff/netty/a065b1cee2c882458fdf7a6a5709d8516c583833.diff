[+++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisEncoder.java, +import io.netty.channel.ChannelHandler.Sharable;, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            Command command = (Command) o;, +            command.write(cb);, +            Channels.write(ctx, future, cb);, +, +        } else if (o instanceof Iterable) {, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            ChannelFuture future = e.getFuture();, +, +            // Useful for transactions and database select, +            for (Object i : (Iterable<?>) o) {, +                if (i instanceof Command) {, +                    Command command = (Command) i;, +                    command.write(cb);, +                } else {, +                    super.writeRequested(ctx, e);, +                    return;]