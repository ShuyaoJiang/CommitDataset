[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, + *, + * You <strong>MUST</strong> call {@link #destroy()} after completion to release all resources., + *, +public class HttpPostRequestDecoder {, +    private boolean destroyed;, +, +    private void checkDestroyed() {, +        if (destroyed) {, +            throw new IllegalStateException(HttpPostRequestDecoder.class.getSimpleName() + " was destroyed already");, +        }, +    }, +, +        checkDestroyed();, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +     * Be sure to call {@link InterfaceHttpData#release()} after you are done, +     * with processing to make sure to not leak any resources, +     *, +        checkDestroyed();, +, +     * Destroy the {@link HttpPostRequestDecoder} and release all it resources. After this method, +     * was called it is not possible to operate on it anymore., +     */, +    public void destroy() {, +        checkDestroyed();, +, +        cleanFiles();, +        if (undecodedChunk != null && undecodedChunk.refCnt() > 0) {, +            undecodedChunk.release();, +            undecodedChunk = null;, +        }, +, +        // release all data which was not yet pulled, +        for (int i = bodyListHttpDataRank; i < bodyListHttpData.size(); i++) {, +            bodyListHttpData.get(i).release();, +        }, +    }, +, +    /**, +        checkDestroyed();, +, +        checkDestroyed();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, + *, + * You <strong>MUST</strong> call {@link #destroy()} after completion to release all resources., + *, +public class HttpPostRequestDecoder {, +    private boolean destroyed;, +, +    private void checkDestroyed() {, +        if (destroyed) {, +            throw new IllegalStateException(HttpPostRequestDecoder.class.getSimpleName() + " was destroyed already");, +        }, +    }, +, +        checkDestroyed();, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +        checkDestroyed();, +, +     * Be sure to call {@link InterfaceHttpData#release()} after you are done, +     * with processing to make sure to not leak any resources, +     *, +        checkDestroyed();, +, +     * Destroy the {@link HttpPostRequestDecoder} and release all it resources. After this method, +     * was called it is not possible to operate on it anymore., +     */, +    public void destroy() {, +        checkDestroyed();, +, +        cleanFiles();, +        if (undecodedChunk != null && undecodedChunk.refCnt() > 0) {, +            undecodedChunk.release();, +            undecodedChunk = null;, +        }, +, +        // release all data which was not yet pulled, +        for (int i = bodyListHttpDataRank; i < bodyListHttpData.size(); i++) {, +            bodyListHttpData.get(i).release();, +        }, +    }, +, +    /**]