[+++ b/common/src/main/java/io/netty/util/Recycler.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +, +, +    private static final int MAX_SHARED_CAPACITY_FACTOR;, +        MAX_SHARED_CAPACITY_FACTOR = max(2,, +                SystemPropertyUtil.getInt("io.netty.recycler.maxSharedCapacityFactor",, +                        2));, +, +                max(SystemPropertyUtil.getInt("io.netty.recycler.linkCapacity", 16), 16));, +                logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: disabled");, +                logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: {}", MAX_SHARED_CAPACITY_FACTOR);, +        INITIAL_CAPACITY = min(DEFAULT_MAX_CAPACITY, 256);, +    private final int maxSharedCapacityFactor;, +, +            return new Stack<T>(Recycler.this, Thread.currentThread(), maxCapacity, maxSharedCapacityFactor);, +        this(maxCapacity, MAX_SHARED_CAPACITY_FACTOR);, +    }, +, +    protected Recycler(int maxCapacity, int maxSharedCapacityFactor) {, +        if (maxCapacity <= 0) {, +            this.maxCapacity = 0;, +            this.maxSharedCapacityFactor = 1;, +        } else {, +            this.maxCapacity = maxCapacity;, +            this.maxSharedCapacityFactor = max(1, maxSharedCapacityFactor);, +        }, +        private final Stack<?> stack;, +            this.stack = stack;, +            // We allocated a Link so reserve the space, +            boolean reserved = stack.reserveSpace(LINK_CAPACITY);, +            assert reserved;, +                if (!stack.reserveSpace(LINK_CAPACITY)) {, +                    // Drop it., +                    return;, +                }, +                // We allocate a Link so reserve the space, +, +                srcEnd = min(srcStart + actualCapacity - dstSize, srcEnd);, +                    // Add capacity back as the Link is GCed., +                    stack.reclaimSpace(LINK_CAPACITY);, +, +        private final AtomicInteger availableSharedCapacity;, +        Stack(Recycler<T> parent, Thread thread, int maxCapacity, int maxSharedCapacityFactor) {, +            availableSharedCapacity = new AtomicInteger(max(maxCapacity / maxSharedCapacityFactor, LINK_CAPACITY));, +            elements = new DefaultHandle[min(INITIAL_CAPACITY, maxCapacity)];, +        }, +, +        boolean reserveSpace(int space) {, +            assert space >= 0;, +            for (;;) {, +                int available = availableSharedCapacity.get();, +                if (available < space) {, +                    return false;, +                }, +                if (availableSharedCapacity.compareAndSet(available, available - space)) {, +                    return true;, +                }, +            }, +        }, +, +        void reclaimSpace(int space) {, +            assert space >= 0;, +            availableSharedCapacity.addAndGet(space);, +            newCapacity = min(newCapacity, maxCapacity);, +                elements = Arrays.copyOf(elements, min(size << 1, maxCapacity));, +++ b/common/src/main/java/io/netty/util/Recycler.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +, +, +    private static final int MAX_SHARED_CAPACITY_FACTOR;, +        MAX_SHARED_CAPACITY_FACTOR = max(2,, +                SystemPropertyUtil.getInt("io.netty.recycler.maxSharedCapacityFactor",, +                        2));, +, +                max(SystemPropertyUtil.getInt("io.netty.recycler.linkCapacity", 16), 16));, +                logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: disabled");, +                logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: {}", MAX_SHARED_CAPACITY_FACTOR);, +        INITIAL_CAPACITY = min(DEFAULT_MAX_CAPACITY, 256);, +    private final int maxSharedCapacityFactor;, +, +            return new Stack<T>(Recycler.this, Thread.currentThread(), maxCapacity, maxSharedCapacityFactor);, +        this(maxCapacity, MAX_SHARED_CAPACITY_FACTOR);, +    }, +, +    protected Recycler(int maxCapacity, int maxSharedCapacityFactor) {, +        if (maxCapacity <= 0) {, +            this.maxCapacity = 0;, +            this.maxSharedCapacityFactor = 1;, +        } else {, +            this.maxCapacity = maxCapacity;, +            this.maxSharedCapacityFactor = max(1, maxSharedCapacityFactor);, +        }, +        private final Stack<?> stack;, +            this.stack = stack;, +            // We allocated a Link so reserve the space, +            boolean reserved = stack.reserveSpace(LINK_CAPACITY);, +            assert reserved;]