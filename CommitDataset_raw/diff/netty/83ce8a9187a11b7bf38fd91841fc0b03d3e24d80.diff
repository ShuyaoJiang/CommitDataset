[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.ArrayDeque;, +import java.util.Queue;, +    // Fields accessed by inner classes, +    final IntObjectMap<Http2Stream> streamMap = new IntObjectHashMap<Http2Stream>();, +    final ConnectionStream connectionStream = new ConnectionStream();, +    final DefaultEndpoint<Http2LocalFlowController> localEndpoint;, +    final DefaultEndpoint<Http2RemoteFlowController> remoteEndpoint;, +    final List<Listener> listeners = new ArrayList<Listener>(4);, +    final ActiveStreams activeStreams;, +        activeStreams = new ActiveStreams(listeners, checkNotNull(removalPolicy, "removalPolicy"));, +    public Http2Stream forEachActiveStream(StreamVisitor visitor) throws Http2Exception {, +        return activeStreams.forEachActiveStream(visitor);, +    public void goAwayReceived(final int lastKnownStream, long errorCode, ByteBuf debugData) {, +        try {, +            forEachActiveStream(new StreamVisitor() {, +                @Override, +                public boolean visit(Http2Stream stream) {, +                    return true;, +                }, +            });, +        } catch (Http2Exception e) {, +            PlatformDependent.throwException(e);, +    public void goAwaySent(final int lastKnownStream, long errorCode, ByteBuf debugData) {, +        try {, +            forEachActiveStream(new StreamVisitor() {, +                @Override, +                public boolean visit(Http2Stream stream) {, +                    return true;, +                }, +            });, +        } catch (Http2Exception e) {, +            PlatformDependent.throwException(e);, +            activeStreams.activate(this);, +            activeStreams.deactivate(this);, +        // Fields accessed by inner classes, +        int numActiveStreams;, +                throw connectionError(PROTOCOL_ERROR, "Request stream %d is not correct for %s connection", streamId,, +                        server ? "server" : "client");, +, +    /**, +     * Default implementation of the {@link ActiveStreams} class., +     */, +    private static final class ActiveStreams {, +        /**, +         * Allows events which would modify {@link #streams} to be queued while iterating over {@link #streams}., +         */, +        interface Event {, +            /**, +             * Trigger the original intention of this event. Expect to modify {@link #streams}., +             */, +            void process();, +        }, +, +        private final List<Listener> listeners;, +        private final Http2StreamRemovalPolicy removalPolicy;, +        private final Queue<Event> pendingEvents = new ArrayDeque<Event>(4);, +        private final Set<Http2Stream> streams = new LinkedHashSet<Http2Stream>();, +        private int pendingIterations;, +, +        public ActiveStreams(List<Listener> listeners, Http2StreamRemovalPolicy removalPolicy) {, +            this.listeners = listeners;, +            this.removalPolicy = removalPolicy;, +        }, +, +        public int size() {, +            return streams.size();, +        }, +, +        public void activate(final DefaultStream stream) {, +            if (allowModifications()) {, +                addToActiveStreams(stream);, +            } else {, +                pendingEvents.add(new Event() {, +                    @Override, +                    public void process() {, +                        addToActiveStreams(stream);, +                    }, +                });, +            }, +        }, +, +        public void deactivate(final DefaultStream stream) {, +            if (allowModifications()) {, +                removeFromActiveStreams(stream);, +            } else {, +                pendingEvents.add(new Event() {, +                    @Override, +                    public void process() {, +                        removeFromActiveStreams(stream);, +                    }, +                });, +            }, +        }, +, +        public Http2Stream forEachActiveStream(StreamVisitor visitor) throws Http2Exception {, +            ++pendingIterations;, +            Http2Stream resultStream = null;, +            try {]