[+++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *         use {@link io.netty.channel.socket.DatagramPacket#remoteAddress()} to determine, +        /**, +         * Send a {@link FileRegion} to the remote peer and notify the {@link ChannelFuture} once it completes, +         * or an error was detected. Once the {@link FileRegion} was transfered or an error was thrown it will, +         * automaticly closed via {@link io.netty.channel.FileRegion#close()}., +         */, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *         use {@link io.netty.channel.socket.DatagramPacket#remoteAddress()} to determine, +        /**, +         * Send a {@link FileRegion} to the remote peer and notify the {@link ChannelFuture} once it completes, +         * or an error was detected. Once the {@link FileRegion} was transfered or an error was thrown it will, +         * automaticly closed via {@link io.netty.channel.FileRegion#close()}., +         */, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundInvoker.java, +    /**, +     * Bind to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of an error., +     */, +, +    /**, +     * Connect to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of, +     * an error., +     */, +, +    /**, +     * Connect to the given {@link SocketAddress} while bind to the localAddress and notify the {@link ChannelFuture}, +     * once the operation completes, either because the operation was successful or because of, +     * an error., +     */, +, +    /**, +     * Discconect from the remote peer and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of, +     * an error., +     */, +, +    /**, +     * Close this ChannelOutboundInvoker and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of, +     * an error., +     *, +     * After it is closed it is not possible to reuse it again., +     */, +, +    /**, +     * Deregister this ChannelOutboundInvoker from the previous assigned {@link EventExecutor} and notify the, +     * {@link ChannelFuture} once the operation completes, either because the operation was successful or because of, +     * an error., +     *, +     */, +, +    /**, +     * Flush all pending data which belongs to this ChannelOutboundInvoker and notify the {@link ChannelFuture}, +     * once the operation completes, either because the operation was successful or because of an error., +     */, +, +    /**, +     * Write a message via this ChannelOutboundInvoker and notify the {@link ChannelFuture}, +     * once the operation completes, either because the operation was successful or because of an error., +     *, +     * If you want to write a {@link FileRegion} use {@link #sendFile(FileRegion)}, +     */, +, +    /**, +     * Send a {@link FileRegion} via this ChannelOutboundInvoker and notify the {@link ChannelFuture}, +     * once the operation completes, either because the operation was successful or because of an error., +     */, +    /**, +     * Bind to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of an error., +     *, +     * The given {@link ChannelFuture} will be notified and also returned., +     */, +, +    /**, +     * Connect to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of, +     * an error., +     *, +     * The given {@link ChannelFuture} will be notified and also returned., +     */, +, +    /**, +     * Connect to the given {@link SocketAddress} while bind to the localAddress and notify the {@link ChannelFuture}, +     * once the operation completes, either because the operation was successful or because of, +     * an error., +     *, +     * The given {@link ChannelFuture} will be notified and also returned., +     */, +, +    /**, +     * Discconect from the remote peer and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of, +     * an error., +     *, +     * The given {@link ChannelFuture} will be notified and also returned., +     */, +]