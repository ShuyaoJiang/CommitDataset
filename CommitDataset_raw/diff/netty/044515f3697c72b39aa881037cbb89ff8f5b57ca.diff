[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    // We don't create the stream in a `halfClosed` state because if this is an initial, +                    // HEADERS frame we don't want the connection state to signify that the HEADERS have, +                    // been sent until after they have been encoded and placed in the outbound buffer., +                    // Therefore, we let the `LifeCycleManager` will take care of transitioning the state, +                    // as appropriate., +                    stream = connection.local().createStream(streamId, /*endOfStream*/ false);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    // We don't create the stream in a `halfClosed` state because if this is an initial, +                    // HEADERS frame we don't want the connection state to signify that the HEADERS have, +                    // been sent until after they have been encoded and placed in the outbound buffer., +                    // Therefore, we let the `LifeCycleManager` will take care of transitioning the state, +                    // as appropriate., +                    stream = connection.local().createStream(streamId, /*endOfStream*/ false);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +    public void headersWriteShouldHalfCloseAfterOnErrorForPreCreatedStream() throws Exception {, +        Http2Stream stream = createStream(STREAM_ID, false);, +        assertFalse(stream.isHeadersSent());, +        InOrder inOrder = inOrder(lifecycleManager);, +        inOrder.verify(lifecycleManager).onError(eq(ctx), eq(true), eq(ex));, +        inOrder.verify(lifecycleManager).closeStreamLocal(eq(stream(STREAM_ID)), eq(promise));, +    }, +, +    @Test, +    public void headersWriteShouldHalfCloseAfterOnErrorForImplicitlyCreatedStream() throws Exception {, +        final ChannelPromise promise = newPromise();, +        final Throwable ex = new RuntimeException();, +        // Fake an encoding error, like HPACK's HeaderListSizeException, +        when(writer.writeHeaders(eq(ctx), eq(STREAM_ID), eq(EmptyHttp2Headers.INSTANCE), eq(0),, +            eq(DEFAULT_PRIORITY_WEIGHT), eq(false), eq(0), eq(true), eq(promise))), +            .thenAnswer(new Answer<ChannelFuture>() {, +                @Override, +                public ChannelFuture answer(InvocationOnMock invocation) {, +                    promise.setFailure(ex);, +                    return promise;, +                }, +            });, +, +        writeAllFlowControlledFrames();, +        encoder.writeHeaders(ctx, STREAM_ID, EmptyHttp2Headers.INSTANCE, 0, true, promise);, +, +        assertTrue(promise.isDone());, +        assertFalse(promise.isSuccess());, +        assertFalse(stream(STREAM_ID).isHeadersSent());]