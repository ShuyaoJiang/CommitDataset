[+++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +        final ClassLoader contextClassLoader = PlatformDependent.getContextClassLoader();, +        return PlatformDependent.getClassLoader(ClassResolvers.class);, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +        final ClassLoader contextClassLoader = PlatformDependent.getContextClassLoader();, +        return PlatformDependent.getClassLoader(ClassResolvers.class);, +++ b/common/src/main/java/io/netty/util/Version.java, +import io.netty.util.internal.PlatformDependent;, +, +            classLoader = PlatformDependent.getContextClassLoader();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +        final ClassLoader contextClassLoader = PlatformDependent.getContextClassLoader();, +        return PlatformDependent.getClassLoader(ClassResolvers.class);, +++ b/common/src/main/java/io/netty/util/Version.java, +import io.netty.util.internal.PlatformDependent;, +, +            classLoader = PlatformDependent.getContextClassLoader();, +++ b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java, +        ClassLoader classLoader = PlatformDependent.getContextClassLoader();, +            classLoader = PlatformDependent.getSystemClassLoader();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +        final ClassLoader contextClassLoader = PlatformDependent.getContextClassLoader();, +        return PlatformDependent.getClassLoader(ClassResolvers.class);, +++ b/common/src/main/java/io/netty/util/Version.java, +import io.netty.util.internal.PlatformDependent;, +, +            classLoader = PlatformDependent.getContextClassLoader();, +++ b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java, +        ClassLoader classLoader = PlatformDependent.getContextClassLoader();, +            classLoader = PlatformDependent.getSystemClassLoader();, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +    /**, +     * Return the {@link ClassLoader} for the given {@link Class}., +     */, +    public static ClassLoader getClassLoader(final Class<?> clazz) {, +        return PlatformDependent0.getClassLoader(clazz);, +    }, +, +    /**, +     * Return the context {@link ClassLoader} for the current {@link Thread}., +     */, +    public static ClassLoader getContextClassLoader() {, +        return PlatformDependent0.getContextClassLoader();, +    }, +, +    /**, +     * Return the system {@link ClassLoader}., +     */, +    public static ClassLoader getSystemClassLoader() {, +        return PlatformDependent0.getSystemClassLoader();, +    }, +, +            Class.forName("android.app.Application", false, getSystemClassLoader());, +                Class.forName("java.time.Clock", false, getClassLoader(Object.class));, +                Class.forName("java.util.concurrent.LinkedTransferQueue", false, getClassLoader(BlockingQueue.class));, +            Class<?> vmClass = Class.forName("sun.misc.VM", true, getSystemClassLoader());, +                    "java.lang.management.ManagementFactory", true, getSystemClassLoader());, +                    "java.lang.management.RuntimeMXBean", true, getSystemClassLoader());, +            JavassistTypeParameterMatcherGenerator.generate(Object.class, getClassLoader(PlatformDependent.class));, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +        final ClassLoader contextClassLoader = PlatformDependent.getContextClassLoader();, +        return PlatformDependent.getClassLoader(ClassResolvers.class);, +++ b/common/src/main/java/io/netty/util/Version.java, +import io.netty.util.internal.PlatformDependent;, +, +            classLoader = PlatformDependent.getContextClassLoader();, +++ b/common/src/main/java/io/netty/util/internal/JavassistTypeParameterMatcherGenerator.java, +        ClassLoader classLoader = PlatformDependent.getContextClassLoader();, +            classLoader = PlatformDependent.getSystemClassLoader();, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +    /**, +     * Return the {@link ClassLoader} for the given {@link Class}., +     */, +    public static ClassLoader getClassLoader(final Class<?> clazz) {, +        return PlatformDependent0.getClassLoader(clazz);, +    }, +, +    /**, +     * Return the context {@link ClassLoader} for the current {@link Thread}., +     */, +    public static ClassLoader getContextClassLoader() {, +        return PlatformDependent0.getContextClassLoader();, +    }, +, +    /**, +     * Return the system {@link ClassLoader}., +     */, +    public static ClassLoader getSystemClassLoader() {, +        return PlatformDependent0.getSystemClassLoader();, +    }, +, +            Class.forName("android.app.Application", false, getSystemClassLoader());, +                Class.forName("java.time.Clock", false, getClassLoader(Object.class));, +                Class.forName("java.util.concurrent.LinkedTransferQueue", false, getClassLoader(BlockingQueue.class));, +            Class<?> vmClass = Class.forName("sun.misc.VM", true, getSystemClassLoader());, +                    "java.lang.management.ManagementFactory", true, getSystemClassLoader());, +                    "java.lang.management.RuntimeMXBean", true, getSystemClassLoader());, +            JavassistTypeParameterMatcherGenerator.generate(Object.class, getClassLoader(PlatformDependent.class));, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +import java.security.AccessController;]