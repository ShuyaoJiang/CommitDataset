[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +                    return super.setSuccess(null);, +            if (awaitingPromises()) {, +            if (awaitingPromises()) {, +        private boolean awaitingPromises() {, +            if (awaitingPromises()) {, +            if (awaitingPromises()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +                    return super.setSuccess(null);, +            if (awaitingPromises()) {, +            if (awaitingPromises()) {, +        private boolean awaitingPromises() {, +            if (awaitingPromises()) {, +            if (awaitingPromises()) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2FrameIOTest.java, +, +import io.netty.channel.ChannelFutureListener;, +import org.junit.After;, +    private ByteBuf data;, +    private ChannelPromise aggregatePromise;, +, +    @Mock, +        data = dummyData();, +        when(ctx.newPromise()).thenReturn(promise);, +        when(promise.isDone()).thenReturn(true);, +        when(promise.isSuccess()).thenReturn(true);, +        doAnswer(new Answer<Void>() {, +            public Void answer(InvocationOnMock in) throws Throwable {, +                ChannelFutureListener l = (ChannelFutureListener) in.getArguments()[0];, +                l.operationComplete(promise);, +                return null;, +        }).when(promise).addListener(any(ChannelFutureListener.class));, +    @After, +    public void tearDown() {, +        buffer.release();, +        data.release();, +    }, +, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);, +        reader.readFrame(ctx, buffer, listener);]