[+++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +    private final int cleanerFlagIndex;, +, +        cleanerFlagIndex = InternalThreadLocalMap.nextVariableIndex();, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) ||, +            threadLocalMap.indexedVariable(cleanerFlagIndex) != InternalThreadLocalMap.UNSET) {, +            return;, +        }, +        // removeIndexedVariable(cleanerFlagIndex) isn't necessary because the finally cleanup is tied to the lifetime, +        // of the thread, and this Object will be discarded if the associated thread is GCed., +        threadLocalMap.setIndexedVariable(cleanerFlagIndex, Boolean.TRUE);, +, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +    private final int cleanerFlagIndex;, +, +        cleanerFlagIndex = InternalThreadLocalMap.nextVariableIndex();, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) ||, +            threadLocalMap.indexedVariable(cleanerFlagIndex) != InternalThreadLocalMap.UNSET) {, +            return;, +        }, +        // removeIndexedVariable(cleanerFlagIndex) isn't necessary because the finally cleanup is tied to the lifetime, +        // of the thread, and this Object will be discarded if the associated thread is GCed., +        threadLocalMap.setIndexedVariable(cleanerFlagIndex, Boolean.TRUE);, +, +++ b/common/src/main/java/io/netty/util/internal/ObjectCleaner.java, +    public static int getLiveSetCount() {, +        return LIVE_SET.size();, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +    private final int cleanerFlagIndex;, +, +        cleanerFlagIndex = InternalThreadLocalMap.nextVariableIndex();, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) ||, +            threadLocalMap.indexedVariable(cleanerFlagIndex) != InternalThreadLocalMap.UNSET) {, +            return;, +        }, +        // removeIndexedVariable(cleanerFlagIndex) isn't necessary because the finally cleanup is tied to the lifetime, +        // of the thread, and this Object will be discarded if the associated thread is GCed., +        threadLocalMap.setIndexedVariable(cleanerFlagIndex, Boolean.TRUE);, +, +++ b/common/src/main/java/io/netty/util/internal/ObjectCleaner.java, +    public static int getLiveSetCount() {, +        return LIVE_SET.size();, +    }, +, +++ b/common/src/test/java/io/netty/util/concurrent/FastThreadLocalTest.java, +import io.netty.util.internal.ObjectCleaner;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +        assertThat(FastThreadLocal.size(), is(2));, +    @Test, +    public void testMultipleSetRemove() throws Exception {, +        final FastThreadLocal<String> threadLocal = new FastThreadLocal<String>();, +        final Runnable runnable = new Runnable() {, +            @Override, +            public void run() {, +                threadLocal.set("1");, +                threadLocal.remove();, +                threadLocal.set("2");, +                threadLocal.remove();, +            }, +        };, +, +        final int sizeWhenStart = ObjectCleaner.getLiveSetCount();, +        Thread thread = new Thread(runnable);, +        thread.start();, +        thread.join();, +, +        assertEquals(1, ObjectCleaner.getLiveSetCount() - sizeWhenStart);, +, +        Thread thread2 = new Thread(runnable);, +        thread2.start();, +        thread2.join();, +, +        assertEquals(2, ObjectCleaner.getLiveSetCount() - sizeWhenStart);, +    }, +, +    @Test, +    public void testMultipleSetRemove_multipleThreadLocal() throws Exception {, +        final FastThreadLocal<String> threadLocal = new FastThreadLocal<String>();, +        final FastThreadLocal<String> threadLocal2 = new FastThreadLocal<String>();, +        final Runnable runnable = new Runnable() {, +            @Override, +            public void run() {, +                threadLocal.set("1");, +                threadLocal.remove();, +                threadLocal.set("2");, +                threadLocal.remove();, +                threadLocal2.set("1");, +                threadLocal2.remove();, +                threadLocal2.set("2");, +                threadLocal2.remove();, +            }, +        };, +, +        final int sizeWhenStart = ObjectCleaner.getLiveSetCount();, +        Thread thread = new Thread(runnable);, +        thread.start();, +        thread.join();]