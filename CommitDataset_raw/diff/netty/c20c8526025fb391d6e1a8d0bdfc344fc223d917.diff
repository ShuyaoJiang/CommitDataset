[+++ b/transport/src/main/java/io/netty/channel/ChannelDuplexHandler.java, +    /**, +     * Calls {@link ChannelHandlerContext#read()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#write(Object, ChannelPromise)} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#flush()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelDuplexHandler.java, +    /**, +     * Calls {@link ChannelHandlerContext#read()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#write(Object, ChannelPromise)} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#flush()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPromiseAggregator.java, +, +    /**, +     * Instance an new {@link ChannelPromiseAggregator}, +     *, +     * @param aggregatePromise  the {@link ChannelPromise} to notify, +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelDuplexHandler.java, +    /**, +     * Calls {@link ChannelHandlerContext#read()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#write(Object, ChannelPromise)} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#flush()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPromiseAggregator.java, +, +    /**, +     * Instance an new {@link ChannelPromiseAggregator}, +     *, +     * @param aggregatePromise  the {@link ChannelPromise} to notify, +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPromiseNotifier.java, +    /**, +     * Create a new instance, +     *, +     * @param promises  the {@link ChannelPromise}s to notify once this {@link ChannelFutureListener} is notified., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelDuplexHandler.java, +    /**, +     * Calls {@link ChannelHandlerContext#read()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#write(Object, ChannelPromise)} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    /**, +     * Calls {@link ChannelHandlerContext#flush()} to forward, +     * to the next {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPromiseAggregator.java, +, +    /**, +     * Instance an new {@link ChannelPromiseAggregator}]