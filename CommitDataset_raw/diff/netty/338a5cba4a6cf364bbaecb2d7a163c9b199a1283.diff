[+++ b/src/main/java/org/jboss/netty/handler/codec/frame/FrameDecoder.java, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.handler.codec.replay.ReplayingDecoder;, + * <h3>Replacing a decoder with another decoder in a pipeline</h3>, + * <p>, + * If you are going to write a protocol multiplexer, you will probably want to, + * replace a {@link FrameDecoder} (protocol detector) with another, + * {@link FrameDecoder} or {@link ReplayingDecoder} (actual protocol decoder)., + * It is not possible to achieve this simply by calling, + * {@link ChannelPipeline#replace(ChannelHandler, String, ChannelHandler)}, but, + * some additional steps are required:, + * <pre>, + * public class FirstDecoder extends FrameDecoder {, + *, + *     public FirstDecoder() {, + *         super(true); // Enable unfold, + *     }, + *, + *     protected Object decode(ChannelHandlerContext ctx, Channel ch, ChannelBuffer buf) {, + *         ..., + *         // Decode the first message, + *         Object firstMessage = ...;, + *, + *         // Add the second decoder, + *         ctx.getPipeline().addLast("second", new SecondDecoder());, + *, + *         // Remove the first decoder (me), + *         ctx.getPipeline().remove(this);, + *, + *         if (buf.readable()) {, + *             // Hand off the remaining data to the second decoder, + *             return new Object[] { firstMessage, buf.readBytes(buf.readableBytes()) };, + *         } else {, + *             // Nothing to hand off, + *             return firstMessage;, + *         }, + *     }, + * }, + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/codec/frame/FrameDecoder.java, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.handler.codec.replay.ReplayingDecoder;, + * <h3>Replacing a decoder with another decoder in a pipeline</h3>, + * <p>, + * If you are going to write a protocol multiplexer, you will probably want to, + * replace a {@link FrameDecoder} (protocol detector) with another, + * {@link FrameDecoder} or {@link ReplayingDecoder} (actual protocol decoder)., + * It is not possible to achieve this simply by calling, + * {@link ChannelPipeline#replace(ChannelHandler, String, ChannelHandler)}, but, + * some additional steps are required:, + * <pre>, + * public class FirstDecoder extends FrameDecoder {, + *, + *     public FirstDecoder() {, + *         super(true); // Enable unfold, + *     }, + *, + *     protected Object decode(ChannelHandlerContext ctx, Channel ch, ChannelBuffer buf) {, + *         ..., + *         // Decode the first message, + *         Object firstMessage = ...;, + *, + *         // Add the second decoder, + *         ctx.getPipeline().addLast("second", new SecondDecoder());, + *, + *         // Remove the first decoder (me), + *         ctx.getPipeline().remove(this);, + *, + *         if (buf.readable()) {, + *             // Hand off the remaining data to the second decoder, + *             return new Object[] { firstMessage, buf.readBytes(buf.readableBytes()) };, + *         } else {, + *             // Nothing to hand off, + *             return firstMessage;, + *         }, + *     }, + * }, + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoder.java, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelPipeline;, + * <h3>Replacing a decoder with another decoder in a pipeline</h3>, + * <p>, + * If you are going to write a protocol multiplexer, you will probably want to, + * replace a {@link ReplayingDecoder} (protocol detector) with another, + * {@link ReplayingDecoder} or {@link FrameDecoder} (actual protocol decoder)., + * It is not possible to achieve this simply by calling, + * {@link ChannelPipeline#replace(ChannelHandler, String, ChannelHandler)}, but, + * some additional steps are required:, + * <pre>, + * public class FirstDecoder extends ReplayingDecoder&lt;VoidEnum&gt; {, + *, + *     public FirstDecoder() {, + *         super(true); // Enable unfold, + *     }, + *]