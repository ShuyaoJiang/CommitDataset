[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Internal use only: Exposes the internal NIO buffer., +     */, +    ByteBuffer internalNioBuffer(int index, int length);, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Internal use only: Exposes the internal NIO buffer., +     */, +    ByteBuffer internalNioBuffer(int index, int length);, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +    public ByteBuffer internalNioBuffer(int index, int length) {, +            return components.get(0).buf.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Internal use only: Exposes the internal NIO buffer., +     */, +    ByteBuffer internalNioBuffer(int index, int length);, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +    public ByteBuffer internalNioBuffer(int index, int length) {, +            return components.get(0).buf.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +    public ByteBuffer[] nioBuffers(int index, int length) {, +        return buffer.nioBuffers(index, length);, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return buffer.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Internal use only: Exposes the internal NIO buffer., +     */, +    ByteBuffer internalNioBuffer(int index, int length);, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +    public ByteBuffer internalNioBuffer(int index, int length) {, +            return components.get(0).buf.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +    public ByteBuffer[] nioBuffers(int index, int length) {, +        return buffer.nioBuffers(index, length);, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return buffer.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return EMPTY_BYTE_BUFFER;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        return internalNioBuffer(index, length).slice();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Internal use only: Exposes the internal NIO buffer., +     */, +    ByteBuffer internalNioBuffer(int index, int length);, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +    public ByteBuffer internalNioBuffer(int index, int length) {, +            return components.get(0).buf.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +    public ByteBuffer[] nioBuffers(int index, int length) {, +        return buffer.nioBuffers(index, length);, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return buffer.internalNioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java]