[+++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.buffer.ByteBufHolder;, +     * condition. The same is true for {@link ByteBufHolder}. Please note that this operation is asynchronous as, +     * Writes the specified {@code message} to all {@link Channel}s in this, +     * group that match the given {@link ChannelGroupMatcher}. If the specified {@code message} is an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. The same is true for {@link ByteBufHolder}. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture write(Object message, ChannelGroupMatcher matcher);, +, +    /**, +     * group. If the specified {@code messages} are an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     * Flush all {@link Channel}s in this group that match the given {@link ChannelGroupMatcher}., +     * If the specified {@code messages} are an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroup flush(ChannelGroupMatcher matcher);, +, +    /**, +     * Shortcut for calling {@link #write(Object)} and {@link #flush()} and only act on, +     * {@link Channel}s that match the {@link ChannelGroupMatcher}., +     */, +    ChannelGroupFuture flushAndWrite(Object message, ChannelGroupMatcher matcher);, +, +    /**, +     * Disconnects all {@link Channel}s in this group from their remote peers,, +     * that match the given {@link ChannelGroupMatcher}., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture disconnect(ChannelGroupMatcher matcher);, +, +    /**, +     * Closes all {@link Channel}s in this group that match the given {@link ChannelGroupMatcher}., +     * If the {@link Channel} is  connected to a remote peer or bound to a local address, it is, +     * automatically disconnected and unbound., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture close(ChannelGroupMatcher matcher);, +, +    /**, +, +    /**, +     * Deregister all {@link Channel}s in this group from their {@link EventLoop} that match the given, +     * {@link ChannelGroupMatcher}. Please note that this operation is asynchronous as {@link Channel#deregister()} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture deregister(ChannelGroupMatcher matcher);, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.buffer.ByteBufHolder;, +     * condition. The same is true for {@link ByteBufHolder}. Please note that this operation is asynchronous as, +     * Writes the specified {@code message} to all {@link Channel}s in this, +     * group that match the given {@link ChannelGroupMatcher}. If the specified {@code message} is an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. The same is true for {@link ByteBufHolder}. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture write(Object message, ChannelGroupMatcher matcher);, +, +    /**, +     * group. If the specified {@code messages} are an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     * Flush all {@link Channel}s in this group that match the given {@link ChannelGroupMatcher}., +     * If the specified {@code messages} are an instance of, +     * {@link ByteBuf}, it is automatically, +     * {@linkplain ByteBuf#duplicate() duplicated} to avoid a race, +     * condition. Please note that this operation is asynchronous as, +     * {@link Channel#write(Object)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroup flush(ChannelGroupMatcher matcher);]