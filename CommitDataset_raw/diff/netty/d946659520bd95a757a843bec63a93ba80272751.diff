[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar());, +        boolean release = true;, +        final ByteBuf dst = alloc.buffer(length);, +            final ByteBuffer dstBuf = dst.internalNioBuffer(0, length);, +            final int pos = dstBuf.position();, +            CoderResult cr = encoder.encode(src, dstBuf, true);, +            cr = encoder.flush(dstBuf);, +            dst.writerIndex(dst.writerIndex() + (dstBuf.position() - pos));, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar());, +        boolean release = true;, +        final ByteBuf dst = alloc.buffer(length);, +            final ByteBuffer dstBuf = dst.internalNioBuffer(0, length);, +            final int pos = dstBuf.position();, +            CoderResult cr = encoder.encode(src, dstBuf, true);, +            cr = encoder.flush(dstBuf);, +            dst.writerIndex(dst.writerIndex() + (dstBuf.position() - pos));, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        return ByteBufUtil.encodeString(ALLOC, buffer, charset);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar());, +        boolean release = true;, +        final ByteBuf dst = alloc.buffer(length);, +            final ByteBuffer dstBuf = dst.internalNioBuffer(0, length);, +            final int pos = dstBuf.position();, +            CoderResult cr = encoder.encode(src, dstBuf, true);, +            cr = encoder.flush(dstBuf);, +            dst.writerIndex(dst.writerIndex() + (dstBuf.position() - pos));, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        return ByteBufUtil.encodeString(ALLOC, buffer, charset);, +++ b/codec/src/main/java/io/netty/handler/codec/string/StringEncoder.java, +import io.netty.buffer.ByteBufUtil;, +import java.nio.CharBuffer;, +        out.add(ByteBufUtil.encodeString(ctx.alloc(), CharBuffer.wrap(msg), charset));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar());, +        boolean release = true;, +        final ByteBuf dst = alloc.buffer(length);, +            final ByteBuffer dstBuf = dst.internalNioBuffer(0, length);, +            final int pos = dstBuf.position();, +            CoderResult cr = encoder.encode(src, dstBuf, true);, +            cr = encoder.flush(dstBuf);, +            dst.writerIndex(dst.writerIndex() + (dstBuf.position() - pos));, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        return ByteBufUtil.encodeString(ALLOC, buffer, charset);, +++ b/codec/src/main/java/io/netty/handler/codec/string/StringEncoder.java, +import io.netty.buffer.ByteBufUtil;, +import java.nio.CharBuffer;, +        out.add(ByteBufUtil.encodeString(ctx.alloc(), CharBuffer.wrap(msg), charset));, +++ b/codec/src/test/java/io/netty/handler/codec/string/StringEncoderTest.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance]