[+++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +     * memory!</p>, +     * <p><b>Beware</b>: the underlying generated {@link SSLEngine} won't have, +     * <a href="https://wiki.openssl.org/index.php/Hostname_validation">hostname verification</a> enabled by default., +     * If you create {@link SslHandler} for the client side and want proper security, we advice that you configure, +     * the {@link SSLEngine} (see {@link javax.net.ssl.SSLParameters#setEndpointIdentificationAlgorithm(String)}):</p>, +     * <pre>, +     * SSLEngine sslEngine = sslHandler.engine();, +     * SSLParameters sslParameters = sslEngine.getSSLParameters();, +     * // only available since Java 7, +     * sslParameters.setEndpointIdentificationAlgorithm("HTTPS");, +     * sslEngine.setSSLParameters(sslParameters);, +     * </pre>, +     *, +     * @param alloc If supported by the SSLEngine then the SSLEngine will use this to allocate ByteBuf objects., +     *, +     * memory!</p>, +     * <p><b>Beware</b>: the underlying generated {@link SSLEngine} won't have, +     * <a href="https://wiki.openssl.org/index.php/Hostname_validation">hostname verification</a> enabled by default., +     * If you create {@link SslHandler} for the client side and want proper security, we advice that you configure, +     * the {@link SSLEngine} (see {@link javax.net.ssl.SSLParameters#setEndpointIdentificationAlgorithm(String)}):</p>, +     * <pre>, +     * SSLEngine sslEngine = sslHandler.engine();, +     * SSLParameters sslParameters = sslEngine.getSSLParameters();, +     * // only available since Java 7, +     * sslParameters.setEndpointIdentificationAlgorithm("HTTPS");, +     * sslEngine.setSSLParameters(sslParameters);, +     * </pre>, +     *, +     * @param alloc If supported by the SSLEngine then the SSLEngine will use this to allocate ByteBuf objects.]