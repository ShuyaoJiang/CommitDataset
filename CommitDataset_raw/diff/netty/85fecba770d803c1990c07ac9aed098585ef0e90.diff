[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +            currentBuffer.retain();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +            currentBuffer.retain();, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoderTest.java, +import io.netty.buffer.SlicedByteBuf;, +import io.netty.handler.codec.http.HttpContent;, +import java.util.Arrays;, +    @Test, +    public void testHttpPostRequestEncoderSlicedBuffer() throws Exception {, +        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                HttpMethod.POST, "http://localhost");, +, +        HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(request, true);, +        // add Form attribute, +        encoder.addBodyAttribute("getform", "POST");, +        encoder.addBodyAttribute("info", "first value");, +        encoder.addBodyAttribute("secondinfo", "secondvalue a&");, +        encoder.addBodyAttribute("thirdinfo", "short text");, +        int length = 100000;, +        char[] array = new char[length];, +        Arrays.fill(array, 'a');, +        String longText = new String(array);, +        encoder.addBodyAttribute("fourthinfo", longText.substring(0, 7470));, +        File file1 = new File(getClass().getResource("/file-01.txt").toURI());, +        encoder.addBodyFileUpload("myfile", file1, "application/x-zip-compressed", false);, +        encoder.finalizeRequest();, +        while (! encoder.isEndOfInput()) {, +            HttpContent httpContent = encoder.readChunk(null);, +            if (httpContent.content() instanceof SlicedByteBuf) {, +                assertEquals(2, httpContent.content().refCnt());, +            } else {, +                assertEquals(1, httpContent.content().refCnt());, +            }, +            httpContent.release();, +        }, +        encoder.cleanFiles();, +        encoder.close();, +    }, +]