[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +    private static final int DEFAULT_NUM_HEAP_ARENA = Math.max(0, SystemPropertyUtil.getInt(, +    private static final int DEFAULT_NUM_DIRECT_ARENA = Math.max(0, SystemPropertyUtil.getInt(, +    private final UnpooledByteBufAllocator unpooledAllocator;, +            final int idx = index.getAndIncrement();, +            final PoolArena<byte[]> heapArena;, +            final PoolArena<ByteBuffer> directArena;, +, +            if (heapArenas != null) {, +                heapArena = heapArenas[Math.abs(idx % heapArenas.length)];, +            } else {, +                heapArena = null;, +            }, +, +            if (directArenas != null) {, +                directArena = directArenas[Math.abs(idx % directArenas.length)];, +            } else {, +                directArena = null;, +            }, +, +            return new PoolThreadCache(heapArena, directArena);, +    public PooledByteBufAllocator(boolean preferDirect, int nHeapArena, int nDirectArena, int pageSize, int maxOrder) {, +        super(preferDirect);, +        if (nHeapArena < 0) {, +            throw new IllegalArgumentException("nHeapArena: " + nHeapArena + " (expected: >= 0)");, +        if (nDirectArena < 0) {, +            throw new IllegalArgumentException("nDirectArea: " + nDirectArena + " (expected: >= 0)");, +        if (nHeapArena > 0) {, +        } else {, +            heapArenas = null;, +        }, +        if (nHeapArena > 0) {, +        } else {, +            directArenas = null;, +        }, +, +        unpooledAllocator = new UnpooledByteBufAllocator(preferDirect);, +        PoolArena<byte[]> heapArena = cache.heapArena;, +        if (heapArena != null) {, +            return heapArena.allocate(cache, initialCapacity, maxCapacity);, +        } else {, +            return unpooledAllocator.newDirectBuffer(initialCapacity, maxCapacity);, +        }, +        PoolArena<ByteBuffer> directArena = cache.directArena;, +        if (directArena != null) {, +            return directArena.allocate(cache, initialCapacity, maxCapacity);, +        } else {, +            return unpooledAllocator.newDirectBuffer(initialCapacity, maxCapacity);, +        }]