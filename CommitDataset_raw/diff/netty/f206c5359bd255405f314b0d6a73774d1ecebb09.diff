[+++ b/src/docbook/custom.dtd, +<!ENTITY ChannelPipelineFactory   "<ulink url='&API;channel/ChannelPipelineFactory.html'><interfacename>ChannelPipelineFactory</interfacename></ulink>">, +<!ENTITY ServerSocketChannel  "<ulink url='&API;channel/socket/ServerSocketChannel.html'><interfacename>ServerSocketChannel</interfacename></ulink>">, +<!ENTITY SocketChannel        "<ulink url='&API;channel/socket/SocketChannel.html'><interfacename>SocketChannel</interfacename></ulink>">, +<!ENTITY NioClientSocketChannelFactory  "<ulink url='&API;channel/socket/nio/NioClientSocketChannelFactory.html'><classname>NioClientSocketChannelFactory</classname></ulink>">, +, +<!-- Types in the handler.codec.frame package -->, +, +<!ENTITY FrameDecoder  "<ulink url='&API;handler/codec/frame/FrameDecoder.html'><classname>FrameDecoder</classname></ulink>">, +, +<!-- Types in the handler.codec.replay package -->, +, +<!ENTITY ReplayingDecoder  "<ulink url='&API;handler/codec/replay/ReplayingDecoder.html'><classname>ReplayingDecoder</classname></ulink>">, +<!ENTITY VoidEnum          "<ulink url='&API;handler/codec/replay/VoidEnum.html'><classname>VoidEnum</classname></ulink>">, +, +, +++ b/src/docbook/custom.dtd, +<!ENTITY ChannelPipelineFactory   "<ulink url='&API;channel/ChannelPipelineFactory.html'><interfacename>ChannelPipelineFactory</interfacename></ulink>">, +<!ENTITY ServerSocketChannel  "<ulink url='&API;channel/socket/ServerSocketChannel.html'><interfacename>ServerSocketChannel</interfacename></ulink>">, +<!ENTITY SocketChannel        "<ulink url='&API;channel/socket/SocketChannel.html'><interfacename>SocketChannel</interfacename></ulink>">, +<!ENTITY NioClientSocketChannelFactory  "<ulink url='&API;channel/socket/nio/NioClientSocketChannelFactory.html'><classname>NioClientSocketChannelFactory</classname></ulink>">, +, +<!-- Types in the handler.codec.frame package -->, +, +<!ENTITY FrameDecoder  "<ulink url='&API;handler/codec/frame/FrameDecoder.html'><classname>FrameDecoder</classname></ulink>">, +, +<!-- Types in the handler.codec.replay package -->, +, +<!ENTITY ReplayingDecoder  "<ulink url='&API;handler/codec/replay/ReplayingDecoder.html'><classname>ReplayingDecoder</classname></ulink>">, +<!ENTITY VoidEnum          "<ulink url='&API;handler/codec/replay/VoidEnum.html'><classname>VoidEnum</classname></ulink>">, +, +, +++ b/src/docbook/module/start.xml, +    examples to let you get started with Netty easily.  You will be able to, +  , +  <!-- The chapter 2 is not written yet. -->, +  <!--para>, +  </para-->, +    <title>Before Getting Started</title>, +      project community</ulink> and let us know what's missing., +    </para>, +    <para>, +      At last but least, please refer to the API reference whenever you want, +      to know more about the classes introduced here.  All class names in, +      this document are linked to the online API reference for your, +      convenience.  Also, please feel free to <ulink url="&Community;">contact, +      the Netty project community</ulink> and let us know if there's any, +      incorrect information, errors in grammar and typo, and if you have a, +      good idea to improve the documentation. , +      Now that we wrote our first server, we need to test if it really works., +          it is highly recommended to refer to the API reference.  Learning how, +          to use &ChannelBuffer; correctly is a critical step in using Netty, +          without difficulty.  , +      The protocol to implement in this section is the <ulink url="">TIME</ulink>, +        e.getChannel().close();, +          <programlisting>import static org.jboss.netty.buffer.&ChannelBuffers;.*;, +&ChannelBuffer;  dynamicBuf = dynamicBuffer(256);, +&ChannelBuffer; ordinaryBuf = buffer(1024);</programlisting>, +          I/O operation which was not occurred yet.  It means, any requested, +          <methodname>write</methodname> method, notifies you when the write, +          operation has been done.  Also, <methodname>close</methodname>, +          might not close the connection immediately, and it returns a, +          &ChannelFuture;., +          Alternatively, you could simplify the code using a pre-defined, +          listener:, +  , +  <section>, +    <title>Writing a Time Client</title>, +    <para>, +      Unlike DISCARD and ECHO servers, we need a client for the TIME protocol, +      because a human can't translate a 32-bit binary data into a date on a, +      calendar.  Let's make sure the server works correctly and learn how to, +      write a client with Netty., +    </para>, +    <para>, +      The biggest and only difference between a server and a client in Netty, +      is that different &Bootstrap; and &ChannelFactory; are required.  Please, +      take a look at the following code:, +    </para>, +    <programlisting>package org.jboss.netty.example.time;, +, +import java.net.InetSocketAddress;, +import java.util.concurrent.Executors;, +, +public class TimeClient {, +, +    public static void main(String[] args) throws Exception {, +        String host = args[0];, +        int port = Integer.parseInt(args[1]);, +, +        &ChannelFactory; factory =, +            new &NioClientSocketChannelFactory;<co id="example.time2.co1"/>(, +                    Executors.newCachedThreadPool(),, +                    Executors.newCachedThreadPool());, +, +        &ClientBootstrap; bootstrap = new &ClientBootstrap;<co id="example.time2.co2"/>(factory);, +, +        TimeClientHandler handler = new TimeClientHandler();, +        bootstrap.getPipeline().addLast("handler", handler);, +        ]