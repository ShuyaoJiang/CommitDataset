[+++ b/codec/src/main/java/io/netty/handler/codec/LineBasedFrameDecoder.java, +    private int discardedBytes;, +        if (!discarding) {, +            if (eol >= 0) {, +                final int delimLength = buffer.getByte(eol) == '\r'? 2 : 1;, +, +                if (length > maxLength) {, +                    buffer.readerIndex(eol + delimLength);, +                    fail(ctx, length);, +                    return null;, +, +                return frame;, +            } else {, +                final int length = buffer.readableBytes();, +                if (length > maxLength) {, +                    discardedBytes = length;, +                    buffer.readerIndex(buffer.writerIndex());, +                        fail(ctx, "over " + discardedBytes);, +        } else {, +            if (eol >= 0) {, +                final int length = discardedBytes + eol - buffer.readerIndex();, +                final int delimLength = buffer.getByte(eol) == '\r'? 2 : 1;, +                buffer.readerIndex(eol + delimLength);, +                discardedBytes = 0;, +                discarding = false;, +                if (!failFast) {, +                    fail(ctx, length);, +                }, +            } else {, +                discardedBytes = buffer.readableBytes();, +                buffer.readerIndex(buffer.writerIndex());, +            }, +            return null;, +        }, +    }, +    private void fail(final ChannelHandlerContext ctx, int length) {, +        fail(ctx, String.valueOf(length));, +    }, +, +    private void fail(final ChannelHandlerContext ctx, String length) {, +        ctx.fireExceptionCaught(, +                new TooLongFrameException(, +                        "frame length (" + length + ") exceeds the allowed maximum (" + maxLength + ')'));, +++ b/codec/src/main/java/io/netty/handler/codec/LineBasedFrameDecoder.java, +    private int discardedBytes;, +        if (!discarding) {, +            if (eol >= 0) {, +                final int delimLength = buffer.getByte(eol) == '\r'? 2 : 1;, +, +                if (length > maxLength) {, +                    buffer.readerIndex(eol + delimLength);, +                    fail(ctx, length);, +                    return null;, +, +                return frame;, +            } else {, +                final int length = buffer.readableBytes();, +                if (length > maxLength) {, +                    discardedBytes = length;, +                    buffer.readerIndex(buffer.writerIndex());, +                        fail(ctx, "over " + discardedBytes);, +        } else {, +            if (eol >= 0) {, +                final int length = discardedBytes + eol - buffer.readerIndex();, +                final int delimLength = buffer.getByte(eol) == '\r'? 2 : 1;, +                buffer.readerIndex(eol + delimLength);, +                discardedBytes = 0;, +                discarding = false;, +                if (!failFast) {, +                    fail(ctx, length);, +                }, +            } else {, +                discardedBytes = buffer.readableBytes();, +                buffer.readerIndex(buffer.writerIndex());, +            }, +            return null;, +        }, +    }, +    private void fail(final ChannelHandlerContext ctx, int length) {, +        fail(ctx, String.valueOf(length));, +    }, +, +    private void fail(final ChannelHandlerContext ctx, String length) {, +        ctx.fireExceptionCaught(, +                new TooLongFrameException(, +                        "frame length (" + length + ") exceeds the allowed maximum (" + maxLength + ')'));, +++ b/codec/src/test/java/io/netty/handler/codec/LineBasedFrameDecoderTest.java, +import static io.netty.buffer.Unpooled.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +        ch.writeInbound(copiedBuffer("first\r\nsecond\nthird", CharsetUtil.US_ASCII));, +        assertEquals("first", ((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));, +        assertEquals("second", ((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));, +        assertNull(ch.readInbound());, +, +        ch.writeInbound(copiedBuffer("first\r\nsecond\nthird", CharsetUtil.US_ASCII));, +        assertEquals("first\r\n", ((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));, +        assertEquals("second\n", ((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));, +        assertNull(ch.readInbound());]