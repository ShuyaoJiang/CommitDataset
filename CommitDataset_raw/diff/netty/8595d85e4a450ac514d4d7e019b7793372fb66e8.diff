[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, +            , +            // Check if the buffer is readable first as we use the readable byte count, +            // to create the HttpChunk. This is needed as otherwise we may end up with, +            // create a HttpChunk instance that contains an empty buffer and so is, +            // handled like it is the last HttpChunk., +            //, +            // See https://github.com/netty/netty/issues/433, +            if (readLimit == 0) {, +                return null;, +            }, +, +, +            // Check if the buffer is readable first as we use the readable byte count, +            // to create the HttpChunk. This is needed as otherwise we may end up with, +            // create a HttpChunk instance that contains an empty buffer and so is, +            // handled like it is the last HttpChunk., +            //, +            // See https://github.com/netty/netty/issues/433, +            if (readLimit == 0) {, +                return null;, +            }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageDecoder.java, +            , +            // Check if the buffer is readable first as we use the readable byte count, +            // to create the HttpChunk. This is needed as otherwise we may end up with, +            // create a HttpChunk instance that contains an empty buffer and so is, +            // handled like it is the last HttpChunk., +            //, +            // See https://github.com/netty/netty/issues/433, +            if (readLimit == 0) {, +                return null;, +            }, +, +, +            // Check if the buffer is readable first as we use the readable byte count, +            // to create the HttpChunk. This is needed as otherwise we may end up with, +            // create a HttpChunk instance that contains an empty buffer and so is, +            // handled like it is the last HttpChunk., +            //, +            // See https://github.com/netty/netty/issues/433, +            if (readLimit == 0) {, +                return null;, +            }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpServerCodecTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.embedded.EmbeddedByteChannel;, +import io.netty.util.CharsetUtil;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +public class HttpServerCodecTest {, +    , +    /**, +     * Testcase for https://github.com/netty/netty/issues/433, +     */, +    @Test, +    public void testUnfinishedChunkedHttpRequestIsLastFlag() throws Exception {, +, +        int maxChunkSize = 2000;, +        HttpServerCodec httpServerCodec = new HttpServerCodec(1000, 1000, maxChunkSize);, +        EmbeddedByteChannel decoderEmbedder = new EmbeddedByteChannel(httpServerCodec);, +, +        int totalContentLength = maxChunkSize * 5;, +        decoderEmbedder.writeInbound(Unpooled.copiedBuffer("PUT /test HTTP/1.1\r\n" +, +                "Content-Length: " + totalContentLength + "\r\n" +, +                "\r\n", CharsetUtil.UTF_8));, +, +        int offeredContentLength = (int) (maxChunkSize * 2.5);, +        decoderEmbedder.writeInbound(prepareDataChunk(offeredContentLength));, +        decoderEmbedder.finish();, +, +        HttpMessage httpMessage = (HttpMessage) decoderEmbedder.readInbound();, +        Assert.assertTrue(httpMessage.isChunked());, +, +, +        boolean empty = true;, +        int totalBytesPolled = 0;, +        for (;;) {]