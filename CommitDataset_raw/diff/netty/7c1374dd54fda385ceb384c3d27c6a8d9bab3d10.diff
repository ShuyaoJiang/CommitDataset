[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import java.util.Arrays;, +import java.util.HashSet;, +    static final Set<String> AVAILABLE_CIPHER_SUITES;, +    private static final Set<String> AVAILABLE_OPENSSL_CIPHER_SUITES;, +    private static final Set<String> AVAILABLE_JAVA_CIPHER_SUITES;, +, +    // Protocols, +    static final String PROTOCOL_SSL_V2_HELLO = "SSLv2Hello";, +    static final String PROTOCOL_SSL_V2 = "SSLv2";, +    static final String PROTOCOL_SSL_V3 = "SSLv3";, +    static final String PROTOCOL_TLS_V1 = "TLSv1";, +    static final String PROTOCOL_TLS_V1_1 = "TLSv1.1";, +    static final String PROTOCOL_TLS_V1_2 = "TLSv1.2";, +, +    private static final String[] SUPPORTED_PROTOCOLS = {, +            PROTOCOL_SSL_V2_HELLO,, +            PROTOCOL_SSL_V2,, +            PROTOCOL_SSL_V3,, +            PROTOCOL_TLS_V1,, +            PROTOCOL_TLS_V1_1,, +            PROTOCOL_TLS_V1_2, +    };, +    static final Set<String> SUPPORTED_PROTOCOLS_SET = Collections.unmodifiableSet(, +            new HashSet<String>(Arrays.asList(SUPPORTED_PROTOCOLS)));, +            final Set<String> availableOpenSslCipherSuites = new LinkedHashSet<String>(128);, +                            if (c == null || c.length() == 0 || availableOpenSslCipherSuites.contains(c)) {, +                            availableOpenSslCipherSuites.add(c);, +            AVAILABLE_OPENSSL_CIPHER_SUITES = Collections.unmodifiableSet(availableOpenSslCipherSuites);, +            final Set<String> availableJavaCipherSuites = new LinkedHashSet<String>(, +                    AVAILABLE_OPENSSL_CIPHER_SUITES.size() * 2);, +            for (String cipher: AVAILABLE_OPENSSL_CIPHER_SUITES) {, +                // Included converted but also openssl cipher name, +                availableJavaCipherSuites.add(CipherSuiteConverter.toJava(cipher, "TLS"));, +                availableJavaCipherSuites.add(CipherSuiteConverter.toJava(cipher, "SSL"));, +            }, +            AVAILABLE_JAVA_CIPHER_SUITES = Collections.unmodifiableSet(availableJavaCipherSuites);, +, +            final Set<String> availableCipherSuites = new LinkedHashSet<String>(, +                    AVAILABLE_OPENSSL_CIPHER_SUITES.size() + AVAILABLE_JAVA_CIPHER_SUITES.size());, +            for (String cipher: AVAILABLE_OPENSSL_CIPHER_SUITES) {, +                availableCipherSuites.add(cipher);, +            }, +            for (String cipher: AVAILABLE_JAVA_CIPHER_SUITES) {, +                availableCipherSuites.add(cipher);, +            }, +            AVAILABLE_CIPHER_SUITES = availableCipherSuites;, +            AVAILABLE_OPENSSL_CIPHER_SUITES = Collections.emptySet();, +            AVAILABLE_JAVA_CIPHER_SUITES = Collections.emptySet();, +     * @deprecated use {@link #availableOpenSslCipherSuites()}, +     */, +    @Deprecated, +    public static Set<String> availableCipherSuites() {, +        return availableOpenSslCipherSuites();, +    }, +, +    /**, +    public static Set<String> availableOpenSslCipherSuites() {, +        return AVAILABLE_OPENSSL_CIPHER_SUITES;, +    }, +, +    /**, +     * Returns all the available cipher suites (Java-style)., +     * Please note that the returned array may include the cipher suites that are insecure or non-functional., +     */, +    public static Set<String> availableJavaCipherSuites() {, +        return AVAILABLE_JAVA_CIPHER_SUITES;, +        return AVAILABLE_OPENSSL_CIPHER_SUITES.contains(cipherSuite);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import java.util.Arrays;, +import java.util.HashSet;, +    static final Set<String> AVAILABLE_CIPHER_SUITES;, +    private static final Set<String> AVAILABLE_OPENSSL_CIPHER_SUITES;, +    private static final Set<String> AVAILABLE_JAVA_CIPHER_SUITES;, +, +    // Protocols, +    static final String PROTOCOL_SSL_V2_HELLO = "SSLv2Hello";, +    static final String PROTOCOL_SSL_V2 = "SSLv2";, +    static final String PROTOCOL_SSL_V3 = "SSLv3";, +    static final String PROTOCOL_TLS_V1 = "TLSv1";, +    static final String PROTOCOL_TLS_V1_1 = "TLSv1.1";, +    static final String PROTOCOL_TLS_V1_2 = "TLSv1.2";, +, +    private static final String[] SUPPORTED_PROTOCOLS = {, +            PROTOCOL_SSL_V2_HELLO,, +            PROTOCOL_SSL_V2,, +            PROTOCOL_SSL_V3,, +            PROTOCOL_TLS_V1,, +            PROTOCOL_TLS_V1_1,, +            PROTOCOL_TLS_V1_2, +    };, +    static final Set<String> SUPPORTED_PROTOCOLS_SET = Collections.unmodifiableSet(, +            new HashSet<String>(Arrays.asList(SUPPORTED_PROTOCOLS)));, +            final Set<String> availableOpenSslCipherSuites = new LinkedHashSet<String>(128);, +                            if (c == null || c.length() == 0 || availableOpenSslCipherSuites.contains(c)) {, +                            availableOpenSslCipherSuites.add(c);, +            AVAILABLE_OPENSSL_CIPHER_SUITES = Collections.unmodifiableSet(availableOpenSslCipherSuites);, +            final Set<String> availableJavaCipherSuites = new LinkedHashSet<String>(, +                    AVAILABLE_OPENSSL_CIPHER_SUITES.size() * 2);, +            for (String cipher: AVAILABLE_OPENSSL_CIPHER_SUITES) {]