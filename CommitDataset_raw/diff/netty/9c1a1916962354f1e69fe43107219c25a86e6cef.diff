[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +    @Override, +    public boolean containsValue(CharSequence name, CharSequence value, boolean ignoreCase) {, +        return super.containsValue(name, StringUtil.trimOws(value), ignoreCase);, +    }, +, +                        return StringUtil.escapeCsv(valueConverter().convertObject(value), true);, +                        return StringUtil.escapeCsv(value, true);, +            return addEscapedValue(name, charSequenceEscaper().escape(value));, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Object value) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), value));, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +    @Override, +    public boolean containsValue(CharSequence name, CharSequence value, boolean ignoreCase) {, +        return super.containsValue(name, StringUtil.trimOws(value), ignoreCase);, +    }, +, +                        return StringUtil.escapeCsv(valueConverter().convertObject(value), true);, +                        return StringUtil.escapeCsv(value, true);, +            return addEscapedValue(name, charSequenceEscaper().escape(value));, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Object value) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), value));, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * This also handles multiple values that are separated with a {@code ,}., +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +    @Override, +    public boolean containsValue(CharSequence name, CharSequence value, boolean ignoreCase) {, +        return super.containsValue(name, StringUtil.trimOws(value), ignoreCase);, +    }, +, +                        return StringUtil.escapeCsv(valueConverter().convertObject(value), true);, +                        return StringUtil.escapeCsv(value, true);, +            return addEscapedValue(name, charSequenceEscaper().escape(value));, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Object value) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), value));, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * This also handles multiple values that are separated with a {@code ,}., +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertThat;, +, +    @Test, +    public void owsTrimming() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.set(HEADER_NAME, Arrays.asList("\ta", "   ", "  b ", "\t \t"));, +        headers.add(HEADER_NAME, " c, d \t");, +, +        assertEquals(Arrays.asList("a", "", "b", "", "c, d"), headers.getAll(HEADER_NAME));, +        assertEquals("a,,b,,\"c, d\"", headers.get(HEADER_NAME));, +, +        assertTrue(headers.containsValue(HEADER_NAME, "a", true));, +        assertTrue(headers.containsValue(HEADER_NAME, " a ", true));, +        assertTrue(headers.containsValue(HEADER_NAME, "a", true));, +        assertFalse(headers.containsValue(HEADER_NAME, "a,b", true));, +, +        assertFalse(headers.containsValue(HEADER_NAME, " c, d ", true));, +        assertFalse(headers.containsValue(HEADER_NAME, "c, d", true));, +        assertTrue(headers.containsValue(HEADER_NAME, " c ", true));, +        assertTrue(headers.containsValue(HEADER_NAME, "d", true));, +, +        assertTrue(headers.containsValue(HEADER_NAME, "\t", true));, +        assertTrue(headers.containsValue(HEADER_NAME, "", true));, +, +        assertFalse(headers.containsValue(HEADER_NAME, "e", true));, +, +        HttpHeaders copiedHeaders = newCombinedHttpHeaders().add(headers);, +        assertEquals(Arrays.asList("a", "", "b", "", "c, d"), copiedHeaders.getAll(HEADER_NAME));, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +    @Override, +    public boolean containsValue(CharSequence name, CharSequence value, boolean ignoreCase) {, +        return super.containsValue(name, StringUtil.trimOws(value), ignoreCase);, +    }, +, +                        return StringUtil.escapeCsv(valueConverter().convertObject(value), true);, +                        return StringUtil.escapeCsv(value, true);, +            return addEscapedValue(name, charSequenceEscaper().escape(value));, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Object value) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), value));, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * This also handles multiple values that are separated with a {@code ,}., +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;]