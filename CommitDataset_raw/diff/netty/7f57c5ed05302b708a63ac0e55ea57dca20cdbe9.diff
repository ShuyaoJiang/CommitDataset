[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +import io.netty.buffer.ByteBuf;, +, +    private final HeaderEntry head = new HeaderEntry();, +    void validateHeaderName0(CharSequence headerName) {, +    public HttpHeaders add(HttpHeaders headers) {, +        if (headers instanceof DefaultHttpHeaders) {, +            DefaultHttpHeaders defaultHttpHeaders = (DefaultHttpHeaders) headers;, +            HeaderEntry e = defaultHttpHeaders.head.after;, +            while (e != defaultHttpHeaders.head) {, +                add(e.key, e.value);, +                e = e.after;, +            }, +            return this;, +        } else {, +            return super.add(headers);, +        }, +    }, +, +    @Override, +    public HttpHeaders set(HttpHeaders headers) {, +        if (headers instanceof DefaultHttpHeaders) {, +            clear();, +            DefaultHttpHeaders defaultHttpHeaders = (DefaultHttpHeaders) headers;, +            HeaderEntry e = defaultHttpHeaders.head.after;, +            while (e != defaultHttpHeaders.head) {, +                add(e.key, e.value);, +                e = e.after;, +            }, +            return this;, +        } else {, +            return super.set(headers);, +        }, +    }, +, +    @Override, +        return add((CharSequence) name, value);, +    }, +, +    @Override, +    public HttpHeaders add(final CharSequence name, final Object value) {, +        CharSequence strVal;, +            strVal = toCharSequence(value);, +            strVal = toCharSequence(value);, +        return add((CharSequence) name, values);, +    }, +, +    @Override, +    public HttpHeaders add(CharSequence name, Iterable<?> values) {, +            CharSequence vstr = toCharSequence(v);, +    private void add0(int h, int i, final CharSequence name, final CharSequence value) {, +        return remove((CharSequence) name);, +    }, +, +    @Override, +    public HttpHeaders remove(final CharSequence name) {, +    private void remove0(int h, int i, CharSequence name) {, +        return set((CharSequence) name, value);, +    }, +, +    @Override, +    public HttpHeaders set(final CharSequence name, final Object value) {, +        CharSequence strVal;, +            strVal = toCharSequence(value);, +            strVal = toCharSequence(value);, +        return set((CharSequence) name, values);, +    }, +, +    @Override, +    public HttpHeaders set(final CharSequence name, final Iterable<?> values) {, +            CharSequence strVal = toCharSequence(v);, +        return get((CharSequence) name);, +    }, +, +    @Override, +    public String get(final CharSequence name) {, +        CharSequence value = null;, +        if (value == null) {, +            return null;, +        }, +        return value.toString();, +        return getAll((CharSequence) name);, +    }, +, +    @Override, +    public List<String> getAll(final CharSequence name) {, +                values.addFirst(e.getValue());, +    public boolean contains(CharSequence name) {, +        return get(name) != null;, +    }, +, +    @Override, +        return contains((CharSequence) name, (CharSequence) value, ignoreCaseValue);, +    }, +, +    @Override, +    public boolean contains(CharSequence name, CharSequence value, boolean ignoreCaseValue) {, +            names.add(e.getKey());, +    private static CharSequence toCharSequence(Object value) {, +        if (value instanceof CharSequence) {]