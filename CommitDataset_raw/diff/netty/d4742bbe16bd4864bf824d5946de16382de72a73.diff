[+++ b/buffer/src/main/java/io/netty/buffer/QueueBackedMessageBuf.java, +        if (e == null) {, +            throw new NullPointerException("e");, +        }, +++ b/buffer/src/main/java/io/netty/buffer/QueueBackedMessageBuf.java, +        if (e == null) {, +            throw new NullPointerException("e");, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.buffer.MessageBuf;, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +import io.netty.channel.CombinedChannelDuplexHandler;, +public final class HttpClientCodec, +        extends CombinedChannelDuplexHandler, +        implements ChannelInboundByteHandler, ChannelOutboundMessageHandler<HttpObject> {, +    private final Queue<HttpMethod> queue = new ArrayDeque<HttpMethod>();, +    private volatile boolean done;, +    public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) {, +            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse) {, +        init(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize), new Encoder());, +    private Decoder decoder() {, +        return (Decoder) stateHandler();, +    }, +, +    private Encoder encoder() {, +        return (Encoder) operationHandler();, +    }, +, +    @Override, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return decoder().newInboundBuffer(ctx);, +    }, +, +    @Override, +    public void discardInboundReadBytes(ChannelHandlerContext ctx) throws Exception {, +        decoder().discardInboundReadBytes(ctx);, +    }, +, +    @Override, +    public void freeInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        decoder().freeInboundBuffer(ctx);, +    }, +, +    @Override, +    public MessageBuf<HttpObject> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return encoder().newOutboundBuffer(ctx);, +    }, +, +    @Override, +    public void freeOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        encoder().freeOutboundBuffer(ctx);, +    }, +, +                ChannelHandlerContext ctx, HttpObject msg, ByteBuf out) throws Exception {, +++ b/buffer/src/main/java/io/netty/buffer/QueueBackedMessageBuf.java, +        if (e == null) {, +            throw new NullPointerException("e");, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.buffer.MessageBuf;, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +import io.netty.channel.CombinedChannelDuplexHandler;, +public final class HttpClientCodec, +        extends CombinedChannelDuplexHandler, +        implements ChannelInboundByteHandler, ChannelOutboundMessageHandler<HttpObject> {, +    private final Queue<HttpMethod> queue = new ArrayDeque<HttpMethod>();, +    private volatile boolean done;, +    public HttpClientCodec(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) {, +            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize, boolean failOnMissingResponse) {, +        init(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize), new Encoder());, +    private Decoder decoder() {, +        return (Decoder) stateHandler();, +    }, +, +    private Encoder encoder() {, +        return (Encoder) operationHandler();, +    }, +, +    @Override, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return decoder().newInboundBuffer(ctx);, +    }, +, +    @Override, +    public void discardInboundReadBytes(ChannelHandlerContext ctx) throws Exception {, +        decoder().discardInboundReadBytes(ctx);, +    }, +, +    @Override, +    public void freeInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        decoder().freeInboundBuffer(ctx);, +    }, +, +    @Override, +    public MessageBuf<HttpObject> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return encoder().newOutboundBuffer(ctx);, +    }, +]