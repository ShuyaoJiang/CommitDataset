[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +    private final HeaderEntry[] entries = new HeaderEntry[BUCKET_SIZE];, +    private final HeaderEntry head = new HeaderEntry(-1, null, null);, +        HeaderEntry e = entries[i];, +        HeaderEntry newEntry;, +        entries[i] = newEntry = new HeaderEntry(h, name, value);, +        HeaderEntry e = entries[i];, +                HeaderEntry next = e.next;, +            HeaderEntry next = e.next;, +        HeaderEntry e = entries[i];, +        HeaderEntry e = entries[i];, +        HeaderEntry e = head.after;, +        HeaderEntry e = head.after;, +    private static final class HeaderEntry implements Map.Entry<String, String> {, +        HeaderEntry next;, +        HeaderEntry before, after;, +        HeaderEntry(int hash, String key, String value) {, +        void addBefore(HeaderEntry e) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +    private final HeaderEntry[] entries = new HeaderEntry[BUCKET_SIZE];, +    private final HeaderEntry head = new HeaderEntry(-1, null, null);, +        HeaderEntry e = entries[i];, +        HeaderEntry newEntry;, +        entries[i] = newEntry = new HeaderEntry(h, name, value);, +        HeaderEntry e = entries[i];, +                HeaderEntry next = e.next;, +            HeaderEntry next = e.next;, +        HeaderEntry e = entries[i];, +        HeaderEntry e = entries[i];, +        HeaderEntry e = head.after;, +        HeaderEntry e = head.after;, +    private static final class HeaderEntry implements Map.Entry<String, String> {, +        HeaderEntry next;, +        HeaderEntry before, after;, +        HeaderEntry(int hash, String key, String value) {, +        void addBefore(HeaderEntry e) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DiskAttribute.java, +    public int compareTo(InterfaceHttpData o) {, +        if (!(o instanceof Attribute)) {, +                    " with " + o.getHttpDataType());, +        return compareTo((Attribute) o);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +    private final HeaderEntry[] entries = new HeaderEntry[BUCKET_SIZE];, +    private final HeaderEntry head = new HeaderEntry(-1, null, null);, +        HeaderEntry e = entries[i];, +        HeaderEntry newEntry;, +        entries[i] = newEntry = new HeaderEntry(h, name, value);, +        HeaderEntry e = entries[i];, +                HeaderEntry next = e.next;, +            HeaderEntry next = e.next;, +        HeaderEntry e = entries[i];, +        HeaderEntry e = entries[i];, +        HeaderEntry e = head.after;, +        HeaderEntry e = head.after;, +    private static final class HeaderEntry implements Map.Entry<String, String> {, +        HeaderEntry next;, +        HeaderEntry before, after;, +        HeaderEntry(int hash, String key, String value) {, +        void addBefore(HeaderEntry e) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DiskAttribute.java, +    public int compareTo(InterfaceHttpData o) {, +        if (!(o instanceof Attribute)) {, +                    " with " + o.getHttpDataType());, +        return compareTo((Attribute) o);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DiskFileUpload.java, +    public int compareTo(InterfaceHttpData o) {, +        if (!(o instanceof FileUpload)) {, +                    " with " + o.getHttpDataType());, +        return compareTo((FileUpload) o);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +    private final HeaderEntry[] entries = new HeaderEntry[BUCKET_SIZE];, +    private final HeaderEntry head = new HeaderEntry(-1, null, null);, +        HeaderEntry e = entries[i];, +        HeaderEntry newEntry;, +        entries[i] = newEntry = new HeaderEntry(h, name, value);, +        HeaderEntry e = entries[i];, +                HeaderEntry next = e.next;, +            HeaderEntry next = e.next;, +        HeaderEntry e = entries[i];, +        HeaderEntry e = entries[i];, +        HeaderEntry e = head.after;, +        HeaderEntry e = head.after;, +    private static final class HeaderEntry implements Map.Entry<String, String> {, +        HeaderEntry next;, +        HeaderEntry before, after;, +        HeaderEntry(int hash, String key, String value) {, +        void addBefore(HeaderEntry e) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DiskAttribute.java, +    public int compareTo(InterfaceHttpData o) {, +        if (!(o instanceof Attribute)) {, +                    " with " + o.getHttpDataType());, +        return compareTo((Attribute) o);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DiskFileUpload.java, +    public int compareTo(InterfaceHttpData o) {, +        if (!(o instanceof FileUpload)) {, +                    " with " + o.getHttpDataType());, +        return compareTo((FileUpload) o);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +        public ErrorDataDecoderException(String msg) {, +            super(msg);]