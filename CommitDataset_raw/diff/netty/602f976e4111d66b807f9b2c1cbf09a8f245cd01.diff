[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private HttpTransferEncoding te = HttpTransferEncoding.SINGLE;, +    public HttpTransferEncoding getTransferEncoding() {, +        return te;, +    public void setTransferEncoding(HttpTransferEncoding te) {, +        if (te == null) {, +            throw new NullPointerException("te (transferEncoding)");, +        }, +        this.te = te;, +        switch (te) {, +        case SINGLE:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case STREAMED:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case CHUNKED:, +            if (!HttpCodecUtil.isTransferEncodingChunked(this)) {, +                addHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);, +            }, +            removeHeader(HttpHeaders.Names.CONTENT_LENGTH);, +            setContent(Unpooled.EMPTY_BUFFER);, +            break;, +, +        if (!getTransferEncoding().isSingle() && content.readable()) {, +                    "non-empty content disallowed if this.transferEncoding != SINGLE");, +, +        if (getTransferEncoding() == HttpTransferEncoding.SINGLE) {, +        } else {, +            return Unpooled.EMPTY_BUFFER;, +        }, +        buf.append(", transferEncoding: ");, +        buf.append(getTransferEncoding());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private HttpTransferEncoding te = HttpTransferEncoding.SINGLE;, +    public HttpTransferEncoding getTransferEncoding() {, +        return te;, +    public void setTransferEncoding(HttpTransferEncoding te) {, +        if (te == null) {, +            throw new NullPointerException("te (transferEncoding)");, +        }, +        this.te = te;, +        switch (te) {, +        case SINGLE:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case STREAMED:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case CHUNKED:, +            if (!HttpCodecUtil.isTransferEncodingChunked(this)) {, +                addHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);, +            }, +            removeHeader(HttpHeaders.Names.CONTENT_LENGTH);, +            setContent(Unpooled.EMPTY_BUFFER);, +            break;, +, +        if (!getTransferEncoding().isSingle() && content.readable()) {, +                    "non-empty content disallowed if this.transferEncoding != SINGLE");, +, +        if (getTransferEncoding() == HttpTransferEncoding.SINGLE) {, +        } else {, +            return Unpooled.EMPTY_BUFFER;, +        }, +        buf.append(", transferEncoding: ");, +        buf.append(getTransferEncoding());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(transferEncoding: ");, +        buf.append(getTransferEncoding());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private HttpTransferEncoding te = HttpTransferEncoding.SINGLE;, +    public HttpTransferEncoding getTransferEncoding() {, +        return te;, +    public void setTransferEncoding(HttpTransferEncoding te) {, +        if (te == null) {, +            throw new NullPointerException("te (transferEncoding)");, +        }, +        this.te = te;, +        switch (te) {, +        case SINGLE:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case STREAMED:, +            HttpCodecUtil.removeTransferEncodingChunked(this);, +            break;, +        case CHUNKED:, +            if (!HttpCodecUtil.isTransferEncodingChunked(this)) {, +                addHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);, +            }, +            removeHeader(HttpHeaders.Names.CONTENT_LENGTH);, +            setContent(Unpooled.EMPTY_BUFFER);, +            break;, +, +        if (!getTransferEncoding().isSingle() && content.readable()) {, +                    "non-empty content disallowed if this.transferEncoding != SINGLE");, +, +        if (getTransferEncoding() == HttpTransferEncoding.SINGLE) {, +        } else {, +            return Unpooled.EMPTY_BUFFER;, +        }]