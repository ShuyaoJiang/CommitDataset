[+++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClientInitializer.java, +        pipeline.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClientInitializer.java, +        pipeline.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClientInitializer.java, +        pipeline.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyOrHttpHandler.java, +        String[] protocol = engine.getSession().getProtocol().split(":");, +        SelectedProtocol selectedProtocol = SelectedProtocol.protocol(protocol[1]);, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClientInitializer.java, +        pipeline.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyOrHttpHandler.java, +        String[] protocol = engine.getSession().getProtocol().split(":");, +        SelectedProtocol selectedProtocol = SelectedProtocol.protocol(protocol[1]);, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyServer.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +import java.util.Arrays;, +, +        SslContext sslCtx = SslContext.newServerContext(, +                ssc.certificate(), ssc.privateKey(), null, null,, +                Arrays.asList(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +        new SpdyServer(sslCtx, port).run();, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +        sslCtx = SslContext.newClientContext(, +                null, InsecureTrustManagerFactory.INSTANCE, null,, +                SslContext.newApplicationProtocolSelector(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClientInitializer.java, +        pipeline.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyOrHttpHandler.java, +        String[] protocol = engine.getSession().getProtocol().split(":");, +        SelectedProtocol selectedProtocol = SelectedProtocol.protocol(protocol[1]);, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyServer.java, +import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol;, +import java.util.Arrays;, +, +        SslContext sslCtx = SslContext.newServerContext(, +                ssc.certificate(), ssc.privateKey(), null, null,, +                Arrays.asList(, +                        SelectedProtocol.SPDY_3_1.protocolName(),, +                        SelectedProtocol.HTTP_1_1.protocolName()),, +                0, 0);, +        new SpdyServer(sslCtx, port).run();, +++ b/example/src/main/java/io/netty/example/spdy/server/SpdyServerInitializer.java]