[+++ b/src/main/java/org/jboss/netty/channel/DefaultChannelFuture.java, +import static java.util.concurrent.TimeUnit.*;, +, +        return await0(unit.toNanos(timeout), true);, +        return await0(MILLISECONDS.toNanos(timeoutMillis), true);, +            return await0(unit.toNanos(timeout), false);, +    public boolean awaitUninterruptibly(long timeoutMillis) {, +        try {, +            return await0(MILLISECONDS.toNanos(timeoutMillis), false);, +        } catch (InterruptedException e) {, +            throw new InternalError();, +        }, +    }, +, +    private boolean await0(long timeoutNanos, boolean interruptable) throws InterruptedException {, +        long startTime = timeoutNanos <= 0 ? 0 : System.nanoTime();, +        long waitTime = timeoutNanos;, +                        this.wait(waitTime / 1000000, (int) (waitTime % 1000000));, +                        waitTime = timeoutNanos - (System.nanoTime() - startTime);, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelFuture.java, +import static java.util.concurrent.TimeUnit.*;, +, +        return await0(unit.toNanos(timeout), true);, +        return await0(MILLISECONDS.toNanos(timeoutMillis), true);, +            return await0(unit.toNanos(timeout), false);, +    public boolean awaitUninterruptibly(long timeoutMillis) {, +        try {, +            return await0(MILLISECONDS.toNanos(timeoutMillis), false);, +        } catch (InterruptedException e) {, +            throw new InternalError();, +        }, +    }, +, +    private boolean await0(long timeoutNanos, boolean interruptable) throws InterruptedException {, +        long startTime = timeoutNanos <= 0 ? 0 : System.nanoTime();, +        long waitTime = timeoutNanos;, +                        this.wait(waitTime / 1000000, (int) (waitTime % 1000000));, +                        waitTime = timeoutNanos - (System.nanoTime() - startTime);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                startTime = System.nanoTime();, +                if (System.nanoTime() - startTime >= 500000000L) {, +                    startTime = System.nanoTime();, +                    if (System.nanoTime() - startTime >= 500000000L) {]