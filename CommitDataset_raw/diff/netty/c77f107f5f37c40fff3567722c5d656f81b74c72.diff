[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +                AioEventLoop loop = new AioEventLoop();, +                                channel(new AioServerSocketChannel(loop));, +                AioEventLoop loop = new AioEventLoop();, +                return new Bootstrap().eventLoop(loop).channel(new AioSocketChannel(loop));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +                AioEventLoop loop = new AioEventLoop();, +                                channel(new AioServerSocketChannel(loop));, +                AioEventLoop loop = new AioEventLoop();, +                return new Bootstrap().eventLoop(loop).channel(new AioSocketChannel(loop));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java, +import io.netty.channel.EventLoopException;, +import java.io.IOException;, +import java.lang.reflect.Field;, +import java.nio.channels.AsynchronousChannelGroup;, +    final AsynchronousChannelGroup group;, +, +        try {, +            group = AsynchronousChannelGroup.withThreadPool(this);, +        } catch (IOException e) {, +            throw new EventLoopException("Failed to create an AsynchronousChannelGroup", e);, +        }, +    }, +, +    @Override, +    public void execute(Runnable command) {, +        Class<? extends Runnable> commandType = command.getClass();, +        if (commandType.getName().startsWith("sun.nio.ch.")) {, +            executeAioTask(command);, +        } else {, +            super.execute(command);, +        }, +    }, +, +    private void executeAioTask(Runnable command) {, +        AbstractAioChannel ch = null;, +        try {, +            ch = findChannel(command);, +        } catch (Exception e) {, +            // Ignore, +        }, +, +        EventExecutor l;, +        if (ch != null) {, +            l = ch.eventLoop();, +        } else {, +            l = unsafe().nextChild();, +        }, +, +        if (l.isShutdown()) {, +            command.run();, +        } else {, +            ch.eventLoop().execute(command);, +        }, +    }, +, +    private static AbstractAioChannel findChannel(Runnable command) throws Exception {, +        // TODO: Optimize me, +        Class<?> commandType = command.getClass();, +        for (Field f: commandType.getDeclaredFields()) {, +            if (f.getType() == Runnable.class) {, +                f.setAccessible(true);, +                AbstractAioChannel ch = findChannel((Runnable) f.get(command));, +                if (ch != null) {, +                    return ch;, +                }, +            }, +            if (f.getType() == Object.class) {, +                f.setAccessible(true);, +                Object candidate = f.get(command);, +                if (candidate instanceof AbstractAioChannel) {, +                    return (AbstractAioChannel) candidate;, +                }, +            }, +        }, +, +        return null;, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +                AioEventLoop loop = new AioEventLoop();, +                                channel(new AioServerSocketChannel(loop));, +                AioEventLoop loop = new AioEventLoop();, +                return new Bootstrap().eventLoop(loop).channel(new AioSocketChannel(loop));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java, +import io.netty.channel.EventLoopException;, +import java.io.IOException;, +import java.lang.reflect.Field;, +import java.nio.channels.AsynchronousChannelGroup;, +    final AsynchronousChannelGroup group;, +, +        try {, +            group = AsynchronousChannelGroup.withThreadPool(this);, +        } catch (IOException e) {, +            throw new EventLoopException("Failed to create an AsynchronousChannelGroup", e);, +        }, +    }, +, +    @Override, +    public void execute(Runnable command) {, +        Class<? extends Runnable> commandType = command.getClass();, +        if (commandType.getName().startsWith("sun.nio.ch.")) {]