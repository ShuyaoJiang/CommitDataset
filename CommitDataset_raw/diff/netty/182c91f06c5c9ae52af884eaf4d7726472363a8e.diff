[+++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledHeapByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, +        ensureAccessible();, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +    @Test, +    public void testArrayAfterRelease() {, +        ByteBuf buf = releasedBuffer();, +        if (buf.hasArray()) {, +            try {, +                buf.array();, +                fail();, +            } catch (IllegalReferenceCountException e) {, +                // expected, +            }, +        }, +    }, +, +    @Test, +    public void testMemoryAddressAfterRelease() {, +        ByteBuf buf = releasedBuffer();, +        if (buf.hasMemoryAddress()) {, +            try {, +                buf.memoryAddress();, +                fail();, +            } catch (IllegalReferenceCountException e) {, +                // expected, +            }, +        }, +    }, +]