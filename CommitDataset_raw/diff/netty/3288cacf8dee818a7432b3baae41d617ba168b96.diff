[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.ResourceLeakDetectorFactory;, +    static final ResourceLeakDetector<ByteBuf> leakDetector =, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(ByteBuf.class);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.ResourceLeakDetectorFactory;, +    static final ResourceLeakDetector<ByteBuf> leakDetector =, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(ByteBuf.class);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsMessage.java, +import io.netty.util.ResourceLeakDetectorFactory;, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(DnsMessage.class);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.ResourceLeakDetectorFactory;, +    static final ResourceLeakDetector<ByteBuf> leakDetector =, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(ByteBuf.class);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsMessage.java, +import io.netty.util.ResourceLeakDetectorFactory;, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(DnsMessage.class);, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +public class ResourceLeakDetector<T> {, +            reportInstancesLeak(resourceType);, +                    reportUntracedLeak(resourceType);, +                } else {, +                    reportTracedLeak(resourceType, records);, +                }, +            }, +        }, +    }, +, +    /**, +     * This method is called when a traced leak is detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportTracedLeak(String resourceType, String records) {, +        logger.error(, +                "LEAK: {}.release() was not called before it's garbage-collected. " +, +                "See http://netty.io/wiki/reference-counted-objects.html for more information.{}",, +                resourceType, records);, +    }, +, +    /**, +     * This method is called when an untraced leak is detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportUntracedLeak(String resourceType) {, +, +    /**, +     * This method is called when instance leaks are detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportInstancesLeak(String resourceType) {, +        logger.error("LEAK: You are creating too many " + resourceType + " instances.  " +, +                resourceType + " is a shared resource that must be reused across the JVM," +, +                "so that only a few instances are created.");, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.ResourceLeakDetectorFactory;, +    static final ResourceLeakDetector<ByteBuf> leakDetector =, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(ByteBuf.class);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsMessage.java, +import io.netty.util.ResourceLeakDetectorFactory;, +            ResourceLeakDetectorFactory.instance().newResourceLeakDetector(DnsMessage.class);, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +public class ResourceLeakDetector<T> {, +            reportInstancesLeak(resourceType);, +                    reportUntracedLeak(resourceType);, +                } else {, +                    reportTracedLeak(resourceType, records);, +                }, +            }, +        }, +    }, +, +    /**, +     * This method is called when a traced leak is detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportTracedLeak(String resourceType, String records) {, +        logger.error(, +                "LEAK: {}.release() was not called before it's garbage-collected. " +, +                "See http://netty.io/wiki/reference-counted-objects.html for more information.{}",, +                resourceType, records);, +    }, +, +    /**, +     * This method is called when an untraced leak is detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportUntracedLeak(String resourceType) {, +, +    /**, +     * This method is called when instance leaks are detected. It can be overridden for tracking how many times leaks, +     * have been detected., +     */, +    protected void reportInstancesLeak(String resourceType) {, +        logger.error("LEAK: You are creating too many " + resourceType + " instances.  " +, +                resourceType + " is a shared resource that must be reused across the JVM," +, +                "so that only a few instances are created.");, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetectorFactory.java, +/*, + * Copyright 2016 The Netty Project]