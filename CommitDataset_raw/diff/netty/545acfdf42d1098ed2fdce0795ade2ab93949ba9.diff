[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +    private final ReadBufferPool readBufferPool = new ReadBufferPool();, +, +, +        if (buffer.isDirect()) {, +        } else {, +            ByteBuffer bb = readBufferPool.acquire(buffer.writableBytes());, +            try {, +                while ((ret = ch.read(bb)) > 0) {, +                    readBytes += ret;, +                    if (!bb.hasRemaining()) {, +                        break;, +                    }, +                }, +                failure = false;, +            } catch (ClosedChannelException e) {, +                // Can happen, and does not need a user attention., +            } catch (Throwable t) {, +                fireExceptionCaught(channel, t);, +            } finally {, +                bb.flip();, +                buffer.writeBytes(bb);, +                readBufferPool.release(bb);, +            }, +        }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +    private final ReadBufferPool readBufferPool = new ReadBufferPool();, +, +, +        if (buffer.isDirect()) {, +        } else {, +            ByteBuffer bb = readBufferPool.acquire(buffer.writableBytes());, +            try {, +                while ((ret = ch.read(bb)) > 0) {, +                    readBytes += ret;, +                    if (!bb.hasRemaining()) {, +                        break;, +                    }, +                }, +                failure = false;, +            } catch (ClosedChannelException e) {, +                // Can happen, and does not need a user attention., +            } catch (Throwable t) {, +                fireExceptionCaught(channel, t);, +            } finally {, +                bb.flip();, +                buffer.writeBytes(bb);, +                readBufferPool.release(bb);, +            }, +        }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/ReadBufferPool.java, +/*, + * Copyright 2010 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.channel.socket.nio;, +, +import java.lang.ref.SoftReference;, +import java.nio.ByteBuffer;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +, +/**, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + * @version $Rev$, $Date$, + */, +final class ReadBufferPool {, +, +    private static final int POOL_SIZE = 4;, +, +    @SuppressWarnings("unchecked"), +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    ReadBufferPool() {, +        super();, +    }, +, +    final ByteBuffer acquire(ChannelBuffer src) {, +        ByteBuffer dst = acquire(src.readableBytes());, +        src.getBytes(src.readerIndex(), dst);, +        dst.rewind();, +        return dst;, +    }, +, +    final ByteBuffer acquire(int size) {, +        for (int i = 0; i < POOL_SIZE; i ++) {, +            SoftReference<ByteBuffer> ref = pool[i];, +            if (ref == null) {]