[+++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer(, +                productQueue, ChannelBuffers.dynamicBuffer()));, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer(, +                productQueue, ChannelBuffers.dynamicBuffer()));, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer(, +                productQueue, ChannelBuffers.dynamicBuffer()));, +++ /dev/null, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer(, +                productQueue, ChannelBuffers.dynamicBuffer()));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/EmbeddedChannel.java, +        super(null, null, ChannelBufferHolders.catchAllBuffer(, +                productQueue, ChannelBuffers.dynamicBuffer()));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.localecho;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.local.LocalAddress;, +import io.netty.channel.local.LocalChannel;, +import io.netty.channel.local.LocalServerChannel;, +import io.netty.channel.socket.nio.NioEventLoop;, +import io.netty.handler.logging.LogLevel;, +import io.netty.handler.logging.LoggingHandler;, +, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +, +public class LocalEcho {, +, +    private final String port;, +, +    public LocalEcho(String port) {, +        this.port = port;, +    }, +, +    public void run() throws Exception {, +        // Address to bind on / connect to., +        final LocalAddress addr = new LocalAddress(port);, +, +        Bootstrap cb = new Bootstrap();, +        ServerBootstrap sb = new ServerBootstrap();, +        try {, +            // Note that we can use any event loop so that you can ensure certain local channels, +            // are handled by the same event loop thread which drives a certain socket channel., +            sb.eventLoop(new NioEventLoop(), new NioEventLoop()), +              .channel(new LocalServerChannel()), +              .localAddress(addr), +              .initializer(new ChannelInitializer<LocalServerChannel>() {, +                  @Override, +                  public void initChannel(LocalServerChannel ch) throws Exception {, +                      ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO));, +                  }, +              }), +              .childInitializer(new ChannelInitializer<LocalChannel>() {, +                  @Override, +                  public void initChannel(LocalChannel ch) throws Exception {, +                      ch.pipeline().addLast(, +                              new LoggingHandler(LogLevel.INFO),, +                              new LocalEchoServerHandler());, +                  }, +              });, +, +            cb.eventLoop(new NioEventLoop()), +              .channel(new LocalChannel()), +              .remoteAddress(addr), +              .initializer(new ChannelInitializer<LocalChannel>() {, +                  @Override, +                  public void initChannel(LocalChannel ch) throws Exception {, +                      ch.pipeline().addLast(, +                              new LoggingHandler(LogLevel.INFO),]