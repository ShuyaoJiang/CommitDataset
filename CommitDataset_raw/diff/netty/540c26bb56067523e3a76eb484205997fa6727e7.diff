[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, + *   <li>{@link #encoderIgnoreMaxHeaderListSize(boolean)}</li>, +    private Boolean encoderIgnoreMaxHeaderListSize;, +     * Sets if the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>, +     * should be ignored when encoding headers., +     * @param ignoreMaxHeaderListSize {@code true} to ignore, +     * <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>., +     * @return this., +     */, +    protected B encoderIgnoreMaxHeaderListSize(boolean ignoreMaxHeaderListSize) {, +        enforceNonCodecConstraints("encoderIgnoreMaxHeaderListSize");, +        this.encoderIgnoreMaxHeaderListSize = ignoreMaxHeaderListSize;, +        return self();, +    }, +, +    /**, +        Http2FrameWriter writer = encoderIgnoreMaxHeaderListSize == null ?, +                new DefaultHttp2FrameWriter(headerSensitivityDetector()) :, +                new DefaultHttp2FrameWriter(headerSensitivityDetector(), encoderIgnoreMaxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, + *   <li>{@link #encoderIgnoreMaxHeaderListSize(boolean)}</li>, +    private Boolean encoderIgnoreMaxHeaderListSize;, +     * Sets if the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>, +     * should be ignored when encoding headers., +     * @param ignoreMaxHeaderListSize {@code true} to ignore, +     * <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>., +     * @return this., +     */, +    protected B encoderIgnoreMaxHeaderListSize(boolean ignoreMaxHeaderListSize) {, +        enforceNonCodecConstraints("encoderIgnoreMaxHeaderListSize");, +        this.encoderIgnoreMaxHeaderListSize = ignoreMaxHeaderListSize;, +        return self();, +    }, +, +    /**, +        Http2FrameWriter writer = encoderIgnoreMaxHeaderListSize == null ?, +                new DefaultHttp2FrameWriter(headerSensitivityDetector()) :, +                new DefaultHttp2FrameWriter(headerSensitivityDetector(), encoderIgnoreMaxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +            final boolean shouldIgnore;, +            } catch (Http2Exception e) {, +                // Ignoring this frame. We still need to count the frame towards the connection flow control, +                // window, but we immediately mark all bytes as consumed., +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +                throw e;, +            } catch (Throwable t) {, +                throw connectionError(INTERNAL_ERROR, t, "Unhandled error on data stream id %d", streamId);, +            }, +, +                headerTable.maxHeaderTableSize(headerTableSize);, +            Long maxHeaderListSize = settings.maxHeaderListSize();, +         * Calculate the {@code maxStreams} parameter for the {@link Endpoint#maxStreams(int, int)} method based upon, +         * {@code SETTINGS_MAX_CONCURRENT_STREAMS}., +         * @param maxConcurrentStreams {@code SETTINGS_MAX_CONCURRENT_STREAMS}., +         * @return the {@code maxStreams} parameter for the {@link Endpoint#maxStreams(int, int)} method., +        private int calculateMaxStreams(int maxConcurrentStreams) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, + *   <li>{@link #encoderIgnoreMaxHeaderListSize(boolean)}</li>, +    private Boolean encoderIgnoreMaxHeaderListSize;, +     * Sets if the <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>, +     * should be ignored when encoding headers., +     * @param ignoreMaxHeaderListSize {@code true} to ignore, +     * <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a>., +     * @return this., +     */, +    protected B encoderIgnoreMaxHeaderListSize(boolean ignoreMaxHeaderListSize) {, +        enforceNonCodecConstraints("encoderIgnoreMaxHeaderListSize");, +        this.encoderIgnoreMaxHeaderListSize = ignoreMaxHeaderListSize;, +        return self();, +    }, +, +    /**, +        Http2FrameWriter writer = encoderIgnoreMaxHeaderListSize == null ?, +                new DefaultHttp2FrameWriter(headerSensitivityDetector()) :, +                new DefaultHttp2FrameWriter(headerSensitivityDetector(), encoderIgnoreMaxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +            final boolean shouldIgnore;, +            } catch (Http2Exception e) {, +                // Ignoring this frame. We still need to count the frame towards the connection flow control, +                // window, but we immediately mark all bytes as consumed., +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +                throw e;, +            } catch (Throwable t) {, +                throw connectionError(INTERNAL_ERROR, t, "Unhandled error on data stream id %d", streamId);, +            }, +, +                headerTable.maxHeaderTableSize(headerTableSize);, +            Long maxHeaderListSize = settings.maxHeaderListSize();, +         * Calculate the {@code maxStreams} parameter for the {@link Endpoint#maxStreams(int, int)} method based upon, +         * {@code SETTINGS_MAX_CONCURRENT_STREAMS}., +         * @param maxConcurrentStreams {@code SETTINGS_MAX_CONCURRENT_STREAMS}., +         * @return the {@code maxStreams} parameter for the {@link Endpoint#maxStreams(int, int)} method., +        private int calculateMaxStreams(int maxConcurrentStreams) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        Long maxHeaderListSize = settings.maxHeaderListSize();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java]