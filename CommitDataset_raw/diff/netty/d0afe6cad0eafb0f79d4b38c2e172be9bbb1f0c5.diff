[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d (expected: 0 <= readerIndex <= writerIndex(%d))", readerIndex, writerIndex));, +            throw new IndexOutOfBoundsException(String.format(, +                    "writerIndex: %d (expected: readerIndex(%d) <= writerIndex <= capacity(%d))",, +                    writerIndex, readerIndex, capacity()));, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",, +                    readerIndex, writerIndex, capacity()));, +                    "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s",, +                    writerIndex, minWritableBytes, maxCapacity, this));, +        checkIndex(index,  length);, +        if (dst == null) {, +            throw new NullPointerException("dst");, +        }, +, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds dst.writableBytes(%d) where dst is: %s", length, dst.writableBytes(), dst));, +        checkIndex(index, length);, +        if (src == null) {, +            throw new NullPointerException("src");, +        if (length > src.readableBytes()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +        }, +, +, +        checkIndex(index, length);, +            throw new IndexOutOfBoundsException("readerIndex(" + readerIndex + ") == writerIndex(" + writerIndex + ')');, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds dst.writableBytes(%d) where dst is: %s", length, dst.writableBytes(), dst));, +            throw new IndexOutOfBoundsException(String.format(, +                    "length: %d (expected: readerIndex(%d) + length <= writerIndex(%d))",, +                    length, readerIndex, writerIndex));, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +, +        checkIndex(writerIndex, length);, +, +        if (index < 0 || index > capacity() - fieldLength || fieldLength < 0) {, +        if (readerIndex > writerIndex - minimumReadableBytes) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex(%d) + length(%d) exceeds writerIndex(%d): %s",, +                    readerIndex, minimumReadableBytes, writerIndex, this));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d (expected: 0 <= readerIndex <= writerIndex(%d))", readerIndex, writerIndex));, +            throw new IndexOutOfBoundsException(String.format(, +                    "writerIndex: %d (expected: readerIndex(%d) <= writerIndex <= capacity(%d))",, +                    writerIndex, readerIndex, capacity()));, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",, +                    readerIndex, writerIndex, capacity()));, +                    "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s",, +                    writerIndex, minWritableBytes, maxCapacity, this));, +        checkIndex(index,  length);, +        if (dst == null) {, +            throw new NullPointerException("dst");, +        }, +, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds dst.writableBytes(%d) where dst is: %s", length, dst.writableBytes(), dst));, +        checkIndex(index, length);, +        if (src == null) {, +            throw new NullPointerException("src");, +        if (length > src.readableBytes()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +        }, +, +, +        checkIndex(index, length);, +            throw new IndexOutOfBoundsException("readerIndex(" + readerIndex + ") == writerIndex(" + writerIndex + ')');, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds dst.writableBytes(%d) where dst is: %s", length, dst.writableBytes(), dst));, +            throw new IndexOutOfBoundsException(String.format(, +                    "length: %d (expected: readerIndex(%d) + length <= writerIndex(%d))",, +                    length, readerIndex, writerIndex));, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +, +        checkIndex(writerIndex, length);, +, +        if (index < 0 || index > capacity() - fieldLength || fieldLength < 0) {, +        if (readerIndex > writerIndex - minimumReadableBytes) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex(%d) + length(%d) exceeds writerIndex(%d): %s",, +                    readerIndex, minimumReadableBytes, writerIndex, this));, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d (expected: 0 <= readerIndex <= writerIndex(%d))", readerIndex, writerIndex));, +            throw new IndexOutOfBoundsException(String.format(, +                    "writerIndex: %d (expected: readerIndex(%d) <= writerIndex <= capacity(%d))",, +                    writerIndex, readerIndex, capacity()));, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",, +                    readerIndex, writerIndex, capacity()));, +                    "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s",, +                    writerIndex, minWritableBytes, maxCapacity, this));]