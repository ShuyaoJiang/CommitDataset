[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +            addFirst0(new DefaultChannelHandlerContext(this, findInvoker(group), name, handler));, +            addFirst0(new DefaultChannelHandlerContext(this, invoker, name, handler));, +    private void addFirst0(AbstractChannelHandlerContext newCtx) {, +            addLast0(new DefaultChannelHandlerContext(this, findInvoker(group), name, handler));, +            addLast0(new DefaultChannelHandlerContext(this, invoker, name, handler));, +    private void addLast0(AbstractChannelHandlerContext newCtx) {, +            addBefore0(ctx, new DefaultChannelHandlerContext(this, findInvoker(group), name, handler));, +            addBefore0(ctx, new DefaultChannelHandlerContext(this, invoker, name, handler));, +    private void addBefore0(AbstractChannelHandlerContext ctx, AbstractChannelHandlerContext newCtx) {, +            addAfter0(ctx, new DefaultChannelHandlerContext(this, findInvoker(group), name, handler));, +            addAfter0(ctx, new DefaultChannelHandlerContext(this, invoker, name, handler));, +    private void addAfter0(AbstractChannelHandlerContext ctx, AbstractChannelHandlerContext newCtx) {, +            if (context0(name) != null) {, +                    if (context0(newName) == null) {, +                replace0(ctx, newCtx);, +                            replace0(ctx, newCtx);, +    private void replace0(AbstractChannelHandlerContext oldCtx, AbstractChannelHandlerContext newCtx) {, +        return context0(name);, +     * Note that we traverse up the pipeline ({@link #destroyUp(AbstractChannelHandlerContext, boolean)}), +     * before traversing down ({@link #destroyDown(Thread, AbstractChannelHandlerContext, boolean)}) so that, +        if (context0(name) == null) {, +    private AbstractChannelHandlerContext context0(String name) {, +        AbstractChannelHandlerContext context = head.next;, +        while (context != tail) {, +            if (context.name().equals(name)) {, +                return context;, +            }, +            context = context.next;, +        }, +        return null;, +    }, +]