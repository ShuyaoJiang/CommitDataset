[+++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +    public ByteBuffer nioBuffer() {, +        return nioBuffer(readerIndex, readableBytes());, +        ByteBuffer nioBuffer;, +        if (hasNioBuffer()) {, +            nioBuffer = nioBuffer(index, length);, +        } else {, +            nioBuffer = ByteBuffer.allocate(length);, +            getBytes(index, nioBuffer);, +            nioBuffer.flip();, +        }, +, +        return ChannelBuffers.decodeString(nioBuffer, charset);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +    public ByteBuffer nioBuffer() {, +        return nioBuffer(readerIndex, readableBytes());, +        ByteBuffer nioBuffer;, +        if (hasNioBuffer()) {, +            nioBuffer = nioBuffer(index, length);, +        } else {, +            nioBuffer = ByteBuffer.allocate(length);, +            getBytes(index, nioBuffer);, +            nioBuffer.flip();, +        }, +, +        return ChannelBuffers.decodeString(nioBuffer, charset);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java, +        if (src == tmpBuf) {, +            src = src.duplicate();, +        }, +, +    public boolean hasNioBuffer() {, +        return true;, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +    public ByteBuffer nioBuffer() {, +        return nioBuffer(readerIndex, readableBytes());, +        ByteBuffer nioBuffer;, +        if (hasNioBuffer()) {, +            nioBuffer = nioBuffer(index, length);, +        } else {, +            nioBuffer = ByteBuffer.allocate(length);, +            getBytes(index, nioBuffer);, +            nioBuffer.flip();, +        }, +, +        return ChannelBuffers.decodeString(nioBuffer, charset);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufferBackedChannelBuffer.java, +        if (src == tmpBuf) {, +            src = src.duplicate();, +        }, +, +    public boolean hasNioBuffer() {, +        return true;, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffer.java, + * If a {@link ChannelBuffer} can be converted into an NIO {@link ByteBuffer} which shares its, + * content (i.e. view buffer), you can get it via the {@link #nioBuffer()} method.  To determine, + * if a buffer can be converted into an NIO buffer, use {@link #nioBuffer()}., +     * Returns {@code true} if and only if {@link #nioBuffer()} method will not fail., +    boolean hasNioBuffer();, +     * Exposes this buffer's readable bytes as an NIO {@link ByteBuffer}.  The returned buffer, +     * shares the content with this buffer, while changing the position and limit of the returned, +     * NIO buffer does not affect the indexes and marks of this buffer.  This method is identical, +     * to {@code buf.asByteBuffer(buf.readerIndex(), buf.readableBytes())}.  This method does not, +     * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +    ByteBuffer nioBuffer();, +     * Exposes this buffer's sub-region as an NIO {@link ByteBuffer}.  The returned buffer, +     * shares the content with this buffer, while changing the position and limit of the returned, +     * NIO buffer does not affect the indexes and marks of this buffer.  This method does not, +     * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +    ByteBuffer nioBuffer(int index, int length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractChannelBuffer.java, +    public ByteBuffer nioBuffer() {, +        return nioBuffer(readerIndex, readableBytes());, +        ByteBuffer nioBuffer;, +        if (hasNioBuffer()) {, +            nioBuffer = nioBuffer(index, length);, +        } else {, +            nioBuffer = ByteBuffer.allocate(length);, +            getBytes(index, nioBuffer);, +            nioBuffer.flip();, +        }]