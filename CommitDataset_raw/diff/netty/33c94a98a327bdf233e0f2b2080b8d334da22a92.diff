[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                    region.release();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                    region.release();, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +import io.netty.buffer.AbstractReferenceCounted;, +public class DefaultFileRegion extends AbstractReferenceCounted implements FileRegion {, +    protected void deallocate() {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                    region.release();, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +import io.netty.buffer.AbstractReferenceCounted;, +public class DefaultFileRegion extends AbstractReferenceCounted implements FileRegion {, +    protected void deallocate() {, +++ b/transport/src/main/java/io/netty/channel/FileRegion.java, +import io.netty.buffer.ReferenceCounted;, +, +public interface FileRegion extends ReferenceCounted {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                    region.release();, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +import io.netty.buffer.AbstractReferenceCounted;, +public class DefaultFileRegion extends AbstractReferenceCounted implements FileRegion {, +    protected void deallocate() {, +++ b/transport/src/main/java/io/netty/channel/FileRegion.java, +import io.netty.buffer.ReferenceCounted;, +, +public interface FileRegion extends ReferenceCounted {, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, + * Copyright 2013 The Netty Project, +import io.netty.channel.FileRegion;, +     * Writes the specified {@link FileRegion} to all {@link Channel}s in this, +     * group. Please note that this operation is asynchronous as, +     * {@link Channel#sendFile(FileRegion)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture sendFile(FileRegion region);, +, +    /**, +     * Flush all {@link Channel} in this group. Please note that this operation, +     * is asynchronous as {@link Channel#flush()} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture flush();, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                    region.release();, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +import io.netty.buffer.AbstractReferenceCounted;, +public class DefaultFileRegion extends AbstractReferenceCounted implements FileRegion {, +    protected void deallocate() {, +++ b/transport/src/main/java/io/netty/channel/FileRegion.java, +import io.netty.buffer.ReferenceCounted;, +, +public interface FileRegion extends ReferenceCounted {, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, + * Copyright 2013 The Netty Project, +import io.netty.channel.FileRegion;, +     * Writes the specified {@link FileRegion} to all {@link Channel}s in this, +     * group. Please note that this operation is asynchronous as, +     * {@link Channel#sendFile(FileRegion)} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture sendFile(FileRegion region);, +, +    /**, +     * Flush all {@link Channel} in this group. Please note that this operation, +     * is asynchronous as {@link Channel#flush()} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture flush();, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, + * Copyright 2013 The Netty Project, +import io.netty.channel.FileRegion;, +    public ChannelGroupFuture sendFile(FileRegion region) {, +        if (region == null) {, +            throw new NullPointerException("region");, +        }, +, +        Map<Integer, ChannelFuture> futures = new LinkedHashMap<Integer, ChannelFuture>(size());, +        for (Channel c: nonServerChannels.values()) {, +            BufUtil.retain(region);, +            futures.put(c.id(), c.sendFile(region));, +        }, +, +        BufUtil.release(region);, +        return new DefaultChannelGroupFuture(this, futures);, +    }, +]