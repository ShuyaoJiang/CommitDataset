[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        int count = nioBufferCount();, +        if (count == 1) {, +            return out.write(internalNioBuffer(index, length));, +        } else {, +    }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        int count = nioBufferCount();, +        if (count == 1) {, +            return out.write(internalNioBuffer(index, length));, +        } else {, +    }, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.nio.channels.Channels;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.WritableByteChannel;, +    @Test, +    public void testGatheringWritesHeap() throws Exception {, +        testGatheringWrites(buffer().order(order), buffer().order(order));, +    }, +, +    @Test, +    public void testGatheringWritesDirect() throws Exception {, +        testGatheringWrites(directBuffer().order(order), directBuffer().order(order));, +    }, +, +    @Test, +    public void testGatheringWritesMixes() throws Exception {, +        testGatheringWrites(buffer().order(order), directBuffer().order(order));, +    }, +, +    @Test, +    public void testGatheringWritesHeapPooled() throws Exception {, +        testGatheringWrites(PooledByteBufAllocator.DEFAULT.heapBuffer().order(order),, +                PooledByteBufAllocator.DEFAULT.heapBuffer().order(order));, +    }, +, +    @Test, +    public void testGatheringWritesDirectPooled() throws Exception {, +        testGatheringWrites(PooledByteBufAllocator.DEFAULT.directBuffer().order(order),, +                PooledByteBufAllocator.DEFAULT.directBuffer().order(order));, +    }, +, +    @Test, +    public void testGatheringWritesMixesPooled() throws Exception {, +        testGatheringWrites(PooledByteBufAllocator.DEFAULT.heapBuffer().order(order),, +                PooledByteBufAllocator.DEFAULT.directBuffer().order(order));, +    }, +, +    private static void testGatheringWrites(ByteBuf buf1, ByteBuf buf2) throws Exception {, +        CompositeByteBuf buf = freeLater(compositeBuffer());, +        buf.addComponent(buf1.writeBytes(new byte[]{1, 2}));, +        buf.addComponent(buf2.writeBytes(new byte[]{1, 2}));, +        buf.writerIndex(3);, +        buf.readerIndex(1);, +, +        TestGatheringByteChannel channel = new TestGatheringByteChannel();, +, +        buf.readBytes(channel, 2);, +, +        byte[] data = new byte[2];, +        buf.getBytes(1, data);, +        assertArrayEquals(data, channel.writtenBytes());, +    }, +, +    @Test, +    public void testGatheringWritesPartialHeap() throws Exception {, +        testGatheringWritesPartial(buffer().order(order), buffer().order(order), false);, +    }, +, +    @Test, +    public void testGatheringWritesPartialDirect() throws Exception {, +        testGatheringWritesPartial(directBuffer().order(order), directBuffer().order(order), false);, +    }, +, +    @Test, +    public void testGatheringWritesPartialMixes() throws Exception {, +        testGatheringWritesPartial(buffer().order(order), directBuffer().order(order), false);, +    }, +, +    @Test, +    public void testGatheringWritesPartialHeapSlice() throws Exception {, +        testGatheringWritesPartial(buffer().order(order), buffer().order(order), true);, +    }, +, +    @Test, +    public void testGatheringWritesPartialDirectSlice() throws Exception {, +        testGatheringWritesPartial(directBuffer().order(order), directBuffer().order(order), true);, +    }, +, +    @Test, +    public void testGatheringWritesPartialMixesSlice() throws Exception {, +        testGatheringWritesPartial(buffer().order(order), directBuffer().order(order), true);, +    }, +, +    @Test, +    public void testGatheringWritesPartialHeapPooled() throws Exception {, +        testGatheringWritesPartial(PooledByteBufAllocator.DEFAULT.heapBuffer().order(order),]