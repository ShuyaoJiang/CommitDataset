[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    private final LongCounter activeBytesHuge = PlatformDependent.newLongCounter();, +        PoolChunk<T> chunk = newUnpooledChunk(reqCapacity);, +        activeBytesHuge.add(chunk.chunkSize());, +        buf.initUnpooled(chunk, reqCapacity);, +            int size = chunk.chunkSize();, +            activeBytesHuge.add(-size);, +    @Override, +    public long numActiveBytes() {, +        long val = activeBytesHuge.value();, +        synchronized (this) {, +            for (int i = 0; i < chunkListMetrics.size(); i++) {, +                for (PoolChunkMetric m: chunkListMetrics.get(i)) {, +                    val += m.chunkSize();, +                }, +            }, +        }, +        return max(0, val);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    private final LongCounter activeBytesHuge = PlatformDependent.newLongCounter();, +        PoolChunk<T> chunk = newUnpooledChunk(reqCapacity);, +        activeBytesHuge.add(chunk.chunkSize());, +        buf.initUnpooled(chunk, reqCapacity);, +            int size = chunk.chunkSize();, +            activeBytesHuge.add(-size);, +    @Override, +    public long numActiveBytes() {, +        long val = activeBytesHuge.value();, +        synchronized (this) {, +            for (int i = 0; i < chunkListMetrics.size(); i++) {, +                for (PoolChunkMetric m: chunkListMetrics.get(i)) {, +                    val += m.chunkSize();, +                }, +            }, +        }, +        return max(0, val);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolArenaMetric.java, +, +    /**, +     * Return the number of active bytes that are currently allocated by the arena., +     */, +    long numActiveBytes();]