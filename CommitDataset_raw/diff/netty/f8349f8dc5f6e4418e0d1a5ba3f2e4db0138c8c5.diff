[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.net.NoRouteToHostException;, +import java.net.SocketException;, +, +        /**, +         * Appends the remote address to the message of the exceptions caused by connection attempt failure., +         */, +        protected final Throwable annotateConnectException(Throwable cause, SocketAddress remoteAddress) {, +            if (cause instanceof ConnectException) {, +                Throwable newT = new ConnectException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof NoRouteToHostException) {, +                Throwable newT = new NoRouteToHostException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof SocketException) {, +                Throwable newT = new SocketException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            }, +, +            return cause;, +        }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.net.NoRouteToHostException;, +import java.net.SocketException;, +, +        /**, +         * Appends the remote address to the message of the exceptions caused by connection attempt failure., +         */, +        protected final Throwable annotateConnectException(Throwable cause, SocketAddress remoteAddress) {, +            if (cause instanceof ConnectException) {, +                Throwable newT = new ConnectException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof NoRouteToHostException) {, +                Throwable newT = new NoRouteToHostException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof SocketException) {, +                Throwable newT = new SocketException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            }, +, +            return cause;, +        }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.net.ConnectException;, +import java.net.NoRouteToHostException;, +import java.net.SocketException;, +, +        /**, +         * Appends the remote address to the message of the exceptions caused by connection attempt failure., +         */, +        protected final Throwable annotateConnectException(Throwable cause, SocketAddress remoteAddress) {, +            if (cause instanceof ConnectException) {, +                Throwable newT = new ConnectException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof NoRouteToHostException) {, +                Throwable newT = new NoRouteToHostException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            } else if (cause instanceof SocketException) {, +                Throwable newT = new SocketException(cause.getMessage() + ": " + remoteAddress);, +                newT.setStackTrace(cause.getStackTrace());, +                cause = newT;, +            }, +, +            return cause;, +        }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                promise.tryFailure(annotateConnectException(t, remoteAddress));, +                fulfillConnectPromise(connectPromise, annotateConnectException(t, requestedRemoteAddress));, +++ b/transport/src/main/java/io/netty/channel/oio/AbstractOioChannel.java, +                safeSetFailure(promise, annotateConnectException(t, remoteAddress));]