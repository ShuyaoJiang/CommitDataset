[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.compression.ZlibCodecFactory;, +                new EmbeddedByteChannel(ZlibCodecFactory.newZlibEncoder(, +                        wrapper, compressionLevel, windowBits, memLevel)));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.compression.ZlibCodecFactory;, +                new EmbeddedByteChannel(ZlibCodecFactory.newZlibEncoder(, +                        wrapper, compressionLevel, windowBits, memLevel)));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecompressor.java, +import io.netty.handler.codec.compression.ZlibCodecFactory;, +            return new EmbeddedByteChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.GZIP));, +            return new EmbeddedByteChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.ZLIB_OR_NONE));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.compression.ZlibCodecFactory;, +                new EmbeddedByteChannel(ZlibCodecFactory.newZlibEncoder(, +                        wrapper, compressionLevel, windowBits, memLevel)));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecompressor.java, +import io.netty.handler.codec.compression.ZlibCodecFactory;, +            return new EmbeddedByteChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.GZIP));, +            return new EmbeddedByteChannel(ZlibCodecFactory.newZlibDecoder(ZlibWrapper.ZLIB_OR_NONE));, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.compression;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.util.internal.jzlib.JZlib;, +import io.netty.util.internal.jzlib.ZStream;, +, +public class JZlibDecoder extends ZlibDecoder {, +, +    private final ZStream z = new ZStream();, +    private byte[] dictionary;, +    private volatile boolean finished;, +, +    /**, +     * Creates a new instance with the default wrapper ({@link ZlibWrapper#ZLIB})., +     *, +     * @throws CompressionException if failed to initialize zlib, +     */, +    public JZlibDecoder() {, +        this(ZlibWrapper.ZLIB);, +    }, +, +    /**, +     * Creates a new instance with the specified wrapper., +     *, +     * @throws CompressionException if failed to initialize zlib, +     */, +    public JZlibDecoder(ZlibWrapper wrapper) {, +        if (wrapper == null) {, +            throw new NullPointerException("wrapper");, +        }, +, +        int resultCode = z.inflateInit(ZlibUtil.convertWrapperType(wrapper));, +        if (resultCode != JZlib.Z_OK) {, +            ZlibUtil.fail(z, "initialization failure", resultCode);, +        }, +    }, +, +    /**, +     * Creates a new instance with the specified preset dictionary. The wrapper, +     * is always {@link ZlibWrapper#ZLIB} because it is the only format that, +     * supports the preset dictionary., +     *, +     * @throws CompressionException if failed to initialize zlib, +     */, +    public JZlibDecoder(byte[] dictionary) {, +        if (dictionary == null) {, +            throw new NullPointerException("dictionary");, +        }, +        this.dictionary = dictionary;, +, +        int resultCode;, +        resultCode = z.inflateInit(JZlib.W_ZLIB);, +        if (resultCode != JZlib.Z_OK) {, +            ZlibUtil.fail(z, "initialization failure", resultCode);, +        }, +    }, +, +    /**, +     * Returns {@code true} if and only if the end of the compressed stream, +     * has been reached., +     */, +    @Override, +    public boolean isClosed() {]