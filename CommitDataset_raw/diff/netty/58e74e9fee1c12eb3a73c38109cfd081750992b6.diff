[+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +        URL url;, +        if (loader == null) {, +            url = ClassLoader.getSystemResource(path);, +        } else {, +            url = loader.getResource(path);, +        }, +                    if (loader == null) {, +                        url = ClassLoader.getSystemResource(fileName);, +                    } else {, +                    }, +            return Class.forName(helper.getName(), false, loader);, +            if (loader == null) {, +                // cannot defineClass inside bootstrap class loader, +                throw e1;, +            }, +++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +        URL url;, +        if (loader == null) {, +            url = ClassLoader.getSystemResource(path);, +        } else {, +            url = loader.getResource(path);, +        }, +                    if (loader == null) {, +                        url = ClassLoader.getSystemResource(fileName);, +                    } else {, +                    }, +            return Class.forName(helper.getName(), false, loader);, +            if (loader == null) {, +                // cannot defineClass inside bootstrap class loader, +                throw e1;, +            }, +++ b/common/src/test/java/io/netty/util/internal/NativeLibraryLoaderTest.java, +import java.lang.reflect.Method;, +    private static final Method getSupressedMethod = getGetSuppressed();, +, +            if (getSupressedMethod != null) {, +                verifySuppressedException(error, UnsatisfiedLinkError.class);, +            }, +        }, +    }, +, +    @Test, +    public void testFileNotFoundWithNullClassLoader() {, +        try {, +            NativeLibraryLoader.load(UUID.randomUUID().toString(), null);, +            fail();, +        } catch (UnsatisfiedLinkError error) {, +            assertTrue(error.getCause() instanceof FileNotFoundException);, +            if (getSupressedMethod != null) {, +                verifySuppressedException(error, ClassNotFoundException.class);, +            }, +        }, +    }, +, +    private static void verifySuppressedException(UnsatisfiedLinkError error,, +            Class<?> expectedSuppressedExceptionClass) {, +        try {, +            Throwable[] suppressed = (Throwable[]) getSupressedMethod.invoke(error.getCause());, +            assertTrue(suppressed.length == 1);, +            assertTrue(suppressed[0] instanceof UnsatisfiedLinkError);, +            suppressed = (Throwable[]) getSupressedMethod.invoke(suppressed[0]);, +            assertTrue(suppressed.length == 1);, +            assertTrue(expectedSuppressedExceptionClass.isInstance(suppressed[0]));, +        } catch (Exception e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    private static Method getGetSuppressed() {, +        if (PlatformDependent.javaVersion() < 7) {, +            return null;, +        }, +        try {, +            return Throwable.class.getDeclaredMethod("getSuppressed");, +        } catch (NoSuchMethodException e) {, +            throw new RuntimeException(e);]