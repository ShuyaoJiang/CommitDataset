[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, +        if (maxAge < -1) {, +            throw new IllegalArgumentException(, +                    "maxAge must be either -1, 0, or a positive integer: " +, +                    maxAge);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, +        if (maxAge < -1) {, +            throw new IllegalArgumentException(, +                    "maxAge must be either -1, 0, or a positive integer: " +, +                    maxAge);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +    public boolean isChunked() {, +        if (chunked) {, +            return true;, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +        }, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +        if (content.readable() && isChunked()) {, +                    "non-empty content disallowed if this.chunked == true");, +        buf.append(", chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, +        if (maxAge < -1) {, +            throw new IllegalArgumentException(, +                    "maxAge must be either -1, 0, or a positive integer: " +, +                    maxAge);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +    public boolean isChunked() {, +        if (chunked) {, +            return true;, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +        }, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +        if (content.readable() && isChunked()) {, +                    "non-empty content disallowed if this.chunked == true");, +        buf.append(", chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, +        if (maxAge < -1) {, +            throw new IllegalArgumentException(, +                    "maxAge must be either -1, 0, or a positive integer: " +, +                    maxAge);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +    public boolean isChunked() {, +        if (chunked) {, +            return true;, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +        }, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +        if (content.readable() && isChunked()) {, +                    "non-empty content disallowed if this.chunked == true");, +        buf.append(", chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpResponse.java, +        buf.append("(chunked: ");, +        buf.append(isChunked());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +            long maxAge = -1;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java, +        if (maxAge < -1) {, +            throw new IllegalArgumentException(, +                    "maxAge must be either -1, 0, or a positive integer: " +, +                    maxAge);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +    public boolean isChunked() {, +        if (chunked) {]