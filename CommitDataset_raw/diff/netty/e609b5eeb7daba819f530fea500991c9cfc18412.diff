[+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +                boolean endOfInput;, +                long inputLength;, +                    endOfInput = in.isEndOfInput();, +                    inputLength = in.length();, +                    closeInput(in);, +                } catch (Exception e) {, +                    closeInput(in);, +                    currentWrite.fail(e);, +                    if (logger.isWarnEnabled()) {, +                        logger.warn(ChunkedInput.class.getSimpleName() + " failed", e);, +                    }, +                    continue;, +                }, +, +                if (!endOfInput) {, +                    currentWrite.success(inputLength);, +                    currentWrite.fail(t);, +                                // read state of the input in local variables before closing it, +                                long inputProgress = chunks.progress();, +                                long inputLength = chunks.length();, +                                closeInput(chunks);, +                                currentWrite.progress(inputProgress, inputLength);, +                                currentWrite.success(inputLength);, +                                closeInput(chunks);, +                                closeInput(chunks);, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +                boolean endOfInput;, +                long inputLength;, +                    endOfInput = in.isEndOfInput();, +                    inputLength = in.length();, +                    closeInput(in);, +                } catch (Exception e) {, +                    closeInput(in);, +                    currentWrite.fail(e);, +                    if (logger.isWarnEnabled()) {, +                        logger.warn(ChunkedInput.class.getSimpleName() + " failed", e);, +                    }, +                    continue;, +                }, +, +                if (!endOfInput) {, +                    currentWrite.success(inputLength);, +                    currentWrite.fail(t);, +                                // read state of the input in local variables before closing it, +                                long inputProgress = chunks.progress();, +                                long inputLength = chunks.length();, +                                closeInput(chunks);, +                                currentWrite.progress(inputProgress, inputLength);, +                                currentWrite.success(inputLength);, +                                closeInput(chunks);, +                                closeInput(chunks);, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import io.netty.channel.ChannelPromise;, +import java.util.concurrent.CountDownLatch;, +import static java.util.concurrent.TimeUnit.*;, +    @Test, +    public void testCloseSuccessfulChunkedInput() {, +        int chunks = 10;, +        TestChunkedInput input = new TestChunkedInput(chunks);, +        EmbeddedChannel ch = new EmbeddedChannel(new ChunkedWriteHandler());, +, +        assertTrue(ch.writeOutbound(input));, +, +        for (int i = 0; i < chunks; i++) {, +            ByteBuf buf = ch.readOutbound();, +            assertEquals(i, buf.readInt());, +            buf.release();, +        }, +, +        assertTrue(input.isClosed());, +        assertFalse(ch.finish());, +    }, +, +    @Test, +    public void testCloseFailedChunkedInput() {, +        Exception error = new Exception("Unable to produce a chunk");, +        ThrowingChunkedInput input = new ThrowingChunkedInput(error);, +, +        EmbeddedChannel ch = new EmbeddedChannel(new ChunkedWriteHandler());, +, +        try {, +            ch.writeOutbound(input);, +            fail("Exception expected");, +        } catch (Exception e) {, +            assertEquals(error, e);, +        }, +, +        assertTrue(input.isClosed());, +        assertFalse(ch.finish());, +    }, +, +    @Test, +    public void testWriteListenerInvokedAfterSuccessfulChunkedInputClosed() throws Exception {, +        final TestChunkedInput input = new TestChunkedInput(2);, +        EmbeddedChannel ch = new EmbeddedChannel(new ChunkedWriteHandler());, +, +        final AtomicBoolean inputClosedWhenListenerInvoked = new AtomicBoolean();, +        final CountDownLatch listenerInvoked = new CountDownLatch(1);, +]