[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +, +    /**, +     * Formats the host string of an address so it can be used for computing an HTTP component, +     * such as an URL or a Host header, +     * @param addr the address, +     * @return the formatted String, +     */, +    public static String formatHostnameForHttp(InetSocketAddress addr) {, +        String hostString = NetUtil.getHostname(addr);, +        if (NetUtil.isValidIpV6Address(hostString)) {, +            if (!addr.isUnresolved()) {, +                hostString = NetUtil.toAddressString(addr.getAddress());, +            }, +            return "[" + hostString + "]";, +        }, +        return hostString;, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +, +    /**, +     * Formats the host string of an address so it can be used for computing an HTTP component, +     * such as an URL or a Host header, +     * @param addr the address, +     * @return the formatted String, +     */, +    public static String formatHostnameForHttp(InetSocketAddress addr) {, +        String hostString = NetUtil.getHostname(addr);, +        if (NetUtil.isValidIpV6Address(hostString)) {, +            if (!addr.isUnresolved()) {, +                hostString = NetUtil.toAddressString(addr.getAddress());, +            }, +            return "[" + hostString + "]";, +        }, +        return hostString;, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpUtilTest.java, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +    @Test, +    public void testFormatHostnameForHttpFromResolvedAddressWithHostname() throws Exception {, +        InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getByName("localhost"), 8080);, +        assertEquals("localhost", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +, +    @Test, +    public void testFormatHostnameForHttpFromUnesolvedAddressWithHostname() {, +        InetSocketAddress socketAddress = InetSocketAddress.createUnresolved("localhost", 80);, +        assertEquals("localhost", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +, +    @Test, +    public void testIpv6() throws Exception  {, +        InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getByName("::1"), 8080);, +        assertEquals("[::1]", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +, +    @Test, +    public void testIpv6Unresolved()  {, +        InetSocketAddress socketAddress = InetSocketAddress.createUnresolved("::1", 8080);, +        assertEquals("[::1]", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +, +    @Test, +    public void testIpv4() throws Exception  {, +        InetSocketAddress socketAddress = new InetSocketAddress(InetAddress.getByName("10.0.0.1"), 8080);, +        assertEquals("10.0.0.1", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +, +    @Test, +    public void testIpv4Unresolved()  {, +        InetSocketAddress socketAddress = InetSocketAddress.createUnresolved("10.0.0.1", 8080);, +        assertEquals("10.0.0.1", HttpUtil.formatHostnameForHttp(socketAddress));, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +import io.netty.util.NetUtil;, +import java.net.InetSocketAddress;, +, +    /**, +     * Formats the host string of an address so it can be used for computing an HTTP component, +     * such as an URL or a Host header, +     * @param addr the address, +     * @return the formatted String, +     */, +    public static String formatHostnameForHttp(InetSocketAddress addr) {, +        String hostString = NetUtil.getHostname(addr);, +        if (NetUtil.isValidIpV6Address(hostString)) {, +            if (!addr.isUnresolved()) {, +                hostString = NetUtil.toAddressString(addr.getAddress());, +            }, +            return "[" + hostString + "]";, +        }, +        return hostString;, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpUtilTest.java, +import java.net.InetAddress;]