[+++ b/common/src/main/java/io/netty/util/Recycler.java, +    @SuppressWarnings("rawtypes"), +    private static final Handle NOOP_HANDLE = new Handle() {, +        @Override, +        public void recycle(Object object) {, +            // NOOP, +        }, +    };, +    // TODO: Some arbitrary large number - should adjust as we get more production experience., +    private static final int DEFAULT_INITIAL_MAX_CAPACITY = 262144;, +        int maxCapacity = SystemPropertyUtil.getInt("io.netty.recycler.maxCapacity", DEFAULT_INITIAL_MAX_CAPACITY);, +            if (DEFAULT_MAX_CAPACITY == 0) {, +                logger.debug("-Dio.netty.recycler.maxCapacity.maxCapacity: disabled");, +            } else {, +                logger.debug("-Dio.netty.recycler.maxCapacity.maxCapacity: {}", DEFAULT_MAX_CAPACITY);, +            }, +        if (maxCapacity == 0) {, +            return newObject((Handle<T>) NOOP_HANDLE);, +        }, +        if (handle == NOOP_HANDLE) {, +            return false;, +        }, +, +++ b/common/src/main/java/io/netty/util/Recycler.java, +    @SuppressWarnings("rawtypes"), +    private static final Handle NOOP_HANDLE = new Handle() {, +        @Override, +        public void recycle(Object object) {, +            // NOOP, +        }, +    };, +    // TODO: Some arbitrary large number - should adjust as we get more production experience., +    private static final int DEFAULT_INITIAL_MAX_CAPACITY = 262144;, +        int maxCapacity = SystemPropertyUtil.getInt("io.netty.recycler.maxCapacity", DEFAULT_INITIAL_MAX_CAPACITY);, +            if (DEFAULT_MAX_CAPACITY == 0) {, +                logger.debug("-Dio.netty.recycler.maxCapacity.maxCapacity: disabled");, +            } else {, +                logger.debug("-Dio.netty.recycler.maxCapacity.maxCapacity: {}", DEFAULT_MAX_CAPACITY);, +            }, +        if (maxCapacity == 0) {, +            return newObject((Handle<T>) NOOP_HANDLE);, +        }, +        if (handle == NOOP_HANDLE) {, +            return false;, +        }, +, +++ b/common/src/test/java/io/netty/util/RecyclerTest.java, +    @Test, +    public void testRecycleDisable() {, +        DisabledRecyclableObject object = DisabledRecyclableObject.newInstance();, +        object.recycle();, +        DisabledRecyclableObject object2 = DisabledRecyclableObject.newInstance();, +        assertNotSame(object, object2);, +        object2.recycle();, +    }, +, +    static final class DisabledRecyclableObject {, +, +        private static final Recycler<DisabledRecyclableObject> RECYCLER = new Recycler<DisabledRecyclableObject>(-1) {, +            @Override, +            protected DisabledRecyclableObject newObject(Handle handle) {, +                return new DisabledRecyclableObject(handle);, +            }, +        };, +, +        private final Recycler.Handle handle;, +, +        private DisabledRecyclableObject(Recycler.Handle handle) {, +            this.handle = handle;, +        }, +, +        public static DisabledRecyclableObject newInstance() {, +            return RECYCLER.get();, +        }, +, +        public void recycle() {, +            RECYCLER.recycle(this, handle);, +        }, +    }, +]