[+++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java, +import org.jboss.netty.util.ConcurrentHashMap;, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +        new ConcurrentHashMap<String, LocalAddress>();, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java, +import org.jboss.netty.util.ConcurrentHashMap;, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +        new ConcurrentHashMap<String, LocalAddress>();, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Class<?>, Integer>();, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java, +import org.jboss.netty.util.ConcurrentHashMap;, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +        new ConcurrentHashMap<String, LocalAddress>();, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Class<?>, Integer>();, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +++ b/src/main/java/org/jboss/netty/channel/local/LocalAddress.java, +import org.jboss.netty.util.ConcurrentHashMap;, +    // FIXME: Memory leak - use ConcurrentWeakValueHashMap, +        new ConcurrentHashMap<String, LocalAddress>();, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentIdentityWeakKeyHashMap;, +        new ConcurrentIdentityWeakKeyHashMap<Class<?>, Integer>();, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/util/ConcurrentIdentityWeakKeyHashMap.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +/*, + * Written by Doug Lea with assistance from members of JCP JSR-166, + * Expert Group and released to the public domain, as explained at, + * http://creativecommons.org/licenses/publicdomain, + */, +package org.jboss.netty.util;, +, +import java.io.Serializable;, +import java.lang.ref.Reference;, +import java.lang.ref.ReferenceQueue;, +import java.lang.ref.WeakReference;, +import java.util.AbstractCollection;, +import java.util.AbstractMap;, +import java.util.AbstractSet;, +import java.util.Collection;, +import java.util.ConcurrentModificationException;, +import java.util.Enumeration;, +import java.util.Hashtable;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;]