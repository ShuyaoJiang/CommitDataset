[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that aggregates an {@link HttpMessage}, + * and its following {@link HttpChunk}s into an {@link HttpMessage} with no, + * following {@link HttpChunk}s.  It is useful when you don't want to take, + * care of HTTP messages whose transfer encoding is 'chunked'., + *, +    /**, +     * Creates a new instance., +     *, +     * @param maxContentLength, +     *        the maximum length of the aggregated content., +     *        If the length of the aggregated content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that aggregates an {@link HttpMessage}, + * and its following {@link HttpChunk}s into an {@link HttpMessage} with no, + * following {@link HttpChunk}s.  It is useful when you don't want to take, + * care of HTTP messages whose transfer encoding is 'chunked'., + *, +    /**, +     * Creates a new instance., +     *, +     * @param maxContentLength, +     *        the maximum length of the aggregated content., +     *        If the length of the aggregated content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java, +import org.jboss.netty.channel.ChannelPipeline;, + * Decodes {@link ChannelBuffer}s into {@link HttpMessage}s and, + * {@link HttpChunk}s., + *, + * <h3>Parameters that prevents excessive memory consumption</h3>, + * <table>, + * <tr>, + * <th>Name</th><th>Meaning</th>, + * </tr>, + * <tr>, + * <td>{@code maxInitialLineLength}</td>, + * <td>The maximum length of the initial line, + *     (e.g. {@code "GET / HTTP/1.0"} or {@code "HTTP/1.0 200 OK"}), + *     If the length of the initial line exceeds this value, a, + *     {@link TooLongFrameException} will be raised.</td>, + * </tr>, + * <tr>, + * <td>{@code maxHeaderSize}</td>, + * <td>The maximum length of all headers.  If the sum of the length of each, + *     header exceeds this value, a {@link TooLongFrameException} will be raised.</td>, + * </tr>, + * <tr>, + * <td>{@code maxChunkSize}</td>, + * <td>The maximum length of the content or each chunk.  If the content length, + *     exceeds this value, the transfer encoding of the decoded message will be, + *     converted to 'chunked' and the content will be split into multiple, + *     {@link HttpChunk}s.  If the transfer encoding of the HTTP message is, + *     'chunked' already, each chunk will be split into smaller chunks if the, + *     length of the chunk exceeds this value.  If you prefer not to handle, + *     {@link HttpChunk}s in your handler, insert {@link HttpChunkAggregator}, + *     after this decoder in the {@link ChannelPipeline}.</td>, + * </tr>, + * </table>, + *, + * <h3>Extensibility</h3>, + *, + * Please note that this decoder is designed to be extended to implement, + * a protocol derived from HTTP, such as, + * <a href="http://en.wikipedia.org/wiki/Real_Time_Streaming_Protocol">RTSP</a> and, + * <a href="http://en.wikipedia.org/wiki/Internet_Content_Adaptation_Protocol">ICAP</a>., + * To implement the decoder of such a derived protocol, extend this class and, + * implement all abstract methods properly., +     * The internal state of {@link HttpMessageDecoder}., +     * <em>Internal use only</em>., +     *, +    /**, +     * Creates a new instance with the default, +     * {@code maxInitialLineLength (4096}}, {@code maxHeaderSize (4096)}, and, +     * {@code maxChunkSize (4096)}., +     */, +    /**, +     * Creates a new instance with the specified parameters., +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that aggregates an {@link HttpMessage}, + * and its following {@link HttpChunk}s into an {@link HttpMessage} with no, + * following {@link HttpChunk}s.  It is useful when you don't want to take, + * care of HTTP messages whose transfer encoding is 'chunked'., + *, +    /**, +     * Creates a new instance., +     *, +     * @param maxContentLength, +     *        the maximum length of the aggregated content., +     *        If the length of the aggregated content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java]