[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +        int size = calculateRemainingSize();, +            ByteBuf buffer = fillByteBuf();, +            HttpContent chunk;, +                chunk = encodeNextChunkMultipart(size);, +                chunk = encodeNextChunkUrlEncoded(size);, +            }, +                // NextChunk from data, +            size = calculateRemainingSize();, +            return lastChunk();, +                size = calculateRemainingSize();, +        return lastChunk();, +    }, +, +    private int calculateRemainingSize() {, +        int size = HttpPostBodyUtil.chunkSize;, +        if (currentBuffer != null) {, +            size -= currentBuffer.readableBytes();, +        }, +        return size;, +    }, +, +    private HttpContent lastChunk() {, +        // NextChunk as last non empty from buffer, +        ByteBuf buffer = currentBuffer;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +        int size = calculateRemainingSize();, +            ByteBuf buffer = fillByteBuf();, +            HttpContent chunk;, +                chunk = encodeNextChunkMultipart(size);, +                chunk = encodeNextChunkUrlEncoded(size);, +            }, +                // NextChunk from data, +            size = calculateRemainingSize();, +            return lastChunk();, +                size = calculateRemainingSize();, +        return lastChunk();, +    }, +, +    private int calculateRemainingSize() {, +        int size = HttpPostBodyUtil.chunkSize;, +        if (currentBuffer != null) {, +            size -= currentBuffer.readableBytes();, +        }, +        return size;, +    }, +, +    private HttpContent lastChunk() {, +        // NextChunk as last non empty from buffer, +        ByteBuf buffer = currentBuffer;, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoderTest.java, +import io.netty.handler.codec.http.HttpConstants;, +import io.netty.handler.codec.http.LastHttpContent;, +import java.io.ByteArrayInputStream;, +import java.nio.charset.Charset;, +import static org.junit.Assert.assertNotNull;, +, +    @Test, +    public void testDataIsMultipleOfChunkSize1() throws Exception {, +        DefaultHttpDataFactory factory = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);, +        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                HttpMethod.POST, "http://localhost");, +        HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(factory, request, true,, +                HttpConstants.DEFAULT_CHARSET, HttpPostRequestEncoder.EncoderMode.RFC1738);, +, +        MemoryFileUpload first = new MemoryFileUpload("resources", "", "application/json", null,, +                Charset.forName("UTF-8"), -1);, +        first.setMaxSize(-1);, +        first.setContent(new ByteArrayInputStream(new byte[7955]));, +        encoder.addBodyHttpData(first);, +, +        MemoryFileUpload second = new MemoryFileUpload("resources2", "", "application/json", null,, +                Charset.forName("UTF-8"), -1);, +        second.setMaxSize(-1);, +        second.setContent(new ByteArrayInputStream(new byte[7928]));, +        encoder.addBodyHttpData(second);, +, +        assertNotNull(encoder.finalizeRequest());, +, +        checkNextChunkSize(encoder, 8096);, +        checkNextChunkSize(encoder, 8096);, +, +        HttpContent httpContent = encoder.readChunk((ByteBufAllocator) null);, +        assertTrue("Expected LastHttpContent is not received", httpContent instanceof LastHttpContent);, +        httpContent.release();, +, +        assertTrue("Expected end of input is not receive", encoder.isEndOfInput());, +    }, +, +    @Test, +    public void testDataIsMultipleOfChunkSize2() throws Exception {, +        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                HttpMethod.POST, "http://localhost");, +        HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(request, true);, +        int length = 7943;, +        char[] array = new char[length];, +        Arrays.fill(array, 'a');, +        String longText = new String(array);, +        encoder.addBodyAttribute("foo", longText);, +]