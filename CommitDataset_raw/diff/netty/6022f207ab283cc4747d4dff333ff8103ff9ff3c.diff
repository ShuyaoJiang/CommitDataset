[+++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibDecoder.java, +        synchronized (z) {, +    }, +        synchronized (z) {, +    }, +        synchronized (z) {, +                        if (resultCode == JZlib.Z_STREAM_END) {, +                            finished = true; // Do not decode anymore., +                            z.inflateEnd();, +                        }, +}, +++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibDecoder.java, +        synchronized (z) {, +    }, +        synchronized (z) {, +    }, +        synchronized (z) {, +                        if (resultCode == JZlib.Z_STREAM_END) {, +                            finished = true; // Do not decode anymore., +                            z.inflateEnd();, +                        }, +}, +++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibEncoder.java, +    private static final byte[] EMPTY_ARRAY = new byte[0];, +, +        synchronized (z) {, +    }, +        synchronized (z) {, +    }, +, +    public ChannelFuture close(Channel channel) {, +        return finishEncode(channel.getPipeline().getContext(this), null);, +    }, +, +    public boolean isClosed() {, +        return finished.get();, +    }, +        if (!(msg instanceof ChannelBuffer) || finished.get()) {, +        ChannelBuffer result;, +        synchronized (z) {, +                    result = ctx.getChannel().getConfig().getBufferFactory().getBuffer(, +                    result = ChannelBuffers.EMPTY_BUFFER;, +        return result;, +    }, +, +            if (evt != null) {, +                ctx.sendDownstream(evt);, +            }, +            return Channels.succeededFuture(evt.getChannel());, +        ChannelBuffer footer;, +        ChannelFuture future;, +        synchronized (z) {, +                z.next_in = EMPTY_ARRAY;, +                // Write the ADLER32 checksum (stream footer)., +                    footer = null;, +                    footer =, +                                out, 0, z.next_out_index);, +                    // Note that we should never use a SucceededChannelFuture, +                    // here just in case any downstream handler or a sink wants, +                    // to notify a write error., +                    footer = ChannelBuffers.EMPTY_BUFFER;, +                z.deflateEnd();, +, +, +        if (footer != null) {, +            Channels.write(ctx, future, footer);, +        }, +, +        if (evt != null) {, +            future.addListener(new ChannelFutureListener() {, +                public void operationComplete(ChannelFuture future) throws Exception {, +                    ctx.sendDownstream(evt);, +                }, +            });, +        }, +, +        return future;, +    }]