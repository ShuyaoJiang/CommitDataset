[+++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    static {, +        assert EMPTY_BUFFER instanceof EmptyByteBuf: "EMPTY_BUFFER must be an EmptyByteBuf.";, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    static {, +        assert EMPTY_BUFFER instanceof EmptyByteBuf: "EMPTY_BUFFER must be an EmptyByteBuf.";, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/EmptyByteBufTest.java, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +, +    @Test, +    public void testArray() {, +        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);, +        assertThat(empty.hasArray(), is(true));, +        assertThat(empty.array().length, is(0));, +        assertThat(empty.arrayOffset(), is(0));, +    }, +, +    @Test, +    public void testNioBuffer() {, +        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);, +        assertThat(empty.nioBufferCount(), is(1));, +        assertThat(empty.nioBuffer().position(), is(0));, +        assertThat(empty.nioBuffer().limit(), is(0));, +        assertThat(empty.nioBuffer(), is(sameInstance(empty.nioBuffer())));, +        assertThat(empty.nioBuffer(), is(sameInstance(empty.internalNioBuffer(0, 0))));, +    }, +, +    @Test, +    public void testMemoryAddress() {, +        EmptyByteBuf empty = new EmptyByteBuf(UnpooledByteBufAllocator.DEFAULT);, +        if (empty.hasMemoryAddress()) {, +            assertThat(empty.memoryAddress(), is(not(0L)));, +        } else {, +            try {, +                empty.memoryAddress();, +                fail();, +            } catch (UnsupportedOperationException ignored) {, +                // Ignore., +            }, +        }, +    }]