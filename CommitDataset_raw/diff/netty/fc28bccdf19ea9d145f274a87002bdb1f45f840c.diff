[+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +            ch.register(unwrappedSelector, interestOps, task);, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +            ch.register(unwrappedSelector, interestOps, task);, +++ b/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java, +import java.net.InetSocketAddress;, +import java.nio.channels.SelectionKey;, +import java.nio.channels.SocketChannel;, +, +    @Test(timeout = 1000), +    public void testSelectableChannel() throws Exception {, +        NioEventLoopGroup group = new NioEventLoopGroup(1);, +        NioEventLoop loop = (NioEventLoop) group.next();, +, +        try {, +            Channel channel = new NioServerSocketChannel();, +            loop.register(channel).syncUninterruptibly();, +            channel.bind(new InetSocketAddress(0)).syncUninterruptibly();, +, +            SocketChannel selectableChannel = SocketChannel.open();, +            selectableChannel.configureBlocking(false);, +            selectableChannel.connect(channel.localAddress());, +, +            final CountDownLatch latch = new CountDownLatch(1);, +, +            loop.register(selectableChannel, SelectionKey.OP_CONNECT, new NioTask<SocketChannel>() {, +                @Override, +                public void channelReady(SocketChannel ch, SelectionKey key) {, +                    latch.countDown();, +                }, +, +                @Override, +                public void channelUnregistered(SocketChannel ch, Throwable cause) {, +                }, +            });, +, +            latch.await();, +, +            selectableChannel.close();, +            channel.close().syncUninterruptibly();, +        } finally {, +            group.shutdownGracefully();, +        }, +    }]