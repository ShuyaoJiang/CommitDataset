[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +        handshakeFuture = ctx.newFuture();, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +        handshakeFuture = ctx.newFuture();, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +        handshakeFuture = ctx.newFuture();, +++ /dev/null, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import static org.junit.Assert.*;, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelInboundStreamHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.ssl.SslHandler;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.security.InvalidAlgorithmParameterException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.Security;, +import java.security.cert.CertificateException;, +import java.security.cert.X509Certificate;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicReference;, +, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.ManagerFactoryParameters;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactorySpi;, +import javax.net.ssl.X509TrustManager;, +, +import org.junit.Test;, +, +public class SocketSslEchoTest extends AbstractSocketTest {, +, +    private static final Random random = new Random();, +    static final byte[] data = new byte[1048576];, +, +    static {, +        random.nextBytes(data);, +    }, +, +    @Test, +    public void testSslEcho() throws Throwable {, +        run();, +    }, +, +    public void testSslEcho(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        final EchoHandler sh = new EchoHandler(true);, +        final EchoHandler ch = new EchoHandler(false);, +, +        final SSLEngine sse = BogusSslContextFactory.getServerContext().createSSLEngine();, +        final SSLEngine cse = BogusSslContextFactory.getClientContext().createSSLEngine();, +        sse.setUseClientMode(false);, +        cse.setUseClientMode(true);, +, +        sb.childHandler(new ChannelInitializer<SocketChannel>() {, +            @Override, +            public void initChannel(SocketChannel sch) throws Exception {, +                sch.pipeline().addFirst("ssl", new SslHandler(sse));, +                sch.pipeline().addLast("handler", sh);, +            }, +        });, +, +        cb.handler(new ChannelInitializer<SocketChannel>() {, +            @Override, +            public void initChannel(SocketChannel sch) throws Exception {, +                sch.pipeline().addFirst("ssl", new SslHandler(cse));, +                sch.pipeline().addLast("handler", ch);, +            }, +        });, +]