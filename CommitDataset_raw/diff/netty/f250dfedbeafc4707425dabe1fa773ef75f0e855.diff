[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +                    if (future.isSuccess()) {, +                        if (errorCode != NO_ERROR.code()) {, +                            ctx.close();, +                        }, +                    } else {, +                        if (logger.isErrorEnabled()) {, +                            logger.error(, +                                   format("Sending GOAWAY failed: lastStreamId '%d', errorCode '%d', debugData '%s'.",, +                                           lastStreamId, errorCode, debugData), future.cause());, +                        }, +                        ctx.close();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +                    if (future.isSuccess()) {, +                        if (errorCode != NO_ERROR.code()) {, +                            ctx.close();, +                        }, +                    } else {, +                        if (logger.isErrorEnabled()) {, +                            logger.error(, +                                   format("Sending GOAWAY failed: lastStreamId '%d', errorCode '%d', debugData '%s'.",, +                                           lastStreamId, errorCode, debugData), future.cause());, +                        }, +                        ctx.close();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2LifecycleManager.java, +     * Prevents the peer from creating streams and close the connection if {@code errorCode} is not, +     * {@link Http2Error#NO_ERROR}. After this call the peer is not allowed to create any new streams and the local, +     * endpoint will be limited to creating streams with {@code stream identifier <= lastStreamId}. This may result in, +     * sending a {@code GO_AWAY} frame (assuming we have not already sent one with, +     * {@code Last-Stream-ID <= lastStreamId}), or may just return success if a {@code GO_AWAY} has previously been, +     * sent., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +                    if (future.isSuccess()) {, +                        if (errorCode != NO_ERROR.code()) {, +                            ctx.close();, +                        }, +                    } else {, +                        if (logger.isErrorEnabled()) {, +                            logger.error(, +                                   format("Sending GOAWAY failed: lastStreamId '%d', errorCode '%d', debugData '%s'.",, +                                           lastStreamId, errorCode, debugData), future.cause());, +                        }, +                        ctx.close();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2LifecycleManager.java, +     * Prevents the peer from creating streams and close the connection if {@code errorCode} is not, +     * {@link Http2Error#NO_ERROR}. After this call the peer is not allowed to create any new streams and the local, +     * endpoint will be limited to creating streams with {@code stream identifier <= lastStreamId}. This may result in, +     * sending a {@code GO_AWAY} frame (assuming we have not already sent one with, +     * {@code Last-Stream-ID <= lastStreamId}), or may just return success if a {@code GO_AWAY} has previously been, +     * sent., +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +    @SuppressWarnings("unchecked"), +    @Test, +        when(future.isDone()).thenReturn(true);, +        when(future.isSuccess()).thenReturn(true);, +        when(frameWriter.writeGoAway(eq(ctx), eq(STREAM_ID), eq(errorCode), eq(data), eq(promise))).thenReturn(future);, +        doAnswer(new Answer<Void>() {, +            @Override, +            public Void answer(InvocationOnMock invocation) throws Throwable {, +                invocation.getArgumentAt(0, GenericFutureListener.class).operationComplete(future);, +                return null;, +            }, +        }).when(future).addListener(any(GenericFutureListener.class));, +        handler = newHandler();, +        verify(ctx).close();]