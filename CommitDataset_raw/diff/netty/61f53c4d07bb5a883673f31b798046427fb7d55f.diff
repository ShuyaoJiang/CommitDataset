[+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +        doFlush(ctx);, +    private void doFlush(final ChannelHandlerContext ctx) throws Exception {, +            return;, +        boolean requiresFlush = true;, +                // Flush each chunk to conserve memory, +                ctx.flush();, +                requiresFlush = false;, +                requiresFlush = true;, +        if (requiresFlush) {, +            ctx.flush();, +        }, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +        doFlush(ctx);, +    private void doFlush(final ChannelHandlerContext ctx) throws Exception {, +            return;, +        boolean requiresFlush = true;, +                // Flush each chunk to conserve memory, +                ctx.flush();, +                requiresFlush = false;, +                requiresFlush = true;, +        if (requiresFlush) {, +            ctx.flush();, +        }, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +    @Test, +    public void testUnchunkedData() throws IOException {, +        check(Unpooled.wrappedBuffer(BYTES));, +, +        check(Unpooled.wrappedBuffer(BYTES), Unpooled.wrappedBuffer(BYTES), Unpooled.wrappedBuffer(BYTES));, +    }, +, +    private static void check(Object... inputs) {, +        for (Object input: inputs) {]