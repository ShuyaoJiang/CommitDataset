[+++ b/buffer/src/main/java/io/netty/buffer/MessageBufs.java, +    public static <T> MessageBuf<T> buffer() {, +    public static <T> MessageBuf<T> buffer(int initialCapacity) {, +    public static <T> MessageBuf<T> wrappedBuffer(Queue<T> queue) {, +++ b/buffer/src/main/java/io/netty/buffer/MessageBufs.java, +    public static <T> MessageBuf<T> buffer() {, +    public static <T> MessageBuf<T> buffer(int initialCapacity) {, +    public static <T> MessageBuf<T> wrappedBuffer(Queue<T> queue) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +import io.netty.buffer.MessageBuf;, +import io.netty.buffer.MessageBufs;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundMessageHandler<Object>, ChannelOutboundMessageHandler<Object> {, +    public MessageBuf<Object> newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +    public MessageBuf<Object> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +++ b/buffer/src/main/java/io/netty/buffer/MessageBufs.java, +    public static <T> MessageBuf<T> buffer() {, +    public static <T> MessageBuf<T> buffer(int initialCapacity) {, +    public static <T> MessageBuf<T> wrappedBuffer(Queue<T> queue) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +import io.netty.buffer.MessageBuf;, +import io.netty.buffer.MessageBufs;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundMessageHandler<Object>, ChannelOutboundMessageHandler<Object> {, +    public MessageBuf<Object> newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +    public MessageBuf<Object> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteCodec.java, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundByteHandler;, +        implements ChannelInboundByteHandler, ChannelOutboundByteHandler {, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +    public ByteBuf newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +++ b/buffer/src/main/java/io/netty/buffer/MessageBufs.java, +    public static <T> MessageBuf<T> buffer() {, +    public static <T> MessageBuf<T> buffer(int initialCapacity) {, +    public static <T> MessageBuf<T> wrappedBuffer(Queue<T> queue) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +import io.netty.buffer.MessageBuf;, +import io.netty.buffer.MessageBufs;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundMessageHandler<Object>, ChannelOutboundMessageHandler<Object> {, +    public MessageBuf<Object> newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +    public MessageBuf<Object> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteCodec.java, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundByteHandler;, +        implements ChannelInboundByteHandler, ChannelOutboundByteHandler {, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +    public ByteBuf newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.buffer.MessageBuf;, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundByteHandler, ChannelOutboundMessageHandler<OUTBOUND_IN> {, +    public ByteBuf newInboundBuffer(, +    public MessageBuf<OUTBOUND_IN> newOutboundBuffer(, +++ b/buffer/src/main/java/io/netty/buffer/MessageBufs.java, +    public static <T> MessageBuf<T> buffer() {, +    public static <T> MessageBuf<T> buffer(int initialCapacity) {, +    public static <T> MessageBuf<T> wrappedBuffer(Queue<T> queue) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +import io.netty.buffer.MessageBuf;, +import io.netty.buffer.MessageBufs;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundMessageHandler<Object>, ChannelOutboundMessageHandler<Object> {, +    public MessageBuf<Object> newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +    public MessageBuf<Object> newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return MessageBufs.buffer();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteCodec.java, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundByteHandler;, +        implements ChannelInboundByteHandler, ChannelOutboundByteHandler {, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +    public ByteBuf newOutboundBuffer(ChannelHandlerContext ctx) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.buffer.MessageBuf;, +import io.netty.channel.ChannelInboundByteHandler;, +import io.netty.channel.ChannelOutboundMessageHandler;, +        implements ChannelInboundByteHandler, ChannelOutboundMessageHandler<OUTBOUND_IN> {, +    public ByteBuf newInboundBuffer(, +    public MessageBuf<OUTBOUND_IN> newOutboundBuffer(, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.buffer.ByteBufs;, +import io.netty.channel.ChannelInboundByteHandler;, +public abstract class ByteToMessageDecoder<O>, +    extends ChannelInboundHandlerAdapter implements ChannelInboundByteHandler {, +    public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +        return ByteBufs.dynamicBuffer();, +    public void replace(String newHandlerName, ChannelInboundByteHandler newHandler) {]