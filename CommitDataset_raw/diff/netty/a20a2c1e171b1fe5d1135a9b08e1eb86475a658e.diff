[+++ b/pom.xml, +  <repositories>, +      <repository>, +          <id>JBoss-Public</id>, +          <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, +      </repository>, +  </repositories>, +, +  <pluginRepositories>, +      <pluginRepository>, +          <id>JBoss-Public</id>, +          <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, +      </pluginRepository>, +  </pluginRepositories>, +, +++ b/pom.xml, +  <repositories>, +      <repository>, +          <id>JBoss-Public</id>, +          <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, +      </repository>, +  </repositories>, +, +  <pluginRepositories>, +      <pluginRepository>, +          <id>JBoss-Public</id>, +          <url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>, +      </pluginRepository>, +  </pluginRepositories>, +, +++ b/src/docbook/en-US/module/architecture.xml, +      to represent a sequence of bytes. This approach has significant advantage, +      &ChannelBuffer; has been designed from ground up to address the problems, +            You can define your buffer type if necessary., +            Transparent zero copy is achieved by built-in composite buffer type., +      Traditional I/O APIs in Java provided different types and methods for, +      the other tedious and difficult.  The lack of portability between, +      transports becomes a problem when you need to support more transports not, +      rewriting the network layer of the application.  Logically, many protocols, +      can run on more than one transport such as TCP/IP, UDP/IP, SCTP, and, +      serial port communication., +      To make the matter worse, Java New I/O (NIO) API introduced the, +      incompatibility with the old blocking I/O (OIO) API, and so will NIO.2, +      (AIO).  Because all these APIs are different from each other in design, +      and performance characteristics, you are often forced to determine which, +      API your application will depend on before you even begin the, +      implementation phase., +      to be in trouble when your business grows up exponentially and your server, +      starts to serve tens of thousand clients simultaneously.  You could, +      start with NIO, but it might take much longer time to implement due to, +      the complexity of the NIO Selector API, hindering rapid development., +      Netty has a universal asynchronous I/O interface called &Channel;, which, +      abstracts away all operations required to point-to-point communication., +      Switching from one transport to the other usually takes just a couple, +      Also, you are even able to take advantage of a new transport which is, +      not written yet, serial port communication transport for instance, again, +      write your own transport by extending the core API because it is highly, +      extensible., +      Well-defined and extensible event model is a must for an event-driven, +      application.  Netty does have a well-defined event model focused on I/O., +      It also allows you to implement your own event type without breaking the, +      existing code at all because each event type is distinguished from, +      each other by strict type hierarchy.  This is another differentiator, +      against other frameworks.  Many NIO frameworks have no or very limited, +      notion of event model; they often break the existing code when you try, +      to add a new custom event type, or just do not allow extension., +      you can define what to do when a data is read from a socket:, +      You can also define what to do when other handler requested a write, +      operation:, +      For more information about the event model, please refer to the, +      of advanced features to accelerate the development pace even more., +        idea to separate a protocol codec from a business logic. However, there, +        multi-layered (i.e. built on top of other lower level protocol). Some, +        that generates maintainable user codec., +        Netty provides a number of basic and advanced codecs built on top of, +        its core to address most issues you will encounter when you write a, +        protocol codec regardless if it is simple or not, binary or text -, +        simply whatever., +        as SSL is.  You have to manage all possible states such as cipher suite, +        and encryption key negotiation (or re-negotiation), certificate, +        exchange and validation.  Moreover, <classname>SSLEngine</classname> is, +        not even completely thread-safe unlike usual expectation., +        and insert the &SslHandler; to your &ChannelPipeline;.  It also allows, +        you to implement advanced features like, +        It gives you complete control over how HTTP messages are exchanged in a, +        low level.  Because it is basically the combination of HTTP codec and, +        HTTP message classes, there is no restriction such as enforced thread, +        exactly the way you want.  You have full control over thread model,, +        connection life cycle, chunked encoding, and as much as what HTTP, +        specification allows you to do., +              until the whole media is streamed (e.g. 2 hours of movie), +              File server that allows the upload of large files without memory, +              pressure (e.g. uploading 1GB per request), +              Scalable mash-up client that connects to tens of thousand 3rd, +        binary protocol that evolves over time.  With &ProtobufEncoder; and, +        &ProtobufDecoder;, you can turn the message classes generated by Google, +        Protocol Buffers Compiler (protoc) into Netty codec.  Please take a look, +        into the <ulink url="&XRef;example/localtime/package-summary.html">'LocalTime' example</ulink>, +      feature-wise standpoint.  Netty has simple yet powerful architecture., +      difficult to understand more advanced features which were covered briefly]