[+++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteConnectorChannel.java, +    protected int doWriteBytes(final ByteBuf byteBuf, final boolean lastSpin) throws Exception {, +        final int expectedWrittenBytes = byteBuf.readableBytes();, +        final int writtenBytes = byteBuf.readBytes(javaChannel(), expectedWrittenBytes);, +        updateOpWrite(expectedWrittenBytes, writtenBytes, lastSpin);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteConnectorChannel.java, +    protected int doWriteBytes(final ByteBuf byteBuf, final boolean lastSpin) throws Exception {, +        final int expectedWrittenBytes = byteBuf.readableBytes();, +        final int writtenBytes = byteBuf.readBytes(javaChannel(), expectedWrittenBytes);, +        updateOpWrite(expectedWrittenBytes, writtenBytes, lastSpin);, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteConnectorChannel.java, +    protected int doWriteBytes(final ByteBuf byteBuf, final boolean lastSpin) throws Exception {, +        final int expectedWrittenBytes = byteBuf.readableBytes();, +        final int writtenBytes = byteBuf.readBytes(javaChannel(), expectedWrittenBytes);, +        updateOpWrite(expectedWrittenBytes, writtenBytes, lastSpin);, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java, +import io.netty.util.internal.StringUtil;, +            boolean done = false;, +                if (localFlushedAmount == 0) {, +                    break;, +                }, +                if (!buf.isReadable()) {, +                    done = true;, +            if (done) {, +            boolean done = false;, +                if (localFlushedAmount == 0) {, +                    break;, +                if (region.transfered() >= region.count()) {, +                    done = true;, +, +            if (done) {, +            throw new UnsupportedOperationException("unsupported message type: " + StringUtil.simpleClassName(msg));, +    protected void updateOpWrite(long expectedWrittenBytes, long writtenBytes, boolean lastSpin) {, +        if (writtenBytes >= expectedWrittenBytes) {, +            final SelectionKey key = selectionKey();, +            final int interestOps = key.interestOps();, +            // Wrote the outbound buffer completely - clear OP_WRITE., +            if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +                key.interestOps(interestOps & ~SelectionKey.OP_WRITE);, +            }, +        } else {, +            // 1) Wrote nothing: buffer is full obviously - set OP_WRITE, +            // 2) Wrote partial data:, +            //    a) lastSpin is false: no need to set OP_WRITE because the caller will try again immediately., +            //    b) lastSpin is true: set OP_WRITE because the caller will not try again., +            if (writtenBytes == 0 || lastSpin) {, +                final SelectionKey key = selectionKey();, +                final int interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) == 0) {, +                    key.interestOps(interestOps | SelectionKey.OP_WRITE);, +                }, +            }, +        }, +    }, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteConnectorChannel.java, +    protected int doWriteBytes(final ByteBuf byteBuf, final boolean lastSpin) throws Exception {, +        final int expectedWrittenBytes = byteBuf.readableBytes();, +        final int writtenBytes = byteBuf.readBytes(javaChannel(), expectedWrittenBytes);, +        updateOpWrite(expectedWrittenBytes, writtenBytes, lastSpin);, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java, +import io.netty.util.internal.StringUtil;, +            boolean done = false;, +                if (localFlushedAmount == 0) {, +                    break;, +                }, +                if (!buf.isReadable()) {, +                    done = true;, +            if (done) {, +            boolean done = false;, +                if (localFlushedAmount == 0) {, +                    break;, +                if (region.transfered() >= region.count()) {, +                    done = true;, +, +            if (done) {, +            throw new UnsupportedOperationException("unsupported message type: " + StringUtil.simpleClassName(msg));, +    protected void updateOpWrite(long expectedWrittenBytes, long writtenBytes, boolean lastSpin) {, +        if (writtenBytes >= expectedWrittenBytes) {, +            final SelectionKey key = selectionKey();, +            final int interestOps = key.interestOps();, +            // Wrote the outbound buffer completely - clear OP_WRITE., +            if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +                key.interestOps(interestOps & ~SelectionKey.OP_WRITE);, +            }, +        } else {, +            // 1) Wrote nothing: buffer is full obviously - set OP_WRITE, +            // 2) Wrote partial data:, +            //    a) lastSpin is false: no need to set OP_WRITE because the caller will try again immediately., +            //    b) lastSpin is true: set OP_WRITE because the caller will not try again., +            if (writtenBytes == 0 || lastSpin) {, +                final SelectionKey key = selectionKey();, +                final int interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) == 0) {, +                    key.interestOps(interestOps | SelectionKey.OP_WRITE);, +                }, +            }, +        }]