[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +    private static final String IGNORABLE_ERROR_PREFIX = "error:00000000:";, +    static boolean isError(String error) {, +        return error != null && !error.startsWith(IGNORABLE_ERROR_PREFIX);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +    private static final String IGNORABLE_ERROR_PREFIX = "error:00000000:";, +    static boolean isError(String error) {, +        return error != null && !error.startsWith(IGNORABLE_ERROR_PREFIX);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.buffer.ByteBufAllocator;, +import org.apache.tomcat.jni.SSL;, +import org.apache.tomcat.jni.SSLContext;, +, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.TrustManagerFactory;, +import javax.net.ssl.X509TrustManager;, +import java.io.File;, +import java.security.KeyStore;, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * A client-side {@link SslContext} which uses OpenSSL's SSL/TLS implementation., + */, +public final class OpenSslClientContext extends OpenSslContext {, +, +    private final X509TrustManager[] managers;, +, +    /**, +     * Creates a new instance., +     */, +    public OpenSslClientContext() throws SSLException {, +        this(null, null, null, null, 0, 0);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     */, +    public OpenSslClientContext(File certChainFile) throws SSLException {, +        this(certChainFile, null);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default., +     */, +    public OpenSslClientContext(TrustManagerFactory trustManagerFactory) throws SSLException {, +        this(null, trustManagerFactory);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default., +     */, +    public OpenSslClientContext(File certChainFile, TrustManagerFactory trustManagerFactory) throws SSLException {, +        this(certChainFile, trustManagerFactory, null, null, 0, 0);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s]