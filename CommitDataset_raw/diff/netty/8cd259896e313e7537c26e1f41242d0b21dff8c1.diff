[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headerSent;, +        public boolean isHeaderSent() {, +            return headerSent;, +        }, +, +        @Override, +        public Http2Stream headerSent() {, +            headerSent = true;, +            return this;, +        }, +, +        @Override, +            if (!createdBy().canOpenStream()) {, +                throw connectionError(PROTOCOL_ERROR, "Maximum active streams violated for this endpoint.");, +            }, +        DefaultEndpoint<? extends Http2FlowController> createdBy() {, +        DefaultEndpoint<? extends Http2FlowController> createdBy() {, +            return null;, +        }, +, +        @Override, +        public boolean isHeaderSent() {, +            return false;, +        }, +, +        @Override, +        public Http2Stream headerSent() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public boolean isExhausted() {, +            return nextStreamId() <= 0;, +        }, +, +        @Override, +        public boolean canOpenStream() {, +            return numActiveStreams + 1 <= maxActiveStreams;, +            checkNewStreamAllowed(streamId, state);, +        public boolean created(Http2Stream stream) {, +            return stream instanceof DefaultStream && ((DefaultStream) stream).createdBy() == this;, +        }, +, +        @Override, +            if (isLocal() ? !parent.state().localSideOpen() : !parent.state().remoteSideOpen()) {, +            State state = isLocal() ? RESERVED_LOCAL : RESERVED_REMOTE;, +            checkNewStreamAllowed(streamId, state);, +            DefaultStream stream = new DefaultStream(streamId, state);, +        private void checkNewStreamAllowed(int streamId, State state) throws Http2Exception {, +            if (isExhausted()) {, +                throw connectionError(REFUSED_STREAM, "Stream IDs are exhausted for this endpoint.");, +            }, +            if ((state.localSideOpen() || state.remoteSideOpen()) && !canOpenStream()) {, +                throw connectionError(REFUSED_STREAM, "Maximum active streams violated for this endpoint.");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headerSent;, +        public boolean isHeaderSent() {, +            return headerSent;, +        }, +, +        @Override, +        public Http2Stream headerSent() {, +            headerSent = true;, +            return this;, +        }, +, +        @Override, +            if (!createdBy().canOpenStream()) {, +                throw connectionError(PROTOCOL_ERROR, "Maximum active streams violated for this endpoint.");, +            }, +        DefaultEndpoint<? extends Http2FlowController> createdBy() {, +        DefaultEndpoint<? extends Http2FlowController> createdBy() {, +            return null;, +        }, +, +        @Override, +        public boolean isHeaderSent() {, +            return false;, +        }, +, +        @Override, +        public Http2Stream headerSent() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public boolean isExhausted() {, +            return nextStreamId() <= 0;, +        }, +, +        @Override, +        public boolean canOpenStream() {, +            return numActiveStreams + 1 <= maxActiveStreams;, +            checkNewStreamAllowed(streamId, state);, +        public boolean created(Http2Stream stream) {, +            return stream instanceof DefaultStream && ((DefaultStream) stream).createdBy() == this;, +        }, +, +        @Override]