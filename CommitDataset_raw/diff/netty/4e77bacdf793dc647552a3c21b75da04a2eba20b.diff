[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();, +                    promise.setFailure(future.cause());, +        return promise;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.channel.ChannelPromise;, +        return handshake(channel, channel.newPromise());, +     * @param promise, +     *            the {@link ChannelPromise} to be notified when the opening handshake is sent, +    public abstract ChannelFuture handshake(Channel channel, ChannelPromise promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +import io.netty.channel.ChannelPromise;, +    public ChannelFuture handshake(Channel channel, final ChannelPromise promise) {, +                    promise.setSuccess();]