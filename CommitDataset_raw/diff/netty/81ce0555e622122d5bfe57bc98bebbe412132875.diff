[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +import io.netty.util.internal.PlatformDependent;, +, +        } else if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(ALLOC, buffer, buffer.remaining());, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +import io.netty.util.internal.PlatformDependent;, +, +        } else if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(ALLOC, buffer, buffer.remaining());, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +        if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +        } else {, +}, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +import io.netty.util.internal.PlatformDependent;, +, +        } else if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(ALLOC, buffer, buffer.remaining());, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +        if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +        } else {, +}, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +    UnpooledDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {, +    UnpooledDirectByteBuf(ByteBufAllocator alloc, ByteBuffer initialBuffer, int maxCapacity) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int i = readerIndex;, +        byte b = getByte(i);, +        readerIndex = i + 1;, +        return b;, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +import io.netty.util.internal.PlatformDependent;, +, +        } else if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(ALLOC, buffer, buffer.remaining());, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +        if (PlatformDependent.hasUnsafe()) {, +            return new UnpooledUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +        } else {, +}, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +    UnpooledDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {, +    UnpooledDirectByteBuf(ByteBufAllocator alloc, ByteBuffer initialBuffer, int maxCapacity) {, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeDirectByteBuf.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.ResourceLeak;, +import io.netty.util.internal.PlatformDependent;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;]