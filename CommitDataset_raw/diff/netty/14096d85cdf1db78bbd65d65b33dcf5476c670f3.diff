[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +    return  write0(env, clazz, fd, buffer, pos, limit);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +    return  write0(env, clazz, fd, buffer, pos, limit);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    private boolean writeBytes(ChannelOutboundBuffer in, ByteBuf buf) throws Exception {, +        int readableBytes = buf.readableBytes();, +        if (readableBytes == 0) {, +            in.remove();, +            return true;, +        }, +        boolean setEpollOut = false;, +        boolean done = false;, +        long writtenBytes = 0;, +            int readerIndex = buf.readerIndex();, +            for (;;) {, +                int pos = nioBuf.position();, +                int limit = nioBuf.limit();, +                int localFlushedAmount = Native.write(fd, nioBuf, pos, limit);, +                if (localFlushedAmount > 0) {, +                    nioBuf.position(pos + localFlushedAmount);, +                    writtenBytes += localFlushedAmount;, +                    if (writtenBytes == readableBytes) {, +                        done = true;, +                        break;, +                    setEpollOut = true;, +                    break;, +            updateOutboundBuffer(in, writtenBytes, 1, done, setEpollOut);, +            return done;, +        } else {, +            ByteBuffer[] nioBuffers = buf.nioBuffers();, +            return writeBytesMultiple0(in, 1, nioBuffers, nioBuffers.length, readableBytes);, +        }, +    private boolean writeBytesMultiple(, +            for (;;) {, +        updateOutboundBuffer(in, writtenBytes, msgCount, done, setEpollOut);, +        return done;, +    }, +    private boolean writeBytesMultiple(, +            NioSocketChannelOutboundBuffer in, int msgCount, ByteBuffer[] nioBuffers) throws IOException {, +        return writeBytesMultiple0(in, msgCount, nioBuffers, in.nioBufferCount(), in.nioBufferSize());, +    }, +, +    private boolean writeBytesMultiple0(, +            ChannelOutboundBuffer in, int msgCount, ByteBuffer[] nioBuffers,, +            int nioBufferCnt, long expectedWrittenBytes) throws IOException {, +            for (;;) {, +, +                        // As we use edge-triggered we need to set EPOLLOUT as otherwise we may not get notified again, +                        setEpollOut();, +        }, +        return done;, +            in.progress(writtenBytes);, +                        unsafe().flush();, +    private boolean writeFileRegion(ChannelOutboundBuffer in, DefaultFileRegion region) throws Exception {, +        boolean setOpWrite = false;, +        boolean done = false;, +        long flushedAmount = 0;, +, +        for (int i = config().getWriteSpinCount() - 1; i >= 0; i --) {, +            long expected = region.count() - region.position();, +            long localFlushedAmount = Native.sendfile(fd, region, region.transfered(), expected);, +            if (localFlushedAmount == 0) {, +                setOpWrite = true;, +                break;, +            }, +, +            flushedAmount += localFlushedAmount;, +            if (region.transfered() >= region.count()) {, +                done = true;, +                break;, +            } else {, +                // As we use edge-triggered we need to set EPOLLOUT as otherwise we may not get notified again, +                setEpollOut();, +            }, +        }, +, +        in.progress(flushedAmount);, +, +        if (done) {, +            in.remove();, +        } else {, +            incompleteWrite(setOpWrite);, +        }, +        return done;, +                        if (!writeBytesMultiple(epollIn, msgCount, addresses)) {, +                            // was not able to write everything so break here we will get notified later again once, +                            // the network stack can handle more writes., +                            break;, +                        }, +                    ByteBuffer[] nioBuffers = nioIn.nioBuffers();, +                    if (nioBuffers != null) {, +                        if (!writeBytesMultiple(nioIn, msgCount, nioBuffers)) {, +                            // was not able to write everything so break here we will get notified later again once, +                            // the network stack can handle more writes., +                            break;, +                        }, +                if (!writeBytes(in, buf)) {, +                    // was not able to write everything so break here we will get notified later again once, +                    // the network stack can handle more writes.]