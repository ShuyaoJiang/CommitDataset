[+++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    public static final byte[] ARGS_PREFIX = "*".getBytes();, +    public static final byte[] CRLF = "\r\n".getBytes();, +    public static final byte[] BYTES_PREFIX = "$".getBytes();, +    public static final byte[] EMPTY_BYTES = new byte[0];, +    public static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    public static final byte[] ARGS_PREFIX = "*".getBytes();, +    public static final byte[] CRLF = "\r\n".getBytes();, +    public static final byte[] BYTES_PREFIX = "$".getBytes();, +    public static final byte[] EMPTY_BYTES = new byte[0];, +    public static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +     * @return content , +     * , +     * @param is, +     * @return integer, +     * @throws IOException, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    public static final byte[] ARGS_PREFIX = "*".getBytes();, +    public static final byte[] CRLF = "\r\n".getBytes();, +    public static final byte[] BYTES_PREFIX = "$".getBytes();, +    public static final byte[] EMPTY_BYTES = new byte[0];, +    public static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +     * @return content , +     * , +     * @param is, +     * @return integer, +     * @throws IOException, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisEncoder.java, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandler.Sharable;, +, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, + * , + *, +    private final Queue<ChannelBuffer> pool;, +, +    /**, +     * Calls {@link #RedisEncoder(boolean)} with <code>false</code>, +     */, +    public RedisEncoder() {, +        this(false);, +    }, +    , +    /**, +     * Create a new {@link RedisEncoder} instance , +     * , +     * @param poolBuffers <code>true</code> if the {@link ChannelBuffer}'s should be pooled. This should be used with caution as this , +     *                    can lead to unnecessary big memory consummation if one of the written values is very big and the rest is very small., +     */, +    public RedisEncoder(boolean poolBuffers) {, +        if (poolBuffers) {, +            pool = new ConcurrentLinkedQueue<ChannelBuffer>();, +        } else {, +            pool = null;, +        }, +    }, +    , +    , +            ChannelBuffer cb = null;, +            if (pool != null) {, +                cb = pool.poll();, +            }, +            if (cb == null) {, +                cb = ChannelBuffers.dynamicBuffer();, +            }, +            if (pool != null) {, +                final ChannelBuffer finalCb = cb;, +                future.addListener(new ChannelFutureListener() {, +                    public void operationComplete(ChannelFuture channelFuture) throws Exception {, +                        finalCb.clear();, +                        pool.add(finalCb);, +                });, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    public static final byte[] ARGS_PREFIX = "*".getBytes();, +    public static final byte[] CRLF = "\r\n".getBytes();, +    public static final byte[] BYTES_PREFIX = "$".getBytes();, +    public static final byte[] EMPTY_BYTES = new byte[0];, +    public static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +     * @return content , +     * , +     * @param is, +     * @return integer, +     * @throws IOException, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisEncoder.java, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandler.Sharable;, +, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, + * , + *, +    private final Queue<ChannelBuffer> pool;, +, +    /**, +     * Calls {@link #RedisEncoder(boolean)} with <code>false</code>]