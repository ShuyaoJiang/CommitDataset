[+++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +    /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +    @Override, +    protected void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            free();, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +    /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +    @Override, +    protected void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            free();, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/Recycler.java, +        // This act as a place holder for the head Link but also will reclaim space once finalized., +        // Its important this does not hold any reference to either Stack or WeakOrderQueue., +        static final class Head {, +            /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +            protected void finalize() throws Throwable {, +                try {, +                    super.finalize();, +                } finally {, +                    link = null;, +                        Link next = head.next;, +                        // Unlink to help GC and guard against GC nepotism., +                        head.next = null;, +                        head = next;, +                    }, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +    /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +    @Override, +    protected void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            free();, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/Recycler.java, +        // This act as a place holder for the head Link but also will reclaim space once finalized., +        // Its important this does not hold any reference to either Stack or WeakOrderQueue., +        static final class Head {, +            /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +            protected void finalize() throws Throwable {, +                try {, +                    super.finalize();, +                } finally {, +                    link = null;, +                        Link next = head.next;, +                        // Unlink to help GC and guard against GC nepotism., +                        head.next = null;, +                        head = next;, +                    }, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        // TODO: We need to find a better way to handle this., +        /*, +        */, +     * Invoked when this thread local variable is removed by {@link #remove()}. Be aware that {@link #remove()}, +     * is not guaranteed to be called when the `Thread` completes which means you can not depend on this for, +     * cleanup of the resources in the case of `Thread` completion., +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +    /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +    @Override, +    protected void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            free();, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/Recycler.java, +        // This act as a place holder for the head Link but also will reclaim space once finalized., +        // Its important this does not hold any reference to either Stack or WeakOrderQueue., +        static final class Head {, +            /// TODO: In the future when we move to Java9+ we should use java.lang.ref.Cleaner., +            protected void finalize() throws Throwable {, +                try {, +                    super.finalize();, +                } finally {, +                    link = null;, +                        Link next = head.next;, +                        // Unlink to help GC and guard against GC nepotism., +                        head.next = null;, +                        head = next;, +                    }, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        // TODO: We need to find a better way to handle this., +        /*, +        */]