[+++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java, +import io.netty.util.internal.ObjectUtil;, +public class IdleStateEvent {, +    /**, +     * Constructor for sub-classes., +     *, +     * @param state the {@link IdleStateEvent} which triggered the event., +     * @param first {@code true} if its the first idle event for the {@link IdleStateEvent}., +     */, +    protected IdleStateEvent(IdleState state, boolean first) {, +        this.state = ObjectUtil.checkNotNull(state, "state");, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateEvent.java, +import io.netty.util.internal.ObjectUtil;, +public class IdleStateEvent {, +    /**, +     * Constructor for sub-classes., +     *, +     * @param state the {@link IdleStateEvent} which triggered the event., +     * @param first {@code true} if its the first idle event for the {@link IdleStateEvent}., +     */, +    protected IdleStateEvent(IdleState state, boolean first) {, +        this.state = ObjectUtil.checkNotNull(state, "state");, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    /**, +     * Returns a {@link IdleStateEvent}., +     */, +    protected IdleStateEvent newIdleStateEvent(IdleState state, boolean first) {, +        switch (state) {, +            case ALL_IDLE:, +                return first ? IdleStateEvent.FIRST_ALL_IDLE_STATE_EVENT : IdleStateEvent.ALL_IDLE_STATE_EVENT;, +            case READER_IDLE:, +                return first ? IdleStateEvent.FIRST_READER_IDLE_STATE_EVENT : IdleStateEvent.READER_IDLE_STATE_EVENT;, +            case WRITER_IDLE:, +                return first ? IdleStateEvent.FIRST_WRITER_IDLE_STATE_EVENT : IdleStateEvent.WRITER_IDLE_STATE_EVENT;, +            default:, +                throw new Error();, +        }, +    }, +, +                    IdleStateEvent event = newIdleStateEvent(IdleState.READER_IDLE, firstReaderIdleEvent);, +, +                    IdleStateEvent event = newIdleStateEvent(IdleState.WRITER_IDLE, firstWriterIdleEvent);, +, +                    IdleStateEvent event = newIdleStateEvent(IdleState.ALL_IDLE, firstAllIdleEvent);, +]