[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +    public boolean contains(String name, String value, boolean ignoreCaseValue) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        }, +, +        int h = hash(name);, +        int i = index(h);, +        HeaderEntry e = entries[i];, +        while (e != null) {, +            if (e.hash == h && eq(name, e.key)) {, +                if (ignoreCaseValue) {, +                    if (e.value.equalsIgnoreCase(value)) {, +                        return true;, +                    }, +                } else {, +                    if (e.value.equals(value)) {, +                        return true;, +                    }, +                }, +            }, +            e = e.next;, +        }, +        return false;, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +    public boolean contains(String name, String value, boolean ignoreCaseValue) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        }, +, +        int h = hash(name);, +        int i = index(h);, +        HeaderEntry e = entries[i];, +        while (e != null) {, +            if (e.hash == h && eq(name, e.key)) {, +                if (ignoreCaseValue) {, +                    if (e.value.equalsIgnoreCase(value)) {, +                        return true;, +                    }, +                } else {, +                    if (e.value.equals(value)) {, +                        return true;, +                    }, +                }, +            }, +            e = e.next;, +        }, +        return false;, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        return message.headers().contains(Names.EXPECT, Values.CONTINUE, true);, +        return message.headers().contains(Names.TRANSFER_ENCODING, Values.CHUNKED, true);, +        return m.headers().contains(Names.CONTENT_LENGTH);, +, +    /**, +     * Returns {@code true} if a header with the name and value exists., +     *, +     * @param name              the headername, +     * @param value             the value, +     * @param ignoreCaseValue   {@code true} if case should be ignored, +     * @return contains         {@code true} if it contains it {@code false} otherwise, +     */, +    public boolean contains(String name, String value, boolean ignoreCaseValue) {, +        List<String> values = getAll(name);, +        if (values.isEmpty()) {, +            return false;, +        }, +, +        for (String v: values) {, +            if (ignoreCaseValue) {, +                if (v.equalsIgnoreCase(value)) {, +                    return true;, +                }, +            } else {, +                if (v.equals(value)) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }]