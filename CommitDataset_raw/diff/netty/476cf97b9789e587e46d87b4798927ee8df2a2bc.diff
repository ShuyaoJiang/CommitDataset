[+++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +            return factory.getBuffer(frameLength);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +            return factory.getBuffer(frameLength);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FrameDecoder.java, +            boolean fit = false;, +            , +            int readable = input.readableBytes();, +            int writable = cumulation.writableBytes();, +            int w = writable - readable;, +            if (w < 0) {, +                int readerIndex = cumulation.readerIndex();, +                if (w + readerIndex >= 0) {, +                    // the input will fit if we discard all read bytes, so do it, +                    fit = true;, +            } else {, +, +                // ok the input fit into the cumulation buffer, +                fit = true;, +            }, +            , +            , +            ChannelBuffer buf;, +            if (fit) {, +                // the input fit in the cumulation buffer so copy it over, +                buf = this.cumulation;, +                buf.writeBytes(input);, +            } else {, +                // wrap the cumulation and input , +                buf = ChannelBuffers.wrappedBuffer(cumulation, input);, +                this.cumulation = buf;, +            }, +, +, +            callDecode(ctx, e.getChannel(), buf, e.getRemoteAddress());, +            if (!buf.readable()) {, +                // nothing readable left so reset the state, +            } else {, +                // create a new buffer and copy the readable buffer into it, +                this.cumulation = newCumulationBuffer(ctx, buf.readableBytes());, +                this.cumulation.writeBytes(buf);, +, +     * Sub-classes may override this., +        return factory.getBuffer(Math.max(minimumCapacity, 256));, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +            return factory.getBuffer(frameLength);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FrameDecoder.java, +            boolean fit = false;, +            , +            int readable = input.readableBytes();, +            int writable = cumulation.writableBytes();, +            int w = writable - readable;, +            if (w < 0) {, +                int readerIndex = cumulation.readerIndex();, +                if (w + readerIndex >= 0) {, +                    // the input will fit if we discard all read bytes, so do it, +                    fit = true;, +            } else {, +, +                // ok the input fit into the cumulation buffer, +                fit = true;, +            }, +            , +            , +            ChannelBuffer buf;, +            if (fit) {, +                // the input fit in the cumulation buffer so copy it over, +                buf = this.cumulation;, +                buf.writeBytes(input);, +            } else {, +                // wrap the cumulation and input , +                buf = ChannelBuffers.wrappedBuffer(cumulation, input);, +                this.cumulation = buf;, +            }, +, +, +            callDecode(ctx, e.getChannel(), buf, e.getRemoteAddress());, +            if (!buf.readable()) {, +                // nothing readable left so reset the state, +            } else {, +                // create a new buffer and copy the readable buffer into it, +                this.cumulation = newCumulationBuffer(ctx, buf.readableBytes());, +                this.cumulation.writeBytes(buf);, +, +     * Sub-classes may override this., +        return factory.getBuffer(Math.max(minimumCapacity, 256));, +++ b/codec/src/main/java/io/netty/handler/codec/replay/ReplayingDecoder.java, +            boolean fit = false;, +            , +            int readable = input.readableBytes();, +            int writable = cumulation.writableBytes();, +            int w = writable - readable;, +            if (w < 0) {, +                int readerIndex = cumulation.readerIndex();, +                if (w + readerIndex >= 0) {, +                    // the input will fit if we discard all read bytes, so do it, +                    fit = true;, +            } else {, +, +                // ok the input fit into the cumulation buffer]