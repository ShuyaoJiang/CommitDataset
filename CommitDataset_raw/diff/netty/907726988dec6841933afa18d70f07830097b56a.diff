[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        return Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        return Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +     * Calculate the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     * @param maxHeaderListSize, +     *      <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a> for the local, +     *      endpoint., +     * @return the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     */, +    public static long calculateMaxHeaderListSizeGoAway(long maxHeaderListSize) {, +        // This is equivalent to `maxHeaderListSize * 1.25` but we avoid floating point multiplication., +        return maxHeaderListSize + (maxHeaderListSize >>> 2);, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        return Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +     * Calculate the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     * @param maxHeaderListSize, +     *      <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a> for the local, +     *      endpoint., +     * @return the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     */, +    public static long calculateMaxHeaderListSizeGoAway(long maxHeaderListSize) {, +        // This is equivalent to `maxHeaderListSize * 1.25` but we avoid floating point multiplication., +        return maxHeaderListSize + (maxHeaderListSize >>> 2);, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +        this.maxHeaderListSize = checkPositive(maxHeaderListSize, "maxHeaderListSize");, +        this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        return Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +     * Calculate the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     * @param maxHeaderListSize, +     *      <a href="https://tools.ietf.org/html/rfc7540#section-6.5.2">SETTINGS_MAX_HEADER_LIST_SIZE</a> for the local, +     *      endpoint., +     * @return the threshold in bytes which should trigger a {@code GO_AWAY} if a set of headers exceeds this amount., +     */, +    public static long calculateMaxHeaderListSizeGoAway(long maxHeaderListSize) {, +        // This is equivalent to `maxHeaderListSize * 1.25` but we avoid floating point multiplication., +        return maxHeaderListSize + (maxHeaderListSize >>> 2);, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +        this.maxHeaderListSize = checkPositive(maxHeaderListSize, "maxHeaderListSize");, +        this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoderTest.java, +    public void decodeLargerThanHeaderListSizeButLessThanGoAwayWithInitialDecoderSettings() throws Exception {, +        ByteBuf buf = encode(b(":method"), b("GET"), b("test_header"),, +            b(String.format("%09000d", 0).replace('0', 'A')));, +        final int streamId = 1;, +        try {, +            decoder.decodeHeaders(streamId, buf);, +            fail();, +        } catch (Http2Exception.HeaderListSizeException e) {, +            assertEquals(streamId, e.streamId());, +        } finally {, +            buf.release();, +        }, +    }, +, +    @Test]