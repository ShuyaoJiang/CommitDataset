[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +                resetDecoder();, +                resetDecoder();, +                out.add(currentMessage.retain());, +                resetDecoder();, +                resetDecoder();, +                resetDecoder();, +        if (currentMessage != null) {, +            currentMessage.release();, +        }, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +                resetDecoder();, +                resetDecoder();, +                out.add(currentMessage.retain());, +                resetDecoder();, +                resetDecoder();, +                resetDecoder();, +        if (currentMessage != null) {, +            currentMessage.release();, +        }, +++ b/codec-memcache/src/test/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoderTest.java, +import static org.junit.Assert.assertTrue;, +, +    @Test, +    public void shouldRetainCurrentMessageWhenSendingItOut() {, +        channel = new EmbeddedChannel(, +                new BinaryMemcacheRequestEncoder(),, +                new BinaryMemcacheRequestDecoder());, +, +        String key = "Netty";, +        ByteBuf extras = Unpooled.copiedBuffer("extras", CharsetUtil.UTF_8);, +        BinaryMemcacheRequest request = new DefaultBinaryMemcacheRequest(key, extras);, +        request.setKeyLength((short) key.length());, +        request.setExtrasLength((byte) extras.readableBytes());, +, +        assertTrue(channel.writeOutbound(request));, +        assertTrue(channel.writeInbound(channel.outboundMessages().toArray()));, +, +        BinaryMemcacheRequest read = channel.readInbound();, +        read.release();, +        // tearDown will call "channel.finish()", +    }]