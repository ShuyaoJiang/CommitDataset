[+++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClient.java, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBootstrap;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DatagramPacket;, +import io.netty.channel.socket.nio.NioDatagramChannel;, +import io.netty.channel.socket.nio.SelectorEventLoop;, +import java.net.InetSocketAddress;, +, +    public void run() throws Exception {, +        ChannelBootstrap b = new ChannelBootstrap();, +        try {, +            b.eventLoop(new SelectorEventLoop()), +             .channel(new NioDatagramChannel()), +             .localAddress(new InetSocketAddress(0)), +             .option(ChannelOption.SO_BROADCAST, true), +             .initializer(new ChannelInitializer() {, +                @Override, +                public void initChannel(Channel ch) throws Exception {, +                    ch.pipeline().addLast(new QuoteOfTheMomentClientHandler());, +            Channel ch = b.bind().sync().channel();, +            ch.write(new DatagramPacket(, +                    ChannelBuffers.copiedBuffer("QOTM?", CharsetUtil.UTF_8),, +                    new InetSocketAddress("255.255.255.255", port)));, +            if (!ch.closeFuture().await(5000)) {, +        } finally {, +            b.shutdown();, +        }, +++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClient.java, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBootstrap;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DatagramPacket;, +import io.netty.channel.socket.nio.NioDatagramChannel;, +import io.netty.channel.socket.nio.SelectorEventLoop;, +import java.net.InetSocketAddress;, +, +    public void run() throws Exception {, +        ChannelBootstrap b = new ChannelBootstrap();, +        try {, +            b.eventLoop(new SelectorEventLoop()), +             .channel(new NioDatagramChannel()), +             .localAddress(new InetSocketAddress(0)), +             .option(ChannelOption.SO_BROADCAST, true), +             .initializer(new ChannelInitializer() {, +                @Override, +                public void initChannel(Channel ch) throws Exception {, +                    ch.pipeline().addLast(new QuoteOfTheMomentClientHandler());, +            Channel ch = b.bind().sync().channel();, +            ch.write(new DatagramPacket(, +                    ChannelBuffers.copiedBuffer("QOTM?", CharsetUtil.UTF_8),, +                    new InetSocketAddress("255.255.255.255", port)));, +            if (!ch.closeFuture().await(5000)) {, +        } finally {, +            b.shutdown();, +        }, +++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClientHandler.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.socket.DatagramPacket;, +import io.netty.util.CharsetUtil;, +public class QuoteOfTheMomentClientHandler extends ChannelInboundMessageHandlerAdapter<DatagramPacket> {, +, +    public void messageReceived(, +            ChannelInboundHandlerContext<DatagramPacket> ctx, DatagramPacket msg), +        String response = msg.data().toString(CharsetUtil.UTF_8);, +        if (response.startsWith("QOTM: ")) {, +            System.out.println("Quote of the Moment: " + response.substring(6));, +            ctx.close();, +    public void exceptionCaught(, +            ChannelInboundHandlerContext<DatagramPacket> ctx, Throwable cause), +        cause.printStackTrace();, +        ctx.close();, +++ b/example/src/main/java/io/netty/example/qotm/QuoteOfTheMomentClient.java, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBootstrap;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DatagramPacket;, +import io.netty.channel.socket.nio.NioDatagramChannel;, +import io.netty.channel.socket.nio.SelectorEventLoop;, +import java.net.InetSocketAddress;, +, +    public void run() throws Exception {, +        ChannelBootstrap b = new ChannelBootstrap();, +        try {, +            b.eventLoop(new SelectorEventLoop()), +             .channel(new NioDatagramChannel()), +             .localAddress(new InetSocketAddress(0)), +             .option(ChannelOption.SO_BROADCAST, true), +             .initializer(new ChannelInitializer() {, +                @Override, +                public void initChannel(Channel ch) throws Exception {, +                    ch.pipeline().addLast(new QuoteOfTheMomentClientHandler());, +            Channel ch = b.bind().sync().channel();]