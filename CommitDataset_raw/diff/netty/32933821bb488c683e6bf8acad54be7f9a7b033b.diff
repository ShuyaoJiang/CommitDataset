[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractFuture.java, +import java.util.concurrent.CancellationException;, +        if (cause instanceof CancellationException) {, +            throw (CancellationException) cause;, +        }, +            if (cause instanceof CancellationException) {, +                throw (CancellationException) cause;, +            }, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractFuture.java, +import java.util.concurrent.CancellationException;, +        if (cause instanceof CancellationException) {, +            throw (CancellationException) cause;, +        }, +            if (cause instanceof CancellationException) {, +                throw (CancellationException) cause;, +            }, +++ b/common/src/test/java/io/netty/util/concurrent/DefaultPromiseTest.java, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +    @Test(expected = CancellationException.class), +    public void testCancellationExceptionIsThrownWhenBlockingGet() throws InterruptedException, ExecutionException {, +        final Promise<Void> promise = new DefaultPromise<Void>(ImmediateEventExecutor.INSTANCE);, +        promise.cancel(false);, +        promise.get();, +    }, +, +    @Test(expected = CancellationException.class), +    public void testCancellationExceptionIsThrownWhenBlockingGetWithTimeout() throws InterruptedException,, +            ExecutionException, TimeoutException {, +        final Promise<Void> promise = new DefaultPromise<Void>(ImmediateEventExecutor.INSTANCE);, +        promise.cancel(false);, +        promise.get(1, TimeUnit.SECONDS);, +    }, +]