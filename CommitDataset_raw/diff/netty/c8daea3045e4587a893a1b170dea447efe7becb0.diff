[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +        return !message.headers().containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE, true) &&, +               (message.protocolVersion().isKeepAliveDefault() ||, +                message.headers().containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +        return !message.headers().containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE, true) &&, +               (message.protocolVersion().isKeepAliveDefault() ||, +                message.headers().containsValue(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpUtilTest.java, +, +    @Test, +    public void testKeepAliveIfConnectionHeaderMultipleValues() {, +        HttpMessage http11Message = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +            "http:localhost/http_1_1");, +        http11Message.headers().set(, +                HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE + ", " + HttpHeaderValues.CLOSE);, +        assertFalse(HttpUtil.isKeepAlive(http11Message));, +, +        http11Message.headers().set(, +                HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE + ", Close");, +        assertFalse(HttpUtil.isKeepAlive(http11Message));, +, +        http11Message.headers().set(, +                HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE + ", " + HttpHeaderValues.UPGRADE);, +        assertFalse(HttpUtil.isKeepAlive(http11Message));, +, +        http11Message.headers().set(, +                HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE + ", " + HttpHeaderValues.KEEP_ALIVE);, +        assertTrue(HttpUtil.isKeepAlive(http11Message));, +    }]