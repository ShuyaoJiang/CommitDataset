[+++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import java.util.concurrent.atomic.AtomicInteger;, +import org.jboss.netty.channel.ChannelException;, +    // TODO Move the state management up to AbstractChannel to remove duplication., +    private static final int ST_OPEN = 0;, +    private static final int ST_BOUND = 1;, +    private static final int ST_CONNECTED = 2;, +    private static final int ST_CLOSED = -1;, +    private final AtomicInteger state = new AtomicInteger(ST_OPEN);, +, +, +    public boolean isOpen() {, +        return state.get() >= ST_OPEN;, +    }, +, +    @Override, +        return state.get() >= ST_BOUND;, +        return state.get() == ST_CONNECTED;, +    }, +, +    final void setBound() throws ClosedChannelException {, +        if (!state.compareAndSet(ST_OPEN, ST_BOUND)) {, +            switch (state.get()) {, +            case ST_CLOSED:, +                throw new ClosedChannelException();, +            default:, +                throw new ChannelException("already bound");, +            }, +        }, +    }, +, +    final void setConnected() {, +        if (state.get() != ST_CLOSED) {, +            state.set(ST_CONNECTED);, +        }, +    }, +, +    @Override, +    protected boolean setClosed() {, +        state.set(ST_CLOSED);, +        return super.setClosed();, +++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import java.util.concurrent.atomic.AtomicInteger;, +import org.jboss.netty.channel.ChannelException;, +    // TODO Move the state management up to AbstractChannel to remove duplication., +    private static final int ST_OPEN = 0;, +    private static final int ST_BOUND = 1;, +    private static final int ST_CONNECTED = 2;, +    private static final int ST_CLOSED = -1;, +    private final AtomicInteger state = new AtomicInteger(ST_OPEN);, +, +, +    public boolean isOpen() {, +        return state.get() >= ST_OPEN;, +    }, +, +    @Override, +        return state.get() >= ST_BOUND;, +        return state.get() == ST_CONNECTED;, +    }, +, +    final void setBound() throws ClosedChannelException {, +        if (!state.compareAndSet(ST_OPEN, ST_BOUND)) {, +            switch (state.get()) {, +            case ST_CLOSED:, +                throw new ClosedChannelException();, +            default:, +                throw new ChannelException("already bound");, +            }, +        }, +    }, +, +    final void setConnected() {, +        if (state.get() != ST_CLOSED) {, +            state.set(ST_CONNECTED);, +        }, +    }, +, +    @Override, +    protected boolean setClosed() {, +        state.set(ST_CLOSED);, +        return super.setClosed();, +++ b/src/main/java/org/jboss/netty/channel/local/LocalClientChannelSink.java, +import java.io.IOException;, +            channel.setBound();, +        channel.setConnected();, +        try {, +            acceptedChannel.setBound();, +        } catch (IOException e) {, +            throw new Error(e);, +        }, +        acceptedChannel.setConnected();]