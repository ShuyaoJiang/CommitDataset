[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkReadableBytes(length);, +        checkReadableBytes(length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkReadableBytes(length);, +        checkReadableBytes(length);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadSliceOutOfBounds() {, +        testReadSliceOutOfBounds(false);, +    }, +, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadRetainedSliceOutOfBounds() {, +        testReadSliceOutOfBounds(true);, +    }, +, +    private void testReadSliceOutOfBounds(boolean retainedSlice) {, +        ByteBuf buf = newBuffer(100);, +        try {, +            buf.writeZero(50);, +            if (retainedSlice) {, +                buf.readRetainedSlice(51);, +            } else {, +                buf.readSlice(51);, +            }, +            fail();, +        } finally {, +            buf.release();, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkReadableBytes(length);, +        checkReadableBytes(length);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadSliceOutOfBounds() {, +        testReadSliceOutOfBounds(false);, +    }, +, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadRetainedSliceOutOfBounds() {, +        testReadSliceOutOfBounds(true);, +    }, +, +    private void testReadSliceOutOfBounds(boolean retainedSlice) {, +        ByteBuf buf = newBuffer(100);, +        try {, +            buf.writeZero(50);, +            if (retainedSlice) {, +                buf.readRetainedSlice(51);, +            } else {, +                buf.readSlice(51);, +            }, +            fail();, +        } finally {, +            buf.release();, +        }, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/SimpleLeakAwareByteBufTest.java, +import static org.junit.Assume.assumeTrue;, +        ByteBuf buffer = newBuffer(8);, +        if (buffer.isReadable()) {, +            assertWrapped(buffer.readSlice(1));, +        } else {, +            assertTrue(buffer.release());, +        }, +        if (buffer.isReadable()) {, +        }, +        if (buffer.isReadable()) {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkReadableBytes(length);, +        checkReadableBytes(length);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadSliceOutOfBounds() {, +        testReadSliceOutOfBounds(false);, +    }, +, +    @Test(expected = IndexOutOfBoundsException.class), +    public void testReadRetainedSliceOutOfBounds() {, +        testReadSliceOutOfBounds(true);, +    }, +, +    private void testReadSliceOutOfBounds(boolean retainedSlice) {, +        ByteBuf buf = newBuffer(100);, +        try {, +            buf.writeZero(50);, +            if (retainedSlice) {, +                buf.readRetainedSlice(51);, +            } else {, +                buf.readSlice(51);, +            }, +            fail();, +        } finally {, +            buf.release();, +        }]