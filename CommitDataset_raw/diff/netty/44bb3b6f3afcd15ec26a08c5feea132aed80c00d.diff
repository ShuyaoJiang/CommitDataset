[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Headers.java, +     * Equivalent to {@link #getAll(Object)} but no intermediate list is generated., +     * @param name the name of the header to retrieve, +     * @return an {@link Iterator} of header values corresponding to {@code name}., +     */, +    Iterator<CharSequence> valueIterator(CharSequence name);, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Headers.java, +     * Equivalent to {@link #getAll(Object)} but no intermediate list is generated., +     * @param name the name of the header to retrieve, +     * @return an {@link Iterator} of header values corresponding to {@code name}., +     */, +    Iterator<CharSequence> valueIterator(CharSequence name);, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/ReadOnlyHttp2Headers.java, +    public Iterator<CharSequence> valueIterator(CharSequence name) {, +        return new ReadOnlyValueIterator(name);, +    }, +, +    @Override, +    private final class ReadOnlyValueIterator implements Iterator<CharSequence> {, +        private int i;, +        private final int nameHash;, +        private final CharSequence name;, +        private AsciiString[] current = pseudoHeaders.length != 0 ? pseudoHeaders : otherHeaders;, +        private AsciiString next;, +, +        ReadOnlyValueIterator(CharSequence name) {, +            nameHash = AsciiString.hashCode(name);, +            this.name = name;, +            calculateNext();, +        }, +, +        @Override, +        public boolean hasNext() {, +            return next != null;, +        }, +, +        @Override, +        public CharSequence next() {, +            if (!hasNext()) {, +                throw new NoSuchElementException();, +            }, +            CharSequence current = next;, +            calculateNext();, +            return current;, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("read only");, +        }, +, +        private void calculateNext() {, +            for (; i < current.length; i += 2) {, +                AsciiString roName = current[i];, +                if (roName.hashCode() == nameHash && roName.contentEqualsIgnoreCase(name)) {, +                    next = current[i + 1];, +                    i += 2;, +                    return;, +                }, +            }, +            if (i >= current.length && current == pseudoHeaders) {, +                i = 0;, +                current = otherHeaders;, +                calculateNext();, +            } else {, +                next = null;, +            }, +        }, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Headers.java, +     * Equivalent to {@link #getAll(Object)} but no intermediate list is generated., +     * @param name the name of the header to retrieve, +     * @return an {@link Iterator} of header values corresponding to {@code name}., +     */, +    Iterator<CharSequence> valueIterator(CharSequence name);, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/ReadOnlyHttp2Headers.java, +    public Iterator<CharSequence> valueIterator(CharSequence name) {, +        return new ReadOnlyValueIterator(name);, +    }, +, +    @Override, +    private final class ReadOnlyValueIterator implements Iterator<CharSequence> {, +        private int i;, +        private final int nameHash;, +        private final CharSequence name;, +        private AsciiString[] current = pseudoHeaders.length != 0 ? pseudoHeaders : otherHeaders;, +        private AsciiString next;, +, +        ReadOnlyValueIterator(CharSequence name) {, +            nameHash = AsciiString.hashCode(name);, +            this.name = name;, +            calculateNext();, +        }]