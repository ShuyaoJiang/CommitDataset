[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +    private final DnsNameResolverBuilder dnsResolverBuilder;, +    public DnsAddressResolverGroup(DnsNameResolverBuilder dnsResolverBuilder) {, +        this.dnsResolverBuilder = dnsResolverBuilder.copy();, +    }, +, +        this(new DnsNameResolverBuilder());, +        dnsResolverBuilder.channelType(channelType).nameServerProvider(nameServerProvider);, +        this(new DnsNameResolverBuilder());, +        dnsResolverBuilder.channelFactory(channelFactory).nameServerProvider(nameServerProvider);, +        // we don't really need to pass channelFactory and nameServerProvider separately,, +        // but still keep this to ensure backward compatibility with (potentially) override methods, +        return newResolver((EventLoop) executor,, +                dnsResolverBuilder.channelFactory(),, +                dnsResolverBuilder.nameServerProvider());, +        // once again, channelFactory and nameServerProvider are most probably set in builder already,, +        // but I do reassign them again to avoid corner cases with override methods, +        return dnsResolverBuilder.eventLoop(eventLoop), +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +    private final DnsNameResolverBuilder dnsResolverBuilder;, +    public DnsAddressResolverGroup(DnsNameResolverBuilder dnsResolverBuilder) {, +        this.dnsResolverBuilder = dnsResolverBuilder.copy();, +    }, +, +        this(new DnsNameResolverBuilder());, +        dnsResolverBuilder.channelType(channelType).nameServerProvider(nameServerProvider);, +        this(new DnsNameResolverBuilder());, +        dnsResolverBuilder.channelFactory(channelFactory).nameServerProvider(nameServerProvider);, +        // we don't really need to pass channelFactory and nameServerProvider separately,, +        // but still keep this to ensure backward compatibility with (potentially) override methods, +        return newResolver((EventLoop) executor,, +                dnsResolverBuilder.channelFactory(),, +                dnsResolverBuilder.nameServerProvider());, +        // once again, channelFactory and nameServerProvider are most probably set in builder already,, +        // but I do reassign them again to avoid corner cases with override methods, +        return dnsResolverBuilder.eventLoop(eventLoop), +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +import java.util.Arrays;, +    private EventLoop eventLoop;, +     */, +    public DnsNameResolverBuilder() {, +    }, +, +    /**, +     * Creates a new builder., +     * @param eventLoop the {@link EventLoop} which will perform the communication with the DNS, +        eventLoop(eventLoop);, +    }, +, +    /**, +     * Sets the {@link EventLoop} which will perform the communication with the DNS servers., +     *, +     * @param eventLoop the {@link EventLoop}, +     * @return {@code this}, +     */, +    public DnsNameResolverBuilder eventLoop(EventLoop eventLoop) {, +        return this;, +    }, +, +    protected ChannelFactory<? extends DatagramChannel> channelFactory() {, +        return this.channelFactory;, +    protected DnsServerAddressStreamProvider nameServerProvider() {, +        return this.dnsServerAddressStreamProvider;, +    }, +, +        if (eventLoop == null) {, +            throw new IllegalStateException("eventLoop should be specified to build a DnsNameResolver.");, +        }, +, +, +    /**, +     * Creates a copy of this {@link DnsNameResolverBuilder}, +     *, +     * @return {@link DnsNameResolverBuilder}, +     */, +    public DnsNameResolverBuilder copy() {, +        DnsNameResolverBuilder copiedBuilder = new DnsNameResolverBuilder();, +, +        if (eventLoop != null) {, +            copiedBuilder.eventLoop(eventLoop);, +        }, +, +        if (channelFactory != null) {, +            copiedBuilder.channelFactory(channelFactory);, +        }, +, +        if (resolveCache != null) {, +            copiedBuilder.resolveCache(resolveCache);, +        }, +, +        if (maxTtl != null && minTtl != null) {, +            copiedBuilder.ttl(minTtl, maxTtl);, +        }, +, +        if (negativeTtl != null) {, +            copiedBuilder.negativeTtl(negativeTtl);, +        }, +, +        if (authoritativeDnsServerCache != null) {, +            copiedBuilder.authoritativeDnsServerCache(authoritativeDnsServerCache);]