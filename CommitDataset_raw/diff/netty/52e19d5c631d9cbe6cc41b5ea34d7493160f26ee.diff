[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import static io.netty.handler.codec.http.HttpHeaderNames.EXPECT;, +    private Object continueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) {, +    protected Object newContinueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) {, +        Object response = continueResponse(start, maxContentLength, pipeline);, +        // we're going to respond based on the request expectation so there's no, +        // need to propagate the expectation further., +        if (response != null) {, +            start.headers().remove(EXPECT);, +        }, +        return response;, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import static io.netty.handler.codec.http.HttpHeaderNames.EXPECT;, +    private Object continueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) {, +    protected Object newContinueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) {, +        Object response = continueResponse(start, maxContentLength, pipeline);, +        // we're going to respond based on the request expectation so there's no, +        // need to propagate the expectation further., +        if (response != null) {, +            start.headers().remove(EXPECT);, +        }, +        return response;, +    }, +, +    @Override, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpObjectAggregatorTest.java, +    public void testValidRequestWith100ContinueAndDecoder() {, +        EmbeddedChannel embedder = new EmbeddedChannel(new HttpRequestDecoder(), new HttpObjectAggregator(100));, +        embedder.writeInbound(Unpooled.copiedBuffer(, +            "GET /upload HTTP/1.1\r\n" +, +                "Expect: 100-continue\r\n" +, +                "Content-Length: 0\r\n\r\n", CharsetUtil.US_ASCII));, +, +        FullHttpResponse response = embedder.readOutbound();, +        assertEquals(HttpResponseStatus.CONTINUE, response.status());, +        FullHttpRequest request = embedder.readInbound();, +        assertFalse(request.headers().contains(HttpHeaderNames.EXPECT));, +        request.release();, +        response.release();, +        assertFalse(embedder.finish());, +    }, +, +    @Test]