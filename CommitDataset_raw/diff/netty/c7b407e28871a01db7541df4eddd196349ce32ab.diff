[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import org.junit.AfterClass;, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +    @Rule, +    public final Timeout globalTimeout = new Timeout(60000);, +, +    @AfterClass, +    public static void compressHeapDumps() throws Exception {, +        TestUtils.compressHeapDumps();, +    }, +, +    @Test, +    @Test, +    @Test, +    @Test, +    @Test, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import org.junit.AfterClass;, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +    @Rule, +    public final Timeout globalTimeout = new Timeout(60000);, +, +    @AfterClass, +    public static void compressHeapDumps() throws Exception {, +        TestUtils.compressHeapDumps();, +    }, +, +    @Test, +    @Test, +    @Test, +    @Test, +    @Test, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import org.junit.AfterClass;, +    @AfterClass, +    public static void compressHeapDumps() throws Exception {, +        TestUtils.compressHeapDumps();, +    }, +, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import org.junit.AfterClass;, +import org.junit.Rule;, +import org.junit.rules.Timeout;, +    @Rule, +    public final Timeout globalTimeout = new Timeout(60000);, +, +    @AfterClass, +    public static void compressHeapDumps() throws Exception {, +        TestUtils.compressHeapDumps();, +    }, +, +    @Test, +    @Test, +    @Test, +    @Test, +    @Test, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import org.junit.AfterClass;, +    @AfterClass, +    public static void compressHeapDumps() throws Exception {, +        TestUtils.compressHeapDumps();, +    }, +, +++ b/testsuite/src/main/java/io/netty/testsuite/util/TestUtils.java, +import java.io.FilenameFilter;, +import java.util.concurrent.TimeUnit;, +    private static final long DUMP_PROGRESS_LOGGING_INTERVAL = TimeUnit.SECONDS.toNanos(5);, +, +    public static void compressHeapDumps() throws IOException {, +        final File[] files = new File(System.getProperty("user.dir")).listFiles(new FilenameFilter() {, +            @Override, +            public boolean accept(File dir, String name) {, +                return name.endsWith(".hprof");, +        });, +        final LZMA2Options options = new LZMA2Options(9);, +, +        for (File file: files) {, +            final String filename = file.toString();, +            final String xzFilename = filename + ".xz";, +            final long fileLength = file.length();, +, +            logger.info("Compressing the heap dump: {}", xzFilename);, +, +            long lastLogTime = System.nanoTime();, +            long counter = 0;, +, +                out = new XZOutputStream(new FileOutputStream(xzFilename), options);, +, +                    counter += readBytes;, +, +                    long currentTime = System.nanoTime();, +                    if (currentTime - lastLogTime > DUMP_PROGRESS_LOGGING_INTERVAL) {, +                        logger.info("Compressing the heap dump: {} ({}%)",, +                                    xzFilename, counter * 100 / fileLength);, +                        lastLogTime = currentTime;, +                    }, +    }, +]