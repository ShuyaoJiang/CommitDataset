[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        // Only process up to payloadLength bytes., +        int payloadEndIndex = in.readerIndex() + payloadLength;, +                readDataFrame(ctx, in, payloadEndIndex, listener);, +                readHeadersFrame(ctx, in, payloadEndIndex, listener);, +                readPriorityFrame(ctx, in, listener);, +                readRstStreamFrame(ctx, in, listener);, +                readSettingsFrame(ctx, in, listener);, +                readPushPromiseFrame(ctx, in, payloadEndIndex, listener);, +                readPingFrame(ctx, in.readLong(), listener);, +                readGoAwayFrame(ctx, in, payloadEndIndex, listener);, +                readWindowUpdateFrame(ctx, in, listener);, +                readContinuationFrame(in, payloadEndIndex, listener);, +                readUnknownFrame(ctx, in, payloadEndIndex, listener);, +        in.readerIndex(payloadEndIndex);, +    private void readDataFrame(ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +        int dataLength = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +    private void readHeadersFrame(final ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +            final int lenToRead = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +                public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                    hdrBlockBuilder.addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +            headersContinuation.processFragment(flags.endOfHeaders(), payload, lenToRead, listener);, +            public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                hdrBlockBuilder.addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +        int len = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +        headersContinuation.processFragment(flags.endOfHeaders(), payload, len, listener);, +    private void readPushPromiseFrame(final ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +            public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                headersBlockBuilder().addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +        int len = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +        headersContinuation.processFragment(flags.endOfHeaders(), payload, len, listener);, +    private static void readGoAwayFrame(ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +        ByteBuf debugData = payload.readSlice(payloadEndIndex - payload.readerIndex());, +    private void readContinuationFrame(ByteBuf payload, int payloadEndIndex, Http2FrameListener listener), +        headersContinuation.processFragment(flags.endOfHeaders(), payload,, +                payloadEndIndex - payload.readerIndex(), listener);, +    private void readUnknownFrame(ChannelHandlerContext ctx, ByteBuf payload,, +            int payloadEndIndex, Http2FrameListener listener) throws Http2Exception {, +        payload = payload.readSlice(payloadEndIndex - payload.readerIndex());, +        abstract void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +        final void addFragment(ByteBuf fragment, int len, ByteBufAllocator alloc,, +                boolean endOfHeaders) throws Http2Exception {, +                if (len > headersDecoder.configuration().maxHeaderListSizeGoAway()) {, +                    headerBlock = fragment.readRetainedSlice(len);, +                    headerBlock = alloc.buffer(len).writeBytes(fragment, len);, +            if (headersDecoder.configuration().maxHeaderListSizeGoAway() - len <, +            if (headerBlock.isWritable(len)) {, +                headerBlock.writeBytes(fragment, len);, +                ByteBuf buf = alloc.buffer(headerBlock.readableBytes() + len);, +                buf.writeBytes(headerBlock).writeBytes(fragment, len);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        // Only process up to payloadLength bytes., +        int payloadEndIndex = in.readerIndex() + payloadLength;, +                readDataFrame(ctx, in, payloadEndIndex, listener);, +                readHeadersFrame(ctx, in, payloadEndIndex, listener);, +                readPriorityFrame(ctx, in, listener);, +                readRstStreamFrame(ctx, in, listener);, +                readSettingsFrame(ctx, in, listener);, +                readPushPromiseFrame(ctx, in, payloadEndIndex, listener);, +                readPingFrame(ctx, in.readLong(), listener);, +                readGoAwayFrame(ctx, in, payloadEndIndex, listener);, +                readWindowUpdateFrame(ctx, in, listener);, +                readContinuationFrame(in, payloadEndIndex, listener);, +                readUnknownFrame(ctx, in, payloadEndIndex, listener);, +        in.readerIndex(payloadEndIndex);, +    private void readDataFrame(ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +        int dataLength = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +    private void readHeadersFrame(final ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +            final int lenToRead = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +                public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                    hdrBlockBuilder.addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +            headersContinuation.processFragment(flags.endOfHeaders(), payload, lenToRead, listener);, +            public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                hdrBlockBuilder.addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +        int len = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +        headersContinuation.processFragment(flags.endOfHeaders(), payload, len, listener);, +    private void readPushPromiseFrame(final ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +            public void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +                headersBlockBuilder().addFragment(fragment, len, ctx.alloc(), endOfHeaders);, +        int len = lengthWithoutTrailingPadding(payloadEndIndex - payload.readerIndex(), padding);, +        headersContinuation.processFragment(flags.endOfHeaders(), payload, len, listener);, +    private static void readGoAwayFrame(ChannelHandlerContext ctx, ByteBuf payload, int payloadEndIndex,, +        ByteBuf debugData = payload.readSlice(payloadEndIndex - payload.readerIndex());, +    private void readContinuationFrame(ByteBuf payload, int payloadEndIndex, Http2FrameListener listener), +        headersContinuation.processFragment(flags.endOfHeaders(), payload,, +                payloadEndIndex - payload.readerIndex(), listener);, +    private void readUnknownFrame(ChannelHandlerContext ctx, ByteBuf payload,, +            int payloadEndIndex, Http2FrameListener listener) throws Http2Exception {, +        payload = payload.readSlice(payloadEndIndex - payload.readerIndex());, +        abstract void processFragment(boolean endOfHeaders, ByteBuf fragment, int len,, +        final void addFragment(ByteBuf fragment, int len, ByteBufAllocator alloc,, +                boolean endOfHeaders) throws Http2Exception {, +                if (len > headersDecoder.configuration().maxHeaderListSizeGoAway()) {, +                    headerBlock = fragment.readRetainedSlice(len);, +                    headerBlock = alloc.buffer(len).writeBytes(fragment, len);, +            if (headersDecoder.configuration().maxHeaderListSizeGoAway() - len <, +            if (headerBlock.isWritable(len)) {, +                headerBlock.writeBytes(fragment, len);, +                ByteBuf buf = alloc.buffer(headerBlock.readableBytes() + len);, +                buf.writeBytes(headerBlock).writeBytes(fragment, len);]