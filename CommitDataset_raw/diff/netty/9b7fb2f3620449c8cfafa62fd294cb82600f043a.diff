[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +import java.security.cert.CertPathValidatorException;, +                // Try to extract the correct error code that should be used., +                    // This will never return a negative error code as its validated when constructing the, +                    // OpenSslCertificateException., +                if (PlatformDependent.javaVersion() >= 7) {, +                    if (cause instanceof CertificateRevokedException) {, +, +                    // The X509TrustManagerImpl uses a Validator which wraps a CertPathValidatorException into, +                    // an CertificateException. So we need to handle the wrapped CertPathValidatorException to be, +                    // able to send the correct alert., +                    Throwable wrapped = cause.getCause();, +                    while (wrapped != null) {, +                        if (wrapped instanceof CertPathValidatorException) {, +                            CertPathValidatorException ex = (CertPathValidatorException) wrapped;, +                            CertPathValidatorException.Reason reason = ex.getReason();, +                            if (reason == CertPathValidatorException.BasicReason.EXPIRED) {, +                                return CertificateVerifier.X509_V_ERR_CERT_HAS_EXPIRED;, +                            }, +                            if (reason == CertPathValidatorException.BasicReason.NOT_YET_VALID) {, +                                return CertificateVerifier.X509_V_ERR_CERT_NOT_YET_VALID;, +                            }, +                            if (reason == CertPathValidatorException.BasicReason.REVOKED) {, +                                return CertificateVerifier.X509_V_ERR_CERT_REVOKED;, +                            }, +                        }, +                        wrapped = wrapped.getCause();, +                    }, +                }, +, +                // Could not detect a specific error code to use, so fallback to a default code., +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +import java.security.cert.CertPathValidatorException;, +                // Try to extract the correct error code that should be used., +                    // This will never return a negative error code as its validated when constructing the, +                    // OpenSslCertificateException., +                if (PlatformDependent.javaVersion() >= 7) {, +                    if (cause instanceof CertificateRevokedException) {, +, +                    // The X509TrustManagerImpl uses a Validator which wraps a CertPathValidatorException into, +                    // an CertificateException. So we need to handle the wrapped CertPathValidatorException to be, +                    // able to send the correct alert., +                    Throwable wrapped = cause.getCause();, +                    while (wrapped != null) {, +                        if (wrapped instanceof CertPathValidatorException) {, +                            CertPathValidatorException ex = (CertPathValidatorException) wrapped;, +                            CertPathValidatorException.Reason reason = ex.getReason();, +                            if (reason == CertPathValidatorException.BasicReason.EXPIRED) {, +                                return CertificateVerifier.X509_V_ERR_CERT_HAS_EXPIRED;, +                            }, +                            if (reason == CertPathValidatorException.BasicReason.NOT_YET_VALID) {, +                                return CertificateVerifier.X509_V_ERR_CERT_NOT_YET_VALID;, +                            }, +                            if (reason == CertPathValidatorException.BasicReason.REVOKED) {, +                                return CertificateVerifier.X509_V_ERR_CERT_REVOKED;, +                            }, +                        }, +                        wrapped = wrapped.getCause();, +                    }, +                }, +, +                // Could not detect a specific error code to use, so fallback to a default code., +++ b/handler/src/test/java/io/netty/handler/ssl/SslErrorTest.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.nio.NioEventLoopGroup;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import io.netty.channel.socket.nio.NioSocketChannel;, +import io.netty.handler.logging.LogLevel;, +import io.netty.handler.logging.LoggingHandler;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +import io.netty.handler.ssl.util.SimpleTrustManagerFactory;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.concurrent.Promise;, +import io.netty.util.internal.EmptyArrays;, +import org.junit.Assume;, +import org.junit.Test;]