[+++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192, 8192, 8192));, +++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192, 8192, 8192));, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java, +import org.jboss.netty.handler.codec.frame.TooLongFrameException;, +    private final int maxInitialLineLength;, +    private final int maxHeaderSize;, +    private volatile int headerSize;, +        this(8192, 8192, 0);, +    protected HttpMessageDecoder(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) {, +        if (maxInitialLineLength <= 0) {, +            throw new IllegalArgumentException(, +                    "maxInitialLineLength must be a positive integer: " +, +                    maxInitialLineLength);, +        }, +        if (maxHeaderSize <= 0) {, +            throw new IllegalArgumentException(, +                    "maxHeaderSize must be a positive integer: " +, +                    maxChunkSize);, +        }, +        this.maxInitialLineLength = maxInitialLineLength;, +        this.maxHeaderSize = maxHeaderSize;, +            String[] initialLine = splitInitialLine(readLine(buffer, maxInitialLineLength));, +            if (initialLine.length < 3) {, +                // Invalid initial line - ignore., +                checkpoint(State.SKIP_CONTROL_CHARS);, +                return null;, +            }, +, +            message = createMessage(initialLine);, +            checkpoint(State.READ_HEADER);, +            headerSize = 0;, +            String line = readLine(buffer, maxInitialLineLength);, +            // Skip the footer; does anyone use it?, +            try {, +                if (!skipLine(buffer)) {, +                }, +            } finally {, +                checkpoint();, +    private State readHeaders(ChannelBuffer buffer) throws TooLongFrameException {, +        String line = readHeader(buffer);, +            line = readHeader(buffer);, +    private String readHeader(ChannelBuffer buffer) throws TooLongFrameException {, +        StringBuilder sb = new StringBuilder(64);, +        int headerSize = this.headerSize;, +        while (true) {, +            byte nextByte = buffer.readByte();, +            if (nextByte == HttpCodecUtil.CR) {, +                nextByte = buffer.readByte();, +                if (nextByte == HttpCodecUtil.LF) {, +                    this.headerSize = headerSize + 2;, +                    return sb.toString();, +                }, +            }, +            else if (nextByte == HttpCodecUtil.LF) {, +                this.headerSize = headerSize + 1;, +                return sb.toString();, +            }, +            else {, +                // Abort decoding if the header part is too large., +                if (headerSize >= maxHeaderSize) {, +                    throw new TooLongFrameException(, +                            "HTTP header is larger than " +, +                            maxHeaderSize + " bytes.");, +, +                }, +                headerSize ++;, +                sb.append((char) nextByte);, +            }, +        }, +    }, +, +    protected abstract HttpMessage createMessage(String[] initialLine) throws Exception;, +    private String readLine(ChannelBuffer buffer, int maxLineLength) throws TooLongFrameException {, +        int lineLength = 0;, +                if (lineLength >= maxLineLength) {, +                    throw new TooLongFrameException(, +                            "An HTTP line is larger than " + maxLineLength +, +                            " bytes.");, +                }, +                lineLength ++;, +    /**, +     * Returns {@code true} if only if the skipped line was not empty., +     * Please note that an empty line is also skipped, while {@code} false is, +     * returned., +     */, +    private boolean skipLine(ChannelBuffer buffer) {, +        int lineLength = 0;, +        while (true) {, +            byte nextByte = buffer.readByte();, +            if (nextByte == HttpCodecUtil.CR) {, +                nextByte = buffer.readByte();, +                if (nextByte == HttpCodecUtil.LF) {, +                    return lineLength != 0;, +                }, +            }, +            else if (nextByte == HttpCodecUtil.LF) {, +                return lineLength != 0;, +            }]