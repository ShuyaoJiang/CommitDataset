[+++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192));, +++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192));, +++ b/src/main/java/org/jboss/netty/handler/codec/frame/FrameDecoder.java, +import java.lang.reflect.Array;, +import org.jboss.netty.channel.Channels;, +    private final boolean unfold;, +    protected FrameDecoder() {, +        this(false);, +    }, +, +    protected FrameDecoder(boolean unfold) {, +        this.unfold = unfold;, +    }, +            fireMessageReceived(context, remoteAddress, frame);, +        }, +    }, +, +    private void fireMessageReceived(ChannelHandlerContext context, SocketAddress remoteAddress, Object result) {, +        if (unfold) {, +            if (result instanceof Object[]) {, +                for (Object r: (Object[]) result) {, +                    Channels.fireMessageReceived(context, r, remoteAddress);, +                }, +            } else if (result.getClass().isArray()){, +                int length = Array.getLength(result);, +                for (int i = 0; i < length; i ++) {, +                    Channels.fireMessageReceived(context, Array.get(result, i), remoteAddress);, +                }, +            } else if (result instanceof Iterable) {, +                for (Object r: (Iterable<?>) result) {, +                    Channels.fireMessageReceived(context, r, remoteAddress);, +                }, +            } else {, +                Channels.fireMessageReceived(context, result, remoteAddress);, +            }, +        } else {, +            Channels.fireMessageReceived(context, result, remoteAddress);, +                        fireMessageReceived(ctx, null, partialFrame);, +++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192));, +++ b/src/main/java/org/jboss/netty/handler/codec/frame/FrameDecoder.java, +import java.lang.reflect.Array;, +import org.jboss.netty.channel.Channels;, +    private final boolean unfold;, +    protected FrameDecoder() {, +        this(false);, +    }, +, +    protected FrameDecoder(boolean unfold) {, +        this.unfold = unfold;, +    }, +            fireMessageReceived(context, remoteAddress, frame);, +        }, +    }, +, +    private void fireMessageReceived(ChannelHandlerContext context, SocketAddress remoteAddress, Object result) {, +        if (unfold) {, +            if (result instanceof Object[]) {, +                for (Object r: (Object[]) result) {, +                    Channels.fireMessageReceived(context, r, remoteAddress);, +                }, +            } else if (result.getClass().isArray()){, +                int length = Array.getLength(result);, +                for (int i = 0; i < length; i ++) {, +                    Channels.fireMessageReceived(context, Array.get(result, i), remoteAddress);, +                }, +            } else if (result instanceof Iterable) {, +                for (Object r: (Iterable<?>) result) {, +                    Channels.fireMessageReceived(context, r, remoteAddress);, +                }, +            } else {, +                Channels.fireMessageReceived(context, result, remoteAddress);, +            }, +        } else {, +            Channels.fireMessageReceived(context, result, remoteAddress);, +                        fireMessageReceived(ctx, null, partialFrame);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +import org.jboss.netty.buffer.ChannelBuffers;, +    private ChannelBuffer content = ChannelBuffers.EMPTY_BUFFER;, +++ b/src/main/java/org/jboss/netty/example/http/HttpServerPipelineFactory.java, +        pipeline.addLast("decoder", new HttpRequestDecoder(8192));, +++ b/src/main/java/org/jboss/netty/handler/codec/frame/FrameDecoder.java, +import java.lang.reflect.Array;, +import org.jboss.netty.channel.Channels;, +    private final boolean unfold;, +    protected FrameDecoder() {, +        this(false);, +    }, +, +    protected FrameDecoder(boolean unfold) {, +        this.unfold = unfold;, +    }, +            fireMessageReceived(context, remoteAddress, frame);, +        }, +    }, +, +    private void fireMessageReceived(ChannelHandlerContext context, SocketAddress remoteAddress, Object result) {, +        if (unfold) {]