[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java, +import io.netty.util.AsciiString;, +import static io.netty.handler.codec.http.HttpHeaderNames.*;, +, +    @Test, +    public void testMessagesSplitBetweenMultipleBuffers() {, +        EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestDecoder());, +        String crlf = "\r\n";, +        String str1 = "GET /some/path HTTP/1.1" + crlf +, +                "Host: localhost1" + crlf + crlf +, +                "GET /some/other/path HTTP/1.0" + crlf +, +                "Hos";, +        String str2 = "t: localhost2" + crlf +, +                "content-length: 0" + crlf + crlf;, +        channel.writeInbound(Unpooled.copiedBuffer(str1, CharsetUtil.US_ASCII));, +        HttpRequest req = channel.readInbound();, +        assertEquals(HttpVersion.HTTP_1_1, req.protocolVersion());, +        assertEquals("/some/path", req.uri());, +        assertEquals(1, req.headers().size());, +        assertTrue(AsciiString.contentEqualsIgnoreCase("localhost1", req.headers().get(HOST)));, +        LastHttpContent cnt = channel.readInbound();, +        cnt.release();, +, +        channel.writeInbound(Unpooled.copiedBuffer(str2, CharsetUtil.US_ASCII));, +        req = channel.readInbound();, +        assertEquals(HttpVersion.HTTP_1_0, req.protocolVersion());, +        assertEquals("/some/other/path", req.uri());, +        assertEquals(2, req.headers().size());, +        assertTrue(AsciiString.contentEqualsIgnoreCase("localhost2", req.headers().get(HOST)));, +        assertTrue(AsciiString.contentEqualsIgnoreCase("0", req.headers().get(HttpHeaderNames.CONTENT_LENGTH)));, +        cnt = channel.readInbound();, +        cnt.release();, +        assertFalse(channel.finishAndReleaseAll());, +    }]