[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    public synchronized ChannelPipeline addFirst(EventExecutor executor, final String name, final ChannelHandler handler) {, +        final DefaultChannelHandlerContext nextCtx = head.next;, +        final DefaultChannelHandlerContext newCtx =, +        if (!newCtx.channel().isRegistered() || newCtx.executor().inEventLoop()) {, +            addFirst0(name, handler, nextCtx, newCtx);, +        } else {, +            ChannelPipelineModificationRunnable runnable = new ChannelPipelineModificationRunnable() {, +, +                @Override, +                protected void runTask() {, +                    checkDuplicateName(name);, +, +                    addFirst0(name, handler, nextCtx, newCtx);, +                }, + , +            };, +            , +            newCtx.executor().execute(runnable);, +            runnable.await();, +        }, +        , +        return this;, +    }, +    private void addFirst0(final String name, ChannelHandler handler, DefaultChannelHandlerContext nextCtx, DefaultChannelHandlerContext newCtx) {, +    public synchronized ChannelPipeline addLast(EventExecutor executor, final String name, final ChannelHandler handler) {, +        final DefaultChannelHandlerContext oldTail = tail;, +        final DefaultChannelHandlerContext newTail =, +        , +        if (!newTail.channel().isRegistered() || newTail.executor().inEventLoop()) {, +            addLast0(name, handler, oldTail, newTail);, +        } else {, +            ChannelPipelineModificationRunnable runnable = new ChannelPipelineModificationRunnable() {, +, +                @Override, +                protected void runTask() {, +                    checkDuplicateName(name);, +, +                    addLast0(name, handler, oldTail, newTail);, +                }, + , +            };, +            , +            newTail.executor().execute(runnable);, +            runnable.await();, +        }, +        return this;, +    }, +    , +    private void addLast0(final String name, ChannelHandler handler, DefaultChannelHandlerContext oldTail, DefaultChannelHandlerContext newTail) {, +    public synchronized ChannelPipeline addBefore(EventExecutor executor, String baseName, final String name, final ChannelHandler handler) {, +        final DefaultChannelHandlerContext ctx = getContextOrDie(baseName);, +        final DefaultChannelHandlerContext newCtx =, +        if (!newCtx.channel().isRegistered() || newCtx.executor().inEventLoop()) {, +            addBefore0(name, handler, ctx, newCtx);, +        } else {, +            ChannelPipelineModificationRunnable runnable = new ChannelPipelineModificationRunnable() {, +, +                @Override, +                protected void runTask() {, +                    checkDuplicateName(name);, +, +                    addBefore0(name, handler, ctx, newCtx);, +                }, + , +            };, +            , +            newCtx.executor().execute(runnable);, +            runnable.await();, +        }, +        return this;, +    }, +, +    private void addBefore0(final String name, ChannelHandler handler, DefaultChannelHandlerContext ctx, DefaultChannelHandlerContext newCtx) {, +    public synchronized ChannelPipeline addAfter(EventExecutor executor, String baseName, final String name, final ChannelHandler handler) {, +        final DefaultChannelHandlerContext ctx = getContextOrDie(baseName);, +            final DefaultChannelHandlerContext newCtx =, +            if (!newCtx.channel().isRegistered() || newCtx.executor().inEventLoop()) {, +                addAfter0(name, handler, ctx, newCtx);, +            } else {, +                ChannelPipelineModificationRunnable runnable = new ChannelPipelineModificationRunnable() {, +, +                    @Override, +                    protected void runTask() {, +                        checkDuplicateName(name);, +, +                        addAfter0(name, handler, ctx, newCtx);, +                    }, +     , +                };, +                , +                newCtx.executor().execute(runnable);, +                runnable.await();, +            }, +            , +        }, +, +        return this;, +    }, +]