[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.handler.codec.DefaultHeaders;, +import io.netty.handler.codec.ValueConverter;, +import io.netty.util.HashingStrategy;, +import io.netty.util.internal.StringUtil;, +, +import java.util.Collection;, +import java.util.Iterator;, +, +import static io.netty.util.AsciiString.CASE_INSENSITIVE_HASHER;, +import static io.netty.util.internal.StringUtil.COMMA;, +, +/**, + * Will add multiple values for the same header as single header with a comma separated list of values., + * <p>, + * Please refer to section <a href="https://tools.ietf.org/html/rfc7230#section-3.2.2">RFC 7230, 3.2.2</a>., + */, +public class CombinedHttpHeaders extends DefaultHttpHeaders {, +    public CombinedHttpHeaders(boolean validate) {, +        super(new CombinedHttpHeadersImpl(CASE_INSENSITIVE_HASHER, valueConverter(validate), nameValidator(validate)));, +    }, +, +    private static final class CombinedHttpHeadersImpl extends DefaultHeaders<CharSequence> {, +        /**, +         * An estimate of the size of a header value., +         */, +        private static final int VALUE_LENGTH_ESTIMATE = 10;, +        private CsvValueEscaper<Object> objectEscaper;, +        private CsvValueEscaper<CharSequence> charSequenceEscaper;, +, +        private CsvValueEscaper<Object> objectEscaper() {, +            if (objectEscaper == null) {, +                objectEscaper = new CsvValueEscaper<Object>() {, +                    @Override, +                    public CharSequence escape(Object value) {, +                        return StringUtil.escapeCsv(valueConverter().convertObject(value));, +                    }, +                };, +            }, +            return objectEscaper;, +        }, +, +        private CsvValueEscaper<CharSequence> charSequenceEscaper() {, +            if (charSequenceEscaper == null) {, +                charSequenceEscaper = new CsvValueEscaper<CharSequence>() {, +                    @Override, +                    public CharSequence escape(CharSequence value) {, +                        return StringUtil.escapeCsv(value);, +                    }, +                };, +            }, +            return charSequenceEscaper;, +        }, +, +        public CombinedHttpHeadersImpl(HashingStrategy<CharSequence> nameHashingStrategy,, +                ValueConverter<CharSequence> valueConverter,, +                io.netty.handler.codec.DefaultHeaders.NameValidator<CharSequence> nameValidator) {, +            super(nameHashingStrategy, valueConverter, nameValidator);, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl add(CharSequence name, CharSequence value) {, +            return addEscapedValue(name, StringUtil.escapeCsv(value));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl add(CharSequence name, CharSequence... values) {, +            return addEscapedValue(name, commaSeparate(charSequenceEscaper(), values));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl add(CharSequence name, Iterable<? extends CharSequence> values) {, +            return addEscapedValue(name, commaSeparate(charSequenceEscaper(), values));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Iterable<?> values) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), values));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl addObject(CharSequence name, Object... values) {, +            return addEscapedValue(name, commaSeparate(objectEscaper(), values));]