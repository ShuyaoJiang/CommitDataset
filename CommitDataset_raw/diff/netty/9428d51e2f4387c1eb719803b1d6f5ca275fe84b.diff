[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 4);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), false, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), false, 4);, +    }, +, +    @SuppressWarnings("deprecation"), +    private void testSimpleSend0(Bootstrap sb, Bootstrap cb, ByteBuf buf, boolean bindClient, int count), +            throws Throwable {, +        buf.writeInt(1);, +        final CountDownLatch latch = new CountDownLatch(count);, +        Channel cc;, +        if (bindClient) {, +            cc = cb.bind().sync().channel();, +        } else {, +            cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +            cc = cb.register().sync().channel();, +        }, +        for (int i = 0; i < count; i++) {, +            cc.write(new DatagramPacket(buf.retain().duplicate(), addr));, +        }, +        // release as we used buf.retain() before, +        buf.release();, +        cc.flush();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 4);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, buf, true, 1);, +        CompositeByteBuf buf2 = Unpooled.compositeBuffer();, +        buf2.addComponent(Unpooled.directBuffer(2, 2));, +        buf2.addComponent(Unpooled.buffer(2, 2));, +        testSimpleSend0(sb, cb, buf2, true, 4);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), false, 1);, +        testSimpleSend0(sb, cb, Unpooled.directBuffer(), false, 4);, +    }, +, +    @SuppressWarnings("deprecation"), +    private void testSimpleSend0(Bootstrap sb, Bootstrap cb, ByteBuf buf, boolean bindClient, int count), +            throws Throwable {, +        buf.writeInt(1);, +        final CountDownLatch latch = new CountDownLatch(count);, +        Channel cc;, +        if (bindClient) {, +            cc = cb.bind().sync().channel();, +        } else {, +            cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +            cc = cb.register().sync().channel();, +        }, +        for (int i = 0; i < count; i++) {, +            cc.write(new DatagramPacket(buf.retain().duplicate(), addr));, +        }, +        // release as we used buf.retain() before, +        buf.release();, +        cc.flush();, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +extern int sendmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int vlen, unsigned int flags) __attribute__((weak));, +, +// Just define it here and NOT use #define _GNU_SOURCE as we also want to be able to build on systems that not support, +// sendmmsg yet. The problem is if we use _GNU_SOURCE we will not be able to declare sendmmsg as extern, +struct mmsghdr {, +    struct msghdr msg_hdr;  /* Message header */, +    unsigned int  msg_len;  /* Number of bytes transmitted */, +};, +, +jfieldID fileDescriptorFieldId = NULL;, +]