[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, + * <p>, + * All methods must be called by a transport implementation from an I/O thread, except the following ones:, + * <ul>, + * <li>{@link #size()} and {@link #isEmpty()}</li>, + * <li>{@link #isWritable()}</li>, + * <li>{@link #getUserDefinedWritability(int)} and {@link #setUserDefinedWritability(int, boolean)}</li>, + * </ul>, + * </p>, +    @SuppressWarnings("UnusedDeclaration"), +    private static final AtomicIntegerFieldUpdater<ChannelOutboundBuffer> UNWRITABLE_UPDATER;, +    @SuppressWarnings("UnusedDeclaration"), +    private volatile int unwritable;, +        AtomicIntegerFieldUpdater<ChannelOutboundBuffer> unwritableUpdater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(ChannelOutboundBuffer.class, "unwritable");, +        if (unwritableUpdater == null) {, +            unwritableUpdater = AtomicIntegerFieldUpdater.newUpdater(ChannelOutboundBuffer.class, "unwritable");, +        UNWRITABLE_UPDATER = unwritableUpdater;, +        if (newWriteBufferSize >= channel.config().getWriteBufferHighWaterMark()) {, +            setUnwritable();, +        if (newWriteBufferSize == 0 || newWriteBufferSize <= channel.config().getWriteBufferLowWaterMark()) {, +            setWritable();, +    /**, +     * Returns {@code true} if and only if {@linkplain #totalPendingWriteBytes() the total number of pending bytes} did, +     * not exceed the write watermark of the {@link Channel} and, +     * no {@linkplain #setUserDefinedWritability(int, boolean) user-defined writability flag} has been set to, +     * {@code false}., +     */, +    public boolean isWritable() {, +        return unwritable == 0;, +    }, +, +    /**, +     * Returns {@code true} if and only if the user-defined writability flag at the specified index is set to, +     * {@code true}., +     */, +    public boolean getUserDefinedWritability(int index) {, +        return (unwritable & writabilityMask(index)) == 0;, +    }, +, +    /**, +     * Sets a user-defined writability flag at the specified index., +     */, +    public void setUserDefinedWritability(int index, boolean writable) {, +        if (writable) {, +            setUserDefinedWritability(index);, +        } else {, +            clearUserDefinedWritability(index);, +        }, +    }, +, +    private void setUserDefinedWritability(int index) {, +        final int mask = ~writabilityMask(index);, +        for (;;) {, +            final int oldValue = unwritable;, +            final int newValue = oldValue & mask;, +            if (UNWRITABLE_UPDATER.compareAndSet(this, oldValue, newValue)) {, +                if (oldValue != 0 && newValue == 0) {, +                    channel.pipeline().fireChannelWritabilityChanged();, +                }, +                break;, +            }, +        }, +    }, +, +    private void clearUserDefinedWritability(int index) {, +        final int mask = writabilityMask(index);, +        for (;;) {, +            final int oldValue = unwritable;, +            final int newValue = oldValue | mask;, +            if (UNWRITABLE_UPDATER.compareAndSet(this, oldValue, newValue)) {, +                if (oldValue == 0 && newValue != 0) {, +                    channel.pipeline().fireChannelWritabilityChanged();, +                }, +                break;, +            }, +        }, +    }, +, +    private static int writabilityMask(int index) {, +        if (index < 1 || index > 31) {, +            throw new IllegalArgumentException("index: " + index + " (expected: 1~31)");, +        }, +        return 1 << index;, +    }, +, +    private void setWritable() {, +        for (;;) {, +            final int oldValue = unwritable;, +            final int newValue = oldValue & ~1;, +            if (UNWRITABLE_UPDATER.compareAndSet(this, oldValue, newValue)) {, +                if (oldValue != 0 && newValue == 0) {, +                    channel.pipeline().fireChannelWritabilityChanged();, +                }, +                break;, +            }, +        }, +    }, +, +    private void setUnwritable() {]