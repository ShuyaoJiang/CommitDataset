[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheContent.java, +import io.netty.channel.ChannelPipeline;, + * after MemcacheObjectDecoder in the {@link ChannelPipeline}., +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheContent.java, +import io.netty.channel.ChannelPipeline;, + * after MemcacheObjectDecoder in the {@link ChannelPipeline}., +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheObjectAggregator.java, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheRequestDecoder;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheResponseEncoder;, + * A {@link ChannelHandler} that aggregates an {@link MemcacheMessage}, + * handler after a MemcacheObjectDecoder in the {@link ChannelPipeline}., + * {@link ChannelPipeline} p = ...;, + * p.addLast("decoder", new {@link BinaryMemcacheRequestDecoder}());, + * p.addLast("encoder", new {@link BinaryMemcacheResponseEncoder}());, +    protected MemcacheObjectAggregator(int maxContentLength) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheContent.java, +import io.netty.channel.ChannelPipeline;, + * after MemcacheObjectDecoder in the {@link ChannelPipeline}., +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheObjectAggregator.java, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheRequestDecoder;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheResponseEncoder;, + * A {@link ChannelHandler} that aggregates an {@link MemcacheMessage}, + * handler after a MemcacheObjectDecoder in the {@link ChannelPipeline}., + * {@link ChannelPipeline} p = ...;, + * p.addLast("decoder", new {@link BinaryMemcacheRequestDecoder}());, + * p.addLast("encoder", new {@link BinaryMemcacheResponseEncoder}());, +    protected MemcacheObjectAggregator(int maxContentLength) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheClientCodec.java, +        this(BinaryMemcacheDecoder.DEFAULT_MAX_CHUNK_SIZE);, +                final int size = out.size();, +                for (int i = oldSize; i < size; i ++) {, +                    if (msg instanceof LastMemcacheContent) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheContent.java, +import io.netty.channel.ChannelPipeline;, + * after MemcacheObjectDecoder in the {@link ChannelPipeline}., +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheObjectAggregator.java, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheRequestDecoder;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheResponseEncoder;, + * A {@link ChannelHandler} that aggregates an {@link MemcacheMessage}, + * handler after a MemcacheObjectDecoder in the {@link ChannelPipeline}., + * {@link ChannelPipeline} p = ...;, + * p.addLast("decoder", new {@link BinaryMemcacheRequestDecoder}());, + * p.addLast("encoder", new {@link BinaryMemcacheResponseEncoder}());, +    protected MemcacheObjectAggregator(int maxContentLength) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheClientCodec.java, +        this(BinaryMemcacheDecoder.DEFAULT_MAX_CHUNK_SIZE);, +                final int size = out.size();, +                for (int i = oldSize; i < size; i ++) {, +                    if (msg instanceof LastMemcacheContent) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoder.java, +import static io.netty.buffer.ByteBufUtil.*;, +public abstract class BinaryMemcacheDecoder<M extends BinaryMemcacheMessage<H>, H extends BinaryMemcacheMessageHeader>, +    protected BinaryMemcacheDecoder() {, +    protected BinaryMemcacheDecoder(int chunkSize) {, +                    }, +, +                    if (toRead > chunkSize) {, +                    boolean isLast = alreadyReadChunkSize + toRead >= valueLength;, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/DefaultMemcacheObject.java, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheContent.java, +import io.netty.channel.ChannelPipeline;, + * after MemcacheObjectDecoder in the {@link ChannelPipeline}., +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/MemcacheObjectAggregator.java, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheRequestDecoder;, +import io.netty.handler.codec.memcache.binary.BinaryMemcacheResponseEncoder;, + * A {@link ChannelHandler} that aggregates an {@link MemcacheMessage}, + * handler after a MemcacheObjectDecoder in the {@link ChannelPipeline}., + * {@link ChannelPipeline} p = ...;, + * p.addLast("decoder", new {@link BinaryMemcacheRequestDecoder}());, + * p.addLast("encoder", new {@link BinaryMemcacheResponseEncoder}());, +    protected MemcacheObjectAggregator(int maxContentLength) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheClientCodec.java, +        this(BinaryMemcacheDecoder.DEFAULT_MAX_CHUNK_SIZE);, +                final int size = out.size();, +                for (int i = oldSize; i < size; i ++) {, +                    if (msg instanceof LastMemcacheContent) {, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoder.java, +import static io.netty.buffer.ByteBufUtil.*;, +public abstract class BinaryMemcacheDecoder<M extends BinaryMemcacheMessage<H>, H extends BinaryMemcacheMessageHeader>, +    protected BinaryMemcacheDecoder() {, +    protected BinaryMemcacheDecoder(int chunkSize) {, +                    }, +, +                    if (toRead > chunkSize) {, +                    boolean isLast = alreadyReadChunkSize + toRead >= valueLength;, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheEncoder.java, +import io.netty.handler.codec.MessageToByteEncoder;]