[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProvider.java, +        final boolean useEtcResolverFiles = etcResolverFiles != null && etcResolverFiles.length != 0;, +        domainToNameServerStreamMap = useEtcResolverFiles ? parse(etcResolverFiles) : etcResolvConfMap;, +        if (useEtcResolverFiles) {, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProvider.java, +        final boolean useEtcResolverFiles = etcResolverFiles != null && etcResolverFiles.length != 0;, +        domainToNameServerStreamMap = useEtcResolverFiles ? parse(etcResolverFiles) : etcResolvConfMap;, +        if (useEtcResolverFiles) {, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProviderTest.java, +    @Test, +    public void emptyEtcResolverDirectoryDoesNotThrow() throws IOException {, +        File f = buildFile("domain linecorp.local\n" +, +                           "nameserver 127.0.0.2\n" +, +                           "nameserver 127.0.0.3\n");, +        UnixResolverDnsServerAddressStreamProvider p =, +                new UnixResolverDnsServerAddressStreamProvider(f, folder.newFolder().listFiles());, +, +        DnsServerAddressStream stream = p.nameServerAddressStream("somehost");, +        assertHostNameEquals("127.0.0.2", stream.next());, +    }, +]