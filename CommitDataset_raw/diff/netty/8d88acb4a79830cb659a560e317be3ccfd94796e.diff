[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +    protected AbstractByteBufAllocator(boolean preferDirect) {, +        directByDefault = preferDirect && PlatformDependent.hasUnsafe();, +    public ByteBuf ioBuffer() {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(0);, +        }, +        return heapBuffer(0);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +    protected AbstractByteBufAllocator(boolean preferDirect) {, +        directByDefault = preferDirect && PlatformDependent.hasUnsafe();, +    public ByteBuf ioBuffer() {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(0);, +        }, +        return heapBuffer(0);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +        return UnpooledByteBufAllocator.DEFAULT;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +    protected AbstractByteBufAllocator(boolean preferDirect) {, +        directByDefault = preferDirect && PlatformDependent.hasUnsafe();, +    public ByteBuf ioBuffer() {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(0);, +        }, +        return heapBuffer(0);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +        return UnpooledByteBufAllocator.DEFAULT;, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +    public static final PooledByteBufAllocator DEFAULT =, +            new PooledByteBufAllocator(PlatformDependent.directBufferPreferred());, +    public PooledByteBufAllocator(boolean preferDirect) {, +        this(preferDirect, DEFAULT_NUM_HEAP_ARENA, DEFAULT_NUM_DIRECT_ARENA, DEFAULT_PAGE_SIZE, DEFAULT_MAX_ORDER);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +    protected AbstractByteBufAllocator(boolean preferDirect) {, +        directByDefault = preferDirect && PlatformDependent.hasUnsafe();, +    public ByteBuf ioBuffer() {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(0);, +        }, +        return heapBuffer(0);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +        return UnpooledByteBufAllocator.DEFAULT;, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +    public static final PooledByteBufAllocator DEFAULT =, +            new PooledByteBufAllocator(PlatformDependent.directBufferPreferred());, +    public PooledByteBufAllocator(boolean preferDirect) {, +        this(preferDirect, DEFAULT_NUM_HEAP_ARENA, DEFAULT_NUM_DIRECT_ARENA, DEFAULT_PAGE_SIZE, DEFAULT_MAX_ORDER);, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    private static final ByteBufAllocator ALLOC = UnpooledByteBufAllocator.DEFAULT;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +    protected AbstractByteBufAllocator(boolean preferDirect) {, +        directByDefault = preferDirect && PlatformDependent.hasUnsafe();, +    public ByteBuf ioBuffer() {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(0);, +        }, +        return heapBuffer(0);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +        return UnpooledByteBufAllocator.DEFAULT;, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +import io.netty.util.internal.PlatformDependent;, +    public static final PooledByteBufAllocator DEFAULT =]