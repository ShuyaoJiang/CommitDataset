[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.handler.codec.PrematureChannelClosureException;, +                resetNow();, +, +            if (currentState == State.READ_HEADER) {, +                // If we are still in the state of reading headers we need to create a new invalid message that, +                // signals that the connection was closed before we received the headers., +                out.add(invalidMessage(Unpooled.EMPTY_BUFFER,, +                        new PrematureChannelClosureException("Connection closed before received headers")));, +                resetNow();, +                return;, +            }, +, +            resetNow();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.handler.codec.PrematureChannelClosureException;, +                resetNow();, +, +            if (currentState == State.READ_HEADER) {, +                // If we are still in the state of reading headers we need to create a new invalid message that, +                // signals that the connection was closed before we received the headers., +                out.add(invalidMessage(Unpooled.EMPTY_BUFFER,, +                        new PrematureChannelClosureException("Connection closed before received headers")));, +                resetNow();, +                return;, +            }, +, +            resetNow();, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java, +import io.netty.handler.codec.PrematureChannelClosureException;, +, +    @Test, +    public void testConnectionClosedBeforeHeadersReceived() {, +        EmbeddedChannel channel = new EmbeddedChannel(new HttpResponseDecoder());, +        String responseInitialLine =, +                "HTTP/1.1 200 OK\r\n";, +        assertFalse(channel.writeInbound(Unpooled.copiedBuffer(responseInitialLine, CharsetUtil.US_ASCII)));, +        assertTrue(channel.finish());, +        HttpMessage message = channel.readInbound();, +        assertTrue(message.decoderResult().isFailure());, +        assertThat(message.decoderResult().cause(), instanceOf(PrematureChannelClosureException.class));, +        assertNull(channel.readInbound());, +    }]