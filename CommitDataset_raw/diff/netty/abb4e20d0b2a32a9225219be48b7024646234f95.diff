[+++ b/common/src/main/java/io/netty/util/concurrent/ImmediateEventExecutor.java, +/**, + * {@link AbstractEventExecutor} which execute tasks in the callers thread., + */, +public final class ImmediateEventExecutor extends AbstractEventExecutor {, +    public static final ImmediateEventExecutor INSTANCE = new ImmediateEventExecutor();, +, +    private  ImmediateEventExecutor() {, +        // use static instance, +    }, +    @Override, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new ImmediateProgressivePromise<V>(this);, +    }, +, +, +    static class ImmediateProgressivePromise<V> extends DefaultProgressivePromise<V> {, +        ImmediateProgressivePromise(EventExecutor executor) {, +            super(executor);, +        }, +, +        @Override, +        protected void checkDeadLock() {, +            // No check, +        }, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/ImmediateEventExecutor.java, +/**, + * {@link AbstractEventExecutor} which execute tasks in the callers thread., + */, +public final class ImmediateEventExecutor extends AbstractEventExecutor {, +    public static final ImmediateEventExecutor INSTANCE = new ImmediateEventExecutor();, +, +    private  ImmediateEventExecutor() {, +        // use static instance, +    }, +    @Override, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new ImmediateProgressivePromise<V>(this);, +    }, +, +, +    static class ImmediateProgressivePromise<V> extends DefaultProgressivePromise<V> {, +        ImmediateProgressivePromise(EventExecutor executor) {, +            super(executor);, +        }, +, +        @Override, +        protected void checkDeadLock() {, +            // No check, +        }, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/ImmediateExecutor.java, +        if (command == null) {, +            throw new NullPointerException("command");, +        }, +++ b/common/src/main/java/io/netty/util/concurrent/ImmediateEventExecutor.java, +/**, + * {@link AbstractEventExecutor} which execute tasks in the callers thread., + */, +public final class ImmediateEventExecutor extends AbstractEventExecutor {, +    public static final ImmediateEventExecutor INSTANCE = new ImmediateEventExecutor();, +, +    private  ImmediateEventExecutor() {, +        // use static instance, +    }, +    @Override, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new ImmediateProgressivePromise<V>(this);, +    }, +, +, +    static class ImmediateProgressivePromise<V> extends DefaultProgressivePromise<V> {, +        ImmediateProgressivePromise(EventExecutor executor) {, +            super(executor);, +        }, +, +        @Override, +        protected void checkDeadLock() {, +            // No check, +        }, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/ImmediateExecutor.java, +        if (command == null) {, +            throw new NullPointerException("command");, +        }, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +import io.netty.util.concurrent.ImmediateEventExecutor;, +        this(name, ImmediateEventExecutor.INSTANCE);, +++ b/common/src/main/java/io/netty/util/concurrent/ImmediateEventExecutor.java, +/**, + * {@link AbstractEventExecutor} which execute tasks in the callers thread., + */, +public final class ImmediateEventExecutor extends AbstractEventExecutor {, +    public static final ImmediateEventExecutor INSTANCE = new ImmediateEventExecutor();, +, +    private  ImmediateEventExecutor() {, +        // use static instance, +    }, +    @Override]