[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (int i = 0; i < pages.length; i ++) {, +        appendPoolSubPages(buf, tinySubpagePools);, +        appendPoolSubPages(buf, smallSubpagePools);, +    private static void appendPoolSubPages(StringBuilder buf, PoolSubpage<?>[] subpages) {, +        for (int i = 0; i < subpages.length; i ++) {, +            PoolSubpage<?> head = subpages[i];, +            if (head.next == head) {, +                continue;, +            }, +, +            buf.append(StringUtil.NEWLINE), +                    .append(i), +                    .append(": ");, +            PoolSubpage<?> s = head.next;, +            for (;;) {, +                buf.append(s);, +                s = s.next;, +                if (s == head) {, +                    break;, +                }, +            }, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (int i = 0; i < pages.length; i ++) {, +        appendPoolSubPages(buf, tinySubpagePools);, +        appendPoolSubPages(buf, smallSubpagePools);, +    private static void appendPoolSubPages(StringBuilder buf, PoolSubpage<?>[] subpages) {, +        for (int i = 0; i < subpages.length; i ++) {, +            PoolSubpage<?> head = subpages[i];, +            if (head.next == head) {, +                continue;, +            }, +, +            buf.append(StringUtil.NEWLINE), +                    .append(i), +                    .append(": ");, +            PoolSubpage<?> s = head.next;, +            for (;;) {, +                buf.append(s);, +                s = s.next;, +                if (s == head) {, +                    break;, +                }, +            }, +        }, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/PooledByteBufAllocatorTest.java, +    public void testSmallSubpageMetric() {, +        PooledByteBufAllocator allocator = new PooledByteBufAllocator(true, 1, 1, 8192, 11, 0, 0, 0);, +        ByteBuf buffer = allocator.heapBuffer(500);, +        try {, +            PoolArenaMetric metric = allocator.heapArenas().get(0);, +            PoolSubpageMetric subpageMetric = metric.smallSubpages().get(0);, +            assertEquals(1, subpageMetric.maxNumElements() - subpageMetric.numAvailable());, +        } finally {, +            buffer.release();, +        }, +    }, +, +    @Test, +    public void testTinySubpageMetric() {, +        PooledByteBufAllocator allocator = new PooledByteBufAllocator(true, 1, 1, 8192, 11, 0, 0, 0);, +        ByteBuf buffer = allocator.heapBuffer(1);, +        try {, +            PoolArenaMetric metric = allocator.heapArenas().get(0);, +            PoolSubpageMetric subpageMetric = metric.tinySubpages().get(0);, +            assertEquals(1, subpageMetric.maxNumElements() - subpageMetric.numAvailable());, +        } finally {, +            buffer.release();, +        }, +    }, +, +    @Test]