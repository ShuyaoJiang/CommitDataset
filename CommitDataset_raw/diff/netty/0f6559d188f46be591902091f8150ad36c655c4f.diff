[+++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, +     * @throws Exception    is thrown if an error occurs. In that case it will be handled by, +     *                      {@link #exceptionCaught(ChannelHandlerContext, Throwable)} which will by default close, +     *                      the {@link Channel}., +        ctx.pipeline().remove(this);, +    }, +, +    /**, +     * Handle the {@link Throwable} by logging and closing the {@link Channel}. Sub-classes may override this., +     */, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +        logger.warn("Failed to initialize a channel. Closing: " + ctx.channel(), cause);, +        try {, +            ChannelPipeline pipeline = ctx.pipeline();, +        } finally {, +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, +     * @throws Exception    is thrown if an error occurs. In that case it will be handled by, +     *                      {@link #exceptionCaught(ChannelHandlerContext, Throwable)} which will by default close, +     *                      the {@link Channel}., +        ctx.pipeline().remove(this);, +    }, +, +    /**, +     * Handle the {@link Throwable} by logging and closing the {@link Channel}. Sub-classes may override this., +     */, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +        logger.warn("Failed to initialize a channel. Closing: " + ctx.channel(), cause);, +        try {, +            ChannelPipeline pipeline = ctx.pipeline();, +        } finally {, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +import io.netty.channel.embedded.EmbeddedChannel;, +    @Test(timeout = 5000), +    public void testChannelInitializerException() throws Exception {, +        final IllegalStateException exception = new IllegalStateException();, +        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();, +        final CountDownLatch latch = new CountDownLatch(1);, +        EmbeddedChannel channel = new EmbeddedChannel(new ChannelInitializer<Channel>() {, +            @Override, +            protected void initChannel(Channel ch) throws Exception {, +                throw exception;, +            }, +, +            @Override, +            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +                super.exceptionCaught(ctx, cause);, +                error.set(cause);, +                latch.countDown();, +            }, +        });, +        latch.await();, +        assertFalse(channel.isActive());, +        assertSame(exception, error.get());, +    }, +]