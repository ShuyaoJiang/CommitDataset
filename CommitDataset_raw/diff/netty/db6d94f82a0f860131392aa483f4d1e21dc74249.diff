[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +                || statusCode >= 1015 && statusCode <= 2999) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +                || statusCode >= 1015 && statusCode <= 2999) {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoderTest.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.UnpooledByteBufAllocator;, +import io.netty.channel.Channel;, +import static org.junit.Assert.*;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +, +    @Test, +    public void supportIanaStatusCodes() throws Exception {, +        Set<Integer> forbiddenIanaCodes = new HashSet<Integer>();, +        forbiddenIanaCodes.add(1004);, +        forbiddenIanaCodes.add(1005);, +        forbiddenIanaCodes.add(1006);, +        Set<Integer> validIanaCodes = new HashSet<Integer>();, +        for (int i = 1000; i < 1015; i++) {, +            validIanaCodes.add(i);, +        }, +        validIanaCodes.removeAll(forbiddenIanaCodes);, +, +        ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);, +        Mockito.when(ctx.alloc()).thenReturn(UnpooledByteBufAllocator.DEFAULT);, +, +        Channel channel = Mockito.mock(Channel.class);, +        Mockito.when(channel.isActive()).thenReturn(false);, +        Mockito.when(ctx.channel()).thenReturn(channel);, +, +        List<Object> out = new ArrayList<Object>();, +, +        for (int statusCode: validIanaCodes) {, +            WebSocket08FrameEncoder encoder = new WebSocket08FrameEncoder(true);, +            WebSocket08FrameDecoder decoder = new WebSocket08FrameDecoder(true, true, 65535, false);, +, +            CloseWebSocketFrame inputFrame = new CloseWebSocketFrame(statusCode, "Bye");, +            try {, +                encoder.encode(ctx, inputFrame, out);, +                ByteBuf serializedCloseFrame = (ByteBuf) out.get(0);, +                out.clear();, +, +                decoder.decode(ctx, serializedCloseFrame, out);, +                CloseWebSocketFrame outputFrame = (CloseWebSocketFrame) out.get(0);, +                out.clear();, +, +                try {, +                    assertEquals(statusCode, outputFrame.statusCode());, +                } finally {, +                    outputFrame.release();, +                }, +            } finally {, +                inputFrame.release();, +            }, +        }, +    }]