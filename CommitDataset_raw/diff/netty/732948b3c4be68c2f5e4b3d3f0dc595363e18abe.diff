[+++ b/handler/src/main/java/io/netty/handler/ssl/SslUtils.java, +import io.netty.buffer.ByteBufUtil;, +import java.nio.ByteOrder;, +                packetLength = unsignedShortBE(buffer, offset + 3) + SSL_RECORD_HEADER_LENGTH;, +                packetLength = headerLength == 2 ?, +                        (shortBE(buffer, offset) & 0x7FFF) + 2 : (shortBE(buffer, offset) & 0x3FFF) + 3;, +    // Reads a big-endian unsigned short integer from the buffer, +    @SuppressWarnings("deprecation"), +    private static int unsignedShortBE(ByteBuf buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getUnsignedShort(offset) : buffer.getUnsignedShortLE(offset);, +    }, +, +    // Reads a big-endian short integer from the buffer, +    @SuppressWarnings("deprecation"), +    private static short shortBE(ByteBuf buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getShort(offset) : buffer.getShortLE(offset);, +    }, +, +    // Reads a big-endian unsigned short integer from the buffer, +    private static int unsignedShortBE(ByteBuffer buffer, int offset) {, +        return shortBE(buffer, offset) & 0xFFFF;, +    }, +, +    // Reads a big-endian short integer from the buffer, +    private static short shortBE(ByteBuffer buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getShort(offset) : ByteBufUtil.swapShort(buffer.getShort(offset));, +                packetLength = unsignedShortBE(buffer, pos + 3) + SSL_RECORD_HEADER_LENGTH;, +                packetLength = headerLength == 2 ?, +                        (shortBE(buffer, pos) & 0x7FFF) + 2 : (shortBE(buffer, pos) & 0x3FFF) + 3;, +++ b/handler/src/main/java/io/netty/handler/ssl/SslUtils.java, +import io.netty.buffer.ByteBufUtil;, +import java.nio.ByteOrder;, +                packetLength = unsignedShortBE(buffer, offset + 3) + SSL_RECORD_HEADER_LENGTH;, +                packetLength = headerLength == 2 ?, +                        (shortBE(buffer, offset) & 0x7FFF) + 2 : (shortBE(buffer, offset) & 0x3FFF) + 3;, +    // Reads a big-endian unsigned short integer from the buffer, +    @SuppressWarnings("deprecation"), +    private static int unsignedShortBE(ByteBuf buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getUnsignedShort(offset) : buffer.getUnsignedShortLE(offset);, +    }, +, +    // Reads a big-endian short integer from the buffer, +    @SuppressWarnings("deprecation"), +    private static short shortBE(ByteBuf buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getShort(offset) : buffer.getShortLE(offset);, +    }, +, +    // Reads a big-endian unsigned short integer from the buffer, +    private static int unsignedShortBE(ByteBuffer buffer, int offset) {, +        return shortBE(buffer, offset) & 0xFFFF;, +    }, +, +    // Reads a big-endian short integer from the buffer, +    private static short shortBE(ByteBuffer buffer, int offset) {, +        return buffer.order() == ByteOrder.BIG_ENDIAN ?, +                buffer.getShort(offset) : ByteBufUtil.swapShort(buffer.getShort(offset));, +                packetLength = unsignedShortBE(buffer, pos + 3) + SSL_RECORD_HEADER_LENGTH;, +                packetLength = headerLength == 2 ?, +                        (shortBE(buffer, pos) & 0x7FFF) + 2 : (shortBE(buffer, pos) & 0x3FFF) + 3;, +++ b/handler/src/test/java/io/netty/handler/ssl/SslUtilsTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import org.junit.Test;, +, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLException;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.security.NoSuchAlgorithmException;, +, +import static io.netty.handler.ssl.SslUtils.getEncryptedPacketLength;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +public class SslUtilsTest {, +, +    @SuppressWarnings("deprecation")]