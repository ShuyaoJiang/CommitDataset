[+++ b/handler/src/main/java/io/netty/handler/traffic/AbstractTrafficShapingHandler.java, +import org.jboss.netty.util.DefaultObjectSizeEstimator;, +import org.jboss.netty.util.ExternalResourceReleasable;, +import org.jboss.netty.util.ObjectSizeEstimator;, +     * ObjectSizeEstimator, +     */, +    private ObjectSizeEstimator objectSizeEstimator;, +, +    /**, +    private void init(ObjectSizeEstimator newObjectSizeEstimator,, +        objectSizeEstimator = newObjectSizeEstimator;, +     * Constructor using default {@link ObjectSizeEstimator}, +     *, +        init(new DefaultObjectSizeEstimator(), executor, writeLimit, readLimit,, +                checkInterval);, +     * Constructor using the specified ObjectSizeEstimator, +     *, +     * @param objectSizeEstimator, +     *            the {@link ObjectSizeEstimator} that will be used to compute, +     *            the size of the message, +     * @param executor, +     *          created for instance like Executors.newCachedThreadPool, +     * @param writeLimit, +     *          0 or a limit in bytes/s, +     * @param readLimit, +     *          0 or a limit in bytes/s, +     * @param checkInterval, +     *          The delay between two computations of performances for, +     *            channels or 0 if no stats are to be computed, +     */, +    public AbstractTrafficShapingHandler(, +            ObjectSizeEstimator objectSizeEstimator, Executor executor,, +            long writeLimit, long readLimit, long checkInterval) {, +        init(objectSizeEstimator, executor, writeLimit, readLimit,, +                checkInterval);, +    }, +, +    /**, +     * Constructor using default {@link ObjectSizeEstimator} and using default Check Interval, +     *, +        init(new DefaultObjectSizeEstimator(), executor, writeLimit, readLimit,, +                DEFAULT_CHECK_INTERVAL);, +    }, +, +    /**, +     * Constructor using the specified ObjectSizeEstimator and using default Check Interval, +     *, +     * @param objectSizeEstimator, +     *            the {@link ObjectSizeEstimator} that will be used to compute, +     *            the size of the message, +     * @param executor, +     *          created for instance like Executors.newCachedThreadPool, +     * @param writeLimit, +     *          0 or a limit in bytes/s, +     * @param readLimit, +     *          0 or a limit in bytes/s, +     */, +    public AbstractTrafficShapingHandler(, +            ObjectSizeEstimator objectSizeEstimator, Executor executor,, +            long writeLimit, long readLimit) {, +        init(objectSizeEstimator, executor, writeLimit, readLimit,, +                DEFAULT_CHECK_INTERVAL);, +    }, +, +    /**, +     * Constructor using default {@link ObjectSizeEstimator} and using NO LIMIT and default Check Interval, +     *, +     * @param executor, +     *          created for instance like Executors.newCachedThreadPool, +     */, +    public AbstractTrafficShapingHandler(Executor executor) {, +        init(new DefaultObjectSizeEstimator(), executor, 0, 0,, +                DEFAULT_CHECK_INTERVAL);, +    }, +, +    /**, +     * Constructor using the specified ObjectSizeEstimator and using NO LIMIT and default Check Interval, +     *, +     * @param objectSizeEstimator, +     *            the {@link ObjectSizeEstimator} that will be used to compute, +     *            the size of the message, +     * @param executor, +     *          created for instance like Executors.newCachedThreadPool, +     */, +    public AbstractTrafficShapingHandler(, +            ObjectSizeEstimator objectSizeEstimator, Executor executor) {, +        init(objectSizeEstimator, executor, 0, 0, DEFAULT_CHECK_INTERVAL);, +    }, +, +    /**, +     * Constructor using default {@link ObjectSizeEstimator} and using NO LIMIT, +     *, +     * @param executor, +     *          created for instance like Executors.newCachedThreadPool, +     * @param checkInterval, +     *          The delay between two computations of performances for, +     *            channels or 0 if no stats are to be computed, +     */, +    public AbstractTrafficShapingHandler(Executor executor, long checkInterval) {, +        init(new DefaultObjectSizeEstimator(), executor, 0, 0, checkInterval);]