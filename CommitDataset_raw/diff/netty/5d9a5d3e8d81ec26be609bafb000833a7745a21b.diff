[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnApplicationProtocolNegotiator.java, +    private static final class FailureWrapper extends AllocatorAwareSslEngineWrapperFactory {, +    private static final class AlpnWrapper extends AllocatorAwareSslEngineWrapperFactory {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnApplicationProtocolNegotiator.java, +    private static final class FailureWrapper extends AllocatorAwareSslEngineWrapperFactory {, +    private static final class AlpnWrapper extends AllocatorAwareSslEngineWrapperFactory {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkApplicationProtocolNegotiator.java, +         * @param applicationNegotiator The application level protocol negotiator, +         * @param isServer <ul>, +         * <li>{@code true} if the engine is for server side of connections</li>, +         * <li>{@code false} if the engine is for client side of connections</li>, +         * </ul>, +         * @return The resulting wrapped engine. This may just be {@code engine}., +         */, +        SSLEngine wrapSslEngine(, +                SSLEngine engine, JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer);, +    }, +, +    abstract class AllocatorAwareSslEngineWrapperFactory implements SslEngineWrapperFactory {, +, +        @Override, +        public final SSLEngine wrapSslEngine(SSLEngine engine,, +                                       JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer) {, +            return wrapSslEngine(engine, ByteBufAllocator.DEFAULT, applicationNegotiator, isServer);, +        }, +, +        /**, +         * Abstract factory pattern for wrapping an {@link SSLEngine} object. This is useful for NPN/APLN support., +         *, +         * @param engine The engine to wrap., +        abstract SSLEngine wrapSslEngine(SSLEngine engine, ByteBufAllocator alloc,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnApplicationProtocolNegotiator.java, +    private static final class FailureWrapper extends AllocatorAwareSslEngineWrapperFactory {, +    private static final class AlpnWrapper extends AllocatorAwareSslEngineWrapperFactory {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkApplicationProtocolNegotiator.java, +         * @param applicationNegotiator The application level protocol negotiator, +         * @param isServer <ul>, +         * <li>{@code true} if the engine is for server side of connections</li>, +         * <li>{@code false} if the engine is for client side of connections</li>, +         * </ul>, +         * @return The resulting wrapped engine. This may just be {@code engine}., +         */, +        SSLEngine wrapSslEngine(, +                SSLEngine engine, JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer);, +    }, +, +    abstract class AllocatorAwareSslEngineWrapperFactory implements SslEngineWrapperFactory {, +, +        @Override, +        public final SSLEngine wrapSslEngine(SSLEngine engine,, +                                       JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer) {, +            return wrapSslEngine(engine, ByteBufAllocator.DEFAULT, applicationNegotiator, isServer);, +        }, +, +        /**, +         * Abstract factory pattern for wrapping an {@link SSLEngine} object. This is useful for NPN/APLN support., +         *, +         * @param engine The engine to wrap., +        abstract SSLEngine wrapSslEngine(SSLEngine engine, ByteBufAllocator alloc,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkDefaultApplicationProtocolNegotiator.java, +        public SSLEngine wrapSslEngine(SSLEngine engine,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnApplicationProtocolNegotiator.java, +    private static final class FailureWrapper extends AllocatorAwareSslEngineWrapperFactory {, +    private static final class AlpnWrapper extends AllocatorAwareSslEngineWrapperFactory {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkApplicationProtocolNegotiator.java, +         * @param applicationNegotiator The application level protocol negotiator, +         * @param isServer <ul>, +         * <li>{@code true} if the engine is for server side of connections</li>, +         * <li>{@code false} if the engine is for client side of connections</li>, +         * </ul>, +         * @return The resulting wrapped engine. This may just be {@code engine}., +         */, +        SSLEngine wrapSslEngine(, +                SSLEngine engine, JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer);, +    }, +, +    abstract class AllocatorAwareSslEngineWrapperFactory implements SslEngineWrapperFactory {, +, +        @Override, +        public final SSLEngine wrapSslEngine(SSLEngine engine,, +                                       JdkApplicationProtocolNegotiator applicationNegotiator, boolean isServer) {, +            return wrapSslEngine(engine, ByteBufAllocator.DEFAULT, applicationNegotiator, isServer);, +        }, +, +        /**, +         * Abstract factory pattern for wrapping an {@link SSLEngine} object. This is useful for NPN/APLN support., +         *, +         * @param engine The engine to wrap., +        abstract SSLEngine wrapSslEngine(SSLEngine engine, ByteBufAllocator alloc,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkDefaultApplicationProtocolNegotiator.java, +        public SSLEngine wrapSslEngine(SSLEngine engine,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkNpnApplicationProtocolNegotiator.java, +        public SSLEngine wrapSslEngine(SSLEngine engine,, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnApplicationProtocolNegotiator.java, +    private static final class FailureWrapper extends AllocatorAwareSslEngineWrapperFactory {, +    private static final class AlpnWrapper extends AllocatorAwareSslEngineWrapperFactory {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkApplicationProtocolNegotiator.java, +         * @param applicationNegotiator The application level protocol negotiator, +         * @param isServer <ul>, +         * <li>{@code true} if the engine is for server side of connections</li>]