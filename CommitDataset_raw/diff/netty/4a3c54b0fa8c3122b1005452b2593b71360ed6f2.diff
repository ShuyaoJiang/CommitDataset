[+++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, +            new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, +            new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannelConfig.java, +    int getReceivePacketSize();, +, +    void setReceivePacketSize(int receivePacketSize);, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, +            new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannelConfig.java, +    int getReceivePacketSize();, +, +    void setReceivePacketSize(int receivePacketSize);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, +    private static int DEFAULT_RECEIVE_PACKET_SIZE = 2048;, +, +    private volatile int receivePacketSize = DEFAULT_RECEIVE_PACKET_SIZE;, +                IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, UDP_RECEIVE_PACKET_SIZE);, +        if (option == UDP_RECEIVE_PACKET_SIZE) {, +            return (T) Integer.valueOf(getReceivePacketSize());, +        }, +    public int getReceivePacketSize() {, +        return receivePacketSize;, +    }, +, +    @Override, +    public void setReceivePacketSize(int receivePacketSize) {, +        if (receivePacketSize <= 0) {, +            throw new IllegalArgumentException(, +                    String.format("receivePacketSize: %d (expected: > 0)", receivePacketSize));, +        }, +        this.receivePacketSize = receivePacketSize;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> UDP_RECEIVE_PACKET_SIZE =, +            new ChannelOption<Integer>("UDP_RECEIVE_PACKET_SIZE", Integer.class);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannelConfig.java, +    int getReceivePacketSize();, +, +    void setReceivePacketSize(int receivePacketSize);, +, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, +    private static int DEFAULT_RECEIVE_PACKET_SIZE = 2048;, +, +    private volatile int receivePacketSize = DEFAULT_RECEIVE_PACKET_SIZE;, +                IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, UDP_RECEIVE_PACKET_SIZE);, +        if (option == UDP_RECEIVE_PACKET_SIZE) {, +            return (T) Integer.valueOf(getReceivePacketSize());, +        }, +    public int getReceivePacketSize() {, +        return receivePacketSize;, +    }, +, +    @Override, +    public void setReceivePacketSize(int receivePacketSize) {, +        if (receivePacketSize <= 0) {, +            throw new IllegalArgumentException(, +                    String.format("receivePacketSize: %d (expected: > 0)", receivePacketSize));, +        }, +        this.receivePacketSize = receivePacketSize;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +        ByteBuffer data = ByteBuffer.allocate(config().getReceivePacketSize());]