[+++ b/src/main/java/io/netty/handler/execution/seda/FineGrainedSedaExecutor.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.execution.seda;, +, +import java.net.SocketAddress;, +import java.util.concurrent.Executor;, +, +import io.netty.buffer.ChannelBuffer;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelEvent;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelStateEvent;, +import io.netty.channel.ChildChannelStateEvent;, +import io.netty.channel.ExceptionEvent;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.WriteCompletionEvent;, +import io.netty.handler.execution.ChannelEventRunnable;, +, +/**, + * {@link SimpleSedaExecutor} which offers an easy way to handle {@link ChannelEvent}'s in a more fine grained fashion. Sub-classes of this {@link FineGrainedSedaExecutor} should override needed methods to hand over the event to a specific, + * {@link Executor}. By default all events will get passed to the {@link Executor}'s which were given to construct the {@link FineGrainedSedaExecutor}., + * , + * This class is marked abstract to make it clear that it should only be used for sub-classing. If you only need to pass upstream/downstream events to a different {@link Executor} use {@link SimpleSedaExecutor}., + * , + *, + */, +public abstract class FineGrainedSedaExecutor extends SimpleSedaExecutor{, +, +    public FineGrainedSedaExecutor(Executor upstreamExecutor, Executor downstreamExecutor) {, +        super(upstreamExecutor, downstreamExecutor);, +    }, +, +    public FineGrainedSedaExecutor(Executor executor) {, +        super(executor);, +    }, +, +    @Override, +    protected final void executeDownstream(ChannelDownstreamEventRunnable runnable) throws Exception {, +        ChannelEvent e = runnable.getEvent();, +, +        if (e instanceof MessageEvent) {, +            executeWriteRequested(runnable, (MessageEvent) e);, +        } else if (e instanceof ChannelStateEvent) {, +            ChannelStateEvent evt = (ChannelStateEvent) e;, +            switch (evt.getState()) {, +            case OPEN:, +                if (!Boolean.TRUE.equals(evt.getValue())) {, +                    executeCloseRequested(runnable, evt);, +                }, +                break;, +            case BOUND:, +                if (evt.getValue() != null) {, +                    executeBindRequested(runnable, evt);, +                } else {, +                    executeUnbindRequested(runnable, evt);, +                }, +                break;, +            case CONNECTED:, +                if (evt.getValue() != null) {, +                    executeConnectRequested(runnable, evt);, +                } else {, +                    executeDisconnectRequested(runnable, evt);, +                }, +                break;, +            case INTEREST_OPS:, +                executeSetInterestOpsRequested(runnable, evt);, +                break;, +            default:, +                super.executeDownstream(runnable);, +                break;, +            }, +        } else {, +            super.executeDownstream(runnable);, +        }, +    }, +, +    /**, +     * Invoked when {@link Channel#write(Object)} is called., +     */, +    public void executeWriteRequested(ChannelDownstreamEventRunnable runnable, MessageEvent e) throws Exception {, +        super.executeDownstream(runnable);, +    }, +, +    /**, +     * Invoked when {@link Channel#bind(SocketAddress)} was called., +     */]