[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    private boolean outboundClosed;, +, +                SslHandler.this.outboundClosed = true;, +        setHandshakeFailure(ctx, CHANNEL_CLOSED, !outboundClosed);, +        setHandshakeFailure(ctx, cause, true);, +    }, +, +    /**, +     * Notify all the handshake futures about the failure during the handshake., +     */, +    private void setHandshakeFailure(ChannelHandlerContext ctx, Throwable cause, boolean closeInbound) {, +        if (closeInbound) {, +        }, +        outboundClosed = true;, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    private boolean outboundClosed;, +, +                SslHandler.this.outboundClosed = true;, +        setHandshakeFailure(ctx, CHANNEL_CLOSED, !outboundClosed);, +        setHandshakeFailure(ctx, cause, true);, +    }, +, +    /**, +     * Notify all the handshake futures about the failure during the handshake., +     */, +    private void setHandshakeFailure(ChannelHandlerContext ctx, Throwable cause, boolean closeInbound) {, +        if (closeInbound) {, +        }, +        outboundClosed = true;, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketSslSessionReuseTest.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.SimpleChannelInboundHandler;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.ssl.JdkSslClientContext;, +import io.netty.handler.ssl.JdkSslContext;, +import io.netty.handler.ssl.JdkSslServerContext;, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.SslHandler;, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLSessionContext;, +, +import java.io.File;, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.security.cert.CertificateException;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.junit.Assert.*;, +, +@RunWith(Parameterized.class), +public class SocketSslSessionReuseTest extends AbstractSocketTest {, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(SocketSslSessionReuseTest.class);, +, +    private static final File CERT_FILE;, +    private static final File KEY_FILE;, +, +    static {, +        SelfSignedCertificate ssc;, +        try {]