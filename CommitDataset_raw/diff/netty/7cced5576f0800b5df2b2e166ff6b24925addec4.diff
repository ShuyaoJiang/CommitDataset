[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        public PrefaceDecoder(ChannelHandlerContext ctx) throws Exception {, +        private void sendPreface(ChannelHandlerContext ctx) throws Exception {, +                // If this handler is extended by the user and we directly fire the userEvent from this context then, +                // the user will not see the event. We should fire the event starting with this handler so this class, +                // (and extending classes) have a chance to process the event., +                userEventTriggered(ctx, Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.INSTANCE);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        public PrefaceDecoder(ChannelHandlerContext ctx) throws Exception {, +        private void sendPreface(ChannelHandlerContext ctx) throws Exception {, +                // If this handler is extended by the user and we directly fire the userEvent from this context then, +                // the user will not see the event. We should fire the event starting with this handler so this class, +                // (and extending classes) have a chance to process the event., +                userEventTriggered(ctx, Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.INSTANCE);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +import java.util.concurrent.CountDownLatch;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import static org.mockito.Mockito.eq;, +    public void prefaceUserEventProcessed() throws Exception {, +        final CountDownLatch latch = new CountDownLatch(1);, +        handler = new Http2ConnectionHandler(decoder, encoder, new Http2Settings()) {, +            @Override, +            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {, +                if (evt == Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.INSTANCE) {, +                    latch.countDown();, +                }, +            }, +        };, +        handler.handlerAdded(ctx);, +        assertTrue(latch.await(5, SECONDS));, +    }, +, +    @Test]