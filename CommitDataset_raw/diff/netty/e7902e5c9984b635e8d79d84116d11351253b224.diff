[+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java, + * The default {@link SctpServerChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java, + * The default {@link SctpServerChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/NioSctpChannelConfig.java, +import io.netty.channel.ChannelConfig;, + * The {@link SctpChannelConfig} for a NIO SCTP/IP {@link SctpChannel}., + * In addition to the options provided by {@link ChannelConfig} and {@link SctpChannelConfig},, + * {@link NioSctpChannelConfig} allows the following options in the option map:, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java, + * The default {@link SctpServerChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/NioSctpChannelConfig.java, +import io.netty.channel.ChannelConfig;, + * The {@link SctpChannelConfig} for a NIO SCTP/IP {@link SctpChannel}., + * In addition to the options provided by {@link ChannelConfig} and {@link SctpChannelConfig},, + * {@link NioSctpChannelConfig} allows the following options in the option map:, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpBindAddressEvent.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java, + * The default {@link SctpServerChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/NioSctpChannelConfig.java, +import io.netty.channel.ChannelConfig;, + * The {@link SctpChannelConfig} for a NIO SCTP/IP {@link SctpChannel}., + * In addition to the options provided by {@link ChannelConfig} and {@link SctpChannelConfig},, + * {@link NioSctpChannelConfig} allows the following options in the option map:, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpBindAddressEvent.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannel.java, + * A SCTP/IP  {@link Channel} which was either accepted by, + * {@link SctpServerChannel} or created by {@link SctpClientSocketChannelFactory}., +     * Bind a address to the already bound channel to enable multi-homing., +     * The Channel bust be bound and yet to be connected., +     */, +    ChannelFuture bindAddress(InetAddress localAddress);, +, +, +    /**, +     *  Unbind the address from channel's multi-homing address list., +     *  The address should be added already in multi-homing address list., +     */, +    ChannelFuture unbindAddress(InetAddress localAddress);, +, +    /**, +     * Returns the underlying SCTP association., +     */, +    Association association();, +, +    /**, +     * Return the (primary) local address of the SCTP channel., +     *, +     * Please note that, this return the first local address in the underlying SCTP Channel's, +     * local address iterator. (this method is implemented to support existing Netty API), +     * so application, has to keep track of it's primary address. This can be done by, +     * requests the local SCTP stack, using the SctpStandardSocketOption.SCTP_PRIMARY_ADDR., +     * Please note that, it will return more than one address if this channel is using multi-homing, +     * Returns the {@link SctpChannelConfig} configuration of the channel., +     * Return the (primary) remote address of the SCTP channel., +     *, +     * Please note that, this return the first remote address in the underlying SCTP Channel's, +     * remote address iterator. (this method is implemented to support existing Netty API), +     * so application, has to keep track of remote's primary address., +     *, +     * If a peer needs to request the remote to set a specific address as primary, It can, +     * requests the local SCTP stack, using the SctpStandardSocketOption.SCTP_SET_PEER_PRIMARY_ADDR., +     * Return all remote addresses of the SCTP server channel., +     * Please note that, it will return more than one address if the remote is using multi-homing., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultNioSctpChannelConfig.java, + * The default {@link NioSctpChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java, + * The default {@link SctpServerChannelConfig} implementation for SCTP., +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/NioSctpChannelConfig.java, +import io.netty.channel.ChannelConfig;, + * The {@link SctpChannelConfig} for a NIO SCTP/IP {@link SctpChannel}., + * In addition to the options provided by {@link ChannelConfig} and {@link SctpChannelConfig},, + * {@link NioSctpChannelConfig} allows the following options in the option map:, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpBindAddressEvent.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannel.java, + * A SCTP/IP  {@link Channel} which was either accepted by, + * {@link SctpServerChannel} or created by {@link SctpClientSocketChannelFactory}., +     * Bind a address to the already bound channel to enable multi-homing., +     * The Channel bust be bound and yet to be connected., +     */, +    ChannelFuture bindAddress(InetAddress localAddress);, +, +, +    /**, +     *  Unbind the address from channel's multi-homing address list., +     *  The address should be added already in multi-homing address list., +     */, +    ChannelFuture unbindAddress(InetAddress localAddress);, +, +    /**]