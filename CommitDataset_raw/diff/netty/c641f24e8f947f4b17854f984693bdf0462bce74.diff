[+++ b/src/main/java/org/jboss/netty/channel/DefaultFileRegion.java, +    private boolean releaseAfterTransfer;, +    public DefaultFileRegion(FileChannel file, long position, long count, boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    /**, +     * Calls {@link #DefaultFileRegion(FileChannel, long, long, boolean)} with <code>true</code>, +     * as the last argument., +     * , +     * @param file, +     * @param position, +     * @param count, +     */, +    public DefaultFileRegion(FileChannel file, long position, long count) {, +        this(file, position, count, true);, +    }, +    , +, +, +    @Override, +    public boolean releaseAfterTransfer() {, +        return releaseAfterTransfer;, +    }, +    , +    public void setReleaseAfterTransfer(boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    }, +++ b/src/main/java/org/jboss/netty/channel/DefaultFileRegion.java, +    private boolean releaseAfterTransfer;, +    public DefaultFileRegion(FileChannel file, long position, long count, boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    /**, +     * Calls {@link #DefaultFileRegion(FileChannel, long, long, boolean)} with <code>true</code>, +     * as the last argument., +     * , +     * @param file, +     * @param position, +     * @param count, +     */, +    public DefaultFileRegion(FileChannel file, long position, long count) {, +        this(file, position, count, true);, +    }, +    , +, +, +    @Override, +    public boolean releaseAfterTransfer() {, +        return releaseAfterTransfer;, +    }, +    , +    public void setReleaseAfterTransfer(boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    }, +++ b/src/main/java/org/jboss/netty/channel/FileRegion.java, +    , +    /**, +     * Returns <code>true</code> if {@link #releaseExternalResources()} should be called after the, +     * transfer of the {@link FileRegion} was complete., +     * , +     * @return release, +     */, +    public boolean releaseAfterTransfer();, +++ b/src/main/java/org/jboss/netty/channel/DefaultFileRegion.java, +    private boolean releaseAfterTransfer;, +    public DefaultFileRegion(FileChannel file, long position, long count, boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    /**, +     * Calls {@link #DefaultFileRegion(FileChannel, long, long, boolean)} with <code>true</code>, +     * as the last argument., +     * , +     * @param file, +     * @param position, +     * @param count, +     */, +    public DefaultFileRegion(FileChannel file, long position, long count) {, +        this(file, position, count, true);, +    }, +    , +, +, +    @Override, +    public boolean releaseAfterTransfer() {, +        return releaseAfterTransfer;, +    }, +    , +    public void setReleaseAfterTransfer(boolean releaseAfterTransfer) {, +        this.releaseAfterTransfer = releaseAfterTransfer;, +    }, +++ b/src/main/java/org/jboss/netty/channel/FileRegion.java, +    , +    /**, +     * Returns <code>true</code> if {@link #releaseExternalResources()} should be called after the, +     * transfer of the {@link FileRegion} was complete., +     * , +     * @return release, +     */, +    public boolean releaseAfterTransfer();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/SocketSendBufferPool.java, +            if (file.releaseAfterTransfer()) {, +    }, +++ b/src/main/java/org/jboss/netty/channel/DefaultFileRegion.java]