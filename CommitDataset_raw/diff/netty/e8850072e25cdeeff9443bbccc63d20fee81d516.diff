[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            FlowControlledData nextData;, +            if (FlowControlledData.class != next.getClass() ||, +                Integer.MAX_VALUE - (nextData = (FlowControlledData) next).size() < size()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            FlowControlledData nextData;, +            if (FlowControlledData.class != next.getClass() ||, +                Integer.MAX_VALUE - (nextData = (FlowControlledData) next).size() < size()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            if (last == null) {, +                enqueueFrameWithoutMerge(frame);, +                return;, +, +            int lastSize = last.size();, +            if (last.merge(ctx, frame)) {, +                incrementPendingBytes(last.size() - lastSize, true);, +                return;, +            }, +            enqueueFrameWithoutMerge(frame);, +        }, +, +        private void enqueueFrameWithoutMerge(FlowControlled frame) {, +            pendingWriteQueue.offer(frame);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            FlowControlledData nextData;, +            if (FlowControlledData.class != next.getClass() ||, +                Integer.MAX_VALUE - (nextData = (FlowControlledData) next).size() < size()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +            if (last == null) {, +                enqueueFrameWithoutMerge(frame);, +                return;, +, +            int lastSize = last.size();, +            if (last.merge(ctx, frame)) {, +                incrementPendingBytes(last.size() - lastSize, true);, +                return;, +            }, +            enqueueFrameWithoutMerge(frame);, +        }, +, +        private void enqueueFrameWithoutMerge(FlowControlled frame) {, +            pendingWriteQueue.offer(frame);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowControllerTest.java, +    public void flowControllerCorrectlyAccountsForBytesWithMerge() throws Http2Exception {, +        controller.initialWindowSize(112); // This must be more than the total merged frame size 110, +        FakeFlowControlled data1 = new FakeFlowControlled(5, 2, true);, +        FakeFlowControlled data2 = new FakeFlowControlled(5, 100, true);, +        sendData(STREAM_A, data1);, +        sendData(STREAM_A, data2);, +        data1.assertNotWritten();, +        data1.assertNotWritten();, +        data2.assertMerged();, +        controller.writePendingBytes();, +        data1.assertFullyWritten();, +        data2.assertNotWritten();, +        verify(listener, never()).writabilityChanged(stream(STREAM_A));, +        assertTrue(controller.isWritable(stream(STREAM_A)));, +    }, +, +    @Test, +        private int currentPadding;, +        private int currentPayloadSize;, +        private int originalPayloadSize;, +        private int originalPadding;, +            this(size, false);, +            this(size, 0, mergeable);, +        }, +, +        private FakeFlowControlled(int payloadSize, int padding, boolean mergeable) {, +            currentPayloadSize = originalPayloadSize = payloadSize;, +            currentPadding = originalPadding = padding;, +            return currentPayloadSize + currentPadding;, +        }, +, +        private int originalSize() {, +            return originalPayloadSize + originalPadding;, +            if (allowedBytes <= 0 && size() != 0) {, +            int written = Math.min(size(), allowedBytes);, +            if (written > currentPayloadSize) {, +                written -= currentPayloadSize;, +                currentPayloadSize = 0;, +                currentPadding -= written;, +            } else {, +                currentPayloadSize -= written;, +            }, +                FakeFlowControlled ffcNext = (FakeFlowControlled) next;, +                originalPayloadSize += ffcNext.originalPayloadSize;, +                currentPayloadSize += ffcNext.originalPayloadSize;, +                currentPadding = originalPadding = Math.max(originalPadding, ffcNext.originalPadding);, +                ffcNext.merged = true;, +            return originalSize() - size();, +            assertEquals(0, currentPayloadSize);, +            assertEquals(0, currentPadding);]