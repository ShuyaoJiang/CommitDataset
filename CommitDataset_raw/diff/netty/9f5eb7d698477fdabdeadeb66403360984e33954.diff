[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.CharsetUtil;, +    public CharSequence getCharSequence(int index, int length, Charset charset) {, +        // TODO: We could optimize this for UTF8 and US_ASCII, +        return toString(index, length, charset);, +    }, +, +    @Override, +    public CharSequence readCharSequence(int length, Charset charset) {, +        CharSequence sequence = getCharSequence(readerIndex, length, charset);, +        readerIndex += length;, +        return sequence;, +    }, +, +    @Override, +    public int setCharSequence(int index, CharSequence sequence, Charset charset) {, +        if (charset.equals(CharsetUtil.UTF_8)) {, +            ensureWritable(ByteBufUtil.utf8MaxBytes(sequence));, +            return ByteBufUtil.writeUtf8(this, index, sequence, sequence.length());, +        }, +        if (charset.equals(CharsetUtil.US_ASCII)) {, +            int len = sequence.length();, +            ensureWritable(len);, +            return ByteBufUtil.writeAscii(this, index, sequence, len);, +        }, +        byte[] bytes = sequence.toString().getBytes(charset);, +        ensureWritable(bytes.length);, +        setBytes(index, bytes);, +        return bytes.length;, +    }, +, +    @Override, +    public int writeCharSequence(CharSequence sequence, Charset charset) {, +        int written = setCharSequence(writerIndex, sequence, charset);, +        writerIndex += written;, +        return written;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.CharsetUtil;, +    public CharSequence getCharSequence(int index, int length, Charset charset) {, +        // TODO: We could optimize this for UTF8 and US_ASCII, +        return toString(index, length, charset);, +    }, +, +    @Override, +    public CharSequence readCharSequence(int length, Charset charset) {, +        CharSequence sequence = getCharSequence(readerIndex, length, charset);, +        readerIndex += length;, +        return sequence;, +    }, +, +    @Override, +    public int setCharSequence(int index, CharSequence sequence, Charset charset) {, +        if (charset.equals(CharsetUtil.UTF_8)) {, +            ensureWritable(ByteBufUtil.utf8MaxBytes(sequence));, +            return ByteBufUtil.writeUtf8(this, index, sequence, sequence.length());, +        }, +        if (charset.equals(CharsetUtil.US_ASCII)) {, +            int len = sequence.length();, +            ensureWritable(len);, +            return ByteBufUtil.writeAscii(this, index, sequence, len);, +        }, +        byte[] bytes = sequence.toString().getBytes(charset);, +        ensureWritable(bytes.length);, +        setBytes(index, bytes);, +        return bytes.length;, +    }, +, +    @Override, +    public int writeCharSequence(CharSequence sequence, Charset charset) {, +        int written = setCharSequence(writerIndex, sequence, charset);, +        writerIndex += written;, +        return written;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    public CharSequence getCharSequence(int index, int length, Charset charset) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.getCharSequence(index, length, charset);, +    }, +, +    @Override, +    public int setCharSequence(int index, CharSequence sequence, Charset charset) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.setCharSequence(index, sequence, charset);, +    }, +, +    @Override, +    public CharSequence readCharSequence(int length, Charset charset) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.readCharSequence(length, charset);, +    }, +, +    @Override, +    public int writeCharSequence(CharSequence sequence, Charset charset) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.writeCharSequence(sequence, charset);]