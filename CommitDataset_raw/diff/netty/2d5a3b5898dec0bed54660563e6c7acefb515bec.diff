[+++ b/codec/src/main/java/io/netty/handler/codec/xml/XmlFrameDecoder.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.xml;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.ByteToMessageDecoder;, +import io.netty.handler.codec.CorruptedFrameException;, +import io.netty.handler.codec.TooLongFrameException;, +import io.netty.util.CharsetUtil;, +, +import java.util.List;, +, +/**, + * A frame decoder for single separate XML based message streams., + * <p/>, + * A couple examples will better help illustrate, + * what this decoder actually does., + * <p/>, + * Given an input array of bytes split over 3 frames like this:, + * <pre>, + * +-----+-----+-----------+, + * | &lt;an | Xml | Element/&gt; |, + * +-----+-----+-----------+, + * </pre>, + * <p/>, + * this decoder would output a single frame:, + * <p/>, + * <pre>, + * +-----------------+, + * | &lt;anXmlElement/&gt; |, + * +-----------------+, + * </pre>, + *, + * Given an input array of bytes split over 5 frames like this:, + * <pre>, + * +-----+-----+-----------+-----+----------------------------------+, + * | &lt;an | Xml | Element/&gt; | &lt;ro | ot&gt;&lt;child&gt;content&lt;/child&gt;&lt;/root&gt; |, + * +-----+-----+-----------+-----+----------------------------------+, + * </pre>, + * <p/>, + * this decoder would output two frames:, + * <p/>, + * <pre>, + * +-----------------+-------------------------------------+, + * | &lt;anXmlElement/&gt; | &lt;root&gt;&lt;child&gt;content&lt;/child&gt;&lt;/root&gt; |, + * +-----------------+-------------------------------------+, + * </pre>, + *, + * Please note that this decoder is not suitable for, + * xml streaming protocols such as, + * <a href="http://xmpp.org/rfcs/rfc6120.html">XMPP</a>,, + * where an initial xml element opens the stream and only, + * gets closed at the end of the session, although this class, + * could probably allow for such type of message flow with, + * minor modifications., + */, +public class XmlFrameDecoder extends ByteToMessageDecoder {, +, +    private final int maxFrameLength;, +, +    public XmlFrameDecoder(int maxFrameLength) {, +        if (maxFrameLength < 1) {, +            throw new IllegalArgumentException("maxFrameLength must be a positive int");, +        }, +        this.maxFrameLength = maxFrameLength;, +    }, +, +    @Override, +    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +        boolean openingBracketFound = false;, +        boolean atLeastOneXmlElementFound = false;, +        long openBracketsCount = 0;, +        int length = 0;, +        int leadingWhiteSpaceCount = 0;, +        final int bufferLength = in.writerIndex();, +, +        if (bufferLength > maxFrameLength) {, +            // bufferLength exceeded maxFrameLength; dropping frame, +            fail(ctx, bufferLength);, +            in.skipBytes(in.readableBytes());, +            return;, +        }, +, +        for (int i = in.readerIndex(); i < bufferLength; i++) {, +            final byte readByte = in.getByte(i);]