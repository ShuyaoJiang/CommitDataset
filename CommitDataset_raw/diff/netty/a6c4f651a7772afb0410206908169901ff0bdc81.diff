[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket00FrameEncoder());, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket00FrameEncoder());, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket08FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket00FrameEncoder());, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket08FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket13FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket00FrameEncoder());, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket08FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket13FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/example/src/main/java/io/netty/example/http/websocketx/client/WebSocketClient.java, +            final WebSocketClientHandler handler =, +                    new WebSocketClientHandler(, +                                    uri, WebSocketVersion.V13, null, false, customHeaders));, +                     pipeline.addLast("ws-handler", handler);, +            handler.handshakeFuture().sync();, +            for (int i = 0; i < 1; i++) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket00FrameEncoder());, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket08FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +                p.addAfter(, +                        p.context(HttpRequestEncoder.class).name(),, +                        "ws-encoder", new WebSocket13FrameEncoder(true));, +        ChannelPipeline p = channel.pipeline();, +        p.remove(HttpRequestEncoder.class);, +        p.get(HttpResponseDecoder.class).replace(, +++ b/example/src/main/java/io/netty/example/http/websocketx/client/WebSocketClient.java, +            final WebSocketClientHandler handler =, +                    new WebSocketClientHandler(, +                                    uri, WebSocketVersion.V13, null, false, customHeaders));, +                     pipeline.addLast("ws-handler", handler);, +            handler.handshakeFuture().sync();, +            for (int i = 0; i < 1; i++) {, +++ b/example/src/main/java/io/netty/example/http/websocketx/client/WebSocketClientHandler.java, +import io.netty.channel.ChannelFuture;]