[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.collection.IntCollections;, +        private IntObjectMap<DefaultStream> children = IntCollections.emptyMap();, +            if (children == IntCollections.<DefaultStream>emptyMap()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.collection.IntCollections;, +        private IntObjectMap<DefaultStream> children = IntCollections.emptyMap();, +            if (children == IntCollections.<DefaultStream>emptyMap()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            for (Http2Settings.PrimitiveEntry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.collection.IntCollections;, +        private IntObjectMap<DefaultStream> children = IntCollections.emptyMap();, +            if (children == IntCollections.<DefaultStream>emptyMap()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            for (Http2Settings.PrimitiveEntry<Long> entry : settings.entries()) {, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.collection.IntCollections;, +        private IntObjectMap<DefaultStream> children = IntCollections.emptyMap();, +            if (children == IntCollections.<DefaultStream>emptyMap()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            for (Http2Settings.PrimitiveEntry<Long> entry : settings.entries()) {, +++ /dev/null, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.collection.IntCollections;, +        private IntObjectMap<DefaultStream> children = IntCollections.emptyMap();, +            if (children == IntCollections.<DefaultStream>emptyMap()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            for (Http2Settings.PrimitiveEntry<Long> entry : settings.entries()) {, +++ /dev/null, +++ /dev/null, +++ b/common/src/main/templates/io/netty/util/collection/KCollections.template, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.util.collection;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;, +, +/**, + * Utilities for @k@-based primitive collections., + */, +public final class @K@Collections {, +, +    private static final @K@ObjectMap<Object> EMPTY_MAP = new EmptyMap();, +, +    private @K@Collections() {, +    }, +, +    /**, +     * Returns an unmodifiable empty {@link @K@ObjectMap}., +     */, +    @SuppressWarnings("unchecked"), +    public static <V> @K@ObjectMap<V> emptyMap() {, +        return (@K@ObjectMap<V>) EMPTY_MAP;, +    }, +, +    /**, +     * Creates an unmodifiable wrapper around the given map., +     */, +    public static <V> @K@ObjectMap<V> unmodifiableMap(final @K@ObjectMap<V> map) {, +        return new UnmodifiableMap<V>(map);, +    }, +, +    /**, +     * An empty map. All operations that attempt to modify the map are unsupported., +     */, +    private static final class EmptyMap implements @K@ObjectMap<Object> {, +        @Override, +        public Object get(@k@ key) {, +            return null;, +        }, +, +        @Override, +        public Object put(@k@ key, Object value) {, +            throw new UnsupportedOperationException("put");, +        }, +, +        @Override, +        public Object remove(@k@ key) {, +            return null;, +        }]