[+++ b/common/src/main/java/io/netty/util/internal/ObjectUtil.java, +, +    /**, +     * Resolves a possibly null Integer to a primitive int, using a default value., +     * @param wrapper the wrapper, +     * @param defaultValue the default value, +     * @return the primitive value, +     */, +    public static int intValue(Integer wrapper, int defaultValue) {, +        return wrapper != null ? wrapper.intValue() : defaultValue;, +    }, +, +    /**, +     * Resolves a possibly null Long to a primitive long, using a default value., +     * @param wrapper the wrapper, +     * @param defaultValue the default value, +     * @return the primitive value, +     */, +    public static long longValue(Long wrapper, long defaultValue) {, +        return wrapper != null ? wrapper.longValue() : defaultValue;, +    }, +++ b/common/src/main/java/io/netty/util/internal/ObjectUtil.java, +, +    /**, +     * Resolves a possibly null Integer to a primitive int, using a default value., +     * @param wrapper the wrapper, +     * @param defaultValue the default value, +     * @return the primitive value, +     */, +    public static int intValue(Integer wrapper, int defaultValue) {, +        return wrapper != null ? wrapper.intValue() : defaultValue;, +    }, +, +    /**, +     * Resolves a possibly null Long to a primitive long, using a default value., +     * @param wrapper the wrapper, +     * @param defaultValue the default value, +     * @return the primitive value, +     */, +    public static long longValue(Long wrapper, long defaultValue) {, +        return wrapper != null ? wrapper.longValue() : defaultValue;, +    }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.resolver.dns;, +, +import io.netty.channel.EventLoop;, +import io.netty.util.internal.OneTimeTask;, +import io.netty.util.internal.PlatformDependent;, +, +import java.net.InetAddress;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.TimeUnit;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.ObjectUtil.checkPositiveOrZero;, +, +/**, + * Default implementation of {@link DnsCache}, backed by a {@link ConcurrentMap}., + */, +public class DefaultDnsCache implements DnsCache {, +, +    private final ConcurrentMap<String, List<DnsCacheEntry>> resolveCache = PlatformDependent.newConcurrentHashMap();, +    private final int minTtl;, +    private final int maxTtl;, +    private final int negativeTtl;, +, +    /**, +     * Create a cache that respects the TTL returned by the DNS server, +     * and doesn't cache negative responses., +     */, +    public DefaultDnsCache() {, +        this(0, Integer.MAX_VALUE, 0);, +    }, +, +    /**, +     * Create a cache., +     * @param minTtl the minimum TTL, +     * @param maxTtl the maximum TTL, +     * @param negativeTtl the TTL for failed queries, +     */, +    public DefaultDnsCache(int minTtl, int maxTtl, int negativeTtl) {]