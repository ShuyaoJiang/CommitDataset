[+++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolver.java, +, +/**, + * please use {@link ClassResolvers} as instance factory, + */, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolver.java, +, +/**, + * please use {@link ClassResolvers} as instance factory, + */, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolvers.java, +import java.lang.ref.Reference;, +import java.util.concurrent.ConcurrentHashMap;, +    /**, +     * non-agressive non-concurrent cache, +     * good for non-shared default cache, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver weakCachingResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +    /**, +     * agressive non-concurrent cache, +     * good for non-shared cache, when we're not worried about class unloading, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver softCachingResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +    /**, +     * non-agressive concurrent cache, +     * good for shared cache, when we're worried about class unloading, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver weakCachingConcurrentResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +    }, +, +    /**, +     * agressive concurrent cache, +     * good for shared cache, when we're not worried about class unloading, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver softCachingConcurrentResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +    }, +, +    static ClassLoader defaultClassLoader(ClassLoader classLoader) {, +        if (classLoader != null) {, +            return classLoader;, +        }, +, +        return ClassResolvers.class.getClassLoader();, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolver.java, +, +/**, + * please use {@link ClassResolvers} as instance factory, + */, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolvers.java, +import java.lang.ref.Reference;, +import java.util.concurrent.ConcurrentHashMap;, +    /**, +     * non-agressive non-concurrent cache, +     * good for non-shared default cache, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver weakCachingResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +    /**, +     * agressive non-concurrent cache, +     * good for non-shared cache, when we're not worried about class unloading, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver softCachingResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +    /**, +     * non-agressive concurrent cache, +     * good for shared cache, when we're worried about class unloading, +     *, +     * @param classLoader - specific classLoader to use, or null if you want to revert to default, +     * @return new instance of class resolver, +     */, +    public static ClassResolver weakCachingConcurrentResolver(ClassLoader classLoader) {, +        return new CachingClassResolver(new ClassloaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +    }, +, +    /**, +     * agressive concurrent cache, +     * good for shared cache, when we're not worried about class unloading, +     *]