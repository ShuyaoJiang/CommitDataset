[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +    private final OpenSslSessionContext sessionContext;, +            sessionContext = new OpenSslClientSessionContext(ctx);, +    public OpenSslSessionContext sessionContext() {, +        return sessionContext;, +    }, +, +    // No cache is currently supported for client side mode., +    private static final class OpenSslClientSessionContext extends OpenSslSessionContext {, +        private OpenSslClientSessionContext(long context) {, +            super(context);, +        }, +, +        @Override, +        public void setSessionTimeout(int seconds) {, +            if (seconds < 0) {, +                throw new IllegalArgumentException();, +            }, +        }, +, +        @Override, +        public int getSessionTimeout() {, +            return 0;, +        }, +, +        @Override, +        public void setSessionCacheSize(int size)  {, +            if (size < 0) {, +                throw new IllegalArgumentException();, +            }, +        }, +, +        @Override, +        public int getSessionCacheSize() {, +            return 0;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +    private final OpenSslSessionContext sessionContext;, +            sessionContext = new OpenSslClientSessionContext(ctx);, +    public OpenSslSessionContext sessionContext() {, +        return sessionContext;, +    }, +, +    // No cache is currently supported for client side mode., +    private static final class OpenSslClientSessionContext extends OpenSslSessionContext {, +        private OpenSslClientSessionContext(long context) {, +            super(context);, +        }, +, +        @Override, +        public void setSessionTimeout(int seconds) {, +            if (seconds < 0) {, +                throw new IllegalArgumentException();, +            }, +        }, +, +        @Override, +        public int getSessionTimeout() {, +            return 0;, +        }, +, +        @Override, +        public void setSessionCacheSize(int size)  {, +            if (size < 0) {, +                throw new IllegalArgumentException();, +            }, +        }, +, +        @Override, +        public int getSessionCacheSize() {, +            return 0;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +     * Returns a new server-side {@link javax.net.ssl.SSLEngine} with the current configuration., +     */, +    @Override, +    public final SSLEngine newEngine(ByteBufAllocator alloc) {, +        List<String> protos = applicationProtocolNegotiator().protocols();, +        if (protos.isEmpty()) {, +            return new OpenSslEngine(ctx, alloc, null, isClient(), sessionContext());, +        } else {, +            return new OpenSslEngine(ctx, alloc, protos.get(protos.size() - 1), isClient(), sessionContext());, +        }, +    }, +, +    /**, +     * @deprecated use {@link #sessionContext#stats()}, +    @Deprecated, +        return sessionContext().stats();, +     * @deprecated use {@link OpenSslSessionContext#setTicketKeys(byte[])}, +    @Deprecated, +        sessionContext().setTicketKeys(keys);, +, +    @Override, +    public abstract OpenSslSessionContext sessionContext();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +    private final OpenSslSessionContext sessionContext;, +            sessionContext = new OpenSslClientSessionContext(ctx);, +    public OpenSslSessionContext sessionContext() {, +        return sessionContext;, +    }, +]