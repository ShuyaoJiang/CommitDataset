[+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.util.Locale;, +    private static final String NATIVE_RESOURCE_HOME = "META-INF/native/";, +    private static final String OSNAME;, +        OSNAME = SystemPropertyUtil.get("os.name", "").toLowerCase(Locale.US).replaceAll("[^a-z0-9]+", "");, +, +            logger.debug("-Dio.netty.netty.workdir: " + WORKDIR);, +            WORKDIR = tmpdir();, +            logger.debug("-Dio.netty.netty.workdir: " + WORKDIR + " (io.netty.tmpdir)");, +    private static File tmpdir() {, +        File f;, +        try {, +            f = toDirectory(SystemPropertyUtil.get("io.netty.tmpdir"));, +            if (f != null) {, +                logger.debug("-Dio.netty.tmpdir: " + f);, +                return f;, +            }, +, +            f = toDirectory(SystemPropertyUtil.get("java.io.tmpdir"));, +            if (f != null) {, +                logger.debug("-Dio.netty.tmpdir: " + f + " (java.io.tmpdir)");, +                return f;, +            }, +, +            // This shouldn't happen, but just in case .., +            if (isWindows()) {, +                f = toDirectory(System.getenv("TEMP"));, +                if (f != null) {, +                    logger.debug("-Dio.netty.tmpdir: " + f + " (%TEMP%)");, +                    return f;, +                }, +, +                String userprofile = System.getenv("USERPROFILE");, +                if (userprofile != null) {, +                    f = toDirectory(userprofile + "\\AppData\\Local\\Temp");, +                    if (f != null) {, +                        logger.debug("-Dio.netty.tmpdir: " + f + " (%USERPROFILE%\\AppData\\Local\\Temp)");, +                        return f;, +                    }, +, +                    f = toDirectory(userprofile + "\\Local Settings\\Temp");, +                    if (f != null) {, +                        logger.debug("-Dio.netty.tmpdir: " + f + " (%USERPROFILE%\\Local Settings\\Temp)");, +                        return f;, +                    }, +                }, +            } else {, +                f = toDirectory(System.getenv("TMPDIR"));, +                if (f != null) {, +                    logger.debug("-Dio.netty.tmpdir: " + f + " ($TMPDIR)");, +                    return f;, +                }, +            }, +        } catch (Exception ignored) {, +            // Environment variable inaccessible, +        }, +, +        // Last resort., +        if (isWindows()) {, +            f = new File("C:\\Windows\\Temp");, +        } else {, +            f = new File("/tmp");, +        }, +, +        logger.warn("Failed to get the temporary directory; falling back to: " + f);, +        return f;, +    }, +, +    @SuppressWarnings("ResultOfMethodCallIgnored"), +    private static File toDirectory(String path) {, +        if (path == null) {, +            return null;, +        }, +, +        File f = new File(path);, +        if (!f.exists()) {, +            f.mkdirs();, +        }, +, +        if (!f.isDirectory()) {, +            return null;, +        }, +, +        try {, +            return f.getAbsoluteFile();, +        } catch (Exception ignored) {, +            return f;, +        }, +    }, +, +    private static boolean isWindows() {, +        return OSNAME.startsWith("windows");, +    }, +, +    private static boolean isOSX() {, +        return OSNAME.startsWith("macosx") || OSNAME.startsWith("osx");, +    }, +, +        String path = NATIVE_RESOURCE_HOME + libname;, +        if (url == null && isOSX()) {]