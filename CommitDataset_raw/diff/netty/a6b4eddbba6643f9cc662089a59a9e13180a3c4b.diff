[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static List<ByteBufAllocator> ALLOCATORS = SctpTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                sb.option(ChannelOption.ALLOCATOR, allocator);, +                sb.childOption(ChannelOption.ALLOCATOR, allocator);, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d (%s + %s) with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), sb, cb, allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static List<ByteBufAllocator> ALLOCATORS = SctpTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                sb.option(ChannelOption.ALLOCATOR, allocator);, +                sb.childOption(ChannelOption.ALLOCATOR, allocator);, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d (%s + %s) with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), sb, cb, allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.buffer.UnpooledByteBufAllocator;, +    static List<ByteBufAllocator> allocator() {, +        List<ByteBufAllocator> allocators = new ArrayList<ByteBufAllocator>();, +        allocators.add(UnpooledByteBufAllocator.DEFAULT);, +        allocators.add(PooledByteBufAllocator.DEFAULT);, +        return allocators;, +    }, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static List<ByteBufAllocator> ALLOCATORS = SctpTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                sb.option(ChannelOption.ALLOCATOR, allocator);, +                sb.childOption(ChannelOption.ALLOCATOR, allocator);, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d (%s + %s) with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), sb, cb, allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.buffer.UnpooledByteBufAllocator;, +    static List<ByteBufAllocator> allocator() {, +        List<ByteBufAllocator> allocators = new ArrayList<ByteBufAllocator>();, +        allocators.add(UnpooledByteBufAllocator.DEFAULT);, +        allocators.add(PooledByteBufAllocator.DEFAULT);, +        return allocators;, +    }, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static final List<ByteBufAllocator> ALLOCATORS = SocketTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static List<ByteBufAllocator> ALLOCATORS = SctpTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                sb.option(ChannelOption.ALLOCATOR, allocator);, +                sb.childOption(ChannelOption.ALLOCATOR, allocator);, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d (%s + %s) with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), sb, cb, allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.buffer.UnpooledByteBufAllocator;, +    static List<ByteBufAllocator> allocator() {, +        List<ByteBufAllocator> allocators = new ArrayList<ByteBufAllocator>();, +        allocators.add(UnpooledByteBufAllocator.DEFAULT);, +        allocators.add(PooledByteBufAllocator.DEFAULT);, +        return allocators;, +    }, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static final List<ByteBufAllocator> ALLOCATORS = SocketTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {, +                cb.option(ChannelOption.ALLOCATOR, allocator);, +                        "Running: %s %d of %d with %s",, +                        testName.getMethodName(), ++ i, COMBO.size(), allocator.getClass().getSimpleName()));, +}, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.ChannelOption;, +    private static final List<ByteBufAllocator> ALLOCATORS = SocketTestPermutation.allocator();, +        for (ByteBufAllocator allocator: ALLOCATORS) {]