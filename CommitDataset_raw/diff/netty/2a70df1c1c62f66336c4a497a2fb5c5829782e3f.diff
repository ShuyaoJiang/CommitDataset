[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractMemoryHttpData.java, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractMemoryHttpData.java, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostBodyUtil.java, +    //Some commons methods between HttpPostRequestDecoder and HttpMessageDecoder, +     * Skip control Characters, +    static void skipControlCharacters(ChannelBuffer buffer) {, +        for (;;) {, +            char c = (char) buffer.readUnsignedByte();, +            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {, +                buffer.readerIndex(buffer.readerIndex() - 1);, +                break;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractMemoryHttpData.java, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostBodyUtil.java, +    //Some commons methods between HttpPostRequestDecoder and HttpMessageDecoder, +     * Skip control Characters, +    static void skipControlCharacters(ChannelBuffer buffer) {, +        for (;;) {, +            char c = (char) buffer.readUnsignedByte();, +            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {, +                buffer.readerIndex(buffer.readerIndex() - 1);, +                break;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java, +    private void parseBodyAttributes() throws ErrorDataDecoderException {, +        HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +            HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +    private String readLine() throws NotEnoughDataDecoderException {, +    private void readFileUploadByteMultipart(String delimiter), +    private void loadFieldMultipart(String delimiter), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractMemoryHttpData.java, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostBodyUtil.java, +    //Some commons methods between HttpPostRequestDecoder and HttpMessageDecoder, +     * Skip control Characters, +    static void skipControlCharacters(ChannelBuffer buffer) {, +        for (;;) {, +            char c = (char) buffer.readUnsignedByte();, +            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {, +                buffer.readerIndex(buffer.readerIndex() - 1);, +                break;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java, +    private void parseBodyAttributes() throws ErrorDataDecoderException {, +        HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +            HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +    private String readLine() throws NotEnoughDataDecoderException {, +    private void readFileUploadByteMultipart(String delimiter), +    private void loadFieldMultipart(String delimiter), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/MixedAttribute.java, +                        .getChannelBuffer(), last);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);, +            localfileChannel.force(false);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractMemoryHttpData.java, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostBodyUtil.java, +    //Some commons methods between HttpPostRequestDecoder and HttpMessageDecoder, +     * Skip control Characters, +    static void skipControlCharacters(ChannelBuffer buffer) {, +        for (;;) {, +            char c = (char) buffer.readUnsignedByte();, +            if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {, +                buffer.readerIndex(buffer.readerIndex() - 1);, +                break;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java, +    private void parseBodyAttributes() throws ErrorDataDecoderException {, +        HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +            HttpPostBodyUtil.skipControlCharacters(undecodedChunk);, +    private String readLine() throws NotEnoughDataDecoderException {, +    private void readFileUploadByteMultipart(String delimiter), +    private void loadFieldMultipart(String delimiter), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/MixedAttribute.java, +                        .getChannelBuffer(), last);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/MixedFileUpload.java, +                        .getChannelBuffer(), last);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/AbstractDiskHttpData.java, +            localfileChannel.force(false);, +                fileChannel.force(false);]