[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import static io.netty.buffer.ByteBufUtil.*;, +        if (maxChunkSize <= 0) {, +                out.add(message);, +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +                out.add(message);, +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +            assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;, +, +            out.add(message);, +, +            if (nextState == State.READ_FIXED_LENGTH_CONTENT) {, +                // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk., +, +            int toRead = Math.min(actualReadableBytes(), maxChunkSize);, +            if (toRead > 0) {, +                if (buffer.isReadable()) {, +                } else {, +                    // End of connection., +                    out.add(new DefaultLastHttpContent(content, validateHeaders));, +                    reset();, +                }, +            } else if (!buffer.isReadable()) {, +                // End of connection., +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +            }, +            int toRead = Math.min(readLimit, maxChunkSize);, +                reset();, +            } else {, +            }, +            int toRead = Math.min((int) chunkSize, maxChunkSize);, +, +            out.add(chunk);, +            } else {, +        }, +            reset();, +            this.message = null;, +                prematureClosure = expectedContentLength > 0;, +                // One exception: Hixie 76 websocket handshake response, +                return !(code == 101 && !res.headers().contains(HttpHeaders.Names.SEC_WEBSOCKET_ACCEPT));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import static io.netty.buffer.ByteBufUtil.*;, +        if (maxChunkSize <= 0) {, +                out.add(message);, +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +                out.add(message);, +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +            assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;, +, +            out.add(message);, +, +            if (nextState == State.READ_FIXED_LENGTH_CONTENT) {, +                // chunkSize will be decreased as the READ_FIXED_LENGTH_CONTENT state reads data chunk by chunk., +, +            int toRead = Math.min(actualReadableBytes(), maxChunkSize);, +            if (toRead > 0) {, +                if (buffer.isReadable()) {, +                } else {, +                    // End of connection., +                    out.add(new DefaultLastHttpContent(content, validateHeaders));, +                    reset();, +                }, +            } else if (!buffer.isReadable()) {, +                // End of connection., +                out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +                reset();, +            }, +            int toRead = Math.min(readLimit, maxChunkSize);, +                reset();, +            } else {, +            }, +            int toRead = Math.min((int) chunkSize, maxChunkSize);, +, +            out.add(chunk);, +            } else {, +        }, +            reset();, +            this.message = null;, +                prematureClosure = expectedContentLength > 0;, +                // One exception: Hixie 76 websocket handshake response, +                return !(code == 101 && !res.headers().contains(HttpHeaders.Names.SEC_WEBSOCKET_ACCEPT));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations]