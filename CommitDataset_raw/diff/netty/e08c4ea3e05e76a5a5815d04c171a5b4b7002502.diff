[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpCodecUtil.java, +/**, + * A utility class mainly for use with HTTP codec classes, + */, +    /**, +     * Validates the name of a header, +     *, +     * @param headerName The header name being validated, +     */, +    static void validateHeaderName(String headerName) {, +        //Check to see if the name is null, +        if (headerName == null) {, +            throw new NullPointerException("Header names cannot be null");, +        //Go through each of the characters in the name, +        for (int index = 0; index < headerName.length(); index ++) {, +            //Actually get the character, +            char character = headerName.charAt(index);, +, +            //Check to see if the character is not an ASCII character, +            if (character > 127) {, +                    "Header name cannot contain non-ASCII characters: " + headerName);, +            //Check for prohibited characters., +            switch (character) {, +                        "Header name cannot contain the following prohibited characters: " +, +                        "=,;: \\t\\r\\n\\v\\f: " + headerName);, +    /**, +     * Validates the specified header value, +     *, +     * @param value The value being validated, +     */, +    static void validateHeaderValue(String headerValue) {, +        //Check to see if the value is null, +        if (headerValue == null) {, +            throw new NullPointerException("Header values cannot be null");, +        /*, +         * Set up the state of the validation, +         *, +         * States are as follows:, +         *, +         * 0: Previous character was neither CR nor LF, +         * 1: The previous character was CR, +         * 2: The previous character was LF, +         */, +        //Start looping through each of the character, +, +        for (int index = 0; index < headerValue.length(); index ++) {, +            char character = headerValue.charAt(index);, +            switch (character) {, +                        "Header value contains a prohibited character '\\v': " + headerValue);, +                        "Header value contains a prohibited character '\\f': " + headerValue);, +                switch (character) {, +                switch (character) {, +                            "Only '\\n' is allowed after '\\r': " + headerValue);, +                switch (character) {, +                            "Only ' ' and '\\t' are allowed after '\\n': " + headerValue);, +                    "Header value must not end with '\\r' or '\\n':" + headerValue);, +    /**, +     * Checks to see if the transfer encoding in a specified {@link HttpMessage} is chunked, +     *, +     * @param message The message to check, +     * @return True if transfer encoding is chunked, otherwise false, +     */, +    static boolean isTransferEncodingChunked(HttpMessage message) {, +        List<String> transferEncodingHeaders = message.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING);, +        if (transferEncodingHeaders.isEmpty()) {, +        for (String value: transferEncodingHeaders) {, +            if (value.equalsIgnoreCase(HttpHeaders.Values.CHUNKED)) {, +    /**, +     * A constructor to ensure that instances of this class are never made, +     */]