[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketClientExtensionHandlerTest.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketClientExtensionHandlerTest.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketExtensionTestUtil.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import io.netty.handler.codec.http.HttpHeaderValues;, +        req.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        req.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        req.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        req.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);, +        res.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        res.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        res.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        res.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketClientExtensionHandlerTest.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketExtensionTestUtil.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import io.netty.handler.codec.http.HttpHeaderValues;, +        req.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        req.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        req.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        req.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);, +        res.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        res.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        res.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        res.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandlerTest.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +        assertFalse(res2.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketClientExtensionHandlerTest.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +                req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketExtensionTestUtil.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import io.netty.handler.codec.http.HttpHeaderValues;, +        req.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        req.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        req.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        req.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            req.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);, +        res.headers().set(HttpHeaderNames.HOST, "server.example.com");, +        res.headers().set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET.toString().toLowerCase());, +        res.headers().set(HttpHeaderNames.CONNECTION, "Upgrade");, +        res.headers().set(HttpHeaderNames.ORIGIN, "http://example.com");, +            res.headers().set(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS, ext);]