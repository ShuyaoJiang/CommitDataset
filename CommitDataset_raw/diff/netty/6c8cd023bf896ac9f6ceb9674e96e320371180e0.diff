[+++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    public LocalServerChannel() {, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +    }, +, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    public LocalServerChannel() {, +        config().setAllocator(new PreferHeapByteBufAllocator(config.getAllocator()));, +    }, +, +++ b/transport/src/main/java/io/netty/channel/local/PreferHeapByteBufAllocator.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.local;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.CompositeByteBuf;, +, +/**, + * Wraps another {@link ByteBufAllocator} and use heapbuffers everywhere except when a direct buffer is explicit, + * requested., + */, +final class PreferHeapByteBufAllocator implements ByteBufAllocator {, +    private final ByteBufAllocator allocator;, +, +    PreferHeapByteBufAllocator(ByteBufAllocator allocator) {, +        this.allocator = allocator;, +    }, +, +    @Override, +    public ByteBuf buffer() {, +        return allocator.heapBuffer();, +    }, +, +    @Override, +    public ByteBuf buffer(int initialCapacity) {, +        return allocator.heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf buffer(int initialCapacity, int maxCapacity) {, +        return allocator.heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    @Override, +    public ByteBuf ioBuffer() {, +        return allocator.heapBuffer();, +    }, +, +    @Override, +    public ByteBuf ioBuffer(int initialCapacity) {, +        return allocator.heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf ioBuffer(int initialCapacity, int maxCapacity) {, +        return allocator.heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    @Override, +    public ByteBuf heapBuffer() {, +        return allocator.heapBuffer();, +    }, +, +    @Override, +    public ByteBuf heapBuffer(int initialCapacity) {, +        return allocator.heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {, +        return allocator.heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    @Override, +    public ByteBuf directBuffer() {, +        return allocator.directBuffer();]