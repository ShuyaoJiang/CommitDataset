[+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.NetUtil;, +, +import java.net.IDN;, + * A socks cmd response., +    private final String host;, +    private final int port;, +, +    private static final byte[] DOMAIN_ZEROED = {0x00};, +        this(cmdStatus, addressType, null, 0);, +    }, +, +    /**, +     * Constructs new response and includes provided host and port as part of it., +     *, +     * @param cmdStatus status of the response, +     * @param addressType type of host parameter, +     * @param host host (BND.ADDR field) is address that server used when connecting to the target host., +     *             When null a value of 4/8 0x00 octets will be used for IPv4/IPv6 and a single 0x00 byte will be, +     *             used for domain addressType. Value is converted to ASCII using {@link IDN#toASCII(String)}., +     * @param port port (BND.PORT field) that the server assigned to connect to the target host, +     * @throws NullPointerException in case cmdStatus or addressType are missing, +     * @throws IllegalArgumentException in case host or port cannot be validated, +     * @see IDN#toASCII(String), +     */, +    public SocksCmdResponse(SocksCmdStatus cmdStatus, SocksAddressType addressType, String host, int port) {, +        if (host != null) {, +            switch (addressType) {, +                case IPv4:, +                    if (!NetUtil.isValidIpV4Address(host)) {, +                        throw new IllegalArgumentException(host + " is not a valid IPv4 address");, +                    }, +                    break;, +                case DOMAIN:, +                    if (IDN.toASCII(host).length() > 255) {, +                        throw new IllegalArgumentException(host + " IDN: " +, +                                IDN.toASCII(host) + " exceeds 255 char limit");, +                    }, +                    break;, +                case IPv6:, +                    if (!NetUtil.isValidIpV6Address(host)) {, +                        throw new IllegalArgumentException(host + " is not a valid IPv6 address");, +                    }, +                    break;, +                case UNKNOWN:, +                    break;, +            }, +            host = IDN.toASCII(host);, +        }, +        if (port < 0 && port >= 65535) {, +            throw new IllegalArgumentException(port + " is not in bounds 0 < x < 65536");, +        }, +        this.host = host;, +        this.port = port;, +    /**, +     * Returns host that is used as a parameter in {@link io.netty.handler.codec.socks.SocksCmdType}., +     * Host (BND.ADDR field in response) is address that server used when connecting to the target host., +     * This is typically different from address which client uses to connect to the SOCKS server., +     *, +     * @return host that is used as a parameter in {@link io.netty.handler.codec.socks.SocksCmdType}, +     *         or null when there was no host specified during response construction, +     */, +    public String host() {, +        if (host != null) {, +            return IDN.toUnicode(host);, +        } else {, +            return null;, +        }, +    }, +, +    /**, +     * Returns port that is used as a parameter in {@link io.netty.handler.codec.socks.SocksCmdType}., +     * Port (BND.PORT field in response) is port that the server assigned to connect to the target host., +     *, +     * @return port that is used as a parameter in {@link io.netty.handler.codec.socks.SocksCmdType}, +     */, +    public int port() {, +        return port;, +    }, +, +                byte[] hostContent = host == null ?, +                        IPv4_HOSTNAME_ZEROED : NetUtil.createByteArrayFromIpAddressString(host);, +                byteBuf.writeBytes(hostContent);, +                byteBuf.writeShort(port);, +                byte[] hostContent = host == null ?, +                        DOMAIN_ZEROED : host.getBytes(CharsetUtil.US_ASCII);, +                byteBuf.writeByte(hostContent.length);   // domain length, +                byteBuf.writeBytes(hostContent);   // domain value, +                byteBuf.writeShort(port);  // port value, +                byte[] hostContent = host == null, +                        ? IPv6_HOSTNAME_ZEROED : NetUtil.createByteArrayFromIpAddressString(host);, +                byteBuf.writeBytes(hostContent);, +                byteBuf.writeShort(port);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.NetUtil;, +, +import java.net.IDN;, + * A socks cmd response.]