[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +import java.util.ConcurrentModificationException;, +import java.util.NoSuchElementException;, +    private static final Iterator<ByteBuf> EMPTY_ITERATOR = Collections.<ByteBuf>emptyList().iterator();, +        if (components.isEmpty()) {, +            return EMPTY_ITERATOR;, +        return new CompositeByteBufIterator();, +, +    private final class CompositeByteBufIterator implements Iterator<ByteBuf> {, +        private final int size = components.size();, +        private int index;, +, +        @Override, +        public boolean hasNext() {, +            return size > index;, +        }, +, +        @Override, +        public ByteBuf next() {, +            if (size != components.size()) {, +                throw new ConcurrentModificationException();, +            }, +            if (!hasNext()) {, +                throw new NoSuchElementException();, +            }, +            try {, +                return components.get(index++).buf;, +            } catch (IndexOutOfBoundsException e) {, +                throw new ConcurrentModificationException();, +            }, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("Read-Only");, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +import java.util.ConcurrentModificationException;, +import java.util.NoSuchElementException;, +    private static final Iterator<ByteBuf> EMPTY_ITERATOR = Collections.<ByteBuf>emptyList().iterator();, +        if (components.isEmpty()) {, +            return EMPTY_ITERATOR;, +        return new CompositeByteBufIterator();, +, +    private final class CompositeByteBufIterator implements Iterator<ByteBuf> {, +        private final int size = components.size();, +        private int index;, +, +        @Override, +        public boolean hasNext() {, +            return size > index;, +        }, +, +        @Override, +        public ByteBuf next() {, +            if (size != components.size()) {, +                throw new ConcurrentModificationException();, +            }, +            if (!hasNext()) {, +                throw new NoSuchElementException();, +            }, +            try {, +                return components.get(index++).buf;, +            } catch (IndexOutOfBoundsException e) {, +                throw new ConcurrentModificationException();, +            }, +        }, +, +        @Override, +        public void remove() {, +            throw new UnsupportedOperationException("Read-Only");, +        }, +    }, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +import java.util.ConcurrentModificationException;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +, +    @Test, +    public void testIterator() {, +        CompositeByteBuf cbuf = compositeBuffer();, +        cbuf.addComponent(EMPTY_BUFFER);, +        cbuf.addComponent(EMPTY_BUFFER);, +, +        Iterator<ByteBuf> it = cbuf.iterator();, +        assertTrue(it.hasNext());, +        assertSame(EMPTY_BUFFER, it.next());, +        assertTrue(it.hasNext());, +        assertSame(EMPTY_BUFFER, it.next());, +        assertFalse(it.hasNext());, +, +        try {, +            it.next();, +            fail();, +        } catch (NoSuchElementException e) {, +            //Expected, +        }, +        cbuf.release();, +    }]