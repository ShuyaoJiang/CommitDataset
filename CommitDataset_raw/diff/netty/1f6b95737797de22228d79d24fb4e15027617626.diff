[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +        boolean doFinishConnect() throws Exception {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +        boolean doFinishConnect() throws Exception {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +import io.netty.util.internal.PlatformDependent;, +import java.net.UnknownHostException;, +    private InetSocketAddress requestedRemote;, +, +    private static InetSocketAddress computeRemoteAddr(InetSocketAddress remoteAddr, InetSocketAddress osRemoteAddr) {, +        if (osRemoteAddr != null) {, +            if (PlatformDependent.javaVersion() >= 7) {, +                try {, +                    // Only try to construct a new InetSocketAddress if we using java >= 7 as getHostString() does not, +                    // exists in earlier releases and so the retrieval of the hostname could block the EventLoop if a, +                    // reverse lookup would be needed., +                    return new InetSocketAddress(InetAddress.getByAddress(remoteAddr.getHostString(),, +                            osRemoteAddr.getAddress().getAddress()),, +                            osRemoteAddr.getPort());, +                } catch (UnknownHostException ignore) {, +                    // Should never happen but fallback to osRemoteAddr anyway., +                }, +            }, +            return osRemoteAddr;, +        }, +        return remoteAddr;, +    }, +, +, +        InetSocketAddress remoteAddr = (InetSocketAddress) remoteAddress;, +        checkResolvable(remoteAddr);, +        if (super.doConnect(remoteAddress, localAddress)) {, +            remote = computeRemoteAddr(remoteAddr, fd().remoteAddress());, +            return true;, +        }, +, +        // Store for later usage in doFinishConnect(), +        requestedRemote = remoteAddr;, +        return false;, +, +        @Override, +        boolean doFinishConnect() throws Exception {, +            if (super.doFinishConnect()) {, +                remote = computeRemoteAddr(requestedRemote, fd().remoteAddress());, +                requestedRemote = null;, +                return true;, +            }, +            return false;, +        }]