[+++ b/microbench/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>${tcnative.artifactId}</artifactId>, +      <classifier>${tcnative.classifier}</classifier>, +      <optional>false</optional>, +    </dependency>, +++ b/microbench/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>${tcnative.artifactId}</artifactId>, +      <classifier>${tcnative.classifier}</classifier>, +      <optional>false</optional>, +    </dependency>, +++ b/microbench/src/main/java/io/netty/microbench/handler/ssl/AbstractSslEngineBenchmark.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.microbench.handler.ssl;, +, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.SslContextBuilder;, +import io.netty.handler.ssl.SslProvider;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.internal.PlatformDependent;, +import org.openjdk.jmh.annotations.Param;, +, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLEngineResult;, +import javax.net.ssl.SSLException;, +import java.io.File;, +import java.nio.ByteBuffer;, +, +, +public class AbstractSslEngineBenchmark extends AbstractMicrobenchmark {, +, +    private static final String PROTOCOL_TLS_V1_2 = "TLSv1.2";, +, +    public enum SslEngineProvider {, +        JDK {, +            @Override, +            SslProvider sslProvider() {, +                return SslProvider.JDK;, +            }, +        },, +        OPENSSL {, +            @Override, +            SslProvider sslProvider() {, +                return SslProvider.OPENSSL;, +            }, +        },, +        OPENSSL_REFCNT {, +            @Override, +            SslProvider sslProvider() {, +                return SslProvider.OPENSSL_REFCNT;, +            }, +        };, +        private final SslContext clientContext = newClientContext();, +        private final SslContext serverContext = newServerContext();, +, +        private SslContext newClientContext() {, +            try {, +                return SslContextBuilder.forClient(), +                        .sslProvider(sslProvider()), +                        .trustManager(InsecureTrustManagerFactory.INSTANCE), +                        .build();, +            } catch (SSLException e) {, +                throw new IllegalStateException(e);, +            }, +        }, +, +        private SslContext newServerContext() {, +            try {, +                File keyFile = new File(getClass().getResource("test_unencrypted.pem").getFile());, +                File crtFile = new File(getClass().getResource("test.crt").getFile());, +, +                return SslContextBuilder.forServer(crtFile, keyFile), +                        .sslProvider(sslProvider()), +                        .build();, +            } catch (Exception e) {, +                throw new IllegalStateException(e);, +            }, +        }, +, +        SSLEngine newClientEngine(String cipher) {]