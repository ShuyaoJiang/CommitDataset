[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannelFactory.java, +    private WorkerPool<NioWorker> bossWorkerPool;, +     * {@link Executors#newCachedThreadPool()} for the workers., +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +     * {@link #NioServerSocketChannelFactory(Executor, Executor, int, int)} with 1 , +     * as boss count and 2 * the number of available processors in the machine.  The number of, +     * @param bossExecutor, +     *        the {@link Executor} which will execute the I/O worker threads that handle the accepting of new connections, +    public NioServerSocketChannelFactory(Executor bossExecutor, Executor workerExecutor) {, +        this(bossExecutor, workerExecutor, SelectorUtil.DEFAULT_IO_ACCEPTING_THREADS, SelectorUtil.DEFAULT_IO_THREADS);, +     * @param bossExecutor, +     *        the {@link Executor} which will execute the I/O worker threads that handle the accepting of new connections, +     * @param bossCount, +     *        the maximum number of I/O worker threads that handling the accepting of connections, +    public NioServerSocketChannelFactory(Executor bossExecutor, Executor workerExecutor, int bossCount,, +        this(new NioWorkerPool(bossExecutor, bossCount, true), new NioWorkerPool(workerExecutor, workerCount, true));, +     * @param bossWorkerPool, +     *        the {@link WorkerPool} which will be used to obtain the {@link Worker} that execute the I/O worker threads that handle the accepting of new connections, +    public NioServerSocketChannelFactory(WorkerPool<NioWorker> bossWorkerPool, WorkerPool<NioWorker> workerPool) {, +        if (bossWorkerPool == null) {, +            throw new NullPointerException("bossWorkerPool");, +        }, +        this.bossWorkerPool = bossWorkerPool;, +    /**, +     * Creates a new instance which use the given {@link WorkerPool} for everything., +     *, +     * @param genericExecutor, +     *        the {@link Executor} which will execute the I/O worker threads ( this also includes handle the accepting of new connections), +     * @param workerCount, +     *        the maximum number of I/O worker threads, +     *        , +     */, +    public NioServerSocketChannelFactory(Executor genericExecutor, int workerCount) {, +        this(new NioWorkerPool(genericExecutor, workerCount, true));, +    }, +    , +    /**, +     * Creates a new instance which use the given {@link WorkerPool} for everything., +     *, +     * @param genericExecutor, +     *        the {@link Executor} which will execute the I/O worker threads ( this also includes handle the accepting of new connections), +     *        , +     */, +    public NioServerSocketChannelFactory(Executor genericExecutor) {, +        this(genericExecutor, SelectorUtil.DEFAULT_IO_ACCEPTING_THREADS + SelectorUtil.DEFAULT_IO_THREADS);, +    }, +    , +    , +    /**, +     * Creates a new instance which use the given {@link WorkerPool} for everything., +     *, +     * @param genericWorkerPool, +     *        the {@link WorkerPool} which will be used to obtain the {@link Worker} that execute the I/O worker threads (that included accepting of new connections), +     */, +    public NioServerSocketChannelFactory(WorkerPool<NioWorker> genericWorkerPool) {, +        this(genericWorkerPool, genericWorkerPool);, +    }, +, +        return NioServerSocketChannel.create(this, pipeline, sink, bossWorkerPool.nextWorker(), workerPool);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannelFactory.java, +    private WorkerPool<NioWorker> bossWorkerPool;, +     * {@link Executors#newCachedThreadPool()} for the workers., +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +     * {@link #NioServerSocketChannelFactory(Executor, Executor, int, int)} with 1 , +     * as boss count and 2 * the number of available processors in the machine.  The number of, +     * @param bossExecutor, +     *        the {@link Executor} which will execute the I/O worker threads that handle the accepting of new connections, +    public NioServerSocketChannelFactory(Executor bossExecutor, Executor workerExecutor) {, +        this(bossExecutor, workerExecutor, SelectorUtil.DEFAULT_IO_ACCEPTING_THREADS, SelectorUtil.DEFAULT_IO_THREADS);, +     * @param bossExecutor, +     *        the {@link Executor} which will execute the I/O worker threads that handle the accepting of new connections, +     * @param bossCount, +     *        the maximum number of I/O worker threads that handling the accepting of connections, +    public NioServerSocketChannelFactory(Executor bossExecutor, Executor workerExecutor, int bossCount,, +        this(new NioWorkerPool(bossExecutor, bossCount, true), new NioWorkerPool(workerExecutor, workerCount, true));, +     * @param bossWorkerPool, +     *        the {@link WorkerPool} which will be used to obtain the {@link Worker} that execute the I/O worker threads that handle the accepting of new connections, +    public NioServerSocketChannelFactory(WorkerPool<NioWorker> bossWorkerPool, WorkerPool<NioWorker> workerPool) {, +        if (bossWorkerPool == null) {, +            throw new NullPointerException("bossWorkerPool");, +        }, +        this.bossWorkerPool = bossWorkerPool;, +    /**, +     * Creates a new instance which use the given {@link WorkerPool} for everything., +     *, +     * @param genericExecutor, +     *        the {@link Executor} which will execute the I/O worker threads ( this also includes handle the accepting of new connections), +     * @param workerCount, +     *        the maximum number of I/O worker threads, +     *        , +     */, +    public NioServerSocketChannelFactory(Executor genericExecutor, int workerCount) {, +        this(new NioWorkerPool(genericExecutor, workerCount, true));, +    }, +    , +    /**, +     * Creates a new instance which use the given {@link WorkerPool} for everything., +     *, +     * @param genericExecutor, +     *        the {@link Executor} which will execute the I/O worker threads ( this also includes handle the accepting of new connections)]