[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.channel.socket.DuplexChannel;, +import java.util.concurrent.Executor;, +public abstract class AbstractEpollStreamChannel extends AbstractEpollChannel implements DuplexChannel {, +    public boolean isInputShutdown() {, +        return fd().isInputShutdown();, +    }, +, +    @Override, +    public boolean isOutputShutdown() {, +        return fd().isOutputShutdown();, +    }, +, +    @Override, +    public ChannelFuture shutdownOutput() {, +        return shutdownOutput(newPromise());, +    }, +, +    @Override, +    public ChannelFuture shutdownOutput(final ChannelPromise promise) {, +        Executor closeExecutor = ((EpollStreamUnsafe) unsafe()).prepareToClose();, +        if (closeExecutor != null) {, +            closeExecutor.execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    shutdownOutput0(promise);, +                }, +            });, +        } else {, +            EventLoop loop = eventLoop();, +            if (loop.inEventLoop()) {, +                shutdownOutput0(promise);, +            } else {, +                loop.execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        shutdownOutput0(promise);, +                    }, +                });, +            }, +        }, +        return promise;, +    }, +, +    @Override, +, +        // Overridden here just to be able to access this method from AbstractEpollStreamChannel, +        @Override, +        protected Executor prepareToClose() {, +            return super.prepareToClose();, +        }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.channel.socket.DuplexChannel;, +import java.util.concurrent.Executor;, +public abstract class AbstractEpollStreamChannel extends AbstractEpollChannel implements DuplexChannel {, +    public boolean isInputShutdown() {, +        return fd().isInputShutdown();, +    }, +, +    @Override, +    public boolean isOutputShutdown() {, +        return fd().isOutputShutdown();, +    }, +, +    @Override, +    public ChannelFuture shutdownOutput() {, +        return shutdownOutput(newPromise());, +    }, +, +    @Override, +    public ChannelFuture shutdownOutput(final ChannelPromise promise) {, +        Executor closeExecutor = ((EpollStreamUnsafe) unsafe()).prepareToClose();, +        if (closeExecutor != null) {, +            closeExecutor.execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    shutdownOutput0(promise);, +                }, +            });, +        } else {, +            EventLoop loop = eventLoop();, +            if (loop.inEventLoop()) {, +                shutdownOutput0(promise);, +            } else {, +                loop.execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        shutdownOutput0(promise);, +                    }, +                });, +            }, +        }, +        return promise;, +    }, +, +    @Override, +, +        // Overridden here just to be able to access this method from AbstractEpollStreamChannel, +        @Override]