[+++ b/microbench/src/main/java/io/netty/microbenchmark/common/NetUtilBenchmark.java, +    public int useGetByNameIpv4() {, +        int invalidCount = 0;, +        for (String testEntry : invalidIpV4Hosts) {, +            if (NetUtil.getByName(testEntry) == null) {, +                ++invalidCount;, +        return invalidCount;, +    public int useGetByNameIpv6() {, +        int invalidCount = 0;, +        for (String testEntry : invalidIpV6Hosts) {, +            if (NetUtil.getByName(testEntry) == null) {, +                ++invalidCount;, +        return invalidCount;, +    public int useIsValidIpv6() {, +        int invalidCount = 0;, +        for (String host : invalidIpV6Hosts) {, +            if (!NetUtil.isValidIpV6Address(host)) {, +                ++invalidCount;, +        return invalidCount;, +    public int useIsValidIpv4() {, +        int invalidCount = 0;, +        for (String host : invalidIpV4Hosts) {, +            if (!NetUtil.isValidIpV4Address(host)) {, +                ++invalidCount;, +        return invalidCount;, +    private static final String[] invalidIpV4Hosts = {, +        "1.256.3.4",, +        "256.0.0.1",, +        "1.1.1.1.1",, +        "x.255.255.255",, +        "0.1:0.0",, +        "0.1.0.0:",, +        "127.0.0.",, +        "1.2..4",, +        "192.0.1",, +        "192.0.1.1.1",, +        "192.0.1.a",, +        "19a.0.1.1",, +        "a.0.1.1",, +        ".0.1.1",, +        "127.0.0",, +        "192.0.1.256",, +        "0.0.200.259",, +        "1.1.-1.1",, +        "1.1. 1.1",, +        "1.1.1.1 ",, +        "1.1.+1.1",, +        "0.0x1.0.255",, +        "0.01x.0.255",, +        "0.x01.0.255",, +        "0.-.0.0",, +        "0..0.0",, +        "0.A.0.0",, +        "0.1111.0.0",, +        "...", +    private static final String[] invalidIpV6Hosts = {, +        "Obvious Garbage",, +        "0:1:2:3:4:5:6:7:8",, +        "0:1:2:3:4:5:6",, +        "0:1:2:3:4:5:6:x",, +        "0:1:2:3:4:5:6::7",, +        "0:1:2:3:4:5:6:7::",, +        "::0:1:2:3:4:5:6:7",, +        "1:2:3:4:5:6:7:",, +        ":1:2:3:4:5:6:7",, +        // Compression with : separators trailing, +        "0:1:2:3:4:5::7:",, +        "0:1:2:3:4::7:",, +        "0:1:2:3::7:",, +        "0:1:2::7:",, +        "0:1::7:",, +        "0::7:",, +        // Compression at start with : separators trailing, +        "::0:1:2:3:4:5:7:",, +        "::0:1:2:3:4:7:",, +        "::0:1:2:3:7:",, +        "::0:1:2:7:",, +        "::0:1:7:",, +        "::7:",, +        // The : separators leading and trailing, +        ":1:2:3:4:5:6:7:",, +        ":1:2:3:4:5:6:",, +        ":1:2:3:4:5:",, +        ":1:2:3:4:",, +        ":1:2:3:",, +        ":1:2:",, +        ":1:",, +        // Compression with : separators leading, +        ":1::2:3:4:5:6:7",, +        ":1::3:4:5:6:7",, +        ":1::4:5:6:7",, +        ":1::5:6:7",, +        ":1::6:7",, +        ":1::7",, +        ":1:2:3:4:5:6::7",, +        ":1:3:4:5:6::7",, +        ":1:4:5:6::7",, +        ":1:5:6::7",, +        ":1:6::7",, +        ":1::",]