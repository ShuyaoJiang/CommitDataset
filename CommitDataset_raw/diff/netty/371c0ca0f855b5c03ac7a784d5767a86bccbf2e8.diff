[+++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +, +    @Override, +    public ByteBuf asReadOnly() {, +        return this;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +, +    @Override, +    public ByteBuf asReadOnly() {, +        return this;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/UnreleasableByteBuf.java, +        super(buf instanceof UnreleasableByteBuf ? buf.unwrap() : buf);, +        return buf.isReadOnly() ? this : new UnreleasableByteBuf(buf.asReadOnly());, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +, +    @Override, +    public ByteBuf asReadOnly() {, +        return this;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/UnreleasableByteBuf.java, +        super(buf instanceof UnreleasableByteBuf ? buf.unwrap() : buf);, +        return buf.isReadOnly() ? this : new UnreleasableByteBuf(buf.asReadOnly());, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyByteBufTest.java, +, +    @Test, +    public void asReadOnly() {, +        ByteBuf buf = buffer(1);, +        ByteBuf readOnly = buf.asReadOnly();, +        assertTrue(readOnly.isReadOnly());, +        assertSame(readOnly, readOnly.asReadOnly());, +        readOnly.release();, +    }, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +, +    @Override, +    public ByteBuf asReadOnly() {, +        return this;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/UnreleasableByteBuf.java, +        super(buf instanceof UnreleasableByteBuf ? buf.unwrap() : buf);, +        return buf.isReadOnly() ? this : new UnreleasableByteBuf(buf.asReadOnly());, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyByteBufTest.java, +, +    @Test, +    public void asReadOnly() {, +        ByteBuf buf = buffer(1);, +        ByteBuf readOnly = buf.asReadOnly();, +        assertTrue(readOnly.isReadOnly());, +        assertSame(readOnly, readOnly.asReadOnly());, +        readOnly.release();, +    }, +++ b/buffer/src/test/java/io/netty/buffer/UnreleaseableByteBufTest.java, +import static io.netty.buffer.Unpooled.buffer;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +, +        assertEquals(1, buf.refCnt());, +        assertFalse(buf.release());, +        assertEquals(1, buf.refCnt());, +        assertFalse(buf.release());, +        assertEquals(1, buf.refCnt());, +        assertEquals(1, buf.refCnt());, +        assertEquals(1, buf.refCnt());, +        assertTrue(buf.unwrap().release());, +        assertEquals(0, buf.refCnt());, +    }, +, +    @Test, +    public void testWrappedReadOnly() {, +        ByteBuf buf = Unpooled.unreleasableBuffer(buffer(1).asReadOnly());, +        assertSame(buf, buf.asReadOnly());, +, +        assertTrue(buf.unwrap().release());]