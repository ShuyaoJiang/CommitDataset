[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        for (Listener listener : listeners) {, +            listener.onGoAwayReceived(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && localEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +        for (Listener listener : listeners) {, +            listener.onGoAwaySent(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && remoteEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +            return lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastKnownStream()) {, +                throw connectionError(PROTOCOL_ERROR, "Cannot create stream %d since this endpoint has received a " +, +                                                      "GOAWAY frame with last stream id %d.", streamId,, +                                                      localEndpoint.lastKnownStream());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        for (Listener listener : listeners) {, +            listener.onGoAwayReceived(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && localEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +        for (Listener listener : listeners) {, +            listener.onGoAwaySent(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && remoteEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +            return lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastKnownStream()) {, +                throw connectionError(PROTOCOL_ERROR, "Cannot create stream %d since this endpoint has received a " +, +                                                      "GOAWAY frame with last stream id %d.", streamId,, +                                                      localEndpoint.lastKnownStream());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        connection.goAwayReceived(lastStreamId, errorCode, debugData);, +            Http2LocalFlowController flowController = flowController();, +            int bytesToReturn = data.readableBytes() + padding;, +            if (stream.isResetSent() || streamCreatedAfterGoAwaySent(stream)) {, +                // Count the frame towards the connection flow control window and don't process it further., +                flowController.receiveFlowControlledFrame(ctx, stream, data, padding, endOfStream);, +                flowController.consumeBytes(ctx, stream, bytesToReturn);, +                // Since no bytes are consumed, return them all., +                return bytesToReturn;, +            }, +, +                // If the stream is in an invalid state to receive the frame, throw the error., +                // If appropriate, return the processed bytes to the flow controller., +            } else if (stream.isResetSent() || streamCreatedAfterGoAwaySent(stream)) {, +                // Ignore this frame., +                return;, +            listener.onHeadersRead(ctx, streamId, headers, streamDependency, weight, exclusive, padding, endOfStream);, +                } else if (streamCreatedAfterGoAwaySent(stream)) {, +                    // Ignore this frame., +                    return;, +, +, +            if (streamCreatedAfterGoAwaySent(parentStream)) {, +, +            if (stream.state() == CLOSED || streamCreatedAfterGoAwaySent(stream)) {, +            // Update the outbound flow control window., +        private boolean streamCreatedAfterGoAwaySent(Http2Stream stream) {, +            // Ignore inbound frames after a GOAWAY was sent and the stream id is greater than, +            // the last stream id set in the GOAWAY frame., +            return connection().goAwaySent() && stream.id() > connection().remote().lastKnownStream();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        for (Listener listener : listeners) {, +            listener.onGoAwayReceived(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && localEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +        for (Listener listener : listeners) {, +            listener.onGoAwaySent(lastKnownStream, errorCode, debugData);, +        }, +, +        Http2Stream[] streams = new Http2Stream[numActiveStreams()];, +        for (Http2Stream stream : activeStreams().toArray(streams)) {, +            if (stream.id() > lastKnownStream && remoteEndpoint.createdStreamId(stream.id())) {, +                stream.close();, +            return lastKnownStream;, +            if (goAwayReceived() && streamId > localEndpoint.lastKnownStream()) {, +                throw connectionError(PROTOCOL_ERROR, "Cannot create stream %d since this endpoint has received a " +, +                                                      "GOAWAY frame with last stream id %d.", streamId,, +                                                      localEndpoint.lastKnownStream());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        connection.goAwayReceived(lastStreamId, errorCode, debugData);, +            Http2LocalFlowController flowController = flowController();]