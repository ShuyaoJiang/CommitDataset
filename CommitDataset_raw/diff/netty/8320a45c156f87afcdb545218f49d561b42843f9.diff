[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java, +                   .remove(httpServerUpgradeHandler);, +, +                ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);, +                ctx.pipeline().remove(this);, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java, +                   .remove(httpServerUpgradeHandler);, +, +                ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);, +                ctx.pipeline().remove(this);, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandlerTest.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelInitializer;, +    private void setUpServerChannel() {, +        setUpServerChannel();, +, +        setUpServerChannel();, +, +        setUpServerChannel();, +, +        setUpServerChannel();, +, +    @Test, +    public void usedHttp2Codec() throws Exception {, +        final Http2Codec http2Codec = new Http2CodecBuilder(true, new ChannelInitializer<Channel>() {, +            @Override, +            protected void initChannel(Channel ch) throws Exception {, +            }, +        }).build();, +        UpgradeCodecFactory upgradeCodecFactory = new UpgradeCodecFactory() {, +            @Override, +            public UpgradeCodec newUpgradeCodec(CharSequence protocol) {, +                return new Http2ServerUpgradeCodec(http2Codec);, +            }, +        };, +        http2ConnectionHandler = http2Codec.frameCodec().connectionHandler();, +, +        userEvents = new ArrayList<Object>();, +, +        HttpServerCodec httpServerCodec = new HttpServerCodec();, +        HttpServerUpgradeHandler upgradeHandler = new HttpServerUpgradeHandler(httpServerCodec, upgradeCodecFactory);, +, +        CleartextHttp2ServerUpgradeHandler handler = new CleartextHttp2ServerUpgradeHandler(, +                httpServerCodec, upgradeHandler, http2Codec);, +        channel = new EmbeddedChannel(handler, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {, +                userEvents.add(evt);, +            }, +        });, +, +        assertFalse(channel.writeInbound(Http2CodecUtil.connectionPrefaceBuf()));, +, +        ByteBuf settingsFrame = settingsFrameBuf();, +, +        assertFalse(channel.writeInbound(settingsFrame));, +, +        assertEquals(1, userEvents.size());, +        assertTrue(userEvents.get(0) instanceof PriorKnowledgeUpgradeEvent);, +    }, +]