[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.net.InetAddress;, +import java.net.NetworkInterface;, +import org.jboss.netty.channel.Channel;, +class NioDatagramChannel extends AbstractChannel, +                                implements org.jboss.netty.channel.socket.DatagramChannel {, +    private final java.nio.channels.DatagramChannel datagramChannel;, +    NioDatagramChannel(final ChannelFactory factory,, +        try {, +            return (InetSocketAddress) datagramChannel.socket().getLocalSocketAddress();, +        } catch (Throwable t) {, +            // Sometimes fails on a closed socket in Windows., +            return null;, +        }, +    public InetSocketAddress getRemoteAddress() {, +        try {, +            return (InetSocketAddress) datagramChannel.socket().getRemoteSocketAddress();, +        } catch (Throwable t) {, +            // Sometimes fails on a closed socket in Windows., +            return null;, +        }, +        return datagramChannel.socket().isConnected();, +    @Override, +    public int getInterestOps() {, +        if (!isOpen()) {, +            return Channel.OP_WRITE;, +        }, +, +        int interestOps = getRawInterestOps();, +        int writeBufferSize = this.writeBufferSize.get();, +        if (writeBufferSize != 0) {, +            if (highWaterMarkCounter.get() > 0) {, +                int lowWaterMark = getConfig().getWriteBufferLowWaterMark();, +                if (writeBufferSize >= lowWaterMark) {, +                    interestOps |= Channel.OP_WRITE;, +                } else {, +                    interestOps &= ~Channel.OP_WRITE;, +                }, +            } else {, +                int highWaterMark = getConfig().getWriteBufferHighWaterMark();, +                if (writeBufferSize >= highWaterMark) {, +                    interestOps |= Channel.OP_WRITE;, +                } else {, +                    interestOps &= ~Channel.OP_WRITE;, +                }, +            }, +        } else {, +            interestOps &= ~Channel.OP_WRITE;, +        }, +, +        return interestOps;, +    }, +, +    @Override, +    public ChannelFuture write(Object message, SocketAddress remoteAddress) {, +        if (remoteAddress == null || remoteAddress.equals(getRemoteAddress())) {, +            return super.write(message, null);, +        } else {, +            return super.write(message, remoteAddress);, +        }, +    }, +, +        public boolean offer(MessageEvent e) {, +            boolean success = super.offer(e);, +            int messageSize = ((ChannelBuffer) e.getMessage()).readableBytes();, +            int newWriteBufferSize = writeBufferSize.addAndGet(messageSize);, +            int highWaterMark = getConfig().getWriteBufferHighWaterMark();, +            MessageEvent e = super.poll();, +                int messageSize = ((ChannelBuffer) e.getMessage()).readableBytes();, +                int newWriteBufferSize = writeBufferSize.addAndGet(-messageSize);, +                int lowWaterMark = getConfig().getWriteBufferLowWaterMark();, +                if (newWriteBufferSize == 0 || newWriteBufferSize < lowWaterMark) {, +, +    public void joinGroup(InetAddress multicastAddress) {, +        throw new UnsupportedOperationException();, +    }, +, +    public void joinGroup(InetSocketAddress multicastAddress,, +            NetworkInterface networkInterface) {, +        throw new UnsupportedOperationException();, +    }, +, +    public void leaveGroup(InetAddress multicastAddress) {, +        throw new UnsupportedOperationException();, +    }, +, +    public void leaveGroup(InetSocketAddress multicastAddress,, +            NetworkInterface networkInterface) {, +        throw new UnsupportedOperationException();, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.net.InetAddress;, +import java.net.NetworkInterface;, +import org.jboss.netty.channel.Channel;, +class NioDatagramChannel extends AbstractChannel, +                                implements org.jboss.netty.channel.socket.DatagramChannel {, +    private final java.nio.channels.DatagramChannel datagramChannel;, +    NioDatagramChannel(final ChannelFactory factory,, +        try {, +            return (InetSocketAddress) datagramChannel.socket().getLocalSocketAddress();]