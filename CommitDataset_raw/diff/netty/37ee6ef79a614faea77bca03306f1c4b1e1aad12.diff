[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +public abstract class AbstractBinaryMemcacheDecoder<M extends BinaryMemcacheMessage>, +    private M currentMessage;, +                currentMessage = decodeHeader(in);, +                byte extrasLength = currentMessage.getExtrasLength();, +                    currentMessage.setExtras(readBytes(ctx.alloc(), in, extrasLength));, +                short keyLength = currentMessage.getKeyLength();, +                    currentMessage.setKey(in.toString(in.readerIndex(), keyLength, CharsetUtil.UTF_8));, +                out.add(currentMessage);, +                int valueLength = currentMessage.getTotalBodyLength(), +                    - currentMessage.getKeyLength(), +                    - currentMessage.getExtrasLength();, +        if (currentMessage.getExtras() != null) {, +            currentMessage.getExtras().release();, +        currentMessage = null;, +     * Decode and return the parsed {@link BinaryMemcacheMessage}., +    protected abstract M decodeHeader(ByteBuf in);, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +public abstract class AbstractBinaryMemcacheDecoder<M extends BinaryMemcacheMessage>, +    private M currentMessage;, +                currentMessage = decodeHeader(in);, +                byte extrasLength = currentMessage.getExtrasLength();, +                    currentMessage.setExtras(readBytes(ctx.alloc(), in, extrasLength));, +                short keyLength = currentMessage.getKeyLength();, +                    currentMessage.setKey(in.toString(in.readerIndex(), keyLength, CharsetUtil.UTF_8));, +                out.add(currentMessage);, +                int valueLength = currentMessage.getTotalBodyLength(), +                    - currentMessage.getKeyLength(), +                    - currentMessage.getExtrasLength();, +        if (currentMessage.getExtras() != null) {, +            currentMessage.getExtras().release();, +        currentMessage = null;, +     * Decode and return the parsed {@link BinaryMemcacheMessage}., +    protected abstract M decodeHeader(ByteBuf in);, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheEncoder.java, +public abstract class AbstractBinaryMemcacheEncoder<M extends BinaryMemcacheMessage>, +        encodeHeader(buf, msg);, +     * @param msg the message to encode., +    protected abstract void encodeHeader(ByteBuf buf, M msg);, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +public abstract class AbstractBinaryMemcacheDecoder<M extends BinaryMemcacheMessage>, +    private M currentMessage;, +                currentMessage = decodeHeader(in);, +                byte extrasLength = currentMessage.getExtrasLength();, +                    currentMessage.setExtras(readBytes(ctx.alloc(), in, extrasLength));, +                short keyLength = currentMessage.getKeyLength();, +                    currentMessage.setKey(in.toString(in.readerIndex(), keyLength, CharsetUtil.UTF_8));, +                out.add(currentMessage);, +                int valueLength = currentMessage.getTotalBodyLength(), +                    - currentMessage.getKeyLength(), +                    - currentMessage.getExtrasLength();, +        if (currentMessage.getExtras() != null) {, +            currentMessage.getExtras().release();, +        currentMessage = null;, +     * Decode and return the parsed {@link BinaryMemcacheMessage}., +    protected abstract M decodeHeader(ByteBuf in);, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheEncoder.java, +public abstract class AbstractBinaryMemcacheEncoder<M extends BinaryMemcacheMessage>, +        encodeHeader(buf, msg);, +     * @param msg the message to encode., +    protected abstract void encodeHeader(ByteBuf buf, M msg);, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheMessage.java, +public abstract class AbstractBinaryMemcacheMessage, +    implements BinaryMemcacheMessage {, +    private String key;, +    private ByteBuf extras;, +, +    private byte magic;, +    private byte opcode;, +    private short keyLength;, +    private byte extrasLength;, +    private byte dataType;, +    private int totalBodyLength;, +    private int opaque;, +    private long cas;, +    protected AbstractBinaryMemcacheMessage(String key, ByteBuf extras) {, +    public BinaryMemcacheMessage setKey(String key) {, +        this.key = key;, +        return this;, +    }, +, +    @Override, +    public BinaryMemcacheMessage setExtras(ByteBuf extras) {, +        this.extras = extras;, +        return this;, +    }, +, +    @Override, +    public byte getMagic() {, +        return magic;, +    }, +, +    @Override, +    public BinaryMemcacheMessage setMagic(byte magic) {, +        this.magic = magic;, +        return this;, +    }, +, +    @Override, +    public long getCAS() {]