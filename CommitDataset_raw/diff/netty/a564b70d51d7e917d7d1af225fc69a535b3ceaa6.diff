[+++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, +, +            // We are done with init the Channel, removing all the state for the Channel now., +            removeState(ctx);, +            if (initChannel(ctx)) {, +, +                // We are done with init the Channel, removing the initializer now., +                removeState(ctx);, +            }, +                ChannelPipeline pipeline = ctx.pipeline();, +                if (pipeline.context(this) != null) {, +                    pipeline.remove(this);, +                }, +    private void removeState(final ChannelHandlerContext ctx) {, +            // The context is not removed yet which is most likely the case because a custom EventExecutor is used., +            // Let's schedule it on the EventExecutor to give it some more time to be completed in case it is offloaded., +            ctx.executor().execute(new Runnable() {, +                public void run() {, +++ b/transport/src/main/java/io/netty/channel/ChannelInitializer.java, +, +            // We are done with init the Channel, removing all the state for the Channel now., +            removeState(ctx);, +            if (initChannel(ctx)) {, +, +                // We are done with init the Channel, removing the initializer now., +                removeState(ctx);, +            }, +                ChannelPipeline pipeline = ctx.pipeline();, +                if (pipeline.context(this) != null) {, +                    pipeline.remove(this);, +                }, +    private void removeState(final ChannelHandlerContext ctx) {, +            // The context is not removed yet which is most likely the case because a custom EventExecutor is used., +            // Let's schedule it on the EventExecutor to give it some more time to be completed in case it is offloaded., +            ctx.executor().execute(new Runnable() {, +                public void run() {, +++ b/transport/src/test/java/io/netty/channel/ChannelInitializerTest.java, +import java.util.concurrent.CountDownLatch;, +        final CountDownLatch latch = new CountDownLatch(1);, +, +                                            @Override, +                                            public void channelUnregistered(ChannelHandlerContext ctx) {, +                                                latch.countDown();, +                                            }, +                                if (cause instanceof AssertionError) {, +                            }, +        latch.await();, +        assertEquals(1, invokeCount.get());, +, +        executor.shutdown();, +        assertTrue(executor.awaitTermination(5, TimeUnit.SECONDS));]