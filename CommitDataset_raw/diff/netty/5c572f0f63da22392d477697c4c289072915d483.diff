[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import io.netty.util.internal.ReflectionUtil;, +import org.junit.Assume;, +import java.lang.reflect.Constructor;, +    public void upgradeEventNoRefCntError() throws Exception {, +        // Using reflect as the constructor is package-private and the class is final., +        Constructor<UpgradeEvent> constructor =, +                UpgradeEvent.class.getDeclaredConstructor(CharSequence.class, FullHttpRequest.class);, +        // Check if we could make it accessible which may fail on java9., +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor) == null);, +, +        HttpServerUpgradeHandler.UpgradeEvent upgradeEvent = constructor.newInstance(, +                "HTTP/2", new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"));, +        assertEquals(1, upgradeEvent.refCnt());, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import io.netty.util.internal.ReflectionUtil;, +import org.junit.Assume;, +import java.lang.reflect.Constructor;, +    public void upgradeEventNoRefCntError() throws Exception {, +        // Using reflect as the constructor is package-private and the class is final., +        Constructor<UpgradeEvent> constructor =, +                UpgradeEvent.class.getDeclaredConstructor(CharSequence.class, FullHttpRequest.class);, +        // Check if we could make it accessible which may fail on java9., +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor) == null);, +, +        HttpServerUpgradeHandler.UpgradeEvent upgradeEvent = constructor.newInstance(, +                "HTTP/2", new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"));, +        assertEquals(1, upgradeEvent.refCnt());, +++ /dev/null]