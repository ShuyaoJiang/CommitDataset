[+++ b/transport/src/main/java/io/netty/channel/socket/SctpMessage.java, +    /**, +     * Essential data that is being carried within SCTP Data Chunk, +     * @param msgInfo       the {@link MessageInfo}, +     * @param payloadBuffer channel buffer, +     */, +        if (msgInfo == null) {, +            throw new NullPointerException("msgInfo");, +        }, +        if (payloadBuffer == null) {, +            throw new NullPointerException("payloadBuffer");, +        }, +    /**, +     * Return the stream-identifier, +     */, +    /**, +     * Return the protocol-identifier, +     */, +    /**, +     * Return a view of the readable bytes of the payload., +     */, +    /**, +     * Return the {@link MessageInfo} for inbound messages or {@code null} for, +     * outbound messages., +     */, +    /**, +     * Return {@code true} if this message is complete., +     */, +++ b/transport/src/main/java/io/netty/channel/socket/SctpMessage.java, +    /**, +     * Essential data that is being carried within SCTP Data Chunk, +     * @param msgInfo       the {@link MessageInfo}, +     * @param payloadBuffer channel buffer, +     */, +        if (msgInfo == null) {, +            throw new NullPointerException("msgInfo");, +        }, +        if (payloadBuffer == null) {, +            throw new NullPointerException("payloadBuffer");, +        }, +    /**, +     * Return the stream-identifier, +     */, +    /**, +     * Return the protocol-identifier, +     */, +    /**, +     * Return a view of the readable bytes of the payload., +     */, +    /**, +     * Return the {@link MessageInfo} for inbound messages or {@code null} for, +     * outbound messages., +     */, +    /**, +     * Return {@code true} if this message is complete., +     */, +++ b/transport/src/main/java/io/netty/channel/socket/SctpNotificationEvent.java, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelPipeline;, +/**, + * Will be passed to {@link ChannelPipeline#fireUserEventTriggered(Object)} method and so forwarded to the added, + * {@link ChannelHandler#userEventTriggered(ChannelHandlerContext, Object)}  method., + */, +    /**, +     * Create a new instance, +     *, +     * @param notification  the {@link Notification} which triggered this event, +     * @param attachment    the attachment or {@code null} if non is attached., +     */, +        if (notification == null) {, +            throw new NullPointerException("notification");, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/SctpMessage.java, +    /**, +     * Essential data that is being carried within SCTP Data Chunk, +     * @param msgInfo       the {@link MessageInfo}, +     * @param payloadBuffer channel buffer, +     */, +        if (msgInfo == null) {, +            throw new NullPointerException("msgInfo");, +        }, +        if (payloadBuffer == null) {, +            throw new NullPointerException("payloadBuffer");, +        }, +    /**, +     * Return the stream-identifier, +     */, +    /**, +     * Return the protocol-identifier, +     */, +    /**, +     * Return a view of the readable bytes of the payload., +     */, +    /**, +     * Return the {@link MessageInfo} for inbound messages or {@code null} for, +     * outbound messages., +     */, +    /**, +     * Return {@code true} if this message is complete.]