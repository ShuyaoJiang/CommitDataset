[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.MessageList;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +, +public class SocketGatheringWriteTest extends AbstractSocketTest {, +, +    private static final Random random = new Random();, +    static final byte[] data = new byte[1048576];, +, +    static {, +        random.nextBytes(data);, +    }, +, +    @Test(timeout = 30000), +    public void testGatheringWrite() throws Throwable {, +        run();, +    }, +, +    public void testGatheringWrite(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        final TestHandler sh = new TestHandler();, +        final TestHandler ch = new TestHandler();, +, +        cb.handler(ch);, +        sb.childHandler(sh);, +, +        Channel sc = sb.bind().sync().channel();, +        Channel cc = cb.connect().sync().channel();, +, +        MessageList<Object> messages = MessageList.newInstance();, +, +        for (int i = 0; i < data.length;) {, +            int length = Math.min(random.nextInt(1024 * 64), data.length - i);, +            ByteBuf buf = Unpooled.wrappedBuffer(data, i, length);, +            messages.add(buf);, +            i += length;, +        }, +        assertNotEquals(cc.voidPromise(), cc.write(messages).sync());, +, +        while (sh.counter < data.length) {, +            if (sh.exception.get() != null) {, +                break;, +            }, +            if (ch.exception.get() != null) {, +                break;, +            }, +            try {, +                Thread.sleep(50);, +            } catch (InterruptedException e) {, +                // Ignore., +            }, +        }, +        assertEquals(Unpooled.wrappedBuffer(data), sh.received);, +        sh.channel.close().sync();, +        ch.channel.close().sync();, +        sc.close().sync();, +, +        if (sh.exception.get() != null && !(sh.exception.get() instanceof IOException)) {, +            throw sh.exception.get();, +        }, +        if (sh.exception.get() != null) {, +            throw sh.exception.get();, +        }, +        if (ch.exception.get() != null && !(ch.exception.get() instanceof IOException)) {, +            throw ch.exception.get();, +        }, +        if (ch.exception.get() != null) {, +            throw ch.exception.get();, +        }, +        assertEquals(0, ch.counter);]