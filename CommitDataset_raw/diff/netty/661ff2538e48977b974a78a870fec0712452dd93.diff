[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    private final DnsCache authoritativeDnsServerCache;, +    private final boolean supportsAAAARecords;, +    private final boolean supportsARecords;, +     * @deprecated use {@link DnsNameResolver#DnsNameResolver(EventLoop, ChannelFactory, DnsServerAddresses, DnsCache,, +     *                  DnsCache, long, InternetProtocolFamily[], boolean, int, boolean, int, boolean,, +     *                  HostsFileEntriesResolver, String[], int, boolean)}, +        this(eventLoop, channelFactory, nameServerAddresses, resolveCache, NoopDnsCache.INSTANCE, queryTimeoutMillis,, +                resolvedAddressTypes, recursionDesired, maxQueriesPerResolve, traceEnabled, maxPayloadSize,, +                optResourceEnabled, hostsFileEntriesResolver, searchDomains, ndots, true);, +     * @param authoritativeDnsServerCache the cache used to find the authoritative DNS server for a domain, +            DnsCache authoritativeDnsServerCache,, +        this.authoritativeDnsServerCache = checkNotNull(authoritativeDnsServerCache, "authoritativeDnsServerCache");, +        boolean supportsARecords = false;, +        boolean supportsAAAARecords = false;, +                    supportsARecords = true;, +                    supportsAAAARecords = true;, +        assert supportsARecords || supportsAAAARecords;, +        this.supportsAAAARecords = supportsAAAARecords;, +        this.supportsARecords = supportsARecords;, +    // Only here to override in unit tests., +    int dnsRedirectPort(@SuppressWarnings("unused") InetAddress server) {, +        return DnsServerAddresses.DNS_PORT;, +    }, +, +     * Returns the cache used for authoritative DNS servers for a domain., +     */, +    public DnsCache authoritativeDnsServerCache() {, +        return authoritativeDnsServerCache;, +    }, +, +    /**, +    final boolean supportsAAAARecords() {, +        return supportsAAAARecords;, +    final boolean supportsARecords() {, +        return supportsARecords;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    private final DnsCache authoritativeDnsServerCache;, +    private final boolean supportsAAAARecords;, +    private final boolean supportsARecords;, +     * @deprecated use {@link DnsNameResolver#DnsNameResolver(EventLoop, ChannelFactory, DnsServerAddresses, DnsCache,, +     *                  DnsCache, long, InternetProtocolFamily[], boolean, int, boolean, int, boolean,, +     *                  HostsFileEntriesResolver, String[], int, boolean)}, +        this(eventLoop, channelFactory, nameServerAddresses, resolveCache, NoopDnsCache.INSTANCE, queryTimeoutMillis,, +                resolvedAddressTypes, recursionDesired, maxQueriesPerResolve, traceEnabled, maxPayloadSize,, +                optResourceEnabled, hostsFileEntriesResolver, searchDomains, ndots, true);, +     * @param authoritativeDnsServerCache the cache used to find the authoritative DNS server for a domain, +            DnsCache authoritativeDnsServerCache,, +        this.authoritativeDnsServerCache = checkNotNull(authoritativeDnsServerCache, "authoritativeDnsServerCache");, +        boolean supportsARecords = false;, +        boolean supportsAAAARecords = false;, +                    supportsARecords = true;, +                    supportsAAAARecords = true;, +        assert supportsARecords || supportsAAAARecords;, +        this.supportsAAAARecords = supportsAAAARecords;, +        this.supportsARecords = supportsARecords;, +    // Only here to override in unit tests., +    int dnsRedirectPort(@SuppressWarnings("unused") InetAddress server) {, +        return DnsServerAddresses.DNS_PORT;, +    }, +, +     * Returns the cache used for authoritative DNS servers for a domain., +     */, +    public DnsCache authoritativeDnsServerCache() {, +        return authoritativeDnsServerCache;, +    }, +, +    /**, +    final boolean supportsAAAARecords() {, +        return supportsAAAARecords;, +    final boolean supportsARecords() {, +        return supportsARecords;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +    private DnsCache authoritativeDnsServerCache;, +     * Sets the cache for authoritive NS servers, +     *, +     * @param authoritativeDnsServerCache the authoritive NS servers cache, +     * @return {@code this}, +     */, +    public DnsNameResolverBuilder authoritativeDnsServerCache(DnsCache authoritativeDnsServerCache) {, +        this.authoritativeDnsServerCache = authoritativeDnsServerCache;, +        return this;, +    }, +, +    /**, +    private DnsCache newCache() {, +        return new DefaultDnsCache(intValue(minTtl, 0), intValue(maxTtl, Integer.MAX_VALUE), intValue(negativeTtl, 0));, +    }, +, +        if (authoritativeDnsServerCache != null && (minTtl != null || maxTtl != null || negativeTtl != null)) {, +            throw new IllegalStateException("authoritativeDnsServerCache and TTLs are mutually exclusive");, +        }, +        DnsCache resolveCache = this.resolveCache != null ? this.resolveCache : newCache();, +        DnsCache authoritativeDnsServerCache = this.authoritativeDnsServerCache != null ?, +                this.authoritativeDnsServerCache : newCache();, +                resolveCache,, +                authoritativeDnsServerCache,, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    private final DnsCache authoritativeDnsServerCache;, +    private final boolean supportsAAAARecords;]