[+++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioAcceptedSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioAcceptedSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioAcceptedSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioAcceptedSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketChannel.java, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioSocketChannel.java, +++ b/src/test/java/org/jboss/netty/channel/socket/AbstractSocketEchoTest.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel.socket;, +, +import static org.junit.Assert.*;, +, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.util.Random;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +import org.jboss.netty.bootstrap.ClientBootstrap;, +import org.jboss.netty.bootstrap.ServerBootstrap;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelHandler;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public abstract class AbstractSocketEchoTest {, +, +    private static final Random random = new Random();, +    static final byte[] data = new byte[1048576 * 32];, +, +    private static ExecutorService executor;, +, +    static {, +        random.nextBytes(data);, +    }, +, +    @BeforeClass, +    public static void init() {, +        executor = Executors.newCachedThreadPool();, +    }, +, +    @AfterClass, +    public static void destroy() {, +        executor.shutdown();, +        for (;;) {, +            try {, +                if (executor.awaitTermination(1, TimeUnit.SECONDS)) {, +                    break;, +                }, +            } catch (InterruptedException e) {, +                // Ignore., +            }, +        }, +    }, +, +    protected abstract ChannelFactory newServerSocketChannelFactory(Executor executor);]