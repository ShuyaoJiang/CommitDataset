[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentCompressor.java, +import com.sun.net.httpserver.Headers;, +, +    protected Result beginEncode(HttpMessage msg, String acceptEncoding) throws Exception {, +        String contentEncoding = msg.getHeader(HttpHeaders.Names.CONTENT_ENCODING);, +        if (contentEncoding != null &&, +            !HttpHeaders.Values.IDENTITY.equalsIgnoreCase(contentEncoding)) {, +            return null;, +        }, +                , +        String targetContentEncoding;, +            targetContentEncoding = "gzip";, +            break;, +            targetContentEncoding = "deflate";, +            break;, +, +        return new Result(, +                targetContentEncoding,, +                new EncoderEmbedder<ChannelBuffer>(, +                        new ZlibEncoder(wrapper, compressionLevel)));, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentCompressor.java, +import com.sun.net.httpserver.Headers;, +, +    protected Result beginEncode(HttpMessage msg, String acceptEncoding) throws Exception {, +        String contentEncoding = msg.getHeader(HttpHeaders.Names.CONTENT_ENCODING);, +        if (contentEncoding != null &&, +            !HttpHeaders.Values.IDENTITY.equalsIgnoreCase(contentEncoding)) {, +            return null;, +        }, +                , +        String targetContentEncoding;, +            targetContentEncoding = "gzip";, +            break;, +            targetContentEncoding = "deflate";, +            break;, +, +        return new Result(, +                targetContentEncoding,, +                new EncoderEmbedder<ChannelBuffer>(, +                        new ZlibEncoder(wrapper, compressionLevel)));, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpContentEncoder.java, + * {@link EncoderEmbedder}, which is created by {@link #beginEncode(HttpMessage, String)}., + * is set to the target content encoding, as returned by, + * {@link #beginEncode(HttpMessage, String)}., + * encoded content.  If there is no supported or allowed encoding in the, + * {@link #beginEncode(HttpMessage, String)} should return {@code null} so that, + * no encoding occurs (i.e. pass-through)., + * and implement {@link #beginEncode(HttpMessage, String)} properly to make, + * this class functional.  For example, refer to the source code of, + * {@link HttpContentCompressor}., +            if (!hasContent) {, +                ctx.sendDownstream(e);, +                return;, +            }, +, +            Result result = beginEncode(m, acceptEncoding);, +            if (result == null) {, +                ctx.sendDownstream(e);, +                return;, +            }, +, +            encoder = result.getContentEncoder();, +, +                    result.getTargetContentEncoding());, +     * Prepare to encode the HTTP message content., +     * @param msg, +     *        the HTTP message whose content should be encoded, +     * @return the result of preparation, which is composed of the determined, +     *         target content encoding and a new {@link EncoderEmbedder} that, +     *         encodes the content into the target content encoding., +     *         {@code null} if {@code acceptEncoding} is unsupported or rejected, +     *         and thus the content should be handled as-is (i.e. no encoding)., +    protected abstract Result beginEncode(HttpMessage msg, String acceptEncoding) throws Exception;, +, +    public static final class Result {, +        private final String targetContentEncoding;, +        private final EncoderEmbedder<ChannelBuffer> contentEncoder;, +, +        public Result(String targetContentEncoding, EncoderEmbedder<ChannelBuffer> contentEncoder) {, +            if (targetContentEncoding == null) {, +                throw new NullPointerException("targetContentEncoding");, +            }, +            if (contentEncoder == null) {, +                throw new NullPointerException("contentEncoder");, +            }, +, +            this.targetContentEncoding = targetContentEncoding;, +            this.contentEncoder = contentEncoder;, +        }, +, +        public String getTargetContentEncoding() {, +            return targetContentEncoding;, +        }, +, +        public EncoderEmbedder<ChannelBuffer> getContentEncoder() {, +            return contentEncoder;, +        }, +    }]