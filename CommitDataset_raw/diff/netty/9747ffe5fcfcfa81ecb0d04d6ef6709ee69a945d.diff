[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +            encoder.flowController().incrementWindowSize(stream, windowSizeIncrement);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +            encoder.flowController().incrementWindowSize(stream, windowSizeIncrement);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        flowController().addFlowControlled(stream,, +                new FlowControlledData(stream, data, padding, endOfStream, promise));, +            flowController().addFlowControlled(stream,, +                    new FlowControlledHeaders(stream, headers, streamDependency, weight, exclusive, padding,, +                            endOfStream, promise));, +        private FlowControlledData(Http2Stream stream, ByteBuf buf, int padding, boolean endOfStream,, +                                   ChannelPromise promise) {, +            super(stream, padding, endOfStream, promise);, +            queue = new CoalescingBufferQueue(promise.channel());, +        public void error(ChannelHandlerContext ctx, Throwable cause) {, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +        public boolean merge(ChannelHandlerContext ctx, Http2RemoteFlowController.FlowControlled next) {, +        private FlowControlledHeaders(Http2Stream stream, Http2Headers headers, int streamDependency, short weight,, +                boolean exclusive, int padding, boolean endOfStream, ChannelPromise promise) {, +            super(stream, padding, endOfStream, promise);, +        public void error(ChannelHandlerContext ctx, Throwable cause) {, +            if (ctx != null) {, +            }, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +, +        public boolean merge(ChannelHandlerContext ctx, Http2RemoteFlowController.FlowControlled next) {, +        public FlowControlledBase(final Http2Stream stream, int padding, boolean endOfStream,, +                final ChannelPromise promise) {, +                error(flowController().channelHandlerContext(), future.cause());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);, +            encoder.flowController().incrementWindowSize(stream, windowSizeIncrement);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        flowController().addFlowControlled(stream,, +                new FlowControlledData(stream, data, padding, endOfStream, promise));, +            flowController().addFlowControlled(stream,, +                    new FlowControlledHeaders(stream, headers, streamDependency, weight, exclusive, padding,, +                            endOfStream, promise));, +        private FlowControlledData(Http2Stream stream, ByteBuf buf, int padding, boolean endOfStream,, +                                   ChannelPromise promise) {, +            super(stream, padding, endOfStream, promise);, +            queue = new CoalescingBufferQueue(promise.channel());, +        public void error(ChannelHandlerContext ctx, Throwable cause) {, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +        public boolean merge(ChannelHandlerContext ctx, Http2RemoteFlowController.FlowControlled next) {, +        private FlowControlledHeaders(Http2Stream stream, Http2Headers headers, int streamDependency, short weight,, +                boolean exclusive, int padding, boolean endOfStream, ChannelPromise promise) {, +            super(stream, padding, endOfStream, promise);, +        public void error(ChannelHandlerContext ctx, Throwable cause) {, +            if (ctx != null) {, +            }, +        public void write(ChannelHandlerContext ctx, int allowedBytes) {, +, +        public boolean merge(ChannelHandlerContext ctx, Http2RemoteFlowController.FlowControlled next) {, +        public FlowControlledBase(final Http2Stream stream, int padding, boolean endOfStream,, +                final ChannelPromise promise) {, +                error(flowController().channelHandlerContext(), future.cause());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +                        connectionState().consumeBytes(unconsumedBytes);, +                        state.consumeBytes(unconsumedBytes);, +    public void channelHandlerContext(ChannelHandlerContext ctx) {, +        this.ctx = ctx;, +    }, +, +    @Override, +    public void incrementWindowSize(Http2Stream stream, int delta) throws Http2Exception {, +        state.writeWindowUpdateIfNeeded();, +    public boolean consumeBytes(Http2Stream stream, int numBytes) throws Http2Exception {, +, +, +            boolean windowUpdateSent = connectionState().consumeBytes(numBytes);, +            windowUpdateSent |= state(stream).consumeBytes(numBytes);, +    public void windowUpdateRatio(Http2Stream stream, float ratio) throws Http2Exception {, +        state.writeWindowUpdateIfNeeded();, +    public void receiveFlowControlledFrame(Http2Stream stream, ByteBuf data, int padding,, +            boolean endOfStream) throws Http2Exception {, +            connectionState.consumeBytes(dataLength);, +        public boolean consumeBytes(int numBytes) throws Http2Exception {, +            return writeWindowUpdateIfNeeded();, +        public boolean writeWindowUpdateIfNeeded() throws Http2Exception {, +                writeWindowUpdate();, +        private void writeWindowUpdate() throws Http2Exception {, +        public boolean writeWindowUpdateIfNeeded() throws Http2Exception {, +        public boolean consumeBytes(int numBytes) throws Http2Exception {, +        boolean writeWindowUpdateIfNeeded() throws Http2Exception;, +        boolean consumeBytes(int numBytes) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +                flowController.receiveFlowControlledFrame(stream, data, padding, endOfStream);, +                flowController.consumeBytes(stream, bytesToReturn);]