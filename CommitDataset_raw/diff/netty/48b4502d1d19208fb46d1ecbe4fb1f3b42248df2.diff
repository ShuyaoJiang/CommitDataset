[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/EmptyHttpHeaders.java, +     * @see InstanceInitializer#EMPTY_HEADERS, +     * This is needed to break a cyclic static initialization loop between {@link HttpHeaders} and {@link, +     * EmptyHttpHeaders}., +        return InstanceInitializer.EMPTY_HEADERS;, +, +    /**, +     * This class is needed to break a cyclic static initialization loop between {@link HttpHeaders} and, +     * {@link EmptyHttpHeaders}., +     */, +    @Deprecated, +    private static final class InstanceInitializer {, +        /**, +         * The instance is instantiated here to break the cyclic static initialization between {@link EmptyHttpHeaders}, +         * and {@link HttpHeaders}. The issue is that if someone accesses {@link EmptyHttpHeaders#INSTANCE} before, +         * {@link HttpHeaders#EMPTY_HEADERS} then {@link HttpHeaders#EMPTY_HEADERS} will be {@code null}., +         */, +        @Deprecated, +        private static final EmptyHttpHeaders EMPTY_HEADERS = new EmptyHttpHeaders();, +, +        private InstanceInitializer() {, +        }, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/EmptyHttpHeaders.java, +     * @see InstanceInitializer#EMPTY_HEADERS, +     * This is needed to break a cyclic static initialization loop between {@link HttpHeaders} and {@link, +     * EmptyHttpHeaders}., +        return InstanceInitializer.EMPTY_HEADERS;, +, +    /**, +     * This class is needed to break a cyclic static initialization loop between {@link HttpHeaders} and, +     * {@link EmptyHttpHeaders}., +     */, +    @Deprecated, +    private static final class InstanceInitializer {, +        /**, +         * The instance is instantiated here to break the cyclic static initialization between {@link EmptyHttpHeaders}, +         * and {@link HttpHeaders}. The issue is that if someone accesses {@link EmptyHttpHeaders#INSTANCE} before, +         * {@link HttpHeaders#EMPTY_HEADERS} then {@link HttpHeaders#EMPTY_HEADERS} will be {@code null}., +         */, +        @Deprecated, +        private static final EmptyHttpHeaders EMPTY_HEADERS = new EmptyHttpHeaders();, +, +        private InstanceInitializer() {, +        }, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/EmptyHttpHeaders.java, +     * @see InstanceInitializer#EMPTY_HEADERS, +     * This is needed to break a cyclic static initialization loop between {@link HttpHeaders} and {@link, +     * EmptyHttpHeaders}., +        return InstanceInitializer.EMPTY_HEADERS;, +, +    /**, +     * This class is needed to break a cyclic static initialization loop between {@link HttpHeaders} and, +     * {@link EmptyHttpHeaders}., +     */, +    @Deprecated, +    private static final class InstanceInitializer {, +        /**, +         * The instance is instantiated here to break the cyclic static initialization between {@link EmptyHttpHeaders}, +         * and {@link HttpHeaders}. The issue is that if someone accesses {@link EmptyHttpHeaders#INSTANCE} before, +         * {@link HttpHeaders#EMPTY_HEADERS} then {@link HttpHeaders#EMPTY_HEADERS} will be {@code null}., +         */, +        @Deprecated, +        private static final EmptyHttpHeaders EMPTY_HEADERS = new EmptyHttpHeaders();, +, +        private InstanceInitializer() {, +        }, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/EmptyHttpHeadersInitializationTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +/**, + * A test to validate that either order of initialization of the {@link EmptyHttpHeaders#INSTANCE} and, + * {@link HttpHeaders#EMPTY_HEADERS} field results in both fields being non-null., + *, + * Since this is testing static initialization, the tests might not actually test anything, except]