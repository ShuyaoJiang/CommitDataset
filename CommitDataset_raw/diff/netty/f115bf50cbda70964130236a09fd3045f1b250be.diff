[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +    int optlen = sizeof(optval);, +    // We call getsockopt directly so we can handle ENOPROTOOPT by ourself., +    if (getsockopt(fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, &optlen) == -1) {, +        if (errno == ENOPROTOOPT) {, +            // Not supported by the system, so just return 0., +            return 0;, +        }, +        netty_unix_socket_getOptionHandleError(env, errno);, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +    int optlen = sizeof(optval);, +    // We call getsockopt directly so we can handle ENOPROTOOPT by ourself., +    if (getsockopt(fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, &optlen) == -1) {, +        if (errno == ENOPROTOOPT) {, +            // Not supported by the system, so just return 0., +            return 0;, +        }, +        netty_unix_socket_getOptionHandleError(env, errno);, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollServerSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());, +    }, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +    int optlen = sizeof(optval);, +    // We call getsockopt directly so we can handle ENOPROTOOPT by ourself., +    if (getsockopt(fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, &optlen) == -1) {, +        if (errno == ENOPROTOOPT) {, +            // Not supported by the system, so just return 0., +            return 0;, +        }, +        netty_unix_socket_getOptionHandleError(env, errno);, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollServerSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());, +    }, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());, +    }, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +    int optlen = sizeof(optval);, +    // We call getsockopt directly so we can handle ENOPROTOOPT by ourself., +    if (getsockopt(fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, &optlen) == -1) {, +        if (errno == ENOPROTOOPT) {, +            // Not supported by the system, so just return 0., +            return 0;, +        }, +        netty_unix_socket_getOptionHandleError(env, errno);, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollServerSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());, +    }, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());, +    }, +++ b/transport-native-unix-common/src/main/c/netty_unix_socket.c, +void netty_unix_socket_getOptionHandleError(JNIEnv* env, int err) {, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +    int optlen = sizeof(optval);, +    // We call getsockopt directly so we can handle ENOPROTOOPT by ourself., +    if (getsockopt(fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, &optlen) == -1) {, +        if (errno == ENOPROTOOPT) {, +            // Not supported by the system, so just return 0., +            return 0;, +        }, +        netty_unix_socket_getOptionHandleError(env, errno);, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollServerSocketChannelConfigTest.java, +import io.netty.channel.ChannelOption;, +import java.util.Map;, +, +    @Test, +    public void getGetOptions() {, +        Map<ChannelOption<?>, Object> map = ch.config().getOptions();, +        assertFalse(map.isEmpty());]