[+++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +++ b/handler/src/main/java/io/netty/handler/execution/OrderedDownstreamThreadPoolExecutor.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.execution;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelEvent;, +, +import java.util.concurrent.Executor;, +import java.util.concurrent.Executors;, +import java.util.concurrent.RejectedExecutionException;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +, +/**, + * {@link Executor} which should be used for downstream {@link ChannelEvent}'s. This implementation will take care of preserve the order of the events in a {@link Channel}., + * If you don't need to preserve the order just use one of the {@link Executor} implementations provided by the static methods of {@link Executors}., + * <br>, + * <br>, + * , + * For more informations about how the order is preserved see {@link OrderedMemoryAwareThreadPoolExecutor}, + *, + */, +public final class OrderedDownstreamThreadPoolExecutor extends OrderedMemoryAwareThreadPoolExecutor {, +    , +    /**, +     * Creates a new instance., +     *, +     * @param corePoolSize          the maximum number of active threads, +     */, +    public OrderedDownstreamThreadPoolExecutor(int corePoolSize) {, +        super(corePoolSize, 0L, 0L);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param corePoolSize          the maximum number of active threads, +     * @param keepAliveTime         the amount of time for an inactive thread to shut itself down, +     * @param unit                  the {@link TimeUnit} of {@code keepAliveTime}, +     */, +    public OrderedDownstreamThreadPoolExecutor(, +            int corePoolSize, long keepAliveTime, TimeUnit unit) {, +        super(corePoolSize, 0L, 0L, keepAliveTime, unit);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param corePoolSize          the maximum number of active threads, +     * @param keepAliveTime         the amount of time for an inactive thread to shut itself down, +     * @param unit                  the {@link TimeUnit} of {@code keepAliveTime}, +     * @param threadFactory         the {@link ThreadFactory} of this pool, +     */, +    public OrderedDownstreamThreadPoolExecutor(, +            int corePoolSize, long keepAliveTime, TimeUnit unit, ThreadFactory threadFactory) {, +        super(corePoolSize, 0L, 0L,, +                keepAliveTime, unit, threadFactory);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param corePoolSize          the maximum number of active threads, +     * @param keepAliveTime         the amount of time for an inactive thread to shut itself down, +     * @param unit                  the {@link TimeUnit} of {@code keepAliveTime}, +     * @param threadFactory         the {@link ThreadFactory} of this pool, +     * @param objectSizeEstimator   the {@link ObjectSizeEstimator} of this pool, +     */, +    public OrderedDownstreamThreadPoolExecutor(, +            int corePoolSize,, +            long keepAliveTime, TimeUnit unit,, +            ObjectSizeEstimator objectSizeEstimator, ThreadFactory threadFactory) {, +        super(corePoolSize, 0L, 0L,, +                keepAliveTime, unit, objectSizeEstimator, threadFactory);, +    }, +, +    , +    /**, +     * Return <code>null</code>, +     */, +    @Override, +    public ObjectSizeEstimator getObjectSizeEstimator() {, +        return null;, +    }]