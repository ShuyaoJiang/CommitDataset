[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +        boolean wasRead = read;, +, +        channelReadComplete(ctx, wasRead);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +        boolean wasRead = read;, +, +        channelReadComplete(ctx, wasRead);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        channelReadComplete(ctx, !decodeWasNull);, +    }, +, +    protected final void channelReadComplete(ChannelHandlerContext ctx, boolean readData) throws Exception {, +        if (readData) {, +            ctx.fireChannelReadComplete();, +        } else if (!ctx.channel().config().isAutoRead()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +        boolean wasRead = read;, +, +        channelReadComplete(ctx, wasRead);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        channelReadComplete(ctx, !decodeWasNull);, +    }, +, +    protected final void channelReadComplete(ChannelHandlerContext ctx, boolean readData) throws Exception {, +        if (readData) {, +            ctx.fireChannelReadComplete();, +        } else if (!ctx.channel().config().isAutoRead()) {, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testFireChannelReadComplete() {, +        final AtomicBoolean readCompleteExpected = new AtomicBoolean();, +        final AtomicInteger readCompleteCount = new AtomicInteger();, +        EmbeddedChannel channel = new EmbeddedChannel(new ByteToMessageDecoder() {, +, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                if (in.readableBytes() > 1) {, +                    readCompleteExpected.set(true);, +                    out.add(in.readBytes(in.readableBytes()));, +                }, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +                assertTrue(readCompleteExpected.get());, +                readCompleteCount.incrementAndGet();, +            }, +        });, +, +        assertFalse(channel.writeInbound(Unpooled.wrappedBuffer(new byte[] {'a'})));, +        assertTrue(channel.writeInbound(Unpooled.wrappedBuffer(new byte[] {'b'})));, +        ByteBuf b = channel.readInbound();, +, +        ByteBuf expected = Unpooled.wrappedBuffer(new byte[] {'a', 'b'});, +        assertEquals(expected, b);, +        b.release();, +        expected.release();, +, +        assertTrue(readCompleteExpected.get());, +, +        assertFalse(channel.finish());, +, +        assertEquals(1, readCompleteCount.get());, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +        boolean wasRead = read;, +, +        channelReadComplete(ctx, wasRead);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        channelReadComplete(ctx, !decodeWasNull);, +    }, +, +    protected final void channelReadComplete(ChannelHandlerContext ctx, boolean readData) throws Exception {, +        if (readData) {, +            ctx.fireChannelReadComplete();, +        } else if (!ctx.channel().config().isAutoRead()) {, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    @Test, +    public void testFireChannelReadComplete() {, +        final AtomicBoolean readCompleteExpected = new AtomicBoolean();, +        final AtomicInteger readCompleteCount = new AtomicInteger();, +        EmbeddedChannel channel = new EmbeddedChannel(new ByteToMessageDecoder() {, +, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                if (in.readableBytes() > 1) {, +                    readCompleteExpected.set(true);, +                    out.add(in.readBytes(in.readableBytes()));, +                }, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {]