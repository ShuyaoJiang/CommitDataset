[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                flags |= FLAG_FREED | FLAG_FREED_INBOUND | FLAG_FREED_OUTBOUND;, +                freeNextInboundBridgeFeeder();, +                freeNextOutboundBridgeFeeder();, +    private void freeNextInboundBridgeFeeder() {, +    private void freeNextOutboundBridgeFeeder() {, +    void freeInbound() {, +            freeInbound0();, +                    freeInbound0();, +    private void freeInbound0() {, +            flags |= FLAG_FREED_INBOUND;, +            freeNextInboundBridgeFeeder();, +            nextCtx.freeInbound();, +            findContextOutbound().freeOutbound();, +    /** Invocation initiated by {@link #freeInbound0()} after freeing all inbound buffers. */, +    private void freeOutbound() {, +                freeOutbound0();, +                        freeOutbound0();, +                freeOutbound0();, +                        freeOutbound0();, +    private void freeOutbound0() {, +            flags |= FLAG_FREED_OUTBOUND;, +            freeNextOutboundBridgeFeeder();, +            findContextOutbound().freeOutbound();, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                flags |= FLAG_FREED | FLAG_FREED_INBOUND | FLAG_FREED_OUTBOUND;, +                freeNextInboundBridgeFeeder();, +                freeNextOutboundBridgeFeeder();, +    private void freeNextInboundBridgeFeeder() {, +    private void freeNextOutboundBridgeFeeder() {, +    void freeInbound() {, +            freeInbound0();, +                    freeInbound0();, +    private void freeInbound0() {, +            flags |= FLAG_FREED_INBOUND;, +            freeNextInboundBridgeFeeder();, +            nextCtx.freeInbound();, +            findContextOutbound().freeOutbound();, +    /** Invocation initiated by {@link #freeInbound0()} after freeing all inbound buffers. */, +    private void freeOutbound() {, +                freeOutbound0();, +                        freeOutbound0();, +                freeOutbound0();, +                        freeOutbound0();, +    private void freeOutbound0() {, +            flags |= FLAG_FREED_OUTBOUND;, +            freeNextOutboundBridgeFeeder();, +            findContextOutbound().freeOutbound();, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +            head.freeInbound();]