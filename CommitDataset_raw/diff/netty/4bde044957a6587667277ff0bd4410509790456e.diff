[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsClass.java, +public final class DnsClass implements Comparable<DnsClass> {, +    private static final String EXPECTED =, +            " (expected: " +, +            IN + '(' + IN.intValue() + "), " +, +            CSNET + '(' + CSNET.intValue() + "), " +, +            CHAOS + '(' + CHAOS.intValue() + "), " +, +            HESIOD + '(' + HESIOD.intValue() + "), " +, +            NONE + '(' + NONE.intValue() + "), " +, +            ANY + '(' + ANY.intValue() + "))";, +    public static DnsClass valueOf(String name) {, +        if (IN.name().equals(name)) {, +        }, +        if (NONE.name().equals(name)) {, +        }, +        if (ANY.name().equals(name)) {, +        }, +        if (CSNET.name().equals(name)) {, +        }, +        if (CHAOS.name().equals(name)) {, +        }, +        if (HESIOD.name().equals(name)) {, +, +        throw new IllegalArgumentException("name: " + name + EXPECTED);, +    public static DnsClass valueOf(int intValue) {, +        switch (intValue) {, +            return new DnsClass(intValue, "UNKNOWN");, +    /**, +     * Returns an instance of DnsClass for a custom type., +     *, +     * @param clazz The class, +     * @param name The name, +     */, +    public static DnsClass valueOf(int clazz, String name) {, +        return new DnsClass(clazz, name);, +    }, +, +    /**, +     * The protocol value of this DNS class, +     */, +    private final int intValue;, +, +    /**, +     * The name of this DNS class, +     */, +    private final String name;, +, +    private DnsClass(int intValue, String name) {, +        if ((intValue & 0xffff) != intValue) {, +            throw new IllegalArgumentException("intValue: " + intValue + " (expected: 0 ~ 65535)");, +        }, +, +        this.intValue = intValue;, +        this.name = name;, +    }, +, +    /**, +     * Returns the name of this class as used in bind config files, +     */, +    public String name() {, +        return name;, +    }, +, +    /**, +     * Returns the protocol value represented by this class, +     */, +    public int intValue() {, +        return intValue;, +    public int hashCode() {, +        return intValue;, +    public boolean equals(Object o) {, +        return o instanceof DnsClass && ((DnsClass) o).intValue == intValue;, +    }, +, +    @Override, +    public int compareTo(DnsClass o) {, +        return intValue() - o.intValue();, +    }, +, +    @Override, +    public String toString() {, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsClass.java, +public final class DnsClass implements Comparable<DnsClass> {, +    private static final String EXPECTED =, +            " (expected: " +, +            IN + '(' + IN.intValue() + "), " +, +            CSNET + '(' + CSNET.intValue() + "), " +, +            CHAOS + '(' + CHAOS.intValue() + "), " +, +            HESIOD + '(' + HESIOD.intValue() + "), " +, +            NONE + '(' + NONE.intValue() + "), " +, +            ANY + '(' + ANY.intValue() + "))";, +    public static DnsClass valueOf(String name) {, +        if (IN.name().equals(name)) {, +        }, +        if (NONE.name().equals(name)) {, +        }, +        if (ANY.name().equals(name)) {, +        }, +        if (CSNET.name().equals(name)) {, +        }]