[+++ b/common/src/main/java/io/netty/util/HashedWheelTimer.java, +import io.netty.util.internal.DetectionUtil;, +                long sleepTime = tickDuration * tick - (currentTime - startTime);, +, +                // Check if we run on windows, as if thats the case we will need, +                // to round the sleepTime as workaround for a bug that only affect, +                // the JVM if it runs on windows., +                //, +                // See https://github.com/netty/netty/issues/356, +                if (DetectionUtil.isWindows()) {, +                    sleepTime = sleepTime / 10 * 10;, +                }, +++ b/common/src/main/java/io/netty/util/HashedWheelTimer.java, +import io.netty.util.internal.DetectionUtil;, +                long sleepTime = tickDuration * tick - (currentTime - startTime);, +, +                // Check if we run on windows, as if thats the case we will need, +                // to round the sleepTime as workaround for a bug that only affect, +                // the JVM if it runs on windows., +                //, +                // See https://github.com/netty/netty/issues/356, +                if (DetectionUtil.isWindows()) {, +                    sleepTime = sleepTime / 10 * 10;, +                }, +++ b/common/src/main/java/io/netty/util/internal/DetectionUtil.java, +    private static final boolean IS_WINDOWS;, +, +    static {, +        String os = System.getProperty("os.name").toLowerCase();, +        // windows, +        IS_WINDOWS = os.indexOf("win") >= 0;, +    }, +, +    /**, +     * Return <code>true</code> if the JVM is running on Windows, +     */, +    public static boolean isWindows() {, +        return IS_WINDOWS;, +    }]