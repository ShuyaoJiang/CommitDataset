[+++ b/codec/src/main/java/io/netty/handler/codec/protobuf/ProtobufDecoder.java, +    private static final boolean HAS_PARSER;, +, +    static {, +        boolean hasParser = false;, +        try {, +            // MessageLite.getParsetForType() is not available until protobuf 2.5.0., +            MessageLite.class.getDeclaredMethod("getParserForType");, +            hasParser = true;, +        } catch (Throwable t) {, +            // Ignore, +        }, +, +        HAS_PARSER = hasParser;, +    }, +, +        final byte[] array;, +        final int offset;, +        final int length = msg.readableBytes();, +            array = msg.array();, +            offset = msg.arrayOffset() + msg.readerIndex();, +            array = new byte[length];, +            msg.getBytes(msg.readerIndex(), array, 0, length);, +            offset = 0;, +        }, +, +        if (extensionRegistry == null) {, +            if (HAS_PARSER) {, +                return prototype.getParserForType().parseFrom(array, offset, length);, +            } else {, +                return prototype.newBuilderForType().mergeFrom(array, offset, length).build();, +            if (HAS_PARSER) {, +                return prototype.getParserForType().parseFrom(array, offset, length, extensionRegistry);, +                return prototype.newBuilderForType().mergeFrom(array, offset, length, extensionRegistry).build();, +++ b/codec/src/main/java/io/netty/handler/codec/protobuf/ProtobufDecoder.java, +    private static final boolean HAS_PARSER;, +, +    static {, +        boolean hasParser = false;, +        try {, +            // MessageLite.getParsetForType() is not available until protobuf 2.5.0., +            MessageLite.class.getDeclaredMethod("getParserForType");, +            hasParser = true;, +        } catch (Throwable t) {, +            // Ignore, +        }, +, +        HAS_PARSER = hasParser;, +    }, +, +        final byte[] array;, +        final int offset;, +        final int length = msg.readableBytes();, +            array = msg.array();, +            offset = msg.arrayOffset() + msg.readerIndex();, +            array = new byte[length];, +            msg.getBytes(msg.readerIndex(), array, 0, length);, +            offset = 0;, +        }, +, +        if (extensionRegistry == null) {, +            if (HAS_PARSER) {, +                return prototype.getParserForType().parseFrom(array, offset, length);, +            } else {, +                return prototype.newBuilderForType().mergeFrom(array, offset, length).build();, +            if (HAS_PARSER) {, +                return prototype.getParserForType().parseFrom(array, offset, length, extensionRegistry);, +                return prototype.newBuilderForType().mergeFrom(array, offset, length, extensionRegistry).build();, +++ b/example/src/main/java/io/netty/example/worldclock/WorldClockProtocol.java, +  /**, +   * Protobuf enum {@code io.netty.example.worldclock.Continent}, +   */, +    /**, +     * <code>AFRICA = 0;</code>, +     */, +    /**, +     * <code>AMERICA = 1;</code>, +     */, +    /**, +     * <code>ANTARCTICA = 2;</code>, +     */, +    /**, +     * <code>ARCTIC = 3;</code>, +     */, +    /**, +     * <code>ASIA = 4;</code>, +     */, +    /**, +     * <code>ATLANTIC = 5;</code>, +     */, +    /**, +     * <code>AUSTRALIA = 6;</code>, +     */, +    /**, +     * <code>EUROPE = 7;</code>, +     */, +    /**, +     * <code>INDIAN = 8;</code>, +     */, +    /**]