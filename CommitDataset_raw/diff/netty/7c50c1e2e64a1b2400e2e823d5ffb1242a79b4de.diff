[+++ b/pom.xml, +            <version>14</version>, +++ b/pom.xml, +            <version>14</version>, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +public abstract class AbstractBootstrap<B extends AbstractBootstrap<?>> implements Cloneable {, +    private ChannelFactory channelFactory;, +    AbstractBootstrap() {, +        // Disallow extending from a different package., +    }, +, +    AbstractBootstrap(AbstractBootstrap<B> bootstrap) {, +        group = bootstrap.group;, +        channelFactory = bootstrap.channelFactory;, +        handler = bootstrap.handler;, +        localAddress = bootstrap.localAddress;, +        options.putAll(bootstrap.options);, +        attrs.putAll(bootstrap.attrs);, +    }, +, +    public B channelFactory(ChannelFactory channelFactory) {, +        if (channelFactory == null) {, +            throw new NullPointerException("channelFactory");, +        if (this.channelFactory != null) {, +            throw new IllegalStateException("channelFactory set already");, +        this.channelFactory = channelFactory;, +        if (channelFactory == null) {, +     * Returns a deep clone of this bootstrap which has the identical configuration.  This method is useful when making, +     * multiple {@link Channel}s with similar settings.  Please note that this method does not clone the, +     * {@link EventLoopGroup} deeply but shallowly, making the group a shared resource., +     */, +    @Override, +    @SuppressWarnings("CloneDoesntDeclareCloneNotSupportedException"), +    public abstract B clone();, +, +    /**, +    final ChannelFactory channelFactory() {, +        return channelFactory;, +        if (channelFactory != null) {, +            buf.append("channelFactory: ");, +            buf.append(channelFactory);, +++ b/pom.xml, +            <version>14</version>, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +public abstract class AbstractBootstrap<B extends AbstractBootstrap<?>> implements Cloneable {, +    private ChannelFactory channelFactory;, +    AbstractBootstrap() {, +        // Disallow extending from a different package., +    }, +, +    AbstractBootstrap(AbstractBootstrap<B> bootstrap) {, +        group = bootstrap.group;, +        channelFactory = bootstrap.channelFactory;, +        handler = bootstrap.handler;, +        localAddress = bootstrap.localAddress;, +        options.putAll(bootstrap.options);, +        attrs.putAll(bootstrap.attrs);, +    }, +, +    public B channelFactory(ChannelFactory channelFactory) {, +        if (channelFactory == null) {, +            throw new NullPointerException("channelFactory");, +        if (this.channelFactory != null) {, +            throw new IllegalStateException("channelFactory set already");, +        this.channelFactory = channelFactory;, +        if (channelFactory == null) {, +     * Returns a deep clone of this bootstrap which has the identical configuration.  This method is useful when making, +     * multiple {@link Channel}s with similar settings.  Please note that this method does not clone the, +     * {@link EventLoopGroup} deeply but shallowly, making the group a shared resource., +     */, +    @Override, +    @SuppressWarnings("CloneDoesntDeclareCloneNotSupportedException"), +    public abstract B clone();, +, +    /**, +    final ChannelFactory channelFactory() {, +        return channelFactory;, +        if (channelFactory != null) {, +            buf.append("channelFactory: ");, +            buf.append(channelFactory);, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +public final class Bootstrap extends AbstractBootstrap<Bootstrap> {, +, +    public Bootstrap() { }, +, +    public Bootstrap(Bootstrap bootstrap) {, +        super(bootstrap);, +        remoteAddress = bootstrap.remoteAddress;, +    }, +, +        Channel channel = channelFactory().newChannel();, +        final Channel channel = channelFactory().newChannel();, +    @Override, +    @SuppressWarnings("CloneDoesntCallSuperClone"), +    public Bootstrap clone() {, +        return new Bootstrap(this);, +++ b/pom.xml, +            <version>14</version>, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +public abstract class AbstractBootstrap<B extends AbstractBootstrap<?>> implements Cloneable {]