[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +    final Queue<HttpMethod> queue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +    final Queue<HttpMethod> queue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private final Queue<String> acceptEncodingQueue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +    final Queue<HttpMethod> queue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private final Queue<String> acceptEncodingQueue = QueueFactory.createQueue();, +++ b/common/src/main/java/io/netty/util/internal/QueueFactory.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(QueueFactory.class);, +    private static final boolean USE_LTQ;, +, +    static {, +        boolean useLTQ = false;, +        try {, +            if (DetectionUtil.hasUnsafe()) {, +                new LinkedTransferQueue<Object>();, +                useLTQ = true;, +            }, +            logger.debug(, +                    "No access to the Unsafe - using " +, +                    LegacyLinkedTransferQueue.class.getSimpleName() + " instead.");, +        } catch (Throwable t) {, +            logger.debug(, +                    "Failed to initialize a " + LinkedTransferQueue.class.getSimpleName() + " - " +, +                    "using " + LegacyLinkedTransferQueue.class.getSimpleName() + " instead.", t);, +        USE_LTQ = useLTQ;, +    }, +    public static <T> BlockingQueue<T> createQueue() {, +        if (USE_LTQ) {, +    private QueueFactory() {, +        // only use static methods!, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +    final Queue<HttpMethod> queue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private final Queue<String> acceptEncodingQueue = QueueFactory.createQueue();, +++ b/common/src/main/java/io/netty/util/internal/QueueFactory.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(QueueFactory.class);, +    private static final boolean USE_LTQ;, +, +    static {, +        boolean useLTQ = false;, +        try {, +            if (DetectionUtil.hasUnsafe()) {, +                new LinkedTransferQueue<Object>();, +                useLTQ = true;, +            }, +            logger.debug(, +                    "No access to the Unsafe - using " +, +                    LegacyLinkedTransferQueue.class.getSimpleName() + " instead.");, +        } catch (Throwable t) {, +            logger.debug(, +                    "Failed to initialize a " + LinkedTransferQueue.class.getSimpleName() + " - " +, +                    "using " + LegacyLinkedTransferQueue.class.getSimpleName() + " instead.", t);, +        USE_LTQ = useLTQ;, +    }, +    public static <T> BlockingQueue<T> createQueue() {, +        if (USE_LTQ) {, +    private QueueFactory() {, +        // only use static methods!, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +    private final BlockingQueue<Runnable> taskQueue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +    final Queue<HttpMethod> queue = QueueFactory.createQueue();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private final Queue<String> acceptEncodingQueue = QueueFactory.createQueue();, +++ b/common/src/main/java/io/netty/util/internal/QueueFactory.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(QueueFactory.class);, +    private static final boolean USE_LTQ;, +, +    static {, +        boolean useLTQ = false;, +        try {, +            if (DetectionUtil.hasUnsafe()) {, +                new LinkedTransferQueue<Object>();, +                useLTQ = true;, +            }, +            logger.debug(, +                    "No access to the Unsafe - using " +, +                    LegacyLinkedTransferQueue.class.getSimpleName() + " instead.");, +        } catch (Throwable t) {, +            logger.debug(, +                    "Failed to initialize a " + LinkedTransferQueue.class.getSimpleName() + " - " +, +                    "using " + LegacyLinkedTransferQueue.class.getSimpleName() + " instead.", t);, +        USE_LTQ = useLTQ;, +    }]