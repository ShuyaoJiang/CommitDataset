[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +     * Create a new EventExecutor which will later then accessible via the {@link #next()}  method. This method will be, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +     * Create a new EventExecutor which will later then accessible via the {@link #next()}  method. This method will be, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the amount of time left until the scheduled task with the closest dead line is executed., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +     * Create a new EventExecutor which will later then accessible via the {@link #next()}  method. This method will be, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the amount of time left until the scheduled task with the closest dead line is executed., +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                // Mark the write request as failure if the channel is inactive., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +     * Create a new EventExecutor which will later then accessible via the {@link #next()}  method. This method will be, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the amount of time left until the scheduled task with the closest dead line is executed., +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                // Mark the write request as failure if the channel is inactive., +++ b/transport/src/main/java/io/netty/channel/ChannelConfig.java, +     * If this value is greater than 1, an event loop might attempt to read multiple times to procure multiple messages., +     * If this value is greater than 1, an event loop might attempt to read multiple times to procure multiple messages., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which, +++ b/common/src/main/java/io/netty/util/concurrent/Future.java, +     * If the cancellation was successful it will fail the future with an {@link CancellationException}., +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +     * Create a new EventExecutor which will later then accessible via the {@link #next()}  method. This method will be, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the amount of time left until the scheduled task with the closest dead line is executed., +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                // Mark the write request as failure if the channel is inactive., +++ b/transport/src/main/java/io/netty/channel/ChannelConfig.java, +     * If this value is greater than 1, an event loop might attempt to read multiple times to procure multiple messages., +     * If this value is greater than 1, an event loop might attempt to read multiple times to procure multiple messages., +++ b/transport/src/main/java/io/netty/channel/ChannelFlushPromiseNotifier.java, +     * so not receive anymore notification., +     * so not receive anymore notification., +     * so not receive anymore notification., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, + * Skeletal {@link ByteBufAllocator} implementation to extend., +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one underlying, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +     * Creates a new big-endian direct buffer with reasonably small initial capacity, which]