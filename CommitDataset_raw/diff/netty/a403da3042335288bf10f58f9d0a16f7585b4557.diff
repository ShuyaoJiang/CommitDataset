[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +                ChannelHandlerContext ctx, HttpObject msg, MessageList<Object> out) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +                ChannelHandlerContext ctx, HttpObject msg, MessageList<Object> out) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.channel.MessageList;, +import io.netty.handler.codec.MessageToMessageEncoder;, +public abstract class HttpObjectEncoder<H extends HttpMessage> extends MessageToMessageEncoder<HttpObject> {, +    private static final ByteBuf ZERO_CRLF_CRLF_BUF =, +            unreleasableBuffer(directBuffer(5, 5).writeBytes(ZERO_CRLF).writeBytes(CRLF));, +    protected void encode(ChannelHandlerContext ctx, HttpObject msg, MessageList<Object> out) throws Exception {, +            ByteBuf buf = ctx.alloc().buffer();, +            encodeInitialLine(buf, m);, +            encodeHeaders(buf, m.headers());, +            buf.writeBytes(CRLF);, +            out.add(buf);, +                    out.add(content.retain());, +                    byte[] length = Integer.toHexString(contentLength).getBytes(CharsetUtil.US_ASCII);, +                    ByteBuf buf = ctx.alloc().buffer(length.length + 2);, +                    buf.writeBytes(length);, +                    buf.writeBytes(CRLF);, +                    out.add(buf);, +                    out.add(content.retain());, +                    out.add(wrappedBuffer(CRLF));, +                    HttpHeaders headers = ((LastHttpContent) chunk).trailingHeaders();, +                    if (headers.isEmpty()) {, +                        out.add(ZERO_CRLF_CRLF_BUF.duplicate());, +                    } else {, +                        ByteBuf buf = ctx.alloc().buffer();, +                        buf.writeBytes(ZERO_CRLF);, +                        encodeHeaders(buf, headers);, +                        buf.writeBytes(CRLF);, +                        out.add(buf);, +                    }, +    private static void encodeHeaders(ByteBuf buf, HttpHeaders headers) {, +        for (Map.Entry<String, String> h: headers) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +                ChannelHandlerContext ctx, HttpObject msg, MessageList<Object> out) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.channel.MessageList;, +import io.netty.handler.codec.MessageToMessageEncoder;, +public abstract class HttpObjectEncoder<H extends HttpMessage> extends MessageToMessageEncoder<HttpObject> {, +    private static final ByteBuf ZERO_CRLF_CRLF_BUF =, +            unreleasableBuffer(directBuffer(5, 5).writeBytes(ZERO_CRLF).writeBytes(CRLF));, +    protected void encode(ChannelHandlerContext ctx, HttpObject msg, MessageList<Object> out) throws Exception {, +            ByteBuf buf = ctx.alloc().buffer();, +            encodeInitialLine(buf, m);, +            encodeHeaders(buf, m.headers());, +            buf.writeBytes(CRLF);, +            out.add(buf);, +                    out.add(content.retain());, +                    byte[] length = Integer.toHexString(contentLength).getBytes(CharsetUtil.US_ASCII);, +                    ByteBuf buf = ctx.alloc().buffer(length.length + 2);, +                    buf.writeBytes(length);, +                    buf.writeBytes(CRLF);, +                    out.add(buf);, +                    out.add(content.retain());, +                    out.add(wrappedBuffer(CRLF));, +                    HttpHeaders headers = ((LastHttpContent) chunk).trailingHeaders();, +                    if (headers.isEmpty()) {, +                        out.add(ZERO_CRLF_CRLF_BUF.duplicate());, +                    } else {, +                        ByteBuf buf = ctx.alloc().buffer();, +                        buf.writeBytes(ZERO_CRLF);, +                        encodeHeaders(buf, headers);, +                        buf.writeBytes(CRLF);, +                        out.add(buf);, +                    }, +    private static void encodeHeaders(ByteBuf buf, HttpHeaders headers) {, +        for (Map.Entry<String, String> h: headers) {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker00Test.java, +        ch2.writeInbound(ch.readOutbound());, +        ch2.writeInbound(ch.readOutbound());]