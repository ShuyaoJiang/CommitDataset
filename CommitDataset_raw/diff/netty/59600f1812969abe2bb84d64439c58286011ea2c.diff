[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * @see #setKeepAlive(HttpHeaders, HttpVersion, boolean), +        setKeepAlive(message.headers(), message.protocolVersion(), keepAlive);, +    }, +, +    /**, +     * Sets the value of the {@code "Connection"} header depending on the, +     * protocol version of the specified message. This getMethod sets or removes, +     * the {@code "Connection"} header depending on what the default keep alive, +     * mode of the message's protocol version is, as specified by, +     * {@link HttpVersion#isKeepAliveDefault()}., +     * <ul>, +     * <li>If the connection is kept alive by default:, +     *     <ul>, +     *     <li>set to {@code "close"} if {@code keepAlive} is {@code false}.</li>, +     *     <li>remove otherwise.</li>, +     *     </ul></li>, +     * <li>If the connection is closed by default:, +     *     <ul>, +     *     <li>set to {@code "keep-alive"} if {@code keepAlive} is {@code true}.</li>, +     *     <li>remove otherwise.</li>, +     *     </ul></li>, +     * </ul>, +     */, +    public static void setKeepAlive(HttpHeaders h, HttpVersion httpVersion, boolean keepAlive) {, +        if (httpVersion.isKeepAliveDefault()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * @see #setKeepAlive(HttpHeaders, HttpVersion, boolean), +        setKeepAlive(message.headers(), message.protocolVersion(), keepAlive);, +    }, +, +    /**, +     * Sets the value of the {@code "Connection"} header depending on the, +     * protocol version of the specified message. This getMethod sets or removes, +     * the {@code "Connection"} header depending on what the default keep alive, +     * mode of the message's protocol version is, as specified by, +     * {@link HttpVersion#isKeepAliveDefault()}., +     * <ul>, +     * <li>If the connection is kept alive by default:, +     *     <ul>, +     *     <li>set to {@code "close"} if {@code keepAlive} is {@code false}.</li>, +     *     <li>remove otherwise.</li>, +     *     </ul></li>, +     * <li>If the connection is closed by default:, +     *     <ul>, +     *     <li>set to {@code "keep-alive"} if {@code keepAlive} is {@code true}.</li>, +     *     <li>remove otherwise.</li>, +     *     </ul></li>, +     * </ul>, +     */, +    public static void setKeepAlive(HttpHeaders h, HttpVersion httpVersion, boolean keepAlive) {, +        if (httpVersion.isKeepAliveDefault()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpConversionUtil.java, +     * Translate and add HTTP/2 headers to HTTP/1.x headers., +     * @param streamId The stream associated with {@code sourceHeaders}., +     * @param sourceHeaders The HTTP/2 headers to convert., +     * @param destinationMessage The object which will contain the resulting HTTP/1.x headers., +     * @throws Http2Exception If not all HTTP/2 headers can be translated to HTTP/1.x., +     * @see #addHttp2ToHttpHeaders(int, Http2Headers, HttpHeaders, HttpVersion, boolean, boolean), +        addHttp2ToHttpHeaders(streamId, sourceHeaders,, +                addToTrailer ? destinationMessage.trailingHeaders() : destinationMessage.headers(),, +                destinationMessage.protocolVersion(), addToTrailer, destinationMessage instanceof HttpRequest);, +    }, +, +    /**, +     * Translate and add HTTP/2 headers to HTTP/1.x headers., +     *, +     * @param streamId The stream associated with {@code sourceHeaders}., +     * @param inputHeaders The HTTP/2 headers to convert., +     * @param outputHeaders The object which will contain the resulting HTTP/1.x headers.., +     * @param httpVersion What HTTP/1.x version {@code outputHeaders} should be treated as when doing the conversion., +     * @param isTrailer {@code true} if {@code outputHeaders} should be treated as trailing headers., +     * {@code false} otherwise., +     * @param isReqeust {@code true} if the {@code outputHeaders} will be used in a request message., +     * {@code false} for response message., +     * @throws Http2Exception If not all HTTP/2 headers can be translated to HTTP/1.x., +     */, +    public static void addHttp2ToHttpHeaders(int streamId, Http2Headers inputHeaders, HttpHeaders outputHeaders,, +            HttpVersion httpVersion, boolean isTrailer, boolean isRequest) throws Http2Exception {, +        Http2ToHttpHeaderTranslator translator = new Http2ToHttpHeaderTranslator(streamId, outputHeaders, isRequest);, +            for (Entry<ByteString, ByteString> entry : inputHeaders) {, +        outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);, +        outputHeaders.remove(HttpHeaderNames.TRAILER);, +        if (!isTrailer) {, +            outputHeaders.setInt(ExtensionHeaderNames.STREAM_ID.text(), streamId);, +            HttpUtil.setKeepAlive(outputHeaders, httpVersion, true);]