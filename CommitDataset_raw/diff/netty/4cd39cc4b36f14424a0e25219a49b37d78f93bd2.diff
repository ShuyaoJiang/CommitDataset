[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolveContext.java, +import java.util.ArrayList;, +    List<InetAddress> filterResults(List<InetAddress> unfiltered) {, +        final Class<? extends InetAddress> inetAddressType = parent.preferredAddressType().addressType();, +        final int size = unfiltered.size();, +        int numExpected = 0;, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                numExpected++;, +            }, +        }, +        if (numExpected == size || numExpected == 0) {, +            // If all the results are the preferred type, or none of them are, then we don't need to do any filtering., +            return unfiltered;, +        }, +        List<InetAddress> filtered = new ArrayList<InetAddress>(numExpected);, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                filtered.add(address);, +            }, +        }, +        return filtered;, +    }, +, +    @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolveContext.java, +import java.util.ArrayList;, +    List<InetAddress> filterResults(List<InetAddress> unfiltered) {, +        final Class<? extends InetAddress> inetAddressType = parent.preferredAddressType().addressType();, +        final int size = unfiltered.size();, +        int numExpected = 0;, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                numExpected++;, +            }, +        }, +        if (numExpected == size || numExpected == 0) {, +            // If all the results are the preferred type, or none of them are, then we don't need to do any filtering., +            return unfiltered;, +        }, +        List<InetAddress> filtered = new ArrayList<InetAddress>(numExpected);, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                filtered.add(address);, +            }, +        }, +        return filtered;, +    }, +, +    @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsRecordResolveContext.java, +    List<DnsRecord> filterResults(List<DnsRecord> unfiltered) {, +        return unfiltered;, +    }, +, +    @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolveContext.java, +import java.util.ArrayList;, +    List<InetAddress> filterResults(List<InetAddress> unfiltered) {, +        final Class<? extends InetAddress> inetAddressType = parent.preferredAddressType().addressType();, +        final int size = unfiltered.size();, +        int numExpected = 0;, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                numExpected++;, +            }, +        }, +        if (numExpected == size || numExpected == 0) {, +            // If all the results are the preferred type, or none of them are, then we don't need to do any filtering., +            return unfiltered;, +        }, +        List<InetAddress> filtered = new ArrayList<InetAddress>(numExpected);, +        for (int i = 0; i < size; i++) {, +            InetAddress address = unfiltered.get(i);, +            if (inetAddressType.isInstance(address)) {, +                filtered.add(address);, +            }, +        }, +        return filtered;, +    }, +, +    @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsRecordResolveContext.java, +    List<DnsRecord> filterResults(List<DnsRecord> unfiltered) {, +        return unfiltered;, +    }, +, +    @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java, +import io.netty.util.NetUtil;, +     * Returns a filtered list of results which should be the final result of DNS resolution. This must take into, +     * account JDK semantics such as {@link NetUtil#isIpV6AddressesPreferred()}., +     */, +    abstract List<T> filterResults(List<T> unfiltered);, +]