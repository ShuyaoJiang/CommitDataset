[+++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/example/pom.xml, +  <properties>, +    <skipJapicmp>true</skipJapicmp>, +  </properties>, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/example/pom.xml, +  <properties>, +    <skipJapicmp>true</skipJapicmp>, +  </properties>, +++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws Exception {, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/example/pom.xml, +  <properties>, +    <skipJapicmp>true</skipJapicmp>, +  </properties>, +++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws Exception {, +++ b/microbench/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/example/pom.xml, +  <properties>, +    <skipJapicmp>true</skipJapicmp>, +  </properties>, +++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws Exception {, +++ b/microbench/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/pom.xml, +    <skipJapicmp>false</skipJapicmp>, +        <groupId>com.github.siom79.japicmp</groupId>, +        <artifactId>japicmp-maven-plugin</artifactId>, +        <version>0.13.1</version>, +        <configuration>, +          <parameter>, +            <breakBuildOnBinaryIncompatibleModifications>true</breakBuildOnBinaryIncompatibleModifications>, +            <breakBuildOnSourceIncompatibleModifications>true</breakBuildOnSourceIncompatibleModifications>, +            <oldVersionPattern>\d+\.\d+\.\d+\.Final</oldVersionPattern>, +            <ignoreMissingClassesByRegularExpressions>, +              <!-- ignore everything which is not part of netty itself as the plugin can not handle optional dependencies -->, +              <ignoreMissingClassesByRegularExpression>^(?!io\.netty\.).*</ignoreMissingClassesByRegularExpression>, +              <ignoreMissingClassesByRegularExpression>^io\.netty\.internal\.tcnative\..*</ignoreMissingClassesByRegularExpression>, +            </ignoreMissingClassesByRegularExpressions>, +            <excludes>, +              <exclude>@io.netty.util.internal.UnstableApi</exclude>, +            </excludes>, +          </parameter>, +          <skip>${skipJapicmp}</skip>, +        </configuration>, +        <executions>, +          <execution>, +            <phase>verify</phase>, +            <goals>, +              <goal>cmp</goal>, +            </goals>, +          </execution>, +        </executions>, +      </plugin>, +      <plugin>, +++ b/all/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/codec-http/pom.xml, +++ b/example/pom.xml, +  <properties>, +    <skipJapicmp>true</skipJapicmp>, +  </properties>, +++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws Exception {, +++ b/microbench/pom.xml, +    <skipJapicmp>true</skipJapicmp>, +++ b/pom.xml, +    <skipJapicmp>false</skipJapicmp>, +        <groupId>com.github.siom79.japicmp</groupId>, +        <artifactId>japicmp-maven-plugin</artifactId>, +        <version>0.13.1</version>, +        <configuration>, +          <parameter>, +            <breakBuildOnBinaryIncompatibleModifications>true</breakBuildOnBinaryIncompatibleModifications>, +            <breakBuildOnSourceIncompatibleModifications>true</breakBuildOnSourceIncompatibleModifications>, +            <oldVersionPattern>\d+\.\d+\.\d+\.Final</oldVersionPattern>, +            <ignoreMissingClassesByRegularExpressions>, +              <!-- ignore everything which is not part of netty itself as the plugin can not handle optional dependencies -->, +              <ignoreMissingClassesByRegularExpression>^(?!io\.netty\.).*</ignoreMissingClassesByRegularExpression>, +              <ignoreMissingClassesByRegularExpression>^io\.netty\.internal\.tcnative\..*</ignoreMissingClassesByRegularExpression>, +            </ignoreMissingClassesByRegularExpressions>]