[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                MqttMessage message = MqttMessageFactory.newMessage(, +                        mqttFixedHeader, variableHeader, decodedPayload.value);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                MqttMessage message = MqttMessageFactory.newMessage(, +                        mqttFixedHeader, variableHeader, decodedPayload.value);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthRequestDecoder.java, +                if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);, +                int fieldLength = byteBuf.readByte();, +                int fieldLength = byteBuf.readByte();, +                String password = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);, +                out.add(new SocksAuthRequest(username, password));, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                MqttMessage message = MqttMessageFactory.newMessage(, +                        mqttFixedHeader, variableHeader, decodedPayload.value);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthRequestDecoder.java, +                if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);, +                int fieldLength = byteBuf.readByte();, +                int fieldLength = byteBuf.readByte();, +                String password = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);, +                out.add(new SocksAuthRequest(username, password));, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthResponseDecoder.java, +                if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_RESPONSE);, +                SocksAuthStatus authStatus = SocksAuthStatus.valueOf(byteBuf.readByte());, +                out.add(new SocksAuthResponse(authStatus));, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                MqttMessage message = MqttMessageFactory.newMessage(, +                        mqttFixedHeader, variableHeader, decodedPayload.value);, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthRequestDecoder.java, +                if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);, +                int fieldLength = byteBuf.readByte();, +                int fieldLength = byteBuf.readByte();, +                String password = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);, +                out.add(new SocksAuthRequest(username, password));, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksAuthResponseDecoder.java, +                if (byteBuf.readByte() != SocksSubnegotiationVersion.AUTH_PASSWORD.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_RESPONSE);, +                SocksAuthStatus authStatus = SocksAuthStatus.valueOf(byteBuf.readByte());, +                out.add(new SocksAuthResponse(authStatus));, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequestDecoder.java, +                if (byteBuf.readByte() != SocksProtocolVersion.SOCKS5.byteValue()) {, +                    out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);, +                byteBuf.skipBytes(1); // reserved, +                        String host = SocksCommonUtils.intToIp(byteBuf.readInt());, +                        int port = byteBuf.readUnsignedShort();, +                        out.add(new SocksCmdRequest(cmdType, addressType, host, port));, +                        int fieldLength = byteBuf.readByte();, +                        String host = SocksCommonUtils.readUsAscii(byteBuf, fieldLength);, +                        int port = byteBuf.readUnsignedShort();, +                        out.add(new SocksCmdRequest(cmdType, addressType, host, port));, +                        String host = SocksCommonUtils.ipv6toStr(bytes);, +                        int port = byteBuf.readUnsignedShort();, +                        out.add(new SocksCmdRequest(cmdType, addressType, host, port));, +                    case UNKNOWN: {, +                        out.add(SocksCommonUtils.UNKNOWN_SOCKS_REQUEST);, +                    default: {, +                        throw new Error();, +                    }, +                }, +                break;, +            }, +            default: {, +                throw new Error();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                final CharSequence acceptEncoding;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java]