[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include "netty_unix_util.h", +static jstring nettyPackagePrefixJString = NULL;, +static const char* nettyPackagePrefix = NULL;, +static char* nettyClassName = NULL;, +        // Load the prefix to use when looking for Netty classes, +        jclass systemCls = (*env)->FindClass(env, "java/lang/System");, +        if (systemCls == NULL) {, +        jmethodID getPropertyMethod = (*env)->GetStaticMethodID(env, systemCls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");, +        if (getPropertyMethod == NULL) {, +        jstring propertyName = (*env)->NewStringUTF(env, "io.netty.native.epoll.nettyPackagePrefix");, +        nettyPackagePrefixJString = (*env)->CallStaticObjectMethod(env, systemCls, getPropertyMethod, propertyName);, +        if (nettyPackagePrefixJString != NULL) {, +            nettyPackagePrefix = (*env)->GetStringUTFChars(env, nettyPackagePrefixJString, 0);, +        }, +, +        if (netty_unix_errors_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +            return JNI_ERR;, +        }, +        if (netty_unix_filedescriptor_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +            return JNI_ERR;, +        }, +        if (netty_unix_socket_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +        nettyClassName = netty_unix_util_prepend(nettyPackagePrefix, "io/netty/channel/DefaultFileRegion");, +        jclass fileRegionCls = (*env)->FindClass(env, nettyClassName);, +        free(nettyClassName);, +        nettyClassName = NULL;, +        nettyClassName = netty_unix_util_prepend(nettyPackagePrefix, "io/netty/channel/epoll/NativeDatagramPacketArray$NativeDatagramPacket");, +        jclass nativeDatagramPacketCls = (*env)->FindClass(env, nettyClassName);, +        free(nettyClassName);, +        nettyClassName = NULL;, +        if (nettyPackagePrefixJString != NULL) {, +            (*env)->ReleaseStringUTFChars(env, nettyPackagePrefixJString, nettyPackagePrefix);, +            nettyPackagePrefix = NULL;, +            nettyPackagePrefixJString = NULL;, +        }, +, +        if (nettyPackagePrefixJString != NULL) {, +            (*env)->ReleaseStringUTFChars(env, nettyPackagePrefixJString, nettyPackagePrefix);, +            nettyPackagePrefix = NULL;, +            nettyPackagePrefixJString = NULL;, +        }, +        if (nettyClassName != NULL) {, +            free(nettyClassName);, +            nettyClassName = NULL;, +        }, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include "netty_unix_util.h", +static jstring nettyPackagePrefixJString = NULL;, +static const char* nettyPackagePrefix = NULL;, +static char* nettyClassName = NULL;, +        // Load the prefix to use when looking for Netty classes, +        jclass systemCls = (*env)->FindClass(env, "java/lang/System");, +        if (systemCls == NULL) {, +        jmethodID getPropertyMethod = (*env)->GetStaticMethodID(env, systemCls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");, +        if (getPropertyMethod == NULL) {, +        jstring propertyName = (*env)->NewStringUTF(env, "io.netty.native.epoll.nettyPackagePrefix");, +        nettyPackagePrefixJString = (*env)->CallStaticObjectMethod(env, systemCls, getPropertyMethod, propertyName);, +        if (nettyPackagePrefixJString != NULL) {, +            nettyPackagePrefix = (*env)->GetStringUTFChars(env, nettyPackagePrefixJString, 0);, +        }, +, +        if (netty_unix_errors_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +            return JNI_ERR;, +        }, +        if (netty_unix_filedescriptor_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +            return JNI_ERR;, +        }, +        if (netty_unix_socket_JNI_OnLoad(env, nettyPackagePrefix) == JNI_ERR) {, +        nettyClassName = netty_unix_util_prepend(nettyPackagePrefix, "io/netty/channel/DefaultFileRegion");, +        jclass fileRegionCls = (*env)->FindClass(env, nettyClassName);, +        free(nettyClassName);, +        nettyClassName = NULL;, +        nettyClassName = netty_unix_util_prepend(nettyPackagePrefix, "io/netty/channel/epoll/NativeDatagramPacketArray$NativeDatagramPacket");, +        jclass nativeDatagramPacketCls = (*env)->FindClass(env, nettyClassName);, +        free(nettyClassName);, +        nettyClassName = NULL;, +        if (nettyPackagePrefixJString != NULL) {, +            (*env)->ReleaseStringUTFChars(env, nettyPackagePrefixJString, nettyPackagePrefix);, +            nettyPackagePrefix = NULL;, +            nettyPackagePrefixJString = NULL;, +        }, +, +        if (nettyPackagePrefixJString != NULL) {, +            (*env)->ReleaseStringUTFChars(env, nettyPackagePrefixJString, nettyPackagePrefix);, +            nettyPackagePrefix = NULL;, +            nettyPackagePrefixJString = NULL;, +        }, +        if (nettyClassName != NULL) {, +            free(nettyClassName);, +            nettyClassName = NULL;, +        }, +++ b/transport-native-epoll/src/main/c/io_netty_channel_unix_Errors.c, +#include "netty_unix_util.h", +static char* nettyClassName = NULL;, +    // error may be negative because some functions return negative values. we should make sure it is always, +    // positive when passing to standard library functions., +    return netty_unix_util_prepend(msg, strerror(error < 0 ? -error : error));, +jint netty_unix_errors_JNI_OnLoad(JNIEnv* env, const char* nettyPackagePrefix) {, +    nettyClassName = netty_unix_util_prepend(nettyPackagePrefix, "io/netty/channel/ChannelException");]