[+++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +            return ctx.hasNextInboundMessageBuffer();, +            return ctx.hasNextOutboundMessageBuffer();, +            return ctx.hasNextInboundByteBuffer();, +            return ctx.hasNextOutboundByteBuffer();, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +            return ctx.hasNextInboundMessageBuffer();, +            return ctx.hasNextOutboundMessageBuffer();, +            return ctx.hasNextInboundByteBuffer();, +            return ctx.hasNextOutboundByteBuffer();, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +    boolean hasNextInboundByteBuffer();, +    boolean hasNextInboundMessageBuffer();, +    boolean hasNextOutboundByteBuffer();, +    boolean hasNextOutboundMessageBuffer();, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +            return ctx.hasNextInboundMessageBuffer();, +            return ctx.hasNextOutboundMessageBuffer();, +            return ctx.hasNextInboundByteBuffer();, +            return ctx.hasNextOutboundByteBuffer();, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +    boolean hasNextInboundByteBuffer();, +    boolean hasNextInboundMessageBuffer();, +    boolean hasNextOutboundByteBuffer();, +    boolean hasNextOutboundMessageBuffer();, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +    public boolean hasNextInboundByteBuffer() {, +        return DefaultChannelPipeline.hasNextInboundByteBuffer(next);, +    }, +, +    @Override, +    public boolean hasNextInboundMessageBuffer() {, +        return DefaultChannelPipeline.hasNextInboundMessageBuffer(next);, +    }, +, +    @Override, +    public boolean hasNextOutboundByteBuffer() {, +        return pipeline.hasNextOutboundByteBuffer(prev);, +    }, +, +    @Override, +    public boolean hasNextOutboundMessageBuffer() {, +        return pipeline.hasNextOutboundMessageBuffer(prev);, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +            return ctx.hasNextInboundMessageBuffer();, +            return ctx.hasNextOutboundMessageBuffer();, +            return ctx.hasNextInboundByteBuffer();, +            return ctx.hasNextOutboundByteBuffer();, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +    boolean hasNextInboundByteBuffer();, +    boolean hasNextInboundMessageBuffer();, +    boolean hasNextOutboundByteBuffer();, +    boolean hasNextOutboundMessageBuffer();, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +    public boolean hasNextInboundByteBuffer() {, +        return DefaultChannelPipeline.hasNextInboundByteBuffer(next);, +    }, +, +    @Override, +    public boolean hasNextInboundMessageBuffer() {, +        return DefaultChannelPipeline.hasNextInboundMessageBuffer(next);, +    }, +, +    @Override, +    public boolean hasNextOutboundByteBuffer() {, +        return pipeline.hasNextOutboundByteBuffer(prev);, +    }, +, +    @Override, +    public boolean hasNextOutboundMessageBuffer() {, +        return pipeline.hasNextOutboundMessageBuffer(prev);, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    static boolean hasNextInboundByteBuffer(DefaultChannelHandlerContext ctx) {, +        for (;;) {, +            if (ctx == null) {, +                return false;, +            }, +            ChannelBufferHolder<Object> in = ctx.in;, +            if (in != null && !in.isBypass() && in.hasByteBuffer()) {, +                return true;, +            }, +            ctx = ctx.next;, +        }, +    }, +, +    static boolean hasNextInboundMessageBuffer(DefaultChannelHandlerContext ctx) {, +        for (;;) {, +            if (ctx == null) {, +                return false;, +            }, +            ChannelBufferHolder<Object> in = ctx.inbound();, +            if (in != null && !in.isBypass() && in.hasMessageBuffer()) {, +                return true;, +            }]