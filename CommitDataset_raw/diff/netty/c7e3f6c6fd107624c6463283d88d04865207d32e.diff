[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +        CharSequence protocol();, +        Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest);, +        Set<CharSequence> connectionParts = new LinkedHashSet<CharSequence>(2);, +        for (CharSequence part : connectionParts) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +        CharSequence protocol();, +        Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest);, +        Set<CharSequence> connectionParts = new LinkedHashSet<CharSequence>(2);, +        for (CharSequence part : connectionParts) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderValues.java, +     * {@code "0"}, +     */, +    public static final AsciiString ZERO = new AsciiString("0");, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +        CharSequence protocol();, +        Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest);, +        Set<CharSequence> connectionParts = new LinkedHashSet<CharSequence>(2);, +        for (CharSequence part : connectionParts) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderValues.java, +     * {@code "0"}, +     */, +    public static final AsciiString ZERO = new AsciiString("0");, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +import static io.netty.util.AsciiString.containsContentEqualsIgnoreCase;, +import static io.netty.util.AsciiString.containsAllContentEqualsIgnoreCase;, +, +import io.netty.buffer.Unpooled;, +        Collection<CharSequence> requiredUpgradeHeaders();, +        UpgradeCodec newUpgradeCodec(CharSequence protocol);, +        private final CharSequence protocol;, +        private UpgradeEvent(CharSequence protocol, FullHttpRequest upgradeRequest) {, +        public CharSequence protocol() {, +        final List<CharSequence> requestedProtocols = splitHeader(request.headers().get(HttpHeaderNames.UPGRADE));, +        CharSequence upgradeProtocol = null;, +            final CharSequence p = requestedProtocols.get(i);, +        Collection<CharSequence> requiredHeaders = upgradeCodec.requiredUpgradeHeaders();, +        List<CharSequence> values = splitHeader(connectionHeader);, +        if (!containsContentEqualsIgnoreCase(values, HttpHeaderNames.UPGRADE) ||, +            !containsAllContentEqualsIgnoreCase(values, requiredHeaders)) {, +    private static FullHttpResponse createUpgradeResponse(CharSequence upgradeProtocol) {, +        DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, SWITCHING_PROTOCOLS,, +                Unpooled.EMPTY_BUFFER, false);, +        res.headers().add(HttpHeaderNames.CONTENT_LENGTH, HttpHeaderValues.ZERO);, +    private static List<CharSequence> splitHeader(CharSequence header) {, +        final List<CharSequence> protocols = new ArrayList<CharSequence>(4);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +        CharSequence protocol();, +        Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest);, +        Set<CharSequence> connectionParts = new LinkedHashSet<CharSequence>(2);, +        for (CharSequence part : connectionParts) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderValues.java, +     * {@code "0"}, +     */, +    public static final AsciiString ZERO = new AsciiString("0");, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +import static io.netty.util.AsciiString.containsContentEqualsIgnoreCase;, +import static io.netty.util.AsciiString.containsAllContentEqualsIgnoreCase;, +, +import io.netty.buffer.Unpooled;, +        Collection<CharSequence> requiredUpgradeHeaders();, +        UpgradeCodec newUpgradeCodec(CharSequence protocol);, +        private final CharSequence protocol;, +        private UpgradeEvent(CharSequence protocol, FullHttpRequest upgradeRequest) {, +        public CharSequence protocol() {, +        final List<CharSequence> requestedProtocols = splitHeader(request.headers().get(HttpHeaderNames.UPGRADE));, +        CharSequence upgradeProtocol = null;, +            final CharSequence p = requestedProtocols.get(i);, +        Collection<CharSequence> requiredHeaders = upgradeCodec.requiredUpgradeHeaders();, +        List<CharSequence> values = splitHeader(connectionHeader);, +        if (!containsContentEqualsIgnoreCase(values, HttpHeaderNames.UPGRADE) ||, +            !containsAllContentEqualsIgnoreCase(values, requiredHeaders)) {, +    private static FullHttpResponse createUpgradeResponse(CharSequence upgradeProtocol) {, +        DefaultFullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, SWITCHING_PROTOCOLS,, +                Unpooled.EMPTY_BUFFER, false);, +        res.headers().add(HttpHeaderNames.CONTENT_LENGTH, HttpHeaderValues.ZERO);, +    private static List<CharSequence> splitHeader(CharSequence header) {, +        final List<CharSequence> protocols = new ArrayList<CharSequence>(4);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ClientUpgradeCodec.java, +    private static final List<CharSequence> UPGRADE_HEADERS = Collections.singletonList(HTTP_UPGRADE_SETTINGS_HEADER);, +    public CharSequence protocol() {, +    public Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx,, +        CharSequence settingsValue = getSettingsHeaderValue(ctx);, +    private CharSequence getSettingsHeaderValue(ChannelHandlerContext ctx) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +        CharSequence protocol();, +        Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest);, +        Set<CharSequence> connectionParts = new LinkedHashSet<CharSequence>(2);, +        for (CharSequence part : connectionParts) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderValues.java, +     * {@code "0"}, +     */, +    public static final AsciiString ZERO = new AsciiString("0");, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +import static io.netty.util.AsciiString.containsContentEqualsIgnoreCase;, +import static io.netty.util.AsciiString.containsAllContentEqualsIgnoreCase;]