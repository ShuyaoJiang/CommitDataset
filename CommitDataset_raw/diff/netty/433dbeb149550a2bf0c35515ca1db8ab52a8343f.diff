[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +            if (!query(hostname, recordTypes[i], nameServerAddressStream.duplicate(), promise)) {, +        query(hostname, recordTypes[end], nameServerAddressStream, promise);, +                       final Promise<T> promise) {, +                parent.dnsQueryLifecycleObserverFactory().newDnsQueryLifecycleObserver(question), promise);, +                       final Promise<T> promise) {, +                               promise);, +                    if (future.isSuccess()) {, +                        queryLifecycleObserver.queryFailed(future.cause());, +                        query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                                       promise);, +                      queryLifecycleObserver.queryNoAnswer(code), promise);, +                          queryLifecycleObserver.queryRedirected(unmodifiableList(nameServers)), promise);, +                            final Promise<T> promise) {, +                finishResolve(promise);, +                    query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                          promise);, +            if (!triedCNAME) {, +                query(hostname, DnsRecordType.CNAME, getNameServers(hostname), promise);, +        finishResolve(promise);, +    private void finishResolve(Promise<T> promise) {, +        final UnknownHostException cause = new UnknownHostException(buf.toString());, +, +        resolveCache.cache(hostname, additionals, cause, parent.ch.eventLoop());, +        promise.tryFailure(cause);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +                          Promise<T> promise) {, +        query(dnsServerAddressStream, 0, question, promise);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +            if (!query(hostname, recordTypes[i], nameServerAddressStream.duplicate(), promise)) {, +        query(hostname, recordTypes[end], nameServerAddressStream, promise);, +                       final Promise<T> promise) {, +                parent.dnsQueryLifecycleObserverFactory().newDnsQueryLifecycleObserver(question), promise);, +                       final Promise<T> promise) {, +                               promise);, +                    if (future.isSuccess()) {, +                        queryLifecycleObserver.queryFailed(future.cause());, +                        query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                                       promise);, +                      queryLifecycleObserver.queryNoAnswer(code), promise);, +                          queryLifecycleObserver.queryRedirected(unmodifiableList(nameServers)), promise);, +                            final Promise<T> promise) {, +                finishResolve(promise);, +                    query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                          promise);, +            if (!triedCNAME) {, +                query(hostname, DnsRecordType.CNAME, getNameServers(hostname), promise);, +        finishResolve(promise);, +    private void finishResolve(Promise<T> promise) {, +        final UnknownHostException cause = new UnknownHostException(buf.toString());, +, +        resolveCache.cache(hostname, additionals, cause, parent.ch.eventLoop());, +        promise.tryFailure(cause);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +                          Promise<T> promise) {, +        query(dnsServerAddressStream, 0, question, promise);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverException.java, +public final class DnsNameResolverException extends RuntimeException {, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCache.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +            if (!query(hostname, recordTypes[i], nameServerAddressStream.duplicate(), promise)) {, +        query(hostname, recordTypes[end], nameServerAddressStream, promise);, +                       final Promise<T> promise) {, +                parent.dnsQueryLifecycleObserverFactory().newDnsQueryLifecycleObserver(question), promise);, +                       final Promise<T> promise) {, +                               promise);, +                    if (future.isSuccess()) {, +                        queryLifecycleObserver.queryFailed(future.cause());, +                        query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                                       promise);, +                      queryLifecycleObserver.queryNoAnswer(code), promise);, +                          queryLifecycleObserver.queryRedirected(unmodifiableList(nameServers)), promise);, +                            final Promise<T> promise) {, +                finishResolve(promise);, +                    query(nameServerAddrStream, nameServerAddrStreamIndex + 1, question, promise);, +                          promise);, +            if (!triedCNAME) {, +                query(hostname, DnsRecordType.CNAME, getNameServers(hostname), promise);, +        finishResolve(promise);, +    private void finishResolve(Promise<T> promise) {, +        final UnknownHostException cause = new UnknownHostException(buf.toString());, +, +        resolveCache.cache(hostname, additionals, cause, parent.ch.eventLoop());, +        promise.tryFailure(cause);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +            query(stream, 0, cnameQuestion, queryLifecycleObserver.queryCNAMEd(cnameQuestion), promise);, +                          Promise<T> promise) {, +        query(dnsServerAddressStream, 0, question, promise);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverException.java, +public final class DnsNameResolverException extends RuntimeException {]