[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.util.internal.AppendableCharSequence;, +    private final AppendableCharSequence sb = new AppendableCharSequence(128);, +            AppendableCharSequence line = readLine(buffer, maxInitialLineLength);, +        AppendableCharSequence line = readHeader(buffer);, +        AppendableCharSequence line = readHeader(buffer);, +    private AppendableCharSequence readHeader(ByteBuf buffer) {, +        AppendableCharSequence sb = this.sb;, +        sb.reset();, +    private AppendableCharSequence readLine(ByteBuf buffer, int maxLineLength) {, +        AppendableCharSequence sb = this.sb;, +        sb.reset();, +    private static String[] splitInitialLine(AppendableCharSequence sb) {, +    private static String[] splitHeader(AppendableCharSequence sb) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.util.internal.AppendableCharSequence;, +    private final AppendableCharSequence sb = new AppendableCharSequence(128);, +            AppendableCharSequence line = readLine(buffer, maxInitialLineLength);, +        AppendableCharSequence line = readHeader(buffer);, +        AppendableCharSequence line = readHeader(buffer);, +    private AppendableCharSequence readHeader(ByteBuf buffer) {, +        AppendableCharSequence sb = this.sb;, +        sb.reset();, +    private AppendableCharSequence readLine(ByteBuf buffer, int maxLineLength) {, +        AppendableCharSequence sb = this.sb;, +        sb.reset();, +    private static String[] splitInitialLine(AppendableCharSequence sb) {, +    private static String[] splitHeader(AppendableCharSequence sb) {, +++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.internal;, +, +, +import java.util.Arrays;, +, +public final class AppendableCharSequence implements CharSequence, Appendable {, +    private char[] chars;, +    private int pos;, +, +    public AppendableCharSequence(int length) {, +        chars = new char[length];, +    }, +, +    private AppendableCharSequence(char[] chars) {, +        this.chars = chars;, +    }, +, +    @Override, +    public int length() {, +        return pos;, +    }, +, +    @Override, +    public char charAt(int index) {, +        if (index > pos) {, +            throw new IndexOutOfBoundsException();, +        }, +        return chars[index];, +    }, +, +    @Override, +    public AppendableCharSequence subSequence(int start, int end) {, +        return new AppendableCharSequence(Arrays.copyOfRange(chars, start, end));, +    }, +, +    @Override, +    public AppendableCharSequence append(char c) {, +        if (pos == chars.length) {, +            char[] old = chars;, +            // double it, +            int len = old.length << 1;, +            if (len < 0) {, +                throw new IllegalStateException();, +            }, +            chars = new char[len];, +            System.arraycopy(old, 0, chars, 0, old.length);, +        }, +        chars[pos++] = c;, +        return this;, +    }, +, +    @Override, +    public AppendableCharSequence append(CharSequence csq) {, +        return append(csq, 0, csq.length());, +    }, +]