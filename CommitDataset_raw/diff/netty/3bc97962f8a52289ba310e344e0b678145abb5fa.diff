[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_CORK = valueOf(EpollChannelOption.class, "TCP_CORK");, +    public static final ChannelOption<Boolean> SO_REUSEPORT = valueOf(EpollChannelOption.class, "SO_REUSEPORT");, +    public static final ChannelOption<Long> TCP_NOTSENT_LOWAT = valueOf(EpollChannelOption.class, "TCP_NOTSENT_LOWAT");, +    public static final ChannelOption<Integer> TCP_KEEPIDLE = valueOf(EpollChannelOption.class, "TCP_KEEPIDLE");, +    public static final ChannelOption<Integer> TCP_KEEPINTVL = valueOf(EpollChannelOption.class, "TCP_KEEPINTVL");, +    public static final ChannelOption<Integer> TCP_KEEPCNT = valueOf(EpollChannelOption.class, "TCP_KEEPCNT");, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT =, +            valueOf(EpollChannelOption.class, "TCP_USER_TIMEOUT");, +    public static final ChannelOption<Boolean> IP_FREEBIND = valueOf("IP_FREEBIND");, +    public static final ChannelOption<Integer> TCP_FASTOPEN = valueOf(EpollChannelOption.class, "TCP_FASTOPEN");, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT =, +            ChannelOption.valueOf(EpollChannelOption.class, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Boolean> TCP_QUICKACK = valueOf(EpollChannelOption.class, "TCP_QUICKACK");, +            ChannelOption.valueOf(EpollChannelOption.class, "DOMAIN_SOCKET_READ_MODE");, +            ChannelOption.valueOf(EpollChannelOption.class, "EPOLL_MODE");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_CORK = valueOf(EpollChannelOption.class, "TCP_CORK");, +    public static final ChannelOption<Boolean> SO_REUSEPORT = valueOf(EpollChannelOption.class, "SO_REUSEPORT");, +    public static final ChannelOption<Long> TCP_NOTSENT_LOWAT = valueOf(EpollChannelOption.class, "TCP_NOTSENT_LOWAT");, +    public static final ChannelOption<Integer> TCP_KEEPIDLE = valueOf(EpollChannelOption.class, "TCP_KEEPIDLE");, +    public static final ChannelOption<Integer> TCP_KEEPINTVL = valueOf(EpollChannelOption.class, "TCP_KEEPINTVL");, +    public static final ChannelOption<Integer> TCP_KEEPCNT = valueOf(EpollChannelOption.class, "TCP_KEEPCNT");, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT =, +            valueOf(EpollChannelOption.class, "TCP_USER_TIMEOUT");, +    public static final ChannelOption<Boolean> IP_FREEBIND = valueOf("IP_FREEBIND");, +    public static final ChannelOption<Integer> TCP_FASTOPEN = valueOf(EpollChannelOption.class, "TCP_FASTOPEN");, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT =, +            ChannelOption.valueOf(EpollChannelOption.class, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Boolean> TCP_QUICKACK = valueOf(EpollChannelOption.class, "TCP_QUICKACK");, +            ChannelOption.valueOf(EpollChannelOption.class, "DOMAIN_SOCKET_READ_MODE");, +            ChannelOption.valueOf(EpollChannelOption.class, "EPOLL_MODE");, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +    public static final ChannelOption<Integer> BAUD_RATE = valueOf(RxtxChannelOption.class, "BAUD_RATE");, +    public static final ChannelOption<Boolean> DTR = valueOf(RxtxChannelOption.class, "DTR");, +    public static final ChannelOption<Boolean> RTS = valueOf(RxtxChannelOption.class, "RTS");, +    public static final ChannelOption<Stopbits> STOP_BITS = valueOf(RxtxChannelOption.class, "STOP_BITS");, +    public static final ChannelOption<Databits> DATA_BITS = valueOf(RxtxChannelOption.class, "DATA_BITS");, +    public static final ChannelOption<Paritybit> PARITY_BIT = valueOf(RxtxChannelOption.class, "PARITY_BIT");, +    public static final ChannelOption<Integer> WAIT_TIME = valueOf(RxtxChannelOption.class, "WAIT_TIME");, +    public static final ChannelOption<Integer> READ_TIMEOUT = valueOf(RxtxChannelOption.class, "READ_TIMEOUT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_CORK = valueOf(EpollChannelOption.class, "TCP_CORK");, +    public static final ChannelOption<Boolean> SO_REUSEPORT = valueOf(EpollChannelOption.class, "SO_REUSEPORT");, +    public static final ChannelOption<Long> TCP_NOTSENT_LOWAT = valueOf(EpollChannelOption.class, "TCP_NOTSENT_LOWAT");, +    public static final ChannelOption<Integer> TCP_KEEPIDLE = valueOf(EpollChannelOption.class, "TCP_KEEPIDLE");, +    public static final ChannelOption<Integer> TCP_KEEPINTVL = valueOf(EpollChannelOption.class, "TCP_KEEPINTVL");, +    public static final ChannelOption<Integer> TCP_KEEPCNT = valueOf(EpollChannelOption.class, "TCP_KEEPCNT");, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT =, +            valueOf(EpollChannelOption.class, "TCP_USER_TIMEOUT");, +    public static final ChannelOption<Boolean> IP_FREEBIND = valueOf("IP_FREEBIND");, +    public static final ChannelOption<Integer> TCP_FASTOPEN = valueOf(EpollChannelOption.class, "TCP_FASTOPEN");, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT =, +            ChannelOption.valueOf(EpollChannelOption.class, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Boolean> TCP_QUICKACK = valueOf(EpollChannelOption.class, "TCP_QUICKACK");, +            ChannelOption.valueOf(EpollChannelOption.class, "DOMAIN_SOCKET_READ_MODE");, +            ChannelOption.valueOf(EpollChannelOption.class, "EPOLL_MODE");, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +    public static final ChannelOption<Integer> BAUD_RATE = valueOf(RxtxChannelOption.class, "BAUD_RATE");, +    public static final ChannelOption<Boolean> DTR = valueOf(RxtxChannelOption.class, "DTR");, +    public static final ChannelOption<Boolean> RTS = valueOf(RxtxChannelOption.class, "RTS");, +    public static final ChannelOption<Stopbits> STOP_BITS = valueOf(RxtxChannelOption.class, "STOP_BITS");, +    public static final ChannelOption<Databits> DATA_BITS = valueOf(RxtxChannelOption.class, "DATA_BITS");, +    public static final ChannelOption<Paritybit> PARITY_BIT = valueOf(RxtxChannelOption.class, "PARITY_BIT");, +    public static final ChannelOption<Integer> WAIT_TIME = valueOf(RxtxChannelOption.class, "WAIT_TIME");, +    public static final ChannelOption<Integer> READ_TIMEOUT = valueOf(RxtxChannelOption.class, "READ_TIMEOUT");, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelOption.java, +    public static final ChannelOption<Boolean> SCTP_DISABLE_FRAGMENTS =, +            valueOf(SctpChannelOption.class, "SCTP_DISABLE_FRAGMENTS");, +    public static final ChannelOption<Boolean> SCTP_EXPLICIT_COMPLETE =, +            valueOf(SctpChannelOption.class, "SCTP_EXPLICIT_COMPLETE");, +    public static final ChannelOption<Integer> SCTP_FRAGMENT_INTERLEAVE =, +            valueOf(SctpChannelOption.class, "SCTP_FRAGMENT_INTERLEAVE");, +    public static final ChannelOption<InitMaxStreams> SCTP_INIT_MAXSTREAMS =, +            valueOf(SctpChannelOption.class, "SCTP_INIT_MAXSTREAMS");, +    public static final ChannelOption<Boolean> SCTP_NODELAY =, +            valueOf(SctpChannelOption.class, "SCTP_NODELAY");, +    public static final ChannelOption<SocketAddress> SCTP_PRIMARY_ADDR =, +            valueOf(SctpChannelOption.class, "SCTP_PRIMARY_ADDR");, +            valueOf(SctpChannelOption.class, "SCTP_SET_PEER_PRIMARY_ADDR");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_CORK = valueOf(EpollChannelOption.class, "TCP_CORK");, +    public static final ChannelOption<Boolean> SO_REUSEPORT = valueOf(EpollChannelOption.class, "SO_REUSEPORT");, +    public static final ChannelOption<Long> TCP_NOTSENT_LOWAT = valueOf(EpollChannelOption.class, "TCP_NOTSENT_LOWAT");, +    public static final ChannelOption<Integer> TCP_KEEPIDLE = valueOf(EpollChannelOption.class, "TCP_KEEPIDLE");, +    public static final ChannelOption<Integer> TCP_KEEPINTVL = valueOf(EpollChannelOption.class, "TCP_KEEPINTVL");, +    public static final ChannelOption<Integer> TCP_KEEPCNT = valueOf(EpollChannelOption.class, "TCP_KEEPCNT");, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT =, +            valueOf(EpollChannelOption.class, "TCP_USER_TIMEOUT");, +    public static final ChannelOption<Boolean> IP_FREEBIND = valueOf("IP_FREEBIND");, +    public static final ChannelOption<Integer> TCP_FASTOPEN = valueOf(EpollChannelOption.class, "TCP_FASTOPEN");, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT =, +            ChannelOption.valueOf(EpollChannelOption.class, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Boolean> TCP_QUICKACK = valueOf(EpollChannelOption.class, "TCP_QUICKACK");, +            ChannelOption.valueOf(EpollChannelOption.class, "DOMAIN_SOCKET_READ_MODE");, +            ChannelOption.valueOf(EpollChannelOption.class, "EPOLL_MODE");, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +    public static final ChannelOption<Integer> BAUD_RATE = valueOf(RxtxChannelOption.class, "BAUD_RATE");, +    public static final ChannelOption<Boolean> DTR = valueOf(RxtxChannelOption.class, "DTR");, +    public static final ChannelOption<Boolean> RTS = valueOf(RxtxChannelOption.class, "RTS");]