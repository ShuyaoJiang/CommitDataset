[+++ b/common/src/main/java/io/netty/util/HashedWheelTimer.java, +, +, +        if (maxPendingTimeouts > 0 && pendingTimeoutsCount > maxPendingTimeouts) {, +    /**, +     * Returns the number of pending timeouts of this {@link Timer}., +     */, +    public long pendingTimeouts() {, +        return pendingTimeouts.get();, +            } else {, +++ b/common/src/main/java/io/netty/util/HashedWheelTimer.java, +, +, +        if (maxPendingTimeouts > 0 && pendingTimeoutsCount > maxPendingTimeouts) {, +    /**, +     * Returns the number of pending timeouts of this {@link Timer}., +     */, +    public long pendingTimeouts() {, +        return pendingTimeouts.get();, +            } else {, +++ b/common/src/test/java/io/netty/util/HashedWheelTimerTest.java, +    @Test(), +    public void reportPendingTimeouts() throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final HashedWheelTimer timer = new HashedWheelTimer();, +        final Timeout t1 = timer.newTimeout(createNoOpTimerTask(), 100, TimeUnit.MINUTES);, +        final Timeout t2 = timer.newTimeout(createNoOpTimerTask(), 100, TimeUnit.MINUTES);, +        timer.newTimeout(createCountDownLatchTimerTask(latch), 90, TimeUnit.MILLISECONDS);, +, +        assertEquals(3, timer.pendingTimeouts());, +        t1.cancel();, +        t2.cancel();, +        latch.await();, +, +        assertEquals(0, timer.pendingTimeouts());, +        timer.stop();, +    }, +]