[+++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        addComponents0(0, buffers);, +        consolidateIfNeeded();, +        addComponents0(0, buffers);, +        consolidateIfNeeded();, +, +        addComponent0(components.size(), buffer);, +        consolidateIfNeeded();, +        addComponents0(components.size(), buffers);, +        consolidateIfNeeded();, +        addComponents0(components.size(), buffers);, +        consolidateIfNeeded();, +        addComponent0(cIndex, buffer);, +        consolidateIfNeeded();, +        return this;, +    }, +, +    private int addComponent0(int cIndex, ByteBuf buffer) {, +            return addComponents0(cIndex, composite);, +            return cIndex;, +        return cIndex;, +    }, +    @Override, +    public CompositeByteBuf addComponents(int cIndex, ByteBuf... buffers) {, +        addComponents0(cIndex, buffers);, +        consolidateIfNeeded();, +    private int addComponents0(int cIndex, ByteBuf... buffers) {, +, +            return cIndex;, +                cIndex = addComponent0(cIndex, b) + 1;, +                int size = components.size();, +                if (cIndex > size) {, +                    cIndex = size;, +        }, +        return cIndex;, +        addComponents0(cIndex, buffers);, +        consolidateIfNeeded();, +        return this;, +    }, +, +    private int addComponents0(int cIndex, Iterable<ByteBuf> buffers) {, +            return addComponents0(cIndex, array);, +            return addComponents0(cIndex, array);, +            return addComponents0(cIndex, array);, +        return addComponents0(cIndex, list.toArray(new ByteBuf[list.size()]));, +    }, +, +, +    /**, +     * This should only be called as last operation from a method as this may adjust the underlying, +     * array of components and so affect the index etc., +     */, +    private void consolidateIfNeeded() {, +        // Consolidate if the number of components will exceed the allowed maximum by the current, +        // operation., +        final int numComponents = components.size();, +        if (numComponents > maxNumComponents) {, +            final int capacity = components.get(numComponents - 1).endOffset;, +, +            ByteBuf consolidated = components.get(numComponents - 1).buf.unsafe().newBuffer(capacity);, +            for (int i = 0; i < numComponents; i ++) {, +                ByteBuf b = components.get(i).buf;, +                consolidated.writeBytes(b);, +                b.unsafe().release();, +            }, +            Component c = new Component(consolidated);, +            c.endOffset = c.length;, +            components.clear();, +            components.add(c);, +        }]