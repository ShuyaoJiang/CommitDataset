[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +    private final Http2Connection.PropertyKey propertyKey;, +        propertyKey = connection().newKey();, +        connection().addListener(new Http2ConnectionAdapter() {, +            @Override, +            public void onStreamRemoved(Http2Stream stream) {, +                final EmbeddedChannel compressor = stream.getProperty(propertyKey);, +                if (compressor != null) {, +                    cleanup(stream, compressor);, +                }, +            }, +        });, +        final EmbeddedChannel channel = stream == null ? null : (EmbeddedChannel) stream.getProperty(propertyKey);, +        EmbeddedChannel compressor = stream.getProperty(propertyKey);, +                        stream.setProperty(propertyKey, compressor);, +    void cleanup(Http2Stream stream, EmbeddedChannel compressor) {, +        stream.removeProperty(propertyKey);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +    private final Http2Connection.PropertyKey propertyKey;, +        propertyKey = connection().newKey();, +        connection().addListener(new Http2ConnectionAdapter() {, +            @Override, +            public void onStreamRemoved(Http2Stream stream) {, +                final EmbeddedChannel compressor = stream.getProperty(propertyKey);, +                if (compressor != null) {, +                    cleanup(stream, compressor);, +                }, +            }, +        });, +        final EmbeddedChannel channel = stream == null ? null : (EmbeddedChannel) stream.getProperty(propertyKey);, +        EmbeddedChannel compressor = stream.getProperty(propertyKey);, +                        stream.setProperty(propertyKey, compressor);, +    void cleanup(Http2Stream stream, EmbeddedChannel compressor) {, +        stream.removeProperty(propertyKey);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.internal.EmptyArrays;, +import java.util.Arrays;, +    final PropertyKeyRegistry propertyKeyRegistry = new PropertyKeyRegistry();, +, +    @Override, +    public PropertyKey newKey() {, +        return propertyKeyRegistry.newKey();, +    }, +, +    /**, +     * Verifies that the key is valid and returns it as the internal {@link DefaultPropertyKey} type., +     *, +     * @throws NullPointerException if the key is {@code null}., +     * @throws ClassCastException if the key is not of type {@link DefaultPropertyKey}., +     * @throws IllegalArgumentException if the key was not created by this connection., +     */, +    final DefaultPropertyKey verifyKey(PropertyKey key) {, +        return checkNotNull((DefaultPropertyKey) key, "key").verifyConnection(this);, +    }, +, +        private final PropertyMap properties = new PropertyMap();, +        public final <V> V setProperty(PropertyKey key, V value) {, +            return properties.add(verifyKey(key), value);, +        public final <V> V getProperty(PropertyKey key) {, +            return properties.get(verifyKey(key));, +        public final <V> V removeProperty(PropertyKey key) {, +            return properties.remove(verifyKey(key));, +        private class PropertyMap {, +            Object[] values = EmptyArrays.EMPTY_OBJECTS;, +            <V> V add(DefaultPropertyKey key, V value) {, +                resizeIfNecessary(key.index);, +                @SuppressWarnings("unchecked"), +                V prevValue = (V) values[key.index];, +                values[key.index] = value;, +                return prevValue;, +            @SuppressWarnings("unchecked"), +            <V> V get(DefaultPropertyKey key) {, +                if (key.index >= values.length) {, +                    return null;, +                }, +                return (V) values[key.index];, +            @SuppressWarnings("unchecked"), +            <V> V remove(DefaultPropertyKey key) {, +                V prevValue = null;, +                if (key.index < values.length) {, +                    prevValue = (V) values[key.index];, +                    values[key.index] = null;, +                }, +                return prevValue;, +            void resizeIfNecessary(int index) {, +                if (index >= values.length) {, +                    values = Arrays.copyOf(values, propertyKeyRegistry.size());, +                }, +            }, +, +    /**, +     * Implementation of {@link PropertyKey} that specifies the index position of the property., +     */, +    final class DefaultPropertyKey implements PropertyKey {, +        private final int index;, +, +        DefaultPropertyKey(int index) {, +            this.index = index;, +        }, +]