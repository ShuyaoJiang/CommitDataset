[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    DirectBufferPool() {, +        super();, +    final ByteBuffer acquire(ChannelBuffer src) {, +    final ByteBuffer acquire(int size) {, +    final void release(ByteBuffer buffer) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    DirectBufferPool() {, +        super();, +    final ByteBuffer acquire(ChannelBuffer src) {, +    final ByteBuffer acquire(int size) {, +    final void release(ByteBuffer buffer) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    DirectBufferPool() {, +        super();, +    final ByteBuffer acquire(ChannelBuffer src) {, +    final ByteBuffer acquire(int size) {, +    final void release(ByteBuffer buffer) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * Monitor object for synchronizing access to the {@link WriteBufferQueue}., +    final Object writeLock = new Object();, +    /**, +     * Boolean that indicates that write operation is in progress., +     */, +    volatile boolean inWriteNowLoop;, +, +            worker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    DirectBufferPool() {, +        super();, +    final ByteBuffer acquire(ChannelBuffer src) {, +    final ByteBuffer acquire(int size) {, +    final void release(ByteBuffer buffer) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * Monitor object for synchronizing access to the {@link WriteBufferQueue}., +    final Object writeLock = new Object();, +    /**, +     * Boolean that indicates that write operation is in progress., +     */, +    volatile boolean inWriteNowLoop;, +, +            worker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];, +, +    DirectBufferPool() {, +        super();, +    final ByteBuffer acquire(ChannelBuffer src) {, +    final ByteBuffer acquire(int size) {, +    final void release(ByteBuffer buffer) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * Monitor object for synchronizing access to the {@link WriteBufferQueue}., +    final Object writeLock = new Object();, +    /**, +     * Boolean that indicates that write operation is in progress., +     */, +    volatile boolean inWriteNowLoop;, +, +            worker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +            channel.worker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +    private final DirectBufferPool directBufferPool = new DirectBufferPool();, +, +                    write(k);, +    private void write(SelectionKey k) {, +        write((NioDatagramChannel) k.attachment(), false);, +    }, +, +        ReceiveBufferSizePredictor predictor =, +            channel.getConfig().getReceiveBufferSizePredictor();, +        final ChannelBufferFactory bufferFactory = channel.getConfig().getBufferFactory();, +    void write(final NioDatagramChannel channel,, +            final boolean mightNeedWakeup) {, +        if (mightNeedWakeup && scheduleWriteIfNecessary(channel)) {, +        if (channel.inWriteNowLoop) {, +            scheduleWriteIfNecessary(channel);, +        } else {, +            writeNow(channel, channel.getConfig().getWriteSpinCount());, +        }, +    private boolean scheduleWriteIfNecessary(final NioDatagramChannel channel) {, +        final Thread workerThread = thread;]