[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @SuppressWarnings("deprecation"), +    @Override, +    public ByteBuf asReadOnly() {, +        if (isReadOnly()) {, +            return this;, +        }, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @SuppressWarnings("deprecation"), +    @Override, +    public ByteBuf asReadOnly() {, +        if (isReadOnly()) {, +            return this;, +        }, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    public ByteBuf asReadOnly() {, +        recordLeakNonRefCountingOperation(leak);, +        return new AdvancedLeakAwareByteBuf(super.asReadOnly(), leak);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @SuppressWarnings("deprecation"), +    @Override, +    public ByteBuf asReadOnly() {, +        if (isReadOnly()) {, +            return this;, +        }, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    public ByteBuf asReadOnly() {, +        recordLeakNonRefCountingOperation(leak);, +        return new AdvancedLeakAwareByteBuf(super.asReadOnly(), leak);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns a read-only version of this buffer., +     */, +    public abstract ByteBuf asReadOnly();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @SuppressWarnings("deprecation"), +    @Override, +    public ByteBuf asReadOnly() {, +        if (isReadOnly()) {, +            return this;, +        }, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    public ByteBuf asReadOnly() {, +        recordLeakNonRefCountingOperation(leak);, +        return new AdvancedLeakAwareByteBuf(super.asReadOnly(), leak);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns a read-only version of this buffer., +     */, +    public abstract ByteBuf asReadOnly();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +    public ByteBuf asReadOnly() {, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    @SuppressWarnings("deprecation"), +    @Override, +    public ByteBuf asReadOnly() {, +        if (isReadOnly()) {, +            return this;, +        }, +        return Unpooled.unmodifiableBuffer(this);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    public ByteBuf asReadOnly() {, +        recordLeakNonRefCountingOperation(leak);, +        return new AdvancedLeakAwareByteBuf(super.asReadOnly(), leak);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns a read-only version of this buffer., +     */, +    public abstract ByteBuf asReadOnly();]