[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/ServerSocketSuspendTest.java, +        Thread.sleep(TIMEOUT / 1000000);, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/ServerSocketSuspendTest.java, +        Thread.sleep(TIMEOUT / 1000000);, +, +++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelPipeline;, +                    child.unsafe().closeForcibly();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/ServerSocketSuspendTest.java, +        Thread.sleep(TIMEOUT / 1000000);, +, +++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelPipeline;, +                    child.unsafe().closeForcibly();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final void closeForcibly() {, +            try {, +                doClose();, +            } catch (Exception e) {, +                logger.warn("Failed to close a channel.", e);, +            }, +        }, +, +        @Override, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/ServerSocketSuspendTest.java, +        Thread.sleep(TIMEOUT / 1000000);, +, +++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelPipeline;, +                    child.unsafe().closeForcibly();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final void closeForcibly() {, +            try {, +                doClose();, +            } catch (Exception e) {, +                logger.warn("Failed to close a channel.", e);, +            }, +        }, +, +        @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +         * Closes the {@link Channel} immediately without firing any events.  Probably only useful, +         * when registration attempt failed., +         */, +        void closeForcibly();, +, +        /**, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/ServerSocketSuspendTest.java, +        Thread.sleep(TIMEOUT / 1000000);, +, +++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelInboundMessageHandler;, +import io.netty.channel.ChannelPipeline;, +                    child.unsafe().closeForcibly();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final void closeForcibly() {, +            try {, +                doClose();, +            } catch (Exception e) {, +                logger.warn("Failed to close a channel.", e);, +            }, +        }, +, +        @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +         * Closes the {@link Channel} immediately without firing any events.  Probably only useful, +         * when registration attempt failed., +         */, +        void closeForcibly();, +, +        /**, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +import io.netty.channel.ChannelPipeline;, +        final ChannelPipeline peerPipeline = peer.pipeline();, +        final EventLoop peerLoop = peer.eventLoop();, +        if (peerLoop == eventLoop()) {, +            buf.drainTo(peerPipeline.inboundMessageBuffer());, +            peerPipeline.fireInboundBufferUpdated();, +        } else {, +            final Object[] msgs = buf.toArray();, +            buf.clear();, +            peerLoop.execute(new Runnable() {, +                    MessageBuf<Object> buf = peerPipeline.inboundMessageBuffer();, +                    for (Object m: msgs) {, +                        buf.add(m);, +                    }, +                    peerPipeline.fireInboundBufferUpdated();, +    }]