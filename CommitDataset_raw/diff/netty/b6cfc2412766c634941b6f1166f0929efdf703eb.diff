[+++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import java.util.Set;, +            Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +                for (Cookie cookie : cookies) {, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import java.util.Set;, +            Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +                for (Cookie cookie : cookies) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java, +import java.util.Set;, +import java.util.TreeSet;, +    public Set<Cookie> decode(String header) {, +        Set<Cookie> cookies = new TreeSet<Cookie>();, +        boolean versionAtTheBeginning = false;, +                if (!versionAtTheBeginning &&, +                    name.equalsIgnoreCase(CookieHeaderNames.VERSION)) {, +                    versionAtTheBeginning = true;, +                cookies.add(theCookie);, +        name = name.trim();, +++ b/src/main/java/org/jboss/netty/example/http/HttpRequestHandler.java, +import java.util.Set;, +            Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +                for (Cookie cookie : cookies) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java, +import java.util.Set;, +import java.util.TreeSet;, +    public Set<Cookie> decode(String header) {, +        Set<Cookie> cookies = new TreeSet<Cookie>();, +        boolean versionAtTheBeginning = false;, +                if (!versionAtTheBeginning &&, +                    name.equalsIgnoreCase(CookieHeaderNames.VERSION)) {, +                    versionAtTheBeginning = true;, +                cookies.add(theCookie);, +        name = name.trim();, +++ b/src/test/java/org/jboss/netty/handler/codec/http/CookieDecoderTest.java, +import java.util.Iterator;, +import java.util.Set;, +        Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +        assertEquals(1, cookies.size());, +        Cookie cookie = cookies.iterator().next();, +        Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +        assertEquals(1, cookies.size());, +        Cookie cookie = cookies.iterator().next();, +        Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +        assertEquals(1, cookies.size());, +        Cookie cookie = cookies.iterator().next();, +        Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +        assertEquals(1, cookies.size());, +        Cookie cookie = cookies.iterator().next();, +        Set<Cookie> cookies = cookieDecoder.decode(cookieString);, +        assertEquals(1, cookies.size());, +        Cookie cookie = cookies.iterator().next();, +        Set<Cookie> cookies = decoder.decode(c1 + c2 + c3);, +        assertEquals(3, cookies.size());, +        Iterator<Cookie> it = cookies.iterator();, +        Cookie cookie = it.next();, +        cookie = it.next();, +        cookie = it.next();, +, +    @Test, +    public void testDecodingClientSideCookies() {, +        String source = "$Version=\"1\"; " +, +                "Part_Number=\"Riding_Rocket_0023\"; $Path=\"/acme/ammo\"; " +, +                "Part_Number=\"Rocket_Launcher_0001\"; $Path=\"/acme\"";, +, +        Set<Cookie> cookies = new CookieDecoder().decode(source);, +        Iterator<Cookie> it = cookies.iterator();, +        Cookie c;, +, +        c = it.next();, +        assertEquals(1, c.getVersion());, +        assertEquals("Part_Number", c.getName());, +        assertEquals("Rocket_Launcher_0001", c.getValue());, +        assertEquals("/acme", c.getPath());, +        assertNull(c.getComment());, +        assertNull(c.getCommentUrl());, +        assertNull(c.getDomain());, +        assertTrue(c.getPorts().isEmpty());, +        assertEquals(-1, c.getMaxAge());, +, +        c = it.next();, +        assertEquals(1, c.getVersion());, +        assertEquals("Part_Number", c.getName());, +        assertEquals("Riding_Rocket_0023", c.getValue());, +        assertEquals("/acme/ammo", c.getPath());, +        assertNull(c.getComment());, +        assertNull(c.getCommentUrl());, +        assertNull(c.getDomain());, +        assertTrue(c.getPorts().isEmpty());, +        assertEquals(-1, c.getMaxAge());, +, +    }]