[+++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +    /** Set only when decoding with "\n" and "\r\n" as the delimiter.  */, +    private final LineBasedFrameDecoder lineBasedDecoder;, +        this(maxFrameLength, stripDelimiter, failFast, new ByteBuf[] {, +                delimiter.slice(delimiter.readerIndex(), delimiter.readableBytes())});, +        } else if (isLineBased(delimiters) && !isSubclass()) {, +            lineBasedDecoder = new LineBasedFrameDecoder(maxFrameLength, stripDelimiter, failFast);, +            this.delimiters = null;, +        } else {, +            lineBasedDecoder = null;, +        }, +, +    /** Returns true if the delimiters are "\n" and "\r\n".  */, +    private static boolean isLineBased(final ByteBuf[] delimiters) {, +        if (delimiters.length != 2) {, +            return false;, +        }, +        ByteBuf a = delimiters[0];, +        ByteBuf b = delimiters[1];, +        if (a.capacity() < b.capacity()) {, +            a = delimiters[1];, +            b = delimiters[0];, +        }, +        return a.capacity() == 2 && b.capacity() == 1, +                && a.getByte(0) == '\r' && a.getByte(1) == '\n', +                && b.getByte(0) == '\n';, +    }, +, +    /**, +     * Return <code>true</code> if the current instance is a subclass of DelimiterBasedFrameDecoder, +     */, +    private boolean isSubclass() {, +        return this.getClass() != DelimiterBasedFrameDecoder.class;, +    }, +        if (lineBasedDecoder != null) {, +            return lineBasedDecoder.decode(ctx, buffer);, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +    /** Set only when decoding with "\n" and "\r\n" as the delimiter.  */, +    private final LineBasedFrameDecoder lineBasedDecoder;, +        this(maxFrameLength, stripDelimiter, failFast, new ByteBuf[] {, +                delimiter.slice(delimiter.readerIndex(), delimiter.readableBytes())});, +        } else if (isLineBased(delimiters) && !isSubclass()) {, +            lineBasedDecoder = new LineBasedFrameDecoder(maxFrameLength, stripDelimiter, failFast);, +            this.delimiters = null;, +        } else {, +            lineBasedDecoder = null;, +        }, +, +    /** Returns true if the delimiters are "\n" and "\r\n".  */, +    private static boolean isLineBased(final ByteBuf[] delimiters) {, +        if (delimiters.length != 2) {, +            return false;, +        }, +        ByteBuf a = delimiters[0];, +        ByteBuf b = delimiters[1];, +        if (a.capacity() < b.capacity()) {, +            a = delimiters[1];, +            b = delimiters[0];, +        }, +        return a.capacity() == 2 && b.capacity() == 1, +                && a.getByte(0) == '\r' && a.getByte(1) == '\n', +                && b.getByte(0) == '\n';, +    }, +, +    /**, +     * Return <code>true</code> if the current instance is a subclass of DelimiterBasedFrameDecoder, +     */, +    private boolean isSubclass() {, +        return this.getClass() != DelimiterBasedFrameDecoder.class;, +    }, +        if (lineBasedDecoder != null) {, +            return lineBasedDecoder.decode(ctx, buffer);, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/LineBasedFrameDecoder.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +, +/**, + * A decoder that splits the received {@link ByteBuf}s on line endings., + * <p>, + * Both {@code "\n"} and {@code "\r\n"} are handled., + * For a more general delimiter-based decoder, see {@link DelimiterBasedFrameDecoder}.]