[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.channel.ChannelConfig;, +    private boolean decodeWasNull;, +    public void channelReadSuspended(ChannelHandlerContext ctx) throws Exception {, +        if (decodeWasNull) {, +            decodeWasNull = false;, +            if (!ctx.channel().config().isAutoRead()) {, +                ctx.read();, +            }, +        }, +        super.channelReadSuspended(ctx);, +    }, +, +    @Override, +        boolean wasNull = false;, +, +                    wasNull = true;, +                wasNull = false;, +            decodeWasNull = false;, +        } else {, +            if (wasNull) {, +                decodeWasNull = true;, +            }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.channel.ChannelConfig;, +    private boolean decodeWasNull;, +    public void channelReadSuspended(ChannelHandlerContext ctx) throws Exception {, +        if (decodeWasNull) {, +            decodeWasNull = false;, +            if (!ctx.channel().config().isAutoRead()) {, +                ctx.read();, +            }, +        }, +        super.channelReadSuspended(ctx);, +    }, +, +    @Override, +        boolean wasNull = false;, +, +                    wasNull = true;, +                wasNull = false;, +            decodeWasNull = false;, +        } else {, +            if (wasNull) {, +                decodeWasNull = true;, +            }, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +    private boolean decodeWasNull;, +        boolean wasNull = false;, +, +                    wasNull = true;, +, +                wasNull = false;, +            decodeWasNull = false;, +        } else {, +            if (wasNull) {, +                decodeWasNull = true;, +, +    @Override, +    public void channelReadSuspended(ChannelHandlerContext ctx) throws Exception {, +        if (decodeWasNull) {, +            decodeWasNull = false;, +            if (!ctx.channel().config().isAutoRead()) {, +                ctx.read();, +            }, +        }, +, +        super.channelReadSuspended(ctx);, +    }, +, +}]