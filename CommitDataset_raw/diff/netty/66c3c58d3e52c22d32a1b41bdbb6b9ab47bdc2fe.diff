[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +    private final ByteBuffer[] singleSrcBuffer = new ByteBuffer[1];, +    private final ByteBuffer[] singleDstBuffer = new ByteBuffer[1];, +        // Throw required runtime exceptions, +    private ByteBuffer[] singleSrcBuffer(ByteBuffer src) {, +        singleSrcBuffer[0] = src;, +        return singleSrcBuffer;, +    }, +, +    private void resetSingleSrcBuffer() {, +        singleSrcBuffer[0] = null;, +    }, +, +    private ByteBuffer[] singleDstBuffer(ByteBuffer src) {, +        singleDstBuffer[0] = src;, +        return singleDstBuffer;, +    }, +, +    private void resetSingleDstBuffer() {, +        singleDstBuffer[0] = null;, +    }, +, +    public synchronized SSLEngineResult unwrap(, +        try {, +            return unwrap(singleSrcBuffer(src), 0, 1, dsts, offset, length);, +        } finally {, +            resetSingleSrcBuffer();, +        }, +    }, +, +    @Override, +    public synchronized SSLEngineResult wrap(ByteBuffer src, ByteBuffer dst) throws SSLException {, +        try {, +            return wrap(singleSrcBuffer(src), dst);, +        } finally {, +            resetSingleSrcBuffer();, +        }, +    }, +, +    @Override, +    public synchronized SSLEngineResult unwrap(ByteBuffer src, ByteBuffer dst) throws SSLException {, +        try {, +            return unwrap(singleSrcBuffer(src), singleDstBuffer(dst));, +        } finally {, +            resetSingleSrcBuffer();, +            resetSingleDstBuffer();, +        }, +    }, +, +    @Override, +    public synchronized SSLEngineResult unwrap(ByteBuffer src, ByteBuffer[] dsts) throws SSLException {, +        try {, +            return unwrap(singleSrcBuffer(src), dsts);, +        } finally {, +            resetSingleSrcBuffer();, +        }]