[+++ b/transport-native-epoll/src/main/c/exception_helper.h, +void throwChannelExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +++ b/transport-native-epoll/src/main/c/exception_helper.h, +void throwChannelExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +jclass channelExceptionClass = NULL;, +void throwChannelExceptionErrorNo(JNIEnv* env, char* message, int errorNumber) {, +    char* allocatedMessage = exceptionMessage(message, errorNumber);, +    (*env)->ThrowNew(env, channelExceptionClass, allocatedMessage);, +    free(allocatedMessage);, +}, +, +, +    throwChannelExceptionErrorNo(env, "getsockopt() failed: ", err);, +        throwChannelExceptionErrorNo(env, "setsockopt() failed: ", err);, +        jclass localChannelExceptionClass = (*env)->FindClass(env, "io/netty/channel/ChannelException");, +        if (localChannelExceptionClass == NULL) {, +            // pending exception..., +            return JNI_ERR;, +        }, +        channelExceptionClass = (jclass) (*env)->NewGlobalRef(env, localChannelExceptionClass);, +        if (channelExceptionClass == NULL) {, +            // out-of-memory!, +            throwOutOfMemoryError(env);, +            return JNI_ERR;, +        }, +, +        if (channelExceptionClass != NULL) {, +            (*env)->DeleteGlobalRef(env, channelExceptionClass);, +        }, +        throwChannelExceptionErrorNo(env, "eventfd() failed: ", err);, +        throwChannelExceptionErrorNo(env, "eventfd_write() failed: ", err);, +            throwChannelExceptionErrorNo(env, "epoll_create1() failed: ", err);, +            throwChannelExceptionErrorNo(env, "epoll_create() failed: ", err);, +            throwChannelExceptionErrorNo(env, "fcntl() failed: ", err);, +++ b/transport-native-epoll/src/main/c/exception_helper.h, +void throwChannelExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +jclass channelExceptionClass = NULL;, +void throwChannelExceptionErrorNo(JNIEnv* env, char* message, int errorNumber) {, +    char* allocatedMessage = exceptionMessage(message, errorNumber);, +    (*env)->ThrowNew(env, channelExceptionClass, allocatedMessage);, +    free(allocatedMessage);, +}, +, +, +    throwChannelExceptionErrorNo(env, "getsockopt() failed: ", err);, +        throwChannelExceptionErrorNo(env, "setsockopt() failed: ", err);, +        jclass localChannelExceptionClass = (*env)->FindClass(env, "io/netty/channel/ChannelException");, +        if (localChannelExceptionClass == NULL) {, +            // pending exception..., +            return JNI_ERR;, +        }, +        channelExceptionClass = (jclass) (*env)->NewGlobalRef(env, localChannelExceptionClass);, +        if (channelExceptionClass == NULL) {, +            // out-of-memory!, +            throwOutOfMemoryError(env);, +            return JNI_ERR;, +        }, +, +        if (channelExceptionClass != NULL) {, +            (*env)->DeleteGlobalRef(env, channelExceptionClass);, +        }, +        throwChannelExceptionErrorNo(env, "eventfd() failed: ", err);, +        throwChannelExceptionErrorNo(env, "eventfd_write() failed: ", err);, +            throwChannelExceptionErrorNo(env, "epoll_create1() failed: ", err);, +            throwChannelExceptionErrorNo(env, "epoll_create() failed: ", err);, +            throwChannelExceptionErrorNo(env, "fcntl() failed: ", err);, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollChannelConfigTest.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.epoll;, +, +import io.netty.channel.ChannelException;, +import org.junit.Test;, +, +import static org.junit.Assert.fail;, +, +public class EpollChannelConfigTest {, +, +    @Test, +    public void testOptionGetThrowsChannelException() throws Exception {, +        Epoll.ensureAvailability();, +        EpollSocketChannel channel = new EpollSocketChannel();, +        channel.config().getSoLinger();, +        channel.fd().close();, +        try {]