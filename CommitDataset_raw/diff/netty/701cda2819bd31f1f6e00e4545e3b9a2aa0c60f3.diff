[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +import io.netty.channel.ChannelException;, +abstract class AbstractAioChannel extends AbstractChannel {, +    protected final AioEventLoop eventLoop;, +    protected AbstractAioChannel(Channel parent, Integer id, AioEventLoop eventLoop, AsynchronousChannel ch) {, +        this.eventLoop = eventLoop;, +    protected Runnable doRegister() throws Exception {, +        if (((AioChildEventLoop) eventLoop()).parent != eventLoop) {, +            throw new ChannelException(, +                    getClass().getSimpleName() + " must be registered to the " +, +                    AioEventLoop.class.getSimpleName() + " which was specified in the constructor.");, +        }, +        return null;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +import io.netty.channel.ChannelException;, +abstract class AbstractAioChannel extends AbstractChannel {, +    protected final AioEventLoop eventLoop;, +    protected AbstractAioChannel(Channel parent, Integer id, AioEventLoop eventLoop, AsynchronousChannel ch) {, +        this.eventLoop = eventLoop;, +    protected Runnable doRegister() throws Exception {, +        if (((AioChildEventLoop) eventLoop()).parent != eventLoop) {, +            throw new ChannelException(, +                    getClass().getSimpleName() + " must be registered to the " +, +                    AioEventLoop.class.getSimpleName() + " which was specified in the constructor.");, +        }, +        return null;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChildEventLoop.java, +    final AioEventLoop parent;, +, +    AioChildEventLoop(AioEventLoop parent, ThreadFactory threadFactory) {, +        this.parent = parent;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +import io.netty.channel.ChannelException;, +abstract class AbstractAioChannel extends AbstractChannel {, +    protected final AioEventLoop eventLoop;, +    protected AbstractAioChannel(Channel parent, Integer id, AioEventLoop eventLoop, AsynchronousChannel ch) {, +        this.eventLoop = eventLoop;, +    protected Runnable doRegister() throws Exception {, +        if (((AioChildEventLoop) eventLoop()).parent != eventLoop) {, +            throw new ChannelException(, +                    getClass().getSimpleName() + " must be registered to the " +, +                    AioEventLoop.class.getSimpleName() + " which was specified in the constructor.");, +        }, +        return null;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChildEventLoop.java, +    final AioEventLoop parent;, +, +    AioChildEventLoop(AioEventLoop parent, ThreadFactory threadFactory) {, +        this.parent = parent;, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java, +        return new AioChildEventLoop(this, threadFactory);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +import io.netty.channel.ChannelException;, +abstract class AbstractAioChannel extends AbstractChannel {, +    protected final AioEventLoop eventLoop;, +    protected AbstractAioChannel(Channel parent, Integer id, AioEventLoop eventLoop, AsynchronousChannel ch) {, +        this.eventLoop = eventLoop;, +    protected Runnable doRegister() throws Exception {, +        if (((AioChildEventLoop) eventLoop()).parent != eventLoop) {, +            throw new ChannelException(, +                    getClass().getSimpleName() + " must be registered to the " +, +                    AioEventLoop.class.getSimpleName() + " which was specified in the constructor.");, +        }, +        return null;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChildEventLoop.java, +    final AioEventLoop parent;, +, +    AioChildEventLoop(AioEventLoop parent, ThreadFactory threadFactory) {, +        this.parent = parent;, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioEventLoop.java, +        return new AioChildEventLoop(this, threadFactory);, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +        super(null, null, eventLoop, newSocket(eventLoop.group));, +        return super.doRegister();, +            channel.pipeline().inboundMessageBuffer().add(, +                    new AioSocketChannel(channel, null, channel.eventLoop, ch));, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();]