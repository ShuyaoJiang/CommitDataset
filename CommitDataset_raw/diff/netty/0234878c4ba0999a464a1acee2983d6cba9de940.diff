[+++ b/codec-smtp/src/main/java/io/netty/handler/codec/smtp/SmtpCommand.java, +    public static final SmtpCommand EHLO = new SmtpCommand(AsciiString.cached("EHLO"));, +    public static final SmtpCommand HELO = new SmtpCommand(AsciiString.cached("HELO"));, +    public static final SmtpCommand MAIL = new SmtpCommand(AsciiString.cached("MAIL"));, +    public static final SmtpCommand RCPT = new SmtpCommand(AsciiString.cached("RCPT"));, +    public static final SmtpCommand DATA = new SmtpCommand(AsciiString.cached("DATA"));, +    public static final SmtpCommand NOOP = new SmtpCommand(AsciiString.cached("NOOP"));, +    public static final SmtpCommand RSET = new SmtpCommand(AsciiString.cached("RSET"));, +    public static final SmtpCommand EXPN = new SmtpCommand(AsciiString.cached("EXPN"));, +    public static final SmtpCommand VRFY = new SmtpCommand(AsciiString.cached("VRFY"));, +    public static final SmtpCommand HELP = new SmtpCommand(AsciiString.cached("HELP"));, +    public static final SmtpCommand QUIT = new SmtpCommand(AsciiString.cached("QUIT"));, +    private static final Map<String, SmtpCommand> COMMANDS = new HashMap<String, SmtpCommand>();, +        COMMANDS.put(EHLO.name().toString(), EHLO);, +        COMMANDS.put(HELO.name().toString(), HELO);, +        COMMANDS.put(MAIL.name().toString(), MAIL);, +        COMMANDS.put(RCPT.name().toString(), RCPT);, +        COMMANDS.put(DATA.name().toString(), DATA);, +        COMMANDS.put(NOOP.name().toString(), NOOP);, +        COMMANDS.put(RSET.name().toString(), RSET);, +        COMMANDS.put(EXPN.name().toString(), EXPN);, +        COMMANDS.put(VRFY.name().toString(), VRFY);, +        COMMANDS.put(HELP.name().toString(), HELP);, +        COMMANDS.put(QUIT.name().toString(), QUIT);, +        ObjectUtil.checkNotNull(commandName, "commandName");, +        SmtpCommand command = COMMANDS.get(commandName.toString());, +        return command != null ? command : new SmtpCommand(AsciiString.of(commandName));, +    private SmtpCommand(AsciiString name) {, +        ByteBufUtil.writeAscii(buffer, name);, +        return this.equals(DATA);, +        return name.hashCode();, +        return "SmtpCommand{name=" + name + '}';, +++ b/codec-smtp/src/main/java/io/netty/handler/codec/smtp/SmtpCommand.java, +    public static final SmtpCommand EHLO = new SmtpCommand(AsciiString.cached("EHLO"));, +    public static final SmtpCommand HELO = new SmtpCommand(AsciiString.cached("HELO"));, +    public static final SmtpCommand MAIL = new SmtpCommand(AsciiString.cached("MAIL"));, +    public static final SmtpCommand RCPT = new SmtpCommand(AsciiString.cached("RCPT"));, +    public static final SmtpCommand DATA = new SmtpCommand(AsciiString.cached("DATA"));, +    public static final SmtpCommand NOOP = new SmtpCommand(AsciiString.cached("NOOP"));, +    public static final SmtpCommand RSET = new SmtpCommand(AsciiString.cached("RSET"));, +    public static final SmtpCommand EXPN = new SmtpCommand(AsciiString.cached("EXPN"));, +    public static final SmtpCommand VRFY = new SmtpCommand(AsciiString.cached("VRFY"));, +    public static final SmtpCommand HELP = new SmtpCommand(AsciiString.cached("HELP"));, +    public static final SmtpCommand QUIT = new SmtpCommand(AsciiString.cached("QUIT"));, +    private static final Map<String, SmtpCommand> COMMANDS = new HashMap<String, SmtpCommand>();, +        COMMANDS.put(EHLO.name().toString(), EHLO);, +        COMMANDS.put(HELO.name().toString(), HELO);, +        COMMANDS.put(MAIL.name().toString(), MAIL);, +        COMMANDS.put(RCPT.name().toString(), RCPT);, +        COMMANDS.put(DATA.name().toString(), DATA);, +        COMMANDS.put(NOOP.name().toString(), NOOP);, +        COMMANDS.put(RSET.name().toString(), RSET);, +        COMMANDS.put(EXPN.name().toString(), EXPN);, +        COMMANDS.put(VRFY.name().toString(), VRFY);, +        COMMANDS.put(HELP.name().toString(), HELP);, +        COMMANDS.put(QUIT.name().toString(), QUIT);, +        ObjectUtil.checkNotNull(commandName, "commandName");, +        SmtpCommand command = COMMANDS.get(commandName.toString());, +        return command != null ? command : new SmtpCommand(AsciiString.of(commandName));, +    private SmtpCommand(AsciiString name) {, +        ByteBufUtil.writeAscii(buffer, name);, +        return this.equals(DATA);, +        return name.hashCode();, +        return "SmtpCommand{name=" + name + '}';, +++ b/codec-smtp/src/test/java/io/netty/handler/codec/smtp/SmtpCommandTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.smtp;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +, +public class SmtpCommandTest {, +    @Test, +    public void getCommandFromCache() {, +        assertSame(SmtpCommand.DATA, SmtpCommand.valueOf("DATA"));, +        assertSame(SmtpCommand.EHLO, SmtpCommand.valueOf("EHLO"));, +        assertNotSame(SmtpCommand.EHLO, SmtpCommand.valueOf("ehlo"));, +    }, +, +    @Test, +    public void equalsIgnoreCase() {, +        assertEquals(SmtpCommand.MAIL, SmtpCommand.valueOf("mail"));, +        assertEquals(SmtpCommand.valueOf("test"), SmtpCommand.valueOf("TEST"));, +    }, +]