[+++ b/src/main/java/org/jboss/netty/handler/codec/base64/Base64.java, +import org.jboss.netty.buffer.ChannelBufferFactory;, +import org.jboss.netty.buffer.HeapChannelBufferFactory;, +    private static final int MAX_LINE_LENGTH = 76;, +    private static final byte EQUALS_SIGN = (byte) '=';, +    private static final byte NEW_LINE = (byte) '\n';, +    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding, +    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding, +    private static final byte[] alphabet(Base64Dialect dialect) {, +    private static final byte[] decodabet(Base64Dialect dialect) {, +    private static final boolean breakLines(Base64Dialect dialect) {, +        if (dialect == null) {, +            throw new NullPointerException("dialect");, +        }, +        return breakLines(dialect);, +    }, +, +        return encode(src, Base64Dialect.STANDARD);, +    }, +, +    public static ChannelBuffer encode(ChannelBuffer src, Base64Dialect dialect) {, +        return encode(src, breakLines(dialect), dialect);, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, ChannelBufferFactory bufferFactory) {, +        return encode(src, Base64Dialect.STANDARD, bufferFactory);, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, Base64Dialect dialect, ChannelBufferFactory bufferFactory) {, +        return encode(src, breakLines(dialect), dialect, bufferFactory);, +        return encode(src, breakLines, dialect, HeapChannelBufferFactory.getInstance());, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, boolean breakLines, ChannelBufferFactory bufferFactory) {, +        return encode(src, breakLines, Base64Dialect.STANDARD, bufferFactory);, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, boolean breakLines, Base64Dialect dialect, ChannelBufferFactory bufferFactory) {, +, +        if (src == null) {, +            throw new NullPointerException("src");, +        }, +, +                src, src.readerIndex(), src.readableBytes(), breakLines, dialect, bufferFactory);, +        return encode(src, off, len, Base64Dialect.STANDARD);, +    }, +, +    public static ChannelBuffer encode(ChannelBuffer src, int off, int len, Base64Dialect dialect) {, +        return encode(src, off, len, breakLines(dialect), dialect);, +    }, +, +    public static ChannelBuffer encode(ChannelBuffer src, int off, int len, ChannelBufferFactory bufferFactory) {, +        return encode(src, off, len, Base64Dialect.STANDARD, bufferFactory);, +    }, +, +    public static ChannelBuffer encode(ChannelBuffer src, int off, int len, Base64Dialect dialect, ChannelBufferFactory bufferFactory) {, +        return encode(src, off, len, breakLines(dialect), dialect, bufferFactory);, +        return encode(src, off, len, breakLines, dialect, HeapChannelBufferFactory.getInstance());, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, int off, int len,, +            boolean breakLines, ChannelBufferFactory bufferFactory) {, +        return encode(src, off, len, breakLines, Base64Dialect.STANDARD, bufferFactory);, +    }, +, +    public static ChannelBuffer encode(, +            ChannelBuffer src, int off, int len,, +            boolean breakLines, Base64Dialect dialect, ChannelBufferFactory bufferFactory) {, +, +        if (src == null) {, +            throw new NullPointerException("src");, +        }, +        if (dialect == null) {, +            throw new NullPointerException("dialect");, +        }, +        if (bufferFactory == null) {, +            throw new NullPointerException("bufferFactory");, +        }, +        ChannelBuffer dest = bufferFactory.getBuffer(, +                len43 +, +                (len % 3 > 0? 4 : 0) + // Account for padding, +                (breakLines? len43 / MAX_LINE_LENGTH : 0)); // New lines, +                dest.setByte(e + 4, NEW_LINE);, +        return dest.slice(0, e);, +    private static void encode3to4(, +            ChannelBuffer dest, int destOffset, Base64Dialect dialect) {, +        byte[] ALPHABET = alphabet(dialect);, +            dest.setByte(destOffset    , ALPHABET[inBuff >>> 18       ]);, +            dest.setByte(destOffset + 1, ALPHABET[inBuff >>> 12 & 0x3f]);, +            dest.setByte(destOffset + 2, ALPHABET[inBuff >>>  6 & 0x3f]);, +            dest.setByte(destOffset + 3, ALPHABET[inBuff        & 0x3f]);, +            dest.setByte(destOffset    , ALPHABET[inBuff >>> 18       ]);, +            dest.setByte(destOffset + 1, ALPHABET[inBuff >>> 12 & 0x3f]);, +            dest.setByte(destOffset + 2, ALPHABET[inBuff >>> 6  & 0x3f]);, +            dest.setByte(destOffset + 3, EQUALS_SIGN);]