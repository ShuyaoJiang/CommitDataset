[+++ b/handler/src/main/java/io/netty/handler/ssl/AbstractSniHandler.java, +            } catch (NotSslRecordException e) {, +                // Just rethrow as in this case we also closed the channel and this is consistent with SslHandler., +                throw e;, +            } catch (Exception e) {, +++ b/handler/src/main/java/io/netty/handler/ssl/AbstractSniHandler.java, +            } catch (NotSslRecordException e) {, +                // Just rethrow as in this case we also closed the channel and this is consistent with SslHandler., +                throw e;, +            } catch (Exception e) {, +++ b/handler/src/test/java/io/netty/handler/ssl/SniHandlerTest.java, +    public void testNonSslRecord() throws Exception {, +        SslContext nettyContext = makeSslContext(provider, false);, +        try {, +            final AtomicReference<SslHandshakeCompletionEvent> evtRef =, +                    new AtomicReference<SslHandshakeCompletionEvent>();, +            SniHandler handler = new SniHandler(new DomainNameMappingBuilder<SslContext>(nettyContext).build());, +            EmbeddedChannel ch = new EmbeddedChannel(handler, new ChannelInboundHandlerAdapter() {, +                @Override, +                public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {, +                    if (evt instanceof SslHandshakeCompletionEvent) {, +                        assertTrue(evtRef.compareAndSet(null, (SslHandshakeCompletionEvent) evt));, +                    }, +                }, +            });, +, +            try {, +                byte[] bytes = new byte[1024];, +                bytes[0] = SslUtils.SSL_CONTENT_TYPE_ALERT;, +, +                try {, +                    ch.writeInbound(Unpooled.wrappedBuffer(bytes));, +                    fail();, +                } catch (DecoderException e) {, +                    assertTrue(e.getCause() instanceof NotSslRecordException);, +                }, +                assertFalse(ch.finish());, +            } finally {, +                ch.finishAndReleaseAll();, +            }, +            assertTrue(evtRef.get().cause() instanceof NotSslRecordException);, +        } finally {, +            releaseAll(nettyContext);, +        }, +    }, +, +    @Test]