[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +    /**, +     * Convert the given ciphers if needed to OpenSSL format and append them to the correct {@link StringBuilder}, +     * depending on if its a TLSv1.3 cipher or not. If this methods returns without throwing an exception its, +     * guaranteed that at least one of the {@link StringBuilder}s contain some ciphers that can be used to configure, +     * OpenSSL., +     */, +    static void convertToCipherStrings(, +            Iterable<String> cipherSuites, StringBuilder cipherBuilder, StringBuilder cipherTLSv13Builder) {, +        for (String c: cipherSuites) {, +            if (c == null) {, +                break;, +            }, +, +            String converted = toOpenSsl(c);, +            if (converted == null) {, +                converted = c;, +            }, +, +            if (!OpenSsl.isCipherSuiteAvailable(converted)) {, +                throw new IllegalArgumentException("unsupported cipher suite: " + c + '(' + converted + ')');, +            }, +, +            if (SslUtils.isTLSv13Cipher(converted)) {, +                cipherTLSv13Builder.append(converted);, +                cipherTLSv13Builder.append(':');, +            } else {, +                cipherBuilder.append(converted);, +                cipherBuilder.append(':');, +            }, +        }, +, +        if (cipherBuilder.length() == 0 && cipherTLSv13Builder.length() == 0) {, +            throw new IllegalArgumentException("empty cipher suites");, +        }, +        if (cipherBuilder.length() > 0) {, +            cipherBuilder.setLength(cipherBuilder.length() - 1);, +        }, +        if (cipherTLSv13Builder.length() > 0) {, +            cipherTLSv13Builder.setLength(cipherTLSv13Builder.length() - 1);, +        }, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +    /**, +     * Convert the given ciphers if needed to OpenSSL format and append them to the correct {@link StringBuilder}, +     * depending on if its a TLSv1.3 cipher or not. If this methods returns without throwing an exception its, +     * guaranteed that at least one of the {@link StringBuilder}s contain some ciphers that can be used to configure, +     * OpenSSL., +     */, +    static void convertToCipherStrings(, +            Iterable<String> cipherSuites, StringBuilder cipherBuilder, StringBuilder cipherTLSv13Builder) {, +        for (String c: cipherSuites) {, +            if (c == null) {, +                break;, +            }, +, +            String converted = toOpenSsl(c);, +            if (converted == null) {, +                converted = c;, +            }, +, +            if (!OpenSsl.isCipherSuiteAvailable(converted)) {, +                throw new IllegalArgumentException("unsupported cipher suite: " + c + '(' + converted + ')');, +            }, +, +            if (SslUtils.isTLSv13Cipher(converted)) {, +                cipherTLSv13Builder.append(converted);, +                cipherTLSv13Builder.append(':');, +            } else {, +                cipherBuilder.append(converted);, +                cipherBuilder.append(':');, +            }, +        }, +, +        if (cipherBuilder.length() == 0 && cipherTLSv13Builder.length() == 0) {, +            throw new IllegalArgumentException("empty cipher suites");, +        }, +        if (cipherBuilder.length() > 0) {, +            cipherBuilder.setLength(cipherBuilder.length() - 1);, +        }, +        if (cipherTLSv13Builder.length() > 0) {, +            cipherTLSv13Builder.setLength(cipherTLSv13Builder.length() - 1);, +        }, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +import io.netty.util.ReferenceCountUtil;, +import java.security.Provider;, +import java.util.LinkedHashSet;, +    private static final List<String> DEFAULT_CIPHERS_NON_TLSV13;, +    private static final Set<String> SUPPORTED_CIPHERS_NON_TLSV13;, +    private static final Provider DEFAULT_PROVIDER;, +        DEFAULT_PROVIDER = context.getProvider();, +        SSLEngine engine = context.createSSLEngine();, +        DEFAULT_PROTOCOLS = defaultProtocols(engine);, +, +        SUPPORTED_CIPHERS = Collections.unmodifiableSet(supportedCiphers(engine));, +        DEFAULT_CIPHERS = Collections.unmodifiableList(defaultCiphers(engine, SUPPORTED_CIPHERS));, +]