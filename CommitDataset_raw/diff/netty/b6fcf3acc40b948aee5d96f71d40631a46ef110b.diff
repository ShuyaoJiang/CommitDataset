[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +            DefaultChannelHandlerContext next = findContextInbound(, +            DefaultChannelHandlerContext nextCtx = findContextInbound(ctx.next, FLAG_STATE_HANDLER);, +            DefaultChannelHandlerContext nextCtx = findContextOutbound(ctx.prev, FLAG_OPERATION_HANDLER);, +        return pipeline.findOutboundByteBuffer(prev);, +        return pipeline.findOutboundMessageBuffer(prev);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        return pipeline.bind(findContextOutbound(prev, FLAG_OPERATION_HANDLER), localAddress, promise);, +        return pipeline.connect(, +                findContextOutbound(prev, FLAG_OPERATION_HANDLER), remoteAddress, localAddress, promise);, +        return pipeline.disconnect(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        return pipeline.close(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        return pipeline.deregister(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        pipeline.read(findContextOutbound(prev, FLAG_OPERATION_HANDLER));, +            DefaultChannelHandlerContext prev = findContextOutbound(this.prev, FLAG_OPERATION_HANDLER);, +        return pipeline.sendFile(findContextOutbound(prev, FLAG_OPERATION_HANDLER), region, newPromise());, +        return pipeline.sendFile(findContextOutbound(prev, FLAG_OPERATION_HANDLER), region, promise);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +            DefaultChannelHandlerContext next = findContextInbound(, +            DefaultChannelHandlerContext nextCtx = findContextInbound(ctx.next, FLAG_STATE_HANDLER);, +            DefaultChannelHandlerContext nextCtx = findContextOutbound(ctx.prev, FLAG_OPERATION_HANDLER);, +        return pipeline.findOutboundByteBuffer(prev);, +        return pipeline.findOutboundMessageBuffer(prev);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        DefaultChannelHandlerContext next = findContextInbound(this.next, FLAG_STATE_HANDLER);, +        return pipeline.bind(findContextOutbound(prev, FLAG_OPERATION_HANDLER), localAddress, promise);, +        return pipeline.connect(, +                findContextOutbound(prev, FLAG_OPERATION_HANDLER), remoteAddress, localAddress, promise);, +        return pipeline.disconnect(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        return pipeline.close(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        return pipeline.deregister(findContextOutbound(prev, FLAG_OPERATION_HANDLER), promise);, +        pipeline.read(findContextOutbound(prev, FLAG_OPERATION_HANDLER));, +            DefaultChannelHandlerContext prev = findContextOutbound(this.prev, FLAG_OPERATION_HANDLER);, +        return pipeline.sendFile(findContextOutbound(prev, FLAG_OPERATION_HANDLER), region, newPromise());, +        return pipeline.sendFile(findContextOutbound(prev, FLAG_OPERATION_HANDLER), region, promise);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    final DefaultChannelHandlerContext tail;, +        tail = new DefaultChannelHandlerContext(, +                this, null, null, tail, generateName(headHandler), headHandler);, +        tail.prev = head;, +            newCtx = new DefaultChannelHandlerContext(this, group, null, null, name, handler);, +                addFirst0(name, newCtx);, +                    addFirst0(name, newCtx);, +    private void addFirst0(String name, DefaultChannelHandlerContext newCtx) {, +        DefaultChannelHandlerContext nextCtx = head.next;, +        newCtx.prev = head;, +        newCtx.next = nextCtx;, +        nextCtx.prev = newCtx;, +        final DefaultChannelHandlerContext newCtx;, +            newCtx = new DefaultChannelHandlerContext(this, group, null, null, name, handler);, +            if (!newCtx.channel().isRegistered() || newCtx.executor().inEventLoop()) {, +                addLast0(name, newCtx);, +        newCtx.executeOnEventLoop(new Runnable() {, +                    addLast0(name, newCtx);, +            final String name, DefaultChannelHandlerContext newCtx) {, +        callBeforeAdd(newCtx);, +        DefaultChannelHandlerContext prev = tail.prev;, +        prev.next = newCtx;, +        newCtx.prev = prev;, +        newCtx.next = tail;, +        tail.prev = newCtx;, +        name2ctx.put(name, newCtx);, +        callAfterAdd(newCtx);, +            newCtx = new DefaultChannelHandlerContext(this, group, null, null, name, handler);, +        newCtx.prev = ctx;, +        newCtx.next = ctx.next;, +, +        assert ctx != head && ctx != tail;, +, +        if (head.next == tail) {, +        if (head.next == tail) {, +        return remove(tail.prev).handler();, +, +        assert ctx != head && ctx != tail;, +, +                    new DefaultChannelHandlerContext(this, ctx.executor, null, null, newName, newHandler);, +        newCtx.prev = prev;, +        newCtx.next = next;, +        DefaultChannelHandlerContext last = tail.prev;, +        if (last == head) {, +        DefaultChannelHandlerContext last = tail.prev;, +        if (last == head) {, +            if (ctx == tail) {, +            if (ctx == tail) {, +        return (MessageBuf<T>) findOutboundMessageBuffer(tail.prev);, +        return findOutboundByteBuffer(tail.prev);, +    ByteBuf findOutboundByteBuffer(DefaultChannelHandlerContext ctx) {, +    MessageBuf<Object> findOutboundMessageBuffer(DefaultChannelHandlerContext ctx) {, +        return write(tail.prev, message, promise);, +        return findContextOutbound(tail.prev, flag);, +    static DefaultChannelHandlerContext findContextInbound(DefaultChannelHandlerContext ctx, int flag) {, +    static DefaultChannelHandlerContext findContextOutbound(DefaultChannelHandlerContext ctx, int flag) {, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java]