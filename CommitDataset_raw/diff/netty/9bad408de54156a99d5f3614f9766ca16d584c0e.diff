[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.PING_FRAME_PAYLOAD_LENGTH;, +        clientPrefaceString = clientPrefaceString(encoder.connection());, +    /**, +     * Releases the {@code clientPrefaceString}. Any active streams will be left in the open., +     */, +        if (clientPrefaceString != null) {, +            clientPrefaceString.release();, +            clientPrefaceString = null;, +        }, +        try {, +        } finally {, +            try {, +                encoder().close();, +            } finally {, +                decoder().close();, +            }, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.PING_FRAME_PAYLOAD_LENGTH;, +        clientPrefaceString = clientPrefaceString(encoder.connection());, +    /**, +     * Releases the {@code clientPrefaceString}. Any active streams will be left in the open., +     */, +        if (clientPrefaceString != null) {, +            clientPrefaceString.release();, +            clientPrefaceString = null;, +        }, +        try {, +        } finally {, +            try {, +                encoder().close();, +            } finally {, +                decoder().close();, +            }, +        }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +    private Http2ConnectionHandler newHandler() throws Exception {, +        Http2ConnectionHandler handler = new Http2ConnectionHandler(decoderBuilder, encoderBuilder);, +        handler.handlerAdded(ctx);, +        return handler;, +        if (handler != null) {, +    }, +        when(channel.isActive()).thenReturn(false);, +        handler = newHandler();, +        when(channel.isActive()).thenReturn(true);, +        when(channel.isActive()).thenReturn(false);, +        handler = newHandler();, +        when(channel.isActive()).thenReturn(true);, +        handler = newHandler();, +        handler = newHandler();, +        handler = newHandler();, +, +    @Test, +    public void encoderAndDecoderAreClosedOnChannelInactive() throws Exception {, +        handler = newHandler();, +        handler.channelActive(ctx);, +        when(channel.isActive()).thenReturn(false);, +        handler.channelInactive(ctx);, +        verify(encoder).close();, +        verify(decoder).close();, +    }]