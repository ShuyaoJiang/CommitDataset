[+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +        queue.add(new PendingWrite(msg, promise));, +            Object message = currentWrite.msg;, +                        currentWrite.fail(cause);, +                        currentWrite.promise.setSuccess();, +                    currentWrite.fail(e);, +                currentWrite.fail(cause);, +            final Object pendingMessage = currentWrite.msg;, +                    currentWrite.fail(t);, +                    if (ctx.executor().inEventLoop()) {, +                        ctx.fireExceptionCaught(t);, +                    } else {, +                        ctx.executor().execute(new Runnable() {, +                            @Override, +                            public void run() {, +                                ctx.fireExceptionCaught(t);, +                            }, +                        });, +                    }, +, +                            currentWrite.promise.setSuccess();, +                                currentWrite.fail(future.cause());, +                                currentWrite.progress();, +                                currentWrite.fail(future.cause());, +                                currentWrite.progress();, +                ctx.write(pendingMessage, currentWrite.promise);, +    static void closeInput(ChunkedInput<?> chunks) {, +    private static final class PendingWrite {, +        final Object msg;, +        final ChannelPromise promise;, +        private long progress;, +, +        PendingWrite(Object msg, ChannelPromise promise) {, +            this.msg = msg;, +            this.promise = promise;, +        }, +, +        void fail(Throwable cause) {, +            ReferenceCountUtil.release(msg);, +            if (promise != null) {, +                promise.setFailure(cause);, +            }, +        }, +, +        void progress() {, +}]