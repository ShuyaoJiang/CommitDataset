[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +++ b/common/src/main/java/io/netty/util/internal/NonReentrantLock.java, +/**, + * A custom implementation of a lock that does not allow reentry, + */, +    /**, +     * The serial version unique ID, +     */, +    /**, +     * The {@link Thread} that owns this {@link NonReentrantLock}, +     */, +    /**, +     * Locks this {@link NonReentrantLock}, +     */, +    /**, +     * Locks this {@link NonReentrantLock}, but allow interruption, +     *, +     * @throws InterruptedException The lock was interrupted, +     */, +    /**, +     * Try to lock this {@link NonReentrantLock}, +     *, +     * @return True if locking was successful, otherwise false, +     */, +    /**, +     * Tries to lock this {@link NonReentrantLock} over a period of time, +     *, +     * @param time The maximum number of time units to attempt to get a lock for., +     * @param unit The {@link TimeUnit} associated with the time parameter, +     * @return True if the lock was successful, otherwise false, +     * @throws InterruptedException The locking attempt was interrupted, +     */, +    /**, +     * Unlocks this {@link NonReentrantLock}, +     */, +    /**, +     * Checks to see if this {@link NonReentrantLock} is held by the current {@link Thread}, +     *, +     * @return True if held by the current thread, otherwise false, +     */, +    /**, +     * Creates a new {@link Condition}, +     *, +     * @return The condition object, +     */, +    /**, +     * Try to acquire a lock, +     *, +     * @param acquires A number that is sent by acquiring methods, +     * @return True if a lock is acquired, otherwise false, +     */, +    /**, +     * Tries to release the lock, +     *, +     * @param releases A number that is passed by the release methods, +     * @return True if a release is granted, otherwise false, +     */, +    /**, +     * Checks to see if this {@link NonReentrantLock} is held exclusively by the current {@link Thread}, +     *, +     * @return True if held exclusively, otherwise false, +     */]