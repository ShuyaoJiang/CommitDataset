[+++ b/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +                if (actualTypeParam instanceof ParameterizedType) {, +                    actualTypeParam = ((ParameterizedType) actualTypeParam).getRawType();, +                }, +                if (actualTypeParam instanceof GenericArrayType) {, +                    Type componentType = ((GenericArrayType) actualTypeParam).getGenericComponentType();, +                    if (componentType instanceof ParameterizedType) {, +                        componentType = ((ParameterizedType) componentType).getRawType();, +                    }, +                    if (componentType instanceof Class) {, +                        return Array.newInstance((Class<?>) componentType, 0).getClass();, +                    }, +++ b/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java, +import java.lang.reflect.Array;, +import java.lang.reflect.GenericArrayType;, +                if (actualTypeParam instanceof ParameterizedType) {, +                    actualTypeParam = ((ParameterizedType) actualTypeParam).getRawType();, +                }, +                if (actualTypeParam instanceof GenericArrayType) {, +                    Type componentType = ((GenericArrayType) actualTypeParam).getGenericComponentType();, +                    if (componentType instanceof ParameterizedType) {, +                        componentType = ((ParameterizedType) componentType).getRawType();, +                    }, +                    if (componentType instanceof Class) {, +                        return Array.newInstance((Class<?>) componentType, 0).getClass();, +                    }, +++ b/common/src/test/java/io/netty/util/internal/TypeParameterMatcherTest.java, +, +    @Test, +    public void testArrayAsTypeParam() throws Exception {, +        TypeParameterMatcher m = TypeParameterMatcher.find(new U<byte[]>() { }, U.class, "E");, +        assertFalse(m.match(new Object()));, +        assertTrue(m.match(new byte[1]));, +    }]