[+++ b/src/main/java/org/jboss/netty/channel/Channel.java, +import java.net.InetSocketAddress;, +     * Returns {@code true} if and only if this channel is open., +     * Returns {@code true} if and only if this channel is bound to a, +     * Returns {@code true} if and only if this channel is connected to a, +     * Returns the local address where this channel is bound to.  The returned, +     * {@link SocketAddress} is supposed to be down-cast into more concrete, +     * type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     * Returns the remote address where this channel is connected to.  The, +     * returned {@link SocketAddress} is supposed to be down-cast into more, +     * concrete type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     * @param remoteAddress where to send the specified message., +     *                      This method is identical to {@link #write(Object)}, +     *                      if {@code null} is specified here., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +import java.net.InetSocketAddress;, +     * Returns {@code true} if and only if this channel is open., +     * Returns {@code true} if and only if this channel is bound to a, +     * Returns {@code true} if and only if this channel is connected to a, +     * Returns the local address where this channel is bound to.  The returned, +     * {@link SocketAddress} is supposed to be down-cast into more concrete, +     * type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     * Returns the remote address where this channel is connected to.  The, +     * returned {@link SocketAddress} is supposed to be down-cast into more, +     * concrete type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     * @param remoteAddress where to send the specified message., +     *                      This method is identical to {@link #write(Object)}, +     *                      if {@code null} is specified here., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * An I/O event or I/O request associated with a {@link Channel}., + * <p>, + * A {@link ChannelEvent} is supposed to be handled by the, + * {@link ChannelPipeline} which is owned by the {@link Channel} that, + * the event belongs to.  Once an event is sent to a {@link ChannelPipeline},, + * it is handled by a list of {@link ChannelHandler}s., +, +    /**, +     * Returns the {@link Channel} which is associated with this event., +     */, +, +    /**, +     * Returns the {@link ChannelFuture} which is associated with this event., +     * If this event is a upstream event, this method will always return a, +     * {@link SucceededChannelFuture} because the event has occurred already., +     * If this event is a downstream event (i.e. I/O request), the returned, +     * future will be notified when the I/O request succeeds or fails., +     */, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +import java.net.InetSocketAddress;, +     * Returns {@code true} if and only if this channel is open., +     * Returns {@code true} if and only if this channel is bound to a, +     * Returns {@code true} if and only if this channel is connected to a, +     * Returns the local address where this channel is bound to.  The returned, +     * {@link SocketAddress} is supposed to be down-cast into more concrete, +     * type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     * Returns the remote address where this channel is connected to.  The, +     * returned {@link SocketAddress} is supposed to be down-cast into more, +     * concrete type such as {@link InetSocketAddress} to retrieve the detailed, +     * information., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     * @param remoteAddress where to send the specified message., +     *                      This method is identical to {@link #write(Object)}, +     *                      if {@code null} is specified here., +     *, +     * @throws NullPointerException if the specified message is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +     *, +     * @throws NullPointerException if the specified address is {@code null}, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * An I/O event or I/O request associated with a {@link Channel}., + * <p>, + * A {@link ChannelEvent} is supposed to be handled by the, + * {@link ChannelPipeline} which is owned by the {@link Channel} that, + * the event belongs to.  Once an event is sent to a {@link ChannelPipeline},, + * it is handled by a list of {@link ChannelHandler}s., +, +    /**]