[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import java.util.Collections;, +import java.util.List;, +, +import static io.netty.handler.codec.http.HttpMethod.OPTIONS;, +import static io.netty.handler.codec.http.HttpResponseStatus.FORBIDDEN;, +import static io.netty.handler.codec.http.HttpResponseStatus.OK;, +import static io.netty.util.ReferenceCountUtil.release;, +import static io.netty.util.internal.ObjectUtil.checkNonEmpty;, + * This handler can be configured using one or more {@link CorsConfig}, please, +    private CorsConfig config;, +    private final List<CorsConfig> configList;, +    private boolean isShortCircuit;, +     * Creates a new instance with a single {@link CorsConfig}., +        this(Collections.singletonList(config), config.isShortCircuit());, +    }, +, +    /**, +     * Creates a new instance with the specified config list. If more than one, +     * config matches a certain origin, the first in the List will be used., +     *, +     * @param configList     List of {@link CorsConfig}, +     * @param isShortCircuit Same as {@link CorsConfig#shortCircuit} but applicable to all supplied configs., +     */, +    public CorsHandler(final List<CorsConfig> configList, boolean isShortCircuit) {, +        checkNonEmpty(configList, "configList");, +        this.configList = configList;, +        this.isShortCircuit = isShortCircuit;, +        if (msg instanceof HttpRequest) {, +            final String origin = request.headers().get(HttpHeaderNames.ORIGIN);, +            config = getForOrigin(origin);, +            if (isShortCircuit && !(origin == null || config != null)) {, +    private CorsConfig getForOrigin(String requestOrigin) {, +        for (CorsConfig corsConfig : configList) {, +            if (corsConfig.isAnyOriginSupported()) {, +                return corsConfig;, +            }, +            if (corsConfig.origins().contains(requestOrigin)) {, +                return corsConfig;, +            }, +            if (corsConfig.isNullOriginAllowed() || NULL_ORIGIN.equals(requestOrigin)) {, +                return corsConfig;, +            }, +        }, +        return null;, +    }, +, +        if (config != null && config.isCorsSupportEnabled() && msg instanceof HttpResponse) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import java.util.Collections;, +import java.util.List;, +, +import static io.netty.handler.codec.http.HttpMethod.OPTIONS;, +import static io.netty.handler.codec.http.HttpResponseStatus.FORBIDDEN;, +import static io.netty.handler.codec.http.HttpResponseStatus.OK;, +import static io.netty.util.ReferenceCountUtil.release;, +import static io.netty.util.internal.ObjectUtil.checkNonEmpty;, + * This handler can be configured using one or more {@link CorsConfig}, please, +    private CorsConfig config;, +    private final List<CorsConfig> configList;, +    private boolean isShortCircuit;, +     * Creates a new instance with a single {@link CorsConfig}., +        this(Collections.singletonList(config), config.isShortCircuit());, +    }, +, +    /**, +     * Creates a new instance with the specified config list. If more than one, +     * config matches a certain origin, the first in the List will be used., +     *, +     * @param configList     List of {@link CorsConfig}, +     * @param isShortCircuit Same as {@link CorsConfig#shortCircuit} but applicable to all supplied configs., +     */, +    public CorsHandler(final List<CorsConfig> configList, boolean isShortCircuit) {, +        checkNonEmpty(configList, "configList");, +        this.configList = configList;, +        this.isShortCircuit = isShortCircuit;, +        if (msg instanceof HttpRequest) {, +            final String origin = request.headers().get(HttpHeaderNames.ORIGIN);, +            config = getForOrigin(origin);, +            if (isShortCircuit && !(origin == null || config != null)) {, +    private CorsConfig getForOrigin(String requestOrigin) {, +        for (CorsConfig corsConfig : configList) {, +            if (corsConfig.isAnyOriginSupported()) {, +                return corsConfig;, +            }, +            if (corsConfig.origins().contains(requestOrigin)) {, +                return corsConfig;, +            }, +            if (corsConfig.isNullOriginAllowed() || NULL_ORIGIN.equals(requestOrigin)) {, +                return corsConfig;, +            }, +        }, +        return null;, +    }, +, +        if (config != null && config.isCorsSupportEnabled() && msg instanceof HttpResponse) {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/cors/CorsHandlerTest.java, +import org.hamcrest.core.IsEqual;, +import java.util.Collections;, +import java.util.List;]