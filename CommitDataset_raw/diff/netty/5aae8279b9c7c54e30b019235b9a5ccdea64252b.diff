[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +import io.netty.buffer.ChannelBuffers;, +    private final SpdyZlibDecoder headerBlockDecompressor = new SpdyZlibDecoder();, +            int readerIndex = buffer.readerIndex();, +            buffer.skipBytes(dataLength);, +            return decodeControlFrame(type, flags, buffer.slice(readerIndex, dataLength));, +            decodeHeaderBlock(spdySynStreamFrame, data);, +            decodeHeaderBlock(spdySynReplyFrame, data);, +            decodeHeaderBlock(spdyHeadersFrame, data);, +    private boolean ensureBytes(ChannelBuffer decompressed, int bytes) throws Exception {, +        if (decompressed.readableBytes() >= bytes) {, +            return true;, +        decompressed.discardReadBytes();, +        headerBlockDecompressor.decode(decompressed);, +        return decompressed.readableBytes() >= bytes;, +        if ((headerBlock.readableBytes() == 2) &&, +            (headerBlock.getShort(headerBlock.readerIndex()) == 0)) {, +            return;, +        }, +, +        headerBlockDecompressor.setInput(headerBlock);, +        ChannelBuffer decompressed = ChannelBuffers.dynamicBuffer(8192);, +        headerBlockDecompressor.decode(decompressed);, +, +        if (decompressed.readableBytes() < 2) {, +        int numEntries = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, 2)) {, +            int nameLength = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, nameLength)) {, +            decompressed.readBytes(nameBytes);, +            if (!ensureBytes(decompressed, 2)) {, +            int valueLength = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, valueLength)) {, +            decompressed.readBytes(valueBytes);, +            while (index < valueLength) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +import io.netty.buffer.ChannelBuffers;, +    private final SpdyZlibDecoder headerBlockDecompressor = new SpdyZlibDecoder();, +            int readerIndex = buffer.readerIndex();, +            buffer.skipBytes(dataLength);, +            return decodeControlFrame(type, flags, buffer.slice(readerIndex, dataLength));, +            decodeHeaderBlock(spdySynStreamFrame, data);, +            decodeHeaderBlock(spdySynReplyFrame, data);, +            decodeHeaderBlock(spdyHeadersFrame, data);, +    private boolean ensureBytes(ChannelBuffer decompressed, int bytes) throws Exception {, +        if (decompressed.readableBytes() >= bytes) {, +            return true;, +        decompressed.discardReadBytes();, +        headerBlockDecompressor.decode(decompressed);, +        return decompressed.readableBytes() >= bytes;, +        if ((headerBlock.readableBytes() == 2) &&, +            (headerBlock.getShort(headerBlock.readerIndex()) == 0)) {, +            return;, +        }, +, +        headerBlockDecompressor.setInput(headerBlock);, +        ChannelBuffer decompressed = ChannelBuffers.dynamicBuffer(8192);, +        headerBlockDecompressor.decode(decompressed);, +, +        if (decompressed.readableBytes() < 2) {, +        int numEntries = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, 2)) {, +            int nameLength = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, nameLength)) {, +            decompressed.readBytes(nameBytes);, +            if (!ensureBytes(decompressed, 2)) {, +            int valueLength = decompressed.readUnsignedShort();, +            if (!ensureBytes(decompressed, valueLength)) {, +            decompressed.readBytes(valueBytes);, +            while (index < valueLength) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +import static io.netty.handler.codec.spdy.SpdyCodecUtil.*;, +, +import io.netty.channel.ChannelEvent;, +import io.netty.channel.ChannelStateEvent;, +    private volatile boolean finished;, +    private final SpdyZlibEncoder headerBlockCompressor;, +        headerBlockCompressor = new SpdyZlibEncoder(compressionLevel);, +    }, +, +    @Override, +    public void handleDownstream(, +            ChannelHandlerContext ctx, ChannelEvent evt) throws Exception {, +        if (evt instanceof ChannelStateEvent) {, +            ChannelStateEvent e = (ChannelStateEvent) evt;, +            switch (e.getState()) {, +            case OPEN:, +            case CONNECTED:, +            case BOUND:, +                if (Boolean.FALSE.equals(e.getValue()) || e.getValue() == null) {, +                    synchronized (headerBlockCompressor) {, +                        finished = true;, +                        headerBlockCompressor.end();, +                    }, +                }, +            }, +        }, +        super.handleDownstream(ctx, evt);, +        ChannelBuffer compressed = ChannelBuffers.dynamicBuffer();, +        synchronized (headerBlockCompressor) {]