[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsServerAddressStreamProvider.java, +import javax.naming.Context;, +import javax.naming.NamingException;, +import javax.naming.directory.DirContext;, +import javax.naming.directory.InitialDirContext;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.Hashtable;, +, +        // Using jndi-dns to obtain the default name servers., +        //, +        // See:, +        // - http://docs.oracle.com/javase/8/docs/technotes/guides/jndi/jndi-dns.html, +        // - http://mail.openjdk.java.net/pipermail/net-dev/2017-March/010695.html, +        Hashtable<String, String> env = new Hashtable<String, String>();, +        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.dns.DnsContextFactory");, +        env.put("java.naming.provider.url", "dns://");, +        try {, +            DirContext ctx = new InitialDirContext(env);, +            String dnsUrls = (String) ctx.getEnvironment().get("java.naming.provider.url");, +            String[] servers = dnsUrls.split(" ");, +            for (String server : servers) {, +                try {, +                    defaultNameServers.add(SocketUtils.socketAddress(new URI(server).getHost(), DNS_PORT));, +                } catch (URISyntaxException e) {, +                    logger.debug("Skipping a malformed nameserver URI: {}", server, e);, +                }, +            }, +        } catch (NamingException ignore) {, +            // Will try reflection if this fails., +        }, +, +        if (defaultNameServers.isEmpty()) {, +                // Failed to get the system name server list via reflection., +        }]