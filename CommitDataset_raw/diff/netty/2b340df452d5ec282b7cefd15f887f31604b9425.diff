[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +    private void shutdownOutput0(final ChannelPromise promise) {, +    private void shutdownInput0(final ChannelPromise promise) {, +        try {, +            fd().shutdown(true, false);, +            promise.setSuccess();, +        } catch (Throwable cause) {, +            promise.setFailure(cause);, +        }, +    }, +, +    private void shutdown0(final ChannelPromise promise) {, +        try {, +            fd().shutdown(true, true);, +            promise.setSuccess();, +        } catch (Throwable cause) {, +            promise.setFailure(cause);, +        }, +    }, +, +    @Override, +    public boolean isOutputShutdown() {, +        return fd().isOutputShutdown();, +    }, +, +    public boolean isShutdown() {, +        return fd().isShutdown();, +    public ChannelFuture shutdownInput() {, +        return shutdownInput(newPromise());, +    }, +, +    @Override, +    public ChannelFuture shutdownInput(final ChannelPromise promise) {, +        Executor closeExecutor = ((EpollStreamUnsafe) unsafe()).prepareToClose();, +        if (closeExecutor != null) {, +            closeExecutor.execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    shutdownInput0(promise);, +                }, +            });, +        } else {, +            EventLoop loop = eventLoop();, +            if (loop.inEventLoop()) {, +                shutdownInput0(promise);, +            } else {, +                loop.execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        shutdownInput0(promise);, +                    }, +                });, +            }, +        }, +        return promise;, +    }, +, +    @Override, +    public ChannelFuture shutdown() {, +        return shutdown(newPromise());, +    }, +, +    @Override, +    public ChannelFuture shutdown(final ChannelPromise promise) {, +        Executor closeExecutor = ((EpollStreamUnsafe) unsafe()).prepareToClose();, +        if (closeExecutor != null) {, +            closeExecutor.execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    shutdown0(promise);, +                }, +            });, +        } else {, +            EventLoop loop = eventLoop();, +            if (loop.inEventLoop()) {, +                shutdown0(promise);, +            } else {, +                loop.execute(new OneTimeTask() {, +                    @Override, +                    public void run() {, +                        shutdown0(promise);, +                    }, +                });, +            }, +        }, +        return promise;, +    }, +, +    @Override, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +    private void shutdownOutput0(final ChannelPromise promise) {, +    private void shutdownInput0(final ChannelPromise promise) {, +        try {, +            fd().shutdown(true, false);, +            promise.setSuccess();, +        } catch (Throwable cause) {, +            promise.setFailure(cause);, +        }, +    }, +]