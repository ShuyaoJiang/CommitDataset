[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +    private Charset charset;, +     * Set from the request ContentType the multipartDataBoundary and the possible charset., +        String[] dataBoundary = HttpPostRequestDecoder.getMultipartDataBoundary(contentType);, +        if (dataBoundary != null) {, +            multipartDataBoundary = dataBoundary[0];, +            if (dataBoundary.length > 1 && dataBoundary[1] != null) {, +                charset = Charset.forName(dataBoundary[1]);, +            }, +        } else {, +            multipartDataBoundary = null;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +    private Charset charset;, +     * Set from the request ContentType the multipartDataBoundary and the possible charset., +        String[] dataBoundary = HttpPostRequestDecoder.getMultipartDataBoundary(contentType);, +        if (dataBoundary != null) {, +            multipartDataBoundary = dataBoundary[0];, +            if (dataBoundary.length > 1 && dataBoundary[1] != null) {, +                charset = Charset.forName(dataBoundary[1]);, +            }, +        } else {, +            multipartDataBoundary = null;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +     * @return an array of String if multipartDataBoundary exists with the multipartDataBoundary, +     * as first element, charset if any as second (missing if not set), else null, +    protected static String[] getMultipartDataBoundary(String contentType) {, +        // Check if Post using "multipart/form-data; boundary=--89421926422648 [; charset=xxx]", +                HttpHeaders.Values.MULTIPART_FORM_DATA)) {, +            int mrank = 1, crank = 2;, +            if (headerContentType[1].toLowerCase().startsWith(, +                mrank = 1;, +                crank = 2;, +            } else if (headerContentType[2].toLowerCase().startsWith(, +                    HttpHeaders.Values.BOUNDARY)) {, +                mrank = 2;, +                crank = 1;, +            String[] boundary = StringUtil.split(headerContentType[mrank], '=');, +            if (boundary.length != 2) {, +                throw new ErrorDataDecoderException("Needs a boundary value");, +            }, +            if (headerContentType[crank].toLowerCase().startsWith(, +                    HttpHeaders.Values.CHARSET)) {, +                String[] charset = StringUtil.split(headerContentType[crank], '=');, +                if (charset.length > 1) {, +                    return new String[] {"--" + boundary[1], charset[1]};, +                }, +            }, +            return new String[] {"--" + boundary[1]};, +        }, +        return null;, +     * Split the very first line (Content-Type value) in 3 Strings, +     * @return the array of 3 Strings, +        int cStart;, +        int cEnd;, +            return new String[] { sb, "", "" };, +        bStart = HttpPostBodyUtil.findNonWhitespace(sb, aEnd + 1);, +        bEnd =  sb.indexOf(';', bStart);, +        if (bEnd == -1) {, +            return new String[] { sb.substring(aStart, aEnd), sb.substring(bStart, bEnd), "" };, +        }, +        cStart = HttpPostBodyUtil.findNonWhitespace(sb, bEnd + 1);, +        if (sb.charAt(bEnd - 1) == ' ') {, +            bEnd--;, +        }, +        cEnd = HttpPostBodyUtil.findEndOfString(sb);, +        return new String[] { sb.substring(aStart, aEnd), sb.substring(bStart, bEnd), sb.substring(cStart, cEnd) };]