[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +, +                    ensureContent(res);, +                    encodeFullResponse(newRes, (HttpContent) res, out);, +                    break;, +                    // Make the response chunked to simplify content transformation., +                    res.headers().remove(HttpHeaderNames.CONTENT_LENGTH);, +                    res.headers().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +, +    private void encodeFullResponse(HttpResponse newRes, HttpContent content, List<Object> out) {, +        int existingMessages = out.size();, +        encodeContent(content, out);, +, +        if (HttpUtil.isContentLengthSet(newRes)) {, +            // adjust the content-length header, +            int messageSize = 0;, +            for (int i = existingMessages; i < out.size(); i++) {, +                Object item = out.get(i);, +                if (item instanceof HttpContent) {, +                    messageSize += ((HttpContent) item).content().readableBytes();, +                }, +            }, +            HttpUtil.setContentLength(newRes, messageSize);, +        } else {, +            newRes.headers().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +, +                    ensureContent(res);, +                    encodeFullResponse(newRes, (HttpContent) res, out);, +                    break;, +                    // Make the response chunked to simplify content transformation., +                    res.headers().remove(HttpHeaderNames.CONTENT_LENGTH);, +                    res.headers().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +, +    private void encodeFullResponse(HttpResponse newRes, HttpContent content, List<Object> out) {, +        int existingMessages = out.size();, +        encodeContent(content, out);, +, +        if (HttpUtil.isContentLengthSet(newRes)) {, +            // adjust the content-length header, +            int messageSize = 0;, +            for (int i = existingMessages; i < out.size(); i++) {, +                Object item = out.get(i);, +                if (item instanceof HttpContent) {, +                    messageSize += ((HttpContent) item).content().readableBytes();, +                }, +            }, +            HttpUtil.setContentLength(newRes, messageSize);, +        } else {, +            newRes.headers().set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +        }, +    }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +    public void testFullContentWithContentLength() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        ch.writeInbound(newRequest());, +, +        FullHttpResponse fullRes = new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.OK,, +                Unpooled.copiedBuffer("Hello, World", CharsetUtil.US_ASCII));, +        fullRes.headers().set(HttpHeaderNames.CONTENT_LENGTH, fullRes.content().readableBytes());, +        ch.writeOutbound(fullRes);, +, +        HttpResponse res = ch.readOutbound();, +        assertThat(res, is(not(instanceOf(HttpContent.class))));, +, +        assertThat(res.headers().get(HttpHeaderNames.TRANSFER_ENCODING), is(nullValue()));, +        assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING), is("gzip"));, +, +        long contentLengthHeaderValue = HttpUtil.getContentLength(res);, +        long observedLength = 0;, +, +        HttpContent c = ch.readOutbound();, +        observedLength += c.content().readableBytes();, +        assertThat(ByteBufUtil.hexDump(c.content()), is("1f8b0800000000000000f248cdc9c9d75108cf2fca4901000000ffff"));, +        c.release();, +, +        c = ch.readOutbound();, +        observedLength += c.content().readableBytes();, +        assertThat(ByteBufUtil.hexDump(c.content()), is("0300c6865b260c000000"));, +        c.release();, +, +        LastHttpContent last = ch.readOutbound();, +        assertThat(last.content().readableBytes(), is(0));, +        last.release();, +, +        assertThat(ch.readOutbound(), is(nullValue()));, +        assertEquals(contentLengthHeaderValue, observedLength);, +    }, +, +    @Test, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +, +                    ensureContent(res);, +                    encodeFullResponse(newRes, (HttpContent) res, out);, +                    break;]