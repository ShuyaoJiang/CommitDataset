[+++ b/handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilterRule.java, +            /**, +             * Perform the shift on a long and downcast it to int afterwards., +             * This is necessary to handle a cidrPrefix of zero correctly., +             * The left shift operator on an int only uses the five least, +             * significant bits of the right-hand operand. Thus -1 << 32 evaluates, +             * to -1 instead of 0. The left shift operator applied on a long, +             * uses the six least significant bits., +             *, +             * Also see https://github.com/netty/netty/issues/2767, +             */, +            return (int) ((-1L << 32 - cidrPrefix) & 0xffffffff);, +++ b/handler/src/main/java/io/netty/handler/ipfilter/IpSubnetFilterRule.java, +            /**, +             * Perform the shift on a long and downcast it to int afterwards., +             * This is necessary to handle a cidrPrefix of zero correctly., +             * The left shift operator on an int only uses the five least, +             * significant bits of the right-hand operand. Thus -1 << 32 evaluates, +             * to -1 instead of 0. The left shift operator applied on a long, +             * uses the six least significant bits., +             *, +             * Also see https://github.com/netty/netty/issues/2767, +             */, +            return (int) ((-1L << 32 - cidrPrefix) & 0xffffffff);, +++ b/handler/src/test/java/io/netty/handler/ipfilter/IpSubnetFilterTest.java, +    public void testIpv4DefaultRoute() {, +        IpSubnetFilterRule rule = new IpSubnetFilterRule("0.0.0.0", 0, IpFilterRuleType.ACCEPT);, +        Assert.assertTrue(rule.matches(newSockAddress("91.114.240.43")));, +        Assert.assertTrue(rule.matches(newSockAddress("10.0.0.3")));, +        Assert.assertTrue(rule.matches(newSockAddress("192.168.93.2")));, +    }, +, +    @Test]