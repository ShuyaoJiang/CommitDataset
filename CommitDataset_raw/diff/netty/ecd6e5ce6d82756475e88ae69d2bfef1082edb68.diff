[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import io.netty.handler.codec.http.HttpUtil;, +, +        if (HttpUtil.isKeepAlive(request)) {, +            ctx.writeAndFlush(response);, +        } else {, +    }, +, +        if (HttpUtil.isKeepAlive(request)) {, +            ctx.writeAndFlush(new DefaultFullHttpResponse(request.protocolVersion(), FORBIDDEN));, +        } else {, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import io.netty.handler.codec.http.HttpUtil;, +, +        if (HttpUtil.isKeepAlive(request)) {, +            ctx.writeAndFlush(response);, +        } else {, +    }, +, +        if (HttpUtil.isKeepAlive(request)) {, +            ctx.writeAndFlush(new DefaultFullHttpResponse(request.protocolVersion(), FORBIDDEN));, +        } else {, +        }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/cors/CorsHandlerTest.java, +import io.netty.util.AsciiString;, +import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;, +import static io.netty.handler.codec.http.HttpHeaderValues.KEEP_ALIVE;, +import static io.netty.handler.codec.http.HttpHeaderValues.CLOSE;, +    public void shortCurcuitWithConnectionKeepAliveShouldStayOpen() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +        request.headers().set(CONNECTION, KEEP_ALIVE);, +, +        channel.writeInbound(request);, +        final HttpResponse response = channel.readOutbound();, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(FORBIDDEN));, +    }, +, +    @Test, +    public void shortCurcuitWithoutConnectionShouldStayOpen() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +, +        channel.writeInbound(request);, +        final HttpResponse response = channel.readOutbound();, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(FORBIDDEN));, +    }, +, +    @Test, +    public void shortCurcuitWithConnectionCloseShouldClose() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +        request.headers().set(CONNECTION, CLOSE);, +, +        channel.writeInbound(request);, +        final HttpResponse response = channel.readOutbound();, +, +        assertThat(channel.isOpen(), is(false));, +        assertThat(response.status(), is(FORBIDDEN));, +    }, +, +    @Test, +        final FullHttpRequest request = optionsRequest("http://localhost:8888", "content-type, xheader1", null);, +    public void preflightRequestWithConnectionKeepAliveShouldStayOpen() throws Exception {, +, +        final CorsConfig config = forOrigin("http://localhost:8888").build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = optionsRequest("http://localhost:8888", "", KEEP_ALIVE);, +        channel.writeInbound(request);, +        final HttpResponse response = channel.readOutbound();, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(OK));, +    }, +, +    @Test, +    public void preflightRequestWithoutConnectionShouldStayOpen() throws Exception {, +, +        final CorsConfig config = forOrigin("http://localhost:8888").build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = optionsRequest("http://localhost:8888", "", null);, +        channel.writeInbound(request);, +        final HttpResponse response = channel.readOutbound();, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(OK));, +    }]