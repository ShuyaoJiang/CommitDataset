[+++ b/microbench/README.md, +++ b/microbench/README.md, +++ b/microbench/pom.xml, +      <groupId>org.openjdk.jmh</groupId>, +      <artifactId>jmh-core</artifactId>, +      <version>0.2.1</version>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-surefire-plugin</artifactId>, +        <configuration>, +          <excludes>, +            <exclude>**/AbstractMicrobenchmark.java</exclude>, +            <exclude>**/*$*.class</exclude>, +          </excludes>, +            <systemPropertyVariables>, +                <perfReportDir>${project.build.directory}/reports/performance/</perfReportDir>, +            </systemPropertyVariables>, +        </configuration>, +      </plugin>, +++ b/microbench/README.md, +++ b/microbench/pom.xml, +      <groupId>org.openjdk.jmh</groupId>, +      <artifactId>jmh-core</artifactId>, +      <version>0.2.1</version>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-surefire-plugin</artifactId>, +        <configuration>, +          <excludes>, +            <exclude>**/AbstractMicrobenchmark.java</exclude>, +            <exclude>**/*$*.class</exclude>, +          </excludes>, +            <systemPropertyVariables>, +                <perfReportDir>${project.build.directory}/reports/performance/</perfReportDir>, +            </systemPropertyVariables>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ b/microbench/README.md, +++ b/microbench/pom.xml, +      <groupId>org.openjdk.jmh</groupId>, +      <artifactId>jmh-core</artifactId>, +      <version>0.2.1</version>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-surefire-plugin</artifactId>, +        <configuration>, +          <excludes>, +            <exclude>**/AbstractMicrobenchmark.java</exclude>, +            <exclude>**/*$*.class</exclude>, +          </excludes>, +            <systemPropertyVariables>, +                <perfReportDir>${project.build.directory}/reports/performance/</perfReportDir>, +            </systemPropertyVariables>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ /dev/null, +++ b/microbench/README.md, +++ b/microbench/pom.xml, +      <groupId>org.openjdk.jmh</groupId>, +      <artifactId>jmh-core</artifactId>, +      <version>0.2.1</version>, +      <plugin>, +        <groupId>org.apache.maven.plugins</groupId>, +        <artifactId>maven-surefire-plugin</artifactId>, +        <configuration>, +          <excludes>, +            <exclude>**/AbstractMicrobenchmark.java</exclude>, +            <exclude>**/*$*.class</exclude>, +          </excludes>, +            <systemPropertyVariables>, +                <perfReportDir>${project.build.directory}/reports/performance/</perfReportDir>, +            </systemPropertyVariables>, +        </configuration>, +      </plugin>, +++ /dev/null, +++ /dev/null, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import org.openjdk.jmh.annotations.GenerateMicroBenchmark;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.State;, +/**, + * This class benchmarks different allocators with different allocation sizes., + */, +@State(Scope.Thread), +public class ByteBufAllocatorBenchmark extends AbstractMicrobenchmark {, +    private final ByteBufAllocator unpooledHeapAllocator = new UnpooledByteBufAllocator(false);, +    private final ByteBufAllocator unpooledDirectAllocator = new UnpooledByteBufAllocator(true);, +    private final ByteBufAllocator pooledHeapAllocator = new PooledByteBufAllocator(false);, +    private final ByteBufAllocator pooledDirectAllocator = new PooledByteBufAllocator(true);, +    @GenerateMicroBenchmark, +    public void unpooledHeapAllocAndFree_1_0() {, +        ByteBuf buffer = unpooledHeapAllocator.buffer(0);, +        buffer.release();, +    @GenerateMicroBenchmark, +    public void unpooledHeapAllocAndFree_2_256() {, +        ByteBuf buffer = unpooledHeapAllocator.buffer(256);, +        buffer.release();]