[+++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +/**, + * {@link Bootstrap} is a helper class that makes it easy to bootstrap a {@link Channel}. It support, + * method-chaining to provide an easy way to configure the {@link Bootstrap}., + *, + */, +    /**, +     * The {@link EventLoopGroup} which is used to handle all the events for the to-be-creates, +     * {@link Channel}, +     */, +    /**, +     * The {@link Class} which is used to create {@link Channel} instances from., +     * You either use this or {@link #channelFactory(ChannelFactory)} if your, +     * {@link Channel} implementation has no no-args constructor., +     */, +    /**, +     * {@link ChannelFactory} which is used to create {@link Channel} instances from, +     * when calling {@link #bind()}. This method is usually only used if {@link #channel(Class)}, +     * is not working for you because of some more complex needs. If your {@link Channel} implementation, +     * has a no-args constructor, its highly recommend to just use {@link #channel(Class)} for, +     * simplify your code., +     */, +, +    /**, +     * The {@link SocketAddress} which is used to bind the local "end" to., +     *, +     */, +    /**, +     * See {@link #localAddress(SocketAddress)}, +     */, +        return localAddress(new InetSocketAddress(port));, +    /**, +     * See {@link #localAddress(SocketAddress)}, +     */, +        return localAddress(new InetSocketAddress(host, port));, +    /**, +     * See {@link #localAddress(SocketAddress)}, +     */, +        return localAddress(new InetSocketAddress(host, port));, +    /**, +     * Allow to specify a {@link ChannelOption} which is used for the {@link Channel} instances once they got, +     * created. Use a value of <code>null</code> to remove a previous set {@link ChannelOption}., +     */, +    /**, +     * Shutdown the {@link Bootstrap} and the {@link EventLoopGroup} which is, +     * used by it. Only call this if you don't share the {@link EventLoopGroup}, +     * between different {@link Bootstrap}'s., +     */, +    /**, +     * Validate all the parameters. Sub-classes may override this, but should, +     * call the super method in that case., +     */, +    /**, +     * Create a new {@link Channel} and bind it., +     */, +    /**, +     * the {@link ChannelHandler} to use for serving the requests., +     */, +    /**, +     * Bind the {@link Channel} of the given {@link ChannelFactory}., +     */, +    /**, +     * Factory that is responsible to create new {@link Channel}'s on {@link Bootstrap#bind()}, +     * requests., +     *, +     */, +        /**, +         * {@link Channel} to use in the {@link Bootstrap}, +         */, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +/**, + * {@link Bootstrap} is a helper class that makes it easy to bootstrap a {@link Channel}. It support, + * method-chaining to provide an easy way to configure the {@link Bootstrap}., + *, + */, +    /**, +     * The {@link EventLoopGroup} which is used to handle all the events for the to-be-creates, +     * {@link Channel}, +     */, +    /**, +     * The {@link Class} which is used to create {@link Channel} instances from., +     * You either use this or {@link #channelFactory(ChannelFactory)} if your, +     * {@link Channel} implementation has no no-args constructor., +     */, +    /**, +     * {@link ChannelFactory} which is used to create {@link Channel} instances from, +     * when calling {@link #bind()}. This method is usually only used if {@link #channel(Class)}, +     * is not working for you because of some more complex needs. If your {@link Channel} implementation, +     * has a no-args constructor, its highly recommend to just use {@link #channel(Class)} for, +     * simplify your code., +     */, +, +    /**, +     * The {@link SocketAddress} which is used to bind the local "end" to., +     *, +     */, +    /**, +     * See {@link #localAddress(SocketAddress)}, +     */, +        return localAddress(new InetSocketAddress(port));]