[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    /**, +     * Returns <code>true</code> if the given {@link ByteBuf} is encrypted. Be aware that this method, +     * will not increase the readerIndex of the given {@link ByteBuf}., +     *, +     * @param   buffer, +     *                  The {@link ByteBuf} to read from. Be aware that it must have at least 5 bytes to read,, +     *                  otherwise it will throw an {@link IllegalArgumentException}., +     * @return  encrypted, +     *                  <code>true</code> if the {@link ByteBuf} is encrypted, <code>false</code> otherwise., +     * @throws IllegalArgumentException, +     *                  Is thrown if the given {@link ByteBuf} has not at least 5 bytes to read., +     */, +    public static boolean isEncrypted(ByteBuf buffer) {, +        return getEncryptedPacketLength(buffer) != -1;, +    /**, +     * Return how much bytes can be read out of the encrypted data. Be aware that this method will not increase, +     * the readerIndex of the given {@link ByteBuf}., +     *, +     * @param   buffer, +     *                  The {@link ByteBuf} to read from. Be aware that it must have at least 5 bytes to read,, +     *                  otherwise it will throw an {@link IllegalArgumentException}., +     * @return  length, +     *                  The length of the encrypted packet that is included in the buffer. This will, +     *                  return <code>-1</code> if the given {@link ByteBuf} is not encrypted at all., +     * @throws IllegalArgumentException, +     *                  Is thrown if the given {@link ByteBuf} has not at least 5 bytes to read., +     */, +    private static int getEncryptedPacketLength(ByteBuf buffer) {, +        if (buffer.readableBytes() < 5) {, +            throw new IllegalArgumentException("buffer must have at least 5 readable bytes");, +        }, +, +        int packetLength = 0;, +, +        switch (buffer.getUnsignedByte(buffer.readerIndex())) {, +            int majorVersion = buffer.getUnsignedByte(buffer.readerIndex() + 1);, +                packetLength = (getShort(buffer, buffer.readerIndex() + 3) & 0xFFFF) + 5;, +            int headerLength = (buffer.getUnsignedByte(, +                    buffer.readerIndex()) & 0x80) != 0 ? 2 : 3;, +            int majorVersion = buffer.getUnsignedByte(, +                    buffer.readerIndex() + headerLength + 1);, +                    packetLength = (getShort(buffer, buffer.readerIndex()) & 0x7FFF) + 2;, +                    packetLength = (getShort(buffer, buffer.readerIndex()) & 0x3FFF) + 3;, +                return -1;, +            }, +        }, +        return packetLength;, +    }, +, +    @Override, +    public void inboundBufferUpdated(final ChannelHandlerContext ctx) throws Exception {, +        final ByteBuf in = ctx.inboundByteBuffer();, +, +        if (in.readableBytes() < 5) {, +            return;, +        }, +, +        int packetLength = getEncryptedPacketLength(in);, +, +        if (packetLength == -1) {]