[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsConfig.java, +import java.util.LinkedHashSet;, +    private final Set<String> origins;, +    private final boolean anyOrigin;, +        origins = new LinkedHashSet<String>(builder.origins);, +        anyOrigin = builder.anyOrigin;, +     * Determines whether a wildcard origin, '*', is supported., +     *, +     * @return {@code boolean} true if any origin is allowed., +     */, +    public boolean isAnyOriginSupported() {, +        return anyOrigin;, +    }, +, +    /**, +        return origins.isEmpty() ? "*" : origins.iterator().next();, +    }, +, +    /**, +     * Returns the set of allowed origins., +     *, +     * @return {@code Set} the allowed origins., +     */, +    public Set<String> origins() {, +        return origins;, +                ", origins=" + origins +, +                ", anyOrigin=" + anyOrigin +, +    public static Builder withAnyOrigin() {, +        return new Builder();, +        if (origin.equals("*")) {, +            return new Builder();, +        }, +     * Creates a {@link Builder} instance with the specified origins., +     *, +     * @return {@link Builder} to support method chaining., +     */, +    public static Builder withOrigins(final String... origins) {, +        return new Builder(origins);, +    }, +, +    /**, +        private final Set<String> origins;, +        private final boolean anyOrigin;, +         * @param origins the origin to be used for this builder., +        public Builder(final String... origins) {, +            this.origins = new LinkedHashSet<String>(Arrays.asList(origins));, +            anyOrigin = false;, +        }, +, +        /**, +         * Creates a new Builder instance allowing any origin, "*" which is the, +         * wildcard origin., +         *, +         */, +        public Builder() {, +            anyOrigin = true;, +            origins = Collections.emptySet();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsConfig.java, +import java.util.LinkedHashSet;, +    private final Set<String> origins;, +    private final boolean anyOrigin;, +        origins = new LinkedHashSet<String>(builder.origins);, +        anyOrigin = builder.anyOrigin;, +     * Determines whether a wildcard origin, '*', is supported., +     *, +     * @return {@code boolean} true if any origin is allowed., +     */, +    public boolean isAnyOriginSupported() {, +        return anyOrigin;, +    }, +, +    /**, +        return origins.isEmpty() ? "*" : origins.iterator().next();, +    }, +, +    /**, +     * Returns the set of allowed origins., +     *, +     * @return {@code Set} the allowed origins., +     */, +    public Set<String> origins() {, +        return origins;, +                ", origins=" + origins +, +                ", anyOrigin=" + anyOrigin +, +    public static Builder withAnyOrigin() {, +        return new Builder();, +        if (origin.equals("*")) {, +            return new Builder();, +        }, +     * Creates a {@link Builder} instance with the specified origins., +     *, +     * @return {@link Builder} to support method chaining., +     */, +    public static Builder withOrigins(final String... origins) {, +        return new Builder(origins);, +    }, +, +    /**, +        private final Set<String> origins;, +        private final boolean anyOrigin;]