[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +                        // The code exists in an extra method to ensure the method is not too big to inline as this, +                        // branch is not very likely to get hit very frequently., +                        nioBufferCount = nioBuffers(entry, buf, nioBuffers, nioBufferCount, maxCount);, +                    }, +                    if (nioBufferCount == maxCount) {, +                        break;, +                    }, +                }, +            }, +            entry = entry.next;, +        }, +        this.nioBufferCount = nioBufferCount;, +        this.nioBufferSize = nioBufferSize;, +, +        return nioBuffers;, +    }, +, +    private static int nioBuffers(Entry entry, ByteBuf buf, ByteBuffer[] nioBuffers, int nioBufferCount, int maxCount) {, +        return nioBufferCount;, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +                        // The code exists in an extra method to ensure the method is not too big to inline as this, +                        // branch is not very likely to get hit very frequently., +                        nioBufferCount = nioBuffers(entry, buf, nioBuffers, nioBufferCount, maxCount);, +                    }, +                    if (nioBufferCount == maxCount) {, +                        break;, +                    }, +                }, +            }, +            entry = entry.next;, +        }, +        this.nioBufferCount = nioBufferCount;, +        this.nioBufferSize = nioBufferSize;, +, +        return nioBuffers;, +    }, +, +    private static int nioBuffers(Entry entry, ByteBuf buf, ByteBuffer[] nioBuffers, int nioBufferCount, int maxCount) {, +        return nioBufferCount;, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +                    // The code exists in an extra method to ensure the method is not too big to inline as this, +                    // branch is not very likely to get hit very frequently., +                    selector = selectRebuildSelector(selectCnt);, +    private Selector selectRebuildSelector(int selectCnt) throws IOException {, +        // The selector returned prematurely many times in a row., +        // Rebuild the selector to work around the problem., +        logger.warn(, +                "Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.",, +                selectCnt, selector);, +, +        rebuildSelector();, +        Selector selector = this.selector;, +, +        // Select again to populate selectedKeys., +        selector.selectNow();, +        return selector;, +    }, +]