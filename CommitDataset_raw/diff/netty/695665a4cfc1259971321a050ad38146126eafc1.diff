[+++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, + * // The connection is closed when there is no inbound traffic, + * // for 30 seconds., + * public class MyChannelInitializer extends {@link ChannelInitializer} {, + *     public void initChannel({@link Channel} channel) {, + *         {@link Channel}.pipeline().addLast("readTimeoutHandler", new {@link ReadTimeoutHandler}(30);, + *         {@link Channel}.pipeline().addLast("myHandler", new MyHandler());, + *     }, + * // Handler should handle the {@link ReadTimeoutException}., + * public class MyHandler extends {@link ChannelHandlerAdapter} {, + *     {@code @Override}, + *     public void exceptionCaught({@link ChannelHandlerContext} ctx, {@link Throwable} cause), + *             throws {@link Exception} {, + *         if (cause instanceof {@link ReadTimeoutException}) {, + *             // do something, + *         } else {, + *             super.exceptionCaught(ctx, cause);, + *         }, + * bootstrap.childHandler(new MyChannelInitializer());, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, + * // The connection is closed when there is no inbound traffic, + * // for 30 seconds., + * public class MyChannelInitializer extends {@link ChannelInitializer} {, + *     public void initChannel({@link Channel} channel) {, + *         {@link Channel}.pipeline().addLast("readTimeoutHandler", new {@link ReadTimeoutHandler}(30);, + *         {@link Channel}.pipeline().addLast("myHandler", new MyHandler());, + *     }, + * // Handler should handle the {@link ReadTimeoutException}., + * public class MyHandler extends {@link ChannelHandlerAdapter} {, + *     {@code @Override}, + *     public void exceptionCaught({@link ChannelHandlerContext} ctx, {@link Throwable} cause), + *             throws {@link Exception} {, + *         if (cause instanceof {@link ReadTimeoutException}) {, + *             // do something, + *         } else {, + *             super.exceptionCaught(ctx, cause);, + *         }, + * bootstrap.childHandler(new MyChannelInitializer());, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, + * // The connection is closed when there is no outbound traffic, + * // for 30 seconds., + * public class MyChannelInitializer extends {@link ChannelInitializer} {, + *     public void initChannel({@link Channel} channel) {, + *         {@link Channel}.pipeline().addLast("writeTimeoutHandler", new {@link WriteTimeoutHandler}(30);, + *         {@link Channel}.pipeline().addLast("myHandler", new MyHandler());, + *     }, + * // Handler should handle the {@link WriteTimeoutException}., + * public class MyHandler extends {@link ChannelHandlerAdapter} {, + *     {@code @Override}, + *     public void exceptionCaught({@link ChannelHandlerContext} ctx, {@link Throwable} cause), + *             throws {@link Exception} {, + *         if (cause instanceof {@link WriteTimeoutException}) {, + *             // do something, + *         } else {, + *             super.exceptionCaught(ctx, cause);, + *         }, + * bootstrap.childHandler(new MyChannelInitializer());, + * ...]