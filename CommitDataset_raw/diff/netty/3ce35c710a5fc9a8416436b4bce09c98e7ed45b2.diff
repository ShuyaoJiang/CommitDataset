[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, +import javax.net.ssl.SSLEngine;, +, +        SPDY_3("spdy/3"),, +        SPDY_3_1("spdy/3.1"),, +        HTTP_1_1("http/1.1"),, +        HTTP_1_0("http/1.0"),, +        UNKNOWN("Unknown");, +, +        private String name;, +, +        private SelectedProtocol(String defaultName) {, +            this.name = defaultName;, +        }, +, +        public String getName() {, +            return this.name;, +        }, +, +        /**, +         * Get an instance of this enum based on the protocol name returned by the NPN server provider, +         *, +         * @param name, +         *            the protocol name, +         * @return the SelectedProtocol instance, +         */, +        public static SelectedProtocol getProtocolByName(String name) {, +, +            for (SelectedProtocol protocol : SelectedProtocol.values()) {, +                if (protocol.getName().equals(name)) {, +                    return protocol;, +                }, +            }, +            return UNKNOWN;, +        }, +     * Return the {@link SelectedProtocol} for the {@link SSLEngine}. If its not known yet implementations MUST return, +     * {@link SelectedProtocol#UNKNOWN}., +            // When we reached here we can remove this handler as its now clear, +            // what protocol we want to use, +            // from this point on. This will also take care of forward all, +            // messages., +        // Get the SslHandler from the ChannelPipeline so we can obtain the, +        // SslEngine from it., +     * By default this getMethod will just delecate to {@link #createHttpRequestHandlerForHttp()}, but sub-classes may, +     * override this to change the behaviour.]