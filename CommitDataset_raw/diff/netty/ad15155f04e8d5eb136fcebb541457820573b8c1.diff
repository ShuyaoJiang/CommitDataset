[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append("(ridx: ");, +        buf.append(readerIndex);, +        buf.append(", widx: ");, +        buf.append(writerIndex);, +        buf.append(", cap: ");, +        buf.append(capacity());, +, +        ByteBuf unwrapped = unwrap();, +        if (unwrapped != null) {, +            buf.append(", unwrapped: ");, +            buf.append(unwrapped);, +        }, +        buf.append(')');, +        return buf.toString();, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append("(ridx: ");, +        buf.append(readerIndex);, +        buf.append(", widx: ");, +        buf.append(writerIndex);, +        buf.append(", cap: ");, +        buf.append(capacity());, +, +        ByteBuf unwrapped = unwrap();, +        if (unwrapped != null) {, +            buf.append(", unwrapped: ");, +            buf.append(unwrapped);, +        }, +        buf.append(')');, +        return buf.toString();, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +        if (buffer instanceof ReadOnlyByteBuf || buffer instanceof DuplicatedByteBuf) {, +            this.buffer = buffer.unwrap();, +        } else {, +        }, +        return Unpooled.unmodifiableBuffer(buffer.slice(index, length));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append("(ridx: ");, +        buf.append(readerIndex);, +        buf.append(", widx: ");, +        buf.append(writerIndex);, +        buf.append(", cap: ");, +        buf.append(capacity());, +, +        ByteBuf unwrapped = unwrap();, +        if (unwrapped != null) {, +            buf.append(", unwrapped: ");, +            buf.append(unwrapped);, +        }, +        buf.append(')');, +        return buf.toString();, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +        if (buffer instanceof ReadOnlyByteBuf || buffer instanceof DuplicatedByteBuf) {, +            this.buffer = buffer.unwrap();, +        } else {, +        }, +        return Unpooled.unmodifiableBuffer(buffer.slice(index, length));, +++ b/buffer/src/main/java/io/netty/buffer/SlicedByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append("(ridx: ");, +        buf.append(readerIndex);, +        buf.append(", widx: ");, +        buf.append(writerIndex);, +        buf.append(", cap: ");, +        buf.append(capacity());, +, +        ByteBuf unwrapped = unwrap();, +        if (unwrapped != null) {, +            buf.append(", unwrapped: ");, +            buf.append(unwrapped);, +        }, +        buf.append(')');, +        return buf.toString();, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +        if (buffer instanceof ReadOnlyByteBuf || buffer instanceof DuplicatedByteBuf) {, +            this.buffer = buffer.unwrap();, +        } else {, +        }, +        return Unpooled.unmodifiableBuffer(buffer.slice(index, length));, +++ b/buffer/src/main/java/io/netty/buffer/SlicedByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        ByteOrder endianness = buffer.order();, +        if (endianness == BIG_ENDIAN) {, +        return new ReadOnlyByteBuf(buffer.order(BIG_ENDIAN)).order(LITTLE_ENDIAN);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append("(ridx: ");, +        buf.append(readerIndex);, +        buf.append(", widx: ");]