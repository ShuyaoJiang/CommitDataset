[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +     * Encode a message into a {@link ByteBuf}. This method will be called for each written message that can be handled, +     * by this encoder., +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +     * Encode a message into a {@link ByteBuf}. This method will be called for each written message that can be handled, +     * by this encoder., +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +     * Decode from one message to an other. This method will be called for each written message that can be handled, +     * by this encoder., +     * @param out           the {@link List} to which decoded messages should be added, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +     * Encode a message into a {@link ByteBuf}. This method will be called for each written message that can be handled, +     * by this encoder., +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +     * Decode from one message to an other. This method will be called for each written message that can be handled, +     * by this encoder., +     * @param out           the {@link List} to which decoded messages should be added, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +     * Encode from one message to an other. This method will be called for each written message that can be handled, +     * by this encoder., +     * @param out           the {@link List} into which the encoded msg should be added, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +     * Encode a message into a {@link ByteBuf}. This method will be called for each written message that can be handled, +     * by this encoder., +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +     * Decode from one message to an other. This method will be called for each written message that can be handled, +     * by this encoder., +     * @param out           the {@link List} to which decoded messages should be added, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +     * Encode from one message to an other. This method will be called for each written message that can be handled, +     * by this encoder., +     * @param out           the {@link List} into which the encoded msg should be added, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +        RecyclableArrayList out = RecyclableArrayList.newInstance();, +    protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, RecyclableArrayList out) {, +     * @param out           the {@link List} to which decoded messages should be added, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +     * Encode a message into a {@link ByteBuf}. This method will be called for each written message that can be handled, +     * by this encoder., +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageDecoder.java, +import io.netty.util.internal.RecyclableArrayList;, +        RecyclableArrayList out = RecyclableArrayList.newInstance();]