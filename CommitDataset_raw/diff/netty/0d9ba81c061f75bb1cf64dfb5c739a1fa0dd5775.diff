[+++ b/common/src/main/java/io/netty/util/Attribute.java, +     *  Atomically sets to the given value if this {@link Attribute}'s value is {@code null}., +     * Removes this attribute from the {@link AttributeMap} and returns the old value. Subsequent {@link #get()}, +     * calls will return {@code null}., +     *, +     * If you only want to return the old value and clear the {@link Attribute} while still keep it in, +     * {@link AttributeMap} use {@link #getAndSet(Object)} with a value of {@code null}., +     *, +     * If you only want to remove the value and clear the {@link Attribute} while still keep it in, +     * {@link AttributeMap} use {@link #set(Object)} with a value of {@code null}., +++ b/common/src/main/java/io/netty/util/Attribute.java, +     *  Atomically sets to the given value if this {@link Attribute}'s value is {@code null}., +     * Removes this attribute from the {@link AttributeMap} and returns the old value. Subsequent {@link #get()}, +     * calls will return {@code null}., +     *, +     * If you only want to return the old value and clear the {@link Attribute} while still keep it in, +     * {@link AttributeMap} use {@link #getAndSet(Object)} with a value of {@code null}., +     *, +     * If you only want to remove the value and clear the {@link Attribute} while still keep it in, +     * {@link AttributeMap} use {@link #set(Object)} with a value of {@code null}., +++ b/common/src/test/java/io/netty/util/DefaultAttributeMapTest.java, +        Attribute<Integer> attr = map.attr(key);, +        attr.set(1);, +        assertSame(1, attr.getAndRemove());, +        Attribute<Integer> attr2 = map.attr(key);, +        attr2.set(2);, +        assertSame(2, attr2.get());, +        assertNotSame(attr, attr2);, +    }, +, +    @Test, +    public void testGetAndSetWithNull() {, +        AttributeKey<Integer> key = AttributeKey.valueOf("key");, +, +        Attribute<Integer> attr = map.attr(key);, +        attr.set(1);, +        assertSame(1, attr.getAndSet(null));, +, +        Attribute<Integer> attr2 = map.attr(key);, +        attr2.set(2);, +        assertSame(2, attr2.get());, +        assertSame(attr, attr2);]