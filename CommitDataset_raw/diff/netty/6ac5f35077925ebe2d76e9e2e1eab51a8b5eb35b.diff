[+++ b/buffer/src/test/java/io/netty/buffer/WrappedUnpooledUnsafeByteBufTest.java, +        Assume.assumeTrue("PlatformDependent.useDirectBufferNoCleaner() returned false, skip tests",, +                PlatformDependent.useDirectBufferNoCleaner());, +++ b/buffer/src/test/java/io/netty/buffer/WrappedUnpooledUnsafeByteBufTest.java, +        Assume.assumeTrue("PlatformDependent.useDirectBufferNoCleaner() returned false, skip tests",, +                PlatformDependent.useDirectBufferNoCleaner());, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +        Field addressField = null;, +        Unsafe unsafe;, +            unsafe = null;, +, +            if (unsafe != null) {, +                final Unsafe finalUnsafe = unsafe;, +, +                // attempt to access field Buffer#address, +                final Object maybeAddressField = AccessController.doPrivileged(new PrivilegedAction<Object>() {, +                    @Override, +                    public Object run() {, +                        try {, +                            final Field field = Buffer.class.getDeclaredField("address");, +                            // Use Unsafe to read value of the address field. This way it will not fail on JDK9+ which, +                            // will forbid changing the access level via reflection., +                            final long offset = finalUnsafe.objectFieldOffset(field);, +                            final long address = finalUnsafe.getLong(direct, offset);, +, +                            // if direct really is a direct buffer, address will be non-zero, +                            if (address == 0) {, +                                return null;, +                            }, +                            return field;, +                        } catch (NoSuchFieldException e) {, +                            return e;, +                        } catch (SecurityException e) {, +                            return e;, +                        }, +                    }, +                });, +, +                if (maybeAddressField instanceof Field) {, +                    addressField = (Field) maybeAddressField;, +                    logger.debug("java.nio.Buffer.address: available");, +                    logger.debug("java.nio.Buffer.address: unavailable", (Throwable) maybeAddressField);, +, +            }, +        }]