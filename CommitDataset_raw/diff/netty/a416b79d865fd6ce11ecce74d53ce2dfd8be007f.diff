[+++ b/common/src/main/java/io/netty/util/internal/SocketUtils.java, +    public static InetAddress loopbackAddress() {, +        return AccessController.doPrivileged(new PrivilegedAction<InetAddress>() {, +            @Override, +            public InetAddress run() {, +                if (PlatformDependent.javaVersion() >= 7) {, +                    return InetAddress.getLoopbackAddress();, +                }, +                try {, +                    return InetAddress.getByName(null);, +                } catch (UnknownHostException e) {, +                    throw new IllegalStateException(e);, +                }, +            }, +        });, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/SocketUtils.java, +    public static InetAddress loopbackAddress() {, +        return AccessController.doPrivileged(new PrivilegedAction<InetAddress>() {, +            @Override, +            public InetAddress run() {, +                if (PlatformDependent.javaVersion() >= 7) {, +                    return InetAddress.getLoopbackAddress();, +                }, +                try {, +                    return InetAddress.getByName(null);, +                } catch (UnknownHostException e) {, +                    throw new IllegalStateException(e);, +                }, +            }, +        });, +    }, +, +++ b/pom.xml, +, +            <!-- Resolver -->, +            <ignore>java.net.InetAddress</ignore>, +++ b/common/src/main/java/io/netty/util/internal/SocketUtils.java, +    public static InetAddress loopbackAddress() {, +        return AccessController.doPrivileged(new PrivilegedAction<InetAddress>() {, +            @Override, +            public InetAddress run() {, +                if (PlatformDependent.javaVersion() >= 7) {, +                    return InetAddress.getLoopbackAddress();, +                }, +                try {, +                    return InetAddress.getByName(null);, +                } catch (UnknownHostException e) {, +                    throw new IllegalStateException(e);, +                }, +            }, +        });, +    }, +, +++ b/pom.xml, +, +            <!-- Resolver -->, +            <ignore>java.net.InetAddress</ignore>, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getByName(...) does., +            return promise.setSuccess(loopbackAddress());, +        }, +, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getAllByName(...) does., +            return promise.setSuccess(Collections.singletonList(loopbackAddress()));, +        }, +, +    @Override, +    protected final InetAddress loopbackAddress() {, +        return preferredAddressType() == InternetProtocolFamily.IPv4 ?, +                    NetUtil.LOCALHOST4 : NetUtil.LOCALHOST6;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/SocketUtils.java, +    public static InetAddress loopbackAddress() {, +        return AccessController.doPrivileged(new PrivilegedAction<InetAddress>() {, +            @Override, +            public InetAddress run() {, +                if (PlatformDependent.javaVersion() >= 7) {, +                    return InetAddress.getLoopbackAddress();, +                }, +                try {, +                    return InetAddress.getByName(null);, +                } catch (UnknownHostException e) {, +                    throw new IllegalStateException(e);, +                }, +            }, +        });, +    }, +, +++ b/pom.xml, +, +            <!-- Resolver -->, +            <ignore>java.net.InetAddress</ignore>, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getByName(...) does.]