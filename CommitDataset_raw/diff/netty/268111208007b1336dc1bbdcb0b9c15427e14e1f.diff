[+++ b/handler/src/main/java/io/netty/handler/traffic/AbstractTrafficShapingHandler.java, +import io.netty.channel.ChannelConfig;, +import io.netty.channel.ChannelOutboundBuffer;, + * <p>AbstractTrafficShapingHandler allows to limit the global bandwidth, + * the method doAccounting of this handler.</p>, + * <p>If you want for any particular reasons to stop the monitoring (accounting) or to change, + * the read/write limit or the check interval, several methods allow that for you:</p>, +     * Default max size to not exceed in buffer (write only)., +     */, +    static final long DEFAULT_MAX_SIZE = 4 * 1024 * 1024L;, +, +    /**, +    private volatile long writeLimit;, +    private volatile long readLimit;, +    protected volatile long maxTime = DEFAULT_MAX_TIME; // default 15 s, +    protected volatile long checkInterval = DEFAULT_CHECK_INTERVAL; // default 1 s, +    static final AttributeKey<Boolean> READ_SUSPENDED = AttributeKey, +            .valueOf(AbstractTrafficShapingHandler.class.getName() + ".READ_SUSPENDED");, +    static final AttributeKey<Runnable> REOPEN_TASK = AttributeKey.valueOf(AbstractTrafficShapingHandler.class, +            .getName() + ".REOPEN_TASK");, +     * Max time to delay before proposing to stop writing new objects from next handlers, +     */, +    volatile long maxWriteDelay = 4 * DEFAULT_CHECK_INTERVAL; // default 4 s, +    /**, +     * Max size in the list before proposing to stop writing new objects from next handlers, +     */, +    volatile long maxWriteSize = DEFAULT_MAX_SIZE; // default 4MB, +, +    /**, +     * Rank in UserDefinedWritability (1 for Channel, 2 for Global TrafficShapingHandler)., +     * Set in final constructor. Must be between 1 and 31, +     */, +    final int userDefinedWritabilityIndex;, +, +    /**, +     * Default value for Channel UserDefinedWritability index, +     */, +    static final int CHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX = 1;, +, +    /**, +     * Default value for Global UserDefinedWritability index, +     */, +    static final int GLOBAL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX = 2;, +, +    /**, +     * Default value for GlobalChannel UserDefinedWritability index, +     */, +    static final int GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX = 3;, +, +    /**, +     * @param newTrafficCounter, +     *            the TrafficCounter to set, +     * @return the index to be used by the TrafficShapingHandler to manage the user defined writability., +     *              For Channel TSH it is defined as {@value #CHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX},, +     *              for Global TSH it is defined as {@value #GLOBAL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX},, +     *              for GlobalChannel TSH it is defined as, +     *              {@value #GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX}., +     */, +    int userDefinedWritabilityIndex() {, +        if (this instanceof GlobalChannelTrafficShapingHandler) {, +            return GLOBALCHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX;, +        } else if (this instanceof GlobalTrafficShapingHandler) {, +            return GLOBAL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX;, +        } else {, +            return CHANNEL_DEFAULT_USER_DEFINED_WRITABILITY_INDEX;, +        }, +    }, +, +    /**, +     *            channels or 0 if no stats are to be computed., +     *            The maximum delay to wait in case of traffic excess., +     *            Must be positive., +        if (maxTime <= 0) {, +            throw new IllegalArgumentException("maxTime must be positive");, +        }, +        this.userDefinedWritabilityIndex = userDefinedWritabilityIndex();, +     * Constructor using default max time as delay allowed value of {@value #DEFAULT_MAX_TIME} ms., +     *            channels or 0 if no stats are to be computed., +    protected AbstractTrafficShapingHandler(long writeLimit, long readLimit, long checkInterval) {, +     * Constructor using default Check Interval value of {@value #DEFAULT_CHECK_INTERVAL} ms and, +     * default max time as delay allowed value of {@value #DEFAULT_MAX_TIME} ms., +     * Constructor using NO LIMIT, default Check Interval value of {@value #DEFAULT_CHECK_INTERVAL} ms and, +     * default max time as delay allowed value of {@value #DEFAULT_MAX_TIME} ms., +     * Constructor using NO LIMIT and, +     * default max time as delay allowed value of {@value #DEFAULT_MAX_TIME} ms., +     *            channels or 0 if no stats are to be computed., +     * <p>Note the change will be taken as best effort, meaning, +     * that all already scheduled traffics will not be, +     * changed, but only applied to new traffics.</p>, +     * <p>So the expected usage of this method is to be used not too often,, +     * accordingly to the traffic shaping configuration.</p>, +     * <p>Note the change will be taken as best effort, meaning, +     * that all already scheduled traffics will not be, +     * changed, but only applied to new traffics.</p>, +     * <p>So the expected usage of this method is to be used not too often,, +     * accordingly to the traffic shaping configuration.</p>, +            trafficCounter.resetAccounting(TrafficCounter.milliSecondFromNano());, +     * <p>Note the change will be taken as best effort, meaning, +     * that all already scheduled traffics will not be, +     * changed, but only applied to new traffics.</p>]