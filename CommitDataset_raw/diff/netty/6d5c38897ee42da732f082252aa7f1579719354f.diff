[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            out.add(invalidMessage(buffer, e));, +            out.add(invalidMessage(buffer, e));, +            out.add(invalidChunk(buffer, e));, +            out.add(invalidChunk(buffer, e));, +    private HttpMessage invalidMessage(ByteBuf in, Exception cause) {, +, +        // Advance the readerIndex so that ByteToMessageDecoder does not complain, +        // when we produced an invalid message without consuming anything., +        in.skipBytes(in.readableBytes());, +, +    private HttpContent invalidChunk(ByteBuf in, Exception cause) {, +, +        // Advance the readerIndex so that ByteToMessageDecoder does not complain, +        // when we produced an invalid message without consuming anything., +        in.skipBytes(in.readableBytes());, +, +            final int oldSize = size;, +                size = oldSize;, +, +            if (++ size > maxLength) {, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            out.add(invalidMessage(buffer, e));, +            out.add(invalidMessage(buffer, e));, +            out.add(invalidChunk(buffer, e));, +            out.add(invalidChunk(buffer, e));, +    private HttpMessage invalidMessage(ByteBuf in, Exception cause) {, +, +        // Advance the readerIndex so that ByteToMessageDecoder does not complain, +        // when we produced an invalid message without consuming anything., +        in.skipBytes(in.readableBytes());, +, +    private HttpContent invalidChunk(ByteBuf in, Exception cause) {, +, +        // Advance the readerIndex so that ByteToMessageDecoder does not complain, +        // when we produced an invalid message without consuming anything., +        in.skipBytes(in.readableBytes());, +, +            final int oldSize = size;, +                size = oldSize;, +, +            if (++ size > maxLength) {, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java, +import io.netty.handler.codec.TooLongFrameException;, +import java.util.Arrays;, +    /**, +     * The size of headers should be calculated correctly even if a single header is split into multiple fragments., +     * @see <a href="https://github.com/netty/netty/issues/3445">#3445</a>, +     */, +    @Test, +    public void testMaxHeaderSize1() {, +        final int maxHeaderSize = 8192;, +, +        final EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder(4096, maxHeaderSize, 8192));, +        final char[] bytes = new char[maxHeaderSize / 2 - 2];, +        Arrays.fill(bytes, 'a');, +, +        ch.writeInbound(Unpooled.copiedBuffer("HTTP/1.1 200 OK\r\n", CharsetUtil.US_ASCII));, +, +        // Write two 4096-byte headers (= 8192 bytes), +        ch.writeInbound(Unpooled.copiedBuffer("A:", CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer(bytes, CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer("\r\n", CharsetUtil.US_ASCII));, +        assertNull(ch.readInbound());, +        ch.writeInbound(Unpooled.copiedBuffer("B:", CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer(bytes, CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer("\r\n", CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer("\r\n", CharsetUtil.US_ASCII));, +, +        HttpResponse res = ch.readInbound();, +        assertNull(res.decoderResult().cause());, +        assertTrue(res.decoderResult().isSuccess());, +, +        assertNull(ch.readInbound());, +        assertTrue(ch.finish());, +        assertThat(ch.readInbound(), instanceOf(LastHttpContent.class));, +    }, +, +    /**, +     * Complementary test case of {@link #testMaxHeaderSize1()} When it actually exceeds the maximum, it should fail., +     */, +    @Test, +    public void testMaxHeaderSize2() {, +        final int maxHeaderSize = 8192;, +, +        final EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder(4096, maxHeaderSize, 8192));, +        final char[] bytes = new char[maxHeaderSize / 2 - 2];, +        Arrays.fill(bytes, 'a');, +, +        ch.writeInbound(Unpooled.copiedBuffer("HTTP/1.1 200 OK\r\n", CharsetUtil.US_ASCII));, +, +        // Write a 4096-byte header and a 4097-byte header to test an off-by-one case (= 8193 bytes), +        ch.writeInbound(Unpooled.copiedBuffer("A:", CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer(bytes, CharsetUtil.US_ASCII));, +        ch.writeInbound(Unpooled.copiedBuffer("\r\n", CharsetUtil.US_ASCII));, +        assertNull(ch.readInbound());, +        ch.writeInbound(Unpooled.copiedBuffer("B: ", CharsetUtil.US_ASCII)); // Note an extra space., +        ch.writeInbound(Unpooled.copiedBuffer(bytes, CharsetUtil.US_ASCII));]