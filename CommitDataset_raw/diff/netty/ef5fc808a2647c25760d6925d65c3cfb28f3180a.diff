[+++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +        pipeline.addFirst(, +                "connector", new Connector(, +                        this, remoteAddress, localAddress, futureQueue));, +    static final class Connector extends SimpleChannelUpstreamHandler {, +        private final Bootstrap bootstrap;, +        Connector(, +                Bootstrap bootstrap,, +                SocketAddress remoteAddress,, +            this.bootstrap = bootstrap;, +            event.getChannel().getConfig().setOptions(bootstrap.getOptions());, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, +        pipeline.addFirst(, +                "connector", new Connector(, +                        this, remoteAddress, localAddress, futureQueue));, +    static final class Connector extends SimpleChannelUpstreamHandler {, +        private final Bootstrap bootstrap;, +        Connector(, +                Bootstrap bootstrap,, +                SocketAddress remoteAddress,, +            this.bootstrap = bootstrap;, +            event.getChannel().getConfig().setOptions(bootstrap.getOptions());, +++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +        pipeline.addFirst("binder", new ConnectionlessBinder(localAddress, futureQueue));, +    private final class ConnectionlessBinder extends SimpleChannelUpstreamHandler {, +        ConnectionlessBinder(SocketAddress localAddress, BlockingQueue<ChannelFuture> futureQueue) {, +, +    /**, +     * Creates a new connected channel with the current {@code "remoteAddress"}, +     * and {@code "localAddress"} option.  If the {@code "localAddress"} option, +     * is not set, the local address of a new channel is determined, +     * automatically. This method is similar to the following code:, +     *, +     * <pre>, +     * ConnectionlessBootstrap b = ...;, +     * b.connect(b.getOption("remoteAddress"), b.getOption("localAddress"));, +     * </pre>, +     *, +     * @return a future object which notifies when the creation of the connected, +     *         channel succeeds or fails, +     *, +     * @throws IllegalStateException, +     *         if {@code "remoteAddress"} option was not set, +     * @throws ClassCastException, +     *         if {@code "remoteAddress"} or {@code "localAddress"} option's, +     *            value is neither a {@link SocketAddress} nor {@code null}, +     * @throws ChannelPipelineException, +     *         if this bootstrap's {@link #setPipelineFactory(ChannelPipelineFactory) pipelineFactory}, +     *            failed to create a new {@link ChannelPipeline}, +     */, +    public ChannelFuture connect() {, +        SocketAddress remoteAddress = (SocketAddress) getOption("remoteAddress");, +        if (remoteAddress == null) {, +            throw new IllegalStateException("remoteAddress option is not set.");, +        }, +        return connect(remoteAddress);, +    }, +, +    /**, +     * Creates a new connected channel with the specified, +     * {@code "remoteAddress"} and the current {@code "localAddress"} option., +     * If the {@code "localAddress"} option is not set, the local address of, +     * a new channel is determined automatically.  This method is identical, +     * with the following code:, +     *, +     * <pre>, +     * ClientBootstrap b = ...;, +     * b.connect(remoteAddress, b.getOption("localAddress"));, +     * </pre>, +     *, +     * @return a future object which notifies when the creation of the connected, +     *         channel succeeds or fails, +     *, +     * @throws ClassCastException, +     *         if {@code "localAddress"} option's value is, +     *            neither a {@link SocketAddress} nor {@code null}, +     * @throws ChannelPipelineException, +     *         if this bootstrap's {@link #setPipelineFactory(ChannelPipelineFactory) pipelineFactory}, +     *            failed to create a new {@link ChannelPipeline}, +     */, +    public ChannelFuture connect(SocketAddress remoteAddress) {, +        if (remoteAddress == null) {, +            throw new NullPointerException("remotedAddress");, +        }, +        SocketAddress localAddress = (SocketAddress) getOption("localAddress");, +        return connect(remoteAddress, localAddress);, +    }, +, +    /**, +     * Creates a new connected channel with the specified, +     * {@code "remoteAddress"} and the specified {@code "localAddress"}., +     * If the specified local address is {@code null}, the local address of a, +     * new channel is determined automatically., +     *, +     * @return a future object which notifies when the creation of the connected, +     *         channel succeeds or fails, +     *, +     * @throws ChannelPipelineException, +     *         if this bootstrap's {@link #setPipelineFactory(ChannelPipelineFactory) pipelineFactory}, +     *            failed to create a new {@link ChannelPipeline}]