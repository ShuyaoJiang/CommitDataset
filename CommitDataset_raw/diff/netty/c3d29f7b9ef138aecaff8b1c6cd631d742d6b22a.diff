[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +        // Calling malloc with capacity of 0 may return a null ptr or a memory address that can be used., +        // Just use 1 to make it safe to use in all cases:, +        // See: http://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html, +        return newDirectBuffer(UNSAFE.allocateMemory(Math.max(1, capacity)), capacity);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +        // Calling malloc with capacity of 0 may return a null ptr or a memory address that can be used., +        // Just use 1 to make it safe to use in all cases:, +        // See: http://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html, +        return newDirectBuffer(UNSAFE.allocateMemory(Math.max(1, capacity)), capacity);, +++ b/common/src/test/java/io/netty/util/internal/PlatformDependentTest.java, +import java.nio.ByteBuffer;, +import static org.junit.Assert.*;, +import static org.junit.Assume.assumeTrue;, +, +    @Test, +    public void testAllocateWithCapacity0() {, +        assumeTrue(PlatformDependent.hasDirectBufferNoCleanerConstructor());, +        ByteBuffer buffer = PlatformDependent.allocateDirectNoCleaner(0);, +        assertNotEquals(0, PlatformDependent.directBufferAddress(buffer));, +        assertEquals(0, buffer.capacity());, +        PlatformDependent.freeDirectNoCleaner(buffer);, +    }]