[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsMessage.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.dns;, +, +import io.netty.util.AbstractReferenceCounted;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.ReferenceCounted;, +import io.netty.util.ResourceLeak;, +import io.netty.util.ResourceLeakDetector;, +import io.netty.util.internal.StringUtil;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +/**, + * A skeletal implementation of {@link DnsMessage}., + */, +public abstract class AbstractDnsMessage extends AbstractReferenceCounted implements DnsMessage {, +, +    private static final ResourceLeakDetector<DnsMessage> leakDetector =, +            new ResourceLeakDetector<DnsMessage>(DnsMessage.class);, +, +    private static final int SECTION_QUESTION = DnsSection.QUESTION.ordinal();, +    private static final int SECTION_COUNT = 4;, +, +    private final ResourceLeak leak = leakDetector.open(this);, +    private short id;, +    private DnsOpCode opCode;, +    private boolean recursionDesired;, +    private byte z;, +, +    // To reduce the memory footprint of a message,, +    // each of the following fields is a single record or a list of records., +    private Object questions;, +    private Object answers;, +    private Object authorities;, +    private Object additionals;, +, +    /**, +     * Creates a new instance with the specified {@code id} and {@link DnsOpCode#QUERY} opCode., +     */, +    protected AbstractDnsMessage(int id) {, +        this(id, DnsOpCode.QUERY);, +    }, +, +    /**, +     * Creates a new instance with the specified {@code id} and {@code opCode}., +     */, +    protected AbstractDnsMessage(int id, DnsOpCode opCode) {, +        setId(id);, +        setOpCode(opCode);, +    }, +, +    @Override, +    public int id() {, +        return id & 0xFFFF;, +    }, +, +    @Override, +    public DnsMessage setId(int id) {, +        this.id = (short) id;, +        return this;, +    }, +, +    @Override, +    public DnsOpCode opCode() {, +        return opCode;, +    }, +, +    @Override, +    public DnsMessage setOpCode(DnsOpCode opCode) {, +        this.opCode = checkNotNull(opCode, "opCode");, +        return this;, +    }, +, +    @Override, +    public boolean isRecursionDesired() {, +        return recursionDesired;, +    }, +, +    @Override, +    public DnsMessage setRecursionDesired(boolean recursionDesired) {, +        this.recursionDesired = recursionDesired;, +        return this;]