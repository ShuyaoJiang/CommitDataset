[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import static io.netty.util.ReferenceCountUtil.release;, +        release(request);, +        release(request);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import static io.netty.util.ReferenceCountUtil.release;, +        release(request);, +        release(request);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/cors/CorsHandlerTest.java, +    @Test, +    public void preflightRequestShouldReleaseRequest() {, +        final CorsConfig config = CorsConfig.withOrigin("http://localhost:8888"), +                .preflightResponseHeader("CustomHeader", Arrays.asList("value1", "value2")), +                .build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = optionsRequest("http://localhost:8888", "content-type, xheader1");, +        channel.writeInbound(request);, +        assertThat(request.refCnt(), is(0));, +    }, +, +    @Test, +    public void forbiddenShouldReleaseRequest() {, +        final CorsConfig config = CorsConfig.withOrigin("https://localhost").shortCurcuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config), new EchoHandler());, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +        channel.writeInbound(request);, +        assertThat(request.refCnt(), is(0));, +    }, +, +        channel.writeInbound(optionsRequest(origin, requestHeaders));, +        return (HttpResponse) channel.readOutbound();, +    }, +, +    private static FullHttpRequest optionsRequest(final String origin, final String requestHeaders) {, +        return httpRequest;]