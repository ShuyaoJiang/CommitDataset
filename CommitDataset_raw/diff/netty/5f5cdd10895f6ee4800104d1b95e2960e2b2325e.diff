[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd) {, +    int res = epoll_ctl(efd, EPOLL_CTL_DEL, fd, &event);, +    if (res < 0) {, +        return -errno;, +    return res;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd) {, +    int res = epoll_ctl(efd, EPOLL_CTL_DEL, fd, &event);, +    if (res < 0) {, +        return -errno;, +    return res;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd) {, +    int res = epoll_ctl(efd, EPOLL_CTL_DEL, fd, &event);, +    if (res < 0) {, +        return -errno;, +    return res;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +import java.io.IOException;, +    void setFlag(int flag) throws IOException {, +    void clearFlag(int flag) throws IOException {, +    private void modifyEvents() throws IOException {, +            assert eventLoop().inEventLoop();, +            try {, +            } catch (IOException e) {, +                // When this happens there is something completely wrong with either the filedescriptor or epoll,, +                // so fire the exception through the pipeline and close the Channel., +                pipeline().fireExceptionCaught(e);, +                unsafe().close(unsafe().voidPromise());, +            }, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    int res = epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags);, +    if (res < 0) {, +        return -errno;, +    return res;, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd) {, +    int res = epoll_ctl(efd, EPOLL_CTL_DEL, fd, &event);, +    if (res < 0) {, +        return -errno;, +    return res;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_epollCtlAdd0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlMod0(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +jint Java_io_netty_channel_epoll_Native_epollCtlDel0(JNIEnv* env, jclass clazz, jint efd, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +import java.io.IOException;, +    void setFlag(int flag) throws IOException {, +    void clearFlag(int flag) throws IOException {, +    private void modifyEvents() throws IOException {, +            assert eventLoop().inEventLoop();, +            try {, +            } catch (IOException e) {, +                // When this happens there is something completely wrong with either the filedescriptor or epoll,, +                // so fire the exception through the pipeline and close the Channel., +                pipeline().fireExceptionCaught(e);]