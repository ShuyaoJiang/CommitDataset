[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +    private boolean started;, +    private final Object startStopLock = new Object();, +        Selector selector;, +, +        synchronized (startStopLock) {, +            if (!started) {, +                // Open a selector if this worker didn't start yet., +                try {, +                    this.selector = selector = Selector.open();, +                } catch (Throwable t) {, +                    throw new ChannelException(, +                            "Failed to create a selector.", t);, +                // Start the worker thread with the new Selector., +                boolean success = false;, +                try {, +                    success = true;, +                } finally {, +                    if (!success) {, +                        // Release the Selector if the execution fails., +                        try {, +                            selector.close();, +                        } catch (Throwable t) {, +                            logger.warn("Failed to close a selector.", t);, +                        }, +                        this.selector = selector = null;, +                        // The method will return to the caller at this point., +                    }, +                }, +            } else {, +                // Use the existing selector if this worker has been started., +                selector = this.selector;, +            }, +            , +            assert selector != null && selector.isOpen();, +, +            started = true;, +            registerTaskQueue.offer(registerTask);, +        }, +, +        if (wakenUp.compareAndSet(false, true)) {, +            selector.wakeup();, +                        synchronized (startStopLock) {, +                                started = false;, +                // Prevent possible consecutive immediate failures that lead to, +                // excessive CPU consumption.]