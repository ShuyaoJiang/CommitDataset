[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * ignored and discarded.  You also might want to refer to {@link ChannelUpstreamHandler}, + * to see how a {@link ChannelEvent} is interpreted when going upstream.  Also,, + * please refer to {@link ChannelEvent} to understand the fundamental difference, + * between a upstream event and a downstream event., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * ignored and discarded.  You also might want to refer to {@link ChannelUpstreamHandler}, + * to see how a {@link ChannelEvent} is interpreted when going upstream.  Also,, + * please refer to {@link ChannelEvent} to understand the fundamental difference, + * between a upstream event and a downstream event., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * <h3>Upstream and downstream events, and their interpretation</h3>, + * <p>, + * If an event flows from the first handler to the last handler, we call it a, + * upstream event and say "an event goes upstream".  If an event flows from, + * the last handler to the first handler, we call it a downstream event and say, + * "an event goes downstream"., + * <p>, + * A {@link ChannelEvent} is interpreted differently by a {@link ChannelHandler}, + * depending on whether the event is a upstream event or a downstream event., + * A upstream event represents the notification of what happened in the past., + * By contrast, a downstream event represents the request of what should happen, + * in the future.  For example, a {@link MessageEvent} represents the, + * notification of a received message when it goes upstream, while it, + * represents the request of writing a message when it goes downstream., + * <p>, + * Please refer to the documentation of {@link ChannelHandler} and its sub-types, + * ({@link ChannelUpstreamHandler} for upstream events and, + *  {@link ChannelDownstreamHandler} for downstream events) to find out how, + * a {@link ChannelEvent} is interpreted depending on the type of the handler., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * ignored and discarded.  You also might want to refer to {@link ChannelUpstreamHandler}, + * to see how a {@link ChannelEvent} is interpreted when going upstream.  Also,, + * please refer to {@link ChannelEvent} to understand the fundamental difference, + * between a upstream event and a downstream event., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * <h3>Upstream and downstream events, and their interpretation</h3>, + * <p>, + * If an event flows from the first handler to the last handler, we call it a, + * upstream event and say "an event goes upstream".  If an event flows from, + * the last handler to the first handler, we call it a downstream event and say, + * "an event goes downstream"., + * <p>, + * A {@link ChannelEvent} is interpreted differently by a {@link ChannelHandler}, + * depending on whether the event is a upstream event or a downstream event., + * A upstream event represents the notification of what happened in the past., + * By contrast, a downstream event represents the request of what should happen, + * in the future.  For example, a {@link MessageEvent} represents the, + * notification of a received message when it goes upstream, while it, + * represents the request of writing a message when it goes downstream., + * <p>, + * Please refer to the documentation of {@link ChannelHandler} and its sub-types, + * ({@link ChannelUpstreamHandler} for upstream events and, + *  {@link ChannelDownstreamHandler} for downstream events) to find out how, + * a {@link ChannelEvent} is interpreted depending on the type of the handler., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelSink.java, + * Receives and processes the terminal downstream {@link ChannelEvent}s., + * <p>, + * A {@link ChannelSink} is an internal component which is supposed to be, + * implemented by a transport provider.  Most users will not see this type, + * in their code., +, +    /**, +     * Invoked by {@link ChannelPipeline} when a downstream {@link ChannelEvent}, +     * has reached its terminal (the head of the pipeline)., +     */, +, +    /**, +     * Invoked by {@link ChannelPipeline} when an exception was raised while, +     * one of its {@link ChannelHandler}s process a {@link ChannelEvent}., +     */, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * ignored and discarded.  You also might want to refer to {@link ChannelUpstreamHandler}, + * to see how a {@link ChannelEvent} is interpreted when going upstream.  Also,, + * please refer to {@link ChannelEvent} to understand the fundamental difference, + * between a upstream event and a downstream event., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * <h3>Upstream and downstream events, and their interpretation</h3>, + * <p>, + * If an event flows from the first handler to the last handler, we call it a, + * upstream event and say "an event goes upstream".  If an event flows from, + * the last handler to the first handler, we call it a downstream event and say, + * "an event goes downstream"., + * <p>, + * A {@link ChannelEvent} is interpreted differently by a {@link ChannelHandler}, + * depending on whether the event is a upstream event or a downstream event., + * A upstream event represents the notification of what happened in the past., + * By contrast, a downstream event represents the request of what should happen, + * in the future.  For example, a {@link MessageEvent} represents the, + * notification of a received message when it goes upstream, while it, + * represents the request of writing a message when it goes downstream., + * <p>, + * Please refer to the documentation of {@link ChannelHandler} and its sub-types, + * ({@link ChannelUpstreamHandler} for upstream events and, + *  {@link ChannelDownstreamHandler} for downstream events) to find out how, + * a {@link ChannelEvent} is interpreted depending on the type of the handler., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelSink.java]