[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsServerAddressStreamProvider.java, +import io.netty.util.internal.SocketUtils;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +import java.lang.reflect.Method;, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +import static io.netty.resolver.dns.DnsServerAddresses.sequential;, + * <p>, + * This may use the JDK's blocking DNS resolution to bootstrap the default DNS server addresses., +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(DefaultDnsServerAddressStreamProvider.class);, +    private static final List<InetSocketAddress> DEFAULT_NAME_SERVER_LIST;, +    private static final InetSocketAddress[] DEFAULT_NAME_SERVER_ARRAY;, +    private static final DnsServerAddresses DEFAULT_NAME_SERVERS;, +    static final int DNS_PORT = 53;, +, +    static {, +        final List<InetSocketAddress> defaultNameServers = new ArrayList<InetSocketAddress>(2);, +        try {, +            Class<?> configClass = Class.forName("sun.net.dns.ResolverConfiguration");, +            Method open = configClass.getMethod("open");, +            Method nameservers = configClass.getMethod("nameservers");, +            Object instance = open.invoke(null);, +, +            @SuppressWarnings("unchecked"), +            final List<String> list = (List<String>) nameservers.invoke(instance);, +            for (String a: list) {, +                if (a != null) {, +                    defaultNameServers.add(new InetSocketAddress(SocketUtils.addressByName(a), DNS_PORT));, +                }, +            }, +        } catch (Exception ignore) {, +            // Failed to get the system name server list., +            // Will add the default name servers afterwards., +        }, +, +        if (!defaultNameServers.isEmpty()) {, +            if (logger.isDebugEnabled()) {, +                logger.debug(, +                        "Default DNS servers: {} (sun.net.dns.ResolverConfiguration)", defaultNameServers);, +            }, +        } else {, +            Collections.addAll(, +                    defaultNameServers,, +                    SocketUtils.socketAddress("8.8.8.8", DNS_PORT),, +                    SocketUtils.socketAddress("8.8.4.4", DNS_PORT));, +, +            if (logger.isWarnEnabled()) {, +                logger.warn(, +                        "Default DNS servers: {} (Google Public DNS as a fallback)", defaultNameServers);, +            }, +        }, +, +        DEFAULT_NAME_SERVER_LIST = Collections.unmodifiableList(defaultNameServers);, +        DEFAULT_NAME_SERVER_ARRAY = defaultNameServers.toArray(new InetSocketAddress[defaultNameServers.size()]);, +        DEFAULT_NAME_SERVERS = sequential(DEFAULT_NAME_SERVER_ARRAY);, +    }, +, +        return DEFAULT_NAME_SERVERS.stream();, +    }, +, +    /**, +     * Returns the list of the system DNS server addresses. If it failed to retrieve the list of the system DNS server, +     * addresses from the environment, it will return {@code "8.8.8.8"} and {@code "8.8.4.4"}, the addresses of the, +     * Google public DNS servers., +     */, +    public static List<InetSocketAddress> defaultAddressList() {, +        return DEFAULT_NAME_SERVER_LIST;, +    }, +, +    /**, +     * Returns the {@link DnsServerAddresses} that yields the system DNS server addresses sequentially. If it failed to, +     * retrieve the list of the system DNS server addresses from the environment, it will use {@code "8.8.8.8"} and, +     * {@code "8.8.4.4"}, the addresses of the Google public DNS servers., +     * <p>, +     * This method has the same effect with the following code:, +     * <pre>, +     * DnsServerAddresses.sequential(DnsServerAddresses.defaultAddressList());, +     * </pre>, +     * </p>, +     */, +    public static DnsServerAddresses defaultAddresses() {, +        return DEFAULT_NAME_SERVERS;, +    }, +, +    /**, +     * Get the array form of {@link #defaultAddressList()}., +     * @return The array form of {@link #defaultAddressList()}., +     */, +    static InetSocketAddress[] defaultAddressArray() {, +        return DEFAULT_NAME_SERVER_ARRAY.clone();, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsServerAddressStreamProvider.java, +import io.netty.util.internal.SocketUtils;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +import java.lang.reflect.Method;]