[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +        if (request instanceof HttpContent) {, +            // Offer automatically if the given request is als type of HttpContent, +            // See #1089, +            offer((HttpContent) request);, +        } else {, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +        if (request instanceof HttpContent) {, +            // Offer automatically if the given request is als type of HttpContent, +            // See #1089, +            offer((HttpContent) request);, +        } else {, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java, +import io.netty.handler.codec.http.DefaultFullHttpRequest;, +import static org.junit.Assert.assertEquals;, +, +    // See https://github.com/netty/netty/issues/1089, +    @Test, +    public void testFullHttpRequestUpload() throws Exception {, +        final String boundary = "dLV9Wyq26L_-JQxk6ferf-RT153LhOO";, +, +        final DefaultFullHttpRequest req = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "http://localhost");, +, +        req.setDecoderResult(DecoderResult.SUCCESS);, +        req.headers().add(HttpHeaders.Names.CONTENT_TYPE, "multipart/form-data; boundary=" + boundary);, +        req.headers().add(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);, +, +        // Force to use memory-based data., +        final DefaultHttpDataFactory inMemoryFactory = new DefaultHttpDataFactory(false);, +, +        for (String data : Arrays.asList("", "\r", "\r\r", "\r\r\r")) {, +            final String body =, +                    "--" + boundary + "\r\n" +, +                            "Content-Disposition: form-data; name=\"file\"; filename=\"tmp-0.txt\"\r\n" +, +                            "Content-Type: image/gif\r\n" +, +                            "\r\n" +, +                            data + "\r\n" +, +                            "--" + boundary + "--\r\n";, +, +            req.data().writeBytes(body.getBytes(CharsetUtil.UTF_8));, +        }, +        // Create decoder instance to test., +        final HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(inMemoryFactory, req);, +        assertFalse(decoder.getBodyHttpDatas().isEmpty());, +, +    }]