[+++ /dev/null, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/socksproxy/DirectClientHandler.java, +import io.netty.util.concurrent.Promise;, +    private final Promise promise;, +    public DirectClientHandler(Promise promise) {, +        this.promise = promise;, +        promise.setSuccess(ctx.channel());, +        promise.setFailure(throwable);, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/socksproxy/DirectClientHandler.java, +import io.netty.util.concurrent.Promise;, +    private final Promise promise;, +    public DirectClientHandler(Promise promise) {, +        this.promise = promise;, +        promise.setSuccess(ctx.channel());, +        promise.setFailure(throwable);, +++ b/example/src/main/java/io/netty/example/socksproxy/DirectClientInitializer.java, +import io.netty.util.concurrent.Promise;, +    private final Promise promise;, +    public DirectClientInitializer(Promise promise) {, +        this.promise = promise;, +        channelPipeline.addLast(DirectClientHandler.getName(), new DirectClientHandler(promise));, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/socksproxy/DirectClientHandler.java, +import io.netty.util.concurrent.Promise;, +    private final Promise promise;, +    public DirectClientHandler(Promise promise) {, +        this.promise = promise;, +        promise.setSuccess(ctx.channel());, +        promise.setFailure(throwable);, +++ b/example/src/main/java/io/netty/example/socksproxy/DirectClientInitializer.java, +import io.netty.util.concurrent.Promise;, +    private final Promise promise;, +    public DirectClientInitializer(Promise promise) {, +        this.promise = promise;, +        channelPipeline.addLast(DirectClientHandler.getName(), new DirectClientHandler(promise));, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +import io.netty.util.concurrent.Future;, +import io.netty.util.concurrent.GenericFutureListener;, +import io.netty.util.concurrent.Promise;, +        Promise promise = ctx.executor().newPromise();, +        promise.addListener(, +            new GenericFutureListener<Future<Channel>>() {, +            public void operationComplete(final Future<Channel> future) throws Exception {, +                final Channel outboundChannel = future.getNow();, +                if (future.isSuccess()) {, +                                    outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));, +                                    ctx.channel().pipeline().addLast(new RelayHandler(outboundChannel));, +                } else {, +            }, +        });, +                .handler(new DirectClientInitializer(promise));, +        b.connect(request.host(), request.port()), +          .addListener(new ChannelFutureListener() {, +                @Override, +                public void operationComplete(ChannelFuture future) throws Exception {, +                    if (future.isSuccess()) {, +                        // Connection established use handler provided results, +                    } else {, +                        // Close the connection if the connection attempt has failed., +                        ctx.channel().writeAndFlush(, +                                new SocksCmdResponse(SocksCmdStatus.FAILURE, request.addressType()));, +                        SocksServerUtils.closeOnFlush(ctx.channel());, +                    }, +                }, +           });]