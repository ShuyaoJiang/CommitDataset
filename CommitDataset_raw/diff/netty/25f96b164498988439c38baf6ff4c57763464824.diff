[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +    private void validatePromise(ChannelPromise promise, boolean allowUnsafe) {, +, +        if (promise.isDone()) {, +            throw new IllegalArgumentException("promise already done: " + promise);, +        }, +, +        // check if the promise is of type DefaultChannelPromise and if so check if its validated already., +        DefaultChannelPromise p = null;, +        if (promise instanceof DefaultChannelPromise) {, +            p = (DefaultChannelPromise) promise;, +            if (p.isValidated()) {, +                return;, +            }, +        }, +, +, +        if (p != null) {, +            // mark as validated, +            p.validated();, +        }, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +    private void validatePromise(ChannelPromise promise, boolean allowUnsafe) {, +, +        if (promise.isDone()) {, +            throw new IllegalArgumentException("promise already done: " + promise);, +        }, +, +        // check if the promise is of type DefaultChannelPromise and if so check if its validated already., +        DefaultChannelPromise p = null;, +        if (promise instanceof DefaultChannelPromise) {, +            p = (DefaultChannelPromise) promise;, +            if (p.isValidated()) {, +                return;, +            }, +        }, +, +, +        if (p != null) {, +            // mark as validated, +            p.validated();, +        }, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPromise.java, +    private boolean validated;, +, +    final boolean isValidated() {, +        return validated;, +    }, +, +    final void validated() {, +        validated = true;, +    }]