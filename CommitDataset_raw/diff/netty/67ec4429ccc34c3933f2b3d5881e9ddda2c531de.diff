[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannelConfig.java, +import java.net.InetAddress;, +import java.net.SocketException;, +import java.util.Enumeration;, +    private static final Object IP_MULTICAST_TTL;, +    private static final Object IP_MULTICAST_LOOP;, +        Object ipMulticastTtl = null;, +        Object ipMulticastLoop = null;, +                ipMulticastIf = Class.forName("java.net.StandardSocketOptions", true, classLoader).getDeclaredField("IP_MULTICAST_TTL").get(null);, +            } catch (Exception e) {, +                throw new Error("cannot locate the IP_MULTICAST_TTL field", e);, +            }, +, +            try {, +                ipMulticastIf = Class.forName("java.net.StandardSocketOptions", true, classLoader).getDeclaredField("IP_MULTICAST_LOOP").get(null);, +            } catch (Exception e) {, +                throw new Error("cannot locate the IP_MULTICAST_LOOP field", e);, +            }, +, +            try {, +        IP_MULTICAST_TTL = ipMulticastTtl;, +        IP_MULTICAST_LOOP = ipMulticastLoop;, +    public int getTimeToLive() {, +        return (Integer) getOption0(IP_MULTICAST_TTL);, +    }, +, +    @Override, +    public void setTimeToLive(int ttl) {, +        setOption0(IP_MULTICAST_TTL, ttl);, +    }, +, +    @Override, +    public InetAddress getInterface() {, +        NetworkInterface inf = getNetworkInterface();, +        if (inf == null) {, +            return null;, +        } else {, +            Enumeration<InetAddress> addresses = inf.getInetAddresses();, +            if (addresses.hasMoreElements()) {, +                return addresses.nextElement();, +            }, +            return null;, +        }, +    }, +, +    @Override, +    public void setInterface(InetAddress interfaceAddress) {, +        try {, +            setNetworkInterface(NetworkInterface.getByInetAddress(interfaceAddress));, +        } catch (SocketException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    @Override, +    public NetworkInterface getNetworkInterface() {, +        return (NetworkInterface) getOption0(IP_MULTICAST_IF);, +    }, +, +    @Override, +        setOption0(IP_MULTICAST_IF, networkInterface);, +    }, +, +    @Override, +    public boolean isLoopbackModeDisabled() {, +        return (Boolean) getOption0(IP_MULTICAST_LOOP);, +    }, +, +    @Override, +    public void setLoopbackModeDisabled(boolean loopbackModeDisabled) {, +        setOption0(IP_MULTICAST_LOOP, loopbackModeDisabled);, +    }, +, +    private Object getOption0(Object option) {, +                return GET_OPTION.invoke(channel, option);, +    private void setOption0(Object option, Object value) {, +                SET_OPTION.invoke(channel, option, value);]