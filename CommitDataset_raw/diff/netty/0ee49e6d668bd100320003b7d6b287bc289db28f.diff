[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        return PlatformDependent0.isAndroid();, +        return PlatformDependent0.javaVersion();, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        return PlatformDependent0.isAndroid();, +        return PlatformDependent0.javaVersion();, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final int JAVA_VERSION = javaVersion0();, +    private static final boolean IS_ANDROID = isAndroid0();, +            if (javaVersion() >= 9) {, +            } else {, +                logger.debug("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9");, +            }, +            ALLOCATE_ARRAY_METHOD = allocateArrayMethod;, +    static boolean isAndroid() {, +        return IS_ANDROID;, +    }, +, +    private static boolean isAndroid0() {, +        boolean android;, +        try {, +            Class.forName("android.app.Application", false, getSystemClassLoader());, +            android = true;, +        } catch (Throwable ignored) {, +            // Failed to load the class uniquely available in Android., +            android = false;, +        }, +, +        if (android) {, +            logger.debug("Platform: Android");, +        }, +        return android;, +    }, +, +    static int javaVersion() {, +        return JAVA_VERSION;, +    }, +, +    private static int javaVersion0() {, +        final int majorVersion;, +, +        if (isAndroid0()) {, +            majorVersion = 6;, +        } else {, +            majorVersion = majorVersionFromJavaSpecificationVersion();, +        }, +, +        logger.debug("Java version: {}", majorVersion);, +, +        return majorVersion;, +    }, +, +    // Package-private for testing only, +    static int majorVersionFromJavaSpecificationVersion() {, +        return majorVersion(SystemPropertyUtil.get("java.specification.version", "1.6"));, +    }, +, +    // Package-private for testing only, +    static int majorVersion(final String javaSpecVersion) {, +        final String[] components = javaSpecVersion.split("\\.");, +        final int[] version = new int[components.length];, +        for (int i = 0; i < components.length; i++) {, +            version[i] = Integer.parseInt(components[i]);, +        }, +, +        if (version[0] == 1) {, +            assert version[1] >= 6;, +            return version[1];, +        } else {, +            return version[0];, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        return PlatformDependent0.isAndroid();, +        return PlatformDependent0.javaVersion();, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final int JAVA_VERSION = javaVersion0();, +    private static final boolean IS_ANDROID = isAndroid0();, +            if (javaVersion() >= 9) {, +            } else {, +                logger.debug("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9");, +            }, +            ALLOCATE_ARRAY_METHOD = allocateArrayMethod;, +    static boolean isAndroid() {, +        return IS_ANDROID;, +    }, +, +    private static boolean isAndroid0() {, +        boolean android;, +        try {, +            Class.forName("android.app.Application", false, getSystemClassLoader());, +            android = true;, +        } catch (Throwable ignored) {, +            // Failed to load the class uniquely available in Android., +            android = false;, +        }, +, +        if (android) {, +            logger.debug("Platform: Android");]