[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.internal.OneTimeTask;, +        final ChannelPipeline p = channel.pipeline();, +            final HttpClientCodec codec =  (HttpClientCodec) ctx.handler();, +            // Remove the encoder part of the codec as the user may start writing frames after this method returns., +            codec.removeOutboundHandler();, +, +            p.addAfter(ctx.name(), "ws-decoder", newWebsocketDecoder());, +, +            // Delay the removal of the decoder so the user can setup the pipeline if needed to handle, +            // WebSocketFrame messages., +            // See https://github.com/netty/netty/issues/4533, +            channel.eventLoop().execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    p.remove(codec);, +                }, +            });, +                // Remove the encoder part of the codec as the user may start writing frames after this method returns., +            final ChannelHandlerContext context = ctx;, +            p.addAfter(context.name(), "ws-decoder", newWebsocketDecoder());, +, +            // Delay the removal of the decoder so the user can setup the pipeline if needed to handle, +            // WebSocketFrame messages., +            // See https://github.com/netty/netty/issues/4533, +            channel.eventLoop().execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    p.remove(context.handler());, +                }, +            });, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.internal.OneTimeTask;, +        final ChannelPipeline p = channel.pipeline();, +            final HttpClientCodec codec =  (HttpClientCodec) ctx.handler();, +            // Remove the encoder part of the codec as the user may start writing frames after this method returns., +            codec.removeOutboundHandler();, +, +            p.addAfter(ctx.name(), "ws-decoder", newWebsocketDecoder());, +, +            // Delay the removal of the decoder so the user can setup the pipeline if needed to handle, +            // WebSocketFrame messages., +            // See https://github.com/netty/netty/issues/4533, +            channel.eventLoop().execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    p.remove(codec);, +                }, +            });, +                // Remove the encoder part of the codec as the user may start writing frames after this method returns., +            final ChannelHandlerContext context = ctx;, +            p.addAfter(context.name(), "ws-decoder", newWebsocketDecoder());, +, +            // Delay the removal of the decoder so the user can setup the pipeline if needed to handle, +            // WebSocketFrame messages., +            // See https://github.com/netty/netty/issues/4533, +            channel.eventLoop().execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    p.remove(context.handler());, +                }, +            });, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.CompositeByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.SimpleChannelInboundHandler;, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.handler.codec.http.EmptyHttpHeaders;, +import io.netty.handler.codec.http.FullHttpResponse;, +import io.netty.handler.codec.http.HttpClientCodec;, +import io.netty.handler.codec.http.HttpObjectAggregator;, +import io.netty.handler.codec.http.HttpRequestEncoder;, +import io.netty.handler.codec.http.HttpResponseDecoder;, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.ThreadLocalRandom;, +import static org.junit.Assert.assertTrue;, +, +    @Test(timeout = 3000), +    public void testHttpResponseAndFrameInSameBuffer() {, +        testHttpResponseAndFrameInSameBuffer(false);, +    }, +, +    @Test(timeout = 3000), +    public void testHttpResponseAndFrameInSameBufferCodec() {, +        testHttpResponseAndFrameInSameBuffer(true);, +    }, +, +    private void testHttpResponseAndFrameInSameBuffer(boolean codec) {, +        String url = "ws://localhost:9999/ws";, +        final WebSocketClientHandshaker shaker = newHandshaker(URI.create(url));, +        final WebSocketClientHandshaker handshaker = new WebSocketClientHandshaker(, +                shaker.uri(), shaker.version(), null, EmptyHttpHeaders.INSTANCE, Integer.MAX_VALUE) {, +            @Override, +            protected FullHttpRequest newHandshakeRequest() {, +                return shaker.newHandshakeRequest();, +            }, +, +            @Override]