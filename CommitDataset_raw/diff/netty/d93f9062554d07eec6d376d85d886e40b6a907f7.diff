[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +             * Synchronize on the head. This is needed as {@link PoolChunk#allocateSubpage(int)} and, +             * {@link PoolChunk#free(long)} may modify the doubly linked list as well., +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +             * Synchronize on the head. This is needed as {@link PoolChunk#allocateSubpage(int)} and, +             * {@link PoolChunk#free(long)} may modify the doubly linked list as well., +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +        // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +        // This is need as we may add it back and so alter the linked-list structure., +        PoolSubpage<T> head = arena.findSubpagePoolHead(normCapacity);, +        synchronized (head) {, +                subpage = new PoolSubpage<T>(head, this, id, runOffset(id), pageSize, normCapacity);, +                subpage.init(head, normCapacity);, +    }, +, +            // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +            // This is need as we may add it back and so alter the linked-list structure., +            PoolSubpage<T> head = arena.findSubpagePoolHead(subpage.elemSize);, +            synchronized (head) {, +                if (subpage.free(head, bitmapIdx & 0x3FFFFFFF)) {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +             * Synchronize on the head. This is needed as {@link PoolChunk#allocateSubpage(int)} and, +             * {@link PoolChunk#free(long)} may modify the doubly linked list as well., +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +        // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +        // This is need as we may add it back and so alter the linked-list structure., +        PoolSubpage<T> head = arena.findSubpagePoolHead(normCapacity);, +        synchronized (head) {, +                subpage = new PoolSubpage<T>(head, this, id, runOffset(id), pageSize, normCapacity);, +                subpage.init(head, normCapacity);, +    }, +, +            // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +            // This is need as we may add it back and so alter the linked-list structure., +            PoolSubpage<T> head = arena.findSubpagePoolHead(subpage.elemSize);, +            synchronized (head) {, +                if (subpage.free(head, bitmapIdx & 0x3FFFFFFF)) {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolSubpage.java, +    PoolSubpage(PoolSubpage<T> head, PoolChunk<T> chunk, int memoryMapIdx, int runOffset, int pageSize, int elemSize) {, +        init(head, elemSize);, +    void init(PoolSubpage<T> head, int elemSize) {, +    boolean free(PoolSubpage<T> head, int bitmapIdx) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +             * Synchronize on the head. This is needed as {@link PoolChunk#allocateSubpage(int)} and, +             * {@link PoolChunk#free(long)} may modify the doubly linked list as well., +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +        // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +        // This is need as we may add it back and so alter the linked-list structure., +        PoolSubpage<T> head = arena.findSubpagePoolHead(normCapacity);, +        synchronized (head) {, +                subpage = new PoolSubpage<T>(head, this, id, runOffset(id), pageSize, normCapacity);, +                subpage.init(head, normCapacity);, +    }, +, +            // Obtain the head of the PoolSubPage pool that is owned by the PoolArena and synchronize on it., +            // This is need as we may add it back and so alter the linked-list structure., +            PoolSubpage<T> head = arena.findSubpagePoolHead(subpage.elemSize);, +            synchronized (head) {, +                if (subpage.free(head, bitmapIdx & 0x3FFFFFFF)) {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolSubpage.java, +    PoolSubpage(PoolSubpage<T> head, PoolChunk<T> chunk, int memoryMapIdx, int runOffset, int pageSize, int elemSize) {, +        init(head, elemSize);, +    void init(PoolSubpage<T> head, int elemSize) {, +    boolean free(PoolSubpage<T> head, int bitmapIdx) {, +++ b/buffer/src/test/java/io/netty/buffer/PooledByteBufAllocatorTest.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.buffer;, +, +import io.netty.util.internal.SystemPropertyUtil;, +import org.junit.Test;, +, +import java.util.ArrayDeque;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Queue;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +public class PooledByteBufAllocatorTest {, +, +    private static final int[] ALLOCATION_SIZES = new int[16 * 1024];, +    static {]