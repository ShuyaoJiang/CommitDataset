[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +public abstract class HttpContentEncoder extends MessageToMessageCodec<HttpMessage, HttpObject> {, +    public Object encode(ChannelHandlerContext ctx, HttpObject msg), +    protected void freeOutboundMessage(HttpObject msg) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +public abstract class HttpContentEncoder extends MessageToMessageCodec<HttpMessage, HttpObject> {, +    public Object encode(ChannelHandlerContext ctx, HttpObject msg), +    protected void freeOutboundMessage(HttpObject msg) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpResponseStreamIdHandler.java, +    @Override, +    public boolean acceptInboundMessage(Object msg) throws Exception {, +        return msg instanceof HttpMessage || msg instanceof SpdyRstStreamFrame;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +public abstract class HttpContentEncoder extends MessageToMessageCodec<HttpMessage, HttpObject> {, +    public Object encode(ChannelHandlerContext ctx, HttpObject msg), +    protected void freeOutboundMessage(HttpObject msg) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpResponseStreamIdHandler.java, +    @Override, +    public boolean acceptInboundMessage(Object msg) throws Exception {, +        return msg instanceof HttpMessage || msg instanceof SpdyRstStreamFrame;, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageCodec.java, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelOutboundMessageHandlerAdapter;, +import io.netty.util.internal.TypeParameterFinder;, +    private final MessageToMessageEncoder<Object> encoder =, +            new MessageToMessageEncoder<Object>() {, +            return MessageToMessageCodec.this.acceptOutboundMessage(msg);, +        @SuppressWarnings("unchecked"), +        public Object encode(ChannelHandlerContext ctx, Object msg) throws Exception {, +            return MessageToMessageCodec.this.encode(ctx, (OUTBOUND_IN) msg);, +        @SuppressWarnings("unchecked"), +        protected void freeOutboundMessage(Object msg) throws Exception {, +            MessageToMessageCodec.this.freeOutboundMessage((OUTBOUND_IN) msg);, +    private final MessageToMessageDecoder<Object> decoder =, +            new MessageToMessageDecoder<Object>() {, +            return MessageToMessageCodec.this.acceptInboundMessage(msg);, +        @SuppressWarnings("unchecked"), +        public Object decode(ChannelHandlerContext ctx, Object msg) throws Exception {, +            return MessageToMessageCodec.this.decode(ctx, (INBOUND_IN) msg);, +        @SuppressWarnings("unchecked"), +        protected void freeInboundMessage(Object msg) throws Exception {, +            MessageToMessageCodec.this.freeInboundMessage((INBOUND_IN) msg);, +    private final Class<?> acceptedInboundMsgType;, +    private final Class<?> acceptedOutboundMsgType;, +        acceptedInboundMsgType = TypeParameterFinder.findActualTypeParameter(this, MessageToMessageCodec.class, 0);, +        acceptedOutboundMsgType = TypeParameterFinder.findActualTypeParameter(this, MessageToMessageCodec.class, 1);, +            @SuppressWarnings("rawtypes"), +            Class<? extends ChannelInboundMessageHandlerAdapter> parameterizedInboundHandlerType,, +            int inboundMessageTypeParamIndex,, +            @SuppressWarnings("rawtypes"), +            Class<? extends ChannelOutboundMessageHandlerAdapter> parameterizedOutboundHandlerType,, +            int outboundMessageTypeParamIndex) {, +, +        acceptedInboundMsgType = TypeParameterFinder.findActualTypeParameter(, +                this, parameterizedInboundHandlerType, inboundMessageTypeParamIndex);, +        acceptedOutboundMsgType = TypeParameterFinder.findActualTypeParameter(, +                this, parameterizedOutboundHandlerType, outboundMessageTypeParamIndex);, +    @SuppressWarnings("unchecked"), +        return (MessageBuf<INBOUND_IN>) decoder.newInboundBuffer(ctx);, +    @SuppressWarnings("unchecked"), +        return (MessageBuf<OUTBOUND_IN>) encoder.newOutboundBuffer(ctx);, +    public boolean acceptInboundMessage(Object msg) throws Exception {, +        return acceptedInboundMsgType.isInstance(msg);, +    public boolean acceptOutboundMessage(Object msg) throws Exception {, +        return acceptedOutboundMsgType.isInstance(msg);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +public abstract class HttpContentEncoder extends MessageToMessageCodec<HttpMessage, HttpObject> {, +    public Object encode(ChannelHandlerContext ctx, HttpObject msg), +    protected void freeOutboundMessage(HttpObject msg) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpResponseStreamIdHandler.java, +    @Override, +    public boolean acceptInboundMessage(Object msg) throws Exception {, +        return msg instanceof HttpMessage || msg instanceof SpdyRstStreamFrame;, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageCodec.java, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelOutboundMessageHandlerAdapter;, +import io.netty.util.internal.TypeParameterFinder;, +    private final MessageToMessageEncoder<Object> encoder =, +            new MessageToMessageEncoder<Object>() {, +            return MessageToMessageCodec.this.acceptOutboundMessage(msg);, +        @SuppressWarnings("unchecked"), +        public Object encode(ChannelHandlerContext ctx, Object msg) throws Exception {, +            return MessageToMessageCodec.this.encode(ctx, (OUTBOUND_IN) msg);, +        @SuppressWarnings("unchecked"), +        protected void freeOutboundMessage(Object msg) throws Exception {, +            MessageToMessageCodec.this.freeOutboundMessage((OUTBOUND_IN) msg);, +    private final MessageToMessageDecoder<Object> decoder =, +            new MessageToMessageDecoder<Object>() {, +            return MessageToMessageCodec.this.acceptInboundMessage(msg);, +        @SuppressWarnings("unchecked"), +        public Object decode(ChannelHandlerContext ctx, Object msg) throws Exception {, +            return MessageToMessageCodec.this.decode(ctx, (INBOUND_IN) msg);, +        @SuppressWarnings("unchecked"), +        protected void freeInboundMessage(Object msg) throws Exception {, +            MessageToMessageCodec.this.freeInboundMessage((INBOUND_IN) msg);, +    private final Class<?> acceptedInboundMsgType;, +    private final Class<?> acceptedOutboundMsgType;, +        acceptedInboundMsgType = TypeParameterFinder.findActualTypeParameter(this, MessageToMessageCodec.class, 0);, +        acceptedOutboundMsgType = TypeParameterFinder.findActualTypeParameter(this, MessageToMessageCodec.class, 1);, +            @SuppressWarnings("rawtypes")]