[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.DecoderResult;, +import io.netty.handler.codec.memcache.MemcacheMessage;, +            case READ_HEADER: try {, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_EXTRAS: try {, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_KEY: try {, +                state = State.READ_CONTENT;, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_CONTENT: try {, +            } catch (Exception e) {, +                out.add(invalidChunk(e));, +                return;, +            }, +            case BAD_MESSAGE:, +                in.skipBytes(actualReadableBytes());, +                return;, +     * Helper method to create a message indicating a invalid decoding result., +     *, +     * @param cause the cause of the decoding failure., +     * @return a valid message indicating failure., +     */, +    private M invalidMessage(Exception cause) {, +        state = State.BAD_MESSAGE;, +        M message = buildInvalidMessage();, +        message.setDecoderResult(DecoderResult.failure(cause));, +        return message;, +    }, +, +    /**, +     * Helper method to create a content chunk indicating a invalid decoding result., +     *, +     * @param cause the cause of the decoding failure., +     * @return a valid content chunk indicating failure., +     */, +    private MemcacheContent invalidChunk(Exception cause) {, +        state = State.BAD_MESSAGE;, +        MemcacheContent chunk = new DefaultLastMemcacheContent(Unpooled.EMPTY_BUFFER);, +        chunk.setDecoderResult(DecoderResult.failure(cause));, +        return chunk;, +    }, +, +    /**, +     * Helper method to create a upstream message when the incoming parsing did fail., +     *, +     * @return a message indicating a decoding failure., +     */, +    protected abstract M buildInvalidMessage();, +, +    /**, +        READ_CONTENT,, +, +        /**, +         * Something went wrong while decoding the message or chunks., +         */, +        BAD_MESSAGE, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/AbstractBinaryMemcacheDecoder.java, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.DecoderResult;, +import io.netty.handler.codec.memcache.MemcacheMessage;, +            case READ_HEADER: try {, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_EXTRAS: try {, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_KEY: try {, +                state = State.READ_CONTENT;, +            } catch (Exception e) {, +                out.add(invalidMessage(e));, +                return;, +            }, +            case READ_CONTENT: try {, +            } catch (Exception e) {, +                out.add(invalidChunk(e));, +                return;, +            }, +            case BAD_MESSAGE:, +                in.skipBytes(actualReadableBytes());, +                return;, +     * Helper method to create a message indicating a invalid decoding result., +     *, +     * @param cause the cause of the decoding failure., +     * @return a valid message indicating failure., +     */]