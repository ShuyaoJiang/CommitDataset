[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.nio.channels.NotYetConnectedException;, +, +, +            // Mark all pending write requests as failure if the channel is inactive., +            if (!isActive()) {, +                if (isOpen()) {, +                    outboundBuffer.fail(new NotYetConnectedException());, +                } else {, +                    outboundBuffer.fail(new ClosedChannelException());, +                }, +                inFlushNow = false;, +                return;, +            }, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.nio.channels.NotYetConnectedException;, +, +, +            // Mark all pending write requests as failure if the channel is inactive., +            if (!isActive()) {, +                if (isOpen()) {, +                    outboundBuffer.fail(new NotYetConnectedException());, +                } else {, +                    outboundBuffer.fail(new ClosedChannelException());, +                }, +                inFlushNow = false;, +                return;, +            }, +, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import java.nio.channels.NotYetConnectedException;, +, +, +            // Mark all pending write requests as failure if the channel is inactive., +            if (!isActive()) {, +                if (isOpen()) {, +                    outboundBuffer.fail(new NotYetConnectedException());, +                } else {, +                    outboundBuffer.fail(new ClosedChannelException());, +                }, +                inFlushNow = false;, +                return;, +            }, +, +++ /dev/null, +++ b/transport/src/test/java/io/netty/channel/local/LocalChannelTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.local;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.AbstractChannel;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.MessageList;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +import org.junit.Test;, +, +import java.nio.channels.ClosedChannelException;, +import java.util.concurrent.CountDownLatch;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +public class LocalChannelTest {, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(LocalChannelTest.class);, +, +    private static final String LOCAL_ADDR_ID = "test.id";, +, +    @Test, +    public void testLocalAddressReuse() throws Exception {, +        for (int i = 0; i < 2; i ++) {, +            EventLoopGroup clientGroup = new LocalEventLoopGroup();, +            EventLoopGroup serverGroup = new LocalEventLoopGroup();, +            LocalAddress addr = new LocalAddress(LOCAL_ADDR_ID);, +            Bootstrap cb = new Bootstrap();, +            ServerBootstrap sb = new ServerBootstrap();, +, +            cb.group(clientGroup)]