[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +    private static final int DEFAULT_NUM_HEAP_ARENA;, +    private static final int DEFAULT_NUM_DIRECT_ARENA;, +, +        // Determine reasonable default for nHeapArena and nDirectArena., +        // Assuming each arena has 3 chunks, the pool should not consume more than 50% of max memory., +        final Runtime runtime = Runtime.getRuntime();, +        final int defaultChunkSize = DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER;, +        DEFAULT_NUM_HEAP_ARENA = Math.max(0,, +                SystemPropertyUtil.getInt(, +                        "io.netty.allocator.numHeapArenas",, +                        (int) Math.min(, +                                runtime.availableProcessors(),, +                                Runtime.getRuntime().maxMemory() / defaultChunkSize / 2 / 3)));, +        DEFAULT_NUM_DIRECT_ARENA = Math.max(0,, +                SystemPropertyUtil.getInt(, +                        "io.netty.allocator.numDirectArenas",, +                        (int) Math.min(, +                                runtime.availableProcessors(),, +                                PlatformDependent.maxDirectMemory() / defaultChunkSize / 2 / 3)));, +, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +    private static final int DEFAULT_NUM_HEAP_ARENA;, +    private static final int DEFAULT_NUM_DIRECT_ARENA;, +, +        // Determine reasonable default for nHeapArena and nDirectArena., +        // Assuming each arena has 3 chunks, the pool should not consume more than 50% of max memory., +        final Runtime runtime = Runtime.getRuntime();, +        final int defaultChunkSize = DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER;, +        DEFAULT_NUM_HEAP_ARENA = Math.max(0,, +                SystemPropertyUtil.getInt(, +                        "io.netty.allocator.numHeapArenas",, +                        (int) Math.min(, +                                runtime.availableProcessors(),, +                                Runtime.getRuntime().maxMemory() / defaultChunkSize / 2 / 3)));, +        DEFAULT_NUM_DIRECT_ARENA = Math.max(0,, +                SystemPropertyUtil.getInt(, +                        "io.netty.allocator.numDirectArenas",, +                        (int) Math.min(, +                                runtime.availableProcessors(),, +                                PlatformDependent.maxDirectMemory() / defaultChunkSize / 2 / 3)));, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.lang.management.ManagementFactory;, +import java.lang.management.RuntimeMXBean;, +import java.lang.reflect.Method;, +import java.util.List;, +import java.util.regex.Matcher;, +    private static final Pattern MAX_DIRECT_MEMORY_SIZE_ARG_PATTERN = Pattern.compile(, +            "\\s*-XX:MaxDirectMemorySize\\s*=\\s*([0-9]+)\\s*([kKmMgG]?)\\s*$");, +, +    private static final long MAX_DIRECT_MEMORY = maxDirectMemory0();, +     * Returns the maximum memory reserved for direct buffer allocation., +     */, +    public static long maxDirectMemory() {, +        return MAX_DIRECT_MEMORY;, +    }, +, +    /**, +    private static long maxDirectMemory0() {, +        long maxDirectMemory = 0;, +        try {, +            // Try to get from sun.misc.VM.maxDirectMemory() which should be most accurate., +            Class<?> vmClass = Class.forName("sun.misc.VM", true, ClassLoader.getSystemClassLoader());, +            Method m = vmClass.getDeclaredMethod("maxDirectMemory");, +            maxDirectMemory = ((Number) m.invoke(null)).longValue();, +        } catch (Throwable t) {, +            // Ignore, +        }, +, +        if (maxDirectMemory <= 0) {, +            // Now try to get the JVM option (-XX:MaxDirectMemorySize) and parse it., +            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();, +            List<String> vmArgs = runtime.getInputArguments();, +            for (int i = vmArgs.size() - 1; i >= 0; i --) {, +                Matcher m = MAX_DIRECT_MEMORY_SIZE_ARG_PATTERN.matcher(vmArgs.get(i));, +                if (!m.matches()) {, +                    continue;, +                }, +, +                maxDirectMemory = Long.parseLong(m.group(1));, +                switch (m.group(2).charAt(0)) {, +                    case 'k': case 'K':, +                        maxDirectMemory *= 1024;, +                        break;, +                    case 'm': case 'M':, +                        maxDirectMemory *= 1024 * 1024;, +                        break;, +                    case 'g': case 'G':, +                        maxDirectMemory *= 1024 * 1024 * 1024;, +                        break;, +                }, +                break;, +            }, +        }, +, +        if (maxDirectMemory <= 0) {, +            maxDirectMemory = Runtime.getRuntime().maxMemory();, +            logger.debug("maxDirectMemory: {} bytes (maybe)", maxDirectMemory);, +        } else {]