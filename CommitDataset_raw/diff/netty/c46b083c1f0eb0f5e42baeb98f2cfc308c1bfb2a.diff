[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, +        String rawPath = uri.getRawPath();, +        if (rawPath != null) {, +            hasPath = true;, +        } else {, +            rawPath ="";, +            hasPath = false;, +        }, +        // Also take care of cut of things like "http://localhost" , +        String newUri = rawPath + "?" + uri.getRawQuery();, +, +        this.uri = newUri.replace(';', '&');, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, +        String rawPath = uri.getRawPath();, +        if (rawPath != null) {, +            hasPath = true;, +        } else {, +            rawPath ="";, +            hasPath = false;, +        }, +        // Also take care of cut of things like "http://localhost" , +        String newUri = rawPath + "?" + uri.getRawQuery();, +, +        this.uri = newUri.replace(';', '&');, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/QueryStringDecoderTest.java, +import java.net.URI;, +import java.util.Iterator;, +import java.util.Map.Entry;, +, +    // See #189, +    @Test, +    public void testURI() {, +        URI uri = URI.create("http://localhost:8080/foo?param1=value1&param2=value2&param3=value3");, +        QueryStringDecoder decoder = new QueryStringDecoder(uri);, +        Assert.assertEquals("/foo", decoder.getPath());, +        Map<String, List<String>> params =  decoder.getParameters();, +        Assert.assertEquals(3, params.size());, +        Iterator<Entry<String, List<String>>> entries = params.entrySet().iterator();, +        , +        Entry<String, List<String>> entry = entries.next();, +        Assert.assertEquals("param1", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value1", entry.getValue().get(0));, +, +        , +        entry = entries.next();, +        Assert.assertEquals("param2", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value2", entry.getValue().get(0));, +        , +        entry = entries.next();, +        Assert.assertEquals("param3", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value3", entry.getValue().get(0));, +        , +        Assert.assertFalse(entries.hasNext());, +    }, +    , +    // See #189, +    @Test, +    public void testURISlashPath() {, +        URI uri = URI.create("http://localhost:8080/?param1=value1&param2=value2&param3=value3");, +        QueryStringDecoder decoder = new QueryStringDecoder(uri);, +        Assert.assertEquals("/", decoder.getPath());, +        Map<String, List<String>> params =  decoder.getParameters();, +        Assert.assertEquals(3, params.size());, +        Iterator<Entry<String, List<String>>> entries = params.entrySet().iterator();, +        , +        Entry<String, List<String>> entry = entries.next();, +        Assert.assertEquals("param1", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value1", entry.getValue().get(0));, +, +        , +        entry = entries.next();, +        Assert.assertEquals("param2", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value2", entry.getValue().get(0));, +        , +        entry = entries.next();, +        Assert.assertEquals("param3", entry.getKey());, +        Assert.assertEquals(1, entry.getValue().size());, +        Assert.assertEquals("value3", entry.getValue().get(0));, +        , +        Assert.assertFalse(entries.hasNext());, +    }, +    , +    // See #189, +    @Test, +    public void testURINoPath() {, +        URI uri = URI.create("http://localhost:8080?param1=value1&param2=value2&param3=value3");, +        QueryStringDecoder decoder = new QueryStringDecoder(uri);, +        Assert.assertEquals("", decoder.getPath());, +        Map<String, List<String>> params =  decoder.getParameters();, +        Assert.assertEquals(3, params.size());, +        Iterator<Entry<String, List<String>>> entries = params.entrySet().iterator();, +        , +        Entry<String, List<String>> entry = entries.next();]