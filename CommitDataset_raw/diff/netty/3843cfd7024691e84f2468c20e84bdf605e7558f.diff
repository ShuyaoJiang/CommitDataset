[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyDataFrame.java, +    public SpdyDataFrame setStreamId(int streamId) {, +        return this;, +    public SpdyDataFrame setLast(boolean last) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyDataFrame.java, +    public SpdyDataFrame setStreamId(int streamId) {, +        return this;, +    public SpdyDataFrame setLast(boolean last) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, +    public SpdyGoAwayFrame setLastGoodStreamId(int lastGoodStreamId) {, +        return this;, +    public SpdyGoAwayFrame setStatus(SpdySessionStatus status) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyDataFrame.java, +    public SpdyDataFrame setStreamId(int streamId) {, +        return this;, +    public SpdyDataFrame setLast(boolean last) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, +    public SpdyGoAwayFrame setLastGoodStreamId(int lastGoodStreamId) {, +        return this;, +    public SpdyGoAwayFrame setStatus(SpdySessionStatus status) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaderBlock.java, +    private final SpdyHeaders headers = new DefaultSpdyHeaders();, +    public SpdyHeaderBlock setInvalid() {, +        return this;, +    public SpdyHeaders headers() {, +        return headers;, +        for (Map.Entry<String, String> e: headers().entries()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyDataFrame.java, +    public SpdyDataFrame setStreamId(int streamId) {, +        return this;, +    public SpdyDataFrame setLast(boolean last) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyGoAwayFrame.java, +    public SpdyGoAwayFrame setLastGoodStreamId(int lastGoodStreamId) {, +        return this;, +    public SpdyGoAwayFrame setStatus(SpdySessionStatus status) {, +        return this;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaderBlock.java, +    private final SpdyHeaders headers = new DefaultSpdyHeaders();, +    public SpdyHeaderBlock setInvalid() {, +        return this;, +    public SpdyHeaders headers() {, +        return headers;, +        for (Map.Entry<String, String> e: headers().entries()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/DefaultSpdyHeaders.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.spdy;, +, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.TreeSet;, +, +, +public class DefaultSpdyHeaders extends SpdyHeaders {, +, +    private static final int BUCKET_SIZE = 17;, +, +    private static int hash(String name) {, +        int h = 0;, +        for (int i = name.length() - 1; i >= 0; i --) {, +            char c = name.charAt(i);, +            if (c >= 'A' && c <= 'Z') {, +                c += 32;, +            }, +            h = 31 * h + c;, +        }, +, +        if (h > 0) {, +            return h;, +        } else if (h == Integer.MIN_VALUE) {, +            return Integer.MAX_VALUE;, +        } else {, +            return -h;, +        }, +    }, +, +    private static boolean eq(String name1, String name2) {, +        int nameLen = name1.length();, +        if (nameLen != name2.length()) {]