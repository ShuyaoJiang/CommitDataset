[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            CodecOutputList out = CodecOutputList.newInstance();, +        if (msgs instanceof CodecOutputList) {, +            fireChannelRead(ctx, (CodecOutputList) msgs, numElements);, +        } else {, +    }, +, +    /**, +     * Get {@code numElements} out of the {@link CodecOutputList} and forward these through the pipeline., +     */, +    static void fireChannelRead(ChannelHandlerContext ctx, CodecOutputList msgs, int numElements) {, +        for (int i = 0; i < numElements; i ++) {, +            ctx.fireChannelRead(msgs.getUnsafe(i));, +        }, +    }, +        CodecOutputList out = CodecOutputList.newInstance();, +                // Recycle in all cases, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            CodecOutputList out = CodecOutputList.newInstance();, +        if (msgs instanceof CodecOutputList) {, +            fireChannelRead(ctx, (CodecOutputList) msgs, numElements);, +        } else {, +    }, +, +    /**, +     * Get {@code numElements} out of the {@link CodecOutputList} and forward these through the pipeline., +     */, +    static void fireChannelRead(ChannelHandlerContext ctx, CodecOutputList msgs, int numElements) {, +        for (int i = 0; i < numElements; i ++) {, +            ctx.fireChannelRead(msgs.getUnsafe(i));, +        }, +    }, +        CodecOutputList out = CodecOutputList.newInstance();, +                // Recycle in all cases, +++ b/codec/src/main/java/io/netty/handler/codec/CodecOutputList.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec;, +, +import io.netty.util.Recycler;, +, +import java.util.AbstractList;, +import java.util.RandomAccess;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +/**, + * Special {@link AbstractList} implementation which is used within our codec base classes., + */, +final class CodecOutputList extends AbstractList<Object> implements RandomAccess {, +, +    private static final Recycler<CodecOutputList> RECYCLER = new Recycler<CodecOutputList>() {, +        @Override, +        protected CodecOutputList newObject(Handle<CodecOutputList> handle) {, +            return new CodecOutputList(handle);, +        }, +    };, +, +    static CodecOutputList newInstance() {, +        return RECYCLER.get();, +    }, +, +    private final Recycler.Handle<CodecOutputList> handle;, +    private int size;, +    // Size of 16 should be good enough for 99 % of all users., +    private Object[] array = new Object[16];, +    private boolean insertSinceRecycled;, +, +    private CodecOutputList(Recycler.Handle<CodecOutputList> handle) {, +        this.handle = handle;, +    }, +, +    @Override, +    public Object get(int index) {, +        checkIndex(index);, +        return array[index];, +    }, +, +    @Override, +    public int size() {, +        return size;, +    }, +, +    @Override, +    public boolean add(Object element) {, +        checkNotNull(element, "element");, +        try {]