[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameLogger.java, +import io.netty.channel.ChannelHandlerContext;, +    public void logData(Direction direction, ChannelHandlerContext ctx, int streamId, ByteBuf data, int padding,, +                    "%s DATA: streamId=%d, padding=%d, endStream=%b, length=%d, bytes=%s",, +                    ctx.channel(), streamId, padding, endStream, data.readableBytes(), toString(data));, +    public void logHeaders(Direction direction, ChannelHandlerContext ctx, int streamId, Http2Headers headers,, +            int padding, boolean endStream) {, +            log(direction, "%s HEADERS: streamId=%d, headers=%s, padding=%d, endStream=%b",, +                    ctx.channel(), streamId, headers, padding, endStream);, +    public void logHeaders(Direction direction, ChannelHandlerContext ctx, int streamId, Http2Headers headers,, +                    "%s HEADERS: streamId=%d, headers=%s, streamDependency=%d, weight=%d, ", +                            + "exclusive=%b, padding=%d, endStream=%b",, +                    ctx.channel(), streamId, headers, streamDependency, weight, exclusive, padding, endStream);, +    public void logPriority(Direction direction, ChannelHandlerContext ctx, int streamId, int streamDependency,, +            short weight, boolean exclusive) {, +            log(direction, "%s PRIORITY: streamId=%d, streamDependency=%d, weight=%d, exclusive=%b",, +                    ctx.channel(), streamId, streamDependency, weight, exclusive);, +    public void logRstStream(Direction direction, ChannelHandlerContext ctx, int streamId, long errorCode) {, +            log(direction, "%s RST_STREAM: streamId=%d, errorCode=%d", ctx.channel(), streamId, errorCode);, +    public void logSettingsAck(Direction direction, ChannelHandlerContext ctx) {, +            log(direction, "%s SETTINGS: ack=true", ctx.channel());, +    public void logSettings(Direction direction, ChannelHandlerContext ctx, Http2Settings settings) {, +            log(direction, "%s SETTINGS: ack=false, settings=%s", ctx.channel(), settings);, +    public void logPing(Direction direction, ChannelHandlerContext ctx, ByteBuf data) {, +            log(direction, "%s PING: ack=false, length=%d, bytes=%s", ctx.channel(),, +                    data.readableBytes(), toString(data));, +    public void logPingAck(Direction direction, ChannelHandlerContext ctx, ByteBuf data) {, +            log(direction, "%s PING: ack=true, length=%d, bytes=%s",, +                    ctx.channel(), data.readableBytes(), toString(data));, +    public void logPushPromise(Direction direction, ChannelHandlerContext ctx, int streamId, int promisedStreamId,, +            log(direction, "%s PUSH_PROMISE: streamId=%d, promisedStreamId=%d, headers=%s, padding=%d",, +                    ctx.channel(), streamId, promisedStreamId, headers, padding);, +    public void logGoAway(Direction direction, ChannelHandlerContext ctx, int lastStreamId, long errorCode,, +            ByteBuf debugData) {, +            log(direction, "%s GO_AWAY: lastStreamId=%d, errorCode=%d, length=%d, bytes=%s",, +                    ctx.channel(), lastStreamId, errorCode, debugData.readableBytes(), toString(debugData));, +    public void logWindowsUpdate(Direction direction, ChannelHandlerContext ctx, int streamId,, +            int windowSizeIncrement) {, +            log(direction, "%s WINDOW_UPDATE: streamId=%d, windowSizeIncrement=%d",, +                    ctx.channel(), streamId, windowSizeIncrement);, +    public void logUnknownFrame(Direction direction, ChannelHandlerContext ctx, byte frameType, int streamId,, +            Http2Flags flags, ByteBuf data) {, +            log(direction, "%s UNKNOWN: frameType=%d, streamId=%d, flags=%d, length=%d, bytes=%s",, +                    ctx.channel(), frameType & 0xFF, streamId, flags.value(), data.readableBytes(), toString(data));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameLogger.java, +import io.netty.channel.ChannelHandlerContext;, +    public void logData(Direction direction, ChannelHandlerContext ctx, int streamId, ByteBuf data, int padding,, +                    "%s DATA: streamId=%d, padding=%d, endStream=%b, length=%d, bytes=%s",, +                    ctx.channel(), streamId, padding, endStream, data.readableBytes(), toString(data));, +    public void logHeaders(Direction direction, ChannelHandlerContext ctx, int streamId, Http2Headers headers,, +            int padding, boolean endStream) {, +            log(direction, "%s HEADERS: streamId=%d, headers=%s, padding=%d, endStream=%b",, +                    ctx.channel(), streamId, headers, padding, endStream);, +    public void logHeaders(Direction direction, ChannelHandlerContext ctx, int streamId, Http2Headers headers,, +                    "%s HEADERS: streamId=%d, headers=%s, streamDependency=%d, weight=%d, ", +                            + "exclusive=%b, padding=%d, endStream=%b",, +                    ctx.channel(), streamId, headers, streamDependency, weight, exclusive, padding, endStream);, +    public void logPriority(Direction direction, ChannelHandlerContext ctx, int streamId, int streamDependency,, +            short weight, boolean exclusive) {, +            log(direction, "%s PRIORITY: streamId=%d, streamDependency=%d, weight=%d, exclusive=%b",, +                    ctx.channel(), streamId, streamDependency, weight, exclusive);, +    public void logRstStream(Direction direction, ChannelHandlerContext ctx, int streamId, long errorCode) {, +            log(direction, "%s RST_STREAM: streamId=%d, errorCode=%d", ctx.channel(), streamId, errorCode);, +    public void logSettingsAck(Direction direction, ChannelHandlerContext ctx) {, +            log(direction, "%s SETTINGS: ack=true", ctx.channel());, +    public void logSettings(Direction direction, ChannelHandlerContext ctx, Http2Settings settings) {, +            log(direction, "%s SETTINGS: ack=false, settings=%s", ctx.channel(), settings);, +    public void logPing(Direction direction, ChannelHandlerContext ctx, ByteBuf data) {, +            log(direction, "%s PING: ack=false, length=%d, bytes=%s", ctx.channel(),, +                    data.readableBytes(), toString(data));, +    public void logPingAck(Direction direction, ChannelHandlerContext ctx, ByteBuf data) {, +            log(direction, "%s PING: ack=true, length=%d, bytes=%s",, +                    ctx.channel(), data.readableBytes(), toString(data));, +    public void logPushPromise(Direction direction, ChannelHandlerContext ctx, int streamId, int promisedStreamId,, +            log(direction, "%s PUSH_PROMISE: streamId=%d, promisedStreamId=%d, headers=%s, padding=%d",, +                    ctx.channel(), streamId, promisedStreamId, headers, padding);, +    public void logGoAway(Direction direction, ChannelHandlerContext ctx, int lastStreamId, long errorCode,, +            ByteBuf debugData) {, +            log(direction, "%s GO_AWAY: lastStreamId=%d, errorCode=%d, length=%d, bytes=%s",, +                    ctx.channel(), lastStreamId, errorCode, debugData.readableBytes(), toString(debugData));, +    public void logWindowsUpdate(Direction direction, ChannelHandlerContext ctx, int streamId,, +            int windowSizeIncrement) {, +            log(direction, "%s WINDOW_UPDATE: streamId=%d, windowSizeIncrement=%d",, +                    ctx.channel(), streamId, windowSizeIncrement);, +    public void logUnknownFrame(Direction direction, ChannelHandlerContext ctx, byte frameType, int streamId,, +            Http2Flags flags, ByteBuf data) {, +            log(direction, "%s UNKNOWN: frameType=%d, streamId=%d, flags=%d, length=%d, bytes=%s",, +                    ctx.channel(), frameType & 0xFF, streamId, flags.value(), data.readableBytes(), toString(data));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2InboundFrameLogger.java, +                logger.logData(INBOUND, ctx, streamId, data, padding, endOfStream);, +                logger.logHeaders(INBOUND, ctx, streamId, headers, padding, endStream);, +                logger.logHeaders(INBOUND, ctx, streamId, headers, streamDependency, weight, exclusive,, +                logger.logPriority(INBOUND, ctx, streamId, streamDependency, weight, exclusive);, +                logger.logRstStream(INBOUND, ctx, streamId, errorCode);, +                logger.logSettingsAck(INBOUND, ctx);, +                logger.logSettings(INBOUND, ctx, settings);, +                logger.logPing(INBOUND, ctx, data);, +                logger.logPingAck(INBOUND, ctx, data);, +                logger.logPushPromise(INBOUND, ctx, streamId, promisedStreamId, headers, padding);, +                logger.logGoAway(INBOUND, ctx, lastStreamId, errorCode, debugData);]