[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                doRegister();, +     * Sub-classes may override this method, +    protected void doRegister() throws Exception {, +        // NOOP, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                doRegister();, +     * Sub-classes may override this method, +    protected void doRegister() throws Exception {, +        // NOOP, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +    protected void doRegister() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                doRegister();, +     * Sub-classes may override this method, +    protected void doRegister() throws Exception {, +        // NOOP, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +    protected void doRegister() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected void doRegister() throws Exception {, +            // Always call peer.eventLoop().execute() even if peer.eventLoop().inEventLoop() is true., +            // This ensures that if both channels are on the same event loop, the peer's channelActive, +            // event is triggered *after* this channel's channelRegistered event, so that this channel's, +            // pipeline is fully initialized by ChannelInitializer before any channelRead events., +            peer.eventLoop().execute(new Runnable() {, +                    peer.connectPromise.setSuccess();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                doRegister();, +     * Sub-classes may override this method, +    protected void doRegister() throws Exception {, +        // NOOP, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +    protected void doRegister() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected void doRegister() throws Exception {, +            // Always call peer.eventLoop().execute() even if peer.eventLoop().inEventLoop() is true., +            // This ensures that if both channels are on the same event loop, the peer's channelActive, +            // event is triggered *after* this channel's channelRegistered event, so that this channel's, +            // pipeline is fully initialized by ChannelInitializer before any channelRead events., +            peer.eventLoop().execute(new Runnable() {, +                    peer.connectPromise.setSuccess();, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    protected void doRegister() throws Exception {, +        ChannelPipeline pipeline = pipeline();, +        final LocalChannel child = new LocalChannel(this, peer);, +        if (eventLoop().inEventLoop()) {, +        } else {, +            eventLoop().execute(new Runnable() {, +              @Override, +              public void run() {, +                serve0(child);, +              }, +            });, +        }, +            ChannelPipeline pipeline = pipeline();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                doRegister();, +     * Sub-classes may override this method, +    protected void doRegister() throws Exception {, +        // NOOP, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +    protected void doRegister() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected void doRegister() throws Exception {, +            // Always call peer.eventLoop().execute() even if peer.eventLoop().inEventLoop() is true., +            // This ensures that if both channels are on the same event loop, the peer's channelActive, +            // event is triggered *after* this channel's channelRegistered event, so that this channel's, +            // pipeline is fully initialized by ChannelInitializer before any channelRead events., +            peer.eventLoop().execute(new Runnable() {, +                    peer.connectPromise.setSuccess();, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    protected void doRegister() throws Exception {, +        ChannelPipeline pipeline = pipeline();, +        final LocalChannel child = new LocalChannel(this, peer);, +        if (eventLoop().inEventLoop()) {, +        } else {, +            eventLoop().execute(new Runnable() {, +              @Override, +              public void run() {, +                serve0(child);, +              }, +            });, +        }, +            ChannelPipeline pipeline = pipeline();, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +    protected void doRegister() throws Exception {, +                return;]