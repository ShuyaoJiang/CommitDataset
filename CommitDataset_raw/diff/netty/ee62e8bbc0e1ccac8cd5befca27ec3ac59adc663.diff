[+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +    /**, +     * Big endian byte order., +     */, +, +    /**, +     * Little endian byte order., +     */, +    /**, +     * Creates a new big-endian Java heap buffer with the specified, +     * {@code capacity}.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    public static ChannelBuffer buffer(int capacity) {, +        return buffer(BIG_ENDIAN, capacity);, +    /**, +     * Creates a new Java heap buffer with the specified {@code endianness}, +     * and {@code capacity}.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    public static ChannelBuffer buffer(ByteOrder endianness, int capacity) {, +        if (capacity == 0) {, +            return new BigEndianHeapChannelBuffer(capacity);, +            return new LittleEndianHeapChannelBuffer(capacity);, +    /**, +     * Creates a new big-endian direct buffer with the specified, +     * {@code capacity}.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    public static ChannelBuffer directBuffer(int capacity) {, +        return directBuffer(BIG_ENDIAN, capacity);, +    /**, +     * Creates a new direct buffer with the specified {@code endianness} and, +     * {@code capacity}.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    public static ChannelBuffer directBuffer(ByteOrder endianness, int capacity) {, +        if (capacity == 0) {, +                ByteBuffer.allocateDirect(capacity).order(endianness));, +    /**, +     * Creates a new big-endian dynamic buffer whose estimated data length is, +     * {@code 256} bytes.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    /**, +     * Creates a new big-endian dynamic buffer with the specified estimated, +     * data length.  More accurate estimation yields less unexpected, +     * reallocation overhead.  The new buffer's {@code readerIndex} and, +     * {@code writerIndex} are {@code 0}., +     */, +    /**, +     * Creates a new dynamic buffer with the specified endianness and, +     * the specified estimated data length.  More accurate estimation yields, +     * less unexpected reallocation overhead.  The new buffer's, +     * {@code readerIndex} and {@code writerIndex} are {@code 0}., +     */, +    /**, +     * Creates a new big-endian buffer which wraps the specified {@code array}., +     * A modification on the specified array's content will be visible to the, +     * returned buffer., +     */, +    /**, +     * Creates a new buffer which wraps the specified {@code array} with the, +     * specified {@code endianness}.  A modification on the specified array's, +     * content will be visible to the returned buffer., +     */, +    /**, +     * Creates a new big-endian buffer which wraps the sub-region of the, +     * specified {@code array}.  A modification on the specified array's, +     * content will be visible to the returned buffer., +     */, +    /**, +     * Creates a new buffer which wraps the sub-region of the specified, +     * {@code array} with the specified {@code endianness}.  A modification on, +     * the specified array's content will be visible to the returned buffer., +     */, +    /**, +     * Creates a new buffer which wraps the specified NIO buffer's current, +     * slice.  A modification on the specified buffer's content and endianness, +     * will be visible to the returned buffer., +     */, +    /**, +     * Creates a new buffer which wraps the specified buffer's readable bytes., +     * A modification on the specified buffer's content will be visible to the, +     * returned buffer., +     */, +    /**, +     * Creates a new big-endian composite buffer which wraps the specified, +     * arrays without copying them.  A modification on the specified arrays', +     * content will be visible to the returned buffer., +     */, +    /**, +     * Creates a new composite buffer which wraps the specified arrays without, +     * copying them.  A modification on the specified arrays' content will be, +     * visible to the returned buffer., +     *, +     * @param endianness the endianness of the new buffer, +     */, +    /**, +     * Creates a new composite buffer which wraps the specified buffers without]