[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    final ChannelFuture bindFuture;, +        bindFuture = newChannel(channelFactory, localAddress);, +        ch = (DatagramChannel) bindFuture.channel();, +    private ChannelFuture newChannel(, +        ChannelFuture bindFuture = b.bind(localAddress);, +        bindFuture.channel().closeFuture().addListener(new ChannelFutureListener() {, +        return bindFuture;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    final ChannelFuture bindFuture;, +        bindFuture = newChannel(channelFactory, localAddress);, +        ch = (DatagramChannel) bindFuture.channel();, +    private ChannelFuture newChannel(, +        ChannelFuture bindFuture = b.bind(localAddress);, +        bindFuture.channel().closeFuture().addListener(new ChannelFutureListener() {, +        return bindFuture;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContext.java, +            logger.debug("{} WRITE: [{}: {}], {}", parent.ch, id, nameServerAddr, question);, +        sendQuery(query, nameServerAddr);, +    }, +, +    private void sendQuery(final DnsQuery query, final InetSocketAddress nameServerAddr) {, +        if (parent.bindFuture.isDone()) {, +            writeQuery(query, nameServerAddr);, +        } else {, +            parent.bindFuture.addListener(new ChannelFutureListener() {, +                @Override, +                public void operationComplete(ChannelFuture future) throws Exception {, +                    if (future.isSuccess()) {, +                        writeQuery(query, nameServerAddr);, +                    } else {, +                        promise.tryFailure(future.cause());, +                    }, +                 }, +            });, +        }, +    }, +, +    private void writeQuery(final DnsQuery query, final InetSocketAddress nameServerAddr) {, +        final ChannelFuture writeFuture = parent.ch.writeAndFlush(query);]