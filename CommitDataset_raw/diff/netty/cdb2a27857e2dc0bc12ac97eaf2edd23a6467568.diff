[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +// TCP_FASTOPEN_CONNECT is defined in linux 4.11. We define this here so older kernels can compile., +#ifndef TCP_FASTOPEN_CONNECT, +#define TCP_FASTOPEN_CONNECT 30, +#endif, +, +static void netty_epoll_linuxsocket_setTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +  { "setTcpFastOpenConnect", "(II)V", (void *) netty_epoll_linuxsocket_setTcpFastOpenConnect },, +  { "isTcpFastOpenConnect", "(I)I", (void *) netty_epoll_linuxsocket_isTcpFastOpenConnect },, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +// TCP_FASTOPEN_CONNECT is defined in linux 4.11. We define this here so older kernels can compile., +#ifndef TCP_FASTOPEN_CONNECT, +#define TCP_FASTOPEN_CONNECT 30, +#endif, +, +static void netty_epoll_linuxsocket_setTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +  { "setTcpFastOpenConnect", "(II)V", (void *) netty_epoll_linuxsocket_setTcpFastOpenConnect },, +  { "isTcpFastOpenConnect", "(I)I", (void *) netty_epoll_linuxsocket_isTcpFastOpenConnect },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_FASTOPEN_CONNECT =, +            valueOf(EpollChannelOption.class, "TCP_FASTOPEN_CONNECT");, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +// TCP_FASTOPEN_CONNECT is defined in linux 4.11. We define this here so older kernels can compile., +#ifndef TCP_FASTOPEN_CONNECT, +#define TCP_FASTOPEN_CONNECT 30, +#endif, +, +static void netty_epoll_linuxsocket_setTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isTcpFastOpenConnect(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN_CONNECT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +  { "setTcpFastOpenConnect", "(II)V", (void *) netty_epoll_linuxsocket_setTcpFastOpenConnect },, +  { "isTcpFastOpenConnect", "(I)I", (void *) netty_epoll_linuxsocket_isTcpFastOpenConnect },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> TCP_FASTOPEN_CONNECT =, +            valueOf(EpollChannelOption.class, "TCP_FASTOPEN_CONNECT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannelConfig.java, +                EpollChannelOption.TCP_MD5SIG, EpollChannelOption.TCP_QUICKACK, EpollChannelOption.IP_TRANSPARENT,, +                EpollChannelOption.TCP_FASTOPEN_CONNECT);, +        if (option == EpollChannelOption.TCP_FASTOPEN_CONNECT) {, +            return (T) Boolean.valueOf(isTcpFastOpenConnect());, +        }, +        } else if (option == EpollChannelOption.TCP_FASTOPEN_CONNECT) {, +            setTcpFastOpenConnect((Boolean) value);, +    /**, +     * Set the {@code TCP_FASTOPEN_CONNECT} option on the socket. Requires Linux kernel 4.11 or later., +     * See, +     * <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19f6d3f3">this commit</a>, +     * for more details., +     */, +    public EpollSocketChannelConfig setTcpFastOpenConnect(boolean fastOpenConnect) {, +        try {, +            channel.socket.setTcpFastOpenConnect(fastOpenConnect);, +            return this;, +        } catch (IOException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    /**, +     * Returns {@code true} if {@code TCP_FASTOPEN_CONNECT} is enabled, {@code false} otherwise., +     */, +    public boolean isTcpFastOpenConnect() {, +        try {, +            return channel.socket.isTcpFastOpenConnect();, +        } catch (IOException e) {, +            throw new ChannelException(e);, +        }, +    }, +]