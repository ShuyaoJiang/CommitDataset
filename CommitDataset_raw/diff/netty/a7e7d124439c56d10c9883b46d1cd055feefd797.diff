[+++ b/src/main/java/org/jboss/netty/util/internal/jzlib/Adler32.java, +    private static final int BASE = 65521;, +    private static final int NMAX = 5552;, +    static long adler32(long adler, byte[] buf, int index, int len) {, +        if (buf == null) {, +            return 1L;, +        }, +        long s2 = adler >> 16 & 0xffff;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                    s1 += buf[index ++] & 0xff;, +                    s2 += s1;, +                } while (-- k != 0);, +        return s2 << 16 | s1;, +++ b/src/main/java/org/jboss/netty/util/internal/jzlib/Adler32.java, +    private static final int BASE = 65521;, +    private static final int NMAX = 5552;, +    static long adler32(long adler, byte[] buf, int index, int len) {, +        if (buf == null) {, +            return 1L;, +        }, +        long s2 = adler >> 16 & 0xffff;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                s1 += buf[index ++] & 0xff;, +                s2 += s1;, +                    s1 += buf[index ++] & 0xff;, +                    s2 += s1;, +                } while (-- k != 0);, +        return s2 << 16 | s1;, +++ b/src/main/java/org/jboss/netty/util/internal/jzlib/Deflate.java, +    private static final class Config {, +        final int good_length; // reduce lazy search above this match length, +        final int max_lazy; // do not perform lazy search above this match length, +        final int nice_length; // quit search above this match length, +        final int max_chain;, +        final int func;, +        Config(int good_length, int max_lazy, int nice_length, int max_chain,, +                int func) {, +    private static final int STORED = 0;, +    private static final int FAST = 1;, +    private static final int SLOW = 2;]