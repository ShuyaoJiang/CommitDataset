[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersTest.java, +import static io.netty.util.AsciiString.of;, +    public void testPseudoHeadersMustComeFirstWhenIterating() {, +    public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {, +    @Test, +    public void testPseudoHeadersWithClearDoesNotLeak() {, +        Http2Headers headers = newHeaders();, +, +        assertFalse(headers.isEmpty());, +        headers.clear();, +        assertTrue(headers.isEmpty());, +, +        // Combine 2 headers together, make sure pseudo headers stay up front., +        headers.add("name1", "value1").scheme("nothing");, +        verifyPseudoHeadersFirst(headers);, +, +        Http2Headers other = new DefaultHttp2Headers().add("name2", "value2").authority("foo");, +        verifyPseudoHeadersFirst(other);, +, +        headers.add(other);, +        verifyPseudoHeadersFirst(headers);, +, +        // Make sure the headers are what we expect them to be, and no leaking behind the scenes., +        assertEquals(4, headers.size());, +        assertEquals("value1", headers.get("name1"));, +        assertEquals("value2", headers.get("name2"));, +        assertEquals("nothing", headers.scheme());, +        assertEquals("foo", headers.authority());, +    }, +, +    @Test, +    public void testSetHeadersOrdersPsuedoHeadersCorrectly() {, +        Http2Headers headers = newHeaders();, +        Http2Headers other = new DefaultHttp2Headers().add("name2", "value2").authority("foo");, +, +        headers.set(other);, +        verifyPseudoHeadersFirst(headers);, +        assertEquals(other.size(), headers.size());, +        assertEquals("foo", headers.authority());, +        assertEquals("value2", headers.get("name2"));, +    }, +, +    @Test, +    public void testSetAllOrdersPsuedoHeadersCorrectly() {, +        Http2Headers headers = newHeaders();, +        Http2Headers other = new DefaultHttp2Headers().add("name2", "value2").authority("foo");, +, +        int headersSizeBefore = headers.size();, +        headers.setAll(other);, +        verifyPseudoHeadersFirst(headers);, +        verifyAllPseudoHeadersPresent(headers);, +        assertEquals(headersSizeBefore + 1, headers.size());, +        assertEquals("foo", headers.authority());, +        assertEquals("value2", headers.get("name2"));, +    }, +]