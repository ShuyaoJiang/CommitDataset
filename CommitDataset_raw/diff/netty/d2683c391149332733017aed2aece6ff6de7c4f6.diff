[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.ChannelInputShutdownEvent;, +    private volatile boolean inputShutdown;, +    protected final boolean isInputShutdown0() {, +        return inputShutdown;, +    }, +, +        final void epollRdHupReady() {, +            if (isActive()) {, +                // If it is still active, we need to call epollInReady as otherwise we may miss to, +                // read pending data from the underlying file descriptor., +                // See https://github.com/netty/netty/issues/3709, +                epollInReady();, +, +                // Clear the EPOLLRDHUP flag to prevent continuously getting woken up on this event., +                clearEpollRdHup();, +            }, +            // epollInReady may call this, but we should ensure that it gets called., +            shutdownInput();, +        }, +, +        /**, +         * Clear the {@link Native#EPOLLRDHUP} flag from EPOLL, and close on failure., +         */, +        private void clearEpollRdHup() {, +            try {, +                clearFlag(Native.EPOLLRDHUP);, +            } catch (IOException e) {, +                pipeline().fireExceptionCaught(e);, +                close(voidPromise());, +            }, +        }, +, +        /**, +         * Shutdown the input side of the channel., +         */, +        void shutdownInput() {, +            if (!inputShutdown) { // Best effort check on volatile variable to prevent multiple shutdowns, +                inputShutdown = true;, +                if (isOpen()) {, +                    if (Boolean.TRUE.equals(config().getOption(ChannelOption.ALLOW_HALF_CLOSURE))) {, +                        clearEpollIn0();, +                        pipeline().fireUserEventTriggered(ChannelInputShutdownEvent.INSTANCE);, +                    } else {, +                        close(voidPromise());, +                    }, +                }, +            }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.ChannelInputShutdownEvent;, +    private volatile boolean inputShutdown;, +    protected final boolean isInputShutdown0() {, +        return inputShutdown;, +    }, +, +        final void epollRdHupReady() {, +            if (isActive()) {, +                // If it is still active, we need to call epollInReady as otherwise we may miss to, +                // read pending data from the underlying file descriptor., +                // See https://github.com/netty/netty/issues/3709, +                epollInReady();, +, +                // Clear the EPOLLRDHUP flag to prevent continuously getting woken up on this event., +                clearEpollRdHup();, +            }, +            // epollInReady may call this, but we should ensure that it gets called., +            shutdownInput();, +        }, +, +        /**, +         * Clear the {@link Native#EPOLLRDHUP} flag from EPOLL, and close on failure., +         */, +        private void clearEpollRdHup() {, +            try {, +                clearFlag(Native.EPOLLRDHUP);, +            } catch (IOException e) {, +                pipeline().fireExceptionCaught(e);, +                close(voidPromise());, +            }, +        }, +, +        /**, +         * Shutdown the input side of the channel., +         */, +        void shutdownInput() {, +            if (!inputShutdown) { // Best effort check on volatile variable to prevent multiple shutdowns, +                inputShutdown = true;, +                if (isOpen()) {, +                    if (Boolean.TRUE.equals(config().getOption(ChannelOption.ALLOW_HALF_CLOSURE))) {, +                        clearEpollIn0();, +                        pipeline().fireUserEventTriggered(ChannelInputShutdownEvent.INSTANCE);, +                    } else {, +                        close(voidPromise());, +                    }, +                }, +            }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +                shutdownInput();]