[+++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import java.util.concurrent.Executor;, +, + * <h3>Graceful shutdown</h3>, + * <p>, + * To shut down a network application service which is managed by a factory., + * you should follow the following steps:, + * <ol>, + * <li>close all channels created by the factory and their child channels, and</li>, + * <li>call {@link #releaseExternalResources()}.</li>, + * </ol>, + * <p>, + * For detailed transport-specific information on shutting down a factory,, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes., +     * Releases the external resources that this factory depends on to function., +     * An external resource is a resource that this factory didn't create by, +     * itself.  For example, {@link Executor}s that you specified in the factory, +     * constructor are external resources.  You can call this method to release, +     * all external resources conveniently when the resources are not used by, +     * this factory or any other part of your application.  An unexpected, +     * behavior will be resulted in if the resources are released when there's, +     * an open channel which is managed by this factory., +    void releaseExternalResources();, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import java.util.concurrent.Executor;, +, + * <h3>Graceful shutdown</h3>, + * <p>, + * To shut down a network application service which is managed by a factory., + * you should follow the following steps:, + * <ol>, + * <li>close all channels created by the factory and their child channels, and</li>, + * <li>call {@link #releaseExternalResources()}.</li>, + * </ol>, + * <p>, + * For detailed transport-specific information on shutting down a factory,, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes., +     * Releases the external resources that this factory depends on to function., +     * An external resource is a resource that this factory didn't create by, +     * itself.  For example, {@link Executor}s that you specified in the factory, +     * constructor are external resources.  You can call this method to release, +     * all external resources conveniently when the resources are not used by, +     * this factory or any other part of your application.  An unexpected, +     * behavior will be resulted in if the resources are released when there's, +     * an open channel which is managed by this factory., +    void releaseExternalResources();, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import java.util.concurrent.Executor;, +, + * <h3>Graceful shutdown</h3>, + * <p>, + * To shut down a network application service which is managed by a factory., + * you should follow the following steps:, + * <ol>, + * <li>close all channels created by the factory and their child channels, and</li>, + * <li>call {@link #releaseExternalResources()}.</li>, + * </ol>, + * <p>, + * For detailed transport-specific information on shutting down a factory,, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes., +     * Releases the external resources that this factory depends on to function., +     * An external resource is a resource that this factory didn't create by, +     * itself.  For example, {@link Executor}s that you specified in the factory, +     * constructor are external resources.  You can call this method to release, +     * all external resources conveniently when the resources are not used by, +     * this factory or any other part of your application.  An unexpected, +     * behavior will be resulted in if the resources are released when there's, +     * an open channel which is managed by this factory., +    void releaseExternalResources();, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * TODO: Show how to shut down a service., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import java.util.concurrent.Executor;, +, + * <h3>Graceful shutdown</h3>, + * <p>, + * To shut down a network application service which is managed by a factory.]