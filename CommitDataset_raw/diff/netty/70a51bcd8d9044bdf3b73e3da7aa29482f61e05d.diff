[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postTask = null;, +                    postTask = doDeregister();, +, +                    if (postTask != null) {, +                        postTask.run();, +                    }, +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postTask = null;, +                    postTask = doDeregister();, +, +                    if (postTask != null) {, +                        postTask.run();, +                    }, +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/embedded/AbstractEmbeddedChannel.java, +    protected Runnable doDeregister() throws Exception {, +        return new Runnable() {, +            @Override, +            public void run() {, +                runPendingTasks();, +            }, +        };, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postTask = null;, +                    postTask = doDeregister();, +, +                    if (postTask != null) {, +                        postTask.run();, +                    }, +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/embedded/AbstractEmbeddedChannel.java, +    protected Runnable doDeregister() throws Exception {, +        return new Runnable() {, +            @Override, +            public void run() {, +                runPendingTasks();, +            }, +        };, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +import io.netty.util.concurrent.SingleThreadEventExecutor;, +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postTask = null;, +                    postTask = doDeregister();, +, +                    if (postTask != null) {, +                        postTask.run();, +                    }, +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/embedded/AbstractEmbeddedChannel.java, +    protected Runnable doDeregister() throws Exception {, +        return new Runnable() {, +            @Override, +            public void run() {, +                runPendingTasks();, +            }, +        };, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +import io.netty.util.concurrent.SingleThreadEventExecutor;, +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +import io.netty.util.concurrent.SingleThreadEventExecutor;, +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postTask = null;, +                    postTask = doDeregister();, +, +                    if (postTask != null) {, +                        postTask.run();, +                    }, +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/embedded/AbstractEmbeddedChannel.java, +    protected Runnable doDeregister() throws Exception {, +        return new Runnable() {, +            @Override, +            public void run() {, +                runPendingTasks();, +            }, +        };, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +import io.netty.util.concurrent.SingleThreadEventExecutor;, +    protected Runnable doDeregister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +import io.netty.util.concurrent.SingleThreadEventExecutor;]