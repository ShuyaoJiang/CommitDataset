[+++ b/all/pom.xml, +      <activation>, +        <property>, +          <name>uber</name>, +        </property>, +      </activation>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-epoll</artifactId>, +      <version>${project.version}</version>, +      <classifier>linux-x86_64</classifier>, +      <scope>compile</scope>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-kqueue</artifactId>, +      <version>${project.version}</version>, +      <classifier>osx-x86_64</classifier>, +      <scope>compile</scope>, +      <optional>true</optional>, +    </dependency>, +              <excludes>io/netty/example/**,META-INF/native/libnetty-tcnative*,META-INF/native/include/**,META-INF/native/**/*.a</excludes>, +++ b/all/pom.xml, +      <activation>, +        <property>, +          <name>uber</name>, +        </property>, +      </activation>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-epoll</artifactId>, +      <version>${project.version}</version>, +      <classifier>linux-x86_64</classifier>, +      <scope>compile</scope>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-kqueue</artifactId>, +      <version>${project.version}</version>, +      <classifier>osx-x86_64</classifier>, +      <scope>compile</scope>, +      <optional>true</optional>, +    </dependency>, +              <excludes>io/netty/example/**,META-INF/native/libnetty-tcnative*,META-INF/native/include/**,META-INF/native/**/*.a</excludes>, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +                        // Try to get from sysctl, +                        Integer tmp = null;, +                        if (SystemPropertyUtil.getBoolean("io.netty.net.somaxconn.trySysctl", false)) {, +                            tmp = sysctlGetInt("kern.ipc.somaxconn");, +                            if (tmp == null) {, +                                tmp = sysctlGetInt("kern.ipc.soacceptqueue");, +                                if (tmp != null) {, +                                    somaxconn = tmp;, +                                }, +                            } else {, +                                somaxconn = tmp;, +                            }, +                        }, +, +                        if (tmp == null) {, +                            logger.debug("Failed to get SOMAXCONN from sysctl and file {}. Default: {}", file,, +                                         somaxconn);, +                    logger.debug("Failed to get SOMAXCONN from sysctl and file {}. Default: {}", file, somaxconn, e);, +     * This will execute <a href ="https://www.freebsd.org/cgi/man.cgi?sysctl(8)">sysctl</a> with the {@code sysctlKey}, +     * which is expected to return the numeric value for for {@code sysctlKey}., +     * @param sysctlKey The key which the return value corresponds to., +     * @return The <a href ="https://www.freebsd.org/cgi/man.cgi?sysctl(8)">sysctl</a> value for {@code sysctlKey}., +     */, +    private static Integer sysctlGetInt(String sysctlKey) throws IOException {, +        Process process = new ProcessBuilder("sysctl", sysctlKey).start();, +        try {, +            InputStream is = process.getInputStream();, +            InputStreamReader isr = new InputStreamReader(is);, +            BufferedReader br = new BufferedReader(isr);, +            try {, +                String line = br.readLine();, +                if (line.startsWith(sysctlKey)) {, +                    for (int i = line.length() - 1; i > sysctlKey.length(); --i) {, +                        if (!Character.isDigit(line.charAt(i))) {, +                            return Integer.valueOf(line.substring(i + 1, line.length()));, +                        }, +                    }, +                }, +                return null;, +            } finally {, +                br.close();, +            }, +        } finally {, +            if (process != null) {, +                process.destroy();, +            }, +        }, +    }, +, +    /**]