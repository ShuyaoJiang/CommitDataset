[+++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeDecoder.java, +        String commandStr = readLine(in, 16);, +        AppendableCharSequence buf = new AppendableCharSequence(128);, +            boolean headerRead = readHeader(headers, buf, buffer);, +            if (!headerRead) {, +    private String readLine(ByteBuf buffer, int initialBufferSize) {, +        AppendableCharSequence buf = new AppendableCharSequence(initialBufferSize);, +                //do nothing, +                    invalidLineLength();, +    private boolean readHeader(StompHeaders headers, AppendableCharSequence buf, ByteBuf buffer) {, +        buf.reset();, +        int lineLength = 0;, +        String key = null;, +        boolean valid = false;, +        for (;;) {, +            byte nextByte = buffer.readByte();, +, +            if (nextByte == StompConstants.COLON && key == null) {, +                key = buf.toString();, +                valid = true;, +                buf.reset();, +            } else if (nextByte == StompConstants.CR) {, +                //do nothing, +            } else if (nextByte == StompConstants.LF) {, +                if (key == null && lineLength == 0) {, +                    return false;, +                } else if (valid) {, +                    headers.add(key, buf.toString());, +                } else if (validateHeaders) {, +                    invalidHeader(key, buf.toString());, +                }, +                return true;, +            } else {, +                if (lineLength >= maxLineLength) {, +                    invalidLineLength();, +                }, +                if (nextByte == StompConstants.COLON && key != null) {, +                    valid = false;, +                }, +                lineLength ++;, +                buf.append((char) nextByte);, +            }, +        }, +    }, +, +    private void invalidHeader(String key, String value) {, +        String line = key != null ? key + ":" + value : value;, +        throw new IllegalArgumentException("a header value or name contains a prohibited character ':'", +            + ", " + line);, +    }, +, +    private void invalidLineLength() {, +        throw new TooLongFrameException("An STOMP line is larger than " + maxLineLength + " bytes.");, +    }, +]