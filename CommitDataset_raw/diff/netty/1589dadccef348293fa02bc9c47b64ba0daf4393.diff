[+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport/src/main/java/io/netty/channel/socket/ChannelRunnableWrapper.java, +    private boolean started = false;, +        synchronized(this) {, +            if (!isCancelled()) {, +                started = true;, +            } else {, +                return;, +            }, +        }, +    @Override, +    public synchronized boolean cancel() {, +        if (started) {, +            return false;, +        }, +        return super.cancel();, +    }, +    , +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport/src/main/java/io/netty/channel/socket/ChannelRunnableWrapper.java, +    private boolean started = false;, +        synchronized(this) {, +            if (!isCancelled()) {, +                started = true;, +            } else {, +                return;, +            }, +        }, +    @Override, +    public synchronized boolean cancel() {, +        if (started) {, +            return false;, +        }, +        return super.cancel();, +    }, +    , +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport/src/main/java/io/netty/channel/socket/ChannelRunnableWrapper.java, +    private boolean started = false;, +        synchronized(this) {, +            if (!isCancelled()) {, +                started = true;, +            } else {, +                return;, +            }, +        }, +    @Override, +    public synchronized boolean cancel() {, +        if (started) {, +            return false;, +        }, +        return super.cancel();, +    }, +    , +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +    private final Queue<Runnable> eventQueue = QueueFactory.createQueue(Runnable.class);, +            final Runnable task = eventQueue.poll();, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioWorker.java]