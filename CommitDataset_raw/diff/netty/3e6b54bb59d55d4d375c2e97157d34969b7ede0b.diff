[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;, +import static io.netty.util.AsciiString.CASE_INSENSITIVE_HASHER;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +        public boolean process(byte value) {, +            if (hasPseudoHeaderFormat(key)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;, +import static io.netty.util.AsciiString.CASE_INSENSITIVE_HASHER;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +        public boolean process(byte value) {, +            if (hasPseudoHeaderFormat(key)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +            hpackDecoder.decode(streamId, headerBlock, headers, validateHeaders);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;, +import static io.netty.util.AsciiString.CASE_INSENSITIVE_HASHER;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +        public boolean process(byte value) {, +            if (hasPseudoHeaderFormat(key)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +            hpackDecoder.decode(streamId, headerBlock, headers, validateHeaders);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.getPseudoHeader;, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;, +    public void decode(int streamId, ByteBuf in, Http2Headers headers, boolean validateHeaders) throws Http2Exception {, +        HeaderType headerType = null;, +                                HpackHeaderField indexedHeader = getIndexedHeader(index);, +                                headerType = validate(indexedHeader.name, headerType, validateHeaders);, +                                headersLength = addHeader(headers, indexedHeader.name, indexedHeader.value,, +                                        headersLength);, +                                headerType = validate(name, headerType, validateHeaders);, +                                headerType = validate(name, headerType, validateHeaders);, +                    HpackHeaderField indexedHeader = getIndexedHeader(decodeULE128(in, index));, +                    headerType = validate(indexedHeader.name, headerType, validateHeaders);, +                    headersLength = addHeader(headers, indexedHeader.name, indexedHeader.value, headersLength);, +                    headerType = validate(name, headerType, validateHeaders);, +                    headerType = validate(name, headerType, validateHeaders);, +                            headerType = validate(name, headerType, validateHeaders);, +                    headerType = validate(name, headerType, validateHeaders);, +    private HeaderType validate(CharSequence name, HeaderType previousHeaderType,, +                                final boolean validateHeaders) throws Http2Exception {, +        if (!validateHeaders) {, +            return null;, +        }, +, +        if (hasPseudoHeaderFormat(name)) {, +            if (previousHeaderType == HeaderType.REGULAR_HEADER) {, +                throw connectionError(PROTOCOL_ERROR, "Pseudo-header field '%s' found after regular header.", name);, +            }, +, +            final Http2Headers.PseudoHeaderName pseudoHeader = getPseudoHeader(name);, +            if (pseudoHeader == null) {, +                throw connectionError(PROTOCOL_ERROR, "Invalid HTTP/2 pseudo-header '%s' encountered.", name);, +            }, +, +            final HeaderType currentHeaderType = pseudoHeader.isRequestOnly() ?, +                    HeaderType.REQUEST_PSEUDO_HEADER : HeaderType.RESPONSE_PSEUDO_HEADER;, +            if (previousHeaderType != null && currentHeaderType != previousHeaderType) {, +                throw connectionError(PROTOCOL_ERROR, "Mix of request and response pseudo-headers.");, +            }, +, +            return currentHeaderType;, +        }, +, +        return HeaderType.REGULAR_HEADER;, +    }, +, +    private HpackHeaderField getIndexedHeader(int index) throws Http2Exception {, +            return HpackStaticTable.getEntry(index);, +            return hpackDynamicTable.getEntry(index - HpackStaticTable.length);, +, +    /**, +     * HTTP/2 header types., +     */, +    private enum HeaderType {, +        REGULAR_HEADER,, +        REQUEST_PSEUDO_HEADER,, +        RESPONSE_PSEUDO_HEADER, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Headers.PseudoHeaderName.hasPseudoHeaderFormat;, +import static io.netty.util.AsciiString.CASE_INSENSITIVE_HASHER;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +        public boolean process(byte value) {, +            if (hasPseudoHeaderFormat(key)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +            hpackDecoder.decode(streamId, headerBlock, headers, validateHeaders);]