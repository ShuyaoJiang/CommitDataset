[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd) {, +    int optval = 0;, +    if (getOption(env, fd, SOL_SOCKET, SO_ERROR, &optval, sizeof(optval)) == -1) {, +        return optval;, +    }, +    return 0;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd) {, +    int optval = 0;, +    if (getOption(env, fd, SOL_SOCKET, SO_ERROR, &optval, sizeof(optval)) == -1) {, +        return optval;, +    }, +    return 0;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd) {, +    int optval = 0;, +    if (getOption(env, fd, SOL_SOCKET, SO_ERROR, &optval, sizeof(optval)) == -1) {, +        return optval;, +    }, +    return 0;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +        this(parent, new NativeFileDescriptor(fd), flag, active);, +    }, +, +    AbstractEpollChannel(Channel parent, FileDescriptor fd, int flag, boolean active) {, +        if (fd == null) {, +            throw new NullPointerException("fd");, +        }, +        fileDescriptor = fd;, +        return fileDescriptor != FileDescriptor.INVALID;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd) {, +    int optval = 0;, +    if (getOption(env, fd, SOL_SOCKET, SO_ERROR, &optval, sizeof(optval)) == -1) {, +        return optval;, +    }, +    return 0;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +        this(parent, new NativeFileDescriptor(fd), flag, active);, +    }, +, +    AbstractEpollChannel(Channel parent, FileDescriptor fd, int flag, boolean active) {, +        if (fd == null) {, +            throw new NullPointerException("fd");, +        }, +        fileDescriptor = fd;, +        return fileDescriptor != FileDescriptor.INVALID;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollServerChannel.java, +import io.netty.channel.FileDescriptor;, +    protected AbstractEpollServerChannel(FileDescriptor fd) {, +        super(null, fd, Native.EPOLLIN, Native.getSoError(fd.intValue()) == 0);, +    }, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd) {, +    int optval = 0;, +    if (getOption(env, fd, SOL_SOCKET, SO_ERROR, &optval, sizeof(optval)) == -1) {, +        return optval;, +    }, +    return 0;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_getSoError(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollChannel.java, +        this(parent, new NativeFileDescriptor(fd), flag, active);, +    }, +, +    AbstractEpollChannel(Channel parent, FileDescriptor fd, int flag, boolean active) {, +        if (fd == null) {, +            throw new NullPointerException("fd");, +        }, +        fileDescriptor = fd;, +        return fileDescriptor != FileDescriptor.INVALID;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollServerChannel.java, +import io.netty.channel.FileDescriptor;, +    protected AbstractEpollServerChannel(FileDescriptor fd) {, +        super(null, fd, Native.EPOLLIN, Native.getSoError(fd.intValue()) == 0);, +    }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.channel.FileDescriptor;, +    protected AbstractEpollStreamChannel(FileDescriptor fd) {, +        super(null, fd, Native.EPOLLIN, Native.getSoError(fd.intValue()) == 0);, +    }]