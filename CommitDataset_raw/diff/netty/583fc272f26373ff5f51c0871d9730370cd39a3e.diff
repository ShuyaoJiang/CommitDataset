[+++ b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java, +import io.netty.util.concurrent.GlobalEventExecutor;, +        if (executor.inEventLoop()) {, +            close0();, +        } else {, +            executor.submit(new Runnable() {, +                    close0();, +                }, +            }).awaitUninterruptibly();, +        }, +    }, +, +    private void close0() {, +, +            // Ensure we dispatch this on another Thread as close0 will be called from the EventExecutor and we need, +            // to ensure we will not block in a EventExecutor., +            GlobalEventExecutor.INSTANCE.execute(new Runnable() {, +                @Override, +                public void run() {, +}, +++ b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java, +import io.netty.util.concurrent.GlobalEventExecutor;, +        if (executor.inEventLoop()) {, +            close0();, +        } else {, +            executor.submit(new Runnable() {, +                    close0();, +                }, +            }).awaitUninterruptibly();, +        }, +    }, +, +    private void close0() {, +, +            // Ensure we dispatch this on another Thread as close0 will be called from the EventExecutor and we need, +            // to ensure we will not block in a EventExecutor., +            GlobalEventExecutor.INSTANCE.execute(new Runnable() {, +                @Override, +                public void run() {, +}, +++ b/transport/src/main/java/io/netty/channel/pool/SimpleChannelPool.java, +            // Just ignore any errors that are reported back from close()., +            channel.close().awaitUninterruptibly();]