[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +, +    /** Previous return value of isWritable() */, +    boolean oldWritable;, +    /**, +     * Set to true if the amount of data in the writeBuffer exceeds, +     * the high water mark, as specified in NioSocketChannelConfig., +     */, +    boolean exceededHighWaterMark;, +    /**, +     * true if and only if NioWorker is firing an event which might cause, +     * infinite recursion., +     */, +    boolean firingEvent;, +, +                    exceededHighWaterMark = true;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +, +    /** Previous return value of isWritable() */, +    boolean oldWritable;, +    /**, +     * Set to true if the amount of data in the writeBuffer exceeds, +     * the high water mark, as specified in NioSocketChannelConfig., +     */, +    boolean exceededHighWaterMark;, +    /**, +     * true if and only if NioWorker is firing an event which might cause, +     * infinite recursion., +     */, +    boolean firingEvent;, +, +                    exceededHighWaterMark = true;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +        if (channel.firingEvent) {, +            // Prevent StackOverflowError., +            return;, +        }, +, +        channel.firingEvent = true;, +        try {, +            boolean wasWritable = channel.oldWritable;, +            boolean writable = channel.oldWritable = open? channel.isWritable() : false;, +                    if (channel.exceededHighWaterMark) {, +                        channel.exceededHighWaterMark = false;, +        } finally {, +            channel.firingEvent = false;, +        }]