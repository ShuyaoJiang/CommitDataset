[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketChannelFactory.java, +     * Creates a new {@link NioClientSocketChannelFactory} which uses {@link Executors#newCachedThreadPool()} for the worker and boss executors., +     *, +     * See {@link #NioClientSocketChannelFactory(Executor, Executor)}, +     */, +    public NioClientSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    /**, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketChannelFactory.java, +     * Creates a new {@link NioClientSocketChannelFactory} which uses {@link Executors#newCachedThreadPool()} for the worker and boss executors., +     *, +     * See {@link #NioClientSocketChannelFactory(Executor, Executor)}, +     */, +    public NioClientSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    /**, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannelFactory.java, +, +    /**, +     * Create a new {@link NioDatagramChannelFactory} with a {@link Executors#newCachedThreadPool()}., +     *, +     * See {@link #NioDatagramChannelFactory(Executor)}, +     */, +    public NioDatagramChannelFactory() {, +        this(Executors.newCachedThreadPool());, +    }, +    , +    , +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketChannelFactory.java, +     * Creates a new {@link NioClientSocketChannelFactory} which uses {@link Executors#newCachedThreadPool()} for the worker and boss executors., +     *, +     * See {@link #NioClientSocketChannelFactory(Executor, Executor)}, +     */, +    public NioClientSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    /**, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannelFactory.java, +, +    /**, +     * Create a new {@link NioDatagramChannelFactory} with a {@link Executors#newCachedThreadPool()}., +     *, +     * See {@link #NioDatagramChannelFactory(Executor)}, +     */, +    public NioDatagramChannelFactory() {, +        this(Executors.newCachedThreadPool());, +    }, +    , +    , +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannelFactory.java, +     * Create a new {@link NioServerSocketChannelFactory} using, +     * {@link Executors#newCachedThreadPool()} for the boss and worker., +     * , +     * See {@link #NioServerSocketChannelFactory(Executor, Executor)}, +     */, +    public NioServerSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    , +    /**, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioClientSocketChannelFactory.java, +     * Creates a new {@link NioClientSocketChannelFactory} which uses {@link Executors#newCachedThreadPool()} for the worker and boss executors., +     *, +     * See {@link #NioClientSocketChannelFactory(Executor, Executor)}, +     */, +    public NioClientSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    /**, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannelFactory.java, +, +    /**, +     * Create a new {@link NioDatagramChannelFactory} with a {@link Executors#newCachedThreadPool()}., +     *, +     * See {@link #NioDatagramChannelFactory(Executor)}, +     */, +    public NioDatagramChannelFactory() {, +        this(Executors.newCachedThreadPool());, +    }, +    , +    , +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannelFactory.java, +     * Create a new {@link NioServerSocketChannelFactory} using, +     * {@link Executors#newCachedThreadPool()} for the boss and worker., +     * , +     * See {@link #NioServerSocketChannelFactory(Executor, Executor)}, +     */, +    public NioServerSocketChannelFactory() {, +        this(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());, +    }, +    , +    , +    /**]