[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * A downstream event is an event which is supposed to be processed by, + * a series of downstream handlers in the {@link ChannelPipeline}.  It is often, + * an I/O request made by a user application., + * <h3>Firing an event to the next handler</h3>, + * {@link ChannelDownstreamHandler} will send the event downstream, + * (i.e. outbound) although it is legal to send the event upstream (i.e. inbound):, + * // Sending the event downstream (outbound), + * // Sending the event upstream (inbound), +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * A downstream event is an event which is supposed to be processed by, + * a series of downstream handlers in the {@link ChannelPipeline}.  It is often, + * an I/O request made by a user application., + * <h3>Firing an event to the next handler</h3>, + * {@link ChannelDownstreamHandler} will send the event downstream, + * (i.e. outbound) although it is legal to send the event upstream (i.e. inbound):, + * // Sending the event downstream (outbound), + * // Sending the event upstream (inbound), +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event is either an upstream event or a downstream event., + * If an event flows forward from the first handler to the last handler in a, + * event goes upstream."</strong>  If an event flows backward from the last, + * handler to the first handler in a {@link ChannelPipeline}, we call it a, + * downstream event and say <strong>"an event goes downstream."</strong>, + * (Please refer to the diagram in {@link ChannelPipeline} for more explanation.), +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * A downstream event is an event which is supposed to be processed by, + * a series of downstream handlers in the {@link ChannelPipeline}.  It is often, + * an I/O request made by a user application., + * <h3>Firing an event to the next handler</h3>, + * {@link ChannelDownstreamHandler} will send the event downstream, + * (i.e. outbound) although it is legal to send the event upstream (i.e. inbound):, + * // Sending the event downstream (outbound), + * // Sending the event upstream (inbound), +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event is either an upstream event or a downstream event., + * If an event flows forward from the first handler to the last handler in a, + * event goes upstream."</strong>  If an event flows backward from the last, + * handler to the first handler in a {@link ChannelPipeline}, we call it a, + * downstream event and say <strong>"an event goes downstream."</strong>, + * (Please refer to the diagram in {@link ChannelPipeline} for more explanation.), +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * context object, the {@link ChannelHandler} can pass events upstream or, + * downstream, modify the behavior of the pipeline, or store the information, + * (attachment) which is specific to the handler., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * A downstream event is an event which is supposed to be processed by, + * a series of downstream handlers in the {@link ChannelPipeline}.  It is often, + * an I/O request made by a user application., + * <h3>Firing an event to the next handler</h3>, + * {@link ChannelDownstreamHandler} will send the event downstream, + * (i.e. outbound) although it is legal to send the event upstream (i.e. inbound):, + * // Sending the event downstream (outbound), + * // Sending the event upstream (inbound), +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event is either an upstream event or a downstream event., + * If an event flows forward from the first handler to the last handler in a, + * event goes upstream."</strong>  If an event flows backward from the last, + * handler to the first handler in a {@link ChannelPipeline}, we call it a, + * downstream event and say <strong>"an event goes downstream."</strong>, + * (Please refer to the diagram in {@link ChannelPipeline} for more explanation.), +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * context object, the {@link ChannelHandler} can pass events upstream or, + * downstream, modify the behavior of the pipeline, or store the information, + * (attachment) which is specific to the handler., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * a {@link ChannelEvent} upstream or downstream, modify the behavior of the, + * pipeline, or store the information (attachment) which is specific to the, + * handler., +     * Sends the specified {@link ChannelEvent} to the, +     * {@link ChannelUpstreamHandler} which is placed in the closest upstream, +     * from the handler associated with this context.  It is recommended to use, +     * the shortcut methods in {@link Channels} rather than calling this method, +     * directly., +     * Sends the specified {@link ChannelEvent} to the, +     * {@link ChannelDownstreamHandler} which is placed in the closest, +     * downstream from the handler associated with this context.  It is, +     * recommended to use the shortcut methods in {@link Channels} rather than, +     * calling this method directly., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the next handler in a {@link ChannelPipeline}., + * A downstream event is an event which is supposed to be processed by, + * a series of downstream handlers in the {@link ChannelPipeline}.  It is often, + * an I/O request made by a user application., + * <h3>Firing an event to the next handler</h3>, + * {@link ChannelDownstreamHandler} will send the event downstream, + * (i.e. outbound) although it is legal to send the event upstream (i.e. inbound):, + * // Sending the event downstream (outbound), + * // Sending the event upstream (inbound), +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event is either an upstream event or a downstream event., + * If an event flows forward from the first handler to the last handler in a, + * event goes upstream."</strong>  If an event flows backward from the last, + * handler to the first handler in a {@link ChannelPipeline}, we call it a]