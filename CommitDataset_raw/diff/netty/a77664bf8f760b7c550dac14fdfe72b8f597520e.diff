[+++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * @author Trustin Lee (tlee@redhat.com), +public class HttpTunnelAddress extends SocketAddress implements Comparable<HttpTunnelAddress> {, +, +    private static final long serialVersionUID = -7933609652910855887L;, +, +        if (uri == null) {, +            throw new NullPointerException("uri");, +        }, +, +    @Override, +    public int hashCode() {, +        return uri.hashCode();, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (!(o instanceof HttpTunnelAddress)) {, +            return false;, +        }, +, +        return getUri().equals(((HttpTunnelAddress) o).getUri());, +    }, +, +    public int compareTo(HttpTunnelAddress o) {, +        return getUri().toASCIIString().compareTo(o.getUri().toASCIIString());, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * @author Trustin Lee (tlee@redhat.com), +public class HttpTunnelAddress extends SocketAddress implements Comparable<HttpTunnelAddress> {, +, +    private static final long serialVersionUID = -7933609652910855887L;, +, +        if (uri == null) {, +            throw new NullPointerException("uri");, +        }, +, +    @Override, +    public int hashCode() {, +        return uri.hashCode();, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (!(o instanceof HttpTunnelAddress)) {, +            return false;, +        }, +, +        return getUri().equals(((HttpTunnelAddress) o).getUri());, +    }, +, +    public int compareTo(HttpTunnelAddress o) {, +        return getUri().toASCIIString().compareTo(o.getUri().toASCIIString());, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelClientSocketChannel.java, +    public void sendChunk(ChannelBuffer a) {, +    public byte[] receiveChunk() {, +    public void closeSocket() {, +    public void bindSocket(SocketAddress localAddress) {, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * @author Trustin Lee (tlee@redhat.com), +public class HttpTunnelAddress extends SocketAddress implements Comparable<HttpTunnelAddress> {, +, +    private static final long serialVersionUID = -7933609652910855887L;, +, +        if (uri == null) {, +            throw new NullPointerException("uri");, +        }, +, +    @Override, +    public int hashCode() {, +        return uri.hashCode();, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (!(o instanceof HttpTunnelAddress)) {, +            return false;, +        }, +, +        return getUri().equals(((HttpTunnelAddress) o).getUri());, +    }, +, +    public int compareTo(HttpTunnelAddress o) {, +        return getUri().toASCIIString().compareTo(o.getUri().toASCIIString());, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelClientSocketChannel.java, +    public void sendChunk(ChannelBuffer a) {, +    public byte[] receiveChunk() {, +    public void closeSocket() {, +    public void bindSocket(SocketAddress localAddress) {, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelClientSocketChannelFactory.java, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * @author Trustin Lee (tlee@redhat.com), +public class HttpTunnelAddress extends SocketAddress implements Comparable<HttpTunnelAddress> {, +, +    private static final long serialVersionUID = -7933609652910855887L;, +, +        if (uri == null) {, +            throw new NullPointerException("uri");]