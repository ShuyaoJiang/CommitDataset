[+++ b/src/main/java/org/jboss/netty/handler/codec/protobuf/ProtobufDecoder.java, +import com.google.protobuf.MessageLite;, + * {@link Message} and {@link MessageLite}.  Please note that this decoder must, + * be used with a proper {@link FrameDecoder} such as {@link ProtobufVarint32FrameDecoder}, + * or {@link LengthFieldBasedFrameDecoder} if you are using a stream-based, + * transport such as TCP/IP.  A typical setup for TCP/IP would be:, +    private final MessageLite prototype;, +    public ProtobufDecoder(MessageLite prototype) {, +    public ProtobufDecoder(MessageLite prototype, ExtensionRegistry extensionRegistry) {, +++ b/src/main/java/org/jboss/netty/handler/codec/protobuf/ProtobufDecoder.java, +import com.google.protobuf.MessageLite;, + * {@link Message} and {@link MessageLite}.  Please note that this decoder must, + * be used with a proper {@link FrameDecoder} such as {@link ProtobufVarint32FrameDecoder}, + * or {@link LengthFieldBasedFrameDecoder} if you are using a stream-based, + * transport such as TCP/IP.  A typical setup for TCP/IP would be:, +    private final MessageLite prototype;, +    public ProtobufDecoder(MessageLite prototype) {, +    public ProtobufDecoder(MessageLite prototype, ExtensionRegistry extensionRegistry) {, +++ b/src/main/java/org/jboss/netty/handler/codec/protobuf/ProtobufEncoder.java, +import com.google.protobuf.MessageLite;, + * Protocol Buffers</a> {@link Message} and {@link MessageLite} into a, + * {@link ChannelBuffer}. A typical setup for TCP/IP would be:, +        if (!(msg instanceof MessageLite)) {, +        return wrappedBuffer(((MessageLite) msg).toByteArray());]