[+++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +import io.netty.util.internal.MathUtil;, +            this.size = MathUtil.findNextPositivePowerOfTwo(size);, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +import io.netty.util.internal.MathUtil;, +            this.size = MathUtil.findNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +import io.netty.util.internal.MathUtil;, +    // Should be power of two., +    private static final int DEFAULT_SAMPLING_INTERVAL = 128;, +    private final int mask;, +        this.samplingInterval = MathUtil.findNextPositivePowerOfTwo(samplingInterval);, +        // samplingInterval is a power of two so we calculate a mask that we can use to, +        // check if we need to do any leak detection or not., +        mask = this.samplingInterval - 1;, +            if ((leakCheckCnt ++ & mask) == 0) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +import io.netty.util.internal.MathUtil;, +            this.size = MathUtil.findNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +import io.netty.util.internal.MathUtil;, +    // Should be power of two., +    private static final int DEFAULT_SAMPLING_INTERVAL = 128;, +    private final int mask;, +        this.samplingInterval = MathUtil.findNextPositivePowerOfTwo(samplingInterval);, +        // samplingInterval is a power of two so we calculate a mask that we can use to, +        // check if we need to do any leak detection or not., +        mask = this.samplingInterval - 1;, +            if ((leakCheckCnt ++ & mask) == 0) {, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * This method is not suitable for {@link Integer#MIN_VALUE} or numbers greater than 2^30., +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +import io.netty.util.internal.MathUtil;, +            this.size = MathUtil.findNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +import io.netty.util.internal.MathUtil;, +    // Should be power of two., +    private static final int DEFAULT_SAMPLING_INTERVAL = 128;, +    private final int mask;, +        this.samplingInterval = MathUtil.findNextPositivePowerOfTwo(samplingInterval);, +        // samplingInterval is a power of two so we calculate a mask that we can use to, +        // check if we need to do any leak detection or not., +        mask = this.samplingInterval - 1;, +            if ((leakCheckCnt ++ & mask) == 0) {, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * This method is not suitable for {@link Integer#MIN_VALUE} or numbers greater than 2^30., +++ b/microbench/src/test/java/io/netty/microbench/util/ResourceLeakDetectorBenchmark.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.microbench.util;, +, +import io.netty.util.ResourceLeakDetector;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.Setup;, +, +public class ResourceLeakDetectorBenchmark extends AbstractMicrobenchmark {, +, +    private static final Object DUMMY = new Object();, +    private ResourceLeakDetector<Object> detector;, +, +    @Setup, +    public void setup() {, +        detector = new ResourceLeakDetector<Object>(getClass(), 128, Long.MAX_VALUE);, +    }, +, +    @Benchmark, +    public Object open() {, +        return detector.open(DUMMY);, +    }, +}]