[+++ b/common/src/main/java/io/netty/util/Attribute.java, +     * If you only want to return the old value and clear the {@link Attribute} while still keep it in the, +     *, +     * <p>, +     * Be aware that even if you call this method another thread that has obtained a reference to this {@link Attribute}, +     * via {@link AttributeMap#attr(AttributeKey)} will still operate on the same instance. That said if now another, +     * thread or even the same thread later will call {@link AttributeMap#attr(AttributeKey)} again, a new, +     * {@link Attribute} instance is created and so is not the same as the previous one that was removed. Because of, +     * this special caution should be taken when you call {@link #remove()} or {@link #getAndRemove()}., +     *, +     * @deprecated please consider using {@link #getAndSet(Object)} (with value of {@code null})., +    @Deprecated, +     *, +     * <p>, +     * Be aware that even if you call this method another thread that has obtained a reference to this {@link Attribute}, +     * via {@link AttributeMap#attr(AttributeKey)} will still operate on the same instance. That said if now another, +     * thread or even the same thread later will call {@link AttributeMap#attr(AttributeKey)} again, a new, +     * {@link Attribute} instance is created and so is not the same as the previous one that was removed. Because of, +     * this special caution should be taken when you call {@link #remove()} or {@link #getAndRemove()}., +     *, +     * @deprecated please consider using {@link #set(Object)} (with value of {@code null})., +    @Deprecated]