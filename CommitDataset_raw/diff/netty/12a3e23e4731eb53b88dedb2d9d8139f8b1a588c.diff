[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +            return directBuffer(DEFAULT_INITIAL_CAPACITY);, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +            return directBuffer(DEFAULT_INITIAL_CAPACITY);, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufAllocator.java, +     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O., +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +            return directBuffer(DEFAULT_INITIAL_CAPACITY);, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufAllocator.java, +     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O., +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +                buf = allocateBuffer(ctx, cast, preferDirect);, +     * Allocate a {@link ByteBuf} which will be used as argument of {@link #encode(ChannelHandlerContext, I, ByteBuf)}., +     * Sub-classes may override this method to returna {@link ByteBuf} with a perfect matching {@code initialCapacity}., +     */, +    protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, @SuppressWarnings("unused") I msg,, +                               boolean preferDirect) throws Exception {, +        if (preferDirect) {, +            return ctx.alloc().ioBuffer();, +        } else {, +            return ctx.alloc().heapBuffer();, +        }, +    }, +, +    /**]