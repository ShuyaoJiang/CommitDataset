[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +    private final int contentSizeThreshold;, +        this(compressionLevel, 15, 8, 0);, +        this(compressionLevel, windowBits, memLevel, 0);, +    }, +, +    /**, +     * Creates a new handler with the specified compression level, window size,, +     * and memory level.., +     *, +     * @param compressionLevel, +     *        {@code 1} yields the fastest compression and {@code 9} yields the, +     *        best compression.  {@code 0} means no compression.  The default, +     *        compression level is {@code 6}., +     * @param windowBits, +     *        The base two logarithm of the size of the history buffer.  The, +     *        value should be in the range {@code 9} to {@code 15} inclusive., +     *        Larger values result in better compression at the expense of, +     *        memory usage.  The default value is {@code 15}., +     * @param memLevel, +     *        How much memory should be allocated for the internal compression, +     *        state.  {@code 1} uses minimum memory and {@code 9} uses maximum, +     *        memory.  Larger values result in better and faster compression, +     *        at the expense of memory usage.  The default value is {@code 8}, +     * @param contentSizeThreshold, +     *        The response body is compressed when the size of the response, +     *        body exceeds the threshold. The value should be a non negative, +     *        number. {@code 0} will enable compression for all responses., +     */, +    public HttpContentCompressor(int compressionLevel, int windowBits, int memLevel, int contentSizeThreshold) {, +        if (contentSizeThreshold < 0) {, +            throw new IllegalArgumentException(, +                    "contentSizeThreshold: " + contentSizeThreshold + " (expected: non negative number)");, +        }, +        this.contentSizeThreshold = contentSizeThreshold;, +        if (this.contentSizeThreshold > 0) {, +            if (headers instanceof HttpContent &&, +                    ((HttpContent) headers).content().readableBytes() < contentSizeThreshold) {, +                return null;, +            }, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +    private final int contentSizeThreshold;, +        this(compressionLevel, 15, 8, 0);, +        this(compressionLevel, windowBits, memLevel, 0);, +    }, +, +    /**, +     * Creates a new handler with the specified compression level, window size,, +     * and memory level.., +     *, +     * @param compressionLevel, +     *        {@code 1} yields the fastest compression and {@code 9} yields the, +     *        best compression.  {@code 0} means no compression.  The default, +     *        compression level is {@code 6}., +     * @param windowBits, +     *        The base two logarithm of the size of the history buffer.  The, +     *        value should be in the range {@code 9} to {@code 15} inclusive., +     *        Larger values result in better compression at the expense of, +     *        memory usage.  The default value is {@code 15}., +     * @param memLevel, +     *        How much memory should be allocated for the internal compression, +     *        state.  {@code 1} uses minimum memory and {@code 9} uses maximum, +     *        memory.  Larger values result in better and faster compression, +     *        at the expense of memory usage.  The default value is {@code 8}, +     * @param contentSizeThreshold, +     *        The response body is compressed when the size of the response, +     *        body exceeds the threshold. The value should be a non negative, +     *        number. {@code 0} will enable compression for all responses., +     */, +    public HttpContentCompressor(int compressionLevel, int windowBits, int memLevel, int contentSizeThreshold) {, +        if (contentSizeThreshold < 0) {, +            throw new IllegalArgumentException(, +                    "contentSizeThreshold: " + contentSizeThreshold + " (expected: non negative number)");, +        }, +        this.contentSizeThreshold = contentSizeThreshold;, +        if (this.contentSizeThreshold > 0) {, +            if (headers instanceof HttpContent &&, +                    ((HttpContent) headers).content().readableBytes() < contentSizeThreshold) {, +                return null;, +            }, +        }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +import static org.junit.Assert.*;, +    @Test, +    public void testCompressThresholdAllCompress() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        assertTrue(ch.writeInbound(newRequest()));, +, +        FullHttpResponse res1023 = new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.OK,, +                Unpooled.wrappedBuffer(new byte[1023]));, +        assertTrue(ch.writeOutbound(res1023));, +        DefaultHttpResponse response1023 = ch.readOutbound();, +        assertThat(response1023.headers().get(HttpHeaderNames.CONTENT_ENCODING), is("gzip"));, +        ch.releaseOutbound();, +, +        assertTrue(ch.writeInbound(newRequest()));]