[+++ /dev/null, +++ /dev/null, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +import io.netty.testsuite.transport.socket.SocketTestPermutation.Factory;, +            SocketTestPermutation.socket();, +++ /dev/null, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +import io.netty.testsuite.transport.socket.SocketTestPermutation.Factory;, +            SocketTestPermutation.socket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketObjectEchoTest.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import static org.junit.Assert.*;, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.codec.serialization.ClassResolvers;, +import io.netty.handler.codec.serialization.ObjectDecoder;, +import io.netty.handler.codec.serialization.ObjectEncoder;, +, +import java.io.IOException;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.junit.Test;, +, +public class SocketObjectEchoTest extends AbstractSocketTest {, +, +    static final Random random = new Random();, +    static final String[] data = new String[1024];, +, +    static {, +        for (int i = 0; i < data.length; i ++) {, +            int eLen = random.nextInt(512);, +            char[] e = new char[eLen];, +            for (int j = 0; j < eLen; j ++) {, +                e[j] = (char) ('a' + random.nextInt(26));, +            }, +, +            data[i] = new String(e);, +        }, +    }, +, +    @Test, +    public void testObjectEcho() throws Throwable {, +        run();, +    }, +, +    public void testObjectEcho(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        final EchoHandler sh = new EchoHandler();, +        final EchoHandler ch = new EchoHandler();, +, +        sb.childHandler(new ChannelInitializer<SocketChannel>() {, +            @Override, +            public void initChannel(SocketChannel sch) throws Exception {, +                sch.pipeline().addLast(, +                        new ObjectDecoder(ClassResolvers.cacheDisabled(getClass().getClassLoader())),, +                        new ObjectEncoder(),, +                        sh);, +            }, +        });, +, +        cb.handler(new ChannelInitializer<SocketChannel>() {, +            @Override, +            public void initChannel(SocketChannel sch) throws Exception {, +                sch.pipeline().addLast(, +                        new ObjectDecoder(ClassResolvers.cacheDisabled(getClass().getClassLoader())),, +                        new ObjectEncoder(),, +                        ch);, +            }, +        });, +, +        Channel sc = sb.bind().sync().channel();, +        Channel cc = cb.connect().sync().channel();, +        for (String element : data) {, +            cc.write(element);, +        }, +, +        while (ch.counter < data.length) {, +            if (sh.exception.get() != null) {, +                break;]