[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +     * Returns the reader index of needle in haystack, or -1 if needle is not in haystack., +     */, +    public static int indexOf(ByteBuf needle, ByteBuf haystack) {, +        // TODO: maybe use Boyer Moore for efficiency., +        int attempts = haystack.readableBytes() - needle.readableBytes() + 1;, +        for (int i = 0; i < attempts; i++) {, +            if (equals(needle, needle.readerIndex(),, +                       haystack, haystack.readerIndex() + i,, +                       needle.readableBytes())) {, +                return haystack.readerIndex() + i;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +     * Returns the reader index of needle in haystack, or -1 if needle is not in haystack., +     */, +    public static int indexOf(ByteBuf needle, ByteBuf haystack) {, +        // TODO: maybe use Boyer Moore for efficiency., +        int attempts = haystack.readableBytes() - needle.readableBytes() + 1;, +        for (int i = 0; i < attempts; i++) {, +            if (equals(needle, needle.readerIndex(),, +                       haystack, haystack.readerIndex() + i,, +                       needle.readableBytes())) {, +                return haystack.readerIndex() + i;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import io.netty.buffer.Unpooled;, +import io.netty.util.CharsetUtil;, +    private static final ByteBuf HTTP_1_X_BUF = Unpooled.unreleasableBuffer(, +        Unpooled.wrappedBuffer(new byte[] {'H', 'T', 'T', 'P', '/', '1', '.'})).asReadOnly();, +                int maxSearch = 1024; // picked because 512 is too little, and 2048 too much, +                int http1Index =, +                    ByteBufUtil.indexOf(HTTP_1_X_BUF, in.slice(in.readerIndex(), min(in.readableBytes(), maxSearch)));, +                if (http1Index != -1) {, +                    String chunk = in.toString(in.readerIndex(), http1Index - in.readerIndex(), CharsetUtil.US_ASCII);, +                    throw connectionError(PROTOCOL_ERROR, "Unexpected HTTP/1.x request: %s", chunk);, +                }, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +     * Returns the reader index of needle in haystack, or -1 if needle is not in haystack., +     */, +    public static int indexOf(ByteBuf needle, ByteBuf haystack) {, +        // TODO: maybe use Boyer Moore for efficiency., +        int attempts = haystack.readableBytes() - needle.readableBytes() + 1;, +        for (int i = 0; i < attempts; i++) {, +            if (equals(needle, needle.readerIndex(),, +                       haystack, haystack.readerIndex() + i,, +                       needle.readableBytes())) {, +                return haystack.readerIndex() + i;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import io.netty.buffer.Unpooled;, +import io.netty.util.CharsetUtil;, +    private static final ByteBuf HTTP_1_X_BUF = Unpooled.unreleasableBuffer(, +        Unpooled.wrappedBuffer(new byte[] {'H', 'T', 'T', 'P', '/', '1', '.'})).asReadOnly();, +                int maxSearch = 1024; // picked because 512 is too little, and 2048 too much, +                int http1Index =, +                    ByteBufUtil.indexOf(HTTP_1_X_BUF, in.slice(in.readerIndex(), min(in.readableBytes(), maxSearch)));, +                if (http1Index != -1) {, +                    String chunk = in.toString(in.readerIndex(), http1Index - in.readerIndex(), CharsetUtil.US_ASCII);, +                    throw connectionError(PROTOCOL_ERROR, "Unexpected HTTP/1.x request: %s", chunk);, +                }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +import io.netty.util.CharsetUtil;, +import static io.netty.util.CharsetUtil.US_ASCII;, +    private String goAwayDebugCap;, +, +                goAwayDebugCap = buf.toString(UTF_8);, +    public void serverReceivingHttp1ClientPrefaceStringShouldIncludePreface() throws Exception {, +        when(connection.isServer()).thenReturn(true);, +        handler = newHandler();, +        handler.channelRead(ctx, copiedBuffer("GET /path HTTP/1.1", US_ASCII));, +        ArgumentCaptor<ByteBuf> captor = ArgumentCaptor.forClass(ByteBuf.class);, +        verify(frameWriter).writeGoAway(eq(ctx), eq(0), eq(PROTOCOL_ERROR.code()),, +            captor.capture(), eq(promise));, +        assertEquals(0, captor.getValue().refCnt());, +        assertTrue(goAwayDebugCap.contains("/path"));, +    }, +, +    @Test]