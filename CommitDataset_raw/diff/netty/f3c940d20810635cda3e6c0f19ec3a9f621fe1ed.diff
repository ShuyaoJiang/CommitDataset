[+++ b/transport/src/main/java/io/netty/channel/ChannelPipeline.java, +     * Returns the context of the first {@link ChannelHandler} in this pipeline., +     *, +     * @return the context of the first handler.  {@code null} if this pipeline is empty., +     */, +    ChannelHandlerContext firstContext();, +, +    /**, +     * Returns the context of the last {@link ChannelHandler} in this pipeline., +     *, +     * @return the context of the last handler.  {@code null} if this pipeline is empty., +     */, +    ChannelHandlerContext lastContext();, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/ChannelPipeline.java, +     * Returns the context of the first {@link ChannelHandler} in this pipeline., +     *, +     * @return the context of the first handler.  {@code null} if this pipeline is empty., +     */, +    ChannelHandlerContext firstContext();, +, +    /**, +     * Returns the context of the last {@link ChannelHandler} in this pipeline., +     *, +     * @return the context of the last handler.  {@code null} if this pipeline is empty., +     */, +    ChannelHandlerContext lastContext();, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    public ChannelHandler first() {, +    public ChannelHandlerContext firstContext() {, +        return head.next;, +    }, +, +    @Override, +    public ChannelHandler last() {, +    public ChannelHandlerContext lastContext() {, +        DefaultChannelHandlerContext last = tail;, +        if (last == head || last == null) {, +            return null;, +        }, +        return last;, +    }, +, +    @Override, +    public ChannelHandler get(String name) {, +        ChannelHandlerContext ctx = context(name);, +    public <T extends ChannelHandler> T get(Class<T> handlerType) {, +    public ChannelHandlerContext context(String name) {, +, +        synchronized (this) {, +    }, +    public ChannelHandlerContext context(ChannelHandler handler) {, +, +        DefaultChannelHandlerContext ctx = head.next;, +        for (;;) {, +            if (ctx == null) {, +, +    public ChannelHandlerContext context(Class<? extends ChannelHandler> handlerType) {, +            if (ctx == null) {, +                return null;, +            }, +            if (ctx == null) {, +                return list;, +            }, +            if (ctx == null) {, +                return map;, +            }, +            if (ctx == null) {, +                break;, +            }, +, +, +]