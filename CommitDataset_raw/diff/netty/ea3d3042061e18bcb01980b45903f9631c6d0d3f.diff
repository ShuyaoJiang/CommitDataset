[+++ b/transport/src/main/java/io/netty/channel/Channel.java, +import sun.awt.windows.ThemeReader;, +, +    /**, +     * Return the {@link EventLoop} this {@link Channel} was registered too., +     */, +    /**, +     * Return the {@link ChannelMetadata} of the {@link Channel} which describe the nature of the {@link Channel}., +     */, +    /**, +     * <strong>Caution</strong> for transport implementations use only!, +     */, +    /**, +     * <strong>Unsafe</strong> operations that should <strong>never</strong> be called, +     * from user-code. These methods are only provided to implement the actual transport., +     */, +        /**, +         * Return the {@link ChannelHandlerContext} which is directly connected to the outbound of the, +         * underlying transport., +         */, +, +        /**, +         * Return a {@link VoidChannelFuture}. This method always return the same instance., +         */, +        /**, +         * Return the {@link SocketAddress} to which is bound local or, +         * <code>null</code> if none., +         */, +, +        /**, +         * Return the {@link SocketAddress} to which is bound remote or, +         * <code>null</code> if none is bound yet., +         */, +        /**, +         * Register the {@link Channel} of the {@link ChannelFuture} with the {@link EventLoop} and notify, +         * the {@link ChannelFuture} once the registration was complete., +         */, +, +        /**, +         * Bind the {@link SocketAddress} to the {@link Channel} of the {@link ChannelFuture} and notify, +         * it once its done., +         */, +, +        /**, +         * Connect the {@link Channel} of the given {@link ChannelFuture} with the given remote {@link SocketAddress}., +         * If a specific local {@link SocketAddress} should be used it need to be given as argument. Otherwise just, +         * pass <code>null</code> to it., +         *, +         * The {@link ChannelFuture} will get notified once the connect operation was complete., +         */, +, +        /**, +         * Disconnect the {@link Channel} of the {@link ChannelFuture} and notify the {@link ChannelFuture} once the, +         * operation was complete., +         */, +, +        /**, +         * Close the {@link Channel} of the {@link ChannelFuture} and notify the {@link ChannelFuture} once the, +         * operation was complete., +         */, +, +        /**, +         * Deregister the {@link Channel} of the {@link ChannelFuture} from {@link EventLoop} and notify the, +         * {@link ChannelFuture} once the operation was complete., +         */, +        /**, +         * Flush out all data that was buffered in the buffer of the {@link #directOutboundContext()} and was not, +         * flushed out yet. After that is done the {@link ChannelFuture} will get notified, +         */, +, +        /**, +         * Flush out all data now., +         */, +, +        /**, +         * Suspend reads from the underlying transport, which basicly has the effect of no new data that will, +         * get dispatched., +         */, +, +        /**, +         * Resume reads from the underlying transport. If {@link #suspendRead()} was not called before, this, +         * has no effect., +         */, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +import sun.awt.windows.ThemeReader;, +, +    /**, +     * Return the {@link EventLoop} this {@link Channel} was registered too., +     */, +    /**, +     * Return the {@link ChannelMetadata} of the {@link Channel} which describe the nature of the {@link Channel}., +     */, +    /**, +     * <strong>Caution</strong> for transport implementations use only!, +     */, +    /**, +     * <strong>Unsafe</strong> operations that should <strong>never</strong> be called, +     * from user-code. These methods are only provided to implement the actual transport., +     */, +        /**]