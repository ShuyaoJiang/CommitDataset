[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +            if (closeFuture.setClosed()) {, +            } else {, +                // Closed already., +                promise.setSuccess();, +            }, +     * Will be called before the actual close operation will be performed. Sub-classes may override this as the default, +     * is to do nothing., +     */, +    protected void doPreClose() throws Exception {, +        // NOOP by default, +    }, +, +    /**, +            try {, +                doPreClose();, +            } catch (Exception e) {, +                logger.warn("doPreClose() raised an exception.", e);, +            }, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +            if (closeFuture.setClosed()) {, +            } else {, +                // Closed already., +                promise.setSuccess();, +            }, +     * Will be called before the actual close operation will be performed. Sub-classes may override this as the default, +     * is to do nothing., +     */, +    protected void doPreClose() throws Exception {, +        // NOOP by default, +    }, +, +    /**, +            try {, +                doPreClose();, +            } catch (Exception e) {, +                logger.warn("doPreClose() raised an exception.", e);, +            }, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected void doPreClose() throws Exception {, +        // Update all internal state before the closeFuture is notified., +    }, +    @Override, +    protected void doClose() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeFuture.setClosed();, +            if (closeFuture.setClosed()) {, +            } else {, +                // Closed already., +                promise.setSuccess();, +            }, +     * Will be called before the actual close operation will be performed. Sub-classes may override this as the default, +     * is to do nothing., +     */, +    protected void doPreClose() throws Exception {, +        // NOOP by default, +    }, +, +    /**, +            try {, +                doPreClose();, +            } catch (Exception e) {, +                logger.warn("doPreClose() raised an exception.", e);, +            }, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected void doPreClose() throws Exception {, +        // Update all internal state before the closeFuture is notified., +    }, +    @Override, +    protected void doClose() throws Exception {, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    protected void doPreClose() throws Exception {, +        // Update all internal state before the closeFuture is notified., +    protected void doClose() throws Exception {, +        // All internal state was updated already at doPreClose()., +    }, +, +    @Override]