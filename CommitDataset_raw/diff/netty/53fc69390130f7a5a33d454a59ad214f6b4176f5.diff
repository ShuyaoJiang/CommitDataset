[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import static io.netty.handler.ssl.SslUtils.SSL_RECORD_HEADER_LENGTH;, +     * TLS Header (5) + 16 (IV) + 48 (MAC) + 1 (Padding_length field) + 15 (Padding) + 1 (ContentType) +, +     * 2 (ProtocolVersion) + 2 (Length), +    static final int MAX_TLS_RECORD_OVERHEAD_LENGTH = SSL_RECORD_HEADER_LENGTH + 16 + 48 + 1 + 15 + 1 + 2 + 2;, +    static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_PLAINTEXT_LENGTH + MAX_TLS_RECORD_OVERHEAD_LENGTH;, +                if (dst.remaining() < calculateOutNetBufSize(srcsLen, endOffset - offset)) {, +            if (len < SSL_RECORD_HEADER_LENGTH) {, +            if (packetLength - SSL_RECORD_HEADER_LENGTH > capacity) {, +    static int calculateOutNetBufSize(int pendingBytes, int numComponents) {, +        return (int) min(Integer.MAX_VALUE, pendingBytes + (long) MAX_TLS_RECORD_OVERHEAD_LENGTH * numComponents);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import static io.netty.handler.ssl.SslUtils.SSL_RECORD_HEADER_LENGTH;, +     * TLS Header (5) + 16 (IV) + 48 (MAC) + 1 (Padding_length field) + 15 (Padding) + 1 (ContentType) +, +     * 2 (ProtocolVersion) + 2 (Length), +    static final int MAX_TLS_RECORD_OVERHEAD_LENGTH = SSL_RECORD_HEADER_LENGTH + 16 + 48 + 1 + 15 + 1 + 2 + 2;, +    static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_PLAINTEXT_LENGTH + MAX_TLS_RECORD_OVERHEAD_LENGTH;, +                if (dst.remaining() < calculateOutNetBufSize(srcsLen, endOffset - offset)) {, +            if (len < SSL_RECORD_HEADER_LENGTH) {, +            if (packetLength - SSL_RECORD_HEADER_LENGTH > capacity) {, +    static int calculateOutNetBufSize(int pendingBytes, int numComponents) {, +        return (int) min(Integer.MAX_VALUE, pendingBytes + (long) MAX_TLS_RECORD_OVERHEAD_LENGTH * numComponents);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    ReferenceCountedOpenSslEngine opensslEngine = (ReferenceCountedOpenSslEngine) handler.engine;, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +                return ReferenceCountedOpenSslEngine.calculateOutNetBufSize(pendingBytes, numComponents);, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +            return engine instanceof ReferenceCountedOpenSslEngine ? TCNATIVE : JDK;, +        abstract int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents);, +                    out = allocateOutNetBuf(ctx, buf.readableBytes(), buf.nioBufferCount());, +                    out = allocateOutNetBuf(ctx, 2048, 1);, +    private ByteBuf allocateOutNetBuf(ChannelHandlerContext ctx, int pendingBytes, int numComponents) {, +        return allocate(ctx, engineType.calculateOutNetBufSize(this, pendingBytes, numComponents));, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import static io.netty.handler.ssl.SslUtils.SSL_RECORD_HEADER_LENGTH;, +     * TLS Header (5) + 16 (IV) + 48 (MAC) + 1 (Padding_length field) + 15 (Padding) + 1 (ContentType) +, +     * 2 (ProtocolVersion) + 2 (Length), +    static final int MAX_TLS_RECORD_OVERHEAD_LENGTH = SSL_RECORD_HEADER_LENGTH + 16 + 48 + 1 + 15 + 1 + 2 + 2;, +    static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_PLAINTEXT_LENGTH + MAX_TLS_RECORD_OVERHEAD_LENGTH;, +                if (dst.remaining() < calculateOutNetBufSize(srcsLen, endOffset - offset)) {, +            if (len < SSL_RECORD_HEADER_LENGTH) {, +            if (packetLength - SSL_RECORD_HEADER_LENGTH > capacity) {, +    static int calculateOutNetBufSize(int pendingBytes, int numComponents) {, +        return (int) min(Integer.MAX_VALUE, pendingBytes + (long) MAX_TLS_RECORD_OVERHEAD_LENGTH * numComponents);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    ReferenceCountedOpenSslEngine opensslEngine = (ReferenceCountedOpenSslEngine) handler.engine;, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +                return ReferenceCountedOpenSslEngine.calculateOutNetBufSize(pendingBytes, numComponents);, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +            return engine instanceof ReferenceCountedOpenSslEngine ? TCNATIVE : JDK;, +        abstract int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents);, +                    out = allocateOutNetBuf(ctx, buf.readableBytes(), buf.nioBufferCount());, +                    out = allocateOutNetBuf(ctx, 2048, 1);, +    private ByteBuf allocateOutNetBuf(ChannelHandlerContext ctx, int pendingBytes, int numComponents) {, +        return allocate(ctx, engineType.calculateOutNetBufSize(this, pendingBytes, numComponents));, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_ENCRYPTED_PACKET_LENGTH;, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_TLS_RECORD_OVERHEAD_LENGTH;, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_PLAINTEXT_LENGTH;, +import static java.lang.Integer.MAX_VALUE;, +                    src.capacity() + MAX_TLS_RECORD_OVERHEAD_LENGTH - 1);, +                    src.capacity() + MAX_TLS_RECORD_OVERHEAD_LENGTH);, +            // src.capacity() + ReferenceCountedOpenSslEngine.MAX_TLS_RECORD_OVERHEAD_LENGTH, +            // src.capacity() + ReferenceCountedOpenSslEngine.MAX_TLS_RECORD_OVERHEAD_LENGTH, +                    + MAX_TLS_RECORD_OVERHEAD_LENGTH);, +            long maxLen = ((long) MAX_VALUE) * 2;, +            ByteBuffer dst = allocateBuffer(MAX_ENCRYPTED_PACKET_LENGTH - 1);, +        assertEquals(MAX_VALUE,, +                ReferenceCountedOpenSslEngine.calculateOutNetBufSize(MAX_VALUE, 1));, +        assertEquals(MAX_TLS_RECORD_OVERHEAD_LENGTH,, +                ReferenceCountedOpenSslEngine.calculateOutNetBufSize(0, 1));, +            } while (srcLen < MAX_PLAINTEXT_LENGTH);, +            testWrapDstBigEnough(clientEngine, MAX_PLAINTEXT_LENGTH);, +        ByteBuffer dst = allocateBuffer(srcLen + MAX_TLS_RECORD_OVERHEAD_LENGTH);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import static io.netty.handler.ssl.SslUtils.SSL_RECORD_HEADER_LENGTH;, +     * TLS Header (5) + 16 (IV) + 48 (MAC) + 1 (Padding_length field) + 15 (Padding) + 1 (ContentType) +, +     * 2 (ProtocolVersion) + 2 (Length), +    static final int MAX_TLS_RECORD_OVERHEAD_LENGTH = SSL_RECORD_HEADER_LENGTH + 16 + 48 + 1 + 15 + 1 + 2 + 2;, +    static final int MAX_ENCRYPTED_PACKET_LENGTH = MAX_PLAINTEXT_LENGTH + MAX_TLS_RECORD_OVERHEAD_LENGTH;, +                if (dst.remaining() < calculateOutNetBufSize(srcsLen, endOffset - offset)) {, +            if (len < SSL_RECORD_HEADER_LENGTH) {, +            if (packetLength - SSL_RECORD_HEADER_LENGTH > capacity) {, +    static int calculateOutNetBufSize(int pendingBytes, int numComponents) {, +        return (int) min(Integer.MAX_VALUE, pendingBytes + (long) MAX_TLS_RECORD_OVERHEAD_LENGTH * numComponents);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    ReferenceCountedOpenSslEngine opensslEngine = (ReferenceCountedOpenSslEngine) handler.engine;, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +                return ReferenceCountedOpenSslEngine.calculateOutNetBufSize(pendingBytes, numComponents);, +            int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents) {, +            return engine instanceof ReferenceCountedOpenSslEngine ? TCNATIVE : JDK;, +        abstract int calculateOutNetBufSize(SslHandler handler, int pendingBytes, int numComponents);, +                    out = allocateOutNetBuf(ctx, buf.readableBytes(), buf.nioBufferCount());, +                    out = allocateOutNetBuf(ctx, 2048, 1);, +    private ByteBuf allocateOutNetBuf(ChannelHandlerContext ctx, int pendingBytes, int numComponents) {, +        return allocate(ctx, engineType.calculateOutNetBufSize(this, pendingBytes, numComponents));, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_ENCRYPTED_PACKET_LENGTH;, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_TLS_RECORD_OVERHEAD_LENGTH;, +import static io.netty.handler.ssl.ReferenceCountedOpenSslEngine.MAX_PLAINTEXT_LENGTH;]