[+++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +import java.net.SocketAddress;, +import java.nio.channels.ClosedChannelException;, +import java.util.ArrayDeque;, +import java.util.Queue;, +, +, +        flushInbound(false, voidPromise());, +     * Writes one message to the inbound of this {@link Channel} and does not flush it. This, +     * method is conceptually equivalent to {@link #write(Object)}., +     *, +     * @see #writeOneOutbound(Object), +     */, +    public ChannelFuture writeOneInbound(Object msg) {, +        return writeOneInbound(msg, newPromise());, +    }, +, +    /**, +     * Writes one message to the inbound of this {@link Channel} and does not flush it. This, +     * method is conceptually equivalent to {@link #write(Object, ChannelPromise)}., +     *, +     * @see #writeOneOutbound(Object, ChannelPromise), +     */, +    public ChannelFuture writeOneInbound(Object msg, ChannelPromise promise) {, +        if (checkOpen(true)) {, +            pipeline().fireChannelRead(msg);, +        }, +        return checkException(promise);, +    }, +, +    /**, +     * Flushes the inbound of this {@link Channel}. This method is conceptually equivalent to {@link #flush()}., +     *, +     * @see #flushOutbound(), +     */, +    public EmbeddedChannel flushInbound() {, +        flushInbound(true, voidPromise());, +        return this;, +    }, +, +    private ChannelFuture flushInbound(boolean recordException, ChannelPromise promise) {, +      if (checkOpen(recordException)) {, +          pipeline().fireChannelReadComplete();, +          runPendingTasks();, +      }, +, +      return checkException(promise);, +    }, +, +    /**, +, +            flushOutbound0();, +     * Writes one message to the outbound of this {@link Channel} and does not flush it. This, +     * method is conceptually equivalent to {@link #write(Object)}., +     *, +     * @see #writeOneInbound(Object), +     */, +    public ChannelFuture writeOneOutbound(Object msg) {, +        return writeOneOutbound(msg, newPromise());, +    }, +, +    /**, +     * Writes one message to the outbound of this {@link Channel} and does not flush it. This, +     * method is conceptually equivalent to {@link #write(Object, ChannelPromise)}., +     *, +     * @see #writeOneInbound(Object, ChannelPromise), +     */, +    public ChannelFuture writeOneOutbound(Object msg, ChannelPromise promise) {, +        if (checkOpen(true)) {, +            return write(msg, promise);, +        }, +        return checkException(promise);, +    }, +, +    /**, +     * Flushes the outbound of this {@link Channel}. This method is conceptually equivalent to {@link #flush()}., +     *, +     * @see #flushInbound(), +     */, +    public EmbeddedChannel flushOutbound() {, +        if (checkOpen(true)) {, +            flushOutbound0();, +        }, +        checkException(voidPromise());, +        return this;, +    }, +, +    private void flushOutbound0() {, +        // We need to call runPendingTasks first as a ChannelOutboundHandler may used eventloop.execute(...) to, +        // delay the write on the next eventloop run., +        runPendingTasks();, +, +        flush();, +    }, +, +    /**, +     * Checks for the presence of an {@link Exception}., +     */, +    private ChannelFuture checkException(ChannelPromise promise) {, +      Throwable t = lastException;]