[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import io.netty.util.internal.DetectionUtil;, +import java.net.SocketException;, +import java.nio.channels.MembershipKey;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +    private Map<InetAddress, List<MembershipKey>> memberships;, +       try {, +            joinGroup(multicastAddress, NetworkInterface.getByInetAddress(getLocalAddress().getAddress()), null);, +        } catch (SocketException e) {, +            throw new ChannelException(e);, +        }, +    public void joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface) {, +        joinGroup(multicastAddress.getAddress(), networkInterface, null);, +    }, +, +    /**, +     * Joins the specified multicast group at the specified interface using the specified source., +     */, +    public void joinGroup(InetAddress multicastAddress, NetworkInterface networkInterface, InetAddress source) {, +        if (DetectionUtil.javaVersion() < 7) {, +        } else {, +            if (multicastAddress == null) {, +                throw new NullPointerException("multicastAddress");, +            }, +            , +            if (networkInterface == null) {, +                throw new NullPointerException("networkInterface");, +            }, +            , +            try {, +                MembershipKey key = getJdkChannel().getChannel().join(multicastAddress, networkInterface);, +                synchronized (this) {, +                    if (memberships == null) {, +                        memberships = new HashMap<InetAddress, List<MembershipKey>>();, +                       , +                    } , +                    List<MembershipKey> keys = memberships.get(multicastAddress);, +                    if (keys == null) {, +                        keys = new ArrayList<MembershipKey>();, +                        memberships.put(multicastAddress, keys);, +                    }, +                   , +                    keys.add(key);, +                }, +            } catch (IOException e) {, +                throw new ChannelException(e);, +            }, +        }, +        try {, +            leaveGroup(multicastAddress, NetworkInterface.getByInetAddress(getLocalAddress().getAddress()), null);, +        } catch (SocketException e) {, +            throw new ChannelException(e);, +        }, +        , +        leaveGroup(multicastAddress.getAddress(), networkInterface, null);, +    }, +, +    /**, +     * Leave the specified multicast group at the specified interface using the specified source., +     */, +    public void leaveGroup(InetAddress multicastAddress,, +            NetworkInterface networkInterface, InetAddress source) {, +        if (DetectionUtil.javaVersion() < 7) {, +        } else {, +            if (multicastAddress == null) {, +                throw new NullPointerException("multicastAddress");, +            }, +            , +            if (networkInterface == null) {, +                throw new NullPointerException("networkInterface");, +            }, +            , +            synchronized (this) {, +                if (memberships != null) {, +                    List<MembershipKey> keys = memberships.get(multicastAddress);, +                    if (keys != null) {, +                        Iterator<MembershipKey> keyIt = keys.iterator();, +                        , +                        while(keyIt.hasNext()) {, +                            MembershipKey key = keyIt.next();, +                            if (networkInterface.equals(key.networkInterface())) {, +                               if (source == null && key.sourceAddress() == null || (source != null && source.equals(key.sourceAddress()))) {, +                                   key.drop();, +                                   keyIt.remove();, +                               }, +                               , +                            }, +                        }, +                        if (keys.isEmpty()) {, +                            memberships.remove(multicastAddress);, +                        }, +                    }, +                }, +        }, +    }, +    ]