[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        incrementPendingOutboundBytes(size, true);, +    void incrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +    void decrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +        decrementPendingOutboundBytes(size, true);, +        decrementPendingOutboundBytes(size, true);, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        incrementPendingOutboundBytes(size, true);, +    void incrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +    void decrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +        decrementPendingOutboundBytes(size, true);, +        decrementPendingOutboundBytes(size, true);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +import static io.netty.channel.DefaultChannelPipeline.logger;, +    DefaultChannelHandlerContext(DefaultChannelPipeline pipeline, EventExecutorGroup group, String name,, +            ChannelHandler handler) {, +, +        write(msg, false, promise);, +, +        write(msg, true, promise);, +    private void write(Object msg, boolean flush, ChannelPromise promise) {, +, +        DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +        if (executor.inEventLoop()) {, +            next.invokeWrite(msg, promise);, +            if (flush) {, +                next.invokeFlush();, +            }, +        } else {, +            int size = channel.estimatorHandle().size(msg);, +                    buffer.incrementPendingOutboundBytes(size, false);, +    }, +                        buffer.decrementPendingOutboundBytes(size, false);, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        incrementPendingOutboundBytes(size, true);, +    void incrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +    void decrementPendingOutboundBytes(int size, boolean fireEvent) {, +                if (fireEvent) {, +    }, +        decrementPendingOutboundBytes(size, true);, +        decrementPendingOutboundBytes(size, true);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +import static io.netty.channel.DefaultChannelPipeline.logger;, +    DefaultChannelHandlerContext(DefaultChannelPipeline pipeline, EventExecutorGroup group, String name,, +            ChannelHandler handler) {, +, +        write(msg, false, promise);, +, +        write(msg, true, promise);, +    private void write(Object msg, boolean flush, ChannelPromise promise) {, +, +        DefaultChannelHandlerContext next = findContextOutbound();, +        EventExecutor executor = next.executor();, +        if (executor.inEventLoop()) {, +            next.invokeWrite(msg, promise);, +            if (flush) {, +                next.invokeFlush();, +            }, +        } else {, +            int size = channel.estimatorHandle().size(msg);, +                    buffer.incrementPendingOutboundBytes(size, false);, +    }, +                        buffer.decrementPendingOutboundBytes(size, false);, +++ b/transport/src/test/java/io/netty/channel/BaseChannelTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel;, +, +, +import static org.junit.Assert.assertEquals;, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.local.LocalChannel;, +import io.netty.channel.local.LocalEventLoopGroup;]