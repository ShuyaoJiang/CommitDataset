[+++ b/codec-smtp/src/main/java/io/netty/handler/codec/smtp/SmtpRequestEncoder.java, +            final SmtpRequest req = (SmtpRequest) msg;, +                if (req.command().equals(SmtpCommand.RSET)) {, +                    contentExpected = false;, +                } else {, +            }, +++ b/codec-smtp/src/main/java/io/netty/handler/codec/smtp/SmtpRequestEncoder.java, +            final SmtpRequest req = (SmtpRequest) msg;, +                if (req.command().equals(SmtpCommand.RSET)) {, +                    contentExpected = false;, +                } else {, +            }, +++ b/codec-smtp/src/test/java/io/netty/handler/codec/smtp/SmtpRequestEncoderTest.java, +import io.netty.handler.codec.EncoderException;, +        assertEquals("DATA\r\nSubject: Test\r\n\r\nTest\r\n.\r\n", getWrittenString(channel));, +    }, +, +    @Test(expected = EncoderException.class), +    public void testThrowsIfContentExpected() {, +        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());, +        assertTrue(channel.writeOutbound(SmtpRequests.data()));, +        channel.writeOutbound(SmtpRequests.noop());, +    }, +, +    @Test, +    public void testRsetClearsContentExpectedFlag() {, +        EmbeddedChannel channel = new EmbeddedChannel(new SmtpRequestEncoder());, +, +        assertTrue(channel.writeOutbound(SmtpRequests.data()));, +        assertTrue(channel.writeOutbound(SmtpRequests.rset()));, +        assertTrue(channel.writeOutbound(SmtpRequests.noop()));, +        assertTrue(channel.finish());, +, +        assertEquals("DATA\r\nRSET\r\nNOOP\r\n", getWrittenString(channel));, +    }, +, +    private static String getWrittenString(EmbeddedChannel channel) {, +, +        String writtenString = written.toString(CharsetUtil.US_ASCII);, +, +        return writtenString;]