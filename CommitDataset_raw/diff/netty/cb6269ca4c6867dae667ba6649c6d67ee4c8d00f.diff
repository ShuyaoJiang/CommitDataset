[+++ b/src/main/java/org/jboss/netty/handler/trafficshaping/PerformanceCounter.java, + * PerformanceCounter is associated with {@link TrafficShapingHandler} and, + * should be created through a {@link PerformanceCounterFactory}.<br>, + * A PerformanceCounter can limit the traffic or not, globally or per channel,, + * and always compute statistics on read and written bytes at the specified, + * interval., +    private static InternalLogger logger = InternalLoggerFactory, +            .getInstance(PerformanceCounter.class);, +, +, +, +, +, +, +, +, +, +    private long delay = PerformanceCounterFactory.DEFAULT_DELAY;, +, +    // default 1 s, +, +, +, +    protected Channel monitoredChannel = null;, +, +, +, +, +            this.lastTime.set(System.currentTimeMillis());, +                this.monitorFuture = this.executorService.submit(this);, +, +            resetAccounting(System.currentTimeMillis());, +            setMonitoredChannel(null);, +, +                resetAccounting(endTime);, +, +     *, +            this.lastReadingBandwidth = this.lastReadingBytes / interval * 1000;, +            // nb byte / delay in ms * 1000 (1s), +            this.lastWritingBandwidth = this.lastWritingBytes / interval * 1000;, +            // nb byte / delay in ms * 1000 (1s), +     * Constructor with the executorService to use, the channel if any, its, +     * name, the limits in Byte/s (not Bit/s) and the delay between two, +     * computations in ms, +     *, +     * @param factory, +     *            the associated PerformanceCounterFactory, +     * @param executorService, +     *            Should be a CachedThreadPool for efficiency, +     * @param channel, +     *            Not null means this monitors will be for this channel only,, +     *            else it will be for global monitoring. Channel can be set, +     *            later on therefore changing its behavior from global to per, +     *            channel, +     * @param name, +     *            the name given to this monitor, +     * @param writeLimit, +     *            the write limit in Byte/s, +     * @param readLimit, +     *            the read limit in Byte/s, +     * @param delay, +     *            the delay in ms between two computations, +    public PerformanceCounter(PerformanceCounterFactory factory,, +            ExecutorService executorService, Channel channel, String name,, +, +     *, +     * @param channel, +     *            Not null means this monitors will be for this channel only,, +     *            else it will be for global monitoring. Channel can be set, +     *            later on therefore changing its behavior from global to per, +     *            channel, +, +     *, +     * @param channel, +     *            Not null means this monitors will be for this channel only,, +     *            else it will be for global monitoring. Channel can be set, +     *            later on therefore changing its behavior from global to per, +     *            channel, +    public void changeConfiguration(Channel channel, long writeLimit,, +            long readLimit) {, +        setMonitoredChannel(channel);, +, +     * Specifies limits in Byte/s (not Bit/s) and the specified delay between, +     * two computations in ms, +     *, +     * @param channel, +     *            Not null means this monitors will be for this channel only,, +     *            else it will be for global monitoring. Channel can be set, +     *            later on therefore changing its behavior from global to per, +     *            channel, +    public void changeConfiguration(Channel channel, long writeLimit,, +            long readLimit, long delayToSet) {, +            stopMonitoring();, +                startMonitoring();, +                this.lastTime.set(System.currentTimeMillis());, +, +     * @return the time that should be necessary to wait to respect limit. Can, +     *         be negative time, +            long wait = this.currentReadingBytes.get() * 1000 / this.limitRead -, +                    interval;]