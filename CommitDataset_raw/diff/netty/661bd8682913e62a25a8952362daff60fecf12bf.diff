[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/CompositeBufferGatheringWriteTest.java, +import io.netty.channel.ChannelFutureListener;, +import java.io.IOException;, +            final AtomicReference<Object> clientReceived = new AtomicReference<Object>();, +                        public void channelActive(ChannelHandlerContext ctx) throws Exception {, +                            ctx.writeAndFlush(newCompositeBuffer(ctx.alloc())), +                                    .addListener(ChannelFutureListener.CLOSE);, +, +                        @Override, +                        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +                            // IOException is fine as it will also close the channel and may just be a connection reset., +                            if (!(cause instanceof IOException)) {, +                                clientReceived.set(cause);, +                                latch.countDown();, +                            }, +                        }, +, +                        @Override, +                        public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +                            if (clientReceived.compareAndSet(null, aggregator)) {, +                                try {, +                                    assertEquals(EXPECTED_BYTES, aggregator.readableBytes());, +                                } catch (Throwable cause) {, +                                    aggregator.release();, +                                    aggregator = null;, +                                    clientReceived.set(cause);, +                                } finally {, +                                    latch.countDown();, +                                }, +                            }, +                        }, +            Object received = clientReceived.get();, +            if (received instanceof ByteBuf) {, +                ByteBuf actual = (ByteBuf) received;, +            } else {, +                expected.release();, +                throw (Throwable) received;, +            }]