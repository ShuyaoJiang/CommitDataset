[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRecord;, +     * Sends a DNS query with the specified question with additional records., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            DnsQuestion question, Iterable<DnsRecord> additional) {, +        return query(nextNameServerAddress(), question, additional);, +    }, +, +    /**, +        return query(nextNameServerAddress(), question, Collections.<DnsRecord>emptyList(), promise);, +        return query0(nameServerAddr, question, Collections.<DnsRecord>emptyList(),, +                ch.eventLoop().<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>>newPromise());, +    }, +, +    /**, +     * Sends a DNS query with the specified question with additional records using the specified name server list., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            InetSocketAddress nameServerAddr, DnsQuestion question, Iterable<DnsRecord> additional) {, +, +        return query0(nameServerAddr, question, additional,, +        return query0(nameServerAddr, question, Collections.<DnsRecord>emptyList(), promise);, +    }, +, +    /**, +     * Sends a DNS query with the specified question with additional records using the specified name server list., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            InetSocketAddress nameServerAddr, DnsQuestion question,, +            Iterable<DnsRecord> additional,, +            Promise<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>> promise) {, +, +        return query0(nameServerAddr, question, additional, promise);, +            Iterable<DnsRecord> additional,, +        final Promise<AddressedEnvelope<DnsResponse, InetSocketAddress>> castPromise = cast(, +                checkNotNull(promise, "promise"));, +            new DnsQueryContext(this, nameServerAddr, question, additional, castPromise).query();, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRecord;, +     * Sends a DNS query with the specified question with additional records., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            DnsQuestion question, Iterable<DnsRecord> additional) {, +        return query(nextNameServerAddress(), question, additional);, +    }, +, +    /**, +        return query(nextNameServerAddress(), question, Collections.<DnsRecord>emptyList(), promise);, +        return query0(nameServerAddr, question, Collections.<DnsRecord>emptyList(),, +                ch.eventLoop().<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>>newPromise());, +    }, +, +    /**, +     * Sends a DNS query with the specified question with additional records using the specified name server list., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            InetSocketAddress nameServerAddr, DnsQuestion question, Iterable<DnsRecord> additional) {, +, +        return query0(nameServerAddr, question, additional,, +        return query0(nameServerAddr, question, Collections.<DnsRecord>emptyList(), promise);, +    }, +, +    /**, +     * Sends a DNS query with the specified question with additional records using the specified name server list., +     */, +    public Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query(, +            InetSocketAddress nameServerAddr, DnsQuestion question,, +            Iterable<DnsRecord> additional,, +            Promise<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>> promise) {, +, +        return query0(nameServerAddr, question, additional, promise);, +            Iterable<DnsRecord> additional,, +        final Promise<AddressedEnvelope<DnsResponse, InetSocketAddress>> castPromise = cast(, +                checkNotNull(promise, "promise"));, +            new DnsQueryContext(this, nameServerAddr, question, additional, castPromise).query();, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContext.java, +import java.util.List;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +    private final Iterable<DnsRecord> additional;, +                    DnsQuestion question,, +                    Iterable<DnsRecord> additional,, +                    Promise<AddressedEnvelope<DnsResponse, InetSocketAddress>> promise) {, +        this.parent = checkNotNull(parent, "parent");, +        this.nameServerAddr = checkNotNull(nameServerAddr, "nameServerAddr");, +        this.question = checkNotNull(question, "question");, +        this.additional = checkNotNull(additional, "additional");, +        this.promise = checkNotNull(promise, "promise");, +, +, +        query.addRecord(DnsSection.QUESTION, question);, +, +        for (DnsRecord record:additional) {, +            query.addRecord(DnsSection.ADDITIONAL, record);, +        }, +            query.addRecord(DnsSection.ADDITIONAL, optResource);]