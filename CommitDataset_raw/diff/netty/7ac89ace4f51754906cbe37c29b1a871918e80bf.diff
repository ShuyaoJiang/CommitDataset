[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.spdy;, +, +import java.util.Comparator;, +import java.util.Map;, +import java.util.Set;, +import java.util.TreeSet;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.atomic.AtomicInteger;, +, +final class SpdySession {, +, +    private final Map<Integer, StreamState> activeStreams =, +        new ConcurrentHashMap<Integer, StreamState>();, +, +    SpdySession() {, +    }, +, +    public int numActiveStreams() {, +        return activeStreams.size();, +    }, +, +    public boolean noActiveStreams() {, +        return activeStreams.isEmpty();, +    }, +, +    public boolean isActiveStream(int streamID) {, +        return activeStreams.containsKey(new Integer(streamID));, +    }, +, +    // Stream-IDs should be iterated in priority order, +    public Set<Integer> getActiveStreams() {, +        TreeSet<Integer> StreamIDs = new TreeSet<Integer>(new PriorityComparator());, +        StreamIDs.addAll(activeStreams.keySet());, +        return StreamIDs;, +    }, +, +    public void acceptStream(, +            int streamID, byte priority, boolean remoteSideClosed, boolean localSideClosed,, +            int sendWindowSize, int receiveWindowSize) {, +        if (!remoteSideClosed || !localSideClosed) {, +            activeStreams.put(, +                    new Integer(streamID),, +                    new StreamState(priority, remoteSideClosed, localSideClosed, sendWindowSize, receiveWindowSize));, +        }, +    }, +, +    public boolean removeStream(int streamID) {, +        Integer StreamID = new Integer(streamID);, +        StreamState state = activeStreams.get(StreamID);, +        activeStreams.remove(StreamID);, +        if (state != null) {, +            return state.clearPendingWrites();, +        } else {, +            return false;, +        }, +    }, +, +    public boolean isRemoteSideClosed(int streamID) {, +        StreamState state = activeStreams.get(new Integer(streamID));, +        return state == null || state.isRemoteSideClosed();, +    }, +, +    public void closeRemoteSide(int streamID) {, +        Integer StreamID = new Integer(streamID);, +        StreamState state = activeStreams.get(StreamID);, +        if (state != null) {, +            state.closeRemoteSide();, +            if (state.isLocalSideClosed()) {, +                activeStreams.remove(StreamID);, +            }, +        }, +    }, +, +    public boolean isLocalSideClosed(int streamID) {, +        StreamState state = activeStreams.get(new Integer(streamID));, +        return state == null || state.isLocalSideClosed();, +    }, +, +    public void closeLocalSide(int streamID) {, +        Integer StreamID = new Integer(streamID);, +        StreamState state = activeStreams.get(StreamID);, +        if (state != null) {, +            state.closeLocalSide();]