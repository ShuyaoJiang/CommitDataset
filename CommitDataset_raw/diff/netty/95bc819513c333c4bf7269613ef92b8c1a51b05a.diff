[+++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    private final HttpHeaders outboundHeaders;, +    private HttpHeaders inboundHeaders;, +        this.outboundHeaders = headers;, +        this.outboundHeaders = headers;, +        if (outboundHeaders != null) {, +            req.headers().add(outboundHeaders);, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws HttpProxyConnectException {, +                throw new HttpProxyConnectException(exceptionMessage("too many responses"), /*headers=*/ null);, +            HttpResponse res = (HttpResponse) response;, +            status = res.status();, +            inboundHeaders = res.headers();, +                throw new HttpProxyConnectException(exceptionMessage("missing response"), inboundHeaders);, +                throw new HttpProxyConnectException(exceptionMessage("status: " + status), inboundHeaders);, +, +    /**, +     * Specific case of a connection failure, which may include headers from the proxy., +     */, +    public static final class HttpProxyConnectException extends ProxyConnectException {, +        private static final long serialVersionUID = -8824334609292146066L;, +, +        private final HttpHeaders headers;, +, +        /**, +         * @param message The failure message., +         * @param headers Header associated with the connection failure.  May be {@code null}., +         */, +        public HttpProxyConnectException(String message, HttpHeaders headers) {, +            super(message);, +            this.headers = headers;, +        }, +, +        /**, +         * Returns headers, if any.  May be {@code null}., +         */, +        public HttpHeaders headers() {, +            return headers;, +        }, +    }, +++ b/handler-proxy/src/main/java/io/netty/handler/proxy/HttpProxyHandler.java, +    private final HttpHeaders outboundHeaders;, +    private HttpHeaders inboundHeaders;, +        this.outboundHeaders = headers;, +        this.outboundHeaders = headers;, +        if (outboundHeaders != null) {, +            req.headers().add(outboundHeaders);, +    protected boolean handleResponse(ChannelHandlerContext ctx, Object response) throws HttpProxyConnectException {, +                throw new HttpProxyConnectException(exceptionMessage("too many responses"), /*headers=*/ null);, +            HttpResponse res = (HttpResponse) response;, +            status = res.status();, +            inboundHeaders = res.headers();, +                throw new HttpProxyConnectException(exceptionMessage("missing response"), inboundHeaders);, +                throw new HttpProxyConnectException(exceptionMessage("status: " + status), inboundHeaders);, +, +    /**, +     * Specific case of a connection failure, which may include headers from the proxy., +     */, +    public static final class HttpProxyConnectException extends ProxyConnectException {, +        private static final long serialVersionUID = -8824334609292146066L;, +, +        private final HttpHeaders headers;, +, +        /**, +         * @param message The failure message., +         * @param headers Header associated with the connection failure.  May be {@code null}., +         */, +        public HttpProxyConnectException(String message, HttpHeaders headers) {, +            super(message);, +            this.headers = headers;, +        }, +, +        /**, +         * Returns headers, if any.  May be {@code null}., +         */, +        public HttpHeaders headers() {, +            return headers;, +        }, +    }, +++ b/handler-proxy/src/test/java/io/netty/handler/proxy/HttpProxyHandlerTest.java, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.DefaultEventLoopGroup;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.local.LocalAddress;, +import io.netty.channel.local.LocalChannel;, +import io.netty.channel.local.LocalServerChannel;, +import io.netty.handler.codec.http.DefaultFullHttpResponse;, +import io.netty.handler.codec.http.HttpResponseEncoder;, +import io.netty.handler.codec.http.HttpResponseStatus;, +import io.netty.handler.proxy.HttpProxyHandler.HttpProxyConnectException;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.junit.Assert.*;, +    @Test, +    public void testExceptionDuringConnect() throws Exception {, +        EventLoopGroup group = null;, +        Channel serverChannel = null;]