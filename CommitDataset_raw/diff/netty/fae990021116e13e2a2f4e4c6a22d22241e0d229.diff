[+++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to., + *, +    /**, +     * Creates a new instance with the specified URI., +     */, +    /**, +     * Returns the {@link URI} where {@link HttpTunnelingServlet} is bound., +     */, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to., + *, +    /**, +     * Creates a new instance with the specified URI., +     */, +    /**, +     * Returns the {@link URI} where {@link HttpTunnelingServlet} is bound., +     */, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingChannelHandler.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that proxies received messages to the, + * {@link OutputStream} of the {@link HttpTunnelingServlet}., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to., + *, +    /**, +     * Creates a new instance with the specified URI., +     */, +    /**, +     * Returns the {@link URI} where {@link HttpTunnelingServlet} is bound., +     */, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingChannelHandler.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that proxies received messages to the, + * {@link OutputStream} of the {@link HttpTunnelingServlet}., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannelFactory.java, + * A {@link ClientSocketChannelFactory} that creates a {@link SocketChannel}, + * which connects to an {@link HttpTunnelingServlet} to communicate with the, + * server application behind the {@link HttpTunnelingServlet}., + *, +        clientSocketChannelFactory.releaseExternalResources();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to., + *, +    /**, +     * Creates a new instance with the specified URI., +     */, +    /**, +     * Returns the {@link URI} where {@link HttpTunnelingServlet} is bound., +     */, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingChannelHandler.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that proxies received messages to the, + * {@link OutputStream} of the {@link HttpTunnelingServlet}., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannelFactory.java, + * A {@link ClientSocketChannelFactory} that creates a {@link SocketChannel}, + * which connects to an {@link HttpTunnelingServlet} to communicate with the, + * server application behind the {@link HttpTunnelingServlet}., + *, +        clientSocketChannelFactory.releaseExternalResources();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingContextListener.java, +import org.jboss.netty.channel.local.LocalClientChannelFactory;, + * A {@link ServletContextListener} that creates a {@link ClientBootstrap}, + * using a {@link LocalClientChannelFactory}. The factory should be registered, + * before this context is loaded., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to., + *, +    /**, +     * Creates a new instance with the specified URI., +     */, +    /**, +     * Returns the {@link URI} where {@link HttpTunnelingServlet} is bound., +     */, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingChannelHandler.java, +import org.jboss.netty.channel.ChannelHandler;, + * A {@link ChannelHandler} that proxies received messages to the, + * {@link OutputStream} of the {@link HttpTunnelingServlet}., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannelFactory.java, + * A {@link ClientSocketChannelFactory} that creates a {@link SocketChannel}, + * which connects to an {@link HttpTunnelingServlet} to communicate with the, + * server application behind the {@link HttpTunnelingServlet}., + *, +        clientSocketChannelFactory.releaseExternalResources();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingContextListener.java, +import org.jboss.netty.channel.local.LocalClientChannelFactory;, + * A {@link ServletContextListener} that creates a {@link ClientBootstrap}, + * using a {@link LocalClientChannelFactory}. The factory should be registered, + * before this context is loaded., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingServlet.java, + * An {@link HttpServlet} that proxies an incoming data to the actual server, + * and vice versa., +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelAddress.java, + * Represents the URI of {@link HttpTunnelingServlet} where, + * {@link HttpTunnelingClientSocketChannelFactory} connects to.]