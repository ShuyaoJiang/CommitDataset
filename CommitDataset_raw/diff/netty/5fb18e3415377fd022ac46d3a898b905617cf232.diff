[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +    private static final Http2Error[] INT_TO_ENUM_MAP;, +    static {, +        Http2Error[] errors = Http2Error.values();, +        Http2Error[] map = new Http2Error[errors.length];, +        for (int i = 0; i < errors.length; ++i) {, +            Http2Error error = errors[i];, +            map[(int) error.code()] = error;, +        }, +        INT_TO_ENUM_MAP = map;, +    }, +, +    public static Http2Error valueOf(long value) {, +        return value >= INT_TO_ENUM_MAP.length || value < 0 ? null : INT_TO_ENUM_MAP[(int) value];, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +    private static final Http2Error[] INT_TO_ENUM_MAP;, +    static {, +        Http2Error[] errors = Http2Error.values();, +        Http2Error[] map = new Http2Error[errors.length];, +        for (int i = 0; i < errors.length; ++i) {, +            Http2Error error = errors[i];, +            map[(int) error.code()] = error;, +        }, +        INT_TO_ENUM_MAP = map;, +    }, +, +    public static Http2Error valueOf(long value) {, +        return value >= INT_TO_ENUM_MAP.length || value < 0 ? null : INT_TO_ENUM_MAP[(int) value];, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpConversionUtil.java, +        try {, +        } catch (Http2Exception e) {, +            msg.release();, +            throw e;, +        } catch (Throwable t) {, +            msg.release();, +            throw streamError(streamId, PROTOCOL_ERROR, t, "HTTP/2 to HTTP/1.x headers conversion error");, +        }, +        try {, +        } catch (Http2Exception e) {, +            msg.release();, +            throw e;, +        } catch (Throwable t) {, +            msg.release();, +            throw streamError(streamId, PROTOCOL_ERROR, t, "HTTP/2 to HTTP/1.x headers conversion error");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +    private static final Http2Error[] INT_TO_ENUM_MAP;, +    static {, +        Http2Error[] errors = Http2Error.values();, +        Http2Error[] map = new Http2Error[errors.length];, +        for (int i = 0; i < errors.length; ++i) {, +            Http2Error error = errors[i];, +            map[(int) error.code()] = error;, +        }, +        INT_TO_ENUM_MAP = map;, +    }, +, +    public static Http2Error valueOf(long value) {, +        return value >= INT_TO_ENUM_MAP.length || value < 0 ? null : INT_TO_ENUM_MAP[(int) value];, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpConversionUtil.java, +        try {, +        } catch (Http2Exception e) {, +            msg.release();, +            throw e;, +        } catch (Throwable t) {, +            msg.release();, +            throw streamError(streamId, PROTOCOL_ERROR, t, "HTTP/2 to HTTP/1.x headers conversion error");, +        }, +        try {, +        } catch (Http2Exception e) {, +            msg.release();, +            throw e;, +        } catch (Throwable t) {, +            msg.release();, +            throw streamError(streamId, PROTOCOL_ERROR, t, "HTTP/2 to HTTP/1.x headers conversion error");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapter.java, +    private final ImmediateSendDetector sendDetector;, +    private final Http2Connection.PropertyKey messageKey;, +    private final boolean propagateSettings;, +        messageKey = connection.newKey();, +     * The stream is out of scope for the HTTP message flow and will no longer be tracked, +     * @param stream The stream to remove associated state with, +     * @param release {@code true} to call release on the value if it is present. {@code false} to not call release., +    protected final void removeMessage(Http2Stream stream, boolean release) {, +        FullHttpMessage msg = stream.removeProperty(messageKey);, +        if (release && msg != null) {, +            msg.release();, +        }, +    }, +, +    /**, +     * Get the {@link FullHttpMessage} associated with {@code stream}., +     * @param stream The stream to get the associated state from, +     * @return The {@link FullHttpMessage} associated with {@code stream}., +     */, +    protected final FullHttpMessage getMessage(Http2Stream stream) {]