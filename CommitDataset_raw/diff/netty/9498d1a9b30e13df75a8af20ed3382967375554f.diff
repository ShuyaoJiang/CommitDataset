[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, + *, + * @deprecated Use {@link SslContextBuilder} to create {@link JdkSslContext} instances and only, + * use {@link JdkSslContext} in your code., +@Deprecated, +        super(newSSLContext(toX509CertificatesInternal(, +                trustCertCollectionFile), trustManagerFactory,, +                toX509CertificatesInternal(keyCertChainFile), toPrivateKeyInternal(keyFile, keyPassword),, +                keyPassword, keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, apn, ClientAuth.NONE);, +        super(newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +                keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, + *, + * @deprecated Use {@link SslContextBuilder} to create {@link JdkSslContext} instances and only, + * use {@link JdkSslContext} in your code., +@Deprecated, +        super(newSSLContext(toX509CertificatesInternal(, +                trustCertCollectionFile), trustManagerFactory,, +                toX509CertificatesInternal(keyCertChainFile), toPrivateKeyInternal(keyFile, keyPassword),, +                keyPassword, keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, apn, ClientAuth.NONE);, +        super(newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +                keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +public class JdkSslContext extends SslContext {, +    private final SSLContext sslContext;, +    private final boolean isClient;, +    /**, +     * Creates a new {@link JdkSslContext} from a pre-configured {@link SSLContext}., +     *, +     * @param sslContext the {@link SSLContext} to use., +     * @param isClient {@code true} if this context should create {@link SSLEngine}s for client-side usage., +     * @param clientAuth the {@link ClientAuth} to use. This will only be used when {@param isClient} is {@code false}., +     */, +    public JdkSslContext(SSLContext sslContext, boolean isClient,, +        this(sslContext, isClient, null, IdentityCipherSuiteFilter.INSTANCE,, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth);, +    }, +, +    /**, +     * Creates a new {@link JdkSslContext} from a pre-configured {@link SSLContext}., +     *, +     * @param sslContext the {@link SSLContext} to use., +     * @param isClient {@code true} if this context should create {@link SSLEngine}s for client-side usage., +     * @param ciphers the ciphers to use or {@code null} if the standart should be used., +     * @param cipherFilter the filter to use., +     * @param apn the {@link ApplicationProtocolConfig} to use., +     * @param clientAuth the {@link ClientAuth} to use. This will only be used when {@param isClient} is {@code false}., +     */, +    public JdkSslContext(SSLContext sslContext, boolean isClient, Iterable<String> ciphers,, +                         CipherSuiteFilter cipherFilter, ApplicationProtocolConfig apn,, +                         ClientAuth clientAuth) {, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth);, +    }, +, +    JdkSslContext(SSLContext sslContext, boolean isClient, Iterable<String> ciphers, CipherSuiteFilter cipherFilter,, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth) {, +        this.sslContext = checkNotNull(sslContext, "sslContext");, +        this.isClient = isClient;, +    public final SSLContext context() {, +        return sslContext;, +    }, +, +    @Override, +    public final boolean isClient() {, +        return isClient;, +    }, +    public final JdkApplicationProtocolNegotiator applicationProtocolNegotiator() {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, + *, + * @deprecated Use {@link SslContextBuilder} to create {@link JdkSslContext} instances and only, + * use {@link JdkSslContext} in your code., +@Deprecated, +        super(newSSLContext(toX509CertificatesInternal(, +                trustCertCollectionFile), trustManagerFactory,, +                toX509CertificatesInternal(keyCertChainFile), toPrivateKeyInternal(keyFile, keyPassword),, +                keyPassword, keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, apn, ClientAuth.NONE);, +        super(newSSLContext(trustCertCollection, trustManagerFactory, keyCertChain, key, keyPassword,, +                keyManagerFactory, sessionCacheSize, sessionTimeout), true,, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +public class JdkSslContext extends SslContext {, +    private final SSLContext sslContext;, +    private final boolean isClient;, +    /**, +     * Creates a new {@link JdkSslContext} from a pre-configured {@link SSLContext}., +     *, +     * @param sslContext the {@link SSLContext} to use., +     * @param isClient {@code true} if this context should create {@link SSLEngine}s for client-side usage., +     * @param clientAuth the {@link ClientAuth} to use. This will only be used when {@param isClient} is {@code false}., +     */, +    public JdkSslContext(SSLContext sslContext, boolean isClient,, +        this(sslContext, isClient, null, IdentityCipherSuiteFilter.INSTANCE,, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth);, +    }, +]