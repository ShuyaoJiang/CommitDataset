[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMethod.java, +import java.util.HashMap;, +import java.util.Map;, +, +public class HttpMethod implements Comparable<HttpMethod> {, +    public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");, +    public static final HttpMethod GET = new HttpMethod("GET");, +    public static final HttpMethod HEAD = new HttpMethod("HEAD");, +    public static final HttpMethod POST = new HttpMethod("POST");, +    public static final HttpMethod PUT = new HttpMethod("PUT");, +    public static final HttpMethod DELETE = new HttpMethod("DELETE");, +    public static final HttpMethod TRACE = new HttpMethod("TRACE");, +    public static final HttpMethod CONNECT = new HttpMethod("CONNECT");, +, +    private static final Map<String, HttpMethod> methodMap =, +            new HashMap<String, HttpMethod>();, +, +    static {, +        methodMap.put(OPTIONS.toString(), OPTIONS);, +        methodMap.put(GET.toString(), GET);, +        methodMap.put(HEAD.toString(), HEAD);, +        methodMap.put(POST.toString(), POST);, +        methodMap.put(PUT.toString(), PUT);, +        methodMap.put(DELETE.toString(), DELETE);, +        methodMap.put(TRACE.toString(), TRACE);, +        methodMap.put(CONNECT.toString(), CONNECT);, +    }, +, +    public static HttpMethod valueOf(String method) {, +        if (method == null) {, +            throw new NullPointerException("method");, +        }, +        method = method.trim().toUpperCase();, +, +        HttpMethod result = methodMap.get(method);, +        if (result != null) {, +            return result;, +        } else {, +            return new HttpMethod(method);, +        }, +    }, +    public HttpMethod(String method) {, +        if (method == null) {, +            throw new NullPointerException("method");, +        }, +        method = method.trim().toUpperCase();, +, +        if (method.length() == 0) {, +            throw new IllegalArgumentException("empty method");, +        }, +, +    @Override, +    public int hashCode() {, +        return method.hashCode();, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (!(o instanceof HttpMethod)) {, +            return false;, +        }, +, +        HttpMethod that = (HttpMethod) o;, +        return method.equals(that.method);, +    }, +, +    @Override, +    public String toString() {, +, +    public int compareTo(HttpMethod o) {, +        return method.compareTo(o.method);, +    }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMethod.java, +import java.util.HashMap;, +import java.util.Map;, +, +public class HttpMethod implements Comparable<HttpMethod> {, +    public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");, +    public static final HttpMethod GET = new HttpMethod("GET");, +    public static final HttpMethod HEAD = new HttpMethod("HEAD");, +    public static final HttpMethod POST = new HttpMethod("POST");, +    public static final HttpMethod PUT = new HttpMethod("PUT");, +    public static final HttpMethod DELETE = new HttpMethod("DELETE");, +    public static final HttpMethod TRACE = new HttpMethod("TRACE");, +    public static final HttpMethod CONNECT = new HttpMethod("CONNECT");, +, +    private static final Map<String, HttpMethod> methodMap =, +            new HashMap<String, HttpMethod>();, +, +    static {, +        methodMap.put(OPTIONS.toString(), OPTIONS);, +        methodMap.put(GET.toString(), GET);, +        methodMap.put(HEAD.toString(), HEAD);, +        methodMap.put(POST.toString(), POST);, +        methodMap.put(PUT.toString(), PUT);, +        methodMap.put(DELETE.toString(), DELETE);, +        methodMap.put(TRACE.toString(), TRACE);, +        methodMap.put(CONNECT.toString(), CONNECT);, +    }, +]