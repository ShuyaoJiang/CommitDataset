[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpToHttp2ConnectionHandler.java, +import io.netty.handler.codec.http.EmptyHttpHeaders;, +                writeHeaders(ctx, encoder, currentStreamId, httpMsg.headers(), http2Headers,, +                        endStream, promiseAggregator);, +                HttpHeaders trailers = EmptyHttpHeaders.INSTANCE;, +                Http2Headers http2Trailers = EmptyHttp2Headers.INSTANCE;, +                    trailers = lastContent.trailingHeaders();, +                    http2Trailers = HttpConversionUtil.toHttp2Headers(trailers, validateHeaders);, +                    writeHeaders(ctx, encoder, currentStreamId, trailers, http2Trailers, true, promiseAggregator);, +, +    private static void writeHeaders(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder, int streamId,, +                                     HttpHeaders headers, Http2Headers http2Headers, boolean endStream,, +                                     SimpleChannelPromiseAggregator promiseAggregator) {, +        int dependencyId = headers.getInt(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(), 0);, +        short weight = headers.getShort(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT);, +        encoder.writeHeaders(ctx, streamId, http2Headers, dependencyId, weight, false,, +                0, endStream, promiseAggregator.newPromise());, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpToHttp2ConnectionHandler.java, +import io.netty.handler.codec.http.EmptyHttpHeaders;, +                writeHeaders(ctx, encoder, currentStreamId, httpMsg.headers(), http2Headers,, +                        endStream, promiseAggregator);, +                HttpHeaders trailers = EmptyHttpHeaders.INSTANCE;, +                Http2Headers http2Trailers = EmptyHttp2Headers.INSTANCE;, +                    trailers = lastContent.trailingHeaders();, +                    http2Trailers = HttpConversionUtil.toHttp2Headers(trailers, validateHeaders);, +                    writeHeaders(ctx, encoder, currentStreamId, trailers, http2Trailers, true, promiseAggregator);, +, +    private static void writeHeaders(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder, int streamId,, +                                     HttpHeaders headers, Http2Headers http2Headers, boolean endStream,, +                                     SimpleChannelPromiseAggregator promiseAggregator) {, +        int dependencyId = headers.getInt(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(), 0);, +        short weight = headers.getShort(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT);, +        encoder.writeHeaders(ctx, streamId, http2Headers, dependencyId, weight, false,, +                0, endStream, promiseAggregator.newPromise());, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapter.java, +            // Add headers for dependency and weight., +            // See https://github.com/netty/netty/issues/5866, +            if (streamDependency != Http2CodecUtil.CONNECTION_STREAM_ID) {, +                msg.headers().setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(),, +                        streamDependency);, +            }, +            msg.headers().setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), weight);, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpToHttp2ConnectionHandler.java, +import io.netty.handler.codec.http.EmptyHttpHeaders;, +                writeHeaders(ctx, encoder, currentStreamId, httpMsg.headers(), http2Headers,, +                        endStream, promiseAggregator);, +                HttpHeaders trailers = EmptyHttpHeaders.INSTANCE;, +                Http2Headers http2Trailers = EmptyHttp2Headers.INSTANCE;, +                    trailers = lastContent.trailingHeaders();, +                    http2Trailers = HttpConversionUtil.toHttp2Headers(trailers, validateHeaders);, +                    writeHeaders(ctx, encoder, currentStreamId, trailers, http2Trailers, true, promiseAggregator);, +, +    private static void writeHeaders(ChannelHandlerContext ctx, Http2ConnectionEncoder encoder, int streamId,, +                                     HttpHeaders headers, Http2Headers http2Headers, boolean endStream,, +                                     SimpleChannelPromiseAggregator promiseAggregator) {, +        int dependencyId = headers.getInt(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(), 0);, +        short weight = headers.getShort(, +                HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT);, +        encoder.writeHeaders(ctx, streamId, http2Headers, dependencyId, weight, false,, +                0, endStream, promiseAggregator.newPromise());, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapter.java, +            // Add headers for dependency and weight., +            // See https://github.com/netty/netty/issues/5866, +            if (streamDependency != Http2CodecUtil.CONNECTION_STREAM_ID) {, +                msg.headers().setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(),, +                        streamDependency);, +            }, +            msg.headers().setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), weight);, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders2.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 123);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders2.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders3.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 222);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +        httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +, +            httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(), (short) 16);, +]