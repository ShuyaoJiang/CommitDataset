[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +, +                    // As the inbound and the outbound is done we can shutdown the engine now., +                    shutdown();, +            if (isOutboundDone()) {, +                return isInboundDone() || isDestroyed() ? CLOSED_NOT_HANDSHAKING : NEED_UNWRAP_CLOSED;, +            if (isInboundDone()) {, +                return isOutboundDone() || isDestroyed() ? CLOSED_NOT_HANDSHAKING : NEED_WRAP_CLOSED;, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +, +                    // As the inbound and the outbound is done we can shutdown the engine now., +                    shutdown();, +            if (isOutboundDone()) {, +                return isInboundDone() || isDestroyed() ? CLOSED_NOT_HANDSHAKING : NEED_UNWRAP_CLOSED;, +            if (isInboundDone()) {, +                return isOutboundDone() || isDestroyed() ? CLOSED_NOT_HANDSHAKING : NEED_WRAP_CLOSED;, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +, +            // Ensure that calling wrap or unwrap again will not produce a SSLException, +            encryptedServerToClient.clear();, +            plainServerOut.clear();, +, +            result = server.wrap(plainServerOut, encryptedServerToClient);, +            assertEngineRemainsClosed(result);, +, +            encryptedClientToServer.clear();, +            plainServerOut.clear();, +, +            result = server.unwrap(encryptedClientToServer, plainServerOut);, +            assertEngineRemainsClosed(result);, +, +            encryptedClientToServer.clear();, +            plainClientOut.clear();, +, +            result = client.wrap(plainClientOut, encryptedClientToServer);, +            assertEngineRemainsClosed(result);, +, +            encryptedServerToClient.clear();, +            plainClientOut.clear();, +, +            result = client.unwrap(encryptedServerToClient, plainClientOut);, +            assertEngineRemainsClosed(result);, +    private static void assertEngineRemainsClosed(SSLEngineResult result) {, +        assertEquals(SSLEngineResult.Status.CLOSED, result.getStatus());, +        assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING, result.getHandshakeStatus());, +        assertEquals(0, result.bytesConsumed());, +        assertEquals(0, result.bytesProduced());, +    }, +]