[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.ChannelPromise;, +    private final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;, +     * @param dnsQueryLifecycleObserverFactory used to generate new instances of {@link DnsQueryLifecycleObserver} which, +     *                                         can be used to track metrics for DNS servers., +            DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory,, +        this.dnsQueryLifecycleObserverFactory =, +                checkNotNull(dnsQueryLifecycleObserverFactory, "dnsQueryLifecycleObserverFactory");, +    final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory() {, +        return dnsQueryLifecycleObserverFactory;, +    }, +, +    /**, +     * Provides the opportunity to sort the name servers before following a redirected DNS query., +     * @param nameServers The addresses of the DNS servers which are used in the event of a redirect., +     * @return A {@link DnsServerAddressStream} which will be used to follow the DNS redirect., +     */, +    protected DnsServerAddressStream uncachedRedirectDnsServerStream(List<InetSocketAddress> nameServers) {, +        return DnsServerAddresses.sequential(nameServers).stream();, +    }, +, +    final Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query0(, +        return query0(nameServerAddr, question, additionals, ch.newPromise(), promise);, +    }, +, +    final Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query0(, +            InetSocketAddress nameServerAddr, DnsQuestion question,, +            DnsRecord[] additionals,, +            ChannelPromise writePromise,, +            Promise<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>> promise) {, +        assert !writePromise.isVoid();, +            new DnsQueryContext(this, nameServerAddr, question, additionals, castPromise).query(writePromise);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.ChannelPromise;, +    private final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;, +     * @param dnsQueryLifecycleObserverFactory used to generate new instances of {@link DnsQueryLifecycleObserver} which, +     *                                         can be used to track metrics for DNS servers., +            DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory,, +        this.dnsQueryLifecycleObserverFactory =, +                checkNotNull(dnsQueryLifecycleObserverFactory, "dnsQueryLifecycleObserverFactory");, +    final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory() {, +        return dnsQueryLifecycleObserverFactory;, +    }, +, +    /**, +     * Provides the opportunity to sort the name servers before following a redirected DNS query., +     * @param nameServers The addresses of the DNS servers which are used in the event of a redirect., +     * @return A {@link DnsServerAddressStream} which will be used to follow the DNS redirect., +     */, +    protected DnsServerAddressStream uncachedRedirectDnsServerStream(List<InetSocketAddress> nameServers) {, +        return DnsServerAddresses.sequential(nameServers).stream();, +    }, +, +    final Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query0(, +        return query0(nameServerAddr, question, additionals, ch.newPromise(), promise);, +    }, +, +    final Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> query0(, +            InetSocketAddress nameServerAddr, DnsQuestion question,, +            DnsRecord[] additionals,, +            ChannelPromise writePromise,, +            Promise<AddressedEnvelope<? extends DnsResponse, InetSocketAddress>> promise) {, +        assert !writePromise.isVoid();, +            new DnsQueryContext(this, nameServerAddr, question, additionals, castPromise).query(writePromise);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +    private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =, +            NoopDnsQueryLifecycleObserverFactory.INSTANCE;, +     * Set the factory used to generate objects which can observe individual DNS queries., +     * @param lifecycleObserverFactory the factory used to generate objects which can observe individual DNS queries., +     * @return {@code this}, +     */, +    public DnsNameResolverBuilder dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory, +                                                                           lifecycleObserverFactory) {, +        this.dnsQueryLifecycleObserverFactory = checkNotNull(lifecycleObserverFactory, "lifecycleObserverFactory");, +        return this;, +    }, +, +    /**, +                dnsQueryLifecycleObserverFactory,, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.ChannelPromise;, +    private final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;, +     * @param dnsQueryLifecycleObserverFactory used to generate new instances of {@link DnsQueryLifecycleObserver} which, +     *                                         can be used to track metrics for DNS servers., +            DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory,, +        this.dnsQueryLifecycleObserverFactory =, +                checkNotNull(dnsQueryLifecycleObserverFactory, "dnsQueryLifecycleObserverFactory");, +    final DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory() {, +        return dnsQueryLifecycleObserverFactory;, +    }, +, +    /**, +     * Provides the opportunity to sort the name servers before following a redirected DNS query., +     * @param nameServers The addresses of the DNS servers which are used in the event of a redirect., +     * @return A {@link DnsServerAddressStream} which will be used to follow the DNS redirect., +     */, +    protected DnsServerAddressStream uncachedRedirectDnsServerStream(List<InetSocketAddress> nameServers) {, +        return DnsServerAddresses.sequential(nameServers).stream();, +    }, +]