[+++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        // Check if both peer and parent are non-null because this channel was created by a LocalServerChannel., +        // This is needed as a peer may not be null also if a LocalChannel was connected before and, +        // deregistered / registered later again., +        //, +        // See https://github.com/netty/netty/issues/2400, +        if (peer != null && parent() != null) {, +        // Just remove the shutdownHook as this Channel may be closed later or registered to another EventLoop, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        // Check if both peer and parent are non-null because this channel was created by a LocalServerChannel., +        // This is needed as a peer may not be null also if a LocalChannel was connected before and, +        // deregistered / registered later again., +        //, +        // See https://github.com/netty/netty/issues/2400, +        if (peer != null && parent() != null) {, +        // Just remove the shutdownHook as this Channel may be closed later or registered to another EventLoop, +++ b/transport/src/test/java/io/netty/channel/local/LocalChannelTest.java, +    @Test, +    public void testReRegister() {, +        EventLoopGroup group1 = new LocalEventLoopGroup();, +        EventLoopGroup group2 = new LocalEventLoopGroup();, +        LocalAddress addr = new LocalAddress(LOCAL_ADDR_ID);, +        Bootstrap cb = new Bootstrap();, +        ServerBootstrap sb = new ServerBootstrap();, +, +        cb.group(group1), +                .channel(LocalChannel.class), +                .handler(new TestHandler());, +, +        sb.group(group2), +                .channel(LocalServerChannel.class), +                .childHandler(new ChannelInitializer<LocalChannel>() {, +                    @Override, +                    public void initChannel(LocalChannel ch) throws Exception {, +                        ch.pipeline().addLast(new TestHandler());, +                    }, +                });, +, +        // Start server, +        final Channel sc = sb.bind(addr).syncUninterruptibly().channel();, +, +        // Connect to the server, +        final Channel cc = cb.connect(addr).syncUninterruptibly().channel();, +, +        cc.deregister().syncUninterruptibly();, +        // Change event loop group., +        group2.register(cc).syncUninterruptibly();, +        cc.close().syncUninterruptibly();, +        sc.close().syncUninterruptibly();, +    }]