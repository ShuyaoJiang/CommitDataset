[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +     * Called once the {@link ChannelInboundHandler#channelActive(ChannelHandlerContext)}event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelActive() {, +    }, +, +    /**, +     * Called once the {@link ChannelInboundHandler#channelInactive(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelInactive() {, +    }, +, +    /**, +    /**, +     * Called once the {@link ChannelInboundHandler#channelReadComplete(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelReadComplete() {, +    }, +, +    /**, +     * Called once an user event hit the end of the {@link ChannelPipeline} without been handled by the user, +     * in {@link ChannelInboundHandler#userEventTriggered(ChannelHandlerContext, Object)}. This method is responsible, +     * to call {@link ReferenceCountUtil#release(Object)} on the given event at some point., +     */, +    protected void onUnhandledInboundUserEventTriggered(Object evt) {, +        // This may not be a configuration error and so don't log anything., +        // The event may be superfluous for the current pipeline configuration., +        ReferenceCountUtil.release(evt);, +    }, +, +    /**, +     * Called once the {@link ChannelInboundHandler#channelWritabilityChanged(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledChannelWritabilityChanged() {, +    }, +, +        public void channelActive(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledInboundChannelActive();, +        }, +        public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledInboundChannelInactive();, +        }, +        public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledChannelWritabilityChanged();, +        }, +            onUnhandledInboundUserEventTriggered(evt);, +        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledInboundChannelReadComplete();, +        }, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +     * Called once the {@link ChannelInboundHandler#channelActive(ChannelHandlerContext)}event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelActive() {, +    }, +, +    /**, +     * Called once the {@link ChannelInboundHandler#channelInactive(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelInactive() {, +    }, +, +    /**, +    /**, +     * Called once the {@link ChannelInboundHandler#channelReadComplete(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledInboundChannelReadComplete() {, +    }, +, +    /**, +     * Called once an user event hit the end of the {@link ChannelPipeline} without been handled by the user, +     * in {@link ChannelInboundHandler#userEventTriggered(ChannelHandlerContext, Object)}. This method is responsible, +     * to call {@link ReferenceCountUtil#release(Object)} on the given event at some point., +     */, +    protected void onUnhandledInboundUserEventTriggered(Object evt) {, +        // This may not be a configuration error and so don't log anything., +        // The event may be superfluous for the current pipeline configuration., +        ReferenceCountUtil.release(evt);, +    }, +, +    /**, +     * Called once the {@link ChannelInboundHandler#channelWritabilityChanged(ChannelHandlerContext)} event hit, +     * the end of the {@link ChannelPipeline}., +     */, +    protected void onUnhandledChannelWritabilityChanged() {, +    }, +, +        public void channelActive(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledInboundChannelActive();, +        }, +        public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +            onUnhandledInboundChannelInactive();, +        }, +        public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {]