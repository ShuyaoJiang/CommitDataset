[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerUpgradeCodec.java, +    private static final ChannelHandler[] EMPTY_HANDLERS = new ChannelHandler[0];, +    private final ChannelHandler[] handlers;, +    private Http2Settings settings;, +, +        this(null, connectionHandler, EMPTY_HANDLERS);, +        this(null, http2Codec, EMPTY_HANDLERS);, +        this(handlerName, connectionHandler, EMPTY_HANDLERS);, +        this(handlerName, http2Codec, EMPTY_HANDLERS);, +    public Http2ServerUpgradeCodec(Http2FrameCodec http2Codec, ChannelHandler... handlers) {, +        this(null, http2Codec, handlers);, +    private Http2ServerUpgradeCodec(String handlerName, Http2ConnectionHandler connectionHandler,, +            ChannelHandler... handlers) {, +        this.connectionHandler = connectionHandler;, +        this.handlers = handlers;, +            settings = decodeSettingsHeader(ctx, upgradeHeaders.get(0));, +        try {, +            ctx.pipeline().addAfter(ctx.name(), handlerName, connectionHandler);, +            connectionHandler.onHttpServerUpgrade(settings);, +, +        } catch (Http2Exception e) {, +            ctx.fireExceptionCaught(e);, +            ctx.close();, +            return;, +        }, +, +        if (handlers != null) {, +            final String name = ctx.pipeline().context(connectionHandler).name();, +            for (int i = handlers.length - 1; i >= 0; i--) {, +                ctx.pipeline().addAfter(name, null, handlers[i]);, +            }, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +        if (!prefaceSent()) {, +            // If the preface was not sent yet it most likely means the handler was not added to the pipeline before, +            // calling this method., +            throw connectionError(INTERNAL_ERROR, "HTTP upgrade must occur after preface was sent");, +        }, +        if (decoder.prefaceReceived()) {, +            throw connectionError(PROTOCOL_ERROR, "HTTP upgrade must occur before HTTP/2 preface is received");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerUpgradeCodec.java, +    private static final ChannelHandler[] EMPTY_HANDLERS = new ChannelHandler[0];, +    private final ChannelHandler[] handlers;, +    private Http2Settings settings;, +, +        this(null, connectionHandler, EMPTY_HANDLERS);, +        this(null, http2Codec, EMPTY_HANDLERS);, +        this(handlerName, connectionHandler, EMPTY_HANDLERS);, +        this(handlerName, http2Codec, EMPTY_HANDLERS);, +    public Http2ServerUpgradeCodec(Http2FrameCodec http2Codec, ChannelHandler... handlers) {, +        this(null, http2Codec, handlers);, +    private Http2ServerUpgradeCodec(String handlerName, Http2ConnectionHandler connectionHandler,, +            ChannelHandler... handlers) {, +        this.connectionHandler = connectionHandler;, +        this.handlers = handlers;, +            settings = decodeSettingsHeader(ctx, upgradeHeaders.get(0));, +        try {, +            ctx.pipeline().addAfter(ctx.name(), handlerName, connectionHandler);, +            connectionHandler.onHttpServerUpgrade(settings);, +, +        } catch (Http2Exception e) {, +            ctx.fireExceptionCaught(e);, +            ctx.close();]