[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +import java.util.ArrayDeque;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultPromise.class);, +, +    /**, +     * One or more listeners. Can be a {@link GenericFutureListener} or a {@link DefaultFutureListeners}., +     * If {@code null}, it means either 1) no listeners were added yet or 2) all listeners were notified., +     */, +    private Object listeners;, +, +    /**, +     * The list of the listeners that were added after the promise is done.  Initially {@code null} and lazily, +     * instantiated when the late listener is scheduled to be notified later.  Also used as a cached {@link Runnable}, +     * that performs the notification of the listeners it contains., +     */, +    private LateListeners lateListeners;, +            notifyLateListener(listener);, +        notifyLateListener(listener);, +                        this.listeners = null;, +                        DefaultPromise.this.listeners = null;, +                        DefaultPromise.this.listeners = null;, +    /**, +     * Notifies the specified listener which were added after this promise is already done., +     * This method ensures that the specified listener is not notified until {@link #listeners} becomes {@code null}, +     * to avoid the case where the late listeners are notified even before the early listeners are notified., +     */, +    private void notifyLateListener(final GenericFutureListener<?> l) {, +        final EventExecutor executor = executor();, +        if (executor.inEventLoop()) {, +            if (listeners == null && lateListeners == null) {, +                final Integer stackDepth = LISTENER_STACK_DEPTH.get();, +                if (stackDepth < MAX_LISTENER_STACK_DEPTH) {, +                    LISTENER_STACK_DEPTH.set(stackDepth + 1);, +                    try {, +                        notifyListener0(this, l);, +                    } finally {, +                        LISTENER_STACK_DEPTH.set(stackDepth);, +                    }, +                }, +            } else {, +                LateListeners lateListeners = this.lateListeners;, +                if (lateListeners == null) {, +                    this.lateListeners = lateListeners = new LateListeners();, +                }, +                lateListeners.add(l);, +                execute(executor, lateListeners);, +            }, +        } else {, +            // Add the late listener to lateListeners in the executor thread for thread safety., +            // We could just make LateListeners extend ConcurrentLinkedQueue, but it's an overkill considering, +            // that most asynchronous applications won't execute this code path., +            execute(executor, new LateListenerNotifier(l));, +        }, +    }, +, +        execute(eventExecutor, new Runnable() {, +    }, +, +    private static void execute(EventExecutor executor, Runnable task) {, +        try {, +            executor.execute(task);, +, +    private final class LateListeners extends ArrayDeque<GenericFutureListener<?>> implements Runnable {, +, +        private static final long serialVersionUID = -687137418080392244L;, +, +        LateListeners() {, +            super(2);, +        }, +, +        @Override, +        public void run() {, +            if (listeners == null) {, +                for (;;) {, +                    GenericFutureListener<?> l = poll();, +                    if (l == null) {, +                        break;, +                    }, +                    notifyListener0(DefaultPromise.this, l);, +                }, +            } else {, +                // Reschedule until the initial notification is done to avoid the race condition, +                // where the notification is made in an incorrect order., +                executor().execute(this);, +            }, +        }, +    }, +, +    private final class LateListenerNotifier implements Runnable {, +        private GenericFutureListener<?> l;, +, +        LateListenerNotifier(GenericFutureListener<?> l) {, +            this.l = l;, +        }, +, +        @Override, +        public void run() {, +            LateListeners lateListeners = DefaultPromise.this.lateListeners;, +            if (l != null) {, +                if (lateListeners == null) {]