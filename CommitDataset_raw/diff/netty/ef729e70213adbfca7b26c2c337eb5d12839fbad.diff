[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final int NUM_STANDARD_SETTINGS = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final int NUM_STANDARD_SETTINGS = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.NUM_STANDARD_SETTINGS;, +    /**, +     * Default capacity based on the number of standard settings from the HTTP/2 spec, adjusted so that adding all of, +     * the standard settings will not cause the map capacity to change., +     */, +    private static final int DEFAULT_CAPACITY = (int) (NUM_STANDARD_SETTINGS / DEFAULT_LOAD_FACTOR) + 1;, +        this(DEFAULT_CAPACITY);, +     * Adds the given setting key/value pair. For standard settings defined by the HTTP/2 spec, performs, +     * validation on the values., +     * @throws IllegalArgumentException if verification for a standard HTTP/2 setting fails., +    /**, +     * A helper method that returns {@link Long#intValue()} on the return of {@link #get(int)}, if present. Note that, +     * if the range of the value exceeds {@link Integer#MAX_VALUE}, the {@link #get(int)} method should, +     * be used instead to avoid truncation of the value., +     */, +    public Integer getIntValue(int key) {, +                // Non-standard HTTP/2 setting - don't do validation., +                break;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final int NUM_STANDARD_SETTINGS = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.NUM_STANDARD_SETTINGS;, +    /**, +     * Default capacity based on the number of standard settings from the HTTP/2 spec, adjusted so that adding all of, +     * the standard settings will not cause the map capacity to change., +     */, +    private static final int DEFAULT_CAPACITY = (int) (NUM_STANDARD_SETTINGS / DEFAULT_LOAD_FACTOR) + 1;, +        this(DEFAULT_CAPACITY);, +     * Adds the given setting key/value pair. For standard settings defined by the HTTP/2 spec, performs, +     * validation on the values., +     * @throws IllegalArgumentException if verification for a standard HTTP/2 setting fails., +    /**, +     * A helper method that returns {@link Long#intValue()} on the return of {@link #get(int)}, if present. Note that, +     * if the range of the value exceeds {@link Integer#MAX_VALUE}, the {@link #get(int)} method should, +     * be used instead to avoid truncation of the value., +     */, +    public Integer getIntValue(int key) {, +                // Non-standard HTTP/2 setting - don't do validation., +                break;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2SettingsTest.java, +, +    @Test, +    public void nonStandardSettingsShouldBeSet() {, +        settings.put(0, 123L);, +        assertEquals(123L, (long) settings.get(0));, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final int NUM_STANDARD_SETTINGS = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.NUM_STANDARD_SETTINGS;, +    /**, +     * Default capacity based on the number of standard settings from the HTTP/2 spec, adjusted so that adding all of, +     * the standard settings will not cause the map capacity to change., +     */, +    private static final int DEFAULT_CAPACITY = (int) (NUM_STANDARD_SETTINGS / DEFAULT_LOAD_FACTOR) + 1;, +        this(DEFAULT_CAPACITY);, +     * Adds the given setting key/value pair. For standard settings defined by the HTTP/2 spec, performs, +     * validation on the values., +     * @throws IllegalArgumentException if verification for a standard HTTP/2 setting fails., +    /**, +     * A helper method that returns {@link Long#intValue()} on the return of {@link #get(int)}, if present. Note that, +     * if the range of the value exceeds {@link Integer#MAX_VALUE}, the {@link #get(int)} method should, +     * be used instead to avoid truncation of the value., +     */, +    public Integer getIntValue(int key) {, +                // Non-standard HTTP/2 setting - don't do validation., +                break;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2SettingsTest.java, +, +    @Test, +    public void nonStandardSettingsShouldBeSet() {, +        settings.put(0, 123L);, +        assertEquals(123L, (long) settings.get(0));, +    }, +++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +    public static final int DEFAULT_CAPACITY = 11;, +    public static final float DEFAULT_LOAD_FACTOR = 0.5f;]