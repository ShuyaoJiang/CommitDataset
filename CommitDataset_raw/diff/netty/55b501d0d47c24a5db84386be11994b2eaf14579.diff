[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import io.netty.channel.ChannelConfig;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultChannelConfig;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +        ChannelConfig config = new DefaultChannelConfig(channel);, +        when(channel.config()).thenReturn(config);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import io.netty.channel.ChannelConfig;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultChannelConfig;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +        ChannelConfig config = new DefaultChannelConfig(channel);, +        when(channel.config()).thenReturn(config);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/StreamBufferingEncoderTest.java, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultMessageSizeEstimator;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        when(config.getMessageSizeEstimator()).thenReturn(DefaultMessageSizeEstimator.DEFAULT);, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import io.netty.channel.ChannelConfig;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultChannelConfig;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +        ChannelConfig config = new DefaultChannelConfig(channel);, +        when(channel.config()).thenReturn(config);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/StreamBufferingEncoderTest.java, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultMessageSizeEstimator;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        when(config.getMessageSizeEstimator()).thenReturn(DefaultMessageSizeEstimator.DEFAULT);, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    private SslHandlerCoalescingBufferQueue pendingUnencryptedWrites;, +    volatile int wrapDataSize = MAX_PLAINTEXT_LENGTH;, +        this.wrapDataSize = wrapDataSize;, +            final int wrapDataSize = this.wrapDataSize;, +        pendingUnencryptedWrites = new SslHandlerCoalescingBufferQueue(ctx.channel(), 16);, +    private final class SslHandlerCoalescingBufferQueue extends AbstractCoalescingBufferQueue {, +        SslHandlerCoalescingBufferQueue(Channel channel, int initSize) {, +            super(channel, initSize);, +            final int wrapDataSize = SslHandler.this.wrapDataSize;, +    }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import io.netty.channel.ChannelConfig;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultChannelConfig;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +        ChannelConfig config = new DefaultChannelConfig(channel);, +        when(channel.config()).thenReturn(config);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/StreamBufferingEncoderTest.java, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.DefaultMessageSizeEstimator;, +    private Channel.Unsafe unsafe;, +, +    @Mock, +        when(config.getMessageSizeEstimator()).thenReturn(DefaultMessageSizeEstimator.DEFAULT);, +        ChannelMetadata metadata = new ChannelMetadata(false, 16);, +        when(channel.metadata()).thenReturn(metadata);, +        when(channel.unsafe()).thenReturn(unsafe);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    private SslHandlerCoalescingBufferQueue pendingUnencryptedWrites;, +    volatile int wrapDataSize = MAX_PLAINTEXT_LENGTH;, +        this.wrapDataSize = wrapDataSize;, +            final int wrapDataSize = this.wrapDataSize;, +        pendingUnencryptedWrites = new SslHandlerCoalescingBufferQueue(ctx.channel(), 16);, +    private final class SslHandlerCoalescingBufferQueue extends AbstractCoalescingBufferQueue {, +        SslHandlerCoalescingBufferQueue(Channel channel, int initSize) {, +            super(channel, initSize);, +            final int wrapDataSize = SslHandler.this.wrapDataSize;, +    }]