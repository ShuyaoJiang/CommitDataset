[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import javax.net.ssl.KeyManagerFactory;, +        this(null, null, null, null, null, null, null, IdentityCipherSuiteFilter.INSTANCE, null, 0, 0);, +        this(certChainFile, trustManagerFactory, null, null, null, null, null,, +             IdentityCipherSuiteFilter.INSTANCE, null, 0, 0);, +        this(certChainFile, trustManagerFactory, null, null, null, null, ciphers, IdentityCipherSuiteFilter.INSTANCE,, +     * @deprecated use {@link #OpenSslClientContext(File, TrustManagerFactory, File, File, String,, +     * KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig,long, long)}, +     *, +    @Deprecated, +                                long sessionCacheSize, long sessionTimeout) throws SSLException {, +        this(certChainFile, trustManagerFactory, null, null, null, null,, +             ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout);, +    }, +, +    /**, +     * Creates a new instance., +     * @param trustCertChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default or the results of parsing {@code trustCertChainFile}, +     * @param keyCertChainFile an X.509 certificate chain file in PEM format., +     *                      This provides the public key for mutual authentication., +     *                      {@code null} to use the system default, +     * @param keyFile a PKCS#8 private key file in PEM format., +     *                      This provides the private key for mutual authentication., +     *                      {@code null} for no mutual authentication., +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     *                    Ignored if {@code keyFile} is {@code null}., +     * @param keyManagerFactory the {@link KeyManagerFactory} that provides the {@link javax.net.ssl.KeyManager}s, +     *                          that is used to encrypt data being sent to servers., +     *                          {@code null} to use the default or the results of parsing, +     *                          {@code keyCertChainFile} and {@code keyFile}., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param cipherFilter a filter to apply over the supplied list of ciphers, +     * @param apn Application Protocol Negotiator object., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     */, +    public OpenSslClientContext(File trustCertChainFile, TrustManagerFactory trustManagerFactory,, +                                File keyCertChainFile, File keyFile, String keyPassword,, +                                KeyManagerFactory keyManagerFactory, Iterable<String> ciphers,, +                                CipherSuiteFilter cipherFilter, ApplicationProtocolConfig apn,, +            if (trustCertChainFile != null && !trustCertChainFile.isFile()) {, +                throw new IllegalArgumentException("trustCertChainFile is not a file: " + trustCertChainFile);, +            if (keyCertChainFile != null && !keyCertChainFile.isFile()) {, +                throw new IllegalArgumentException("keyCertChainFile is not a file: " + keyCertChainFile);, +            }, +, +            if (keyFile != null && !keyFile.isFile()) {, +                throw new IllegalArgumentException("keyFile is not a file: " + keyFile);, +            }, +            if (keyFile == null && keyCertChainFile != null || keyFile != null && keyCertChainFile == null) {, +                throw new IllegalArgumentException(, +                        "Either both keyCertChainFile and keyFile needs to be null or none of them");, +            }, +                if (trustCertChainFile != null) {, +                    if (!SSLContext.setCertificateChainFile(ctx, trustCertChainFile.getPath(), true)) {, +                                            + trustCertChainFile + " (" + SSL.getErrorString(error) + ')');, +                if (keyCertChainFile != null && keyFile != null) {, +                    /* Load the certificate file and private key. */, +                    try {, +                        if (!SSLContext.setCertificate(, +                                ctx, keyCertChainFile.getPath(), keyFile.getPath(), keyPassword, SSL.SSL_AIDX_RSA)) {, +                            long error = SSL.getLastErrorNumber();, +                            if (OpenSsl.isError(error)) {, +                                throw new SSLException("failed to set certificate: " +, +                                                       keyCertChainFile + " and " + keyFile +, +                                                       " (" + SSL.getErrorString(error) + ')');, +                            }, +                        }, +                    } catch (SSLException e) {, +                        throw e;, +                    } catch (Exception e) {, +                        throw new SSLException("failed to set certificate: " + keyCertChainFile + " and " + keyFile, e);, +                    }, +                }, +, +                    initTrustManagerFactory(trustCertChainFile, trustManagerFactory);, +                            void verify(OpenSslEngine engine, X509Certificate[] peerCerts, String auth), +                                    throws Exception {, +                            void verify(OpenSslEngine engine, X509Certificate[] peerCerts, String auth), +                                    throws Exception {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import javax.net.ssl.KeyManagerFactory;, +        this(null, null, null, null, null, null, null, IdentityCipherSuiteFilter.INSTANCE, null, 0, 0);, +        this(certChainFile, trustManagerFactory, null, null, null, null, null,, +             IdentityCipherSuiteFilter.INSTANCE, null, 0, 0);, +        this(certChainFile, trustManagerFactory, null, null, null, null, ciphers, IdentityCipherSuiteFilter.INSTANCE,, +     * @deprecated use {@link #OpenSslClientContext(File, TrustManagerFactory, File, File, String,, +     * KeyManagerFactory, Iterable, CipherSuiteFilter, ApplicationProtocolConfig,long, long)}, +     *]