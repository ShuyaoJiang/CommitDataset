[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +, +import java.io.File;, +import java.security.PrivateKey;, +import java.security.cert.X509Certificate;, +, +import static io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.newSessionContext;, + * <p>This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslClientContext}., +            sessionContext = newSessionContext(this, ctx, engineMap, trustCertCollection, trustManagerFactory,, +                release();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +, +import java.io.File;, +import java.security.PrivateKey;, +import java.security.cert.X509Certificate;, +, +import static io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.newSessionContext;, + * <p>This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslClientContext}., +            sessionContext = newSessionContext(this, ctx, engineMap, trustCertCollection, trustManagerFactory,, +                release();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import java.security.cert.Certificate;, +, +import static io.netty.util.ReferenceCountUtil.safeRelease;, + * This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslContext}., +public abstract class OpenSslContext extends ReferenceCountedOpenSslContext {, +        super(ciphers, cipherFilter, apnCfg, sessionCacheSize, sessionTimeout, mode, keyCertChain,, +                clientAuth, false);, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, false);, +    final SSLEngine newEngine0(ByteBufAllocator alloc, String peerHost, int peerPort) {, +        safeRelease(this);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +, +import java.io.File;, +import java.security.PrivateKey;, +import java.security.cert.X509Certificate;, +, +import static io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.newSessionContext;, + * <p>This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslClientContext}., +            sessionContext = newSessionContext(this, ctx, engineMap, trustCertCollection, trustManagerFactory,, +                release();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import java.security.cert.Certificate;, +, +import static io.netty.util.ReferenceCountUtil.safeRelease;, + * This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslContext}., +public abstract class OpenSslContext extends ReferenceCountedOpenSslContext {, +        super(ciphers, cipherFilter, apnCfg, sessionCacheSize, sessionTimeout, mode, keyCertChain,, +                clientAuth, false);, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, false);, +    final SSLEngine newEngine0(ByteBufAllocator alloc, String peerHost, int peerPort) {, +        safeRelease(this);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import static io.netty.util.ReferenceCountUtil.safeRelease;, + * <p>, + * This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslEngine}., +public final class OpenSslEngine extends ReferenceCountedOpenSslEngine {, +        super(context, alloc, peerHost, peerPort, false);, +        safeRelease(this);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +, +import java.io.File;, +import java.security.PrivateKey;, +import java.security.cert.X509Certificate;, +, +import static io.netty.handler.ssl.ReferenceCountedOpenSslClientContext.newSessionContext;, + * <p>This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslClientContext}., +            sessionContext = newSessionContext(this, ctx, engineMap, trustCertCollection, trustManagerFactory,, +                release();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import java.security.cert.Certificate;, +, +import static io.netty.util.ReferenceCountUtil.safeRelease;, + * This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslContext}., +public abstract class OpenSslContext extends ReferenceCountedOpenSslContext {, +        super(ciphers, cipherFilter, apnCfg, sessionCacheSize, sessionTimeout, mode, keyCertChain,, +                clientAuth, false);, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, false);, +    final SSLEngine newEngine0(ByteBufAllocator alloc, String peerHost, int peerPort) {, +        safeRelease(this);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import static io.netty.util.ReferenceCountUtil.safeRelease;, + * <p>, + * This class will use a finalizer to ensure native resources are automatically cleaned up. To avoid finalizers, + * and manually release the native memory see {@link ReferenceCountedOpenSslEngine}., +public final class OpenSslEngine extends ReferenceCountedOpenSslEngine {, +        super(context, alloc, peerHost, peerPort, false);, +        safeRelease(this);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngineMap.java, +    ReferenceCountedOpenSslEngine remove(long ssl);, +    void add(ReferenceCountedOpenSslEngine engine);, +    ReferenceCountedOpenSslEngine get(long ssl);]