[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +     * Return the reason (if any) why {@code sun.misc.Unsafe} was not available., +     */, +    public static Throwable getUnsafeUnavailabilityCause() {, +        return PlatformDependent0.getUnsafeUnavailabilityCause();, +    }, +, +    /**, +        } catch (Throwable t) {, +            logger.trace("Could not determine if Unsafe is available", t);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +     * Return the reason (if any) why {@code sun.misc.Unsafe} was not available., +     */, +    public static Throwable getUnsafeUnavailabilityCause() {, +        return PlatformDependent0.getUnsafeUnavailabilityCause();, +    }, +, +    /**, +        } catch (Throwable t) {, +            logger.trace("Could not determine if Unsafe is available", t);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final Throwable UNSAFE_UNAVAILABILITY_CAUSE;, +        Throwable unsafeUnavailabilityCause = null;, +            unsafeUnavailabilityCause = new UnsupportedOperationException("Unsafe explicitly disabled");, +            if (maybeUnsafe instanceof Throwable) {, +                unsafeUnavailabilityCause = (Throwable) maybeUnsafe;, +                logger.debug("sun.misc.Unsafe.theUnsafe: unavailable", (Throwable) maybeUnsafe);, +                    unsafeUnavailabilityCause = (Throwable) maybeException;, +                    unsafeUnavailabilityCause = (Throwable) maybeAddressField;, +                    unsafeUnavailabilityCause = new UnsupportedOperationException("Unexpected unsafe.arrayIndexScale");, +        UNSAFE_UNAVAILABILITY_CAUSE = unsafeUnavailabilityCause;, +    static Throwable getUnsafeUnavailabilityCause() {, +        return UNSAFE_UNAVAILABILITY_CAUSE;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +     * Return the reason (if any) why {@code sun.misc.Unsafe} was not available., +     */, +    public static Throwable getUnsafeUnavailabilityCause() {, +        return PlatformDependent0.getUnsafeUnavailabilityCause();, +    }, +, +    /**, +        } catch (Throwable t) {, +            logger.trace("Could not determine if Unsafe is available", t);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final Throwable UNSAFE_UNAVAILABILITY_CAUSE;, +        Throwable unsafeUnavailabilityCause = null;, +            unsafeUnavailabilityCause = new UnsupportedOperationException("Unsafe explicitly disabled");, +            if (maybeUnsafe instanceof Throwable) {, +                unsafeUnavailabilityCause = (Throwable) maybeUnsafe;, +                logger.debug("sun.misc.Unsafe.theUnsafe: unavailable", (Throwable) maybeUnsafe);, +                    unsafeUnavailabilityCause = (Throwable) maybeException;, +                    unsafeUnavailabilityCause = (Throwable) maybeAddressField;, +                    unsafeUnavailabilityCause = new UnsupportedOperationException("Unexpected unsafe.arrayIndexScale");, +        UNSAFE_UNAVAILABILITY_CAUSE = unsafeUnavailabilityCause;, +    static Throwable getUnsafeUnavailabilityCause() {, +        return UNSAFE_UNAVAILABILITY_CAUSE;, +    }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Epoll.java, +            UNAVAILABILITY_CAUSE = PlatformDependent.hasUnsafe(), +                    ? null, +                    : new IllegalStateException(, +                            "sun.misc.Unsafe not available",, +                            PlatformDependent.getUnsafeUnavailabilityCause());, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +     * Return the reason (if any) why {@code sun.misc.Unsafe} was not available., +     */, +    public static Throwable getUnsafeUnavailabilityCause() {, +        return PlatformDependent0.getUnsafeUnavailabilityCause();, +    }, +, +    /**, +        } catch (Throwable t) {, +            logger.trace("Could not determine if Unsafe is available", t);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final Throwable UNSAFE_UNAVAILABILITY_CAUSE;, +        Throwable unsafeUnavailabilityCause = null;, +            unsafeUnavailabilityCause = new UnsupportedOperationException("Unsafe explicitly disabled");, +            if (maybeUnsafe instanceof Throwable) {, +                unsafeUnavailabilityCause = (Throwable) maybeUnsafe;, +                logger.debug("sun.misc.Unsafe.theUnsafe: unavailable", (Throwable) maybeUnsafe);, +                    unsafeUnavailabilityCause = (Throwable) maybeException;, +                    unsafeUnavailabilityCause = (Throwable) maybeAddressField;, +                    unsafeUnavailabilityCause = new UnsupportedOperationException("Unexpected unsafe.arrayIndexScale");, +        UNSAFE_UNAVAILABILITY_CAUSE = unsafeUnavailabilityCause;, +    static Throwable getUnsafeUnavailabilityCause() {, +        return UNSAFE_UNAVAILABILITY_CAUSE;, +    }, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Epoll.java, +            UNAVAILABILITY_CAUSE = PlatformDependent.hasUnsafe(), +                    ? null, +                    : new IllegalStateException(, +                            "sun.misc.Unsafe not available",, +                            PlatformDependent.getUnsafeUnavailabilityCause());, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueue.java, +            UNAVAILABILITY_CAUSE = PlatformDependent.hasUnsafe(), +                    ? null]