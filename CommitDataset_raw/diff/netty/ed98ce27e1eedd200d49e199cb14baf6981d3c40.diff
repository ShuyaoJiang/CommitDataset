[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <stddef.h>, +jint epollCtl(JNIEnv* env, jint efd, int op, jint fd, jint flags) {, +    uint32_t events = flags;, +        .data.fd = fd,, +        .events = events, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollWait0(JNIEnv* env, jclass clazz, jint efd, jlong address, jint len, jint timeout) {, +    struct epoll_event *ev = (struct epoll_event*) address;, +         return -err;, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags) < 0) {, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags) < 0) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollet(JNIEnv* env, jclass clazz) {, +    return EPOLLET;, +}, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollin(JNIEnv* env, jclass clazz) {, +    return EPOLLIN;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollout(JNIEnv* env, jclass clazz) {, +    return EPOLLOUT;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollrdhup(JNIEnv* env, jclass clazz) {, +    return EPOLLRDHUP;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sizeofEpollEvent(JNIEnv* env, jclass clazz) {, +    return sizeof(struct epoll_event);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_offsetofEpollData(JNIEnv* env, jclass clazz) {, +    return offsetof(struct epoll_event, data);, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <stddef.h>, +jint epollCtl(JNIEnv* env, jint efd, int op, jint fd, jint flags) {, +    uint32_t events = flags;, +        .data.fd = fd,, +        .events = events, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollWait0(JNIEnv* env, jclass clazz, jint efd, jlong address, jint len, jint timeout) {, +    struct epoll_event *ev = (struct epoll_event*) address;, +         return -err;, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags) < 0) {, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags) < 0) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollet(JNIEnv* env, jclass clazz) {, +    return EPOLLET;, +}, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollin(JNIEnv* env, jclass clazz) {, +    return EPOLLIN;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollout(JNIEnv* env, jclass clazz) {, +    return EPOLLOUT;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollrdhup(JNIEnv* env, jclass clazz) {, +    return EPOLLRDHUP;, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_sizeofEpollEvent(JNIEnv* env, jclass clazz) {, +    return sizeof(struct epoll_event);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_offsetofEpollData(JNIEnv* env, jclass clazz) {, +    return offsetof(struct epoll_event, data);, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_epollWait0(JNIEnv* env, jclass clazz, jint efd, jlong address, jint length, jint timeout);, +void Java_io_netty_channel_epoll_Native_epollCtlAdd(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +void Java_io_netty_channel_epoll_Native_epollCtlMod(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags);, +, +jint Java_io_netty_channel_epoll_Native_epollin(JNIEnv* env, jclass clazz);, +jint Java_io_netty_channel_epoll_Native_epollout(JNIEnv* env, jclass clazz);, +jint Java_io_netty_channel_epoll_Native_epollrdhup(JNIEnv* env, jclass clazz);, +jint Java_io_netty_channel_epoll_Native_epollet(JNIEnv* env, jclass clazz);, +jint Java_io_netty_channel_epoll_Native_sizeofEpollEvent(JNIEnv* env, jclass clazz);, +jint Java_io_netty_channel_epoll_Native_offsetofEpollData(JNIEnv* env, jclass clazz);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <stddef.h>, +jint epollCtl(JNIEnv* env, jint efd, int op, jint fd, jint flags) {, +    uint32_t events = flags;, +        .data.fd = fd,, +        .events = events, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollWait0(JNIEnv* env, jclass clazz, jint efd, jlong address, jint len, jint timeout) {, +    struct epoll_event *ev = (struct epoll_event*) address;, +         return -err;, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlAdd(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_ADD, fd, flags) < 0) {, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_epollCtlMod(JNIEnv* env, jclass clazz, jint efd, jint fd, jint flags) {, +    if (epollCtl(env, efd, EPOLL_CTL_MOD, fd, flags) < 0) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollet(JNIEnv* env, jclass clazz) {, +    return EPOLLET;, +}, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_epollin(JNIEnv* env, jclass clazz) {, +    return EPOLLIN;, +}]