[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpTransparent(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpTransparent(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpTransparent", "(II)V", (void *) netty_epoll_linuxsocket_setIpTransparent },, +  { "isIpTransparent", "(I)I", (void *) netty_epoll_linuxsocket_isIpTransparent },, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpTransparent(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpTransparent(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpTransparent", "(II)V", (void *) netty_epoll_linuxsocket_setIpTransparent },, +  { "isIpTransparent", "(I)I", (void *) netty_epoll_linuxsocket_isIpTransparent },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_TRANSPARENT = valueOf("IP_TRANSPARENT");, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpTransparent(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpTransparent(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpTransparent", "(II)V", (void *) netty_epoll_linuxsocket_setIpTransparent },, +  { "isIpTransparent", "(I)I", (void *) netty_epoll_linuxsocket_isIpTransparent },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_TRANSPARENT = valueOf("IP_TRANSPARENT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java, +            EpollChannelOption.IP_TRANSPARENT, EpollChannelOption.TCP_DEFER_ACCEPT);, +        if (option == EpollChannelOption.IP_TRANSPARENT) {, +            return (T) Boolean.valueOf(isIpTransparent());, +        }, +        } else if (option == EpollChannelOption.IP_TRANSPARENT) {, +            setIpTransparent((Boolean) value);, +     * Returns {@code true} if <a href="http://man7.org/linux/man-pages/man7/ip.7.html">IP_TRANSPARENT</a> is enabled,, +     * {@code false} otherwise., +     */, +    public boolean isIpTransparent() {, +        try {, +            return channel.socket.isIpTransparent();, +        } catch (IOException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    /**, +     * If {@code true} is used <a href="http://man7.org/linux/man-pages/man7/ip.7.html">IP_TRANSPARENT</a> is enabled,, +     * {@code false} for disable it. Default is disabled., +     */, +    public EpollServerSocketChannelConfig setIpTransparent(boolean transparent) {, +        try {, +            channel.socket.setIpTransparent(transparent);, +            return this;, +        } catch (IOException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    /**, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpTransparent(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpTransparent(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, SOL_IP, IP_TRANSPARENT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpTransparent", "(II)V", (void *) netty_epoll_linuxsocket_setIpTransparent },, +  { "isIpTransparent", "(I)I", (void *) netty_epoll_linuxsocket_isIpTransparent },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_TRANSPARENT = valueOf("IP_TRANSPARENT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java, +            EpollChannelOption.IP_TRANSPARENT, EpollChannelOption.TCP_DEFER_ACCEPT);]