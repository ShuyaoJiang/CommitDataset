[+++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +import java.nio.channels.CancelledKeyException;, +        boolean selected = false;, +        for (;;) {, +            try {, +            } catch (CancelledKeyException e) {, +                if (!selected) {, +                    // Force the Selector to select now  as the "canceled" SelectionKey may still be, +                    // cached and not removed because no Select.select(..) operation was called yet., +                    eventLoop().selectNow();, +                    selected = true;, +                } else {, +                    // We forced a select operation on the selector before but the SelectionKey is still cached, +                    // for whatever reason. JDK bug ?, +                    throw e;, +                }, +            }, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +import java.nio.channels.CancelledKeyException;, +        boolean selected = false;, +        for (;;) {, +            try {, +            } catch (CancelledKeyException e) {, +                if (!selected) {, +                    // Force the Selector to select now  as the "canceled" SelectionKey may still be, +                    // cached and not removed because no Select.select(..) operation was called yet., +                    eventLoop().selectNow();, +                    selected = true;, +                } else {, +                    // We forced a select operation on the selector before but the SelectionKey is still cached, +                    // for whatever reason. JDK bug ?, +                    throw e;, +                }, +            }, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioEventLoop.java, +, +    void selectNow() throws IOException {, +        try {, +            selector.selectNow();, +        } finally {, +            // restore wakup state if needed, +            if (wakenUp.get()) {, +                selector.wakeup();, +            }, +        }, +    }]