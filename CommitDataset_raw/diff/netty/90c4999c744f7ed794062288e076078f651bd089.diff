[+++ b/src/main/java/org/jboss/netty/channel/Channels.java, +    public static void fireChannelOpen(ChannelHandlerContext ctx) {, +                ctx.getChannel(), succeededFuture(ctx.getChannel()),, +     * @deprecated Use {@link #fireChannelOpen(ChannelHandlerContext)} instead., +     *, +     * Sends a {@code "channelOpen"} event to the next, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} where, +     * the specified {@link ChannelHandlerContext} belongs.  Please note that, +     * this method does not send a {@code "childChannelOpen"} event unlike, +     * {@link #fireChannelOpen(Channel)} method., +     */, +    @Deprecated, +    public static void fireChannelOpen(, +            ChannelHandlerContext ctx,, +            @SuppressWarnings("unused") Channel channel) {, +        fireChannelOpen(ctx);, +    }, +, +    /**, +    public static void fireChannelBound(ChannelHandlerContext ctx, SocketAddress localAddress) {, +                ctx.getChannel(), succeededFuture(ctx.getChannel()),, +     * @deprecated Use {@link #fireChannelBound(ChannelHandlerContext, SocketAddress)} instead., +     *, +     * Sends a {@code "channelBound"} event to the next, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} where, +     * the specified {@link ChannelHandlerContext} belongs., +     *, +     * @param localAddress, +     *        the local address where the specified channel is bound, +     */, +    @Deprecated, +    public static void fireChannelBound(, +            ChannelHandlerContext ctx,, +            @SuppressWarnings("unused") Channel channel,, +            SocketAddress localAddress) {, +        fireChannelBound(ctx, localAddress);, +    }, +, +    /**, +    public static void fireChannelConnected(ChannelHandlerContext ctx, SocketAddress remoteAddress) {, +                ctx.getChannel(), succeededFuture(ctx.getChannel()),, +     * @deprecated Use {@link #fireChannelConnected(ChannelHandlerContext, SocketAddress)} instead., +     *, +     * Sends a {@code "channelConnected"} event to the next, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} where, +     * the specified {@link ChannelHandlerContext} belongs., +     *, +     * @param remoteAddress, +     *        the remote address where the specified channel is connected, +     */, +    @Deprecated, +    public static void fireChannelConnected(, +            ChannelHandlerContext ctx,, +            @SuppressWarnings("unused") Channel channel,, +            SocketAddress remoteAddress) {, +        fireChannelConnected(ctx, remoteAddress);, +    }, +, +    /**, +    public static void fireMessageReceived(ChannelHandlerContext ctx, Object message) {, +                ctx.getChannel(), succeededFuture(ctx.getChannel()), message, null));, +    }, +, +    /**, +     * @deprecated Use {@link #fireMessageReceived(ChannelHandlerContext, Object)} instead., +     *, +     * Sends a {@code "messageReceived"} event to the next, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} where, +     * the specified {@link ChannelHandlerContext} belongs., +     *, +     * @param message  the received message, +     */, +    @Deprecated, +    public static void fireMessageReceived(, +            ChannelHandlerContext ctx,, +            @SuppressWarnings("unused") Channel channel,, +            Object message) {, +        fireMessageReceived(ctx, message);, +            ChannelHandlerContext ctx, Object message, SocketAddress remoteAddress) {, +                ctx.getChannel(), succeededFuture(ctx.getChannel()), message, remoteAddress));, +    }, +, +    /**, +     * @deprecated Use {@link #fireMessageReceived(ChannelHandlerContext, Object, SocketAddress)} instead., +     *, +     * Sends a {@code "messageReceived"} event to the next, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} where, +     * the specified {@link ChannelHandlerContext} belongs., +     *, +     * @param message        the received message, +     * @param remoteAddress  the remote address where the received message, +     *                       came from, +     */, +    @Deprecated, +    public static void fireMessageReceived(, +            ChannelHandlerContext ctx,, +            @SuppressWarnings("unused") Channel channel,, +            Object message, SocketAddress remoteAddress) {, +        fireMessageReceived(ctx, message, remoteAddress);, +            ChannelHandlerContext ctx) {]