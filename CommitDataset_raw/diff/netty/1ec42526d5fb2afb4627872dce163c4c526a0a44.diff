[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +import java.io.IOException;, +import java.nio.channels.ClosedChannelException;, +import java.nio.channels.SelectionKey;, +import java.nio.channels.Selector;, +import java.nio.channels.SocketChannel;, +import java.util.Set;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +    static final InternalLogger logger =, +     * 0 - no need to wake up to get / set interestOps (most cases), +     * 2 - need to wake up to get / set interestOps    (old providers), +            } else if (constraintLevel != 0) {, +                logger.warn(, +                        "Using the autodected NIO constraint level: " +, +                        constraintLevel +, +                        " (Use better NIO provider for better performance)");, +        // TODO Code cleanup - what a mess., +        final int constraintLevel;, +        ExecutorService executor = Executors.newCachedThreadPool();, +        boolean success;, +        long startTime;, +        int interestOps;, +, +        SocketChannel ch = null;, +        SelectorLoop loop = null;, +, +        try {, +            // Open a channel., +            ch = SocketChannel.open();, +, +            // Configure the channel, +            try {, +                ch.configureBlocking(false);, +            } catch (IOException e) {, +                logger.warn("Failed to configure a temporary socket.", e);, +                return -1;, +            }, +, +            // Prepare the selector loop., +            try {, +                loop = new SelectorLoop();, +            } catch (IOException e) {, +                logger.warn("Failed to open a temporary selector.", e);, +                return -1;, +            }, +, +            // Register the channel, +            try {, +                ch.register(loop.selector, 0);, +            } catch (ClosedChannelException e) {, +                logger.warn("Failed to register a temporary selector.", e);, +                return -1;, +            }, +, +            SelectionKey key = ch.keyFor(loop.selector);, +, +            // Start the selector loop., +            executor.execute(loop);, +, +            // Level 0, +            // TODO Make it run faster, +            success = true;, +            for (int i = 0; i < 10; i ++) {, +                // Increase the probability of calling interestOps, +                // while select() is running., +                while (!loop.selecting) {, +                    Thread.yield();, +                }, +, +                // Wait a little bit more., +                try {, +                    Thread.sleep(50);, +                } catch (InterruptedException e) {, +                    // Ignore, +                }, +, +                startTime = System.currentTimeMillis();, +                key.interestOps(key.interestOps() | SelectionKey.OP_READ);, +                key.interestOps(key.interestOps() & ~SelectionKey.OP_READ);, +, +                if (System.currentTimeMillis() - startTime >= 500) {, +                    success = false;, +                    break;, +                }, +            }, +, +            if (success) {, +                constraintLevel = 0;, +            } else {, +                // Level 1, +                success = true;, +                for (int i = 0; i < 10; i ++) {, +                    // Increase the probability of calling interestOps, +                    // while select() is running., +                    while (!loop.selecting) {, +                        Thread.yield();, +                    }]