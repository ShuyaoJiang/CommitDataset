[+++ b/common/src/main/java/io/netty/util/internal/ObjectUtil.java, +, +    /**, +     * Checks that the given argument is strictly positive. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static int checkPositive(int i, String name) {, +        if (i <= 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: > 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is strictly positive. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static long checkPositive(long i, String name) {, +        if (i <= 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: > 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is positive or zero. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static int checkPositiveOrZero(int i, String name) {, +        if (i < 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: >= 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is neither null nor empty., +     * If it is, throws {@link NullPointerException} or {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static <T> T[] checkNonEmpty(T[] array, String name) {, +        checkNotNull(array, name);, +        checkPositive(array.length, name + ".length");, +        return array;, +    }, +++ b/common/src/main/java/io/netty/util/internal/ObjectUtil.java, +, +    /**, +     * Checks that the given argument is strictly positive. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static int checkPositive(int i, String name) {, +        if (i <= 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: > 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is strictly positive. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static long checkPositive(long i, String name) {, +        if (i <= 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: > 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is positive or zero. If it is, throws {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static int checkPositiveOrZero(int i, String name) {, +        if (i < 0) {, +            throw new IllegalArgumentException(name + ": " + i + " (expected: >= 0)");, +        }, +        return i;, +    }, +, +    /**, +     * Checks that the given argument is neither null nor empty., +     * If it is, throws {@link NullPointerException} or {@link IllegalArgumentException}., +     * Otherwise, returns the argument., +     */, +    public static <T> T[] checkNonEmpty(T[] array, String name) {, +        checkNotNull(array, name);, +        checkPositive(array.length, name + ".length");, +        return array;, +    }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +        return new DnsNameResolverBuilder(eventLoop), +                .channelFactory(channelFactory), +                .localAddress(localAddress), +                .nameServerAddresses(nameServerAddresses), +                .build(), +++ b/common/src/main/java/io/netty/util/internal/ObjectUtil.java, +, +    /**, +     * Checks that the given argument is strictly positive. If it is, throws {@link IllegalArgumentException}.]