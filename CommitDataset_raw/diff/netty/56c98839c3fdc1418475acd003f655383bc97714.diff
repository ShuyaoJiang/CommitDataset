[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.Deque;, +import java.util.concurrent.ConcurrentLinkedDeque;, +import java.util.concurrent.LinkedBlockingDeque;, +    /**, +     * Returns a new concurrent {@link Deque}., +     */, +    public static <C> Deque<C> newConcurrentDeque() {, +        if (javaVersion() < 7) {, +            return new LinkedBlockingDeque<C>();, +        } else {, +            return new ConcurrentLinkedDeque<C>();, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.Deque;, +import java.util.concurrent.ConcurrentLinkedDeque;, +import java.util.concurrent.LinkedBlockingDeque;, +    /**, +     * Returns a new concurrent {@link Deque}., +     */, +    public static <C> Deque<C> newConcurrentDeque() {, +        if (javaVersion() < 7) {, +            return new LinkedBlockingDeque<C>();, +        } else {, +            return new ConcurrentLinkedDeque<C>();, +        }, +    }, +, +++ b/pom.xml, +            , +            <ignore>java.util.concurrent.ConcurrentLinkedDeque</ignore>, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.Deque;, +import java.util.concurrent.ConcurrentLinkedDeque;, +import java.util.concurrent.LinkedBlockingDeque;, +    /**, +     * Returns a new concurrent {@link Deque}., +     */, +    public static <C> Deque<C> newConcurrentDeque() {, +        if (javaVersion() < 7) {, +            return new LinkedBlockingDeque<C>();, +        } else {, +            return new ConcurrentLinkedDeque<C>();, +        }, +    }, +, +++ b/pom.xml, +            , +            <ignore>java.util.concurrent.ConcurrentLinkedDeque</ignore>, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +    volatile EventLoopGroup group;, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.Deque;, +import java.util.concurrent.ConcurrentLinkedDeque;, +import java.util.concurrent.LinkedBlockingDeque;, +    /**, +     * Returns a new concurrent {@link Deque}., +     */, +    public static <C> Deque<C> newConcurrentDeque() {, +        if (javaVersion() < 7) {, +            return new LinkedBlockingDeque<C>();, +        } else {, +            return new ConcurrentLinkedDeque<C>();, +        }, +    }, +, +++ b/pom.xml, +            , +            <ignore>java.util.concurrent.ConcurrentLinkedDeque</ignore>, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +    volatile EventLoopGroup group;, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +import io.netty.channel.EventLoopGroup;, +    /**, +     * Returns a deep clone of this bootstrap which has the identical configuration except that it uses, +     * the given {@link EventLoopGroup}. This method is useful when making multiple {@link Channel}s with similar, +     * settings., +     */, +    public Bootstrap clone(EventLoopGroup group) {, +        Bootstrap bs = new Bootstrap(this);, +        bs.group = group;, +        return bs;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.Deque;, +import java.util.concurrent.ConcurrentLinkedDeque;, +import java.util.concurrent.LinkedBlockingDeque;, +    /**, +     * Returns a new concurrent {@link Deque}., +     */, +    public static <C> Deque<C> newConcurrentDeque() {, +        if (javaVersion() < 7) {, +            return new LinkedBlockingDeque<C>();, +        } else {, +            return new ConcurrentLinkedDeque<C>();, +        }, +    }]