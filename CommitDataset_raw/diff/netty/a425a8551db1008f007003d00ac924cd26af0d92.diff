[+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import java.util.Collections;, +        final Channel channel = channelFactory.newChannel();, +    /**, +     * Returns the configured {@link EventLoopGroup} or {@code null} if non is configured yet., +     *, +     * @deprecated Use {@link #config()} instead., +     */, +    @Deprecated, +    public final EventLoopGroup group() {, +        return group;, +    }, +, +    /**, +     * Returns the {@link AbstractBootstrapConfig} object that can be used to obtain the current config, +     * of the bootstrap., +     */, +    public abstract AbstractBootstrapConfig<B, C> config();, +, +    static <K, V> Map<K, V> copiedMap(Map<K, V> map) {, +        final Map<K, V> copied;, +        synchronized (map) {, +            if (map.isEmpty()) {, +                return Collections.emptyMap();, +            }, +            copied = new LinkedHashMap<K, V>(map);, +        }, +        return Collections.unmodifiableMap(copied);, +    }, +, +    final Map<ChannelOption<?>, Object> options0() {, +        return options;, +    }, +, +    final Map<AttributeKey<?>, Object> attrs0() {, +        return attrs;, +    }, +, +        return copiedMap(options);, +        return copiedMap(attrs);, +            .append('(').append(config()).append(')');, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import java.util.Collections;, +        final Channel channel = channelFactory.newChannel();, +    /**, +     * Returns the configured {@link EventLoopGroup} or {@code null} if non is configured yet., +     *, +     * @deprecated Use {@link #config()} instead., +     */, +    @Deprecated, +    public final EventLoopGroup group() {, +        return group;, +    }, +, +    /**, +     * Returns the {@link AbstractBootstrapConfig} object that can be used to obtain the current config, +     * of the bootstrap., +     */, +    public abstract AbstractBootstrapConfig<B, C> config();, +, +    static <K, V> Map<K, V> copiedMap(Map<K, V> map) {, +        final Map<K, V> copied;, +        synchronized (map) {, +            if (map.isEmpty()) {, +                return Collections.emptyMap();, +            }, +            copied = new LinkedHashMap<K, V>(map);, +        }, +        return Collections.unmodifiableMap(copied);, +    }, +, +    final Map<ChannelOption<?>, Object> options0() {, +        return options;, +    }, +, +    final Map<AttributeKey<?>, Object> attrs0() {, +        return attrs;, +    }, +, +        return copiedMap(options);, +        return copiedMap(attrs);, +            .append('(').append(config()).append(')');, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrapConfig.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.bootstrap;, +]