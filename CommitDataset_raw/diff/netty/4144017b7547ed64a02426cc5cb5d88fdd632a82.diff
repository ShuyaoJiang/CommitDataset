[+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +                if (b.readable()) {, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +                if (b.readable()) {, +++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java, +    private final ByteOrder order;, +        order = expectedEndianness;, +        order = buffer.order;, +        return order;, +        if (index == 0) {, +            } else {, +                return new TruncatedChannelBuffer(this, length);, +        } else if (index < 0 || index > capacity() - length) {, +            throw new IndexOutOfBoundsException();, +        } else if (length == 0) {, +            return ChannelBuffers.EMPTY_BUFFER;, +        } else {, +    }, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +                if (b.readable()) {, +++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java, +    private final ByteOrder order;, +        order = expectedEndianness;, +        order = buffer.order;, +        return order;, +        if (index == 0) {, +            } else {, +                return new TruncatedChannelBuffer(this, length);, +        } else if (index < 0 || index > capacity() - length) {, +            throw new IndexOutOfBoundsException();, +        } else if (length == 0) {, +            return ChannelBuffers.EMPTY_BUFFER;, +        } else {, +    }, +++ b/src/test/java/org/jboss/netty/buffer/BigEndianCompositeChannelBufferTest.java, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +                if (b.readable()) {, +++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java, +    private final ByteOrder order;, +        order = expectedEndianness;, +        order = buffer.order;, +        return order;, +        if (index == 0) {, +            } else {, +                return new TruncatedChannelBuffer(this, length);, +        } else if (index < 0 || index > capacity() - length) {, +            throw new IndexOutOfBoundsException();, +        } else if (length == 0) {, +            return ChannelBuffers.EMPTY_BUFFER;, +        } else {, +    }, +++ b/src/test/java/org/jboss/netty/buffer/BigEndianCompositeChannelBufferTest.java, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +            buffers.add(ChannelBuffers.EMPTY_BUFFER);, +++ b/src/test/java/org/jboss/netty/buffer/ChannelBufferIndexFinderTest.java, +    public void testForward() {, +        assertEquals(3, buf.indexOf(Integer.MIN_VALUE, buf.capacity(), ChannelBufferIndexFinder.CRLF));, +        assertEquals(-1, buf.indexOf(28, buf.capacity(), ChannelBufferIndexFinder.LINEAR_WHITESPACE));, +    }, +, +    @Test, +    public void testBackward() {, +        ChannelBuffer buf = ChannelBuffers.copiedBuffer(, +                "abc\r\n\ndef\r\rghi\n\njkl\0\0mno  \t\tx", "ISO-8859-1");, +, +        assertEquals(27, buf.indexOf(Integer.MAX_VALUE, 0, ChannelBufferIndexFinder.LINEAR_WHITESPACE));, +        assertEquals(23, buf.indexOf(28, 0, ChannelBufferIndexFinder.NOT_LINEAR_WHITESPACE));, +        assertEquals(20, buf.indexOf(24, 0, ChannelBufferIndexFinder.NUL));, +        assertEquals(18, buf.indexOf(21, 0, ChannelBufferIndexFinder.NOT_NUL));, +        assertEquals(15, buf.indexOf(19, 0, ChannelBufferIndexFinder.LF));, +        assertEquals(13, buf.indexOf(16, 0, ChannelBufferIndexFinder.NOT_LF));, +        assertEquals(10, buf.indexOf(14, 0, ChannelBufferIndexFinder.CR));, +        assertEquals(8, buf.indexOf(11, 0, ChannelBufferIndexFinder.NOT_CR));, +        assertEquals(5, buf.indexOf(9, 0, ChannelBufferIndexFinder.CRLF));, +        assertEquals(2, buf.indexOf(6, 0, ChannelBufferIndexFinder.NOT_CRLF));, +        assertEquals(-1, buf.indexOf(3, 0, ChannelBufferIndexFinder.CRLF));, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java, +                if (b.readable()) {, +++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java, +    private final ByteOrder order;, +        order = expectedEndianness;, +        order = buffer.order;]