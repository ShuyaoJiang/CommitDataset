[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                final String tlsPrefixedCipherName = "TLS_" + supportedCipher.substring("SSL_".length());, +                try {, +                    engine.setEnabledCipherSuites(new String[]{tlsPrefixedCipherName});, +                    SUPPORTED_CIPHERS.add(tlsPrefixedCipherName);, +                } catch (IllegalArgumentException ignored) {, +                    // The cipher is not supported ... move on to the next cipher., +                }, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                final String tlsPrefixedCipherName = "TLS_" + supportedCipher.substring("SSL_".length());, +                try {, +                    engine.setEnabledCipherSuites(new String[]{tlsPrefixedCipherName});, +                    SUPPORTED_CIPHERS.add(tlsPrefixedCipherName);, +                } catch (IllegalArgumentException ignored) {, +                    // The cipher is not supported ... move on to the next cipher., +                }, +++ b/handler/src/test/java/io/netty/handler/ssl/SslContextTest.java, +import java.security.KeyManagementException;, +import java.security.NoSuchAlgorithmException;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLException;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assume.assumeNotNull;, +, +    @Test, +    public void testSupportedCiphers() throws KeyManagementException, NoSuchAlgorithmException, SSLException {, +        SSLContext jdkSslContext = SSLContext.getInstance("TLS");, +        jdkSslContext.init(null, null, null);, +        SSLEngine sslEngine = jdkSslContext.createSSLEngine();, +, +        String unsupportedCipher = "TLS_DH_anon_WITH_DES_CBC_SHA";, +        IllegalArgumentException exception = null;, +        try {, +            sslEngine.setEnabledCipherSuites(new String[] {unsupportedCipher});, +        } catch (IllegalArgumentException e) {, +            exception = e;, +        }, +        assumeNotNull(exception);, +        File keyFile = new File(getClass().getResource("test_unencrypted.pem").getFile());, +        File crtFile = new File(getClass().getResource("test.crt").getFile());, +, +        SslContext sslContext = newServerContext(crtFile, keyFile, null);, +        assertFalse(sslContext.cipherSuites().contains(unsupportedCipher));, +    }, +]