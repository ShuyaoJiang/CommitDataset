[+++ b/src/main/java/org/jboss/netty/example/http/upload/HttpClient.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.example.http.upload;, +, +import java.io.File;, +import java.net.InetSocketAddress;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.List;, +import java.util.Map.Entry;, +import java.util.concurrent.Executors;, +, +import org.jboss.netty.bootstrap.ClientBootstrap;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;, +import org.jboss.netty.handler.codec.http.QueryStringEncoder;, +import org.jboss.netty.handler.codec.http.CookieEncoder;, +import org.jboss.netty.handler.codec.http.DefaultHttpDataFactory;, +import org.jboss.netty.handler.codec.http.DefaultHttpRequest;, +import org.jboss.netty.handler.codec.http.DiskAttribute;, +import org.jboss.netty.handler.codec.http.DiskFileUpload;, +import org.jboss.netty.handler.codec.http.InterfaceHttpData;, +import org.jboss.netty.handler.codec.http.HttpPostRequestEncoder;, +import org.jboss.netty.handler.codec.http.HttpDataFactory;, +import org.jboss.netty.handler.codec.http.HttpHeaders;, +import org.jboss.netty.handler.codec.http.HttpMethod;, +import org.jboss.netty.handler.codec.http.HttpRequest;, +import org.jboss.netty.handler.codec.http.HttpVersion;, +import org.jboss.netty.handler.codec.http.HttpPostRequestEncoder.ErrorDataEncoderException;, +, +/**, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author Andy Taylor (andy.taylor@jboss.org), + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + * @author <a href="http://openr66.free.fr/">Frederic Bregier</a>, + *, + * @version $Rev$, $Date$, + */, +public class HttpClient {, +, +    public static void main(String[] args) {, +        if (args.length != 2) {, +            System.err.println(, +                    "Usage: " + HttpClient.class.getSimpleName() +, +                    " baseURI Filepath");, +            return;, +        }, +, +        String baseURI = args[0];, +        String postSimple, postFile, get;, +        if (baseURI.endsWith("/")) {, +            postSimple = baseURI+"formpost";, +            postFile = baseURI+"formpostmultipart";, +            get = baseURI+"formget";, +        } else {, +            postSimple = baseURI+"/formpost";, +            postFile = baseURI+"/formpostmultipart";, +            get = baseURI+"/formget";, +        }, +        URI uriSimple;, +        try {, +            uriSimple = new URI(postSimple);, +        } catch (URISyntaxException e) {, +            System.err.println("Error: "+e.getMessage());, +            return;, +        }, +        String scheme = uriSimple.getScheme() == null? "http" : uriSimple.getScheme();, +        String host = uriSimple.getHost() == null? "localhost" : uriSimple.getHost();, +        int port = uriSimple.getPort();, +        if (port == -1) {, +            if (scheme.equalsIgnoreCase("http")) {, +                port = 80;, +            } else if (scheme.equalsIgnoreCase("https")) {, +                port = 443;, +            }, +        }, +, +        if (!scheme.equalsIgnoreCase("http") && !scheme.equalsIgnoreCase("https")) {, +            System.err.println("Only HTTP(S) is supported.");, +            return;, +        }, +, +        boolean ssl = scheme.equalsIgnoreCase("https");, +, +        URI uriFile;]