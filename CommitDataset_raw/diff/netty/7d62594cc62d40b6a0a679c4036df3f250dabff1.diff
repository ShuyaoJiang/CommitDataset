[+++ b/microbench/pom.xml, +      <version>0.4.1</version>, +++ b/microbench/pom.xml, +      <version>0.4.1</version>, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import org.openjdk.jmh.annotations.Param;, +    @Param({ "00000", "00256", "01024", "04096", "16384", "65536" }), +    public int size;, +, +    public void unpooledHeapAllocAndFree() {, +        ByteBuf buffer = unpooledHeapAllocator.buffer(size);, +    public void unpooledDirectAllocAndFree() {, +        ByteBuf buffer = unpooledDirectAllocator.buffer(size);, +    public void pooledHeapAllocAndFree() {, +        ByteBuf buffer = pooledHeapAllocator.buffer(size);, +    public void pooledDirectAllocAndFree() {, +        ByteBuf buffer = pooledDirectAllocator.buffer(size);, +++ b/microbench/pom.xml, +      <version>0.4.1</version>, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import org.openjdk.jmh.annotations.Param;, +    @Param({ "00000", "00256", "01024", "04096", "16384", "65536" }), +    public int size;, +, +    public void unpooledHeapAllocAndFree() {, +        ByteBuf buffer = unpooledHeapAllocator.buffer(size);, +    public void unpooledDirectAllocAndFree() {, +        ByteBuf buffer = unpooledDirectAllocator.buffer(size);, +    public void pooledHeapAllocAndFree() {, +        ByteBuf buffer = pooledHeapAllocator.buffer(size);, +    public void pooledDirectAllocAndFree() {, +        ByteBuf buffer = pooledDirectAllocator.buffer(size);, +++ b/microbench/src/test/java/io/netty/microbench/util/AbstractMicrobenchmark.java, +    protected static final int DEFAULT_MEASURE_ITERATIONS = 10;]