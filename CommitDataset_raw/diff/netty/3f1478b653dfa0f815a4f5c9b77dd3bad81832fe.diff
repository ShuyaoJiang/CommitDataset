[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +import io.netty.util.internal.DetectionUtil;, +import java.net.DatagramSocket;, +import java.net.Socket;, +import java.nio.channels.DatagramChannel;, +import java.nio.channels.SocketChannel;, +    private static final Pattern IGNORABLE_CLASS_IN_STACK = Pattern.compile(, +            "^.*(Socket|DatagramChannel|SctpChannel).*$");, +        if (ignoreException(cause)) {, +, +    /**, +     * Checks if the given {@link Throwable} can be ignore and just "swallowed", +     *, +     * When an ssl connection is closed a close_notify message is sent., +     * After that the peer also sends close_notify however, it's not mandatory to receive, +     * the close_notify. The party who sent the initial close_notify can close the connection immediately, +     * then the peer will get connection reset error., +     *, +     */, +    private boolean ignoreException(Throwable t) {, +        if (!(t instanceof SSLException) && t instanceof IOException && engine.isOutboundDone()) {, +, +            // Inspect the StackTraceElements to see if it was a connection reset / broken pipe or not, +            StackTraceElement[] elements = t.getStackTrace();, +            for (StackTraceElement element: elements) {, +                String classname = element.getClassName();, +                String methodname = element.getMethodName();, +, +                // skip all classes that belong to the io.netty package, +                if (classname.startsWith("io.netty.")) {, +                    continue;, +                }, +, +                // check if the method name is read if not skip it, +                if (!methodname.equals("read")) {, +                    continue;, +                }, +, +                // This will also match against SocketInputStream which is used by openjdk 7 and maybe, +                // also others, +                if (IGNORABLE_CLASS_IN_STACK.matcher(classname).matches()) {, +                    return true;, +                }, +, +                try {, +                    // No match by now.. Try to load the class via classloader and inspect it., +                    // This is mainly done as other JDK implementations may differ in name of, +                    // the impl., +                    Class<?> clazz = getClass().getClassLoader().loadClass(classname);, +, +                    if (SocketChannel.class.isAssignableFrom(clazz), +                            || DatagramChannel.class.isAssignableFrom(clazz), +                            || Socket.class.isAssignableFrom(clazz), +                            || DatagramSocket.class.isAssignableFrom(clazz)) {, +                        return true;, +                    }, +, +                    // also match against SctpChannel via String matching as it may not present., +                    if (DetectionUtil.javaVersion() >= 7, +                            && "com.sun.nio.sctp.SctpChannel".equals(clazz.getSuperclass().getName())) {, +                        return true;, +                    }, +                } catch (ClassNotFoundException e) {, +                    // This should not happen just ignore, +                }, +, +            }, +        }, +, +        return false;, +    }, +]