[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        // mark as package-private, only for unit test, +        int offsetCacheLine(ByteBuffer memory) {, +            int remainder = HAS_UNSAFE, +                    ? (int) (PlatformDependent.directBufferAddress(memory) & directMemoryCacheAlignmentMask), +                    : 0;, +, +            // offset = alignment - address & (alignment - 1), +            return directMemoryCacheAlignment - remainder;, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        // mark as package-private, only for unit test, +        int offsetCacheLine(ByteBuffer memory) {, +            int remainder = HAS_UNSAFE, +                    ? (int) (PlatformDependent.directBufferAddress(memory) & directMemoryCacheAlignmentMask), +                    : 0;, +, +            // offset = alignment - address & (alignment - 1), +            return directMemoryCacheAlignment - remainder;, +++ b/buffer/src/test/java/io/netty/buffer/PoolArenaTest.java, +import io.netty.util.internal.PlatformDependent;, +    public void testDirectArenaOffsetCacheLine() throws Exception {, +        int capacity = 5;, +        int alignment = 128;, +, +        for (int i = 0; i < 1000; i++) {, +            ByteBuffer bb = PlatformDependent.useDirectBufferNoCleaner(), +                    ? PlatformDependent.allocateDirectNoCleaner(capacity + alignment), +                    : ByteBuffer.allocateDirect(capacity + alignment);, +, +            PoolArena.DirectArena arena = new PoolArena.DirectArena(null, 0, 0, 9, 9, alignment);, +            int offset = arena.offsetCacheLine(bb);, +            long address = PlatformDependent.directBufferAddress(bb);, +, +            Assert.assertEquals(0, (offset + address) & (alignment - 1));, +            PlatformDependent.freeDirectBuffer(bb);, +        }, +    }, +, +    @Test]