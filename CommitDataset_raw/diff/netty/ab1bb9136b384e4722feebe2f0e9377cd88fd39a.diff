[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +, +            /**, +             * Synchronize on the head. This is needed as {@link PoolSubpage#allocate()} and, +             * {@link PoolSubpage#free(int)} may modify the doubly linked list as well., +             */, +            synchronized (head) {, +            }, +    private synchronized void allocateNormal(PooledByteBuf<T> buf, int reqCapacity, int normCapacity) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +, +            /**, +             * Synchronize on the head. This is needed as {@link PoolSubpage#allocate()} and, +             * {@link PoolSubpage#free(int)} may modify the doubly linked list as well., +             */, +            synchronized (head) {, +            }, +    private synchronized void allocateNormal(PooledByteBuf<T> buf, int reqCapacity, int normCapacity) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolSubpage.java, +        PoolSubpage<T> head = chunk.arena.findSubpagePoolHead(elemSize);, +        synchronized (head) {, +            addToPool(head);, +        }, +        /**, +         * Synchronize on the head of the SubpagePool stored in the {@link PoolArena. This is needed as we synchronize, +         * on it when calling {@link PoolArena#allocate(PoolThreadCache, int, int)} und try to allocate out of the, +         * {@link PoolSubpage} pool for a given size., +         */, +        PoolSubpage<T> head = chunk.arena.findSubpagePoolHead(elemSize);, +        synchronized (head) {, +    }, +        /**, +         * Synchronize on the head of the SubpagePool stored in the {@link PoolArena. This is needed as we synchronize, +         * on it when calling {@link PoolArena#allocate(PoolThreadCache, int, int)} und try to allocate out of the, +         * {@link PoolSubpage} pool for a given size., +         */, +        PoolSubpage<T> head = chunk.arena.findSubpagePoolHead(elemSize);, +, +        synchronized (head) {, +                addToPool(head);, +    }, +    private void addToPool(PoolSubpage<T> head) {]