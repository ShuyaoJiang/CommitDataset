[+++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     *                          {@link #newChild(ThreadFactory, ChannelTaskScheduler, Object...)}, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     *                          {@link #newChild(ThreadFactory, ChannelTaskScheduler, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioByteChannel.java, +/**, + * {@link AbstractNioChannel} base class for {@link Channel}s that operate on bytes., + */, +    /**, +     * Create a new instance, +     *, +     * @param parent            the parent {@link Channel} by which this instance was created. May be {@code null}, +     * @param id                the id of this instance or {@code null} if one should be generated, +     * @param ch                the underlying {@link SelectableChannel} on which it operates, +     */, +    /**, +     * Read bytes into the given {@link ByteBuf} and return the amount., +     */, +, +    /**, +     * Write bytes form the given {@link ByteBuf} to the underlying {@link java.nio.channels.Channel}., +     * @param buf           the {@link ByteBuf} from which the bytes should be written, +     * @param lastSpin      {@code true} if this is the last write try, +     * @return amount       the amount of written bytes, +     * @throws Exception    thrown if an error accour, +     */, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     *                          {@link #newChild(ThreadFactory, ChannelTaskScheduler, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioByteChannel.java, +/**, + * {@link AbstractNioChannel} base class for {@link Channel}s that operate on bytes., + */, +    /**, +     * Create a new instance, +     *, +     * @param parent            the parent {@link Channel} by which this instance was created. May be {@code null}, +     * @param id                the id of this instance or {@code null} if one should be generated, +     * @param ch                the underlying {@link SelectableChannel} on which it operates, +     */, +    /**, +     * Read bytes into the given {@link ByteBuf} and return the amount., +     */, +, +    /**, +     * Write bytes form the given {@link ByteBuf} to the underlying {@link java.nio.channels.Channel}., +     * @param buf           the {@link ByteBuf} from which the bytes should be written, +     * @param lastSpin      {@code true} if this is the last write try, +     * @return amount       the amount of written bytes, +     * @throws Exception    thrown if an error accour, +     */, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations which use a Selector based approach., + */, +    /**, +     * Create a new instance, +     *, +     * @param parent            the parent {@link Channel} by which this instance was created. May be {@code null}, +     * @param id                the id of this instance or {@code null} if one should be generated, +     * @param ch                the underlying {@link SelectableChannel} on which it operates, +     * @param readInterestOp    the ops to set to receive data from the {@link SelectableChannel}, +     */, +    /**, +     * Return the current {@link SelectionKey}, +     */, +    /**, +     * Return {@code true} if the input of this {@link Channel} is shutdown, +     */, +    /**, +     * Shutdown the input of this {@link Channel}., +     */, +    /**, +     * Special {@link Unsafe} sub-type which allows to access the underlying {@link SelectableChannel}, +     */, +        NioEventLoop loop = eventLoop();, +        eventLoop().cancel(selectionKey());, +    /**, +     * Conect to the remote peer, +     */, +, +    /**, +     * Finish the connect, +     */, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     *                          {@link #newChild(ThreadFactory, ChannelTaskScheduler, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioByteChannel.java, +/**, + * {@link AbstractNioChannel} base class for {@link Channel}s that operate on bytes., + */, +    /**, +     * Create a new instance, +     *, +     * @param parent            the parent {@link Channel} by which this instance was created. May be {@code null}, +     * @param id                the id of this instance or {@code null} if one should be generated, +     * @param ch                the underlying {@link SelectableChannel} on which it operates, +     */, +    /**, +     * Read bytes into the given {@link ByteBuf} and return the amount., +     */, +]