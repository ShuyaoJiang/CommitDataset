[+++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +package io.netty.bootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelException;, +public abstract class Bootstrap<B extends Bootstrap<?>> {, +    private ChannelFactory factory;, +    private final Map<ChannelOption<?>, Object> options = new LinkedHashMap<ChannelOption<?>, Object>();, +    private ChannelHandler handler;, +    @SuppressWarnings("unchecked"), +    public B group(EventLoopGroup group) {, +        return (B) this;, +    public B channel(Class<? extends Channel> channelClass) {, +        if (channelClass == null) {, +            throw new NullPointerException("channelClass");, +        return channelFactory(new BootstrapChannelFactory(channelClass));, +    @SuppressWarnings("unchecked"), +    public B channelFactory(ChannelFactory factory) {, +        if (factory == null) {, +            throw new NullPointerException("factory");, +        }, +        if (this.factory != null) {, +            throw new IllegalStateException("factory set already");, +        }, +        this.factory = factory;, +        return (B) this;, +    }, +, +    @SuppressWarnings("unchecked"), +    public B localAddress(SocketAddress localAddress) {, +        this.localAddress = localAddress;, +        return (B) this;, +    }, +, +    @SuppressWarnings("unchecked"), +    public B localAddress(int port) {, +        localAddress = new InetSocketAddress(port);, +        return (B) this;, +    }, +, +    @SuppressWarnings("unchecked"), +    public B localAddress(String host, int port) {, +        localAddress = new InetSocketAddress(host, port);, +        return (B) this;, +    }, +, +    @SuppressWarnings("unchecked"), +    public B localAddress(InetAddress host, int port) {, +        localAddress = new InetSocketAddress(host, port);, +        return (B) this;, +    }, +, +    @SuppressWarnings("unchecked"), +    public <T> B option(ChannelOption<T> option, T value) {, +        return (B) this;, +    public void shutdown() {, +        if (group != null) {, +            group.shutdown();, +        }, +    }, +, +    protected void validate() {, +        if (group == null) {, +            throw new IllegalStateException("group not set");, +        }, +        if (factory == null) {, +            throw new IllegalStateException("factory not set");, +        }, +            throw new IllegalStateException("handler not set");, +    protected final void validate(ChannelFuture future) {, +        if (future == null) {, +            throw new NullPointerException("future");, +        validate();, +        Channel channel = factory().newChannel();, +    @SuppressWarnings("unchecked"), +    public B handler(ChannelHandler handler) {, +        if (handler == null) {, +            throw new NullPointerException("handler");, +        }, +        this.handler = handler;, +        return (B) this;, +    protected static boolean ensureOpen(ChannelFuture future) {, +    public abstract ChannelFuture bind(ChannelFuture future);, +, +    protected final SocketAddress localAddress() {, +        return localAddress;, +    }, +, +    protected final ChannelFactory factory() {, +        return factory;, +    }, +, +    protected final ChannelHandler handler() {, +        return handler;, +    }, +, +    protected final EventLoopGroup group() {]