[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +import io.netty.buffer.ByteBufUtil;, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.http.HttpHeaders.Values;, +import io.netty.util.CharsetUtil;, +, +    public void testSplitContent() throws Exception {, +        ch.writeInbound(newRequest());, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("Hell", CharsetUtil.US_ASCII)));, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("o, w", CharsetUtil.US_ASCII)));, +        ch.writeOutbound(new DefaultLastHttpContent(Unpooled.copiedBuffer("orld", CharsetUtil.US_ASCII)));, +        assertEncodedResponse(ch);, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("1f8b0800000000000000f248cdc901000000ffff"));, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("cad7512807000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("ca2fca4901000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("0300c2a99ae70c000000"));, +        assertThat(chunk, is(instanceOf(HttpContent.class)));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(chunk, is(instanceOf(LastHttpContent.class)));, +, +    @Test, +    public void testChunkedContent() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        ch.writeInbound(newRequest());, +, +        HttpResponse res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        res.headers().set(Names.TRANSFER_ENCODING, Values.CHUNKED);, +        ch.writeOutbound(res);, +, +        assertEncodedResponse(ch);, +, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("Hell", CharsetUtil.US_ASCII)));, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("o, w", CharsetUtil.US_ASCII)));, +        ch.writeOutbound(new DefaultLastHttpContent(Unpooled.copiedBuffer("orld", CharsetUtil.US_ASCII)));, +, +        HttpContent chunk;, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("1f8b0800000000000000f248cdc901000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("cad7512807000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("ca2fca4901000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("0300c2a99ae70c000000"));, +        assertThat(chunk, is(instanceOf(HttpContent.class)));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(chunk.content().isReadable(), is(false));, +        assertThat(chunk, is(instanceOf(LastHttpContent.class)));, +        chunk.release();, +, +        assertThat(ch.readOutbound(), is(nullValue()));, +    }, +, +    @Test, +    public void testChunkedContentWithTrailingHeader() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        ch.writeInbound(newRequest());, +, +        HttpResponse res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        res.headers().set(Names.TRANSFER_ENCODING, Values.CHUNKED);, +        ch.writeOutbound(res);, +, +        assertEncodedResponse(ch);, +, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("Hell", CharsetUtil.US_ASCII)));, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.copiedBuffer("o, w", CharsetUtil.US_ASCII)));, +        LastHttpContent content = new DefaultLastHttpContent(Unpooled.copiedBuffer("orld", CharsetUtil.US_ASCII));, +        content.trailingHeaders().set("X-Test", "Netty");, +        ch.writeOutbound(content);, +, +        HttpContent chunk;, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("1f8b0800000000000000f248cdc901000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("cad7512807000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();, +        assertThat(ByteBufUtil.hexDump(chunk.content()), is("ca2fca4901000000ffff"));, +        chunk.release();, +, +        chunk = ch.readOutbound();]