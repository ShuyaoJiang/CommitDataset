[+++ /dev/null, +++ /dev/null, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include "netty_unix_filedescriptor.h", +#include "netty_unix_socket.h", +#include "netty_unix_errors.h", +// TCP_FASTOPEN is defined in linux 3.7. We define this here so older kernels can compile., +        if (netty_unix_errors_JNI_OnLoad(env) == JNI_ERR) {, +        if (netty_unix_filedescriptor_JNI_OnLoad(env) == JNI_ERR) {, +        if (netty_unix_socket_JNI_OnLoad(env) == JNI_ERR) {, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.file");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.transfered");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileChannelImpl.fd");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileDescriptor.fd");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.addr");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.scopeId");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.port");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.memoryAddress");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.count");, +        netty_unix_errors_JNI_OnUnLoad(env);, +        netty_unix_filedescriptor_JNI_OnUnLoad(env);, +        netty_unix_socket_JNI_OnUnLoad(env);, +        netty_unix_errors_throwChannelExceptionErrorNo(env, "eventfd() failed: ", err);, +        netty_unix_errors_throwChannelExceptionErrorNo(env, "eventfd_write() failed: ", err);, +        netty_unix_errors_throwRuntimeException(env, "eventfd_read() failed");, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "epoll_create1() failed: ", err);, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "epoll_create() failed: ", err);, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "fcntl() failed: ", err);, +        if (netty_unix_socket_initSockaddr(env, address, scopeId, port, &addr) == -1) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get DefaultFileRegion.file");, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileChannelImpl.fd");, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileDescriptor.fd");, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_NOTSENT_LOWAT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_BROADCAST, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPIDLE, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPINTVL, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPCNT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +    if (netty_unix_socket_getOption(env, fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_NOTSENT_LOWAT, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, SOL_SOCKET, SO_BROADCAST, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_KEEPIDLE, &optval, sizeof(optval)) == -1) {, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_KEEPINTVL, &optval, sizeof(optval)) == -1) {, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_KEEPCNT, &optval, sizeof(optval)) == -1) {, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval)) == -1) {, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_INFO, &tcp_info, sizeof(tcp_info)) == -1) {, +    netty_unix_errors_throwRuntimeExceptionErrorNo(env, "uname() failed: ", err);, +    if (netty_unix_socket_initSockaddr(env, address, scopeId, 0, &addr) == -1) {, +        netty_unix_errors_throwChannelExceptionErrorNo(env, "setsockopt() failed: ", errno);, +++ /dev/null, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include "netty_unix_filedescriptor.h", +#include "netty_unix_socket.h", +#include "netty_unix_errors.h", +// TCP_FASTOPEN is defined in linux 3.7. We define this here so older kernels can compile., +        if (netty_unix_errors_JNI_OnLoad(env) == JNI_ERR) {, +        if (netty_unix_filedescriptor_JNI_OnLoad(env) == JNI_ERR) {, +        if (netty_unix_socket_JNI_OnLoad(env) == JNI_ERR) {, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.file");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.transfered");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileChannelImpl.fd");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileDescriptor.fd");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.addr");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.scopeId");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.port");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.memoryAddress");, +            netty_unix_errors_throwRuntimeException(env, "failed to get field ID: NativeDatagramPacket.count");, +        netty_unix_errors_JNI_OnUnLoad(env);, +        netty_unix_filedescriptor_JNI_OnUnLoad(env);, +        netty_unix_socket_JNI_OnUnLoad(env);, +        netty_unix_errors_throwChannelExceptionErrorNo(env, "eventfd() failed: ", err);, +        netty_unix_errors_throwChannelExceptionErrorNo(env, "eventfd_write() failed: ", err);, +        netty_unix_errors_throwRuntimeException(env, "eventfd_read() failed");, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "epoll_create1() failed: ", err);, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "epoll_create() failed: ", err);, +            netty_unix_errors_throwChannelExceptionErrorNo(env, "fcntl() failed: ", err);, +        if (netty_unix_socket_initSockaddr(env, address, scopeId, port, &addr) == -1) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get DefaultFileRegion.file");, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileChannelImpl.fd");, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileDescriptor.fd");, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_FASTOPEN, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_NOTSENT_LOWAT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, SOL_SOCKET, SO_BROADCAST, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPIDLE, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPINTVL, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_KEEPCNT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +    if (netty_unix_socket_getOption(env, fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) == -1) {]