[+++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +import io.netty.channel.ChannelPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +    private ChannelPromise init(Channel channel) {, +        ChannelPromise promise = channel.newPromise();, +        try {, +            group().register(channel, promise);, +        } catch (Throwable t) {, +            promise.setFailure(t);, +        }, +, +        if (promise.cause() != null) {, +            if (channel.isRegistered()) {, +                channel.close();, +            } else {, +                channel.unsafe().closeForcibly();, +            }, +        }, +, +        // If we are here and the promise is not failed, it's one of the following cases:, +        // 1) If we attempted registration from the event loop, the registration has been completed at this point., +        //    i.e. It's safe to attempt bind() or connect() now beause the channel has been registered., +        // 2) If we attempted registration from the other thread, the registration request has been successfully, +        //    added to the event loop's task queue for later execution., +        //    i.e. It's safe to attempt bind() or connect() now:, +        //         because bind() or connect() will be executed *after* the scheduled registration task is executed, +        //         because register(), bind(), and connect() are all bound to the same thread., +, +        return promise;, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +import io.netty.channel.ChannelPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +    private ChannelPromise init(Channel channel) {, +        ChannelPromise promise = channel.newPromise();, +        try {, +            group().register(channel, promise);, +        } catch (Throwable t) {, +            promise.setFailure(t);, +        }, +, +        if (promise.cause() != null) {, +            if (channel.isRegistered()) {, +                channel.close();, +            } else {, +                channel.unsafe().closeForcibly();, +            }, +        }, +, +        // If we are here and the promise is not failed, it's one of the following cases:, +        // 1) If we attempted registration from the event loop, the registration has been completed at this point., +        //    i.e. It's safe to attempt bind() or connect() now beause the channel has been registered., +        // 2) If we attempted registration from the other thread, the registration request has been successfully, +        //    added to the event loop's task queue for later execution., +        //    i.e. It's safe to attempt bind() or connect() now:, +        //         because bind() or connect() will be executed *after* the scheduled registration task is executed, +        //         because register(), bind(), and connect() are all bound to the same thread., +, +        return promise;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                closeForcibly();, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +import io.netty.channel.ChannelPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +        ChannelPromise initPromise = init(channel);, +        if (initPromise.cause() != null) {, +            return initPromise;, +    private ChannelPromise init(Channel channel) {, +        ChannelPromise promise = channel.newPromise();, +        try {, +            group().register(channel, promise);, +        } catch (Throwable t) {, +            promise.setFailure(t);, +        }, +, +        if (promise.cause() != null) {, +            if (channel.isRegistered()) {, +                channel.close();, +            } else {, +                channel.unsafe().closeForcibly();, +            }, +        }, +, +        // If we are here and the promise is not failed, it's one of the following cases:, +        // 1) If we attempted registration from the event loop, the registration has been completed at this point., +        //    i.e. It's safe to attempt bind() or connect() now beause the channel has been registered., +        // 2) If we attempted registration from the other thread, the registration request has been successfully, +        //    added to the event loop's task queue for later execution., +        //    i.e. It's safe to attempt bind() or connect() now:]