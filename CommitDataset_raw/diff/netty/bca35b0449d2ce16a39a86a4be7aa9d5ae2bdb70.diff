[+++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +    private final boolean noCleaner;, +        this(preferDirect, disableLeakDetector, PlatformDependent.useDirectBufferNoCleaner());, +    }, +, +    /**, +     * Create a new instance, +     *, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +     * @param disableLeakDetector {@code true} if the leak-detection should be disabled completely for this, +     *                            allocator. This can be useful if the user just want to depend on the GC to handle, +     *                            direct buffers when not explicit released., +     * @param tryNoCleaner {@code true} if we should try to use {@link PlatformDependent#allocateDirectNoCleaner(int)}, +     *                            to allocate direct memory., +     */, +    public UnpooledByteBufAllocator(boolean preferDirect, boolean disableLeakDetector, boolean tryNoCleaner) {, +        noCleaner = tryNoCleaner && PlatformDependent.hasUnsafe(), +                && PlatformDependent.hasDirectBufferNoCleanerConstructor();, +            buf = noCleaner ? new InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(this, initialCapacity, maxCapacity) :, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +    private final boolean noCleaner;, +        this(preferDirect, disableLeakDetector, PlatformDependent.useDirectBufferNoCleaner());, +    }, +, +    /**, +     * Create a new instance, +     *, +     * @param preferDirect {@code true} if {@link #buffer(int)} should try to allocate a direct buffer rather than, +     *                     a heap buffer, +     * @param disableLeakDetector {@code true} if the leak-detection should be disabled completely for this, +     *                            allocator. This can be useful if the user just want to depend on the GC to handle, +     *                            direct buffers when not explicit released., +     * @param tryNoCleaner {@code true} if we should try to use {@link PlatformDependent#allocateDirectNoCleaner(int)}, +     *                            to allocate direct memory., +     */, +    public UnpooledByteBufAllocator(boolean preferDirect, boolean disableLeakDetector, boolean tryNoCleaner) {, +        noCleaner = tryNoCleaner && PlatformDependent.hasUnsafe(), +                && PlatformDependent.hasDirectBufferNoCleanerConstructor();, +            buf = noCleaner ? new InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(this, initialCapacity, maxCapacity) :, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +    public static boolean hasDirectBufferNoCleanerConstructor() {, +        return PlatformDependent0.hasDirectBufferNoCleanerConstructor();, +    }, +]