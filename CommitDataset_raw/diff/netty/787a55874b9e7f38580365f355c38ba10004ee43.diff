[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import static java.lang.Math.max;, +, +        return max(val, 0);, +        return max(numTinyAllocations() - numTinyDeallocations(), 0);, +        return max(numSmallAllocations() - numSmallDeallocations(), 0);, +        return max(val, 0);, +        return max(numHugeAllocations() - numHugeDeallocations(), 0);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import static java.lang.Math.max;, +, +        return max(val, 0);, +        return max(numTinyAllocations() - numTinyDeallocations(), 0);, +        return max(numSmallAllocations() - numSmallDeallocations(), 0);, +        return max(val, 0);, +        return max(numHugeAllocations() - numHugeDeallocations(), 0);, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +    private static final int INTEGER_SIZE_MINUS_ONE = Integer.SIZE - 1;, +, +        int memoryMapIdx = memoryMapIdx(handle);, +        int bitmapIdx = bitmapIdx(handle);, +        int memoryMapIdx = memoryMapIdx(handle);, +        int bitmapIdx = bitmapIdx(handle);, +        initBufWithSubpage(buf, handle, bitmapIdx(handle), reqCapacity);, +        int memoryMapIdx = memoryMapIdx(handle);, +        return INTEGER_SIZE_MINUS_ONE - Integer.numberOfLeadingZeros(val);, +    private static int memoryMapIdx(long handle) {, +        return (int) handle;, +    }, +, +    private static int bitmapIdx(long handle) {, +        return (int) (handle >>> Integer.SIZE);, +    }, +]