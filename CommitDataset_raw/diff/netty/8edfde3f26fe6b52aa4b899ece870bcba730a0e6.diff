[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpCodec.java, +, +    /**, +     * Creates a new instance with the specified decoder options., +     */, +    public SpdyHttpCodec(SpdyVersion version, int maxContentLength, boolean validateHttpHeaders) {, +        super(new SpdyHttpDecoder(version, maxContentLength, validateHttpHeaders), new SpdyHttpEncoder(version));, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpCodec.java, +, +    /**, +     * Creates a new instance with the specified decoder options., +     */, +    public SpdyHttpCodec(SpdyVersion version, int maxContentLength, boolean validateHttpHeaders) {, +        super(new SpdyHttpDecoder(version, maxContentLength, validateHttpHeaders), new SpdyHttpEncoder(version));, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpDecoder.java, +    private final boolean validateHeaders;, +        this(version, maxContentLength, new HashMap<Integer, FullHttpMessage>(), true);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param version the protocol version, +     * @param maxContentLength the maximum length of the message content., +     *        If the length of the message content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     * @param validateHeaders {@code true} if http headers should be validated, +     */, +    public SpdyHttpDecoder(SpdyVersion version, int maxContentLength, boolean validateHeaders) {, +        this(version, maxContentLength, new HashMap<Integer, FullHttpMessage>(), validateHeaders);, +        this(version, maxContentLength, messageMap, true);, +    }, +, +    /**, +     * Creates a new instance with the specified parameters., +     *, +     * @param version the protocol version, +     * @param maxContentLength the maximum length of the message content., +     *        If the length of the message content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     * @param messageMap the {@link Map} used to hold partially received messages., +     * @param validateHeaders {@code true} if http headers should be validated, +     */, +    protected SpdyHttpDecoder(SpdyVersion version, int maxContentLength, Map<Integer,, +            FullHttpMessage> messageMap, boolean validateHeaders) {, +        this.validateHeaders = validateHeaders;, +                            createHttpResponse(ctx, spdySynStreamFrame, validateHeaders);, +                FullHttpResponse httpResponseWithEntity = createHttpResponse(ctx, spdySynReplyFrame, validateHeaders);, +    private static FullHttpResponse createHttpResponse(ChannelHandlerContext ctx, SpdyHeadersFrame responseFrame,, +                                                       boolean validateHeaders) throws Exception {, +        FullHttpResponse res = new DefaultFullHttpResponse(version, status, ctx.alloc().buffer(), validateHeaders);]