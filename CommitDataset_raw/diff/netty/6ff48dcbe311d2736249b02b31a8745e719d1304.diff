[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +    private final boolean decompressConcatenated;, +        this(ZlibWrapper.ZLIB, null, false);, +        this(ZlibWrapper.ZLIB, dictionary, false);, +        this(wrapper, null, false);, +    public JdkZlibDecoder(ZlibWrapper wrapper, boolean decompressConcatenated) {, +        this(wrapper, null, decompressConcatenated);, +    }, +, +    public JdkZlibDecoder(boolean decompressConcatenated) {, +        this(ZlibWrapper.GZIP, null, decompressConcatenated);, +    }, +, +    private JdkZlibDecoder(ZlibWrapper wrapper, byte[] dictionary, boolean decompressConcatenated) {, +        this.decompressConcatenated = decompressConcatenated;, +                    finished = !decompressConcatenated;, +, +                    if (!finished) {, +                        inflater.reset();, +                        crc.reset();, +                        gzipState = GzipState.HEADER_START;, +                    }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +    private final boolean decompressConcatenated;, +        this(ZlibWrapper.ZLIB, null, false);, +        this(ZlibWrapper.ZLIB, dictionary, false);, +        this(wrapper, null, false);, +    public JdkZlibDecoder(ZlibWrapper wrapper, boolean decompressConcatenated) {, +        this(wrapper, null, decompressConcatenated);, +    }, +, +    public JdkZlibDecoder(boolean decompressConcatenated) {, +        this(ZlibWrapper.GZIP, null, decompressConcatenated);, +    }, +, +    private JdkZlibDecoder(ZlibWrapper wrapper, byte[] dictionary, boolean decompressConcatenated) {, +        this.decompressConcatenated = decompressConcatenated;, +                    finished = !decompressConcatenated;, +, +                    if (!finished) {, +                        inflater.reset();, +                        crc.reset();, +                        gzipState = GzipState.HEADER_START;, +                    }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java, +            return new JdkZlibDecoder(true);, +            return new JdkZlibDecoder(wrapper, true);, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +    private final boolean decompressConcatenated;, +        this(ZlibWrapper.ZLIB, null, false);, +        this(ZlibWrapper.ZLIB, dictionary, false);, +        this(wrapper, null, false);, +    public JdkZlibDecoder(ZlibWrapper wrapper, boolean decompressConcatenated) {, +        this(wrapper, null, decompressConcatenated);, +    }, +, +    public JdkZlibDecoder(boolean decompressConcatenated) {, +        this(ZlibWrapper.GZIP, null, decompressConcatenated);, +    }, +, +    private JdkZlibDecoder(ZlibWrapper wrapper, byte[] dictionary, boolean decompressConcatenated) {, +        this.decompressConcatenated = decompressConcatenated;, +                    finished = !decompressConcatenated;, +, +                    if (!finished) {, +                        inflater.reset();, +                        crc.reset();, +                        gzipState = GzipState.HEADER_START;, +                    }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibCodecFactory.java, +            return new JdkZlibDecoder(true);, +            return new JdkZlibDecoder(wrapper, true);, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JdkZlibTest.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.util.CharsetUtil;, +import io.netty.util.ReferenceCountUtil;, +import org.apache.commons.compress.utils.IOUtils;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Queue;, +, +import static org.junit.Assert.*;, +, +, +    @Test, +    // verifies backward compatibility, +    public void testConcatenatedStreamsReadFirstOnly() throws IOException {, +        EmbeddedChannel chDecoderGZip = new EmbeddedChannel(createDecoder(ZlibWrapper.GZIP));, +, +        try {, +            byte[] bytes = IOUtils.toByteArray(getClass().getResourceAsStream("/multiple.gz"));, +, +            assertTrue(chDecoderGZip.writeInbound(Unpooled.copiedBuffer(bytes)));, +            Queue<Object> messages = chDecoderGZip.inboundMessages();, +            assertEquals(1, messages.size());, +, +            ByteBuf msg = (ByteBuf) messages.poll();, +            assertEquals("a", msg.toString(CharsetUtil.UTF_8));]