[+++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.handler.ssl.SslHandler;, +    private final HttpTunnelingSocketChannelConfig config;, +    private final DelimiterBasedFrameDecoder decoder = new DelimiterBasedFrameDecoder(8092, ChannelBuffers.wrappedBuffer(new byte[] { '\r', '\n' }));, +    private final HttpTunnelingClientSocketChannel.ServletChannelHandler handler = new ServletChannelHandler();, +, +        createSocketChannel();, +        config = new HttpTunnelingSocketChannelConfig(this);, +    public HttpTunnelingSocketChannelConfig getConfig() {, +        return config;, +        return channel.isBound();, +            createSocketChannel();, +    /**, +     *, +     */, +    private void createSocketChannel() {, +        DefaultChannelPipeline channelPipeline = new DefaultChannelPipeline();, +        channelPipeline.addLast("decoder", decoder);, +        channelPipeline.addLast("handler", handler);, +        channel = clientSocketChannelFactory.newChannel(channelPipeline);, +    }, +, +        public void channelConnected(ChannelHandlerContext ctx,, +                ChannelStateEvent e) throws Exception {, +            SSLContext sslContext = getConfig().getSslContext();, +            if (sslContext != null) {, +                // FIXME: specify peer host and port., +                SSLEngine engine = sslContext.createSSLEngine();, +                engine.setUseClientMode(true);, +, +                SocketChannel ch = (SocketChannel) e.getChannel();, +                SslHandler sslHandler = new SslHandler(engine);, +                ch.getPipeline().addFirst("ssl", sslHandler);, +, +                sslHandler.handshake(channel);, +            }, +        }, +, +        @Override, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.handler.ssl.SslHandler;, +    private final HttpTunnelingSocketChannelConfig config;, +    private final DelimiterBasedFrameDecoder decoder = new DelimiterBasedFrameDecoder(8092, ChannelBuffers.wrappedBuffer(new byte[] { '\r', '\n' }));, +    private final HttpTunnelingClientSocketChannel.ServletChannelHandler handler = new ServletChannelHandler();, +, +        createSocketChannel();, +        config = new HttpTunnelingSocketChannelConfig(this);, +    public HttpTunnelingSocketChannelConfig getConfig() {, +        return config;, +        return channel.isBound();, +            createSocketChannel();, +    /**, +     *, +     */, +    private void createSocketChannel() {, +        DefaultChannelPipeline channelPipeline = new DefaultChannelPipeline();, +        channelPipeline.addLast("decoder", decoder);, +        channelPipeline.addLast("handler", handler);, +        channel = clientSocketChannelFactory.newChannel(channelPipeline);, +    }, +, +        public void channelConnected(ChannelHandlerContext ctx,, +                ChannelStateEvent e) throws Exception {, +            SSLContext sslContext = getConfig().getSslContext();, +            if (sslContext != null) {, +                // FIXME: specify peer host and port., +                SSLEngine engine = sslContext.createSSLEngine();, +                engine.setUseClientMode(true);, +, +                SocketChannel ch = (SocketChannel) e.getChannel();, +                SslHandler sslHandler = new SslHandler(engine);, +                ch.getPipeline().addFirst("ssl", sslHandler);, +, +                sslHandler.handshake(channel);, +            }, +        }, +, +        @Override, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingSocketChannelConfig.java, +import java.util.Map;, +import javax.net.ssl.SSLContext;, +, +import org.jboss.netty.buffer.ChannelBufferFactory;, +import org.jboss.netty.channel.ChannelPipelineFactory;, +final class HttpTunnelingSocketChannelConfig implements SocketChannelConfig {, +    private final HttpTunnelingClientSocketChannel channel;, +    private volatile SSLContext sslContext;, +    HttpTunnelingSocketChannelConfig(HttpTunnelingClientSocketChannel channel) {, +        this.channel = channel;, +    public SSLContext getSslContext() {, +        return sslContext;, +    }]