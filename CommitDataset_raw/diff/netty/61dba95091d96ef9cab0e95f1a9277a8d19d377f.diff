[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +, +        if (state != READ_HEADER_REPRESENTATION) {, +            throw connectionError(COMPRESSION_ERROR, "Incomplete header block fragment.");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +, +        if (state != READ_HEADER_REPRESENTATION) {, +            throw connectionError(COMPRESSION_ERROR, "Incomplete header block fragment.");, +        }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/HpackDecoderTest.java, +, +    @Test, +    public void testIncompleteHeaderFieldRepresentation() throws Http2Exception {, +        // Incomplete Literal Header Field with Incremental Indexing, +        byte[] input = {(byte) 0x40};, +        ByteBuf in = Unpooled.wrappedBuffer(input);, +        try {, +            expectedException.expect(Http2Exception.class);, +            hpackDecoder.decode(0, in, mockHeaders);, +        } finally {, +            in.release();, +        }, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +, +        if (state != READ_HEADER_REPRESENTATION) {, +            throw connectionError(COMPRESSION_ERROR, "Incomplete header block fragment.");, +        }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/HpackDecoderTest.java, +, +    @Test, +    public void testIncompleteHeaderFieldRepresentation() throws Http2Exception {, +        // Incomplete Literal Header Field with Incremental Indexing, +        byte[] input = {(byte) 0x40};, +        ByteBuf in = Unpooled.wrappedBuffer(input);, +        try {, +            expectedException.expect(Http2Exception.class);, +            hpackDecoder.decode(0, in, mockHeaders);, +        } finally {, +            in.release();, +        }, +    }, +++ b/testsuite-http2/pom.xml]