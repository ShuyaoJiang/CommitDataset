[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +                                    Set<String> algorithmList = new LinkedHashSet<String>(algs.length);, +, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +                                    Set<String> algorithmList = new LinkedHashSet<String>(algs.length);, +, +++ b/handler/src/main/java/io/netty/handler/ssl/SignatureAlgorithmConverter.java, +    //, +    // BoringSSL uses a different format:, +    // https://github.com/google/boringssl/blob/8525ff3/ssl/ssl_privkey.cc#L436, +    //, +            // group 1 - 2, +            "(?:(^[a-zA-Z].+)With(.+)Encryption$)|" +, +            // group 3 - 4, +            "(?:(^[a-zA-Z].+)(?:_with_|-with-|_pkcs1_|_pss_rsae_)(.+$))|" +, +            // group 5 - 6, +            "(?:(^[a-zA-Z].+)_(.+$))");, +            String group1 = matcher.group(1);, +            if (group1 != null) {, +                return group1.toUpperCase(Locale.ROOT) + "with" + matcher.group(2).toUpperCase(Locale.ROOT);, +            if (matcher.group(3) != null) {, +                return matcher.group(4).toUpperCase(Locale.ROOT) + "with" + matcher.group(3).toUpperCase(Locale.ROOT);, +            }, +, +            if (matcher.group(5) != null) {, +                return matcher.group(6).toUpperCase(Locale.ROOT) + "with" + matcher.group(5).toUpperCase(Locale.ROOT);, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +                                    Set<String> algorithmList = new LinkedHashSet<String>(algs.length);, +, +++ b/handler/src/main/java/io/netty/handler/ssl/SignatureAlgorithmConverter.java, +    //, +    // BoringSSL uses a different format:, +    // https://github.com/google/boringssl/blob/8525ff3/ssl/ssl_privkey.cc#L436, +    //, +            // group 1 - 2, +            "(?:(^[a-zA-Z].+)With(.+)Encryption$)|" +, +            // group 3 - 4, +            "(?:(^[a-zA-Z].+)(?:_with_|-with-|_pkcs1_|_pss_rsae_)(.+$))|" +, +            // group 5 - 6, +            "(?:(^[a-zA-Z].+)_(.+$))");, +            String group1 = matcher.group(1);, +            if (group1 != null) {, +                return group1.toUpperCase(Locale.ROOT) + "with" + matcher.group(2).toUpperCase(Locale.ROOT);, +            if (matcher.group(3) != null) {, +                return matcher.group(4).toUpperCase(Locale.ROOT) + "with" + matcher.group(3).toUpperCase(Locale.ROOT);, +            }, +, +            if (matcher.group(5) != null) {, +                return matcher.group(6).toUpperCase(Locale.ROOT) + "with" + matcher.group(5).toUpperCase(Locale.ROOT);, +++ b/handler/src/test/java/io/netty/handler/ssl/SignatureAlgorithmConverterTest.java, +    public void testBoringSSLOneUnderscore() {, +        assertEquals("SHA256withECDSA", SignatureAlgorithmConverter.toJavaName("ecdsa_sha256"));, +    }, +, +    @Test, +    public void testBoringSSLPkcs1() {, +        assertEquals("SHA256withRSA", SignatureAlgorithmConverter.toJavaName("rsa_pkcs1_sha256"));, +    }, +, +    @Test, +    public void testBoringSSLPSS() {, +        assertEquals("SHA256withRSA", SignatureAlgorithmConverter.toJavaName("rsa_pss_rsae_sha256"));, +    }, +, +    @Test]