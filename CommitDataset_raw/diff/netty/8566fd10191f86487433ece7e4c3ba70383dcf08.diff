[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                        ClientAuth clientAuth, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                        ClientAuth clientAuth, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                        ClientAuth clientAuth, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                   ClientAuth clientAuth, boolean startTls), +                clientAuth, startTls, false);, +                   ClientAuth clientAuth, boolean startTls) throws SSLException {, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, startTls,, +              false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                        ClientAuth clientAuth, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                   ClientAuth clientAuth, boolean startTls), +                clientAuth, startTls, false);, +                   ClientAuth clientAuth, boolean startTls) throws SSLException {, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, startTls,, +              false);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslServerContext.java, +                apn, sessionCacheSize, sessionTimeout, ClientAuth.NONE, false);, +            long sessionCacheSize, long sessionTimeout, ClientAuth clientAuth, boolean startTls) throws SSLException {, +                cipherFilter, toNegotiator(apn), sessionCacheSize, sessionTimeout, clientAuth, startTls);, +            long sessionCacheSize, long sessionTimeout, ClientAuth clientAuth, boolean startTls) throws SSLException {, +                clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, boolean startTls) {, +        super(startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, false);, +                        ClientAuth clientAuth, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                ClientAuth.NONE, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                   ClientAuth clientAuth, boolean startTls), +                clientAuth, startTls, false);]