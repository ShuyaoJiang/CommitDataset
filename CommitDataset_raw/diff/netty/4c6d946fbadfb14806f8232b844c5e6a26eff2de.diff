[+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketTest.java, +import org.junit.BeforeClass;, +import static org.junit.Assume.assumeTrue;, +    @BeforeClass, +    public static void loadJNI() {, +        assumeTrue(Epoll.isAvailable());, +    }, +, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketTest.java, +import org.junit.BeforeClass;, +import static org.junit.Assume.assumeTrue;, +    @BeforeClass, +    public static void loadJNI() {, +        assumeTrue(Epoll.isAvailable());, +    }, +, +++ b/transport-native-kqueue/src/test/java/io/netty/channel/kqueue/KQueueSocketTest.java, +import static org.junit.Assume.assumeTrue;, +        assumeTrue(KQueue.isAvailable());, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketTest.java, +import org.junit.BeforeClass;, +import static org.junit.Assume.assumeTrue;, +    @BeforeClass, +    public static void loadJNI() {, +        assumeTrue(Epoll.isAvailable());, +    }, +, +++ b/transport-native-kqueue/src/test/java/io/netty/channel/kqueue/KQueueSocketTest.java, +import static org.junit.Assume.assumeTrue;, +        assumeTrue(KQueue.isAvailable());, +++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/SocketTest.java, +, +    @Test, +    public void testTrafficClass() throws IOException {, +        final int value = 0x1;, +        socket.setTrafficClass(value);, +        assertEquals(value, socket.getTrafficClass());, +    }, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSocketTest.java, +import org.junit.BeforeClass;, +import static org.junit.Assume.assumeTrue;, +    @BeforeClass, +    public static void loadJNI() {, +        assumeTrue(Epoll.isAvailable());, +    }, +, +++ b/transport-native-kqueue/src/test/java/io/netty/channel/kqueue/KQueueSocketTest.java, +import static org.junit.Assume.assumeTrue;, +        assumeTrue(KQueue.isAvailable());, +++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/SocketTest.java, +, +    @Test, +    public void testTrafficClass() throws IOException {, +        final int value = 0x1;, +        socket.setTrafficClass(value);, +        assertEquals(value, socket.getTrafficClass());, +    }, +++ b/transport-native-unix-common/src/main/c/netty_unix_socket.c, +static void netty_unix_socket_optionHandleError(JNIEnv* env, int err, char* method) {, +        netty_unix_errors_throwChannelExceptionErrorNo(env, method, err);, +, +static void netty_unix_socket_setOptionHandleError(JNIEnv* env, int err) {, +    netty_unix_socket_optionHandleError(env, err, "setsockopt() failed: ");, +}, +, +static void netty_unix_socket_getOptionHandleError(JNIEnv* env, int err) {, +    netty_unix_socket_optionHandleError(env, err, "getsockopt() failed: ");, +}, +, +static int netty_unix_socket_setOption0(jint fd, int level, int optname, const void* optval, socklen_t len) {, +    return setsockopt(fd, level, optname, optval, len);, +}, +, +static int netty_unix_socket_getOption0(jint fd, int level, int optname, void* optval, socklen_t optlen) {, +    return getsockopt(fd, level, optname, optval, &optlen);, +}, +, +int netty_unix_socket_getOption(JNIEnv* env, jint fd, int level, int optname, void* optval, socklen_t optlen) {, +    int rc = netty_unix_socket_getOption0(fd, level, optname, optval, optlen);, +    if (rc < 0) {, +        netty_unix_socket_getOptionHandleError(env, errno);, +    }, +    int rc = netty_unix_socket_setOption0(fd, level, optname, optval, len);, +        netty_unix_socket_setOptionHandleError(env, errno);, +    int rc = netty_unix_socket_setOption0(fd, IPPROTO_IPV6, IPV6_TCLASS, &optval, sizeof(optval));, +        netty_unix_socket_setOptionHandleError(env, errno);, +, +    /* Linux allows both ipv4 and ipv6 families to be set */, +#ifdef __linux__, +      else {, +        netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval));, +    }, +#endif, +    /* macOS may throw an error if IPv6 is supported and it is not consulted first */, +    if (netty_unix_socket_getOption0(fd, IPPROTO_IPV6, IPV6_TCLASS, &optval, sizeof(optval)) == -1) {, +        if (errno != ENOPROTOOPT || netty_unix_socket_getOption0(fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval)) == -1) {, +            netty_unix_socket_getOptionHandleError(env, errno);, +    }, +]