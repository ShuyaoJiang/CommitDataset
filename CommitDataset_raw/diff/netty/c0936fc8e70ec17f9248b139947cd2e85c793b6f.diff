[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +                int neededSpace = nioBufferCount + count;, +                if (neededSpace > nioBuffers.length) {, +                    this.nioBuffers = nioBuffers = expandNioBufferArray(nioBuffers, neededSpace, nioBufferCount);, +    private static ByteBuffer[] expandNioBufferArray(ByteBuffer[] array, int neededSpace, int size) {, +        int newCapacity = array.length;, +        do {, +            // double capacity until it is big enough, +            // See https://github.com/netty/netty/issues/1890, +            newCapacity <<= 1;, +, +        } while (neededSpace > newCapacity);, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +                int neededSpace = nioBufferCount + count;, +                if (neededSpace > nioBuffers.length) {, +                    this.nioBuffers = nioBuffers = expandNioBufferArray(nioBuffers, neededSpace, nioBufferCount);, +    private static ByteBuffer[] expandNioBufferArray(ByteBuffer[] array, int neededSpace, int size) {, +        int newCapacity = array.length;, +        do {, +            // double capacity until it is big enough, +            // See https://github.com/netty/netty/issues/1890, +            newCapacity <<= 1;, +, +        } while (neededSpace > newCapacity);, +, +++ b/transport/src/test/java/io/netty/channel/ChannelOutboundBufferTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.CompositeByteBuf;, +import io.netty.util.CharsetUtil;, +import org.junit.Test;, +, +import java.net.SocketAddress;, +import java.nio.ByteBuffer;, +, +import static io.netty.buffer.Unpooled.*;, +import static org.junit.Assert.*;, +, +public class ChannelOutboundBufferTest {, +, +    @Test, +    public void testEmptyNioBuffers() {, +        TestChannel channel = new TestChannel();, +        ChannelOutboundBuffer buffer = ChannelOutboundBuffer.newInstance(channel);, +        assertEquals(0, buffer.nioBufferCount());, +        ByteBuffer[] buffers = buffer.nioBuffers();, +        assertEquals(32, buffers.length);, +        for (ByteBuffer b: buffers) {, +            assertNull(b);, +        }, +        assertEquals(0, buffer.nioBufferCount());, +    }, +, +    @Test, +    public void testNioBuffersSingleBacked() {, +        TestChannel channel = new TestChannel();, +, +        ChannelOutboundBuffer buffer = ChannelOutboundBuffer.newInstance(channel);, +        assertEquals(0, buffer.nioBufferCount());, +        ByteBuffer[] buffers = buffer.nioBuffers();, +        assertEquals(32, buffers.length);, +        for (ByteBuffer b: buffers) {, +            assertNull(b);, +        }, +        assertEquals(0, buffer.nioBufferCount());, +, +        ByteBuf buf = copiedBuffer("buf1", CharsetUtil.US_ASCII);, +        buffer.addMessage(buf, channel.voidPromise());, +        buffers = buffer.nioBuffers();, +        assertEquals("Should still be 0 as not flushed yet", 0, buffer.nioBufferCount());, +        for (ByteBuffer b: buffers) {, +            assertNull(b);, +        }, +        buffer.addFlush();, +        buffers = buffer.nioBuffers();, +        assertEquals(32, buffers.length);, +        assertEquals("Should still be 0 as not flushed yet", 1, buffer.nioBufferCount());, +        for (int i = 0;  i < buffers.length; i++) {, +            if (i == 0) {, +                assertEquals(buffers[i], buf.internalNioBuffer(0, buf.readableBytes()));, +            } else {, +                assertNull(buffers[i]);, +            }]