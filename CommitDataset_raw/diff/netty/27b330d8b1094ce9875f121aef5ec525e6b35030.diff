[+++ /dev/null, +++ /dev/null, +++ b/common/src/test/templates/io/netty/util/collection/KObjectHashMapTest.template, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.util.collection;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Random;, +import java.util.Set;, +, +import static org.junit.Assert.*;, +, +/**, + * Tests for {@link @K@ObjectHashMap}., + */, +public class @K@ObjectHashMapTest {, +, +    private static class Value {, +        private final String name;, +, +        Value(String name) {, +            this.name = name;, +        }, +, +        @Override, +        public int hashCode() {, +            final int prime = 31;, +            int result = 1;, +            result = prime * result + (name == null ? 0 : name.hashCode());, +            return result;, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (this == obj) {, +                return true;, +            }, +            if (obj == null) {, +                return false;, +            }, +            if (getClass() != obj.getClass()) {, +                return false;, +            }, +            Value other = (Value) obj;, +            if (name == null) {, +                if (other.name != null) {, +                    return false;, +                }, +            } else if (!name.equals(other.name)) {, +                return false;, +            }, +            return true;, +        }, +    }, +, +    private @K@ObjectHashMap<Value> map;, +, +    @Before, +    public void setup() {, +        map = new @K@ObjectHashMap<Value>();, +    }, +, +    @Test, +    public void putNewMappingShouldSucceed() {, +        Value v = new Value("v");, +        @k@ key = 1;, +        assertNull(map.put(key, v));, +        assertEquals(1, map.size());, +        assertTrue(map.containsKey(key));, +        assertTrue(map.containsValue(v));, +        assertEquals(v, map.get(key));, +    }, +, +    @Test, +    public void putNewMappingShouldSucceed_mapApi() {, +        Value v = new Value("v");, +        @O@ key = (@O@)(@k@) 1;, +        assertNull(map.put(key, v));, +        assertEquals(1, map.size());, +        assertTrue(map.containsKey(key));]