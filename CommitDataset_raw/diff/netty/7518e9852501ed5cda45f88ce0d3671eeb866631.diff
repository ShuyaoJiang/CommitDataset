[+++ b/src/main/java/io/netty/bootstrap/Bootstrap.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.bootstrap;, +, +import static io.netty.channel.Channels.*;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.TreeMap;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFactory;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.ChannelPipelineFactory;, +import io.netty.util.ExternalResourceReleasable;, +, +/**, + * A helper class which initializes a {@link Channel}.  This class provides, + * the common data structure for its subclasses which actually initialize, + * {@link Channel}s and their child {@link Channel}s using the common data, + * structure.  Please refer to {@link ClientBootstrap}, {@link ServerBootstrap},, + * and {@link ConnectionlessBootstrap} for client side, server-side, and, + * connectionless (e.g. UDP) channel initialization respectively., + *, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + *, + * @apiviz.uses io.netty.channel.ChannelFactory, + */, +public class Bootstrap implements ExternalResourceReleasable {, +, +    private volatile ChannelFactory factory;, +    private volatile ChannelPipeline pipeline = pipeline();, +    private volatile ChannelPipelineFactory pipelineFactory = pipelineFactory(pipeline);, +    private volatile Map<String, Object> options = new HashMap<String, Object>();, +, +    /**, +     * Creates a new instance with no {@link ChannelFactory} set., +     * {@link #setFactory(ChannelFactory)} must be called at once before any, +     * I/O operation is requested., +     */, +    protected Bootstrap() {, +    }, +, +    /**, +     * Creates a new instance with the specified initial {@link ChannelFactory}., +     */, +    protected Bootstrap(ChannelFactory channelFactory) {, +        setFactory(channelFactory);, +    }, +, +    /**, +     * Returns the {@link ChannelFactory} that will be used to perform an, +     * I/O operation., +     *, +     * @throws IllegalStateException, +     *         if the factory is not set for this bootstrap yet., +     *         The factory can be set in the constructor or, +     *         {@link #setFactory(ChannelFactory)}., +     */, +    public ChannelFactory getFactory() {, +        ChannelFactory factory = this.factory;, +        if (factory == null) {, +            throw new IllegalStateException(, +                    "factory is not set yet.");, +        }, +        return factory;, +    }, +, +    /**, +     * Sets the {@link ChannelFactory} that will be used to perform an I/O, +     * operation.  This method can be called only once and can't be called at, +     * all if the factory was specified in the constructor., +     *, +     * @throws IllegalStateException, +     *         if the factory is already set, +     */, +    public void setFactory(ChannelFactory factory) {, +        if (factory == null) {, +            throw new NullPointerException("factory");, +        }]