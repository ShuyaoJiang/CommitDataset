[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +        final OpenSslEngine engine = new OpenSslEngine(ctx, alloc, isClient(), sessionContext(), apn, engineMap,, +                rejectRemoteInitiatedRenegotiation, peerHost, peerPort);, +        engineMap.add(engine);, +        return engine;, +     * Returns a new server-side {@link SSLEngine} with the current configuration., +        return newEngine(alloc, null, -1);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +        final OpenSslEngine engine = new OpenSslEngine(ctx, alloc, isClient(), sessionContext(), apn, engineMap,, +                rejectRemoteInitiatedRenegotiation, peerHost, peerPort);, +        engineMap.add(engine);, +        return engine;, +     * Returns a new server-side {@link SSLEngine} with the current configuration., +        return newEngine(alloc, null, -1);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import javax.net.ssl.SSLParameters;, +    private volatile String endPointIdentificationAlgorithm;, +    // Store as object as AlgorithmConstraints only exists since java 7., +    private volatile Object algorithmConstraints;, +, +        this(sslCtx, alloc, clientMode, sessionContext, apn, engineMap, rejectRemoteInitiatedRenegation, null, -1);, +    }, +, +    OpenSslEngine(long sslCtx, ByteBufAllocator alloc,, +                  boolean clientMode, OpenSslSessionContext sessionContext,, +                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,, +                  boolean rejectRemoteInitiatedRenegation, String peerHost, int peerPort) {, +        super(peerHost, peerPort);, +    public SSLParameters getSSLParameters() {, +        SSLParameters sslParameters = super.getSSLParameters();, +, +        if (PlatformDependent.javaVersion() >= 7) {, +            sslParameters.setEndpointIdentificationAlgorithm(endPointIdentificationAlgorithm);, +            SslParametersUtils.setAlgorithmConstraints(sslParameters, algorithmConstraints);, +        }, +        return sslParameters;, +    }, +, +    @Override, +    public void setSSLParameters(SSLParameters sslParameters) {, +        super.setSSLParameters(sslParameters);, +, +        if (PlatformDependent.javaVersion() >= 7) {, +            endPointIdentificationAlgorithm = sslParameters.getEndpointIdentificationAlgorithm();, +            algorithmConstraints = sslParameters.getAlgorithmConstraints();, +        }, +    }, +, +    @Override, +            return OpenSslEngine.this.getPeerHost();, +            return OpenSslEngine.this.getPeerPort();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +        final OpenSslEngine engine = new OpenSslEngine(ctx, alloc, isClient(), sessionContext(), apn, engineMap,, +                rejectRemoteInitiatedRenegotiation, peerHost, peerPort);, +        engineMap.add(engine);, +        return engine;, +     * Returns a new server-side {@link SSLEngine} with the current configuration., +        return newEngine(alloc, null, -1);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import javax.net.ssl.SSLParameters;, +    private volatile String endPointIdentificationAlgorithm;, +    // Store as object as AlgorithmConstraints only exists since java 7., +    private volatile Object algorithmConstraints;, +, +        this(sslCtx, alloc, clientMode, sessionContext, apn, engineMap, rejectRemoteInitiatedRenegation, null, -1);, +    }, +, +    OpenSslEngine(long sslCtx, ByteBufAllocator alloc,, +                  boolean clientMode, OpenSslSessionContext sessionContext,, +                  OpenSslApplicationProtocolNegotiator apn, OpenSslEngineMap engineMap,, +                  boolean rejectRemoteInitiatedRenegation, String peerHost, int peerPort) {, +        super(peerHost, peerPort);, +    public SSLParameters getSSLParameters() {, +        SSLParameters sslParameters = super.getSSLParameters();, +, +        if (PlatformDependent.javaVersion() >= 7) {, +            sslParameters.setEndpointIdentificationAlgorithm(endPointIdentificationAlgorithm);, +            SslParametersUtils.setAlgorithmConstraints(sslParameters, algorithmConstraints);, +        }, +        return sslParameters;, +    }, +, +    @Override, +    public void setSSLParameters(SSLParameters sslParameters) {, +        super.setSSLParameters(sslParameters);, +, +        if (PlatformDependent.javaVersion() >= 7) {, +            endPointIdentificationAlgorithm = sslParameters.getEndpointIdentificationAlgorithm();, +            algorithmConstraints = sslParameters.getAlgorithmConstraints();, +        }, +    }, +, +    @Override, +            return OpenSslEngine.this.getPeerHost();, +            return OpenSslEngine.this.getPeerPort();, +++ b/handler/src/main/java/io/netty/handler/ssl/SslParametersUtils.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,]