[+++ b/common/src/main/java/io/netty/util/Recycler.java, +    private static final int DEFAULT_INITIAL_MAX_CAPACITY_PER_THREAD = 32768; // Use 32k instances as default., +    private static final int DEFAULT_MAX_CAPACITY_PER_THREAD;, +        int maxCapacityPerThread = SystemPropertyUtil.getInt("io.netty.recycler.maxCapacityPerThread",, +                SystemPropertyUtil.getInt("io.netty.recycler.maxCapacity", DEFAULT_INITIAL_MAX_CAPACITY_PER_THREAD));, +        if (maxCapacityPerThread < 0) {, +            maxCapacityPerThread = DEFAULT_INITIAL_MAX_CAPACITY_PER_THREAD;, +, +        DEFAULT_MAX_CAPACITY_PER_THREAD = maxCapacityPerThread;, +            if (DEFAULT_MAX_CAPACITY_PER_THREAD == 0) {, +                logger.debug("-Dio.netty.recycler.maxCapacityPerThread: disabled");, +                logger.debug("-Dio.netty.recycler.maxCapacityPerThread: {}", DEFAULT_MAX_CAPACITY_PER_THREAD);, +        INITIAL_CAPACITY = min(DEFAULT_MAX_CAPACITY_PER_THREAD, 256);, +    private final int maxCapacityPerThread;, +            return new Stack<T>(Recycler.this, Thread.currentThread(), maxCapacityPerThread, maxSharedCapacityFactor,, +        this(DEFAULT_MAX_CAPACITY_PER_THREAD);, +    protected Recycler(int maxCapacityPerThread) {, +        this(maxCapacityPerThread, MAX_SHARED_CAPACITY_FACTOR);, +    protected Recycler(int maxCapacityPerThread, int maxSharedCapacityFactor) {, +        this(maxCapacityPerThread, maxSharedCapacityFactor, RATIO, MAX_DELAYED_QUEUES_PER_THREAD);, +    protected Recycler(int maxCapacityPerThread, int maxSharedCapacityFactor,, +                       int ratio, int maxDelayedQueuesPerThread) {, +        if (maxCapacityPerThread <= 0) {, +            this.maxCapacityPerThread = 0;, +            this.maxCapacityPerThread = maxCapacityPerThread;, +        if (maxCapacityPerThread == 0) {]