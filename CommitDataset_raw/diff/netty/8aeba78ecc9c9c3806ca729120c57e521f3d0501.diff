[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +import io.netty.handler.codec.http.QueryStringDecoder;, +                            attribute = getContentDispositionAttribute(values);, +    private static final String FILENAME_ENCODED = HttpHeaderValues.FILENAME.toString() + '*';, +, +    private Attribute getContentDispositionAttribute(String... values) {, +        String name = cleanString(values[0]);, +        String value = values[1];, +, +        // Filename can be token, quoted or encoded. See https://tools.ietf.org/html/rfc5987, +        if (HttpHeaderValues.FILENAME.contentEquals(name)) {, +            // Value is quoted or token. Strip if quoted:, +            int last = value.length() - 1;, +            if (last > 0 &&, +              value.charAt(0) == HttpConstants.DOUBLE_QUOTE &&, +              value.charAt(last) == HttpConstants.DOUBLE_QUOTE) {, +                value = value.substring(1, last);, +            }, +        } else if (FILENAME_ENCODED.equals(name)) {, +            try {, +                name = HttpHeaderValues.FILENAME.toString();, +                String[] split = value.split("'", 3);, +                value = QueryStringDecoder.decodeComponent(split[2], Charset.forName(split[0]));, +            } catch (ArrayIndexOutOfBoundsException e) {, +                 throw new ErrorDataDecoderException(e);, +            } catch (UnsupportedCharsetException e) {, +                throw new ErrorDataDecoderException(e);, +            }, +        } else {, +            // otherwise we need to clean the value, +            value = cleanString(value);, +        }, +        return factory.createAttribute(request, name, value);, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +import io.netty.handler.codec.http.QueryStringDecoder;, +                            attribute = getContentDispositionAttribute(values);, +    private static final String FILENAME_ENCODED = HttpHeaderValues.FILENAME.toString() + '*';, +, +    private Attribute getContentDispositionAttribute(String... values) {, +        String name = cleanString(values[0]);, +        String value = values[1];, +, +        // Filename can be token, quoted or encoded. See https://tools.ietf.org/html/rfc5987, +        if (HttpHeaderValues.FILENAME.contentEquals(name)) {, +            // Value is quoted or token. Strip if quoted:, +            int last = value.length() - 1;, +            if (last > 0 &&, +              value.charAt(0) == HttpConstants.DOUBLE_QUOTE &&, +              value.charAt(last) == HttpConstants.DOUBLE_QUOTE) {, +                value = value.substring(1, last);, +            }, +        } else if (FILENAME_ENCODED.equals(name)) {, +            try {, +                name = HttpHeaderValues.FILENAME.toString();, +                String[] split = value.split("'", 3);, +                value = QueryStringDecoder.decodeComponent(split[2], Charset.forName(split[0]));, +            } catch (ArrayIndexOutOfBoundsException e) {, +                 throw new ErrorDataDecoderException(e);, +            } catch (UnsupportedCharsetException e) {, +                throw new ErrorDataDecoderException(e);, +            }, +        } else {, +            // otherwise we need to clean the value, +            value = cleanString(value);, +        }, +        return factory.createAttribute(request, name, value);, +    }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java, +import java.net.URLEncoder;, +, +    // https://github.com/netty/netty/pull/7265, +    @Test, +    public void testDecodeContentDispositionFieldParameters() throws Exception {, +, +        final String boundary = "74e78d11b0214bdcbc2f86491eeb4902";, +, +        String encoding = "utf-8";, +        String filename = "attached_файл.txt";, +        String filenameEncoded = URLEncoder.encode(filename, encoding);, +, +        final String body = "--" + boundary + "\r\n" +, +          "Content-Disposition: form-data; name=\"file\"; filename*=" + encoding + "''" + filenameEncoded + "\r\n" +, +          "\r\n" +, +          "foo\r\n" +, +          "\r\n" +, +          "--" + boundary + "--";, +, +        final DefaultFullHttpRequest req = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,, +                                                                      HttpMethod.POST,, +                                                                      "http://localhost",, +                                                                      Unpooled.wrappedBuffer(body.getBytes()));, +, +        req.headers().add(HttpHeaderNames.CONTENT_TYPE, "multipart/form-data; boundary=" + boundary);, +        final DefaultHttpDataFactory inMemoryFactory = new DefaultHttpDataFactory(false);, +        final HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(inMemoryFactory, req);, +        assertFalse(decoder.getBodyHttpDatas().isEmpty());, +        InterfaceHttpData part1 = decoder.getBodyHttpDatas().get(0);]