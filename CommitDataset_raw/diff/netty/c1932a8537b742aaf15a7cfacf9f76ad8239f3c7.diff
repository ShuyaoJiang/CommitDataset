[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufInputStream.java, +import io.netty.util.ReferenceCounted;, +, +    private boolean closed;, +    /**, +     * To preserve backwards compatibility (which didn't transfer ownership) we support a conditional flag which, +     * indicates if {@link #buffer} should be released when this {@link InputStream} is closed., +     * However in future releases ownership should always be transferred and callers of this class should call, +     * {@link ReferenceCounted#retain()} if necessary., +     */, +    private boolean releaseOnClose;, +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param length The length of the buffer to use for this {@link InputStream}., +        this(buffer, length, false);, +    }, +, +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at the current, +     * {@code writerIndex}., +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param releaseOnClose {@code true} means that when {@link #close()} is called then {@link ByteBuf#release()} will, +     *                       be called on {@code buffer}., +     */, +    public ByteBufInputStream(ByteBuf buffer, boolean releaseOnClose) {, +        this(buffer, buffer.readableBytes(), releaseOnClose);, +    }, +, +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at, +     * {@code readerIndex + length}., +     * @param buffer The buffer which provides the content for this {@Link InputStream}., +     * @param length The length of the buffer to use for this {@link InputStream}., +     * @param releaseOnClose {@code true} means that when {@link #close()} is called then {@link ByteBuf#release()} will, +     *                       be called on {@code buffer}., +     * @throws IndexOutOfBoundsException, +     *         if {@code readerIndex + length} is greater than, +     *            {@code writerIndex}, +     */, +    public ByteBufInputStream(ByteBuf buffer, int length, boolean releaseOnClose) {, +            if (releaseOnClose) {, +                buffer.release();, +            }, +            if (releaseOnClose) {, +                buffer.release();, +            }, +        this.releaseOnClose = releaseOnClose;, +    public void close() throws IOException {, +        try {, +            super.close();, +        } finally {, +            // The Closable interface says "If the stream is already closed then invoking this method has no effect.", +            if (releaseOnClose && !closed) {, +                closed = true;, +                buffer.release();, +            }, +        }, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufInputStream.java, +import io.netty.util.ReferenceCounted;, +, +    private boolean closed;, +    /**, +     * To preserve backwards compatibility (which didn't transfer ownership) we support a conditional flag which, +     * indicates if {@link #buffer} should be released when this {@link InputStream} is closed., +     * However in future releases ownership should always be transferred and callers of this class should call, +     * {@link ReferenceCounted#retain()} if necessary., +     */, +    private boolean releaseOnClose;, +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param length The length of the buffer to use for this {@link InputStream}., +        this(buffer, length, false);, +    }, +, +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at the current, +     * {@code writerIndex}., +     * @param buffer The buffer which provides the content for this {@link InputStream}., +     * @param releaseOnClose {@code true} means that when {@link #close()} is called then {@link ByteBuf#release()} will, +     *                       be called on {@code buffer}., +     */, +    public ByteBufInputStream(ByteBuf buffer, boolean releaseOnClose) {, +        this(buffer, buffer.readableBytes(), releaseOnClose);, +    }, +, +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at, +     * {@code readerIndex + length}., +     * @param buffer The buffer which provides the content for this {@Link InputStream}., +     * @param length The length of the buffer to use for this {@link InputStream}., +     * @param releaseOnClose {@code true} means that when {@link #close()} is called then {@link ByteBuf#release()} will, +     *                       be called on {@code buffer}., +     * @throws IndexOutOfBoundsException]