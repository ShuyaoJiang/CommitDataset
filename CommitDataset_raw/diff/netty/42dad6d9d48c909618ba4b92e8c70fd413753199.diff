[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteEncoder.java, +import io.netty.channel.FileRegion;, +import java.io.EOFException;, +import java.io.IOException;, +import java.nio.ByteBuffer;, +import java.nio.channels.WritableByteChannel;, +, +    @Override, +    public void sendFile(ChannelHandlerContext ctx, FileRegion region, ChannelPromise promise) throws Exception {, +        long written = 0;, +        try {, +            for (;;) {, +                long localWritten = region.transferTo(new BufferChannel(ctx.outboundByteBuffer()), written);, +                if (localWritten == -1) {, +                    checkEOF(region, written);, +                    flush(ctx, promise);, +                    break;, +                }, +                written += localWritten;, +                if (written >= region.count()) {, +                    flush(ctx, promise);, +                    break;, +                }, +            }, +        } catch (IOException e) {, +            promise.setFailure(new EncoderException(e));, +        } finally {, +            region.release();, +        }, +    }, +, +    private static void checkEOF(FileRegion region, long writtenBytes) throws IOException {, +        if (writtenBytes < region.count()) {, +            throw new EOFException("Expected to be able to write ", +                    + region.count() + " bytes, but only wrote ", +                    + writtenBytes);, +        }, +    }, +, +    private static final class BufferChannel implements WritableByteChannel {, +        private final ByteBuf buffer;, +, +        BufferChannel(ByteBuf buffer) {, +            this.buffer = buffer;, +        }, +        @Override, +        public int write(ByteBuffer src) {, +            int bytes = src.remaining();, +            buffer.writeBytes(src);, +            return bytes;, +        }, +, +        @Override, +        public boolean isOpen() {, +            return buffer.refCnt() > 0;, +        }, +, +        @Override, +        public void close() {, +            // NOOP, +        }, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToByteEncoder.java, +import io.netty.channel.FileRegion;, +import java.io.EOFException;, +import java.io.IOException;, +import java.nio.ByteBuffer;, +import java.nio.channels.WritableByteChannel;, +, +    @Override, +    public void sendFile(ChannelHandlerContext ctx, FileRegion region, ChannelPromise promise) throws Exception {, +        long written = 0;, +        try {, +            for (;;) {, +                long localWritten = region.transferTo(new BufferChannel(ctx.outboundByteBuffer()), written);, +                if (localWritten == -1) {, +                    checkEOF(region, written);, +                    flush(ctx, promise);, +                    break;, +                }, +                written += localWritten;, +                if (written >= region.count()) {, +                    flush(ctx, promise);, +                    break;, +                }, +            }, +        } catch (IOException e) {, +            promise.setFailure(new EncoderException(e));, +        } finally {, +            region.release();, +        }, +    }, +, +    private static void checkEOF(FileRegion region, long writtenBytes) throws IOException {, +        if (writtenBytes < region.count()) {, +            throw new EOFException("Expected to be able to write ", +                    + region.count() + " bytes, but only wrote ", +                    + writtenBytes);, +        }]