[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import org.jboss.netty.channel.ChannelStateEvent;, +    public int getInterestOps() {, +        return channel.getInterestOps();, +    public boolean isWritable() {, +        return channel.isWritable();, +    }, +    , +    @Override, +    public ChannelFuture setInterestOps(int interestOps) {, +        // TODO: Wrap the future., +        return channel.setInterestOps(interestOps);, +    }, +, +    @Override, +    protected boolean setClosed() {, +        return super.setClosed();, +                        fireMessageReceived(channel, content);, +                    fireMessageReceived(channel, chunk.getContent());, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e), +                throws Exception {, +            if (sessionId != null) {, +                // TODO Reconnect., +            } else {, +                // sessionId is null if:, +                // 1) A user closed the channel explicitly, or, +                // 2) The server does not support JSESSIONID., +                channel.close();, +            }, +        }, +, +        @Override, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import org.jboss.netty.channel.ChannelStateEvent;, +    public int getInterestOps() {, +        return channel.getInterestOps();, +    public boolean isWritable() {, +        return channel.isWritable();, +    }, +    , +    @Override, +    public ChannelFuture setInterestOps(int interestOps) {, +        // TODO: Wrap the future., +        return channel.setInterestOps(interestOps);, +    }, +, +    @Override, +    protected boolean setClosed() {, +        return super.setClosed();, +                        fireMessageReceived(channel, content);, +                    fireMessageReceived(channel, chunk.getContent());, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e), +                throws Exception {, +            if (sessionId != null) {, +                // TODO Reconnect., +            } else {, +                // sessionId is null if:, +                // 1) A user closed the channel explicitly, or, +                // 2) The server does not support JSESSIONID., +                channel.close();, +            }, +        }, +, +        @Override, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannelFactory.java, +    private final ChannelSink sink = new HttpTunnelingClientSocketPipelineSink();, +    private final ClientSocketChannelFactory clientSocketChannelFactory;, +    public HttpTunnelingClientSocketChannelFactory(ClientSocketChannelFactory clientSocketChannelFactory) {, +        this.clientSocketChannelFactory = clientSocketChannelFactory;, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import org.jboss.netty.channel.ChannelStateEvent;, +    public int getInterestOps() {, +        return channel.getInterestOps();, +    public boolean isWritable() {, +        return channel.isWritable();, +    }, +    , +    @Override, +    public ChannelFuture setInterestOps(int interestOps) {, +        // TODO: Wrap the future., +        return channel.setInterestOps(interestOps);, +    }, +, +    @Override, +    protected boolean setClosed() {, +        return super.setClosed();, +                        fireMessageReceived(channel, content);, +                    fireMessageReceived(channel, chunk.getContent());, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e), +                throws Exception {, +            if (sessionId != null) {, +                // TODO Reconnect., +            } else {, +                // sessionId is null if:, +                // 1) A user closed the channel explicitly, or, +                // 2) The server does not support JSESSIONID.]