[+++ b/handler/src/test/java/io/netty/handler/flow/FlowControlHandlerTest.java, +import static java.util.concurrent.TimeUnit.*;, +            assertTrue(latch.await(1L, SECONDS));, +                peerRef.exchange(ctx.channel(), 1L, SECONDS);, +            Channel peer = peerRef.exchange(null, 1L, SECONDS);, +            assertTrue(latch.await(1L, SECONDS));, +            assertTrue(latch.await(1L, SECONDS));, +        final CountDownLatch msgRcvLatch1 = new CountDownLatch(1);, +        final CountDownLatch msgRcvLatch2 = new CountDownLatch(1);, +        final CountDownLatch msgRcvLatch3 = new CountDownLatch(1);, +        final CountDownLatch setAutoReadLatch1 = new CountDownLatch(1);, +        final CountDownLatch setAutoReadLatch2 = new CountDownLatch(1);, +            private int msgRcvCount;, +            private int expectedMsgCount;, +                peerRef.exchange(ctx.channel(), 1L, SECONDS);, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws InterruptedException {, +                if (msgRcvCount++ != expectedMsgCount) {, +                    return;, +                }, +                switch (msgRcvCount) {, +                    case 1:, +                        msgRcvLatch1.countDown();, +                        if (setAutoReadLatch1.await(1L, SECONDS)) {, +                            ++expectedMsgCount;, +                        }, +                        break;, +                    case 2:, +                        msgRcvLatch2.countDown();, +                        if (setAutoReadLatch2.await(1L, SECONDS)) {, +                            ++expectedMsgCount;, +                        }, +                        break;, +                    default:, +                        msgRcvLatch3.countDown();, +                        break;, +                }, +            Channel peer = peerRef.exchange(null, 1L, SECONDS);, +            assertTrue(msgRcvLatch1.await(1L, SECONDS));, +            setAutoReadLatch1.countDown();, +            assertTrue(msgRcvLatch1.await(1L, SECONDS));, +            setAutoReadLatch2.countDown();, +            assertTrue(msgRcvLatch3.await(1L, SECONDS));, +        final CountDownLatch msgRcvLatch1 = new CountDownLatch(1);, +        final CountDownLatch msgRcvLatch2 = new CountDownLatch(2);, +        final CountDownLatch msgRcvLatch3 = new CountDownLatch(3);, +                peerRef.exchange(ctx.channel(), 1L, SECONDS);, +                msgRcvLatch1.countDown();, +                msgRcvLatch2.countDown();, +                msgRcvLatch3.countDown();, +            Channel peer = peerRef.exchange(null, 1L, SECONDS);, +            assertTrue(msgRcvLatch1.await(1L, SECONDS));, +            assertTrue(msgRcvLatch2.await(1L, SECONDS));, +            assertTrue(msgRcvLatch3.await(1L, SECONDS));]