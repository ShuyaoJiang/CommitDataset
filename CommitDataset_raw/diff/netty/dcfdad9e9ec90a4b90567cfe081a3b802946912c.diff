[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.buffer.Unpooled;, +        final int bufferSize = 1024;, +        out.write(data, bufferSize, data.length - bufferSize);, +        FileRegion region = new DefaultFileRegion(, +                new FileInputStream(file).getChannel(), startOffset, data.length - bufferSize);, +        // Do write ByteBuf and FileRegion to be sure that mixed writes work, +        //, +        // See https://github.com/netty/netty/issues/2769, +            assertEquals(cc.voidPromise(), cc.write(Unpooled.wrappedBuffer(data, 0, bufferSize), cc.voidPromise()));, +            assertNotEquals(cc.voidPromise(), cc.write(Unpooled.wrappedBuffer(data, 0, bufferSize)));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.buffer.Unpooled;, +        final int bufferSize = 1024;, +        out.write(data, bufferSize, data.length - bufferSize);, +        FileRegion region = new DefaultFileRegion(, +                new FileInputStream(file).getChannel(), startOffset, data.length - bufferSize);, +        // Do write ByteBuf and FileRegion to be sure that mixed writes work, +        //, +        // See https://github.com/netty/netty/issues/2769, +            assertEquals(cc.voidPromise(), cc.write(Unpooled.wrappedBuffer(data, 0, bufferSize), cc.voidPromise()));, +            assertNotEquals(cc.voidPromise(), cc.write(Unpooled.wrappedBuffer(data, 0, bufferSize)));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +                // Release all written buffers., +                //, +                // It's important to loop only over nioBufferCnt as there may be other messages in the, +                // ChannelOutboundBuffer that are not of type ByteBuf and so was not included for gathering-write., +                //, +                // See https://github.com/netty/netty/issues/2769, +                for (int i = nioBufferCnt; i > 0; i --) {]