[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +import io.netty.channel.ChannelPromiseNotifier;, +import io.netty.util.concurrent.EventExecutor;, +    private volatile boolean finished;, +    public ChannelFuture close(final ChannelPromise promise) {, +        ChannelHandlerContext ctx = ctx();, +        EventExecutor executor = ctx.executor();, +        if (executor.inEventLoop()) {, +            return finishEncode(ctx, promise);, +        } else {, +            final ChannelPromise p = ctx.newPromise();, +            executor.execute(new Runnable() {, +                @Override, +                public void run() {, +                    ChannelFuture f = finishEncode(ctx(), p);, +                    f.addListener(new ChannelPromiseNotifier(promise));, +                }, +            });, +            return p;, +        }, +        return finished;, +        if (finished) {, +            final ChannelPromise promise) {, +        if (finished) {, +        finished = true;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +import io.netty.channel.ChannelPromiseNotifier;, +import io.netty.util.concurrent.EventExecutor;, +    private volatile boolean finished;, +    public ChannelFuture close(final ChannelPromise promise) {, +        ChannelHandlerContext ctx = ctx();, +        EventExecutor executor = ctx.executor();, +        if (executor.inEventLoop()) {, +            return finishEncode(ctx, promise);, +        } else {, +            final ChannelPromise p = ctx.newPromise();, +            executor.execute(new Runnable() {, +                @Override, +                public void run() {, +                    ChannelFuture f = finishEncode(ctx(), p);, +                    f.addListener(new ChannelPromiseNotifier(promise));, +                }, +            });, +            return p;, +        }, +        return finished;, +        if (finished) {, +            final ChannelPromise promise) {, +        if (finished) {, +        finished = true;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +import io.netty.channel.ChannelPromiseNotifier;, +import io.netty.util.concurrent.EventExecutor;, +    private volatile boolean finished;, +    public ChannelFuture close(final ChannelPromise promise) {, +        ChannelHandlerContext ctx = ctx();, +        EventExecutor executor = ctx.executor();, +        if (executor.inEventLoop()) {, +            return finishEncode(ctx, promise);, +        } else {, +            final ChannelPromise p = ctx.newPromise();, +            executor.execute(new Runnable() {, +                @Override, +                public void run() {, +                    ChannelFuture f = finishEncode(ctx(), p);, +                    f.addListener(new ChannelPromiseNotifier(promise));, +                }, +            });, +            return p;, +        }, +        return finished;, +        if (finished) {, +        if (finished) {, +        finished = true;]