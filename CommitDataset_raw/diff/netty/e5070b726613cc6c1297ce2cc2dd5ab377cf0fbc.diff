[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        inboundData.release();, +        Http2StreamActiveEvent activeEvent = inboundHandler.readInboundMessageOrUserEvent();, +        Http2HeadersFrame actualHeaders = inboundHandler.readInboundMessageOrUserEvent();, +        Http2ResetFrame actualRst = inboundHandler.readInboundMessageOrUserEvent();, +        Http2StreamClosedEvent closedEvent = inboundHandler.readInboundMessageOrUserEvent();, +        assertNull(inboundHandler.readInboundMessageOrUserEvent());, +        Http2StreamActiveEvent activeEvent = inboundHandler.readInboundMessageOrUserEvent();, +        Http2HeadersFrame headersFrame = inboundHandler.readInboundMessageOrUserEvent();, +        Http2StreamClosedEvent closedEvent = inboundHandler.readInboundMessageOrUserEvent();, +        assertNull(inboundHandler.readInboundMessageOrUserEvent());, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        inboundData.release();, +        Http2StreamActiveEvent activeEvent = inboundHandler.readInboundMessageOrUserEvent();, +        Http2HeadersFrame actualHeaders = inboundHandler.readInboundMessageOrUserEvent();, +        Http2ResetFrame actualRst = inboundHandler.readInboundMessageOrUserEvent();, +        Http2StreamClosedEvent closedEvent = inboundHandler.readInboundMessageOrUserEvent();, +        assertNull(inboundHandler.readInboundMessageOrUserEvent());, +        Http2StreamActiveEvent activeEvent = inboundHandler.readInboundMessageOrUserEvent();, +        Http2HeadersFrame headersFrame = inboundHandler.readInboundMessageOrUserEvent();, +        Http2StreamClosedEvent closedEvent = inboundHandler.readInboundMessageOrUserEvent();, +        assertNull(inboundHandler.readInboundMessageOrUserEvent());, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/LastInboundHandler.java, +import java.util.ArrayList;, +import java.util.List;, +    private final List<Object> queue = new ArrayList<Object>();, +        queue.add(msg);, +        queue.add(new UserEvent(evt));, +        for (int i = 0; i < queue.size(); i++) {, +            Object o = queue.get(i);, +            if (!(o instanceof UserEvent)) {, +                queue.remove(i);, +                return (T) o;, +        }, +, +        return null;, +        for (int i = 0; i < queue.size(); i++) {, +            Object o = queue.get(i);, +            if (o instanceof UserEvent) {, +                queue.remove(i);, +                return (T) ((UserEvent) o).evt;, +        }, +, +        return null;, +    public <T> T readInboundMessageOrUserEvent() {, +        if (queue.isEmpty()) {, +            return null;, +        Object o = queue.remove(0);, +        if (o instanceof UserEvent) {, +            return (T) ((UserEvent) o).evt;, +        }, +        return (T) o;, +        while ((o = readInboundMessageOrUserEvent()) != null) {, +, +    private static final class UserEvent {, +        private final Object evt;, +, +        UserEvent(Object evt) {, +            this.evt = evt;, +        }, +    }]