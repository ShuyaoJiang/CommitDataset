[+++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCodecUtil.java, +import java.util.List;, +, +    static boolean isTransferEncodingChunked(HttpMessage m) {, +        List<String> chunked = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING);, +        if (chunked.isEmpty()) {, +            return false;, +        }, +, +        for (String v: chunked) {, +            if (v.equalsIgnoreCase(HttpHeaders.Values.CHUNKED)) {, +                return true;, +            }, +        }, +        return false;, +    }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +        } else {, +            return HttpCodecUtil.isTransferEncodingChunked(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpCodecUtil.java, +import java.util.List;, +, +    static boolean isTransferEncodingChunked(HttpMessage m) {, +        List<String> chunked = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING);, +        if (chunked.isEmpty()) {, +            return false;, +        }, +, +        for (String v: chunked) {, +            if (v.equalsIgnoreCase(HttpHeaders.Values.CHUNKED)) {, +                return true;, +            }, +        }, +        return false;, +    }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageEncoder.java, +@ChannelPipelineCoverage("one"), +    private volatile boolean chunked;, +, +            HttpMessage m = (HttpMessage) msg;, +            boolean chunked = this.chunked = HttpCodecUtil.isTransferEncodingChunked(m);, +            encodeInitialLine(header, m);, +            encodeHeaders(header, m);, +            ChannelBuffer content = m.getContent();, +            } else if (chunked) {, +                throw new IllegalArgumentException(, +                        "HttpMessage.content must be empty " +, +                        "if Transfer-Encoding is chunked.");, +            if (chunked) {, +                    chunked = false;, +            } else {, +                if (chunk == HttpChunk.LAST_CHUNK) {, +                    return null;, +                } else {, +                    return chunk.getContent();, +                }, +            }, +]