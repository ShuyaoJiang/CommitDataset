[+++ b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java, +import io.netty.util.internal.ObjectUtil;, +    static final IllegalStateException POOL_CLOSED_ON_RELEASE_EXCEPTION = ThrowableUtil.unknownStackTrace(, +            new IllegalStateException("FixedChannelPooled was closed"),, +            FixedChannelPool.class, "release(...)");, +    static final IllegalStateException POOL_CLOSED_ON_ACQUIRE_EXCEPTION = ThrowableUtil.unknownStackTrace(, +            new IllegalStateException("FixedChannelPooled was closed"),, +            FixedChannelPool.class, "acquire0(...)");, +            promise.setFailure(POOL_CLOSED_ON_ACQUIRE_EXCEPTION);, +        ObjectUtil.checkNotNull(promise, "promise");, +                    promise.setFailure(POOL_CLOSED_ON_RELEASE_EXCEPTION);, +        return promise;, +                originalPromise.setFailure(POOL_CLOSED_ON_ACQUIRE_EXCEPTION);, +++ b/transport/src/main/java/io/netty/channel/pool/FixedChannelPool.java, +import io.netty.util.internal.ObjectUtil;, +    static final IllegalStateException POOL_CLOSED_ON_RELEASE_EXCEPTION = ThrowableUtil.unknownStackTrace(, +            new IllegalStateException("FixedChannelPooled was closed"),, +            FixedChannelPool.class, "release(...)");, +    static final IllegalStateException POOL_CLOSED_ON_ACQUIRE_EXCEPTION = ThrowableUtil.unknownStackTrace(, +            new IllegalStateException("FixedChannelPooled was closed"),, +            FixedChannelPool.class, "acquire0(...)");, +            promise.setFailure(POOL_CLOSED_ON_ACQUIRE_EXCEPTION);, +        ObjectUtil.checkNotNull(promise, "promise");, +                    promise.setFailure(POOL_CLOSED_ON_RELEASE_EXCEPTION);, +        return promise;, +                originalPromise.setFailure(POOL_CLOSED_ON_ACQUIRE_EXCEPTION);, +++ b/transport/src/test/java/io/netty/channel/pool/FixedChannelPoolTest.java, +        try {, +            fail();, +        } catch (IllegalStateException e) {, +            assertSame(FixedChannelPool.POOL_CLOSED_ON_RELEASE_EXCEPTION, e);, +        }, +        // Since the pool is closed, the Channel should have been closed as well.]