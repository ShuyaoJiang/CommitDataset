[+++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Gets a 32-bit floating point number at the specified absolute, +     * {@code index} in this buffer in Little Endian Byte Order., +     * This method does not modify {@code readerIndex} or, +     * {@code writerIndex} of this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         {@code index + 4} is greater than {@code this.capacity}, +     */, +    public float getFloatLE(int index) {, +        return Float.intBitsToFloat(getIntLE(index));, +    }, +, +    /**, +     * Gets a 64-bit floating point number at the specified absolute, +     * {@code index} in this buffer in Little Endian Byte Order., +     * This method does not modify {@code readerIndex} or, +     * {@code writerIndex} of this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         {@code index + 8} is greater than {@code this.capacity}, +     */, +    public double getDoubleLE(int index) {, +        return Double.longBitsToDouble(getLongLE(index));, +    }, +, +    /**, +     * Sets the specified 32-bit floating-point number at the specified, +     * absolute {@code index} in this buffer in Little Endian Byte Order., +     * This method does not modify {@code readerIndex} or {@code writerIndex} of, +     * this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         {@code index + 4} is greater than {@code this.capacity}, +     */, +    public ByteBuf setFloatLE(int index, float value) {, +        return setIntLE(index, Float.floatToRawIntBits(value));, +    }, +, +    /**, +     * Sets the specified 64-bit floating-point number at the specified, +     * absolute {@code index} in this buffer in Little Endian Byte Order., +     * This method does not modify {@code readerIndex} or {@code writerIndex} of, +     * this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         {@code index + 8} is greater than {@code this.capacity}, +     */, +    public ByteBuf setDoubleLE(int index, double value) {, +        return setLongLE(index, Double.doubleToRawLongBits(value));, +    }, +, +    /**, +     * Gets a 32-bit floating point number at the current {@code readerIndex}, +     * in Little Endian Byte Order and increases the {@code readerIndex}, +     * by {@code 4} in this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code this.readableBytes} is less than {@code 4}, +     */, +    public float readFloatLE() {, +        return Float.intBitsToFloat(readIntLE());, +    }, +, +    /**, +     * Gets a 64-bit floating point number at the current {@code readerIndex}, +     * in Little Endian Byte Order and increases the {@code readerIndex}, +     * by {@code 8} in this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code this.readableBytes} is less than {@code 8}, +     */, +    public double readDoubleLE() {, +        return Double.longBitsToDouble(readLongLE());, +    }, +, +    /**, +     * Sets the specified 32-bit floating point number at the current, +     * {@code writerIndex} in Little Endian Byte Order and increases, +     * the {@code writerIndex} by {@code 4} in this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code this.writableBytes} is less than {@code 4}, +     */, +    public ByteBuf writeFloatLE(float value) {, +        return writeIntLE(Float.floatToRawIntBits(value));, +    }, +, +    /**, +     * Sets the specified 64-bit floating point number at the current, +     * {@code writerIndex} in Little Endian Byte Order and increases, +     * the {@code writerIndex} by {@code 8} in this buffer., +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code this.writableBytes} is less than {@code 8}, +     */]