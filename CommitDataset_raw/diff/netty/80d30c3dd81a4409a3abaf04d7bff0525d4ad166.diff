[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +            int size = futures.size();, +            for (int i = 0; i < size; i++) {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +            int size = futures.size();, +            for (int i = 0; i < size; i++) {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +                    for (int i = 0;  i < msgsCopy.length; i++) {, +                        peer.inboundBuffer.add(msgsCopy[i]);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +            int size = futures.size();, +            for (int i = 0; i < size; i++) {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +                    for (int i = 0;  i < msgsCopy.length; i++) {, +                        peer.inboundBuffer.add(msgsCopy[i]);, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java, +            int size = readBuf.size();, +            for (int i = 0; i < size; i ++) {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +            int size = futures.size();, +            for (int i = 0; i < size; i++) {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +                    for (int i = 0;  i < msgsCopy.length; i++) {, +                        peer.inboundBuffer.add(msgsCopy[i]);, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java, +            int size = readBuf.size();, +            for (int i = 0; i < size; i ++) {, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +            int readyOps = k.readyOps();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    static final class CloseFuture extends DefaultChannelPromise {, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        Entry e = buffer[flushed];, +        flushed = flushed + 1 & buffer.length - 1;, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +            int size = futures.size();, +            for (int i = 0; i < size; i++) {, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +                    for (int i = 0;  i < msgsCopy.length; i++) {, +                        peer.inboundBuffer.add(msgsCopy[i]);, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioMessageChannel.java, +            int size = readBuf.size();, +            for (int i = 0; i < size; i ++) {, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +            int readyOps = k.readyOps();, +++ b/transport/src/main/java/io/netty/channel/oio/AbstractOioMessageChannel.java, +        int size = readBuf.size();, +        for (int i = 0; i < size; i ++) {]