[+++ b/src/docbook/module/start.xml, +          &ChannelUpstreamHandler; and &ChannelDownstreamHandler;., +          &SimpleChannelHandler; provides various event handler methods that, +          you can override.  For now, it's just enough to extend, +          &SimpleChannelHandler; rather than to implement the handler, +          interfaces directly., +public class TimeEncoder implements &SimpleChannelHandler; {, +    public void writeRequested(&ChannelHandlerContext; ctx, &MessageEvent;<co id="example.time6.co2"/> e) {, +        UnixTime time = (UnixTime) e.getMessage();, +        &Channels;.write(ctx, e.getChannel(), e.getFuture(), buf);<co id="example.time6.co3"/>, +          An encoder overrides the <methodname>writeRequested</methodname>, +          method to intercept a write request.  Please note that the, +          &MessageEvent; parameter here is the same type which was specified, +          in <methodname>messageReceived</methodname> but they are interpreted, +          differently.  A &ChannelEvent; can be either an, +          <firstterm>upstream</firstterm> or <firstterm>downstream</firstterm>, +          event depending on the direction where the event flows., +          For instance, a &MessageEvent; can be an upstream event when called, +          for <methodname>messageReceived</methodname> or a downstream event, +          when called for <methodname>writeRequested</methodname>., +          Please refer to the API reference to learn more about the difference, +          between a upstream event and a downstream event.]