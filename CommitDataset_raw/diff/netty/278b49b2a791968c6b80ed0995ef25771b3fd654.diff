[+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +                try {, +                } catch (IOException e) {, +                    // If we receive an IOException here its because the Selector is messed up. Let's rebuild, +                    // the selector and retry. https://github.com/netty/netty/issues/8566, +                    rebuildSelector0();, +                    handleLoopException(e);, +                    continue;, +                }, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +                try {, +                } catch (IOException e) {, +                    // If we receive an IOException here its because the Selector is messed up. Let's rebuild, +                    // the selector and retry. https://github.com/netty/netty/issues/8566, +                    rebuildSelector0();, +                    handleLoopException(e);, +                    continue;, +                }, +++ b/transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java, +import io.netty.channel.SelectStrategy;, +import io.netty.channel.SelectStrategyFactory;, +import io.netty.util.IntSupplier;, +import io.netty.util.concurrent.DefaultThreadFactory;, +import java.io.IOException;, +import java.nio.channels.spi.SelectorProvider;, +    @Test, +    public void testRebuildSelectorOnIOException() {, +        SelectStrategyFactory selectStrategyFactory = new SelectStrategyFactory() {, +            @Override, +            public SelectStrategy newSelectStrategy() {, +                return new SelectStrategy() {, +, +                    private boolean thrown;, +, +                    @Override, +                    public int calculateStrategy(IntSupplier selectSupplier, boolean hasTasks) throws Exception {, +                        if (!thrown) {, +                            thrown = true;, +                            throw new IOException();, +                        }, +                        return -1;, +                    }, +                };, +            }, +        };, +, +        EventLoopGroup group = new NioEventLoopGroup(1, new DefaultThreadFactory("ioPool"),, +                                                     SelectorProvider.provider(), selectStrategyFactory);, +        final NioEventLoop loop = (NioEventLoop) group.next();, +        try {, +            Channel channel = new NioServerSocketChannel();, +            Selector selector = loop.unwrappedSelector();, +, +            loop.register(channel).syncUninterruptibly();, +, +            Selector newSelector = ((NioEventLoop) channel.eventLoop()).unwrappedSelector();, +            assertTrue(newSelector.isOpen());, +            assertNotSame(selector, newSelector);, +            assertFalse(selector.isOpen());, +, +            channel.close().syncUninterruptibly();, +        } finally {, +            group.shutdownGracefully();, +        }, +    }, +]