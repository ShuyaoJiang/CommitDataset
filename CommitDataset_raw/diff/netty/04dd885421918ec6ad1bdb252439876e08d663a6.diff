[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpEncoder.java, + * SPDY specific headers must be added to pushed {@link HttpRequest}s:, +            last = spdySynStreamFrame.isLast() || spdySynStreamFrame.isUnidirectional();, +            SpdyHeadersFrame spdyHeadersFrame = createHeadersFrame(httpResponse);, +            out.add(spdyHeadersFrame);, +            last = spdyHeadersFrame.isLast();, +                    spdyDataFrame.setLast(true);, +                    spdyHeadersFrame.setLast(true);, +                    // Write DATA frame and append HEADERS frame, +                    out.add(spdyHeadersFrame);, +    @SuppressWarnings("deprecation"), +    private SpdySynStreamFrame createSynStreamFrame(HttpRequest httpRequest) throws Exception {, +        // Get the Stream-ID, Associated-To-Stream-ID, Priority, and scheme from the headers, +        final HttpHeaders httpHeaders = httpRequest.headers();, +        int streamId = httpHeaders.getInt(Names.STREAM_ID);, +        int associatedToStreamId = httpHeaders.getInt(Names.ASSOCIATED_TO_STREAM_ID, 0);, +        byte priority = (byte) httpHeaders.getInt(Names.PRIORITY, 0);, +        CharSequence scheme = httpHeaders.get(Names.SCHEME);, +                new DefaultSpdySynStreamFrame(streamId, associatedToStreamId, priority);, +        frameHeaders.setObject(VERSION, httpRequest.protocolVersion());, +        CharSequence host = httpHeaders.get(HttpHeaderNames.HOST);, +        if (associatedToStreamId == 0) {, +            spdySynStreamFrame.setLast(isLast(httpRequest));, +        } else {, +            spdySynStreamFrame.setUnidirectional(true);, +        }, +    @SuppressWarnings("deprecation"), +    private SpdyHeadersFrame createHeadersFrame(HttpResponse httpResponse) throws Exception {, +        int streamId = httpHeaders.getInt(Names.STREAM_ID);, +        SpdyHeadersFrame spdyHeadersFrame;, +        if (SpdyCodecUtil.isServerId(streamId)) {, +            spdyHeadersFrame = new DefaultSpdyHeadersFrame(streamId);, +        } else {, +            spdyHeadersFrame = new DefaultSpdySynReplyFrame(streamId);, +        }, +        SpdyHeaders frameHeaders = spdyHeadersFrame.headers();, +            spdyHeadersFrame.headers().add(entry.getKey(), entry.getValue());, +        currentStreamId = streamId;, +        spdyHeadersFrame.setLast(isLast(httpResponse));, +        return spdyHeadersFrame;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpEncoder.java, + * SPDY specific headers must be added to pushed {@link HttpRequest}s:, +            last = spdySynStreamFrame.isLast() || spdySynStreamFrame.isUnidirectional();, +            SpdyHeadersFrame spdyHeadersFrame = createHeadersFrame(httpResponse);, +            out.add(spdyHeadersFrame);, +            last = spdyHeadersFrame.isLast();, +                    spdyDataFrame.setLast(true);, +                    spdyHeadersFrame.setLast(true);, +                    // Write DATA frame and append HEADERS frame, +                    out.add(spdyHeadersFrame);, +    @SuppressWarnings("deprecation"), +    private SpdySynStreamFrame createSynStreamFrame(HttpRequest httpRequest) throws Exception {, +        // Get the Stream-ID, Associated-To-Stream-ID, Priority, and scheme from the headers, +        final HttpHeaders httpHeaders = httpRequest.headers();, +        int streamId = httpHeaders.getInt(Names.STREAM_ID);, +        int associatedToStreamId = httpHeaders.getInt(Names.ASSOCIATED_TO_STREAM_ID, 0);, +        byte priority = (byte) httpHeaders.getInt(Names.PRIORITY, 0);, +        CharSequence scheme = httpHeaders.get(Names.SCHEME);, +                new DefaultSpdySynStreamFrame(streamId, associatedToStreamId, priority);, +        frameHeaders.setObject(VERSION, httpRequest.protocolVersion());, +        CharSequence host = httpHeaders.get(HttpHeaderNames.HOST);, +        if (associatedToStreamId == 0) {, +            spdySynStreamFrame.setLast(isLast(httpRequest));, +        } else {, +            spdySynStreamFrame.setUnidirectional(true);, +        }, +    @SuppressWarnings("deprecation"), +    private SpdyHeadersFrame createHeadersFrame(HttpResponse httpResponse) throws Exception {, +        int streamId = httpHeaders.getInt(Names.STREAM_ID);, +        SpdyHeadersFrame spdyHeadersFrame;, +        if (SpdyCodecUtil.isServerId(streamId)) {, +            spdyHeadersFrame = new DefaultSpdyHeadersFrame(streamId);, +        } else {, +            spdyHeadersFrame = new DefaultSpdySynReplyFrame(streamId);, +        }, +        SpdyHeaders frameHeaders = spdyHeadersFrame.headers();, +            spdyHeadersFrame.headers().add(entry.getKey(), entry.getValue());, +        currentStreamId = streamId;, +        spdyHeadersFrame.setLast(isLast(httpResponse));, +        return spdyHeadersFrame;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpHeaders.java]