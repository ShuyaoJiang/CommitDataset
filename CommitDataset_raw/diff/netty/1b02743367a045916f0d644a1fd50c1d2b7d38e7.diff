[+++ b/example/src/main/java/io/netty/example/discard/DiscardClient.java, +    private final String host;, +    private final int port;, +    private final int firstMessageSize;, +, +    public DiscardClient(String host, int port, int firstMessageSize) {, +        this.host = host;, +        this.port = port;, +        this.firstMessageSize = firstMessageSize;, +    }, +, +    public void run() {, +        // Configure the client., +        ClientBootstrap bootstrap = new ClientBootstrap(, +                new NioClientSocketChannelFactory(, +                        Executors.newCachedThreadPool(),, +                        Executors.newCachedThreadPool()));, +, +        // Set up the pipeline factory., +        bootstrap.setPipelineFactory(new ChannelPipelineFactory() {, +            public ChannelPipeline getPipeline() throws Exception {, +                return Channels.pipeline(, +                        new DiscardClientHandler(firstMessageSize));, +            }, +        });, +, +        // Start the connection attempt., +        ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port));, +, +        // Wait until the connection is closed or the connection attempt fails., +        future.getChannel().getCloseFuture().awaitUninterruptibly();, +, +        // Shut down thread pools to exit., +        bootstrap.releaseExternalResources();, +    }, +, +++ b/example/src/main/java/io/netty/example/discard/DiscardClient.java, +    private final String host;, +    private final int port;, +    private final int firstMessageSize;, +, +    public DiscardClient(String host, int port, int firstMessageSize) {, +        this.host = host;, +        this.port = port;, +        this.firstMessageSize = firstMessageSize;, +    }, +, +    public void run() {, +        // Configure the client., +        ClientBootstrap bootstrap = new ClientBootstrap(, +                new NioClientSocketChannelFactory(, +                        Executors.newCachedThreadPool(),, +                        Executors.newCachedThreadPool()));, +, +        // Set up the pipeline factory., +        bootstrap.setPipelineFactory(new ChannelPipelineFactory() {, +            public ChannelPipeline getPipeline() throws Exception {, +                return Channels.pipeline(, +                        new DiscardClientHandler(firstMessageSize));, +            }, +        });, +, +        // Start the connection attempt., +        ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port));, +, +        // Wait until the connection is closed or the connection attempt fails., +        future.getChannel().getCloseFuture().awaitUninterruptibly();, +, +        // Shut down thread pools to exit., +        bootstrap.releaseExternalResources();, +    }, +, +++ b/example/src/main/java/io/netty/example/discard/DiscardServer.java, +    private final int port;, +, +    public DiscardServer(int port) {, +        this.port = port;, +        bootstrap.bind(new InetSocketAddress(port));, +    }, +, +    public static void main(String[] args) throws Exception {, +        int port;, +        if (args.length > 0) {, +            port = Integer.parseInt(args[0]);, +        } else {, +            port = 8080;, +        }, +        new DiscardServer(port).run();, +++ b/example/src/main/java/io/netty/example/discard/DiscardClient.java, +    private final String host;, +    private final int port;, +    private final int firstMessageSize;, +, +    public DiscardClient(String host, int port, int firstMessageSize) {, +        this.host = host;, +        this.port = port;, +        this.firstMessageSize = firstMessageSize;, +    }, +, +    public void run() {]