[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRecordType;, +import java.util.LinkedHashSet;, +import java.util.Set;, +    private final boolean cnameFollowARecords;, +    private final boolean cnameFollowAAAARecords;, +    private final InternetProtocolFamily preferredAddressType;, +    private final DnsRecordType[] resolveRecordTypes;, +        boolean cnameFollowARecords = false;, +        boolean cnameFollowAAAARecords = false;, +        // Use LinkedHashSet to maintain correct ordering., +        Set<DnsRecordType> recordTypes = new LinkedHashSet<DnsRecordType>(resolvedAddressTypes.length);, +        for (InternetProtocolFamily family: resolvedAddressTypes) {, +            switch (family) {, +                case IPv4:, +                    cnameFollowARecords = true;, +                    recordTypes.add(DnsRecordType.A);, +                    break;, +                case IPv6:, +                    cnameFollowAAAARecords = true;, +                    recordTypes.add(DnsRecordType.AAAA);, +                    break;, +                default:, +                    throw new Error();, +            }, +        }, +, +        // One of both must be always true., +        assert cnameFollowARecords || cnameFollowAAAARecords;, +        this.cnameFollowAAAARecords = cnameFollowAAAARecords;, +        this.cnameFollowARecords = cnameFollowARecords;, +        resolveRecordTypes = recordTypes.toArray(new DnsRecordType[recordTypes.size()]);, +        preferredAddressType = resolvedAddressTypes[0];, +, +    final boolean isCnameFollowAAAARecords() {, +        return cnameFollowAAAARecords;, +    }, +, +    final boolean isCnameFollowARecords() {, +        return cnameFollowARecords;, +    }, +, +    final InternetProtocolFamily preferredAddressType() {, +        return preferredAddressType;, +    }, +, +    final DnsRecordType[] resolveRecordTypes() {, +        return resolveRecordTypes;, +    }, +, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRecordType;, +import java.util.LinkedHashSet;, +import java.util.Set;, +    private final boolean cnameFollowARecords;, +    private final boolean cnameFollowAAAARecords;, +    private final InternetProtocolFamily preferredAddressType;, +    private final DnsRecordType[] resolveRecordTypes;, +        boolean cnameFollowARecords = false;, +        boolean cnameFollowAAAARecords = false;, +        // Use LinkedHashSet to maintain correct ordering., +        Set<DnsRecordType> recordTypes = new LinkedHashSet<DnsRecordType>(resolvedAddressTypes.length);, +        for (InternetProtocolFamily family: resolvedAddressTypes) {, +            switch (family) {, +                case IPv4:, +                    cnameFollowARecords = true;, +                    recordTypes.add(DnsRecordType.A);, +                    break;, +                case IPv6:, +                    cnameFollowAAAARecords = true;, +                    recordTypes.add(DnsRecordType.AAAA);, +                    break;, +                default:, +                    throw new Error();, +            }, +        }, +, +        // One of both must be always true., +        assert cnameFollowARecords || cnameFollowAAAARecords;, +        this.cnameFollowAAAARecords = cnameFollowAAAARecords;, +        this.cnameFollowARecords = cnameFollowARecords;, +        resolveRecordTypes = recordTypes.toArray(new DnsRecordType[recordTypes.size()]);, +        preferredAddressType = resolvedAddressTypes[0];, +, +    final boolean isCnameFollowAAAARecords() {, +        return cnameFollowAAAARecords;, +    }, +, +    final boolean isCnameFollowARecords() {, +        return cnameFollowARecords;, +    }, +, +    final InternetProtocolFamily preferredAddressType() {, +        return preferredAddressType;, +    }, +, +    final DnsRecordType[] resolveRecordTypes() {, +        return resolveRecordTypes;, +    }, +]