[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        this.ndots = checkPositiveOrZero(ndots, "ndots");, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        this.ndots = checkPositiveOrZero(ndots, "ndots");, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +   * The default value is {@code 1}., +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        this.ndots = checkPositiveOrZero(ndots, "ndots");, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +   * The default value is {@code 1}., +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +            if (parent.ndots() == 0) {, +                internalResolve(promise);, +            } else {, +    }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +        this.ndots = checkPositiveOrZero(ndots, "ndots");, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +   * The default value is {@code 1}., +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +            if (parent.ndots() == 0) {, +                internalResolve(promise);, +            } else {, +    }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/SearchDomainTest.java, +    private DnsNameResolver resolver;, +        if (resolver != null) {, +            resolver.close();, +        }, +        resolver = newResolver().searchDomains(Collections.singletonList("foo.com")).build();, +        resolver = newResolver().searchDomains(Collections.singletonList("foo.com")).build();, +        resolver = newResolver().searchDomains(Arrays.asList("foo.com", "bar.com")).build();, +        resolver = newResolver().searchDomains(Collections.singleton("foo.com")).ndots(2).build();, +    @Test, +    public void testSearchDomainWithNdots0() throws Exception {, +        Set<String> domains = new HashSet<String>();, +        domains.add("host1");, +        domains.add("host1.foo.com");, +        domains.add("host2.foo.com");, +, +        TestDnsServer.MapRecordStoreA store = new TestDnsServer.MapRecordStoreA(domains);, +        dnsServer = new TestDnsServer(store);, +        dnsServer.start();, +, +        resolver = newResolver().searchDomains(Collections.singleton("foo.com")).ndots(0).build();, +, +        // "host1" resolves directly as ndots = 0, +        String resolved = assertResolve(resolver, "host1");, +        assertEquals(store.getAddress("host1"), resolved);, +, +        // "host1.foo.com" resolves to host1.foo, +        resolved = assertResolve(resolver, "host1.foo.com");, +        assertEquals(store.getAddress("host1.foo.com"), resolved);, +, +        // "host2" resolves to host2.foo.com with the foo.com search domain, +        resolved = assertResolve(resolver, "host2");, +        assertEquals(store.getAddress("host2.foo.com"), resolved);, +    }, +]