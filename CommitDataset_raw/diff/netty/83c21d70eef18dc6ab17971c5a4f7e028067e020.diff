[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +                    "minWritableBytes: %d (expected: 0+)", minWritableBytes));, +            throw new IllegalArgumentException(String.format(, +                    "minWritableBytes: %d (exceeds maxCapacity(%d))", minWritableBytes, maxCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +                    "minWritableBytes: %d (expected: 0+)", minWritableBytes));, +            throw new IllegalArgumentException(String.format(, +                    "minWritableBytes: %d (exceeds maxCapacity(%d))", minWritableBytes, maxCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Otherwise:, +     * <ul>, +     * <li>a non-dynamic buffer will throw an {@link IndexOutOfBoundsException}.</li>, +     * <li>a dynamic buffer will expand its capacity so that the number of the, +     *     {@link #writableBytes() writable bytes} becomes equal to or greater, +     *     than the specified value. The expansion involves the reallocation of, +     *     the internal buffer and consequently memory copy.</li>, +     * </ul>, +     * @param writableBytes, +     *         if {@linkplain #writableBytes() the writable bytes} of this, +     *         buffer is less than the specified value and if this buffer is, +     *         not a dynamic buffer, +    void ensureWritableBytes(int writableBytes);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +                    "minWritableBytes: %d (expected: 0+)", minWritableBytes));, +            throw new IllegalArgumentException(String.format(, +                    "minWritableBytes: %d (exceeds maxCapacity(%d))", minWritableBytes, maxCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Otherwise:, +     * <ul>, +     * <li>a non-dynamic buffer will throw an {@link IndexOutOfBoundsException}.</li>, +     * <li>a dynamic buffer will expand its capacity so that the number of the, +     *     {@link #writableBytes() writable bytes} becomes equal to or greater, +     *     than the specified value. The expansion involves the reallocation of, +     *     the internal buffer and consequently memory copy.</li>, +     * </ul>, +     * @param writableBytes, +     *         if {@linkplain #writableBytes() the writable bytes} of this, +     *         buffer is less than the specified value and if this buffer is, +     *         not a dynamic buffer, +    void ensureWritableBytes(int writableBytes);, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        // Remove or replace the first readable component with a new slice., +        if (adjustment == c.length) {, +            // new slice would be empty, so remove instead, +            components.remove(0);, +        } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +                    "minWritableBytes: %d (expected: 0+)", minWritableBytes));, +            throw new IllegalArgumentException(String.format(, +                    "minWritableBytes: %d (exceeds maxCapacity(%d))", minWritableBytes, maxCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Otherwise:, +     * <ul>, +     * <li>a non-dynamic buffer will throw an {@link IndexOutOfBoundsException}.</li>, +     * <li>a dynamic buffer will expand its capacity so that the number of the, +     *     {@link #writableBytes() writable bytes} becomes equal to or greater, +     *     than the specified value. The expansion involves the reallocation of, +     *     the internal buffer and consequently memory copy.</li>, +     * </ul>, +     * @param writableBytes, +     *         if {@linkplain #writableBytes() the writable bytes} of this, +     *         buffer is less than the specified value and if this buffer is, +     *         not a dynamic buffer, +    void ensureWritableBytes(int writableBytes);, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        // Remove or replace the first readable component with a new slice., +        if (adjustment == c.length) {, +            // new slice would be empty, so remove instead, +            components.remove(0);, +        } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/SwappedByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +                    "minWritableBytes: %d (expected: 0+)", minWritableBytes));, +            throw new IllegalArgumentException(String.format(, +                    "minWritableBytes: %d (exceeds maxCapacity(%d))", minWritableBytes, maxCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Otherwise:, +     * <ul>, +     * <li>a non-dynamic buffer will throw an {@link IndexOutOfBoundsException}.</li>, +     * <li>a dynamic buffer will expand its capacity so that the number of the, +     *     {@link #writableBytes() writable bytes} becomes equal to or greater, +     *     than the specified value. The expansion involves the reallocation of, +     *     the internal buffer and consequently memory copy.</li>, +     * </ul>, +     * @param writableBytes, +     *         if {@linkplain #writableBytes() the writable bytes} of this, +     *         buffer is less than the specified value and if this buffer is, +     *         not a dynamic buffer, +    void ensureWritableBytes(int writableBytes);, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        // Remove or replace the first readable component with a new slice., +        if (adjustment == c.length) {, +            // new slice would be empty, so remove instead, +            components.remove(0);, +        } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/SwappedByteBuf.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java]