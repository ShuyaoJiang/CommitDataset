[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +                if ((cnameQuestion = newQuestion(cname, DnsRecordType.A)) == null) {, +                if ((cnameQuestion = newQuestion(cname, DnsRecordType.AAAA)) == null) {, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +                if ((cnameQuestion = newQuestion(cname, DnsRecordType.A)) == null) {, +                if ((cnameQuestion = newQuestion(cname, DnsRecordType.AAAA)) == null) {, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +    }, +, +    @Test, +    public void testCNAMEResolveAllIpv4() throws IOException, InterruptedException {, +        testCNAMERecursiveResolve(true);, +    }, +, +    @Test, +    public void testCNAMEResolveAllIpv6() throws IOException, InterruptedException {, +        testCNAMERecursiveResolve(false);, +    }, +, +    private static void testCNAMERecursiveResolve(boolean ipv4Preferred) throws IOException, InterruptedException {, +        final String firstName = "firstname.com";, +        final String secondName = "secondname.com";, +        final String lastName = "lastname.com";, +        final String ipv4Addr = "1.2.3.4";, +        final String ipv6Addr = "::1";, +        TestDnsServer dnsServer2 = new TestDnsServer(new RecordStore() {, +            @Override, +            public Set<ResourceRecord> getRecords(QuestionRecord question) throws DnsException {, +                ResourceRecordModifier rm = new ResourceRecordModifier();, +                rm.setDnsClass(RecordClass.IN);, +                rm.setDnsName(question.getDomainName());, +                rm.setDnsTtl(100);, +                rm.setDnsType(RecordType.CNAME);, +, +                if (question.getDomainName().equals(firstName)) {, +                    rm.put(DnsAttribute.DOMAIN_NAME, secondName);, +                } else if (question.getDomainName().equals(secondName)) {, +                    rm.put(DnsAttribute.DOMAIN_NAME, lastName);, +                } else if (question.getDomainName().equals(lastName)) {, +                    rm.setDnsType(question.getRecordType());, +                    switch (question.getRecordType()) {, +                        case A:, +                            rm.put(DnsAttribute.IP_ADDRESS, ipv4Addr);, +                            break;, +                        case AAAA:, +                            rm.put(DnsAttribute.IP_ADDRESS, ipv6Addr);, +                            break;, +                        default:, +                            return null;, +                    }, +                } else {, +                    return null;, +                }, +                return Collections.singleton(rm.getEntry());, +            }, +        });, +        dnsServer2.start();, +        DnsNameResolver resolver = null;, +        try {, +            DnsNameResolverBuilder builder = newResolver(), +                    .recursionDesired(true), +                    .maxQueriesPerResolve(16), +                    .nameServerProvider(new SingletonDnsServerAddressStreamProvider(dnsServer2.localAddress()));, +            if (ipv4Preferred) {, +                builder.resolvedAddressTypes(ResolvedAddressTypes.IPV4_PREFERRED);, +            } else {, +                builder.resolvedAddressTypes(ResolvedAddressTypes.IPV6_PREFERRED);, +            }, +            resolver = builder.build();, +            InetAddress resolvedAddress = resolver.resolve(firstName).syncUninterruptibly().getNow();, +            if (ipv4Preferred) {, +                assertEquals(ipv4Addr, resolvedAddress.getHostAddress());, +            } else {, +                assertEquals(ipv6Addr, NetUtil.toAddressString(resolvedAddress));, +            }, +            assertEquals(firstName, resolvedAddress.getHostName());, +        } finally {, +            dnsServer2.stop();, +            if (resolver != null) {, +                resolver.close();, +            }, +        }]