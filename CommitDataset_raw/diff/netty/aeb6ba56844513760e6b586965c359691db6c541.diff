[+++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, + * Handles an I/O event or intercepts an I/O operation, and forwards it to its next handler in, + * its {@link ChannelPipeline}., + * {@link ChannelHandler} itself does not provide many methods, but you usually have to implement one of its subtypes:, + * <li>{@link ChannelInboundHandler} to handle inbound I/O events, and</li>, + * <li>{@link ChannelOutboundHandler} to handle outbound I/O operations.</li>, + * </p>, + * <p>, + * Alternatively, the following adapter classes are provided for your convenience:, + * <ul>, + * <li>{@link ChannelInboundHandlerAdapter} to handle inbound I/O events,</li>, + * <li>{@link ChannelOutboundHandlerAdapter} to handle outbound I/O operations, and</li>, + * <li>{@link ChannelDuplexHandler} to handle both inbound and outbound events</li>, + * </ul>, + * </p>, + * <p>, + * For more information, please refer to the documentation of each subtype., + * </p>, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, + * Handles an I/O event or intercepts an I/O operation, and forwards it to its next handler in, + * its {@link ChannelPipeline}., + * {@link ChannelHandler} itself does not provide many methods, but you usually have to implement one of its subtypes:, + * <li>{@link ChannelInboundHandler} to handle inbound I/O events, and</li>, + * <li>{@link ChannelOutboundHandler} to handle outbound I/O operations.</li>, + * </p>, + * <p>, + * Alternatively, the following adapter classes are provided for your convenience:, + * <ul>, + * <li>{@link ChannelInboundHandlerAdapter} to handle inbound I/O events,</li>, + * <li>{@link ChannelOutboundHandlerAdapter} to handle outbound I/O operations, and</li>, + * <li>{@link ChannelDuplexHandler} to handle both inbound and outbound events</li>, + * </ul>, + * </p>, + * <p>, + * For more information, please refer to the documentation of each subtype., + * </p>, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, + * You can notify the closest handler in the same {@link ChannelPipeline} by calling one of the various method., +public interface ChannelHandlerContext extends AttributeMap {, +     * Returns the {@link EventExecutor} which is used to execute an arbitrary task.]