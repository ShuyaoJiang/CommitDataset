[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +import io.netty.util.internal.ObjectUtil;, +        invokeChannelRegistered(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelRegistered(final AbstractChannelHandlerContext next) {, +        invokeChannelUnregistered(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelUnregistered(final AbstractChannelHandlerContext next) {, +        invokeChannelActive(next);, +        return this;, +    }, +, +    static void invokeChannelActive(final AbstractChannelHandlerContext next) {, +        invokeChannelInactive(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelInactive(final AbstractChannelHandlerContext next) {, +        invokeExceptionCaught(next, cause);, +        return this;, +    static void invokeExceptionCaught(final AbstractChannelHandlerContext next, final Throwable cause) {, +        ObjectUtil.checkNotNull(cause, "cause");, +        invokeUserEventTriggered(findContextInbound(), event);, +        return this;, +    static void invokeUserEventTriggered(final AbstractChannelHandlerContext next, final Object event) {, +        ObjectUtil.checkNotNull(event, "event");, +        invokeChannelRead(findContextInbound(), msg);, +        return this;, +    static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {, +        final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, "msg"), next);, +        invokeChannelReadComplete(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelReadComplete(final AbstractChannelHandlerContext next) {, +        invokeChannelWritabilityChanged(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelWritabilityChanged(final AbstractChannelHandlerContext next) {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +import io.netty.util.internal.ObjectUtil;, +        invokeChannelRegistered(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelRegistered(final AbstractChannelHandlerContext next) {, +        invokeChannelUnregistered(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelUnregistered(final AbstractChannelHandlerContext next) {, +        invokeChannelActive(next);, +        return this;, +    }, +, +    static void invokeChannelActive(final AbstractChannelHandlerContext next) {, +        invokeChannelInactive(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelInactive(final AbstractChannelHandlerContext next) {, +        invokeExceptionCaught(next, cause);, +        return this;, +    static void invokeExceptionCaught(final AbstractChannelHandlerContext next, final Throwable cause) {, +        ObjectUtil.checkNotNull(cause, "cause");, +        invokeUserEventTriggered(findContextInbound(), event);, +        return this;, +    static void invokeUserEventTriggered(final AbstractChannelHandlerContext next, final Object event) {, +        ObjectUtil.checkNotNull(event, "event");, +        invokeChannelRead(findContextInbound(), msg);, +        return this;, +    static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) {, +        final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, "msg"), next);, +        invokeChannelReadComplete(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelReadComplete(final AbstractChannelHandlerContext next) {, +        invokeChannelWritabilityChanged(findContextInbound());, +        return this;, +    }, +, +    static void invokeChannelWritabilityChanged(final AbstractChannelHandlerContext next) {, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +    protected DefaultChannelPipeline(Channel channel) {, +        AbstractChannelHandlerContext.invokeChannelRegistered(head);, +        AbstractChannelHandlerContext.invokeChannelUnregistered(head);, +        AbstractChannelHandlerContext.invokeChannelActive(head);, +        AbstractChannelHandlerContext.invokeChannelInactive(head);, +        AbstractChannelHandlerContext.invokeExceptionCaught(head, cause);, +        AbstractChannelHandlerContext.invokeUserEventTriggered(head, event);, +        AbstractChannelHandlerContext.invokeChannelRead(head, msg);]