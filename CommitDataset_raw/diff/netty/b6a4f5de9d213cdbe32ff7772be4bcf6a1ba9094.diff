[+++ /dev/null, +++ /dev/null, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * @deprecated Use {@link HttpUtil#isKeepAlive(HttpMessage)} instead., +        return HttpUtil.isKeepAlive(message);, +     * @deprecated Use {@link HttpUtil#setKeepAlive(HttpMessage, boolean)} instead., +        HttpUtil.setKeepAlive(message, keepAlive);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage)} instead., +        return HttpUtil.getContentLength(message);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage, long)} instead., +        return HttpUtil.getContentLength(message, defaultValue);, +     * @deprecated Use {@link HttpUtil#setContentLength(HttpMessage, long)} instead., +        HttpUtil.setContentLength(message, length);, +     * @deprecated Use {@link HttpUtil#is100ContinueExpected(HttpMessage)} instead., +        return HttpUtil.is100ContinueExpected(message);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, true);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, set);, +     * @deprecated Use {@link HttpUtil#isTransferEncodingChunked(HttpMessage)} instead., +        return HttpUtil.isTransferEncodingChunked(message);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, false);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, true);, +     * @deprecated Use {@link HttpUtil#isContentLengthSet(HttpMessage)} instead., +        return HttpUtil.isContentLengthSet(m);, +            HttpUtil.encodeAscii0(seq, buf);, +++ /dev/null, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * @deprecated Use {@link HttpUtil#isKeepAlive(HttpMessage)} instead., +        return HttpUtil.isKeepAlive(message);, +     * @deprecated Use {@link HttpUtil#setKeepAlive(HttpMessage, boolean)} instead., +        HttpUtil.setKeepAlive(message, keepAlive);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage)} instead., +        return HttpUtil.getContentLength(message);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage, long)} instead., +        return HttpUtil.getContentLength(message, defaultValue);, +     * @deprecated Use {@link HttpUtil#setContentLength(HttpMessage, long)} instead., +        HttpUtil.setContentLength(message, length);, +     * @deprecated Use {@link HttpUtil#is100ContinueExpected(HttpMessage)} instead., +        return HttpUtil.is100ContinueExpected(message);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, true);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, set);, +     * @deprecated Use {@link HttpUtil#isTransferEncodingChunked(HttpMessage)} instead., +        return HttpUtil.isTransferEncodingChunked(message);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, false);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, true);, +     * @deprecated Use {@link HttpUtil#isContentLengthSet(HttpMessage)} instead., +        return HttpUtil.isContentLengthSet(m);, +            HttpUtil.encodeAscii0(seq, buf);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import static io.netty.handler.codec.http.HttpUtil.getContentLength;, +        if (HttpUtil.is100ContinueExpected(start)) {, +        HttpUtil.setTransferEncodingChunked(start, false);, +        if (!HttpUtil.isContentLengthSet(aggregated)) {, +                !HttpUtil.is100ContinueExpected(oversized) && !HttpUtil.isKeepAlive(oversized)) {, +++ /dev/null, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +     * @deprecated Use {@link HttpUtil#isKeepAlive(HttpMessage)} instead., +        return HttpUtil.isKeepAlive(message);, +     * @deprecated Use {@link HttpUtil#setKeepAlive(HttpMessage, boolean)} instead., +        HttpUtil.setKeepAlive(message, keepAlive);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage)} instead., +        return HttpUtil.getContentLength(message);, +     * @deprecated Use {@link HttpUtil#getContentLength(HttpMessage, long)} instead., +        return HttpUtil.getContentLength(message, defaultValue);, +     * @deprecated Use {@link HttpUtil#setContentLength(HttpMessage, long)} instead., +        HttpUtil.setContentLength(message, length);, +     * @deprecated Use {@link HttpUtil#is100ContinueExpected(HttpMessage)} instead., +        return HttpUtil.is100ContinueExpected(message);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, true);, +     * @deprecated Use {@link HttpUtil#set100ContinueExpected(HttpMessage, boolean)} instead., +        HttpUtil.set100ContinueExpected(message, set);, +     * @deprecated Use {@link HttpUtil#isTransferEncodingChunked(HttpMessage)} instead., +        return HttpUtil.isTransferEncodingChunked(message);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, false);, +     * @deprecated Use {@link HttpUtil#setTransferEncodingChunked(HttpMessage, boolean)} instead., +        HttpUtil.setTransferEncodingChunked(m, true);, +     * @deprecated Use {@link HttpUtil#isContentLengthSet(HttpMessage)} instead., +        return HttpUtil.isContentLengthSet(m);, +            HttpUtil.encodeAscii0(seq, buf);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +import static io.netty.handler.codec.http.HttpUtil.getContentLength;, +        if (HttpUtil.is100ContinueExpected(start)) {, +        HttpUtil.setTransferEncodingChunked(start, false);, +        if (!HttpUtil.isContentLengthSet(aggregated)) {, +                !HttpUtil.is100ContinueExpected(oversized) && !HttpUtil.isKeepAlive(oversized)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +            boolean chunked = HttpUtil.isTransferEncodingChunked(message);, +            HttpUtil.setTransferEncodingChunked(message, false);, +        } else if (HttpUtil.isTransferEncodingChunked(message)) {, +            contentLength = HttpUtil.getContentLength(message, -1);, +++ /dev/null]