[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    static final String[] DEFAULT_PROTOCOLS;, +            DEFAULT_PROTOCOLS = protocols.toArray(new String[protocols.size()]);, +            DEFAULT_PROTOCOLS = engine.getEnabledProtocols();, +            logger.debug("Default protocols (JDK): {} ", Arrays.asList(DEFAULT_PROTOCOLS));, +    private final String[] protocols;, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, null, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, null, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, String[] protocols, boolean startTls) {, +        this.protocols = protocols == null ? DEFAULT_PROTOCOLS : protocols;, +        engine.setEnabledProtocols(protocols);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    static final String[] DEFAULT_PROTOCOLS;, +            DEFAULT_PROTOCOLS = protocols.toArray(new String[protocols.size()]);, +            DEFAULT_PROTOCOLS = engine.getEnabledProtocols();, +            logger.debug("Default protocols (JDK): {} ", Arrays.asList(DEFAULT_PROTOCOLS));, +    private final String[] protocols;, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, null, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, null, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, String[] protocols, boolean startTls) {, +        this.protocols = protocols == null ? DEFAULT_PROTOCOLS : protocols;, +        engine.setEnabledProtocols(protocols);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ClientAuth clientAuth, String[] protocols, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, protocols, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    static final String[] DEFAULT_PROTOCOLS;, +            DEFAULT_PROTOCOLS = protocols.toArray(new String[protocols.size()]);, +            DEFAULT_PROTOCOLS = engine.getEnabledProtocols();, +            logger.debug("Default protocols (JDK): {} ", Arrays.asList(DEFAULT_PROTOCOLS));, +    private final String[] protocols;, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, null, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, null, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, String[] protocols, boolean startTls) {, +        this.protocols = protocols == null ? DEFAULT_PROTOCOLS : protocols;, +        engine.setEnabledProtocols(protocols);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ClientAuth clientAuth, String[] protocols, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, protocols, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                keyPassword, keyManagerFactory, ciphers, cipherFilter, apn, null, sessionCacheSize, sessionTimeout);, +                                CipherSuiteFilter cipherFilter, ApplicationProtocolConfig apn, String[] protocols,, +                ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    static final String[] DEFAULT_PROTOCOLS;, +            DEFAULT_PROTOCOLS = protocols.toArray(new String[protocols.size()]);, +            DEFAULT_PROTOCOLS = engine.getEnabledProtocols();, +            logger.debug("Default protocols (JDK): {} ", Arrays.asList(DEFAULT_PROTOCOLS));, +    private final String[] protocols;, +                JdkDefaultApplicationProtocolNegotiator.INSTANCE, clientAuth, null, false);, +        this(sslContext, isClient, ciphers, cipherFilter, toNegotiator(apn, !isClient), clientAuth, null, false);, +                  JdkApplicationProtocolNegotiator apn, ClientAuth clientAuth, String[] protocols, boolean startTls) {, +        this.protocols = protocols == null ? DEFAULT_PROTOCOLS : protocols;, +        engine.setEnabledProtocols(protocols);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ClientAuth clientAuth, String[] protocols, boolean startTls) throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, true), clientAuth, protocols, startTls);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +                keyPassword, keyManagerFactory, ciphers, cipherFilter, apn, null, sessionCacheSize, sessionTimeout);, +                                CipherSuiteFilter cipherFilter, ApplicationProtocolConfig apn, String[] protocols,, +                ClientAuth.NONE, protocols, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                   ClientAuth clientAuth, String[] protocols, boolean startTls), +                clientAuth, protocols, startTls, false);, +                   ClientAuth clientAuth, String[] protocols, boolean startTls) throws SSLException {, +        super(ciphers, cipherFilter, apn, sessionCacheSize, sessionTimeout, mode, keyCertChain, clientAuth, protocols,, +                startTls, false);, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +                ciphers, cipherFilter, apn, ClientAuth.NONE, null, false);, +                        ApplicationProtocolConfig apn, String[] protocols, long sessionCacheSize, long sessionTimeout), +            throws SSLException {, +                ciphers, cipherFilter, toNegotiator(apn, false), ClientAuth.NONE, protocols, false);]