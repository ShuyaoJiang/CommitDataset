[+++ b/src/main/java/org/jboss/netty/handler/execution/ChannelEventRunnable.java, +import java.util.concurrent.Executor;, +, + * a {@link Runnable} which sends the specified {@link ChannelEvent} upstream., + * Most users will not see this type at all because it's used by, + * {@link Executor} implementors only, +, +    /**, +     * Creates a {@link Runnable} which sends the specified {@link ChannelEvent}, +     * upstream via the specified {@link ChannelHandlerContext}., +     */, +    /**, +     * Returns the {@link ChannelHandlerContext} which will be used to, +     * send the {@link ChannelEvent} upstream., +     */, +    /**, +     * Returns the {@link ChannelEvent} which will be sent upstream., +     */, +    /**, +     * Sends the event upstream., +     */, +++ b/src/main/java/org/jboss/netty/handler/execution/ChannelEventRunnable.java, +import java.util.concurrent.Executor;, +, + * a {@link Runnable} which sends the specified {@link ChannelEvent} upstream., + * Most users will not see this type at all because it's used by, + * {@link Executor} implementors only, +, +    /**, +     * Creates a {@link Runnable} which sends the specified {@link ChannelEvent}, +     * upstream via the specified {@link ChannelHandlerContext}., +     */, +    /**, +     * Returns the {@link ChannelHandlerContext} which will be used to, +     * send the {@link ChannelEvent} upstream., +     */, +    /**, +     * Returns the {@link ChannelEvent} which will be sent upstream., +     */, +    /**, +     * Sends the event upstream., +     */, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, + * The default {@link ObjectSizeEstimator} implementation for general purpose., +    /**, +     * Creates a new instance., +     */, +++ b/src/main/java/org/jboss/netty/handler/execution/ChannelEventRunnable.java, +import java.util.concurrent.Executor;, +, + * a {@link Runnable} which sends the specified {@link ChannelEvent} upstream., + * Most users will not see this type at all because it's used by, + * {@link Executor} implementors only, +, +    /**, +     * Creates a {@link Runnable} which sends the specified {@link ChannelEvent}, +     * upstream via the specified {@link ChannelHandlerContext}., +     */, +    /**, +     * Returns the {@link ChannelHandlerContext} which will be used to, +     * send the {@link ChannelEvent} upstream., +     */, +    /**, +     * Returns the {@link ChannelEvent} which will be sent upstream., +     */, +    /**, +     * Sends the event upstream., +     */, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, + * The default {@link ObjectSizeEstimator} implementation for general purpose., +    /**, +     * Creates a new instance., +     */, +++ b/src/main/java/org/jboss/netty/handler/execution/ExecutionHandler.java, +import org.jboss.netty.channel.ChannelPipeline;, + * Forwards a upstream {@link ChannelEvent} to an {@link Executor}., + * <p>, + * You can implement various thread model by adding this handler to a, + * {@link ChannelPipeline}.  The most common use case of this handler is to, + * add a {@link ExecutionHandler} which was specified with, + * {@link OrderedMemoryAwareThreadPoolExecutor}:, + * <pre>, + * ChannelPipeline pipeline = ...;, + * pipeline.addLast("decoder", new MyProtocolDecoder());, + * pipeline.addLast("encoder", new MyProtocolEncoder());, + *, + * // HERE, + * <strong>pipeline.addLast("executor", new {@link ExecutionHandler}(new {@link OrderedMemoryAwareThreadPoolExecutor}(16, 1048576, 1048576)));</strong>, + *, + * pipeline.addLast("handler", new MyBusinessLogicHandler());, + * </pre>, + * to utilize more processors to handle {@link ChannelEvent}s.  You can also, + * use other {@link Executor} implementation than the recommended, + * {@link OrderedMemoryAwareThreadPoolExecutor}., +    /**, +     * Creates a new instance with the specified {@link Executor}., +     */, +    /**, +     * Returns the {@link Executor} which was specified with the constructor., +     */]