[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +    private File file;, +                if (!file.createNewFile()) {, +                    throw new IOException("file exists already: " + file);, +                }, +            setCompleted();, +            setCompleted();, +        setCompleted();, +            if (!file.delete()) {, +                logger.warn("Failed to delete: {}", file);, +            }, +        setCompleted();, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!dest.delete()) {, +                    logger.warn("Failed to delete: {}", dest);, +                }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +    private File file;, +                if (!file.createNewFile()) {, +                    throw new IOException("file exists already: " + file);, +                }, +            setCompleted();, +            setCompleted();, +        setCompleted();, +            if (!file.delete()) {, +                logger.warn("Failed to delete: {}", file);, +            }, +        setCompleted();, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!dest.delete()) {, +                    logger.warn("Failed to delete: {}", dest);, +                }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractHttpData.java, +    private final String name;, +    private Charset charset = HttpConstants.DEFAULT_CHARSET;, +    private boolean completed;, +    private long maxSize = DefaultHttpDataFactory.MAXSIZE;, +    @Override, +    public long getMaxSize() { return maxSize; }, +, +    @Override, +    @Override, +    protected void setCompleted() {, +        completed = true;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +    private File file;, +                if (!file.createNewFile()) {, +                    throw new IOException("file exists already: " + file);, +                }, +            setCompleted();, +            setCompleted();, +        setCompleted();, +            if (!file.delete()) {, +                logger.warn("Failed to delete: {}", file);, +            }, +        setCompleted();, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!file.delete()) {, +                    logger.warn("Failed to delete: {}", file);, +                }, +                if (!dest.delete()) {, +                    logger.warn("Failed to delete: {}", dest);, +                }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractHttpData.java, +    private final String name;, +    private Charset charset = HttpConstants.DEFAULT_CHARSET;, +    private boolean completed;, +    private long maxSize = DefaultHttpDataFactory.MAXSIZE;, +    @Override, +    public long getMaxSize() { return maxSize; }, +, +    @Override, +    @Override, +    protected void setCompleted() {, +        completed = true;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java, +        setCompleted();, +        setCompleted();, +            setCompleted();, +        setCompleted();, +            if (!dest.createNewFile()) {, +                throw new IOException("file exists already: " + dest);, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java]