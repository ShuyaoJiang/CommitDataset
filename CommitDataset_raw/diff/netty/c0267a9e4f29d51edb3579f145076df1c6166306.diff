[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelInterestChanged;, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) datagramChannel.socket().getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelInterestChanged;, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) datagramChannel.socket().getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +import static org.jboss.netty.channel.Channels.fireChannelBound;, +import static org.jboss.netty.channel.Channels.fireChannelClosed;, +import static org.jboss.netty.channel.Channels.fireChannelConnected;, +import static org.jboss.netty.channel.Channels.fireChannelUnbound;, +import static org.jboss.netty.channel.Channels.fireExceptionCaught;, +        // Clear the cached address so that the next getRemoteAddress() call, +        // updates the cache., +        channel.remoteAddress = null;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelInterestChanged;, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) datagramChannel.socket().getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +import static org.jboss.netty.channel.Channels.fireChannelBound;, +import static org.jboss.netty.channel.Channels.fireChannelClosed;, +import static org.jboss.netty.channel.Channels.fireChannelConnected;, +import static org.jboss.netty.channel.Channels.fireChannelUnbound;, +import static org.jboss.netty.channel.Channels.fireExceptionCaught;, +        // Clear the cached address so that the next getRemoteAddress() call, +        // updates the cache., +        channel.remoteAddress = null;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) socket.getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelInterestChanged;, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) datagramChannel.socket().getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +import static org.jboss.netty.channel.Channels.fireChannelBound;, +import static org.jboss.netty.channel.Channels.fireChannelClosed;, +import static org.jboss.netty.channel.Channels.fireChannelConnected;, +import static org.jboss.netty.channel.Channels.fireChannelUnbound;, +import static org.jboss.netty.channel.Channels.fireExceptionCaught;, +        // Clear the cached address so that the next getRemoteAddress() call, +        // updates the cache., +        channel.remoteAddress = null;, +, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.fireChannelOpen;, +    volatile InetSocketAddress remoteAddress;, +        InetSocketAddress remoteAddress = this.remoteAddress;, +        if (remoteAddress == null) {, +                this.remoteAddress = remoteAddress =, +                    (InetSocketAddress) socket.getRemoteSocketAddress();, +        return remoteAddress;, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioDatagramPipelineSink.java, +import static org.jboss.netty.channel.Channels.fireChannelBound;, +import static org.jboss.netty.channel.Channels.fireChannelConnected;, +import static org.jboss.netty.channel.Channels.fireExceptionCaught;, +        // Clear the cached address so that the next getRemoteAddress() call, +        // updates the cache., +        channel.remoteAddress = null;, +]