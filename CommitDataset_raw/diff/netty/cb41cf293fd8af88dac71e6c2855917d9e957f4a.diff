[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpChannelImpl.java, +class SctpChannelImpl extends AbstractChannel implements SctpChannel {, +    final com.sun.nio.sctp.SctpChannel underlayingChannel;, +    public SctpChannelImpl(Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink,, +                           com.sun.nio.sctp.SctpChannel underlayingChannel, SctpWorker worker) {, +        this.underlayingChannel = underlayingChannel;, +        config = new DefaultNioSctpChannelConfig(underlayingChannel);, +                final Iterator<SocketAddress> iterator = underlayingChannel.getAllLocalAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getAllLocalAddresses();, +                final Iterator<SocketAddress> iterator = underlayingChannel.getRemoteAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getRemoteAddresses();, +            return underlayingChannel.association();, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpChannelImpl.java, +class SctpChannelImpl extends AbstractChannel implements SctpChannel {, +    final com.sun.nio.sctp.SctpChannel underlayingChannel;, +    public SctpChannelImpl(Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink,, +                           com.sun.nio.sctp.SctpChannel underlayingChannel, SctpWorker worker) {, +        this.underlayingChannel = underlayingChannel;, +        config = new DefaultNioSctpChannelConfig(underlayingChannel);, +                final Iterator<SocketAddress> iterator = underlayingChannel.getAllLocalAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getAllLocalAddresses();, +                final Iterator<SocketAddress> iterator = underlayingChannel.getRemoteAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getRemoteAddresses();, +            return underlayingChannel.association();, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpClientChannel.java, +    private static SctpChannel newChannael() {, +        super(null, factory, pipeline, sink, newChannael(), worker);, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpChannelImpl.java, +class SctpChannelImpl extends AbstractChannel implements SctpChannel {, +    final com.sun.nio.sctp.SctpChannel underlayingChannel;, +    public SctpChannelImpl(Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink,, +                           com.sun.nio.sctp.SctpChannel underlayingChannel, SctpWorker worker) {, +        this.underlayingChannel = underlayingChannel;, +        config = new DefaultNioSctpChannelConfig(underlayingChannel);, +                final Iterator<SocketAddress> iterator = underlayingChannel.getAllLocalAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getAllLocalAddresses();, +                final Iterator<SocketAddress> iterator = underlayingChannel.getRemoteAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getRemoteAddresses();, +            return underlayingChannel.association();, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpClientChannel.java, +    private static SctpChannel newChannael() {, +        super(null, factory, pipeline, sink, newChannael(), worker);, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpClientPipelineSink.java, +            channel.underlayingChannel.bind(localAddress);, +            if (channel.underlayingChannel.connect(remoteAddress)) {, +                if (ch.underlayingChannel.finishConnect()) {, +                channel.underlayingChannel.register(, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpChannelImpl.java, +class SctpChannelImpl extends AbstractChannel implements SctpChannel {, +    final com.sun.nio.sctp.SctpChannel underlayingChannel;, +    public SctpChannelImpl(Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink,, +                           com.sun.nio.sctp.SctpChannel underlayingChannel, SctpWorker worker) {, +        this.underlayingChannel = underlayingChannel;, +        config = new DefaultNioSctpChannelConfig(underlayingChannel);, +                final Iterator<SocketAddress> iterator = underlayingChannel.getAllLocalAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getAllLocalAddresses();, +                final Iterator<SocketAddress> iterator = underlayingChannel.getRemoteAddresses().iterator();, +                final Set<SocketAddress> allLocalAddresses = underlayingChannel.getRemoteAddresses();, +            return underlayingChannel.association();, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpClientChannel.java, +    private static SctpChannel newChannael() {, +        super(null, factory, pipeline, sink, newChannael(), worker);, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpClientPipelineSink.java, +            channel.underlayingChannel.bind(localAddress);, +            if (channel.underlayingChannel.connect(remoteAddress)) {, +                if (ch.underlayingChannel.finishConnect()) {, +                channel.underlayingChannel.register(, +++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpNotificationEvent.java, +package org.jboss.netty.channel.socket.sctp;, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +import com.sun.nio.sctp.Notification;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelEvent;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.Channels;, +, +/**, + *, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://github.com/jestan">Jestan Nirojan</a>, + *]