[+++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxy.java, +             .childOption(ChannelOption.AUTO_READ, false), +             .bind(localPort).sync().channel().closeFuture().sync();, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxy.java, +             .childOption(ChannelOption.AUTO_READ, false), +             .bind(localPort).sync().channel().closeFuture().sync();, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyBackendHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +        ctx.read();, +    public void inboundBufferUpdated(final ChannelHandlerContext ctx, ByteBuf in) throws Exception {, +        inboundChannel.flush().addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                if (future.isSuccess()) {, +                    ctx.channel().read();, +                } else {, +                    future.channel().close();, +                }, +            }, +        });, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxy.java, +             .childOption(ChannelOption.AUTO_READ, false), +             .bind(localPort).sync().channel().closeFuture().sync();, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyBackendHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +        ctx.read();, +    public void inboundBufferUpdated(final ChannelHandlerContext ctx, ByteBuf in) throws Exception {, +        inboundChannel.flush().addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                if (future.isSuccess()) {, +                    ctx.channel().read();, +                } else {, +                    future.channel().close();, +                }, +            }, +        });, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +import io.netty.channel.ChannelOption;, +         .handler(new HexDumpProxyBackendHandler(inboundChannel)), +         .option(ChannelOption.AUTO_READ, false);, +                    // connection complete start to read first data, +                    inboundChannel.read();, +    public void inboundBufferUpdated(final ChannelHandlerContext ctx, ByteBuf in) throws Exception {, +            outboundChannel.flush().addListener(new ChannelFutureListener() {, +                @Override, +                public void operationComplete(ChannelFuture future) throws Exception {, +                    if (future.isSuccess()) {, +                        // was able to flush out data, start to read the next chunk, +                        ctx.channel().read();, +                    } else {, +                        future.channel().close();, +                    }, +                }, +            });]