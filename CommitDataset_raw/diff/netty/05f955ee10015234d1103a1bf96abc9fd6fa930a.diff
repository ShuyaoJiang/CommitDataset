[+++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        // Create a new socket and configure it., +        s.pipeline().addLast("echoer", new EchoClientHandler(firstMessageSize));, +        // Begin the communication by registering the channel to an event loop and connecting, +        // to the peer., +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        s.connect(new InetSocketAddress(host, port));, +        // Wait until the connection is closed., +        s.closeFuture().awaitUninterruptibly();, +, +        // Terminate the event loop., +        loop.shutdown();, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        // Create a new socket and configure it., +        s.pipeline().addLast("echoer", new EchoClientHandler(firstMessageSize));, +        // Begin the communication by registering the channel to an event loop and connecting, +        // to the peer., +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        s.connect(new InetSocketAddress(host, port));, +        // Wait until the connection is closed., +        s.closeFuture().awaitUninterruptibly();, +, +        // Terminate the event loop., +        loop.shutdown();, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInboundHandlerContext;, +, +import java.util.logging.Level;, +import java.util.logging.Logger;, +public class EchoClientHandler extends ChannelInboundHandlerAdapter<Byte> {, +            throw new IllegalArgumentException("firstMessageSize: " + firstMessageSize);, +    @Override, +    public ChannelBufferHolder<Byte> newInboundBuffer(ChannelInboundHandlerContext<Byte> ctx) {, +        return ChannelBufferHolders.byteBuffer(ChannelBuffers.dynamicBuffer());, +    public void channelActive(ChannelInboundHandlerContext<Byte> ctx) {, +        ctx.write(firstMessage);, +    public void inboundBufferUpdated(ChannelInboundHandlerContext<Byte> ctx) {, +        ChannelBuffer in = ctx.in().byteBuffer();, +        ChannelBuffer out = ctx.out().byteBuffer();, +        out.discardReadBytes();, +        out.writeBytes(in);, +        in.discardReadBytes();, +        ctx.flush();, +            ChannelInboundHandlerContext<Byte> ctx, Throwable cause) {, +        logger.log(Level.WARNING, "Unexpected exception from downstream.", cause);, +        ctx.close();, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        // Create a new socket and configure it., +        s.pipeline().addLast("echoer", new EchoClientHandler(firstMessageSize));, +        // Begin the communication by registering the channel to an event loop and connecting, +        // to the peer., +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        s.connect(new InetSocketAddress(host, port));, +        // Wait until the connection is closed., +        s.closeFuture().awaitUninterruptibly();, +, +        // Terminate the event loop., +        loop.shutdown();, +++ b/example/src/main/java/io/netty/example/echo/EchoClientHandler.java, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInboundHandlerContext;, +, +import java.util.logging.Level;, +import java.util.logging.Logger;, +public class EchoClientHandler extends ChannelInboundHandlerAdapter<Byte> {, +            throw new IllegalArgumentException("firstMessageSize: " + firstMessageSize);, +    @Override, +    public ChannelBufferHolder<Byte> newInboundBuffer(ChannelInboundHandlerContext<Byte> ctx) {, +        return ChannelBufferHolders.byteBuffer(ChannelBuffers.dynamicBuffer());, +    public void channelActive(ChannelInboundHandlerContext<Byte> ctx) {, +        ctx.write(firstMessage);, +    public void inboundBufferUpdated(ChannelInboundHandlerContext<Byte> ctx) {, +        ChannelBuffer in = ctx.in().byteBuffer();, +        ChannelBuffer out = ctx.out().byteBuffer();, +        out.discardReadBytes();, +        out.writeBytes(in);, +        in.discardReadBytes();, +        ctx.flush();, +            ChannelInboundHandlerContext<Byte> ctx, Throwable cause) {, +        logger.log(Level.WARNING, "Unexpected exception from downstream.", cause);, +        ctx.close();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +                    s.pipeline().addLast("echoer", new EchoServerHandler());, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +        // Create a new socket and configure it., +        s.pipeline().addLast("echoer", new EchoClientHandler(firstMessageSize));, +        // Begin the communication by registering the channel to an event loop and connecting, +        // to the peer., +        EventLoop loop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        s.connect(new InetSocketAddress(host, port));, +        // Wait until the connection is closed., +        s.closeFuture().awaitUninterruptibly();, +, +        // Terminate the event loop., +        loop.shutdown();]