[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.internal.SystemPropertyUtil;, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(DirectBufferPool.class);, +, +    private static final int CAPACITY;, +, +    static {, +        int val = SystemPropertyUtil.get(, +                "org.jboss.netty.channel.socket.nio.preallocatedBufferCapacity",, +                0);, +, +        if (val <= 0) {, +            val = 128 * 1024;, +        } else {, +            logger.debug(, +                    "Using the specified preallocated buffer capacity: " + val);, +        }, +, +        CAPACITY = val;, +    }, +            if (size < CAPACITY) {, +            if (size > CAPACITY) {, +            ByteBuffer.allocateDirect(CAPACITY);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.internal.SystemPropertyUtil;, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(DirectBufferPool.class);, +, +    private static final int CAPACITY;, +, +    static {, +        int val = SystemPropertyUtil.get(, +                "org.jboss.netty.channel.socket.nio.preallocatedBufferCapacity",, +                0);, +, +        if (val <= 0) {, +            val = 128 * 1024;, +        } else {, +            logger.debug(, +                    "Using the specified preallocated buffer capacity: " + val);, +        }, +, +        CAPACITY = val;, +    }, +            if (size < CAPACITY) {, +            if (size > CAPACITY) {, +            ByteBuffer.allocateDirect(CAPACITY);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +            constraintLevel = SystemPropertyUtil.get(CONSTRAINT_LEVEL_PROPERTY, -1);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DirectBufferPool.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.internal.SystemPropertyUtil;, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(DirectBufferPool.class);, +, +    private static final int CAPACITY;, +, +    static {, +        int val = SystemPropertyUtil.get(, +                "org.jboss.netty.channel.socket.nio.preallocatedBufferCapacity",, +                0);, +, +        if (val <= 0) {, +            val = 128 * 1024;, +        } else {, +            logger.debug(, +                    "Using the specified preallocated buffer capacity: " + val);, +        }, +, +        CAPACITY = val;, +    }, +            if (size < CAPACITY) {, +            if (size > CAPACITY) {, +            ByteBuffer.allocateDirect(CAPACITY);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +            constraintLevel = SystemPropertyUtil.get(CONSTRAINT_LEVEL_PROPERTY, -1);, +++ b/src/main/java/org/jboss/netty/util/internal/SystemPropertyUtil.java, +import java.util.regex.Pattern;, +, +    /**, +     * Returns the value of the Java system property with the specified, +     * {@code key}, while falling back to the specified default value if, +     * the property access fails., +     *, +     * @return the property value., +     *         {@code def} if there's no such property or if an access to the, +     *         specified property is not allowed., +     */, +    public static int get(String key, int def) {, +        String value = get(key);, +        if (value == null) {, +            return def;, +        }, +]