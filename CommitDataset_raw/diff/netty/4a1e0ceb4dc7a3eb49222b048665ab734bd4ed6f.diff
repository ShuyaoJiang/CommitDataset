[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                 * Also we should pass through HTTP/1.0 as transfer-encoding: chunked is not supported., +                 *, +                 * See https://github.com/netty/netty/issues/5382, +                if (isPassthru(res.protocolVersion(), code, acceptEncoding)) {, +    private static boolean isPassthru(HttpVersion version, int code, CharSequence httpMethod) {, +               (httpMethod == ZERO_LENGTH_HEAD || (httpMethod == ZERO_LENGTH_CONNECT && code == 200)) ||, +                version == HttpVersion.HTTP_1_0;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +                 * Also we should pass through HTTP/1.0 as transfer-encoding: chunked is not supported., +                 *, +                 * See https://github.com/netty/netty/issues/5382, +                if (isPassthru(res.protocolVersion(), code, acceptEncoding)) {, +    private static boolean isPassthru(HttpVersion version, int code, CharSequence httpMethod) {, +               (httpMethod == ZERO_LENGTH_HEAD || (httpMethod == ZERO_LENGTH_CONNECT && code == 200)) ||, +                version == HttpVersion.HTTP_1_0;, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentEncoderTest.java, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +    @Test, +    public void testHttp1_0() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new TestEncoder());, +        FullHttpRequest req = new DefaultFullHttpRequest(HttpVersion.HTTP_1_0, HttpMethod.GET, "/");, +        assertTrue(ch.writeInbound(req));, +, +        HttpResponse res = new DefaultHttpResponse(HttpVersion.HTTP_1_0, HttpResponseStatus.OK);, +        res.headers().set(HttpHeaderNames.CONTENT_LENGTH, HttpHeaderValues.ZERO);, +        assertTrue(ch.writeOutbound(res));, +        assertTrue(ch.writeOutbound(LastHttpContent.EMPTY_LAST_CONTENT));, +        assertTrue(ch.finish());, +, +        FullHttpRequest request = ch.readInbound();, +        assertTrue(request.release());, +        assertNull(ch.readInbound());, +, +        HttpResponse response = ch.readOutbound();, +        assertSame(res, response);, +, +        LastHttpContent content = ch.readOutbound();, +        assertSame(LastHttpContent.EMPTY_LAST_CONTENT, content);, +        content.release();, +        assertNull(ch.readOutbound());, +    }, +]