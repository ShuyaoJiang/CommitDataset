[+++ b/transport/src/main/java/io/netty/channel/SingleThreadEventExecutor.java, +import java.util.Queue;, +    private final Queue<Runnable> taskQueue;, +, +        taskQueue = newTaskQueue();, +    }, +, +    protected Queue<Runnable> newTaskQueue() {, +        return new LinkedBlockingQueue<Runnable>();, +        if (taskQueue instanceof BlockingQueue) {, +            return ((BlockingQueue<Runnable>) taskQueue).take();, +        } else {, +            throw new UnsupportedOperationException();, +        }, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventExecutor.java, +import java.util.Queue;, +    private final Queue<Runnable> taskQueue;, +, +        taskQueue = newTaskQueue();, +    }, +, +    protected Queue<Runnable> newTaskQueue() {, +        return new LinkedBlockingQueue<Runnable>();, +        if (taskQueue instanceof BlockingQueue) {, +            return ((BlockingQueue<Runnable>) taskQueue).take();, +        } else {, +            throw new UnsupportedOperationException();, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioEventLoop.java, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, +    protected Queue<Runnable> newTaskQueue() {, +        // This event loop never calls takeTask(), +        return new ConcurrentLinkedQueue<Runnable>();, +    }, +, +    @Override]