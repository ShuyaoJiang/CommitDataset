[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    static final NameValidator<CharSequence> HTTP2_NAME_VALIDATOR = new NameValidator<CharSequence>() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    static final NameValidator<CharSequence> HTTP2_NAME_VALIDATOR = new NameValidator<CharSequence>() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/ReadOnlyHttp2Headers.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http2;, +, +import io.netty.handler.codec.Headers;, +import io.netty.util.AsciiString;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;, +, +import static io.netty.handler.codec.CharSequenceValueConverter.INSTANCE;, +import static io.netty.handler.codec.http2.DefaultHttp2Headers.HTTP2_NAME_VALIDATOR;, +import static io.netty.util.internal.EmptyArrays.EMPTY_ASCII_STRINGS;, +, +/**, + * A variant of {@link Http2Headers} which only supports read-only methods., + * <p>, + * Any array passed to this class may be used directly in the underlying data structures of this class. If these, + * arrays may be modified it is the caller's responsibility to supply this class with a copy of the array., + * <p>, + * This may be a good alternative to {@link DefaultHttp2Headers} if your have a fixed set of headers which will not, + * change., + */, +public final class ReadOnlyHttp2Headers implements Http2Headers {, +    private static final byte PSEUDO_HEADER_TOKEN = (byte) ':';, +    private final AsciiString[] pseudoHeaders;, +    private final AsciiString[] otherHeaders;, +, +    /**, +     * Used to create read only object designed to represent trailers., +     * <p>, +     * If this is used for a purpose other than trailers you may violate the header serialization ordering defined by, +     * <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">RFC 7540, 8.1.2.1</a>., +     * @param validateHeaders {@code true} will run validation on each header name/value pair to ensure protocol, +     *                        compliance., +     * @param otherHeaders A an array of key:value pairs. Must not contain any, +     *                     <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">pseudo headers</a>, +     *                     or {@code null} names/values., +     *                     A copy will <strong>NOT</strong> be made of this array. If the contents of this array, +     *                     may be modified externally you are responsible for passing in a copy., +     * @return A read only representation of the headers., +     */, +    public static ReadOnlyHttp2Headers trailers(boolean validateHeaders, AsciiString... otherHeaders) {, +        return new ReadOnlyHttp2Headers(validateHeaders, EMPTY_ASCII_STRINGS, otherHeaders);, +    }, +, +    /**, +     * Create a new read only representation of headers used by clients., +     * @param validateHeaders {@code true} will run validation on each header name/value pair to ensure protocol, +     *                        compliance., +     * @param method The value for {@link PseudoHeaderName#METHOD}., +     * @param path The value for {@link PseudoHeaderName#PATH}., +     * @param scheme The value for {@link PseudoHeaderName#SCHEME}., +     * @param authority The value for {@link PseudoHeaderName#AUTHORITY}., +     * @param otherHeaders A an array of key:value pairs. Must not contain any, +     *                     <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.1">pseudo headers</a>, +     *                     or {@code null} names/values., +     *                     A copy will <strong>NOT</strong> be made of this array. If the contents of this array, +     *                     may be modified externally you are responsible for passing in a copy., +     * @return a new read only representation of headers used by clients., +     */, +    public static ReadOnlyHttp2Headers clientHeaders(boolean validateHeaders,, +                                                     AsciiString method, AsciiString path,, +                                                     AsciiString scheme, AsciiString authority,, +                                                     AsciiString... otherHeaders) {, +        return new ReadOnlyHttp2Headers(validateHeaders,, +                new AsciiString[] {, +                  PseudoHeaderName.METHOD.value(), method, PseudoHeaderName.PATH.value(), path,, +                  PseudoHeaderName.SCHEME.value(), scheme, PseudoHeaderName.AUTHORITY.value(), authority, +                },, +                otherHeaders);, +    }, +, +    /**, +     * Create a new read only representation of headers used by servers., +     * @param validateHeaders {@code true} will run validation on each header name/value pair to ensure protocol]