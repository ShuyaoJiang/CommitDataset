[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            try {, +            } catch (Throwable t) {, +                logger.error("Failed to notify listener(s). Event loop terminated?", t);, +            }, +    protected static void notifyListener(, +            final EventExecutor eventExecutor, final Future<?> future,, +, +        try {, +        } catch (Throwable t) {, +            logger.error("Failed to notify a listener. Event loop terminated?", t);, +        }, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            try {, +            } catch (Throwable t) {, +                logger.error("Failed to notify listener(s). Event loop terminated?", t);, +            }, +    protected static void notifyListener(, +            final EventExecutor eventExecutor, final Future<?> future,, +, +        try {, +        } catch (Throwable t) {, +            logger.error("Failed to notify a listener. Event loop terminated?", t);, +        }, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                promise.setFailure(new IllegalStateException("registered to an event loop already"));, +                return;, +                promise.setFailure(new IllegalStateException("incompatible event loop type: " + eventLoop.getClass().getName()));, +                try {, +                } catch (Throwable t) {, +                    logger.warn(, +                            "Force-closing a channel whose registration task was unaccepted by an event loop: {}",, +                            AbstractChannel.this, t);, +                    closeForcibly();, +                    promise.setFailure(t);, +                }, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            try {, +            } catch (Throwable t) {, +                logger.error("Failed to notify listener(s). Event loop terminated?", t);, +            }, +    protected static void notifyListener(, +            final EventExecutor eventExecutor, final Future<?> future,, +, +        try {, +        } catch (Throwable t) {, +            logger.error("Failed to notify a listener. Event loop terminated?", t);, +        }, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                promise.setFailure(new IllegalStateException("registered to an event loop already"));, +                return;, +                promise.setFailure(new IllegalStateException("incompatible event loop type: " + eventLoop.getClass().getName()));, +                try {, +                } catch (Throwable t) {, +                    logger.warn(, +                            "Force-closing a channel whose registration task was unaccepted by an event loop: {}",, +                            AbstractChannel.this, t);, +                    closeForcibly();, +                    promise.setFailure(t);, +                }, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.util.concurrent.TaskScheduler;, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        if (promise == null) {, +            throw new NullPointerException("promise");, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            try {, +            } catch (Throwable t) {, +                logger.error("Failed to notify listener(s). Event loop terminated?", t);, +            }, +    protected static void notifyListener(, +            final EventExecutor eventExecutor, final Future<?> future,, +, +        try {, +        } catch (Throwable t) {, +            logger.error("Failed to notify a listener. Event loop terminated?", t);, +        }, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                promise.setFailure(new IllegalStateException("registered to an event loop already"));, +                return;, +                promise.setFailure(new IllegalStateException("incompatible event loop type: " + eventLoop.getClass().getName()));, +                try {, +                } catch (Throwable t) {, +                    logger.warn(, +                            "Force-closing a channel whose registration task was unaccepted by an event loop: {}",, +                            AbstractChannel.this, t);, +                    closeForcibly();, +                    promise.setFailure(t);, +                }, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.util.concurrent.TaskScheduler;, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        if (promise == null) {, +            throw new NullPointerException("promise");, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +        LocalChannel peer = this.peer;]