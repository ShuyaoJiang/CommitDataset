[+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +            }, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +            }, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioWorker.java, +    private final Queue<ChannelRunnableWrapper> eventQueue = QueueFactory.createQueue(ChannelRunnableWrapper.class);, +            final ChannelRunnableWrapper task = eventQueue.poll();, +            if (!task.isCancelled()) {, +    }]