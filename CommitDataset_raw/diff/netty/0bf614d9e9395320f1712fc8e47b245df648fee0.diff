[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.util.concurrent.ImmediateEventExecutor;, +import io.netty.util.concurrent.Promise;, +import static io.netty.buffer.Unpooled.compositeBuffer;, +import static io.netty.buffer.Unpooled.wrappedBuffer;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertTrue;, +        Promise<Void> serverDonePromise = ImmediateEventExecutor.INSTANCE.newPromise();, +        final TestServerHandler sh = new TestServerHandler(autoRead, serverDonePromise, data.length);, +                int firstBufLength = length / 2;, +                CompositeByteBuf comp = compositeBuffer();, +                comp.addComponent(true, wrappedBuffer(data, i, firstBufLength)), +                    .addComponent(true, wrappedBuffer(data, i + firstBufLength, length - firstBufLength));, +                cc.write(wrappedBuffer(data, i, length));, +        serverDonePromise.sync();, +        ByteBuf expected = wrappedBuffer(data);, +        assertEquals(expected, sh.received);, +        expected.release();, +        sh.received.release();, +    }, +, +    private static final class TestServerHandler extends TestHandler {, +        private final int expectedBytes;, +        private final Promise<Void> doneReadingPromise;, +        final ByteBuf received = Unpooled.buffer();, +, +        TestServerHandler(boolean autoRead, Promise<Void> doneReadingPromise, int expectedBytes) {, +            super(autoRead);, +            this.doneReadingPromise = doneReadingPromise;, +            this.expectedBytes = expectedBytes;, +        }, +, +        @Override, +        public void channelRead0(ChannelHandlerContext ctx, ByteBuf in) throws Exception {, +            received.writeBytes(in);, +            if (received.readableBytes() >= expectedBytes) {, +                doneReadingPromise.setSuccess(null);, +            }, +        }, +, +        @Override, +        void handleException(ChannelHandlerContext ctx, Throwable cause) {, +            doneReadingPromise.tryFailure(cause);, +            super.handleException(ctx, cause);, +        }, +, +        @Override, +        public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +            doneReadingPromise.tryFailure(new IllegalStateException("server closed!"));, +            super.channelInactive(ctx);, +        }, +        public final void channelActive(ChannelHandlerContext ctx) throws Exception {, +            super.channelInactive(ctx);, +        public final void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +            super.channelReadComplete(ctx);, +        public final void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +                handleException(ctx, cause);, +            super.exceptionCaught(ctx, cause);, +        }, +, +        void handleException(ChannelHandlerContext ctx, Throwable cause) {, +            ctx.close();]