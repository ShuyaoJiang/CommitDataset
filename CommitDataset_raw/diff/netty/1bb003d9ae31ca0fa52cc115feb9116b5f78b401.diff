[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;, +    //, +    // Note we use an AtomicReferenceFieldUpdater for atomic operations on these to safe memory. This will safe us, +    // 64 bytes per Bridge., +    private volatile MessageBridge inMsgBridge;, +    private volatile MessageBridge outMsgBridge;, +    private volatile ByteBridge inByteBridge;, +    private volatile ByteBridge outByteBridge;, +, +    private static final AtomicReferenceFieldUpdater<DefaultChannelHandlerContext, MessageBridge> IN_MSG_BRIDGE_UPDATER, +            = AtomicReferenceFieldUpdater.newUpdater(DefaultChannelHandlerContext.class,, +                MessageBridge.class, "inMsgBridge");, +, +    private static final AtomicReferenceFieldUpdater<DefaultChannelHandlerContext, MessageBridge> OUT_MSG_BRIDGE_UPDATER, +            = AtomicReferenceFieldUpdater.newUpdater(DefaultChannelHandlerContext.class,, +                MessageBridge.class, "outMsgBridge");, +, +    private static final AtomicReferenceFieldUpdater<DefaultChannelHandlerContext, ByteBridge> IN_BYTE_BRIDGE_UPDATER, +            =  AtomicReferenceFieldUpdater.newUpdater(DefaultChannelHandlerContext.class,, +                ByteBridge.class, "inByteBridge");, +    private static final AtomicReferenceFieldUpdater<DefaultChannelHandlerContext, ByteBridge> OUT_BYTE_BRIDGE_UPDATER, +            = AtomicReferenceFieldUpdater.newUpdater(DefaultChannelHandlerContext.class,, +                ByteBridge.class, "outByteBridge");, +                inByteBridge = null;, +                inMsgBridge = null;, +            outByteBridge = null;, +            outMsgBridge = null;, +            MessageBridge bridge = inMsgBridge;, +            ByteBridge bridge = inByteBridge;, +            MessageBridge bridge = outMsgBridge;, +            ByteBridge bridge = outByteBridge;, +            MessageBridge bridge = inMsgBridge;, +            ByteBridge bridge = inByteBridge;, +            MessageBridge bridge = outMsgBridge;, +            ByteBridge bridge = outByteBridge;, +                    ByteBridge bridge = ctx.inByteBridge;, +                        if (!IN_BYTE_BRIDGE_UPDATER.compareAndSet(ctx, null, bridge)) {, +                            bridge = ctx.inByteBridge;, +                    MessageBridge bridge = ctx.inMsgBridge;, +                        if (!IN_MSG_BRIDGE_UPDATER.compareAndSet(ctx, null, bridge)) {, +                            bridge = ctx.inMsgBridge;, +                    ByteBridge bridge = ctx.outByteBridge;, +                        if (!OUT_BYTE_BRIDGE_UPDATER.compareAndSet(ctx, null, bridge)) {, +                            bridge = ctx.outByteBridge;, +                    MessageBridge bridge = ctx.outMsgBridge;, +                        if (!OUT_MSG_BRIDGE_UPDATER.compareAndSet(ctx, null, bridge)) {, +                            bridge = ctx.outMsgBridge;]