[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    @Override, +    protected final void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            destroyPoolSubPages(smallSubpagePools);, +            destroyPoolSubPages(tinySubpagePools);, +            destroyPoolChunkLists(qInit, q000, q025, q050, q075, q100);, +        }, +    }, +, +    private static void destroyPoolSubPages(PoolSubpage<?>[] pages) {, +        for (PoolSubpage<?> page : pages) {, +            page.destroy();, +        }, +    }, +, +    private void destroyPoolChunkLists(PoolChunkList<T>... chunkLists) {, +        for (PoolChunkList<T> chunkList: chunkLists) {, +            chunkList.destroy(this);, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    @Override, +    protected final void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            destroyPoolSubPages(smallSubpagePools);, +            destroyPoolSubPages(tinySubpagePools);, +            destroyPoolChunkLists(qInit, q000, q025, q050, q075, q100);, +        }, +    }, +, +    private static void destroyPoolSubPages(PoolSubpage<?>[] pages) {, +        for (PoolSubpage<?> page : pages) {, +            page.destroy();, +        }, +    }, +, +    private void destroyPoolChunkLists(PoolChunkList<T>... chunkLists) {, +        for (PoolChunkList<T> chunkList: chunkLists) {, +            chunkList.destroy(this);, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +, +    void destroy() {, +        arena.destroyChunk(this);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    @Override, +    protected final void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            destroyPoolSubPages(smallSubpagePools);, +            destroyPoolSubPages(tinySubpagePools);, +            destroyPoolChunkLists(qInit, q000, q025, q050, q075, q100);, +        }, +    }, +, +    private static void destroyPoolSubPages(PoolSubpage<?>[] pages) {, +        for (PoolSubpage<?> page : pages) {, +            page.destroy();, +        }, +    }, +, +    private void destroyPoolChunkLists(PoolChunkList<T>... chunkLists) {, +        for (PoolChunkList<T> chunkList: chunkLists) {, +            chunkList.destroy(this);, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +, +    void destroy() {, +        arena.destroyChunk(this);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunkList.java, +, +    void destroy(PoolArena<T> arena) {, +        PoolChunk<T> chunk = head;, +        while (chunk != null) {, +            arena.destroyChunk(chunk);, +            chunk = chunk.next;, +        }, +        head = null;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    @Override, +    protected final void finalize() throws Throwable {, +        try {, +            super.finalize();, +        } finally {, +            destroyPoolSubPages(smallSubpagePools);, +            destroyPoolSubPages(tinySubpagePools);]