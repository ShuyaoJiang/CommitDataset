[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynStreamFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynReplyFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdyHeadersFrame);, +            spdyHeaderBlockDecoder.decode(ctx.alloc(), headerBlock, spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynStreamFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynReplyFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdyHeadersFrame);, +            spdyHeaderBlockDecoder.decode(ctx.alloc(), headerBlock, spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecoder.java, +import io.netty.buffer.ByteBufAllocator;, +     * @param alloc the {@link ByteBufAllocator} which can be used to allocate new {@link ByteBuf}s, +    abstract void decode(ByteBufAllocator alloc, ByteBuf headerBlock, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynStreamFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynReplyFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdyHeadersFrame);, +            spdyHeaderBlockDecoder.decode(ctx.alloc(), headerBlock, spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecoder.java, +import io.netty.buffer.ByteBufAllocator;, +     * @param alloc the {@link ByteBufAllocator} which can be used to allocate new {@link ByteBuf}s, +    abstract void decode(ByteBufAllocator alloc, ByteBuf headerBlock, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +import io.netty.buffer.ByteBufAllocator;, +    abstract ByteBuf encode(ByteBufAllocator alloc, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynStreamFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynReplyFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdyHeadersFrame);, +            spdyHeaderBlockDecoder.decode(ctx.alloc(), headerBlock, spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecoder.java, +import io.netty.buffer.ByteBufAllocator;, +     * @param alloc the {@link ByteBufAllocator} which can be used to allocate new {@link ByteBuf}s, +    abstract void decode(ByteBufAllocator alloc, ByteBuf headerBlock, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +import io.netty.buffer.ByteBufAllocator;, +    abstract ByteBuf encode(ByteBufAllocator alloc, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +import io.netty.buffer.ByteBufAllocator;, +        int len = decompressed.readableBytes();, +, +        byte[] in;, +        int offset;, +        if (decompressed.hasArray()) {, +            in = decompressed.array();, +            offset = decompressed.arrayOffset() + decompressed.readerIndex();, +        } else {, +            in = new byte[len];, +            decompressed.getBytes(decompressed.readerIndex(), in);, +            offset = 0;, +        }, +        z.next_in_index = offset;, +        z.avail_in = len;, +    private ByteBuf encode(ByteBufAllocator alloc) {, +        boolean release = true;, +        ByteBuf out = null;, +            int oldNextInIndex = z.next_in_index;, +            int oldNextOutIndex = z.next_out_index;, +            int maxOutputLength = (int) Math.ceil(z.next_in.length * 1.001) + 12;, +            out = alloc.heapBuffer(maxOutputLength);, +            z.next_out = out.array();, +            z.next_out_index = out.arrayOffset() + out.writerIndex();, +            z.avail_out = maxOutputLength;, +, +            int resultCode;, +            try {, +                resultCode = z.deflate(JZlib.Z_SYNC_FLUSH);, +            } finally {, +                out.skipBytes(z.next_in_index - oldNextInIndex);, +            }, +            int outputLength = z.next_out_index - oldNextOutIndex;, +            if (outputLength > 0) {, +                out.writerIndex(out.writerIndex() + outputLength);, +            release = false;, +            return out;, +            if (release && out != null) {, +                out.release();, +            }, +    public ByteBuf encode(ByteBufAllocator alloc, SpdyHeadersFrame frame) throws Exception {, +        ByteBuf decompressed = super.encode(alloc, frame);, +        try {, +            if (!decompressed.isReadable()) {, +            return encode(alloc);, +        } finally {, +            decompressed.release();, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynStreamFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdySynReplyFrame);, +            ByteBuf headerBlock = spdyHeaderBlockEncoder.encode(ctx.alloc(), spdyHeadersFrame);, +            spdyHeaderBlockDecoder.decode(ctx.alloc(), headerBlock, spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecoder.java, +import io.netty.buffer.ByteBufAllocator;, +     * @param alloc the {@link ByteBufAllocator} which can be used to allocate new {@link ByteBuf}s, +    abstract void decode(ByteBufAllocator alloc, ByteBuf headerBlock, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +import io.netty.buffer.ByteBufAllocator;, +    abstract ByteBuf encode(ByteBufAllocator alloc, SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java]