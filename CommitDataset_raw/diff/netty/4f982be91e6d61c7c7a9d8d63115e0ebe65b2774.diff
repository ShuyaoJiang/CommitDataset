[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +    private static final Object SUCCESS = new Object();, +    private static final Object UNCANCELLABLE = new Object();, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +    private static final Object SUCCESS = new Object();, +    private static final Object UNCANCELLABLE = new Object();, +++ b/common/src/test/java/io/netty/util/concurrent/DefaultPromiseTest.java, +import io.netty.util.Signal;, +    @Test, +    public void signalUncancellableCompletionValue() {, +        final Promise<Signal> promise = new DefaultPromise<Signal>(ImmediateEventExecutor.INSTANCE);, +        promise.setSuccess(Signal.valueOf(DefaultPromise.class, "UNCANCELLABLE"));, +        assertTrue(promise.isDone());, +        assertTrue(promise.isSuccess());, +    }, +, +    @Test, +    public void signalSuccessCompletionValue() {, +        final Promise<Signal> promise = new DefaultPromise<Signal>(ImmediateEventExecutor.INSTANCE);, +        promise.setSuccess(Signal.valueOf(DefaultPromise.class, "SUCCESS"));, +        assertTrue(promise.isDone());, +        assertTrue(promise.isSuccess());, +    }, +]