[+++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassLoaderClassResolver.java, +package org.jboss.netty.handler.codec.serialization;, +, +class ClassLoaderClassResolver implements ClassResolver {, +, +    private final ClassLoader classLoader;, +, +    ClassLoaderClassResolver(ClassLoader classLoader) {, +        this.classLoader = classLoader;, +    }, +, +    @Override, +    public Class<?> resolve(String className) throws ClassNotFoundException {, +        try {, +            return classLoader.loadClass(className);, +        } catch (ClassNotFoundException e) {, +            return Class.forName(className, false, classLoader);, +        }, +    }, +, +}, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassLoaderClassResolver.java, +package org.jboss.netty.handler.codec.serialization;, +, +class ClassLoaderClassResolver implements ClassResolver {, +, +    private final ClassLoader classLoader;, +, +    ClassLoaderClassResolver(ClassLoader classLoader) {, +        this.classLoader = classLoader;, +    }, +, +    @Override, +    public Class<?> resolve(String className) throws ClassNotFoundException {, +        try {, +            return classLoader.loadClass(className);, +        } catch (ClassNotFoundException e) {, +            return Class.forName(className, false, classLoader);, +        }, +    }, +, +}, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolvers.java, +        return new ClassLoaderClassResolver(defaultClassLoader(classLoader));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassLoaderClassResolver.java, +package org.jboss.netty.handler.codec.serialization;, +, +class ClassLoaderClassResolver implements ClassResolver {, +, +    private final ClassLoader classLoader;, +, +    ClassLoaderClassResolver(ClassLoader classLoader) {, +        this.classLoader = classLoader;, +    }, +, +    @Override, +    public Class<?> resolve(String className) throws ClassNotFoundException {, +        try {, +            return classLoader.loadClass(className);, +        } catch (ClassNotFoundException e) {, +            return Class.forName(className, false, classLoader);, +        }, +    }, +, +}, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassResolvers.java, +        return new ClassLoaderClassResolver(defaultClassLoader(classLoader));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new HashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new WeakReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +        return new CachingClassResolver(new ClassLoaderClassResolver(defaultClassLoader(classLoader)), new SoftReferenceMap<String, Class<?>>(new ConcurrentHashMap<String, Reference<Class<?>>>()));, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/ClassloaderClassResolver.java, +class ClassLoaderClassResolver implements ClassResolver {, +    ClassLoaderClassResolver(ClassLoader classLoader) {]