[+++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounter.java, +    // XXX: Should the constructor package private?, +    //      We already have TrafficCounterFactory.newChannelTrafficCounter., +    // XXX: Should TrafficCounter be able to be instantiated without TrafficCounterFactory?, +    // TODO: Implement ExternalResourceReleasable, +, +    private long lastWriteThroughput = 0;, +    private long lastReadThroughput = 0;, +    private long writeLimit = 0;, +    private long readLimit = 0;, +    private long checkInterval = TrafficCounterFactory.DEFAULT_CHECK_INTERVAL;, +                        factory1.doAccounting(counter);, +                factory.doAccounting(this);, +            lastReadThroughput = lastReadBytes / interval * 1000;, +            lastWriteThroughput = lastWrittenBytes / interval * 1000;, +        lastCumulativeTime = System.currentTimeMillis();, +        this.writeLimit = writeLimit;, +        this.readLimit = readLimit;, +     * @param checkInterval, +            long readLimit, long checkInterval) {, +        if (this.checkInterval != checkInterval) {, +            this.checkInterval = checkInterval;, +            long wait = currentReadingBytes.get() * 1000 / readLimit -, +                writeLimit - interval;, +        if (readLimit == 0) {, +        if (writeLimit == 0) {, +        return lastReadThroughput;, +        return lastWriteThroughput;, +        return lastCumulativeTime;, +        lastCumulativeTime = System.currentTimeMillis();, +                (lastReadThroughput >> 10) + " KB/s, Write: " +, +                (lastWriteThroughput >> 10) + " KB/s Current Read: " +, +++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounter.java, +    // XXX: Should the constructor package private?, +    //      We already have TrafficCounterFactory.newChannelTrafficCounter., +    // XXX: Should TrafficCounter be able to be instantiated without TrafficCounterFactory?, +    // TODO: Implement ExternalResourceReleasable, +, +    private long lastWriteThroughput = 0;, +    private long lastReadThroughput = 0;, +    private long writeLimit = 0;, +    private long readLimit = 0;, +    private long checkInterval = TrafficCounterFactory.DEFAULT_CHECK_INTERVAL;, +                        factory1.doAccounting(counter);, +                factory.doAccounting(this);, +            lastReadThroughput = lastReadBytes / interval * 1000;, +            lastWriteThroughput = lastWrittenBytes / interval * 1000;, +        lastCumulativeTime = System.currentTimeMillis();, +        this.writeLimit = writeLimit;, +        this.readLimit = readLimit;, +     * @param checkInterval, +            long readLimit, long checkInterval) {, +        if (this.checkInterval != checkInterval) {, +            this.checkInterval = checkInterval;, +            long wait = currentReadingBytes.get() * 1000 / readLimit -, +                writeLimit - interval;, +        if (readLimit == 0) {, +        if (writeLimit == 0) {, +        return lastReadThroughput;, +        return lastWriteThroughput;, +        return lastCumulativeTime;, +        lastCumulativeTime = System.currentTimeMillis();, +                (lastReadThroughput >> 10) + " KB/s, Write: " +, +                (lastWriteThroughput >> 10) + " KB/s Current Read: " +, +++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounterFactory.java, +public class TrafficCounterFactory {, +    // FIXME: Use Executor instead of ExecutorService, +    // TODO: Read/write limit needs to be configurable on a per-channel basis., +    // TODO: Implement ExternalResourceReleasable, +, +    public static long DEFAULT_CHECK_INTERVAL = 1000;, +    private long channelCheckInterval = DEFAULT_CHECK_INTERVAL; // default 1 s, +    private long globalCheckInterval = DEFAULT_CHECK_INTERVAL; // default 1 s, +    @SuppressWarnings("unused"), +    protected void doAccounting(TrafficCounter counter) {, +        // NOOP by default, +    }, +     * @param newChannelCheckInterval, +     * @param newGlobalCheckInterval, +            long newChannelReadLimit, long newChannelCheckInterval,, +            long newGlobalReadLimit, long newGlobalCheckInterval) {, +        channelCheckInterval = newChannelCheckInterval;, +        globalCheckInterval = newGlobalCheckInterval;, +     * @param channelCheckInterval, +     * @param globalCheckInterval, +            long channelReadLimit, long channelCheckInterval, boolean globalActive,, +            long globalWriteLimit, long globalReadLimit, long globalCheckInterval) {, +                channelReadLimit, channelCheckInterval, globalActive, globalWriteLimit,, +                globalReadLimit, globalCheckInterval);, +                channelReadLimit, DEFAULT_CHECK_INTERVAL, globalActive,, +                globalWriteLimit, globalReadLimit, DEFAULT_CHECK_INTERVAL);, +     * @param globalCheckInterval, +            long globalReadLimit, long globalCheckInterval) {, +                DEFAULT_CHECK_INTERVAL, globalActive, globalWriteLimit, globalReadLimit,, +                globalCheckInterval);, +                DEFAULT_CHECK_INTERVAL, globalActive, globalWriteLimit, globalReadLimit,, +                DEFAULT_CHECK_INTERVAL);, +                DEFAULT_CHECK_INTERVAL, globalActive, 0, 0, DEFAULT_CHECK_INTERVAL);, +     * @param newchannelCheckInterval, +     * @param newGlobalCheckInterval]