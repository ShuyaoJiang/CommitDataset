[+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +        SctpMessage packet = (SctpMessage) msg;, +        if (dataLen == 0) {, +            return true;, +        }, +, +        return writtenBytes > 0;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +        SctpMessage packet = (SctpMessage) msg;, +        if (dataLen == 0) {, +            return true;, +        }, +, +        return writtenBytes > 0;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +        SctpMessage packet = (SctpMessage) msg;, +        if (dataLen == 0) {, +            return true;, +        }, +, +        return writtenBytes > 0;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, +import io.netty.channel.ChannelOutboundBuffer;, +    protected void doWrite(ChannelOutboundBuffer in) throws Exception {, +            return;, +        final int size = in.size();, +                return;, +                if (written == size) {, +                    return;, +                SctpMessage packet = (SctpMessage) in.current();, +                    return;, +, +                in.remove();, +                if (!writableKeysIt.hasNext()) {, +                    return;, +                }, +            }, +        }, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +        SctpMessage packet = (SctpMessage) msg;, +        if (dataLen == 0) {, +            return true;, +        }, +, +        return writtenBytes > 0;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, +import io.netty.channel.ChannelOutboundBuffer;, +    protected void doWrite(ChannelOutboundBuffer in) throws Exception {, +            return;, +        final int size = in.size();, +                return;, +                if (written == size) {, +                    return;, +                SctpMessage packet = (SctpMessage) in.current();, +                    return;, +, +                in.remove();, +                if (!writableKeysIt.hasNext()) {, +                    return;, +                }, +            }, +        }, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpServerChannel.java, +import io.netty.channel.ChannelOutboundBuffer;, +    protected void doWrite(ChannelOutboundBuffer in) throws Exception {, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +        SctpMessage packet = (SctpMessage) msg;, +        if (dataLen == 0) {, +            return true;, +        }, +, +        return writtenBytes > 0;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpServerChannel.java, +    protected boolean doWriteMessage(Object msg) throws Exception {, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/oio/OioSctpChannel.java, +import io.netty.channel.ChannelOutboundBuffer;, +    protected void doWrite(ChannelOutboundBuffer in) throws Exception {, +            return;, +        final int size = in.size();, +                return;, +                if (written == size) {, +                    return;, +                SctpMessage packet = (SctpMessage) in.current();, +                    return;, +, +                in.remove();, +                if (!writableKeysIt.hasNext()) {, +                    return;, +                }]