[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final long MAX_HEADER_TABLE_SIZE = MAX_UNSIGNED_INT;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final long MAX_HEADER_TABLE_SIZE = MAX_UNSIGNED_INT;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeaderTable.java, +    void maxHeaderTableSize(long max) throws Http2Exception;, +    long maxHeaderTableSize();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final long MAX_HEADER_TABLE_SIZE = MAX_UNSIGNED_INT;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeaderTable.java, +    void maxHeaderTableSize(long max) throws Http2Exception;, +    long maxHeaderTableSize();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +    public Http2Settings headerTableSize(long value) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",, +                        MIN_HEADER_TABLE_SIZE, MAX_HEADER_TABLE_SIZE, max);, +        public long maxHeaderTableSize() {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +        public void maxHeaderTableSize(long max) throws Http2Exception {, +            if (max < MIN_HEADER_TABLE_SIZE || max > MAX_HEADER_TABLE_SIZE) {, +                throw connectionError(PROTOCOL_ERROR, "Header Table Size must be >= %d and <= %d but was %d",]