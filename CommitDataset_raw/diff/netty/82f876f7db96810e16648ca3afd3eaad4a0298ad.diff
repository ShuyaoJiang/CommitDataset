[+++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtChannelConfig.java, +                SO_LINGER);, +++ b/example/src/main/java/io/netty/example/udt/echo/bytes/ByteEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/example/src/main/java/io/netty/example/udt/echo/message/MsgEchoClient.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +            boot.group(connectGroup).localAddress(0), +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtChannelConfig.java, +                SO_LINGER);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/DefaultUdtServerChannelConfig.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.udt;, +, +import static io.netty.channel.ChannelOption.*;, +import io.netty.channel.ChannelOption;, +, +import java.io.IOException;, +import java.util.Map;, +, +import com.barchart.udt.SocketUDT;, +import com.barchart.udt.nio.ChannelUDT;, +, +/**, + * The default {@link UdtServerChannelConfig} implementation., + */, +public class DefaultUdtServerChannelConfig extends DefaultUdtChannelConfig, +        implements UdtServerChannelConfig {, +, +    private volatile int backlog = 64;, +, +    public DefaultUdtServerChannelConfig(final UdtChannel channel,, +            final ChannelUDT channelUDT, final boolean apply), +            throws IOException {, +        super(channel, channelUDT, apply);, +        if (apply) {, +            apply(channelUDT);, +        }, +    }, +, +    @Override, +    protected void apply(final ChannelUDT channelUDT) throws IOException {, +        final SocketUDT socketUDT = channelUDT.socketUDT();, +        // nothing to apply for now., +    }, +, +    @Override, +    public int getBacklog() {, +        return backlog;, +    }, +, +    @SuppressWarnings("unchecked"), +    @Override, +    public <T> T getOption(final ChannelOption<T> option) {, +        if (option == SO_BACKLOG) {, +            return (T) Integer.valueOf(getBacklog());, +        }]