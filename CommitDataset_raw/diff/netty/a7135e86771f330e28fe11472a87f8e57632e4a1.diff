[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpExpectationFailedEvent.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +/**, + * A user event designed to communicate that a expectation has failed and there should be no expectation that a, + * body will follow., + */, +public final class HttpExpectationFailedEvent {, +    public static final HttpExpectationFailedEvent INSTANCE = new HttpExpectationFailedEvent();, +    private HttpExpectationFailedEvent() { }, +}, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpExpectationFailedEvent.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +/**, + * A user event designed to communicate that a expectation has failed and there should be no expectation that a, + * body will follow., + */, +public final class HttpExpectationFailedEvent {, +    public static final HttpExpectationFailedEvent INSTANCE = new HttpExpectationFailedEvent();, +    private HttpExpectationFailedEvent() { }, +}, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderUtil.java, +     * Get an {@code int} representation of {@link #getContentLength(HttpMessage, long)}., +     * @return the content length or {@code defaultValue} if this message does, +     *         not have the {@code "Content-Length"} header or its value is not, +     *         a number. Not to exceed the boundaries of integer., +     */, +    public static int getContentLength(HttpMessage message, int defaultValue) {, +        return (int) Math.min(Integer.MAX_VALUE, HttpHeaderUtil.getContentLength(message, (long) defaultValue));, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpExpectationFailedEvent.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +/**, + * A user event designed to communicate that a expectation has failed and there should be no expectation that a, + * body will follow., + */, +public final class HttpExpectationFailedEvent {, +    public static final HttpExpectationFailedEvent INSTANCE = new HttpExpectationFailedEvent();, +    private HttpExpectationFailedEvent() { }, +}, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderUtil.java, +     * Get an {@code int} representation of {@link #getContentLength(HttpMessage, long)}., +     * @return the content length or {@code defaultValue} if this message does, +     *         not have the {@code "Content-Length"} header or its value is not, +     *         a number. Not to exceed the boundaries of integer., +     */, +    public static int getContentLength(HttpMessage message, int defaultValue) {, +        return (int) Math.min(Integer.MAX_VALUE, HttpHeaderUtil.getContentLength(message, (long) defaultValue));, +    }, +, +    /**]