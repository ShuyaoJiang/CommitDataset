[+++ b/example/src/main/java/io/netty/example/telnet/TelnetServer.java, +             .childHandler(new TelnetServerInitializer());, +++ b/example/src/main/java/io/netty/example/telnet/TelnetServer.java, +             .childHandler(new TelnetServerInitializer());, +++ b/example/src/main/java/io/netty/example/telnet/TelnetServerInitializer.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.telnet;, +, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.codec.DelimiterBasedFrameDecoder;, +import io.netty.handler.codec.Delimiters;, +import io.netty.handler.codec.string.StringDecoder;, +import io.netty.handler.codec.string.StringEncoder;, +, +/**, + * Creates a newly configured {@link ChannelPipeline} for a new channel., + */, +public class TelnetServerInitializer extends ChannelInitializer<SocketChannel> {, +    private static final StringDecoder DECODER = new StringDecoder();, +    private static final StringEncoder ENCODER = new StringEncoder();, +    private static final TelnetServerHandler SERVERHANDLER = new TelnetServerHandler();, +, +    @Override, +    public void initChannel(SocketChannel ch) throws Exception {, +        ChannelPipeline pipeline = ch.pipeline();, +, +        // Add the text line codec combination first,, +        pipeline.addLast("framer", new DelimiterBasedFrameDecoder(, +                8192, Delimiters.lineDelimiter()));, +        // the encoder and decoder are static as these are sharable, +        pipeline.addLast("decoder", DECODER);, +        pipeline.addLast("encoder", ENCODER);, +, +        // and then business logic., +        pipeline.addLast("handler", SERVERHANDLER);, +    }, +}, +++ b/example/src/main/java/io/netty/example/telnet/TelnetServer.java, +             .childHandler(new TelnetServerInitializer());, +++ b/example/src/main/java/io/netty/example/telnet/TelnetServerInitializer.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.telnet;, +, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.codec.DelimiterBasedFrameDecoder;, +import io.netty.handler.codec.Delimiters;, +import io.netty.handler.codec.string.StringDecoder;, +import io.netty.handler.codec.string.StringEncoder;, +, +/**, + * Creates a newly configured {@link ChannelPipeline} for a new channel., + */, +public class TelnetServerInitializer extends ChannelInitializer<SocketChannel> {, +    private static final StringDecoder DECODER = new StringDecoder();, +    private static final StringEncoder ENCODER = new StringEncoder();, +    private static final TelnetServerHandler SERVERHANDLER = new TelnetServerHandler();, +, +    @Override, +    public void initChannel(SocketChannel ch) throws Exception {, +        ChannelPipeline pipeline = ch.pipeline();, +, +        // Add the text line codec combination first,, +        pipeline.addLast("framer", new DelimiterBasedFrameDecoder(, +                8192, Delimiters.lineDelimiter()));, +        // the encoder and decoder are static as these are sharable, +        pipeline.addLast("decoder", DECODER);, +        pipeline.addLast("encoder", ENCODER);, +]