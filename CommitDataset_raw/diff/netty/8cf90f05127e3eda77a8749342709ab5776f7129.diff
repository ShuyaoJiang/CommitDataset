[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +            return new DefaultDnsPtrRecord(name, dnsClass, timeToLive, decodeName0(in.slice(offset, length)));, +                name, type, dnsClass, timeToLive, in.retainedSlice(offset, length));, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +            return new DefaultDnsPtrRecord(name, dnsClass, timeToLive, decodeName0(in.slice(offset, length)));, +                name, type, dnsClass, timeToLive, in.retainedSlice(offset, length));, +++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoderTest.java, +import static org.junit.Assert.assertEquals;, +, +            assertEquals(expected, decoder.decodeName0(buffer));, +        } finally {, +            buffer.release();, +        }, +    }, +, +    @Test, +    public void testDecodePtrRecord() throws Exception {, +        DefaultDnsRecordDecoder decoder = new DefaultDnsRecordDecoder();, +        ByteBuf buffer = Unpooled.buffer().writeByte(0);, +        int readerIndex = buffer.readerIndex();, +        int writerIndex = buffer.writerIndex();, +        try {, +            DnsPtrRecord record = (DnsPtrRecord) decoder.decodeRecord(, +                    "netty.io", DnsRecordType.PTR, DnsRecord.CLASS_IN, 60, buffer, 0, 1);, +            assertEquals("netty.io.", record.name());, +            assertEquals(DnsRecord.CLASS_IN, record.dnsClass());, +            assertEquals(60, record.timeToLive());, +            assertEquals(DnsRecordType.PTR, record.type());, +            assertEquals(readerIndex, buffer.readerIndex());, +            assertEquals(writerIndex, buffer.writerIndex());]