[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +        try {, +            // Determine if compression is required and sanitize the headers., +            EmbeddedChannel compressor = newCompressor(headers, endStream);, +, +            // Write the headers and create the stream object., +            ChannelFuture future = super.writeHeaders(ctx, streamId, headers, padding, endStream, promise);, +, +            // After the stream object has been created, then attach the compressor as a property for data compression., +            bindCompressorToStream(compressor, streamId);, +, +            return future;, +        } catch (Throwable e) {, +            promise.tryFailure(e);, +        }, +        return promise;, +        try {, +            // Determine if compression is required and sanitize the headers., +            EmbeddedChannel compressor = newCompressor(headers, endOfStream);, +, +            // Write the headers and create the stream object., +            ChannelFuture future = super.writeHeaders(ctx, streamId, headers, streamDependency, weight, exclusive,, +                                                      padding, endOfStream, promise);, +, +            // After the stream object has been created, then attach the compressor as a property for data compression., +            bindCompressorToStream(compressor, streamId);, +, +            return future;, +        } catch (Throwable e) {, +            promise.tryFailure(e);, +        }, +        return promise;, +     * @return The channel used to compress data., +     * @throws Http2Exception if any problems occur during initialization., +    private EmbeddedChannel newCompressor(Http2Headers headers, boolean endOfStream) throws Http2Exception {, +        if (endOfStream) {, +            return null;, +        final EmbeddedChannel compressor = newContentCompressor(encoding);, +, +        return compressor;, +    }, +, +    /**, +     * Called after the super class has written the headers and created any associated stream objects., +     * @param compressor The compressor associated with the stream identified by {@code streamId}., +     * @param streamId The stream id for which the headers were written., +     */, +    private void bindCompressorToStream(EmbeddedChannel compressor, int streamId) {, +        if (compressor != null) {, +            Http2Stream stream = connection().stream(streamId);, +            if (stream != null) {, +                stream.setProperty(propertyKey, compressor);, +            }, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +        try {, +            // Determine if compression is required and sanitize the headers., +            EmbeddedChannel compressor = newCompressor(headers, endStream);, +, +            // Write the headers and create the stream object., +            ChannelFuture future = super.writeHeaders(ctx, streamId, headers, padding, endStream, promise);, +, +            // After the stream object has been created, then attach the compressor as a property for data compression., +            bindCompressorToStream(compressor, streamId);, +, +            return future;, +        } catch (Throwable e) {, +            promise.tryFailure(e);, +        }, +        return promise;, +        try {, +            // Determine if compression is required and sanitize the headers., +            EmbeddedChannel compressor = newCompressor(headers, endOfStream);, +, +            // Write the headers and create the stream object., +            ChannelFuture future = super.writeHeaders(ctx, streamId, headers, streamDependency, weight, exclusive,, +                                                      padding, endOfStream, promise);, +, +            // After the stream object has been created, then attach the compressor as a property for data compression., +            bindCompressorToStream(compressor, streamId);, +, +            return future;, +        } catch (Throwable e) {, +            promise.tryFailure(e);, +        }, +        return promise;, +     * @return The channel used to compress data., +     * @throws Http2Exception if any problems occur during initialization., +    private EmbeddedChannel newCompressor(Http2Headers headers, boolean endOfStream) throws Http2Exception {, +        if (endOfStream) {, +            return null;, +        final EmbeddedChannel compressor = newContentCompressor(encoding);, +, +        return compressor;, +    }, +, +    /**, +     * Called after the super class has written the headers and created any associated stream objects., +     * @param compressor The compressor associated with the stream identified by {@code streamId}., +     * @param streamId The stream id for which the headers were written.]