[+++ b/pom.xml, +            <ignore>java.net.StandardSocketOptions</ignore> , +++ b/pom.xml, +            <ignore>java.net.StandardSocketOptions</ignore> , +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioChannelOption.java, +import java.nio.channels.ServerSocketChannel;, +import java.util.ArrayList;, +import java.util.List;, +        if (channel instanceof ServerSocketChannel && option.option == java.net.StandardSocketOptions.IP_TOS) {, +            // Skip IP_TOS as a workaround for a JDK bug:, +            // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +            return false;, +        }, +        if (channel instanceof ServerSocketChannel && option.option == java.net.StandardSocketOptions.IP_TOS) {, +            // Skip IP_TOS as a workaround for a JDK bug:, +            // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +            return null;, +        }, +, +        if (channel instanceof ServerSocketChannel) {, +            List<ChannelOption<?>> extraOpts = new ArrayList<ChannelOption<?>>(supportedOpts.size());, +            for (java.net.SocketOption<?> opt : supportedOpts) {, +                if (opt == java.net.StandardSocketOptions.IP_TOS) {, +                    // Skip IP_TOS as a workaround for a JDK bug:, +                    // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +                    continue;, +                }, +                extraOpts.add(new NioChannelOption(opt));, +            }, +            return extraOpts.toArray(new ChannelOption[0]);, +        } else {, +}, +++ b/pom.xml, +            <ignore>java.net.StandardSocketOptions</ignore> , +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioChannelOption.java, +import java.nio.channels.ServerSocketChannel;, +import java.util.ArrayList;, +import java.util.List;, +        if (channel instanceof ServerSocketChannel && option.option == java.net.StandardSocketOptions.IP_TOS) {, +            // Skip IP_TOS as a workaround for a JDK bug:, +            // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +            return false;, +        }, +        if (channel instanceof ServerSocketChannel && option.option == java.net.StandardSocketOptions.IP_TOS) {, +            // Skip IP_TOS as a workaround for a JDK bug:, +            // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +            return null;, +        }, +, +        if (channel instanceof ServerSocketChannel) {, +            List<ChannelOption<?>> extraOpts = new ArrayList<ChannelOption<?>>(supportedOpts.size());, +            for (java.net.SocketOption<?> opt : supportedOpts) {, +                if (opt == java.net.StandardSocketOptions.IP_TOS) {, +                    // Skip IP_TOS as a workaround for a JDK bug:, +                    // See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html, +                    continue;, +                }, +                extraOpts.add(new NioChannelOption(opt));, +            }, +            return extraOpts.toArray(new ChannelOption[0]);, +        } else {, +}, +++ b/transport/src/test/java/io/netty/channel/socket/nio/AbstractNioChannelTest.java, +, +    @Test, +    public void testGetOptions()  {, +        T channel = newNioChannel();, +        try {, +            channel.config().getOptions();, +        } finally {, +            channel.unsafe().closeForcibly();, +        }, +    }]