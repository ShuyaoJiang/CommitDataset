[+++ b/src/main/java/org/jboss/netty/channel/AbstractChannelFactory.java, +    void fireChannelOpen(Channel channel) {, +                m.channelOpen(channel);, +                        ".channelOpen().", e);, +    void fireChannelClosed(Channel channel) {, +                m.channelClosed(channel);, +                        ".channelClosed().", e);, +    void fireChannelRead(Channel channel, int amount) {, +                m.channelRead(channel, amount);, +                        ".channelRead().", e);, +            }, +        }, +    }, +, +    void fireChannelWriteScheduled(Channel channel, int amount) {, +        TrafficMonitor[] trafficMonitors = this.trafficMonitors;, +        for (TrafficMonitor m: trafficMonitors) {, +            try {, +                m.channelWriteScheduled(channel, amount);, +            } catch (Exception e) {, +                logger.warn(, +                        "An exception was thrown by " +, +                        TrafficMonitor.class.getSimpleName() +, +                        ".channelWriteScheduled().", e);, +            }, +        }, +    }, +, +    void fireChannelWritten(Channel channel, int amount) {, +        TrafficMonitor[] trafficMonitors = this.trafficMonitors;, +        for (TrafficMonitor m: trafficMonitors) {, +            try {, +                m.channelWritten(channel, amount);, +            } catch (Exception e) {, +                logger.warn(, +                        "An exception was thrown by " +, +                        TrafficMonitor.class.getSimpleName() +, +                        ".channelWritten().", e);, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannelFactory.java, +    void fireChannelOpen(Channel channel) {, +                m.channelOpen(channel);, +                        ".channelOpen().", e);, +    void fireChannelClosed(Channel channel) {, +                m.channelClosed(channel);, +                        ".channelClosed().", e);, +    void fireChannelRead(Channel channel, int amount) {, +                m.channelRead(channel, amount);, +                        ".channelRead().", e);, +            }, +        }, +    }, +, +    void fireChannelWriteScheduled(Channel channel, int amount) {, +        TrafficMonitor[] trafficMonitors = this.trafficMonitors;, +        for (TrafficMonitor m: trafficMonitors) {, +            try {, +                m.channelWriteScheduled(channel, amount);, +            } catch (Exception e) {, +                logger.warn(, +                        "An exception was thrown by " +, +                        TrafficMonitor.class.getSimpleName() +, +                        ".channelWriteScheduled().", e);, +            }, +        }, +    }, +, +    void fireChannelWritten(Channel channel, int amount) {, +        TrafficMonitor[] trafficMonitors = this.trafficMonitors;, +        for (TrafficMonitor m: trafficMonitors) {, +            try {, +                m.channelWritten(channel, amount);, +            } catch (Exception e) {, +                logger.warn(, +                        "An exception was thrown by " +, +                        TrafficMonitor.class.getSimpleName() +, +                        ".channelWritten().", e);, +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +        // Notify the parent handler., +, +        // Notify traffic monitors, +        ChannelFactory factory = channel.getFactory();, +        if (factory instanceof AbstractChannelFactory) {, +            ((AbstractChannelFactory) factory).fireChannelOpen(channel);, +        }, +, +, +        // Notify traffic monitors, +        ChannelFactory factory = channel.getFactory();, +        if (factory instanceof AbstractChannelFactory) {, +            ((AbstractChannelFactory) factory).fireChannelOpen(channel);, +        }, +, +        // Notify the parent handler., +    public static void fireChannelRead(Channel channel, int amount) {, +            ((AbstractChannelFactory) factory).fireChannelRead(channel, amount);, +    public static void fireChannelWriteScheduled(Channel channel, int amount) {, +            ((AbstractChannelFactory) factory).fireChannelWriteScheduled(channel, amount);, +    public static void fireChannelWritten(Channel channel, int amount) {, +        if (amount <= 0) {, +            return;]