[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    protected AbstractByteBuf(ByteOrder endianness) {, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +    public void ensureWritableBytes(int writableBytes) {, +        if (writableBytes > writableBytes()) {, +            throw new IndexOutOfBoundsException("Writable bytes exceeded: Got ", +                    + writableBytes + ", maximum is " + writableBytes());, +        ByteBuf buf = factory().getBuffer(order(), length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    protected AbstractByteBuf(ByteOrder endianness) {, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +    public void ensureWritableBytes(int writableBytes) {, +        if (writableBytes > writableBytes()) {, +            throw new IndexOutOfBoundsException("Writable bytes exceeded: Got ", +                    + writableBytes + ", maximum is " + writableBytes());, +        ByteBuf buf = factory().getBuffer(order(), length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufFactory.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import java.nio.ByteOrder;, +, +/**, + * A skeletal implementation of {@link ByteBufFactory}., + */, +public abstract class AbstractByteBufFactory implements ByteBufFactory {, +, +    private final ByteOrder defaultOrder;, +, +    /**, +     * Creates a new factory whose default {@link ByteOrder} is, +     * {@link ByteOrder#BIG_ENDIAN}., +     */, +    protected AbstractByteBufFactory() {, +        this(ByteOrder.BIG_ENDIAN);, +    }, +, +    /**, +     * Creates a new factory with the specified default {@link ByteOrder}., +     *, +     * @param defaultOrder the default {@link ByteOrder} of this factory, +     */, +    protected AbstractByteBufFactory(ByteOrder defaultOrder) {, +        if (defaultOrder == null) {, +            throw new NullPointerException("defaultOrder");, +        }, +        this.defaultOrder = defaultOrder;, +    }, +, +    @Override, +    public ByteBuf getBuffer(int capacity) {, +        return getBuffer(getDefaultOrder(), capacity);, +    }, +, +    @Override, +    public ByteBuf getBuffer(byte[] array, int offset, int length) {, +        return getBuffer(getDefaultOrder(), array, offset, length);, +    }, +, +    @Override, +    public ByteOrder getDefaultOrder() {, +        return defaultOrder;, +    }, +}, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    protected AbstractByteBuf(ByteOrder endianness) {, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +            markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +            markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +    public void ensureWritableBytes(int writableBytes) {, +        if (writableBytes > writableBytes()) {, +            throw new IndexOutOfBoundsException("Writable bytes exceeded: Got ", +                    + writableBytes + ", maximum is " + writableBytes());, +        ByteBuf buf = factory().getBuffer(order(), length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufFactory.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,]