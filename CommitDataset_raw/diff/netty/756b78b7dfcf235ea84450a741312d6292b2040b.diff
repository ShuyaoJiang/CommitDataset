[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_INITIAL_CAPACITY = 256;, +    static final int DEFAULT_MAX_CAPACITY = Integer.MAX_VALUE;, +    static final int CALCULATE_THRESHOLD = 1048576 * 4; // 4 MiB page, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return heapBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        return directBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return directBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        final int threshold = CALCULATE_THRESHOLD; // 4 MiB page, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_INITIAL_CAPACITY = 256;, +    static final int DEFAULT_MAX_CAPACITY = Integer.MAX_VALUE;, +    static final int CALCULATE_THRESHOLD = 1048576 * 4; // 4 MiB page, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return heapBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        return directBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return directBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        final int threshold = CALCULATE_THRESHOLD; // 4 MiB page, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_INITIAL_CAPACITY = 256;, +    static final int DEFAULT_MAX_CAPACITY = Integer.MAX_VALUE;, +    static final int CALCULATE_THRESHOLD = 1048576 * 4; // 4 MiB page, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return heapBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        return directBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return directBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        final int threshold = CALCULATE_THRESHOLD; // 4 MiB page, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/FixedCompositeByteBuf.java, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_INITIAL_CAPACITY = 256;, +    static final int DEFAULT_MAX_CAPACITY = Integer.MAX_VALUE;, +    static final int CALCULATE_THRESHOLD = 1048576 * 4; // 4 MiB page, +        return heapBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return heapBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        return directBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);, +        return directBuffer(initialCapacity, DEFAULT_MAX_CAPACITY);, +        final int threshold = CALCULATE_THRESHOLD; // 4 MiB page, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +++ b/buffer/src/main/java/io/netty/buffer/FixedCompositeByteBuf.java, +        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufAllocatorTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +public abstract class AbstractByteBufAllocatorTest extends ByteBufAllocatorTest {, +, +    @Override, +    protected abstract AbstractByteBufAllocator newAllocator(boolean preferDirect);, +, +    @Override, +    protected final int defaultMaxCapacity() {, +        return AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY;, +    }, +, +    @Override, +    protected final int defaultMaxComponents() {, +        return AbstractByteBufAllocator.DEFAULT_MAX_COMPONENTS;, +    }, +, +    @Test, +    public void testCalculateNewCapacity() {, +        testCalculateNewCapacity(true);, +        testCalculateNewCapacity(false);, +    }, +, +    private void testCalculateNewCapacity(boolean preferDirect) {, +        ByteBufAllocator allocator = newAllocator(preferDirect);, +        assertEquals(8, allocator.calculateNewCapacity(1, 8));, +        assertEquals(7, allocator.calculateNewCapacity(1, 7));]