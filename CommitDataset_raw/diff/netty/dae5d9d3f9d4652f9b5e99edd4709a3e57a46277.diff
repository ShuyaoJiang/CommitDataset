[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            //, +            // That said we will set dataSize and padding to 0 in the write(...) method if we cleared the queue, +            // because of an error., +                    if (queue.isEmpty()) {, +                        // When the queue is empty it means we did clear it because of an error(...) call, +                        // (as otherwise we will have at least 1 entry in there), which will happen either when called, +                        // explicit or when the write itself fails. In this case just set dataSize and padding to 0, +                        // which will signal back that the whole frame was consumed., +                        //, +                        // See https://github.com/netty/netty/issues/8707., +                        padding = dataSize = 0;, +                    } else {, +                        // There's no need to write any data frames because there are only empty data frames in the, +                        // queue and it is not end of stream yet. Just complete their promises by getting the buffer, +                        // corresponding to 0 bytes and writing it to the channel (to preserve notification order)., +                    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            //, +            // That said we will set dataSize and padding to 0 in the write(...) method if we cleared the queue, +            // because of an error., +                    if (queue.isEmpty()) {, +                        // When the queue is empty it means we did clear it because of an error(...) call, +                        // (as otherwise we will have at least 1 entry in there), which will happen either when called, +                        // explicit or when the write itself fails. In this case just set dataSize and padding to 0, +                        // which will signal back that the whole frame was consumed., +                        //, +                        // See https://github.com/netty/netty/issues/8707., +                        padding = dataSize = 0;, +                    } else {, +                        // There's no need to write any data frames because there are only empty data frames in the, +                        // queue and it is not end of stream yet. Just complete their promises by getting the buffer, +                        // corresponding to 0 bytes and writing it to the channel (to preserve notification order)., +                    }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import static org.junit.Assert.assertSame;, +        doAnswer(new Answer<ChannelFuture>() {, +            @Override, +            public ChannelFuture answer(InvocationOnMock in) {, +                return newPromise().setFailure((Throwable) in.getArgument(0));, +            }, +        }).when(channel).newFailedFuture(any(Throwable.class));, +, +    public void dataWithEndOfStreamWriteShouldSignalThatFrameWasConsumedOnError() throws Exception {, +        dataWriteShouldSignalThatFrameWasConsumedOnError0(true);, +    }, +, +    @Test, +    public void dataWriteShouldSignalThatFrameWasConsumedOnError() throws Exception {, +        dataWriteShouldSignalThatFrameWasConsumedOnError0(false);, +    }, +, +    private void dataWriteShouldSignalThatFrameWasConsumedOnError0(boolean endOfStream) throws Exception {, +        createStream(STREAM_ID, false);, +        final ByteBuf data = dummyData();, +        ChannelPromise p = newPromise();, +        encoder.writeData(ctx, STREAM_ID, data, 0, endOfStream, p);, +, +        FlowControlled controlled = payloadCaptor.getValue();, +        assertEquals(8, controlled.size());, +        payloadCaptor.getValue().write(ctx, 4);, +        assertEquals(4, controlled.size());, +, +        Throwable error = new IllegalStateException();, +        payloadCaptor.getValue().error(ctx, error);, +        payloadCaptor.getValue().write(ctx, 8);, +        assertEquals(0, controlled.size());, +        assertEquals("abcd", writtenData.get(0));, +        assertEquals(0, data.refCnt());, +        assertSame(error, p.cause());, +    }, +, +    @Test, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +            //, +            // That said we will set dataSize and padding to 0 in the write(...) method if we cleared the queue, +            // because of an error., +                    if (queue.isEmpty()) {, +                        // When the queue is empty it means we did clear it because of an error(...) call, +                        // (as otherwise we will have at least 1 entry in there), which will happen either when called, +                        // explicit or when the write itself fails. In this case just set dataSize and padding to 0, +                        // which will signal back that the whole frame was consumed., +                        //, +                        // See https://github.com/netty/netty/issues/8707., +                        padding = dataSize = 0;, +                    } else {, +                        // There's no need to write any data frames because there are only empty data frames in the, +                        // queue and it is not end of stream yet. Just complete their promises by getting the buffer, +                        // corresponding to 0 bytes and writing it to the channel (to preserve notification order)., +                    }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoderTest.java, +import static org.junit.Assert.assertSame;, +        doAnswer(new Answer<ChannelFuture>() {, +            @Override, +            public ChannelFuture answer(InvocationOnMock in) {, +                return newPromise().setFailure((Throwable) in.getArgument(0));, +            }, +        }).when(channel).newFailedFuture(any(Throwable.class));, +, +    public void dataWithEndOfStreamWriteShouldSignalThatFrameWasConsumedOnError() throws Exception {]