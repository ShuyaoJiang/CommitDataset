[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, + * Copyright 2014 The Netty Project, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelOutboundHandler;, +import io.netty.channel.ChannelPromise;, +import io.netty.handler.codec.ByteToMessageDecoder;, +import io.netty.handler.codec.UnsupportedMessageTypeException;, +, +import java.net.SocketAddress;, +import java.util.List;, + * A {@link ChannelHandler} that encodes and decodes SPDY Frames., +public final class SpdyFrameCodec extends ByteToMessageDecoder, +        implements SpdyFrameDecoderDelegate, ChannelOutboundHandler {, +, +    private static final SpdyProtocolException INVALID_FRAME =, +            new SpdyProtocolException("Received invalid frame");, +, +    private final SpdyFrameDecoder spdyFrameDecoder;, +    private final SpdyFrameEncoder spdyFrameEncoder;, +    private final SpdyHeaderBlockDecoder spdyHeaderBlockDecoder;, +    private final SpdyHeaderBlockEncoder spdyHeaderBlockEncoder;, +, +    private SpdyHeadersFrame spdyHeadersFrame;, +    private SpdySettingsFrame spdySettingsFrame;, +, +    private ChannelHandlerContext ctx;, +, +        this(version, maxChunkSize,, +                SpdyHeaderBlockDecoder.newInstance(version, maxHeaderSize),, +                SpdyHeaderBlockEncoder.newInstance(version, compressionLevel, windowBits, memLevel));, +    }, +, +    protected SpdyFrameCodec(SpdyVersion version, int maxChunkSize,, +            SpdyHeaderBlockDecoder spdyHeaderBlockDecoder, SpdyHeaderBlockEncoder spdyHeaderBlockEncoder) {, +        spdyFrameDecoder = new SpdyFrameDecoder(version, this, maxChunkSize);, +        spdyFrameEncoder = new SpdyFrameEncoder(version);, +        this.spdyHeaderBlockDecoder = spdyHeaderBlockDecoder;, +        this.spdyHeaderBlockEncoder = spdyHeaderBlockEncoder;, +    }, +, +    @Override, +    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {, +        super.handlerAdded(ctx);, +        this.ctx = ctx;, +        ctx.channel().closeFuture().addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                spdyHeaderBlockDecoder.end();, +                spdyHeaderBlockEncoder.end();, +            }, +        });, +    }, +, +    @Override, +    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +        spdyFrameDecoder.decode(in);, +    }, +, +    @Override, +    public void bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise) throws Exception {, +        ctx.bind(localAddress, promise);, +    }, +, +    @Override, +    public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,, +                        ChannelPromise promise) throws Exception {, +        ctx.connect(remoteAddress, localAddress, promise);, +    }, +, +    @Override, +    public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {, +        ctx.disconnect(promise);, +    }, +, +    @Override, +    public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {, +        ctx.close(promise);, +    }, +, +    @Override, +    public void deregister(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {, +        ctx.deregister(promise);, +    }, +, +    @Override, +    public void read(ChannelHandlerContext ctx) throws Exception {, +        ctx.read();, +    }, +, +    @Override, +    public void flush(ChannelHandlerContext ctx) throws Exception {, +        ctx.flush();, +    }, +, +    @Override, +    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {]