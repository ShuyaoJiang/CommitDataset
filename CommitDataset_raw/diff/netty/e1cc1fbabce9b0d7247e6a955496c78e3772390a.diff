[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingDeque;, +, +    @Test, +    public void testFireChannelReadCompleteOnInactive() throws InterruptedException {, +        final BlockingQueue<Integer> queue = new LinkedBlockingDeque<Integer>();, +        final ByteBuf buf = ReferenceCountUtil.releaseLater(Unpooled.buffer().writeBytes(new byte[]{'a', 'b'}));, +        EmbeddedChannel channel = new EmbeddedChannel(new ByteToMessageDecoder() {, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                in.skipBytes(in.readableBytes());, +                if (!ctx.channel().isActive()) {, +                    out.add("data");, +                }, +            }, +        }, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +                queue.add(3);, +            }, +, +            @Override, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +                queue.add(1);, +            }, +, +            @Override, +            public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +                if (!ctx.channel().isActive()) {, +                    queue.add(2);, +                }, +            }, +        });, +        Assert.assertFalse(channel.writeInbound(buf));, +        channel.finish();, +        Assert.assertEquals(1, (int) queue.take());, +        Assert.assertEquals(2, (int) queue.take());, +        Assert.assertEquals(3, (int) queue.take());, +        Assert.assertTrue(queue.isEmpty());, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete(), +                    ctx.fireChannelReadComplete();, +                }, +            } finally {, +                // recycle in all cases, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +            try {, +                if (size > 0) {, +                    // Something was read, call fireChannelReadComplete()]