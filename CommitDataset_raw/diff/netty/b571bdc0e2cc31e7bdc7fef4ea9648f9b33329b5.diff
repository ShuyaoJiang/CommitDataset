[+++ b/pom.xml, +            <version>1.1.0</version>, +            <version>1.1.0</version>, +              <stylesheetResource>classpath:/xslt/org/jboss/xhtml.xsl</stylesheetResource>, +              <stylesheetResource>classpath:/xslt/org/jboss/xhtml-single.xsl</stylesheetResource>, +++ b/pom.xml, +            <version>1.1.0</version>, +            <version>1.1.0</version>, +              <stylesheetResource>classpath:/xslt/org/jboss/xhtml.xsl</stylesheetResource>, +              <stylesheetResource>classpath:/xslt/org/jboss/xhtml-single.xsl</stylesheetResource>, +++ b/src/docbook/module/start.xml, +  <para>, +    This chapter tours around the core constructs of Netty with simple, +    examples to let you get started with Netty easily.  You should be able to, +    write a network application on top of Netty right away when you are at the, +    end of this chapter., +  </para>, +  <para>, +    If you prefer the top-down approach in learning something, you might want, +    to start from <xref linkend="architecture"/> and get back here., +  </para>, +  , +  <section>, +    <title>Minimum Requirement</title>, +    <para>, +      The minimum requirements to run the examples which are introduced in, +      this chapter are just two; the latest version of Netty release and JDK, +      1.5 or above.  The latest version of Netty is available in, +      <ulink url="http://www.jboss.org/netty/downloads.html">the project, +      download page</ulink>.  To get the right version of JDK, please refer to, +      your preferred JDK vendor's web site.  , +    </para>, +    <para>, +      Is that all?  To tell the truth, you should find these two are just, +      enough to implement almost any type of protocols.  Otherwise, please, +      feel free to, +      <ulink url="http://www.jboss.org/netty/community.html">contact the Netty, +      project team </ulink> and let us know what's missing., +    </para>, +  </section>, +  , +  <section>, +    <title>Writing a Discard Server</title>, +    <para>, +      The most simplistic protocol in the world is not 'Hello, World!' but , +      <ulink url="http://tools.ietf.org/html/rfc863">DISCARD</ulink>.  It's, +      a protocol which discards any received data without any response., +    </para>, +    <para>, +      What you are supposed to do to implement the DISCARD protocol is to log, +      the received data, and that's all.  Let's start straight from the handler, +      implementation, which handles I/O events generated by Netty., +    </para>, +    <programlistingco>, +      <areaspec>, +        <area id="example.discard.c1" coords="1" />, +      </areaspec>, +      <programlisting>package org.jboss.netty.example.discard;, +, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelHandler;, +, +@ChannelPipelineCoverage("all"), +public class DiscardServerHandler extends SimpleChannelHandler {, +, +    @Override, +    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {, +    }, +, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {, +        e.getCause().printStackTrace();, +        e.getChannel().close();, +    }, +}</programlisting>, +      <calloutlist>, +        <callout arearefs="example.discard.c1">, +          <para>, +            TEST! , +          </para>, +        </callout>, +      </calloutlist>, +    </programlistingco>, +  </section>, +    ]