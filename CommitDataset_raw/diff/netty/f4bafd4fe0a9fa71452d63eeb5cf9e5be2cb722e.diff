[+++ b/handler/src/test/java/io/netty/handler/ssl/CipherSuiteCanaryTest.java, +import io.netty.channel.SimpleChannelInboundHandler;, +import java.security.NoSuchAlgorithmException;, +import java.util.Collections;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLEngine;, +, +    private static void assumeCipherAvailable(SslProvider provider, String cipher) throws NoSuchAlgorithmException {, +        boolean cipherSupported = false;, +        if (provider == SslProvider.JDK) {, +            SSLEngine engine = SSLContext.getDefault().createSSLEngine();, +            for (String c: engine.getSupportedCipherSuites()) {, +               if (cipher.equals(c)) {, +                   cipherSupported = true;, +                   break;, +               }, +            }, +        } else {, +            cipherSupported = OpenSsl.isCipherSuiteAvailable(cipher);, +        }, +        Assume.assumeTrue("Unsupported cipher: " + cipher, cipherSupported);, +    }, +, +        // Check if the cipher is supported at all which may not be the case for various JDK versions and OpenSSL API, +        // implementations., +        assumeCipherAvailable(serverSslProvider, rfcCipherName);, +        assumeCipherAvailable(clientSslProvider, rfcCipherName);, +        List<String> ciphers = Collections.singletonList(rfcCipherName);, +                        pipeline.addLast(new SimpleChannelInboundHandler<Object>() {, +                            public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {, +                                if (serverPromise.trySuccess(null)) {, +                                    ctx.writeAndFlush(Unpooled.wrappedBuffer(new byte[] {'P', 'O', 'N', 'G'}));, +                        + '-' + clientSslProvider + '-' + rfcCipherName);, +                            pipeline.addLast(new SimpleChannelInboundHandler<Object>() {, +                                public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {, +                                    clientPromise.trySuccess(null);, +                        client.writeAndFlush(Unpooled.wrappedBuffer(new byte[] {'P', 'I', 'N', 'G'})), +                              .syncUninterruptibly();]