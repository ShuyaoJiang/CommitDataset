[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPromise.java, +import io.netty.util.Signal;, +    private static final Signal SUCCESS = new Signal(DefaultChannelPromise.class.getName() + ".SUCCESS");, +, +    private Object listeners; // Can be ChannelFutureListener or DefaultChannelPromiseListeners, +        return cause != null;, +        return cause == SUCCESS;, +    public Throwable cause() {, +        Throwable cause;, +        synchronized (this) {, +            cause = this.cause;, +        }, +        return cause == SUCCESS? null : cause;, +            if (cause != null) {, +                if (listeners == null) {, +                    listeners = listener;, +                    if (listeners instanceof DefaultChannelPromiseListeners) {, +                        ((DefaultChannelPromiseListeners) listeners).add(listener);, +                    } else {, +                        listeners = new DefaultChannelPromiseListeners((ChannelFutureListener) listeners, listener);, +            if (cause == null) {, +                if (listeners instanceof DefaultChannelPromiseListeners) {, +                    ((DefaultChannelPromiseListeners) listeners).remove(listener);, +                } else if (listeners == listener) {, +                    listeners = null;, +            while (cause == null) {, +            while (cause == null) {, +                if (cause != null || waitTime <= 0) {, +                    return cause != null;, +                        if (cause != null) {, +                                return cause != null;, +        if (cause != null) {, +        cause = SUCCESS;, +        if (cause != null) {, +        if (listeners == null) {, +            if (listeners instanceof DefaultChannelPromiseListeners) {, +                for (ChannelFutureListener l : (DefaultChannelPromiseListeners) listeners) {, +                notifyListener0(this, (ChannelFutureListener) listeners);, +            }, +            listeners = null;, +        } else {, +            final Object listeners = this.listeners;, +            this.listeners = null;, +                    if (listeners instanceof DefaultChannelPromiseListeners) {, +                        for (ChannelFutureListener l : (DefaultChannelPromiseListeners) listeners) {, +                    } else {, +                        notifyListener0(DefaultChannelPromise.this, (ChannelFutureListener) listeners);, +, +    private static final class DefaultChannelPromiseListeners extends ArrayList<ChannelFutureListener> {, +        private static final long serialVersionUID = 7414281537694651180L;, +, +        DefaultChannelPromiseListeners(ChannelFutureListener firstListener, ChannelFutureListener secondListener) {, +            super(2);, +            add(firstListener);, +            add(secondListener);, +        }, +    }]