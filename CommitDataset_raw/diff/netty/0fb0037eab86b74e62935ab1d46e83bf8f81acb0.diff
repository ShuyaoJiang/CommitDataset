[+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java, +import io.netty.util.NetUtil;, +                if (!NetUtil.isValidIpV4Address(host)) {, +                if (!NetUtil.isValidIp6Address(host)) {, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java, +import io.netty.util.NetUtil;, +                if (!NetUtil.isValidIpV4Address(host)) {, +                if (!NetUtil.isValidIp6Address(host)) {, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +++ /dev/null, +++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java, +import io.netty.util.NetUtil;, +                if (!NetUtil.isValidIpV4Address(host)) {, +                if (!NetUtil.isValidIp6Address(host)) {, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +                byteBuf.writeBytes(NetUtil.createByteArrayFromIpAddressString(host));, +++ /dev/null, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util;, +, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +import java.io.BufferedReader;, +import java.io.FileReader;, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.NetworkInterface;, +import java.net.ServerSocket;, +import java.net.Socket;, +import java.net.SocketException;, +import java.util.ArrayList;, +import java.util.Enumeration;, +import java.util.StringTokenizer;, +, +/**, + * A class that holds a number of network-related constants., + *, + * This class borrowed some of its methods from a  modified fork of the, + * <a href="http://svn.apache.org/repos/asf/harmony/enhanced/java/branches/java6/classlib/modules/luni/, + * src/main/java/org/apache/harmony/luni/util/Inet6Util.java">Inet6Util class</a> which was part of Apache Harmony., + */, +public final class NetUtil {, +, +    /**, +     * The {@link InetAddress} representing the host machine, +     *, +     * We cache this because some machines take almost forever to return from, +     * {@link InetAddress}.getLocalHost(). This may be due to incorrect, +     * configuration of the hosts and DNS client configuration files., +     */, +    public static final InetAddress LOCALHOST;, +, +    /**, +     * The loopback {@link NetworkInterface} on the current machine, +     */, +    public static final NetworkInterface LOOPBACK_IF;, +, +    /**, +     * The SOMAXCONN value of the current machine.  If failed to get the value, 3072 is used as a, +     * default value., +     */, +    public static final int SOMAXCONN;, +, +    /**, +     * The logger being used by this class, +     */, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(NetUtil.class);, +, +    static {, +        //Start the process of discovering localhost, +        InetAddress localhost;, +        try {, +            localhost = InetAddress.getLocalHost();, +            validateHost(localhost);, +        } catch (IOException e) {, +            // The default local host names did not work.  Try hard-coded IPv4 address., +            try {, +                localhost = InetAddress.getByAddress(new byte[] { 127, 0, 0, 1 });, +                validateHost(localhost);]