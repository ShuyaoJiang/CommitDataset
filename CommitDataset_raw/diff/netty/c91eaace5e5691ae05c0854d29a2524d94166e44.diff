[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            if (activeStreams.add(this)) {, +                // Update the number of active streams initiated by the endpoint., +                createdBy().numActiveStreams++;, +, +                // Notify the listeners., +                for (Listener listener : listeners) {, +                    listener.streamActive(this);, +                }, +            }, +            if (activeStreams.remove(this)) {, +                try {, +                    // Update the number of active streams initiated by the endpoint., +                    createdBy().numActiveStreams--;, +, +                    // Notify the listeners., +                    for (Listener listener : listeners) {, +                        listener.streamClosed(this);, +                    }, +                } finally {, +                    // Mark this stream for removal., +                    removalPolicy.markForRemoval(this);, +                }, +            }, +        private int maxActiveStreams;, +            maxActiveStreams = Integer.MAX_VALUE;, +        public boolean canCreateStream() {, +            return nextStreamId() > 0 && numActiveStreams + 1 <= maxActiveStreams;, +        public int maxActiveStreams() {, +            return maxActiveStreams;, +        public void maxActiveStreams(int maxActiveStreams) {, +            this.maxActiveStreams = maxActiveStreams;, +            if (!canCreateStream()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            if (activeStreams.add(this)) {, +                // Update the number of active streams initiated by the endpoint., +                createdBy().numActiveStreams++;, +, +                // Notify the listeners., +                for (Listener listener : listeners) {, +                    listener.streamActive(this);, +                }, +            }, +            if (activeStreams.remove(this)) {, +                try {, +                    // Update the number of active streams initiated by the endpoint., +                    createdBy().numActiveStreams--;, +, +                    // Notify the listeners., +                    for (Listener listener : listeners) {, +                        listener.streamClosed(this);, +                    }, +                } finally {, +                    // Mark this stream for removal., +                    removalPolicy.markForRemoval(this);, +                }, +            }, +        private int maxActiveStreams;, +            maxActiveStreams = Integer.MAX_VALUE;, +        public boolean canCreateStream() {, +            return nextStreamId() > 0 && numActiveStreams + 1 <= maxActiveStreams;, +        public int maxActiveStreams() {, +            return maxActiveStreams;, +        public void maxActiveStreams(int maxActiveStreams) {, +            this.maxActiveStreams = maxActiveStreams;, +            if (!canCreateStream()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        settings.maxConcurrentStreams(connection.remote().maxActiveStreams());, +            connection.remote().maxActiveStreams(value);, +                stream = connection.remote().createStream(streamId).open(endOfStream);, +                stream = connection.remote().createStream(streamId);, +                connection.remote().maxActiveStreams(value);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +            if (activeStreams.add(this)) {, +                // Update the number of active streams initiated by the endpoint., +                createdBy().numActiveStreams++;, +, +                // Notify the listeners., +                for (Listener listener : listeners) {, +                    listener.streamActive(this);, +                }, +            }, +            if (activeStreams.remove(this)) {, +                try {, +                    // Update the number of active streams initiated by the endpoint., +                    createdBy().numActiveStreams--;, +, +                    // Notify the listeners., +                    for (Listener listener : listeners) {, +                        listener.streamClosed(this);, +                    }, +                } finally {, +                    // Mark this stream for removal., +                    removalPolicy.markForRemoval(this);, +                }, +            }, +        private int maxActiveStreams;, +            maxActiveStreams = Integer.MAX_VALUE;, +        public boolean canCreateStream() {, +            return nextStreamId() > 0 && numActiveStreams + 1 <= maxActiveStreams;]