[+++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/Recycler.java, +import static io.netty.util.internal.MathUtil.safeFindNextPositivePowerOfTwo;, +        LINK_CAPACITY = safeFindNextPositivePowerOfTwo(, +        RATIO = safeFindNextPositivePowerOfTwo(SystemPropertyUtil.getInt("io.netty.recycler.ratio", 8));, +        ratioMask = safeFindNextPositivePowerOfTwo(ratio) - 1;, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/Recycler.java, +import static io.netty.util.internal.MathUtil.safeFindNextPositivePowerOfTwo;, +        LINK_CAPACITY = safeFindNextPositivePowerOfTwo(, +        RATIO = safeFindNextPositivePowerOfTwo(SystemPropertyUtil.getInt("io.netty.recycler.ratio", 8));, +        ratioMask = safeFindNextPositivePowerOfTwo(ratio) - 1;, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        this.samplingInterval = MathUtil.safeFindNextPositivePowerOfTwo(samplingInterval);, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/Recycler.java, +import static io.netty.util.internal.MathUtil.safeFindNextPositivePowerOfTwo;, +        LINK_CAPACITY = safeFindNextPositivePowerOfTwo(, +        RATIO = safeFindNextPositivePowerOfTwo(SystemPropertyUtil.getInt("io.netty.recycler.ratio", 8));, +        ratioMask = safeFindNextPositivePowerOfTwo(ratio) - 1;, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        this.samplingInterval = MathUtil.safeFindNextPositivePowerOfTwo(samplingInterval);, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * <p>If the value is {@code <= 0} then 1 will be returned., +     * Fast method of finding the next power of 2 greater than or equal to the supplied value., +     * <p>This method will do runtime bounds checking and call {@link #findNextPositivePowerOfTwo(int)} if within a, +     * valid range., +     * @param value from which to search for next power of 2, +     * @return The next power of 2 or the value itself if it is a power of 2., +     * <p>Special cases for return values are as follows:, +     * <ul>, +     *     <li>{@code <= 0} -> 1</li>, +     *     <li>{@code >= 2^30} -> 2^30</li>, +     * </ul>, +     */, +    public static int safeFindNextPositivePowerOfTwo(final int value) {, +        return value <= 0 ? 1 : value >= 0x40000000 ? 0x40000000 : findNextPositivePowerOfTwo(value);, +    }, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            this.size = MathUtil.safeFindNextPositivePowerOfTwo(size);, +++ b/common/src/main/java/io/netty/util/Recycler.java, +import static io.netty.util.internal.MathUtil.safeFindNextPositivePowerOfTwo;, +        LINK_CAPACITY = safeFindNextPositivePowerOfTwo(, +        RATIO = safeFindNextPositivePowerOfTwo(SystemPropertyUtil.getInt("io.netty.recycler.ratio", 8));, +        ratioMask = safeFindNextPositivePowerOfTwo(ratio) - 1;, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        this.samplingInterval = MathUtil.safeFindNextPositivePowerOfTwo(samplingInterval);, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * <p>If the value is {@code <= 0} then 1 will be returned., +     * Fast method of finding the next power of 2 greater than or equal to the supplied value., +     * <p>This method will do runtime bounds checking and call {@link #findNextPositivePowerOfTwo(int)} if within a, +     * valid range., +     * @param value from which to search for next power of 2, +     * @return The next power of 2 or the value itself if it is a power of 2., +     * <p>Special cases for return values are as follows:, +     * <ul>, +     *     <li>{@code <= 0} -> 1</li>, +     *     <li>{@code >= 2^30} -> 2^30</li>, +     * </ul>, +     */, +    public static int safeFindNextPositivePowerOfTwo(final int value) {, +        return value <= 0 ? 1 : value >= 0x40000000 ? 0x40000000 : findNextPositivePowerOfTwo(value);, +    }, +, +    /**, +++ b/common/src/main/templates/io/netty/util/collection/KObjectHashMap.template, +import static io.netty.util.internal.MathUtil.safeFindNextPositivePowerOfTwo;, +        int capacity = safeFindNextPositivePowerOfTwo(initialCapacity);]