[+++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +        b.eventLoop(ctx.eventLoop()), +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +        b.eventLoop(ctx.eventLoop()), +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.handler.timeout.IdleStateHandler;, +    // A single handler will be reused across multiple connection attempts to keep when the last, +    // successful connection attempt was., +    private final UptimeClientHandler handler = new UptimeClientHandler(this);, +, +                ch.pipeline().addLast(new IdleStateHandler(READ_TIMEOUT, 0, 0), handler);, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +        b.eventLoop(ctx.eventLoop()), +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.handler.timeout.IdleStateHandler;, +    // A single handler will be reused across multiple connection attempts to keep when the last, +    // successful connection attempt was., +    private final UptimeClientHandler handler = new UptimeClientHandler(this);, +, +                ch.pipeline().addLast(new IdleStateHandler(READ_TIMEOUT, 0, 0), handler);, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.handler.timeout.IdleState;, +import io.netty.handler.timeout.IdleStateEvent;, +@Sharable, +    public void inboundBufferUpdated(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +        // Discard received data, +        in.clear();, +    }, +, +    @Override, +    public void userEventTriggered(ChannelInboundHandlerContext<Byte> ctx, Object evt) throws Exception {, +        if (!(evt instanceof IdleStateEvent)) {, +            return;, +        }, +, +        IdleStateEvent e = (IdleStateEvent) evt;, +        if (e.state() == IdleState.READER_IDLE) {, +            // The connection was OK but there was no traffic for last period., +            println("Disconnecting due to no inbound traffic");, +            ctx.close();, +        }, +    }, +, +    @Override, +        final EventLoop loop = ctx.eventLoop();, +        ctx.close();, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +        b.eventLoop(ctx.eventLoop()), +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.handler.timeout.IdleStateHandler;, +    // A single handler will be reused across multiple connection attempts to keep when the last, +    // successful connection attempt was., +    private final UptimeClientHandler handler = new UptimeClientHandler(this);, +, +                ch.pipeline().addLast(new IdleStateHandler(READ_TIMEOUT, 0, 0), handler);, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.handler.timeout.IdleState;, +import io.netty.handler.timeout.IdleStateEvent;, +@Sharable, +    public void inboundBufferUpdated(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +        // Discard received data, +        in.clear();, +    }, +, +    @Override, +    public void userEventTriggered(ChannelInboundHandlerContext<Byte> ctx, Object evt) throws Exception {, +        if (!(evt instanceof IdleStateEvent)) {, +            return;, +        }, +, +        IdleStateEvent e = (IdleStateEvent) evt;, +        if (e.state() == IdleState.READER_IDLE) {, +            // The connection was OK but there was no traffic for last period., +            println("Disconnecting due to no inbound traffic");, +            ctx.close();, +        }, +    }, +, +    @Override, +        final EventLoop loop = ctx.eventLoop();, +        ctx.close();, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +        if (!ctx.eventLoop().inEventLoop()) {, +++ b/example/src/main/java/io/netty/example/proxy/HexDumpProxyFrontendHandler.java, +        b.eventLoop(ctx.eventLoop())]