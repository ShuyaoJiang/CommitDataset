[+++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event can be either an upstream event or a downstream event., + * {@link ChannelPipeline}, we call it an upstream event and say <strong>"an, + * depending on whether the event is an upstream event or a downstream event., + * An upstream event represents the notification of what happened in the past., +     * If this event is an upstream event, this method will always return a, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event can be either an upstream event or a downstream event., + * {@link ChannelPipeline}, we call it an upstream event and say <strong>"an, + * depending on whether the event is an upstream event or a downstream event., + * An upstream event represents the notification of what happened in the past., +     * If this event is an upstream event, this method will always return a, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * This is a tag interface.  There are two sub-interfaces which process a, + * received event, one for upstream events and the other for downstream events:, + * <li>{@link ChannelUpstreamHandler} handles and intercepts an upstream {@link ChannelEvent}.</li>, + * each sub-type on how an event is interpreted when it goes upstream and, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event can be either an upstream event or a downstream event., + * {@link ChannelPipeline}, we call it an upstream event and say <strong>"an, + * depending on whether the event is an upstream event or a downstream event., + * An upstream event represents the notification of what happened in the past., +     * If this event is an upstream event, this method will always return a, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * This is a tag interface.  There are two sub-interfaces which process a, + * received event, one for upstream events and the other for downstream events:, + * <li>{@link ChannelUpstreamHandler} handles and intercepts an upstream {@link ChannelEvent}.</li>, + * each sub-type on how an event is interpreted when it goes upstream and, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * an upstream or downstream {@link ChannelEvent} to the next or previous, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event can be either an upstream event or a downstream event., + * {@link ChannelPipeline}, we call it an upstream event and say <strong>"an, + * depending on whether the event is an upstream event or a downstream event., + * An upstream event represents the notification of what happened in the past., +     * If this event is an upstream event, this method will always return a, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * This is a tag interface.  There are two sub-interfaces which process a, + * received event, one for upstream events and the other for downstream events:, + * <li>{@link ChannelUpstreamHandler} handles and intercepts an upstream {@link ChannelEvent}.</li>, + * each sub-type on how an event is interpreted when it goes upstream and, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * an upstream or downstream {@link ChannelEvent} to the next or previous, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, + * more information., + * Please note that an upstream event flows from the first upstream handler, + * {@link SslHandler} when sensitive information is about to be exchanged,, +++ b/src/main/java/org/jboss/netty/bootstrap/ClientBootstrap.java, + * A helper class which creates a new client-side {@link Channel} and makes a, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * control over how a new pipeline is created.  This approach is more complex:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} documentation to find out what an upstream event, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * Every event can be either an upstream event or a downstream event., + * {@link ChannelPipeline}, we call it an upstream event and say <strong>"an]