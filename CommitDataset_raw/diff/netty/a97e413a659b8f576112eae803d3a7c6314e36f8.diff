[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkBaseApplicationProtocolNegotiator.java, +            for (String p : supportedProtocols) {, +                if (protocols.contains(p)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkBaseApplicationProtocolNegotiator.java, +            for (String p : supportedProtocols) {, +                if (protocols.contains(p)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkNpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkAlpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkBaseApplicationProtocolNegotiator.java, +            for (String p : supportedProtocols) {, +                if (protocols.contains(p)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkNpnSslEngine.java, +import java.util.LinkedHashSet;, +                    .newSelector(this, new LinkedHashSet<String>(applicationNegotiator.protocols())),, +                    "protocolSelector");, +++ b/handler/src/test/java/io/netty/handler/ssl/JdkSslEngineTest.java, +import static org.junit.Assert.assertNull;, +    private static final String PREFERRED_APPLICATION_LEVEL_PROTOCOL = "my-protocol-http2";, +    private static final String FALLBACK_APPLICATION_LEVEL_PROTOCOL = "my-protocol-http1_1";, +        serverException = null;, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +    public void testAlpnCompatibleProtocolsDifferentClientOrder() throws Exception {, +        try {, +            // Typical code will not have to check this, but will get a initialization error on class load., +            // Check in this test just in case we have multiple tests that just the class and we already ignored the, +            // initialization error., +            if (!JdkAlpnSslEngine.isAvailable()) {, +                throw new RuntimeException("ALPN not on classpath");, +            }, +            // Even the preferred application protocol appears second in the client's list, it will be picked, +            // because it's the first one on server's list., +            JdkApplicationProtocolNegotiator clientApn = new JdkAlpnApplicationProtocolNegotiator(false, false,, +                FALLBACK_APPLICATION_LEVEL_PROTOCOL, PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +            JdkApplicationProtocolNegotiator serverApn = new JdkAlpnApplicationProtocolNegotiator(true, true,, +                PREFERRED_APPLICATION_LEVEL_PROTOCOL, FALLBACK_APPLICATION_LEVEL_PROTOCOL);, +            mySetup(serverApn, clientApn);, +            assertNull(serverException);, +            runTest(PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +        } catch (Exception e) {, +            // ALPN availability is dependent on the java version. If ALPN is not available because of, +            // java version incompatibility don't fail the test, but instead just skip the test, +            assumeNoException(e);, +        }, +    }, +, +    @Test, +                    PREFERRED_APPLICATION_LEVEL_PROTOCOL);, +        runTest(PREFERRED_APPLICATION_LEVEL_PROTOCOL);]