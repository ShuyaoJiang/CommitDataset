[+++ b/NOTICE.txt, +benchmarking framework, which can be obtained at:, +This product contains a modified portion of 'SLF4J', a simple logging, +facade for Java, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.slf4j.txt (MIT License), +  * HOMEPAGE:, +    * http://www.slf4j.org/, +, +++ b/NOTICE.txt, +benchmarking framework, which can be obtained at:, +This product contains a modified portion of 'SLF4J', a simple logging, +facade for Java, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.slf4j.txt (MIT License), +  * HOMEPAGE:, +    * http://www.slf4j.org/, +, +++ b/all/pom.xml, +++ b/NOTICE.txt, +benchmarking framework, which can be obtained at:, +This product contains a modified portion of 'SLF4J', a simple logging, +facade for Java, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.slf4j.txt (MIT License), +  * HOMEPAGE:, +    * http://www.slf4j.org/, +, +++ b/all/pom.xml, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +                    logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);, +                    logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);, +++ b/NOTICE.txt, +benchmarking framework, which can be obtained at:, +This product contains a modified portion of 'SLF4J', a simple logging, +facade for Java, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.slf4j.txt (MIT License), +  * HOMEPAGE:, +    * http://www.slf4j.org/, +, +++ b/all/pom.xml, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +                    logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);, +                    logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);, +++ b/common/pom.xml, +++ b/NOTICE.txt, +benchmarking framework, which can be obtained at:, +This product contains a modified portion of 'SLF4J', a simple logging, +facade for Java, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.slf4j.txt (MIT License), +  * HOMEPAGE:, +    * http://www.slf4j.org/, +, +++ b/all/pom.xml, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +                    logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);, +                    logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);, +++ b/common/pom.xml, +++ b/common/src/main/java/io/netty/logging/AbstractInternalLogger.java, +import java.io.ObjectStreamException;, +import java.io.Serializable;, +, +public abstract class AbstractInternalLogger implements InternalLogger, Serializable {, +, +    private static final long serialVersionUID = -6382972526573193470L;, +, +    private final String name;, +    protected AbstractInternalLogger(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        }, +        this.name = name;, +    }, +, +    @Override, +    public String name() {, +        return name;, +, +    @Override, +    public void log(InternalLogLevel level, String format, Object arg) {, +        switch (level) {, +        case TRACE:, +            trace(format, arg);, +            break;, +        case DEBUG:, +            debug(format, arg);, +            break;, +        case INFO:, +            info(format, arg);, +            break;, +        case WARN:, +            warn(format, arg);, +            break;]