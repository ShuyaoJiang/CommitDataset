[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +                    out.add(message);, +                    decodeContent(c, out);, +                    // Replace the content length., +                        int contentLength = 0;, +                        int size = out.size();, +                        for (int i = 0; i < size; i++) {, +                            Object o = out.get(i);, +                            if (o instanceof HttpContent) {, +                                contentLength += ((HttpContent) o).content().readableBytes();, +                            }, +                        }, +                                Integer.toString(contentLength));, +                decodeContent(c, out);, +    private void decodeContent(HttpContent c, List<Object> out) {, +, +        decode(content, out);, +            finishDecode(out);, +            out.add(LastHttpContent.EMPTY_LAST_CONTENT);, +            // Clean-up the previous encoder if not cleaned up correctly., +            if (decoder.finish()) {, +                for (;;) {, +                    ByteBuf buf = (ByteBuf) decoder.readOutbound();, +                    if (buf == null) {, +                        break;, +                    }, +                    // Release the buffer, +            decoder = null;, +        }, +    }, +    private void decode(ByteBuf in, List<Object> out) {, +        // call retain here as it will call release after its written to the channel, +        decoder.writeOutbound(in.retain());, +    private void finishDecode(List<Object> out) {, +    private void fetchDecoderOutput(List<Object> out) {, +            ByteBuf buf = (ByteBuf) decoder.readOutbound();, +            if (!buf.isReadable()) {, +                continue;, +            }, +            out.add(new DefaultHttpContent(buf));]