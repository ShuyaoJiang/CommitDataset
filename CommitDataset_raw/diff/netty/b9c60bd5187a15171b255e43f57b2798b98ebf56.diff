[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import java.util.concurrent.atomic.AtomicLong;, +import io.netty.channel.ChannelStateEvent;, +import io.netty.handler.codec.PrematureChannelClosureException;, + * , + * If the {@link Channel} gets closed and there are requests missing for a response, + * a {@link PrematureChannelClosureException} is thrown., + * , +    private final AtomicLong requestResponseCounter = new AtomicLong(0);, +            if (msg instanceof HttpRequest) {, +                if (!done) {, +                requestResponseCounter.incrementAndGet();, +            } else if (msg instanceof HttpChunk) {, +                , +                // increment only if its the last chunk , +                if (((HttpChunk) msg).isLast()) {, +                    requestResponseCounter.incrementAndGet();, +                }, +            }, +                Object msg = super.decode(ctx, channel, buffer, state);, +                , +                if (msg != null) {, +                    if (msg instanceof HttpMessage) {, +                        requestResponseCounter.decrementAndGet();, +                    } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                        requestResponseCounter.decrementAndGet();, +                    }, +                }, +               , +                return msg;, +, +        @Override, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {, +            super.channelClosed(ctx, e);, +            , +            long missingResponses = requestResponseCounter.get();, +            if (missingResponses > 0) {, +                throw new PrematureChannelClosureException("Channel closed but still missing " + missingResponses + " response(s)");, +            }, +        }, +        , +        , +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import java.util.concurrent.atomic.AtomicLong;, +import io.netty.channel.ChannelStateEvent;, +import io.netty.handler.codec.PrematureChannelClosureException;, + * , + * If the {@link Channel} gets closed and there are requests missing for a response, + * a {@link PrematureChannelClosureException} is thrown., + * , +    private final AtomicLong requestResponseCounter = new AtomicLong(0);, +            if (msg instanceof HttpRequest) {, +                if (!done) {, +                requestResponseCounter.incrementAndGet();, +            } else if (msg instanceof HttpChunk) {, +                , +                // increment only if its the last chunk , +                if (((HttpChunk) msg).isLast()) {, +                    requestResponseCounter.incrementAndGet();, +                }, +            }, +                Object msg = super.decode(ctx, channel, buffer, state);, +                , +                if (msg != null) {, +                    if (msg instanceof HttpMessage) {, +                        requestResponseCounter.decrementAndGet();, +                    } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                        requestResponseCounter.decrementAndGet();, +                    }, +                }, +               , +                return msg;, +, +        @Override, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {, +            super.channelClosed(ctx, e);, +            , +            long missingResponses = requestResponseCounter.get();, +            if (missingResponses > 0) {, +                throw new PrematureChannelClosureException("Channel closed but still missing " + missingResponses + " response(s)");, +            }, +        }, +        , +        , +++ b/codec/src/main/java/io/netty/handler/codec/PrematureChannelClosureException.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */]