[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return setCharSequence0(index, sequence, charset, false);, +    }, +, +    private int setCharSequence0(int index, CharSequence sequence, Charset charset, boolean expand) {, +            int length = ByteBufUtil.utf8MaxBytes(sequence);, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            int length = sequence.length();, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            return ByteBufUtil.writeAscii(this, index, sequence, length);, +        if (expand) {, +            // setBytes(...) will take care of checking the indices., +        }, +        int written = setCharSequence0(writerIndex, sequence, charset, true);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return setCharSequence0(index, sequence, charset, false);, +    }, +, +    private int setCharSequence0(int index, CharSequence sequence, Charset charset, boolean expand) {, +            int length = ByteBufUtil.utf8MaxBytes(sequence);, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            int length = sequence.length();, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            return ByteBufUtil.writeAscii(this, index, sequence, length);, +        if (expand) {, +            // setBytes(...) will take care of checking the indices., +        }, +        int written = setCharSequence0(writerIndex, sequence, charset, true);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractUnpooledSlicedByteBuf.java, +        return super.setCharSequence(idx(index), sequence, charset);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return setCharSequence0(index, sequence, charset, false);, +    }, +, +    private int setCharSequence0(int index, CharSequence sequence, Charset charset, boolean expand) {, +            int length = ByteBufUtil.utf8MaxBytes(sequence);, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            int length = sequence.length();, +            if (expand) {, +                ensureWritable0(length);, +                checkIndex0(index, length);, +            } else {, +                checkIndex(index, length);, +            }, +            return ByteBufUtil.writeAscii(this, index, sequence, length);, +        if (expand) {, +            // setBytes(...) will take care of checking the indices., +        }, +        int written = setCharSequence0(writerIndex, sequence, charset, true);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractUnpooledSlicedByteBuf.java, +        return super.setCharSequence(idx(index), sequence, charset);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.nio.charset.Charset;, +    @Test, +    public void testWriteUsAsciiCharSequenceExpand() {, +        testWriteCharSequenceExpand(CharsetUtil.US_ASCII);, +    }, +, +    @Test, +    public void testWriteUtf8CharSequenceExpand() {, +        testWriteCharSequenceExpand(CharsetUtil.UTF_8);, +    }, +, +    @Test, +    public void testWriteIso88591CharSequenceExpand() {, +        testWriteCharSequenceExpand(CharsetUtil.ISO_8859_1);, +    }, +    @Test, +    public void testWriteUtf16CharSequenceExpand() {, +        testWriteCharSequenceExpand(CharsetUtil.UTF_16);, +    }, +, +    private void testWriteCharSequenceExpand(Charset charset) {, +        ByteBuf buf = newBuffer(1);, +        try {]