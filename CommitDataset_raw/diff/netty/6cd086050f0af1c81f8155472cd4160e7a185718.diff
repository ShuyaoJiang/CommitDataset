[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.parseEtcResolverFirstNdots;, +    private static final int DEFAULT_NDOTS;, +, +        int ndots;, +        try {, +            ndots = parseEtcResolverFirstNdots();, +        } catch (Exception ignore) {, +            ndots = UnixResolverDnsServerAddressStreamProvider.DEFAULT_NDOTS;, +        }, +        DEFAULT_NDOTS = ndots;, +        this.ndots = ndots >= 0 ? ndots : DEFAULT_NDOTS;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.parseEtcResolverFirstNdots;, +    private static final int DEFAULT_NDOTS;, +, +        int ndots;, +        try {, +            ndots = parseEtcResolverFirstNdots();, +        } catch (Exception ignore) {, +            ndots = UnixResolverDnsServerAddressStreamProvider.DEFAULT_NDOTS;, +        }, +        DEFAULT_NDOTS = ndots;, +        this.ndots = ndots >= 0 ? ndots : DEFAULT_NDOTS;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +    private int ndots = -1;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.parseEtcResolverFirstNdots;, +    private static final int DEFAULT_NDOTS;, +, +        int ndots;, +        try {, +            ndots = parseEtcResolverFirstNdots();, +        } catch (Exception ignore) {, +            ndots = UnixResolverDnsServerAddressStreamProvider.DEFAULT_NDOTS;, +        }, +        DEFAULT_NDOTS = ndots;, +        this.ndots = ndots >= 0 ? ndots : DEFAULT_NDOTS;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +    private int ndots = -1;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +    private String pristineHostname;, +    void resolve(final Promise<T> promise) {, +        if (parent.searchDomains().length == 0 || parent.ndots() == 0 || StringUtil.endsWith(hostname, '.')) {, +, +            doSearchDomainQuery(0, new FutureListener<T>() {, +                private int count = 1;, +                @Override, +                public void operationComplete(Future<T> future) throws Exception {, +                    if (future.isSuccess()) {, +                        promise.trySuccess(future.getNow());, +                    } else if (count < parent.searchDomains().length) {, +                        doSearchDomainQuery(count++, this);, +                    } else {, +                        promise.tryFailure(future.cause());, +            });, +        }, +    }, +, +    private void doSearchDomainQuery(int count, FutureListener<T> listener) {, +        DnsNameResolverContext<T> nextContext = newResolverContext(parent,, +                                                                   hostname + '.' + parent.searchDomains()[count],, +                                                                   additionals,, +                                                                   resolveCache,, +                                                                   nameServerAddrs);, +        nextContext.pristineHostname = hostname;, +        Promise<T> nextPromise = parent.executor().newPromise();, +        nextContext.internalResolve(nextPromise);, +        nextPromise.addListener(listener);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider.parseEtcResolverFirstNdots;, +    private static final int DEFAULT_NDOTS;, +, +        int ndots;, +        try {, +            ndots = parseEtcResolverFirstNdots();, +        } catch (Exception ignore) {, +            ndots = UnixResolverDnsServerAddressStreamProvider.DEFAULT_NDOTS;, +        }, +        DEFAULT_NDOTS = ndots;, +        this.ndots = ndots >= 0 ? ndots : DEFAULT_NDOTS;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +    private int ndots = -1;, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +    private String pristineHostname;, +    void resolve(final Promise<T> promise) {, +        if (parent.searchDomains().length == 0 || parent.ndots() == 0 || StringUtil.endsWith(hostname, '.')) {, +, +            doSearchDomainQuery(0, new FutureListener<T>() {, +                private int count = 1;, +                @Override, +                public void operationComplete(Future<T> future) throws Exception {, +                    if (future.isSuccess()) {, +                        promise.trySuccess(future.getNow());, +                    } else if (count < parent.searchDomains().length) {, +                        doSearchDomainQuery(count++, this);, +                    } else {, +                        promise.tryFailure(future.cause());, +            });, +        }]