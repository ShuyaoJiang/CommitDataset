[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE);, +    }, +, +    @Test, +    public void testSimpleEchoWithBoundedBuffer() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBoundedBuffer(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, 4);, +    }, +, +    private static void testSimpleEcho0(ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize) throws Throwable {, +        EchoHandler sh = new EchoHandler(maxInboundBufferSize);, +        EchoHandler ch = new EchoHandler(maxInboundBufferSize);, +        private final int maxInboundBufferSize;, +        EchoHandler(int maxInboundBufferSize) {, +            this.maxInboundBufferSize = maxInboundBufferSize;, +        }, +, +        @Override, +        public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +            return Unpooled.buffer(0, maxInboundBufferSize);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE);, +    }, +, +    @Test, +    public void testSimpleEchoWithBoundedBuffer() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBoundedBuffer(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, 4);, +    }, +, +    private static void testSimpleEcho0(ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize) throws Throwable {, +        EchoHandler sh = new EchoHandler(maxInboundBufferSize);, +        EchoHandler ch = new EchoHandler(maxInboundBufferSize);, +        private final int maxInboundBufferSize;, +        EchoHandler(int maxInboundBufferSize) {, +            this.maxInboundBufferSize = maxInboundBufferSize;, +        }, +, +        @Override, +        public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +            return Unpooled.buffer(0, maxInboundBufferSize);, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +        final int maxCapacity = byteBuf.maxCapacity();, +        final int capacity = byteBuf.capacity();, +        if (capacity == maxCapacity) {, +            return false;, +        }, +, +        final int increment = 4096;, +, +        final int writerIndex = byteBuf.writerIndex();, +        if (writerIndex != capacity) {, +            // No need to expand because there's a room in the buffer., +            return false;, +        }, +, +        // Expand to maximum capacity., +        if (writerIndex + increment > maxCapacity) {, +            byteBuf.capacity(maxCapacity);, +, +        // Expand by the increment., +        byteBuf.ensureWritableBytes(increment);, +        return true;, +        expandReadBuffer(byteBuf);, +, +                    expandReadBuffer(byteBuf);, +            channel.beginRead();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE);, +    }, +, +    @Test, +    public void testSimpleEchoWithBoundedBuffer() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBoundedBuffer(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, 4);, +    }, +, +    private static void testSimpleEcho0(ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize) throws Throwable {, +        EchoHandler sh = new EchoHandler(maxInboundBufferSize);, +        EchoHandler ch = new EchoHandler(maxInboundBufferSize);, +        private final int maxInboundBufferSize;, +        EchoHandler(int maxInboundBufferSize) {, +            this.maxInboundBufferSize = maxInboundBufferSize;, +        }, +, +        @Override, +        public ByteBuf newInboundBuffer(ChannelHandlerContext ctx) throws Exception {, +            return Unpooled.buffer(0, maxInboundBufferSize);, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +        final int maxCapacity = byteBuf.maxCapacity();]