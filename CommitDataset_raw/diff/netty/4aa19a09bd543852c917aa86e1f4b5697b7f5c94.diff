[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    SSL.setTimeout(ssl, 0);, +                }, +            }, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    return System.currentTimeMillis() - (SSL.getTimeout(ssl) * 1000L) < (SSL.getTime(ssl) * 1000L);, +                }, +            }, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    SSL.setTimeout(ssl, 0);, +                }, +            }, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    return System.currentTimeMillis() - (SSL.getTimeout(ssl) * 1000L) < (SSL.getTime(ssl) * 1000L);, +                }, +            }, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +    public void testSessionInvalidate() throws Exception {, +        assumeTrue(OpenSsl.isAvailable());, +        super.testSessionInvalidate();, +    }, +, +    @Override, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    SSL.setTimeout(ssl, 0);, +                }, +            }, +            synchronized (OpenSslEngine.this) {, +                if (!isDestroyed()) {, +                    return System.currentTimeMillis() - (SSL.getTimeout(ssl) * 1000L) < (SSL.getTime(ssl) * 1000L);, +                }, +            }, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +    public void testSessionInvalidate() throws Exception {, +        assumeTrue(OpenSsl.isAvailable());, +        super.testSessionInvalidate();, +    }, +, +    @Override, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +import javax.net.ssl.SSLEngineResult;, +import javax.net.ssl.SSLSession;, +import java.nio.ByteBuffer;, +    @Test, +    public void testSessionInvalidate() throws Exception {, +        final SslContext clientContext = SslContextBuilder.forClient(), +                .trustManager(InsecureTrustManagerFactory.INSTANCE), +                .sslProvider(sslProvider()), +                .build();, +        SelfSignedCertificate ssc = new SelfSignedCertificate();, +        SslContext serverContext = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()), +                .sslProvider(sslProvider()), +                .build();, +        SSLEngine clientEngine = clientContext.newEngine(UnpooledByteBufAllocator.DEFAULT);, +        SSLEngine serverEngine = serverContext.newEngine(UnpooledByteBufAllocator.DEFAULT);, +        handshake(clientEngine, serverEngine);, +, +        SSLSession session = serverEngine.getSession();, +        assertTrue(session.isValid());, +        session.invalidate();, +        assertFalse(session.isValid());, +    }, +, +    private static void handshake(SSLEngine clientEngine, SSLEngine serverEngine) throws SSLException {, +        int netBufferSize = 17 * 1024;, +        ByteBuffer cTOs = ByteBuffer.allocateDirect(netBufferSize);, +        ByteBuffer sTOc = ByteBuffer.allocateDirect(netBufferSize);, +, +        ByteBuffer serverAppReadBuffer = ByteBuffer.allocateDirect(, +                serverEngine.getSession().getApplicationBufferSize());, +        ByteBuffer clientAppReadBuffer = ByteBuffer.allocateDirect(, +                clientEngine.getSession().getApplicationBufferSize());, +, +        clientEngine.beginHandshake();, +        serverEngine.beginHandshake();, +, +        ByteBuffer empty = ByteBuffer.allocate(0);, +, +        SSLEngineResult clientResult;, +        SSLEngineResult serverResult;, +, +        do {, +            clientResult = clientEngine.wrap(empty, cTOs);, +            runDelegatedTasks(clientResult, clientEngine);, +            serverResult = serverEngine.wrap(empty, sTOc);, +            runDelegatedTasks(serverResult, serverEngine);, +            cTOs.flip();, +            sTOc.flip();, +            clientResult = clientEngine.unwrap(sTOc, clientAppReadBuffer);, +            runDelegatedTasks(clientResult, clientEngine);]