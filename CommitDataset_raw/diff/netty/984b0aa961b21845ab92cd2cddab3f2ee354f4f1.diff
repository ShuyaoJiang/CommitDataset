[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +                int writerIndex = decompressed.writerIndex();, +                int outIndex = decompressed.arrayOffset() + writerIndex;, +                int length = decompressed.writableBytes();, +                    decompressed.writerIndex(writerIndex + outputLength);, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +                int writerIndex = decompressed.writerIndex();, +                int outIndex = decompressed.arrayOffset() + writerIndex;, +                int length = decompressed.writableBytes();, +                    decompressed.writerIndex(writerIndex + outputLength);, +++ b/codec/src/test/java/io/netty/handler/codec/compression/ZlibTest.java, +import java.io.OutputStream;, +import java.util.zip.DeflaterOutputStream;, +    private static final byte[] BYTES_LARGE2 = ("<!--?xml version=\"1.0\" encoding=\"ISO-8859-1\"?-->\n" +, +            "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" " +, +            "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n" +, +            "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"><head>\n" +, +            "    <title>Apache Tomcat</title>\n" +, +            "</head>\n" +, +            '\n' +, +            "<body>\n" +, +            "<h1>It works !</h1>\n" +, +            '\n' +, +            "<p>If you're seeing this page via a web browser, it means you've setup Tomcat successfully." +, +            " Congratulations!</p>\n" +, +            " \n" +, +            "<p>This is the default Tomcat home page." +, +            " It can be found on the local filesystem at: <code>/var/lib/tomcat7/webapps/ROOT/index.html</code></p>\n" +, +            '\n' +, +            "<p>Tomcat7 veterans might be pleased to learn that this system instance of Tomcat is installed with" +, +            " <code>CATALINA_HOME</code> in <code>/usr/share/tomcat7</code> and <code>CATALINA_BASE</code> in" +, +            " <code>/var/lib/tomcat7</code>, following the rules from" +, +            " <code>/usr/share/doc/tomcat7-common/RUNNING.txt.gz</code>.</p>\n" +, +            '\n' +, +            "<p>You might consider installing the following packages, if you haven't already done so:</p>\n" +, +            '\n' +, +            "<p><b>tomcat7-docs</b>: This package installs a web application that allows to browse the Tomcat 7" +, +            " documentation locally. Once installed, you can access it by clicking <a href=\"docs/\">here</a>.</p>\n" +, +            '\n' +, +            "<p><b>tomcat7-examples</b>: This package installs a web application that allows to access the Tomcat" +, +            " 7 Servlet and JSP examples. Once installed, you can access it by clicking" +, +            " <a href=\"examples/\">here</a>.</p>\n" +, +            '\n' +, +            "<p><b>tomcat7-admin</b>: This package installs two web applications that can help managing this Tomcat" +, +            " instance. Once installed, you can access the <a href=\"manager/html\">manager webapp</a> and" +, +            " the <a href=\"host-manager/html\">host-manager webapp</a>.</p><p>\n" +, +            '\n' +, +            "</p><p>NOTE: For security reasons, using the manager webapp is restricted" +, +            " to users with role \"manager\"." +, +            " The host-manager webapp is restricted to users with role \"admin\". Users are " +, +            "defined in <code>/etc/tomcat7/tomcat-users.xml</code>.</p>\n" +, +            '\n' +, +            '\n' +, +            '\n' +, +            "</body></html>").getBytes(CharsetUtil.UTF_8);, +, +        byte[] bytes = "message".getBytes(CharsetUtil.UTF_8);, +        ByteBuf data = Unpooled.wrappedBuffer(bytes);, +        ByteBuf deflatedData = Unpooled.wrappedBuffer(gzip(bytes));, +, +    // Test for https://github.com/netty/netty/issues/2572, +    private void testCompressLarge2(ZlibWrapper decoderWrapper, byte[] compressed, byte[] data) throws Exception {, +        EmbeddedChannel chDecoder = new EmbeddedChannel(createDecoder(decoderWrapper));, +        chDecoder.writeInbound(Unpooled.wrappedBuffer(compressed));, +        assertTrue(chDecoder.finish());, +, +        ByteBuf decoded = Unpooled.buffer(data.length);, +, +        for (;;) {, +            ByteBuf buf = chDecoder.readInbound();, +            if (buf == null) {, +                break;, +            }, +            decoded.writeBytes(buf);, +            buf.release();, +        }, +        assertEquals(Unpooled.wrappedBuffer(data), decoded);, +        decoded.release();, +    }, +, +        testCompressLarge2(ZlibWrapper.ZLIB, deflate(BYTES_LARGE2), BYTES_LARGE2);, +        testCompressLarge2(ZlibWrapper.GZIP, gzip(BYTES_LARGE2), BYTES_LARGE2);, +    private static byte[] gzip(byte[] bytes) throws IOException {, +        stream.write(bytes);, +    private static byte[] deflate(byte[] bytes) throws IOException {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        OutputStream stream = new DeflaterOutputStream(out);, +        stream.write(bytes);, +        stream.close();, +        return out.toByteArray();, +    }]