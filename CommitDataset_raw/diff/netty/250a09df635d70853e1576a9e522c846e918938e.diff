[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <linux/socket.h> // SOL_TCP definition, +, +#ifndef _KERNEL_FASTOPEN, +#define _KERNEL_FASTOPEN, +// conditional define for TCP_FASTOPEN mostly on ubuntu, +#ifndef TCP_FASTOPEN, +#define TCP_FASTOPEN   23, +#endif, +, +// conditional define for SOL_TCP mostly on ubuntu, +#ifndef SOL_TCP, +#define SOL_TCP 6, +#endif, +#endif, +, +static int getSysctlValue(const char * property, int* returnValue) {, +    int rc = -1;, +    FILE *fd=fopen(property, "r");, +    if (fd != NULL) {, +      char buf[32] = {0x0};, +      if (fgets(buf, 32, fd) != NULL) {, +        *returnValue = atoi(buf);, +        rc = 0;, +      }, +      fclose(fd);, +    }, +    return rc;, +}, +, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setTcpFastopen(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_TCP, TCP_FASTOPEN, &optval, sizeof(optval));, +}, +, +JNIEXPORT jboolean JNICALL Java_io_netty_channel_epoll_Native_isSupportingTcpFastopen(JNIEnv* env, jclass clazz) {, +    int fastopen = 0;, +    getSysctlValue("/proc/sys/net/ipv4/tcp_fastopen", &fastopen);, +    if (fastopen > 0) {, +        return JNI_TRUE;, +    }, +    return JNI_FALSE;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <linux/socket.h> // SOL_TCP definition, +, +#ifndef _KERNEL_FASTOPEN, +#define _KERNEL_FASTOPEN, +// conditional define for TCP_FASTOPEN mostly on ubuntu, +#ifndef TCP_FASTOPEN, +#define TCP_FASTOPEN   23, +#endif, +, +// conditional define for SOL_TCP mostly on ubuntu, +#ifndef SOL_TCP, +#define SOL_TCP 6, +#endif, +#endif, +, +static int getSysctlValue(const char * property, int* returnValue) {, +    int rc = -1;, +    FILE *fd=fopen(property, "r");, +    if (fd != NULL) {, +      char buf[32] = {0x0};, +      if (fgets(buf, 32, fd) != NULL) {, +        *returnValue = atoi(buf);, +        rc = 0;, +      }, +      fclose(fd);, +    }, +    return rc;, +}, +, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setTcpFastopen(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_TCP, TCP_FASTOPEN, &optval, sizeof(optval));, +}, +, +JNIEXPORT jboolean JNICALL Java_io_netty_channel_epoll_Native_isSupportingTcpFastopen(JNIEnv* env, jclass clazz) {, +    int fastopen = 0;, +    getSysctlValue("/proc/sys/net/ipv4/tcp_fastopen", &fastopen);, +    if (fastopen > 0) {, +        return JNI_TRUE;, +    }, +    return JNI_FALSE;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setTcpFastopen(JNIEnv* env, jclass clazz, jint fd, jint optval);, +jboolean Java_io_netty_channel_epoll_Native_isSupportingTcpFastopen(JNIEnv* env, jclass clazz);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <linux/socket.h> // SOL_TCP definition, +, +#ifndef _KERNEL_FASTOPEN, +#define _KERNEL_FASTOPEN, +// conditional define for TCP_FASTOPEN mostly on ubuntu, +#ifndef TCP_FASTOPEN, +#define TCP_FASTOPEN   23, +#endif, +, +// conditional define for SOL_TCP mostly on ubuntu]