[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpUtil.java, +            setHttp2Scheme(inHeaders, requestTargetUri, out);, +            if (!isOriginForm(requestTargetUri) && !isAsteriskForm(requestTargetUri)) {, +                if (host == null || host.isEmpty()) {, +                    setHttp2Authority(inHeaders, requestTargetUri.getAuthority(), out);, +                    setHttp2Authority(inHeaders, host, out);, +    private static void setHttp2Authority(HttpHeaders in, String autority, Http2Headers out) {, +        if (autority != null) {, +            int endOfUserInfo = autority.indexOf('@');, +                out.authority(new AsciiString(autority));, +            } else if (endOfUserInfo + 1 < autority.length()) {, +                out.authority(new AsciiString(autority.substring(endOfUserInfo + 1)));, +            } else {, +                throw new IllegalArgumentException("autority: " + autority);, +    private static void setHttp2Scheme(HttpHeaders in, URI uri, Http2Headers out) {, +            return;, +, +            return;, +, +        if (uri.getPort() == HTTPS.port()) {, +            out.scheme(HTTPS.name());, +        } else if (uri.getPort() == HTTP.port()) {, +            out.scheme(HTTP.name());, +        } else {, +            throw new IllegalArgumentException(":scheme must be specified. " +, +                    "see https://tools.ietf.org/html/rfc7540#section-8.1.2.3");, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpUtil.java, +            setHttp2Scheme(inHeaders, requestTargetUri, out);, +            if (!isOriginForm(requestTargetUri) && !isAsteriskForm(requestTargetUri)) {, +                if (host == null || host.isEmpty()) {, +                    setHttp2Authority(inHeaders, requestTargetUri.getAuthority(), out);, +                    setHttp2Authority(inHeaders, host, out);, +    private static void setHttp2Authority(HttpHeaders in, String autority, Http2Headers out) {, +        if (autority != null) {, +            int endOfUserInfo = autority.indexOf('@');, +                out.authority(new AsciiString(autority));, +            } else if (endOfUserInfo + 1 < autority.length()) {, +                out.authority(new AsciiString(autority.substring(endOfUserInfo + 1)));, +            } else {, +                throw new IllegalArgumentException("autority: " + autority);, +    private static void setHttp2Scheme(HttpHeaders in, URI uri, Http2Headers out) {, +            return;, +, +            return;, +, +        if (uri.getPort() == HTTPS.port()) {, +            out.scheme(HTTPS.name());, +        } else if (uri.getPort() == HTTP.port()) {, +            out.scheme(HTTP.name());, +        } else {, +            throw new IllegalArgumentException(":scheme must be specified. " +, +                    "see https://tools.ietf.org/html/rfc7540#section-8.1.2.3");, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/HttpToHttp2ConnectionHandlerTest.java, +    public void testHeadersOnlyRequest() throws Exception {, +        final FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, GET,, +                "http://my-user_name@www.example.org:5555/example");, +                "my-user_name@www.example.org:5555");, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "http");, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +                "foouser@www.example.org:5555");, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "https");, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        httpHeaders.set(HttpHeaderNames.HOST, "www.example.com:80");, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "http");, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +        httpHeaders.set(HttpHeaderNames.HOST, "[::1]:80");, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "http");, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +    public void testHostFormRequestTargetHandled() throws Exception {, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "http");, +                .scheme(new AsciiString("http")).authority(new AsciiString("localhost:80"));, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +    public void testHostIPv4FormRequestTargetHandled() throws Exception {, +        httpHeaders.set(HttpUtil.ExtensionHeaderNames.SCHEME.text(), "http");, +        final Http2Headers http2Headers =, +                new DefaultHttp2Headers().method(new AsciiString("GET")).path(new AsciiString("/")), +                .scheme(new AsciiString("http")).authority(new AsciiString("1.2.3.4:80"));, +        ChannelPromise writePromise = newPromise();, +        verifyHeadersOnly(http2Headers, writePromise, clientChannel.writeAndFlush(request, writePromise));, +    public void testNoSchemeRequestTargetHandled() throws Exception {, +        httpHeaders.set(HttpHeaderNames.HOST, "localhost");, +        final FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, POST,, +                "http://your_user-name123@www.example.org:5555/example",, +        httpHeaders.set(HttpHeaderNames.HOST, "www.example-origin.org:5555");, +                .authority(new AsciiString("www.example-origin.org:5555")).scheme(new AsciiString("http")), +        final FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, POST,, +                "http://your_user-name123@www.example.org:5555/example",]