[+++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +import org.jboss.netty.handler.stream.ChunkedOioFile;, +        ChannelFuture writeFuture = ch.write(new ChunkedOioFile(raf, 0, fileLength, 8192));, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +import org.jboss.netty.handler.stream.ChunkedOioFile;, +        ChannelFuture writeFuture = ch.write(new ChunkedOioFile(raf, 0, fileLength, 8192));, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +import org.jboss.netty.handler.stream.ChunkedOioFile;, +        ChannelFuture writeFuture = ch.write(new ChunkedOioFile(raf, 0, fileLength, 8192));, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedOioFile.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.stream;, +, +import static org.jboss.netty.buffer.ChannelBuffers.*;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.RandomAccessFile;, +, +/**, + * A {@link ChunkedInput} that fetches data from a file chunk by chunk., + *, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + * @version $Rev$, $Date$, + */, +public class ChunkedOioFile implements ChunkedInput {, +, +    private final RandomAccessFile file;, +    private final long startOffset;, +    private final long endOffset;, +    private final int chunkSize;, +    private volatile long offset;, +, +    /**, +     * Creates a new instance that fetches data from the specified file., +     */, +    public ChunkedOioFile(File file) throws IOException {, +        this(file, ChunkedStream.DEFAULT_CHUNK_SIZE);, +    }, +, +    /**, +     * Creates a new instance that fetches data from the specified file., +     *, +     * @param chunkSize the number of bytes to fetch on each, +     *                  {@link #nextChunk()} call, +     */, +    public ChunkedOioFile(File file, int chunkSize) throws IOException {, +        this(new RandomAccessFile(file, "r"), chunkSize);, +    }, +, +    /**, +     * Creates a new instance that fetches data from the specified file., +     */, +    public ChunkedOioFile(RandomAccessFile file) throws IOException {, +        this(file, ChunkedStream.DEFAULT_CHUNK_SIZE);, +    }, +, +    /**, +     * Creates a new instance that fetches data from the specified file., +     *, +     * @param chunkSize the number of bytes to fetch on each, +     *                  {@link #nextChunk()} call, +     */, +    public ChunkedOioFile(RandomAccessFile file, int chunkSize) throws IOException {, +        this(file, 0, file.length(), chunkSize);, +    }, +, +    /**, +     * Creates a new instance that fetches data from the specified file., +     *, +     * @param offset the offset of the file where the transfer begins, +     * @param length the number of bytes to transfer, +     * @param chunkSize the number of bytes to fetch on each, +     *                  {@link #nextChunk()} call, +     */, +    public ChunkedOioFile(RandomAccessFile file, long offset, long length, int chunkSize) throws IOException {, +        if (file == null) {, +            throw new NullPointerException("file");, +        }, +        if (offset < 0) {, +            throw new IllegalArgumentException(, +                    "offset: " + offset + " (expected: 0 or greater)");, +        }]