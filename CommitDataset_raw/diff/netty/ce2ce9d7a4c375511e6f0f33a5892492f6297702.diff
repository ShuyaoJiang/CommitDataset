[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +    private static final byte STATE_INIT = 0;, +    private static final byte STATE_CALLING_CHILD_DECODE = 1;, +    private static final byte STATE_HANDLER_REMOVED_PENDING = 2;, +, +    /**, +     * A bitmask where the bits are defined as, +     * <ul>, +     *     <li>{@link #STATE_INIT}</li>, +     *     <li>{@link #STATE_CALLING_CHILD_DECODE}</li>, +     *     <li>{@link #STATE_HANDLER_REMOVED_PENDING}</li>, +     * </ul>, +     */, +    private byte decodeState = STATE_INIT;, +        if (decodeState == STATE_CALLING_CHILD_DECODE) {, +            decodeState = STATE_HANDLER_REMOVED_PENDING;, +            return;, +        }, +                decodeRemovalReentryProtection(ctx, in, out);, +     * Decode the from one {@link ByteBuf} to an other. This method will be called till either the input, +     * {@link ByteBuf} has nothing to read when return from this method or till nothing was read from the input, +     * {@link ByteBuf}., +     *, +     * @param ctx           the {@link ChannelHandlerContext} which this {@link ByteToMessageDecoder} belongs to, +     * @param in            the {@link ByteBuf} from which to read data, +     * @param out           the {@link List} to which decoded messages should be added, +     * @throws Exception    is thrown if an error occurs, +     */, +    final void decodeRemovalReentryProtection(ChannelHandlerContext ctx, ByteBuf in, List<Object> out), +            throws Exception {, +        decodeState = STATE_CALLING_CHILD_DECODE;, +        try {, +            decode(ctx, in, out);, +        } finally {, +            boolean removePending = decodeState == STATE_HANDLER_REMOVED_PENDING;, +            decodeState = STATE_INIT;, +            if (removePending) {, +                handlerRemoved(ctx);, +            }, +        }, +    }, +, +    /**, +            decodeRemovalReentryProtection(ctx, in, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +    private static final byte STATE_INIT = 0;, +    private static final byte STATE_CALLING_CHILD_DECODE = 1;, +    private static final byte STATE_HANDLER_REMOVED_PENDING = 2;, +, +    /**, +     * A bitmask where the bits are defined as, +     * <ul>, +     *     <li>{@link #STATE_INIT}</li>, +     *     <li>{@link #STATE_CALLING_CHILD_DECODE}</li>, +     *     <li>{@link #STATE_HANDLER_REMOVED_PENDING}</li>, +     * </ul>, +     */, +    private byte decodeState = STATE_INIT;, +        if (decodeState == STATE_CALLING_CHILD_DECODE) {, +            decodeState = STATE_HANDLER_REMOVED_PENDING;, +            return;, +        }, +                decodeRemovalReentryProtection(ctx, in, out);, +     * Decode the from one {@link ByteBuf} to an other. This method will be called till either the input, +     * {@link ByteBuf} has nothing to read when return from this method or till nothing was read from the input, +     * {@link ByteBuf}., +     *, +     * @param ctx           the {@link ChannelHandlerContext} which this {@link ByteToMessageDecoder} belongs to, +     * @param in            the {@link ByteBuf} from which to read data, +     * @param out           the {@link List} to which decoded messages should be added, +     * @throws Exception    is thrown if an error occurs, +     */, +    final void decodeRemovalReentryProtection(ChannelHandlerContext ctx, ByteBuf in, List<Object> out), +            throws Exception {, +        decodeState = STATE_CALLING_CHILD_DECODE;, +        try {, +            decode(ctx, in, out);, +        } finally {, +            boolean removePending = decodeState == STATE_HANDLER_REMOVED_PENDING;, +            decodeState = STATE_INIT;, +            if (removePending) {, +                handlerRemoved(ctx);, +            }, +        }, +    }, +, +    /**, +            decodeRemovalReentryProtection(ctx, in, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +                    decodeRemovalReentryProtection(ctx, replayable, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +    private static final byte STATE_INIT = 0;, +    private static final byte STATE_CALLING_CHILD_DECODE = 1;, +    private static final byte STATE_HANDLER_REMOVED_PENDING = 2;, +, +    /**, +     * A bitmask where the bits are defined as, +     * <ul>, +     *     <li>{@link #STATE_INIT}</li>, +     *     <li>{@link #STATE_CALLING_CHILD_DECODE}</li>]