[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +                                "(?:DHE|EDH|ECDH|ECDHE|SRP|RSA)-(?:DSS|RSA|ECDSA|PSK)|" +, +        } else if (bulkCipher.contains("CHACHA20")) {, +            return handshakeAlgo + '-' + bulkCipher;, +        String javaCipherSuite = handshakeAlgo + "_WITH_" + bulkCipher + '_' + hmacAlgo;, +        // For historical reasons the CHACHA20 ciphers do not follow OpenSSL's custom naming convention and omits the, +        // HMAC algorithm portion of the name. There is currently no way to derive this information because it is, +        // omitted from the OpenSSL cipher name, but they currently all use SHA256 for HMAC [1]., +        // [1] https://www.openssl.org/docs/man1.1.0/apps/ciphers.html, +        return bulkCipher.contains("CHACHA20") ? javaCipherSuite + "_SHA256" : javaCipherSuite;, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +                                "(?:DHE|EDH|ECDH|ECDHE|SRP|RSA)-(?:DSS|RSA|ECDSA|PSK)|" +, +        } else if (bulkCipher.contains("CHACHA20")) {, +            return handshakeAlgo + '-' + bulkCipher;, +        String javaCipherSuite = handshakeAlgo + "_WITH_" + bulkCipher + '_' + hmacAlgo;, +        // For historical reasons the CHACHA20 ciphers do not follow OpenSSL's custom naming convention and omits the, +        // HMAC algorithm portion of the name. There is currently no way to derive this information because it is, +        // omitted from the OpenSSL cipher name, but they currently all use SHA256 for HMAC [1]., +        // [1] https://www.openssl.org/docs/man1.1.0/apps/ciphers.html, +        return bulkCipher.contains("CHACHA20") ? javaCipherSuite + "_SHA256" : javaCipherSuite;, +++ b/handler/src/test/java/io/netty/handler/ssl/CipherSuiteConverterTest.java, +, +        // For historical reasons the CHACHA20 ciphers do not follow OpenSSL's custom naming, +        // convention and omits the HMAC algorithm portion of the name., +        testJ2OMapping("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-RSA-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-ECDSA-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "DHE-RSA-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_PSK_WITH_CHACHA20_POLY1305_SHA256", "PSK-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-PSK-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256", "DHE-PSK-CHACHA20-POLY1305");, +        testJ2OMapping("TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256", "RSA-PSK-CHACHA20-POLY1305");, +, +        // For historical reasons the CHACHA20 ciphers do not follow OpenSSL's custom naming, +        // convention and omits the HMAC algorithm portion of the name., +        testO2JMapping("ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-RSA-CHACHA20-POLY1305");, +        testO2JMapping("ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-ECDSA-CHACHA20-POLY1305");, +        testO2JMapping("DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "DHE-RSA-CHACHA20-POLY1305");, +        testO2JMapping("PSK_WITH_CHACHA20_POLY1305_SHA256", "PSK-CHACHA20-POLY1305");, +        testO2JMapping("ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", "ECDHE-PSK-CHACHA20-POLY1305");, +        testO2JMapping("DHE_PSK_WITH_CHACHA20_POLY1305_SHA256", "DHE-PSK-CHACHA20-POLY1305");, +        testO2JMapping("RSA_PSK_WITH_CHACHA20_POLY1305_SHA256", "RSA-PSK-CHACHA20-POLY1305");]