[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the previous or next handler in a, + * {@link ChannelPipeline}., + * <h3>Firing an event to the previous or next handler</h3>, + * <p>, + * You can forward the received event downstream or upstream.  In most cases,, + * {@link ChannelDownstreamHandler} will fire the event to the previous handler, + * (downstream) although it is absolutely normal to fire the event to the next, + * handler (upstream):, + *, + * <pre>, + * // Sending the event forward (downstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendDownstream(e);, + *     ..., + * }, + *, + * // Sending the event backward (upstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendUpstream(new DefaultChannelStateEvent(...));, + *     ..., + * }, + * </pre>, + * <p>, + * You will also find various helper methods in {@link Channels} to be useful, + * to generate and fire an artificial or manipulated event., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the previous or next handler in a, + * {@link ChannelPipeline}., + * <h3>Firing an event to the previous or next handler</h3>, + * <p>, + * You can forward the received event downstream or upstream.  In most cases,, + * {@link ChannelDownstreamHandler} will fire the event to the previous handler, + * (downstream) although it is absolutely normal to fire the event to the next, + * handler (upstream):, + *, + * <pre>, + * // Sending the event forward (downstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendDownstream(e);, + *     ..., + * }, + *, + * // Sending the event backward (upstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendUpstream(new DefaultChannelStateEvent(...));, + *     ..., + * }, + * </pre>, + * <p>, + * You will also find various helper methods in {@link Channels} to be useful, + * to generate and fire an artificial or manipulated event., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * {@link ChannelEvent} to the next or previous handler in a, + * {@link ChannelPipeline}., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * {@link ChannelEvent} to the previous or next handler in a, + * {@link ChannelPipeline}., + * <h3>Firing an event to the previous or next handler</h3>, + * <p>, + * You can forward the received event downstream or upstream.  In most cases,, + * {@link ChannelDownstreamHandler} will fire the event to the previous handler, + * (downstream) although it is absolutely normal to fire the event to the next, + * handler (upstream):, + *, + * <pre>, + * // Sending the event forward (downstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendDownstream(e);, + *     ..., + * }, + *, + * // Sending the event backward (upstream), + * void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception {, + *     ..., + *     ctx.sendUpstream(new DefaultChannelStateEvent(...));, + *     ..., + * }, + * </pre>, + * <p>, + * You will also find various helper methods in {@link Channels} to be useful, + * to generate and fire an artificial or manipulated event., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * {@link ChannelEvent} to the next or previous handler in a, + * {@link ChannelPipeline}., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, +import org.jboss.netty.handler.ssl.SslHandler;, +, + * A chain of {@link ChannelHandler}s which handles a {@link ChannelEvent}., + * Every {@link Channel} has its own pipeline instance.  You can add one or, + * more {@link ChannelHandler}s to the pipeline to receive I/O events, + * (e.g. read) and to request I/O operations (e.g. write and close).]