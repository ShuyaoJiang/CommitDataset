[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +            private boolean closeInitiated;, +            public void close(final ChannelPromise promise) {, +                if (closeInitiated) {, +                        // Closed already., +                        promise.setSuccess();, +                    } else if (!(promise instanceof VoidChannelPromise)) { // Only needed if no VoidChannelPromise., +                        // This means close() was called before so we just register a listener and return, +                        closePromise.addListener(new ChannelFutureListener() {, +                            @Override, +                            public void operationComplete(ChannelFuture future) throws Exception {, +                                promise.setSuccess();, +                            }, +                        });, +                    }, +                closeInitiated = true;, +, +                promise.setSuccess();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +            private boolean closeInitiated;, +            public void close(final ChannelPromise promise) {, +                if (closeInitiated) {, +                        // Closed already., +                        promise.setSuccess();, +                    } else if (!(promise instanceof VoidChannelPromise)) { // Only needed if no VoidChannelPromise., +                        // This means close() was called before so we just register a listener and return, +                        closePromise.addListener(new ChannelFutureListener() {, +                            @Override, +                            public void operationComplete(ChannelFuture future) throws Exception {, +                                promise.setSuccess();, +                            }, +                        });, +                    }, +                closeInitiated = true;, +, +                promise.setSuccess();, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecTest.java, +    @Test, +    public void callUnsafeCloseMultipleTimes() {, +        LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream);, +        Http2StreamChannel childChannel = (Http2StreamChannel) inboundHandler.channel();, +        childChannel.unsafe().close(childChannel.voidPromise());, +, +        ChannelPromise promise = childChannel.newPromise();, +        childChannel.unsafe().close(promise);, +        promise.syncUninterruptibly();, +        childChannel.closeFuture().syncUninterruptibly();, +    }, +]