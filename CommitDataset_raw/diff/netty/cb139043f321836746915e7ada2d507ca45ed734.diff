[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +    private static final int ST_CONTENT_ALWAYS_EMPTY = 3;, +            state = isContentAlwaysEmpty(m) ? ST_CONTENT_ALWAYS_EMPTY :, +                    HttpUtil.isTransferEncodingChunked(m) ? ST_CONTENT_CHUNK : ST_CONTENT_NON_CHUNK;, +            switch (state) {, +                case ST_INIT:, +                case ST_CONTENT_ALWAYS_EMPTY:, +                    out.add(EMPTY_BUFFER);, +                    if (msg instanceof LastHttpContent) {, +                        state = ST_INIT;, +                    return;, +                case ST_CONTENT_NON_CHUNK:, +                    return;, +                case ST_CONTENT_CHUNK:, +                    encodeChunkedContent(ctx, msg, contentLength(msg), out);, +                    return;, +                default:, +    boolean isContentAlwaysEmpty(@SuppressWarnings("unused") H msg) {, +        return false;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +    private static final int ST_CONTENT_ALWAYS_EMPTY = 3;, +            state = isContentAlwaysEmpty(m) ? ST_CONTENT_ALWAYS_EMPTY :, +                    HttpUtil.isTransferEncodingChunked(m) ? ST_CONTENT_CHUNK : ST_CONTENT_NON_CHUNK;, +            switch (state) {, +                case ST_INIT:, +                case ST_CONTENT_ALWAYS_EMPTY:, +                    out.add(EMPTY_BUFFER);, +                    if (msg instanceof LastHttpContent) {, +                        state = ST_INIT;, +                    return;, +                case ST_CONTENT_NON_CHUNK:, +                    return;, +                case ST_CONTENT_CHUNK:, +                    encodeChunkedContent(ctx, msg, contentLength(msg), out);, +                    return;, +                default:, +    boolean isContentAlwaysEmpty(@SuppressWarnings("unused") H msg) {, +        return false;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java, +import io.netty.buffer.ByteBuf;, +import java.util.ArrayDeque;, +import java.util.List;, +import java.util.Queue;, +, +    /** A queue that is used for correlating a request and a response. */, +    private final Queue<HttpMethod> queue = new ArrayDeque<HttpMethod>();, +, +        init(new HttpServerRequestDecoder(maxInitialLineLength, maxHeaderSize, maxChunkSize),, +                new HttpServerResponseEncoder());, +        init(new HttpServerRequestDecoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders),, +                new HttpServerResponseEncoder());, +        init(, +          new HttpServerRequestDecoder(maxInitialLineLength, maxHeaderSize, maxChunkSize,, +                  validateHeaders, initialBufferSize),, +          new HttpServerResponseEncoder());, +, +    private final class HttpServerRequestDecoder extends HttpRequestDecoder {, +        public HttpServerRequestDecoder(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) {, +            super(maxInitialLineLength, maxHeaderSize, maxChunkSize);, +        }, +, +        public HttpServerRequestDecoder(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,, +                                        boolean validateHeaders) {, +            super(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders);, +        }, +, +        public HttpServerRequestDecoder(int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,, +                                        boolean validateHeaders, int initialBufferSize) {, +            super(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders, initialBufferSize);, +        }, +, +        @Override, +        protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) throws Exception {, +            int oldSize = out.size();, +            super.decode(ctx, buffer, out);, +            int size = out.size();, +            for (int i = oldSize; i < size; i++) {, +                Object obj = out.get(i);, +                if (obj instanceof HttpRequest) {, +                    queue.add(((HttpRequest) obj).method());, +                }, +            }, +        }, +    }, +, +    private final class HttpServerResponseEncoder extends HttpResponseEncoder {, +, +        @Override, +        boolean isContentAlwaysEmpty(@SuppressWarnings("unused") HttpResponse msg) {, +            return HttpMethod.HEAD.equals(queue.poll());, +        }, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +    private static final int ST_CONTENT_ALWAYS_EMPTY = 3;, +            state = isContentAlwaysEmpty(m) ? ST_CONTENT_ALWAYS_EMPTY :, +                    HttpUtil.isTransferEncodingChunked(m) ? ST_CONTENT_CHUNK : ST_CONTENT_NON_CHUNK;]