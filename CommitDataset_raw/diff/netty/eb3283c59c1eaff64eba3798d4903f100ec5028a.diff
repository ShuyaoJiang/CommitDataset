[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +    private final MessageToByteEncoder<I> encoder;, +     * @see {@link #ByteToMessageCodec(boolean)} with {@code true} as boolean parameter., +        this(true);, +     * @see {@link #ByteToMessageCodec(Class, boolean)} with {@code true} as boolean value., +        this(outboundMessageType, true);, +    }, +, +    /**, +     * Create a new instance which will try to detect the types to match out of the type parameter of the class., +     *, +     * @param preferDirect          {@code true} if a direct {@link ByteBuf} should be tried to be used as target for, +     *                              the encoded messages. If {@code false} is used it will allocate a heap, +     *                              {@link ByteBuf}, which is backed by an byte array., +     */, +    protected ByteToMessageCodec(boolean preferDirect) {, +        outboundMsgMatcher = TypeParameterMatcher.find(this, ByteToMessageCodec.class, "I");, +        encoder = new Encoder(preferDirect);, +    }, +, +    /**, +     * Create a new instance, +     *, +     * @param outboundMessageType   The type of messages to match, +     * @param preferDirect          {@code true} if a direct {@link ByteBuf} should be tried to be used as target for, +     *                              the encoded messages. If {@code false} is used it will allocate a heap, +     *                              {@link ByteBuf}, which is backed by an byte array., +     */, +    protected ByteToMessageCodec(Class<? extends I> outboundMessageType, boolean preferDirect) {, +        encoder = new Encoder(preferDirect);, +, +    private final class Encoder extends MessageToByteEncoder<I> {, +        Encoder(boolean preferDirect) {, +            super(preferDirect);, +        }, +, +        @Override, +        public boolean acceptOutboundMessage(Object msg) throws Exception {, +            return ByteToMessageCodec.this.acceptOutboundMessage(msg);, +        }, +, +        @Override, +        protected void encode(ChannelHandlerContext ctx, I msg, ByteBuf out) throws Exception {, +            ByteToMessageCodec.this.encode(ctx, msg, out);, +        }, +    }]