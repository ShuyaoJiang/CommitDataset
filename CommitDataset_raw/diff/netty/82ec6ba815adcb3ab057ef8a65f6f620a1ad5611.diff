[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java, +import java.util.HashSet;, +                Map<String, String> cnamesCopy = new HashMap<String, String>(cnames);, +                    resolved = cnamesCopy.remove(resolved);, +            String nameWithDot = hostnameWithDot(name);, +            String mappingWithDot = hostnameWithDot(mapping);, +            if (!nameWithDot.equalsIgnoreCase(mappingWithDot)) {, +                cache.cache(nameWithDot, mappingWithDot, r.timeToLive(), loop);, +        }, +        Set<String> cnames = null;, +            if (cnames == null) {, +                // Detect loops., +                cnames = new HashSet<String>(2);, +            }, +            if (!cnames.add(cname)) {, +                // Follow CNAME from cache would loop. Lets break here., +                break;, +            }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java, +import java.util.HashSet;, +                Map<String, String> cnamesCopy = new HashMap<String, String>(cnames);, +                    resolved = cnamesCopy.remove(resolved);, +            String nameWithDot = hostnameWithDot(name);, +            String mappingWithDot = hostnameWithDot(mapping);, +            if (!nameWithDot.equalsIgnoreCase(mappingWithDot)) {, +                cache.cache(nameWithDot, mappingWithDot, r.timeToLive(), loop);, +        }, +        Set<String> cnames = null;, +            if (cnames == null) {, +                // Detect loops., +                cnames = new HashSet<String>(2);, +            }, +            if (!cnames.add(cname)) {, +                // Follow CNAME from cache would loop. Lets break here., +                break;, +            }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import static java.util.Collections.singletonMap;, +    public void testFollowCNAMELoop() throws IOException {, +        expectedException.expect(UnknownHostException.class);, +        TestDnsServer dnsServer2 = new TestDnsServer(new RecordStore() {, +, +            @Override, +            public Set<ResourceRecord> getRecords(QuestionRecord question) {, +                Set<ResourceRecord> records = new LinkedHashSet<ResourceRecord>(4);, +, +                records.add(new TestDnsServer.TestResourceRecord("x." + question.getDomainName(),, +                        RecordType.A, Collections.<String, Object>singletonMap(, +                                DnsAttribute.IP_ADDRESS.toLowerCase(), "10.0.0.99")));, +                records.add(new TestDnsServer.TestResourceRecord(, +                        "cname2.netty.io", RecordType.CNAME,, +                        Collections.<String, Object>singletonMap(, +                                DnsAttribute.DOMAIN_NAME.toLowerCase(), "cname.netty.io")));, +                records.add(new TestDnsServer.TestResourceRecord(, +                        "cname.netty.io", RecordType.CNAME,, +                        Collections.<String, Object>singletonMap(, +                                DnsAttribute.DOMAIN_NAME.toLowerCase(), "cname2.netty.io")));, +                records.add(new TestDnsServer.TestResourceRecord(, +                        question.getDomainName(), RecordType.CNAME,, +                        Collections.<String, Object>singletonMap(, +                                DnsAttribute.DOMAIN_NAME.toLowerCase(), "cname.netty.io")));, +                return records;, +            }, +        });, +        dnsServer2.start();, +        DnsNameResolver resolver = null;, +        try {, +            DnsNameResolverBuilder builder = newResolver(), +                    .recursionDesired(false), +                    .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY), +                    .maxQueriesPerResolve(16), +                    .nameServerProvider(new SingletonDnsServerAddressStreamProvider(dnsServer2.localAddress()));, +, +            resolver = builder.build();, +            resolver.resolveAll("somehost.netty.io").syncUninterruptibly().getNow();, +        } finally {, +            dnsServer2.stop();, +            if (resolver != null) {, +                resolver.close();, +            }, +        }, +    }, +, +    @Test]