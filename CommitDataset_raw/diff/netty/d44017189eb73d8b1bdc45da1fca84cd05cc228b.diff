[+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +            final int nextCnt = refCnt + 1;, +, +            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            if (nextCnt <= 1) {, +            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {, +            final int nextCnt = refCnt + increment;, +, +            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            if (nextCnt <= increment) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +            final int nextCnt = refCnt + 1;, +, +            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            if (nextCnt <= 1) {, +            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {, +            final int nextCnt = refCnt + increment;, +, +            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            if (nextCnt <= increment) {, +++ b/buffer/src/test/java/io/netty/buffer/AbstractReferenceCountedByteBufTest.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.IllegalReferenceCountException;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.channels.FileChannel;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +, +public class AbstractReferenceCountedByteBufTest {, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testRetainOverflow() {, +        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();, +        referenceCounted.setRefCnt(Integer.MAX_VALUE);, +        assertEquals(Integer.MAX_VALUE, referenceCounted.refCnt());, +        referenceCounted.retain();, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testRetainOverflow2() {, +        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();, +        assertEquals(1, referenceCounted.refCnt());, +        referenceCounted.retain(Integer.MAX_VALUE);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testReleaseOverflow() {, +        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();, +        referenceCounted.setRefCnt(0);, +        assertEquals(0, referenceCounted.refCnt());, +        referenceCounted.release(Integer.MAX_VALUE);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testRetainResurrect() {, +        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();, +        assertTrue(referenceCounted.release());, +        assertEquals(0, referenceCounted.refCnt());, +        referenceCounted.retain();, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testRetainResurrect2() {, +        AbstractReferenceCountedByteBuf referenceCounted = newReferenceCounted();, +        assertTrue(referenceCounted.release());, +        assertEquals(0, referenceCounted.refCnt());, +        referenceCounted.retain(2);, +    }, +, +    private static AbstractReferenceCountedByteBuf newReferenceCounted() {, +        return new AbstractReferenceCountedByteBuf(Integer.MAX_VALUE) {, +, +            @Override, +            protected byte _getByte(int index) {, +                throw new UnsupportedOperationException();]