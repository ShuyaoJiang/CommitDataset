[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.HTTP_UPGRADE_STREAM_ID;, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +, +    private final ChannelHandler upgradeStreamHandler;, +                        ChannelHandler inboundStreamHandler,, +                        ChannelHandler upgradeStreamHandler) {, +        this.upgradeStreamHandler = upgradeStreamHandler;, +    }, +, +    @Override, +    public void onHttpClientUpgrade() throws Http2Exception {, +        // We must have an upgrade handler or else we can't handle the stream, +        if (upgradeStreamHandler == null) {, +            throw connectionError(INTERNAL_ERROR, "Client is misconfigured for upgrade requests");, +        }, +        // Creates the Http2Stream in the Connection., +        super.onHttpClientUpgrade();, +        // Now make a new FrameStream, set it's underlying Http2Stream, and initialize it., +        Http2MultiplexCodecStream codecStream = newStream();, +        codecStream.setStreamAndProperty(streamKey, connection().stream(HTTP_UPGRADE_STREAM_ID));, +        onHttp2UpgradeStreamInitialized(ctx, codecStream);, +    private void onHttp2UpgradeStreamInitialized(ChannelHandlerContext ctx, Http2MultiplexCodecStream stream) {, +        assert stream.state() == Http2Stream.State.HALF_CLOSED_LOCAL;, +        DefaultHttp2StreamChannel ch = new DefaultHttp2StreamChannel(stream, true);, +        ch.outboundClosed = true;, +, +        // Add our upgrade handler to the channel and then register the channel., +        // The register call fires the channelActive, etc., +        ch.pipeline().addLast(upgradeStreamHandler);, +        ChannelFuture future = ctx.channel().eventLoop().register(ch);, +        if (future.isDone()) {, +            registerDone(future);, +        } else {, +            future.addListener(CHILD_CHANNEL_REGISTRATION_LISTENER);, +        }, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.HTTP_UPGRADE_STREAM_ID;, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +, +    private final ChannelHandler upgradeStreamHandler;, +                        ChannelHandler inboundStreamHandler,, +                        ChannelHandler upgradeStreamHandler) {, +        this.upgradeStreamHandler = upgradeStreamHandler;, +    }, +, +    @Override, +    public void onHttpClientUpgrade() throws Http2Exception {, +        // We must have an upgrade handler or else we can't handle the stream, +        if (upgradeStreamHandler == null) {, +            throw connectionError(INTERNAL_ERROR, "Client is misconfigured for upgrade requests");, +        }, +        // Creates the Http2Stream in the Connection., +        super.onHttpClientUpgrade();, +        // Now make a new FrameStream, set it's underlying Http2Stream, and initialize it., +        Http2MultiplexCodecStream codecStream = newStream();, +        codecStream.setStreamAndProperty(streamKey, connection().stream(HTTP_UPGRADE_STREAM_ID));, +        onHttp2UpgradeStreamInitialized(ctx, codecStream);, +    private void onHttp2UpgradeStreamInitialized(ChannelHandlerContext ctx, Http2MultiplexCodecStream stream) {, +        assert stream.state() == Http2Stream.State.HALF_CLOSED_LOCAL;, +        DefaultHttp2StreamChannel ch = new DefaultHttp2StreamChannel(stream, true);, +        ch.outboundClosed = true;, +, +        // Add our upgrade handler to the channel and then register the channel., +        // The register call fires the channelActive, etc., +        ch.pipeline().addLast(upgradeStreamHandler);, +        ChannelFuture future = ctx.channel().eventLoop().register(ch);, +        if (future.isDone()) {, +            registerDone(future);, +        } else {, +            future.addListener(CHILD_CHANNEL_REGISTRATION_LISTENER);, +        }, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodecBuilder.java, +    private ChannelHandler upgradeStreamHandler;, +    public Http2MultiplexCodecBuilder withUpgradeStreamHandler(ChannelHandler upgradeStreamHandler) {, +        if (this.isServer()) {, +            throw new IllegalArgumentException("Server codecs don't use an extra handler for the upgrade stream");, +        }, +        this.upgradeStreamHandler = upgradeStreamHandler;, +        return this;, +    }, +, +        return new Http2MultiplexCodec(encoder, decoder, initialSettings, childHandler, upgradeStreamHandler);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    protected final PropertyKey streamKey;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.HTTP_UPGRADE_STREAM_ID;, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;]