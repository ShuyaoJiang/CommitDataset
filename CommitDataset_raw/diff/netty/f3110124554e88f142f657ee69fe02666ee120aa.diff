[+++ b/codec/src/main/java/io/netty/handler/codec/compression/FastLz.java, + * constants which use by {@link FastLzFrameEncoder} and {@link FastLzFrameDecoder}., +++ b/codec/src/main/java/io/netty/handler/codec/compression/FastLz.java, + * constants which use by {@link FastLzFrameEncoder} and {@link FastLzFrameDecoder}., +++ b/codec/src/main/java/io/netty/handler/codec/compression/FastLzFrameDecoder.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.compression;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.ByteToMessageDecoder;, +, +import java.util.List;, +import java.util.zip.Adler32;, +import java.util.zip.Checksum;, +, +import static io.netty.handler.codec.compression.FastLz.*;, +, +/**, + * Uncompresses a {@link ByteBuf} encoded with the Bzip2 format., + *, + * See <a href="https://github.com/netty/netty/issues/2750">FastLZ format</a>., + */, +public class FastLzFrameDecoder extends ByteToMessageDecoder {, +    /**, +     * Current state of decompression., +     */, +    private enum State {, +        INIT_BLOCK,, +        INIT_BLOCK_PARAMS,, +        DECOMPRESS_DATA,, +        CORRUPTED, +    }, +, +    private State currentState = State.INIT_BLOCK;, +, +    /**, +     * Underlying checksum calculator in use., +     */, +    private final Checksum checksum;, +, +    /**, +     * Length of current received chunk of data., +     */, +    private int chunkLength;, +, +    /**, +     * Original of current received chunk of data., +     * It is equal to {@link #chunkLength} for non compressed chunks., +     */, +    private int originalLength;, +, +    /**, +     * Indicates is this chunk compressed or not., +     */, +    private boolean isCompressed;, +, +    /**, +     * Indicates is this chunk has checksum or not., +     */, +    private boolean hasChecksum;, +, +    /**, +     * Chechsum value of current received chunk of data which has checksum., +     */, +    private int currentChecksum;, +, +    /**, +     * Creates the fastest FastLZ decoder without checksum calculation., +     */, +    public FastLzFrameDecoder() {, +        this(false);, +    }, +, +    /**, +     * Creates a FastLZ decoder with calculation of checksums as specified., +     *, +     * @param validateChecksums, +     *        If true, the checksum field will be validated against the actual, +     *        uncompressed data, and if the checksums do not match, a suitable, +     *        {@link DecompressionException} will be thrown., +     *        Note, that in this case decoder will use {@link java.util.zip.Adler32}, +     *        as a default checksum calculator., +     */, +    public FastLzFrameDecoder(boolean validateChecksums) {, +        this(validateChecksums ? new Adler32() : null);]