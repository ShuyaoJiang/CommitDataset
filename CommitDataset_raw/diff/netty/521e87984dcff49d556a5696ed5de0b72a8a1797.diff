[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +        if (ctx.channel().isActive()) {, +            if (engine.getUseClientMode()) {, +                applyHandshakeTimeout(null);, +            }, +        } else {, +        applyHandshakeTimeout(p);, +    }, +    private void applyHandshakeTimeout(Promise<Channel> p) {, +        final Promise<Channel> promise = p == null ? handshakePromise : p;, +        if (handshakeTimeoutMillis <= 0 || promise.isDone()) {, +                if (promise.isDone()) {, +        promise.addListener(new FutureListener<Channel>() {, +        if (!startTls) {, +            if (engine.getUseClientMode()) {, +                // Begin the initial handshake., +            } else {, +                applyHandshakeTimeout(null);, +            }, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +        if (ctx.channel().isActive()) {, +            if (engine.getUseClientMode()) {, +                applyHandshakeTimeout(null);, +            }, +        } else {, +        applyHandshakeTimeout(p);, +    }, +    private void applyHandshakeTimeout(Promise<Channel> p) {, +        final Promise<Channel> promise = p == null ? handshakePromise : p;, +        if (handshakeTimeoutMillis <= 0 || promise.isDone()) {, +                if (promise.isDone()) {, +        promise.addListener(new FutureListener<Channel>() {, +        if (!startTls) {, +            if (engine.getUseClientMode()) {, +                // Begin the initial handshake., +            } else {, +                applyHandshakeTimeout(null);, +            }, +++ b/handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java, +    @Test(expected = SSLException.class, timeout = 3000), +    public void testClientHandshakeTimeout() throws Exception {, +        testHandshakeTimeout(true);, +    }, +, +    @Test(expected = SSLException.class, timeout = 3000), +    public void testServerHandshakeTimeout() throws Exception {, +        testHandshakeTimeout(false);, +    }, +, +    private static void testHandshakeTimeout(boolean client) throws Exception {, +        SSLEngine engine = SSLContext.getDefault().createSSLEngine();, +        engine.setUseClientMode(client);, +        SslHandler handler = new SslHandler(engine);, +        handler.setHandshakeTimeoutMillis(1);, +, +        EmbeddedChannel ch = new EmbeddedChannel(handler);, +        try {, +            while (!handler.handshakeFuture().isDone()) {, +                Thread.sleep(10);, +                // We need to run all pending tasks as the handshake timeout is scheduled on the EventLoop., +                ch.runPendingTasks();, +            }, +, +            handler.handshakeFuture().syncUninterruptibly();, +        } finally {, +            ch.finishAndReleaseAll();, +        }, +    }, +]