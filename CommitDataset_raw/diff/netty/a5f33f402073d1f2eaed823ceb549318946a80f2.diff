[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +    public HttpPostMultipartRequestDecoder(HttpRequest request) {, +    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request) {, +    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {, +    private void setMultipart(String contentType) {, +    @Override, +    @Override, +    @Override, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas() {, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas(String name) {, +    @Override, +    public InterfaceHttpData getBodyHttpData(String name) {, +    @Override, +    public HttpPostMultipartRequestDecoder offer(HttpContent content) {, +    @Override, +    public boolean hasNext() {, +    @Override, +    public InterfaceHttpData next() {, +    private void parseBody() {, +    private void parseBodyMultipart() {, +    private InterfaceHttpData decodeMultipart(MultiPartStatus state) {, +    void skipControlCharacters() {, +            MultiPartStatus closeDelimiterStatus) {, +    private InterfaceHttpData findMultipartDisposition() {, +    protected InterfaceHttpData getFileUpload(String delimiter) {, +    @Override, +    @Override, +    @Override, +    private String readLineStandard() {, +    private String readLine() {, +    private String readDelimiterStandard(String delimiter) {, +    private String readDelimiter(String delimiter) {, +    private void readFileUploadByteMultipartStandard(String delimiter) {, +    private void readFileUploadByteMultipart(String delimiter) {, +    private void loadFieldMultipartStandard(String delimiter) {, +    private void loadFieldMultipart(String delimiter) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +    public HttpPostMultipartRequestDecoder(HttpRequest request) {, +    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request) {, +    public HttpPostMultipartRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {, +    private void setMultipart(String contentType) {, +    @Override, +    @Override, +    @Override, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas() {, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas(String name) {, +    @Override, +    public InterfaceHttpData getBodyHttpData(String name) {, +    @Override, +    public HttpPostMultipartRequestDecoder offer(HttpContent content) {, +    @Override, +    public boolean hasNext() {, +    @Override, +    public InterfaceHttpData next() {, +    private void parseBody() {, +    private void parseBodyMultipart() {, +    private InterfaceHttpData decodeMultipart(MultiPartStatus state) {, +    void skipControlCharacters() {, +            MultiPartStatus closeDelimiterStatus) {, +    private InterfaceHttpData findMultipartDisposition() {, +    protected InterfaceHttpData getFileUpload(String delimiter) {, +    @Override, +    @Override, +    @Override, +    private String readLineStandard() {, +    private String readLine() {, +    private String readDelimiterStandard(String delimiter) {, +    private String readDelimiter(String delimiter) {, +    private void readFileUploadByteMultipartStandard(String delimiter) {, +    private void readFileUploadByteMultipart(String delimiter) {, +    private void loadFieldMultipartStandard(String delimiter) {, +    private void loadFieldMultipart(String delimiter) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +    public HttpPostRequestDecoder(HttpRequest request) {, +    public HttpPostRequestDecoder(HttpDataFactory factory, HttpRequest request) {, +    public HttpPostRequestDecoder(HttpDataFactory factory, HttpRequest request, Charset charset) {, +    public static boolean isMultipart(HttpRequest request) {, +    protected static String getMultipartDataBoundary(String contentType) {, +    @Override, +    @Override, +    @Override, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas() {, +    @Override, +    public List<InterfaceHttpData> getBodyHttpDatas(String name) {, +    @Override, +    public InterfaceHttpData getBodyHttpData(String name) {, +    @Override, +    public InterfaceHttpPostRequestDecoder offer(HttpContent content) {, +    @Override, +    public boolean hasNext() {, +    @Override, +    public InterfaceHttpData next() {, +    @Override, +    @Override, +    @Override]