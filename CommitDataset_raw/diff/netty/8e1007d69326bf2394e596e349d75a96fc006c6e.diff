[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import java.util.TreeMap;, +import static io.netty.handler.codec.spdy.SpdyCodecUtil.*;, +    private final StreamComparator streamComparator = new StreamComparator();, +    Map<Integer, StreamState> activeStreams() {, +        Map<Integer, StreamState> streams = new TreeMap<Integer, StreamState>(streamComparator);, +        streams.putAll(activeStreams);, +        return streams;, +            for (Map.Entry<Integer, StreamState> e: activeStreams().entrySet()) {, +                StreamState state = e.getValue();, +    private final class StreamComparator implements Comparator<Integer>, Serializable {, +        StreamComparator() { }, +, +, +            int result = state1.getPriority() - state2.getPriority();, +            if (result != 0) {, +                return result;, +            }, +, +            return id1 - id2;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import java.util.TreeMap;, +import static io.netty.handler.codec.spdy.SpdyCodecUtil.*;, +    private final StreamComparator streamComparator = new StreamComparator();, +    Map<Integer, StreamState> activeStreams() {, +        Map<Integer, StreamState> streams = new TreeMap<Integer, StreamState>(streamComparator);, +        streams.putAll(activeStreams);, +        return streams;, +            for (Map.Entry<Integer, StreamState> e: activeStreams().entrySet()) {, +                StreamState state = e.getValue();, +    private final class StreamComparator implements Comparator<Integer>, Serializable {, +        StreamComparator() { }, +, +, +            int result = state1.getPriority() - state2.getPriority();, +            if (result != 0) {, +                return result;, +            }, +, +            return id1 - id2;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +        for (Integer streamId: spdySession.activeStreams().keySet()) {]