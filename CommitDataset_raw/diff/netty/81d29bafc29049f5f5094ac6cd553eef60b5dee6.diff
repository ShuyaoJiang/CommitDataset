[+++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/example/discard/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/example/discard/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/example/echo/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/example/discard/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/example/echo/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoderBuffer.java, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), value);, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), indexFinder);, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/example/discard/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/example/echo/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoderBuffer.java, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), value);, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), indexFinder);, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = , +        InternalLoggerFactory.getInstance(MemoryAwareThreadPoolExecutor.class);, +    , +        } catch (Throwable t) {, +            logger.debug(, +                    "ThreadPoolExecutor.allowCoreThreadTimeOut() is not " +, +                    "supported in this platform.");, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    if (provider.equals("sun.nio.ch.EPollSelectorProvider") ||, +                        provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                        return 2;, +                    }, +++ b/src/main/java/org/jboss/netty/example/discard/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/example/echo/ThroughputMonitor.java, +                    (newCounter - oldCounter) * 1000.0 / (endTime - startTime) /, +++ b/src/main/java/org/jboss/netty/handler/codec/replay/ReplayingDecoderBuffer.java, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), value);, +        int endIndex = buffer.indexOf(buffer.readerIndex(), buffer.writerIndex(), indexFinder);, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = , +        InternalLoggerFactory.getInstance(MemoryAwareThreadPoolExecutor.class);, +    , +        } catch (Throwable t) {, +            logger.debug(, +                    "ThreadPoolExecutor.allowCoreThreadTimeOut() is not " +, +                    "supported in this platform.");, +++ b/src/main/java/org/jboss/netty/handler/ssl/SslBufferPool.java, +++ b/src/main/java/org/jboss/netty/channel/DefaultChannelPipeline.java, +                return;]