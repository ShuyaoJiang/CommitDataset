[+++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorkerPool.java, +public abstract class AbstractNioWorkerPool<E extends SelectorEventLoop> implements WorkerPool<E> , ExternalResourceReleasable {, +    private final SelectorEventLoop[] workers;, +        workers = new SelectorEventLoop[workerCount];, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorkerPool.java, +public abstract class AbstractNioWorkerPool<E extends SelectorEventLoop> implements WorkerPool<E> , ExternalResourceReleasable {, +    private final SelectorEventLoop[] workers;, +        workers = new SelectorEventLoop[workerCount];, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramWorker.java, +public class NioDatagramWorker extends SelectorEventLoop {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorkerPool.java, +public abstract class AbstractNioWorkerPool<E extends SelectorEventLoop> implements WorkerPool<E> , ExternalResourceReleasable {, +    private final SelectorEventLoop[] workers;, +        workers = new SelectorEventLoop[workerCount];, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramWorker.java, +public class NioDatagramWorker extends SelectorEventLoop {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java, +public class NioWorker extends SelectorEventLoop {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +     * The {@link SelectorEventLoop}., +    private final SelectorEventLoop worker;, +    protected AbstractNioChannel(Integer id, Channel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch) {, +            ChannelPipeline pipeline, ChannelSink sink, SelectorEventLoop worker, JdkChannel ch)  {, +     * Return the {@link SelectorEventLoop} that handle the IO of the {@link AbstractNioChannel}, +    public SelectorEventLoop getWorker() {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioWorkerPool.java, +public abstract class AbstractNioWorkerPool<E extends SelectorEventLoop> implements WorkerPool<E> , ExternalResourceReleasable {, +    private final SelectorEventLoop[] workers;, +        workers = new SelectorEventLoop[workerCount];, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramWorker.java, +public class NioDatagramWorker extends SelectorEventLoop {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java, +public class NioWorker extends SelectorEventLoop {, +++ b/transport/src/main/java/io/netty/channel/socket/nio/SelectorEventLoop.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.socket.nio;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.SingleThreadEventLoop;, +import io.netty.channel.socket.nio.SendBufferPool.SendBuffer;, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;]