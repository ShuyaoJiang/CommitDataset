[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +                    //please do not make one line from below code, +                    //as it breaks +XX:OptimizeStringConcat optimization, +                    String valueStr = String.valueOf(value);, +                    value = valueStr + ' ' + trimmedLine;, +                        //please do not make one line from below code, +                        //as it breaks +XX:OptimizeStringConcat optimization, +                        String currentLastPos = current.get(lastPos);, +                        current.set(lastPos, currentLastPos + lineTrimmed);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +                    //please do not make one line from below code, +                    //as it breaks +XX:OptimizeStringConcat optimization, +                    String valueStr = String.valueOf(value);, +                    value = valueStr + ' ' + trimmedLine;, +                        //please do not make one line from below code, +                        //as it breaks +XX:OptimizeStringConcat optimization, +                        String currentLastPos = current.get(lastPos);, +                        current.set(lastPos, currentLastPos + lineTrimmed);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java, +    public void testMultiLineHeader() {, +        EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestDecoder());, +        String crlf = "\r\n";, +        String request =  "GET /some/path HTTP/1.1" + crlf +, +                "Host: localhost" + crlf +, +                "MyTestHeader: part1" + crlf +, +                "              newLinePart2" + crlf +, +                "MyTestHeader2: part21" + crlf +, +                "\t            newLinePart22", +                + crlf + crlf;, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(request, CharsetUtil.US_ASCII)));, +        HttpRequest req = channel.readInbound();, +        assertEquals("part1 newLinePart2", req.headers().get(of("MyTestHeader")));, +        assertEquals("part21 newLinePart22", req.headers().get(of("MyTestHeader2")));, +, +        LastHttpContent c = channel.readInbound();, +        c.release();, +, +        assertFalse(channel.finish());, +        assertNull(channel.readInbound());, +    }, +, +    @Test, +        channel.writeInbound(Unpooled.copiedBuffer(request, CharsetUtil.US_ASCII));]