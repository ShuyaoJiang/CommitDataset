[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialManager.java, +import org.apache.tomcat.jni.CertificateRequestedCallback;, +    CertificateRequestedCallback.KeyMaterial keyMaterial(ReferenceCountedOpenSslEngine engine, String[] keyTypes,, +        String alias = chooseClientAlias(engine, keyTypes, issuer);, +        long keyBio = 0;, +        long keyCertChainBio = 0;, +        long pkey = 0;, +        long certChain = 0;, +, +        try {, +            // TODO: Should we cache these and so not need to do a memory copy all the time ?, +            X509Certificate[] certificates = keyManager.getCertificateChain(alias);, +            if (certificates == null || certificates.length == 0) {, +                return null;, +            }, +, +            PrivateKey key = keyManager.getPrivateKey(alias);, +            keyCertChainBio = toBIO(certificates);, +            certChain = SSL.parseX509Chain(keyCertChainBio);, +            if (key != null) {, +                keyBio = toBIO(key);, +                pkey = SSL.parsePrivateKey(keyBio, password);, +            }, +            CertificateRequestedCallback.KeyMaterial material = new CertificateRequestedCallback.KeyMaterial(, +                    certChain, pkey);, +, +            // Reset to 0 so we do not free these. This is needed as the client certificate callback takes ownership, +            // of both the key and the certificate if they are returned from this method, and thus must not, +            // be freed here., +            certChain = pkey = 0;, +            return material;, +        } catch (SSLException e) {, +            throw e;, +        } catch (Exception e) {, +            throw new SSLException(e);, +        } finally {, +            freeBio(keyBio);, +            freeBio(keyCertChainBio);, +            SSL.freePrivateKey(pkey);, +            SSL.freeX509Chain(certChain);, +        }, +            if (certificates == null || certificates.length == 0) {, +                return;, +            }, +            PrivateKey key = keyManager.getPrivateKey(alias);, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialManager.java, +import org.apache.tomcat.jni.CertificateRequestedCallback;, +    CertificateRequestedCallback.KeyMaterial keyMaterial(ReferenceCountedOpenSslEngine engine, String[] keyTypes,, +        String alias = chooseClientAlias(engine, keyTypes, issuer);, +        long keyBio = 0;, +        long keyCertChainBio = 0;, +        long pkey = 0;, +        long certChain = 0;, +, +        try {, +            // TODO: Should we cache these and so not need to do a memory copy all the time ?, +            X509Certificate[] certificates = keyManager.getCertificateChain(alias);, +            if (certificates == null || certificates.length == 0) {, +                return null;, +            }, +, +            PrivateKey key = keyManager.getPrivateKey(alias);, +            keyCertChainBio = toBIO(certificates);, +            certChain = SSL.parseX509Chain(keyCertChainBio);, +            if (key != null) {, +                keyBio = toBIO(key);, +                pkey = SSL.parsePrivateKey(keyBio, password);, +            }, +            CertificateRequestedCallback.KeyMaterial material = new CertificateRequestedCallback.KeyMaterial(, +                    certChain, pkey);, +, +            // Reset to 0 so we do not free these. This is needed as the client certificate callback takes ownership, +            // of both the key and the certificate if they are returned from this method, and thus must not, +            // be freed here., +            certChain = pkey = 0;, +            return material;, +        } catch (SSLException e) {, +            throw e;, +        } catch (Exception e) {, +            throw new SSLException(e);, +        } finally {, +            freeBio(keyBio);, +            freeBio(keyCertChainBio);, +            SSL.freePrivateKey(pkey);, +            SSL.freeX509Chain(certChain);, +        }, +            if (certificates == null || certificates.length == 0) {, +                return;, +            }, +            PrivateKey key = keyManager.getPrivateKey(alias);, +, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslClientContext.java, +        public KeyMaterial requested(long ssl, byte[] keyTypeBytes, byte[][] asn1DerEncodedPrincipals) {, +                return keyManagerHolder.keyMaterial(engine, keyTypes, issuers);, +                return null;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialManager.java, +import org.apache.tomcat.jni.CertificateRequestedCallback;, +    CertificateRequestedCallback.KeyMaterial keyMaterial(ReferenceCountedOpenSslEngine engine, String[] keyTypes,, +        String alias = chooseClientAlias(engine, keyTypes, issuer);]