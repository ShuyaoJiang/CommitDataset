[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioProviderMetadata.java, +import java.util.Map.Entry;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +                logger.debug(, +                        "Couldn't determine the NIO constraint level from " +, +                        "the system properties; using the safest level (2)");, +        String vminfo = SystemPropertyUtil.get("java.vm.info", "");, +        System.out.println(version);, +        System.out.println(vminfo);, +        System.out.println(os);, +        System.out.println(vendor);, +        System.out.println(provider);, +, +            // Linux or AIX, +            if (os.indexOf("linux") >= 0 || os.indexOf("aix") >= 0) {, +                } else if (version.equals("1.6") || version.matches("^1\\.6\\D.*$")) {, +                    // IBM JDK 1.6 has different constraint level for different, +                    // version.  The exact version can be determined only by its, +                    // build date., +                    Pattern datePattern = Pattern.compile(, +                            "(?:^|[^0-9])(" +, +                            "[2-9][0-9]{3}" +              // year, +                            "(?:0[1-9]|1[0-2])" +          // month, +                            "(?:0[1-9]|[12][0-9]|3[01])" + // day of month, +                            ")(?:$|[^0-9])");, +                    Matcher dateMatcher = datePattern.matcher(vminfo);, +                    if (dateMatcher.find()) {, +                        long dateValue = Long.parseLong(dateMatcher.group(1));, +                        if (dateValue < 20081105L) {, +                            // SR0, 1, and 2, +                            return 2;, +                        } else {, +                            // SR3 and later, +                            if (provider.equals("sun.nio.ch.EPollSelectorProvider")) {, +                                return 0;, +                            } else if (provider.equals("sun.nio.ch.PollSelectorProvider")) {, +                    }, +                }, +        // Apache Software Foundation, +        } else if (vendor.indexOf("apache") >= 0) {, +            if (provider.equals("org.apache.harmony.nio.internal.SelectorProviderImpl")) {, +                return 1;, +            }, +                    Integer result = resultQueue.poll(10000, TimeUnit.MILLISECONDS);, +, +    public static void main(String[] args) throws Exception {, +        for (Entry<Object, Object> e: System.getProperties().entrySet()) {, +            System.out.println(e.getKey() + ": " + e.getValue());, +        }, +        System.out.println();, +        System.out.println("Hard-coded Constraint Level: " + CONSTRAINT_LEVEL);, +        System.out.println(, +                "Auto-detected Constraint Level: " + , +                new ConstraintLevelAutodetector().autodetectWithoutTimeout());, +    }, +, +    private NioProviderMetadata() {, +        // Unused, +    }]