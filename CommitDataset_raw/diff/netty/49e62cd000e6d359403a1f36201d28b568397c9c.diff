[+++ b/src/main/java/org/jboss/netty/handler/codec/string/StringDecoder.java, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;, +import org.jboss.netty.handler.codec.frame.Delimiters;, +import org.jboss.netty.handler.codec.frame.FrameDecoder;, + * Decodes a received {@link ChannelBuffer} into a {@link String}.  Please, + * note that this decoder must be used with a proper {@link FrameDecoder}, + * such as {@link DelimiterBasedFrameDecoder} if you are using a stream-based, + * transport such as TCP/IP.  A typical decoder setup for a text-based line, + * protocol in a TCP/IP socket would be:, + * <pre>, + * {@link ChannelPipeline} pipeline = ...;, + *, + * // Decoders, + * pipeline.addLast("frameDecoder", new {@link DelimiterBasedFrameDecoder}({@link Delimiters#lineDelimiter()}));, + * pipeline.addLast("stringDecoder", new {@link StringDecoder}("UTF-8"));, + *, + * // Encoder, + * pipeline.addLast("stringEncoder", new {@link StringEncoder}("UTF-8"));, + * </pre>, + * and then you can use {@link String}s instead of {@link ChannelBuffer}s, + * as a message:, + * <pre>, + * void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {, + *     String msg = (String) e.getMessage();, + *     ch.write("Did you say '" + msg + "'?\n");, + * }, + * </pre>, + *, +    /**, +     * Creates a new instance with the current system character set., +     */, +    /**, +     * Creates a new instance., +     *, +     * @param charsetName  the name of the character set to use for decoding, +     */, +    /**, +     * Creates a new instance., +     *, +     * @param charset  the character set to use for decoding, +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/string/StringDecoder.java, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;, +import org.jboss.netty.handler.codec.frame.Delimiters;, +import org.jboss.netty.handler.codec.frame.FrameDecoder;, + * Decodes a received {@link ChannelBuffer} into a {@link String}.  Please, + * note that this decoder must be used with a proper {@link FrameDecoder}, + * such as {@link DelimiterBasedFrameDecoder} if you are using a stream-based, + * transport such as TCP/IP.  A typical decoder setup for a text-based line, + * protocol in a TCP/IP socket would be:, + * <pre>, + * {@link ChannelPipeline} pipeline = ...;, + *, + * // Decoders, + * pipeline.addLast("frameDecoder", new {@link DelimiterBasedFrameDecoder}({@link Delimiters#lineDelimiter()}));, + * pipeline.addLast("stringDecoder", new {@link StringDecoder}("UTF-8"));, + *, + * // Encoder, + * pipeline.addLast("stringEncoder", new {@link StringEncoder}("UTF-8"));, + * </pre>, + * and then you can use {@link String}s instead of {@link ChannelBuffer}s, + * as a message:, + * <pre>, + * void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {, + *     String msg = (String) e.getMessage();, + *     ch.write("Did you say '" + msg + "'?\n");, + * }, + * </pre>, + *, +    /**, +     * Creates a new instance with the current system character set., +     */, +    /**, +     * Creates a new instance., +     *, +     * @param charsetName  the name of the character set to use for decoding, +     */, +    /**, +     * Creates a new instance., +     *, +     * @param charset  the character set to use for decoding, +     */, +++ b/src/main/java/org/jboss/netty/handler/codec/string/StringEncoder.java, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;, +import org.jboss.netty.handler.codec.frame.Delimiters;, + * Encodes the requested {@link String} into a {@link ChannelBuffer}., + * The typical decoder setup for a text-based line protocol in a TCP/IP socket, + * would be:, + * <pre>, + * {@link ChannelPipeline} pipeline = ...;, + *, + * // Decoders, + * pipeline.addLast("frameDecoder", new {@link DelimiterBasedFrameDecoder}({@link Delimiters#lineDelimiter()}));, + * pipeline.addLast("stringDecoder", new {@link StringDecoder}("UTF-8"));, + *, + * // Encoder]