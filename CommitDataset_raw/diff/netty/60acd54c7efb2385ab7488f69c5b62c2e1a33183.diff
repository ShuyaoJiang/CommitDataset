[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +import static io.netty.buffer.ByteBufUtil.readBytes;, +, +        ByteBuf payload = readBytes(ctx.alloc(), buffer, (int) frameSize);, +        ByteBuf binaryData = readBytes(ctx.alloc(), buffer, frameSize);, +            binaryData.release();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +import static io.netty.buffer.ByteBufUtil.readBytes;, +, +        ByteBuf payload = readBytes(ctx.alloc(), buffer, (int) frameSize);, +        ByteBuf binaryData = readBytes(ctx.alloc(), buffer, frameSize);, +            binaryData.release();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.handler.codec.ByteToMessageDecoder;, +import static io.netty.buffer.ByteBufUtil.readBytes;, +, +public class WebSocket08FrameDecoder extends ByteToMessageDecoder, +    enum State {, +        READING_FIRST,, +        READING_SECOND,, +        READING_SIZE,, +        MASKING_KEY,, +        PAYLOAD,, +        CORRUPT, +    }, +, +    private int framePayloadLen1;, +    private final long maxFramePayloadLength;, +    private final boolean allowExtensions;, +    private final boolean maskedPayload;, +, +    private State state = State.READING_FIRST;, +            switch (state) {, +                case READING_FIRST:, +                    framePayloadLength = 0;, +                    state = State.READING_SECOND;, +                case READING_SECOND:, +                    if (!in.isReadable()) {, +                        return;, +                    }, +                    framePayloadLen1 = b & 0x7F;, +                    state = State.READING_SIZE;, +                 case READING_SIZE:, +, +                        if (in.readableBytes() < 2) {, +                            return;, +                        }, +                        if (in.readableBytes() < 8) {, +                            return;, +                        }, +                    state = State.MASKING_KEY;, +                        if (in.readableBytes() < 4) {, +                            return;, +                        }, +                    state = State.PAYLOAD;, +                    if (in.readableBytes() < framePayloadLength) {, +, +                    ByteBuf payloadBuffer = null;, +                    try {, +                        payloadBuffer = readBytes(ctx.alloc(), in, toFrameLength(framePayloadLength));, +                        state = State.READING_FIRST;, +                            unmask(payloadBuffer);, +                            out.add(new PingWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));, +                            payloadBuffer = null;, +                            out.add(new PongWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));, +                            payloadBuffer = null;, +                            checkCloseFrameBody(ctx, payloadBuffer);, +                            out.add(new CloseWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));, +                            payloadBuffer = null;, +                                    checkUTF8String(ctx, payloadBuffer);, +                                    checkUTF8String(ctx, payloadBuffer);, +                                    checkUTF8String(ctx, payloadBuffer);, +                            out.add(new TextWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));, +                            payloadBuffer = null;, +                            out.add(new BinaryWebSocketFrame(frameFinalFlag, frameRsv, payloadBuffer));, +                            payloadBuffer = null;, +                            out.add(new ContinuationWebSocketFrame(frameFinalFlag, frameRsv,, +                                    payloadBuffer, aggregatedText));, +                            payloadBuffer = null;, +                    } finally {, +                        if (payloadBuffer != null) {, +                            payloadBuffer.release();, +                        }, +                    }, +                    if (in.isReadable()) {, +                    }, +        state = State.CORRUPT;]