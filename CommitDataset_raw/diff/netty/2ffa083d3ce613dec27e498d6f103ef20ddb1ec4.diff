[+++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(PooledByteBufAllocator.class);, +, +    private static final int DEFAULT_NUM_HEAP_ARENA = Math.max(1, SystemPropertyUtil.getInt(, +            "io.netty.allocator.numHeapArenas", Runtime.getRuntime().availableProcessors()));, +    private static final int DEFAULT_NUM_DIRECT_ARENA = Math.max(1, SystemPropertyUtil.getInt(, +            "io.netty.allocator.numDirectArenas", Runtime.getRuntime().availableProcessors()));, +    private static final int DEFAULT_PAGE_SIZE;, +    private static final int DEFAULT_MAX_ORDER; // 8192 << 11 = 16 MiB per chunk, +    static {, +        int defaultPageSize = SystemPropertyUtil.getInt("io.netty.allocator.pageSize", 8192);, +        Throwable pageSizeFallbackCause = null;, +        try {, +            validateAndCalculatePageShifts(defaultPageSize);, +        } catch (Throwable t) {, +            pageSizeFallbackCause = t;, +            defaultPageSize = 8192;, +        }, +        DEFAULT_PAGE_SIZE = defaultPageSize;, +, +        int defaultMaxOrder = SystemPropertyUtil.getInt("io.netty.allocator.maxOrder", 11);, +        Throwable maxOrderFallbackCause = null;, +        try {, +            validateAndCalculateChunkSize(DEFAULT_PAGE_SIZE, defaultMaxOrder);, +        } catch (Throwable t) {, +            maxOrderFallbackCause = t;, +            defaultMaxOrder = 11;, +        }, +        DEFAULT_MAX_ORDER = defaultMaxOrder;, +, +        if (logger.isDebugEnabled()) {, +            logger.debug("io.netty.allocator.numHeapArenas: {}", DEFAULT_NUM_HEAP_ARENA);, +            logger.debug("io.netty.allocator.numDirectArenas: {}", DEFAULT_NUM_DIRECT_ARENA);, +            if (pageSizeFallbackCause == null) {, +                logger.debug("io.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE);, +            } else {, +                logger.debug("io.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE, pageSizeFallbackCause);, +            }, +            if (maxOrderFallbackCause == null) {, +                logger.debug("io.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER);, +            } else {, +                logger.debug("io.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER, maxOrderFallbackCause);, +            }, +            logger.debug("io.netty.allocator.chunkSize: {}", DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER);, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(PooledByteBufAllocator.class);, +, +    private static final int DEFAULT_NUM_HEAP_ARENA = Math.max(1, SystemPropertyUtil.getInt(, +            "io.netty.allocator.numHeapArenas", Runtime.getRuntime().availableProcessors()));, +    private static final int DEFAULT_NUM_DIRECT_ARENA = Math.max(1, SystemPropertyUtil.getInt(, +            "io.netty.allocator.numDirectArenas", Runtime.getRuntime().availableProcessors()));, +    private static final int DEFAULT_PAGE_SIZE;, +    private static final int DEFAULT_MAX_ORDER; // 8192 << 11 = 16 MiB per chunk, +    static {, +        int defaultPageSize = SystemPropertyUtil.getInt("io.netty.allocator.pageSize", 8192);, +        Throwable pageSizeFallbackCause = null;, +        try {, +            validateAndCalculatePageShifts(defaultPageSize);, +        } catch (Throwable t) {, +            pageSizeFallbackCause = t;, +            defaultPageSize = 8192;, +        }, +        DEFAULT_PAGE_SIZE = defaultPageSize;, +, +        int defaultMaxOrder = SystemPropertyUtil.getInt("io.netty.allocator.maxOrder", 11);, +        Throwable maxOrderFallbackCause = null;, +        try {, +            validateAndCalculateChunkSize(DEFAULT_PAGE_SIZE, defaultMaxOrder);, +        } catch (Throwable t) {, +            maxOrderFallbackCause = t;, +            defaultMaxOrder = 11;, +        }, +        DEFAULT_MAX_ORDER = defaultMaxOrder;, +, +        if (logger.isDebugEnabled()) {, +            logger.debug("io.netty.allocator.numHeapArenas: {}", DEFAULT_NUM_HEAP_ARENA);, +            logger.debug("io.netty.allocator.numDirectArenas: {}", DEFAULT_NUM_DIRECT_ARENA);, +            if (pageSizeFallbackCause == null) {, +                logger.debug("io.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE);, +            } else {, +                logger.debug("io.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE, pageSizeFallbackCause);, +            }, +            if (maxOrderFallbackCause == null) {, +                logger.debug("io.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER);, +            } else {, +                logger.debug("io.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER, maxOrderFallbackCause);, +            }, +            logger.debug("io.netty.allocator.chunkSize: {}", DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER);, +        }, +    }, +]