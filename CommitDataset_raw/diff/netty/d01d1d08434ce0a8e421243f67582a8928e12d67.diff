[+++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.ChannelBootstrap;, +            ChannelBootstrap b = new ChannelBootstrap();, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.ChannelBootstrap;, +            ChannelBootstrap b = new ChannelBootstrap();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.channel.ServerChannelBootstrap;, +        ServerChannelBootstrap b = new ServerChannelBootstrap();, +        try {, +            b.eventLoop(new SelectorEventLoop(), new SelectorEventLoop()), +             .channel(new NioServerSocketChannel()), +             .option(ChannelOption.SO_BACKLOG, 100), +            b.shutdown();, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.ChannelBootstrap;, +            ChannelBootstrap b = new ChannelBootstrap();, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.channel.ServerChannelBootstrap;, +        ServerChannelBootstrap b = new ServerChannelBootstrap();, +        try {, +            b.eventLoop(new SelectorEventLoop(), new SelectorEventLoop()), +             .channel(new NioServerSocketChannel()), +             .option(ChannelOption.SO_BACKLOG, 100), +            b.shutdown();, +++ b/transport/src/main/java/io/netty/channel/ChannelBootstrap.java, +package io.netty.channel;, +, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +import java.net.SocketAddress;, +import java.nio.channels.ClosedChannelException;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, +public class ChannelBootstrap {, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(ChannelBootstrap.class);, +, +    private final Map<ChannelOption<?>, Object> options = new LinkedHashMap<ChannelOption<?>, Object>();, +    private EventLoop eventLoop;, +    private Channel channel;, +    private ChannelHandler initializer;, +    private SocketAddress localAddress;, +    private SocketAddress remoteAddress;, +, +    public ChannelBootstrap eventLoop(EventLoop eventLoop) {, +        if (eventLoop == null) {, +            throw new NullPointerException("eventLoop");, +        }, +        this.eventLoop = eventLoop;, +        return this;, +    }, +, +    public ChannelBootstrap channel(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        this.channel = channel;, +        return this;, +    }, +, +    public <T> ChannelBootstrap option(ChannelOption<T> option, T value) {, +        if (option == null) {, +            throw new NullPointerException("option");, +        }, +        if (value == null) {, +            options.remove(option);, +        } else {, +            options.put(option, value);, +        }, +        return this;, +    }, +, +    public ChannelBootstrap initializer(ChannelHandler initializer) {, +        if (initializer == null) {, +            throw new NullPointerException("initializer");, +        }, +        this.initializer = initializer;, +        return this;, +    }, +, +    public ChannelBootstrap localAddress(SocketAddress localAddress) {, +        this.localAddress = localAddress;, +        return this;, +    }, +, +    public ChannelBootstrap remoteAddress(SocketAddress remoteAddress) {, +        this.remoteAddress = remoteAddress;, +        return this;, +    }, +, +    public ChannelFuture bind() {, +        validate();, +        return bind(channel.newFuture());, +    }, +, +    public ChannelFuture bind(ChannelFuture future) {]