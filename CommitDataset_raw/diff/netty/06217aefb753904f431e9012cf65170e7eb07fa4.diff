[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.io.File;, +     * @deprecated Use the constructors that accept {@link ApplicationProtocolConfig} or, +     *             {@link ApplicationProtocolNegotiator} instead., +     *, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     */, +    @Deprecated, +    public JdkSslClientContext(, +            File certChainFile, TrustManagerFactory trustManagerFactory,, +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +            long sessionCacheSize, long sessionTimeout) throws SSLException {, +        this(certChainFile, trustManagerFactory, ciphers, IdentityCipherSuiteFilter.INSTANCE,, +             toNegotiator(toApplicationProtocolConfig(nextProtocols), false), sessionCacheSize, sessionTimeout);, +    }, +, +    /**, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.io.File;, +     * @deprecated Use the constructors that accept {@link ApplicationProtocolConfig} or, +     *             {@link ApplicationProtocolNegotiator} instead., +     *, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     */, +    @Deprecated, +    public JdkSslClientContext(, +            File certChainFile, TrustManagerFactory trustManagerFactory,, +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +            long sessionCacheSize, long sessionTimeout) throws SSLException {, +        this(certChainFile, trustManagerFactory, ciphers, IdentityCipherSuiteFilter.INSTANCE,, +             toNegotiator(toApplicationProtocolConfig(nextProtocols), false), sessionCacheSize, sessionTimeout);, +    }, +, +    /**, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +import java.io.File;, +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     */, +    public JdkSslServerContext(, +            File certChainFile, File keyFile, String keyPassword,, +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +            long sessionCacheSize, long sessionTimeout) throws SSLException {, +        this(certChainFile, keyFile, keyPassword, ciphers, IdentityCipherSuiteFilter.INSTANCE,, +             toNegotiator(toApplicationProtocolConfig(nextProtocols), true), sessionCacheSize, sessionTimeout);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format, +     * @param keyFile a PKCS#8 private key file in PEM format, +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.io.File;, +     * @deprecated Use the constructors that accept {@link ApplicationProtocolConfig} or, +     *             {@link ApplicationProtocolNegotiator} instead., +     *, +     * Creates a new instance., +     *, +     * @param certChainFile an X.509 certificate chain file in PEM format., +     *                      {@code null} to use the system default, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default.]