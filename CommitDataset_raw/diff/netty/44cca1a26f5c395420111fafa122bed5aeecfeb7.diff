[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +    private CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents, int initSize) {, +        if (maxNumComponents < 2) {, +            throw new IllegalArgumentException(, +                    "maxNumComponents: " + maxNumComponents + " (expected: >= 2)");, +        }, +        components = newList(initSize, maxNumComponents);, +    }, +, +    public CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents) {, +        this(alloc, direct, maxNumComponents, 0);, +    CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents,, +            ByteBuf[] buffers, int offset, int endOffset) {, +        this(alloc, direct, maxNumComponents, endOffset - offset);, +        addComponents0(false, 0, buffers, offset, endOffset);, +        this(alloc, direct, maxNumComponents,, +                buffers instanceof Collection ? ((Collection<ByteBuf>) buffers).size() : 0);, +    // support passing arrays of other types instead of having to copy to a ByteBuf[] first, +    interface ByteWrapper<T> {, +        ByteBuf wrap(T bytes);, +        boolean isEmpty(T bytes);, +    }, +, +    static final ByteWrapper<byte[]> BYTE_ARRAY_WRAPPER = new ByteWrapper<byte[]>() {, +        @Override, +        public ByteBuf wrap(byte[] bytes) {, +            return Unpooled.wrappedBuffer(bytes);, +        }, +        @Override, +        public boolean isEmpty(byte[] bytes) {, +            return bytes.length == 0;, +        }, +    };, +, +    static final ByteWrapper<ByteBuffer> BYTE_BUFFER_WRAPPER = new ByteWrapper<ByteBuffer>() {, +        @Override, +        public ByteBuf wrap(ByteBuffer bytes) {, +            return Unpooled.wrappedBuffer(bytes);, +        }, +        @Override, +        public boolean isEmpty(ByteBuffer bytes) {, +            return !bytes.hasRemaining();, +        }, +    };, +, +    <T> CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents,, +            ByteWrapper<T> wrapper, T[] buffers, int offset) {, +        this(alloc, direct, maxNumComponents, buffers.length - offset);, +, +        addComponents0(false, 0, wrapper, buffers, offset);, +        consolidateIfNeeded();, +        setIndex(0, capacity());, +    }, +, +    private int addComponents0(boolean increaseWriterIndex, int cIndex,, +            ByteBuf[] buffers, int offset, int endOffset) {, +            while (i < endOffset) {, +            for (; i < endOffset; ++i) {, +    private <T> int addComponents0(boolean increaseWriterIndex, int cIndex,, +            ByteWrapper<T> wrapper, T[] buffers, int offset) {, +        checkNotNull(buffers, "buffers");, +        checkComponentIndex(cIndex);, +, +        // No need for consolidation, +        for (int i = offset, len = buffers.length; i < len; i++) {, +            T b = buffers[i];, +            if (b == null) {, +                break;, +            }, +            if (!wrapper.isEmpty(b)) {, +                cIndex = addComponent0(increaseWriterIndex, cIndex, wrapper.wrap(b)) + 1;, +                int size = components.size();, +                if (cIndex > size) {, +                    cIndex = size;, +                }, +            }, +        }, +        return cIndex;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +    private CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents, int initSize) {, +        if (maxNumComponents < 2) {, +            throw new IllegalArgumentException(, +                    "maxNumComponents: " + maxNumComponents + " (expected: >= 2)");, +        }, +        components = newList(initSize, maxNumComponents);, +    }, +, +    public CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents) {, +        this(alloc, direct, maxNumComponents, 0);, +    CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents,, +            ByteBuf[] buffers, int offset, int endOffset) {, +        this(alloc, direct, maxNumComponents, endOffset - offset);, +        addComponents0(false, 0, buffers, offset, endOffset);, +        this(alloc, direct, maxNumComponents,, +                buffers instanceof Collection ? ((Collection<ByteBuf>) buffers).size() : 0);, +    // support passing arrays of other types instead of having to copy to a ByteBuf[] first, +    interface ByteWrapper<T> {, +        ByteBuf wrap(T bytes);]