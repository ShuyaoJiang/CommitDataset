[+++ b/buffer/src/main/java/io/netty/buffer/BufUtil.java, +import java.util.Iterator;, +    /**, +     * Return the content of the given {@link MessageBuf} as string representation., +     */, +    public static String contentToString(MessageBuf<?> buf) {, +        if (buf.isEmpty()) {, +            return "[]";, +        }, +        Iterator<?> it = buf.iterator();, +        StringBuilder sb = new StringBuilder();, +        sb.append('[');, +        while (it.hasNext()) {, +            Object msg = it.next();, +            if (msg == buf) {, +                sb.append('(' + buf.getClass().getSimpleName() + ')');, +            } else {, +                sb.append(msg);, +            }, +            if (it.hasNext()) {, +                sb.append(", ");, +            }, +        }, +        return sb.append(']').toString();, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/BufUtil.java, +import java.util.Iterator;, +    /**, +     * Return the content of the given {@link MessageBuf} as string representation., +     */, +    public static String contentToString(MessageBuf<?> buf) {, +        if (buf.isEmpty()) {, +            return "[]";, +        }, +        Iterator<?> it = buf.iterator();, +        StringBuilder sb = new StringBuilder();, +        sb.append('[');, +        while (it.hasNext()) {, +            Object msg = it.next();, +            if (msg == buf) {, +                sb.append('(' + buf.getClass().getSimpleName() + ')');, +            } else {, +                sb.append(msg);, +            }, +            if (it.hasNext()) {, +                sb.append(", ");, +            }, +        }, +        return sb.append(']').toString();, +    }, +, +++ b/handler/src/main/java/io/netty/handler/logging/MessageLoggingHandler.java, +import io.netty.buffer.BufUtil;, +        return message + '(' + buf.size() + "): " + BufUtil.contentToString(buf);]