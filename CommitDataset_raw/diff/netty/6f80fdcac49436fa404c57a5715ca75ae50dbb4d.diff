[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpDecoder.java, +                // it must reply with a RST_STREAM with error code INVALID_STREAM., +                // If a client receives a SYN_STREAM with isLast set,, +                // reply with a RST_STREAM with error code PROTOCOL_ERROR, +                // (we only support pushed resources divided into two header blocks)., +                if (spdySynStreamFrame.isLast()) {, +                    FullHttpRequest httpRequestWithEntity = createHttpRequest(spdyVersion, spdySynStreamFrame);, +                    // Set the Stream-ID, Associated-To-Stream-ID, iand Priority as headers, +                    httpRequestWithEntity.headers().setInt(Names.STREAM_ID, streamId);, +                    httpRequestWithEntity.headers().setInt(Names.ASSOCIATED_TO_STREAM_ID, associatedToStreamId);, +                    httpRequestWithEntity.headers().setInt(Names.PRIORITY, spdySynStreamFrame.priority());, +                    out.add(httpRequestWithEntity);, +, +                // HEADERS frames may initiate a pushed response, +                if (SpdyCodecUtil.isServerId(streamId)) {, +, +                    // If a client receives a HEADERS with a truncated header block,, +                    // reply with a RST_STREAM frame with error code INTERNAL_ERROR., +                    if (spdyHeadersFrame.isTruncated()) {, +                        SpdyRstStreamFrame spdyRstStreamFrame =, +                            new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.INTERNAL_ERROR);, +                        ctx.writeAndFlush(spdyRstStreamFrame);, +                        return;, +                    }, +, +                    try {, +                        fullHttpMessage = createHttpResponse(ctx, spdyHeadersFrame, validateHeaders);, +, +                        // Set the Stream-ID as a header, +                        fullHttpMessage.headers().setInt(Names.STREAM_ID, streamId);, +, +                        if (spdyHeadersFrame.isLast()) {, +                            HttpHeaderUtil.setContentLength(fullHttpMessage, 0);, +                            out.add(fullHttpMessage);, +                        } else {, +                            // Response body will follow in a series of Data Frames, +                            putMessage(streamId, fullHttpMessage);, +                        }, +                    } catch (Exception e) {, +                        // If a client receives a SYN_REPLY without valid getStatus and version headers, +                        // the client must reply with a RST_STREAM frame indicating a PROTOCOL_ERROR, +                        SpdyRstStreamFrame spdyRstStreamFrame =, +                            new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.PROTOCOL_ERROR);, +                        ctx.writeAndFlush(spdyRstStreamFrame);, +                    }, +                }]