[+++ b/common/src/main/java/io/netty/util/internal/ThrowableUtil.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +, +, +    /**, +     * Gets the stack trace from a Throwable as a String., +     *, +     * @param cause the {@link Throwable} to be examined, +     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method., +     */, +    public static String stackTraceToString(Throwable cause) {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        PrintStream pout = new PrintStream(out);, +        cause.printStackTrace(pout);, +        pout.flush();, +        try {, +            return new String(out.toByteArray());, +        } finally {, +            try {, +                out.close();, +            } catch (IOException ignore) {, +                // ignore as should never happen, +            }, +        }, +    }, +++ b/common/src/main/java/io/netty/util/internal/ThrowableUtil.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +, +, +    /**, +     * Gets the stack trace from a Throwable as a String., +     *, +     * @param cause the {@link Throwable} to be examined, +     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method., +     */, +    public static String stackTraceToString(Throwable cause) {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        PrintStream pout = new PrintStream(out);, +        cause.printStackTrace(pout);, +        pout.flush();, +        try {, +            return new String(out.toByteArray());, +        } finally {, +            try {, +                out.close();, +            } catch (IOException ignore) {, +                // ignore as should never happen, +            }, +        }, +    }, +++ /dev/null, +++ b/common/src/main/java/io/netty/util/internal/ThrowableUtil.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +, +, +    /**, +     * Gets the stack trace from a Throwable as a String., +     *, +     * @param cause the {@link Throwable} to be examined, +     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method., +     */, +    public static String stackTraceToString(Throwable cause) {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        PrintStream pout = new PrintStream(out);, +        cause.printStackTrace(pout);, +        pout.flush();, +        try {, +            return new String(out.toByteArray());, +        } finally {, +            try {, +                out.close();, +            } catch (IOException ignore) {, +                // ignore as should never happen, +            }, +        }, +    }, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +import io.netty.util.internal.ThrowableUtil;, +                        ThrowableUtil.stackTraceToString(error), cause);, +++ b/common/src/main/java/io/netty/util/internal/ThrowableUtil.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +, +, +    /**, +     * Gets the stack trace from a Throwable as a String., +     *, +     * @param cause the {@link Throwable} to be examined, +     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method., +     */, +    public static String stackTraceToString(Throwable cause) {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();]