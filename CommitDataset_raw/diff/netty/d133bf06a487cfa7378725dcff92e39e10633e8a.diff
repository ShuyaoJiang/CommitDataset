[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled0(delay, unit);, +        validateScheduled0(delay, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(period, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(delay, unit);, +    @SuppressWarnings("deprecation"), +    private void validateScheduled0(long amount, TimeUnit unit) {, +        validateScheduled(amount, unit);, +    }, +, +     *, +     * @deprecated will be removed in the future., +    @Deprecated, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled0(delay, unit);, +        validateScheduled0(delay, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(period, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(delay, unit);, +    @SuppressWarnings("deprecation"), +    private void validateScheduled0(long amount, TimeUnit unit) {, +        validateScheduled(amount, unit);, +    }, +, +     *, +     * @deprecated will be removed in the future., +    @Deprecated, +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +        long deadlineNanos = nanoTime() + delay;, +        // Guard against overflow, +        return deadlineNanos < 0 ? Long.MAX_VALUE : deadlineNanos;, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled0(delay, unit);, +        validateScheduled0(delay, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(period, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(delay, unit);, +    @SuppressWarnings("deprecation"), +    private void validateScheduled0(long amount, TimeUnit unit) {, +        validateScheduled(amount, unit);, +    }, +, +     *, +     * @deprecated will be removed in the future., +    @Deprecated, +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +        long deadlineNanos = nanoTime() + delay;, +        // Guard against overflow, +        return deadlineNanos < 0 ? Long.MAX_VALUE : deadlineNanos;, +++ b/common/src/test/java/io/netty/util/concurrent/ScheduledFutureTaskTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.concurrent;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +public class ScheduledFutureTaskTest {, +, +    @Test, +    public void testDeadlineNanosNotOverflow() {, +        Assert.assertEquals(Long.MAX_VALUE, ScheduledFutureTask.deadlineNanos(Long.MAX_VALUE));, +    }, +}, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +        validateScheduled0(delay, unit);, +        validateScheduled0(delay, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(period, unit);, +        validateScheduled0(initialDelay, unit);, +        validateScheduled0(delay, unit);, +    @SuppressWarnings("deprecation"), +    private void validateScheduled0(long amount, TimeUnit unit) {, +        validateScheduled(amount, unit);, +    }, +, +     *, +     * @deprecated will be removed in the future., +    @Deprecated, +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +        long deadlineNanos = nanoTime() + delay;, +        // Guard against overflow, +        return deadlineNanos < 0 ? Long.MAX_VALUE : deadlineNanos;]