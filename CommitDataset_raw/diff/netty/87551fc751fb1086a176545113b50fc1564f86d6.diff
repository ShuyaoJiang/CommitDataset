[+++ b/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java, +import io.netty.util.ByteProcessor;, +    private final ByteProcessor updateProcessor = new ByteProcessor() {, +        @Override, +        public boolean process(byte value) throws Exception {, +            update(value);, +            return true;, +        }, +    };, +, +    static ByteBufChecksum wrapChecksum(Checksum checksum) {, +        ObjectUtil.checkNotNull(checksum, "checksum");, +        if (checksum instanceof Adler32 && ADLER32_UPDATE_METHOD != null) {, +            return new ReflectiveByteBufChecksum(checksum, ADLER32_UPDATE_METHOD);, +        }, +        if (checksum instanceof CRC32 && CRC32_UPDATE_METHOD != null) {, +            return new ReflectiveByteBufChecksum(checksum, CRC32_UPDATE_METHOD);, +        }, +        return new SlowByteBufChecksum(checksum);, +    }, +    /**, +     * @see {@link #update(byte[], int, int)}., +     */, +    public void update(ByteBuf b, int off, int len) {, +        if (b.hasArray()) {, +            update(b.array(), b.arrayOffset() + off, len);, +        } else {, +            b.forEachByte(off, len, updateProcessor);, +        }, +    }, +, +    private static final class ReflectiveByteBufChecksum extends SlowByteBufChecksum {, +        private final Method method;, +, +        ReflectiveByteBufChecksum(Checksum checksum, Method method) {, +            super(checksum);, +            this.method = method;, +        }, +, +        @Override, +        public void update(ByteBuf b, int off, int len) {, +            if (b.hasArray()) {, +                update(b.array(), b.arrayOffset() + off, len);, +            } else {, +                try {, +                    method.invoke(checksum, CompressionUtil.safeNioBuffer(b));, +                } catch (Throwable cause) {, +                    throw new Error();, +                }, +            }, +        }, +    }, +, +    private static class SlowByteBufChecksum extends ByteBufChecksum {, +, +        protected final Checksum checksum;, +, +        SlowByteBufChecksum(Checksum checksum) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java, +import io.netty.util.ByteProcessor;, +    private final ByteProcessor updateProcessor = new ByteProcessor() {, +        @Override, +        public boolean process(byte value) throws Exception {, +            update(value);, +            return true;, +        }, +    };, +, +    static ByteBufChecksum wrapChecksum(Checksum checksum) {, +        ObjectUtil.checkNotNull(checksum, "checksum");, +        if (checksum instanceof Adler32 && ADLER32_UPDATE_METHOD != null) {, +            return new ReflectiveByteBufChecksum(checksum, ADLER32_UPDATE_METHOD);, +        }, +        if (checksum instanceof CRC32 && CRC32_UPDATE_METHOD != null) {, +            return new ReflectiveByteBufChecksum(checksum, CRC32_UPDATE_METHOD);, +        }, +        return new SlowByteBufChecksum(checksum);, +    }, +    /**, +     * @see {@link #update(byte[], int, int)}., +     */, +    public void update(ByteBuf b, int off, int len) {, +        if (b.hasArray()) {, +            update(b.array(), b.arrayOffset() + off, len);, +        } else {, +            b.forEachByte(off, len, updateProcessor);, +        }, +    }, +, +    private static final class ReflectiveByteBufChecksum extends SlowByteBufChecksum {, +        private final Method method;, +, +        ReflectiveByteBufChecksum(Checksum checksum, Method method) {, +            super(checksum);, +            this.method = method;, +        }, +, +        @Override, +        public void update(ByteBuf b, int off, int len) {, +            if (b.hasArray()) {]