[+++ b/handler/src/main/java/io/netty/handler/ssl/Java8SslUtils.java, +    static boolean checkSniHostnameMatch(Collection<?> matchers, byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/Java8SslUtils.java, +    static boolean checkSniHostnameMatch(Collection<?> matchers, byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import io.netty.util.CharsetUtil;, +    final boolean checkSniHostnameMatch(byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/Java8SslUtils.java, +    static boolean checkSniHostnameMatch(Collection<?> matchers, byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import io.netty.util.CharsetUtil;, +    final boolean checkSniHostnameMatch(byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslServerContext.java, +import io.netty.util.CharsetUtil;, +                // TODO: In the next release of tcnative we should pass the byte[] directly in and not use a String., +                return engine.checkSniHostnameMatch(hostname.getBytes(CharsetUtil.UTF_8));, +++ b/handler/src/main/java/io/netty/handler/ssl/Java8SslUtils.java, +    static boolean checkSniHostnameMatch(Collection<?> matchers, byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import io.netty.util.CharsetUtil;, +    final boolean checkSniHostnameMatch(byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslServerContext.java, +import io.netty.util.CharsetUtil;, +                // TODO: In the next release of tcnative we should pass the byte[] directly in and not use a String., +                return engine.checkSniHostnameMatch(hostname.getBytes(CharsetUtil.UTF_8));, +++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import java.util.Arrays;, +    static void setSNIMatcher(SSLParameters parameters, final byte[] match) {, +                return Arrays.equals(match, sniServerName.getEncoded());, +++ b/handler/src/main/java/io/netty/handler/ssl/Java8SslUtils.java, +    static boolean checkSniHostnameMatch(Collection<?> matchers, byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +import io.netty.util.CharsetUtil;, +    final boolean checkSniHostnameMatch(byte[] hostname) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslServerContext.java, +import io.netty.util.CharsetUtil;, +                // TODO: In the next release of tcnative we should pass the byte[] directly in and not use a String., +                return engine.checkSniHostnameMatch(hostname.getBytes(CharsetUtil.UTF_8));, +++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import java.util.Arrays;, +    static void setSNIMatcher(SSLParameters parameters, final byte[] match) {, +                return Arrays.equals(match, sniServerName.getEncoded());, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.EmptyArrays;, +            Java8SslTestUtils.setSNIMatcher(parameters, EmptyArrays.EMPTY_BYTES);, +    @Test, +    public void testSNIMatchersWithSNINameWithUnderscore() throws Exception {, +        assumeTrue(PlatformDependent.javaVersion() >= 8);, +        byte[] name = "rb8hx3pww30y3tvw0mwy.v1_1".getBytes(CharsetUtil.UTF_8);, +        SelfSignedCertificate ssc = new SelfSignedCertificate();, +        serverSslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()), +                .sslProvider(sslServerProvider()), +                .build();, +, +        SSLEngine engine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +        try {, +            SSLParameters parameters = new SSLParameters();, +            Java8SslTestUtils.setSNIMatcher(parameters, name);, +            engine.setSSLParameters(parameters);, +            assertTrue(unwrapEngine(engine).checkSniHostnameMatch(name));, +            assertFalse(unwrapEngine(engine).checkSniHostnameMatch("other".getBytes(CharsetUtil.UTF_8)));, +        } finally {, +            cleanupServerSslEngine(engine);, +            ssc.delete();, +        }, +    }, +]