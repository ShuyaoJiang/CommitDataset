[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +            if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {, +            }, +            // Either it is already chunked or EOF terminated., +            // See https://github.com/netty/netty/issues/5892, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +            if (headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {, +            }, +            // Either it is already chunked or EOF terminated., +            // See https://github.com/netty/netty/issues/5892, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java, +        byte[] receivedContent = readContent(req, contentLength, true);, +        byte[] receivedContent = readContent(resp, contentLength, true);, +, +        assertEquals(HELLO_WORLD, new String(receivedContent, CharsetUtil.US_ASCII));, +, +        assertHasInboundMessages(channel, true);, +        assertHasOutboundMessages(channel, false);, +        assertFalse(channel.finish());, +    }, +, +    // See https://github.com/netty/netty/issues/5892, +    @Test, +    public void testFullHttpResponseEOF() {, +        // test that ContentDecoder can be used after the ObjectAggregator, +        HttpResponseDecoder decoder = new HttpResponseDecoder(4096, 4096, 5);, +        HttpContentDecoder decompressor = new HttpContentDecompressor();, +        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor);, +        String headers = "HTTP/1.1 200 OK\r\n" +, +                "Content-Encoding: gzip\r\n" +, +                "\r\n";, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(headers.getBytes(), GZ_HELLO_WORLD)));, +        // This should terminate it., +        assertTrue(channel.finish());, +, +        Queue<Object> resp = channel.inboundMessages();, +        assertTrue(resp.size() > 1);, +        int contentLength = 0;, +        contentLength = calculateContentLength(resp, contentLength);, +, +        byte[] receivedContent = readContent(resp, contentLength, false);, +    private static byte[] readContent(Queue<Object> req, int contentLength, boolean hasTransferEncoding) {, +            if (o instanceof HttpMessage) {, +                assertEquals(hasTransferEncoding,, +                        ((HttpMessage) o).headers().contains(HttpHeaderNames.TRANSFER_ENCODING));, +            }]