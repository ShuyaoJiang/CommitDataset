[+++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +    private final boolean preferDirect;, +        this(true);, +        this(outboundMessageType, true);, +    }, +, +    protected MessageToByteEncoder(boolean preferDirect) {, +        matcher = TypeParameterMatcher.find(this, MessageToByteEncoder.class, "I");, +        this.preferDirect = preferDirect;, +    }, +, +    protected MessageToByteEncoder(Class<? extends I> outboundMessageType, boolean preferDirect) {, +        this.preferDirect = preferDirect;, +        try {, +                        if (preferDirect) {, +                            buf = ctx.alloc().ioBuffer();, +                        } else {, +                            buf = ctx.alloc().heapBuffer();, +                        }, +                    buf = null;, +            if (buf != null) {, +                buf.release();, +            }, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +    private final boolean preferDirect;, +        this(true);, +        this(outboundMessageType, true);, +    }, +, +    protected MessageToByteEncoder(boolean preferDirect) {, +        matcher = TypeParameterMatcher.find(this, MessageToByteEncoder.class, "I");, +        this.preferDirect = preferDirect;, +    }, +, +    protected MessageToByteEncoder(Class<? extends I> outboundMessageType, boolean preferDirect) {, +        this.preferDirect = preferDirect;, +        try {, +                        if (preferDirect) {, +                            buf = ctx.alloc().ioBuffer();, +                        } else {, +                            buf = ctx.alloc().heapBuffer();, +                        }, +                    buf = null;, +            if (buf != null) {, +                buf.release();, +            }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +    protected void encode(ChannelHandlerContext ctx, ByteBuf in, ByteBuf out) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +    private final boolean preferDirect;, +        this(true);, +        this(outboundMessageType, true);, +    }, +, +    protected MessageToByteEncoder(boolean preferDirect) {, +        matcher = TypeParameterMatcher.find(this, MessageToByteEncoder.class, "I");, +        this.preferDirect = preferDirect;, +    }, +, +    protected MessageToByteEncoder(Class<? extends I> outboundMessageType, boolean preferDirect) {, +        this.preferDirect = preferDirect;, +        try {, +                        if (preferDirect) {, +                            buf = ctx.alloc().ioBuffer();, +                        } else {, +                            buf = ctx.alloc().heapBuffer();, +                        }, +                    buf = null;, +            if (buf != null) {, +                buf.release();, +            }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +    protected void encode(ChannelHandlerContext ctx, ByteBuf in, ByteBuf out) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/ZlibEncoder.java, +    protected ZlibEncoder() {, +        super(false);, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +    private final boolean preferDirect;, +        this(true);, +        this(outboundMessageType, true);, +    }, +, +    protected MessageToByteEncoder(boolean preferDirect) {, +        matcher = TypeParameterMatcher.find(this, MessageToByteEncoder.class, "I");, +        this.preferDirect = preferDirect;, +    }, +, +    protected MessageToByteEncoder(Class<? extends I> outboundMessageType, boolean preferDirect) {, +        this.preferDirect = preferDirect;, +        try {, +                        if (preferDirect) {, +                            buf = ctx.alloc().ioBuffer();, +                        } else {, +                            buf = ctx.alloc().heapBuffer();, +                        }, +                    buf = null;, +            if (buf != null) {, +                buf.release();]