[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.DefaultPriorityQueue;, +import io.netty.util.internal.PriorityQueue;, +import java.util.Comparator;, +    private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =, +            new Comparator<ScheduledFutureTask<?>>() {, +                @Override, +                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {, +                    return o1.compareTo(o2);, +                }, +            };, +, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue() {, +            scheduledTaskQueue = new DefaultPriorityQueue<ScheduledFutureTask<?>>(, +                    SCHEDULED_FUTURE_TASK_COMPARATOR,, +                    // Use same initial capacity as java.util.PriorityQueue, +                    11);, +        PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue = this.scheduledTaskQueue;, +        scheduledTaskQueue.clearIgnoringIndexes();, +            scheduledTaskQueue().removeTyped(task);, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.DefaultPriorityQueue;, +import io.netty.util.internal.PriorityQueue;, +import java.util.Comparator;, +    private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =, +            new Comparator<ScheduledFutureTask<?>>() {, +                @Override, +                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {, +                    return o1.compareTo(o2);, +                }, +            };, +, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue() {, +            scheduledTaskQueue = new DefaultPriorityQueue<ScheduledFutureTask<?>>(, +                    SCHEDULED_FUTURE_TASK_COMPARATOR,, +                    // Use same initial capacity as java.util.PriorityQueue, +                    11);, +        PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue = this.scheduledTaskQueue;, +        scheduledTaskQueue.clearIgnoringIndexes();, +            scheduledTaskQueue().removeTyped(task);, +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +import io.netty.util.internal.DefaultPriorityQueue;, +import io.netty.util.internal.PriorityQueueNode;, +, +final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFuture<V>, PriorityQueueNode {, +    private int queueIndex = INDEX_NOT_IN_QUEUE;, +, +, +    @Override, +    public int priorityQueueIndex(DefaultPriorityQueue<?> queue) {, +        return queueIndex;, +    }, +, +    @Override, +    public void priorityQueueIndex(DefaultPriorityQueue<?> queue, int i) {, +        queueIndex = i;, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.DefaultPriorityQueue;, +import io.netty.util.internal.PriorityQueue;, +import java.util.Comparator;, +    private static final Comparator<ScheduledFutureTask<?>> SCHEDULED_FUTURE_TASK_COMPARATOR =, +            new Comparator<ScheduledFutureTask<?>>() {, +                @Override, +                public int compare(ScheduledFutureTask<?> o1, ScheduledFutureTask<?> o2) {, +                    return o1.compareTo(o2);, +                }, +            };, +, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue;, +    PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue() {, +            scheduledTaskQueue = new DefaultPriorityQueue<ScheduledFutureTask<?>>(, +                    SCHEDULED_FUTURE_TASK_COMPARATOR,, +                    // Use same initial capacity as java.util.PriorityQueue, +                    11);, +        PriorityQueue<ScheduledFutureTask<?>> scheduledTaskQueue = this.scheduledTaskQueue;, +        scheduledTaskQueue.clearIgnoringIndexes();, +            scheduledTaskQueue().removeTyped(task);, +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +import io.netty.util.internal.DefaultPriorityQueue;, +import io.netty.util.internal.PriorityQueueNode;, +, +final class ScheduledFutureTask<V> extends PromiseTask<V> implements ScheduledFuture<V>, PriorityQueueNode {, +    private int queueIndex = INDEX_NOT_IN_QUEUE;, +, +, +    @Override, +    public int priorityQueueIndex(DefaultPriorityQueue<?> queue) {, +        return queueIndex;, +    }, +, +    @Override, +    public void priorityQueueIndex(DefaultPriorityQueue<?> queue, int i) {, +        queueIndex = i;, +    }, +++ b/common/src/main/java/io/netty/util/internal/DefaultPriorityQueue.java, +    public void clearIgnoringIndexes() {, +        size = 0;]