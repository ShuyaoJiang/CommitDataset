[+++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    /**, +     * Return a unreleasable view on the given {@link ByteBuf} which will just ignore release and retain calls., +     */, +    public static ByteBuf unreleasableBuffer(ByteBuf buf) {, +        return new UnreleasableByteBuf(buf);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    /**, +     * Return a unreleasable view on the given {@link ByteBuf} which will just ignore release and retain calls., +     */, +    public static ByteBuf unreleasableBuffer(ByteBuf buf) {, +        return new UnreleasableByteBuf(buf);, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/UnreleasableByteBuf.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +import java.nio.charset.Charset;, +, +/**, + * Allows to wrap another {@link ByteBuf} to provide a view of it which does not allow, + * to release it or retain., + */, +final class UnreleasableByteBuf implements ByteBuf {, +    private final ByteBuf buf;, +, +    UnreleasableByteBuf(ByteBuf buf) {, +        if (buf == null) {, +            throw new NullPointerException("buf");, +        }, +        this.buf = buf;, +    }, +, +    @Override, +    public boolean hasMemoryAddress() {, +        return buf.hasMemoryAddress();, +    }, +, +    @Override, +    public long memoryAddress() {, +        return buf.memoryAddress();, +    }, +, +    @Override, +    public int capacity() {, +        return buf.capacity();, +    }, +, +    @Override, +    public ByteBuf capacity(int newCapacity) {, +        return buf.capacity(newCapacity);, +    }, +, +    @Override, +    public int maxCapacity() {, +        return buf.maxCapacity();, +    }, +, +    @Override, +    public ByteBufAllocator alloc() {, +        return buf.alloc();, +    }, +, +    @Override, +    public ByteOrder order() {, +        return buf.order();, +    }, +, +    @Override, +    public ByteBuf order(ByteOrder endianness) {, +        return buf.order(endianness);, +    }, +, +    @Override, +    public ByteBuf unwrap() {, +        return buf;]