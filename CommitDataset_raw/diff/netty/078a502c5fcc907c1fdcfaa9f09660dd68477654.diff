[+++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +            // Start the server., +            sb.bind().sync();, +, +            // Start the client., +++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +            // Start the server., +            sb.bind().sync();, +, +            // Start the client., +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(SingleThreadEventLoop.class);, +, +    private final Set<Runnable> shutdownHooks = new HashSet<Runnable>();, +                        runShutdownHooks();, +        // Do nothing. Subclases will override., +    public void addShutdownHook(Runnable task) {, +        ensureShutdownHookAccess();, +        shutdownHooks.add(task);, +    }, +, +    public void removeShutdownHook(Runnable task) {, +        ensureShutdownHookAccess();, +        shutdownHooks.remove(task);, +    }, +, +    private void ensureShutdownHookAccess() {, +        if (!inEventLoop()) {, +            throw new IllegalStateException("must be called from the event loop");, +        }, +    }, +, +    private void runShutdownHooks() {, +        // Note shutdown hooks can add / remove shutdown hooks., +        while (!shutdownHooks.isEmpty()) {, +            List<Runnable> copy = new ArrayList<Runnable>(shutdownHooks);, +            shutdownHooks.clear();, +            for (Runnable task: copy) {, +                try {, +                    task.run();, +                } catch (Throwable t) {, +                    logger.warn("Shutdown hook raised an exception.", t);, +                }, +            }, +        }, +    }, +, +++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +            // Start the server., +            sb.bind().sync();, +, +            // Start the client., +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Set;, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(SingleThreadEventLoop.class);, +, +    private final Set<Runnable> shutdownHooks = new HashSet<Runnable>();, +                        runShutdownHooks();, +        // Do nothing. Subclases will override., +    public void addShutdownHook(Runnable task) {, +        ensureShutdownHookAccess();, +        shutdownHooks.add(task);, +    }, +, +    public void removeShutdownHook(Runnable task) {, +        ensureShutdownHookAccess();, +        shutdownHooks.remove(task);, +    }, +, +    private void ensureShutdownHookAccess() {, +        if (!inEventLoop()) {, +            throw new IllegalStateException("must be called from the event loop");, +        }, +    }, +, +    private void runShutdownHooks() {, +        // Note shutdown hooks can add / remove shutdown hooks., +        while (!shutdownHooks.isEmpty()) {, +            List<Runnable> copy = new ArrayList<Runnable>(shutdownHooks);, +            shutdownHooks.clear();, +            for (Runnable task: copy) {, +                try {, +                    task.run();, +                } catch (Throwable t) {, +                    logger.warn("Shutdown hook raised an exception.", t);, +                }, +            }, +        }, +    }]