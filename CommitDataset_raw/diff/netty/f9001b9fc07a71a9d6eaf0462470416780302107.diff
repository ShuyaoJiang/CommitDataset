[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +    private final HpackDecoder hpackDecoder;, +        this(validateHeaders, new HpackDecoder(maxHeaderListSize, initialHuffmanDecodeCapacity));, +    DefaultHttp2HeadersDecoder(boolean validateHeaders, HpackDecoder hpackDecoder) {, +        this.hpackDecoder = ObjectUtil.checkNotNull(hpackDecoder, "hpackDecoder");, +        hpackDecoder.setMaxHeaderTableSize(max);, +        return hpackDecoder.getMaxHeaderTableSize();, +        hpackDecoder.setMaxHeaderListSize(max, goAwayMax);, +        return hpackDecoder.getMaxHeaderListSize();, +        return hpackDecoder.getMaxHeaderListSizeGoAway();, +            hpackDecoder.decode(streamId, headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +    private final HpackDecoder hpackDecoder;, +        this(validateHeaders, new HpackDecoder(maxHeaderListSize, initialHuffmanDecodeCapacity));, +    DefaultHttp2HeadersDecoder(boolean validateHeaders, HpackDecoder hpackDecoder) {, +        this.hpackDecoder = ObjectUtil.checkNotNull(hpackDecoder, "hpackDecoder");, +        hpackDecoder.setMaxHeaderTableSize(max);, +        return hpackDecoder.getMaxHeaderTableSize();, +        hpackDecoder.setMaxHeaderListSize(max, goAwayMax);, +        return hpackDecoder.getMaxHeaderListSize();, +        return hpackDecoder.getMaxHeaderListSizeGoAway();, +            hpackDecoder.decode(streamId, headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    private final HpackEncoder hpackEncoder;, +        this(sensitivityDetector, new HpackEncoder());, +        this(sensitivityDetector, new HpackEncoder(ignoreMaxHeaderListSize));, +        this(sensitivityDetector, new HpackEncoder(ignoreMaxHeaderListSize, dynamicTableArraySizeHint));, +    DefaultHttp2HeadersEncoder(SensitivityDetector sensitivityDetector, HpackEncoder hpackEncoder) {, +        this.hpackEncoder = checkNotNull(hpackEncoder, "hpackEncoder");, +            // If there was a change in the table size, serialize the output from the hpackEncoder, +            hpackEncoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +        hpackEncoder.setMaxHeaderTableSize(tableSizeChangeOutput, max);, +        return hpackEncoder.getMaxHeaderTableSize();, +        hpackEncoder.setMaxHeaderListSize(max);, +        return hpackEncoder.getMaxHeaderListSize();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +    private final HpackDecoder hpackDecoder;, +        this(validateHeaders, new HpackDecoder(maxHeaderListSize, initialHuffmanDecodeCapacity));, +    DefaultHttp2HeadersDecoder(boolean validateHeaders, HpackDecoder hpackDecoder) {, +        this.hpackDecoder = ObjectUtil.checkNotNull(hpackDecoder, "hpackDecoder");, +        hpackDecoder.setMaxHeaderTableSize(max);, +        return hpackDecoder.getMaxHeaderTableSize();, +        hpackDecoder.setMaxHeaderListSize(max, goAwayMax);, +        return hpackDecoder.getMaxHeaderListSize();, +        return hpackDecoder.getMaxHeaderListSizeGoAway();, +            hpackDecoder.decode(streamId, headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    private final HpackEncoder hpackEncoder;, +        this(sensitivityDetector, new HpackEncoder());, +        this(sensitivityDetector, new HpackEncoder(ignoreMaxHeaderListSize));, +        this(sensitivityDetector, new HpackEncoder(ignoreMaxHeaderListSize, dynamicTableArraySizeHint));, +    DefaultHttp2HeadersEncoder(SensitivityDetector sensitivityDetector, HpackEncoder hpackEncoder) {, +        this.hpackEncoder = checkNotNull(hpackEncoder, "hpackEncoder");, +            // If there was a change in the table size, serialize the output from the hpackEncoder, +            hpackEncoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +        hpackEncoder.setMaxHeaderTableSize(tableSizeChangeOutput, max);, +        return hpackEncoder.getMaxHeaderTableSize();, +        hpackEncoder.setMaxHeaderListSize(max);, +        return hpackEncoder.getMaxHeaderListSize();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +/*, + * Copyright 2014 Twitter, Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package io.netty.handler.codec.http2;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.handler.codec.http2.HpackUtil.IndexType;, +import io.netty.util.AsciiString;, +, +import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_LIST_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_TABLE_SIZE;]