[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * assert decoder.getParameters().get("recipient").get(0).equals("world");, + * assert decoder.getParameters().get("x").get(0).equals("1");, + * assert decoder.getParameters().get("y").get(0).equals("2");, + *, + * This decoder can also decode the content of an HTTP POST request whose, + * content type is <tt>application/x-www-form-urlencoded</tt>:, + * <pre>, + * {@link QueryStringDecoder} decoder = new {@link QueryStringDecoder}("recipient=world&x=1;y=2", false);, + * ..., + * </pre>, + *, + * <h3>HashDOS vulnerability fix</h3>, + *, + * As a workaround to the <a href="http://events.ccc.de/congress/2011/Fahrplan/attachments/2007_28C3_Effective_DoS_on_web_application_platforms.pdf">HashDOS</a>, + * vulnerability, the decoder limits the maximum number of decoded key-value, + * parameter pairs, up to {@literal 1024} by default, and you can configure it, + * when you construct the decoder by passing an additional integer parameter., + *, +    private static final int DEFAULT_MAX_PARAMS = 1024;, +, +    private final boolean hasPath;, +    private final int maxParams;, +    private int nParams;, +    public QueryStringDecoder(String uri, boolean hasPath) {, +        this(uri, HttpCodecUtil.DEFAULT_CHARSET, hasPath);, +    }, +, +    /**, +     * Creates a new decoder that decodes the specified URI encoded in the, +     * specified charset., +     */, +        this(uri, charset, true);, +    }, +, +    /**, +     * Creates a new decoder that decodes the specified URI encoded in the, +     * specified charset., +     */, +    public QueryStringDecoder(String uri, Charset charset, boolean hasPath) {, +        this(uri, charset, hasPath, DEFAULT_MAX_PARAMS);, +    }, +, +    /**, +     * Creates a new decoder that decodes the specified URI encoded in the, +     * specified charset., +     */, +    public QueryStringDecoder(String uri, Charset charset, boolean hasPath, int maxParams) {, +        if (maxParams <= 0) {, +            throw new IllegalArgumentException(, +                    "maxParams: " + maxParams + " (expected: a positive integer)");, +        }, +        this.maxParams = maxParams;, +        this.hasPath = hasPath;, +        this(uri, charset, DEFAULT_MAX_PARAMS);, +    }, +, +    /**, +     * Creates a new decoder that decodes the specified URI encoded in the, +     * specified charset., +     */, +    public QueryStringDecoder(URI uri, Charset charset, int maxParams) {, +        if (maxParams <= 0) {, +            throw new IllegalArgumentException(, +                    "maxParams: " + maxParams + " (expected: a positive integer)");, +        }, +        this.maxParams = maxParams;, +        hasPath = false;, +            if (!hasPath) {, +                return path = "";, +            }, +, +            if (hasPath) {, +                decodeParams(uri.substring(pathLength + 1));, +            } else {, +                if (uri.isEmpty()) {, +                    return Collections.emptyMap();, +                }, +                decodeParams(uri);, +            }, +    private void decodeParams(String s) {, +        Map<String, List<String>> params = this.params = new LinkedHashMap<String, List<String>>();, +        nParams = 0;, +                    if (!addParam(params, decodeComponent(s.substring(pos, i), charset), "")) {, +                        return;, +                    }, +                    if (!addParam(params, name, decodeComponent(s.substring(pos, i), charset))) {, +                        return;, +                    }, +                if (!addParam(params, decodeComponent(s.substring(pos, i), charset), "")) {, +                    return;, +                }, +                if (!addParam(params, name, decodeComponent(s.substring(pos, i), charset))) {, +                    return;, +                }, +            if (!addParam(params, name, "")) {, +                return;, +            }, +        }, +    private boolean addParam(Map<String, List<String>> params, String name, String value) {]