[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +        // After writing the upgrade response we immediately prepare the, +        // pipeline for the next protocol to avoid a race between completion, +        // of the write future and receiving data before the pipeline is, +        // restructured., +            final ChannelFuture writeComplete = ctx.writeAndFlush(upgradeResponse);, +            upgradeCodec.upgradeTo(ctx, request);, +, +            // Remove this handler from the pipeline., +            ctx.pipeline().remove(HttpServerUpgradeHandler.this);, +            // Add the listener last to avoid firing upgrade logic after, +            // the channel is already closed since the listener may fire, +            // immediately if the write failed eagerly., +            writeComplete.addListener(ChannelFutureListener.CLOSE_ON_FAILURE);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +        // After writing the upgrade response we immediately prepare the, +        // pipeline for the next protocol to avoid a race between completion, +        // of the write future and receiving data before the pipeline is, +        // restructured., +            final ChannelFuture writeComplete = ctx.writeAndFlush(upgradeResponse);, +            upgradeCodec.upgradeTo(ctx, request);, +, +            // Remove this handler from the pipeline., +            ctx.pipeline().remove(HttpServerUpgradeHandler.this);, +            // Add the listener last to avoid firing upgrade logic after, +            // the channel is already closed since the listener may fire, +            // immediately if the write failed eagerly., +            writeComplete.addListener(ChannelFutureListener.CLOSE_ON_FAILURE);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpServerUpgradeHandlerTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import java.util.Collection;, +import java.util.Collections;, +, +import org.junit.Test;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.ChannelDuplexHandler;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelPromise;, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeCodec;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeCodecFactory;, +import io.netty.util.CharsetUtil;, +, +import static org.junit.Assert.*;, +, +public class HttpServerUpgradeHandlerTest {, +, +    private class TestUpgradeCodec implements UpgradeCodec {, +        @Override, +        public Collection<CharSequence> requiredUpgradeHeaders() {, +            return Collections.<CharSequence>emptyList();, +        }, +, +        @Override, +        public boolean prepareUpgradeResponse(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest,, +                                              HttpHeaders upgradeHeaders) {, +            return true;, +        }, +, +        @Override, +        public void upgradeTo(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest) {, +            // Ensure that the HttpServerUpgradeHandler is still installed when this is called, +            assertEquals(ctx.pipeline().context(HttpServerUpgradeHandler.class), ctx);, +            assertNotNull(ctx.pipeline().get(HttpServerUpgradeHandler.class));, +, +            // Add a marker handler to signal that the upgrade has happened, +            ctx.pipeline().addAfter(ctx.name(), "marker", new ChannelInboundHandlerAdapter());, +          }, +    }, +, +    @Test, +    public void upgradesPipelineInSameMethodInvocation() {, +        final HttpServerCodec httpServerCodec = new HttpServerCodec();, +        final UpgradeCodecFactory factory = new UpgradeCodecFactory() {, +            @Override, +            public UpgradeCodec newUpgradeCodec(CharSequence protocol) {, +                return new TestUpgradeCodec();, +            }]