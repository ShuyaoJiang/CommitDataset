[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +         * Prepares the {@code upgradeHeaders} for a protocol update based upon the contents of {@code upgradeRequest}., +         * This method returns a boolean value to proceed or abort the upgrade in progress. If {@code false} is, +         * returned, the upgrade is aborted and the {@code upgradeRequest} will be passed through the inbound pipeline, +         * as if no upgrade was performed. If {@code true} is returned, the upgrade will proceed to the next, +         * step which invokes {@link #upgradeTo}. When returning {@code true}, you can add headers to, +         * the {@code upgradeHeaders} so that they are added to the 101 Switching protocols response., +        boolean prepareUpgradeResponse(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest,, +                                    HttpHeaders upgradeHeaders);, +        UpgradeEvent(CharSequence protocol, FullHttpRequest upgradeRequest) {, +        if (!upgradeCodec.prepareUpgradeResponse(ctx, request, upgradeResponse.headers())) {, +            return false;, +        }, +, +        // Create the user event to be fired once the upgrade completes., +        final UpgradeEvent event = new UpgradeEvent(upgradeProtocol, request);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +         * Prepares the {@code upgradeHeaders} for a protocol update based upon the contents of {@code upgradeRequest}., +         * This method returns a boolean value to proceed or abort the upgrade in progress. If {@code false} is, +         * returned, the upgrade is aborted and the {@code upgradeRequest} will be passed through the inbound pipeline, +         * as if no upgrade was performed. If {@code true} is returned, the upgrade will proceed to the next, +         * step which invokes {@link #upgradeTo}. When returning {@code true}, you can add headers to, +         * the {@code upgradeHeaders} so that they are added to the 101 Switching protocols response., +        boolean prepareUpgradeResponse(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest,, +                                    HttpHeaders upgradeHeaders);, +        UpgradeEvent(CharSequence protocol, FullHttpRequest upgradeRequest) {, +        if (!upgradeCodec.prepareUpgradeResponse(ctx, request, upgradeResponse.headers())) {, +            return false;, +        }, +, +        // Create the user event to be fired once the upgrade completes., +        final UpgradeEvent event = new UpgradeEvent(upgradeProtocol, request);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerUpgradeCodec.java, +import io.netty.handler.codec.http.HttpHeaders;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(Http2ServerUpgradeCodec.class);, +    public boolean prepareUpgradeResponse(ChannelHandlerContext ctx, FullHttpRequest upgradeRequest,, +            HttpHeaders headers) {, +            // Everything looks good., +            return true;, +        } catch (Throwable cause) {, +            logger.info("Error during upgrade to HTTP/2", cause);, +            return false;]