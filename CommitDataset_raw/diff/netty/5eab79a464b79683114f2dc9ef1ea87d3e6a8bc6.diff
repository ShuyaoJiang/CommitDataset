[+++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/FileDescriptor.java, +    static int inputShutdown(int state) {, +        return state | STATE_INPUT_SHUTDOWN_MASK;, +    static int outputShutdown(int state) {, +        return state | STATE_OUTPUT_SHUTDOWN_MASK;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/FileDescriptor.java, +    static int inputShutdown(int state) {, +        return state | STATE_INPUT_SHUTDOWN_MASK;, +    static int outputShutdown(int state) {, +        return state | STATE_OUTPUT_SHUTDOWN_MASK;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/Socket.java, +            // We need to only shutdown what has not been shutdown yet, and if there is no change we should not, +            // shutdown anything. This is because if the underlying FD is reused and we still have an object which, +            // represents the previous incarnation of the FD we need to be sure we don't inadvertently shutdown the, +            // "new" FD without explicitly having a change., +            final int oldState = this.state;, +            int newState = oldState;, +            if (read && !isInputShutdown(newState)) {, +                newState = inputShutdown(newState);, +            }, +            if (write && !isOutputShutdown(newState)) {, +                newState = outputShutdown(newState);, +            }, +, +            // If there is no change in state, then we should not take any action., +            if (newState == oldState) {, +            if (casState(oldState, newState)) {]