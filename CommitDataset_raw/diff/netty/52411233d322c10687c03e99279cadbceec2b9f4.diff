[+++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +    private FullHttpRequest request;, +, +        this.request = request;, +            this.sendError(ctx, METHOD_NOT_ALLOWED);, +            this.sendError(ctx, FORBIDDEN);, +            this.sendError(ctx, NOT_FOUND);, +                this.sendListing(ctx, file, uri);, +                this.sendRedirect(ctx, uri + '/');, +                this.sendNotModified(ctx);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +    private void sendListing(ChannelHandlerContext ctx, File dir, String dirPath) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendRedirect(ChannelHandlerContext ctx, String newUri) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendNotModified(ChannelHandlerContext ctx) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendAndCleanupConnection(ChannelHandlerContext ctx, FullHttpResponse response) {, +        final FullHttpRequest request = this.request;, +        final boolean keepAlive = HttpUtil.isKeepAlive(request);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +    private FullHttpRequest request;, +, +        this.request = request;, +            this.sendError(ctx, METHOD_NOT_ALLOWED);, +            this.sendError(ctx, FORBIDDEN);, +            this.sendError(ctx, NOT_FOUND);, +                this.sendListing(ctx, file, uri);, +                this.sendRedirect(ctx, uri + '/');, +                this.sendNotModified(ctx);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +    private void sendListing(ChannelHandlerContext ctx, File dir, String dirPath) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendRedirect(ChannelHandlerContext ctx, String newUri) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendNotModified(ChannelHandlerContext ctx) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendAndCleanupConnection(ChannelHandlerContext ctx, FullHttpResponse response) {, +        final FullHttpRequest request = this.request;, +        final boolean keepAlive = HttpUtil.isKeepAlive(request);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +++ b/example/src/main/java/io/netty/example/http/helloworld/HttpHelloWorldServerHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.handler.codec.http.HttpUtil;, +import io.netty.handler.codec.http.HttpVersion;, +import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;, +import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;, +import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;, +import static io.netty.handler.codec.http.HttpHeaderValues.CLOSE;, +import static io.netty.handler.codec.http.HttpHeaderValues.KEEP_ALIVE;, +import static io.netty.handler.codec.http.HttpResponseStatus.OK;, +import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;, +            if (keepAlive && req.protocolVersion().equals(HttpVersion.HTTP_1_0)) {, +            } else {, +                // Tell the client we're going to close the connection., +                response.headers().set(CONNECTION, CLOSE);, +            }, +, +            ChannelFuture f = ctx.write(response);, +, +            if (!keepAlive) {, +                f.addListener(ChannelFutureListener.CLOSE);, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +    private FullHttpRequest request;, +, +        this.request = request;, +            this.sendError(ctx, METHOD_NOT_ALLOWED);, +            this.sendError(ctx, FORBIDDEN);, +            this.sendError(ctx, NOT_FOUND);, +                this.sendListing(ctx, file, uri);, +                this.sendRedirect(ctx, uri + '/');, +                this.sendNotModified(ctx);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +    private void sendListing(ChannelHandlerContext ctx, File dir, String dirPath) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendRedirect(ChannelHandlerContext ctx, String newUri) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendNotModified(ChannelHandlerContext ctx) {, +        this.sendAndCleanupConnection(ctx, response);, +    private void sendAndCleanupConnection(ChannelHandlerContext ctx, FullHttpResponse response) {, +        final FullHttpRequest request = this.request;, +        final boolean keepAlive = HttpUtil.isKeepAlive(request);, +        } else if (request.protocolVersion().equals(HTTP_1_0)) {, +            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);, +++ b/example/src/main/java/io/netty/example/http/helloworld/HttpHelloWorldServerHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.handler.codec.http.HttpUtil;, +import io.netty.handler.codec.http.HttpVersion;]