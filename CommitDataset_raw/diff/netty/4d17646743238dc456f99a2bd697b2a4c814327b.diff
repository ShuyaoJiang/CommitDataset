[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            executor.execute(new ThreadRenamingRunnable(this, threadName));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            executor.execute(new ThreadRenamingRunnable(this, threadName));, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            workerExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            executor.execute(new ThreadRenamingRunnable(this, threadName));, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            workerExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +                                new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            executor.execute(new ThreadRenamingRunnable(this, threadName));, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            workerExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +                                new ThreadRenamingRunnable(, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +                bossExecutor.execute(new ThreadRenamingRunnable(, +                        this, "New I/O client boss #" + id));, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            executor.execute(new ThreadRenamingRunnable(this, threadName));, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioClientSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            workerExecutor.execute(new ThreadRenamingRunnable(, +++ b/src/main/java/org/jboss/netty/channel/socket/oio/OioServerSocketPipelineSink.java, +import org.jboss.netty.util.ThreadRenamingRunnable;, +            bossExecutor.execute(new ThreadRenamingRunnable(, +                                new ThreadRenamingRunnable(, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/util/ThreadRenamingRunnable.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *]