[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            final boolean zeroReservedFlag = (b1 & 0x01) == 0x0;, +            if (!zeroReservedFlag) {, +                // MQTT v3.1.1: The Server MUST validate that the reserved flag in the CONNECT Control Packet is, +                // set to zero and disconnect the Client if it is not zero., +                // See http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349230, +                throw new DecoderException("non-zero reserved flag");, +            }, +        }, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            final boolean zeroReservedFlag = (b1 & 0x01) == 0x0;, +            if (!zeroReservedFlag) {, +                // MQTT v3.1.1: The Server MUST validate that the reserved flag in the CONNECT Control Packet is, +                // set to zero and disconnect the Client if it is not zero., +                // See http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349230, +                throw new DecoderException("non-zero reserved flag");, +            }, +        }, +++ b/codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java, +import io.netty.handler.codec.DecoderException;, +    public void testConnectMessageWithNonZeroReservedFlagForMqtt311() throws Exception {, +        final MqttConnectMessage message = createConnectMessage(MqttVersion.MQTT_3_1_1);, +        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);, +        try {, +            // Set the reserved flag in the CONNECT Packet to 1, +            byteBuf.setByte(9, byteBuf.getByte(9) | 0x1);, +            final List<Object> out = new LinkedList<Object>();, +            mqttDecoder.decode(ctx, byteBuf, out);, +, +            assertEquals("Expected one object bout got " + out.size(), 1, out.size());, +, +            final MqttMessage decodedMessage = (MqttMessage) out.get(0);, +            assertTrue(decodedMessage.decoderResult().isFailure());, +            Throwable cause = decodedMessage.decoderResult().cause();, +            assertTrue(cause instanceof DecoderException);, +            assertEquals("non-zero reserved flag", cause.getMessage());, +        } finally {, +            byteBuf.release();, +        }, +    }, +, +    @Test]