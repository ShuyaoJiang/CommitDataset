[+++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +import java.util.concurrent.Executor;, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +import java.util.concurrent.Executor;, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +import java.util.concurrent.Executor;, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        return new SslHandler(newEngine0(alloc, null, -1, false), startTls, executor);, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        return new SslHandler(newEngine0(alloc, peerHost, peerPort, false), executor);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +import java.util.concurrent.Executor;, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +import java.util.concurrent.Executor;, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        return new SslHandler(newEngine0(alloc, null, -1, false), startTls, executor);, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        return new SslHandler(newEngine0(alloc, peerHost, peerPort, false), executor);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +import io.netty.buffer.ByteBufAllocator;, +            sslHandler = newSslHandler(sslContext, ctx.alloc());, +    /**, +     * Returns a new {@link SslHandler} using the given {@link SslContext} and {@link ByteBufAllocator}., +     * Users may override this method to implement custom behavior., +     */, +    protected SslHandler newSslHandler(SslContext context, ByteBufAllocator allocator) {, +        return context.newHandler(allocator);, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +import java.util.concurrent.Executor;, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, startTls, executor);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort,, +                                    boolean startTls, Executor executor) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls, executor);]