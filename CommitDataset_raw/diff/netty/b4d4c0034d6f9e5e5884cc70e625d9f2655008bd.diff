[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, +    @SuppressWarnings("unchecked"), +    public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, +        super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, +                NameValidator.NOT_NULL, arraySizeHint);, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, +    @SuppressWarnings("unchecked"), +    public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, +        super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, +                NameValidator.NOT_NULL, arraySizeHint);, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +        this(DEFAULT_MAX_HEADER_SIZE, DEFAULT_HEADER_TABLE_SIZE, validateHeaders, 32);, +    public DefaultHttp2HeadersDecoder(int maxHeaderSize, int maxHeaderTableSize, boolean validateHeaders,, +                                      int initialHuffmanDecodeCapacity) {, +        decoder = new Decoder(maxHeaderSize, maxHeaderTableSize, initialHuffmanDecodeCapacity);, +            decoder.decode(headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, +    @SuppressWarnings("unchecked"), +    public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, +        super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, +                NameValidator.NOT_NULL, arraySizeHint);, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +        this(DEFAULT_MAX_HEADER_SIZE, DEFAULT_HEADER_TABLE_SIZE, validateHeaders, 32);, +    public DefaultHttp2HeadersDecoder(int maxHeaderSize, int maxHeaderTableSize, boolean validateHeaders,, +                                      int initialHuffmanDecodeCapacity) {, +        decoder = new Decoder(maxHeaderSize, maxHeaderTableSize, initialHuffmanDecodeCapacity);, +            decoder.decode(headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import io.netty.buffer.Unpooled;, +    private final ByteBuf tableSizeChangeOutput = Unpooled.buffer();, +            if (tableSizeChangeOutput.isReadable()) {, +                buffer.writeBytes(tableSizeChangeOutput);, +                tableSizeChangeOutput.clear();, +                encodeHeader(buffer, header.getKey(), header.getValue());, +    private void encodeHeader(ByteBuf out, CharSequence key, CharSequence value) {, +        encoder.encodeHeader(out, key, value, sensitivityDetector.isSensitive(key, value));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CharSequenceMap.java, +import io.netty.util.internal.UnstableApi;, +/**, + * Internal use only!, + */, +@UnstableApi, +public final class CharSequenceMap<V> extends DefaultHeaders<CharSequence, V, CharSequenceMap<V>> {, +, +    @SuppressWarnings("unchecked"), +    public CharSequenceMap(boolean caseSensitive, ValueConverter<V> valueConverter, int arraySizeHint) {, +        super(caseSensitive ? CASE_SENSITIVE_HASHER : CASE_INSENSITIVE_HASHER, valueConverter,, +                NameValidator.NOT_NULL, arraySizeHint);, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +        this(DEFAULT_MAX_HEADER_SIZE, DEFAULT_HEADER_TABLE_SIZE, validateHeaders, 32);, +    public DefaultHttp2HeadersDecoder(int maxHeaderSize, int maxHeaderTableSize, boolean validateHeaders,, +                                      int initialHuffmanDecodeCapacity) {, +        decoder = new Decoder(maxHeaderSize, maxHeaderTableSize, initialHuffmanDecodeCapacity);, +            decoder.decode(headerBlock, headers);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +import io.netty.buffer.Unpooled;, +    private final ByteBuf tableSizeChangeOutput = Unpooled.buffer();, +            if (tableSizeChangeOutput.isReadable()) {, +                buffer.writeBytes(tableSizeChangeOutput);, +                tableSizeChangeOutput.clear();, +                encodeHeader(buffer, header.getKey(), header.getValue());, +    private void encodeHeader(ByteBuf out, CharSequence key, CharSequence value) {, +        encoder.encodeHeader(out, key, value, sensitivityDetector.isSensitive(key, value));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import io.netty.buffer.ByteBuf;, +import io.netty.handler.codec.http2.Http2Headers;, +import io.netty.util.AsciiString;, +import static io.netty.util.AsciiString.EMPTY_STRING;, +, +import static java.lang.Math.min;, +    private final HuffmanDecoder huffmanDecoder;, +    private final int maxHeaderSize;, +    private CharSequence name;, +    public Decoder(int maxHeaderSize, int maxHeaderTableSize, int initialHuffmanDecodeCapacity) {, +        huffmanDecoder = new HuffmanDecoder(initialHuffmanDecodeCapacity);]