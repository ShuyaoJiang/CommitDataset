[+++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibDecoder.java, +                case JZlib.Z_STREAM_END:, +                    // TODO: Remove myself from the pipeline, +++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibDecoder.java, +                case JZlib.Z_STREAM_END:, +                    // TODO: Remove myself from the pipeline, +++ b/src/main/java/org/jboss/netty/handler/codec/compression/ZlibEncoder.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.jboss.netty.channel.ChannelEvent;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelFutureListener;, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.channel.Channels;, +    private final AtomicBoolean finished = new AtomicBoolean();, +    // TODO Disallow preset dictionary for gzip, +    // TODO add close() method, +    // FIXME thread safety, +, +     * Creates a new zlib encoder with the default compression level, +     *, +     * @throws ZStreamException if failed to initialize zlib, +    public ZlibEncoder() throws ZStreamException {, +     * Creates a new zlib encoder with the specified {@code compressionLevel}., +     *, +     * @throws ZStreamException if failed to initialize zlib, +    public ZlibEncoder(int compressionLevel) throws ZStreamException {, +        int resultCode = z.deflateInit(compressionLevel, false); // Default: ZLIB format, +        if (resultCode != JZlib.Z_OK) {, +            fail("initialization failure", resultCode);, +        }, +    }, +, +    /**, +     * Creates a new zlib encoder with the default compression level, +     * ({@link JZlib#Z_DEFAULT_COMPRESSION}) and the specified preset, +     * dictionary., +     *, +     * @param dictionary  the preset dictionary, +     *, +     * @throws ZStreamException if failed to initialize zlib, +     */, +    public ZlibEncoder(byte[] dictionary) throws ZStreamException {, +        this(JZlib.Z_DEFAULT_COMPRESSION, dictionary);, +    }, +, +    /**, +     * Creates a new zlib encoder with the specified {@code compressionLevel}, +     * and the specified preset dictionary., +     *, +     * @param compressionLevel, +     *        the compression level, as specified in {@link JZlib}., +     *        The common values are, +     *        {@link JZlib#Z_BEST_COMPRESSION},, +     *        {@link JZlib#Z_BEST_SPEED},, +     *        {@link JZlib#Z_DEFAULT_COMPRESSION}, and, +     *        {@link JZlib#Z_NO_COMPRESSION}., +     * @param dictionary  the preset dictionary, +     *, +     * @throws ZStreamException if failed to initialize zlib, +     */, +    public ZlibEncoder(int compressionLevel, byte[] dictionary) throws ZStreamException {, +        int resultCode;, +, +        resultCode = z.deflateInit(compressionLevel, false); // Default: ZLIB format, +        if (resultCode != JZlib.Z_OK) {, +            fail("initialization failure", resultCode);, +        } else {, +            resultCode = z.deflateSetDictionary(dictionary, dictionary.length);, +            if (resultCode != JZlib.Z_OK){, +                fail("failed to set the dictionary", resultCode);, +            }, +        }, +                fail("compression failure", resultCode);, +, +    @Override, +    public void handleDownstream(ChannelHandlerContext ctx, ChannelEvent evt), +            throws Exception {, +        if (evt instanceof ChannelStateEvent) {, +            ChannelStateEvent e = (ChannelStateEvent) evt;, +            switch (e.getState()) {, +            case OPEN:, +            case CONNECTED:, +            case BOUND:, +                if (Boolean.FALSE.equals(e.getValue()) || e.getValue() == null) {, +                    finishEncode(ctx, evt);, +                    return;, +                }, +            }, +        }, +, +        super.handleDownstream(ctx, evt);, +    }, +, +    private ChannelFuture finishEncode(final ChannelHandlerContext ctx, final ChannelEvent evt) {, +        if (!finished.compareAndSet(false, true)) {, +            return Channels.failedFuture(, +                    ctx.getChannel(),, +                    new ZStreamException("zlib stream closed already"));, +        }]