[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import static io.netty.util.internal.StringUtil.unescapeCsvFields;, +        public Iterator<CharSequence> valueIterator(CharSequence name) {, +            Iterator<CharSequence> itr = super.valueIterator(name);, +            if (!itr.hasNext()) {, +                return itr;, +            }, +            Iterator<CharSequence> unescapedItr = unescapeCsvFields(itr.next()).iterator();, +            if (itr.hasNext()) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return unescapedItr;, +        }, +, +        @Override, +            return unescapeCsvFields(values.get(0));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import static io.netty.util.internal.StringUtil.unescapeCsvFields;, +        public Iterator<CharSequence> valueIterator(CharSequence name) {, +            Iterator<CharSequence> itr = super.valueIterator(name);, +            if (!itr.hasNext()) {, +                return itr;, +            }, +            Iterator<CharSequence> unescapedItr = unescapeCsvFields(itr.next()).iterator();, +            if (itr.hasNext()) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return unescapedItr;, +        }, +, +        @Override, +            return unescapeCsvFields(values.get(0));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +    public Iterator<String> valueStringIterator(CharSequence name) {, +        final Iterator<CharSequence> itr = valueCharSequenceIterator(name);, +        return new Iterator<String>() {, +            @Override, +            public boolean hasNext() {, +                return itr.hasNext();, +            }, +, +            @Override, +            public String next() {, +                return itr.next().toString();, +            }, +, +            @Override, +            public void remove() {, +                itr.remove();, +            }, +        };, +    }, +, +    @Override, +    public Iterator<CharSequence> valueCharSequenceIterator(CharSequence name) {, +        return headers.valueIterator(name);, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import static io.netty.util.internal.StringUtil.unescapeCsvFields;, +        public Iterator<CharSequence> valueIterator(CharSequence name) {, +            Iterator<CharSequence> itr = super.valueIterator(name);, +            if (!itr.hasNext()) {, +                return itr;, +            }, +            Iterator<CharSequence> unescapedItr = unescapeCsvFields(itr.next()).iterator();, +            if (itr.hasNext()) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return unescapedItr;, +        }, +, +        @Override, +            return unescapeCsvFields(values.get(0));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +    public Iterator<String> valueStringIterator(CharSequence name) {, +        final Iterator<CharSequence> itr = valueCharSequenceIterator(name);, +        return new Iterator<String>() {, +            @Override, +            public boolean hasNext() {, +                return itr.hasNext();, +            }, +, +            @Override, +            public String next() {, +                return itr.next().toString();, +            }, +, +            @Override, +            public void remove() {, +                itr.remove();, +            }, +        };, +    }, +, +    @Override, +    public Iterator<CharSequence> valueCharSequenceIterator(CharSequence name) {, +        return headers.valueIterator(name);, +    }]