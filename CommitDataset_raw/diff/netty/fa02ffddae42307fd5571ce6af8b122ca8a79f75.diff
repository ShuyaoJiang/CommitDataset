[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.concurrent.AbstractExecutorService;, +import java.util.concurrent.RunnableFuture;, + * Abstract base class for {@link EventExecutor} implementations., +public abstract class AbstractEventExecutor extends AbstractExecutorService implements EventExecutor {, +    @Override, +    public EventExecutor next() {, +        return this;, +    public <V> Promise<V> newPromise() {, +        return new DefaultPromise<V>(this);, +    }, +, +    @Override, +    public <V> Future<V> newSucceededFuture(V result) {, +        return new SucceededFuture<V>(this, result);, +    }, +, +    @Override, +    public <V> Future<V> newFailedFuture(Throwable cause) {, +        return new FailedFuture<V>(this, cause);, +    }, +, +    @Override, +    public Future<?> submit(Runnable task) {, +        return (Future<?>) super.submit(task);, +    }, +, +    @Override, +    public <T> Future<T> submit(Runnable task, T result) {, +        return (Future<T>) super.submit(task, result);, +    }, +, +    @Override, +    public <T> Future<T> submit(Callable<T> task) {, +        return (Future<T>) super.submit(task);, +    }, +, +    @Override, +    protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {, +        return new PromiseTask<T>(this, runnable, value);, +    }, +, +    @Override, +    protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {, +        return new PromiseTask<T>(this, callable);, +    }, +, +    @Override, +    public ScheduledFuture<?> schedule(Runnable command, long delay,, +                                       TimeUnit unit) {, +        throw new UnsupportedOperationException();, +        throw new UnsupportedOperationException();, +        throw new UnsupportedOperationException();, +        throw new UnsupportedOperationException();, +, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.concurrent.AbstractExecutorService;, +import java.util.concurrent.RunnableFuture;, + * Abstract base class for {@link EventExecutor} implementations., +public abstract class AbstractEventExecutor extends AbstractExecutorService implements EventExecutor {, +    @Override, +    public EventExecutor next() {, +        return this;, +    public <V> Promise<V> newPromise() {, +        return new DefaultPromise<V>(this);, +    }, +, +    @Override, +    public <V> Future<V> newSucceededFuture(V result) {, +        return new SucceededFuture<V>(this, result);, +    }, +, +    @Override, +    public <V> Future<V> newFailedFuture(Throwable cause) {, +        return new FailedFuture<V>(this, cause);, +    }, +, +    @Override, +    public Future<?> submit(Runnable task) {, +        return (Future<?>) super.submit(task);, +    }, +, +    @Override, +    public <T> Future<T> submit(Runnable task, T result) {, +        return (Future<T>) super.submit(task, result);, +    }, +, +    @Override, +    public <T> Future<T> submit(Callable<T> task) {, +        return (Future<T>) super.submit(task);, +    }, +, +    @Override, +    protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {, +        return new PromiseTask<T>(this, runnable, value);, +    }, +, +    @Override, +    protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {, +        return new PromiseTask<T>(this, callable);]