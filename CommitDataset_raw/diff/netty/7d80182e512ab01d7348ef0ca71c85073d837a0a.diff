[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    flush0(ctx, ctx.newPromise(), true);, +        flush0(ctx, promise, false);, +    }, +, +    private void flush0(ChannelHandlerContext ctx, ChannelPromise promise, boolean internal) throws Exception {, +        if (!internal && startTls && !sentFirstMessage) {, +                flush0(ctx, ctx.newPromise(), true);, +        flush0(ctx, closeNotifyFuture, true);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    flush0(ctx, ctx.newPromise(), true);, +        flush0(ctx, promise, false);, +    }, +, +    private void flush0(ChannelHandlerContext ctx, ChannelPromise promise, boolean internal) throws Exception {, +        if (!internal && startTls && !sentFirstMessage) {, +                flush0(ctx, ctx.newPromise(), true);, +        flush0(ctx, closeNotifyFuture, true);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketStartTlsTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.DefaultEventExecutorGroup;, +import io.netty.channel.EventExecutorGroup;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.handler.codec.LineBasedFrameDecoder;, +import io.netty.handler.codec.string.StringDecoder;, +import io.netty.handler.codec.string.StringEncoder;, +import io.netty.handler.logging.ByteLoggingHandler;, +import io.netty.handler.logging.LogLevel;, +import io.netty.handler.ssl.SslHandler;, +import io.netty.testsuite.util.BogusSslContextFactory;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import javax.net.ssl.SSLEngine;, +import java.io.IOException;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.junit.Assert.*;, +, +public class SocketStartTlsTest extends AbstractSocketTest {, +, +    private static final LogLevel LOG_LEVEL = LogLevel.TRACE;, +    private static EventExecutorGroup executor;, +, +    @BeforeClass, +    public static void createExecutor() {, +        executor = new DefaultEventExecutorGroup(2);, +    }, +, +    @AfterClass, +    public static void shutdownExecutor() {, +        executor.shutdown();, +    }, +, +    @Test(timeout = 30000), +    public void testStartTls() throws Throwable {, +        run();, +    }, +, +    public void testStartTls(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        final EventExecutorGroup executor = SocketStartTlsTest.executor;, +        final SSLEngine sse = BogusSslContextFactory.getServerContext().createSSLEngine();, +        final SSLEngine cse = BogusSslContextFactory.getClientContext().createSSLEngine();, +, +        final StartTlsServerHandler sh = new StartTlsServerHandler(sse);, +        final StartTlsClientHandler ch = new StartTlsClientHandler(cse);, +, +        sb.childHandler(new ChannelInitializer<SocketChannel>() {, +            @Override, +            public void initChannel(SocketChannel sch) throws Exception {, +                ChannelPipeline p = sch.pipeline();, +                p.addLast("logger", new ByteLoggingHandler(LOG_LEVEL));, +                p.addLast(new LineBasedFrameDecoder(64), new StringDecoder(), new StringEncoder());, +                p.addLast(executor, sh);, +            }]