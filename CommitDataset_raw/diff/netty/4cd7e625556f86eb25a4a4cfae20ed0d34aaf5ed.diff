[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private ChannelOutboundBuffer outboundBuffer = ChannelOutboundBuffer.newInstance(this);, +                ChannelOutboundBuffer outboundBuffer = AbstractChannel.this.outboundBuffer;, +                outboundBuffer.recycle();, +                AbstractChannel.this.outboundBuffer = null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private ChannelOutboundBuffer outboundBuffer = ChannelOutboundBuffer.newInstance(this);, +                ChannelOutboundBuffer outboundBuffer = AbstractChannel.this.outboundBuffer;, +                outboundBuffer.recycle();, +                AbstractChannel.this.outboundBuffer = null;, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +import io.netty.util.Recycler;, +import io.netty.util.Recycler.Handle;, +    private static final Recycler<ChannelOutboundBuffer> RECYCLER = new Recycler<ChannelOutboundBuffer>() {, +        @Override, +        protected ChannelOutboundBuffer newObject(Handle handle) {, +            return new ChannelOutboundBuffer(handle);, +        }, +    };, +, +    static ChannelOutboundBuffer newInstance(AbstractChannel channel) {, +        ChannelOutboundBuffer buffer = RECYCLER.get();, +        buffer.channel = channel;, +        return buffer;, +    }, +, +    private final Handle handle;, +    private AbstractChannel channel;, +    private ChannelOutboundBuffer(Handle handle) {, +        this(handle, MIN_INITIAL_CAPACITY << 1);, +    private ChannelOutboundBuffer(Handle handle, int initialCapacity) {, +        this.handle = handle;, +    void recycle() {, +        if (head != tail) {, +            throw new IllegalStateException();, +        }, +        if (unflushedCount != 0) {, +            throw new IllegalStateException();, +        }, +        if (pendingOutboundBytes != 0) {, +            throw new IllegalStateException();, +        }, +, +        RECYCLER.recycle(this, handle);, +    }, +, +        flushedTotals[head] = 0;, +        flushedTotals[head] = 0;, +                unflushed[i] = null;, +                unflushedPromises[i] = null;, +                unflushedTotals[i] = 0;, +            this.unflushedCount = 0;]