[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                final Result<?> decodedVariableHeader = decodeVariableHeader(buffer, mqttFixedHeader);, +                variableHeader = decodedVariableHeader.value;, +      return MqttMessageFactory.newInvalidMessage(mqttFixedHeader, variableHeader, cause);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                final Result<?> decodedVariableHeader = decodeVariableHeader(buffer, mqttFixedHeader);, +                variableHeader = decodedVariableHeader.value;, +      return MqttMessageFactory.newInvalidMessage(mqttFixedHeader, variableHeader, cause);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageFactory.java, +    public static MqttMessage newInvalidMessage(MqttFixedHeader mqttFixedHeader, Object variableHeader,, +                                                Throwable cause) {, +        return new MqttMessage(mqttFixedHeader, variableHeader, null, DecoderResult.failure(cause));, +    }, +, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +                final Result<?> decodedVariableHeader = decodeVariableHeader(buffer, mqttFixedHeader);, +                variableHeader = decodedVariableHeader.value;, +      return MqttMessageFactory.newInvalidMessage(mqttFixedHeader, variableHeader, cause);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageFactory.java, +    public static MqttMessage newInvalidMessage(MqttFixedHeader mqttFixedHeader, Object variableHeader,, +                                                Throwable cause) {, +        return new MqttMessage(mqttFixedHeader, variableHeader, null, DecoderResult.failure(cause));, +    }, +, +++ b/codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java, +    /**, +     * MqttDecoder with an unrealistic max payload size of 1 byte., +     */, +    private final MqttDecoder mqttDecoderLimitedMessageSize = new MqttDecoder(1);, +, +    @Test, +    public void testConnectMessageForMqtt31TooLarge() throws Exception {, +        final MqttConnectMessage message = createConnectMessage(MqttVersion.MQTT_3_1);, +        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);, +, +        try {, +            final List<Object> out = new LinkedList<Object>();, +            mqttDecoderLimitedMessageSize.decode(ctx, byteBuf, out);, +, +            assertEquals("Expected one object but got " + out.size(), 1, out.size());, +, +            final MqttMessage decodedMessage = (MqttMessage) out.get(0);, +, +            validateFixedHeaders(message.fixedHeader(), decodedMessage.fixedHeader());, +            validateConnectVariableHeader(message.variableHeader(),, +                    (MqttConnectVariableHeader) decodedMessage.variableHeader());, +            validateDecoderExceptionTooLargeMessage(decodedMessage);, +        } finally {, +            byteBuf.release();, +        }, +    }, +, +    @Test, +    public void testConnectMessageForMqtt311TooLarge() throws Exception {, +        final MqttConnectMessage message = createConnectMessage(MqttVersion.MQTT_3_1_1);, +        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);, +, +        try {, +            final List<Object> out = new LinkedList<Object>();, +            mqttDecoderLimitedMessageSize.decode(ctx, byteBuf, out);, +, +            assertEquals("Expected one object but got " + out.size(), 1, out.size());, +, +            final MqttMessage decodedMessage = (MqttMessage) out.get(0);, +, +            validateFixedHeaders(message.fixedHeader(), decodedMessage.fixedHeader());, +            validateConnectVariableHeader(message.variableHeader(),, +                    (MqttConnectVariableHeader) decodedMessage.variableHeader());, +            validateDecoderExceptionTooLargeMessage(decodedMessage);, +        } finally {, +            byteBuf.release();, +        }, +    }, +, +    @Test, +    public void testConnAckMessageTooLarge() throws Exception {, +        final MqttConnAckMessage message = createConnAckMessage();, +        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);, +, +        try {, +            final List<Object> out = new LinkedList<Object>();, +            mqttDecoderLimitedMessageSize.decode(ctx, byteBuf, out);, +, +            assertEquals("Expected one object but got " + out.size(), 1, out.size());, +, +            final MqttMessage decodedMessage = (MqttMessage) out.get(0);, +            validateFixedHeaders(message.fixedHeader(), decodedMessage.fixedHeader());, +            validateDecoderExceptionTooLargeMessage(decodedMessage);, +        } finally {, +            byteBuf.release();, +        }, +    }, +, +    @Test, +    public void testPublishMessageTooLarge() throws Exception {, +        final MqttPublishMessage message = createPublishMessage();, +        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);, +, +        try {, +            final List<Object> out = new LinkedList<Object>();]