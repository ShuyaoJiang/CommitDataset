[+++ b/common/src/main/java/io/netty/util/UniqueName.java, +/**, + * Defines a name that must be unique in the map that is provided during construction., + */, +    /**, +     * Constructs a new {@link UniqueName}, +     *, +     * @param map the map of names to compare with, +     * @param name the name of this {@link UniqueName}, +     * @param args the arguments to process, +     */, +            throw new IllegalArgumentException(String.format("'%s' is already in use", name));, +     * Validates the given arguments.  This method does not do anything on its own, but must be, +     * overridden by its subclasses., +     *, +    /**, +     * Returns this {@link UniqueName}'s name, +     *, +     * @return the name, +     */, +    /**, +     * Returns this {@link UniqueName}'s ID, +     *, +     * @return the id, +     */, +    public int compareTo(UniqueName other) {, +        if (this == other) {, +        int returnCode = name.compareTo(other.name);, +        if (returnCode != 0) {, +            return returnCode;, +        if (id < other.id) {, +        } else if (id > other.id) {, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +/**, + * Defines a name that must be unique in the map that is provided during construction., + */, +    /**, +     * Constructs a new {@link UniqueName}, +     *, +     * @param map the map of names to compare with, +     * @param name the name of this {@link UniqueName}, +     * @param args the arguments to process, +     */, +            throw new IllegalArgumentException(String.format("'%s' is already in use", name));, +     * Validates the given arguments.  This method does not do anything on its own, but must be, +     * overridden by its subclasses., +     *, +    /**, +     * Returns this {@link UniqueName}'s name, +     *, +     * @return the name, +     */, +    /**, +     * Returns this {@link UniqueName}'s ID, +     *, +     * @return the id, +     */, +    public int compareTo(UniqueName other) {, +        if (this == other) {, +        int returnCode = name.compareTo(other.name);, +        if (returnCode != 0) {, +            return returnCode;, +        if (id < other.id) {, +        } else if (id > other.id) {, +++ b/common/src/test/java/io/netty/util/UniqueNameTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util;, +, +import java.util.ArrayList;, +import java.util.concurrent.ConcurrentHashMap;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.assertNotSame;, +import org.junit.Before;, +import org.junit.Test;, +, +public class UniqueNameTest {, +, +    /**, +     * A {@link ConcurrentHashMap} of registered names., +     * This is set up before each test, +     */, +    private ConcurrentHashMap<String, Boolean> names;, +    , +    /**, +     * Registers a {@link UniqueName}, +     *]