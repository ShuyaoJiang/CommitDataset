[+++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.lang.reflect.Array;, +    private Collection<V> valueCollection;, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +        for (V value1 : values) {, +            if (value1 != null && value1.equals(v)) {, +    public V[] values(Class<V> clazz) {, +        @SuppressWarnings("unchecked"), +        V[] outValues = (V[]) Array.newInstance(clazz, size());, +        int targetIx = 0;, +        for (V value : values) {, +            if (value != null) {, +                outValues[targetIx++] = value;, +            }, +        }, +        return outValues;, +    }, +, +    @Override, +        Collection<V> valueCollection = this.valueCollection;, +        if (valueCollection == null) {, +            this.valueCollection = valueCollection = new AbstractCollection<V>() {, +        return valueCollection;, +    }, +, +        for (int key : keys) {, +            hash ^= key;, +            if (i < bucket && (bucket <= nextFree || nextFree <= i) ||, +                bucket <= nextFree && nextFree <= i) {, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +                int index = hashIndex(oldKey);, +++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.lang.reflect.Array;, +    private Collection<V> valueCollection;, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +        for (V value1 : values) {, +            if (value1 != null && value1.equals(v)) {, +    public V[] values(Class<V> clazz) {, +        @SuppressWarnings("unchecked"), +        V[] outValues = (V[]) Array.newInstance(clazz, size());, +        int targetIx = 0;, +        for (V value : values) {, +            if (value != null) {, +                outValues[targetIx++] = value;, +            }, +        }, +        return outValues;, +    }, +, +    @Override, +        Collection<V> valueCollection = this.valueCollection;, +        if (valueCollection == null) {, +            this.valueCollection = valueCollection = new AbstractCollection<V>() {, +        return valueCollection;, +    }, +, +        for (int key : keys) {, +            hash ^= key;, +            if (i < bucket && (bucket <= nextFree || nextFree <= i) ||, +                bucket <= nextFree && nextFree <= i) {, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +                int index = hashIndex(oldKey);, +++ b/common/src/main/java/io/netty/util/collection/IntObjectMap.java, +    V[] values(Class<V> clazz);, +, +    /**, +     * Gets the values contatins in this map as a {@link Collection}., +     */, +++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.lang.reflect.Array;, +    private Collection<V> valueCollection;, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +        for (V value1 : values) {, +            if (value1 != null && value1.equals(v)) {, +    public V[] values(Class<V> clazz) {, +        @SuppressWarnings("unchecked"), +        V[] outValues = (V[]) Array.newInstance(clazz, size());, +        int targetIx = 0;, +        for (V value : values) {, +            if (value != null) {, +                outValues[targetIx++] = value;, +            }, +        }, +        return outValues;, +    }, +, +    @Override, +        Collection<V> valueCollection = this.valueCollection;, +        if (valueCollection == null) {, +            this.valueCollection = valueCollection = new AbstractCollection<V>() {, +        return valueCollection;, +    }, +, +        for (int key : keys) {, +            hash ^= key;, +            if (i < bucket && (bucket <= nextFree || nextFree <= i) ||, +                bucket <= nextFree && nextFree <= i) {, +        @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" }), +                int index = hashIndex(oldKey);, +++ b/common/src/main/java/io/netty/util/collection/IntObjectMap.java]