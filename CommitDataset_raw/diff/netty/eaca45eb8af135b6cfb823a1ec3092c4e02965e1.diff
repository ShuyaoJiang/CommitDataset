[+++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDateFormat.java, +        super("E, d-MMM-y HH:mm:ss z");, +++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDateFormat.java, +        super("E, d-MMM-y HH:mm:ss z");, +++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java, +import java.util.Collections;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +    private final static Pattern PATTERN =, +        Pattern.compile("(?:\\s|[;,])*\\$*([^;=]+)(?:=(?:[\"']((?:\\\\.|[^\"])*)[\"']|([^;,]*)))?\\s*(?:[;,]+|$)");, +        super();, +        Matcher m = PATTERN.matcher(header);, +        List<String> names = new ArrayList<String>(8);, +        List<String> values = new ArrayList<String>(8);, +        int pos = 0;, +        while (m.find(pos)) {, +            pos = m.end();, +            // Extract name and value pair from the match., +            String name = m.group(1);, +            String value = m.group(3);, +            if (value == null) {, +                value = decodeValue(m.group(2));, +            }, +, +            // An exceptional case:, +            // 'Expires' attribute can contain a comma without surrounded with quotes., +            if (name.equalsIgnoreCase(CookieHeaderNames.EXPIRES) &&, +                value.length() <= 3) {, +                // value contains comma, but not surrounded with quotes., +                if (m.find(pos)) {, +                    value = value + ", " + m.group(1);, +                    pos = m.end();, +                } else {, +                    continue;, +                }, +            }, +, +            names.add(name);, +            values.add(value);, +        }, +, +        if (names.isEmpty()) {, +            return Collections.emptySet();, +        }, +, +        int i;, +, +        // $Version is the only attribute that can appear before the actual, +        // cookie name-value pair., +        if (names.get(0).equalsIgnoreCase(CookieHeaderNames.VERSION)) {, +                version = Integer.parseInt(values.get(0));, +            i = 1;, +        } else {, +            i = 0;, +        if (names.size() <= i) {, +            // There's a version attribute, but nothing more., +            return Collections.emptySet();, +        }, +, +        Set<Cookie> cookies = new TreeSet<Cookie>();, +        for (; i < names.size(); i ++) {, +            String name = names.get(i);, +            String value = values.get(i);, +            if (value == null) {, +                value = "";, +            }, +, +            Cookie c = new DefaultCookie(name, value);, +            cookies.add(c);, +, +, +            for (int j = i + 1; j < names.size(); j++, i++) {, +                name = names.get(j);, +                value = values.get(j);, +, +                if (CookieHeaderNames.DISCARD.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.SECURE.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.COMMENT.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.COMMENTURL.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.DOMAIN.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.PATH.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.EXPIRES.equalsIgnoreCase(name)) {, +                            new CookieDateFormat().parse(value).getTime() -, +                            System.currentTimeMillis();, +                        // Ignore., +                } else if (CookieHeaderNames.MAX_AGE.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.VERSION.equalsIgnoreCase(name)) {, +                } else if (CookieHeaderNames.PORT.equalsIgnoreCase(name)) {, +, +            c.setVersion(version);, +            c.setMaxAge(maxAge);, +            c.setPath(path);, +            c.setDomain(domain);, +            c.setSecure(secure);, +                c.setComment(comment);, +                c.setCommentUrl(commentURL);, +                c.setPorts(ports);, +                c.setDiscard(discard);, +, +    private String decodeValue(String value) {]