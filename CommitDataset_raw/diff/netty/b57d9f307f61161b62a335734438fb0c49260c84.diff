[+++ b/.gitignore, +.DS_Store, +, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.buffer.Unpooled;, +            ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.buffer.Unpooled;, +            ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +        channel.writeAndFlush(request).addListener(new ChannelFutureListener() {, +        return channel.writeAndFlush(frame, promise);, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.buffer.Unpooled;, +            ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +        channel.writeAndFlush(request).addListener(new ChannelFutureListener() {, +        return channel.writeAndFlush(frame, promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketProtocolHandler.java, +            ctx.channel().writeAndFlush(new PongWebSocketFrame(frame.content()));, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.buffer.Unpooled;, +            ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +        channel.writeAndFlush(request).addListener(new ChannelFutureListener() {, +        return channel.writeAndFlush(frame, promise);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketProtocolHandler.java, +            ctx.channel().writeAndFlush(new PongWebSocketFrame(frame.content()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker.java, +        channel.writeAndFlush(response).addListener(new ChannelFutureListener() {, +        return channel.writeAndFlush(frame, promise).addListener(ChannelFutureListener.CLOSE);, +++ b/.gitignore, +.DS_Store, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +            if (!buf.isReadable()) {, +                continue;, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import static io.netty.handler.codec.http.HttpConstants.*;, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +import io.netty.buffer.Unpooled;]