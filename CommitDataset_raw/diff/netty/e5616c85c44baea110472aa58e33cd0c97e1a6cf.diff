[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerHandler.java, +++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerHandler.java, +++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java, +++ b/transport-udt/src/test/java/io/netty/test/udt/util/EchoMessageHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerHandler.java, +++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java, +++ b/transport-udt/src/test/java/io/netty/test/udt/util/EchoMessageHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java, +import java.lang.reflect.Method;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +    private static final ConcurrentMap<Class<?>, Class<?>> messageTypeMap =, +            new ConcurrentHashMap<Class<?>, Class<?>>();, +    private final Class<?> acceptedMsgType = findMessageType();, +, +    private Class<?> findMessageType() {, +        Class<?> thisClass = getClass();, +        Class<?> messageType = messageTypeMap.get(thisClass);, +        if (messageType == null) {, +            for (Method m: getClass().getDeclaredMethods()) {, +                if (!"messageReceived".equals(m.getName())) {, +                    continue;, +                }, +                if (m.isSynthetic() || m.isBridge()) {, +                    continue;, +                }, +                Class<?>[] p = m.getParameterTypes();, +                if (p.length != 2) {, +                    continue;, +                }, +                if (p[0] != ChannelHandlerContext.class) {, +                    continue;, +                }, +, +                messageType = p[1];, +                break;, +            }, +, +            if (messageType == null) {, +                throw new IllegalStateException(, +                        "cannot determine the inbound message type of " + thisClass.getSimpleName());, +            }, +, +            messageTypeMap.put(thisClass, messageType);, +        }, +, +        return messageType;, +        return acceptedMsgType.isInstance(msg);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandshakeHandler.java, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java, +    private final Bootstrap b = new Bootstrap();, +++ b/example/src/main/java/io/netty/example/socksproxy/SocksServerHandler.java, +++ b/transport-sctp/src/main/java/io/netty/handler/codec/sctp/SctpInboundByteStreamHandler.java, +++ b/transport-udt/src/test/java/io/netty/test/udt/util/EchoMessageHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundMessageHandlerAdapter.java, +import java.lang.reflect.Method;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +    private static final ConcurrentMap<Class<?>, Class<?>> messageTypeMap =, +            new ConcurrentHashMap<Class<?>, Class<?>>();, +    private final Class<?> acceptedMsgType = findMessageType();, +, +    private Class<?> findMessageType() {, +        Class<?> thisClass = getClass();, +        Class<?> messageType = messageTypeMap.get(thisClass);, +        if (messageType == null) {, +            for (Method m: getClass().getDeclaredMethods()) {, +                if (!"messageReceived".equals(m.getName())) {, +                    continue;, +                }, +                if (m.isSynthetic() || m.isBridge()) {, +                    continue;]