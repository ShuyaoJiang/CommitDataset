[+++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +        ChannelPromise unvoid = promise.unvoid();, +        unvoid.addListener(new ChannelFutureListener() {, +        ctx.write(msg, unvoid);, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +        ChannelPromise unvoid = promise.unvoid();, +        unvoid.addListener(new ChannelFutureListener() {, +        ctx.write(msg, unvoid);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        if (timeoutNanos > 0) {, +            promise = promise.unvoid();, +        }, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +        ChannelPromise unvoid = promise.unvoid();, +        unvoid.addListener(new ChannelFutureListener() {, +        ctx.write(msg, unvoid);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        if (timeoutNanos > 0) {, +            promise = promise.unvoid();, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelFuture.java, +, +    /**, +     * Returns {@code true} if this {@link ChannelFuture} is a void future and so not allow to call any of the, +     * following methods:, +     * <ul>, +     *     <li>{@link #addListener(GenericFutureListener)}</li>, +     *     <li>{@link #addListeners(GenericFutureListener[])}</li>, +     *     <li>{@link #await()}</li>, +     *     <li>{@link #await(long, TimeUnit)} ()}</li>, +     *     <li>{@link #await(long)} ()}</li>, +     *     <li>{@link #awaitUninterruptibly()}</li>, +     *     <li>{@link #sync()}</li>, +     *     <li>{@link #syncUninterruptibly()}</li>, +     * </ul>, +     */, +    boolean isVoid();, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +        ChannelPromise unvoid = promise.unvoid();, +        unvoid.addListener(new ChannelFutureListener() {, +        ctx.write(msg, unvoid);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        if (timeoutNanos > 0) {, +            promise = promise.unvoid();, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelFuture.java, +, +    /**, +     * Returns {@code true} if this {@link ChannelFuture} is a void future and so not allow to call any of the, +     * following methods:, +     * <ul>, +     *     <li>{@link #addListener(GenericFutureListener)}</li>, +     *     <li>{@link #addListeners(GenericFutureListener[])}</li>, +     *     <li>{@link #await()}</li>, +     *     <li>{@link #await(long, TimeUnit)} ()}</li>, +     *     <li>{@link #await(long)} ()}</li>, +     *     <li>{@link #awaitUninterruptibly()}</li>, +     *     <li>{@link #sync()}</li>, +     *     <li>{@link #syncUninterruptibly()}</li>, +     * </ul>, +     */, +    boolean isVoid();, +++ b/transport/src/main/java/io/netty/channel/ChannelProgressivePromise.java, +, +    @Override, +    ChannelProgressivePromise unvoid();, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +        ChannelPromise unvoid = promise.unvoid();, +        unvoid.addListener(new ChannelFutureListener() {, +        ctx.write(msg, unvoid);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        if (timeoutNanos > 0) {, +            promise = promise.unvoid();, +        }, +++ b/transport/src/main/java/io/netty/channel/ChannelFuture.java, +, +    /**, +     * Returns {@code true} if this {@link ChannelFuture} is a void future and so not allow to call any of the, +     * following methods:, +     * <ul>, +     *     <li>{@link #addListener(GenericFutureListener)}</li>, +     *     <li>{@link #addListeners(GenericFutureListener[])}</li>, +     *     <li>{@link #await()}</li>, +     *     <li>{@link #await(long, TimeUnit)} ()}</li>, +     *     <li>{@link #await(long)} ()}</li>, +     *     <li>{@link #awaitUninterruptibly()}</li>, +     *     <li>{@link #sync()}</li>, +     *     <li>{@link #syncUninterruptibly()}</li>, +     * </ul>, +     */, +    boolean isVoid();, +++ b/transport/src/main/java/io/netty/channel/ChannelProgressivePromise.java, +, +    @Override, +    ChannelProgressivePromise unvoid();, +++ b/transport/src/main/java/io/netty/channel/ChannelPromise.java, +, +    /**, +     * Returns a new {@link ChannelPromise} if {@link #isVoid()} returns {@code true} otherwise itself., +     */]