[+++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +        // Only log if the given promise is not of type VoidChannelPromise as tryFailure(...) is expected to return, +        // false., +        PromiseNotificationUtil.tryFailure(promise, cause, promise instanceof VoidChannelPromise ? null : logger);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +        // Only log if the given promise is not of type VoidChannelPromise as tryFailure(...) is expected to return, +        // false., +        PromiseNotificationUtil.tryFailure(promise, cause, promise instanceof VoidChannelPromise ? null : logger);, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        // Only log if the given promise is not of type VoidChannelPromise as trySuccess(...) is expected to return, +        // false., +        PromiseNotificationUtil.trySuccess(promise, null, promise instanceof VoidChannelPromise ? null : logger);, +        // Only log if the given promise is not of type VoidChannelPromise as tryFailure(...) is expected to return, +        // false., +        PromiseNotificationUtil.tryFailure(promise, cause, promise instanceof VoidChannelPromise ? null : logger);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +        // Only log if the given promise is not of type VoidChannelPromise as tryFailure(...) is expected to return, +        // false., +        PromiseNotificationUtil.tryFailure(promise, cause, promise instanceof VoidChannelPromise ? null : logger);, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +        // Only log if the given promise is not of type VoidChannelPromise as trySuccess(...) is expected to return, +        // false., +        PromiseNotificationUtil.trySuccess(promise, null, promise instanceof VoidChannelPromise ? null : logger);, +        // Only log if the given promise is not of type VoidChannelPromise as tryFailure(...) is expected to return, +        // false., +        PromiseNotificationUtil.tryFailure(promise, cause, promise instanceof VoidChannelPromise ? null : logger);, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +    @Test(timeout = 3000), +    public void testVoidPromiseNotify() throws Throwable {, +        ChannelPipeline pipeline1 = new LocalChannel().pipeline();, +, +        EventLoopGroup defaultGroup = new DefaultEventLoopGroup(1);, +        EventLoop eventLoop1 = defaultGroup.next();, +        final Promise<Throwable> promise = eventLoop1.newPromise();, +        final Exception exception = new IllegalArgumentException();, +        try {, +            eventLoop1.register(pipeline1.channel()).syncUninterruptibly();, +            pipeline1.addLast(new ChannelDuplexHandler() {, +                @Override, +                public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {, +                    throw exception;, +                }, +, +                @Override, +                public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +                    promise.setSuccess(cause);, +                }, +            });, +            pipeline1.write("test", pipeline1.voidPromise());, +            assertSame(exception, promise.syncUninterruptibly().getNow());, +        } finally {, +            pipeline1.channel().close().syncUninterruptibly();, +            defaultGroup.shutdownGracefully();, +        }, +    }, +]