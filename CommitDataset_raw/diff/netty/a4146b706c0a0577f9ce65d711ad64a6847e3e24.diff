[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java, +        maxHeaderListSize = MAX_HEADER_LIST_SIZE;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackEncoder.java, +        maxHeaderListSize = MAX_HEADER_LIST_SIZE;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/HpackEncoderTest.java, +, +    /**, +     * The encoder should not impose an arbitrary limit on the header size if, +     * the server has not specified any limit., +     * @throws Http2Exception, +     */, +    @Test, +    public void testWillEncode16MBHeaderByDefault() throws Http2Exception {, +        ByteBuf buf = Unpooled.buffer();, +        String bigHeaderName = "x-big-header";, +        int bigHeaderSize = 1024 * 1024 * 16;, +        String bigHeaderVal = new String(new char[bigHeaderSize]).replace('\0', 'X');, +        Http2Headers headersIn = new DefaultHttp2Headers().add(, +                "x-big-header", bigHeaderVal);, +        Http2Headers headersOut = new DefaultHttp2Headers();, +, +        try {, +            hpackEncoder.encodeHeaders(0, buf, headersIn, Http2HeadersEncoder.NEVER_SENSITIVE);, +            hpackDecoder.setMaxHeaderListSize(bigHeaderSize + 1024, bigHeaderSize + 1024);, +            hpackDecoder.decode(0, buf, headersOut, false);, +        } finally {, +            buf.release();, +        }, +        assertEquals(headersOut.get(bigHeaderName).toString(), bigHeaderVal);, +    }, +, +    @Test(expected = Http2Exception.class), +    public void testSetMaxHeaderListSizeEnforcedAfterSet() throws Http2Exception {, +        ByteBuf buf = Unpooled.buffer();, +        Http2Headers headers = new DefaultHttp2Headers().add(, +                "x-big-header",, +                new String(new char[1024 * 16]).replace('\0', 'X'), +        );, +, +        hpackEncoder.setMaxHeaderListSize(1000);, +, +        try {, +            hpackEncoder.encodeHeaders(0, buf, headers, Http2HeadersEncoder.NEVER_SENSITIVE);, +        } finally {, +            buf.release();, +        }, +    }]