[+++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +, +    /**, +     * Returns the {@link ChannelGroupFuture} which will be notified when all {@link Channel}s that are part of this, +     * {@link ChannelGroup}, at the time of calling, are closed., +     */, +    ChannelGroupFuture newCloseFuture();, +, +    /**, +     * Returns the {@link ChannelGroupFuture} which will be notified when all {@link Channel}s that are part of this, +     * {@link ChannelGroup}, at the time of calling, are closed., +     */, +    ChannelGroupFuture newCloseFuture(ChannelMatcher matcher);, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +, +    /**, +     * Returns the {@link ChannelGroupFuture} which will be notified when all {@link Channel}s that are part of this, +     * {@link ChannelGroup}, at the time of calling, are closed., +     */, +    ChannelGroupFuture newCloseFuture();, +, +    /**, +     * Returns the {@link ChannelGroupFuture} which will be notified when all {@link Channel}s that are part of this, +     * {@link ChannelGroup}, at the time of calling, are closed., +     */, +    ChannelGroupFuture newCloseFuture(ChannelMatcher matcher);, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +    public ChannelGroupFuture newCloseFuture() {, +        return newCloseFuture(ChannelMatchers.all());, +    }, +, +    @Override, +    public ChannelGroupFuture newCloseFuture(ChannelMatcher matcher) {, +        Map<Channel, ChannelFuture> futures =, +                new LinkedHashMap<Channel, ChannelFuture>(size());, +, +        for (Channel c: serverChannels.values()) {, +            if (matcher.matches(c)) {, +                futures.put(c, c.closeFuture());, +            }, +        }, +        for (Channel c: nonServerChannels.values()) {, +            if (matcher.matches(c)) {, +                futures.put(c, c.closeFuture());, +            }, +        }, +, +        return new DefaultChannelGroupFuture(this, futures, executor);, +    }, +, +    @Override]