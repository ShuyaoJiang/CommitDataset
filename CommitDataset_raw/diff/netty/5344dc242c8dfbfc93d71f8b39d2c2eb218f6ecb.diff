[+++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, +public class FixedLengthFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, +public class FixedLengthFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, +public class LengthFieldBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, +public class FixedLengthFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, +public class LengthFieldBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +                int oldInputLength = in.readableBytes();, +                O o = decode(ctx, in);, +                if (o == null) {, +                    if (oldInputLength == in.readableBytes()) {, +                        break;, +                    } else {, +                        continue;, +                    }, +                } else {, +                    if (oldInputLength == in.readableBytes()) {, +                        throw new IllegalStateException(, +                                "decode() did not read anything but decoded a message.");, +                    }, +                }, +, +                if (unfoldAndAdd(ctx, ctx.nextIn(), o)) {, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, +public class FixedLengthFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, +public class LengthFieldBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +                int oldInputLength = in.readableBytes();, +                O o = decode(ctx, in);, +                if (o == null) {, +                    if (oldInputLength == in.readableBytes()) {, +                        break;, +                    } else {, +                        continue;, +                    }, +                } else {, +                    if (oldInputLength == in.readableBytes()) {, +                        throw new IllegalStateException(, +                                "decode() did not read anything but decoded a message.");, +                    }, +                }, +, +                if (unfoldAndAdd(ctx, ctx.nextIn(), o)) {, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +        if (p instanceof CodecEmbedderException) {, +            throw (CodecEmbedderException) p;, +        }, +            throw new CodecEmbedderException((Throwable) p);, +        public void inboundBufferUpdated(ChannelInboundHandlerContext<Object> ctx) throws Exception {, +            // NOOP, +        }, +, +        @Override, +++ b/codec/src/main/java/io/netty/handler/codec/DelimiterBasedFrameDecoder.java, +public class DelimiterBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer buffer) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/FixedLengthFrameDecoder.java, +public class FixedLengthFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldBasedFrameDecoder.java, +public class LengthFieldBasedFrameDecoder extends StreamToMessageDecoder<Object> {, +    public Object decode(ChannelInboundHandlerContext<Byte> ctx, ChannelBuffer in) throws Exception {, +++ b/codec/src/main/java/io/netty/handler/codec/StreamToMessageDecoder.java, +                int oldInputLength = in.readableBytes();, +                O o = decode(ctx, in);, +                if (o == null) {, +                    if (oldInputLength == in.readableBytes()) {, +                        break;, +                    } else {, +                        continue;, +                    }, +                } else {, +                    if (oldInputLength == in.readableBytes()) {]