[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +import io.netty.handler.codec.DefaultHeaders;, +import io.netty.handler.codec.DefaultTextHeaders.CharSequenceConverter;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.TreeMap;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +        this(validate, false);, +    protected DefaultHttpHeaders(boolean validate, boolean singleHeaderFields) {, +        this(true, validate ? HeaderNameValidator.INSTANCE : DefaultTextHeaders.NO_NAME_VALIDATOR, singleHeaderFields);, +    protected DefaultHttpHeaders(boolean validate,, +                                 DefaultHeaders.NameValidator<CharSequence> nameValidator,, +        headers = new DefaultTextHeaders(, +                    new TreeMap<CharSequence, Object>(AsciiString.CHARSEQUENCE_CASE_INSENSITIVE_ORDER),, +                    nameValidator,, +                    validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE,, +                    singleHeaderFields);, +        return headers.getShort(name, defaultValue);, +    public List<Entry<String, String>> entries() {, +        if (isEmpty()) {, +            return Collections.emptyList();, +        }, +        List<Entry<String, String>> entriesConverted = new ArrayList<Entry<String, String>>(, +                headers.size());, +        for (Entry<String, String> entry : this) {, +            entriesConverted.add(entry);, +        }, +        return entriesConverted;, +    /**, +     * @deprecated Use {@link #iteratorCharSequence()}., +     */, +    @Deprecated, +    /**, +     * @deprecated Future major releases will have this be the default iterator., +     * Get an iterator to traverse over the underlying name/value pairs., +     * <p>, +     * This iterator should be preferred over {@link #iterator()} if {@link AsciiString} objects are used., +     */, +    @Override, +    @Deprecated, +    public Iterator<Entry<CharSequence, CharSequence>> iteratorCharSequence() {, +        return headers.iterator();, +    }, +, +    public int size() {, +        return headers.size();, +    }, +, +    @Override, +    public int hashCode() {, +        return headers.size();, +    public boolean equals(Object other) {, +        if (!(other instanceof DefaultHttpHeaders)) {, +            return false;, +        }, +        DefaultHttpHeaders headers = (DefaultHttpHeaders) other;, +        return DefaultHeaders.comparatorEquals(this.headers, headers.headers,, +                AsciiString.CHARSEQUENCE_CASE_SENSITIVE_ORDER);, +    static final class HeaderNameValidator implements DefaultHeaders.NameValidator<CharSequence> {, +, +        public static final HeaderNameValidator INSTANCE = new HeaderNameValidator();, +, +        private HeaderNameValidator() {, +        }, +, +        @Override, +        public void validate(CharSequence name) {, +            // Go through each character in the name, +            for (int index = 0; index < name.length(); index++) {, +                char character = name.charAt(index);, +, +                // Check to see if the character is not an ASCII character, +                if (character > 127) {, +                    throw new IllegalArgumentException("a header name cannot contain non-ASCII characters: " + name);, +                }, +, +                // Check for prohibited characters., +                if ((character & HIGHEST_INVALID_NAME_CHAR_MASK) == 0 && LOOKUP_TABLE[character] != 0) {, +                    throw new IllegalArgumentException(, +                            "a header name cannot contain the following prohibited characters: =,;: \\t\\r\\n\\v\\f: " +, +                            name);, +                }, +            }, +        }, +    }, +, +    private static class HeaderValueConverter extends CharSequenceConverter {, +, +        public static final HeaderValueConverter INSTANCE = new HeaderValueConverter();, +, +        @Override, +        public CharSequence convertObject(Object value) {, +            checkNotNull(value, "value");, +            CharSequence seq;, +            if (value instanceof CharSequence) {, +                seq = (CharSequence) value;, +            } else if (value instanceof Number) {, +                seq = value.toString();, +            } else if (value instanceof Date) {]