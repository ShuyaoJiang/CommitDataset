[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/DefaultNioSocketChannelConfig.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(DefaultNioSocketChannelConfig.class);, +, +    private volatile int writeBufferHighWaterMark = 256 * 1024;, +    private volatile int writeBufferLowWaterMark  =  64 * 1024;, +            setReadWriteFair(true); // Deprecated, +        } else if (key.equals("writeBufferHighWaterMark")) {, +            // FIXME: low -> high, +            setWriteBufferHighWaterMark(ConversionUtil.toInt(value));, +        } else if (key.equals("writeBufferLowWaterMark")) {, +            // FIXME: high -> low, +            setWriteBufferLowWaterMark(ConversionUtil.toInt(value));, +    public int getWriteBufferHighWaterMark() {, +        return writeBufferHighWaterMark;, +    }, +, +    public void setWriteBufferHighWaterMark(int writeBufferHighWaterMark) {, +        if (writeBufferHighWaterMark < 0) {, +            throw new IllegalArgumentException(, +                    "writeBufferHighWaterMark: " + writeBufferHighWaterMark);, +        }, +        this.writeBufferHighWaterMark = writeBufferHighWaterMark;, +    }, +, +    public int getWriteBufferLowWaterMark() {, +        return writeBufferLowWaterMark;, +    }, +, +    public void setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {, +        if (writeBufferLowWaterMark < 0) {, +            throw new IllegalArgumentException(, +                    "writeBufferLowWaterMark: " + writeBufferLowWaterMark);, +        }, +        this.writeBufferLowWaterMark = writeBufferLowWaterMark;, +    }, +, +        logger.warn(, +                "Detected an access to a deprecated configuration parameter: " +, +                "readWriteFair");, +        return true;, +        isReadWriteFair();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/DefaultNioSocketChannelConfig.java, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(DefaultNioSocketChannelConfig.class);, +, +    private volatile int writeBufferHighWaterMark = 256 * 1024;, +    private volatile int writeBufferLowWaterMark  =  64 * 1024;, +            setReadWriteFair(true); // Deprecated, +        } else if (key.equals("writeBufferHighWaterMark")) {, +            // FIXME: low -> high, +            setWriteBufferHighWaterMark(ConversionUtil.toInt(value));, +        } else if (key.equals("writeBufferLowWaterMark")) {, +            // FIXME: high -> low, +            setWriteBufferLowWaterMark(ConversionUtil.toInt(value));, +    public int getWriteBufferHighWaterMark() {, +        return writeBufferHighWaterMark;, +    }, +, +    public void setWriteBufferHighWaterMark(int writeBufferHighWaterMark) {, +        if (writeBufferHighWaterMark < 0) {, +            throw new IllegalArgumentException(, +                    "writeBufferHighWaterMark: " + writeBufferHighWaterMark);, +        }, +        this.writeBufferHighWaterMark = writeBufferHighWaterMark;, +    }, +, +    public int getWriteBufferLowWaterMark() {, +        return writeBufferLowWaterMark;, +    }, +, +    public void setWriteBufferLowWaterMark(int writeBufferLowWaterMark) {, +        if (writeBufferLowWaterMark < 0) {, +            throw new IllegalArgumentException(, +                    "writeBufferLowWaterMark: " + writeBufferLowWaterMark);, +        }, +        this.writeBufferLowWaterMark = writeBufferLowWaterMark;, +    }, +, +        logger.warn(, +                "Detected an access to a deprecated configuration parameter: " +, +                "readWriteFair");, +        return true;, +        isReadWriteFair();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import java.util.concurrent.atomic.AtomicInteger;, +import org.jboss.netty.buffer.ChannelBuffer;, +    final AtomicInteger writeBufferSize = new AtomicInteger();, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>() {, +        @Override, +        public boolean offer(MessageEvent e) {, +            boolean success = super.offer(e);, +            assert success;, +            writeBufferSize.addAndGet(, +                    ((ChannelBuffer) e.getMessage()).readableBytes());, +            return true;]