[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();, +    private static DatagramChannel newSocket(SelectorProvider provider) {, +            return provider.openDatagramChannel();, +    private static DatagramChannel newSocket(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +            return newSocket(provider);, +            return provider.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider}, +     * which will use the Operation Systems default {@link InternetProtocolFamily}., +     */, +    public NioDatagramChannel(SelectorProvider provider) {, +        this(newSocket(provider));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER, ipFamily));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider} and {@link InternetProtocolFamily}., +     * If {@link InternetProtocolFamily} is {@code null} it will depend on the Operation Systems default, +     * which will be chosen., +     */, +    public NioDatagramChannel(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +        this(newSocket(provider, ipFamily));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();, +    private static DatagramChannel newSocket(SelectorProvider provider) {, +            return provider.openDatagramChannel();, +    private static DatagramChannel newSocket(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +            return newSocket(provider);, +            return provider.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider}, +     * which will use the Operation Systems default {@link InternetProtocolFamily}., +     */, +    public NioDatagramChannel(SelectorProvider provider) {, +        this(newSocket(provider));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER, ipFamily));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider} and {@link InternetProtocolFamily}., +     * If {@link InternetProtocolFamily} is {@code null} it will depend on the Operation Systems default, +     * which will be chosen., +     */, +    public NioDatagramChannel(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +        this(newSocket(provider, ipFamily));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();, +    private static ServerSocketChannel newSocket(SelectorProvider provider) {, +            return provider.openServerSocketChannel();, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider}., +     */, +    public NioServerSocketChannel(SelectorProvider provider) {, +        this(newSocket(provider));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();, +    private static DatagramChannel newSocket(SelectorProvider provider) {, +            return provider.openDatagramChannel();, +    private static DatagramChannel newSocket(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +            return newSocket(provider);, +            return provider.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider}, +     * which will use the Operation Systems default {@link InternetProtocolFamily}., +     */, +    public NioDatagramChannel(SelectorProvider provider) {, +        this(newSocket(provider));, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER, ipFamily));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider} and {@link InternetProtocolFamily}., +     * If {@link InternetProtocolFamily} is {@code null} it will depend on the Operation Systems default, +     * which will be chosen., +     */, +    public NioDatagramChannel(SelectorProvider provider, InternetProtocolFamily ipFamily) {, +        this(newSocket(provider, ipFamily));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();, +    private static ServerSocketChannel newSocket(SelectorProvider provider) {, +            return provider.openServerSocketChannel();, +        this(newSocket(DEFAULT_SELECTOR_PROVIDER));, +    }, +, +    /**, +     * Create a new instance using the given {@link SelectorProvider}., +     */]