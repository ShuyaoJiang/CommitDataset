[+++ b/handler/src/main/java/io/netty/handler/queue/BufferedWriteHandler.java, +import java.io.IOException;, +import java.nio.channels.ClosedChannelException;, +import io.netty.channel.LifeCycleAwareChannelHandler;, +public class BufferedWriteHandler extends SimpleChannelHandler implements LifeCycleAwareChannelHandler {, +    , +    /**, +     * Fail all buffered writes that are left. See <a href="https://github.com/netty/netty/issues/308>#308</a> for more details, +     */, +    @Override, +    public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {, +        Throwable cause = null;, +        for (;;) {, +            MessageEvent ev = queue.poll();, +            , +            if (ev == null) {, +                break;, +            }, +            , +            if (cause == null) {, +                cause = new ClosedChannelException();, +            }, +            ev.getFuture().setFailure(cause);, +            , +        }, +        if (cause != null) {, +            Channels.fireExceptionCaught(ctx.getChannel(), cause);, +        }, +        , +        super.channelClosed(ctx, e);, +    }, +, +    @Override, +    public void beforeAdd(ChannelHandlerContext ctx) throws Exception {, +        // Nothing to do, +        , +    }, +, +    @Override, +    public void afterAdd(ChannelHandlerContext ctx) throws Exception {, +        // Nothing to do, +        , +    }, +, +    @Override, +    public void beforeRemove(ChannelHandlerContext ctx) throws Exception {, +        // flush a last time before remove the handler, +        flush(consolidateOnFlush);, +    }, +, +    /**, +     * Fail all buffered writes that are left. See <a href="https://github.com/netty/netty/issues/308>#308</a> for more details, +     */, +    @Override, +    public void afterRemove(ChannelHandlerContext ctx) throws Exception {, +        Throwable cause = null;, +        for (;;) {, +            MessageEvent ev = queue.poll();, +            , +            if (ev == null) {, +                break;, +            }, +            , +            if (cause == null) {, +                cause = new IOException("Unable to flush message");, +            }, +            ev.getFuture().setFailure(cause);, +            , +        }, +        if (cause != null) {, +            Channels.fireExceptionCaughtLater(ctx.getChannel(), cause);, +        }, +    }, +    , +    ]