[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    SendBuffer currentWriteBuffer;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    SendBuffer currentWriteBuffer;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    private final SocketReceiveBufferPool recvBufferPool = new SocketReceiveBufferPool();, +    private final SocketSendBufferPool sendBufferPool = new SocketSendBufferPool();, +            ByteBuffer bb = recvBufferPool.acquire(buffer.writableBytes());, +                recvBufferPool.release(bb);, +        final SocketSendBufferPool sendBufferPool = this.sendBufferPool;, +                SendBuffer buf;, +                ByteBuffer bb;, +                    channel.currentWriteBuffer = buf = sendBufferPool.acquire(origBuf);, +                    bb = buf.buffer;, +                    bb = buf.buffer;, +                        int localWrittenBytes = ch.write(bb);, +                    if (!bb.hasRemaining()) {, +                        buf.release();, +                        bb = null;, +                    buf.release();, +                    bb = null;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    SendBuffer currentWriteBuffer;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    private final SocketReceiveBufferPool recvBufferPool = new SocketReceiveBufferPool();, +    private final SocketSendBufferPool sendBufferPool = new SocketSendBufferPool();, +            ByteBuffer bb = recvBufferPool.acquire(buffer.writableBytes());, +                recvBufferPool.release(bb);, +        final SocketSendBufferPool sendBufferPool = this.sendBufferPool;, +                SendBuffer buf;, +                ByteBuffer bb;, +                    channel.currentWriteBuffer = buf = sendBufferPool.acquire(origBuf);, +                    bb = buf.buffer;, +                    bb = buf.buffer;, +                        int localWrittenBytes = ch.write(bb);, +                    if (!bb.hasRemaining()) {, +                        buf.release();, +                        bb = null;, +                    buf.release();, +                    bb = null;, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    SendBuffer currentWriteBuffer;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.channel.socket.nio.SocketSendBufferPool.SendBuffer;, +    private final SocketReceiveBufferPool recvBufferPool = new SocketReceiveBufferPool();, +    private final SocketSendBufferPool sendBufferPool = new SocketSendBufferPool();, +            ByteBuffer bb = recvBufferPool.acquire(buffer.writableBytes());, +                recvBufferPool.release(bb);, +        final SocketSendBufferPool sendBufferPool = this.sendBufferPool;, +                SendBuffer buf;, +                ByteBuffer bb;, +                    channel.currentWriteBuffer = buf = sendBufferPool.acquire(origBuf);, +                    bb = buf.buffer;, +                    bb = buf.buffer;, +                        int localWrittenBytes = ch.write(bb);, +                    if (!bb.hasRemaining()) {, +                        buf.release();, +                        bb = null;, +                    buf.release();, +                    bb = null;, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/SocketReceiveBufferPool.java, +/*, + * Copyright 2010 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.channel.socket.nio;, +, +import java.lang.ref.SoftReference;, +import java.nio.ByteBuffer;, +, +/**, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + * @version $Rev$, $Date$, + */, +final class SocketReceiveBufferPool {, +, +    private static final int POOL_SIZE = 4;, +, +    @SuppressWarnings("unchecked"), +    private final SoftReference<ByteBuffer>[] pool = new SoftReference[POOL_SIZE];]