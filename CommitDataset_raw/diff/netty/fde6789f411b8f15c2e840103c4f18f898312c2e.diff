[+++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelUpstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelUpstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +import io.netty.channel.ChannelHandler.Sharable;, + *, +    /**, +     * Creates a new instance with the specified {@link Executor}., +     * Specify an {@link OrderedMemoryAwareThreadPoolExecutor} if unsure., +     */, +        Executor executor = getExecutor();, +, +++ b/handler/src/main/java/io/netty/handler/execution/ChainedExecutor.java, +import java.util.concurrent.Executor;, +, + * A special {@link Executor} which allows to chain a series of, + * {@link Executor}s and {@link ChannelEventRunnableFilter}., +        if (filter == null) {, +            throw new NullPointerException("filter");, +        }, +        this.filter = filter;, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnable.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelDownstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ChannelUpstreamEventRunnableFilter.java, +++ b/handler/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +import io.netty.channel.ChannelHandler.Sharable;, + *, +    /**, +     * Creates a new instance with the specified {@link Executor}., +     * Specify an {@link OrderedMemoryAwareThreadPoolExecutor} if unsure., +     */, +        Executor executor = getExecutor();, +, +++ b/handler/src/main/java/io/netty/handler/execution/MemoryAwareThreadPoolExecutor.java]