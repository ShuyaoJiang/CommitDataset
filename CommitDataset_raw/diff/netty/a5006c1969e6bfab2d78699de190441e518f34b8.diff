[+++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java, +     * Register a {@link Channel} with this {@link EventLoop} using a {@link ChannelFuture}. The passed, +     * {@link ChannelFuture} will get notified once the registration was complete and also will get returned., +     */, +    ChannelFuture register(ChannelPromise promise);, +, +    /**, +     *, +     * @deprecated Use {@link #register(ChannelPromise)} instead., +    @Deprecated, +++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java, +     * Register a {@link Channel} with this {@link EventLoop} using a {@link ChannelFuture}. The passed, +     * {@link ChannelFuture} will get notified once the registration was complete and also will get returned., +     */, +    ChannelFuture register(ChannelPromise promise);, +, +    /**, +     *, +     * @deprecated Use {@link #register(ChannelPromise)} instead., +    @Deprecated, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +    public ChannelFuture register(ChannelPromise promise) {, +        return next().register(promise);, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java, +     * Register a {@link Channel} with this {@link EventLoop} using a {@link ChannelFuture}. The passed, +     * {@link ChannelFuture} will get notified once the registration was complete and also will get returned., +     */, +    ChannelFuture register(ChannelPromise promise);, +, +    /**, +     *, +     * @deprecated Use {@link #register(ChannelPromise)} instead., +    @Deprecated, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +    public ChannelFuture register(ChannelPromise promise) {, +        return next().register(promise);, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.util.internal.ObjectUtil;, +        return register(new DefaultChannelPromise(channel, this));, +    public ChannelFuture register(final ChannelPromise promise) {, +        ObjectUtil.checkNotNull(promise, "promise");, +        promise.channel().unsafe().register(this, promise);, +        return promise;, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java, +     * Register a {@link Channel} with this {@link EventLoop} using a {@link ChannelFuture}. The passed, +     * {@link ChannelFuture} will get notified once the registration was complete and also will get returned., +     */, +    ChannelFuture register(ChannelPromise promise);, +, +    /**, +     *, +     * @deprecated Use {@link #register(ChannelPromise)} instead., +    @Deprecated, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +    public ChannelFuture register(ChannelPromise promise) {, +        return next().register(promise);, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventLoop.java, +import io.netty.util.internal.ObjectUtil;, +        return register(new DefaultChannelPromise(channel, this));, +    public ChannelFuture register(final ChannelPromise promise) {, +        ObjectUtil.checkNotNull(promise, "promise");, +        promise.channel().unsafe().register(this, promise);, +        return promise;, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ThreadPerChannelEventLoop.java, +    public ChannelFuture register(ChannelPromise promise) {, +        return super.register(promise).addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                if (future.isSuccess()) {, +                    ch = future.channel();, +                } else {, +                    deregister();, +                }, +            }, +        });, +    }, +, +    @Deprecated, +    @Override, +++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java]