[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +                lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +            lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, failureCause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +                lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +            lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, failureCause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            onError(ctx, true, e);, +            onError(ctx, true, connectionError(INTERNAL_ERROR, cause, "Error flushing"));, +                onError(ctx, false, e);, +                onError(ctx, false, e);, +            onError(ctx, false, cause);, +    public void onError(ChannelHandlerContext ctx, boolean outbound, Throwable cause) {, +            onStreamError(ctx, outbound, cause, (StreamException) embedded);, +                onStreamError(ctx, outbound, cause, streamException);, +            onConnectionError(ctx, outbound, cause, embedded);, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onConnectionError(ChannelHandlerContext ctx, boolean outbound,, +                                     Throwable cause, Http2Exception http2Ex) {, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onStreamError(ChannelHandlerContext ctx, boolean outbound,, +                                 @SuppressWarnings("unused") Throwable cause, StreamException http2Ex) {, +                    onError(ctx, outbound, connectionError(INTERNAL_ERROR, cause2, "Error DecodeSizeError"));, +            onConnectionError(ctx, true, future.cause(), null);, +            onConnectionError(ctx, true, future.cause(), null);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +                lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +            lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, failureCause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            onError(ctx, true, e);, +            onError(ctx, true, connectionError(INTERNAL_ERROR, cause, "Error flushing"));, +                onError(ctx, false, e);, +                onError(ctx, false, e);, +            onError(ctx, false, cause);, +    public void onError(ChannelHandlerContext ctx, boolean outbound, Throwable cause) {, +            onStreamError(ctx, outbound, cause, (StreamException) embedded);, +                onStreamError(ctx, outbound, cause, streamException);, +            onConnectionError(ctx, outbound, cause, embedded);, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onConnectionError(ChannelHandlerContext ctx, boolean outbound,, +                                     Throwable cause, Http2Exception http2Ex) {, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onStreamError(ChannelHandlerContext ctx, boolean outbound,, +                                 @SuppressWarnings("unused") Throwable cause, StreamException http2Ex) {, +                    onError(ctx, outbound, connectionError(INTERNAL_ERROR, cause2, "Error DecodeSizeError"));, +            onConnectionError(ctx, true, future.cause(), null);, +            onConnectionError(ctx, true, future.cause(), null);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +                    onError(ctx, false, cause);, +    protected void onConnectionError(, +            ChannelHandlerContext ctx, boolean outbound, Throwable cause, Http2Exception http2Ex) {, +        if (!outbound) {, +            //, +            // We only forward non outbound errors as outbound errors will already be reflected by failing the promise., +        }, +        super.onConnectionError(ctx, outbound, cause, http2Ex);, +    protected final void onStreamError(ChannelHandlerContext ctx, boolean outbound, Throwable cause,, +            super.onStreamError(ctx, outbound, cause, streamException);, +            super.onStreamError(ctx, outbound, cause, streamException);, +        if (!outbound) {, +            // We only forward non outbound errors as outbound errors will already be reflected by failing the promise., +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                    lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +                lifecycleManager.onError(ctx, true, failureCause);, +            lifecycleManager.onError(ctx, true, t);, +            lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, cause);, +                lifecycleManager.onError(ctx, true, failureCause);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            onError(ctx, true, e);, +            onError(ctx, true, connectionError(INTERNAL_ERROR, cause, "Error flushing"));, +                onError(ctx, false, e);, +                onError(ctx, false, e);, +            onError(ctx, false, cause);, +    public void onError(ChannelHandlerContext ctx, boolean outbound, Throwable cause) {, +            onStreamError(ctx, outbound, cause, (StreamException) embedded);, +                onStreamError(ctx, outbound, cause, streamException);, +            onConnectionError(ctx, outbound, cause, embedded);, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onConnectionError(ChannelHandlerContext ctx, boolean outbound,, +                                     Throwable cause, Http2Exception http2Ex) {, +     * @param outbound {@code true} if the error was caused by an outbound operation., +    protected void onStreamError(ChannelHandlerContext ctx, boolean outbound,]