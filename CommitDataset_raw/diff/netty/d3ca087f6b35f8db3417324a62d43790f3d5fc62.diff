[+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.util.ArrayList;, +import java.util.List;, +        List<Throwable> suppressed = new ArrayList<Throwable>();, +                suppressed.add(t);, +        IllegalArgumentException iae =, +                new IllegalArgumentException("Failed to load any of the given libraries: " + Arrays.toString(names));, +        ThrowableUtil.addSuppressedAndClear(iae, suppressed);, +        throw iae;, +        List<Throwable> suppressed = new ArrayList<Throwable>();, +            suppressed.add(ex);, +                        FileNotFoundException fnf = new FileNotFoundException(fileName);, +                        ThrowableUtil.addSuppressedAndClear(fnf, suppressed);, +                        throw fnf;, +                    FileNotFoundException fnf = new FileNotFoundException(path);, +                    ThrowableUtil.addSuppressedAndClear(fnf, suppressed);, +                    throw fnf;, +                suppressed.add(t);, +            ThrowableUtil.addSuppressedAndClear(e, suppressed);, +            UnsatisfiedLinkError ule = new UnsatisfiedLinkError("could not load a native library: " + name);, +            ule.initCause(e);, +            ThrowableUtil.addSuppressedAndClear(ule, suppressed);, +            throw ule;, +        Throwable suppressed = null;, +        try {, +                suppressed = e;, +                suppressed = e;, +        } catch (UnsatisfiedLinkError ule) {, +            if (suppressed != null) {, +                ThrowableUtil.addSuppressed(ule, suppressed);, +            }, +            throw ule;, +        }, +            Throwable t = (Throwable) ret;, +            assert !(t instanceof UnsatisfiedLinkError) : t + " should be a wrapper throwable";, +            Throwable cause = t.getCause();, +            UnsatisfiedLinkError ule = new UnsatisfiedLinkError(t.getMessage());, +            ule.initCause(t);, +            throw ule;, +        } catch (ClassNotFoundException e1) {, +            try {, +            } catch (ClassNotFoundException e2) {, +                ThrowableUtil.addSuppressed(e2, e1);, +                throw e2;, +            } catch (RuntimeException e2) {, +                ThrowableUtil.addSuppressed(e2, e1);, +                throw e2;, +            } catch (Error e2) {, +                ThrowableUtil.addSuppressed(e2, e1);, +                throw e2;, +            }, +++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.util.ArrayList;, +import java.util.List;, +        List<Throwable> suppressed = new ArrayList<Throwable>();, +                suppressed.add(t);, +        IllegalArgumentException iae =, +                new IllegalArgumentException("Failed to load any of the given libraries: " + Arrays.toString(names));, +        ThrowableUtil.addSuppressedAndClear(iae, suppressed);, +        throw iae;, +        List<Throwable> suppressed = new ArrayList<Throwable>();, +            suppressed.add(ex);, +                        FileNotFoundException fnf = new FileNotFoundException(fileName);, +                        ThrowableUtil.addSuppressedAndClear(fnf, suppressed);, +                        throw fnf;, +                    FileNotFoundException fnf = new FileNotFoundException(path);, +                    ThrowableUtil.addSuppressedAndClear(fnf, suppressed);, +                    throw fnf;, +                suppressed.add(t);, +            ThrowableUtil.addSuppressedAndClear(e, suppressed);, +            UnsatisfiedLinkError ule = new UnsatisfiedLinkError("could not load a native library: " + name);, +            ule.initCause(e);, +            ThrowableUtil.addSuppressedAndClear(ule, suppressed);, +            throw ule;, +        Throwable suppressed = null;, +        try {, +                suppressed = e;, +                suppressed = e;, +        } catch (UnsatisfiedLinkError ule) {, +            if (suppressed != null) {, +                ThrowableUtil.addSuppressed(ule, suppressed);, +            }, +            throw ule;, +        }, +            Throwable t = (Throwable) ret;, +            assert !(t instanceof UnsatisfiedLinkError) : t + " should be a wrapper throwable";, +            Throwable cause = t.getCause();, +            UnsatisfiedLinkError ule = new UnsatisfiedLinkError(t.getMessage());, +            ule.initCause(t);, +            throw ule;, +        } catch (ClassNotFoundException e1) {, +            try {, +            } catch (ClassNotFoundException e2) {, +                ThrowableUtil.addSuppressed(e2, e1);, +                throw e2;, +            } catch (RuntimeException e2) {, +                ThrowableUtil.addSuppressed(e2, e1);, +                throw e2;, +            } catch (Error e2) {, +                ThrowableUtil.addSuppressed(e2, e1);]