[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                        final int writtenBytes = oldSize - newSize;, +                        if (writtenBytes > 0) {, +                            writeCounter += writtenBytes;, +                    }, +        notifyFlushFutures(0);, +    }, +, +    protected void notifyFlushFutures(long writtenBytes) {, +        writeCounter += writtenBytes;, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                        final int writtenBytes = oldSize - newSize;, +                        if (writtenBytes > 0) {, +                            writeCounter += writtenBytes;, +                    }, +        notifyFlushFutures(0);, +    }, +, +    protected void notifyFlushFutures(long writtenBytes) {, +        writeCounter += writtenBytes;, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                        final int writtenBytes = oldSize - newSize;, +                        if (writtenBytes > 0) {, +                            writeCounter += writtenBytes;, +                    }, +        notifyFlushFutures(0);, +    }, +, +    protected void notifyFlushFutures(long writtenBytes) {, +        writeCounter += writtenBytes;, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioCompletionHandler.java, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                        final int writtenBytes = oldSize - newSize;, +                        if (writtenBytes > 0) {, +                            writeCounter += writtenBytes;, +                    }, +        notifyFlushFutures(0);, +    }, +, +    protected void notifyFlushFutures(long writtenBytes) {, +        writeCounter += writtenBytes;, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioCompletionHandler.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +            return;, +            buf.discardReadBytes();, +            javaChannel().write(buf.nioBuffer(), this, WRITE_HANDLER);, +            int writtenBytes = result;, +            if (writtenBytes > 0) {, +                buf.readerIndex(buf.readerIndex() + writtenBytes);, +            }, +            boolean empty = !buf.readable();, +, +            if (empty) {, +                // Reset reader/writerIndex to 0 if the buffer is empty., +                buf.clear();, +, +            channel.notifyFlushFutures(writtenBytes);, +                if (!empty) {, +                    channel.notifyFlushFutures(new ClosedChannelException());, +                }, +            if (buf.readable()) {, +                    failed0(e, channel);, +                }, +                if (t instanceof ClosedChannelException) {]