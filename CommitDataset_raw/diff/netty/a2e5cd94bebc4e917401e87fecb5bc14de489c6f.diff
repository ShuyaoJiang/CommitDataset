[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    enum State {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    enum State {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerFactory.java, + * Creates a new {@link WebSocketClientHandshaker} of desired protocol version., + *, + * @apiviz.landmark, + * @apiviz.has io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker oneway - - creates, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    enum State {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerFactory.java, + * Creates a new {@link WebSocketClientHandshaker} of desired protocol version., + *, + * @apiviz.landmark, + * @apiviz.has io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker oneway - - creates, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshakerFactory.java, + * Auto-detects the version of the Web Socket protocol in use and creates a new proper, + * {@link WebSocketServerHandshaker}., + *, + * @apiviz.landmark, + * @apiviz.has io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker oneway - - creates, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    enum State {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerFactory.java, + * Creates a new {@link WebSocketClientHandshaker} of desired protocol version., + *, + * @apiviz.landmark, + * @apiviz.has io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker oneway - - creates, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshakerFactory.java, + * Auto-detects the version of the Web Socket protocol in use and creates a new proper, + * {@link WebSocketServerHandshaker}., + *, + * @apiviz.landmark, + * @apiviz.has io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker oneway - - creates, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/package-info.java, + * @apiviz.exclude [0-9][0-9], + * @apiviz.exclude Exception$, + * @apiviz.exclude Version$, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringDecoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - decodes URI, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/QueryStringEncoder.java, + * @apiviz.has        io.netty.handler.codec.http.HttpRequest oneway - - encodes URI, +            return URLEncoder.encode(s, charset.name()).replace("+", "%20");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    enum State {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerFactory.java, + * Creates a new {@link WebSocketClientHandshaker} of desired protocol version., + *, + * @apiviz.landmark]