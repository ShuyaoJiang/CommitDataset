[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            final EventExecutor executor = executor();, +            if (listeners == null || executor == ImmediateEventExecutor.INSTANCE) {, +                execute(executor, this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +            final EventExecutor executor = executor();, +            if (listeners == null || executor == ImmediateEventExecutor.INSTANCE) {, +                execute(executor, this);, +++ b/common/src/test/java/io/netty/util/concurrent/DefaultPromiseTest.java, +    @Test(timeout = 2000), +    public void testPromiseListenerAddWhenCompleteFailure() throws Exception {, +        testPromiseListenerAddWhenComplete(new RuntimeException());, +    }, +, +    @Test(timeout = 2000), +    public void testPromiseListenerAddWhenCompleteSuccess() throws Exception {, +        testPromiseListenerAddWhenComplete(null);, +    }, +, +    private static void testPromiseListenerAddWhenComplete(Throwable cause) throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final Promise<Void> promise = new DefaultPromise<Void>(ImmediateEventExecutor.INSTANCE);, +        promise.addListener(new FutureListener<Void>() {, +            @Override, +            public void operationComplete(Future<Void> future) throws Exception {, +                promise.addListener(new FutureListener<Void>() {, +                    @Override, +                    public void operationComplete(Future<Void> future) throws Exception {, +                        latch.countDown();, +                    }, +                });, +            }, +        });, +        if (cause == null) {, +            promise.setSuccess(null);, +        } else {, +            promise.setFailure(cause);, +        }, +        latch.await();, +    }, +]