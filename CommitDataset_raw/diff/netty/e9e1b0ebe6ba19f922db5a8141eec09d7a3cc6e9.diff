[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            NioWorker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            NioWorker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +            NioWorker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            NioWorker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +            NioWorker.write(channel, true);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +        write(ch, false);, +    static void write(NioSocketChannel channel, boolean mightNeedWakeup) {, +            setOpWrite(channel, true, mightNeedWakeup);, +            setOpWrite(channel, false, mightNeedWakeup);, +    private static void setOpWrite(, +            NioSocketChannel channel, boolean opWrite, boolean mightNeedWakeup) {, +            if (!mightNeedWakeup) {, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) == 0) {, +                    interestOps |= SelectionKey.OP_WRITE;, +                    key.interestOps(interestOps);, +                    changed = true;, +                }, +            } else {, +            }, +        } else {, +            if (!mightNeedWakeup) {, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +                    interestOps &= ~SelectionKey.OP_WRITE;, +                    key.interestOps(interestOps);, +                    changed = true;, +                }, +        }]