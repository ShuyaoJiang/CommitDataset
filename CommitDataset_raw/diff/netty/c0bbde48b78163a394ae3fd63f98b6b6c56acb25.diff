[+++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        return (ByteBuffer) buffer.duplicate().position(index).limit(index + length);, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        return (ByteBuffer) buffer.duplicate().position(index).limit(index + length);, +++ b/buffer/src/test/java/io/netty/buffer/BigEndianDirectByteBufTest.java, +        buffer = newDirectBuffer(length);, +, +    protected ByteBuf newDirectBuffer(int length) {, +        return new UnpooledDirectByteBuf(UnpooledByteBufAllocator.DEFAULT, length, Integer.MAX_VALUE);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        return (ByteBuffer) buffer.duplicate().position(index).limit(index + length);, +++ b/buffer/src/test/java/io/netty/buffer/BigEndianDirectByteBufTest.java, +        buffer = newDirectBuffer(length);, +, +    protected ByteBuf newDirectBuffer(int length) {, +        return new UnpooledDirectByteBuf(UnpooledByteBufAllocator.DEFAULT, length, Integer.MAX_VALUE);, +    }, +++ b/buffer/src/test/java/io/netty/buffer/BigEndianUnsafeDirectByteBufTest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +, +import io.netty.util.internal.PlatformDependent;, +import org.junit.Assume;, +import org.junit.Before;, +, +public class BigEndianUnsafeDirectByteBufTest extends BigEndianDirectByteBufTest {, +, +    @Before, +    public void checkHasUnsafe() {, +        Assume.assumeTrue("sun.misc.Unsafe not found, skip tests", PlatformDependent.hasUnsafe());, +    }, +, +    @Override, +    protected ByteBuf newBuffer(int length) {, +        return new UnpooledUnsafeDirectByteBuf(UnpooledByteBufAllocator.DEFAULT, length, Integer.MAX_VALUE);, +    }, +}, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        return (ByteBuffer) buffer.duplicate().position(index).limit(index + length);, +++ b/buffer/src/test/java/io/netty/buffer/BigEndianDirectByteBufTest.java, +        buffer = newDirectBuffer(length);, +, +    protected ByteBuf newDirectBuffer(int length) {, +        return new UnpooledDirectByteBuf(UnpooledByteBufAllocator.DEFAULT, length, Integer.MAX_VALUE);, +    }, +++ b/buffer/src/test/java/io/netty/buffer/BigEndianUnsafeDirectByteBufTest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +, +import io.netty.util.internal.PlatformDependent;, +import org.junit.Assume;, +import org.junit.Before;, +, +public class BigEndianUnsafeDirectByteBufTest extends BigEndianDirectByteBufTest {, +, +    @Before, +    public void checkHasUnsafe() {, +        Assume.assumeTrue("sun.misc.Unsafe not found, skip tests", PlatformDependent.hasUnsafe());, +    }, +, +    @Override, +    protected ByteBuf newBuffer(int length) {, +        return new UnpooledUnsafeDirectByteBuf(UnpooledByteBufAllocator.DEFAULT, length, Integer.MAX_VALUE);, +    }, +}, +++ b/buffer/src/test/java/io/netty/buffer/LittleEndianDirectByteBufTest.java, +        buffer = newDirectBuffer(length).order(ByteOrder.LITTLE_ENDIAN);, +, +    protected ByteBuf newDirectBuffer(int length) {]