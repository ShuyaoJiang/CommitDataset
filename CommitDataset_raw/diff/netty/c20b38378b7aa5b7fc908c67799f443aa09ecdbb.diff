[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +    private final Http2Settings initialSettings;, +        initialSettings = null;, +        this.initialSettings = null;, +        this.decoder = checkNotNull(decoder, "decoder");, +        this.encoder = checkNotNull(encoder, "encoder");, +        if (encoder.connection() != decoder.connection()) {, +            throw new IllegalArgumentException("Encoder and Decoder do not share the same connection object");, +        }, +    }, +, +    public Http2ConnectionHandler(Http2Connection connection, Http2FrameListener listener,, +                                  Http2Settings initialSettings) {, +        this(connection, new DefaultHttp2FrameReader(), new DefaultHttp2FrameWriter(), listener,, +                initialSettings);, +    }, +, +    public Http2ConnectionHandler(Http2Connection connection, Http2FrameReader frameReader,, +                                  Http2FrameWriter frameWriter, Http2FrameListener listener,, +                                  Http2Settings initialSettings) {, +        this.initialSettings = initialSettings;, +        encoder = new DefaultHttp2ConnectionEncoder(connection, frameWriter);, +        decoder = new DefaultHttp2ConnectionDecoder(connection, encoder, frameReader, listener);, +    }, +, +    public Http2ConnectionHandler(Http2ConnectionDecoder decoder,, +                                  Http2ConnectionEncoder encoder,, +                                  Http2Settings initialSettings) {, +        this.initialSettings = initialSettings;, +            encoder.writeSettings(ctx, initialSettings(), ctx.newPromise()).addListener(, +     * Gets the initial settings to be sent to the remote endpoint., +     */, +    private Http2Settings initialSettings() {, +        return initialSettings != null ? initialSettings : decoder.localSettings();, +    }, +, +    /**]