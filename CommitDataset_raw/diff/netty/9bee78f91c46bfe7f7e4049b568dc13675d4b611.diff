[+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater;, +        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater;, +        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCounted> refCntUpdater;, +, +        AtomicIntegerFieldUpdater<AbstractReferenceCounted> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCounted.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCounted.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater;, +        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCounted> refCntUpdater;, +, +        AtomicIntegerFieldUpdater<AbstractReferenceCounted> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCounted.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCounted.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/common/src/main/java/io/netty/util/DefaultAttributeMap.java, +import io.netty.util.internal.PlatformDependent;, +, +    private static final AtomicReferenceFieldUpdater<DefaultAttributeMap, Map> updater;, +, +    static {, +        @SuppressWarnings("rawtypes"), +        AtomicReferenceFieldUpdater<DefaultAttributeMap, Map> referenceFieldUpdater =, +                PlatformDependent.newAtomicReferenceFieldUpdater(DefaultAttributeMap.class, "map");, +        if (referenceFieldUpdater == null) {, +            referenceFieldUpdater = AtomicReferenceFieldUpdater.newUpdater(DefaultAttributeMap.class, Map.class, "map");, +        }, +        updater = referenceFieldUpdater;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater;, +        AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java, +    private static final AtomicIntegerFieldUpdater<AbstractReferenceCounted> refCntUpdater;, +, +        AtomicIntegerFieldUpdater<AbstractReferenceCounted> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(AbstractReferenceCounted.class, "refCnt");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCounted.class, "refCnt");, +        }, +        refCntUpdater = updater;, +++ b/common/src/main/java/io/netty/util/DefaultAttributeMap.java, +import io.netty.util.internal.PlatformDependent;, +, +    private static final AtomicReferenceFieldUpdater<DefaultAttributeMap, Map> updater;, +, +    static {, +        @SuppressWarnings("rawtypes"), +        AtomicReferenceFieldUpdater<DefaultAttributeMap, Map> referenceFieldUpdater =, +                PlatformDependent.newAtomicReferenceFieldUpdater(DefaultAttributeMap.class, "map");, +        if (referenceFieldUpdater == null) {, +            referenceFieldUpdater = AtomicReferenceFieldUpdater.newUpdater(DefaultAttributeMap.class, Map.class, "map");, +        }, +        updater = referenceFieldUpdater;, +    }, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +import java.util.concurrent.atomic.AtomicLongFieldUpdater;, +import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;, +    /**, +     * Create a new optimized {@link AtomicReferenceFieldUpdater} or {@code null} if it, +     * could not be created. Because of this the caller need to check for {@code null} and if {@code null} is returned, +     * use {@link AtomicReferenceFieldUpdater#newUpdater(Class, Class, String)} as fallback., +     */, +    public static <U, W> AtomicReferenceFieldUpdater<U, W> newAtomicReferenceFieldUpdater(, +            Class<U> tclass, String fieldName) {, +        if (hasUnsafe()) {, +            try {]