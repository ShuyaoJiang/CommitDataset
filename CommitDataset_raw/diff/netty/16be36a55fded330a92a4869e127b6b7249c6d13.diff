[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.handler.codec.http.HttpScheme;, +, +    static int websocketPort(URI wsURL) {, +        // Format request, +        int wsPort = wsURL.getPort();, +        // check if the URI contained a port if not set the correct one depending on the schema., +        // See https://github.com/netty/netty/pull/1558, +        if (wsPort == -1) {, +            return "wss".equals(wsURL.getScheme()) ? HttpScheme.HTTPS.port() : HttpScheme.HTTP.port();, +        }, +        return wsPort;, +    }, +, +    static CharSequence websocketOriginValue(String host, int wsPort) {, +        String originValue = (wsPort == HttpScheme.HTTPS.port() ?, +                HttpScheme.HTTPS.name() : HttpScheme.HTTP.name()) + "://" + host;, +        if (wsPort != HttpScheme.HTTP.port() && wsPort != HttpScheme.HTTPS.port()) {, +            // if the port is not standard (80/443) its needed to add the port to the header., +            // See http://tools.ietf.org/html/rfc6454#section-6.2, +            return originValue + ':' + wsPort;, +        }, +        return originValue;, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.handler.codec.http.HttpScheme;, +, +    static int websocketPort(URI wsURL) {, +        // Format request, +        int wsPort = wsURL.getPort();, +        // check if the URI contained a port if not set the correct one depending on the schema., +        // See https://github.com/netty/netty/pull/1558, +        if (wsPort == -1) {, +            return "wss".equals(wsURL.getScheme()) ? HttpScheme.HTTPS.port() : HttpScheme.HTTP.port();, +        }, +        return wsPort;, +    }, +, +    static CharSequence websocketOriginValue(String host, int wsPort) {, +        String originValue = (wsPort == HttpScheme.HTTPS.port() ?, +                HttpScheme.HTTPS.name() : HttpScheme.HTTP.name()) + "://" + host;, +        if (wsPort != HttpScheme.HTTP.port() && wsPort != HttpScheme.HTTPS.port()) {, +            // if the port is not standard (80/443) its needed to add the port to the header., +            // See http://tools.ietf.org/html/rfc6454#section-6.2, +            return originValue + ':' + wsPort;, +        }, +        return originValue;, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        int wsPort = websocketPort(wsURL);, +        String host = wsURL.getHost();, +               .add(HttpHeaderNames.HOST, host), +               .add(HttpHeaderNames.ORIGIN, websocketOriginValue(host, wsPort)), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.handler.codec.http.HttpScheme;, +, +    static int websocketPort(URI wsURL) {, +        // Format request, +        int wsPort = wsURL.getPort();, +        // check if the URI contained a port if not set the correct one depending on the schema., +        // See https://github.com/netty/netty/pull/1558, +        if (wsPort == -1) {, +            return "wss".equals(wsURL.getScheme()) ? HttpScheme.HTTPS.port() : HttpScheme.HTTP.port();, +        }, +        return wsPort;, +    }, +, +    static CharSequence websocketOriginValue(String host, int wsPort) {, +        String originValue = (wsPort == HttpScheme.HTTPS.port() ?, +                HttpScheme.HTTPS.name() : HttpScheme.HTTP.name()) + "://" + host;, +        if (wsPort != HttpScheme.HTTP.port() && wsPort != HttpScheme.HTTPS.port()) {, +            // if the port is not standard (80/443) its needed to add the port to the header., +            // See http://tools.ietf.org/html/rfc6454#section-6.2, +            return originValue + ':' + wsPort;, +        }, +        return originValue;, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        int wsPort = websocketPort(wsURL);, +        String host = wsURL.getHost();, +               .add(HttpHeaderNames.HOST, host), +               .add(HttpHeaderNames.ORIGIN, websocketOriginValue(host, wsPort)), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +        int wsPort = websocketPort(wsURL);, +        String host = wsURL.getHost();, +, +               .add(HttpHeaderNames.HOST, host), +               .add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN, websocketOriginValue(host, wsPort));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.handler.codec.http.HttpScheme;, +, +    static int websocketPort(URI wsURL) {, +        // Format request, +        int wsPort = wsURL.getPort();, +        // check if the URI contained a port if not set the correct one depending on the schema., +        // See https://github.com/netty/netty/pull/1558, +        if (wsPort == -1) {, +            return "wss".equals(wsURL.getScheme()) ? HttpScheme.HTTPS.port() : HttpScheme.HTTP.port();, +        }, +        return wsPort;]