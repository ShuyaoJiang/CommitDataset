[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpClientCodec extends ChannelHandlerAppender {, +        add(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders));, +        add(new Encoder());, +    private Decoder decoder() {, +        return handlerAt(0);, +    }, +, +    public void setSingleDecode(boolean singleDecode) {, +        decoder().setSingleDecode(singleDecode);, +    }, +, +    public boolean isSingleDecode() {, +        return decoder().isSingleDecode();, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpClientCodec extends ChannelHandlerAppender {, +        add(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders));, +        add(new Encoder());, +    private Decoder decoder() {, +        return handlerAt(0);, +    }, +, +    public void setSingleDecode(boolean singleDecode) {, +        decoder().setSingleDecode(singleDecode);, +    }, +, +    public boolean isSingleDecode() {, +        return decoder().isSingleDecode();, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpServerCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpClientCodec extends ChannelHandlerAppender {, +        add(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders));, +        add(new Encoder());, +    private Decoder decoder() {, +        return handlerAt(0);, +    }, +, +    public void setSingleDecode(boolean singleDecode) {, +        decoder().setSingleDecode(singleDecode);, +    }, +, +    public boolean isSingleDecode() {, +        return decoder().isSingleDecode();, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpServerCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class SpdyFrameCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpClientCodec extends ChannelHandlerAppender {, +        add(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders));, +        add(new Encoder());, +    private Decoder decoder() {, +        return handlerAt(0);, +    }, +, +    public void setSingleDecode(boolean singleDecode) {, +        decoder().setSingleDecode(singleDecode);, +    }, +, +    public boolean isSingleDecode() {, +        return decoder().isSingleDecode();, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpServerCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class SpdyFrameCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class SpdyHttpCodec extends ChannelHandlerAppender {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import io.netty.channel.ChannelHandlerAppender;, +public final class HttpClientCodec extends ChannelHandlerAppender {, +        add(new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize, validateHeaders));, +        add(new Encoder());, +    private Decoder decoder() {, +        return handlerAt(0);, +    }, +, +    public void setSingleDecode(boolean singleDecode) {, +        decoder().setSingleDecode(singleDecode);, +    }, +, +    public boolean isSingleDecode() {]