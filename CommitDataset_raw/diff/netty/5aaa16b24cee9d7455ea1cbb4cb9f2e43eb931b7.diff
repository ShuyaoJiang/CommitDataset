[+++ b/handler/src/test/java/io/netty/handler/ssl/CipherSuiteCanaryTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version, + * 2.0 (the "License"); you may not use this file except in compliance with the, + * License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +, +package io.netty.handler.ssl;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.DefaultEventLoopGroup;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.local.LocalAddress;, +import io.netty.channel.local.LocalChannel;, +import io.netty.channel.local.LocalServerChannel;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.concurrent.Promise;, +, +import java.net.SocketAddress;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.AfterClass;, +import org.junit.Assume;, +import org.junit.BeforeClass;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +, +import static org.junit.Assert.assertTrue;, +, +/**, + * The purpose of this unit test is to act as a canary and catch changes in supported cipher suites., + */, +@RunWith(Parameterized.class), +public class CipherSuiteCanaryTest {, +, +    private static EventLoopGroup GROUP;, +, +    private static SelfSignedCertificate CERT;, +, +    @Parameters(name = "{index}: serverSslProvider = {0}, clientSslProvider = {1}, rfcCipherName = {2}"), +    public static Collection<Object[]> parameters() {, +       List<Object[]> dst = new ArrayList<Object[]>();, +       dst.addAll(expand("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256")); // DHE-RSA-AES128-GCM-SHA256, +       return dst;, +    }, +, +    @BeforeClass, +    public static void init() throws Exception {, +        GROUP = new DefaultEventLoopGroup();, +        CERT = new SelfSignedCertificate();, +    }, +, +    @AfterClass, +    public static void destory() {, +        GROUP.shutdownGracefully();, +        CERT.delete();, +    }, +, +    private final SslProvider serverSslProvider;, +, +    private final SslProvider clientSslProvider;, +, +    private final String rfcCipherName;, +, +    public CipherSuiteCanaryTest(SslProvider serverSslProvider, SslProvider clientSslProvider, String rfcCipherName) {, +        this.serverSslProvider = serverSslProvider;, +        this.clientSslProvider = clientSslProvider;, +        this.rfcCipherName = rfcCipherName;, +    }, +, +    @Test, +    public void testHandshake() throws Exception {, +        Assume.assumeTrue("Unsupported cipher: " + rfcCipherName, OpenSsl.isCipherSuiteAvailable(rfcCipherName));]