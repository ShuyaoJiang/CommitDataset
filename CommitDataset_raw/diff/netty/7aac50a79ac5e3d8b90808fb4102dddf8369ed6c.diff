[+++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.util.internal;, +, +/**, + * Math utility methods., + */, +public final class MathUtil {, +, +    private MathUtil() {, +    }, +, +    /**, +     * Fast method of finding the next power of 2 greater than or equal to the supplied value., +     *, +     * If the value is {@code <= 0} then 1 will be returned., +     *, +     * This method is not suitable for {@link Integer#MIN_VALUE} or numbers greater than 2^30.*, +     * @param value from which to search for next power of 2, +     * @return The next power of 2 or the value itself if it is a power of 2, +     */, +    public static int findNextPositivePowerOfTwo(final int value) {, +        assert value > Integer.MIN_VALUE && value < 0x40000000;, +        return 1 << (32 - Integer.numberOfLeadingZeros(value - 1));, +    }, +}, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.util.internal;, +, +/**, + * Math utility methods., + */, +public final class MathUtil {, +, +    private MathUtil() {, +    }, +, +    /**, +     * Fast method of finding the next power of 2 greater than or equal to the supplied value., +     *, +     * If the value is {@code <= 0} then 1 will be returned., +     *, +     * This method is not suitable for {@link Integer#MIN_VALUE} or numbers greater than 2^30.*, +     * @param value from which to search for next power of 2, +     * @return The next power of 2 or the value itself if it is a power of 2, +     */, +    public static int findNextPositivePowerOfTwo(final int value) {, +        assert value > Integer.MIN_VALUE && value < 0x40000000;, +        return 1 << (32 - Integer.numberOfLeadingZeros(value - 1));, +    }, +}, +++ b/common/src/main/templates/io/netty/util/collection/KObjectHashMap.template, +import static io.netty.util.internal.MathUtil.findNextPositivePowerOfTwo;, +, +    public static final int DEFAULT_CAPACITY = 8;, +    private int mask;, +        int capacity = findNextPositivePowerOfTwo(initialCapacity);, +        mask = capacity - 1;, +        return new AbstractCollection<V>() {, +        return hashCode(key) & mask;, +            if(keys.length == Integer.MAX_VALUE) {, +                throw new IllegalStateException("Max capacity reached at size=" + size);, +            // Double the capacity., +            rehash(keys.length << 1);, +        }, +        mask = newCapacity - 1;]