[+++ b/src/main/java/org/jboss/netty/channel/Channels.java, +                new DefaultWriteCompletionEvent(channel, (long) amount));, +    }, +, +    /**, +     * Sends a {@code "writeComplete"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel}., +     */, +    public static void fireWriteComplete(Channel channel, long amount) {, +        if (amount == 0) {, +            return;, +        }, +, +        channel.getPipeline().sendUpstream(, +        ctx.sendUpstream(new DefaultWriteCompletionEvent(ctx.getChannel(), (long) amount));, +     * Sends a {@code "writeComplete"} event to the, +     * {@link ChannelUpstreamHandler} which is placed in the closest upstream, +     * from the handler associated with the specified, +     * {@link ChannelHandlerContext}., +     */, +    public static void fireWriteComplete(ChannelHandlerContext ctx, long amount) {, +        ctx.sendUpstream(new DefaultWriteCompletionEvent(ctx.getChannel(), amount));, +    }, +    /**, +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +                new DefaultWriteCompletionEvent(channel, (long) amount));, +    }, +, +    /**, +     * Sends a {@code "writeComplete"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel}., +     */, +    public static void fireWriteComplete(Channel channel, long amount) {, +        if (amount == 0) {, +            return;, +        }, +, +        channel.getPipeline().sendUpstream(, +        ctx.sendUpstream(new DefaultWriteCompletionEvent(ctx.getChannel(), (long) amount));, +     * Sends a {@code "writeComplete"} event to the, +     * {@link ChannelUpstreamHandler} which is placed in the closest upstream, +     * from the handler associated with the specified, +     * {@link ChannelHandlerContext}., +     */, +    public static void fireWriteComplete(ChannelHandlerContext ctx, long amount) {, +        ctx.sendUpstream(new DefaultWriteCompletionEvent(ctx.getChannel(), amount));, +    }, +    /**, +++ b/src/main/java/org/jboss/netty/channel/DefaultFileRegion.java, +package org.jboss.netty.channel;, +, +import java.io.IOException;, +import java.nio.channels.FileChannel;, +import java.nio.channels.WritableByteChannel;, +, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +, +public class DefaultFileRegion implements FileRegion {, +, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultFileRegion.class);, +, +    private final FileChannel file;, +    private final long position;, +    private final long count;, +, +    public DefaultFileRegion(FileChannel file, long position, long count) {, +        this.file = file;, +        this.position = position;, +        this.count = count;, +    }, +, +    public long getPosition() {, +        return position;, +    }, +, +    public long getCount() {, +        return count;, +    }, +, +    public long transferTo(WritableByteChannel target) throws IOException {, +        return file.transferTo(position, count, target);, +    }, +, +    public void releaseExternalResources() {, +        try {, +            file.close();, +        } catch (IOException e) {, +            logger.warn("Failed to close a file.", e);, +        }, +    }, +}, +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +                new DefaultWriteCompletionEvent(channel, (long) amount));, +    }, +, +    /**, +     * Sends a {@code "writeComplete"} event to the first]