[+++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        final int length = bytes.length();, +        final int remainingBytes = length & 7;, +        if (length >= 32) {, +            for (int i = length - 8; i >= remainingBytes; i -= 8) {, +        } else if (length >= 8) {, +            hash = hashCodeAsciiCompute(bytes, length - 8, hash);, +            if (length >= 16) {, +                hash = hashCodeAsciiCompute(bytes, length - 16, hash);, +                if (length >= 24) {, +                    hash = hashCodeAsciiCompute(bytes, length - 24, hash);, +            }, +        }, +        if (remainingBytes == 0) {, +        int offset = 0;, +        if (remainingBytes != 2 & remainingBytes != 4 & remainingBytes != 6) { // 1, 3, 5, 7, +            hash = hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0));, +            offset = 1;, +        }, +        if (remainingBytes != 1 & remainingBytes != 4 & remainingBytes != 5) { // 2, 3, 6, 7, +            hash = hash * (offset == 0 ? HASH_CODE_C1 : HASH_CODE_C2), +                    + hashCodeAsciiSanitize(hashCodeAsciiSanitizeShort(bytes, offset));, +            offset += 2;, +        }, +        if (remainingBytes >= 4) { // 4, 5, 6, 7, +            return hash * ((offset == 0 | offset == 3) ? HASH_CODE_C1 : HASH_CODE_C2), +                    + hashCodeAsciiSanitizeInt(bytes, offset);, +        }, +        return hash;, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent.java, +        final int length = bytes.length();, +        final int remainingBytes = length & 7;, +        if (length >= 32) {, +            for (int i = length - 8; i >= remainingBytes; i -= 8) {, +        } else if (length >= 8) {, +            hash = hashCodeAsciiCompute(bytes, length - 8, hash);, +            if (length >= 16) {, +                hash = hashCodeAsciiCompute(bytes, length - 16, hash);, +                if (length >= 24) {, +                    hash = hashCodeAsciiCompute(bytes, length - 24, hash);, +            }, +        }, +        if (remainingBytes == 0) {, +        int offset = 0;, +        if (remainingBytes != 2 & remainingBytes != 4 & remainingBytes != 6) { // 1, 3, 5, 7, +            hash = hash * HASH_CODE_C1 + hashCodeAsciiSanitizeByte(bytes.charAt(0));, +            offset = 1;, +        }, +        if (remainingBytes != 1 & remainingBytes != 4 & remainingBytes != 5) { // 2, 3, 6, 7, +            hash = hash * (offset == 0 ? HASH_CODE_C1 : HASH_CODE_C2), +                    + hashCodeAsciiSanitize(hashCodeAsciiSanitizeShort(bytes, offset));, +            offset += 2;, +        }, +        if (remainingBytes >= 4) { // 4, 5, 6, 7, +            return hash * ((offset == 0 | offset == 3) ? HASH_CODE_C1 : HASH_CODE_C2), +                    + hashCodeAsciiSanitizeInt(bytes, offset);, +        }, +        return hash;, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +        final long baseOffset1 = BYTE_ARRAY_BASE_OFFSET + startPos1;, +        final long diff = startPos2 - startPos1;, +        if (length >= 8) {, +            for (long i = baseOffset1 - 8 + length; i >= end; i -= 8) {, +                if (UNSAFE.getLong(bytes1, i) != UNSAFE.getLong(bytes2, i + diff)) {, +        }, +            long pos = baseOffset1 + remainingBytes;, +            if (UNSAFE.getInt(bytes1, pos) != UNSAFE.getInt(bytes2, pos + diff)) {, +        final long baseOffset2 = baseOffset1 + diff;, +                    (remainingBytes == 2 ||, +                    UNSAFE.getByte(bytes1, baseOffset1 + 2) == UNSAFE.getByte(bytes2, baseOffset2 + 2));, +        return remainingBytes == 0 ||, +                UNSAFE.getByte(bytes1, baseOffset1) == UNSAFE.getByte(bytes2, baseOffset2);, +        long remainingBytes = length & 7;, +        final long diff = startPos2 - startPos1;, +        for (long i = baseOffset1 - 8 + length; i >= end; i -= 8) {, +            result |= UNSAFE.getLong(bytes1, i) ^ UNSAFE.getLong(bytes2, i + diff);, +        if (remainingBytes >= 4) {, +            result |= UNSAFE.getInt(bytes1, baseOffset1) ^ UNSAFE.getInt(bytes2, baseOffset1 + diff);, +            remainingBytes -= 4;, +        }, +        if (remainingBytes >= 2) {, +            long pos = end - remainingBytes;, +            result |= UNSAFE.getChar(bytes1, pos) ^ UNSAFE.getChar(bytes2, pos + diff);, +            remainingBytes -= 2;, +        }, +        if (remainingBytes == 1) {, +            long pos = end - 1;, +            result |= UNSAFE.getByte(bytes1, pos) ^ UNSAFE.getByte(bytes2, pos + diff);, +        }, +        long baseOffset = BYTE_ARRAY_BASE_OFFSET + startPos;, +        if (remainingBytes == 0) {, +        int hcConst = HASH_CODE_C1;, +        if (remainingBytes != 2 & remainingBytes != 4 & remainingBytes != 6) { // 1, 3, 5, 7, +            hash = hash * HASH_CODE_C1 + hashCodeAsciiSanitize(UNSAFE.getByte(bytes, baseOffset));, +            hcConst = HASH_CODE_C2;, +            baseOffset++;, +        }, +        if (remainingBytes != 1 & remainingBytes != 4 & remainingBytes != 5) { // 2, 3, 6, 7, +            hash = hash * hcConst + hashCodeAsciiSanitize(UNSAFE.getShort(bytes, baseOffset));, +            hcConst = hcConst == HASH_CODE_C1 ? HASH_CODE_C2 : HASH_CODE_C1;]