[+++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, +++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * <h3>State management</h3>, + *, + * Please refer to {@link ChannelHandler}., + *, +++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +     * one-time client-side or connectionless channel) or <b>2)</b> all handlers, +     * in the pipeline is stateless.  You have to use, +     * pipeline contains a stateful {@link ChannelHandler} and <b>2)</b> one or, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * <h3>State management</h3>, + *, + * Please refer to {@link ChannelHandler}., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, +import org.jboss.netty.bootstrap.Bootstrap;, +, + * <h3>State management</h3>, + *, + * A {@link ChannelHandler} often needs to store some stateful information., + * The simplest and recommended approach is to use member variables:, + * <pre>, + * public class DataServerHandler extends SimpleChannelHandler {, + *, + *     <b>private boolean loggedIn;</b>, + *, + *     public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {, + *         Channel ch = e.getChannel();, + *         Object o = e.getMessage();, + *         if (o instanceof LoginMessage) {, + *             authenticate((LoginMessage) o);, + *             <b>loggedIn = true;</b>, + *         } else (o instanceof GetDataMessage) {, + *             if (<b>loggedIn</b>) {, + *                 ch.write(fetchSecret((GetDataMessage) o));, + *             } else {, + *                 fail();, + *             }, + *         }, + *     }, + *     ..., + * }, + * </pre>, + * Because the handler instance has a state variable which is dedicated to, + * one connection, you have to create a new handler instance for each new, + * channel to avoid a race condition where a unauthenticated client can get, + * the confidential information:, + * <pre>, + * // Create a new handler instance per channel.]