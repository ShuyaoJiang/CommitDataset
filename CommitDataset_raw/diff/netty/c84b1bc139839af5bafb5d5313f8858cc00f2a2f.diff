[+++ b/src/main/java/org/jboss/netty/util/MapUtil.java, +    @SuppressWarnings("unchecked"), +    public static boolean isOrderedMap(Map<?, ?> map) {, +        Class<?> mapType = map.getClass();, +        Map newMap;, +            newMap = (Map) mapType.newInstance();, +        List<String> expectedKeys = new ArrayList<String>();, +        String dummyValue = "dummyValue";, +        for (int i = 0; i < 10000; i ++) {, +            String key;, +                key = String.valueOf(rand.nextInt());, +            } while (newMap.containsKey(key));, +            newMap.put(key, dummyValue);, +            expectedKeys.add(key);, +            Iterator<String> it = expectedKeys.iterator();, +            for (Object actualKey: newMap.keySet()) {, +                if (!it.next().equals(actualKey)) {, +++ b/src/main/java/org/jboss/netty/util/MapUtil.java, +    @SuppressWarnings("unchecked"), +    public static boolean isOrderedMap(Map<?, ?> map) {, +        Class<?> mapType = map.getClass();, +        Map newMap;, +            newMap = (Map) mapType.newInstance();, +        List<String> expectedKeys = new ArrayList<String>();, +        String dummyValue = "dummyValue";, +        for (int i = 0; i < 10000; i ++) {, +            String key;, +                key = String.valueOf(rand.nextInt());, +            } while (newMap.containsKey(key));, +            newMap.put(key, dummyValue);, +            expectedKeys.add(key);, +            Iterator<String> it = expectedKeys.iterator();, +            for (Object actualKey: newMap.keySet()) {, +                if (!it.next().equals(actualKey)) {, +++ b/src/test/java/org/jboss/netty/bootstrap/BootstrapTest.java, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.SilentLoggerFactory;, +        InternalLoggerFactory.setDefaultFactory(new SilentLoggerFactory());, +++ b/src/main/java/org/jboss/netty/util/MapUtil.java, +    @SuppressWarnings("unchecked"), +    public static boolean isOrderedMap(Map<?, ?> map) {, +        Class<?> mapType = map.getClass();, +        Map newMap;, +            newMap = (Map) mapType.newInstance();, +        List<String> expectedKeys = new ArrayList<String>();, +        String dummyValue = "dummyValue";, +        for (int i = 0; i < 10000; i ++) {, +            String key;, +                key = String.valueOf(rand.nextInt());, +            } while (newMap.containsKey(key));, +            newMap.put(key, dummyValue);, +            expectedKeys.add(key);, +            Iterator<String> it = expectedKeys.iterator();, +            for (Object actualKey: newMap.keySet()) {, +                if (!it.next().equals(actualKey)) {, +++ b/src/test/java/org/jboss/netty/bootstrap/BootstrapTest.java, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.SilentLoggerFactory;, +        InternalLoggerFactory.setDefaultFactory(new SilentLoggerFactory());, +++ b/src/test/java/org/jboss/netty/util/MapUtilTest.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.util;, +, +import static org.junit.Assert.*;, +, +import java.util.AbstractMap;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Set;, +, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com)]