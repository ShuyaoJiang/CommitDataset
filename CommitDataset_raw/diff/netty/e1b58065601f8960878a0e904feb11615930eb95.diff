[+++ b/src/main/java/org/jboss/netty/channel/AbstractServerChannel.java, +++ b/src/main/java/org/jboss/netty/channel/AbstractServerChannel.java, +++ b/src/main/java/org/jboss/netty/channel/local/AbstractLocalChannel.java, +/*, + * JBoss, Home of Professional Open Source, + * Copyright 2005-2008, Red Hat Middleware LLC, and individual contributors, + * by the @authors tag. See the copyright.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel.local;, +, +import static org.jboss.netty.channel.Channels.*;, +, +import java.nio.channels.ClosedChannelException;, +import java.nio.channels.NotYetConnectedException;, +import java.util.Queue;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.jboss.netty.channel.AbstractChannel;, +import org.jboss.netty.channel.ChannelConfig;, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.channel.ChannelSink;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.util.LinkedTransferQueue;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Andy Taylor (andy.taylor@jboss.org), + * @author Trustin Lee (tlee@redhat.com), + * @version $Rev$, $Date$, + */, +class AbstractLocalChannel extends AbstractChannel {, +    private final ThreadLocal<Boolean> delivering = new ThreadLocal<Boolean>() {, +        @Override, +        protected Boolean initialValue() {, +            return false;, +        }, +    };, +, +    volatile AbstractLocalChannel pairedChannel;, +    volatile LocalAddress localAddress;, +    volatile LocalAddress remoteAddress;, +    final AtomicBoolean bound = new AtomicBoolean();, +    private final LocalChannelConfig config;, +    final Queue<MessageEvent> writeBuffer = new LinkedTransferQueue<MessageEvent>();, +, +    AbstractLocalChannel(LocalServerChannel parent, ChannelFactory factory, ChannelPipeline pipeline, ChannelSink sink, AbstractLocalChannel pairedChannel) {, +        super(parent, factory, pipeline, sink);, +        this.pairedChannel = pairedChannel;, +        config = new LocalChannelConfig();, +        fireChannelOpen(this);, +    }, +, +    public ChannelConfig getConfig() {, +        return config;, +    }, +, +    public boolean isBound() {, +        return isOpen() && bound.get();, +    }, +, +    public boolean isConnected() {, +        return localAddress != null && remoteAddress != null;, +    }, +, +    public LocalAddress getLocalAddress() {, +        return isBound()? localAddress : null;, +    }, +, +    public LocalAddress getRemoteAddress() {, +        return remoteAddress;, +    }, +, +    void closeNow(ChannelFuture future) {, +        LocalAddress localAddress = this.localAddress;, +        try {, +            // Close the self., +            if (!setClosed()) {, +                future.setSuccess();, +                return;, +            }, +, +            AbstractLocalChannel pairedChannel = this.pairedChannel;]