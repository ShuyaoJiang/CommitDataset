[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * more in detail.  Also, please refer to the {@link ChannelPipeline}, + * documentation to find out how an event flows in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * more in detail.  Also, please refer to the {@link ChannelPipeline}, + * documentation to find out how an event flows in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import org.jboss.netty.channel.group.ChannelGroup;, + * <li>close all channels created by the factory and their child channels, + *     usually using {@link ChannelGroup#close()}, and</li>, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes, such as, + * {@link NioServerSocketChannelFactory}., + *, + * @apiviz.exclude ^org\.jboss\.netty\.channel\.([a-z]+\.)+.*ChannelFactory$, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * more in detail.  Also, please refer to the {@link ChannelPipeline}, + * documentation to find out how an event flows in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import org.jboss.netty.channel.group.ChannelGroup;, + * <li>close all channels created by the factory and their child channels, + *     usually using {@link ChannelGroup#close()}, and</li>, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes, such as, + * {@link NioServerSocketChannelFactory}., + *, + * @apiviz.exclude ^org\.jboss\.netty\.channel\.([a-z]+\.)+.*ChannelFactory$, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, + * In the example above, the class whose name starts with {@code Upstream} means, + * it is an upstream handler.  The class whose name starts with, + * {@code Downstream} means it is a downstream handler., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * more in detail.  Also, please refer to the {@link ChannelPipeline}, + * documentation to find out how an event flows in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, +import org.jboss.netty.channel.group.ChannelGroup;, + * <li>close all channels created by the factory and their child channels, + *     usually using {@link ChannelGroup#close()}, and</li>, + * please refer to the Javadoc of {@link ChannelFactory}'s subtypes, such as, + * {@link NioServerSocketChannelFactory}., + *, + * @apiviz.exclude ^org\.jboss\.netty\.channel\.([a-z]+\.)+.*ChannelFactory$, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, + * In the example above, the class whose name starts with {@code Upstream} means, + * it is an upstream handler.  The class whose name starts with, + * {@code Downstream} means it is a downstream handler., +++ b/src/main/java/org/jboss/netty/channel/ChannelUpstreamHandler.java, + * refer to the {@link ChannelEvent} and {@link ChannelPipeline} documentation, + * to find out what an upstream event and a downstream event are, what, + * fundamental differences they have, and how they flow in a pipeline., + * (upstream) although it is legal to sent the event to the previous handler, + * (downstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * to the {@link ChannelEvent} and {@link ChannelPipeline} documentation to find, + * out what an upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., + * handler (downstream) although it is legal to pass the event to the next, + * handler (upstream):, + *, + * @apiviz.exclude ^org\.jboss\.netty\.handler\..*$]