[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +     * Manages the {@link DnsQueryContext}s in progress and their query IDs., +    final DnsQueryContextManager queryContextManager = new DnsQueryContextManager();, +                final DnsQueryContext qCtx = queryContextManager.get(res.sender(), queryId);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +     * Manages the {@link DnsQueryContext}s in progress and their query IDs., +    final DnsQueryContextManager queryContextManager = new DnsQueryContextManager();, +                final DnsQueryContext qCtx = queryContextManager.get(res.sender(), queryId);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContext.java, +        id = parent.queryContextManager.add(this);, +, +    InetSocketAddress nameServerAddr() {, +        return nameServerAddr;, +    DnsQuestion question() {, +        return question;, +        final DnsQuestion question = question();, +        final InetSocketAddress nameServerAddr = nameServerAddr();, +        final DnsResponse res = envelope.content();, +        if (!question().equals(res.recordAt(DnsSection.QUESTION))) {, +        parent.queryContextManager.remove(nameServerAddr(), id);, +        final InetSocketAddress nameServerAddr = nameServerAddr();, +        parent.queryContextManager.remove(nameServerAddr, id);, +            e = new DnsNameResolverException(nameServerAddr, question(), buf.toString(), cause);, +            e = new DnsNameResolverException(nameServerAddr, question(), buf.toString());, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +     * Manages the {@link DnsQueryContext}s in progress and their query IDs., +    final DnsQueryContextManager queryContextManager = new DnsQueryContextManager();, +                final DnsQueryContext qCtx = queryContextManager.get(res.sender(), queryId);, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContext.java, +        id = parent.queryContextManager.add(this);, +, +    InetSocketAddress nameServerAddr() {, +        return nameServerAddr;, +    DnsQuestion question() {, +        return question;, +        final DnsQuestion question = question();, +        final InetSocketAddress nameServerAddr = nameServerAddr();, +        final DnsResponse res = envelope.content();, +        if (!question().equals(res.recordAt(DnsSection.QUESTION))) {, +        parent.queryContextManager.remove(nameServerAddr(), id);, +        final InetSocketAddress nameServerAddr = nameServerAddr();, +        parent.queryContextManager.remove(nameServerAddr, id);, +            e = new DnsNameResolverException(nameServerAddr, question(), buf.toString(), cause);, +            e = new DnsNameResolverException(nameServerAddr, question(), buf.toString());, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContextManager.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.resolver.dns;, +, +import io.netty.util.NetUtil;, +import io.netty.util.collection.IntObjectHashMap;, +import io.netty.util.collection.IntObjectMap;, +import io.netty.util.internal.ThreadLocalRandom;, +, +import java.net.Inet4Address;, +import java.net.Inet6Address;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.net.UnknownHostException;, +import java.util.HashMap;, +import java.util.Map;, +, +final class DnsQueryContextManager {, +, +    /**, +     * A map whose key is the DNS server address and value is the map of the DNS query ID and its corresponding, +     * {@link DnsQueryContext}., +     */, +    final Map<InetSocketAddress, IntObjectMap<DnsQueryContext>> map =, +            new HashMap<InetSocketAddress, IntObjectMap<DnsQueryContext>>();, +, +    int add(DnsQueryContext qCtx) {, +        final IntObjectMap<DnsQueryContext> contexts = getOrCreateContextMap(qCtx.nameServerAddr());, +, +        int id = ThreadLocalRandom.current().nextInt(1, 65536);, +        final int maxTries = 65535 << 1;, +        int tries = 0;, +, +        synchronized (contexts) {, +            for (;;) {, +                if (!contexts.containsKey(id)) {, +                    contexts.put(id, qCtx);, +                    return id;]