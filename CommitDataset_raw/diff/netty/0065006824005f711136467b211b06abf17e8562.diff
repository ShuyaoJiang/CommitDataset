[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentEncoderTest.java, +    public void testChunkedContentWithTrailingHeader() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new TestEncoder());, +        ch.writeInbound(new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"));, +, +        HttpResponse res = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        res.headers().set(Names.TRANSFER_ENCODING, Values.CHUNKED);, +        ch.writeOutbound(res);, +, +        assertEncodedResponse(ch);, +, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[3])));, +        ch.writeOutbound(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[2])));, +        LastHttpContent content = new DefaultLastHttpContent(Unpooled.wrappedBuffer(new byte[1]));, +        content.trailingHeaders().set("X-Test", "Netty");, +        ch.writeOutbound(content);, +, +        HttpContent chunk;, +        chunk = (HttpContent) ch.readOutbound();, +        assertThat(chunk.content().toString(CharsetUtil.US_ASCII), is("3"));, +        chunk = (HttpContent) ch.readOutbound();, +        assertThat(chunk.content().toString(CharsetUtil.US_ASCII), is("2"));, +        chunk = (HttpContent) ch.readOutbound();, +        assertThat(chunk.content().toString(CharsetUtil.US_ASCII), is("1"));, +, +        assertThat(chunk, is(instanceOf(HttpContent.class)));, +        chunk = (HttpContent) ch.readOutbound();, +        assertThat(chunk.content().isReadable(), is(false));, +        assertThat(chunk, is(instanceOf(LastHttpContent.class)));, +        assertEquals("Netty", ((LastHttpContent) chunk).trailingHeaders().get("X-Test"));, +        assertThat(ch.readOutbound(), is(nullValue()));, +    }, +, +    @Test, +    @Test, +    public void testEmptyFullContentWithTrailer() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new TestEncoder());, +        ch.writeInbound(new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/"));, +, +        FullHttpResponse res = new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.EMPTY_BUFFER);, +        res.trailingHeaders().set("X-Test", "Netty");, +        ch.writeOutbound(res);, +, +        Object o = ch.readOutbound();, +        assertThat(o, is(instanceOf(FullHttpResponse.class)));, +, +        res = (FullHttpResponse) o;, +        assertThat(res.headers().get(Names.TRANSFER_ENCODING), is(nullValue()));, +, +        // Content encoding shouldn't be modified., +        assertThat(res.headers().get(Names.CONTENT_ENCODING), is(nullValue()));, +        assertThat(res.content().readableBytes(), is(0));, +        assertThat(res.content().toString(CharsetUtil.US_ASCII), is(""));, +        assertEquals("Netty", res.trailingHeaders().get("X-Test"));, +        assertThat(ch.readOutbound(), is(nullValue()));, +    }, +]