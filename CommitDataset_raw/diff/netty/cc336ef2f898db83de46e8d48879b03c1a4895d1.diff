[+++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeDecoder.java, +import java.util.List;, +import java.util.Locale;, +, +    private final boolean validateHeaders;, +    public StompSubframeDecoder(boolean validateHeaders) {, +        this(DEFAULT_MAX_LINE_LENGTH, DEFAULT_CHUNK_SIZE, validateHeaders);, +    }, +, +        this(maxLineLength, maxChunkSize, false);, +    }, +, +    public StompSubframeDecoder(int maxLineLength, int maxChunkSize, boolean validateHeaders) {, +        this.validateHeaders = validateHeaders;, +                    if (contentLength >= 0) {, +                } else if (validateHeaders) {, +                    throw new IllegalArgumentException("a header value or name contains a prohibited character ':'" +, +                            ", " + line);, +                    contentLength = getContentLength(headers, 0);, +                    if (contentLength == 0) {, +++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeDecoder.java, +import java.util.List;, +import java.util.Locale;, +, +    private final boolean validateHeaders;, +    public StompSubframeDecoder(boolean validateHeaders) {, +        this(DEFAULT_MAX_LINE_LENGTH, DEFAULT_CHUNK_SIZE, validateHeaders);, +    }, +, +        this(maxLineLength, maxChunkSize, false);, +    }, +, +    public StompSubframeDecoder(int maxLineLength, int maxChunkSize, boolean validateHeaders) {, +        this.validateHeaders = validateHeaders;, +                    if (contentLength >= 0) {, +                } else if (validateHeaders) {, +                    throw new IllegalArgumentException("a header value or name contains a prohibited character ':'" +, +                            ", " + line);, +                    contentLength = getContentLength(headers, 0);, +                    if (contentLength == 0) {, +++ b/codec-stomp/src/test/java/io/netty/handler/codec/stomp/StompSubframeDecoderTest.java, +import static io.netty.handler.codec.stomp.StompTestConstants.FRAME_WITH_INVALID_HEADER;, +import static io.netty.util.CharsetUtil.US_ASCII;, +import static io.netty.util.CharsetUtil.UTF_8;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +        String s = content.content().toString(UTF_8);, +        String s = content.content().toString(UTF_8);, +        String s = content.content().toString(UTF_8);, +        s = content.content().toString(UTF_8);, +        s = content.content().toString(UTF_8);, +        s = content.content().toString(UTF_8);, +, +    @Test, +    public void testValidateHeadersDecodingDisabled() {, +        ByteBuf invalidIncoming = Unpooled.copiedBuffer(FRAME_WITH_INVALID_HEADER.getBytes(US_ASCII));, +        assertTrue(channel.writeInbound(invalidIncoming));, +, +        StompHeadersSubframe frame = channel.readInbound();, +        assertNotNull(frame);, +        assertEquals(StompCommand.SEND, frame.command());, +        assertTrue(frame.headers().contains("destination"));, +        assertTrue(frame.headers().contains("content-type"));, +        assertFalse(frame.headers().contains("current-time"));, +, +        StompContentSubframe content = channel.readInbound();, +        String s = content.content().toString(UTF_8);, +        assertEquals("some body", s);, +        content.release();, +    }, +, +    @Test, +    public void testValidateHeadersDecodingEnabled() {, +        channel = new EmbeddedChannel(new StompSubframeDecoder(true));, +, +        ByteBuf invalidIncoming = Unpooled.copiedBuffer(FRAME_WITH_INVALID_HEADER.getBytes(US_ASCII));, +        assertTrue(channel.writeInbound(invalidIncoming));, +, +        StompHeadersSubframe frame = channel.readInbound();, +        assertNotNull(frame);, +        assertTrue(frame.decoderResult().isFailure());, +        assertEquals("a header value or name contains a prohibited character ':', current-time:2000-01-01T00:00:00",, +                frame.decoderResult().cause().getMessage());, +    }, +++ b/codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeDecoder.java, +import java.util.List;, +import java.util.Locale;, +, +    private final boolean validateHeaders;, +    public StompSubframeDecoder(boolean validateHeaders) {, +        this(DEFAULT_MAX_LINE_LENGTH, DEFAULT_CHUNK_SIZE, validateHeaders);, +    }, +, +        this(maxLineLength, maxChunkSize, false);, +    }, +]