[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import java.util.Collection;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +    @Override, +    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException {, +        throwIfInEventLoop("invokeAny");, +        return super.invokeAny(tasks);, +    }, +, +    @Override, +    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit), +            throws InterruptedException, ExecutionException, TimeoutException {, +        throwIfInEventLoop("invokeAny");, +        return super.invokeAny(tasks, timeout, unit);, +    }, +, +    @Override, +    public <T> List<java.util.concurrent.Future<T>> invokeAll(Collection<? extends Callable<T>> tasks), +            throws InterruptedException {, +        throwIfInEventLoop("invokeAll");, +        return super.invokeAll(tasks);, +    }, +, +    @Override, +    public <T> List<java.util.concurrent.Future<T>> invokeAll(, +            Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException {, +        throwIfInEventLoop("invokeAll");, +        return super.invokeAll(tasks, timeout, unit);, +    }, +, +    private void throwIfInEventLoop(String method) {, +        if (inEventLoop()) {, +            throw new RejectedExecutionException("Calling " + method + " from within the EventLoop is not allowed");, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import java.util.Collection;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +    @Override, +    public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException {, +        throwIfInEventLoop("invokeAny");, +        return super.invokeAny(tasks);, +    }, +, +    @Override, +    public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit), +            throws InterruptedException, ExecutionException, TimeoutException {, +        throwIfInEventLoop("invokeAny");, +        return super.invokeAny(tasks, timeout, unit);, +    }, +, +    @Override, +    public <T> List<java.util.concurrent.Future<T>> invokeAll(Collection<? extends Callable<T>> tasks), +            throws InterruptedException {, +        throwIfInEventLoop("invokeAll");, +        return super.invokeAll(tasks);, +    }, +, +    @Override, +    public <T> List<java.util.concurrent.Future<T>> invokeAll(, +            Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException {, +        throwIfInEventLoop("invokeAll");, +        return super.invokeAll(tasks, timeout, unit);, +    }, +, +    private void throwIfInEventLoop(String method) {, +        if (inEventLoop()) {, +            throw new RejectedExecutionException("Calling " + method + " from within the EventLoop is not allowed");, +        }, +    }, +, +++ b/common/src/test/java/io/netty/util/concurrent/SingleThreadEventExecutorTest.java, +import java.util.Collections;, +import java.util.Set;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.RejectedExecutionException;, +import java.util.concurrent.TimeUnit;, +, +    @Test(expected = RejectedExecutionException.class, timeout = 3000), +    public void testInvokeAnyInEventLoop() {, +        testInvokeInEventLoop(true, false);, +    }, +, +    @Test(expected = RejectedExecutionException.class, timeout = 3000), +    public void testInvokeAnyInEventLoopWithTimeout() {, +        testInvokeInEventLoop(true, true);, +    }, +, +    @Test(expected = RejectedExecutionException.class, timeout = 3000), +    public void testInvokeAllInEventLoop() {, +        testInvokeInEventLoop(false, false);, +    }, +, +    @Test(expected = RejectedExecutionException.class, timeout = 3000)]