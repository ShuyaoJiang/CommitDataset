[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketShutdownOutputBySelfTest.java, +import java.net.SocketException;, +import java.nio.channels.ClosedChannelException;, +    @Test(timeout = 30000), +    public void testShutdownOutputAfterClosed() throws Throwable {, +        run();, +    }, +, +    public void testShutdownOutputAfterClosed(Bootstrap cb) throws Throwable {, +        TestHandler h = new TestHandler();, +        ServerSocket ss = new ServerSocket();, +        Socket s = null;, +        try {, +            ss.bind(addr);, +            SocketChannel ch = (SocketChannel) cb.handler(h).connect().sync().channel();, +            assertTrue(ch.isActive());, +            s = ss.accept();, +, +            ch.close().syncUninterruptibly();, +            try {, +                ch.shutdownInput().syncUninterruptibly();, +                fail();, +            } catch (Throwable cause) {, +                checkThrowable(cause);, +            }, +            try {, +                ch.shutdownOutput().syncUninterruptibly();, +                fail();, +            } catch (Throwable cause) {, +                checkThrowable(cause);, +            }, +        } finally {, +            if (s != null) {, +                s.close();, +            }, +            ss.close();, +        }, +    }, +, +    private static void checkThrowable(Throwable cause) throws Throwable {, +        // Depending on OIO / NIO both are ok, +        if (!(cause instanceof ClosedChannelException) && !(cause instanceof SocketException)) {, +            throw cause;, +        }, +    }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketShutdownOutputBySelfTest.java, +import java.net.SocketException;, +import java.nio.channels.ClosedChannelException;, +    @Test(timeout = 30000), +    public void testShutdownOutputAfterClosed() throws Throwable {, +        run();, +    }, +, +    public void testShutdownOutputAfterClosed(Bootstrap cb) throws Throwable {, +        TestHandler h = new TestHandler();, +        ServerSocket ss = new ServerSocket();, +        Socket s = null;, +        try {, +            ss.bind(addr);, +            SocketChannel ch = (SocketChannel) cb.handler(h).connect().sync().channel();, +            assertTrue(ch.isActive());, +            s = ss.accept();, +, +            ch.close().syncUninterruptibly();, +            try {, +                ch.shutdownInput().syncUninterruptibly();, +                fail();, +            } catch (Throwable cause) {, +                checkThrowable(cause);, +            }, +            try {, +                ch.shutdownOutput().syncUninterruptibly();, +                fail();, +            } catch (Throwable cause) {, +                checkThrowable(cause);, +            }, +        } finally {, +            if (s != null) {, +                s.close();, +            }, +            ss.close();, +        }, +    }, +, +    private static void checkThrowable(Throwable cause) throws Throwable {, +        // Depending on OIO / NIO both are ok, +        if (!(cause instanceof ClosedChannelException) && !(cause instanceof SocketException)) {, +            throw cause;, +        }, +    }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/Socket.java, +            if (isClosed(oldState)) {, +                throw new ClosedChannelException();, +            }]