[+++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, + * <h3>Building a pipeline</h3>, + * <p>, + * A user is supposed to have one or more {@link ChannelHandler}s in a, + * pipeline to receive I/O events (e.g. read) and to request I/O operations, + * (e.g. write and close).  For example, a typical server will have the following, + * handlers in each channel's pipeline, but your mileage may vary depending on, + * the complexity and characteristics of the protocol and business logic:, + *, + * <ol>, + * <li>Protocol Decoder - translates binary data (e.g. {@link ChannelBuffer}), + *                        into a Java object.</li>, + * <li>Protocol Encoder - translates a Java object into binary data.</li>, + * <li>{@link ExecutionHandler} - applies a thread model.</li>, + * <li>Business Logic Handler - performs the actual business logic, + *                              (e.g. database access).</li>, + * </ol>, + *, + * and it could be represented as shown in the following example:, + *, + * <pre>, + * ChannelPipeline pipeline = {@link Channels#pipeline() Channels.pipeline()};, + * pipeline.addLast("decoder", new MyProtocolDecoder());, + * pipeline.addLast("encoder", new MyProtocolEncoder());, + * pipeline.addLast("executor", new {@link ExecutionHandler}(new {@link OrderedMemoryAwareThreadPoolExecutor}(16, 1048576, 1048576)));, + * pipeline.addLast("handler", new MyBusinessLogicHandler());, + * </pre>, + *, + * <h3>Thread safety</h3>, + * <p>, + * A {@link ChannelHandler} can be added or removed at any time because a, + * {@link ChannelPipeline} is thread safe.  For example, you can insert a, + * {@link SslHandler} when a sensitive information is about to be exchanged,, + * and remove it after the exchange., + *]