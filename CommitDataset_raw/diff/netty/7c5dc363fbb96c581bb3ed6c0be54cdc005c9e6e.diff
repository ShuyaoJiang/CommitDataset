[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +        checkMultiplicity(newCtx);, +        callHandlerAdded(newCtx);, +        checkMultiplicity(newCtx);, +        callHandlerAdded(newCtx);, +        checkMultiplicity(newCtx);, +        callHandlerAdded(newCtx);, +        checkMultiplicity(newCtx);, +        callHandlerAdded(newCtx);, +        callHandlerRemoved(ctx, prev, next);, +        checkMultiplicity(newCtx);, +        callHandlerRemoved(ctx, newCtx, newCtx);, +        callHandlerAdded(newCtx);, +    private static void checkMultiplicity(ChannelHandlerContext ctx) {, +    private void callHandlerAdded(final ChannelHandlerContext ctx) {, +                    callHandlerAdded0(ctx);, +        callHandlerAdded0(ctx);, +    private void callHandlerAdded0(final ChannelHandlerContext ctx) {, +                        ".handlerAdded() has thrown an exception; removed.", t));, +                        ".handlerAdded() has thrown an exception; also failed to remove.", t));, +    private void callHandlerRemoved(, +                    callHandlerRemoved0(ctx, ctxPrev, ctxNext);, +        callHandlerRemoved0(ctx, ctxPrev, ctxNext);, +    private void callHandlerRemoved0(, +        // Finish removal by forwarding buffer content and freeing the buffers., +        } catch (Throwable t) {, +            fireExceptionCaught(new ChannelPipelineException(, +                    "failed to forward buffer content of " + ctx.handler().getClass().getName(), t));, +        }, +, +        // Notify the complete removal., +        try {, +                            ".handlerRemoved() has thrown an exception.", t));]