[+++ b/buffer/src/main/java/io/netty/buffer/AbstractUnpooledSlicedByteBuf.java, +        return unwrap().getCharSequence(idx(index), length, charset);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractUnpooledSlicedByteBuf.java, +        return unwrap().getCharSequence(idx(index), length, charset);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +, +        // Clear the buffer so we are sure the reader and writer indices are 0., +        // This is important as we may return a slice from newBuffer(...)., +        buffer.clear();, +    public void testSetUsAsciiCharSequenceAfterRelease() {, +        testSetCharSequenceAfterRelease0(CharsetUtil.US_ASCII);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testSetIso88591CharSequenceAfterRelease() {, +        testSetCharSequenceAfterRelease0(CharsetUtil.ISO_8859_1);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testSetUtf8CharSequenceAfterRelease() {, +        testSetCharSequenceAfterRelease0(CharsetUtil.UTF_8);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testSetUtf16CharSequenceAfterRelease() {, +        testSetCharSequenceAfterRelease0(CharsetUtil.UTF_16);, +    }, +, +    private void testSetCharSequenceAfterRelease0(Charset charset) {, +        releasedBuffer().setCharSequence(0, "x", charset);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testWriteUsAsciiCharSequenceAfterRelease() {, +        testWriteCharSequenceAfterRelease0(CharsetUtil.US_ASCII);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testWriteIso88591CharSequenceAfterRelease() {, +        testWriteCharSequenceAfterRelease0(CharsetUtil.ISO_8859_1);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testWriteUtf8CharSequenceAfterRelease() {, +        testWriteCharSequenceAfterRelease0(CharsetUtil.UTF_8);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    public void testWriteUtf16CharSequenceAfterRelease() {, +        testWriteCharSequenceAfterRelease0(CharsetUtil.UTF_16);, +    }, +, +    private void testWriteCharSequenceAfterRelease0(Charset charset) {, +        releasedBuffer().writeCharSequence("x", charset);, +    }, +, +    @Test(expected = IllegalReferenceCountException.class), +    @Test, +    public void testSetUsAsciiCharSequence() {, +        testSetGetCharSequence(CharsetUtil.US_ASCII);, +    }, +, +    @Test, +    public void testSetUtf8CharSequence() {, +        testSetGetCharSequence(CharsetUtil.UTF_8);, +    }, +, +    @Test, +    public void testSetIso88591CharSequence() {, +        testSetGetCharSequence(CharsetUtil.ISO_8859_1);, +    }, +, +    @Test, +    public void testSetUtf16CharSequence() {, +        testSetGetCharSequence(CharsetUtil.UTF_16);, +    }, +, +    private void testSetGetCharSequence(Charset charset) {, +        ByteBuf buf = newBuffer(16);, +        String sequence = "AB";, +        int bytes = buf.setCharSequence(1, sequence, charset);, +        assertEquals(sequence, buf.getCharSequence(1, bytes, charset));, +        buf.release();, +    }, +, +    @Test, +    public void testWriteReadUsAsciiCharSequence() {, +        testWriteReadCharSequence(CharsetUtil.US_ASCII);, +    }, +, +    @Test, +    public void testWriteReadUtf8CharSequence() {, +        testWriteReadCharSequence(CharsetUtil.UTF_8);, +    }, +, +    @Test, +    public void testWriteReadIso88591CharSequence() {, +        testWriteReadCharSequence(CharsetUtil.ISO_8859_1);, +    }, +]