[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.tcnative.jni.Buffer;, +import io.netty.tcnative.jni.Library;, +import io.netty.tcnative.jni.SSL;, +import io.netty.tcnative.jni.SSLContext;, +            Class.forName("io.netty.tcnative.jni.SSL", false, OpenSsl.class.getClassLoader());, +                final long sslCtx = SSLContext.make(SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2)) {, +, +    private static boolean doesSupportProtocol(int protocol) {, +            sslCtx = SSLContext.make(protocol, SSL.SSL_MODE_COMBINED);, +    private static boolean initializeTcNative() throws Exception {, +        return Library.initialize();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.tcnative.jni.Buffer;, +import io.netty.tcnative.jni.Library;, +import io.netty.tcnative.jni.SSL;, +import io.netty.tcnative.jni.SSLContext;, +            Class.forName("io.netty.tcnative.jni.SSL", false, OpenSsl.class.getClassLoader());, +                final long sslCtx = SSLContext.make(SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2)) {, +, +    private static boolean doesSupportProtocol(int protocol) {, +            sslCtx = SSLContext.make(protocol, SSL.SSL_MODE_COMBINED);, +    private static boolean initializeTcNative() throws Exception {, +        return Library.initialize();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslCertificateException.java, +import io.netty.tcnative.jni.CertificateVerifier;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.tcnative.jni.Buffer;, +import io.netty.tcnative.jni.Library;, +import io.netty.tcnative.jni.SSL;, +import io.netty.tcnative.jni.SSLContext;, +            Class.forName("io.netty.tcnative.jni.SSL", false, OpenSsl.class.getClassLoader());, +                final long sslCtx = SSLContext.make(SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2)) {, +, +    private static boolean doesSupportProtocol(int protocol) {, +            sslCtx = SSLContext.make(protocol, SSL.SSL_MODE_COMBINED);, +    private static boolean initializeTcNative() throws Exception {, +        return Library.initialize();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslCertificateException.java, +import io.netty.tcnative.jni.CertificateVerifier;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import io.netty.tcnative.jni.SSL;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.tcnative.jni.Buffer;, +import io.netty.tcnative.jni.Library;, +import io.netty.tcnative.jni.SSL;, +import io.netty.tcnative.jni.SSLContext;, +            Class.forName("io.netty.tcnative.jni.SSL", false, OpenSsl.class.getClassLoader());, +                final long sslCtx = SSLContext.make(SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2)) {, +, +    private static boolean doesSupportProtocol(int protocol) {, +            sslCtx = SSLContext.make(protocol, SSL.SSL_MODE_COMBINED);, +    private static boolean initializeTcNative() throws Exception {, +        return Library.initialize();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslCertificateException.java, +import io.netty.tcnative.jni.CertificateVerifier;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import io.netty.tcnative.jni.SSL;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialManager.java, +import io.netty.tcnative.jni.CertificateRequestedCallback;, +import io.netty.tcnative.jni.SSL;, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.tcnative.jni.Buffer;, +import io.netty.tcnative.jni.Library;, +import io.netty.tcnative.jni.SSL;, +import io.netty.tcnative.jni.SSLContext;, +            Class.forName("io.netty.tcnative.jni.SSL", false, OpenSsl.class.getClassLoader());, +                final long sslCtx = SSLContext.make(SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2)) {, +, +    private static boolean doesSupportProtocol(int protocol) {, +            sslCtx = SSLContext.make(protocol, SSL.SSL_MODE_COMBINED);, +    private static boolean initializeTcNative() throws Exception {, +        return Library.initialize();, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslCertificateException.java, +import io.netty.tcnative.jni.CertificateVerifier;]