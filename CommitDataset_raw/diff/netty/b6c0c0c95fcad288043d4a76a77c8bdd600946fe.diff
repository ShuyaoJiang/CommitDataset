[+++ b/common/src/main/java/io/netty/util/internal/EmptyArrays.java, +import java.security.cert.X509Certificate;, +    public static final X509Certificate[] EMPTY_X509_CERTIFICATES = new X509Certificate[0];, +++ b/common/src/main/java/io/netty/util/internal/EmptyArrays.java, +import java.security.cert.X509Certificate;, +    public static final X509Certificate[] EMPTY_X509_CERTIFICATES = new X509Certificate[0];, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +             .handler(new HttpSnoopClientInitializer(sslCtx));, +++ b/common/src/main/java/io/netty/util/internal/EmptyArrays.java, +import java.security.cert.X509Certificate;, +    public static final X509Certificate[] EMPTY_X509_CERTIFICATES = new X509Certificate[0];, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +             .handler(new HttpSnoopClientInitializer(sslCtx));, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClientInitializer.java, +import io.netty.handler.ssl.SslContext;, +    private final SslContext sslCtx;, +    public HttpSnoopClientInitializer(SslContext sslCtx) {, +        this.sslCtx = sslCtx;, +        // Enable HTTPS if necessary., +        if (sslCtx != null) {, +            p.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ b/common/src/main/java/io/netty/util/internal/EmptyArrays.java, +import java.security.cert.X509Certificate;, +    public static final X509Certificate[] EMPTY_X509_CERTIFICATES = new X509Certificate[0];, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +             .handler(new HttpSnoopClientInitializer(sslCtx));, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClientInitializer.java, +import io.netty.handler.ssl.SslContext;, +    private final SslContext sslCtx;, +    public HttpSnoopClientInitializer(SslContext sslCtx) {, +        this.sslCtx = sslCtx;, +        // Enable HTTPS if necessary., +        if (sslCtx != null) {, +            p.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ b/example/src/main/java/io/netty/example/http/upload/HttpUploadClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +            b.group(group).channel(NioSocketChannel.class).handler(new HttpUploadClientIntializer(sslCtx));, +++ b/common/src/main/java/io/netty/util/internal/EmptyArrays.java, +import java.security.cert.X509Certificate;, +    public static final X509Certificate[] EMPTY_X509_CERTIFICATES = new X509Certificate[0];, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +             .handler(new HttpSnoopClientInitializer(sslCtx));, +++ b/example/src/main/java/io/netty/example/http/snoop/HttpSnoopClientInitializer.java, +import io.netty.handler.ssl.SslContext;, +    private final SslContext sslCtx;, +    public HttpSnoopClientInitializer(SslContext sslCtx) {, +        this.sslCtx = sslCtx;, +        // Enable HTTPS if necessary., +        if (sslCtx != null) {, +            p.addLast("ssl", sslCtx.newHandler(ch.alloc()));, +++ b/example/src/main/java/io/netty/example/http/upload/HttpUploadClient.java, +import io.netty.handler.ssl.SslContext;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +        final SslContext sslCtx;, +        if (ssl) {, +            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);, +        } else {, +            sslCtx = null;, +        }, +            b.group(group).channel(NioSocketChannel.class).handler(new HttpUploadClientIntializer(sslCtx));, +++ b/example/src/main/java/io/netty/example/http/upload/HttpUploadClientIntializer.java]