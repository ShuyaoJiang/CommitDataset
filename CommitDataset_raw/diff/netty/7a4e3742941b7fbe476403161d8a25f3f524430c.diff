[+++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed, +        if (ctx.channel().isActive() & ctx.channel().isRegistered()) {, +            // channelActive() event has not been fired yet.  this.channelActive() will be invoked, +    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {, +        // Initialize early if channel is active already., +        if (ctx.channel().isActive()) {, +            initialize(ctx);, +        }, +        super.channelRegistered(ctx);, +    }, +, +    @Override, +        switch (state) {, +        case 1:, +        case 2:, +        state = 1;, +, +        state = 2;, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed, +        if (ctx.channel().isActive() & ctx.channel().isRegistered()) {, +            // channelActive() event has not been fired yet.  this.channelActive() will be invoked, +    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {, +        // Initialize early if channel is active already., +        if (ctx.channel().isActive()) {, +            initialize(ctx);, +        }, +        super.channelRegistered(ctx);, +    }, +, +    @Override, +        switch (state) {, +        case 1:, +        case 2:, +        state = 1;, +, +        state = 2;, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, +    private volatile int state; // 0 - none, 1 - Initialized, 2 - Destroyed;, +        if (ctx.channel().isActive() && ctx.channel().isRegistered()) {, +            // channelActive() event has not been fired yet.  this.channelActive() will be invoked, +    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {, +        // Initialize early if channel is active already., +        if (ctx.channel().isActive()) {, +            initialize(ctx);, +        }, +        super.channelRegistered(ctx);, +    }, +, +    @Override, +    public void channelActive(ChannelHandlerContext ctx) throws Exception {, +        switch (state) {, +        case 1:, +        case 2:, +        state = 1;, +, +        state = 2;]