[+++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.handler.logging.LoggingHandler;, +import io.netty.logging.InternalLogLevel;, +        ssc.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +                    s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.handler.logging.LoggingHandler;, +import io.netty.logging.InternalLogLevel;, +        ssc.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +                    s.pipeline().addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +import io.netty.channel.ChannelBufferHolder;, +import io.netty.channel.ChannelBufferHolders;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandlerAdapter;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import java.net.SocketAddress;, +, +public class LoggingHandler extends ChannelHandlerAdapter<Object, Object> {, +    protected String message(ChannelHandlerContext ctx, String message) {, +        String chStr = ctx.channel().toString();, +        StringBuilder buf = new StringBuilder(chStr.length() + message.length() + 1);, +        buf.append(chStr);, +        buf.append(' ');, +        buf.append(message);, +        return buf.toString();, +    }, +, +    @Override, +    public ChannelBufferHolder<Object> newOutboundBuffer(, +            ChannelOutboundHandlerContext<Object> ctx) throws Exception {, +        return ChannelBufferHolders.outboundBypassBuffer(ctx);, +    }, +, +    @Override, +    public ChannelBufferHolder<Object> newInboundBuffer(, +            ChannelInboundHandlerContext<Object> ctx) throws Exception {, +        return ChannelBufferHolders.inboundBypassBuffer(ctx);, +    }, +, +    @Override, +    public void channelRegistered(ChannelInboundHandlerContext<Object> ctx), +            throws Exception {, +            logger.log(level, message(ctx, "REGISTERED"));, +        super.channelRegistered(ctx);, +    public void channelUnregistered(ChannelInboundHandlerContext<Object> ctx), +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, "UNREGISTERED"));, +        }, +        super.channelUnregistered(ctx);, +    public void channelActive(ChannelInboundHandlerContext<Object> ctx), +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, "ACTIVE"));, +        super.channelActive(ctx);, +    }, +, +    @Override, +    public void channelInactive(ChannelInboundHandlerContext<Object> ctx), +            throws Exception {, +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, "INACTIVE"));, +        }, +        super.channelInactive(ctx);, +    }, +, +    @Override, +    public void exceptionCaught(ChannelInboundHandlerContext<Object> ctx,, +            Throwable cause) throws Exception {, +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, String.format("EXCEPTION: %s", cause)), cause);, +        }, +        super.exceptionCaught(ctx, cause);, +    }, +, +    @Override, +    public void userEventTriggered(ChannelInboundHandlerContext<Object> ctx,, +            Object evt) throws Exception {, +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, String.format("USER_EVENT: %s", evt)));, +        }, +        super.userEventTriggered(ctx, evt);, +    }, +, +    @Override, +    public void inboundBufferUpdated(ChannelInboundHandlerContext<Object> ctx), +            throws Exception {, +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, "INBOUND_UPDATED"));, +        }, +        // TODO Auto-generated method stub, +        super.inboundBufferUpdated(ctx);, +    }, +, +    @Override, +    public void bind(ChannelOutboundHandlerContext<Object> ctx,, +            SocketAddress localAddress, ChannelFuture future) throws Exception {, +        if (getLogger().isEnabled(level)) {, +            logger.log(level, message(ctx, String.format("bind(%s)", localAddress)));]