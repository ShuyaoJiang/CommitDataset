[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java, +import org.jboss.netty.handler.codec.http2.HttpPostBodyUtil.SeekAheadNoBackArray;, +import org.jboss.netty.handler.codec.http2.HttpPostBodyUtil.SeekAheadOptimize;, +    private void parseBodyAttributesStandard() throws ErrorDataDecoderException {, +    /**, +     * This method fill the map and list with as much Attribute as possible from Body in, +     * not Multipart mode., +     *, +     * @throws ErrorDataDecoderException if there is a problem with the charset decoding or, +     *          other errors, +     */, +    private void parseBodyAttributes() throws ErrorDataDecoderException {, +        SeekAheadOptimize sao = null;, +        try {, +            sao = new SeekAheadOptimize(undecodedChunk);, +        } catch (SeekAheadNoBackArray e1) {, +            parseBodyAttributesStandard();, +            return;, +        }, +        int firstpos = undecodedChunk.readerIndex();, +        int currentpos = firstpos;, +        int equalpos = firstpos;, +        int ampersandpos = firstpos;, +        if (currentStatus == MultiPartStatus.NOTSTARTED) {, +            currentStatus = MultiPartStatus.DISPOSITION;, +        }, +        boolean contRead = true;, +        try {, +            loop:, +            while (sao.pos < sao.limit) {, +                char read = (char) (sao.bytes[sao.pos ++] & 0xFF);, +                currentpos ++;, +                switch (currentStatus) {, +                case DISPOSITION:// search '=', +                    if (read == '=') {, +                        currentStatus = MultiPartStatus.FIELD;, +                        equalpos = currentpos - 1;, +                        String key = decodeAttribute(, +                                undecodedChunk.toString(firstpos, equalpos - firstpos, charset),, +                                charset);, +                        currentAttribute = factory.createAttribute(request, key);, +                        firstpos = currentpos;, +                    } else if (read == '&') { // special empty FIELD, +                        currentStatus = MultiPartStatus.DISPOSITION;, +                        ampersandpos = currentpos - 1;, +                        String key = decodeAttribute(undecodedChunk.toString(firstpos, ampersandpos - firstpos, charset), charset);, +                        currentAttribute = factory.createAttribute(request, key);, +                        currentAttribute.setValue(""); // empty, +                        addHttpData(currentAttribute);, +                        currentAttribute = null;, +                        firstpos = currentpos;, +                        contRead = true;, +                    }, +                    break;, +                case FIELD:// search '&' or end of line, +                    if (read == '&') {, +                        currentStatus = MultiPartStatus.DISPOSITION;, +                        ampersandpos = currentpos - 1;, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos));, +                        firstpos = currentpos;, +                        contRead = true;, +                    } else if (read == HttpCodecUtil.CR) {, +                        if (sao.pos < sao.limit) {, +                            read = (char) (sao.bytes[sao.pos ++] & 0xFF);, +                            currentpos++;, +                            if (read == HttpCodecUtil.LF) {, +                                currentStatus = MultiPartStatus.PREEPILOGUE;, +                                ampersandpos = currentpos - 2;, +                                sao.setReadPosition(0);, +                                setFinalBuffer(, +                                        undecodedChunk.slice(firstpos, ampersandpos - firstpos));, +                                firstpos = currentpos;, +                                contRead = false;, +                                break loop;, +                            } else {, +                                // Error, +                                sao.setReadPosition(0);, +                                contRead = false;, +                                throw new ErrorDataDecoderException("Bad end of line");, +                            }, +                        } else {, +                            if (sao.limit > 0) {, +                                currentpos --;, +                            }, +                        }, +                    } else if (read == HttpCodecUtil.LF) {, +                        currentStatus = MultiPartStatus.PREEPILOGUE;, +                        ampersandpos = currentpos - 1;, +                        sao.setReadPosition(0);, +                        setFinalBuffer(, +                                undecodedChunk.slice(firstpos, ampersandpos - firstpos));, +                        firstpos = currentpos;, +                        contRead = false;, +                        break loop;, +                    }, +                    break;, +                default:, +                    // just stop, +                    sao.setReadPosition(0);, +                    contRead = false;]