[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.EventLoop;, +    protected EventLoop newChild(Executor executor, Object... args) throws Exception {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.EventLoop;, +    protected EventLoop newChild(Executor executor, Object... args) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final ChannelHandlerInvoker invoker() {, +            return eventLoop().asInvoker();, +        }, +, +        @Override, +        @SuppressWarnings("deprecation"), +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.EventLoop;, +    protected EventLoop newChild(Executor executor, Object... args) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final ChannelHandlerInvoker invoker() {, +            return eventLoop().asInvoker();, +        }, +, +        @Override, +        @SuppressWarnings("deprecation"), +++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *   <li>{@link #invoker()}</li>, +, +        /**, +         * Returns the {@link ChannelHandlerInvoker} which is used by default unless specified by a user., +         */, +        ChannelHandlerInvoker invoker();, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.EventLoop;, +    protected EventLoop newChild(Executor executor, Object... args) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final ChannelHandlerInvoker invoker() {, +            return eventLoop().asInvoker();, +        }, +, +        @Override, +        @SuppressWarnings("deprecation"), +++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *   <li>{@link #invoker()}</li>, +, +        /**, +         * Returns the {@link ChannelHandlerInvoker} which is used by default unless specified by a user., +         */, +        ChannelHandlerInvoker invoker();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAppender.java, +                pipeline.addAfter(dctx.invoker, oldName, name, e.handler);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.EventLoop;, +    protected EventLoop newChild(Executor executor, Object... args) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        public final ChannelHandlerInvoker invoker() {, +            return eventLoop().asInvoker();, +        }, +, +        @Override, +        @SuppressWarnings("deprecation"), +++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *   <li>{@link #invoker()}</li>, +, +        /**, +         * Returns the {@link ChannelHandlerInvoker} which is used by default unless specified by a user., +         */, +        ChannelHandlerInvoker invoker();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAppender.java, +                pipeline.addAfter(dctx.invoker, oldName, name, e.handler);, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerInvoker.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.channel;, +, +import io.netty.util.concurrent.EventExecutor;, +, +import java.net.SocketAddress;, +, +/**, + * Invokes the event handler methods of {@link ChannelInboundHandler} and {@link ChannelOutboundHandler}., + * A user can specify a {@link ChannelHandlerInvoker} to implement a custom thread model unsupported by the default, + * implementation., + */, +public interface ChannelHandlerInvoker {]