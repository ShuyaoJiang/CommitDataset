[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.OneTimeTask;, +            task.cancelWithoutRemove(false);, +            execute(new OneTimeTask() {, +    final void removeScheduled(final ScheduledFutureTask<?> task) {, +        if (inEventLoop()) {, +            scheduledTaskQueue().remove(task);, +        } else {, +            execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    removeScheduled(task);, +            });, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.OneTimeTask;, +            task.cancelWithoutRemove(false);, +            execute(new OneTimeTask() {, +    final void removeScheduled(final ScheduledFutureTask<?> task) {, +        if (inEventLoop()) {, +            scheduledTaskQueue().remove(task);, +        } else {, +            execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    removeScheduled(task);, +            });, +++ b/common/src/main/java/io/netty/util/concurrent/GlobalEventExecutor.java, +    private static final long SCHEDULE_QUIET_PERIOD_INTERVAL = TimeUnit.SECONDS.toNanos(1);, +    final ScheduledFutureTask<Void> quietPeriodTask = new ScheduledFutureTask<Void>(, +            this, Executors.<Void>callable(new Runnable() {, +        @Override, +        public void run() {, +            // NOOP, +        }, +    }, null), ScheduledFutureTask.deadlineNanos(SCHEDULE_QUIET_PERIOD_INTERVAL), -SCHEDULE_QUIET_PERIOD_INTERVAL);, +        scheduledTaskQueue().add(quietPeriodTask);, +                    if (task != quietPeriodTask) {, +                // Terminate if there is no task in the queue (except the noop task)., +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.OneTimeTask;, +            task.cancelWithoutRemove(false);, +            execute(new OneTimeTask() {, +    final void removeScheduled(final ScheduledFutureTask<?> task) {, +        if (inEventLoop()) {, +            scheduledTaskQueue().remove(task);, +        } else {, +            execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    removeScheduled(task);, +            });, +++ b/common/src/main/java/io/netty/util/concurrent/GlobalEventExecutor.java, +    private static final long SCHEDULE_QUIET_PERIOD_INTERVAL = TimeUnit.SECONDS.toNanos(1);, +    final ScheduledFutureTask<Void> quietPeriodTask = new ScheduledFutureTask<Void>(, +            this, Executors.<Void>callable(new Runnable() {, +        @Override, +        public void run() {, +            // NOOP, +        }, +    }, null), ScheduledFutureTask.deadlineNanos(SCHEDULE_QUIET_PERIOD_INTERVAL), -SCHEDULE_QUIET_PERIOD_INTERVAL);, +        scheduledTaskQueue().add(quietPeriodTask);, +                    if (task != quietPeriodTask) {, +                // Terminate if there is no task in the queue (except the noop task)., +++ b/common/src/main/java/io/netty/util/concurrent/ScheduledFutureTask.java, +    public boolean cancel(boolean mayInterruptIfRunning) {, +        boolean canceled = super.cancel(mayInterruptIfRunning);, +        if (canceled) {, +            ((AbstractScheduledEventExecutor) executor()).removeScheduled(this);, +        }, +        return canceled;, +    }, +, +    boolean cancelWithoutRemove(boolean mayInterruptIfRunning) {, +        return super.cancel(mayInterruptIfRunning);, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractScheduledEventExecutor.java, +import io.netty.util.internal.OneTimeTask;, +            task.cancelWithoutRemove(false);, +            execute(new OneTimeTask() {, +    final void removeScheduled(final ScheduledFutureTask<?> task) {, +        if (inEventLoop()) {, +            scheduledTaskQueue().remove(task);, +        } else {, +            execute(new OneTimeTask() {, +                @Override, +                public void run() {, +                    removeScheduled(task);, +            });, +++ b/common/src/main/java/io/netty/util/concurrent/GlobalEventExecutor.java, +    private static final long SCHEDULE_QUIET_PERIOD_INTERVAL = TimeUnit.SECONDS.toNanos(1);, +    final ScheduledFutureTask<Void> quietPeriodTask = new ScheduledFutureTask<Void>(, +            this, Executors.<Void>callable(new Runnable() {, +        @Override, +        public void run() {, +            // NOOP, +        }, +    }, null), ScheduledFutureTask.deadlineNanos(SCHEDULE_QUIET_PERIOD_INTERVAL), -SCHEDULE_QUIET_PERIOD_INTERVAL);, +        scheduledTaskQueue().add(quietPeriodTask);]