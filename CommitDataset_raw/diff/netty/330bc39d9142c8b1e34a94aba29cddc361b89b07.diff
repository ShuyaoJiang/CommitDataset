[+++ b/common/src/main/java/io/netty/util/collection/PrimitiveCollections.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.util.collection;, +, +import io.netty.util.internal.EmptyArrays;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +, +/**, + * Utility methods for primitive collections., + */, +public final class PrimitiveCollections {, +, +    private static final IntObjectMap<Object> EMPTY_INT_OBJECT_MAP = new EmptyIntObjectMap();, +, +    private PrimitiveCollections() {, +    }, +, +    /**, +     * Returns an unmodifiable empty {@link IntObjectMap}., +     */, +    @SuppressWarnings("unchecked"), +    public static <V> IntObjectMap<V> emptyIntObjectMap() {, +        return (IntObjectMap<V>) EMPTY_INT_OBJECT_MAP;, +    }, +, +    /**, +     * Creates an unmodifiable wrapper around the given map., +     */, +    public static <V> IntObjectMap<V> unmodifiableIntObjectMap(final IntObjectMap<V> map) {, +        return new UnmodifiableIntObjectMap<V>(map);, +    }, +, +    /**, +     * An empty map. All operations that attempt to modify the map are unsupported., +     */, +    private static final class EmptyIntObjectMap implements IntObjectMap<Object> {, +, +        @Override, +        public Object get(int key) {, +            return null;, +        }, +, +        @Override, +        public Object put(int key, Object value) {, +            throw new UnsupportedOperationException("put");, +        }, +, +        @Override, +        public void putAll(IntObjectMap<Object> sourceMap) {, +            throw new UnsupportedOperationException("putAll");, +        }, +, +        @Override, +        public Object remove(int key) {, +            throw new UnsupportedOperationException("remove");, +        }, +, +        @Override, +        public int size() {, +            return 0;, +        }, +, +        @Override, +        public boolean isEmpty() {, +            return true;, +        }, +, +        @Override, +        public void clear() {, +            // Do nothing., +        }, +, +        @Override, +        public boolean containsKey(int key) {, +            return false;, +        }, +, +        @Override, +        public boolean containsValue(Object value) {, +            return false;, +        }, +, +        @Override]