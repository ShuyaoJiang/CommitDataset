[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private FlowControlState localFlowState;, +        private FlowControlState remoteFlowState;, +        public FlowControlState localFlowState() {, +            return localFlowState;, +        }, +, +        @Override, +        public void localFlowState(FlowControlState state) {, +            localFlowState = state;, +        }, +, +        @Override, +        public FlowControlState remoteFlowState() {, +            return remoteFlowState;, +        }, +, +        @Override, +        public void remoteFlowState(FlowControlState state) {, +            remoteFlowState = state;, +        }, +, +        @Override, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private FlowControlState localFlowState;, +        private FlowControlState remoteFlowState;, +        public FlowControlState localFlowState() {, +            return localFlowState;, +        }, +, +        @Override, +        public void localFlowState(FlowControlState state) {, +            localFlowState = state;, +        }, +, +        @Override, +        public FlowControlState remoteFlowState() {, +            return remoteFlowState;, +        }, +, +        @Override, +        public void remoteFlowState(FlowControlState state) {, +            remoteFlowState = state;, +        }, +, +        @Override, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +import io.netty.handler.codec.http2.Http2Stream.FlowControlState;, +        connection.connectionStream().localFlowState(, +                new DefaultFlowState(connection.connectionStream(), initialWindowSize));, +                stream.localFlowState(new DefaultFlowState(stream, 0));, +        DefaultFlowState state = state(stream);, +        DefaultFlowState state = state(stream);, +        DefaultFlowState state = state(stream);, +    private DefaultFlowState connectionState() {, +        return (DefaultFlowState) connection.connectionStream().localFlowState();, +    private static DefaultFlowState state(Http2Stream stream) {, +        return (DefaultFlowState) checkNotNull(stream, "stream").localFlowState();, +    private final class DefaultFlowState implements FlowControlState {, +        DefaultFlowState(Http2Stream stream, int initialWindowSize) {, +        @Override, +        public int windowSize() {, +        @Override, +        public int initialWindowSize() {, +            return initialStreamWindowSize;, +        }, +, +            DefaultFlowState connectionState = connectionState();, +                DefaultFlowState state = state(stream);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private FlowControlState localFlowState;, +        private FlowControlState remoteFlowState;, +        public FlowControlState localFlowState() {, +            return localFlowState;, +        }, +, +        @Override, +        public void localFlowState(FlowControlState state) {, +            localFlowState = state;, +        }, +, +        @Override, +        public FlowControlState remoteFlowState() {, +            return remoteFlowState;, +        }, +, +        @Override, +        public void remoteFlowState(FlowControlState state) {, +            remoteFlowState = state;, +        }, +, +        @Override, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +import io.netty.handler.codec.http2.Http2Stream.FlowControlState;, +        connection.connectionStream().localFlowState(, +                new DefaultFlowState(connection.connectionStream(), initialWindowSize));, +                stream.localFlowState(new DefaultFlowState(stream, 0));]