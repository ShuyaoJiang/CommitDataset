[+++ b/src/main/java/org/jboss/netty/util/ExternalResourceUtil.java, + * A utility class that provides the convenient shutdown of, + * {@link ExternalResourceReleasable}s., + *, +++ b/src/main/java/org/jboss/netty/util/ExternalResourceUtil.java, + * A utility class that provides the convenient shutdown of, + * {@link ExternalResourceReleasable}s., + *, +++ b/src/main/java/org/jboss/netty/util/ObjectSizeEstimator.java, +     *, +     * @return a positive integer which represents the size of the specified, +     *         object in bytes, +++ b/src/main/java/org/jboss/netty/util/ExternalResourceUtil.java, + * A utility class that provides the convenient shutdown of, + * {@link ExternalResourceReleasable}s., + *, +++ b/src/main/java/org/jboss/netty/util/ObjectSizeEstimator.java, +     *, +     * @return a positive integer which represents the size of the specified, +     *         object in bytes, +++ b/src/main/java/org/jboss/netty/util/ThreadNameDeterminer.java, + * Overrides the thread name proposed by {@link ThreadRenamingRunnable}., + *, +, +    /**, +     * Overrides the thread name proposed by {@link ThreadRenamingRunnable}., +     *, +     * @param currentThreadName   the current thread name, +     * @param proposedThreadName  the proposed new thread name, +     * @return the actual new thread name., +     *         If {@code null} is returned, the proposed thread name is, +     *         discarded (i.e. no rename)., +     */, +    String determineThreadName(String currentThreadName, String proposedThreadName) throws Exception;, +++ b/src/main/java/org/jboss/netty/util/ExternalResourceUtil.java, + * A utility class that provides the convenient shutdown of, + * {@link ExternalResourceReleasable}s., + *, +++ b/src/main/java/org/jboss/netty/util/ObjectSizeEstimator.java, +     *, +     * @return a positive integer which represents the size of the specified, +     *         object in bytes, +++ b/src/main/java/org/jboss/netty/util/ThreadNameDeterminer.java, + * Overrides the thread name proposed by {@link ThreadRenamingRunnable}., + *, +, +    /**, +     * Overrides the thread name proposed by {@link ThreadRenamingRunnable}., +     *, +     * @param currentThreadName   the current thread name, +     * @param proposedThreadName  the proposed new thread name, +     * @return the actual new thread name., +     *         If {@code null} is returned, the proposed thread name is, +     *         discarded (i.e. no rename)., +     */, +    String determineThreadName(String currentThreadName, String proposedThreadName) throws Exception;, +++ b/src/main/java/org/jboss/netty/util/ThreadRenamingRunnable.java, + * A {@link Runnable} that changes the current thread name and reverts it back, + * when its execution ends., +     * Returns the {@link ThreadNameDeterminer} which overrides the proposed, +     * Sets the {@link ThreadNameDeterminer} which overrides the proposed new, +    private String getNewThreadName(String currentThreadName) {, +                        currentThreadName, proposedThreadName);, +        return newThreadName == null? currentThreadName : newThreadName;]