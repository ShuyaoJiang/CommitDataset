[+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java, +                clearOpWrite();, +                    setOpWrite();, +                    setOpWrite();, +, +    protected final void setOpWrite() {, +, +    protected final void clearOpWrite() {, +        final SelectionKey key = selectionKey();, +        final int interestOps = key.interestOps();, +        if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +            key.interestOps(interestOps & ~SelectionKey.OP_WRITE);, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java, +                clearOpWrite();, +                    setOpWrite();, +                    setOpWrite();, +, +    protected final void setOpWrite() {, +, +    protected final void clearOpWrite() {, +        final SelectionKey key = selectionKey();, +        final int interestOps = key.interestOps();, +        if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +            key.interestOps(interestOps & ~SelectionKey.OP_WRITE);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +        for (;;) {, +, +                // Finish the write loop if no new messages were flushed by in.remove()., +                if (in.isEmpty()) {, +                    clearOpWrite();, +                    break;, +                }, +, +                setOpWrite();, +                break;, +            }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioByteChannel.java, +                clearOpWrite();, +                    setOpWrite();, +                    setOpWrite();, +, +    protected final void setOpWrite() {, +, +    protected final void clearOpWrite() {, +        final SelectionKey key = selectionKey();, +        final int interestOps = key.interestOps();, +        if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +            key.interestOps(interestOps & ~SelectionKey.OP_WRITE);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +        for (;;) {, +, +                // Finish the write loop if no new messages were flushed by in.remove()., +                if (in.isEmpty()) {, +                    clearOpWrite();, +                    break;, +                }, +, +                setOpWrite();, +                break;, +            }, +++ b/transport/src/test/java/io/netty/channel/nio/NioSocketChannelTest.java, +import io.netty.buffer.Unpooled;, +import io.netty.util.CharsetUtil;, +import java.io.DataInput;, +import java.io.DataInputStream;, +     * Reproduces the issue #1600, +, +    /**, +     * Reproduces the issue #1679, +     */, +    @Test, +    public void testFlushAfterGatheredFlush() throws Exception {, +        NioEventLoopGroup group = new NioEventLoopGroup(1);, +        try {, +            ServerBootstrap sb = new ServerBootstrap();, +            sb.group(group).channel(NioServerSocketChannel.class);, +            sb.childHandler(new ChannelInboundHandlerAdapter() {, +                @Override, +                public void channelActive(final ChannelHandlerContext ctx) throws Exception {, +                    // Trigger a gathering write by writing two buffers., +                    ctx.write(Unpooled.wrappedBuffer(new byte[] { 'a' }));, +                    ChannelFuture f = ctx.write(Unpooled.wrappedBuffer(new byte[] { 'b' }));, +                    f.addListener(new ChannelFutureListener() {, +                        @Override, +                        public void operationComplete(ChannelFuture future) throws Exception {, +                            // This message must be flushed, +                            ctx.writeAndFlush(Unpooled.wrappedBuffer(new byte[]{'c'}));, +                        }, +                    });, +                    ctx.flush();, +                }, +            });, +, +            SocketAddress address = sb.bind(0).sync().channel().localAddress();, +, +            Socket s = new Socket();, +            s.connect(address);, +, +            DataInput in = new DataInputStream(s.getInputStream());, +            byte[] buf = new byte[3];]