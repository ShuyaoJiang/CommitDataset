[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +import java.io.IOException;, +import java.security.InvalidAlgorithmParameterException;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import javax.crypto.Cipher;, +import javax.crypto.EncryptedPrivateKeyInfo;, +import javax.crypto.NoSuchPaddingException;, +import javax.crypto.SecretKey;, +import javax.crypto.SecretKeyFactory;, +import javax.crypto.spec.PBEKeySpec;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLSessionContext;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufInputStream;, +, +     * @param keyPassword the password of the {@code keyFile}. {@code null} if it's not password-protected., +     * @param keyPassword the password of the {@code keyFile}. {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference. {@code null} to use the default cipher, +     * suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference. {@code null} to, +     * disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects. {@code 0} to use the default, +     * value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds. {@code 0} to use the default, +     * value., +, +            char[] keyPasswordChars = keyPassword.toCharArray();, +            PKCS8EncodedKeySpec encodedKeySpec = generateKeySpec(keyPasswordChars, encodedKey);, +            ks.setKeyEntry("key", key, keyPasswordChars, certChain.toArray(new Certificate[certChain.size()]));, +            kmf.init(ks, keyPasswordChars);, +, +    /**, +     * Generates a key specification for an (encrypted) private key., +     *, +     * @param password characters, if {@code null} or empty an unencrypted key is assumed, +     * @param key bytes of the DER encoded private key, +     * @return a key specification, +     * @throws IOException if parsing {@code key} fails, +     * @throws NoSuchAlgorithmException if the algorithm used to encrypt {@code key} is unkown, +     * @throws NoSuchPaddingException if the padding scheme specified in the decryption algorithm is unkown, +     * @throws InvalidKeySpecException if the decryption key based on {@code password} cannot be generated, +     * @throws InvalidKeyException if the decryption key based on {@code password} cannot be used to decrypt {@code key}, +     * @throws InvalidAlgorithmParameterException if decryption algorithm parameters are somehow faulty, +     */, +    private static PKCS8EncodedKeySpec generateKeySpec(char[] password, byte[] key) throws IOException,, +        NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException,, +        InvalidAlgorithmParameterException {, +, +        if (password == null || password.length == 0) {, +            return new PKCS8EncodedKeySpec(key);, +        }, +, +        EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new EncryptedPrivateKeyInfo(key);, +        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(encryptedPrivateKeyInfo.getAlgName());, +        PBEKeySpec pbeKeySpec = new PBEKeySpec(password);, +        SecretKey pbeKey = keyFactory.generateSecret(pbeKeySpec);, +, +        Cipher cipher = Cipher.getInstance(encryptedPrivateKeyInfo.getAlgName());, +        cipher.init(Cipher.DECRYPT_MODE, pbeKey, encryptedPrivateKeyInfo.getAlgParameters());, +, +        return encryptedPrivateKeyInfo.getKeySpec(cipher);, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +import java.io.IOException;, +import java.security.InvalidAlgorithmParameterException;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import javax.crypto.Cipher;, +import javax.crypto.EncryptedPrivateKeyInfo;, +import javax.crypto.NoSuchPaddingException;, +import javax.crypto.SecretKey;, +import javax.crypto.SecretKeyFactory;, +import javax.crypto.spec.PBEKeySpec;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLSessionContext;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufInputStream;, +, +     * @param keyPassword the password of the {@code keyFile}. {@code null} if it's not password-protected., +     * @param keyPassword the password of the {@code keyFile}. {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference. {@code null} to use the default cipher, +     * suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference. {@code null} to, +     * disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects. {@code 0} to use the default, +     * value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds. {@code 0} to use the default, +     * value., +, +            char[] keyPasswordChars = keyPassword.toCharArray();, +            PKCS8EncodedKeySpec encodedKeySpec = generateKeySpec(keyPasswordChars, encodedKey);, +            ks.setKeyEntry("key", key, keyPasswordChars, certChain.toArray(new Certificate[certChain.size()]));, +            kmf.init(ks, keyPasswordChars);]