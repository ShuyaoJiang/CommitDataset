[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +    abstract ByteBuf encode(SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +    abstract ByteBuf encode(SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +    SpdyHeaderBlockJZlibEncoder(, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +        ByteBuf decompressed = super.encode(frame);, +        ByteBuf compressed = decompressed.alloc().buffer();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +    abstract ByteBuf encode(SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +    SpdyHeaderBlockJZlibEncoder(, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +        ByteBuf decompressed = super.encode(frame);, +        ByteBuf compressed = decompressed.alloc().buffer();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockRawEncoder.java, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +    abstract ByteBuf encode(SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +    SpdyHeaderBlockJZlibEncoder(, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +        ByteBuf decompressed = super.encode(frame);, +        ByteBuf compressed = decompressed.alloc().buffer();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockRawEncoder.java, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecoder.java, +final class SpdyHeaderBlockZlibDecoder extends SpdyHeaderBlockRawDecoder {, +    private static final int DEFAULT_BUFFER_CAPACITY = 4096;, +, +    SpdyHeaderBlockZlibDecoder(SpdyVersion spdyVersion, int maxHeaderSize) {, +        super(spdyVersion, maxHeaderSize);, +        int len = setInput(encoded);, +        } while (numBytes > 0);, +, +        if (decompressor.getRemaining() != 0) {, +            throw new SpdyProtocolException("client sent extra data beyond headers");, +        encoded.skipBytes(len);, +    }, +, +    private int setInput(ByteBuf compressed) {, +        int len = compressed.readableBytes();, +, +        if (compressed.hasArray()) {, +            decompressor.setInput(compressed.array(), compressed.arrayOffset() + compressed.readerIndex(), len);, +        } else {, +            byte[] in = new byte[len];, +            compressed.getBytes(compressed.readerIndex(), in);, +            decompressor.setInput(in, 0, in.length);, +        }, +, +        return len;, +        ensureBuffer();, +        byte[] out = decompressed.array();, +        int off = decompressed.arrayOffset() + decompressed.writerIndex();, +            int numBytes = decompressor.inflate(out, off, decompressed.writableBytes());, +                numBytes = decompressor.inflate(out, off, decompressed.writableBytes());, +                decompressed.writerIndex(decompressed.writerIndex() + numBytes);, +, +            throw new SpdyProtocolException("Received invalid header block", e);, +    private void ensureBuffer() {, +        if (decompressed == null) {, +            decompressed = Unpooled.buffer(DEFAULT_BUFFER_CAPACITY);, +        }, +        decompressed.ensureWritable(1);, +    }, +, +    void reset() {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameEncoder.java, +            ByteBuf data = headerBlockEncoder.encode(spdySynStreamFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdySynReplyFrame);, +            ByteBuf data = headerBlockEncoder.encode(spdyHeadersFrame);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockEncoder.java, +    abstract ByteBuf encode(SpdyHeadersFrame frame) throws Exception;, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibEncoder.java, +    SpdyHeaderBlockJZlibEncoder(, +    public ByteBuf encode(SpdyHeadersFrame frame) throws Exception {, +        ByteBuf decompressed = super.encode(frame);, +        ByteBuf compressed = decompressed.alloc().buffer();]