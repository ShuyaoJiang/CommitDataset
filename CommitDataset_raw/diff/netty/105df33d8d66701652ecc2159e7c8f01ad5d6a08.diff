[+++ b/common/pom.xml, +    <dependency>, +      <groupId>org.apache.logging.log4j</groupId>, +      <artifactId>log4j-api</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.logging.log4j</groupId>, +      <artifactId>log4j-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/common/pom.xml, +    <dependency>, +      <groupId>org.apache.logging.log4j</groupId>, +      <artifactId>log4j-api</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +      <groupId>org.apache.logging.log4j</groupId>, +      <artifactId>log4j-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/common/src/main/java/io/netty/util/internal/logging/Log4J2Logger.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.internal.logging;, +, +import org.apache.logging.log4j.Logger;, +, +final class Log4J2Logger extends AbstractInternalLogger {, +, +    private static final long serialVersionUID = 5485418394879791397L;, +, +    private final transient Logger logger;, +, +    Log4J2Logger(Logger logger) {, +        super(logger.getName());, +        this.logger = logger;, +    }, +, +    @Override, +    public boolean isTraceEnabled() {, +        return logger.isTraceEnabled();, +    }, +, +    @Override, +    public void trace(String msg) {, +        logger.trace(msg);, +    }, +, +    @Override, +    public void trace(String format, Object arg) {, +        logger.trace(format, arg);, +    }, +, +    @Override, +    public void trace(String format, Object argA, Object argB) {, +        logger.trace(format, argA, argB);, +    }, +, +    @Override, +    public void trace(String format, Object... arguments) {, +        logger.trace(format, arguments);, +    }, +, +    @Override, +    public void trace(String msg, Throwable t) {, +        logger.trace(msg, t);, +    }, +, +    @Override, +    public boolean isDebugEnabled() {, +        return logger.isDebugEnabled();, +    }, +, +    @Override, +    public void debug(String msg) {, +        logger.debug(msg);, +    }, +, +    @Override, +    public void debug(String format, Object arg) {, +        logger.debug(format, arg);, +    }, +, +    @Override, +    public void debug(String format, Object argA, Object argB) {]