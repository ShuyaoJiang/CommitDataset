[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.util.ReferenceCountUtil;, +        if (msg instanceof ByteBuf) {, +            final ByteBuf potentialEmptyBuf = (ByteBuf) msg;, +            if (!potentialEmptyBuf.isReadable()) {, +                out.add(potentialEmptyBuf.retain());, +        }, +            out.add(ReferenceCountUtil.retain(msg));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.util.ReferenceCountUtil;, +        if (msg instanceof ByteBuf) {, +            final ByteBuf potentialEmptyBuf = (ByteBuf) msg;, +            if (!potentialEmptyBuf.isReadable()) {, +                out.add(potentialEmptyBuf.retain());, +        }, +            out.add(ReferenceCountUtil.retain(msg));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.util.IllegalReferenceCountException;, +import java.util.concurrent.ExecutionException;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +, +    @Test, +    public void testEmptyReleasedBufferShouldNotWriteEmptyBufferToChannel() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        ByteBuf buf = Unpooled.buffer();, +        buf.release();, +        try {, +            channel.writeAndFlush(buf).get();, +            fail();, +        } catch (ExecutionException e) {, +            assertThat(e.getCause().getCause(), is(instanceOf(IllegalReferenceCountException.class)));, +        }, +        channel.finishAndReleaseAll();, +    }, +, +    @Test, +    public void testEmptydBufferShouldPassThrough() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        ByteBuf buffer = Unpooled.buffer();, +        channel.writeAndFlush(buffer).get();, +        channel.finishAndReleaseAll();, +        assertEquals(0, buffer.refCnt());, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.util.ReferenceCountUtil;, +        if (msg instanceof ByteBuf) {, +            final ByteBuf potentialEmptyBuf = (ByteBuf) msg;, +            if (!potentialEmptyBuf.isReadable()) {, +                out.add(potentialEmptyBuf.retain());, +        }, +            out.add(ReferenceCountUtil.retain(msg));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +import io.netty.channel.embedded.EmbeddedChannel;, +import io.netty.util.IllegalReferenceCountException;, +import java.util.concurrent.ExecutionException;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +, +    @Test, +    public void testEmptyReleasedBufferShouldNotWriteEmptyBufferToChannel() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        ByteBuf buf = Unpooled.buffer();, +        buf.release();, +        try {, +            channel.writeAndFlush(buf).get();, +            fail();, +        } catch (ExecutionException e) {, +            assertThat(e.getCause().getCause(), is(instanceOf(IllegalReferenceCountException.class)));, +        }, +        channel.finishAndReleaseAll();, +    }, +, +    @Test, +    public void testEmptydBufferShouldPassThrough() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        ByteBuf buffer = Unpooled.buffer();, +        channel.writeAndFlush(buffer).get();, +        channel.finishAndReleaseAll();, +        assertEquals(0, buffer.refCnt());, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/MessageAggregator.java, +                if (m instanceof ByteBufHolder) {]