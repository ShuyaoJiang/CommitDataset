[+++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +        return chunked;, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +            setContent(ChannelBuffers.EMPTY_BUFFER);, +        if (content.readable() && isChunked()) {, +            throw new IllegalArgumentException(, +                    "non-empty content disallowed if this.chunked == true");, +        }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +        return chunked;, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +            setContent(ChannelBuffers.EMPTY_BUFFER);, +        if (content.readable() && isChunked()) {, +            throw new IllegalArgumentException(, +                    "non-empty content disallowed if this.chunked == true");, +        }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +                // TODO Add HttpMessage/HttpChunkTrailer.removeHeader(name, value), +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +        return chunked;, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +            setContent(ChannelBuffers.EMPTY_BUFFER);, +        if (content.readable() && isChunked()) {, +            throw new IllegalArgumentException(, +                    "non-empty content disallowed if this.chunked == true");, +        }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +                // TODO Add HttpMessage/HttpChunkTrailer.removeHeader(name, value), +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessage.java, +     * Returns the content of this message.  If there is no content or, +     * {@link #isChunked()} returns {@code true}, an, +     * Sets if this message does not have any content but the, +     * {@link HttpChunk}s, which is generated by {@link HttpMessageDecoder}, +     * consecutively, contain the actual content., +     * <p>, +     * If this method is called with {@code true}, the content of this message, +     * becomes {@link ChannelBuffers#EMPTY_BUFFER}., +     */, +    void setChunked(boolean chunked);, +, +    /**, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    private boolean chunked;, +        return chunked;, +    public void setChunked(boolean chunked) {, +        this.chunked = chunked;, +        if (chunked) {, +            setContent(ChannelBuffers.EMPTY_BUFFER);, +        if (content.readable() && isChunked()) {, +            throw new IllegalArgumentException(, +                    "non-empty content disallowed if this.chunked == true");, +        }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpChunkAggregator.java, +                // TODO Add HttpMessage/HttpChunkTrailer.removeHeader(name, value), +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessage.java, +     * Returns the content of this message.  If there is no content or, +     * {@link #isChunked()} returns {@code true}, an, +     * Sets if this message does not have any content but the, +     * {@link HttpChunk}s, which is generated by {@link HttpMessageDecoder}, +     * consecutively, contain the actual content., +     * <p>, +     * If this method is called with {@code true}, the content of this message, +     * becomes {@link ChannelBuffers#EMPTY_BUFFER}., +     */, +    void setChunked(boolean chunked);, +, +    /**, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpMessageDecoder.java, + * Content-MD5: ..., + * <i>[blank line]</i>, +                message.setChunked(true);, +                        message.setChunked(true);, +                        message.setChunked(true);, +        } else if (isChunked(message)) {, +    private static boolean isChunked(HttpMessage message) {, +        List<String> chunked = message.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING);, +        if (chunked.isEmpty()) {, +            return false;, +        }, +, +        for (String v: chunked) {, +            if (v.equalsIgnoreCase(HttpHeaders.Values.CHUNKED)) {, +                return true;, +            }, +        }, +        return false;, +    }, +]