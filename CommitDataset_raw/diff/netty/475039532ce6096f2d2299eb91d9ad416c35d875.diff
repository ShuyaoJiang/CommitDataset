[+++ b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java, +import io.netty.util.concurrent.DefaultThreadFactory;, +        EventLoopGroup l = new LocalEventLoopGroup(4, new DefaultThreadFactory("l"));, +        EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e1"));, +        EventExecutorGroup e2 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e2"));, +        EventLoopGroup l = new LocalEventLoopGroup(4, new DefaultThreadFactory("l"));, +        EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e1"));, +        EventExecutorGroup e2 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e2"));, +        EventExecutorGroup e3 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e3"));, +        EventExecutorGroup e4 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e4"));, +        EventExecutorGroup e5 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e5"));, +++ b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest.java, +import io.netty.util.concurrent.DefaultThreadFactory;, +        EventLoopGroup l = new LocalEventLoopGroup(4, new DefaultThreadFactory("l"));, +        EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e1"));, +        EventExecutorGroup e2 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e2"));, +        EventLoopGroup l = new LocalEventLoopGroup(4, new DefaultThreadFactory("l"));, +        EventExecutorGroup e1 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e1"));, +        EventExecutorGroup e2 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e2"));, +        EventExecutorGroup e3 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e3"));, +        EventExecutorGroup e4 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e4"));, +        EventExecutorGroup e5 = new DefaultEventExecutorGroup(4, new DefaultThreadFactory("e5"));, +++ b/transport/src/test/java/io/netty/channel/local/LocalTransportThreadModelTest3.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.local;, +, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelDuplexHandler;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPromise;, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultEventExecutorGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +import io.netty.util.concurrent.EventExecutorGroup;, +import org.junit.AfterClass;, +import org.junit.Assert;, +import org.junit.BeforeClass;, +import org.junit.Ignore;, +import org.junit.Test;, +, +import java.util.Deque;, +import java.util.LinkedList;, +import java.util.Queue;, +import java.util.Random;, +import java.util.UUID;, +import java.util.concurrent.ConcurrentLinkedDeque;, +, +public class LocalTransportThreadModelTest3 {, +, +    enum EventType {, +        EXCEPTION_CAUGHT,, +        USER_EVENT,, +        READ_SUSPEND,, +        INACTIVE,, +        ACTIVE,, +        UNREGISTERED,, +        REGISTERED,, +        INBOUND_BuFFER_UPDATED,, +        FLUSH,, +        READ, +    }, +, +    private static EventLoopGroup group;, +    private static LocalAddress localAddr;, +, +    @BeforeClass, +    public static void init() {, +        // Configure a test server, +        group = new LocalEventLoopGroup();, +        ServerBootstrap sb = new ServerBootstrap();, +        sb.group(group), +                .channel(LocalServerChannel.class), +                .childHandler(new ChannelInitializer<LocalChannel>() {, +                    @Override, +                    public void initChannel(LocalChannel ch) throws Exception {, +                        ch.pipeline().addLast(new ChannelInboundMessageHandlerAdapter<Object>() {, +                            @Override, +                            public void messageReceived(ChannelHandlerContext ctx, Object msg) {, +                                // Discard, +                            }, +                        });, +                    }]