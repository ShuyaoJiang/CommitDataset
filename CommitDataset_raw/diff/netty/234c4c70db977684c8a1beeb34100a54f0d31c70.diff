[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postRegisterTask = doRegister();, +                if (postRegisterTask != null) {, +                    postRegisterTask.run();, +                }, +    protected abstract Runnable doRegister() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postRegisterTask = doRegister();, +                if (postRegisterTask != null) {, +                    postRegisterTask.run();, +                }, +    protected abstract Runnable doRegister() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected Runnable doRegister() throws Exception {, +        final LocalChannel peer = this.peer;, +        Runnable postRegisterTask;, +, +, +            // Ensure the peer's channelActive event is triggered *after* this channel's, +            // channelRegistered event is triggered, so that this channel's pipeline is fully, +            // initialized by ChannelInitializer., +            final EventLoop peerEventLoop = peer.eventLoop();, +            postRegisterTask = new Runnable() {, +                @Override, +                public void run() {, +                    peerEventLoop.execute(new Runnable() {, +            };, +        } else {, +            postRegisterTask = null;, +        }, +, +        return postRegisterTask;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postRegisterTask = doRegister();, +                if (postRegisterTask != null) {, +                    postRegisterTask.run();, +                }, +    protected abstract Runnable doRegister() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected Runnable doRegister() throws Exception {, +        final LocalChannel peer = this.peer;, +        Runnable postRegisterTask;, +, +, +            // Ensure the peer's channelActive event is triggered *after* this channel's, +            // channelRegistered event is triggered, so that this channel's pipeline is fully, +            // initialized by ChannelInitializer., +            final EventLoop peerEventLoop = peer.eventLoop();, +            postRegisterTask = new Runnable() {, +                @Override, +                public void run() {, +                    peerEventLoop.execute(new Runnable() {, +            };, +        } else {, +            postRegisterTask = null;, +        }, +, +        return postRegisterTask;, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    protected Runnable doRegister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postRegisterTask = doRegister();, +                if (postRegisterTask != null) {, +                    postRegisterTask.run();, +                }, +    protected abstract Runnable doRegister() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java, +    protected Runnable doRegister() throws Exception {, +        final LocalChannel peer = this.peer;, +        Runnable postRegisterTask;, +, +, +            // Ensure the peer's channelActive event is triggered *after* this channel's, +            // channelRegistered event is triggered, so that this channel's pipeline is fully, +            // initialized by ChannelInitializer., +            final EventLoop peerEventLoop = peer.eventLoop();, +            postRegisterTask = new Runnable() {, +                @Override, +                public void run() {, +                    peerEventLoop.execute(new Runnable() {, +            };, +        } else {, +            postRegisterTask = null;, +        }, +, +        return postRegisterTask;, +++ b/transport/src/main/java/io/netty/channel/local/LocalServerChannel.java, +    protected Runnable doRegister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioChannel.java, +    protected Runnable doRegister() throws Exception {, +        return null;, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +                Runnable postRegisterTask = doRegister();, +                if (postRegisterTask != null) {, +                    postRegisterTask.run();, +                }, +    protected abstract Runnable doRegister() throws Exception;, +++ b/transport/src/main/java/io/netty/channel/local/LocalChannel.java]