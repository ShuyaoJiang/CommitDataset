[+++ b/handler/src/test/java/io/netty/handler/ssl/JdkSslEngineTest.java, +import io.netty.handler.ssl.ApplicationProtocolConfig.Protocol;, +import io.netty.handler.ssl.ApplicationProtocolConfig.SelectedListenerFailureBehavior;, +import io.netty.handler.ssl.ApplicationProtocolConfig.SelectorFailureBehavior;, +                throw tlsExtensionNotFound(Protocol.NPN);, +            ApplicationProtocolConfig apn = failingNegotiator(Protocol.NPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.NPN);, +            ApplicationProtocolConfig clientApn = acceptingNegotiator(Protocol.NPN,, +            ApplicationProtocolConfig serverApn = acceptingNegotiator(Protocol.NPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.NPN);, +            ApplicationProtocolConfig clientApn = failingNegotiator(Protocol.NPN,, +            ApplicationProtocolConfig serverApn = acceptingNegotiator(Protocol.NPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.NPN);, +            ApplicationProtocolConfig clientApn = acceptingNegotiator(Protocol.NPN,, +            ApplicationProtocolConfig serverApn = failingNegotiator(Protocol.NPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.ALPN);, +            ApplicationProtocolConfig apn = failingNegotiator(Protocol.ALPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.ALPN);, +            ApplicationProtocolConfig clientApn = acceptingNegotiator(Protocol.ALPN,, +            ApplicationProtocolConfig serverApn = acceptingNegotiator(Protocol.ALPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.ALPN);, +            ApplicationProtocolConfig clientApn = acceptingNegotiator(Protocol.ALPN,, +            ApplicationProtocolConfig serverApn = failingNegotiator(Protocol.ALPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.ALPN);, +            ApplicationProtocolConfig clientApn = acceptingNegotiator(Protocol.ALPN,, +            ApplicationProtocolConfig serverApn = failingNegotiator(Protocol.ALPN,, +        } catch (SkipTestException e) {, +                throw tlsExtensionNotFound(Protocol.ALPN);, +            SelfSignedCertificate ssc = new SelfSignedCertificate();, +, +            SslContext serverSslCtx = new JdkSslServerContext(ssc.certificate(), ssc.privateKey(), null, null,, +                    IdentityCipherSuiteFilter.INSTANCE, serverApn, 0, 0);, +            SslContext clientSslCtx = new JdkSslClientContext(null, InsecureTrustManagerFactory.INSTANCE, null,, +                    IdentityCipherSuiteFilter.INSTANCE, clientApn, 0, 0);, +, +            mySetup(serverSslCtx, clientSslCtx);, +        } catch (SkipTestException e) {, +    private void mySetup(ApplicationProtocolConfig apn) throws InterruptedException, SSLException,, +    private void mySetup(ApplicationProtocolConfig serverApn, ApplicationProtocolConfig clientApn), +, +        mySetup(SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey(), null), +                        .sslProvider(sslProvider()), +                        .ciphers(null, IdentityCipherSuiteFilter.INSTANCE), +                        .applicationProtocolConfig(serverApn), +                        .sessionCacheSize(0), +                        .sessionTimeout(0), +                        .build(),, +, +                SslContextBuilder.forClient(), +                        .sslProvider(sslProvider()), +                        .applicationProtocolConfig(clientApn), +                        .trustManager(InsecureTrustManagerFactory.INSTANCE), +                        .ciphers(null, IdentityCipherSuiteFilter.INSTANCE), +                        .sessionCacheSize(0), +                        .sessionTimeout(0), +                        .build());, +    }, +, +    private void mySetup(SslContext serverCtx, SslContext clientCtx), +      throws InterruptedException, SSLException, CertificateException {, +, +        serverSslCtx = serverCtx;, +        clientSslCtx = clientCtx;, +, +    private ApplicationProtocolConfig failingNegotiator(Protocol protocol,, +                                                        String... supportedProtocols) {, +        return new ApplicationProtocolConfig(protocol,, +                SelectorFailureBehavior.FATAL_ALERT,, +                SelectedListenerFailureBehavior.FATAL_ALERT,, +                supportedProtocols);, +    }, +, +    private ApplicationProtocolConfig acceptingNegotiator(Protocol protocol,, +                                                          String... supportedProtocols) {, +        return new ApplicationProtocolConfig(protocol,, +                SelectorFailureBehavior.NO_ADVERTISE,, +                SelectedListenerFailureBehavior.ACCEPT,, +                supportedProtocols);, +    }, +, +    private SkipTestException tlsExtensionNotFound(Protocol protocol) {, +        throw new SkipTestException(protocol + " not on classpath");, +    }, +, +    private static final class SkipTestException extends RuntimeException {, +        public SkipTestException(String message) {, +            super(message);, +        }, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/JdkSslEngineTest.java, +import io.netty.handler.ssl.ApplicationProtocolConfig.Protocol;, +import io.netty.handler.ssl.ApplicationProtocolConfig.SelectedListenerFailureBehavior;, +import io.netty.handler.ssl.ApplicationProtocolConfig.SelectorFailureBehavior;]