[+++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelConfig.java, +import io.netty.channel.ChannelOption;, + * <td>{@link ChannelOption#SO_RCVBUF}</td><td>{@link #setReceiveBufferSize(int)}</td>, + * <td>{@link ChannelOption#SO_SNDBUF}</td><td>{@link #setSendBufferSize(int)}</td>, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelConfig.java, +import io.netty.channel.ChannelOption;, + * <td>{@link ChannelOption#SO_RCVBUF}</td><td>{@link #setReceiveBufferSize(int)}</td>, + * <td>{@link ChannelOption#SO_SNDBUF}</td><td>{@link #setSendBufferSize(int)}</td>, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtMessageRendezvousChannel.java, +public class NioUdtMessageRendezvousChannel extends NioUdtMessageConnectorChannel {, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelConfig.java, +import io.netty.channel.ChannelOption;, + * <td>{@link ChannelOption#SO_RCVBUF}</td><td>{@link #setReceiveBufferSize(int)}</td>, + * <td>{@link ChannelOption#SO_SNDBUF}</td><td>{@link #setSendBufferSize(int)}</td>, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtMessageRendezvousChannel.java, +public class NioUdtMessageRendezvousChannel extends NioUdtMessageConnectorChannel {, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtProvider.java, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +     * Create a new {@link Future} which is marked as succeeded already. So {@link Future#isSuccess()}, +     * Create a new {@link Future} which is marked as failed already. So {@link Future#isSuccess()}, +++ b/example/src/main/java/io/netty/example/uptime/UptimeClient.java, +import io.netty.channel.socket.SocketChannel;, +++ b/handler/src/main/java/io/netty/handler/traffic/package-info.java, + * {@link io.netty.handler.traffic.GlobalTrafficShapingHandler} respectively for Channel traffic shaping and, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    EpollSocketChannel(Channel parent, int fd) {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelOption.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelConfig.java, +import io.netty.channel.ChannelOption;, + * <td>{@link ChannelOption#SO_RCVBUF}</td><td>{@link #setReceiveBufferSize(int)}</td>, + * <td>{@link ChannelOption#SO_SNDBUF}</td><td>{@link #setSendBufferSize(int)}</td>, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtMessageRendezvousChannel.java, +public class NioUdtMessageRendezvousChannel extends NioUdtMessageConnectorChannel {, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtProvider.java, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +     *   <li>{@link #deregister(ChannelPromise)}</li>]