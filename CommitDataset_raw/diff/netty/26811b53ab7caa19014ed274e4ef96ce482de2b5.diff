[+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.util.Arrays;, +     * Loads the first available library in the collection with the specified, +     * {@link ClassLoader}., +     *, +     * @throws IllegalArgumentException, +     *         if none of the given libraries load successfully., +     */, +    public static void loadFirstAvailable(ClassLoader loader, String... names) {, +        for (String name : names) {, +            try {, +                NativeLibraryLoader.load(name, loader);, +                return;, +            } catch (Throwable t) {, +                logger.debug("Unable to load the library: " + name + '.', t);, +            }, +        }, +        throw new IllegalArgumentException("Failed to load any of the given libraries: ", +                                           + Arrays.toString(names));, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.util.Arrays;, +     * Loads the first available library in the collection with the specified, +     * {@link ClassLoader}., +     *, +     * @throws IllegalArgumentException, +     *         if none of the given libraries load successfully., +     */, +    public static void loadFirstAvailable(ClassLoader loader, String... names) {, +        for (String name : names) {, +            try {, +                NativeLibraryLoader.load(name, loader);, +                return;, +            } catch (Throwable t) {, +                logger.debug("Unable to load the library: " + name + '.', t);, +            }, +        }, +        throw new IllegalArgumentException("Failed to load any of the given libraries: ", +                                           + Arrays.toString(names));, +    }, +, +    /**, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +    private static final String LINUX = "linux";, +, +                Set<String> libNames = new LinkedHashSet<String>(3);, +                libNames.add("netty-tcnative-" + os + '-' + arch);, +                if (LINUX.equalsIgnoreCase(os)) {, +                    // Fedora SSL lib so naming (libssl.so.10 vs libssl.so.1.0.0).., +                    libNames.add("netty-tcnative-" + os + '-' + arch + "-fedora");, +                // finally the default library., +                libNames.add("netty-tcnative");, +, +                NativeLibraryLoader.loadFirstAvailable(SSL.class.getClassLoader(),, +                        libNames.toArray(new String[libNames.size()]));, +        if (value.startsWith(LINUX)) {, +            return LINUX;]