[+++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    DefaultEventExecutor(, +            DefaultEventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        super(parent, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    DefaultEventExecutor(, +            DefaultEventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        super(parent, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +    protected EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception {, +        return new DefaultEventExecutor(this, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    DefaultEventExecutor(, +            DefaultEventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        super(parent, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +    protected EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception {, +        return new DefaultEventExecutor(this, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +    final TaskScheduler scheduler;, +        scheduler = new TaskScheduler(threadFactory);, +, +                children[i] = newChild(threadFactory, scheduler, args);, +    protected abstract EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception;, +        scheduler.shutdown();, +        if (!scheduler.isShutdown()) {, +            return false;, +        }, +        if (!scheduler.isTerminated()) {, +            return false;, +        }, +        for (;;) {, +            long timeLeft = deadline - System.nanoTime();, +            if (timeLeft <= 0) {, +                return isTerminated();, +            }, +            if (scheduler.awaitTermination(timeLeft, TimeUnit.NANOSECONDS)) {, +                break;, +            }, +        }, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    DefaultEventExecutor(, +            DefaultEventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        super(parent, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +    protected EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception {, +        return new DefaultEventExecutor(this, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +    final TaskScheduler scheduler;, +        scheduler = new TaskScheduler(threadFactory);, +, +                children[i] = newChild(threadFactory, scheduler, args);, +    protected abstract EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception;, +        scheduler.shutdown();, +        if (!scheduler.isShutdown()) {, +            return false;, +        }, +        if (!scheduler.isTerminated()) {, +            return false;, +        }, +        for (;;) {, +            long timeLeft = deadline - System.nanoTime();, +            if (timeLeft <= 0) {, +                return isTerminated();, +            }, +            if (scheduler.awaitTermination(timeLeft, TimeUnit.NANOSECONDS)) {, +                break;, +            }, +        }, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventExecutor.java, +    private final TaskScheduler scheduler;, +    protected SingleThreadEventExecutor(, +            EventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        if (scheduler == null) {, +            throw new NullPointerException("scheduler");, +        }, +        this.scheduler = scheduler;, +        return taskQueue.poll();, +        return taskQueue.take();, +        return taskQueue.peek();, +        return scheduler.schedule(this, command, delay, unit);, +        return scheduler.schedule(this, callable, delay, unit);, +        return scheduler.scheduleAtFixedRate(this, command, initialDelay, period, unit);, +        return scheduler.scheduleWithFixedDelay(this, command, initialDelay, delay, unit);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    DefaultEventExecutor(, +            DefaultEventExecutorGroup parent, ThreadFactory threadFactory, TaskScheduler scheduler) {, +        super(parent, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +    protected EventExecutor newChild(, +            ThreadFactory threadFactory, TaskScheduler scheduler, Object... args) throws Exception {, +        return new DefaultEventExecutor(this, threadFactory, scheduler);, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +    final TaskScheduler scheduler;, +        scheduler = new TaskScheduler(threadFactory);]