[+++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpClientCodec.java, +/*, + * Copyright 2010 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.codec.http;, +, +import java.util.Queue;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelDownstreamHandler;, +import org.jboss.netty.channel.ChannelEvent;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelUpstreamHandler;, +import org.jboss.netty.util.internal.LinkedTransferQueue;, +, +/**, + * A combination of {@link HttpRequestEncoder} and {@link HttpResponseDecoder}, + * which enables easier client side HTTP implementation. {@link HttpClientCodec}, + * provides additional state management for <tt>HEAD</tt> and <tt>CONNECT</tt>, + * requests, which {@link HttpResponseDecoder} lacks.  Please refer to, + * {@link HttpResponseDecoder} to learn what additional state management needs, + * to be done for <tt>HEAD</tt> and <tt>CONNECT</tt> and why, + * {@link HttpResponseDecoder} can not handle it by itself., + *, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + * @version $Rev$, $Date$, + *, + * @see HttpServerCodec, + */, +public class HttpClientCodec implements ChannelUpstreamHandler,, +        ChannelDownstreamHandler {, +, +    /** A queue that is used for correlating a request and a response. */, +    final Queue<HttpMethod> queue = new LinkedTransferQueue<HttpMethod>();, +, +    /** If true, decoding stops (i.e. pass-through) */, +    volatile boolean done;, +, +    private final HttpRequestEncoder encoder = new Encoder();, +    private final HttpResponseDecoder decoder;, +, +    /**, +     * Creates a new instance with the default decoder options, +     * ({@code maxInitialLineLength (4096}}, {@code maxHeaderSize (8192)}, and, +     * {@code maxChunkSize (8192)})., +     */, +    public HttpClientCodec() {, +        this(4096, 8192, 8192);, +    }, +, +    /**, +     * Creates a new instance with the specified decoder options., +     */, +    public HttpClientCodec(, +            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize) {, +        decoder = new Decoder(maxInitialLineLength, maxHeaderSize, maxChunkSize);, +    }, +, +    public void handleUpstream(ChannelHandlerContext ctx, ChannelEvent e), +            throws Exception {, +        decoder.handleUpstream(ctx, e);, +    }, +, +    public void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e), +            throws Exception {, +        encoder.handleDownstream(ctx, e);, +    }, +, +    private final class Encoder extends HttpRequestEncoder {, +, +        Encoder() {, +            super();, +        }, +, +        @Override, +        protected Object encode(ChannelHandlerContext ctx, Channel channel,, +                Object msg) throws Exception {, +            if (msg instanceof HttpRequest && !done) {, +                queue.offer(((HttpRequest) msg).getMethod());, +            }, +            return super.encode(ctx, channel, msg);, +        }, +    }, +, +    private final class Decoder extends HttpResponseDecoder {, +]