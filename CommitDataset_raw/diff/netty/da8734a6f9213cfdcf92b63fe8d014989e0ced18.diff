[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import io.netty.handler.codec.http.HttpHeaderValues;, +import io.netty.handler.codec.http.HttpRequest;, +import io.netty.handler.codec.http.HttpUtil;, +                HttpRequest req = HttpConversionUtil.toHttpRequest(id, headersFrame.headers(), validateHeaders);, +                if (!HttpUtil.isContentLengthSet(req)) {, +                    req.headers().add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +                out.add(req);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java, +import io.netty.handler.codec.http.HttpHeaderNames;, +import io.netty.handler.codec.http.HttpHeaderValues;, +import io.netty.handler.codec.http.HttpRequest;, +import io.netty.handler.codec.http.HttpUtil;, +                HttpRequest req = HttpConversionUtil.toHttpRequest(id, headersFrame.headers(), validateHeaders);, +                if (!HttpUtil.isContentLengthSet(req)) {, +                    req.headers().add(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +                out.add(req);, +            }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ServerDowngraderTest.java, +import io.netty.handler.codec.http.HttpUtil;, +        assertTrue(HttpUtil.isTransferEncodingChunked(request));, +, +        assertThat(ch.readInbound(), is(nullValue()));, +        assertFalse(ch.finish());, +    }, +, +    @Test, +    public void testDowngradeHeadersWithContentLength() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new Http2ServerDowngrader());, +        Http2Headers headers = new DefaultHttp2Headers();, +        headers.path("/");, +        headers.method("GET");, +        headers.setInt("content-length", 0);, +, +        assertTrue(ch.writeInbound(new DefaultHttp2HeadersFrame(headers)));, +, +        HttpRequest request = ch.readInbound();, +        assertThat(request.uri(), is("/"));, +        assertThat(request.method(), is(HttpMethod.GET));, +        assertThat(request.protocolVersion(), is(HttpVersion.HTTP_1_1));, +        assertFalse(request instanceof FullHttpRequest);, +        assertFalse(HttpUtil.isTransferEncodingChunked(request));, +            assertFalse(HttpUtil.isTransferEncodingChunked(request));]