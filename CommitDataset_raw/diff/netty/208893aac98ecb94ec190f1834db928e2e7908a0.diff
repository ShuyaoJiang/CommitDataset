[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;, +                encodeInteger(out, 0x40, 6, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x00, 4, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x10, 4, nameIndexValid ? nameIndex : 0);, +                throw new Error("should not reach here");, +        if (!nameIndexValid) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;, +                encodeInteger(out, 0x40, 6, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x00, 4, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x10, 4, nameIndexValid ? nameIndex : 0);, +                throw new Error("should not reach here");, +        if (!nameIndexValid) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/internal/hpack/TestCase.java, +        return new Encoder(maxHeaderTableSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;, +                encodeInteger(out, 0x40, 6, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x00, 4, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x10, 4, nameIndexValid ? nameIndex : 0);, +                throw new Error("should not reach here");, +        if (!nameIndexValid) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/internal/hpack/TestCase.java, +        return new Encoder(maxHeaderTableSize);, +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testDuplicateHeaders.json, +        "4f03 7661 6c", +        "bfbe 4082 94e7 0362 6172 bf", +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;, +                encodeInteger(out, 0x40, 6, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x00, 4, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x10, 4, nameIndexValid ? nameIndex : 0);, +                throw new Error("should not reach here");, +        if (!nameIndexValid) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/internal/hpack/TestCase.java, +        return new Encoder(maxHeaderTableSize);, +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testDuplicateHeaders.json, +        "4f03 7661 6c", +        "bfbe 4082 94e7 0362 6172 bf", +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testEviction.json, +        "4487 6107 a4b5 8d33 ff40 86f2 b12d 424f",, +        "4f83 ee3a 1a7e 83ee 3a1b 7e83 ee3a 1c", +        "4487 6107 a4b5 8d33 ff40 86f2 b12d 424f",, +        "4f83 ee3a 037e 83ee 3a05 7e83 ee3a 19", +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;, +                encodeInteger(out, 0x40, 6, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x00, 4, nameIndexValid ? nameIndex : 0);, +                encodeInteger(out, 0x10, 4, nameIndexValid ? nameIndex : 0);, +                throw new Error("should not reach here");, +        if (!nameIndexValid) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/internal/hpack/TestCase.java, +        return new Encoder(maxHeaderTableSize);, +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testDuplicateHeaders.json, +        "4f03 7661 6c", +        "bfbe 4082 94e7 0362 6172 bf", +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testEviction.json, +        "4487 6107 a4b5 8d33 ff40 86f2 b12d 424f",, +        "4f83 ee3a 1a7e 83ee 3a1b 7e83 ee3a 1c", +        "4487 6107 a4b5 8d33 ff40 86f2 b12d 424f",, +        "4f83 ee3a 037e 83ee 3a05 7e83 ee3a 19", +++ b/codec-http2/src/test/resources/io/netty/handler/codec/http2/internal/hpack/testdata/testMaxHeaderTableSize.json, +        "4084 a874 943f 83ee 3a03 4084 a874 945f",, +        "83ee 3a05 4084 a874 959f 83ee 3a19", +        "3f32 be40 84a8 7494 5f83 ee3a 05", +        "3f61 4084 a874 943f 83ee 3a03 bf40 84a8",, +        "7495 9f83 ee3a 19", +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +                encodeLiteral(out, name, value, INCREMENTAL, getNameIndex(name));, +        assert n >= 0 && n <= 8 : "N: " + n;, +            for (; (length & ~0x7F) != 0; length >>>= 7) {, +            out.writeByte(length);, +        if (huffmanLength < string.length()) {, +        boolean nameIndexValid = nameIndex != -1;]