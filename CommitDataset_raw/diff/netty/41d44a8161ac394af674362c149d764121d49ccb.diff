[+++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, +        if (c.version() >= 1) {, +        add(buf, c.name(), c.value());, +        if (c.path() != null) {, +            add(buf, '$' + CookieHeaderNames.PATH, c.path());, +        if (c.domain() != null) {, +            add(buf, '$' + CookieHeaderNames.DOMAIN, c.domain());, +        if (c.version() >= 1) {, +            if (!c.ports().isEmpty()) {, +                for (int port: c.ports()) {, +++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, +        if (c.version() >= 1) {, +        add(buf, c.name(), c.value());, +        if (c.path() != null) {, +            add(buf, '$' + CookieHeaderNames.PATH, c.path());, +        if (c.domain() != null) {, +            add(buf, '$' + CookieHeaderNames.DOMAIN, c.domain());, +        if (c.version() >= 1) {, +            if (!c.ports().isEmpty()) {, +                for (int port: c.ports()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/Cookie.java, +     * @deprecated Use {@link #name()} instead., +     */, +    @Deprecated, +    String getName();, +, +    /**, +    String name();, +, +    /**, +     * @deprecated Use {@link #value()} instead., +     */, +    @Deprecated, +    String getValue();, +    String value();, +     * @deprecated Use {@link #domain()} instead., +     */, +    @Deprecated, +    String getDomain();, +, +    /**, +    String domain();, +     * @deprecated Use {@link #path()} instead., +     */, +    @Deprecated, +    String getPath();, +, +    /**, +    String path();, +     * @deprecated Use {@link #comment()} instead., +     */, +    @Deprecated, +    String getComment();, +, +    /**, +    String comment();, +     * @deprecated Use {@link #maxAge()} instead., +     */, +    @Deprecated, +    long getMaxAge();, +, +    /**, +    long maxAge();, +     * @deprecated Use {@link #version()} instead., +     */, +    @Deprecated, +    int getVersion();, +, +    /**, +    int version();, +     * @deprecated Use {@link #commentUrl()} instead., +     */, +    @Deprecated, +    String getCommentUrl();, +, +    /**, +    String commentUrl();, +     * @deprecated Use {@link #ports()} instead., +     */, +    @Deprecated, +    Set<Integer> getPorts();, +, +    /**, +    Set<Integer> ports();, +++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, +        if (c.version() >= 1) {, +        add(buf, c.name(), c.value());, +        if (c.path() != null) {]