[+++ b/common/src/main/java/io/netty/util/internal/ThreadLocalRandom.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +    private static final BlockingQueue<Long> seedQueue;, +            boolean secureRandom = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {, +                @Override, +                public Boolean run() {, +                    return SystemPropertyUtil.getBoolean("java.util.secureRandomSeed", false);, +                }, +            });, +, +            if (secureRandom) {, +                seedQueue = new LinkedBlockingQueue<Long>();, +                seedGeneratorStartTime = System.nanoTime();, +, +                        long s = ((long) seed[0] & 0xff) << 56 |, +                                 ((long) seed[1] & 0xff) << 48 |, +                                 ((long) seed[2] & 0xff) << 40 |, +                                 ((long) seed[3] & 0xff) << 32 |, +                                 ((long) seed[4] & 0xff) << 24 |, +                                 ((long) seed[5] & 0xff) << 16 |, +                                 ((long) seed[6] & 0xff) <<  8 |, +                                 (long) seed[7] & 0xff;, +                        seedQueue.add(s);, +                initialSeedUniquifier = mix64(System.currentTimeMillis()) ^ mix64(System.nanoTime());, +                seedGeneratorThread = null;, +                seedQueue = null;, +                seedGeneratorStartTime = 0L;, +            }, +        } else {, +                    final Long seed;, +                        initialSeedUniquifier = seed;, +    // Borrowed from, +    // http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/ThreadLocalRandom.java, +    private static long mix64(long z) {, +        z = (z ^ (z >>> 33)) * 0xff51afd7ed558ccdL;, +        z = (z ^ (z >>> 33)) * 0xc4ceb9fe1a85ec53L;, +        return z ^ (z >>> 33);, +    }, +]