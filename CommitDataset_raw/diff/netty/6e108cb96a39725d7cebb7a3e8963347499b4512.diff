[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +import java.util.Map;, +        public CombinedHttpHeadersImpl add(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            // Override the fast-copy mechanism used by DefaultHeaders, +            if (headers == this) {, +                throw new IllegalArgumentException("can't add to itself.");, +            }, +            if (headers instanceof CombinedHttpHeadersImpl) {, +                if (isEmpty()) {, +                    // Can use the fast underlying copy, +                    addImpl(headers);, +                } else {, +                    // Values are already escaped so don't escape again, +                    for (Map.Entry<? extends CharSequence, ? extends CharSequence> header : headers) {, +                        addEscapedValue(header.getKey(), header.getValue());, +                    }, +                }, +            } else {, +                for (Map.Entry<? extends CharSequence, ? extends CharSequence> header : headers) {, +                    add(header.getKey(), header.getValue());, +                }, +            }, +            return this;, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl set(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            if (headers == this) {, +                return this;, +            }, +            clear();, +            return add(headers);, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl setAll(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            if (headers == this) {, +                return this;, +            }, +            for (CharSequence key : headers.names()) {, +                remove(key);, +            }, +            return add(headers);, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import io.netty.handler.codec.Headers;, +import java.util.Map;, +        public CombinedHttpHeadersImpl add(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            // Override the fast-copy mechanism used by DefaultHeaders, +            if (headers == this) {, +                throw new IllegalArgumentException("can't add to itself.");, +            }, +            if (headers instanceof CombinedHttpHeadersImpl) {, +                if (isEmpty()) {, +                    // Can use the fast underlying copy, +                    addImpl(headers);, +                } else {, +                    // Values are already escaped so don't escape again, +                    for (Map.Entry<? extends CharSequence, ? extends CharSequence> header : headers) {, +                        addEscapedValue(header.getKey(), header.getValue());, +                    }, +                }, +            } else {, +                for (Map.Entry<? extends CharSequence, ? extends CharSequence> header : headers) {, +                    add(header.getKey(), header.getValue());, +                }, +            }, +            return this;, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl set(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            if (headers == this) {, +                return this;, +            }, +            clear();, +            return add(headers);, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl setAll(Headers<? extends CharSequence, ? extends CharSequence, ?> headers) {, +            if (headers == this) {, +                return this;, +            }, +            for (CharSequence key : headers.names()) {, +                remove(key);, +            }, +            return add(headers);, +        }, +, +        @Override, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import io.netty.handler.codec.DefaultHeaders;, +import static org.junit.Assert.assertEquals;, +    public void addCombinedHeadersWhenEmpty() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders();]