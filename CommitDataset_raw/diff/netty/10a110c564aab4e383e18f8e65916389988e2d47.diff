[+++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +import org.jboss.netty.channel.ChannelPipelineCoverage;, + * the common data structure for its subclasses which actually initialize, + * {@link Channel}s and their child {@link Channel}s. using the common data, + * structure.  Please refer to {@link ClientBootstrap}, {@link ServerBootstrap},, + * and {@link ConnectionlessBootstrap} for client side, server-side, and, + * connectionless (e.g. UDP) channel initialization respectively., +     * {@link Channel} is created.  {@link Bootstrap} creates a new pipeline, +     * which has the same entries with the returned pipeline for a new, +     * {@link Channel}., +     * {@link Channel} is created.  {@link Bootstrap} creates a new pipeline, +     * which has the same entries with the specified pipeline for a new channel., +     * <p>, +     * Calling this method also sets the {@code pipelineFactory} property to an, +     * a shallow copy of the specified pipeline., +     * <p>, +     * Please note that this method is a convenience method that works only, +     * when <b>1)</b> you create only one channel from this bootstrap (e.g., +     * one-time client-side or connectionless channel) or <b>2)</b> the, +     * {@link ChannelPipelineCoverage} of all handlers in the pipeline is, +     * {@code "all"}.  You have to use, +     * {@link #setPipelineFactory(ChannelPipelineFactory)} if <b>1)</b> your, +     * pipeline contains a {@link ChannelHandler} whose, +     * {@link ChannelPipelineCoverage} is {@code "one"} and <b>2)</b> one or, +     * more channels are going to be created by this bootstrap (e.g. server-side, +     * channels)., +     * Dependency injection friendly convenience method for, +     * {@link #getPipeline()} which returns the default pipeline of this, +     * bootstrap as an ordered map., +     *         if {@link #setPipelineFactory(ChannelPipelineFactory)} was, +     *         called by a user last time., +     * Dependency injection friendly convenience method for, +     * {@link #setPipeline(ChannelPipeline)} which sets the default pipeline of, +     * this bootstrap from an ordered map., +     * Returns the options which configures a new {@link Channel} and its, +     * child {@link Channel}s.  The names of the child {@link Channel} options, +     * are prepended with {@code "child."} (e.g. {@code "child.keepAlive"})., +     * Sets the options which configures a new {@link Channel} and its child, +     * {@link Channel}s.  To set the options of a child {@link Channel}, prepend, +     * {@code "child."} to the option name (e.g. {@code "child.keepAlive"})., +     * Returns the value of the option with the specified key.  To retrieve, +     * the option value of a child {@link Channel}, prepend {@code "child."}, +     * to the option name (e.g. {@code "child.keepAlive"})., +     *, +     * @param key  the option name, +     * key is removed.  To set the option value of a child {@link Channel},, +     * prepend {@code "child."} to the option name (e.g. {@code "child.keepAlive"})., +     *, +     * @param key    the option name, +     * @param value  the option value, +    /**, +     * {@inheritDoc}  This method simply delegates the call to, +     * {@link ChannelFactory#releaseExternalResources()}., +     */]