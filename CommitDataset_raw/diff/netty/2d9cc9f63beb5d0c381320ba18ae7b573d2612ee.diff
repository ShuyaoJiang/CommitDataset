[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.regex.Pattern;, +, +    /**, +     * Different modes to use to encode form data., +     */, +    public enum EncoderMode {, +        /**, +         *  Legacy mode which should work for most. It is known to not work with OAUTH. For OAUTH use, +         *  {@link EncoderMode#RFC3986}. The W3C form recommentations this for submitting post form data., +         */, +        RFC1738,, +, +        /**, +         * Mode which is more new and is used for OAUTH, +         */, +        RFC3986, +    }, +, +    private static final Map<Pattern, String> percentEncodings = new HashMap<Pattern, String>();, +, +    static {, +        percentEncodings.put(Pattern.compile("\\*"), "%2A");, +        percentEncodings.put(Pattern.compile("\\+"), "%20");, +        percentEncodings.put(Pattern.compile("%7E"), "~");, +    }, +, +    private final EncoderMode encoderMode;, +, +                HttpConstants.DEFAULT_CHARSET, EncoderMode.RFC1738);, +        this(factory, request, multipart, HttpConstants.DEFAULT_CHARSET, EncoderMode.RFC1738);, +     * @param encoderMode, +     *            the mode for the encoder to use. See {@link EncoderMode} for the details., +            HttpDataFactory factory, FullHttpRequest request, boolean multipart, Charset charset,, +            EncoderMode encoderMode), +        this.encoderMode = encoderMode;, +    private String encodeAttribute(String s, Charset charset) throws ErrorDataEncoderException {, +            String encoded = URLEncoder.encode(s, charset.name());, +            if (encoderMode == EncoderMode.RFC3986) {, +                for (Map.Entry<Pattern, String> entry : percentEncodings.entrySet()) {, +                    String replacement = entry.getValue();, +                    encoded = entry.getKey().matcher(encoded).replaceAll(replacement);, +                }, +            }, +            return encoded;]