[+++ b/common/src/main/java/io/netty/util/AttributeKey.java, +     * Returns {@code true} if a {@link AttributeKey} exists for the given {@code name}., +    public static boolean exists(String name) {, +        return pool.exists(name);, +    }, +, +    /**, +     * Creates a new {@link AttributeKey} for the given {@param name} or fail with an, +     * {@link IllegalArgumentException} if a {@link AttributeKey} for the given {@param name} exists., +     */, +    @SuppressWarnings("unchecked"), +    public static <T> AttributeKey<T> newInstance(String name) {, +        return (AttributeKey<T>) pool.newInstance(name);, +    }, +, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +     * Returns {@code true} if a {@link AttributeKey} exists for the given {@code name}., +    public static boolean exists(String name) {, +        return pool.exists(name);, +    }, +, +    /**, +     * Creates a new {@link AttributeKey} for the given {@param name} or fail with an, +     * {@link IllegalArgumentException} if a {@link AttributeKey} for the given {@param name} exists., +     */, +    @SuppressWarnings("unchecked"), +    public static <T> AttributeKey<T> newInstance(String name) {, +        return (AttributeKey<T>) pool.newInstance(name);, +    }, +, +++ b/common/src/main/java/io/netty/util/ConstantPool.java, +import io.netty.util.internal.ObjectUtil;, +, +    /**, +     * Returns {@code true} if a {@link AttributeKey} exists for the given {@code name}., +     */, +    public boolean exists(String name) {, +        ObjectUtil.checkNotNull(name, "name");, +        synchronized (constants) {, +            return constants.containsKey(name);, +        }, +    }, +, +    /**, +     * Creates a new {@link Constant} for the given {@param name} or fail with an, +     * {@link IllegalArgumentException} if a {@link Constant} for the given {@param name} exists., +     */, +    @SuppressWarnings("unchecked"), +    public T newInstance(String name) {, +        if (name == null) {, +            throw new NullPointerException("name");, +        }, +, +        if (name.isEmpty()) {, +            throw new IllegalArgumentException("empty name");, +        }, +, +        synchronized (constants) {, +            T c = constants.get(name);, +            if (c == null) {, +                c = newConstant(nextId, name);, +                constants.put(name, c);, +                nextId ++;, +            } else {, +                throw new IllegalArgumentException(String.format("'%s' is already in use", name));, +            }, +            return c;, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +     * Returns {@code true} if a {@link AttributeKey} exists for the given {@code name}., +    public static boolean exists(String name) {, +        return pool.exists(name);, +    }, +, +    /**, +     * Creates a new {@link AttributeKey} for the given {@param name} or fail with an, +     * {@link IllegalArgumentException} if a {@link AttributeKey} for the given {@param name} exists., +     */, +    @SuppressWarnings("unchecked"), +    public static <T> AttributeKey<T> newInstance(String name) {, +        return (AttributeKey<T>) pool.newInstance(name);, +    }, +, +++ b/common/src/main/java/io/netty/util/ConstantPool.java, +import io.netty.util.internal.ObjectUtil;, +, +    /**, +     * Returns {@code true} if a {@link AttributeKey} exists for the given {@code name}., +     */, +    public boolean exists(String name) {, +        ObjectUtil.checkNotNull(name, "name");, +        synchronized (constants) {, +            return constants.containsKey(name);, +        }, +    }, +, +    /**, +     * Creates a new {@link Constant} for the given {@param name} or fail with an]