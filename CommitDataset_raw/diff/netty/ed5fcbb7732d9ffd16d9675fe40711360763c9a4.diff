[+++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.io.Closeable;, +import java.nio.file.Files;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.EnumSet;, +import java.util.Set;, +        } catch (UnsatisfiedLinkError e) {, +            try {, +                if (tmpFile != null && tmpFile.isFile() && tmpFile.canRead() &&, +                    !NoexecVolumeDetector.canExecuteExecutable(tmpFile)) {, +                    logger.info("{} exists but cannot be executed even when execute permissions set; " +, +                                "check volume for \"noexec\" flag; use -Dio.netty.native.workdir=[path] " +, +                                "to set native working directory separately.",, +                                tmpFile.getPath());, +                }, +            } catch (Throwable t) {, +                logger.debug("Error checking if {} is on a file store mounted with noexec", tmpFile, t);, +            }, +            // Re-throw to fail the load, +            throw e;, +, +    private static final class NoexecVolumeDetector {, +, +        private static boolean canExecuteExecutable(File file) throws IOException {, +            if (PlatformDependent.javaVersion() < 7) {, +                // Pre-JDK7, the Java API did not directly support POSIX permissions; instead of implementing a custom, +                // work-around, assume true, which disables the check., +                return true;, +            }, +, +            // If we can already execute, there is nothing to do., +            if (file.canExecute()) {, +                return true;, +            }, +, +            // On volumes, with noexec set, even files with the executable POSIX permissions will fail to execute., +            // The File#canExecute() method honors this behavior, probaby via parsing the noexec flag when initializing, +            // the UnixFileStore, though the flag is not exposed via a public API.  To find out if library is being, +            // loaded off a volume with noexec, confirm or add executalbe permissions, then check File#canExecute()., +, +            Set<PosixFilePermission> existingFilePermissions = Files.getPosixFilePermissions(file.toPath());, +            Set<PosixFilePermission> executePermissions = EnumSet.of(PosixFilePermission.OWNER_EXECUTE,, +                                                                     PosixFilePermission.GROUP_EXECUTE,, +                                                                     PosixFilePermission.OTHERS_EXECUTE);, +            if (existingFilePermissions.containsAll(executePermissions)) {, +                return false;, +            }, +, +            Set<PosixFilePermission> newPermissions = EnumSet.copyOf(existingFilePermissions);, +            newPermissions.addAll(executePermissions);, +            Files.setPosixFilePermissions(file.toPath(), newPermissions);, +            return file.canExecute();, +        }, +, +        private NoexecVolumeDetector() {, +            // Utility, +        }, +    }, +++ b/common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java, +import java.io.Closeable;, +import java.nio.file.Files;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.EnumSet;, +import java.util.Set;, +        } catch (UnsatisfiedLinkError e) {, +            try {, +                if (tmpFile != null && tmpFile.isFile() && tmpFile.canRead() &&, +                    !NoexecVolumeDetector.canExecuteExecutable(tmpFile)) {, +                    logger.info("{} exists but cannot be executed even when execute permissions set; " +, +                                "check volume for \"noexec\" flag; use -Dio.netty.native.workdir=[path] " +, +                                "to set native working directory separately.",, +                                tmpFile.getPath());, +                }, +            } catch (Throwable t) {, +                logger.debug("Error checking if {} is on a file store mounted with noexec", tmpFile, t);, +            }, +            // Re-throw to fail the load, +            throw e;, +, +    private static final class NoexecVolumeDetector {, +, +        private static boolean canExecuteExecutable(File file) throws IOException {, +            if (PlatformDependent.javaVersion() < 7) {, +                // Pre-JDK7, the Java API did not directly support POSIX permissions; instead of implementing a custom, +                // work-around, assume true, which disables the check., +                return true;, +            }, +, +            // If we can already execute, there is nothing to do., +            if (file.canExecute()) {, +                return true;, +            }, +, +            // On volumes, with noexec set, even files with the executable POSIX permissions will fail to execute., +            // The File#canExecute() method honors this behavior, probaby via parsing the noexec flag when initializing, +            // the UnixFileStore, though the flag is not exposed via a public API.  To find out if library is being, +            // loaded off a volume with noexec, confirm or add executalbe permissions, then check File#canExecute()., +, +            Set<PosixFilePermission> existingFilePermissions = Files.getPosixFilePermissions(file.toPath());, +            Set<PosixFilePermission> executePermissions = EnumSet.of(PosixFilePermission.OWNER_EXECUTE,]