[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the absolute point in time (relative to {@link #nanoTime()}) at which the the next, +     * closest scheduled task should run., +     */, +    @UnstableApi, +    protected long deadlineNanos() {, +        ScheduledFutureTask<?> scheduledTask = peekScheduledTask();, +        if (scheduledTask == null) {, +            return nanoTime() + SCHEDULE_PURGE_INTERVAL;, +        }, +        return scheduledTask.deadlineNanos();, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the absolute point in time (relative to {@link #nanoTime()}) at which the the next, +     * closest scheduled task should run., +     */, +    @UnstableApi, +    protected long deadlineNanos() {, +        ScheduledFutureTask<?> scheduledTask = peekScheduledTask();, +        if (scheduledTask == null) {, +            return nanoTime() + SCHEDULE_PURGE_INTERVAL;, +        }, +        return scheduledTask.deadlineNanos();, +    }, +, +    /**, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +        // only reschedule the timer if there is a newer event., +        // -1 is a special value used by EpollEventLoop., +        if (tvSec != ((jint) -1) && tvNsec != ((jint) -1)) {, +        }, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +     * Returns the absolute point in time (relative to {@link #nanoTime()}) at which the the next, +     * closest scheduled task should run., +     */, +    @UnstableApi, +    protected long deadlineNanos() {, +        ScheduledFutureTask<?> scheduledTask = peekScheduledTask();, +        if (scheduledTask == null) {, +            return nanoTime() + SCHEDULE_PURGE_INTERVAL;, +        }, +        return scheduledTask.deadlineNanos();, +    }, +, +    /**, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +        // only reschedule the timer if there is a newer event., +        // -1 is a special value used by EpollEventLoop., +        if (tvSec != ((jint) -1) && tvNsec != ((jint) -1)) {, +        }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +    // Pick a number that no task could have previously used., +    private long prevDeadlineNanos = nanoTime() - 1;, +        int delaySeconds;, +        int delayNanos;, +        long curDeadlineNanos = deadlineNanos();, +        if (curDeadlineNanos == prevDeadlineNanos) {, +            delaySeconds = -1;, +            delayNanos = -1;, +        } else {, +            prevDeadlineNanos = curDeadlineNanos;, +            delaySeconds = (int) min(totalDelay / 1000000000L, Integer.MAX_VALUE);, +            delayNanos = (int) min(totalDelay - delaySeconds * 1000000000L, Integer.MAX_VALUE);, +        }, +        return Native.epollWait(epollFd, events, timerFd, delaySeconds, delayNanos);]