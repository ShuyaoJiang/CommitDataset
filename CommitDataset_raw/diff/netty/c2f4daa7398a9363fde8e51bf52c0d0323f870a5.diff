[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.ResourceLeakTracker;, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.ResourceLeakTracker;, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +    // Called from within SimpleLeakAwareByteBuf and AdvancedLeakAwareByteBuf., +    final void parent(ByteBuf newParent) {, +        assert newParent instanceof SimpleLeakAwareByteBuf;, +        parent = newParent;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.ResourceLeakTracker;, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +    // Called from within SimpleLeakAwareByteBuf and AdvancedLeakAwareByteBuf., +    final void parent(ByteBuf newParent) {, +        assert newParent instanceof SimpleLeakAwareByteBuf;, +        parent = newParent;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +import io.netty.util.ResourceLeakTracker;, +final class AdvancedLeakAwareByteBuf extends SimpleLeakAwareByteBuf {, +    AdvancedLeakAwareByteBuf(ByteBuf buf, ResourceLeakTracker<ByteBuf> leak) {, +        super(buf, leak);, +    AdvancedLeakAwareByteBuf(ByteBuf wrapped, ByteBuf trackedByteBuf, ResourceLeakTracker<ByteBuf> leak) {, +        super(wrapped, trackedByteBuf, leak);, +    }, +, +    static void recordLeakNonRefCountingOperation(ResourceLeakTracker<ByteBuf> leak) {, +        return super.order(endianness);, +        return super.slice();, +        return super.slice(index, length);, +    }, +, +    @Override, +    public ByteBuf retainedSlice() {, +        recordLeakNonRefCountingOperation(leak);, +        return super.retainedSlice();, +        return super.retainedSlice(index, length);, +        return super.retainedDuplicate();, +        return super.readRetainedSlice(length);, +    }, +, +    @Override, +    public ByteBuf duplicate() {, +        recordLeakNonRefCountingOperation(leak);, +        return super.duplicate();, +    }, +, +    @Override, +    public ByteBuf readSlice(int length) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.readSlice(length);, +        return super.asReadOnly();, +    protected AdvancedLeakAwareByteBuf newLeakAwareByteBuf(, +            ByteBuf buf, ByteBuf trackedByteBuf, ResourceLeakTracker<ByteBuf> leakTracker) {, +        return new AdvancedLeakAwareByteBuf(buf, trackedByteBuf, leakTracker);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +import io.netty.util.ResourceLeakTracker;, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +        ResourceLeakTracker<ByteBuf> leak;, +                leak = AbstractByteBuf.leakDetector.track(buf);, +                leak = AbstractByteBuf.leakDetector.track(buf);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +    // Called from within SimpleLeakAwareByteBuf and AdvancedLeakAwareByteBuf., +    final void parent(ByteBuf newParent) {, +        assert newParent instanceof SimpleLeakAwareByteBuf;, +        parent = newParent;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +import io.netty.util.ResourceLeakTracker;, +final class AdvancedLeakAwareByteBuf extends SimpleLeakAwareByteBuf {, +    AdvancedLeakAwareByteBuf(ByteBuf buf, ResourceLeakTracker<ByteBuf> leak) {, +        super(buf, leak);, +    AdvancedLeakAwareByteBuf(ByteBuf wrapped, ByteBuf trackedByteBuf, ResourceLeakTracker<ByteBuf> leak) {, +        super(wrapped, trackedByteBuf, leak);, +    }, +]