[+++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +    public static ChannelBuffer copyInt(int value) {, +    public static ChannelBuffer copyInt(int... values) {, +    public static ChannelBuffer copyShort(int value) {, +    public static ChannelBuffer copyShort(short... values) {, +        if (values == null || values.length == 0) {, +            return EMPTY_BUFFER;, +        }, +        ChannelBuffer buffer = buffer(values.length * 2);, +        for (int v: values) {, +            buffer.writeShort(v);, +        }, +        return buffer;, +    }, +, +    /**, +     * Create a new buffer that holds a sequence of the specified 16-bit integers., +     */, +    public static ChannelBuffer copyShort(int... values) {, +    public static ChannelBuffer copyMedium(int value) {, +    public static ChannelBuffer copyMedium(int... values) {, +    public static ChannelBuffer copyLong(long value) {, +    public static ChannelBuffer copyLong(long... values) {, +    public static ChannelBuffer copyBoolean(boolean value) {, +    public static ChannelBuffer copyBoolean(boolean... values) {, +    public static ChannelBuffer copyFloat(float value) {, +    public static ChannelBuffer copyFloat(float... values) {, +    public static ChannelBuffer copyDouble(double value) {, +    public static ChannelBuffer copyDouble(double... values) {, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +    public static ChannelBuffer copyInt(int value) {, +    public static ChannelBuffer copyInt(int... values) {, +    public static ChannelBuffer copyShort(int value) {, +    public static ChannelBuffer copyShort(short... values) {, +        if (values == null || values.length == 0) {, +            return EMPTY_BUFFER;, +        }, +        ChannelBuffer buffer = buffer(values.length * 2);, +        for (int v: values) {, +            buffer.writeShort(v);, +        }, +        return buffer;, +    }, +, +    /**, +     * Create a new buffer that holds a sequence of the specified 16-bit integers., +     */, +    public static ChannelBuffer copyShort(int... values) {, +    public static ChannelBuffer copyMedium(int value) {, +    public static ChannelBuffer copyMedium(int... values) {, +    public static ChannelBuffer copyLong(long value) {, +    public static ChannelBuffer copyLong(long... values) {, +    public static ChannelBuffer copyBoolean(boolean value) {, +    public static ChannelBuffer copyBoolean(boolean... values) {, +    public static ChannelBuffer copyFloat(float value) {, +    public static ChannelBuffer copyFloat(float... values) {, +    public static ChannelBuffer copyDouble(double value) {, +    public static ChannelBuffer copyDouble(double... values) {, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +    public void testWrapSingleInt() {, +        ChannelBuffer buffer = ChannelBuffers.copyInt(42);, +        assertEquals(4, buffer.capacity());, +        assertEquals(42, buffer.readInt());, +        assertFalse(buffer.readable());, +    }, +, +    @Test, +        ChannelBuffer buffer = ChannelBuffers.copyInt(1, 4);, +        assertEquals(0, ChannelBuffers.copyInt(null).capacity());, +        assertEquals(0, ChannelBuffers.copyInt(new int[0]).capacity());, +    public void testWrapSingleShort() {, +        ChannelBuffer buffer = ChannelBuffers.copyShort(42);, +        assertEquals(2, buffer.capacity());, +        assertEquals(42, buffer.readShort());, +        assertFalse(buffer.readable());, +    }, +, +    @Test, +    public void testWrapShortFromShortArray() {, +        ChannelBuffer buffer = ChannelBuffers.copyShort(new short[] { 1, 4 });, +        assertEquals(0, ChannelBuffers.copyShort((short[]) null).capacity());, +        assertEquals(0, ChannelBuffers.copyShort(new short[0]).capacity());, +    }, +    @Test, +    public void testWrapShortFromIntArray() {, +        ChannelBuffer buffer = ChannelBuffers.copyShort(1, 4);, +        assertEquals(4, buffer.capacity());, +        assertEquals(1, buffer.readShort());, +        assertEquals(4, buffer.readShort());, +        assertFalse(buffer.readable());, +, +        assertEquals(0, ChannelBuffers.copyShort((int[]) null).capacity());, +        assertEquals(0, ChannelBuffers.copyShort(new int[0]).capacity());, +    }, +, +    @Test, +    public void testWrapSingleMedium() {, +        ChannelBuffer buffer = ChannelBuffers.copyMedium(42);, +        assertEquals(3, buffer.capacity());, +        assertEquals(42, buffer.readMedium());]