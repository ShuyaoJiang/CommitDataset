[+++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, +import io.netty.channel.socket.oio.StreamOioByteChannel;, +public class RxtxChannel extends StreamOioByteChannel {, +        activate(serialPort.getInputStream(), serialPort.getOutputStream());, +           super.doClose();, +        } finally {, +            }, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, +import io.netty.channel.socket.oio.StreamOioByteChannel;, +public class RxtxChannel extends StreamOioByteChannel {, +        activate(serialPort.getInputStream(), serialPort.getOutputStream());, +           super.doClose();, +        } finally {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +import io.netty.buffer.BufType;, +import io.netty.channel.ChannelMetadata;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(BufType.BYTE, false);, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, +import io.netty.channel.socket.oio.StreamOioByteChannel;, +public class RxtxChannel extends StreamOioByteChannel {, +        activate(serialPort.getInputStream(), serialPort.getOutputStream());, +           super.doClose();, +        } finally {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +import io.netty.buffer.BufType;, +import io.netty.channel.ChannelMetadata;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(BufType.BYTE, false);, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/oio/OioSocketChannel.java, +public class OioSocketChannel extends StreamOioByteChannel, +                activate(socket.getInputStream(), socket.getOutputStream());, +    protected int doReadBytes(ByteBuf buf) throws Exception {, +        if (socket.isClosed()) {, +            return -1;, +        }, +        try {, +            return super.doReadBytes(buf);, +        } catch (SocketTimeoutException e) {, +            return 0;, +        }, +    }, +, +    @Override, +            activate(socket.getInputStream(), socket.getOutputStream());, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannel.java, +import io.netty.channel.socket.oio.StreamOioByteChannel;, +public class RxtxChannel extends StreamOioByteChannel {, +        activate(serialPort.getInputStream(), serialPort.getOutputStream());, +           super.doClose();, +        } finally {, +            }, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +import io.netty.buffer.BufType;, +import io.netty.channel.ChannelMetadata;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(BufType.BYTE, false);, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/socket/oio/OioSocketChannel.java, +public class OioSocketChannel extends StreamOioByteChannel, +                activate(socket.getInputStream(), socket.getOutputStream());, +    protected int doReadBytes(ByteBuf buf) throws Exception {, +        if (socket.isClosed()) {, +            return -1;, +        }, +        try {, +            return super.doReadBytes(buf);, +        } catch (SocketTimeoutException e) {, +            return 0;, +        }, +    }, +, +    @Override, +            activate(socket.getInputStream(), socket.getOutputStream());, +++ b/transport/src/main/java/io/netty/channel/socket/oio/StreamOioByteChannel.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the]