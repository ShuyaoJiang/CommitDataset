[+++ b/transport/src/main/java/io/netty/channel/group/ImmediateEventExecutor.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.group;, +, +import io.netty.util.concurrent.AbstractEventExecutorWithoutScheduler;, +import io.netty.util.concurrent.DefaultPromise;, +import io.netty.util.concurrent.EventExecutor;, +import io.netty.util.concurrent.EventExecutorGroup;, +import io.netty.util.concurrent.Promise;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +, +final class ImmediateEventExecutor extends AbstractEventExecutorWithoutScheduler {, +, +    @Override, +    public EventExecutorGroup parent() {, +        return null;, +    }, +, +    @Override, +    public boolean inEventLoop() {, +        return true;, +    }, +, +    @Override, +    public boolean inEventLoop(Thread thread) {, +        return true;, +    }, +, +    @Override, +    public void shutdown() {, +    }, +, +    @Override, +    public boolean isShutdown() {, +        return false;, +    }, +, +    @Override, +    public boolean isTerminated() {, +        return false;, +    }, +, +    @Override, +    public boolean awaitTermination(long timeout, TimeUnit unit) {, +        return false;, +    }, +, +    @Override, +    public List<Runnable> shutdownNow() {, +        return Collections.emptyList();, +    }, +, +    @Override, +    public void execute(Runnable command) {, +        if (command == null) {, +            throw new NullPointerException("command");, +        }, +        command.run();, +    }, +, +    @Override, +    public <V> Promise<V> newPromise() {, +        return new ImmediatePromise<V>(this);, +    }, +, +    static class ImmediatePromise<V> extends DefaultPromise<V> {, +        ImmediatePromise(EventExecutor executor) {, +            super(executor);, +        }, +, +        @Override, +        protected void checkDeadLock() {, +            // No check, +        }, +    }, +}]