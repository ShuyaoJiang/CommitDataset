[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +import static io.netty.util.AsciiString.containsAllContentEqualsIgnoreCase;, +import static io.netty.util.AsciiString.containsContentEqualsIgnoreCase;, +import static io.netty.util.internal.StringUtil.COMMA;, +        List<String> connectionHeaderValues = request.headers().getAll(HttpHeaderNames.CONNECTION);, +, +        if (connectionHeaderValues == null) {, +        final StringBuilder concatenatedConnectionValue = new StringBuilder(connectionHeaderValues.size() * 10);, +        for (CharSequence connectionHeaderValue : connectionHeaderValues) {, +            concatenatedConnectionValue.append(connectionHeaderValue).append(COMMA);, +        }, +        concatenatedConnectionValue.setLength(concatenatedConnectionValue.length() - 1);, +, +        List<CharSequence> values = splitHeader(concatenatedConnectionValue);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerUpgradeHandler.java, +import static io.netty.util.AsciiString.containsAllContentEqualsIgnoreCase;, +import static io.netty.util.AsciiString.containsContentEqualsIgnoreCase;, +import static io.netty.util.internal.StringUtil.COMMA;, +        List<String> connectionHeaderValues = request.headers().getAll(HttpHeaderNames.CONNECTION);, +, +        if (connectionHeaderValues == null) {, +        final StringBuilder concatenatedConnectionValue = new StringBuilder(connectionHeaderValues.size() * 10);, +        for (CharSequence connectionHeaderValue : connectionHeaderValues) {, +            concatenatedConnectionValue.append(connectionHeaderValue).append(COMMA);, +        }, +        concatenatedConnectionValue.setLength(concatenatedConnectionValue.length() - 1);, +, +        List<CharSequence> values = splitHeader(concatenatedConnectionValue);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandlerTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +        validateClearTextUpgrade(upgradeString);, +    }, +    @Test, +    public void upgradeWithMultipleConnectionHeaders() {, +        String upgradeString = "GET / HTTP/1.1\r\n" +, +                "Host: example.com\r\n" +, +                "Connection: keep-alive\r\n" +, +                "Connection: Upgrade, HTTP2-Settings\r\n" +, +                "Upgrade: h2c\r\n" +, +                "HTTP2-Settings: AAMAAABkAAQAAP__\r\n\r\n";, +        validateClearTextUpgrade(upgradeString);, +    }, +    @Test, +    public void requiredHeadersInSeparateConnectionHeaders() {, +        String upgradeString = "GET / HTTP/1.1\r\n" +, +                "Host: example.com\r\n" +, +                "Connection: keep-alive\r\n" +, +                "Connection: HTTP2-Settings\r\n" +, +                "Connection: Upgrade\r\n" +, +                "Upgrade: h2c\r\n" +, +                "HTTP2-Settings: AAMAAABkAAQAAP__\r\n\r\n";, +        validateClearTextUpgrade(upgradeString);, +, +    private void validateClearTextUpgrade(String upgradeString) {, +        setUpServerChannel();, +, +        ByteBuf upgrade = Unpooled.copiedBuffer(upgradeString, CharsetUtil.US_ASCII);, +, +        assertFalse(channel.writeInbound(upgrade));, +, +        assertEquals(1, userEvents.size());, +, +        Object userEvent = userEvents.get(0);, +        assertTrue(userEvent instanceof UpgradeEvent);, +        assertEquals("h2c", ((UpgradeEvent) userEvent).protocol());, +        ReferenceCountUtil.release(userEvent);, +, +        assertEquals(100, http2ConnectionHandler.connection().local().maxActiveStreams());, +        assertEquals(65535, http2ConnectionHandler.connection().local().flowController().initialWindowSize());, +, +        assertEquals(1, http2ConnectionHandler.connection().numActiveStreams());, +        assertNotNull(http2ConnectionHandler.connection().stream(1));, +, +        Http2Stream stream = http2ConnectionHandler.connection().stream(1);, +        assertEquals(State.HALF_CLOSED_REMOTE, stream.state());, +        assertFalse(stream.isHeadersSent());, +, +        String expectedHttpResponse = "HTTP/1.1 101 Switching Protocols\r\n" +, +                "connection: upgrade\r\n" +, +                "upgrade: h2c\r\n\r\n";, +        ByteBuf responseBuffer = channel.readOutbound();, +        assertEquals(expectedHttpResponse, responseBuffer.toString(CharsetUtil.UTF_8));, +        responseBuffer.release();, +, +        // Check that the preface was send (a.k.a the settings frame), +        ByteBuf settingsBuffer = channel.readOutbound();, +        assertNotNull(settingsBuffer);, +        settingsBuffer.release();, +, +        assertNull(channel.readOutbound());, +    }]