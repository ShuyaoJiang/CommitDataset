[+++ b/common/src/main/java/io/netty/util/SocketAddresses.java, +import java.net.NetworkInterface;, +import java.net.SocketException;, +    public static final NetworkInterface LOOPBACK_IF;, +, +        NetworkInterface loopbackIf;, +        try {, +            loopbackIf = NetworkInterface.getByInetAddress(LOCALHOST);, +        } catch (SocketException e) {, +            loopbackIf = null;, +        }, +, +        // check if the NetworkInterface is null, this is the case on my ubuntu dev machine but not on osx and windows., +        // if so fail back the the first interface, +        if (loopbackIf == null) {, +            // use nextElement() as NetWorkInterface.getByIndex(0) returns null, +            try {, +                loopbackIf = NetworkInterface.getNetworkInterfaces().nextElement();, +            } catch (SocketException e) {, +                logger.error("Failed to enumerate network interfaces", e);, +            }, +        }, +, +        LOOPBACK_IF = loopbackIf;, +++ b/common/src/main/java/io/netty/util/SocketAddresses.java, +import java.net.NetworkInterface;, +import java.net.SocketException;, +    public static final NetworkInterface LOOPBACK_IF;, +, +        NetworkInterface loopbackIf;, +        try {, +            loopbackIf = NetworkInterface.getByInetAddress(LOCALHOST);, +        } catch (SocketException e) {, +            loopbackIf = null;, +        }, +, +        // check if the NetworkInterface is null, this is the case on my ubuntu dev machine but not on osx and windows., +        // if so fail back the the first interface, +        if (loopbackIf == null) {, +            // use nextElement() as NetWorkInterface.getByIndex(0) returns null, +            try {, +                loopbackIf = NetworkInterface.getNetworkInterfaces().nextElement();, +            } catch (SocketException e) {, +                logger.error("Failed to enumerate network interfaces", e);, +            }, +        }, +, +        LOOPBACK_IF = loopbackIf;, +++ /dev/null, +++ b/common/src/main/java/io/netty/util/SocketAddresses.java, +import java.net.NetworkInterface;, +import java.net.SocketException;, +    public static final NetworkInterface LOOPBACK_IF;, +, +        NetworkInterface loopbackIf;, +        try {, +            loopbackIf = NetworkInterface.getByInetAddress(LOCALHOST);, +        } catch (SocketException e) {, +            loopbackIf = null;, +        }, +, +        // check if the NetworkInterface is null, this is the case on my ubuntu dev machine but not on osx and windows., +        // if so fail back the the first interface, +        if (loopbackIf == null) {, +            // use nextElement() as NetWorkInterface.getByIndex(0) returns null, +            try {, +                loopbackIf = NetworkInterface.getNetworkInterfaces().nextElement();, +            } catch (SocketException e) {, +                logger.error("Failed to enumerate network interfaces", e);, +            }, +        }, +, +        LOOPBACK_IF = loopbackIf;, +++ /dev/null, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramMulticastTest.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import static org.junit.Assert.*;, +import io.netty.bootstrap.Bootstrap;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DatagramChannel;]