[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +    private static final InternalLogger logger =, +        InternalLoggerFactory.getInstance(NioWorker.class);, +, +    /**, +     * FIXME Auto-detect the level, +     *, +     * 0 - no need to wake up to get / set interestOps, +     * 1 - no need to wake up to get interestOps, but need to wake up to set., +     * 2 - need to wake up to get / set interestOps, +     */, +    private static final int WAKEUP_REQUIREMENT_LEVEL = 0;, +, +    static {, +        if (WAKEUP_REQUIREMENT_LEVEL < 0 || WAKEUP_REQUIREMENT_LEVEL > 2) {, +            throw new Error(, +                    "Unexpected wakeup requirement level: " +, +                    WAKEUP_REQUIREMENT_LEVEL + ", please report this error.");, +        }, +    }, +, +                if (channel.currentWriteEvent == null && channel.writeBuffer.isEmpty()) {, +        if (key == null) {, +            return;, +        }, +            switch (WAKEUP_REQUIREMENT_LEVEL) {, +            case 0:, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) == 0) {, +                    interestOps |= SelectionKey.OP_WRITE;, +                    key.interestOps(interestOps);, +                    changed = true;, +                }, +                break;, +            case 1:, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) == 0) {, +                    if (Thread.currentThread() == worker.thread) {, +                        interestOps |= SelectionKey.OP_WRITE;, +                        key.interestOps(interestOps);, +                        changed = true;, +                    } else {, +                        synchronized (worker.selectorGuard) {, +                            selector.wakeup();, +                            interestOps |= SelectionKey.OP_WRITE;, +                            key.interestOps(interestOps);, +                            changed = true;, +                        }, +                    }, +                }, +                break;, +            case 2:, +                break;, +            default:, +                throw new Error();, +            }, +            switch (WAKEUP_REQUIREMENT_LEVEL) {, +            case 0:, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +                    interestOps &= ~SelectionKey.OP_WRITE;, +                    key.interestOps(interestOps);, +                    changed = true;, +                }, +                break;, +            case 1:, +                interestOps = key.interestOps();, +                if ((interestOps & SelectionKey.OP_WRITE) != 0) {, +                    if (Thread.currentThread() == worker.thread) {, +                        interestOps &= ~SelectionKey.OP_WRITE;, +                        key.interestOps(interestOps);, +                        changed = true;, +                    } else {, +                        synchronized (worker.selectorGuard) {, +                            selector.wakeup();, +                            interestOps &= ~SelectionKey.OP_WRITE;, +                            key.interestOps(interestOps);, +                            changed = true;, +                        }, +                    }, +                }, +                break;, +            case 2:, +                break;, +            default:, +                throw new Error();, +            }, +            switch (WAKEUP_REQUIREMENT_LEVEL) {, +            case 0:, +                if (key.interestOps() != interestOps) {, +                    key.interestOps(interestOps);, +                    changed = true;, +                }, +                break;, +            case 1:, +                if (key.interestOps() != interestOps) {, +                    if (Thread.currentThread() == worker.thread) {, +                        key.interestOps(interestOps);, +                        changed = true;, +                    } else {]