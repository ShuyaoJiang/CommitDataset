[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkUnfreed();, +        checkUnfreed();, +    protected final void checkIndex(int index) {, +        checkUnfreed();, +        if (index < 0 || index >= capacity()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d (expected: range(0, %d))", index, capacity()));, +        }, +    }, +, +    protected final void checkIndex(int index, int fieldLength) {, +        checkUnfreed();, +        if (index < 0 || index > capacity() - fieldLength) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d, length: %d (expected: range(0, %d))", index, fieldLength, capacity()));, +        }, +    }, +, +    protected final void checkReadableBytes(int minimumReadableBytes) {, +        checkUnfreed();, +, +    protected final void checkUnfreed() {, +        if (isFreed()) {, +            throw new IllegalBufferAccessException();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkUnfreed();, +        checkUnfreed();, +    protected final void checkIndex(int index) {, +        checkUnfreed();, +        if (index < 0 || index >= capacity()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d (expected: range(0, %d))", index, capacity()));, +        }, +    }, +, +    protected final void checkIndex(int index, int fieldLength) {, +        checkUnfreed();, +        if (index < 0 || index > capacity() - fieldLength) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d, length: %d (expected: range(0, %d))", index, fieldLength, capacity()));, +        }, +    }, +, +    protected final void checkReadableBytes(int minimumReadableBytes) {, +        checkUnfreed();, +, +    protected final void checkUnfreed() {, +        if (isFreed()) {, +            throw new IllegalBufferAccessException();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +    final void init(PoolChunk<T> chunk, long handle, T memory, int offset, int length) {, +    public final int capacity() {, +    public final ByteBuf capacity(int newCapacity) {, +        checkUnfreed();, +    public final ByteBufAllocator alloc() {, +    public final ByteOrder order() {, +    public final ByteBuf unwrap() {, +    protected final ByteBuffer internalNioBuffer() {, +    public final ByteBuf suspendIntermediaryDeallocations() {, +        checkUnfreed();, +    public final ByteBuf resumeIntermediaryDeallocations() {, +        checkUnfreed();, +    public final boolean isFreed() {, +        return memory == null;, +    public final void free() {, +            resumeIntermediaryDeallocations();, +    protected final int idx(int index) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        checkUnfreed();, +        checkUnfreed();, +    protected final void checkIndex(int index) {, +        checkUnfreed();, +        if (index < 0 || index >= capacity()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d (expected: range(0, %d))", index, capacity()));, +        }, +    }, +, +    protected final void checkIndex(int index, int fieldLength) {, +        checkUnfreed();, +        if (index < 0 || index > capacity() - fieldLength) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "index: %d, length: %d (expected: range(0, %d))", index, fieldLength, capacity()));, +        }, +    }, +, +    protected final void checkReadableBytes(int minimumReadableBytes) {, +        checkUnfreed();, +, +    protected final void checkUnfreed() {, +        if (isFreed()) {, +            throw new IllegalBufferAccessException();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java]