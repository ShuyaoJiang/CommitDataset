[+++ b/common/src/main/java/io/netty/util/AsciiString.java, +                if (!equalsIgnoreCase(value[i], value[j])) {, +            if (!equalsIgnoreCase((char) (value[i] & 0xFF), string.charAt(j))) {, +            if (!equalsIgnoreCase((char) (value[thisStart++] & 0xFF), string.charAt(start++))) {, +     * Determine if {@code a} contains {@code b} in a case sensitive manner., +     */, +    public static boolean contains(CharSequence a, CharSequence b) {, +        return contains(a, b, DefaultCharEqualityComparator.INSTANCE);, +    }, +, +    /**, +     * Determine if {@code a} contains {@code b} in a case insensitive manner., +     */, +    public static boolean containsIgnoreCase(CharSequence a, CharSequence b) {, +        return contains(a, b, CaseInsensativeCharEqualityComparator.INSTANCE);, +    }, +, +    /**, +            if (!equalsIgnoreCase(a.charAt(i),  b.charAt(j))) {, +    private interface CharEqualityComparator {, +        boolean equals(char a, char b);, +    }, +, +    private static final class DefaultCharEqualityComparator implements CharEqualityComparator {, +        static final DefaultCharEqualityComparator INSTANCE = new DefaultCharEqualityComparator();, +        private DefaultCharEqualityComparator() { }, +, +        @Override, +        public boolean equals(char a, char b) {, +            return a == b;, +        }, +    }, +, +    private static final class CaseInsensativeCharEqualityComparator implements CharEqualityComparator {, +        static final CaseInsensativeCharEqualityComparator INSTANCE = new CaseInsensativeCharEqualityComparator();, +        private CaseInsensativeCharEqualityComparator() { }, +, +        @Override, +        public boolean equals(char a, char b) {, +            return equalsIgnoreCase(a, b);, +        }, +    }, +, +    private static boolean contains(CharSequence a, CharSequence b, CharEqualityComparator cmp) {, +        if (a == null || b == null || a.length() < b.length()) {, +            return false;, +        }, +        if (b.length() == 0) {, +            return true;, +        }, +        int bStart = 0;, +        for (int i = 0; i < a.length(); ++i) {, +            if (cmp.equals(b.charAt(bStart), a.charAt(i))) {, +                // If b is consumed then true., +                if (++bStart == b.length()) {, +                    return true;, +                }, +            } else if (a.length() - i < b.length()) {, +                // If there are not enough characters left in a for b to be contained, then false., +                return false;, +            } else {, +                bStart = 0;, +            }, +        }, +        return false;, +    }, +, +    private static boolean equalsIgnoreCase(byte a, byte b) {, +        return a == b || toLowerCase(a) == toLowerCase(b);, +    }, +, +    private static boolean equalsIgnoreCase(char a, char b) {, +        return a == b || toLowerCase(a) == toLowerCase(b);, +    }, +, +, +    private static byte c2b(char c) {, +        if (c > MAX_CHAR_VALUE) {, +            return '?';, +        }, +        return (byte) c;, +    }, +++ b/common/src/main/java/io/netty/util/AsciiString.java, +                if (!equalsIgnoreCase(value[i], value[j])) {, +            if (!equalsIgnoreCase((char) (value[i] & 0xFF), string.charAt(j))) {, +            if (!equalsIgnoreCase((char) (value[thisStart++] & 0xFF), string.charAt(start++))) {, +     * Determine if {@code a} contains {@code b} in a case sensitive manner., +     */, +    public static boolean contains(CharSequence a, CharSequence b) {, +        return contains(a, b, DefaultCharEqualityComparator.INSTANCE);, +    }, +, +    /**, +     * Determine if {@code a} contains {@code b} in a case insensitive manner., +     */, +    public static boolean containsIgnoreCase(CharSequence a, CharSequence b) {, +        return contains(a, b, CaseInsensativeCharEqualityComparator.INSTANCE);, +    }, +, +    /**]