[+++ b/buffer/src/main/java/io/netty/buffer/WrappedByteBuf.java, +class WrappedByteBuf extends ByteBuf {, +++ b/buffer/src/main/java/io/netty/buffer/WrappedByteBuf.java, +class WrappedByteBuf extends ByteBuf {, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        final boolean disabled = SystemPropertyUtil.getBoolean("io.netty.noResourceLeakDetection", false);, +        logger.debug("-Dio.netty.noResourceLeakDetection: {}", disabled);, +        logger.warn(, +                "-Dio.netty.noResourceLeakDetection is deprecated. Use '-D{}={}' instead.",, +                PROP_LEVEL, DEFAULT_LEVEL.name().toLowerCase());, +, +        Level defaultLevel = disabled? Level.DISABLED : DEFAULT_LEVEL;, +        String levelStr = SystemPropertyUtil.get(PROP_LEVEL, defaultLevel.name()).trim().toUpperCase();, +     * @deprecated Use {@link #setLevel(ResourceLeakDetector.Level)} instead., +     */, +    @Deprecated, +    public static void setEnabled(boolean enabled) {, +        setLevel(enabled? Level.SIMPLE : Level.DISABLED);, +    }, +, +    /**, +     * Returns {@code true} if resource leak detection is enabled., +     */, +    public static boolean isEnabled() {, +        return getLevel().ordinal() > Level.DISABLED.ordinal();, +    }, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/WrappedByteBuf.java, +class WrappedByteBuf extends ByteBuf {, +++ b/common/src/main/java/io/netty/util/ResourceLeakDetector.java, +        final boolean disabled = SystemPropertyUtil.getBoolean("io.netty.noResourceLeakDetection", false);, +        logger.debug("-Dio.netty.noResourceLeakDetection: {}", disabled);, +        logger.warn(, +                "-Dio.netty.noResourceLeakDetection is deprecated. Use '-D{}={}' instead.",, +                PROP_LEVEL, DEFAULT_LEVEL.name().toLowerCase());, +, +        Level defaultLevel = disabled? Level.DISABLED : DEFAULT_LEVEL;, +        String levelStr = SystemPropertyUtil.get(PROP_LEVEL, defaultLevel.name()).trim().toUpperCase();, +     * @deprecated Use {@link #setLevel(ResourceLeakDetector.Level)} instead., +     */, +    @Deprecated, +    public static void setEnabled(boolean enabled) {, +        setLevel(enabled? Level.SIMPLE : Level.DISABLED);, +    }, +, +    /**, +     * Returns {@code true} if resource leak detection is enabled., +     */, +    public static boolean isEnabled() {, +        return getLevel().ordinal() > Level.DISABLED.ordinal();, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/ResourceLeakException.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.util;, +, +import java.util.Arrays;, +, +/**, + * @deprecated This class will be removed in the future version., + */, +@Deprecated, +public class ResourceLeakException extends RuntimeException {, +, +    private static final long serialVersionUID = 7186453858343358280L;, +, +    private final StackTraceElement[] cachedStackTrace;, +, +    public ResourceLeakException() {, +        cachedStackTrace = getStackTrace();, +    }, +, +    public ResourceLeakException(String message) {, +        super(message);, +        cachedStackTrace = getStackTrace();, +    }, +, +    public ResourceLeakException(String message, Throwable cause) {, +        super(message, cause);, +        cachedStackTrace = getStackTrace();, +    }, +, +    public ResourceLeakException(Throwable cause) {]