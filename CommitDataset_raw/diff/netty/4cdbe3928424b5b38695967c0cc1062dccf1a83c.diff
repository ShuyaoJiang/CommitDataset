[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +, +                    // Check if this handler was removed before continuing with decoding., +                    // If it was removed, it is not safe to continue to operate on the buffer., +                    //, +                    // See:, +                    // - https://github.com/netty/netty/issues/4635, +                    if (ctx.isRemoved()) {, +                        break;, +                    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +, +                    // Check if this handler was removed before continuing with decoding., +                    // If it was removed, it is not safe to continue to operate on the buffer., +                    //, +                    // See:, +                    // - https://github.com/netty/netty/issues/4635, +                    if (ctx.isRemoved()) {, +                        break;, +                    }, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import static org.junit.Assert.*;, +, +                assertFalse(removed);, +        assertEquals(b, buf.skipBytes(1));, +                assertFalse(removed);, +        ByteBuf expected = Unpooled.wrappedBuffer(new byte[] {'b', 'c'});, +        assertEquals(expected, b);, +        expected.release();, +                assertEquals(1, byteBuf.refCnt());, +                assertEquals(0, byteBuf.refCnt());, +        assertFalse(channel.writeInbound(buf));, +        assertFalse(channel.finish());, +                assertEquals(1, byteBuf.refCnt());, +                assertEquals(0, byteBuf.refCnt());, +        assertTrue(channel.writeInbound(buf));, +        assertTrue(channel.finish());, +        ByteBuf expected = Unpooled.wrappedBuffer(new byte[] {'b'});, +        ByteBuf b = channel.readInbound();, +        assertEquals(expected, b);, +        assertNull(channel.readInbound());, +        expected.release();, +        b.release();, +        assertFalse(channel.writeInbound(buf));, +        assertEquals(1, (int) queue.take());, +        assertEquals(2, (int) queue.take());, +        assertEquals(3, (int) queue.take());, +        assertTrue(queue.isEmpty());, +    }, +, +    // See https://github.com/netty/netty/issues/4635, +    @Test, +    public void testRemoveWhileInCallDecode() {, +        final Object upgradeMessage = new Object();, +        final ByteToMessageDecoder decoder = new ByteToMessageDecoder() {, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                assertEquals('a', in.readByte());, +                out.add(upgradeMessage);, +            }, +        };, +, +        EmbeddedChannel channel = new EmbeddedChannel(decoder, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +                if (msg == upgradeMessage) {, +                    ctx.pipeline().remove(decoder);, +                    return;, +                }, +                ctx.fireChannelRead(msg);, +            }, +        });, +, +        ByteBuf buf = Unpooled.wrappedBuffer(new byte[] { 'a', 'b', 'c' });, +        assertTrue(channel.writeInbound(buf.copy()));, +        ByteBuf b = channel.readInbound();, +        assertEquals(b, buf.skipBytes(1));, +        assertFalse(channel.finish());, +        buf.release();, +        b.release();]