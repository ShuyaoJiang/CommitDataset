[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (isFreed()) {, +            return getClass().getSimpleName() + "(freed)";, +        }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (isFreed()) {, +            return getClass().getSimpleName() + "(freed)";, +        }, +, +++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, +        return getClass().getSimpleName() + '(' + data().toString() + ')';, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (isFreed()) {, +            return getClass().getSimpleName() + "(freed)";, +        }, +, +++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, +        return getClass().getSimpleName() + '(' + data().toString() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, + * {@link HttpRequest} req = ...;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (isFreed()) {, +            return getClass().getSimpleName() + "(freed)";, +        }, +, +++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, +        return getClass().getSimpleName() + '(' + data().toString() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, + * {@link HttpRequest} req = ...;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, + * {@link HttpRequest} req = ...;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (isFreed()) {, +            return getClass().getSimpleName() + "(freed)";, +        }, +, +++ b/buffer/src/main/java/io/netty/buffer/DefaultByteBufHolder.java, +        return getClass().getSimpleName() + '(' + data().toString() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ClientCookieEncoder.java, + * {@link HttpRequest} req = ...;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, + * {@link HttpRequest} req = ...;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +, +/**, + * Default implementation of {@link FullHttpRequest}., + */, +public class DefaultFullHttpRequest extends DefaultHttpRequest implements FullHttpRequest {, +    private final ByteBuf content;, +    private final HttpHeaders trailingHeader = new DefaultHttpHeaders();, +, +    public DefaultFullHttpRequest(HttpVersion httpVersion, HttpMethod method, String uri) {, +        this(httpVersion, method, uri, Unpooled.buffer(0));, +    }, +, +    public DefaultFullHttpRequest(HttpVersion httpVersion, HttpMethod method, String uri, ByteBuf content) {, +        super(httpVersion, method, uri);, +        if (content == null) {, +            throw new NullPointerException("content");, +        }, +        this.content = content;, +    }, +, +    @Override, +    public HttpHeaders trailingHeaders() {, +        return trailingHeader;, +    }, +, +    @Override, +    public ByteBuf data() {, +        return content;, +    }, +, +    @Override, +    public boolean isFreed() {, +        return content.isFreed();, +    }, +, +    @Override, +    public void free() {]