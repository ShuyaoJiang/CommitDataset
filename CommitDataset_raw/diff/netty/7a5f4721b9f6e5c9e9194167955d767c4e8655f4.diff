[+++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +    private static final String[] BYTE2HEX = new String[256];, +    private static final String[] HEXPADDING = new String[16];, +    private static final String[] BYTEPADDING = new String[16];, +    private static final char[] BYTE2CHAR = new char[256];, +, +    static {, +        int i;, +, +        // Generate the lookup table for byte-to-hex-dump conversion, +        for (i = 0; i < 10; i ++) {, +            StringBuilder buf = new StringBuilder(3);, +            buf.append(" 0");, +            buf.append(i);, +            BYTE2HEX[i] = buf.toString();, +        }, +        for (;i < 16; i ++) {, +            StringBuilder buf = new StringBuilder(3);, +            buf.append(" 0");, +            buf.append((char) ('a' + i - 10));, +            BYTE2HEX[i] = buf.toString();, +        }, +        for (; i < BYTE2HEX.length; i ++) {, +            StringBuilder buf = new StringBuilder(3);, +            buf.append(' ');, +            buf.append(Integer.toHexString(i));, +            BYTE2HEX[i] = buf.toString();, +        }, +, +        // Generate the lookup table for hex dump paddings, +        for (i = 0; i < HEXPADDING.length; i ++) {, +            int padding = HEXPADDING.length - i;, +            StringBuilder buf = new StringBuilder(padding * 3);, +            for (int j = 0; j < padding; j ++) {, +                buf.append("   ");, +            }, +            HEXPADDING[i] = buf.toString();, +        }, +, +        // Generate the lookup table for byte dump paddings, +        for (i = 0; i < BYTEPADDING.length; i ++) {, +            int padding = BYTEPADDING.length - i;, +            StringBuilder buf = new StringBuilder(padding);, +            for (int j = 0; j < padding; j ++) {, +                buf.append(' ');, +            }, +            BYTEPADDING[i] = buf.toString();, +        }, +, +        // Generate the lookup table for byte-to-char conversion, +        for (i = 0; i < BYTE2CHAR.length; i ++) {, +            if (i <= 0x1f || i >= 0x7f) {, +                BYTE2CHAR[i] = '.';, +            } else {, +                BYTE2CHAR[i] = (char) i;, +            }, +        }, +    }, +, +        StringBuilder buf = new StringBuilder(bufName.length() + elemType.length() + content.length() + 16);, +        buf.append(bufName);, +        buf.append('[');, +        buf.append(elemType);, +        buf.append("](");, +        buf.append(size);, +        buf.append("): ");, +        buf.append(content);, +        return buf.toString();, +        dump.append(, +                NEWLINE + "         +-------------------------------------------------+" +, +                NEWLINE + "         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |" +, +                NEWLINE + "+--------+-------------------------------------------------+----------------+");, +, +        final int startIndex = buf.readerIndex();, +        final int endIndex = buf.writerIndex();, +        for (i = startIndex; i < endIndex; i ++) {, +            int relIdx = i - startIndex;, +                dump.append(Long.toHexString(relIdx & 0xFFFFFFFFL | 0x100000000L));, +                dump.setCharAt(dump.length() - 9, '|');, +                dump.append('|');, +            dump.append(BYTE2HEX[buf.getUnsignedByte(i)]);, +                    dump.append(BYTE2CHAR[buf.getUnsignedByte(j)]);, +, +        if ((i - startIndex & 15) != 0) {, +            dump.append(HEXPADDING[remainder]);, +                dump.append(BYTE2CHAR[buf.getUnsignedByte(j)]);, +            dump.append(BYTEPADDING[remainder]);, +        dump.append(, +                NEWLINE + "+--------+-------------------------------------------------+----------------+");, +        return dump.toString();, +            logger.log(level, format(ctx, "EXCEPTION: " + cause), cause);, +            logger.log(level, format(ctx, "USER_EVENT: " + evt));, +            logger.log(level, format(ctx, "BIND(" + localAddress + ')'));, +            logger.log(level, format(ctx, "CONNECT(" + remoteAddress + ", " + localAddress + ')'));]