[+++ b/transport/src/main/java/io/netty/channel/PendingWriteQueue.java, +                    if (!(promise instanceof VoidChannelPromise)) {, +                    }, +++ b/transport/src/main/java/io/netty/channel/PendingWriteQueue.java, +                    if (!(promise instanceof VoidChannelPromise)) {, +                    }, +++ b/transport/src/test/java/io/netty/channel/PendingWriteQueueTest.java, +    public void testRemoveAndWriteAllWithVoidPromise() {, +        EmbeddedChannel channel = new EmbeddedChannel(new ChannelOutboundHandlerAdapter() {, +            @Override, +            public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {, +                // Convert to writeAndFlush(...) so the promise will be notified by the transport., +                ctx.writeAndFlush(msg, promise);, +            }, +        }, new ChannelOutboundHandlerAdapter());, +, +        final PendingWriteQueue queue = new PendingWriteQueue(channel.pipeline().lastContext());, +, +        ChannelPromise promise = channel.newPromise();, +        queue.add(1L, promise);, +        queue.add(2L, channel.voidPromise());, +        queue.removeAndWriteAll();, +, +        assertTrue(channel.finish());, +        assertTrue(promise.isDone());, +        assertTrue(promise.isSuccess());, +        assertEquals(1L, channel.readOutbound());, +        assertEquals(2L, channel.readOutbound());, +    }, +, +    @Test]