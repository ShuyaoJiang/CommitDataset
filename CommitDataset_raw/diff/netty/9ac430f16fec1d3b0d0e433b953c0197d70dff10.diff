[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        public int windowSize() {, +        public int pendingBytes() {, +        public int windowSize() {, +        public int pendingBytes() {, +        private final Writer writer;, +        protected WritabilityMonitor(Writer writer) {, +            this.writer = writer;, +        }, +        protected final void writePendingBytes() throws Http2Exception {, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +                writePendingBytes();, +        DefaultWritabilityMonitor() {, +            super(new StreamByteDistributor.Writer() {, +            });, +, +        ListenerWritabilityMonitor(final Listener listener) {, +            super(new StreamByteDistributor.Writer() {, +                    int written = state.writeAllocatedBytes(numBytes);, +                    if (written != -1) {, +                        listener.streamWritten(state.stream(), written);, +            });, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +            super.initialWindowSize(newWindowSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        public int windowSize() {, +        public int pendingBytes() {, +        public int windowSize() {, +        public int pendingBytes() {, +        private final Writer writer;, +        protected WritabilityMonitor(Writer writer) {, +            this.writer = writer;, +        }, +        protected final void writePendingBytes() throws Http2Exception {, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +                writePendingBytes();, +        DefaultWritabilityMonitor() {, +            super(new StreamByteDistributor.Writer() {, +            });, +, +        ListenerWritabilityMonitor(final Listener listener) {, +            super(new StreamByteDistributor.Writer() {, +                    int written = state.writeAllocatedBytes(numBytes);, +                    if (written != -1) {, +                        listener.streamWritten(state.stream(), written);, +            });, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +            super.initialWindowSize(newWindowSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +    /**, +     * Calculate the amount of bytes that can be sent by {@code state}. The lower bound is {@code 0}., +     */, +    public static int streamableBytes(StreamByteDistributor.StreamState state) {, +        return max(0, min(state.pendingBytes(), state.windowSize()));, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        public int windowSize() {, +        public int pendingBytes() {, +        public int windowSize() {, +        public int pendingBytes() {, +        private final Writer writer;, +        protected WritabilityMonitor(Writer writer) {, +            this.writer = writer;, +        }, +        protected final void writePendingBytes() throws Http2Exception {, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +                writePendingBytes();, +        DefaultWritabilityMonitor() {, +            super(new StreamByteDistributor.Writer() {, +            });, +, +        ListenerWritabilityMonitor(final Listener listener) {, +            super(new StreamByteDistributor.Writer() {, +                    int written = state.writeAllocatedBytes(numBytes);, +                    if (written != -1) {, +                        listener.streamWritten(state.stream(), written);, +            });, +        protected void initialWindowSize(int newWindowSize) throws Http2Exception {, +            super.initialWindowSize(newWindowSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +    /**, +     * Calculate the amount of bytes that can be sent by {@code state}. The lower bound is {@code 0}., +     */, +    public static int streamableBytes(StreamByteDistributor.StreamState state) {, +        return max(0, min(state.pendingBytes(), state.windowSize()));, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/PriorityStreamByteDistributor.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.streamableBytes;, +        state(streamState.stream()).updateStreamableBytes(streamableBytes(streamState),, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        public int windowSize() {, +        public int pendingBytes() {, +        public int windowSize() {, +        public int pendingBytes() {]