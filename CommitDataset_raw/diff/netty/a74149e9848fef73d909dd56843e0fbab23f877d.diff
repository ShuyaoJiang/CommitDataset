[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    int readerIndex;, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    int readerIndex;, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, +        getBytes(index, dst, dstIndex, length, false);, +        return this;, +    }, +, +    private void getBytes(int index, byte[] dst, int dstIndex, int length, boolean internal) {, +        ByteBuffer tmpBuf;, +        if (internal) {, +            tmpBuf = internalNioBuffer();, +        } else {, +            tmpBuf = memory.duplicate();, +        }, +    }, +, +    @Override, +    public ByteBuf readBytes(byte[] dst, int dstIndex, int length) {, +        checkReadableBytes(length);, +        getBytes(readerIndex, dst, dstIndex, length, true);, +        readerIndex += length;, +        getBytes(index, dst, false);, +        return this;, +    }, +, +    private void getBytes(int index, ByteBuffer dst, boolean internal) {, +        ByteBuffer tmpBuf;, +        if (internal) {, +            tmpBuf = internalNioBuffer();, +        } else {, +            tmpBuf = memory.duplicate();, +        }, +    }, +, +    @Override, +    public ByteBuf readBytes(ByteBuffer dst) {, +        int length = dst.remaining();, +        checkReadableBytes(length);, +        getBytes(readerIndex, dst, true);, +        readerIndex += length;, +        getBytes(index, out, length, false);, +    private void getBytes(int index, OutputStream out, int length, boolean internal) throws IOException {, +        checkIndex(index, length);, +        if (length == 0) {, +            return;, +        }, +, +        ByteBuffer tmpBuf;, +        if (internal) {, +            tmpBuf = internalNioBuffer();, +        } else {, +            tmpBuf = memory.duplicate();, +        }, +    }, +, +    @Override, +    public ByteBuf readBytes(OutputStream out, int length) throws IOException {, +        checkReadableBytes(length);, +        getBytes(readerIndex, out, length, true);, +        readerIndex += length;, +        return getBytes(index, out, length, false);, +    }, +, +    private int getBytes(int index, GatheringByteChannel out, int length, boolean internal) throws IOException {, +        ByteBuffer tmpBuf;, +        if (internal) {, +            tmpBuf = internalNioBuffer();, +        } else {, +            tmpBuf = memory.duplicate();, +        }, +    public int readBytes(GatheringByteChannel out, int length) throws IOException {, +        checkReadableBytes(length);, +        int readBytes = getBytes(readerIndex, out, length, true);, +        readerIndex += readBytes;, +        return readBytes;, +    }, +, +    @Override, +        ByteBuffer tmpBuf = internalNioBuffer();, +        tmpBuf.clear().position(idx(index));, +        tmpBuf.put(tmp, 0, readBytes);, +        ByteBuffer tmpBuf = internalNioBuffer();, +        tmpBuf.clear().position(index).limit(index + length);, +            return in.read(tmpBuf);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    int readerIndex;, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, +        getBytes(index, dst, dstIndex, length, false);, +        return this;, +    }, +, +    private void getBytes(int index, byte[] dst, int dstIndex, int length, boolean internal) {, +        ByteBuffer tmpBuf;, +        if (internal) {, +            tmpBuf = internalNioBuffer();, +        } else {, +            tmpBuf = memory.duplicate();, +        }]