[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +public abstract class HttpContentDecoder extends MessageToMessageDecoder<Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +            return msg;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +public abstract class HttpContentDecoder extends MessageToMessageDecoder<Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +            return msg;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageCodec;, +import java.util.Queue;, +, +public abstract class HttpContentEncoder extends MessageToMessageCodec<Object, Object, Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg), +            return msg;, +        return m;, +    public Object encode(ChannelOutboundHandlerContext<Object> ctx, Object msg), +            return msg;, +                return m;, +                return m;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +public abstract class HttpContentDecoder extends MessageToMessageDecoder<Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +            return msg;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageCodec;, +import java.util.Queue;, +, +public abstract class HttpContentEncoder extends MessageToMessageCodec<Object, Object, Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg), +            return msg;, +        return m;, +    public Object encode(ChannelOutboundHandlerContext<Object> ctx, Object msg), +            return msg;, +                return m;, +                return m;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMessageEncoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageDecoder;, +public abstract class HttpContentDecoder extends MessageToMessageDecoder<Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg) throws Exception {, +            return msg;, +                        return new Object[] { new DefaultHttpChunk(lastProduct), c };, +                    }, +                }, +            }, +        // Because HttpMessage and HttpChunk is a mutable object, we can simply forward it., +        return msg;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.channel.ChannelInboundHandlerContext;, +import io.netty.channel.ChannelOutboundHandlerContext;, +import io.netty.handler.codec.MessageToMessageCodec;, +import java.util.Queue;, +, +public abstract class HttpContentEncoder extends MessageToMessageCodec<Object, Object, Object, Object> {, +    public Object decode(ChannelInboundHandlerContext<Object> ctx, Object msg), +            return msg;, +        return m;, +    public Object encode(ChannelOutboundHandlerContext<Object> ctx, Object msg)]