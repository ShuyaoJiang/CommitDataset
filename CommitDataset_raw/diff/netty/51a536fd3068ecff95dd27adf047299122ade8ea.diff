[+++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JdkZlibTest.java, +    @Override, +, +    @Override, +    @Test(expected = IllegalArgumentException.class), +    public void testZLIB_OR_NONE2() throws Exception {, +        new JdkZlibDecoder(ZlibWrapper.ZLIB_OR_NONE);, +    }, +, +    @Override, +    @Test(expected = IllegalArgumentException.class), +    public void testZLIB_OR_NONE3() throws Exception {, +        new JdkZlibDecoder(ZlibWrapper.ZLIB_OR_NONE);, +    }, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JdkZlibTest.java, +    @Override, +, +    @Override, +    @Test(expected = IllegalArgumentException.class), +    public void testZLIB_OR_NONE2() throws Exception {, +        new JdkZlibDecoder(ZlibWrapper.ZLIB_OR_NONE);, +    }, +, +    @Override, +    @Test(expected = IllegalArgumentException.class), +    public void testZLIB_OR_NONE3() throws Exception {, +        new JdkZlibDecoder(ZlibWrapper.ZLIB_OR_NONE);, +    }, +++ b/codec/src/test/java/io/netty/handler/codec/compression/ZlibTest.java, +import static org.junit.Assert.assertNull;, +        ByteBuf buf = (ByteBuf) chDecoderGZip.readInbound();, +        assertEquals(buf, data);, +        assertNull(chDecoderGZip.readInbound());, +        data.release();, +        deflatedData.release();, +        buf.release();, +    }, +, +    protected void testCompress(ZlibWrapper encoderWrapper, ZlibWrapper decoderWrapper) throws Exception {, +        ByteBuf data = Unpooled.copiedBuffer("test", CharsetUtil.UTF_8);, +        EmbeddedChannel chEncoder = new EmbeddedChannel(createEncoder(encoderWrapper));, +, +        chEncoder.writeOutbound(data.copy());, +        assertTrue(chEncoder.finish());, +, +        EmbeddedChannel chDecoderZlib = new EmbeddedChannel(createDecoder(decoderWrapper));, +        for (;;) {, +            ByteBuf deflatedData = (ByteBuf) chEncoder.readOutbound();, +            if (deflatedData == null) {, +                break;, +            }, +            chDecoderZlib.writeInbound(deflatedData);, +        }, +, +        assertTrue(chDecoderZlib.finish());, +, +        ByteBuf buf = (ByteBuf) chDecoderZlib.readInbound();, +        assertEquals(data, buf);, +        assertNull(chDecoderZlib.readInbound());, +, +        data.release();, +        buf.release();, +        testCompress(ZlibWrapper.ZLIB, ZlibWrapper.ZLIB);, +        testCompress(ZlibWrapper.NONE, ZlibWrapper.NONE);, +        testCompress(ZlibWrapper.GZIP, ZlibWrapper.GZIP);, +    }, +    @Test, +    public void testZLIB_OR_NONE() throws Exception {, +        testCompress(ZlibWrapper.NONE, ZlibWrapper.ZLIB_OR_NONE);, +    }, +    @Test, +    public void testZLIB_OR_NONE2() throws Exception {, +        testCompress(ZlibWrapper.ZLIB, ZlibWrapper.ZLIB_OR_NONE);, +    }, +    @Test, +    public void testZLIB_OR_NONE3() throws Exception {, +        testCompress(ZlibWrapper.GZIP, ZlibWrapper.ZLIB_OR_NONE);]