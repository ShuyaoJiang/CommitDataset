[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, +import io.netty.util.IllegalReferenceCountException;, +    /**, +     * Used to cache the value of the hash code and avoid {@link IllegalRefCountException}., +     */, +    private int hash;, +        int hash = this.hash;, +        if (hash == 0) {, +            if (content().refCnt() != 0) {, +                try {, +                    hash = 31 + content().hashCode();, +                } catch (IllegalReferenceCountException ignored) {, +                    // Handle race condition between checking refCnt() == 0 and using the object., +                    hash = 31;, +                }, +            } else {, +                hash = 31;, +            }, +            hash = 31 * hash + trailingHeaders().hashCode();, +            hash = 31 * hash + super.hashCode();, +            this.hash = hash;, +        }, +        return hash;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpRequest.java, +import io.netty.util.IllegalReferenceCountException;, +    /**, +     * Used to cache the value of the hash code and avoid {@link IllegalRefCountException}., +     */, +    private int hash;, +        int hash = this.hash;, +        if (hash == 0) {, +            if (content().refCnt() != 0) {, +                try {, +                    hash = 31 + content().hashCode();, +                } catch (IllegalReferenceCountException ignored) {, +                    // Handle race condition between checking refCnt() == 0 and using the object., +                    hash = 31;, +                }, +            } else {, +                hash = 31;, +            }, +            hash = 31 * hash + trailingHeaders().hashCode();, +            hash = 31 * hash + super.hashCode();, +            this.hash = hash;, +        }, +        return hash;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultFullHttpResponse.java, +import io.netty.util.IllegalReferenceCountException;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +    /**, +     * Used to cache the value of the hash code and avoid {@link IllegalRefCountException}., +     */, +    private int hash;, +    public int hashCode() {, +        int hash = this.hash;, +        if (hash == 0) {, +            if (content().refCnt() != 0) {, +                try {, +                    hash = 31 + content().hashCode();, +                } catch (IllegalReferenceCountException ignored) {, +                    // Handle race condition between checking refCnt() == 0 and using the object., +                    hash = 31;, +                }, +            } else {, +                hash = 31;, +            }, +            hash = 31 * hash + trailingHeaders().hashCode();, +            hash = 31 * hash + super.hashCode();, +            this.hash = hash;, +        }, +        return hash;, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (!(o instanceof DefaultFullHttpResponse)) {, +            return false;, +        }, +, +        DefaultFullHttpResponse other = (DefaultFullHttpResponse) o;, +, +        return super.equals(other) &&, +               content().equals(other.content()) &&, +               trailingHeaders().equals(other.trailingHeaders());, +    }, +, +    @Override]