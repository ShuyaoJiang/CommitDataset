[+++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel;, +, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.util.Attribute;, +import io.netty.util.AttributeKey;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.ResourceLeakHint;, +import io.netty.util.concurrent.EventExecutor;, +import io.netty.util.internal.StringUtil;, +, +import java.net.SocketAddress;, +, +abstract class AbstractChannelHandlerContext implements ChannelHandlerContext, ResourceLeakHint {, +, +    volatile AbstractChannelHandlerContext next;, +    volatile AbstractChannelHandlerContext prev;, +, +    private final boolean inbound;, +    private final boolean outbound;, +    private final AbstractChannel channel;, +    private final DefaultChannelPipeline pipeline;, +    private final String name;, +    private boolean removed;, +, +    final ChannelHandlerInvoker invoker;, +    private ChannelFuture succeededFuture;, +, +    // Lazily instantiated tasks used to trigger events to a handler with different executor., +    // These needs to be volatile as otherwise an other Thread may see an half initialized instance., +    // See the JMM for more details, +    volatile Runnable invokeChannelReadCompleteTask;, +    volatile Runnable invokeReadTask;, +    volatile Runnable invokeChannelWritableStateChangedTask;, +    volatile Runnable invokeFlushTask;, +, +    AbstractChannelHandlerContext(, +            DefaultChannelPipeline pipeline, ChannelHandlerInvoker invoker,, +            String name, boolean inbound, boolean outbound) {, +, +        if (name == null) {, +            throw new NullPointerException("name");, +        }, +, +        channel = pipeline.channel;, +        this.pipeline = pipeline;, +        this.name = name;, +        this.invoker = invoker;, +, +        this.inbound = inbound;, +        this.outbound = outbound;, +    }, +, +    /** Invocation initiated by {@link DefaultChannelPipeline#teardownAll()}}. */, +    void teardown() {, +        EventExecutor executor = executor();, +        if (executor.inEventLoop()) {, +            teardown0();, +        } else {, +            executor.execute(new Runnable() {, +                @Override, +                public void run() {, +                    teardown0();, +                }, +            });, +        }, +    }, +, +    private void teardown0() {, +        AbstractChannelHandlerContext prev = this.prev;, +        if (prev != null) {, +            synchronized (pipeline) {, +                pipeline.remove0(this);, +            }, +            prev.teardown();, +        }, +    }, +, +    @Override, +    public Channel channel() {, +        return channel;, +    }, +, +    @Override, +    public ChannelPipeline pipeline() {]