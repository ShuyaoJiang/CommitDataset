[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    private static final String LEGACY_PROP_CHECK_ACCESSIBLE = "io.netty.buffer.bytebuf.checkAccessible";, +    private static final String PROP_CHECK_ACCESSIBLE = "io.netty.buffer.checkAccessible";, +    private static final String PROP_CHECK_BOUNDS = "io.netty.buffer.checkBounds";, +    private static final boolean checkBounds;, +        if (SystemPropertyUtil.contains(PROP_CHECK_ACCESSIBLE)) {, +            checkAccessible = SystemPropertyUtil.getBoolean(PROP_CHECK_ACCESSIBLE, true);, +        } else {, +            checkAccessible = SystemPropertyUtil.getBoolean(LEGACY_PROP_CHECK_ACCESSIBLE, true);, +        }, +        checkBounds = SystemPropertyUtil.getBoolean(PROP_CHECK_BOUNDS, true);, +            logger.debug("-D{}: {}", PROP_CHECK_ACCESSIBLE, checkAccessible);, +            logger.debug("-D{}: {}", PROP_CHECK_BOUNDS, checkBounds);, +    private static void checkIndexBounds(final int readerIndex, final int writerIndex, final int capacity) {, +        if (readerIndex < 0 || readerIndex > writerIndex || writerIndex > capacity) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",, +                    readerIndex, writerIndex, capacity));, +        }, +    }, +, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +        }, +    private static void checkReadableBounds(final ByteBuf src, final int length) {, +        if (length > src.readableBytes()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +        }, +    }, +, +        if (checkBounds) {, +            checkReadableBounds(src, length);, +        if (checkBounds) {, +        }, +        if (checkBounds) {, +            checkReadableBounds(src, length);, +    private static void checkRangeBounds(final int index, final int fieldLength, final int capacity) {, +        if (isOutOfBounds(index, fieldLength, capacity)) {, +                    "index: %d, length: %d (expected: range(0, %d))", index, fieldLength, capacity));, +        }, +    }, +, +    final void checkIndex0(int index, int fieldLength) {, +        if (checkBounds) {, +            checkRangeBounds(index, fieldLength, capacity());, +        if (checkBounds) {, +            checkRangeBounds(srcIndex, length, srcCapacity);, +        if (checkBounds) {, +            checkRangeBounds(dstIndex, length, dstCapacity);, +        if (checkBounds) {, +                throw new IllegalArgumentException("newCapacity: " + newCapacity +, +                        " (expected: 0-" + maxCapacity() + ')');, +            }, +        if (checkBounds) {, +    }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    private static final String LEGACY_PROP_CHECK_ACCESSIBLE = "io.netty.buffer.bytebuf.checkAccessible";, +    private static final String PROP_CHECK_ACCESSIBLE = "io.netty.buffer.checkAccessible";, +    private static final String PROP_CHECK_BOUNDS = "io.netty.buffer.checkBounds";, +    private static final boolean checkBounds;, +        if (SystemPropertyUtil.contains(PROP_CHECK_ACCESSIBLE)) {, +            checkAccessible = SystemPropertyUtil.getBoolean(PROP_CHECK_ACCESSIBLE, true);, +        } else {, +            checkAccessible = SystemPropertyUtil.getBoolean(LEGACY_PROP_CHECK_ACCESSIBLE, true);, +        }, +        checkBounds = SystemPropertyUtil.getBoolean(PROP_CHECK_BOUNDS, true);, +            logger.debug("-D{}: {}", PROP_CHECK_ACCESSIBLE, checkAccessible);, +            logger.debug("-D{}: {}", PROP_CHECK_BOUNDS, checkBounds);, +    private static void checkIndexBounds(final int readerIndex, final int writerIndex, final int capacity) {, +        if (readerIndex < 0 || readerIndex > writerIndex || writerIndex > capacity) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",, +                    readerIndex, writerIndex, capacity));, +        }, +    }, +, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +            checkIndexBounds(readerIndex, writerIndex, capacity());, +        if (checkBounds) {, +        }, +    private static void checkReadableBounds(final ByteBuf src, final int length) {, +        if (length > src.readableBytes()) {, +            throw new IndexOutOfBoundsException(String.format(, +                    "length(%d) exceeds src.readableBytes(%d) where src is: %s", length, src.readableBytes(), src));, +        }, +    }, +, +        if (checkBounds) {, +            checkReadableBounds(src, length);, +        if (checkBounds) {]