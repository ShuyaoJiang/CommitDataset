[+++ b/src/docbook/master.xml, +  <xi:include href="module/buffer.xml", +              xmlns:xi="http://www.w3.org/2001/XInclude" />, +, +++ b/src/docbook/master.xml, +  <xi:include href="module/buffer.xml", +              xmlns:xi="http://www.w3.org/2001/XInclude" />, +, +++ b/src/docbook/module/architecture.xml, +      Netty uses its own buffer API instead of NIO <classname>ByteBuffer</classname>, +      to represent a sequence of bytes. This approach has significant advantage, +      over using <classname>ByteBuffer</classname>.  Netty's new buffer type,, +      &ChannelBuffer; has been designed from ground up to address the problems, +      of <classname>ByteBuffer</classname> and to meet the daily needs of, +      network application developers.  To list a few cool features:, +      <itemizedlist>, +        <listitem>, +            You can define your buffer type if necessary., +        </listitem>, +        <listitem>, +            Transparent zero copy is achieved by built-in composite buffer type., +        </listitem>, +        <listitem>, +            A dynamic buffer type is provided out-of-the-box, whose capacity is, +            is expanded on demand, just like <classname>StringBuffer</classname>., +        </listitem>, +        <listitem>, +            There's no need to call <methodname>flip()</methodname> anymore., +        </listitem>, +        <listitem>, +            It is often faster than <classname>ByteBuffer</classname>., +        </listitem>, +      </itemizedlist>, +    </para>, +      For more information, please refer to <xref linkend="buffer"/>., +      Well-defined and extensible event model is a must for an event-driven, +      application.  Netty does have a well-defined event model focused on I/O., +      It also allows you to implement your own event type without breaking the, +      existing code at all because each event type is distinguished from, +      each other by strict type hierarchy.  This is another differentiator, +      against its competitors.  Many NIO frameworks have no or very limited, +      notion of event model; they often break the existing code when you try, +      to add a new custom event type, or just do not allow extension., +    </para>, +    <para>, +      A &ChannelEvent; is handled by a list of &ChannelHandler;s in a, +      &ChannelPipeline;. The pipeline implements an advanced form of the, +      <ulink url="http://java.sun.com/blueprints/corej2eepatterns/Patterns/InterceptingFilter.html">Intercepting Filter</ulink>, +      pattern to give a user full control over how an event is handled and how, +      the handlers in the pipeline interact with each other.  For example,, +      you can define what to do when a data is read from a socket:, +    </para>, +    <programlisting>public class MyReadHandler implements &SimpleChannelHandler; {, +    public void messageReceived(&ChannelHandlerContext; ctx, &MessageEvent; evt) {, +        Object message = evt.getMessage();, +        // Do something with the received message., +        ..., +        // And forward the event to the next handler., +        ctx.sendUpstream(evt);, +    }, +}</programlisting>, +    <para>, +      You can also define what to do when other handler requested a write, +      operation:, +    </para>, +    <programlisting>public class MyWriteHandler implements &SimpleChannelHandler; {, +    public void writeRequested(&ChannelHandlerContext; ctx, &MessageEvent; evt) {, +        Object message = evt.getMessage();, +        // Do something with the message to be written., +        ..., +        , +        // And forward the event to the next handler., +        ctx.sendDownstream(evt);, +    }, +}</programlisting>, +    <para>, +      For more information about the event model of Netty, please refer to the, +      API documentation of &ChannelEvent; and &ChannelPipeline;., +++ b/src/docbook/master.xml, +  <xi:include href="module/buffer.xml", +              xmlns:xi="http://www.w3.org/2001/XInclude" />, +, +++ b/src/docbook/module/architecture.xml, +      Netty uses its own buffer API instead of NIO <classname>ByteBuffer</classname>, +      to represent a sequence of bytes. This approach has significant advantage, +      over using <classname>ByteBuffer</classname>.  Netty's new buffer type,, +      &ChannelBuffer; has been designed from ground up to address the problems, +      of <classname>ByteBuffer</classname> and to meet the daily needs of, +      network application developers.  To list a few cool features:, +      <itemizedlist>, +        <listitem>, +            You can define your buffer type if necessary., +        </listitem>, +        <listitem>, +            Transparent zero copy is achieved by built-in composite buffer type., +        </listitem>, +        <listitem>, +            A dynamic buffer type is provided out-of-the-box, whose capacity is, +            is expanded on demand, just like <classname>StringBuffer</classname>., +        </listitem>]