[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import io.netty.channel.ChannelHandler.Sharable;, +import java.util.concurrent.atomic.AtomicInteger;, +    private final AtomicReference<Throwable> clientException = new AtomicReference<Throwable>();, +    private final AtomicReference<Throwable> serverException = new AtomicReference<Throwable>();, +, +    private final AtomicInteger clientSendCounter = new AtomicInteger();, +    private final AtomicInteger clientRecvCounter = new AtomicInteger();, +    private final AtomicInteger serverRecvCounter = new AtomicInteger();, +, +    private final AtomicInteger clientNegoCounter = new AtomicInteger();, +    private final AtomicInteger serverNegoCounter = new AtomicInteger();, +, +    private volatile SocketChannel clientChannel;, +    private volatile SocketChannel serverChannel;, +, +    private volatile SslHandler clientSslHandler;, +    private volatile SslHandler serverSslHandler;, +, +    private final EchoClientHandler clientHandler =, +            new EchoClientHandler(clientRecvCounter, clientNegoCounter, clientException);, +, +    private final EchoServerHandler serverHandler =, +            new EchoServerHandler(serverRecvCounter, serverNegoCounter, serverException);, +, +        reset();, +                serverChannel = sch;, +, +                    serverSslHandler = new SslHandler(sse, delegatedTaskExecutor);, +                    serverSslHandler = serverCtx.newHandler(sch.alloc());, +, +                sch.pipeline().addLast("ssl", serverSslHandler);, +                sch.pipeline().addLast("handler", serverHandler);, +                clientChannel = sch;, +, +                    clientSslHandler = new SslHandler(cse, delegatedTaskExecutor);, +                    clientSslHandler = clientCtx.newHandler(sch.alloc());, +, +                sch.pipeline().addLast("ssl", clientSslHandler);, +                sch.pipeline().addLast("handler", clientHandler);, +        final Channel sc = sb.bind().sync().channel();, +        cb.connect().sync();, +        final Future<Channel> clientHandshakeFuture = clientSslHandler.handshakeFuture();, +        clientChannel.writeAndFlush(Unpooled.wrappedBuffer(data, 0, FIRST_MESSAGE_SIZE));, +        clientSendCounter.set(FIRST_MESSAGE_SIZE);, +        clientHandshakeFuture.sync();, +        while (clientSendCounter.get() < data.length) {, +            int clientSendCounterVal = clientSendCounter.get();, +            int length = Math.min(random.nextInt(1024 * 64), data.length - clientSendCounterVal);, +            ByteBuf buf = Unpooled.wrappedBuffer(data, clientSendCounterVal, length);, +            ChannelFuture future = clientChannel.writeAndFlush(buf);, +            clientSendCounter.set(clientSendCounterVal += length);, +            future.sync();, +, +, +            if (needsRenegotiation && clientSendCounterVal >= data.length / 2) {, +                clientSslHandler.engine().setEnabledCipherSuites(new String[] { renegotiation.cipherSuite });, +                renegoFuture = clientSslHandler.renegotiate();, +                logStats("CLIENT RENEGOTIATES");, +                assertThat(renegoFuture, is(not(sameInstance(clientHandshakeFuture))));, +        if (serverHandler.renegoFuture != null) {, +            serverHandler.renegoFuture.sync();, +        while (clientRecvCounter.get() < data.length) {, +            if (serverException.get() != null) {, +            if (serverException.get() != null) {, +        while (serverRecvCounter.get() < data.length) {, +            if (serverException.get() != null) {, +            if (clientException.get() != null) {, +        serverChannel.close().awaitUninterruptibly();, +        clientChannel.close().awaitUninterruptibly();, +        if (serverException.get() != null && !(serverException.get() instanceof IOException)) {, +            throw serverException.get();, +        if (clientException.get() != null && !(clientException.get() instanceof IOException)) {, +            throw clientException.get();, +        if (serverException.get() != null) {, +            throw serverException.get();, +        if (clientException.get() != null) {, +            throw clientException.get();, +                assertThat(serverSslHandler.engine().getSession().getCipherSuite(), is(renegotiation.cipherSuite));, +                assertThat(serverNegoCounter.get(), is(2));, +                assertThat(clientSslHandler.engine().getSession().getCipherSuite(), is(renegotiation.cipherSuite));, +                assertThat(clientNegoCounter.get(), is(2));, +                assertThat(serverNegoCounter.get(), is(1));, +                assertThat(clientNegoCounter.get(), is(1));, +        } finally {, +            logStats("STATS");, +    private void reset() {, +        clientException.set(null);, +        serverException.set(null);, +        clientSendCounter.set(0);, +        clientRecvCounter.set(0);, +        serverRecvCounter.set(0);, +, +        clientNegoCounter.set(0);, +        serverNegoCounter.set(0);, +, +        clientChannel = null;, +        serverChannel = null;, +, +        clientSslHandler = null;]