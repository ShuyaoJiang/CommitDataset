[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteAsc0(index, length, processor);, +    public int forEachByte(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteAsc0(index, length, processor);, +    private int forEachByteAsc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +        final int endIndex = index + length;, +        int i = index;, +                i += processor.process(_getByte(i));, +            } while (i < endIndex);, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteDesc0(index, length, processor);, +    public int forEachByteDesc(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteDesc0(index, length, processor);, +    private int forEachByteDesc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +            return -1;, +        }, +, +        int i = index + length - 1;, +                i -= processor.process(_getByte(i));, +            } while (i >= index);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteAsc0(index, length, processor);, +    public int forEachByte(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteAsc0(index, length, processor);, +    private int forEachByteAsc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +        final int endIndex = index + length;, +        int i = index;, +                i += processor.process(_getByte(i));, +            } while (i < endIndex);, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteDesc0(index, length, processor);, +    public int forEachByteDesc(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteDesc0(index, length, processor);, +    private int forEachByteDesc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +            return -1;, +        }, +, +        int i = index + length - 1;, +                i -= processor.process(_getByte(i));, +            } while (i >= index);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * (i.e. {@code index}, {@code (index + 1)},  .. {@code (index + length - 1)}), +    int forEachByte(int index, int length, ByteBufProcessor processor);, +     * (i.e. {@code (index + length - 1)}, {@code (index + length - 2)}, ... {@code index}), +    int forEachByteDesc(int index, int length, ByteBufProcessor processor);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteAsc0(index, length, processor);, +    public int forEachByte(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteAsc0(index, length, processor);, +    private int forEachByteAsc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +        final int endIndex = index + length;, +        int i = index;, +                i += processor.process(_getByte(i));, +            } while (i < endIndex);, +        int index = readerIndex;, +        int length = writerIndex - index;, +        return forEachByteDesc0(index, length, processor);, +    public int forEachByteDesc(int index, int length, ByteBufProcessor processor) {, +        checkIndex(index, length);, +        return forEachByteDesc0(index, length, processor);, +    private int forEachByteDesc0(int index, int length, ByteBufProcessor processor) {, +        if (length == 0) {, +            return -1;, +        }, +, +        int i = index + length - 1;, +                i -= processor.process(_getByte(i));, +            } while (i >= index);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * (i.e. {@code index}, {@code (index + 1)},  .. {@code (index + length - 1)}), +    int forEachByte(int index, int length, ByteBufProcessor processor);, +     * (i.e. {@code (index + length - 1)}, {@code (index + length - 2)}, ... {@code index}), +    int forEachByteDesc(int index, int length, ByteBufProcessor processor);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufProcessor.java, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {, +        public int process(byte value) throws Exception {]