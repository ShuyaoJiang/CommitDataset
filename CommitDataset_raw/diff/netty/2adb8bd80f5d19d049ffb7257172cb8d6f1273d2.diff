[+++ b/handler/src/test/java/io/netty/handler/ssl/ParameterizedSslHandlerTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.CompositeByteBuf;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.nio.NioEventLoopGroup;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import io.netty.channel.socket.nio.NioSocketChannel;, +import io.netty.handler.ssl.util.InsecureTrustManagerFactory;, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +import io.netty.handler.ssl.util.SimpleTrustManagerFactory;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.concurrent.Future;, +import io.netty.util.concurrent.FutureListener;, +import io.netty.util.concurrent.Promise;, +import io.netty.util.concurrent.PromiseNotifier;, +import io.netty.util.internal.EmptyArrays;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +, +import javax.net.ssl.ManagerFactoryParameters;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +import java.io.File;, +import java.net.InetSocketAddress;, +import java.security.KeyStore;, +import java.security.cert.CertificateException;, +import java.security.cert.X509Certificate;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +@RunWith(Parameterized.class), +public class ParameterizedSslHandlerTest {, +, +    @Parameterized.Parameters(name = "{index}: clientProvider={0}, {index}: serverProvider={1}"), +    public static Collection<Object[]> data() {, +        List<SslProvider> providers = new ArrayList<SslProvider>(3);, +        if (OpenSsl.isAvailable()) {, +            providers.add(SslProvider.OPENSSL);, +            providers.add(SslProvider.OPENSSL_REFCNT);, +        }, +        providers.add(SslProvider.JDK);, +, +        List<Object[]> params = new ArrayList<Object[]>();, +, +        for (SslProvider cp: providers) {, +            for (SslProvider sp: providers) {, +                params.add(new Object[] { cp, sp });, +            }, +        }, +        return params;, +    }, +, +    private final SslProvider clientProvider;, +    private final SslProvider serverProvider;, +, +    public ParameterizedSslHandlerTest(SslProvider clientProvider, SslProvider serverProvider) {, +        this.clientProvider = clientProvider;, +        this.serverProvider = serverProvider;, +    }, +, +    @Test(timeout = 480000), +    public void testCompositeBufSizeEstimationGuaranteesSynchronousWrite(), +            throws CertificateException, SSLException, ExecutionException, InterruptedException {, +        compositeBufSizeEstimationGuaranteesSynchronousWrite(serverProvider, clientProvider,, +                true, true, true);, +        compositeBufSizeEstimationGuaranteesSynchronousWrite(serverProvider, clientProvider,, +                true, true, false);]