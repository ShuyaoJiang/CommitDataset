[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketUtil.java, +import io.netty.util.internal.PlatformDependent;, +        PlatformDependent.threadLocalRandom().nextBytes(bytes);, +        assert minimum < maximum;, +        double fraction = PlatformDependent.threadLocalRandom().nextDouble();, +, +        // the idea here is that nextDouble gives us a random value, +        //, +        //              0 <= fraction <= 1, +        //, +        // the distance from min to max declared as, +        //, +        //              dist = max - min, +        //, +        // satisfies the following, +        //, +        //              min + dist = max, +        //, +        // taking into account, +        //, +        //         0 <= fraction * dist <= dist, +        //, +        // we've got, +        //, +        //       min <= min + fraction * dist <= max, +        return (int) (minimum + fraction * (maximum - minimum));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketUtil.java, +import io.netty.util.internal.PlatformDependent;, +        PlatformDependent.threadLocalRandom().nextBytes(bytes);, +        assert minimum < maximum;, +        double fraction = PlatformDependent.threadLocalRandom().nextDouble();, +, +        // the idea here is that nextDouble gives us a random value, +        //, +        //              0 <= fraction <= 1, +        //, +        // the distance from min to max declared as, +        //, +        //              dist = max - min, +        //, +        // satisfies the following, +        //, +        //              min + dist = max, +        //, +        // taking into account, +        //, +        //         0 <= fraction * dist <= dist, +        //, +        // we've got, +        //, +        //       min <= min + fraction * dist <= max, +        return (int) (minimum + fraction * (maximum - minimum));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java, +        // use randomBytes helper from utils to check that it functions properly, +        byte[] data = WebSocketUtil.randomBytes(24);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketUtil.java, +import io.netty.util.internal.PlatformDependent;, +        PlatformDependent.threadLocalRandom().nextBytes(bytes);, +        assert minimum < maximum;, +        double fraction = PlatformDependent.threadLocalRandom().nextDouble();, +, +        // the idea here is that nextDouble gives us a random value, +        //, +        //              0 <= fraction <= 1, +        //, +        // the distance from min to max declared as, +        //, +        //              dist = max - min, +        //, +        // satisfies the following, +        //, +        //              min + dist = max, +        //, +        // taking into account, +        //, +        //         0 <= fraction * dist <= dist, +        //, +        // we've got, +        //, +        //       min <= min + fraction * dist <= max, +        return (int) (minimum + fraction * (maximum - minimum));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java, +        // use randomBytes helper from utils to check that it functions properly, +        byte[] data = WebSocketUtil.randomBytes(24);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketUtilTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */]