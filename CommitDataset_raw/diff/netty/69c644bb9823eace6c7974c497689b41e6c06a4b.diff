[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2, SSL.SSL_OP_NO_SSLv2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3, SSL.SSL_OP_NO_SSLv3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1, SSL.SSL_OP_NO_TLSv1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1, SSL.SSL_OP_NO_TLSv1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2, SSL.SSL_OP_NO_TLSv1_2)) {, +                logger.debug("Supported protocols (OpenSSL): {} ", SUPPORTED_PROTOCOLS_SET);, +    private static boolean doesSupportProtocol(int protocol, int opt) {, +        if (opt == 0) {, +            // If the opt is 0 the protocol is not supported. This is for example the case with BoringSSL and SSLv2., +            return false;, +        }, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV2, SSL.SSL_OP_NO_SSLv2)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_SSLV3, SSL.SSL_OP_NO_SSLv3)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1, SSL.SSL_OP_NO_TLSv1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_1, SSL.SSL_OP_NO_TLSv1_1)) {, +            if (doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_2, SSL.SSL_OP_NO_TLSv1_2)) {, +                logger.debug("Supported protocols (OpenSSL): {} ", SUPPORTED_PROTOCOLS_SET);, +    private static boolean doesSupportProtocol(int protocol, int opt) {, +        if (opt == 0) {, +            // If the opt is 0 the protocol is not supported. This is for example the case with BoringSSL and SSLv2., +            return false;, +        }, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +import org.junit.Assert;, +import java.util.HashSet;, +import java.util.Set;, +import static io.netty.handler.ssl.SslUtils.PROTOCOL_SSL_V2;, +import static io.netty.handler.ssl.SslUtils.PROTOCOL_SSL_V2_HELLO;, +import static io.netty.handler.ssl.SslUtils.PROTOCOL_SSL_V3;, +import static io.netty.handler.ssl.SslUtils.PROTOCOL_TLS_V1_1;, +, +    @Test, +    public void testDisableProtocols() throws Exception {, +        testDisableProtocols(PROTOCOL_SSL_V2, PROTOCOL_SSL_V2);, +        testDisableProtocols(PROTOCOL_SSL_V3, PROTOCOL_SSL_V2, PROTOCOL_SSL_V3);, +        testDisableProtocols(PROTOCOL_TLS_V1, PROTOCOL_SSL_V2, PROTOCOL_SSL_V3, PROTOCOL_TLS_V1);, +        testDisableProtocols(PROTOCOL_TLS_V1_1, PROTOCOL_SSL_V2, PROTOCOL_SSL_V3, PROTOCOL_TLS_V1, PROTOCOL_TLS_V1_1);, +        testDisableProtocols(PROTOCOL_TLS_V1_2, PROTOCOL_SSL_V2,, +                PROTOCOL_SSL_V3, PROTOCOL_TLS_V1, PROTOCOL_TLS_V1_1, PROTOCOL_TLS_V1_2);, +    }, +, +    private void testDisableProtocols(String protocol, String... disabledProtocols) throws Exception {, +        SelfSignedCertificate cert = new SelfSignedCertificate();, +, +        SslContext ctx = SslContextBuilder, +                .forServer(cert.certificate(), cert.privateKey()), +                .sslProvider(sslServerProvider()), +                .build();, +        SSLEngine server = ctx.newEngine(UnpooledByteBufAllocator.DEFAULT);, +, +        try {, +            Set<String> supported = new HashSet<String>(Arrays.asList(server.getSupportedProtocols()));, +            if (supported.contains(protocol)) {, +                server.setEnabledProtocols(server.getSupportedProtocols());, +                Assert.assertEquals(supported, new HashSet<String>(Arrays.asList(server.getSupportedProtocols())));, +, +                for (String disabled: disabledProtocols) {, +                    supported.remove(disabled);, +                }, +                if (supported.contains(SslUtils.PROTOCOL_SSL_V2_HELLO) && supported.size() == 1) {, +                    // It's not allowed to set only PROTOCOL_SSL_V2_HELLO if using JDK SSLEngine., +                    return;, +                }, +                server.setEnabledProtocols(supported.toArray(new String[0]));, +                Assert.assertEquals(supported, new HashSet<String>(Arrays.asList(server.getEnabledProtocols())));, +                server.setEnabledProtocols(server.getSupportedProtocols());, +            }, +        } finally {, +            cleanupServerSslEngine(server);, +            cleanupClientSslContext(ctx);, +            cert.delete();, +        }, +    }]