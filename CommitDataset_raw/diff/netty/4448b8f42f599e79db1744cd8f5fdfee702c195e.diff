[+++ b/handler/src/main/java/io/netty/handler/ssl/ConscryptAlpnSslEngine.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.util.internal.SystemPropertyUtil;, +import org.conscrypt.AllocatedBuffer;, +import org.conscrypt.BufferAllocator;, +    private static final boolean USE_BUFFER_ALLOCATOR = SystemPropertyUtil.getBoolean(, +            "io.netty.handler.ssl.conscrypt.useBufferAllocator", true);, +    static ConscryptAlpnSslEngine newClientEngine(SSLEngine engine, ByteBufAllocator alloc,, +        return new ClientEngine(engine, alloc, applicationNegotiator);, +    static ConscryptAlpnSslEngine newServerEngine(SSLEngine engine, ByteBufAllocator alloc,, +        return new ServerEngine(engine, alloc, applicationNegotiator);, +    private ConscryptAlpnSslEngine(SSLEngine engine, ByteBufAllocator alloc, List<String> protocols) {, +        // Configure the Conscrypt engine to use Netty's buffer allocator. This is a trade-off of memory vs, +        // performance., +        //, +        // If no allocator is provided, the engine will internally allocate a direct buffer of max packet size in, +        // order to optimize JNI calls (this happens the first time it is provided a non-direct buffer from the, +        // application)., +        //, +        // Alternatively, if an allocator is provided, no internal buffer will be created and direct buffers will be, +        // retrieved from the allocator on-demand., +        if (USE_BUFFER_ALLOCATOR) {, +            Conscrypt.Engines.setBufferAllocator(engine, new BufferAllocatorAdapter(alloc));, +        }, +, +        ClientEngine(SSLEngine engine, ByteBufAllocator alloc,, +            super(engine, alloc, applicationNegotiator.protocols());, +        ServerEngine(SSLEngine engine, ByteBufAllocator alloc,, +                     JdkApplicationProtocolNegotiator applicationNegotiator) {, +            super(engine, alloc, applicationNegotiator.protocols());, +, +    private static final class BufferAllocatorAdapter extends BufferAllocator {, +        private final ByteBufAllocator alloc;, +, +        BufferAllocatorAdapter(ByteBufAllocator alloc) {, +            this.alloc = alloc;, +        }, +, +        @Override, +        public AllocatedBuffer allocateDirectBuffer(int capacity) {, +            return new BufferAdapter(alloc.directBuffer(capacity));, +        }, +    }, +, +    private static final class BufferAdapter extends AllocatedBuffer {, +        private final ByteBuf nettyBuffer;, +        private final ByteBuffer buffer;, +, +        BufferAdapter(ByteBuf nettyBuffer) {, +            this.nettyBuffer = nettyBuffer;, +            this.buffer = nettyBuffer.nioBuffer(0, nettyBuffer.capacity());, +        }, +, +        @Override, +        public ByteBuffer nioBuffer() {, +            return buffer;, +        }, +, +        @Override, +        public AllocatedBuffer retain() {, +            nettyBuffer.retain();, +            return this;, +        }, +, +        @Override, +        public AllocatedBuffer release() {, +            nettyBuffer.release();, +            return this;, +        }, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/ConscryptAlpnSslEngine.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.util.internal.SystemPropertyUtil;, +import org.conscrypt.AllocatedBuffer;, +import org.conscrypt.BufferAllocator;, +    private static final boolean USE_BUFFER_ALLOCATOR = SystemPropertyUtil.getBoolean(, +            "io.netty.handler.ssl.conscrypt.useBufferAllocator", true);, +    static ConscryptAlpnSslEngine newClientEngine(SSLEngine engine, ByteBufAllocator alloc,, +        return new ClientEngine(engine, alloc, applicationNegotiator);, +    static ConscryptAlpnSslEngine newServerEngine(SSLEngine engine, ByteBufAllocator alloc,, +        return new ServerEngine(engine, alloc, applicationNegotiator);, +    private ConscryptAlpnSslEngine(SSLEngine engine, ByteBufAllocator alloc, List<String> protocols) {, +        // Configure the Conscrypt engine to use Netty's buffer allocator. This is a trade-off of memory vs, +        // performance., +        //, +        // If no allocator is provided, the engine will internally allocate a direct buffer of max packet size in, +        // order to optimize JNI calls (this happens the first time it is provided a non-direct buffer from the, +        // application)., +        //, +        // Alternatively, if an allocator is provided, no internal buffer will be created and direct buffers will be, +        // retrieved from the allocator on-demand., +        if (USE_BUFFER_ALLOCATOR) {, +            Conscrypt.Engines.setBufferAllocator(engine, new BufferAllocatorAdapter(alloc));, +        }, +, +        ClientEngine(SSLEngine engine, ByteBufAllocator alloc,, +            super(engine, alloc, applicationNegotiator.protocols());, +        ServerEngine(SSLEngine engine, ByteBufAllocator alloc,]