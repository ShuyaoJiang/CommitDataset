[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +import io.netty.channel.ChannelFlushFutureNotifier;, +    private final ChannelFlushFutureNotifier flushFutureNotifier = new ChannelFlushFutureNotifier() {, +        @Override, +        public synchronized void increaseWriteCounter(long delta) {, +            super.increaseWriteCounter(delta);, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures() {, +            super.notifyFlushFutures();, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures(Throwable cause) {, +            super.notifyFlushFutures(cause);, +        }, +    };, +        flushFutureNotifier.addFlushFuture(future, in.readableBytes());, +, +            flushFutureNotifier.increaseWriteCounter(bytesProduced);, +            ctx.flush(ctx.newFuture().addListener(flushFutureNotifier));, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +import io.netty.channel.ChannelFlushFutureNotifier;, +    private final ChannelFlushFutureNotifier flushFutureNotifier = new ChannelFlushFutureNotifier() {, +        @Override, +        public synchronized void increaseWriteCounter(long delta) {, +            super.increaseWriteCounter(delta);, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures() {, +            super.notifyFlushFutures();, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures(Throwable cause) {, +            super.notifyFlushFutures(cause);, +        }, +    };, +        flushFutureNotifier.addFlushFuture(future, in.readableBytes());, +, +            flushFutureNotifier.increaseWriteCounter(bytesProduced);, +            ctx.flush(ctx.newFuture().addListener(flushFutureNotifier));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import io.netty.channel.ChannelFutureListener;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private static final int FIRST_MESSAGE_SIZE = 16384;, +        final ChannelFuture firstByteWriteFuture =, +                cc.write(Unpooled.wrappedBuffer(data, 0, FIRST_MESSAGE_SIZE));, +        final AtomicBoolean firstByteWriteFutureDone = new AtomicBoolean();, +        hf.addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                firstByteWriteFutureDone.set(firstByteWriteFuture.isDone());, +            }, +        });, +        assertFalse(firstByteWriteFutureDone.get());, +, +        for (int i = FIRST_MESSAGE_SIZE; i < data.length;) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +import io.netty.channel.ChannelFlushFutureNotifier;, +    private final ChannelFlushFutureNotifier flushFutureNotifier = new ChannelFlushFutureNotifier() {, +        @Override, +        public synchronized void increaseWriteCounter(long delta) {, +            super.increaseWriteCounter(delta);, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures() {, +            super.notifyFlushFutures();, +        }, +, +        @Override, +        public synchronized void notifyFlushFutures(Throwable cause) {, +            super.notifyFlushFutures(cause);, +        }, +    };, +        flushFutureNotifier.addFlushFuture(future, in.readableBytes());, +, +            flushFutureNotifier.increaseWriteCounter(bytesProduced);, +            ctx.flush(ctx.newFuture().addListener(flushFutureNotifier));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import io.netty.channel.ChannelFutureListener;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private static final int FIRST_MESSAGE_SIZE = 16384;, +        final ChannelFuture firstByteWriteFuture =, +                cc.write(Unpooled.wrappedBuffer(data, 0, FIRST_MESSAGE_SIZE));, +        final AtomicBoolean firstByteWriteFutureDone = new AtomicBoolean();, +        hf.addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) throws Exception {, +                firstByteWriteFutureDone.set(firstByteWriteFuture.isDone());, +            }, +        });, +        assertFalse(firstByteWriteFutureDone.get());, +, +        for (int i = FIRST_MESSAGE_SIZE; i < data.length;) {, +++ b/transport/src/main/java/io/netty/channel/ChannelFlushFutureNotifier.java, +public class ChannelFlushFutureNotifier implements ChannelFutureListener {]