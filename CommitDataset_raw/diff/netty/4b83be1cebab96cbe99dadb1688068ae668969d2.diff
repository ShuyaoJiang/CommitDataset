[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +            OpenSslKeyMaterialProvider.validateKeyMaterialSupported(keyCertChain, key, keyPassword);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +            OpenSslKeyMaterialProvider.validateKeyMaterialSupported(keyCertChain, key, keyPassword);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialProvider.java, +import io.netty.buffer.UnpooledByteBufAllocator;, +import javax.net.ssl.SSLException;, +    static void validateKeyMaterialSupported(X509Certificate[] keyCertChain, PrivateKey key, String keyPassword), +            throws SSLException {, +        validateSupported(keyCertChain);, +        validateSupported(key, keyPassword);, +    }, +, +    private static void validateSupported(PrivateKey key, String password) throws SSLException {, +        if (key == null) {, +            return;, +        }, +, +        long pkeyBio = 0;, +        long pkey = 0;, +, +        try {, +            pkeyBio = toBIO(UnpooledByteBufAllocator.DEFAULT, key);, +            pkey = SSL.parsePrivateKey(pkeyBio, password);, +        } catch (Exception e) {, +            throw new SSLException("PrivateKey type not supported " + key.getFormat(), e);, +        } finally {, +            SSL.freeBIO(pkeyBio);, +            if (pkey != 0) {, +                SSL.freePrivateKey(pkey);, +            }, +        }, +    }, +, +    private static void validateSupported(X509Certificate[] certificates) throws SSLException {, +        if (certificates == null || certificates.length == 0) {, +            return;, +        }, +, +        long chainBio = 0;, +        long chain = 0;, +        PemEncoded encoded = null;, +        try {, +            encoded = PemX509Certificate.toPEM(UnpooledByteBufAllocator.DEFAULT, true, certificates);, +            chainBio = toBIO(UnpooledByteBufAllocator.DEFAULT, encoded.retain());, +            chain = SSL.parseX509Chain(chainBio);, +        } catch (Exception e) {, +            throw new SSLException("Certificate type not supported", e);, +        } finally {, +            SSL.freeBIO(chainBio);, +            if (chain != 0) {, +                SSL.freeX509Chain(chain);, +            }, +            if (encoded != null) {, +                encoded.release();, +            }, +        }, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +            OpenSslKeyMaterialProvider.validateKeyMaterialSupported(keyCertChain, key, keyPassword);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslKeyMaterialProvider.java, +import io.netty.buffer.UnpooledByteBufAllocator;, +import javax.net.ssl.SSLException;, +    static void validateKeyMaterialSupported(X509Certificate[] keyCertChain, PrivateKey key, String keyPassword), +            throws SSLException {, +        validateSupported(keyCertChain);, +        validateSupported(key, keyPassword);, +    }, +, +    private static void validateSupported(PrivateKey key, String password) throws SSLException {, +        if (key == null) {, +            return;, +        }, +, +        long pkeyBio = 0;, +        long pkey = 0;, +, +        try {, +            pkeyBio = toBIO(UnpooledByteBufAllocator.DEFAULT, key);, +            pkey = SSL.parsePrivateKey(pkeyBio, password);, +        } catch (Exception e) {, +            throw new SSLException("PrivateKey type not supported " + key.getFormat(), e);, +        } finally {, +            SSL.freeBIO(pkeyBio);, +            if (pkey != 0) {, +                SSL.freePrivateKey(pkey);, +            }, +        }, +    }, +, +    private static void validateSupported(X509Certificate[] certificates) throws SSLException {, +        if (certificates == null || certificates.length == 0) {, +            return;, +        }, +, +        long chainBio = 0;, +        long chain = 0;, +        PemEncoded encoded = null;, +        try {]