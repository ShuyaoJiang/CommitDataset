[+++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounter.java, +import org.jboss.netty.util.ExternalResourceReleasable;, +public class TrafficCounter implements ExternalResourceReleasable {, +     * @param newwriteLimit, +     * @param newreadLimit, +    public void configure(Channel channel, long newwriteLimit,, +            long newreadLimit) {, +        this.writeLimit = newwriteLimit;, +        this.readLimit = newreadLimit;, +     * @param newwriteLimit, +     * @param newreadLimit, +     * @param newcheckInterval, +    public void configure(Channel channel, long newwriteLimit,, +            long newreadLimit, long newcheckInterval) {, +        if (this.checkInterval != newcheckInterval) {, +            this.checkInterval = newcheckInterval;, +                this.configure(channel, newwriteLimit, newreadLimit);, +            if (newcheckInterval > 0) {, +        this.configure(channel, newwriteLimit, newreadLimit);, +    }, +    /**, +     * Specifies limits in Byte/s (not Bit/s) but do not changed the checkInterval, +     *, +     * @param newwriteLimit, +     * @param newreadLimit, +     */, +    public void configure(long newwriteLimit,, +            long newreadLimit) {, +        this.writeLimit = newwriteLimit;, +        this.readLimit = newreadLimit;, +    }, +    /**, +     * Specifies limits in Byte/s (not Bit/s) and the specified checkInterval between, +     * two computations in millisecond, +     *, +     * @param newwriteLimit, +     * @param newreadLimit, +     * @param newcheckInterval, +     */, +    public void configure(long newwriteLimit,, +            long newreadLimit, long newcheckInterval) {, +        if (this.checkInterval != newcheckInterval) {, +            this.checkInterval = newcheckInterval;, +            if (monitorFuture == null) {, +                this.configure(newwriteLimit, newreadLimit);, +                return;, +            }, +            stop();, +            if (newcheckInterval > 0) {, +                start();, +            } else {, +                // No more active monitoring, +                lastTime.set(System.currentTimeMillis());, +            }, +        }, +        this.configure(newwriteLimit, newreadLimit);, +    /* (non-Javadoc), +     * @see org.jboss.netty.util.ExternalResourceReleasable#releaseExternalResources(), +     */, +    public void releaseExternalResources() {, +        // Nothing to do: done in TrafficCounterFactory, +    }, +, +++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounter.java, +import org.jboss.netty.util.ExternalResourceReleasable;, +public class TrafficCounter implements ExternalResourceReleasable {, +     * @param newwriteLimit, +     * @param newreadLimit, +    public void configure(Channel channel, long newwriteLimit,, +            long newreadLimit) {, +        this.writeLimit = newwriteLimit;, +        this.readLimit = newreadLimit;, +     * @param newwriteLimit, +     * @param newreadLimit, +     * @param newcheckInterval, +    public void configure(Channel channel, long newwriteLimit,, +            long newreadLimit, long newcheckInterval) {, +        if (this.checkInterval != newcheckInterval) {, +            this.checkInterval = newcheckInterval;, +                this.configure(channel, newwriteLimit, newreadLimit);, +            if (newcheckInterval > 0) {, +        this.configure(channel, newwriteLimit, newreadLimit);, +    }, +    /**, +     * Specifies limits in Byte/s (not Bit/s) but do not changed the checkInterval, +     *, +     * @param newwriteLimit, +     * @param newreadLimit, +     */, +    public void configure(long newwriteLimit,, +            long newreadLimit) {, +        this.writeLimit = newwriteLimit;, +        this.readLimit = newreadLimit;, +    }, +    /**, +     * Specifies limits in Byte/s (not Bit/s) and the specified checkInterval between, +     * two computations in millisecond, +     *, +     * @param newwriteLimit, +     * @param newreadLimit]