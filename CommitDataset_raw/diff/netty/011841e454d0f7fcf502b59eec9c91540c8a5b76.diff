[+++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyUnsafeDirectByteBuf.java, +    @Override, +    public boolean hasMemoryAddress() {, +        return true;, +    }, +, +    @Override, +    public long memoryAddress() {, +        return memoryAddress;, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyUnsafeDirectByteBuf.java, +    @Override, +    public boolean hasMemoryAddress() {, +        return true;, +    }, +, +    @Override, +    public long memoryAddress() {, +        return memoryAddress;, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyDirectByteBufferBufTest.java, +, +    @Test, +    public void testMemoryAddress() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer());, +        try {, +            Assert.assertFalse(buf.hasMemoryAddress());, +            try {, +                buf.memoryAddress();, +                Assert.fail();, +            } catch (UnsupportedOperationException expected) {, +                // expected, +            }, +        } finally {, +            buf.release();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyUnsafeDirectByteBuf.java, +    @Override, +    public boolean hasMemoryAddress() {, +        return true;, +    }, +, +    @Override, +    public long memoryAddress() {, +        return memoryAddress;, +    }, +, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyDirectByteBufferBufTest.java, +, +    @Test, +    public void testMemoryAddress() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer());, +        try {, +            Assert.assertFalse(buf.hasMemoryAddress());, +            try {, +                buf.memoryAddress();, +                Assert.fail();, +            } catch (UnsupportedOperationException expected) {, +                // expected, +            }, +        } finally {, +            buf.release();, +        }, +    }, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyUnsafeDirectByteBufferBufTest.java, +import org.junit.Assert;, +import org.junit.Test;, +, +    @Test, +    @Override, +    public void testMemoryAddress() {, +        ByteBuf buf = buffer(allocate(8).asReadOnlyBuffer());, +        try {, +            Assert.assertTrue(buf.hasMemoryAddress());, +            buf.memoryAddress();, +        } finally {, +            buf.release();, +        }, +    }]