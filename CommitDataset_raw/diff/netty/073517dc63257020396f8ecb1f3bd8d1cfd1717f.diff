[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/worldclock/WorldClockClient.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.worldclock;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.socket.nio.NioEventLoopGroup;, +import io.netty.channel.socket.nio.NioSocketChannel;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +import java.util.regex.Pattern;, +, +/**, + * Sends a list of continent/city pairs to a {@link WorldClockServer} to, + * get the local times of the specified cities., + */, +public class WorldClockClient {, +, +    private final String host;, +    private final int port;, +    private final Collection<String> cities;, +, +    public WorldClockClient(String host, int port, Collection<String> cities) {, +        this.host = host;, +        this.port = port;, +        this.cities = new ArrayList<String>();, +        this.cities.addAll(cities);, +    }, +, +    public void run() throws Exception {, +        Bootstrap b = new Bootstrap();, +        try {, +            b.group(new NioEventLoopGroup()), +             .channel(NioSocketChannel.class), +             .handler(new WorldClockClientInitializer());, +, +            // Make a new connection., +            Channel ch = b.connect(host, port).sync().channel();, +]