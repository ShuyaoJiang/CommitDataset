[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import io.netty.channel.SelectStrategy;, +import io.netty.util.IntSupplier;, +import io.netty.util.internal.ObjectUtil;, +    private final SelectStrategy selectStrategy;, +    private final IntSupplier selectNowSupplier = new IntSupplier() {, +        @Override, +        public int get() throws Exception {, +            return Native.epollWait(epollFd.intValue(), events, 0);, +        }, +    };, +    EpollEventLoop(EventLoopGroup parent, Executor executor, int maxEvents, SelectStrategy strategy) {, +        selectStrategy = ObjectUtil.checkNotNull(strategy, "strategy");, +                int strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());, +                switch (strategy) {, +                    case SelectStrategy.CONTINUE:, +                        continue;, +                    case SelectStrategy.SELECT:, +                        strategy = epollWait(WAKEN_UP_UPDATER.getAndSet(this, 0) == 1);, +                    default:, +                        // fallthrough, +                    if (strategy > 0) {, +                        processReady(events, strategy);, +                    if (strategy > 0) {, +                        processReady(events, strategy);, +                if (allowGrowing && strategy == events.length()) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import io.netty.channel.SelectStrategy;, +import io.netty.util.IntSupplier;, +import io.netty.util.internal.ObjectUtil;, +    private final SelectStrategy selectStrategy;, +    private final IntSupplier selectNowSupplier = new IntSupplier() {, +        @Override, +        public int get() throws Exception {, +            return Native.epollWait(epollFd.intValue(), events, 0);, +        }, +    };, +    EpollEventLoop(EventLoopGroup parent, Executor executor, int maxEvents, SelectStrategy strategy) {, +        selectStrategy = ObjectUtil.checkNotNull(strategy, "strategy");, +                int strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());, +                switch (strategy) {, +                    case SelectStrategy.CONTINUE:, +                        continue;, +                    case SelectStrategy.SELECT:, +                        strategy = epollWait(WAKEN_UP_UPDATER.getAndSet(this, 0) == 1);, +                    default:, +                        // fallthrough, +                    if (strategy > 0) {, +                        processReady(events, strategy);, +                    if (strategy > 0) {, +                        processReady(events, strategy);, +                if (allowGrowing && strategy == events.length()) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoopGroup.java, +import io.netty.channel.DefaultSelectStrategyFactory;, +import io.netty.channel.SelectStrategyFactory;, +        this(nThreads, (ThreadFactory) null);, +    }, +, +    /**, +     * Create a new instance using the specified number of threads and the default {@link ThreadFactory}., +     */, +    @SuppressWarnings("deprecation"), +    public EpollEventLoopGroup(int nThreads, SelectStrategyFactory selectStrategyFactory) {, +        this(nThreads, null, selectStrategyFactory);, +     * Create a new instance using the specified number of threads and the given {@link ThreadFactory}., +     */, +    @SuppressWarnings("deprecation"), +    public EpollEventLoopGroup(int nThreads, ThreadFactory threadFactory, SelectStrategyFactory selectStrategyFactory) {, +        this(nThreads, threadFactory, 0, selectStrategyFactory);, +    }, +, +    /**, +     * @deprecated  Use {@link #EpollEventLoopGroup(int)} or {@link #EpollEventLoopGroup(int, ThreadFactory)}, +        this(nThreads, threadFactory, maxEventsAtOnce, DefaultSelectStrategyFactory.INSTANCE);, +    }, +, +    /**, +     * Create a new instance using the specified number of threads, the given {@link ThreadFactory} and the given, +     * maximal amount of epoll events to handle per epollWait(...)., +     *, +     * @deprecated  Use {@link #EpollEventLoopGroup(int)}, {@link #EpollEventLoopGroup(int, ThreadFactory)}, or, +     * {@link #EpollEventLoopGroup(int, SelectStrategyFactory)}, +     */, +    @Deprecated, +    public EpollEventLoopGroup(int nThreads, ThreadFactory threadFactory, int maxEventsAtOnce,, +                               SelectStrategyFactory selectStrategyFactory) {, +        super(nThreads, threadFactory, maxEventsAtOnce, selectStrategyFactory);, +        return new EpollEventLoop(this, executor, (Integer) args[0],, +                ((SelectStrategyFactory) args[1]).newSelectStrategy());, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +import io.netty.channel.SelectStrategy;, +import io.netty.util.IntSupplier;, +import io.netty.util.internal.ObjectUtil;, +    private final SelectStrategy selectStrategy;, +    private final IntSupplier selectNowSupplier = new IntSupplier() {, +        @Override, +        public int get() throws Exception {, +            return Native.epollWait(epollFd.intValue(), events, 0);, +        }, +    };]