[+++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable e) {, +        super.afterExecute(r, e);, +    }, +    protected boolean increaseCounter(Runnable task) {, +        if (!shouldCount(task)) {, +            //System.out.println("IC: " + channelCounter + ", " + increment);, +                    //System.out.println("UNREADABLE");, +    protected void decreaseCounter(Runnable task) {, +        if (!shouldCount(task)) {, +            //System.out.println("DC: " + channelCounter + ", " + increment);, +            if (maxChannelMemorySize != 0 && channelCounter < maxChannelMemorySize && channel.isOpen()) {, +                    //System.out.println("READABLE");, +    private static boolean shouldCount(Runnable task) {, +        if (task instanceof Executor) {, +            return false;, +        }, +, +            }, +        }, +        return true;, +    }, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable e) {, +        super.afterExecute(r, e);, +    }, +    protected boolean increaseCounter(Runnable task) {, +        if (!shouldCount(task)) {, +            //System.out.println("IC: " + channelCounter + ", " + increment);, +                    //System.out.println("UNREADABLE");, +    protected void decreaseCounter(Runnable task) {, +        if (!shouldCount(task)) {, +            //System.out.println("DC: " + channelCounter + ", " + increment);, +            if (maxChannelMemorySize != 0 && channelCounter < maxChannelMemorySize && channel.isOpen()) {, +                    //System.out.println("READABLE");, +    private static boolean shouldCount(Runnable task) {, +        if (task instanceof Executor) {, +            return false;, +        }, +, +            }, +        }, +        return true;, +    }, +++ b/src/main/java/org/jboss/netty/handler/execution/OrderedMemoryAwareThreadPoolExecutor.java, +            Thread thread = Thread.currentThread();, +                boolean ran = false;, +                OrderedMemoryAwareThreadPoolExecutor.this.beforeExecute(thread, task);, +                    ran = true;, +                    OrderedMemoryAwareThreadPoolExecutor.this.afterExecute(task, null);, +                } catch (RuntimeException e) {, +                    if (!ran) {, +                        OrderedMemoryAwareThreadPoolExecutor.this.afterExecute(task, e);, +                    }, +                    throw e;]