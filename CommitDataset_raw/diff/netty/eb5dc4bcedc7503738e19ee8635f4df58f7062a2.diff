[+++ b/common/src/main/java/io/netty/util/NetUtil.java, +import java.net.InetSocketAddress;, +     * Returns the {@link String} representation of an {@link InetSocketAddress}., +     * <p>, +     * The output does not include Scope ID., +     * @param addr {@link InetSocketAddress} to be converted to an address string, +     * @return {@code String} containing the text-formatted IP address, +     */, +    public static String toSocketAddressString(InetSocketAddress addr) {, +        String port = String.valueOf(addr.getPort());, +        final StringBuilder sb;, +, +        if (addr.isUnresolved()) {, +            String hostString = PlatformDependent.javaVersion() >= 7 ? addr.getHostString() : addr.getHostName();, +            sb = newSocketAddressStringBuilder(hostString, port, !isValidIpV6Address(hostString));, +        } else {, +            InetAddress address = addr.getAddress();, +            String hostString = toAddressString(address);, +            sb = newSocketAddressStringBuilder(hostString, port, address instanceof Inet4Address);, +        }, +        return sb.append(':').append(port).toString();, +    }, +, +    private static StringBuilder newSocketAddressStringBuilder(String hostString, String port, boolean ipv4) {, +        if (ipv4) {, +            // Need to include enough space for hostString:port., +            return new StringBuilder(hostString.length() + 1 + port.length()).append(hostString);, +        }, +        // Need to include enough space for [hostString]:port., +        return new StringBuilder(, +                hostString.length() + 3 + port.length()).append('[').append(hostString).append(']');, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +import java.net.InetSocketAddress;, +     * Returns the {@link String} representation of an {@link InetSocketAddress}., +     * <p>, +     * The output does not include Scope ID., +     * @param addr {@link InetSocketAddress} to be converted to an address string, +     * @return {@code String} containing the text-formatted IP address, +     */, +    public static String toSocketAddressString(InetSocketAddress addr) {, +        String port = String.valueOf(addr.getPort());, +        final StringBuilder sb;, +, +        if (addr.isUnresolved()) {, +            String hostString = PlatformDependent.javaVersion() >= 7 ? addr.getHostString() : addr.getHostName();, +            sb = newSocketAddressStringBuilder(hostString, port, !isValidIpV6Address(hostString));, +        } else {, +            InetAddress address = addr.getAddress();, +            String hostString = toAddressString(address);, +            sb = newSocketAddressStringBuilder(hostString, port, address instanceof Inet4Address);, +        }, +        return sb.append(':').append(port).toString();, +    }, +, +    private static StringBuilder newSocketAddressStringBuilder(String hostString, String port, boolean ipv4) {, +        if (ipv4) {, +            // Need to include enough space for hostString:port., +            return new StringBuilder(hostString.length() + 1 + port.length()).append(hostString);, +        }, +        // Need to include enough space for [hostString]:port., +        return new StringBuilder(, +                hostString.length() + 3 + port.length()).append('[').append(hostString).append(']');, +    }, +, +    /**, +++ b/common/src/test/java/io/netty/util/NetUtilTest.java, +import java.net.InetSocketAddress;, +import static io.netty.util.NetUtil.toSocketAddressString;, +    @Test, +    public void testIp6InetSocketAddressToString() throws UnknownHostException {, +        for (Entry<byte[], String> testEntry : ipv6ToAddressStrings.entrySet()) {, +            assertEquals('[' + testEntry.getValue() + "]:9999",, +                    toSocketAddressString(new InetSocketAddress(InetAddress.getByAddress(testEntry.getKey()), 9999)));, +        }, +    }, +, +    @Test, +    public void testIp4SocketAddressToString() throws UnknownHostException {, +        for (Entry<String, String> e : validIpV4Hosts.entrySet()) {, +            assertEquals(e.getKey() + ":9999",, +                    toSocketAddressString(new InetSocketAddress(InetAddress.getByAddress(unhex(e.getValue())), 9999)));, +        }, +    }, +, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +import java.net.InetSocketAddress;, +     * Returns the {@link String} representation of an {@link InetSocketAddress}., +     * <p>, +     * The output does not include Scope ID., +     * @param addr {@link InetSocketAddress} to be converted to an address string, +     * @return {@code String} containing the text-formatted IP address, +     */, +    public static String toSocketAddressString(InetSocketAddress addr) {, +        String port = String.valueOf(addr.getPort());, +        final StringBuilder sb;, +, +        if (addr.isUnresolved()) {]