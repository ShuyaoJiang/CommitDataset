[+++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java, +    private ChannelBuffer[] components;, +    private int lastAccessedComponentId;, +        final List<ChannelBuffer> newComponents = new ArrayList<ChannelBuffer>(buffers.length);, +        for (ChannelBuffer c: buffers) {, +            if (c.readableBytes() > 0) {, +                expectedEndianness = c.order();, +                if (c instanceof CompositeChannelBuffer) {, +                    newComponents.addAll(, +                            ((CompositeChannelBuffer) c).slice0(, +                                    c.readerIndex(), c.readableBytes()));, +                    newComponents.add(c.slice());, +            } else if (c.capacity() != 0) {, +                expectedEndianness = c.order();, +        setFromList(newComponents);, +       int componentId = componentId(index);, +       List<ChannelBuffer> slice = new ArrayList<ChannelBuffer>(components.length);, +, +       // The first component, +       ChannelBuffer first = components[componentId].duplicate();, +       first.readerIndex(index - indices[componentId]);, +, +       ChannelBuffer buf = first;, +       do {, +           int readableBytes = buf.readableBytes();, +           if (bytesToSlice <= readableBytes) {, +               // Last component, +               slice.add(buf);, +               // Not the last component, +               slice.add(buf);, +               bytesToSlice -= readableBytes;, +               componentId ++;, +, +               // Fetch the next component., +               buf = components[componentId].duplicate();, +       } while (bytesToSlice > 0);, +, +       // Slice all components because only readable bytes are interesting., +       for (int i = 0; i < slice.size(); i ++) {, +           slice.set(i, slice.get(i).slice());, +, +       return slice;, +    * Setup this ChannelBuffer from the list, +   private void setFromList(List<ChannelBuffer> newComponents) {, +       assert !newComponents.isEmpty();, +       // Clear the cache., +       lastAccessedComponentId = 0;, +       // Build the component array., +       components = new ChannelBuffer[newComponents.size()];, +       for (int i = 0; i < components.length; i ++) {, +           ChannelBuffer c = newComponents.get(i);, +           if (c.order() != order()) {, +, +           assert c.readerIndex() == 0;, +           assert c.writerIndex() == c.capacity();, +, +           components[i] = c;, +, +       // Build the component lookup table., +       indices = new int[components.length + 1];, +       for (int i = 1; i <= components.length; i ++) {, +           indices[i] = indices[i - 1] + components[i - 1].capacity();, +, +       // Reset the indexes., +        components = buffer.components.clone();, +        return indices[components.length];, +        int componentId = componentId(index);, +        return components[componentId].getByte(index - indices[componentId]);, +        int componentId = componentId(index);, +        if (index + 2 <= indices[componentId + 1]) {, +            return components[componentId].getShort(index - indices[componentId]);, +        int componentId = componentId(index);, +        if (index + 3 <= indices[componentId + 1]) {, +            return components[componentId].getUnsignedMedium(index - indices[componentId]);, +        int componentId = componentId(index);, +        if (index + 4 <= indices[componentId + 1]) {, +            return components[componentId].getInt(index - indices[componentId]);, +        int componentId = componentId(index);, +        if (index + 8 <= indices[componentId + 1]) {, +            return components[componentId].getLong(index - indices[componentId]);, +        int componentId = componentId(index);, +        int i = componentId;, +            ChannelBuffer s = components[i];, +        int componentId = componentId(index);, +        int i = componentId;, +                ChannelBuffer s = components[i];, +        int componentId = componentId(index);, +        int i = componentId;, +            ChannelBuffer s = components[i];, +        int componentId = componentId(index);, +        int i = componentId;, +            ChannelBuffer s = components[i];, +        int componentId = componentId(index);, +        components[componentId].setByte(index - indices[componentId], value);, +        int componentId = componentId(index);, +        if (index + 2 <= indices[componentId + 1]) {, +            components[componentId].setShort(index - indices[componentId], value);, +        int componentId = componentId(index);, +        if (index + 3 <= indices[componentId + 1]) {, +            components[componentId].setMedium(index - indices[componentId], value);]