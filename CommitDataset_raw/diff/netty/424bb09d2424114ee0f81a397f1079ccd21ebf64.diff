[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodec.java, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.handler.codec.EncoderException;, +import io.netty.handler.codec.http.FullHttpResponse;, +import io.netty.handler.codec.http.HttpResponse;, +import io.netty.handler.codec.http.HttpResponseStatus;, +@Sharable, +            final CharSequence status = headers.status();, +, +            // 100-continue response is a special case where Http2HeadersFrame#isEndStream=false, +            // but we need to decode it as a FullHttpResponse to play nice with HttpObjectAggregator., +            if (null != status && HttpResponseStatus.CONTINUE.codeAsText().contentEquals(status)) {, +                final FullHttpMessage fullMsg = newFullMessage(id, headers, ctx.alloc());, +                out.add(fullMsg);, +                return;, +            }, +, +                if (headers.method() == null && status == null) {, +    /**, +     * Encode from an {@link HttpObject} to an {@link Http2StreamFrame}. This method will, +     * be called for each written message that can be handled by this encoder., +     *, +     * NOTE: 100-Continue responses that are NOT {@link FullHttpResponse} will be rejected., +     *, +     * @param ctx           the {@link ChannelHandlerContext} which this handler belongs to, +     * @param obj           the {@link HttpObject} message to encode, +     * @param out           the {@link List} into which the encoded msg should be added, +     *                      needs to do some kind of aggregation, +     * @throws Exception    is thrown if an error occurs, +     */, +        // 100-continue is typically a FullHttpResponse, but the decoded, +        // Http2HeadersFrame should not be marked as endStream=true, +        if (obj instanceof HttpResponse) {, +            final HttpResponse res = (HttpResponse) obj;, +            if (res.status().equals(HttpResponseStatus.CONTINUE)) {, +                if (res instanceof FullHttpResponse) {, +                    final Http2Headers headers = toHttp2Headers(res);, +                    out.add(new DefaultHttp2HeadersFrame(headers, false));, +                    return;, +                } else {, +                    throw new EncoderException(, +                            HttpResponseStatus.CONTINUE.toString() + " must be a FullHttpResponse");, +                }, +            }, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodec.java, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.handler.codec.EncoderException;, +import io.netty.handler.codec.http.FullHttpResponse;, +import io.netty.handler.codec.http.HttpResponse;, +import io.netty.handler.codec.http.HttpResponseStatus;, +@Sharable, +            final CharSequence status = headers.status();, +, +            // 100-continue response is a special case where Http2HeadersFrame#isEndStream=false, +            // but we need to decode it as a FullHttpResponse to play nice with HttpObjectAggregator., +            if (null != status && HttpResponseStatus.CONTINUE.codeAsText().contentEquals(status)) {, +                final FullHttpMessage fullMsg = newFullMessage(id, headers, ctx.alloc());, +                out.add(fullMsg);, +                return;, +            }, +, +                if (headers.method() == null && status == null) {, +    /**, +     * Encode from an {@link HttpObject} to an {@link Http2StreamFrame}. This method will, +     * be called for each written message that can be handled by this encoder., +     *, +     * NOTE: 100-Continue responses that are NOT {@link FullHttpResponse} will be rejected., +     *, +     * @param ctx           the {@link ChannelHandlerContext} which this handler belongs to, +     * @param obj           the {@link HttpObject} message to encode, +     * @param out           the {@link List} into which the encoded msg should be added, +     *                      needs to do some kind of aggregation, +     * @throws Exception    is thrown if an error occurs, +     */, +        // 100-continue is typically a FullHttpResponse, but the decoded, +        // Http2HeadersFrame should not be marked as endStream=true, +        if (obj instanceof HttpResponse) {, +            final HttpResponse res = (HttpResponse) obj;, +            if (res.status().equals(HttpResponseStatus.CONTINUE)) {, +                if (res instanceof FullHttpResponse) {, +                    final Http2Headers headers = toHttp2Headers(res);, +                    out.add(new DefaultHttp2HeadersFrame(headers, false));, +                    return;, +                } else {, +                    throw new EncoderException(, +                            HttpResponseStatus.CONTINUE.toString() + " must be a FullHttpResponse");, +                }, +            }, +        }, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodecTest.java, +import io.netty.handler.codec.EncoderException;, +    public void encode100ContinueAsHttp2HeadersFrameThatIsNotEndStream() throws Exception {, +        EmbeddedChannel ch = new EmbeddedChannel(new Http2StreamFrameToHttpObjectCodec(true));, +        assertTrue(ch.writeOutbound(new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE)));, +, +        Http2HeadersFrame headersFrame = ch.readOutbound();]