[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.util.concurrent.atomic.AtomicInteger;, +    // Number of thread caches backed by this arena., +    final AtomicInteger numThreadCaches = new AtomicInteger();, +, +    public int numThreadCaches() {, +        return numThreadCaches.get();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.util.concurrent.atomic.AtomicInteger;, +    // Number of thread caches backed by this arena., +    final AtomicInteger numThreadCaches = new AtomicInteger();, +, +    public int numThreadCaches() {, +        return numThreadCaches.get();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/PoolArenaMetric.java, +     * Returns the number of thread caches backed by this arena., +     */, +    int numThreadCaches();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.util.concurrent.atomic.AtomicInteger;, +    // Number of thread caches backed by this arena., +    final AtomicInteger numThreadCaches = new AtomicInteger();, +, +    public int numThreadCaches() {, +        return numThreadCaches.get();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/PoolArenaMetric.java, +     * Returns the number of thread caches backed by this arena., +     */, +    int numThreadCaches();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +, +            directArena.numThreadCaches.getAndIncrement();, +, +            heapArena.numThreadCaches.getAndIncrement();, +, +        if (directArena != null) {, +            directArena.numThreadCaches.getAndDecrement();, +        }, +, +        if (heapArena != null) {, +            heapArena.numThreadCaches.getAndDecrement();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.util.concurrent.atomic.AtomicInteger;, +    // Number of thread caches backed by this arena., +    final AtomicInteger numThreadCaches = new AtomicInteger();, +, +    public int numThreadCaches() {, +        return numThreadCaches.get();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/PoolArenaMetric.java, +     * Returns the number of thread caches backed by this arena., +     */, +    int numThreadCaches();, +, +    /**, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +, +            directArena.numThreadCaches.getAndIncrement();, +, +            heapArena.numThreadCaches.getAndIncrement();, +, +        if (directArena != null) {, +            directArena.numThreadCaches.getAndDecrement();, +        }, +, +        if (heapArena != null) {, +            heapArena.numThreadCaches.getAndDecrement();, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        protected synchronized PoolThreadCache initialValue() {, +            final PoolArena<byte[]> heapArena = leastUsedArena(heapArenas);, +            final PoolArena<ByteBuffer> directArena = leastUsedArena(directArenas);, +        protected void onRemoval(PoolThreadCache threadCache) {, +            threadCache.free();, +        }, +, +        private <T> PoolArena<T> leastUsedArena(PoolArena<T>[] arenas) {, +            if (arenas == null || arenas.length == 0) {, +                return null;, +            }, +, +            PoolArena<T> minArena = arenas[0];, +            for (int i = 1; i < arenas.length; i++) {, +                PoolArena<T> arena = arenas[i];]