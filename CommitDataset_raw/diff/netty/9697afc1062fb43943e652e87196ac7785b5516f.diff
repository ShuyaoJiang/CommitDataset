[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractByteBuf.class);, +    private static final String PROP_MODE = "io.netty.buffer.bytebuf.checkAccessible";, +    private static final boolean checkAccessible;, +, +    static {, +        checkAccessible = SystemPropertyUtil.getBoolean(PROP_MODE, true);, +        if (logger.isDebugEnabled()) {, +            logger.debug("-D{}: {}", PROP_MODE, checkAccessible);, +        }, +    }, +        if (checkAccessible && refCnt() == 0) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractByteBuf.class);, +    private static final String PROP_MODE = "io.netty.buffer.bytebuf.checkAccessible";, +    private static final boolean checkAccessible;, +, +    static {, +        checkAccessible = SystemPropertyUtil.getBoolean(PROP_MODE, true);, +        if (logger.isDebugEnabled()) {, +            logger.debug("-D{}: {}", PROP_MODE, checkAccessible);, +        }, +    }, +        if (checkAccessible && refCnt() == 0) {, +++ b/microbench/pom.xml, +      <version>1.11.1</version>, +      <version>1.11.1</version>, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import io.netty.util.internal.SystemPropertyUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(AbstractByteBuf.class);, +    private static final String PROP_MODE = "io.netty.buffer.bytebuf.checkAccessible";, +    private static final boolean checkAccessible;, +, +    static {, +        checkAccessible = SystemPropertyUtil.getBoolean(PROP_MODE, true);, +        if (logger.isDebugEnabled()) {, +            logger.debug("-D{}: {}", PROP_MODE, checkAccessible);, +        }, +    }, +        if (checkAccessible && refCnt() == 0) {, +++ b/microbench/pom.xml, +      <version>1.11.1</version>, +      <version>1.11.1</version>, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufBenchmark.java, +/*, +* Copyright 2015 The Netty Project, +*, +* The Netty Project licenses this file to you under the Apache License,, +* version 2.0 (the "License"); you may not use this file except in compliance, +* with the License. You may obtain a copy of the License at:, +*, +*   http://www.apache.org/licenses/LICENSE-2.0, +*, +* Unless required by applicable law or agreed to in writing, software, +* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, +* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, +* License for the specific language governing permissions and limitations, +* under the License., +*/, +package io.netty.microbench.buffer;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.PooledByteBufAllocator;, +import io.netty.buffer.Unpooled;, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.Setup;, +import org.openjdk.jmh.annotations.TearDown;, +, +import java.nio.ByteBuffer;, +, +public class ByteBufBenchmark extends AbstractMicrobenchmark {, +    static {, +        System.setProperty("io.netty.buffer.bytebuf.checkAccessible", "false");, +    }, +    private static final byte BYTE = '0';, +, +    private ByteBuffer byteBuffer;, +    private ByteBuffer directByteBuffer;, +    private ByteBuf buffer;, +    private ByteBuf directBuffer;, +    private ByteBuf directBufferPooled;, +, +    @Setup, +    public void setup() {, +        byteBuffer = ByteBuffer.allocate(8);, +        directByteBuffer = ByteBuffer.allocateDirect(8);, +        buffer = Unpooled.buffer(8);, +        directBuffer = Unpooled.directBuffer(8);, +        directBufferPooled = PooledByteBufAllocator.DEFAULT.directBuffer(8);, +    }, +]