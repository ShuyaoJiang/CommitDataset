[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +import java.util.Collections;, +import static java.util.Collections.singletonMap;, +, +    private static final Map<String, String> j2oTls13;, +    private static final Map<String, Map<String, String>> o2jTls13;, +, +    static {, +        Map<String, String> j2oTls13Map = new HashMap<String, String>();, +        j2oTls13Map.put("TLS_AES_128_GCM_SHA256", "AEAD-AES128-GCM-SHA256");, +        j2oTls13Map.put("TLS_AES_256_GCM_SHA384", "AEAD-AES256-GCM-SHA384");, +        j2oTls13Map.put("TLS_CHACHA20_POLY1305_SHA256", "AEAD-CHACHA20-POLY1305-SHA256");, +        j2oTls13 = Collections.unmodifiableMap(j2oTls13Map);, +, +        Map<String, Map<String, String>> o2jTls13Map = new HashMap<String, Map<String, String>>();, +        o2jTls13Map.put("TLS_AES_128_GCM_SHA256", singletonMap("TLS", "TLS_AES_128_GCM_SHA256"));, +        o2jTls13Map.put("TLS_AES_256_GCM_SHA384", singletonMap("TLS", "TLS_AES_256_GCM_SHA384"));, +        o2jTls13Map.put("TLS_CHACHA20_POLY1305_SHA256", singletonMap("TLS", "TLS_CHACHA20_POLY1305_SHA256"));, +        o2jTls13Map.put("AEAD-AES128-GCM-SHA256", singletonMap("TLS", "TLS_AES_128_GCM_SHA256"));, +        o2jTls13Map.put("AEAD-AES256-GCM-SHA384", singletonMap("TLS", "TLS_AES_256_GCM_SHA384"));, +        o2jTls13Map.put("AEAD-CHACHA20-POLY1305-SHA256", singletonMap("TLS", "TLS_CHACHA20_POLY1305_SHA256"));, +        o2jTls13 = Collections.unmodifiableMap(o2jTls13Map);, +    }, +, +    static String toOpenSsl(String javaCipherSuite, boolean boringSSL) {, +        return cacheFromJava(javaCipherSuite, boringSSL);, +    private static String cacheFromJava(String javaCipherSuite, boolean boringSSL) {, +        String converted = j2oTls13.get(javaCipherSuite);, +        if (converted != null) {, +            return boringSSL ? converted : javaCipherSuite;, +        }, +, +        String openSslCipherSuite = toOpenSslUncached(javaCipherSuite, boringSSL);, +    static String toOpenSslUncached(String javaCipherSuite, boolean boringSSL) {, +        String converted = j2oTls13.get(javaCipherSuite);, +        if (converted != null) {, +            return boringSSL ? converted : javaCipherSuite;, +        }, +, +            String cipher = p2j.get("");, +            if (cipher == null) {, +                return null;, +            }, +            javaCipherSuite = protocol + '_' + cipher;, +        Map<String, String> converted = o2jTls13.get(openSslCipherSuite);, +        if (converted != null) {, +            return converted;, +        }, +, +        String javaCipherSuiteSuffix = toJavaUncached0(openSslCipherSuite, false);, +        return toJavaUncached0(openSslCipherSuite, true);, +    }, +, +    private static String toJavaUncached0(String openSslCipherSuite, boolean checkTls13) {, +        if (checkTls13) {, +            Map<String, String> converted = o2jTls13.get(openSslCipherSuite);, +            if (converted != null) {, +                return converted.get("TLS");, +            }, +        }, +, +    static void convertToCipherStrings(Iterable<String> cipherSuites, StringBuilder cipherBuilder,, +                                       StringBuilder cipherTLSv13Builder, boolean boringSSL) {, +            String converted = toOpenSsl(c, boringSSL);, +            if (SslUtils.isTLSv13Cipher(converted) || SslUtils.isTLSv13Cipher(c)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +import java.util.Collections;, +import static java.util.Collections.singletonMap;, +, +    private static final Map<String, String> j2oTls13;, +    private static final Map<String, Map<String, String>> o2jTls13;, +, +    static {, +        Map<String, String> j2oTls13Map = new HashMap<String, String>();, +        j2oTls13Map.put("TLS_AES_128_GCM_SHA256", "AEAD-AES128-GCM-SHA256");, +        j2oTls13Map.put("TLS_AES_256_GCM_SHA384", "AEAD-AES256-GCM-SHA384");, +        j2oTls13Map.put("TLS_CHACHA20_POLY1305_SHA256", "AEAD-CHACHA20-POLY1305-SHA256");, +        j2oTls13 = Collections.unmodifiableMap(j2oTls13Map);, +, +        Map<String, Map<String, String>> o2jTls13Map = new HashMap<String, Map<String, String>>();, +        o2jTls13Map.put("TLS_AES_128_GCM_SHA256", singletonMap("TLS", "TLS_AES_128_GCM_SHA256"));, +        o2jTls13Map.put("TLS_AES_256_GCM_SHA384", singletonMap("TLS", "TLS_AES_256_GCM_SHA384"));, +        o2jTls13Map.put("TLS_CHACHA20_POLY1305_SHA256", singletonMap("TLS", "TLS_CHACHA20_POLY1305_SHA256"));, +        o2jTls13Map.put("AEAD-AES128-GCM-SHA256", singletonMap("TLS", "TLS_AES_128_GCM_SHA256"));, +        o2jTls13Map.put("AEAD-AES256-GCM-SHA384", singletonMap("TLS", "TLS_AES_256_GCM_SHA384"));, +        o2jTls13Map.put("AEAD-CHACHA20-POLY1305-SHA256", singletonMap("TLS", "TLS_CHACHA20_POLY1305_SHA256"));, +        o2jTls13 = Collections.unmodifiableMap(o2jTls13Map);, +    }, +, +    static String toOpenSsl(String javaCipherSuite, boolean boringSSL) {, +        return cacheFromJava(javaCipherSuite, boringSSL);, +    private static String cacheFromJava(String javaCipherSuite, boolean boringSSL) {, +        String converted = j2oTls13.get(javaCipherSuite);, +        if (converted != null) {, +            return boringSSL ? converted : javaCipherSuite;, +        }, +, +        String openSslCipherSuite = toOpenSslUncached(javaCipherSuite, boringSSL);, +    static String toOpenSslUncached(String javaCipherSuite, boolean boringSSL) {, +        String converted = j2oTls13.get(javaCipherSuite);]