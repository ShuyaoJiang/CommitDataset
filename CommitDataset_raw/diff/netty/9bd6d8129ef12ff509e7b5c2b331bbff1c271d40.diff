[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +    private static final float HEADERS_WEIGHT_NEW = 1 / 5f;, +    private static final float HEADERS_WEIGHT_HISTORICAL = 1 - HEADERS_WEIGHT_NEW;, +    private static final float TRAILERS_WEIGHT_NEW = HEADERS_WEIGHT_NEW;, +    private static final float TRAILERS_WEIGHT_HISTORICAL = HEADERS_WEIGHT_HISTORICAL;, +    /**, +     * Used to calculate an exponential moving average of the encoded size of the initial line and the headers for, +     * a guess for future buffer allocations., +     */, +    private float headersEncodedSizeAccumulator = 256;, +, +    /**, +     * Used to calculate an exponential moving average of the encoded size of the trailers for, +     * a guess for future buffer allocations., +     */, +    private float trailersEncodedSizeAccumulator = 256;, +, +            buf = ctx.alloc().buffer((int) headersEncodedSizeAccumulator);, +            headersEncodedSizeAccumulator = HEADERS_WEIGHT_NEW * padSizeForAccumulation(buf.readableBytes()) +, +                                            HEADERS_WEIGHT_HISTORICAL * headersEncodedSizeAccumulator;, +                ByteBuf buf = ctx.alloc().buffer((int) trailersEncodedSizeAccumulator);, +                trailersEncodedSizeAccumulator = TRAILERS_WEIGHT_NEW * padSizeForAccumulation(buf.readableBytes()) +, +                                                 TRAILERS_WEIGHT_HISTORICAL * trailersEncodedSizeAccumulator;, +    /**, +     * Add some additional overhead to the buffer. The rational is that it is better to slightly over allocate and waste, +     * some memory, rather than under allocate and require a resize/copy., +     * @param readableBytes The readable bytes in the buffer., +     * @return The {@code readableBytes} with some additional padding., +     */, +    private static int padSizeForAccumulation(int readableBytes) {, +        return (readableBytes << 2) / 3;, +    }, +]