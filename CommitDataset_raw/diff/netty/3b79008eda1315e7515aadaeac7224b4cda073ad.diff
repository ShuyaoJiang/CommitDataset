[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +        for (Map.Entry<String, String> e: headers()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +        for (Map.Entry<String, String> e: headers()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +    private HttpMessage message;, +            assert message == null;, +            message = (HttpMessage) msg;, +                HttpMessage message = this.message;, +                HttpHeaders headers = message.headers();, +                this.message = null;, +                String contentEncoding = headers.get(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.remove(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.set(HttpHeaders.Names.CONTENT_ENCODING, targetContentEncoding);, +                    Object[] decoded = decodeContent(message, c);, +                    if (headers.contains(HttpHeaders.Names.CONTENT_LENGTH)) {, +                        headers.set(, +                return new Object[] { message, c };, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +        for (Map.Entry<String, String> e: headers()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +    private HttpMessage message;, +            assert message == null;, +            message = (HttpMessage) msg;, +                HttpMessage message = this.message;, +                HttpHeaders headers = message.headers();, +                this.message = null;, +                String contentEncoding = headers.get(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.remove(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.set(HttpHeaders.Names.CONTENT_ENCODING, targetContentEncoding);, +                    Object[] decoded = decodeContent(message, c);, +                    if (headers.contains(HttpHeaders.Names.CONTENT_LENGTH)) {, +                        headers.set(, +                return new Object[] { message, c };, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private HttpMessage message;, +            assert message == null;, +                    HttpRequest req = (HttpRequest) msg;, +                    message = new DefaultHttpRequest(req.protocolVersion(), req.method(), req.uri());, +                    message.headers().set(req.headers());, +                    HttpResponse res = (HttpResponse) msg;, +                    message = new DefaultHttpResponse(res.protocolVersion(), res.status());, +                    message.headers().set(res.headers());, +                message = (HttpMessage) msg;, +                HttpMessage message = this.message;, +                HttpHeaders headers = message.headers();, +                this.message = null;, +                Result result = beginEncode(message, c, acceptEncoding);, +                        return new Object[] { message, new DefaultLastHttpContent(c.data()) };, +                        return new Object[] { message, new DefaultHttpContent(c.data()) };, +                headers.set(, +                Object[] encoded = encodeContent(message, c);, +                if (!HttpHeaders.isTransferEncodingChunked(message) && encoded.length == 3) {, +                    if (headers.contains(HttpHeaders.Names.CONTENT_LENGTH)) {, +                        headers.set(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpMessage.java, +        for (Map.Entry<String, String> e: headers()) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +    private HttpMessage message;, +            assert message == null;, +            message = (HttpMessage) msg;, +                HttpMessage message = this.message;, +                HttpHeaders headers = message.headers();, +                this.message = null;, +                String contentEncoding = headers.get(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.remove(HttpHeaders.Names.CONTENT_ENCODING);, +                        headers.set(HttpHeaders.Names.CONTENT_ENCODING, targetContentEncoding);, +                    Object[] decoded = decodeContent(message, c);, +                    if (headers.contains(HttpHeaders.Names.CONTENT_LENGTH)) {, +                        headers.set(, +                return new Object[] { message, c };, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private HttpMessage message;, +            assert message == null;, +                    HttpRequest req = (HttpRequest) msg;, +                    message = new DefaultHttpRequest(req.protocolVersion(), req.method(), req.uri());, +                    message.headers().set(req.headers());, +                    HttpResponse res = (HttpResponse) msg;, +                    message = new DefaultHttpResponse(res.protocolVersion(), res.status());, +                    message.headers().set(res.headers());, +                message = (HttpMessage) msg;, +                HttpMessage message = this.message;, +                HttpHeaders headers = message.headers();, +                this.message = null;, +                Result result = beginEncode(message, c, acceptEncoding);, +                        return new Object[] { message, new DefaultLastHttpContent(c.data()) };, +                        return new Object[] { message, new DefaultHttpContent(c.data()) };, +                headers.set(, +                Object[] encoded = encodeContent(message, c);, +                if (!HttpHeaders.isTransferEncodingChunked(message) && encoded.length == 3) {, +                    if (headers.contains(HttpHeaders.Names.CONTENT_LENGTH)) {, +                        headers.set(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        HttpHeaders h = message.headers();, +                h.remove(Names.CONNECTION);, +                h.set(Names.CONNECTION, Values.CLOSE);, +                h.set(Names.CONNECTION, Values.KEEP_ALIVE);, +                h.remove(Names.CONNECTION);, +        HttpHeaders h = message.headers();, +                h.contains(Names.SEC_WEBSOCKET_KEY1) &&]