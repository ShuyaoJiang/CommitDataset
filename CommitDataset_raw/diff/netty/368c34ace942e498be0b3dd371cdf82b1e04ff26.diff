[+++ b/src/main/java/org/jboss/netty/channel/AdaptiveReceiveBufferSizePredictor.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel;, +, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * The {@link ReceiveBufferSizePredictor} that automatically increases and, + * decreases the predicted buffer size on feed back., + * <p>, + * It gradually increases the expected number of readable bytes if the previous, + * read filled the allocated buffer.  It gradually decreases the expected number, + * of readable bytes if the read operation was not able to fill a certain amount, + * of the allocated buffer two times consecutively.  Otherwise, it keeps, + * returning the previous prediction., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public class AdaptiveReceiveBufferSizePredictor implements, +        ReceiveBufferSizePredictor {, +, +    private static final int INDEX_INCREMENT = 4;, +    private static final int INDEX_DECREMENT = 1;, +, +    private static final int[] SIZE_TABLE;, +, +    static {, +        List<Integer> sizeTable = new ArrayList<Integer>();, +        for (int i = 1; i <= 8; i ++) {, +            sizeTable.add(i);, +        }, +, +        for (int i = 4; i < 32; i ++) {, +            long v = 1L << i;, +            long inc = v >>> 4;, +            v -= inc << 3;, +, +            for (int j = 0; j < 8; j ++) {, +                v += inc;, +                if (v > Integer.MAX_VALUE) {, +                    sizeTable.add(Integer.MAX_VALUE);, +                } else {, +                    sizeTable.add((int) v);, +                }, +            }, +        }, +, +        SIZE_TABLE = new int[sizeTable.size()];, +        for (int i = 0; i < SIZE_TABLE.length; i ++) {, +            SIZE_TABLE[i] = sizeTable.get(i);, +        }, +    }, +, +    private static int getSizeTableIndex(final int size) {, +        if (size <= 16) {, +            return size - 1;, +        }, +, +        int bits = 0;, +        int v = size;, +        do {, +            v >>>= 1;, +            bits ++;, +        } while (v != 0);, +, +        final int baseIdx = bits << 3;, +        final int startIdx = baseIdx - 18;, +        final int endIdx = baseIdx - 25;, +, +        for (int i = startIdx; i >= endIdx; i --) {, +            if (size >= SIZE_TABLE[i]) {, +                return i;, +            }, +        }]