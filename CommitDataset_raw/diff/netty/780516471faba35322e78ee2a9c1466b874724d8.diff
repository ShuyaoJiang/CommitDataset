[+++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.channel.ChannelId;, +     * Returns the {@link Channel} which has the specified {@link ChannelId}., +     *, +     * @return the matching {@link Channel} if found. {@code null} otherwise., +     */, +    Channel find(ChannelId id);, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.channel.ChannelId;, +     * Returns the {@link Channel} which has the specified {@link ChannelId}., +     *, +     * @return the matching {@link Channel} if found. {@code null} otherwise., +     */, +    Channel find(ChannelId id);, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +import io.netty.channel.ChannelId;, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<ChannelId, Channel> serverChannels = PlatformDependent.newConcurrentHashMap();, +    private final ConcurrentMap<ChannelId, Channel> nonServerChannels = PlatformDependent.newConcurrentHashMap();, +    public Channel find(ChannelId id) {, +        Channel c = nonServerChannels.get(id);, +        if (c != null) {, +            return c;, +        } else {, +            return serverChannels.get(id);, +        }, +    }, +, +    @Override, +                return serverChannels.containsValue(c);, +                return nonServerChannels.containsValue(c);, +        ConcurrentMap<ChannelId, Channel> map =, +        boolean added = map.putIfAbsent(channel.id(), channel) == null;, +        Channel c = null;, +        if (o instanceof ChannelId) {, +            c = nonServerChannels.remove(o);, +            if (c == null) {, +                c = serverChannels.remove(o);, +        } else if (o instanceof Channel) {, +            c = (Channel) o;, +                c = serverChannels.remove(c.id());, +                c = nonServerChannels.remove(c.id());, +        }, +, +        if (c == null) {, +                serverChannels.values().iterator(),, +                nonServerChannels.values().iterator());, +        channels.addAll(serverChannels.values());, +        channels.addAll(nonServerChannels.values());, +        channels.addAll(serverChannels.values());, +        channels.addAll(nonServerChannels.values());, +        for (Channel c: nonServerChannels.values()) {, +        for (Channel c: serverChannels.values()) {, +        for (Channel c: nonServerChannels.values()) {, +        for (Channel c: serverChannels.values()) {, +        for (Channel c: nonServerChannels.values()) {, +        for (Channel c: serverChannels.values()) {, +        for (Channel c: nonServerChannels.values()) {, +        for (Channel c: nonServerChannels.values()) {, +        for (Channel c: nonServerChannels.values()) {]