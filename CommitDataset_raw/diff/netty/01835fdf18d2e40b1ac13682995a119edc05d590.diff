[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +        return encodeString0(alloc, false, src, charset, 0);, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     *, +     * @param alloc The {@link ByteBufAllocator} to allocate {@link ByteBuf}., +     * @param src The {@link CharBuffer} to encode., +     * @param charset The specified {@link Charset}., +     * @param extraCapacity the extra capacity to alloc except the space for decoding., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset, int extraCapacity) {, +        return encodeString0(alloc, false, src, charset, extraCapacity);, +    }, +, +    static ByteBuf encodeString0(ByteBufAllocator alloc, boolean enforceHeap, CharBuffer src, Charset charset,, +                                 int extraCapacity) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar()) + extraCapacity;, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +        return encodeString0(alloc, false, src, charset, 0);, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     *, +     * @param alloc The {@link ByteBufAllocator} to allocate {@link ByteBuf}., +     * @param src The {@link CharBuffer} to encode., +     * @param charset The specified {@link Charset}., +     * @param extraCapacity the extra capacity to alloc except the space for decoding., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset, int extraCapacity) {, +        return encodeString0(alloc, false, src, charset, extraCapacity);, +    }, +, +    static ByteBuf encodeString0(ByteBufAllocator alloc, boolean enforceHeap, CharBuffer src, Charset charset,, +                                 int extraCapacity) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar()) + extraCapacity;, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        return ByteBufUtil.encodeString0(ALLOC, true, buffer, charset, 0);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +        return encodeString0(alloc, false, src, charset, 0);, +    /**, +     * Encode the given {@link CharBuffer} using the given {@link Charset} into a new {@link ByteBuf} which, +     * is allocated via the {@link ByteBufAllocator}., +     *, +     * @param alloc The {@link ByteBufAllocator} to allocate {@link ByteBuf}., +     * @param src The {@link CharBuffer} to encode., +     * @param charset The specified {@link Charset}., +     * @param extraCapacity the extra capacity to alloc except the space for decoding., +     */, +    public static ByteBuf encodeString(ByteBufAllocator alloc, CharBuffer src, Charset charset, int extraCapacity) {, +        return encodeString0(alloc, false, src, charset, extraCapacity);, +    }, +, +    static ByteBuf encodeString0(ByteBufAllocator alloc, boolean enforceHeap, CharBuffer src, Charset charset,, +                                 int extraCapacity) {, +        int length = (int) ((double) src.remaining() * encoder.maxBytesPerChar()) + extraCapacity;, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +        return ByteBufUtil.encodeString0(ALLOC, true, buffer, charset, 0);, +++ b/codec/src/main/java/io/netty/handler/codec/string/LineEncoder.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.string;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.LineBasedFrameDecoder;, +import io.netty.handler.codec.MessageToMessageEncoder;, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.ObjectUtil;, +, +import java.nio.CharBuffer;, +import java.nio.charset.Charset;, +import java.util.List;, +, +/**, + * Apply a line separator to the requested {@link String} and encode it into a {@link ByteBuf}., + * A typical setup for a text-based line protocol in a TCP/IP socket would be:, + * <pre>, + * {@link ChannelPipeline} pipeline = ...;, + *, + * // Decoders, + * pipeline.addLast("frameDecoder", new {@link LineBasedFrameDecoder}(80));, + * pipeline.addLast("stringDecoder", new {@link StringDecoder}(CharsetUtil.UTF_8));, + *]