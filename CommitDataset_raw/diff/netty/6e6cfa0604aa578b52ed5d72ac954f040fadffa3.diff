[+++ b/codec/src/test/java/io/netty/handler/codec/EmptyHeadersTest.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.handler.codec;, +, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.Collections;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +, +public class EmptyHeadersTest {, +, +    private static final TestEmptyHeaders HEADERS = new TestEmptyHeaders();, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddStringValue() {, +        HEADERS.add("name", "value");, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddStringValues() {, +        HEADERS.add("name", "value1", "value2");, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddStringValuesIterable() {, +        HEADERS.add("name", Arrays.asList("value1", "value2"));, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddBoolean() {, +        HEADERS.addBoolean("name", true);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddByte() {, +        HEADERS.addByte("name", (byte) 1);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddChar() {, +        HEADERS.addChar("name", 'a');, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddDouble() {, +        HEADERS.addDouble("name", 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddFloat() {, +        HEADERS.addFloat("name", 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddInt() {, +        HEADERS.addInt("name", 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddLong() {, +        HEADERS.addLong("name", 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddShort() {, +        HEADERS.addShort("name", (short) 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testAddTimeMillis() {, +        HEADERS.addTimeMillis("name", 0);, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testSetStringValue() {, +        HEADERS.set("name", "value");, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testSetStringValues() {, +        HEADERS.set("name", "value1", "value2");]