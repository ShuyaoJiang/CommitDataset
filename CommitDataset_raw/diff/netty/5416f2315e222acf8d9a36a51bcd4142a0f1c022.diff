[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +import java.nio.ByteBuffer;, +, +, +    @Override, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return nioBuffer(index, length);, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +        return unwrap().nioBuffer(index, length);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +import java.nio.ByteBuffer;, +, +, +    @Override, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return nioBuffer(index, length);, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +        return unwrap().nioBuffer(index, length);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        if (components.size() == 1) {, +            ByteBuf buf = components.get(0).buf;, +            if (buf.nioBufferCount() == 1) {, +                return components.get(0).buf.nioBuffer(index, length);, +            }, +        }, +        ByteBuffer merged = ByteBuffer.allocate(length).order(order());, +        ByteBuffer[] buffers = nioBuffers(index, length);, +, +        //noinspection ForLoopReplaceableByForEach, +        for (int i = 0; i < buffers.length; i++) {, +            merged.put(buffers[0]);, +        }, +, +        merged.flip();, +        return merged;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +import java.nio.ByteBuffer;, +, +, +    @Override, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return nioBuffer(index, length);, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +        return unwrap().nioBuffer(index, length);, +    }, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +    public ByteBuffer nioBuffer(int index, int length) {, +        if (components.size() == 1) {, +            ByteBuf buf = components.get(0).buf;, +            if (buf.nioBufferCount() == 1) {, +                return components.get(0).buf.nioBuffer(index, length);, +            }, +        }, +        ByteBuffer merged = ByteBuffer.allocate(length).order(order());, +        ByteBuffer[] buffers = nioBuffers(index, length);, +, +        //noinspection ForLoopReplaceableByForEach, +        for (int i = 0; i < buffers.length; i++) {, +            merged.put(buffers[0]);, +        }, +, +        merged.flip();, +        return merged;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +        return nioBuffer(index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +import java.nio.ByteBuffer;, +, +, +    @Override, +    public ByteBuffer internalNioBuffer(int index, int length) {, +        return nioBuffer(index, length);, +    }, +, +    @Override, +    public ByteBuffer nioBuffer(int index, int length) {, +        return unwrap().nioBuffer(index, length);]