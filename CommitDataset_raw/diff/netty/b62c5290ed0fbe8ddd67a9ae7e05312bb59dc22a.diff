[+++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +import io.netty.util.Mapping;, +    private final Mapping<Object, SslContext> mapping;, +     * Creates a SNI detection handler with configured {@link SslContext}, +     * maintained by {@link Mapping}, +    public SniHandler(Mapping<? super String, ? extends SslContext> mapping) {, +        this.mapping = (Mapping<Object, SslContext>) mapping;, +     * Creates a SNI detection handler with configured {@link SslContext}, +     * maintained by {@link DomainNameMapping}, +     *, +     * @param mapping the mapping of domain name to {@link SslContext}, +     */, +    public SniHandler(DomainNameMapping<? extends SslContext> mapping) {, +        this((Mapping<String, ? extends SslContext>) mapping);, +    }, +, +    /**, +     * @return the selected {@link SslContext}, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +import io.netty.util.Mapping;, +    private final Mapping<Object, SslContext> mapping;, +     * Creates a SNI detection handler with configured {@link SslContext}, +     * maintained by {@link Mapping}, +    public SniHandler(Mapping<? super String, ? extends SslContext> mapping) {, +        this.mapping = (Mapping<Object, SslContext>) mapping;, +     * Creates a SNI detection handler with configured {@link SslContext}, +     * maintained by {@link DomainNameMapping}, +     *, +     * @param mapping the mapping of domain name to {@link SslContext}, +     */, +    public SniHandler(DomainNameMapping<? extends SslContext> mapping) {, +        this((Mapping<String, ? extends SslContext>) mapping);, +    }, +, +    /**, +     * @return the selected {@link SslContext}, +++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +    /**, +     * Creates a new instance., +     */, +    protected SslContext() { }]