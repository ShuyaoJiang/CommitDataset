[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +    private float windowUpdateRatio;, +    private int initialWindowSize = DEFAULT_WINDOW_SIZE;, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        private int initialStreamWindowSize;, +        private float streamWindowUpdateRatio;, +            assert ctx == null || ctx.executor().inEventLoop();, +            assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +    private float windowUpdateRatio;, +    private int initialWindowSize = DEFAULT_WINDOW_SIZE;, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        private int initialStreamWindowSize;, +        private float streamWindowUpdateRatio;, +            assert ctx == null || ctx.executor().inEventLoop();, +            assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        // The context can be null assuming the frame will be queued and send later when the context is set., +        assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +    private float windowUpdateRatio;, +    private int initialWindowSize = DEFAULT_WINDOW_SIZE;, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        private int initialStreamWindowSize;, +        private float streamWindowUpdateRatio;, +            assert ctx == null || ctx.executor().inEventLoop();, +            assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        // The context can be null assuming the frame will be queued and send later when the context is set., +        assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowControllerTest.java, +import io.netty.util.concurrent.EventExecutor;, +, +    private EventExecutor executor;, +, +    @Mock, +        when(ctx.executor()).thenReturn(executor);, +        when(executor.inEventLoop()).thenReturn(true);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +    private float windowUpdateRatio;, +    private int initialWindowSize = DEFAULT_WINDOW_SIZE;, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        assert ctx != null && ctx.executor().inEventLoop();, +        private int initialStreamWindowSize;, +        private float streamWindowUpdateRatio;, +            assert ctx == null || ctx.executor().inEventLoop();, +            assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, + * <p>, + * This class is <strong>NOT</strong> thread safe. The assumption is all methods must be invoked from a single thread., + * Typically this thread is the event loop thread for the {@link ChannelHandlerContext} managed by this class., +        assert ctx == null || ctx.executor().inEventLoop();, +        assert ctx == null || ctx.executor().inEventLoop();, +        // The context can be null assuming the frame will be queued and send later when the context is set., +        assert ctx == null || ctx.executor().inEventLoop();, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowControllerTest.java, +import io.netty.util.concurrent.EventExecutor;, +, +    private EventExecutor executor;]