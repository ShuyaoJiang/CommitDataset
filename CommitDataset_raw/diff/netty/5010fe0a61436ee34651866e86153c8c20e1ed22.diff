[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +public class SslHandler extends ByteToMessageDecoder implements ChannelOutboundHandler {, +    private int packetLength;, +, +        if (buffer.readableBytes() < 5) {, +            throw new IllegalArgumentException("buffer must have at least 5 readable bytes");, +        }, +        int first = buffer.readerIndex();, +        switch (buffer.getUnsignedByte(first)) {, +            int majorVersion = buffer.getUnsignedByte(first + 1);, +                packetLength = (buffer.getUnsignedShort(first + 3)) + 5;, +            int headerLength = (buffer.getUnsignedByte(first) & 0x80) != 0 ? 2 : 3;, +            int majorVersion = buffer.getUnsignedByte(first + headerLength + 1);, +                    packetLength = (buffer.getShort(first) & 0x7FFF) + 2;, +                    packetLength = (buffer.getShort(first) & 0x3FFF) + 3;, +        // Check if the packet length was parsed yet, if so we can skip the parsing, +        final int readableBytes = in.readableBytes();, +        int packetLength = this.packetLength;, +        if (packetLength == 0) {, +            if (readableBytes < 5) {, +            packetLength = getEncryptedPacketLength(in);, +                in.skipBytes(readableBytes);, +            this.packetLength = packetLength;, +        }, +, +        if (readableBytes < packetLength) {, +            return;, +        }, +            // reset the packet length so it will be parsed again on the next call, +            this.packetLength = 0;, +]