[+++ b/transport/src/main/java/io/netty/channel/ChannelInboundByteHandlerAdapter.java, + * This implementation is a good starting point for most users., +++ b/transport/src/main/java/io/netty/channel/ChannelInboundByteHandlerAdapter.java, + * This implementation is a good starting point for most users., +++ b/transport/src/main/java/io/netty/channel/ChannelInboundInvoker.java, +/**, + * Interface which is shared by others which need to fire inbound events, + */, +, +    /**, +     * A {@link Channel} was registered to its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelRegistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} was unregistered from its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelUnregistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} is active now, which means it is connected., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelActive(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} is inactive now, which means it is closed., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelInactive(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} received an {@link Throwable} in one of its inbound operations., +     *, +     * This will result in having the  {@link ChannelInboundHandler#exceptionCaught(ChannelHandlerContext, Throwable)}, +     * method  called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} received an user defined event., +     *, +     * This will result in having the  {@link ChannelInboundHandler#userEventTriggered(ChannelHandlerContext, Object)}, +     * method  called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} received bytes which are now ready to read from its inbound buffer., +     *, +     * This will result in having the  {@link ChannelInboundHandler#inboundBufferUpdated(ChannelHandlerContext)}, +     * method  called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundByteHandlerAdapter.java, + * This implementation is a good starting point for most users., +++ b/transport/src/main/java/io/netty/channel/ChannelInboundInvoker.java, +/**, + * Interface which is shared by others which need to fire inbound events, + */, +, +    /**, +     * A {@link Channel} was registered to its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelRegistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} was unregistered from its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelUnregistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} is active now, which means it is connected., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelActive(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +, +    /**, +     * A {@link Channel} is inactive now, which means it is closed., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelInactive(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the]