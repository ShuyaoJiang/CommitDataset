[+++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.java, +    public CompositeByteBuf addComponent(boolean increaseWriterIndex, ByteBuf buffer) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponent(increaseWriterIndex, buffer);, +    }, +, +    @Override, +    public CompositeByteBuf addComponents(boolean increaseWriterIndex, ByteBuf... buffers) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponents(increaseWriterIndex, buffers);, +    }, +, +    @Override, +    public CompositeByteBuf addComponents(boolean increaseWriterIndex, Iterable<ByteBuf> buffers) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponents(increaseWriterIndex, buffers);, +    }, +, +    @Override, +    public CompositeByteBuf addComponent(boolean increaseWriterIndex, int cIndex, ByteBuf buffer) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponent(increaseWriterIndex, cIndex, buffer);, +    }, +, +    @Override, +    public CompositeByteBuf removeComponent(int cIndex) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.removeComponent(cIndex);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.java, +    public CompositeByteBuf addComponent(boolean increaseWriterIndex, ByteBuf buffer) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponent(increaseWriterIndex, buffer);, +    }, +, +    @Override, +    public CompositeByteBuf addComponents(boolean increaseWriterIndex, ByteBuf... buffers) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponents(increaseWriterIndex, buffers);, +    }, +, +    @Override, +    public CompositeByteBuf addComponents(boolean increaseWriterIndex, Iterable<ByteBuf> buffers) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponents(increaseWriterIndex, buffers);, +    }, +, +    @Override, +    public CompositeByteBuf addComponent(boolean increaseWriterIndex, int cIndex, ByteBuf buffer) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.addComponent(increaseWriterIndex, cIndex, buffer);, +    }, +, +    @Override, +    public CompositeByteBuf removeComponent(int cIndex) {, +        recordLeakNonRefCountingOperation(leak);, +        return super.removeComponent(cIndex);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        addComponents0(false, 0, buffers);, +        addComponents0(false, 0, buffers);, +     * If you need to have it increased use {@link #addComponent(boolean, ByteBuf)}., +        return addComponent(false, buffer);, +     * If you need to have it increased use {@link #addComponents(boolean, ByteBuf[])}., +        return addComponents(false, buffers);, +     * If you need to have it increased use {@link #addComponents(boolean, Iterable)}., +        return addComponents(false, buffers);, +     * If you need to have it increased use {@link #addComponent(boolean, int, ByteBuf)}., +        return addComponent(false, cIndex, buffer);, +    }, +, +    /**, +     * Add the given {@link ByteBuf} and increase the {@code writerIndex} if {@code increaseWriterIndex} is, +     * {@code true}., +     *, +     * {@link ByteBuf#release()} ownership of {@code buffer} is transfered to this {@link CompositeByteBuf}., +     * @param buffer the {@link ByteBuf} to add. {@link ByteBuf#release()} ownership is transfered to this, +     * {@link CompositeByteBuf}., +     */, +    public CompositeByteBuf addComponent(boolean increaseWriterIndex, ByteBuf buffer) {, +        addComponent0(increaseWriterIndex, components.size(), buffer);, +        consolidateIfNeeded();, +        return this;, +    }, +, +    /**, +     * Add the given {@link ByteBuf}s and increase the {@code writerIndex} if {@code increaseWriterIndex} is, +     * {@code true}., +     *, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects in {@code buffers} is transfered to this, +     * {@link CompositeByteBuf}., +     * @param buffers the {@link ByteBuf}s to add. {@link ByteBuf#release()} ownership of all {@link ByteBuf#release()}, +     * ownership of all {@link ByteBuf} objects is transfered to this {@link CompositeByteBuf}., +     */, +    public CompositeByteBuf addComponents(boolean increaseWriterIndex, ByteBuf... buffers) {, +        addComponents0(increaseWriterIndex, components.size(), buffers);]