[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +            // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +            if (e.hash == h && (equalsConstantTime(name, e.name) & equalsConstantTime(value, e.value)) != 0) {, +            if (e.hash == h && equalsConstantTime(name, e.name) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +            // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +            if (e.hash == h && (equalsConstantTime(name, e.name) & equalsConstantTime(value, e.value)) != 0) {, +            if (e.hash == h && equalsConstantTime(name, e.name) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HeaderField.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +        // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +        return (equalsConstantTime(name, other.name) & equalsConstantTime(value, other.value)) != 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +            // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +            if (e.hash == h && (equalsConstantTime(name, e.name) & equalsConstantTime(value, e.value)) != 0) {, +            if (e.hash == h && equalsConstantTime(name, e.name) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HeaderField.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +        // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +        return (equalsConstantTime(name, other.name) & equalsConstantTime(value, other.value)) != 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HpackUtil.java, +import io.netty.util.AsciiString;, +import io.netty.util.internal.ConstantTimeUtils;, +import io.netty.util.internal.PlatformDependent;, +, +     * Compare two {@link CharSequence} objects without leaking timing information., +     * <p>, +     * The {@code int} return type is intentional and is designed to allow cascading of constant time operations:, +     * <pre>, +     *     String s1 = "foo";, +     *     String s2 = "foo";, +     *     String s3 = "foo";, +     *     String s4 = "goo";, +     *     boolean equals = (equalsConstantTime(s1, s2) & equalsConstantTime(s3, s4)) != 0;, +     * </pre>, +     * @param s1 the first value., +     * @param s2 the second value., +     * @return {@code 0} if not equal. {@code 1} if equal., +    static int equalsConstantTime(CharSequence s1, CharSequence s2) {, +        if (s1 instanceof AsciiString && s2 instanceof AsciiString) {, +                return 0;, +            AsciiString s1Ascii = (AsciiString) s1;, +            AsciiString s2Ascii = (AsciiString) s2;, +            return PlatformDependent.equalsConstantTime(s1Ascii.array(), s1Ascii.arrayOffset(),, +                                                        s2Ascii.array(), s2Ascii.arrayOffset(), s1.length());, +, +        return ConstantTimeUtils.equalsConstantTime(s1, s2);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +            // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +            if (e.hash == h && (equalsConstantTime(name, e.name) & equalsConstantTime(value, e.value)) != 0) {, +            if (e.hash == h && equalsConstantTime(name, e.name) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HeaderField.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +        // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +        return (equalsConstantTime(name, other.name) & equalsConstantTime(value, other.value)) != 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HpackUtil.java, +import io.netty.util.AsciiString;, +import io.netty.util.internal.ConstantTimeUtils;, +import io.netty.util.internal.PlatformDependent;, +, +     * Compare two {@link CharSequence} objects without leaking timing information., +     * <p>, +     * The {@code int} return type is intentional and is designed to allow cascading of constant time operations:, +     * <pre>, +     *     String s1 = "foo";, +     *     String s2 = "foo";, +     *     String s3 = "foo";, +     *     String s4 = "goo";, +     *     boolean equals = (equalsConstantTime(s1, s2) & equalsConstantTime(s3, s4)) != 0;, +     * </pre>, +     * @param s1 the first value., +     * @param s2 the second value., +     * @return {@code 0} if not equal. {@code 1} if equal., +    static int equalsConstantTime(CharSequence s1, CharSequence s2) {, +        if (s1 instanceof AsciiString && s2 instanceof AsciiString) {, +                return 0;, +            AsciiString s1Ascii = (AsciiString) s1;, +            AsciiString s2Ascii = (AsciiString) s2;, +            return PlatformDependent.equalsConstantTime(s1Ascii.array(), s1Ascii.arrayOffset(),, +                                                        s2Ascii.array(), s2Ascii.arrayOffset(), s1.length());, +, +        return ConstantTimeUtils.equalsConstantTime(s1, s2);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/StaticTable.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +, +            if (equalsConstantTime(name, entry.name) == 0) {, +            if (equalsConstantTime(value, entry.value) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +            // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +            if (e.hash == h && (equalsConstantTime(name, e.name) & equalsConstantTime(value, e.value)) != 0) {, +            if (e.hash == h && equalsConstantTime(name, e.name) != 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/HeaderField.java, +import static io.netty.handler.codec.http2.internal.hpack.HpackUtil.equalsConstantTime;, +        // To avoid short circuit behavior a bitwise operator is used instead of a boolean operator., +        return (equalsConstantTime(name, other.name) & equalsConstantTime(value, other.value)) != 0;]