[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProvider.java, +import java.util.Collection;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +    static DnsServerAddressStreamProvider parseSilently() {, +        if (etcResolverFiles != null && etcResolverFiles.length == 0) {, +            throw new IllegalArgumentException("etcResolverFiles must either be null or non-empty");, +        Map<String, DnsServerAddresses> etcResolvConfMap = parse(checkNotNull(etcResolvConf, "etcResolvConf"));, +        domainToNameServerStreamMap = etcResolverFiles != null ? parse(etcResolverFiles) : etcResolvConfMap;, +, +        DnsServerAddresses defaultNameServerAddresses = etcResolvConfMap.get(etcResolvConf.getName());, +        if (defaultNameServerAddresses == null) {, +            Collection<DnsServerAddresses> values = etcResolvConfMap.values();, +            if (values.isEmpty()) {, +                throw new IllegalArgumentException(etcResolvConf + " didn't provide any name servers");, +            }, +            this.defaultNameServerAddresses = values.iterator().next();, +        } else {, +            this.defaultNameServerAddresses = defaultNameServerAddresses;, +        }, +, +                return defaultNameServerAddresses.stream();, +    private boolean mayOverrideNameServers() {, +        return !domainToNameServerStreamMap.isEmpty() || defaultNameServerAddresses.stream().next() != null;, +                        addresses.add(SocketUtils.socketAddress(maybeIP, port));, +                        if (!addresses.isEmpty()) {, +                if (!addresses.isEmpty()) {, +        putIfAbsent(domainToNameServerStreamMap, domainName, DnsServerAddresses.sequential(addresses));, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProvider.java, +import java.util.Collection;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +    static DnsServerAddressStreamProvider parseSilently() {, +        if (etcResolverFiles != null && etcResolverFiles.length == 0) {, +            throw new IllegalArgumentException("etcResolverFiles must either be null or non-empty");, +        Map<String, DnsServerAddresses> etcResolvConfMap = parse(checkNotNull(etcResolvConf, "etcResolvConf"));, +        domainToNameServerStreamMap = etcResolverFiles != null ? parse(etcResolverFiles) : etcResolvConfMap;, +, +        DnsServerAddresses defaultNameServerAddresses = etcResolvConfMap.get(etcResolvConf.getName());, +        if (defaultNameServerAddresses == null) {, +            Collection<DnsServerAddresses> values = etcResolvConfMap.values();, +            if (values.isEmpty()) {, +                throw new IllegalArgumentException(etcResolvConf + " didn't provide any name servers");, +            }, +            this.defaultNameServerAddresses = values.iterator().next();, +        } else {, +            this.defaultNameServerAddresses = defaultNameServerAddresses;, +        }, +, +                return defaultNameServerAddresses.stream();, +    private boolean mayOverrideNameServers() {, +        return !domainToNameServerStreamMap.isEmpty() || defaultNameServerAddresses.stream().next() != null;, +                        addresses.add(SocketUtils.socketAddress(maybeIP, port));, +                        if (!addresses.isEmpty()) {, +                if (!addresses.isEmpty()) {, +        putIfAbsent(domainToNameServerStreamMap, domainName, DnsServerAddresses.sequential(addresses));, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/UnixResolverDnsServerAddressStreamProviderTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.resolver.dns;, +, +import io.netty.util.CharsetUtil;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.TemporaryFolder;, +, +import java.io.File;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.net.InetSocketAddress;, +, +import static org.junit.Assert.assertEquals;, +, +public class UnixResolverDnsServerAddressStreamProviderTest {, +    @Rule, +    public final TemporaryFolder folder = new TemporaryFolder();, +, +    @Test, +    public void defaultLookupShouldReturnResultsIfOnlySingleFileSpecified() throws Exception {, +        File f = buildFile("domain linecorp.local\n" +, +                           "nameserver 127.0.0.2\n" +, +                           "nameserver 127.0.0.3\n");, +        UnixResolverDnsServerAddressStreamProvider p =, +                new UnixResolverDnsServerAddressStreamProvider(f, null);, +, +        DnsServerAddressStream stream = p.nameServerAddressStream("somehost");, +        assertHostNameEquals("127.0.0.2", stream.next());, +        assertHostNameEquals("127.0.0.3", stream.next());]