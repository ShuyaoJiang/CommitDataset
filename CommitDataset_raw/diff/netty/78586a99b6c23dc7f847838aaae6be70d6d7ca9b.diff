[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        ensureNotSharable();, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        ensureNotSharable();, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +     * Throws {@link IllegalStateException} if {@link ChannelHandlerAdapter#isSharable()} returns {@code true}, +     */, +    protected void ensureNotSharable() {, +        if (isSharable()) {, +            throw new IllegalStateException("ChannelHandler " + getClass().getName() + " is not allowed to be shared");, +        }, +    }, +, +    /**, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        ensureNotSharable();, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +     * Throws {@link IllegalStateException} if {@link ChannelHandlerAdapter#isSharable()} returns {@code true}, +     */, +    protected void ensureNotSharable() {, +        if (isSharable()) {, +            throw new IllegalStateException("ChannelHandler " + getClass().getName() + " is not allowed to be shared");, +        }, +    }, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/CombinedChannelDuplexHandler.java, +    protected CombinedChannelDuplexHandler() {, +        ensureNotSharable();, +    }, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        ensureNotSharable();, +        ensureNotSharable();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        ensureNotSharable();, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +     * Throws {@link IllegalStateException} if {@link ChannelHandlerAdapter#isSharable()} returns {@code true}, +     */, +    protected void ensureNotSharable() {, +        if (isSharable()) {, +            throw new IllegalStateException("ChannelHandler " + getClass().getName() + " is not allowed to be shared");, +        }, +    }, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/CombinedChannelDuplexHandler.java, +    protected CombinedChannelDuplexHandler() {, +        ensureNotSharable();, +    }, +        ensureNotSharable();, +++ b/transport/src/test/java/io/netty/channel/CombinedChannelDuplexHandlerTest.java, +, +    @Test(expected = IllegalStateException.class), +    public void testNotSharable() {, +        new CombinedChannelDuplexHandler<ChannelInboundHandler, ChannelOutboundHandler>() {, +            @Override, +            public boolean isSharable() {, +                return true;, +            }, +        };, +    }]