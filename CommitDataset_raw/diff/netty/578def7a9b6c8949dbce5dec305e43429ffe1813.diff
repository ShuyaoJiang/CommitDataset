[+++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +                        sslHandshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +                        sslHandshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClientHandler.java, +        sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +                        sslHandshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClientHandler.java, +        sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatServerHandler.java, +        ChannelFuture handshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +                        sslHandshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClientHandler.java, +        sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatServerHandler.java, +        ChannelFuture handshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java, +import org.jboss.netty.channel.LifeCycleAwareChannelHandler;, +public class SslHandler extends FrameDecoder, +                        implements ChannelDownstreamHandler,, +                                   LifeCycleAwareChannelHandler {, +    private volatile ChannelHandlerContext ctx;, +    public ChannelFuture handshake() {, +        ChannelHandlerContext ctx = this.ctx;, +        Channel channel = ctx.getChannel();, +            wrapNonAppData(ctx, channel);, +     * @deprecated Use {@link #handshake()} instead., +     */, +    @Deprecated, +    public ChannelFuture handshake(@SuppressWarnings("unused") Channel channel) {, +        return handshake();, +    }, +, +    /**, +    public ChannelFuture close() {, +        ChannelHandlerContext ctx = this.ctx;, +        Channel channel = ctx.getChannel();, +    /**, +     * @deprecated Use {@link #close()} instead., +     */, +    @Deprecated, +    public ChannelFuture close(@SuppressWarnings("unused") Channel channel) {, +        return close();, +, +    public void beforeAdd(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +    }, +, +    public void afterAdd(ChannelHandlerContext ctx) throws Exception {, +        // Unused, +    }, +, +    public void beforeRemove(ChannelHandlerContext ctx) throws Exception {, +        // Unused, +    }, +, +    public void afterRemove(ChannelHandlerContext ctx) throws Exception {, +        // Unused, +    }, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +                        sslHandshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatClientHandler.java, +        sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/example/securechat/SecureChatServerHandler.java, +        ChannelFuture handshakeFuture = sslHandler.handshake();, +++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java, +import org.jboss.netty.channel.LifeCycleAwareChannelHandler;, +public class SslHandler extends FrameDecoder, +                        implements ChannelDownstreamHandler,, +                                   LifeCycleAwareChannelHandler {, +    private volatile ChannelHandlerContext ctx;, +    public ChannelFuture handshake() {, +        ChannelHandlerContext ctx = this.ctx;, +        Channel channel = ctx.getChannel();, +            wrapNonAppData(ctx, channel);, +     * @deprecated Use {@link #handshake()} instead., +     */, +    @Deprecated, +    public ChannelFuture handshake(@SuppressWarnings("unused") Channel channel) {, +        return handshake();, +    }, +, +    /**, +    public ChannelFuture close() {, +        ChannelHandlerContext ctx = this.ctx;, +        Channel channel = ctx.getChannel();, +    /**, +     * @deprecated Use {@link #close()} instead., +     */, +    @Deprecated, +    public ChannelFuture close(@SuppressWarnings("unused") Channel channel) {, +        return close();, +, +    public void beforeAdd(ChannelHandlerContext ctx) throws Exception {, +        this.ctx = ctx;, +    }, +, +    public void afterAdd(ChannelHandlerContext ctx) throws Exception {]