[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        // call retain as it will be release after is written, +        decoder.writeInbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        // call retain as it will be release after is written, +        decoder.writeInbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        // call retain here as it will call release after its written to the channel, +        encoder.writeOutbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        // call retain as it will be release after is written, +        decoder.writeInbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        // call retain here as it will call release after its written to the channel, +        encoder.writeOutbound(in.retain());, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        // call retain as it will be release after is written, +        decoder.writeInbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        // call retain here as it will call release after its written to the channel, +        encoder.writeOutbound(in.retain());, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +++ b/codec/src/test/java/io/netty/handler/codec/compression/SnappyFramedEncoderTest.java, +        channel.writeOutbound(in.copy());, +        channel.writeOutbound(in.copy());, +        in.release();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        // call retain as it will be release after is written, +        decoder.writeInbound(in.retain());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        // call retain here as it will call release after its written to the channel, +        encoder.writeOutbound(in.retain());, +++ b/codec/src/test/java/io/netty/handler/codec/compression/JZlibTest.java, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +        chEncoder.writeOutbound(data.copy());, +++ b/codec/src/test/java/io/netty/handler/codec/compression/SnappyFramedEncoderTest.java, +        channel.writeOutbound(in.copy());, +        channel.writeOutbound(in.copy());, +        in.release();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketBufReleaseTest.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.testsuite.transport.socket;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import org.junit.Test;, +, +import java.util.Random;, +import java.util.concurrent.CountDownLatch;, +, +import static org.junit.Assert.assertEquals;, +, +public class SocketBufReleaseTest extends AbstractSocketTest {, +, +    @Test, +    public void testBufRelease() throws Throwable {, +        run();, +    }, +, +    public void testBufRelease(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        BufWriterHandler serverHandler = new BufWriterHandler();, +        BufWriterHandler clientHandler = new BufWriterHandler();, +, +        sb.childHandler(serverHandler);, +        cb.handler(clientHandler);, +, +        Channel sc = sb.bind().sync().channel();, +        Channel cc = cb.connect().sync().channel();, +, +        sc.close().sync();, +        cc.close().sync();, +        serverHandler.check();]