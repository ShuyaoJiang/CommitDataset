[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.DefaultEventExecutorGroup;, +import io.netty.channel.EventExecutorGroup;, +import io.netty.channel.socket.SocketChannel;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +    private static EventExecutorGroup group;, +, +    @BeforeClass, +    public static void createGroup() {, +        group = new DefaultEventExecutorGroup(2);, +    }, +, +    @AfterClass, +    public static void destroyGroup() {, +        group.shutdown();, +    }, +, +    @Test(timeout = 30000), +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false);, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridge() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBridge(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true);, +    }, +, +    @Test(timeout = 30000), +        testSimpleEcho0(sb, cb, 32, false);, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridgedBoundedBuffer() throws Throwable {, +        run();, +    }, +    public void testSimpleEchoWithBridgedBoundedBuffer(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, 32, true);, +    }, +, +    private static void testSimpleEcho0(, +            ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize, boolean bridge) throws Throwable {, +, +        final EchoHandler sh = new EchoHandler(maxInboundBufferSize);, +        final EchoHandler ch = new EchoHandler(maxInboundBufferSize);, +, +        if (bridge) {, +            sb.childHandler(new ChannelInitializer<SocketChannel>() {, +                @Override, +                protected void initChannel(SocketChannel c) throws Exception {, +                    c.pipeline().addLast(group, sh);, +                }, +            });, +            cb.handler(new ChannelInitializer<SocketChannel>() {, +                @Override, +                protected void initChannel(SocketChannel c) throws Exception {, +                    c.pipeline().addLast(group, ch);, +                }, +            });, +        } else {, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.DefaultEventExecutorGroup;, +import io.netty.channel.EventExecutorGroup;, +import io.netty.channel.socket.SocketChannel;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +    private static EventExecutorGroup group;, +, +    @BeforeClass, +    public static void createGroup() {, +        group = new DefaultEventExecutorGroup(2);, +    }, +, +    @AfterClass, +    public static void destroyGroup() {, +        group.shutdown();, +    }, +, +    @Test(timeout = 30000), +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false);, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridge() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBridge(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true);, +    }, +, +    @Test(timeout = 30000), +        testSimpleEcho0(sb, cb, 32, false);, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridgedBoundedBuffer() throws Throwable {, +        run();, +    }, +    public void testSimpleEchoWithBridgedBoundedBuffer(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, 32, true);, +    }]