[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +            return value < 'A' || value > 'Z';, +            final int index;, +                index = name.forEachByte(HTTP2_NAME_VALIDATOR_PROCESSOR);, +            } catch (Http2Exception e) {, +                return;, +            } catch (Throwable t) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, t,, +                        "unexpected error. invalid header name [%s]", name));, +                return;, +            }, +, +            if (index != -1) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, "invalid header name [%s]", name));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +            return value < 'A' || value > 'Z';, +            final int index;, +                index = name.forEachByte(HTTP2_NAME_VALIDATOR_PROCESSOR);, +            } catch (Http2Exception e) {, +                return;, +            } catch (Throwable t) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, t,, +                        "unexpected error. invalid header name [%s]", name));, +                return;, +            }, +, +            if (index != -1) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, "invalid header name [%s]", name));, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersTest.java, +    @Test(expected = Http2Exception.class), +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +            return value < 'A' || value > 'Z';, +            final int index;, +                index = name.forEachByte(HTTP2_NAME_VALIDATOR_PROCESSOR);, +            } catch (Http2Exception e) {, +                return;, +            } catch (Throwable t) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, t,, +                        "unexpected error. invalid header name [%s]", name));, +                return;, +            }, +, +            if (index != -1) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, "invalid header name [%s]", name));, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersTest.java, +    @Test(expected = Http2Exception.class), +++ b/example/src/main/java/io/netty/example/http2/Http2ExampleUtil.java, +    public static final String UPGRADE_RESPONSE_HEADER = "http-to-http2-upgrade";, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +            return value < 'A' || value > 'Z';, +            final int index;, +                index = name.forEachByte(HTTP2_NAME_VALIDATOR_PROCESSOR);, +            } catch (Http2Exception e) {, +                return;, +            } catch (Throwable t) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, t,, +                        "unexpected error. invalid header name [%s]", name));, +                return;, +            }, +, +            if (index != -1) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, "invalid header name [%s]", name));, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersTest.java, +    @Test(expected = Http2Exception.class), +++ b/example/src/main/java/io/netty/example/http2/Http2ExampleUtil.java, +    public static final String UPGRADE_RESPONSE_HEADER = "http-to-http2-upgrade";, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import io.netty.handler.codec.http.HttpScheme;, +import io.netty.handler.codec.http2.HttpConversionUtil;, +import io.netty.util.AsciiString;, +            HttpScheme scheme = SSL ? HttpScheme.HTTPS : HttpScheme.HTTP;, +            AsciiString hostName = new AsciiString(HOST + ':' + PORT);, +                request.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), scheme.name());, +                responseHandler.put(streamId, channel.writeAndFlush(request), channel.newPromise());, +                request.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), scheme.name());, +                responseHandler.put(streamId, channel.writeAndFlush(request), channel.newPromise());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +            return value < 'A' || value > 'Z';, +            final int index;, +                index = name.forEachByte(HTTP2_NAME_VALIDATOR_PROCESSOR);, +            } catch (Http2Exception e) {, +                return;, +            } catch (Throwable t) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, t,, +                        "unexpected error. invalid header name [%s]", name));, +                return;, +            }, +, +            if (index != -1) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR, "invalid header name [%s]", name));]