[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.handler.codec.http2.Http2Stream.State;, +    static State activeState(int streamId, State initialState, boolean isLocal, boolean halfClosed), +            throws Http2Exception {, +        switch (initialState) {, +        case IDLE:, +            return halfClosed ? isLocal ? HALF_CLOSED_LOCAL : HALF_CLOSED_REMOTE : OPEN;, +        case RESERVED_LOCAL:, +            return HALF_CLOSED_REMOTE;, +        case RESERVED_REMOTE:, +            return HALF_CLOSED_LOCAL;, +        default:, +            throw streamError(streamId, PROTOCOL_ERROR, "Attempting to open a stream in an invalid state: ", +                    + initialState);, +        }, +    }, +, +    void notifyHalfClosed(Http2Stream stream) {, +        for (int i = 0; i < listeners.size(); i++) {, +            try {, +                listeners.get(i).onStreamHalfClosed(stream);, +            } catch (RuntimeException e) {, +                logger.error("Caught RuntimeException from listener onStreamHalfClosed.", e);, +            }, +        }, +    }, +, +    void notifyClosed(Http2Stream stream) {, +        for (int i = 0; i < listeners.size(); i++) {, +            try {, +                listeners.get(i).onStreamClosed(stream);, +            } catch (RuntimeException e) {, +                logger.error("Caught RuntimeException from listener onStreamClosed.", e);, +            }, +        }, +    }, +, +        private State state;, +        DefaultStream(int id, State state) {, +            this.state = state;, +                newParent = createdBy().createIdleStream(parentStreamId);, +            state = activeState(id, state, isLocal(), halfClosed);, +            activate();, +            if (halfClosed) {, +                notifyHalfClosed(this);, +            }, +            return this;, +        void activate() {, +            super(CONNECTION_STREAM_ID, IDLE);, +        private DefaultStream createStream(int streamId, State state) throws Http2Exception {, +            DefaultStream stream = new DefaultStream(streamId, state);, +        public DefaultStream createIdleStream(int streamId) throws Http2Exception {, +            return createStream(streamId, IDLE);, +        }, +, +        @Override, +        public DefaultStream createStream(int streamId, boolean halfClosed) throws Http2Exception {, +            DefaultStream stream = createStream(streamId, activeState(streamId, IDLE, isLocal(), halfClosed));, +            stream.activate();, +            if (halfClosed) {, +                notifyHalfClosed(stream);, +            }, +            return stream;, +        }, +, +        @Override, +            DefaultStream stream = new DefaultStream(streamId, isLocal() ? RESERVED_LOCAL : RESERVED_REMOTE);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.handler.codec.http2.Http2Stream.State;, +    static State activeState(int streamId, State initialState, boolean isLocal, boolean halfClosed), +            throws Http2Exception {, +        switch (initialState) {, +        case IDLE:, +            return halfClosed ? isLocal ? HALF_CLOSED_LOCAL : HALF_CLOSED_REMOTE : OPEN;, +        case RESERVED_LOCAL:, +            return HALF_CLOSED_REMOTE;, +        case RESERVED_REMOTE:, +            return HALF_CLOSED_LOCAL;, +        default:, +            throw streamError(streamId, PROTOCOL_ERROR, "Attempting to open a stream in an invalid state: ", +                    + initialState);, +        }, +    }, +, +    void notifyHalfClosed(Http2Stream stream) {, +        for (int i = 0; i < listeners.size(); i++) {, +            try {, +                listeners.get(i).onStreamHalfClosed(stream);, +            } catch (RuntimeException e) {, +                logger.error("Caught RuntimeException from listener onStreamHalfClosed.", e);, +            }, +        }, +    }, +, +    void notifyClosed(Http2Stream stream) {, +        for (int i = 0; i < listeners.size(); i++) {, +            try {, +                listeners.get(i).onStreamClosed(stream);, +            } catch (RuntimeException e) {, +                logger.error("Caught RuntimeException from listener onStreamClosed.", e);]