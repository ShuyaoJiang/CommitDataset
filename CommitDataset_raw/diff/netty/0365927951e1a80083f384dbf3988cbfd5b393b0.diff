[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java, +    private CountDownLatch requestLatch;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameRoundtripTest.java, +    private CountDownLatch requestLatch;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/InboundHttp2ToHttpAdapterTest.java, +    private CountDownLatch serverLatch;, +    private CountDownLatch clientLatch;, +    private CountDownLatch settingsLatch;, +    }, +    @After, +    public void teardown() throws Exception {, +        cleanupCapturedRequests();, +        cleanupCapturedResponses();, +        if (clientChannel != null) {, +            clientChannel.close().sync();, +            clientChannel = null;, +        }, +        if (serverChannel != null) {, +            serverChannel.close().sync();, +            serverChannel = null;, +        }, +        Future<?> serverGroup = sb.group().shutdownGracefully(0, 0, MILLISECONDS);, +        Future<?> serverChildGroup = sb.childGroup().shutdownGracefully(0, 0, MILLISECONDS);, +        Future<?> clientGroup = cb.group().shutdownGracefully(0, 0, MILLISECONDS);, +        serverGroup.sync();, +        serverChildGroup.sync();, +        clientGroup.sync();, +        clientDelegator = null;, +        serverDelegator = null;, +        serverConnectedChannel = null;, +    }, +, +    @Test, +    public void clientRequestSingleHeaderNoDataFrames() throws Exception {, +        boostrapEnv(1, 1, 1);, +        final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +                "/some/path/resource2", true);, +        try {, +            HttpHeaders httpHeaders = request.headers();, +            httpHeaders.set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), "https");, +            httpHeaders.set(HttpConversionUtil.ExtensionHeaderNames.AUTHORITY.text(), "example.org");, +            httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), 3);, +            httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, 0);, +            final Http2Headers http2Headers = new DefaultHttp2Headers().method(new AsciiString("GET"))., +                    scheme(new AsciiString("https")).authority(new AsciiString("example.org")), +                    .path(new AsciiString("/some/path/resource2"));, +            runInChannel(clientChannel, new Http2Runnable() {, +                @Override, +                public void run() {, +                    frameWriter.writeHeaders(ctxClient(), 3, http2Headers, 0, true, newPromiseClient());, +                    ctxClient().flush();, +                }, +            });, +            awaitRequests();, +            ArgumentCaptor<FullHttpMessage> requestCaptor = ArgumentCaptor.forClass(FullHttpMessage.class);, +            verify(serverListener).messageReceived(requestCaptor.capture());, +            capturedRequests = requestCaptor.getAllValues();, +            assertEquals(request, capturedRequests.get(0));, +        } finally {, +            request.release();, +        }, +    }, +, +    @Test, +    public void clientRequestSingleHeaderNonAsciiShouldThrow() throws Exception {, +        boostrapEnv(1, 1, 1);, +        final Http2Headers http2Headers = new DefaultHttp2Headers(), +                .method(new AsciiString("GET")), +                .scheme(new AsciiString("https")), +                .authority(new AsciiString("example.org")), +                .path(new AsciiString("/some/path/resource2")), +                .add(new AsciiString("çã".getBytes(CharsetUtil.UTF_8)),, +                        new AsciiString("Ãã".getBytes(CharsetUtil.UTF_8)));, +        runInChannel(clientChannel, new Http2Runnable() {, +            @Override, +            public void run() {, +                frameWriter.writeHeaders(ctxClient(), 3, http2Headers, 0, true, newPromiseClient());, +                ctxClient().flush();, +            }, +        });, +        awaitRequests();, +        assertTrue(isStreamError(serverException));, +    }, +, +    @Test, +    public void clientRequestOneDataFrame() throws Exception {, +        boostrapEnv(1, 1, 1);, +        final String text = "hello world";, +        final ByteBuf content = Unpooled.copiedBuffer(text.getBytes());, +        final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +                "/some/path/resource2", content, true);, +        try {, +            HttpHeaders httpHeaders = request.headers();, +            httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(), 3);, +            httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, text.length());, +            final Http2Headers http2Headers = new DefaultHttp2Headers().method(new AsciiString("GET")).path(, +                    new AsciiString("/some/path/resource2"));, +            runInChannel(clientChannel, new Http2Runnable() {, +                @Override, +                public void run() {]