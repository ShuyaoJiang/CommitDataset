[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +    /**, +     * Create a new instance which will try to detect the types to encode out of the type parameter, +     * of the class., +     */, +    /**, +     * Create a new instance., +     *, +     * @param outboundMessageType   The type of messages to encode, +     */, +    /**, +     * Returns {@code true} if and only if the specified message can be encoded by this codec., +     *, +     * @param msg the message, +     */, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +    /**, +     * Create a new instance which will try to detect the types to encode out of the type parameter, +     * of the class., +     */, +    /**, +     * Create a new instance., +     *, +     * @param outboundMessageType   The type of messages to encode, +     */, +    /**, +     * Returns {@code true} if and only if the specified message can be encoded by this codec., +     *, +     * @param msg the message, +     */, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +    /**, +     * Create a new instance which will try to detect the types to encode out of the type parameter, +     * of the class., +     */, +    /**, +     * Create a new instance., +     *, +     * @param outboundMessageType   The type of messages to encode, +     */, +    /**, +     * Returns {@code true} if and only if the specified message can be encoded by this codec., +     *, +     * @param msg the message, +     */, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +import io.netty.channel.ChannelOutboundHandler;, +import io.netty.channel.ChannelPipeline;, +    /**, +     * @see {@link #MessageToByteEncoder(boolean)} with {@code true} as boolean parameter., +     */, +    /**, +     * @see {@link #MessageToByteEncoder(Class, boolean)} with {@code true} as boolean value., +     */, +    /**, +     * Create a new instance which will try to detect the types to match out of the type parameter of the class., +     *, +     * @param preferDirect          {@code true} if a direct {@link ByteBuf} should be tried to be used as target for, +     *                              the encoded messages. If {@code false} is used it will allocate a heap, +     *                              {@link ByteBuf}, which is backed by an byte array., +     */, +    /**, +     * Create a new instance, +     *, +     * @param outboundMessageType   The tpye of messages to match, +     * @param preferDirect          {@code true} if a direct {@link ByteBuf} should be tried to be used as target for, +     *                              the encoded messages. If {@code false} is used it will allocate a heap, +     *                              {@link ByteBuf}, which is backed by an byte array., +     */, +    /**, +     * Returns {@code true} if the given message should be handled. If {@code false} it will be passed to the next, +     * {@link ChannelOutboundHandler} in the {@link ChannelPipeline}., +     */, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +    /**, +     * Create a new instance which will try to detect the types to encode out of the type parameter, +     * of the class., +     */, +    /**, +     * Create a new instance., +     *, +     * @param outboundMessageType   The type of messages to encode, +     */, +    /**, +     * Returns {@code true} if and only if the specified message can be encoded by this codec., +     *, +     * @param msg the message, +     */, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToByteEncoder.java, +import io.netty.channel.ChannelOutboundHandler;, +import io.netty.channel.ChannelPipeline;, +    /**, +     * @see {@link #MessageToByteEncoder(boolean)} with {@code true} as boolean parameter., +     */, +    /**, +     * @see {@link #MessageToByteEncoder(Class, boolean)} with {@code true} as boolean value., +     */]