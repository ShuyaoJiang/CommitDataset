[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +import io.netty.buffer.Freeable;, +    private final DefaultChannelHandlerContext tailCtx;, +, +    private static final TailHandler TAIL_HANDLER = new TailHandler();, +, +        tailCtx = new DefaultChannelHandlerContext(, +                this, null, null, null, generateName(TAIL_HANDLER), TAIL_HANDLER);, +                this, null, null, tailCtx, generateName(headHandler), headHandler);, +        tailCtx.prev = head;, +        tail = tailCtx;, +        if (head.next == tailCtx) {, +            newCtx.next = tailCtx;, +            tailCtx.prev = newCtx;, +        head.next = newCtx;, +            newTail = new DefaultChannelHandlerContext(this, group, null, null, name, handler);, +        DefaultChannelHandlerContext prev = oldTail.prev;, +        if (oldTail == tailCtx) {, +            // This is the first handler added, +            tailCtx.prev = newTail;, +            newTail.next = tailCtx;, +            prev.next = newTail;, +            newTail.prev = prev;, +        } else {, +            newTail.prev = oldTail;, +, +            prev.next = oldTail;, +            oldTail.prev = prev;, +        }, +, +            if (ctx == tailCtx) {, +                throw new NoSuchElementException();, +            }, +                if (tail == tailCtx) {, +        if (head.next == tailCtx) {, +            if (tail == tailCtx) {, +        tailCtx.prev = oldTail.prev;, +        oldTail.prev.next = tailCtx;, +, +            if (ctx == tailCtx) {, +                throw new NoSuchElementException();, +            }, +                if (tail == tailCtx) {, +        if (last == tailCtx || last == null) {, +, +            if (ctx == null || ctx == tailCtx) {, +    private static final class TailHandler extends ChannelInboundMessageHandlerAdapter<Freeable> {, +        public TailHandler() {, +            super(Freeable.class);, +        }, +, +        @Override, +        protected void messageReceived(ChannelHandlerContext ctx, Freeable msg) throws Exception {, +            if (logger.isWarnEnabled()) {, +                logger.warn("Freeable reached end-of-pipeline, call " + msg + ".free() to" +, +                        " guard against resource leakage!");, +            }, +            msg.free();, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +import io.netty.buffer.Freeable;, +    private final DefaultChannelHandlerContext tailCtx;, +, +    private static final TailHandler TAIL_HANDLER = new TailHandler();, +, +        tailCtx = new DefaultChannelHandlerContext(, +                this, null, null, null, generateName(TAIL_HANDLER), TAIL_HANDLER);, +                this, null, null, tailCtx, generateName(headHandler), headHandler);, +        tailCtx.prev = head;, +        tail = tailCtx;, +        if (head.next == tailCtx) {, +            newCtx.next = tailCtx;, +            tailCtx.prev = newCtx;, +        head.next = newCtx;, +            newTail = new DefaultChannelHandlerContext(this, group, null, null, name, handler);, +        DefaultChannelHandlerContext prev = oldTail.prev;, +        if (oldTail == tailCtx) {, +            // This is the first handler added, +            tailCtx.prev = newTail;, +            newTail.next = tailCtx;, +            prev.next = newTail;, +            newTail.prev = prev;, +        } else {, +            newTail.prev = oldTail;, +, +            prev.next = oldTail;, +            oldTail.prev = prev;, +        }, +, +            if (ctx == tailCtx) {, +                throw new NoSuchElementException();, +            }, +                if (tail == tailCtx) {, +        if (head.next == tailCtx) {, +            if (tail == tailCtx) {, +        tailCtx.prev = oldTail.prev;, +        oldTail.prev.next = tailCtx;, +]