[+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractSctpChannelSink.java, +import io.netty.channel.socket.ChannelRunnableWrapper;, +            ChannelRunnableWrapper wrapper = new ChannelRunnableWrapper(channel, task);, +            channel.worker.executeInIoThread(wrapper);, +            return wrapper;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractSctpChannelSink.java, +import io.netty.channel.socket.ChannelRunnableWrapper;, +            ChannelRunnableWrapper wrapper = new ChannelRunnableWrapper(channel, task);, +            channel.worker.executeInIoThread(wrapper);, +            return wrapper;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +import static io.netty.channel.Channels.fireChannelBound;, +import static io.netty.channel.Channels.fireChannelClosed;, +import static io.netty.channel.Channels.fireChannelConnected;, +import static io.netty.channel.Channels.fireChannelDisconnected;, +import static io.netty.channel.Channels.fireChannelInterestChanged;, +import static io.netty.channel.Channels.fireChannelUnbound;, +import static io.netty.channel.Channels.fireExceptionCaught;, +import static io.netty.channel.Channels.fireMessageReceived;, +import static io.netty.channel.Channels.fireWriteComplete;, +import static io.netty.channel.Channels.succeededFuture;, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.ReceiveBufferSizePredictor;, +import io.netty.channel.sctp.SctpSendBufferPool.SendBuffer;, +import io.netty.channel.socket.Worker;, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +import io.netty.util.internal.DeadLockProofWorker;, +import io.netty.util.internal.QueueFactory;, +    public void executeInIoThread(Runnable task) {, +        if (Thread.currentThread() == thread) {, +            boolean added = eventQueue.offer(task);, +            , +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractSctpChannelSink.java, +import io.netty.channel.socket.ChannelRunnableWrapper;, +            ChannelRunnableWrapper wrapper = new ChannelRunnableWrapper(channel, task);, +            channel.worker.executeInIoThread(wrapper);, +            return wrapper;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +import static io.netty.channel.Channels.fireChannelBound;, +import static io.netty.channel.Channels.fireChannelClosed;, +import static io.netty.channel.Channels.fireChannelConnected;, +import static io.netty.channel.Channels.fireChannelDisconnected;, +import static io.netty.channel.Channels.fireChannelInterestChanged;, +import static io.netty.channel.Channels.fireChannelUnbound;, +import static io.netty.channel.Channels.fireExceptionCaught;, +import static io.netty.channel.Channels.fireMessageReceived;, +import static io.netty.channel.Channels.fireWriteComplete;, +import static io.netty.channel.Channels.succeededFuture;, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.ReceiveBufferSizePredictor;, +import io.netty.channel.sctp.SctpSendBufferPool.SendBuffer;, +import io.netty.channel.socket.Worker;, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +import io.netty.util.internal.DeadLockProofWorker;, +import io.netty.util.internal.QueueFactory;, +    public void executeInIoThread(Runnable task) {, +        if (Thread.currentThread() == thread) {, +            boolean added = eventQueue.offer(task);, +            , +++ b/transport/src/main/java/io/netty/channel/socket/Worker.java, +    void executeInIoThread(Runnable task);, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractSctpChannelSink.java, +import io.netty.channel.socket.ChannelRunnableWrapper;, +            ChannelRunnableWrapper wrapper = new ChannelRunnableWrapper(channel, task);, +            channel.worker.executeInIoThread(wrapper);, +            return wrapper;, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpWorker.java, +import static io.netty.channel.Channels.fireChannelBound;, +import static io.netty.channel.Channels.fireChannelClosed;, +import static io.netty.channel.Channels.fireChannelConnected;, +import static io.netty.channel.Channels.fireChannelDisconnected;, +import static io.netty.channel.Channels.fireChannelInterestChanged;, +import static io.netty.channel.Channels.fireChannelUnbound;, +import static io.netty.channel.Channels.fireExceptionCaught;, +import static io.netty.channel.Channels.fireMessageReceived;, +import static io.netty.channel.Channels.fireWriteComplete;, +import static io.netty.channel.Channels.succeededFuture;, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.ReceiveBufferSizePredictor;, +import io.netty.channel.sctp.SctpSendBufferPool.SendBuffer;, +import io.netty.channel.socket.Worker;, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;]