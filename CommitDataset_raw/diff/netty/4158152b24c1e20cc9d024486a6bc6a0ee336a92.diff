[+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +                fireExceptionCaught(ctx, cause);, +                fireExceptionCaughtLater(ctx, cause);, +                            fireExceptionCaughtLater(ctx, t);, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +                fireExceptionCaught(ctx, cause);, +                fireExceptionCaughtLater(ctx, cause);, +                            fireExceptionCaughtLater(ctx, t);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        Channels.fireExceptionCaughtLater(ctx, EXCEPTION);, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +                fireExceptionCaught(ctx, cause);, +                fireExceptionCaughtLater(ctx, cause);, +                            fireExceptionCaughtLater(ctx, t);, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, +        Channels.fireExceptionCaughtLater(ctx, EXCEPTION);, +++ b/transport/src/main/java/io/netty/channel/Channels.java, +    /**, +     * Sends a {@code "exceptionCaught"} event to the, +     * {@link ChannelUpstreamHandler} which is placed in the closest upstream, +     * from the handler associated with the specified, +     * {@link ChannelHandlerContext} once the io-thread runs again., +     */, +    public static ChannelFuture fireExceptionCaughtLater(final ChannelHandlerContext ctx, final Throwable cause) {, +        return ctx.getPipeline().execute(new Runnable() {, +, +            @Override, +            public void run() {, +                fireExceptionCaught(ctx, cause);, +            }, +        });, +    }]