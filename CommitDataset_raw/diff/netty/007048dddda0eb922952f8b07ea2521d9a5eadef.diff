[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRawRecord;, +import io.netty.handler.codec.dns.DnsRecord;, +import static io.netty.util.internal.ObjectUtil.checkNonEmpty;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.ObjectUtil.checkPositive;, +import static io.netty.util.internal.ObjectUtil.checkPositiveOrZero;, +    private InetAddress loopbackAddress() {, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getByName(...) does., +            promise.setSuccess(loopbackAddress());, +            return;, +        }, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getAllByName(...) does., +            promise.setSuccess(Collections.singletonList(loopbackAddress()));, +            return;, +        }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRawRecord;, +import io.netty.handler.codec.dns.DnsRecord;, +import static io.netty.util.internal.ObjectUtil.checkNonEmpty;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.ObjectUtil.checkPositive;, +import static io.netty.util.internal.ObjectUtil.checkPositiveOrZero;, +    private InetAddress loopbackAddress() {, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getByName(...) does., +            promise.setSuccess(loopbackAddress());, +            return;, +        }, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getAllByName(...) does., +            promise.setSuccess(Collections.singletonList(loopbackAddress()));, +            return;, +        }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import io.netty.util.internal.SocketUtils;, +    @Test(timeout = 5000), +    public void testNonCachedResolveEmptyHostName() throws Exception {, +        testNonCachedResolveEmptyHostName("");, +    }, +, +    @Test(timeout = 5000), +    public void testNonCachedResolveNullHostName() throws Exception {, +        testNonCachedResolveEmptyHostName(null);, +    }, +, +    public void testNonCachedResolveEmptyHostName(String inetHost) throws Exception {, +        DnsNameResolver resolver = newNonCachedResolver(InternetProtocolFamily.IPv4).build();, +        try {, +            InetAddress addr = resolver.resolve(inetHost).syncUninterruptibly().getNow();, +            assertEquals(SocketUtils.addressByName(inetHost), addr);, +        } finally {, +            resolver.close();, +        }, +    }, +, +    @Test(timeout = 5000), +    public void testNonCachedResolveAllEmptyHostName() throws Exception {, +        testNonCachedResolveAllEmptyHostName("");, +    }, +, +    @Test(timeout = 5000), +    public void testNonCachedResolveAllNullHostName() throws Exception {, +        testNonCachedResolveAllEmptyHostName(null);, +    }, +, +    private static void testNonCachedResolveAllEmptyHostName(String inetHost) throws UnknownHostException {, +        DnsNameResolver resolver = newNonCachedResolver(InternetProtocolFamily.IPv4).build();, +        try {, +            List<InetAddress> addrs = resolver.resolveAll(inetHost).syncUninterruptibly().getNow();, +            assertEquals(Arrays.asList(, +                    SocketUtils.allAddressesByName(inetHost)), addrs);, +        } finally {, +            resolver.close();, +        }, +    }, +, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.handler.codec.dns.DnsRawRecord;, +import io.netty.handler.codec.dns.DnsRecord;, +import static io.netty.util.internal.ObjectUtil.checkNonEmpty;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.ObjectUtil.checkPositive;, +import static io.netty.util.internal.ObjectUtil.checkPositiveOrZero;, +    private InetAddress loopbackAddress() {, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getByName(...) does., +            promise.setSuccess(loopbackAddress());, +            return;, +        }, +        if (inetHost == null || inetHost.isEmpty()) {, +            // If an empty hostname is used we should use "localhost", just like InetAddress.getAllByName(...) does., +            promise.setSuccess(Collections.singletonList(loopbackAddress()));, +            return;, +        }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import io.netty.util.internal.SocketUtils;, +    @Test(timeout = 5000)]