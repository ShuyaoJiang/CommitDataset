[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    private final int bufferMaxCapacity;, +    protected AbstractByteBufAllocator(int bufferMaxCapacity) {, +        this(bufferMaxCapacity, false);, +    protected AbstractByteBufAllocator(int bufferMaxCapacity, boolean directByDefault) {, +        if (bufferMaxCapacity <= 0) {, +            throw new IllegalArgumentException("bufferMaxCapacity: " + bufferMaxCapacity + " (expected: 1+)");, +        }, +        this.bufferMaxCapacity = bufferMaxCapacity;, +    public int bufferMaxCapacity() {, +        return bufferMaxCapacity;, +    }, +, +    @Override, +        return heapBuffer(256, bufferMaxCapacity());, +        return heapBuffer(initialCapacity, bufferMaxCapacity());, +        validate(initialCapacity, maxCapacity);, +        return directBuffer(256, bufferMaxCapacity());, +        return directBuffer(initialCapacity, bufferMaxCapacity());, +        validate(initialCapacity, maxCapacity);, +    @Override, +    public CompositeByteBuf compositeBuffer() {, +        if (directByDefault) {, +            return compositeDirectBuffer();, +        }, +        return compositeHeapBuffer();, +    }, +, +    @Override, +    public CompositeByteBuf compositeBuffer(int maxNumComponents) {, +        if (directByDefault) {, +            return compositeDirectBuffer(maxNumComponents);, +        }, +        return compositeHeapBuffer(maxNumComponents);, +    }, +, +    @Override, +    public CompositeByteBuf compositeHeapBuffer() {, +        return compositeHeapBuffer(16);, +    }, +, +    @Override, +    public CompositeByteBuf compositeHeapBuffer(int maxNumComponents) {, +        return new DefaultCompositeByteBuf(this, false, maxNumComponents);, +    }, +, +    @Override, +    public CompositeByteBuf compositeDirectBuffer() {, +        return compositeDirectBuffer(16);, +    }, +, +    @Override, +    public CompositeByteBuf compositeDirectBuffer(int maxNumComponents) {, +        return new DefaultCompositeByteBuf(this, true, maxNumComponents);, +    }, +, +    private void validate(int initialCapacity, int maxCapacity) {, +        if (maxCapacity > bufferMaxCapacity()) {, +            throw new IllegalArgumentException(, +                    "maxCapacity: " + maxCapacity + " (expected: not greater than " + bufferMaxCapacity());, +        }, +        if (initialCapacity > maxCapacity) {, +            throw new IllegalArgumentException(String.format(, +                    "initialCapacity: %d (expected: not greater than maxCapacity(%d)",, +                    initialCapacity, maxCapacity));, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    private final int bufferMaxCapacity;, +    protected AbstractByteBufAllocator(int bufferMaxCapacity) {, +        this(bufferMaxCapacity, false);, +    protected AbstractByteBufAllocator(int bufferMaxCapacity, boolean directByDefault) {, +        if (bufferMaxCapacity <= 0) {, +            throw new IllegalArgumentException("bufferMaxCapacity: " + bufferMaxCapacity + " (expected: 1+)");, +        }, +        this.bufferMaxCapacity = bufferMaxCapacity;, +    public int bufferMaxCapacity() {, +        return bufferMaxCapacity;, +    }, +, +    @Override, +        return heapBuffer(256, bufferMaxCapacity());, +        return heapBuffer(initialCapacity, bufferMaxCapacity());, +        validate(initialCapacity, maxCapacity);, +        return directBuffer(256, bufferMaxCapacity());, +        return directBuffer(initialCapacity, bufferMaxCapacity());, +        validate(initialCapacity, maxCapacity);, +    @Override, +    public CompositeByteBuf compositeBuffer() {, +        if (directByDefault) {, +            return compositeDirectBuffer();, +        }, +        return compositeHeapBuffer();, +    }, +, +    @Override, +    public CompositeByteBuf compositeBuffer(int maxNumComponents) {, +        if (directByDefault) {, +            return compositeDirectBuffer(maxNumComponents);]