[+++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +import java.nio.channels.FileChannel;, +    public int getBytes(int index, FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.getBytes(index, out, position, length);, +    }, +, +    @Override, +    public int setBytes(int index, FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.setBytes(index, in, position, length);, +    }, +, +    @Override, +    public int readBytes(FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.readBytes(out, position, length);, +    }, +, +    @Override, +    public int writeBytes(FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.writeBytes(in, position, length);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +import java.nio.channels.FileChannel;, +    public int getBytes(int index, FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.getBytes(index, out, position, length);, +    }, +, +    @Override, +    public int setBytes(int index, FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.setBytes(index, in, position, length);, +    }, +, +    @Override, +    public int readBytes(FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.readBytes(out, position, length);, +    }, +, +    @Override, +    public int writeBytes(FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.writeBytes(in, position, length);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.java, +import java.nio.channels.FileChannel;, +    public int getBytes(int index, FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.getBytes(index, out, position, length);, +    }, +, +    @Override, +    public int setBytes(int index, FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.setBytes(index, in, position, length);, +    }, +, +    @Override, +    public int readBytes(FileChannel out, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.readBytes(out, position, length);, +    }, +, +    @Override, +    public int writeBytes(FileChannel in, long position, int length) throws IOException {, +        recordLeakNonRefCountingOperation(leak);, +        return super.writeBytes(in, position, length);, +    }, +, +    @Override]