[+++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private ByteBuf retain0(final int increment) {, +        int oldRef = refCntUpdater.getAndAdd(this, increment);, +        if (oldRef <= 0 || oldRef + increment < oldRef) {, +            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            refCntUpdater.getAndAdd(this, -increment);, +            throw new IllegalReferenceCountException(oldRef, increment);, +        int oldRef = refCntUpdater.getAndAdd(this, -decrement);, +        if (oldRef == decrement) {, +        } else if (oldRef < decrement || oldRef - decrement > oldRef) {, +            // Ensure we don't over-release, and avoid underflow., +            refCntUpdater.getAndAdd(this, decrement);, +            throw new IllegalReferenceCountException(oldRef, decrement);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private ByteBuf retain0(final int increment) {, +        int oldRef = refCntUpdater.getAndAdd(this, increment);, +        if (oldRef <= 0 || oldRef + increment < oldRef) {, +            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            refCntUpdater.getAndAdd(this, -increment);, +            throw new IllegalReferenceCountException(oldRef, increment);, +        int oldRef = refCntUpdater.getAndAdd(this, -decrement);, +        if (oldRef == decrement) {, +        } else if (oldRef < decrement || oldRef - decrement > oldRef) {, +            // Ensure we don't over-release, and avoid underflow., +            refCntUpdater.getAndAdd(this, decrement);, +            throw new IllegalReferenceCountException(oldRef, decrement);, +++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java, +        int oldRef = refCntUpdater.getAndAdd(this, increment);, +        if (oldRef <= 0 || oldRef + increment < oldRef) {, +            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            refCntUpdater.getAndAdd(this, -increment);, +            throw new IllegalReferenceCountException(oldRef, increment);, +        int oldRef = refCntUpdater.getAndAdd(this, -decrement);, +        if (oldRef == decrement) {, +        } else if (oldRef < decrement || oldRef - decrement > oldRef) {, +            // Ensure we don't over-release, and avoid underflow., +            refCntUpdater.getAndAdd(this, decrement);, +            throw new IllegalReferenceCountException(oldRef, decrement);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    private ByteBuf retain0(final int increment) {, +        int oldRef = refCntUpdater.getAndAdd(this, increment);, +        if (oldRef <= 0 || oldRef + increment < oldRef) {, +            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            refCntUpdater.getAndAdd(this, -increment);, +            throw new IllegalReferenceCountException(oldRef, increment);, +        int oldRef = refCntUpdater.getAndAdd(this, -decrement);, +        if (oldRef == decrement) {, +        } else if (oldRef < decrement || oldRef - decrement > oldRef) {, +            // Ensure we don't over-release, and avoid underflow., +            refCntUpdater.getAndAdd(this, decrement);, +            throw new IllegalReferenceCountException(oldRef, decrement);, +++ b/common/src/main/java/io/netty/util/AbstractReferenceCounted.java, +        int oldRef = refCntUpdater.getAndAdd(this, increment);, +        if (oldRef <= 0 || oldRef + increment < oldRef) {, +            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow., +            refCntUpdater.getAndAdd(this, -increment);, +            throw new IllegalReferenceCountException(oldRef, increment);, +        int oldRef = refCntUpdater.getAndAdd(this, -decrement);, +        if (oldRef == decrement) {, +        } else if (oldRef < decrement || oldRef - decrement > oldRef) {, +            // Ensure we don't over-release, and avoid underflow., +            refCntUpdater.getAndAdd(this, decrement);, +            throw new IllegalReferenceCountException(oldRef, decrement);, +++ b/microbench/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBufBenchmark.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.BenchmarkMode;, +import org.openjdk.jmh.annotations.GroupThreads;, +import org.openjdk.jmh.annotations.Mode;, +import org.openjdk.jmh.annotations.OutputTimeUnit;, +import org.openjdk.jmh.annotations.Param;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.Setup;, +import org.openjdk.jmh.annotations.State;, +import org.openjdk.jmh.annotations.TearDown;, +import org.openjdk.jmh.infra.Blackhole;, +, +import java.util.concurrent.TimeUnit;, +, +@State(Scope.Benchmark), +public class AbstractReferenceCountedByteBufBenchmark extends AbstractMicrobenchmark {, +, +    @Param({ "1", "10", "100", "1000", "10000" })]