[+++ b/codec/src/test/java/io/netty/handler/codec/compression/Bzip2DecoderTest.java, +import java.util.Arrays;, +    private static final byte[] DATA = { 0x42, 0x5A, 0x68, 0x37, 0x31, 0x41, 0x59, 0x26, 0x53,, +                                         0x59, 0x77, 0x7B, (byte) 0xCA, (byte) 0xC0, 0x00, 0x00,, +                                         0x00, 0x05, (byte) 0x80, 0x00, 0x01, 0x02, 0x00, 0x04,, +                                         0x20, 0x20, 0x00, 0x30, (byte) 0xCD, 0x34, 0x19, (byte) 0xA6,, +                                         (byte) 0x89, (byte) 0x99, (byte) 0xC5, (byte) 0xDC, (byte) 0x91,, +                                         0x4E, 0x14, 0x24, 0x1D, (byte) 0xDE, (byte) 0xF2, (byte) 0xB0, 0x00 };, +, +    private static final byte[] BYTES_LARGE = new byte[MAX_BLOCK_SIZE * BASE_BLOCK_SIZE + 256];, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[41] = (byte) 0xDD;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[25] = 0x70;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[25] = 0x2F;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[11] = 0x77;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[14] = (byte) 0xFF;, +    private static void testDecompression(final EmbeddedChannel channel, final byte[] data) throws Exception {, +        testDecompression(channel, BYTES_SMALL);, +        testDecompression(channel, BYTES_LARGE);, +++ b/codec/src/test/java/io/netty/handler/codec/compression/Bzip2DecoderTest.java, +import java.util.Arrays;, +    private static final byte[] DATA = { 0x42, 0x5A, 0x68, 0x37, 0x31, 0x41, 0x59, 0x26, 0x53,, +                                         0x59, 0x77, 0x7B, (byte) 0xCA, (byte) 0xC0, 0x00, 0x00,, +                                         0x00, 0x05, (byte) 0x80, 0x00, 0x01, 0x02, 0x00, 0x04,, +                                         0x20, 0x20, 0x00, 0x30, (byte) 0xCD, 0x34, 0x19, (byte) 0xA6,, +                                         (byte) 0x89, (byte) 0x99, (byte) 0xC5, (byte) 0xDC, (byte) 0x91,, +                                         0x4E, 0x14, 0x24, 0x1D, (byte) 0xDE, (byte) 0xF2, (byte) 0xB0, 0x00 };, +, +    private static final byte[] BYTES_LARGE = new byte[MAX_BLOCK_SIZE * BASE_BLOCK_SIZE + 256];, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[41] = (byte) 0xDD;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[25] = 0x70;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[25] = 0x2F;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[11] = 0x77;, +        final byte[] data = Arrays.copyOf(DATA, DATA.length);, +        data[14] = (byte) 0xFF;, +    private static void testDecompression(final EmbeddedChannel channel, final byte[] data) throws Exception {, +        testDecompression(channel, BYTES_SMALL);, +        testDecompression(channel, BYTES_LARGE);, +++ b/codec/src/test/java/io/netty/handler/codec/compression/Bzip2EncoderTest.java, +import org.junit.Before;, +    private static final byte[] BYTES_LARGE = new byte[MAX_BLOCK_SIZE * BASE_BLOCK_SIZE + 256];, +    private EmbeddedChannel channel;, +    @Before, +    public void initChannel() {, +        channel = new EmbeddedChannel(new Bzip2Encoder(randomBlockSize()));, +    private static void testCompression(final EmbeddedChannel channel, final byte[] data) throws Exception {, +        testCompression(channel, BYTES_SMALL);, +        testCompression(channel, BYTES_LARGE);, +        final byte[] data = BYTES_LARGE;, +        while (written + length < data.length) {, +            ByteBuf in = Unpooled.wrappedBuffer(data, written, length);, +        ByteBuf in = Unpooled.wrappedBuffer(data, written, data.length - written);, +        byte[] uncompressed = uncompress(channel, data.length);, +        assertArrayEquals(data, uncompressed);]