[+++ b/codec-haproxy/src/main/java/io/netty/handler/codec/haproxy/HAProxyMessageDecoder.java, +import io.netty.handler.codec.ProtocolDetectionResult;, +    private static final byte[] TEXT_PREFIX = {, +            (byte) 'P',, +            (byte) 'R',, +            (byte) 'O',, +            (byte) 'X',, +            (byte) 'Y',, +    };, +, +     * {@link ProtocolDetectionResult} for {@link HAProxyProtocolVersion#V1}., +     */, +    private static final ProtocolDetectionResult<HAProxyProtocolVersion> DETECTION_RESULT_V1 =, +            ProtocolDetectionResult.detected(HAProxyProtocolVersion.V1);, +, +    /**, +     * {@link ProtocolDetectionResult} for {@link HAProxyProtocolVersion#V2}., +     */, +    private static final ProtocolDetectionResult<HAProxyProtocolVersion> DETECTION_RESULT_V2 =, +            ProtocolDetectionResult.detected(HAProxyProtocolVersion.V2);, +, +    /**, +        return match(BINARY_PREFIX, buffer, idx) ? buffer.getByte(idx + BINARY_PREFIX_LENGTH) : 1;, +, +    /**, +     * Returns the {@link ProtocolDetectionResult} for the given {@link ByteBuf}., +     */, +    public static ProtocolDetectionResult<HAProxyProtocolVersion> detectProtocol(ByteBuf buffer) {, +        if (buffer.readableBytes() < 12) {, +            return ProtocolDetectionResult.needsMoreData();, +        }, +, +        int idx = buffer.readerIndex();, +, +        if (match(BINARY_PREFIX, buffer, idx)) {, +            return DETECTION_RESULT_V2;, +        }, +        if (match(TEXT_PREFIX, buffer, idx)) {, +            return DETECTION_RESULT_V1;, +        }, +        return ProtocolDetectionResult.invalid();, +    }, +, +    private static boolean match(byte[] prefix, ByteBuf buffer, int idx) {, +        for (int i = 0; i < prefix.length; i++) {, +            final byte b = buffer.getByte(idx + i);, +            if (b != prefix[i]) {, +                return false;, +            }, +        }, +        return true;, +    }, +++ b/codec-haproxy/src/main/java/io/netty/handler/codec/haproxy/HAProxyMessageDecoder.java, +import io.netty.handler.codec.ProtocolDetectionResult;, +    private static final byte[] TEXT_PREFIX = {, +            (byte) 'P',, +            (byte) 'R',, +            (byte) 'O',, +            (byte) 'X',, +            (byte) 'Y',, +    };, +, +     * {@link ProtocolDetectionResult} for {@link HAProxyProtocolVersion#V1}., +     */, +    private static final ProtocolDetectionResult<HAProxyProtocolVersion> DETECTION_RESULT_V1 =, +            ProtocolDetectionResult.detected(HAProxyProtocolVersion.V1);, +, +    /**, +     * {@link ProtocolDetectionResult} for {@link HAProxyProtocolVersion#V2}., +     */, +    private static final ProtocolDetectionResult<HAProxyProtocolVersion> DETECTION_RESULT_V2 =, +            ProtocolDetectionResult.detected(HAProxyProtocolVersion.V2);, +, +    /**, +        return match(BINARY_PREFIX, buffer, idx) ? buffer.getByte(idx + BINARY_PREFIX_LENGTH) : 1;, +, +    /**, +     * Returns the {@link ProtocolDetectionResult} for the given {@link ByteBuf}., +     */, +    public static ProtocolDetectionResult<HAProxyProtocolVersion> detectProtocol(ByteBuf buffer) {, +        if (buffer.readableBytes() < 12) {, +            return ProtocolDetectionResult.needsMoreData();, +        }, +, +        int idx = buffer.readerIndex();, +, +        if (match(BINARY_PREFIX, buffer, idx)) {, +            return DETECTION_RESULT_V2;, +        }, +        if (match(TEXT_PREFIX, buffer, idx)) {, +            return DETECTION_RESULT_V1;, +        }, +        return ProtocolDetectionResult.invalid();, +    }, +, +    private static boolean match(byte[] prefix, ByteBuf buffer, int idx) {, +        for (int i = 0; i < prefix.length; i++) {, +            final byte b = buffer.getByte(idx + i);, +            if (b != prefix[i]) {, +                return false;]