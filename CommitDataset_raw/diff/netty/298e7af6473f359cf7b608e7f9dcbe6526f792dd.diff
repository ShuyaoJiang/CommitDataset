[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    private volatile Runnable fireChannelWritabilityChangedTask;, +, +        incrementPendingOutboundBytes(size, false);, +                    decrementPendingOutboundBytes(pending, false);, +        incrementPendingOutboundBytes(size, true);, +    }, +, +    private void incrementPendingOutboundBytes(long size, boolean invokeLater) {, +            setUnwritable(invokeLater);, +        decrementPendingOutboundBytes(size, true);, +    }, +, +    private void decrementPendingOutboundBytes(long size, boolean invokeLater) {, +            setWritable(invokeLater);, +            decrementPendingOutboundBytes(size, false);, +            decrementPendingOutboundBytes(size, false);, +                    fireChannelWritabilityChanged(true);, +                    fireChannelWritabilityChanged(true);, +    private void setWritable(boolean invokeLater) {, +                    fireChannelWritabilityChanged(invokeLater);, +    private void setUnwritable(boolean invokeLater) {, +                    fireChannelWritabilityChanged(invokeLater);, +    private void fireChannelWritabilityChanged(boolean invokeLater) {, +        final ChannelPipeline pipeline = channel.pipeline();, +        if (invokeLater) {, +            Runnable task = fireChannelWritabilityChangedTask;, +            if (task == null) {, +                fireChannelWritabilityChangedTask = task = new Runnable() {, +                    @Override, +                    public void run() {, +                        pipeline.fireChannelWritabilityChanged();, +                    }, +                };, +            }, +            channel.eventLoop().execute(task);, +        } else {, +            pipeline.fireChannelWritabilityChanged();, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    private volatile Runnable fireChannelWritabilityChangedTask;, +, +        incrementPendingOutboundBytes(size, false);, +                    decrementPendingOutboundBytes(pending, false);, +        incrementPendingOutboundBytes(size, true);, +    }, +, +    private void incrementPendingOutboundBytes(long size, boolean invokeLater) {, +            setUnwritable(invokeLater);, +        decrementPendingOutboundBytes(size, true);, +    }, +, +    private void decrementPendingOutboundBytes(long size, boolean invokeLater) {, +            setWritable(invokeLater);, +            decrementPendingOutboundBytes(size, false);, +            decrementPendingOutboundBytes(size, false);, +                    fireChannelWritabilityChanged(true);, +                    fireChannelWritabilityChanged(true);, +    private void setWritable(boolean invokeLater) {, +                    fireChannelWritabilityChanged(invokeLater);, +    private void setUnwritable(boolean invokeLater) {, +                    fireChannelWritabilityChanged(invokeLater);, +    private void fireChannelWritabilityChanged(boolean invokeLater) {, +        final ChannelPipeline pipeline = channel.pipeline();, +        if (invokeLater) {, +            Runnable task = fireChannelWritabilityChangedTask;, +            if (task == null) {, +                fireChannelWritabilityChangedTask = task = new Runnable() {, +                    @Override, +                    public void run() {, +                        pipeline.fireChannelWritabilityChanged();, +                    }, +                };, +            }, +            channel.eventLoop().execute(task);, +        } else {, +            pipeline.fireChannelWritabilityChanged();, +        }, +    }, +, +++ b/transport/src/test/java/io/netty/channel/BaseChannelTest.java, +    void assertLog(String firstExpected, String... otherExpected) {, +        if (firstExpected.equals(actual)) {, +            return;, +        }, +        for (String e: otherExpected) {, +            if (e.equals(actual)) {, +                return;, +            }, +        }, +, +        // Let the comparison fail with the first expectation., +        assertEquals(firstExpected, actual);, +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    private volatile Runnable fireChannelWritabilityChangedTask;, +, +        incrementPendingOutboundBytes(size, false);, +                    decrementPendingOutboundBytes(pending, false);]