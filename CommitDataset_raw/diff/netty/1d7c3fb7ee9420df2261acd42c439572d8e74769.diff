[+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollDetectPeerCloseWithoutReadTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.epoll;, +, +import io.netty.channel.Channel;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.ServerChannel;, +import io.netty.channel.unix.tests.DetectPeerCloseWithoutReadTest;, +, +public class EpollDetectPeerCloseWithoutReadTest extends DetectPeerCloseWithoutReadTest {, +    @Override, +    protected EventLoopGroup newGroup() {, +        return new EpollEventLoopGroup(2);, +    }, +, +    @Override, +    protected Class<? extends ServerChannel> serverChannel() {, +        return EpollServerSocketChannel.class;, +    }, +, +    @Override, +    protected Class<? extends Channel> clientChannel() {, +        return EpollSocketChannel.class;, +    }, +}, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollDetectPeerCloseWithoutReadTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.epoll;, +, +import io.netty.channel.Channel;, +import io.netty.channel.EventLoopGroup;, +import io.netty.channel.ServerChannel;, +import io.netty.channel.unix.tests.DetectPeerCloseWithoutReadTest;, +, +public class EpollDetectPeerCloseWithoutReadTest extends DetectPeerCloseWithoutReadTest {, +    @Override, +    protected EventLoopGroup newGroup() {, +        return new EpollEventLoopGroup(2);, +    }, +, +    @Override, +    protected Class<? extends ServerChannel> serverChannel() {, +        return EpollServerSocketChannel.class;, +    }, +, +    @Override, +    protected Class<? extends Channel> clientChannel() {, +        return EpollSocketChannel.class;, +    }, +}, +++ b/transport-native-kqueue/src/main/c/netty_kqueue_native.c, +// Currently only macOS supports EVFILT_SOCK, and it is currently only available in internal APIs., +// To make compiling easier we redefine the values here if they are not present., +#ifdef __APPLE__, +#ifndef EVFILT_SOCK, +#define EVFILT_SOCK -13, +#endif /* EVFILT_SOCK */, +#ifndef NOTE_CONNRESET, +#define NOTE_CONNRESET 0x00000001, +#endif /* NOTE_CONNRESET */, +#ifndef NOTE_READCLOSED, +#define NOTE_READCLOSED 0x00000002, +#endif /* NOTE_READCLOSED */, +#ifndef NOTE_DISCONNECTED, +#define NOTE_DISCONNECTED 0x00001000, +#endif /* NOTE_DISCONNECTED */, +#else, +#ifndef EVFILT_SOCK, +#define EVFILT_SOCK 0 // Disabled, +#endif /* EVFILT_SOCK */, +#ifndef NOTE_CONNRESET, +#define NOTE_CONNRESET 0]