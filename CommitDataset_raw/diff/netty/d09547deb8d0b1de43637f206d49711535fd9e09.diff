[+++ b/transport-native-epoll/src/main/c/netty_unix_socket.c, +static void netty_unix_socket_setTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval));, +}, +, +static void netty_unix_socket_setTcpQuickAck(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval));, +}, +, +, +static jint netty_unix_socket_getTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +static jint netty_unix_socket_isTcpQuickAck(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +  { "setTcpDeferAccept", "(II)V", (void *) netty_unix_socket_setTcpDeferAccept },, +  { "setTcpQuickAck", "(II)V", (void *) netty_unix_socket_setTcpQuickAck },, +  { "getSoError", "(I)I", (void *) netty_unix_socket_getSoError },, +  { "getTcpDeferAccept", "(I)I", (void *) netty_unix_socket_getTcpDeferAccept },, +  { "isTcpQuickAck", "(I)I", (void *) netty_unix_socket_isTcpQuickAck }, +++ b/transport-native-epoll/src/main/c/netty_unix_socket.c, +static void netty_unix_socket_setTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval));, +}, +, +static void netty_unix_socket_setTcpQuickAck(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval));, +}, +, +, +static jint netty_unix_socket_getTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +static jint netty_unix_socket_isTcpQuickAck(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +  { "setTcpDeferAccept", "(II)V", (void *) netty_unix_socket_setTcpDeferAccept },, +  { "setTcpQuickAck", "(II)V", (void *) netty_unix_socket_setTcpQuickAck },, +  { "getSoError", "(I)I", (void *) netty_unix_socket_getSoError },, +  { "getTcpDeferAccept", "(I)I", (void *) netty_unix_socket_getTcpDeferAccept },, +  { "isTcpQuickAck", "(I)I", (void *) netty_unix_socket_isTcpQuickAck }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT = ChannelOption.valueOf(T, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Integer> TCP_QUICKACK = ChannelOption.valueOf(T, "TCP_QUICKACK");, +++ b/transport-native-epoll/src/main/c/netty_unix_socket.c, +static void netty_unix_socket_setTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval));, +}, +, +static void netty_unix_socket_setTcpQuickAck(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval));, +}, +, +, +static jint netty_unix_socket_getTcpDeferAccept(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +static jint netty_unix_socket_isTcpQuickAck(JNIEnv* env, jclass clazz, jint fd) {, +    int optval;, +    if (netty_unix_socket_getOption(env, fd, IPPROTO_TCP, TCP_QUICKACK, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +  { "setTcpDeferAccept", "(II)V", (void *) netty_unix_socket_setTcpDeferAccept },, +  { "setTcpQuickAck", "(II)V", (void *) netty_unix_socket_setTcpQuickAck },, +  { "getSoError", "(I)I", (void *) netty_unix_socket_getSoError },, +  { "getTcpDeferAccept", "(I)I", (void *) netty_unix_socket_getTcpDeferAccept },, +  { "isTcpQuickAck", "(I)I", (void *) netty_unix_socket_isTcpQuickAck }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Integer> TCP_DEFER_ACCEPT = ChannelOption.valueOf(T, "TCP_DEFER_ACCEPT");, +    public static final ChannelOption<Integer> TCP_QUICKACK = ChannelOption.valueOf(T, "TCP_QUICKACK");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java, +        return getOptions(super.getOptions(), EpollChannelOption.SO_REUSEPORT, EpollChannelOption.IP_FREEBIND,, +                EpollChannelOption.TCP_DEFER_ACCEPT);, +        if (option == EpollChannelOption.TCP_DEFER_ACCEPT) {]