[+++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop loop = new SelectorEventLoop();, +                    p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop loop = new SelectorEventLoop();, +                    p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop parentLoop = new SelectorEventLoop();, +        EventLoop childLoop = new SelectorEventLoop();, +             .parentOption(ChannelOption.SO_BACKLOG, 24), +             .childEventLoop(childLoop), +             .childOption(ChannelOption.TCP_NODELAY, true), +                     p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop loop = new SelectorEventLoop();, +                    p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop parentLoop = new SelectorEventLoop();, +        EventLoop childLoop = new SelectorEventLoop();, +             .parentOption(ChannelOption.SO_BACKLOG, 24), +             .childEventLoop(childLoop), +             .childOption(ChannelOption.TCP_NODELAY, true), +                     p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/handler/src/main/java/io/netty/handler/logging/LogLevel.java, +package io.netty.handler.logging;, +, +import io.netty.logging.InternalLogLevel;, +, +public enum LogLevel {, +    DEBUG(InternalLogLevel.DEBUG),, +    INFO(InternalLogLevel.INFO),, +    WARN(InternalLogLevel.WARN),, +    ERROR(InternalLogLevel.ERROR);, +, +    private final InternalLogLevel internalLevel;, +, +    LogLevel(InternalLogLevel internalLevel) {, +        this.internalLevel = internalLevel;, +    }, +, +    InternalLogLevel toInternalLevel() {, +        return internalLevel;, +    }, +}, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop loop = new SelectorEventLoop();, +                    p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.handler.logging.LogLevel;, +        EventLoop parentLoop = new SelectorEventLoop();, +        EventLoop childLoop = new SelectorEventLoop();, +             .parentOption(ChannelOption.SO_BACKLOG, 24), +             .childEventLoop(childLoop), +             .childOption(ChannelOption.TCP_NODELAY, true), +                     p.addLast("logger", new LoggingHandler(LogLevel.INFO));, +++ b/handler/src/main/java/io/netty/handler/logging/LogLevel.java, +package io.netty.handler.logging;, +, +import io.netty.logging.InternalLogLevel;, +, +public enum LogLevel {, +    DEBUG(InternalLogLevel.DEBUG),, +    INFO(InternalLogLevel.INFO),, +    WARN(InternalLogLevel.WARN),, +    ERROR(InternalLogLevel.ERROR);, +, +    private final InternalLogLevel internalLevel;, +, +    LogLevel(InternalLogLevel internalLevel) {, +        this.internalLevel = internalLevel;, +    }, +, +    InternalLogLevel toInternalLevel() {, +        return internalLevel;, +    }, +}, +++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +    private static final LogLevel DEFAULT_LEVEL = LogLevel.DEBUG;, +    private final LogLevel level;, +    private final InternalLogLevel internalLevel;, +    public LoggingHandler(LogLevel level) {, +        internalLevel = level.toInternalLevel();, +    public LoggingHandler(Class<?> clazz, LogLevel level) {, +        internalLevel = level.toInternalLevel();, +    public LoggingHandler(String name) {, +        this(name, DEFAULT_LEVEL);, +    public LoggingHandler(String name, LogLevel level) {, +        internalLevel = level.toInternalLevel();, +    public LogLevel getLevel() {, +        if (getLogger().isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "REGISTERED"));, +        if (getLogger().isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "UNREGISTERED"));, +        if (getLogger().isEnabled(internalLevel)) {]