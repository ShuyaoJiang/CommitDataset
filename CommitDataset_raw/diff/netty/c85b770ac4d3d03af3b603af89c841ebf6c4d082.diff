[+++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtAcceptorChannel.java, +import com.barchart.udt.nio.SocketChannelUDT;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.udt.UdtChannel;, +import java.util.List;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(false);, +, +    @Override, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +    protected int doReadMessages(List<Object> buf) throws Exception {, +        final SocketChannelUDT channelUDT = javaChannel().accept();, +        if (channelUDT == null) {, +            return 0;, +        } else {, +            buf.add(newConnectorChannel(channelUDT));, +            return 1;, +        }, +    }, +, +    protected abstract UdtChannel newConnectorChannel(SocketChannelUDT channelUDT);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtAcceptorChannel.java, +import com.barchart.udt.nio.SocketChannelUDT;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.udt.UdtChannel;, +import java.util.List;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(false);, +, +    @Override, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +    protected int doReadMessages(List<Object> buf) throws Exception {, +        final SocketChannelUDT channelUDT = javaChannel().accept();, +        if (channelUDT == null) {, +            return 0;, +        } else {, +            buf.add(newConnectorChannel(channelUDT));, +            return 1;, +        }, +    }, +, +    protected abstract UdtChannel newConnectorChannel(SocketChannelUDT channelUDT);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteAcceptorChannel.java, +import io.netty.channel.udt.UdtChannel;, +    protected UdtChannel newConnectorChannel(SocketChannelUDT channelUDT) {, +        return new NioUdtByteConnectorChannel(this, channelUDT);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtAcceptorChannel.java, +import com.barchart.udt.nio.SocketChannelUDT;, +import io.netty.channel.ChannelMetadata;, +import io.netty.channel.udt.UdtChannel;, +import java.util.List;, +    private static final ChannelMetadata METADATA = new ChannelMetadata(false);, +, +    @Override, +    public ChannelMetadata metadata() {, +        return METADATA;, +    }, +, +    @Override, +    protected int doReadMessages(List<Object> buf) throws Exception {, +        final SocketChannelUDT channelUDT = javaChannel().accept();, +        if (channelUDT == null) {, +            return 0;, +        } else {, +            buf.add(newConnectorChannel(channelUDT));, +            return 1;, +        }, +    }, +, +    protected abstract UdtChannel newConnectorChannel(SocketChannelUDT channelUDT);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtByteAcceptorChannel.java, +import io.netty.channel.udt.UdtChannel;, +    protected UdtChannel newConnectorChannel(SocketChannelUDT channelUDT) {, +        return new NioUdtByteConnectorChannel(this, channelUDT);, +++ b/transport-udt/src/main/java/io/netty/channel/udt/nio/NioUdtMessageAcceptorChannel.java, +import io.netty.channel.udt.UdtChannel;, +    protected UdtChannel newConnectorChannel(SocketChannelUDT channelUDT) {, +        return new NioUdtMessageConnectorChannel(this, channelUDT);]