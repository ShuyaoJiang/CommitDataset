[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsRecord.java, +        this.name = appendTrailingDot(IDN.toASCII(checkNotNull(name, "name")));, +    private static String appendTrailingDot(String name) {, +        if (name.length() > 0 && name.charAt(name.length() - 1) != '.') {, +            return name + '.';, +        }, +        return name;, +    }, +, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/AbstractDnsRecord.java, +        this.name = appendTrailingDot(IDN.toASCII(checkNotNull(name, "name")));, +    private static String appendTrailingDot(String name) {, +        if (name.length() > 0 && name.charAt(name.length() - 1) != '.') {, +            return name + '.';, +        }, +        return name;, +    }, +, +++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/AbstractDnsRecordTest.java, +        Assert.assertEquals(name + '.', record.name());, +        Assert.assertEquals("xn--4ca.", record.name());, +    }, +, +    @Test, +    public void testValidDomainNameTrailingDot() {, +        String name = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.";, +        AbstractDnsRecord record = new AbstractDnsRecord(name, DnsRecordType.A, 0) { };, +        Assert.assertEquals(name, record.name());, +    }, +, +    @Test, +    public void testValidDomainNameUmlautTrailingDot() {, +        String name = "Ã¤.";, +        AbstractDnsRecord record = new AbstractDnsRecord(name, DnsRecordType.A, 0) { };, +        Assert.assertEquals("xn--4ca.", record.name());]