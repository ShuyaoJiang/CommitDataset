[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +    private long maxHeaderListSizeGoAway;, +        this.maxHeaderListSizeGoAway =, +                Http2CodecUtil.calculateMaxHeaderListSizeGoAway(hpackDecoder.getMaxHeaderListSize());, +        if (goAwayMax < max || goAwayMax < 0) {, +            throw connectionError(INTERNAL_ERROR, "Header List Size GO_AWAY %d must be non-negative and >= %d",, +                    goAwayMax, max);, +        }, +        hpackDecoder.setMaxHeaderListSize(max);, +        this.maxHeaderListSizeGoAway = goAwayMax;, +        return maxHeaderListSizeGoAway;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +    private long maxHeaderListSizeGoAway;, +        this.maxHeaderListSizeGoAway =, +                Http2CodecUtil.calculateMaxHeaderListSizeGoAway(hpackDecoder.getMaxHeaderListSize());, +        if (goAwayMax < max || goAwayMax < 0) {, +            throw connectionError(INTERNAL_ERROR, "Header List Size GO_AWAY %d must be non-negative and >= %d",, +                    goAwayMax, max);, +        }, +        hpackDecoder.setMaxHeaderListSize(max);, +        this.maxHeaderListSizeGoAway = goAwayMax;, +        return maxHeaderListSizeGoAway;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +        Http2HeadersSink sink = new Http2HeadersSink(headers, maxHeaderListSize);, +        decode(in, sink, validateHeaders);, +, +        // we have read all of our headers. See if we have exceeded our maxHeaderListSize. We must, +        // delay throwing until this point to prevent dynamic table corruption, +        if (sink.exceededMaxLength()) {, +            headerListSizeExceeded(streamId, maxHeaderListSize, true);, +        }, +    }, +, +    private void decode(ByteBuf in, Sink sink, boolean validateHeaders) throws Http2Exception {, +                                sink.appendToHeaderList(indexedHeader.name, indexedHeader.value);, +                    sink.appendToHeaderList(indexedHeader.name, indexedHeader.value);, +                            insertHeader(sink, name, EMPTY_STRING, indexType);, +                    insertHeader(sink, name, value, indexType);, +    /**, +     * @deprecated use {@link #setmaxHeaderListSize(long)}; {@code maxHeaderListSizeGoAway} is, +     *     ignored, +     */, +    @Deprecated, +        setMaxHeaderListSize(maxHeaderListSize);, +, +    public void setMaxHeaderListSize(long maxHeaderListSize) throws Http2Exception {, +    private void insertHeader(Sink sink, CharSequence name, CharSequence value,, +                              IndexType indexType) throws Http2Exception {, +        sink.appendToHeaderList(name, value);, +, +    private interface Sink {, +        void appendToHeaderList(CharSequence name, CharSequence value);, +    }, +, +    private static final class Http2HeadersSink implements Sink {, +        private final Http2Headers headers;, +        private final long maxHeaderListSize;, +        private long headersLength;, +        private boolean exceededMaxLength;, +, +        public Http2HeadersSink(Http2Headers headers, long maxHeaderListSize) {, +            this.headers = headers;, +            this.maxHeaderListSize = maxHeaderListSize;, +        }, +, +        @Override, +        public void appendToHeaderList(CharSequence name, CharSequence value) {, +            headersLength += HpackHeaderField.sizeOf(name, value);, +            if (headersLength > maxHeaderListSize) {, +                exceededMaxLength = true;, +            }, +            if (!exceededMaxLength) {, +                headers.add(name, value);, +            }, +        }, +, +        public boolean exceededMaxLength() {, +            return exceededMaxLength;, +        }, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +    private long maxHeaderListSizeGoAway;, +        this.maxHeaderListSizeGoAway =, +                Http2CodecUtil.calculateMaxHeaderListSizeGoAway(hpackDecoder.getMaxHeaderListSize());, +        if (goAwayMax < max || goAwayMax < 0) {, +            throw connectionError(INTERNAL_ERROR, "Header List Size GO_AWAY %d must be non-negative and >= %d",, +                    goAwayMax, max);, +        }, +        hpackDecoder.setMaxHeaderListSize(max);, +        this.maxHeaderListSizeGoAway = goAwayMax;, +        return maxHeaderListSizeGoAway;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +        Http2HeadersSink sink = new Http2HeadersSink(headers, maxHeaderListSize);, +        decode(in, sink, validateHeaders);, +, +        // we have read all of our headers. See if we have exceeded our maxHeaderListSize. We must, +        // delay throwing until this point to prevent dynamic table corruption]