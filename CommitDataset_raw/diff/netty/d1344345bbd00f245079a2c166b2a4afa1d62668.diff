[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.util.NetUtil;, +import java.net.InetAddress;, +        byte[] bytes = NetUtil.createByteArrayFromIpAddressString(unresolvedAddress.getHostName());, +        if (bytes == null) {, +        } else {, +            // The unresolvedAddress was created via a String that contains an ipaddress., +            promise.setSuccess(new InetSocketAddress(InetAddress.getByAddress(bytes), unresolvedAddress.getPort()));, +        }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.util.NetUtil;, +import java.net.InetAddress;, +        byte[] bytes = NetUtil.createByteArrayFromIpAddressString(unresolvedAddress.getHostName());, +        if (bytes == null) {, +        } else {, +            // The unresolvedAddress was created via a String that contains an ipaddress., +            promise.setSuccess(new InetSocketAddress(InetAddress.getByAddress(bytes), unresolvedAddress.getPort()));, +        }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +    @Test, +    public void testResolveIp() {, +        InetSocketAddress unresolved =, +                InetSocketAddress.createUnresolved("10.0.0.1", ThreadLocalRandom.current().nextInt(65536));, +, +        InetSocketAddress address = resolver.resolve(unresolved).syncUninterruptibly().getNow();, +, +        assertEquals("10.0.0.1", address.getHostName());, +    }, +]