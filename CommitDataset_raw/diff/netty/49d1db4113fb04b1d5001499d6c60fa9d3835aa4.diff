[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +                    // The promise should be notified before we call fireChannelInactive()., +                    promise.setSuccess();, +                    closePromise.setSuccess();, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +                    // The promise should be notified before we call fireChannelInactive()., +                    promise.setSuccess();, +                    closePromise.setSuccess();, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecTest.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    @Test, +    public void channelClosedWhenInactiveFired() {, +        LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream);, +        Http2StreamChannel childChannel = (Http2StreamChannel) inboundHandler.channel();, +, +        final AtomicBoolean channelOpen = new AtomicBoolean(false);, +        final AtomicBoolean channelActive = new AtomicBoolean(false);, +        assertTrue(childChannel.isOpen());, +        assertTrue(childChannel.isActive());, +, +        childChannel.pipeline().addLast(new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +                channelOpen.set(ctx.channel().isOpen());, +                channelActive.set(ctx.channel().isActive());, +, +                super.channelInactive(ctx);, +            }, +        });, +, +        childChannel.close().syncUninterruptibly();, +        assertFalse(channelOpen.get());, +        assertFalse(channelActive.get());, +    }, +]