[+++ b/NOTICE.txt, +, +This product contains a modified version of Roland Kuhn's ASL2, +AbstractNodeQueue, which is based on Dmitriy Vyukov's non-intrusive MPSC queue., +It can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.abstractnodequeue.txt (Public Domain), +  * HOMEPAGE:, +    * https://github.com/akka/akka/blob/wip-2.2.3-for-scala-2.11/akka-actor/src/main/java/akka/dispatch/AbstractNodeQueue.java, +++ b/NOTICE.txt, +, +This product contains a modified version of Roland Kuhn's ASL2, +AbstractNodeQueue, which is based on Dmitriy Vyukov's non-intrusive MPSC queue., +It can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.abstractnodequeue.txt (Public Domain), +  * HOMEPAGE:, +    * https://github.com/akka/akka/blob/wip-2.2.3-for-scala-2.11/akka-actor/src/main/java/akka/dispatch/AbstractNodeQueue.java, +++ b/common/src/main/java/io/netty/util/internal/MpscLinkedQueue.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +/**, + * Copyright (C) 2009-2013 Typesafe Inc. <http://www.typesafe.com>, + */, +package io.netty.util.internal;, +, +, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +import java.util.Queue;, +import java.util.concurrent.atomic.AtomicReference;, +, +/**, + * A lock-free concurrent {@link java.util.Queue} implementations for single-consumer multiple-producer pattern., + * <strong>It's important is is only used for this as otherwise it is not thread-safe.</strong>, + *, + * This implementation is based on:, + * <ul>, + *   <li><a href="https://github.com/akka/akka/blob/wip-2.2.3-for-scala-2.11/akka-actor/src/main/java/akka/dispatch/, + *   AbstractNodeQueue.java">AbstractNodeQueue</a></li>, + *   <li><a href="http://www.1024cores.net/home/lock-free-algorithms/, + *   queues/non-intrusive-mpsc-node-based-queue">Non intrusive MPSC node based queue</a></li>, + * </ul>, + *, + */, +@SuppressWarnings("serial"), +final class MpscLinkedQueue extends AtomicReference<OneTimeTask> implements Queue<Runnable> {, +    private static final long tailOffset;, +, +    static {, +        try {, +            tailOffset = PlatformDependent.objectFieldOffset(, +                    MpscLinkedQueue.class.getDeclaredField("tail"));, +        } catch (Throwable t) {, +            throw new ExceptionInInitializerError(t);, +        }, +    }, +, +    // Extends AtomicReference for the "head" slot (which is the one that is appended to), +    // since Unsafe does not expose XCHG operation intrinsically, +    @SuppressWarnings({ "unused", "FieldMayBeFinal" }), +    private volatile OneTimeTask tail;, +, +    MpscLinkedQueue() {, +        final OneTimeTask task = new OneTimeTaskAdapter(null);, +        tail = task;, +        set(task);, +    }, +, +    @Override, +    public boolean add(Runnable runnable) {, +        if (runnable instanceof OneTimeTask) {, +            OneTimeTask node = (OneTimeTask) runnable;, +            node.setNext(null);, +            getAndSet(node).setNext(node);, +        } else {, +            final OneTimeTask n = new OneTimeTaskAdapter(runnable);, +            getAndSet(n).setNext(n);, +        }, +        return true;, +    }, +, +    @Override, +    public boolean offer(Runnable runnable) {]