[+++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.util.ArrayList;, +    private final List<String> nextProtocols;, +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +        if (nextProtocols != null && nextProtocols.iterator().hasNext() && !JettyNpnSslEngine.isAvailable()) {, +            throw new SSLException("NPN/ALPN unsupported: " + nextProtocols);, +        List<String> nextProtoList = new ArrayList<String>();, +        for (String p: nextProtocols) {, +            if (p == null) {, +                break;, +            }, +            nextProtoList.add(p);, +        }, +        this.nextProtocols = Collections.unmodifiableList(nextProtoList);, +        return nextProtocols;, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.util.ArrayList;, +    private final List<String> nextProtocols;, +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +        if (nextProtocols != null && nextProtocols.iterator().hasNext() && !JettyNpnSslEngine.isAvailable()) {, +            throw new SSLException("NPN/ALPN unsupported: " + nextProtocols);, +        List<String> nextProtoList = new ArrayList<String>();, +        for (String p: nextProtocols) {, +            if (p == null) {, +                break;, +            }, +            nextProtoList.add(p);, +        }, +        this.nextProtocols = Collections.unmodifiableList(nextProtoList);, +        return nextProtocols;, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    private SSLEngine wrapEngine(SSLEngine engine) {, +        if (nextProtocols().isEmpty()) {, +            return engine;, +        } else {, +            return new JettyNpnSslEngine(engine, nextProtocols(), isServer());, +        }, +    }, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.util.ArrayList;, +    private final List<String> nextProtocols;, +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +        if (nextProtocols != null && nextProtocols.iterator().hasNext() && !JettyNpnSslEngine.isAvailable()) {, +            throw new SSLException("NPN/ALPN unsupported: " + nextProtocols);, +        List<String> nextProtoList = new ArrayList<String>();, +        for (String p: nextProtocols) {, +            if (p == null) {, +                break;, +            }, +            nextProtoList.add(p);, +        }, +        this.nextProtocols = Collections.unmodifiableList(nextProtoList);, +        return nextProtocols;, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +    private SSLEngine wrapEngine(SSLEngine engine) {, +        if (nextProtocols().isEmpty()) {, +            return engine;, +        } else {, +            return new JettyNpnSslEngine(engine, nextProtocols(), isServer());, +        }, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +++ b/example/src/main/java/io/netty/example/spdy/client/SpdyClient.java, +import java.util.Arrays;, +                Arrays.asList(SelectedProtocol.SPDY_3_1.protocolName(), SelectedProtocol.HTTP_1_1.protocolName()),, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslClientContext.java, +import java.util.ArrayList;, +    private final List<String> nextProtocols;, +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +        if (nextProtocols != null && nextProtocols.iterator().hasNext() && !JettyNpnSslEngine.isAvailable()) {, +            throw new SSLException("NPN/ALPN unsupported: " + nextProtocols);, +        List<String> nextProtoList = new ArrayList<String>();, +        for (String p: nextProtocols) {, +            if (p == null) {, +                break;, +            }]