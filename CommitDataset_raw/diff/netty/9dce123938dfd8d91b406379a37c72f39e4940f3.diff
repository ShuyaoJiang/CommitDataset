[+++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import static org.junit.Assert.*;, +import io.netty.buffer.MessageBuf;, +        ChunkedMessageInput<Object> input = new ChunkedMessageInput<Object>() {, +            public boolean readChunk(MessageBuf<Object> buffer) throws Exception {, +            ByteBuf buffer = ch.readOutbound();, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import static org.junit.Assert.*;, +import io.netty.buffer.MessageBuf;, +        ChunkedMessageInput<Object> input = new ChunkedMessageInput<Object>() {, +            public boolean readChunk(MessageBuf<Object> buffer) throws Exception {, +            ByteBuf buffer = ch.readOutbound();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import static org.junit.Assert.*;, +import io.netty.buffer.MessageBuf;, +        ChunkedMessageInput<Object> input = new ChunkedMessageInput<Object>() {, +            public boolean readChunk(MessageBuf<Object> buffer) throws Exception {, +            ByteBuf buffer = ch.readOutbound();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import static org.junit.Assert.*;, +import io.netty.buffer.MessageBuf;, +        ChunkedMessageInput<Object> input = new ChunkedMessageInput<Object>() {, +            public boolean readChunk(MessageBuf<Object> buffer) throws Exception {, +            ByteBuf buffer = ch.readOutbound();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +import io.netty.buffer.MessageBuf;, +    <T> MessageBuf<T> outboundMessageBuffer();, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedMessageInput.java, +import io.netty.buffer.MessageBuf;, +, +public interface ChunkedMessageInput<T> extends ChunkedInput<MessageBuf<T>> {, +++ b/handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java, +    @SuppressWarnings("unchecked"), +            return ((ChunkedMessageInput<Object>) chunks).readChunk(ctx.nextOutboundMessageBuffer());, +++ b/handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java, +import static org.junit.Assert.*;, +import io.netty.buffer.MessageBuf;, +        ChunkedMessageInput<Object> input = new ChunkedMessageInput<Object>() {, +            public boolean readChunk(MessageBuf<Object> buffer) throws Exception {, +            ByteBuf buffer = ch.readOutbound();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +import io.netty.buffer.MessageBuf;, +    public MessageBuf<Object> outboundMessageBuffer() {]