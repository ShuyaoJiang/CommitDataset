[+++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +    public int ensureWritable(int minWritableBytes, boolean force) {, +        return 1;, +    }, +, +    @Override, +    public ByteBuf ensureWritable(int minWritableBytes) {, +        throw new ReadOnlyBufferException();, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +    public int ensureWritable(int minWritableBytes, boolean force) {, +        return 1;, +    }, +, +    @Override, +    public ByteBuf ensureWritable(int minWritableBytes) {, +        throw new ReadOnlyBufferException();, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/AbstractPooledByteBufTest.java, +import org.junit.Test;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +    @Test, +    public void ensureWritableWithEnoughSpaceShouldNotThrow() {, +        ByteBuf buf = newBuffer(1, 10);, +        buf.ensureWritable(3);, +        assertThat(buf.writableBytes(), is(greaterThanOrEqualTo(3)));, +        buf.release();, +    }, +, +    @Test(expected = IndexOutOfBoundsException.class), +    public void ensureWritableWithNotEnoughSpaceShouldThrow() {, +        ByteBuf buf = newBuffer(1, 10);, +        try {, +            buf.ensureWritable(11);, +            fail();, +        } finally {, +            buf.release();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyByteBuf.java, +    public int ensureWritable(int minWritableBytes, boolean force) {, +        return 1;, +    }, +, +    @Override, +    public ByteBuf ensureWritable(int minWritableBytes) {, +        throw new ReadOnlyBufferException();, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/AbstractPooledByteBufTest.java, +import org.junit.Test;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +    @Test, +    public void ensureWritableWithEnoughSpaceShouldNotThrow() {, +        ByteBuf buf = newBuffer(1, 10);, +        buf.ensureWritable(3);, +        assertThat(buf.writableBytes(), is(greaterThanOrEqualTo(3)));, +        buf.release();, +    }, +, +    @Test(expected = IndexOutOfBoundsException.class), +    public void ensureWritableWithNotEnoughSpaceShouldThrow() {, +        ByteBuf buf = newBuffer(1, 10);, +        try {, +            buf.ensureWritable(11);, +            fail();, +        } finally {, +            buf.release();, +        }, +    }, +++ b/buffer/src/test/java/io/netty/buffer/ReadOnlyByteBufTest.java, +import java.nio.ReadOnlyBufferException;, +import static io.netty.buffer.ByteBufUtil.ensureWritableSuccess;, +import static io.netty.buffer.Unpooled.BIG_ENDIAN;, +import static io.netty.buffer.Unpooled.EMPTY_BUFFER;, +import static io.netty.buffer.Unpooled.LITTLE_ENDIAN;, +import static io.netty.buffer.Unpooled.buffer;, +import static io.netty.buffer.Unpooled.unmodifiableBuffer;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;]