[+++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +        Attribute<Unmarshaller> attr = ctx.channel().attr(UNMARSHALLER);, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +        Attribute<Unmarshaller> attr = ctx.channel().attr(UNMARSHALLER);, +++ b/handler/src/main/java/io/netty/handler/traffic/AbstractTrafficShapingHandler.java, +import io.netty.channel.Channel;, +            Channel channel = ctx.channel();, +            ChannelConfig config = channel.config();, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.read();, +        Channel channel = ctx.channel();, +        channel.attr(READ_SUSPENDED).set(false);, +        channel.config().setAutoRead(true);, +                Channel channel = ctx.channel();, +                ChannelConfig config = channel.config();, +                    channel.attr(READ_SUSPENDED).set(true);, +                    Attribute<Runnable> attr = channel.attr(REOPEN_TASK);, +        Boolean suspended = ctx.channel().attr(READ_SUSPENDED).get();, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +        Attribute<Unmarshaller> attr = ctx.channel().attr(UNMARSHALLER);, +++ b/handler/src/main/java/io/netty/handler/traffic/AbstractTrafficShapingHandler.java, +import io.netty.channel.Channel;, +            Channel channel = ctx.channel();, +            ChannelConfig config = channel.config();, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.read();, +        Channel channel = ctx.channel();, +        channel.attr(READ_SUSPENDED).set(false);, +        channel.config().setAutoRead(true);, +                Channel channel = ctx.channel();, +                ChannelConfig config = channel.config();, +                    channel.attr(READ_SUSPENDED).set(true);, +                    Attribute<Runnable> attr = channel.attr(REOPEN_TASK);, +        Boolean suspended = ctx.channel().attr(READ_SUSPENDED).get();, +++ b/handler/src/main/java/io/netty/handler/traffic/GlobalChannelTrafficShapingHandler.java, +                Channel channel = ctx.channel();, +                ChannelConfig config = channel.config();, +                    channel.attr(READ_SUSPENDED).set(true);, +                    Attribute<Runnable> attr = channel.attr(REOPEN_TASK);, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/ContextBoundUnmarshallerProvider.java, +        Attribute<Unmarshaller> attr = ctx.channel().attr(UNMARSHALLER);, +++ b/handler/src/main/java/io/netty/handler/traffic/AbstractTrafficShapingHandler.java, +import io.netty.channel.Channel;, +            Channel channel = ctx.channel();, +            ChannelConfig config = channel.config();, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.attr(READ_SUSPENDED).set(false);, +                channel.read();, +        Channel channel = ctx.channel();, +        channel.attr(READ_SUSPENDED).set(false);, +        channel.config().setAutoRead(true);, +                Channel channel = ctx.channel();, +                ChannelConfig config = channel.config();, +                    channel.attr(READ_SUSPENDED).set(true);, +                    Attribute<Runnable> attr = channel.attr(REOPEN_TASK);, +        Boolean suspended = ctx.channel().attr(READ_SUSPENDED).get();, +++ b/handler/src/main/java/io/netty/handler/traffic/GlobalChannelTrafficShapingHandler.java, +                Channel channel = ctx.channel();, +                ChannelConfig config = channel.config();, +                    channel.attr(READ_SUSPENDED).set(true);, +                    Attribute<Runnable> attr = channel.attr(REOPEN_TASK);, +++ b/transport/src/main/java/io/netty/channel/CombinedChannelDuplexHandler.java, +            return ctx.channel().attr(key);, +            return ctx.channel().hasAttr(key);]