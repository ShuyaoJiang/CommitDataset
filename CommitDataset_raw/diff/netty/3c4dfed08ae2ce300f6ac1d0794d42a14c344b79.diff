[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +    private enum WrapType {, +        NONE, DUP, SLICE,, +    }, +, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 4);, +    }, +, +    private void testSimpleSend(Bootstrap sb, Bootstrap cb, ByteBuf buf, boolean bindClient,, +                                final byte[] bytes, int count) throws Throwable {, +        for (WrapType type: WrapType.values()) {, +            testSimpleSend0(sb, cb, buf.retain(), bindClient, bytes, count, type);, +        }, +        assertTrue(buf.release());, +                                final byte[] bytes, int count, WrapType wrapType), +            if (wrapType == WrapType.DUP) {, +            } else if (wrapType == WrapType.SLICE) {, +                cc.write(new DatagramPacket(buf.retain().slice(), addr));, +            } else if (wrapType == WrapType.NONE) {, +                cc.write(new DatagramPacket(buf.retain(), addr));, +            } else {, +                throw new Exception("unknown wrap type: " + wrapType);, +            }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +    private enum WrapType {, +        NONE, DUP, SLICE,, +    }, +, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 4);, +    }, +, +    private void testSimpleSend(Bootstrap sb, Bootstrap cb, ByteBuf buf, boolean bindClient,, +                                final byte[] bytes, int count) throws Throwable {, +        for (WrapType type: WrapType.values()) {, +            testSimpleSend0(sb, cb, buf.retain(), bindClient, bytes, count, type);, +        }, +        assertTrue(buf.release());, +                                final byte[] bytes, int count, WrapType wrapType), +            if (wrapType == WrapType.DUP) {, +            } else if (wrapType == WrapType.SLICE) {, +                cc.write(new DatagramPacket(buf.retain().slice(), addr));, +            } else if (wrapType == WrapType.NONE) {, +                cc.write(new DatagramPacket(buf.retain(), addr));, +            } else {, +                throw new Exception("unknown wrap type: " + wrapType);, +            }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.channel.unix.UnixChannelUtil;, +            return UnixChannelUtil.isBufferCopyNeededForWrite(buf)? newDirectBuffer(buf): buf;, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +    private enum WrapType {, +        NONE, DUP, SLICE,, +    }, +, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.buffer().writeBytes(BYTES), true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, buf, true, BYTES, 1);, +        testSimpleSend(sb, cb, buf2, true, BYTES, 4);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 1);, +        testSimpleSend(sb, cb, Unpooled.directBuffer().writeBytes(BYTES), false, BYTES, 4);, +    }, +, +    private void testSimpleSend(Bootstrap sb, Bootstrap cb, ByteBuf buf, boolean bindClient,, +                                final byte[] bytes, int count) throws Throwable {, +        for (WrapType type: WrapType.values()) {, +            testSimpleSend0(sb, cb, buf.retain(), bindClient, bytes, count, type);, +        }, +        assertTrue(buf.release());, +                                final byte[] bytes, int count, WrapType wrapType), +            if (wrapType == WrapType.DUP) {, +            } else if (wrapType == WrapType.SLICE) {, +                cc.write(new DatagramPacket(buf.retain().slice(), addr));]