[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final boolean IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE = explicitTryReflectionSetAccessible0();, +, +                        // We always want to try using Unsafe as the access still works on java9 as well and, +                        // we need it for out native-transports and many optimizations., +                        Throwable cause = ReflectionUtil.trySetAccessible(unsafeField, false);, +                                    Throwable cause = ReflectionUtil.trySetAccessible(constructor, true);, +                        Throwable cause = ReflectionUtil.trySetAccessible(unalignedMethod, true);, +    private static boolean explicitTryReflectionSetAccessible0() {, +        // we disable reflective access, +        return SystemPropertyUtil.getBoolean("io.netty.tryReflectionSetAccessible", javaVersion() < 9);, +    }, +, +    static boolean isExplicitTryReflectionSetAccessible() {, +        return IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE;, +    }, +, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final boolean IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE = explicitTryReflectionSetAccessible0();, +, +                        // We always want to try using Unsafe as the access still works on java9 as well and, +                        // we need it for out native-transports and many optimizations., +                        Throwable cause = ReflectionUtil.trySetAccessible(unsafeField, false);, +                                    Throwable cause = ReflectionUtil.trySetAccessible(constructor, true);, +                        Throwable cause = ReflectionUtil.trySetAccessible(unalignedMethod, true);, +    private static boolean explicitTryReflectionSetAccessible0() {, +        // we disable reflective access, +        return SystemPropertyUtil.getBoolean("io.netty.tryReflectionSetAccessible", javaVersion() < 9);, +    }, +, +    static boolean isExplicitTryReflectionSetAccessible() {, +        return IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/ReflectionUtil.java, +    public static Throwable trySetAccessible(AccessibleObject object, boolean checkAccessible) {, +        if (checkAccessible && !PlatformDependent0.isExplicitTryReflectionSetAccessible()) {, +            return new UnsupportedOperationException("Reflective setAccessible(true) disabled");, +        }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final boolean IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE = explicitTryReflectionSetAccessible0();, +, +                        // We always want to try using Unsafe as the access still works on java9 as well and, +                        // we need it for out native-transports and many optimizations., +                        Throwable cause = ReflectionUtil.trySetAccessible(unsafeField, false);, +                                    Throwable cause = ReflectionUtil.trySetAccessible(constructor, true);, +                        Throwable cause = ReflectionUtil.trySetAccessible(unalignedMethod, true);, +    private static boolean explicitTryReflectionSetAccessible0() {, +        // we disable reflective access, +        return SystemPropertyUtil.getBoolean("io.netty.tryReflectionSetAccessible", javaVersion() < 9);, +    }, +, +    static boolean isExplicitTryReflectionSetAccessible() {, +        return IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/ReflectionUtil.java, +    public static Throwable trySetAccessible(AccessibleObject object, boolean checkAccessible) {, +        if (checkAccessible && !PlatformDependent0.isExplicitTryReflectionSetAccessible()) {, +            return new UnsupportedOperationException("Reflective setAccessible(true) disabled");, +        }, +++ b/common/src/test/java/io/netty/util/internal/logging/Log4J2LoggerTest.java, +                Assume.assumeThat(ReflectionUtil.trySetAccessible(field, true), CoreMatchers.nullValue());, +            Assume.assumeThat(ReflectionUtil.trySetAccessible(method, true), CoreMatchers.nullValue());, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor, true) == null);, +++ b/common/src/main/java/io/netty/util/internal/PlatformDependent0.java, +    private static final boolean IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE = explicitTryReflectionSetAccessible0();, +, +                        // We always want to try using Unsafe as the access still works on java9 as well and, +                        // we need it for out native-transports and many optimizations., +                        Throwable cause = ReflectionUtil.trySetAccessible(unsafeField, false);, +                                    Throwable cause = ReflectionUtil.trySetAccessible(constructor, true);, +                        Throwable cause = ReflectionUtil.trySetAccessible(unalignedMethod, true);, +    private static boolean explicitTryReflectionSetAccessible0() {, +        // we disable reflective access, +        return SystemPropertyUtil.getBoolean("io.netty.tryReflectionSetAccessible", javaVersion() < 9);, +    }, +, +    static boolean isExplicitTryReflectionSetAccessible() {, +        return IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/ReflectionUtil.java, +    public static Throwable trySetAccessible(AccessibleObject object, boolean checkAccessible) {, +        if (checkAccessible && !PlatformDependent0.isExplicitTryReflectionSetAccessible()) {, +            return new UnsupportedOperationException("Reflective setAccessible(true) disabled");]