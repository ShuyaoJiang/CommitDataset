[+++ b/common/src/main/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutor.java, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +, +        return runnable instanceof NonNotifyRunnable ?, +                task : new RunnableScheduledFutureTask<V>(this, runnable, task);, +    @Override, +    public void execute(Runnable command) {, +        super.schedule(new NonNotifyRunnable(command), 0, NANOSECONDS);, +    }, +, +, +    // This is a special wrapper which we will be used in execute(...) to wrap the submitted Runnable. This is needed as, +    // ScheduledThreadPoolExecutor.execute(...) will delegate to submit(...) which will then use decorateTask(...)., +    // The problem with this is that decorateTask(...) needs to ensure we only do our own decoration if we not call, +    // from execute(...) as otherwise we may end up creating an endless loop because DefaultPromise will call, +    // EventExecutor.execute(...) when notify the listeners of the promise., +    //, +    // See https://github.com/netty/netty/issues/6507, +    private static final class NonNotifyRunnable implements Runnable {, +, +        private final Runnable task;, +, +        NonNotifyRunnable(Runnable task) {, +            this.task = task;, +        }, +, +        @Override, +        public void run() {, +            task.run();, +        }, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutor.java, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +, +        return runnable instanceof NonNotifyRunnable ?, +                task : new RunnableScheduledFutureTask<V>(this, runnable, task);, +    @Override, +    public void execute(Runnable command) {, +        super.schedule(new NonNotifyRunnable(command), 0, NANOSECONDS);, +    }, +, +, +    // This is a special wrapper which we will be used in execute(...) to wrap the submitted Runnable. This is needed as, +    // ScheduledThreadPoolExecutor.execute(...) will delegate to submit(...) which will then use decorateTask(...)., +    // The problem with this is that decorateTask(...) needs to ensure we only do our own decoration if we not call, +    // from execute(...) as otherwise we may end up creating an endless loop because DefaultPromise will call, +    // EventExecutor.execute(...) when notify the listeners of the promise., +    //, +    // See https://github.com/netty/netty/issues/6507, +    private static final class NonNotifyRunnable implements Runnable {, +, +        private final Runnable task;, +, +        NonNotifyRunnable(Runnable task) {, +            this.task = task;, +        }, +, +        @Override, +        public void run() {, +            task.run();, +        }, +    }, +++ b/common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.concurrent;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +import java.util.concurrent.CountDownLatch;, +, +public class UnorderedThreadPoolEventExecutorTest {, +, +    // See https://github.com/netty/netty/issues/6507, +    @Test, +    public void testNotEndlessExecute() throws Exception {, +        UnorderedThreadPoolEventExecutor executor = new UnorderedThreadPoolEventExecutor(1);, +, +        try {, +            final CountDownLatch latch = new CountDownLatch(3);, +            Runnable task = new Runnable() {, +                @Override, +                public void run() {, +                    latch.countDown();, +                }, +            };]