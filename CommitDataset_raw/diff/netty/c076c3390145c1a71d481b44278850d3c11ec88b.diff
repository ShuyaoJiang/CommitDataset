[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.AsciiString;, +            !AsciiString.equalsIgnoreCase(HttpHeaders.Values.IDENTITY, contentEncoding)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.AsciiString;, +            !AsciiString.equalsIgnoreCase(HttpHeaders.Values.IDENTITY, contentEncoding)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        if (connection != null && AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection)) {, +            return !AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection);, +            return AsciiString.equalsIgnoreCase(KEEP_ALIVE_ENTITY, connection);, +        if (AsciiString.equalsIgnoreCase(CONTINUE_ENTITY, value)) {, +            if (AsciiString.equalsIgnoreCase(value, CHUNKED_ENTITY)) {, +     * @deprecated Use {@link AsciiString#equalsIgnoreCase(CharSequence, CharSequence)} instead., +    @Deprecated, +        return AsciiString.equalsIgnoreCase(name1, name2);, +    @Deprecated, +                if (AsciiString.equalsIgnoreCase(v, value)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.AsciiString;, +            !AsciiString.equalsIgnoreCase(HttpHeaders.Values.IDENTITY, contentEncoding)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        if (connection != null && AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection)) {, +            return !AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection);, +            return AsciiString.equalsIgnoreCase(KEEP_ALIVE_ENTITY, connection);, +        if (AsciiString.equalsIgnoreCase(CONTINUE_ENTITY, value)) {, +            if (AsciiString.equalsIgnoreCase(value, CHUNKED_ENTITY)) {, +     * @deprecated Use {@link AsciiString#equalsIgnoreCase(CharSequence, CharSequence)} instead., +    @Deprecated, +        return AsciiString.equalsIgnoreCase(name1, name2);, +    @Deprecated, +                if (AsciiString.equalsIgnoreCase(v, value)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.handler.codec.AsciiString;, +                    if (!AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.CONTENT_LENGTH) &&, +                        !AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.TRANSFER_ENCODING) &&, +                        !AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.TRAILER)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.AsciiString;, +            !AsciiString.equalsIgnoreCase(HttpHeaders.Values.IDENTITY, contentEncoding)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        if (connection != null && AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection)) {, +            return !AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection);, +            return AsciiString.equalsIgnoreCase(KEEP_ALIVE_ENTITY, connection);, +        if (AsciiString.equalsIgnoreCase(CONTINUE_ENTITY, value)) {, +            if (AsciiString.equalsIgnoreCase(value, CHUNKED_ENTITY)) {, +     * @deprecated Use {@link AsciiString#equalsIgnoreCase(CharSequence, CharSequence)} instead., +    @Deprecated, +        return AsciiString.equalsIgnoreCase(name1, name2);, +    @Deprecated, +                if (AsciiString.equalsIgnoreCase(v, value)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.handler.codec.AsciiString;, +                    if (!AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.CONTENT_LENGTH) &&, +                        !AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.TRANSFER_ENCODING) &&, +                        !AsciiString.equalsIgnoreCase(name, HttpHeaders.Names.TRAILER)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, +import io.netty.handler.codec.AsciiString;, +                    if (AsciiString.equalsIgnoreCase(v, HttpHeaders.Values.CHUNKED)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultLastHttpContent.java, +import io.netty.handler.codec.AsciiString;, +            if (AsciiString.equalsIgnoreCase(HttpHeaders.Names.CONTENT_LENGTH, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRANSFER_ENCODING, name) ||, +                    AsciiString.equalsIgnoreCase(HttpHeaders.Names.TRAILER, name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +import io.netty.handler.codec.AsciiString;, +            !AsciiString.equalsIgnoreCase(HttpHeaders.Values.IDENTITY, contentEncoding)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        if (connection != null && AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection)) {, +            return !AsciiString.equalsIgnoreCase(CLOSE_ENTITY, connection);, +            return AsciiString.equalsIgnoreCase(KEEP_ALIVE_ENTITY, connection);, +        if (AsciiString.equalsIgnoreCase(CONTINUE_ENTITY, value)) {, +            if (AsciiString.equalsIgnoreCase(value, CHUNKED_ENTITY)) {, +     * @deprecated Use {@link AsciiString#equalsIgnoreCase(CharSequence, CharSequence)} instead., +    @Deprecated, +        return AsciiString.equalsIgnoreCase(name1, name2);]