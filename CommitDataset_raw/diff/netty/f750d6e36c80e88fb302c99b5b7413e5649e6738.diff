[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.StringUtil.NEWLINE;, +import static io.netty.util.internal.StringUtil.isSurrogate;, +            } else if (isSurrogate(c)) {, +                if (!Character.isHighSurrogate(c)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected high (leading) surrogate at index " + i + " but got " + c);, +                }, +                final char c2;, +                try {, +                    // Surrogate Pair consumes 2 characters. Optimistically try to get the next character to avoid, +                    // duplicate bounds checking with charAt. If an IndexOutOfBoundsException is thrown we will, +                    // re-throw a more informative exception describing the problem., +                    c2 = seq.charAt(++i);, +                } catch (IndexOutOfBoundsException e) {, +                    throw new IllegalArgumentException("Underflow. " +, +                            "Expected low (trailing) surrogate at index " + i + " but no more characters found.", e);, +                }, +                if (!Character.isLowSurrogate(c2)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected low (trailing) surrogate at index " + i + " but got " + c2);, +                }, +                int codePoint = Character.toCodePoint(c, c2);, +                // See http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G2630., +                buffer._setByte(writerIndex++, (byte) (0xf0 | (codePoint >> 18)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | ((codePoint >> 12) & 0x3f)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | ((codePoint >> 6) & 0x3f)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | (codePoint & 0x3f)));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.StringUtil.NEWLINE;, +import static io.netty.util.internal.StringUtil.isSurrogate;, +            } else if (isSurrogate(c)) {, +                if (!Character.isHighSurrogate(c)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected high (leading) surrogate at index " + i + " but got " + c);, +                }, +                final char c2;, +                try {, +                    // Surrogate Pair consumes 2 characters. Optimistically try to get the next character to avoid, +                    // duplicate bounds checking with charAt. If an IndexOutOfBoundsException is thrown we will, +                    // re-throw a more informative exception describing the problem., +                    c2 = seq.charAt(++i);, +                } catch (IndexOutOfBoundsException e) {, +                    throw new IllegalArgumentException("Underflow. " +, +                            "Expected low (trailing) surrogate at index " + i + " but no more characters found.", e);, +                }, +                if (!Character.isLowSurrogate(c2)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected low (trailing) surrogate at index " + i + " but got " + c2);, +                }, +                int codePoint = Character.toCodePoint(c, c2);, +                // See http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G2630., +                buffer._setByte(writerIndex++, (byte) (0xf0 | (codePoint >> 18)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | ((codePoint >> 12) & 0x3f)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | ((codePoint >> 6) & 0x3f)));, +                buffer._setByte(writerIndex++, (byte) (0x80 | (codePoint & 0x3f)));, +++ b/buffer/src/test/java/io/netty/buffer/ByteBufUtilTest.java, +import java.util.Random;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +    public void testWriteUtf8Surrogates() {, +        // leading surrogate + trailing surrogate, +        String surrogateString = new StringBuilder(2), +                                .append('\uD800'), +                                .append('\uDC00'), +                                .toString();, +        ByteBuf buf = ReferenceCountUtil.releaseLater(Unpooled.buffer(16));, +        buf.writeBytes(surrogateString.getBytes(CharsetUtil.UTF_8));, +        ByteBuf buf2 = ReferenceCountUtil.releaseLater(Unpooled.buffer(16));, +        ByteBufUtil.writeUtf8(buf2, surrogateString);, +, +        Assert.assertEquals(buf, buf2);, +    }, +, +    @Test, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.StringUtil.NEWLINE;, +import static io.netty.util.internal.StringUtil.isSurrogate;, +            } else if (isSurrogate(c)) {, +                if (!Character.isHighSurrogate(c)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected high (leading) surrogate at index " + i + " but got " + c);, +                }, +                final char c2;, +                try {, +                    // Surrogate Pair consumes 2 characters. Optimistically try to get the next character to avoid, +                    // duplicate bounds checking with charAt. If an IndexOutOfBoundsException is thrown we will, +                    // re-throw a more informative exception describing the problem., +                    c2 = seq.charAt(++i);, +                } catch (IndexOutOfBoundsException e) {, +                    throw new IllegalArgumentException("Underflow. " +, +                            "Expected low (trailing) surrogate at index " + i + " but no more characters found.", e);, +                }, +                if (!Character.isLowSurrogate(c2)) {, +                    throw new IllegalArgumentException("Invalid encoding. " +, +                            "Expected low (trailing) surrogate at index " + i + " but got " + c2);]