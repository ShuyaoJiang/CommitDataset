[+++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBuilder;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.ChannelPipeline;, +        // Create the required event loop., +        try {, +            // Configure the client., +            ChannelBuilder b = new ChannelBuilder();, +            b.eventLoop(loop), +             .channel(new NioSocketChannel()), +             .option(ChannelOption.TCP_NODELAY, true), +             .remoteAddress(new InetSocketAddress(host, port)), +             .initializer(new ChannelInitializer() {, +                @Override, +                public void initChannel(Channel ch) throws Exception {, +                    ChannelPipeline p = ch.pipeline();, +                    p.addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +                    p.addLast("echoer", new EchoClientHandler(firstMessageSize));, +                }, +             });, +, +            // Start the client., +            ChannelFuture f = b.connect().sync();, +            f.channel().closeFuture().sync();, +        } finally {, +            // Shut down the event loop to terminate all threads., +    }, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBuilder;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.ChannelPipeline;, +        // Create the required event loop., +        try {, +            // Configure the client., +            ChannelBuilder b = new ChannelBuilder();, +            b.eventLoop(loop), +             .channel(new NioSocketChannel()), +             .option(ChannelOption.TCP_NODELAY, true), +             .remoteAddress(new InetSocketAddress(host, port)), +             .initializer(new ChannelInitializer() {, +                @Override, +                public void initChannel(Channel ch) throws Exception {, +                    ChannelPipeline p = ch.pipeline();, +                    p.addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +                    p.addLast("echoer", new EchoClientHandler(firstMessageSize));, +                }, +             });, +, +            // Start the client., +            ChannelFuture f = b.connect().sync();, +            f.channel().closeFuture().sync();, +        } finally {, +            // Shut down the event loop to terminate all threads., +    }, +++ b/example/src/main/java/io/netty/example/echo/EchoServer.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.ServerChannelBuilder;, +        // Create the required event loops., +        EventLoop parentLoop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        EventLoop childLoop = new MultithreadEventLoop(SelectorEventLoop.FACTORY);, +        try {, +            ServerChannelBuilder b = new ServerChannelBuilder();, +            b.parentEventLoop(parentLoop), +             .childEventLoop(childLoop), +             .parentChannel(new NioServerSocketChannel()), +             .childOption(ChannelOption.TCP_NODELAY, true), +             .localAddress(new InetSocketAddress(port)), +             .childInitializer(new ChannelInitializer() {, +                 public void initChannel(Channel ch) throws Exception {, +                     ChannelPipeline p = ch.pipeline();, +                     p.addLast("logger", new LoggingHandler(InternalLogLevel.INFO));, +                     p.addLast("echoer", new EchoServerHandler());, +            // Start the server., +            ChannelFuture f = b.bind().sync();, +, +            // Wait until the server socket is closed., +            f.channel().closeFuture().sync();, +        } finally {, +            // Shut down all event loops to terminate all threads., +            parentLoop.shutdown();, +            childLoop.shutdown();, +        }, +++ b/example/src/main/java/io/netty/example/echo/EchoClient.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelBuilder;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.ChannelPipeline;, +        // Create the required event loop.]