[+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java, + * <pre>, + * // An example that sends a ping message when there is no traffic, + * // (either inbound or outbound) for 30 seconds., + * ChannelPipeline p = ...;, + * Timer timer = new HashedWheelTimer();, + * p.addLast("timeout", new IdleStateHandler(timer, 30, 30, 0));, + * p.addLast("handler", new MyHandler());, + *, + * // Handler should handle the IdleStateEvent triggered by IdleStateHandler., + * public class MyHandler extends IdleStateAwareChannelHandler {, + *     public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {, + *         ctx.getChannel().write(new PingMessage());, + *     }, + * }, + *, + * // To shut down, call {@link #releaseExternalResources()} or {@link Timer#stop()}., + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java, + * <pre>, + * // An example that sends a ping message when there is no traffic, + * // (either inbound or outbound) for 30 seconds., + * ChannelPipeline p = ...;, + * Timer timer = new HashedWheelTimer();, + * p.addLast("timeout", new IdleStateHandler(timer, 30, 30, 0));, + * p.addLast("handler", new MyHandler());, + *, + * // Handler should handle the IdleStateEvent triggered by IdleStateHandler., + * public class MyHandler extends IdleStateAwareChannelHandler {, + *     public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {, + *         ctx.getChannel().write(new PingMessage());, + *     }, + * }, + *, + * // To shut down, call {@link #releaseExternalResources()} or {@link Timer#stop()}., + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/timeout/ReadTimeoutHandler.java, + * <pre>, + * // An example configuration that implements 30-second read timeout:, + * ChannelPipeline p = ...;, + * Timer timer = new HashedWheelTimer();, + * p.addLast("timeout", new ReadTimeoutHandler(timer, 30));, + * p.addLast("handler", new MyHandler());, + *, + * // To shut down, call {@link #releaseExternalResources()} or {@link Timer#stop()}., + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateAwareChannelUpstreamHandler.java, +    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java, + * <pre>, + * // An example that sends a ping message when there is no traffic, + * // (either inbound or outbound) for 30 seconds., + * ChannelPipeline p = ...;, + * Timer timer = new HashedWheelTimer();, + * p.addLast("timeout", new IdleStateHandler(timer, 30, 30, 0));, + * p.addLast("handler", new MyHandler());, + *, + * // Handler should handle the IdleStateEvent triggered by IdleStateHandler., + * public class MyHandler extends IdleStateAwareChannelHandler {, + *     public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {, + *         ctx.getChannel().write(new PingMessage());, + *     }, + * }, + *, + * // To shut down, call {@link #releaseExternalResources()} or {@link Timer#stop()}., + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/timeout/ReadTimeoutHandler.java, + * <pre>, + * // An example configuration that implements 30-second read timeout:, + * ChannelPipeline p = ...;, + * Timer timer = new HashedWheelTimer();, + * p.addLast("timeout", new ReadTimeoutHandler(timer, 30));, + * p.addLast("handler", new MyHandler());, + *, + * // To shut down, call {@link #releaseExternalResources()} or {@link Timer#stop()}., + * </pre>, + *, +++ b/src/main/java/org/jboss/netty/handler/timeout/WriteTimeoutHandler.java, + * <pre>, + * // An example configuration that implements 30-second write timeout:]