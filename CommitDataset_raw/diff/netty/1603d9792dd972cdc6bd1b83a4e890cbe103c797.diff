[+++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +++ b/transport/src/main/java/io/netty/channel/ChannelStateHandler.java, +, +    /**, +     * Gets called if a {@link Throwable} was thrown., +     */, +    void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;, +, +    /**, +     * Gets called if an user event was triggered., +     */, +    void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception;, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +++ b/transport/src/main/java/io/netty/channel/ChannelStateHandler.java, +, +    /**, +     * Gets called if a {@link Throwable} was thrown., +     */, +    void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;, +, +    /**, +     * Gets called if an user event was triggered., +     */, +    void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception;, +++ b/transport/src/main/java/io/netty/channel/ChannelStateHandlerAdapter.java, +    /**, +     * Calls {@link ChannelHandlerContext#fireChannelReadSuspended()} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +, +    /**, +     * Calls {@link ChannelHandlerContext#fireExceptionCaught(Throwable)} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause), +            throws Exception {, +        ctx.fireExceptionCaught(cause);, +    }, +, +    /**, +     * Calls {@link ChannelHandlerContext#fireUserEventTriggered(Object)} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    @Override, +    public void userEventTriggered(ChannelHandlerContext ctx, Object evt), +            throws Exception {, +        ctx.fireUserEventTriggered(evt);, +    }, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerAdapter.java, +++ b/transport/src/main/java/io/netty/channel/ChannelStateHandler.java, +, +    /**, +     * Gets called if a {@link Throwable} was thrown., +     */, +    void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;, +, +    /**, +     * Gets called if an user event was triggered., +     */, +    void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception;, +++ b/transport/src/main/java/io/netty/channel/ChannelStateHandlerAdapter.java, +    /**, +     * Calls {@link ChannelHandlerContext#fireChannelReadSuspended()} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +, +    /**, +     * Calls {@link ChannelHandlerContext#fireExceptionCaught(Throwable)} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause), +            throws Exception {, +        ctx.fireExceptionCaught(cause);, +    }, +, +    /**, +     * Calls {@link ChannelHandlerContext#fireUserEventTriggered(Object)} to forward, +     * to the next {@link ChannelHandler} in the {@link ChannelPipeline}., +     *, +     * Sub-classes may override this method to change behavior., +     */, +    @Override]