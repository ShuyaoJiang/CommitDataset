[+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +import java.nio.charset.UnsupportedCharsetException;, +import java.util.NoSuchElementException;, +     *         greater than {@code this.writerIndex}, +     *         {@code this.readerIndex} or greater than {@code this.capacity}, +     * in one shot.  This method is useful when you have to worry about the, +     * invocation order of {@link #readerIndex(int)} and {@link #writerIndex(int)}, +     * indexes meet all constraints, regardless what the current index values, +     *         greater than {@code this.capacity}, +     * {@code (this.writerIndex - this.readerIndex)}., +     * {@code (this.capacity - this.writerIndex)}., +     * Returns {@code true}, +     * if and only if {@code (this.writerIndex - this.readerIndex)} is greater, +     * than {@code 0}., +     * Returns {@code true}, +     * if and only if {@code (this.capacity - this.writerIndex)} is greater, +     * than {@code 0}., +     * the {@code capacity} of the buffer., +     * Marks the current {@code readerIndex} in this buffer.  You can, +     * reposition the current {@code readerIndex} to the marked, +     * {@code readerIndex} by calling {@link #resetReaderIndex()}., +     * The initial value of the marked {@code readerIndex} is {@code 0}., +     * Repositions the current {@code readerIndex} to the marked, +     * {@code readerIndex} in this buffer., +     * Marks the current {@code writerIndex} in this buffer.  You can, +     * reposition the current {@code writerIndex} to the marked, +     * {@code writerIndex} by calling {@link #resetWriterIndex()}., +     * The initial value of the marked {@code writerIndex} is {@code 0}., +     * Repositions the current {@code writerIndex} to the marked, +     * {@code writerIndex} in this buffer., +     * Please refer to the class documentation for more detailed explanation., +     *         {@code index + 1} is greater than {@code this.capacity}, +     *         {@code index + 1} is greater than {@code this.capacity}, +     *         {@code index + 2} is greater than {@code this.capacity}, +     *         {@code index + 2} is greater than {@code this.capacity}, +     *         {@code index + 3} is greater than {@code this.capacity}, +     *         {@code index + 3} is greater than {@code this.capacity}, +     *         {@code index + 4} is greater than {@code this.capacity}, +     *         {@code index + 4} is greater than {@code this.capacity}, +     *         {@code index + 8} is greater than {@code this.capacity}, +     * unwritable.  This method is basically same with, +     * {@link #getBytes(int, ChannelBuffer, int, int)}, except that this, +     * method increases the {@code writerIndex} of the destination by the, +     * number of the transferred bytes while, +     * {@link #getBytes(int, ChannelBuffer, int, int)} doesn't., +     *         if {@code index + dst.writableBytes} is greater than, +     *            {@code this.capacity}, +     * @param dstIndex the first index of the destination, +     * @param length   the number of bytes to transfer, +     *, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, or, +     *         if {@code dstIndex + length} is greater than, +     *            {@code dst.capacity}, +     *         if {@code index + dst.length} is greater than, +     *            {@code this.capacity}, +     * @param dstIndex the first index of the destination, +     * @param length   the number of bytes to transfer, +     *, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, or, +     *         if {@code dstIndex + length} is greater than, +     *            {@code dst.length}, +     *         if {@code index + dst.remaining()} is greater than, +     *            {@code this.capacity}, +     * @param length the number of bytes to transfer, +     *, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, +     * @param length the maximum number of bytes to transfer, +     *, +     * @return the actual number of bytes written out to the specified channel, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, +     *         {@code index + 1} is greater than {@code this.capacity}, +     *         {@code index + 2} is greater than {@code this.capacity}, +     *         {@code index + 3} is greater than {@code this.capacity}, +     *         {@code index + 4} is greater than {@code this.capacity}, +     *         {@code index + 8} is greater than {@code this.capacity}, +     * unreadable.  This method is basically same with, +     * {@link #setBytes(int, ChannelBuffer, int, int)}, except that this, +     * method increased the {@code readerIndex} of the source buffer by, +     * the number of the transferred bytes while, +     * {@link #getBytes(int, ChannelBuffer, int, int)} doesn't., +     *         if {@code index + src.readableBytes} is greater than, +     *            {@code this.capacity}, +     * @param srcIndex the first index of the source, +     * @param length   the number of bytes to transfer, +     *, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, or, +     *         if {@code srcIndex + length} is greater than, +     *            {@code src.capacity}, +     *         if {@code index + src.length} is greater than, +     *            {@code this.capacity}, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, or, +     *         if {@code srcIndex + length} is greater than {@code src.length}, +     *         if {@code index + src.remaining()} is greater than, +     *            {@code this.capacity}]