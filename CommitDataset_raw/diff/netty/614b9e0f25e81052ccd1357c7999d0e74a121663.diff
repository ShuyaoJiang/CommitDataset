[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecTest.java, +import io.netty.channel.ChannelFutureListener;, +import java.net.InetSocketAddress;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +    public void channelClosedWhenCloseListenerCompletes() {, +        LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream);, +        Http2StreamChannel childChannel = (Http2StreamChannel) inboundHandler.channel();, +, +        assertTrue(childChannel.isOpen());, +        assertTrue(childChannel.isActive());, +, +        final AtomicBoolean channelOpen = new AtomicBoolean(true);, +        final AtomicBoolean channelActive = new AtomicBoolean(true);, +, +        // Create a promise before actually doing the close, because otherwise we would be adding a listener to a future, +        // that is already completed because we are using EmbeddedChannel which executes code in the JUnit thread., +        ChannelPromise p = childChannel.newPromise();, +        p.addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) {, +                channelOpen.set(future.channel().isOpen());, +                channelActive.set(future.channel().isActive());, +            }, +        });, +        childChannel.close(p).syncUninterruptibly();, +, +        assertFalse(channelOpen.get());, +        assertFalse(childChannel.isActive());, +    }, +, +    @Test, +    public void channelClosedWhenChannelClosePromiseCompletes() {, +        LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream);, +        Http2StreamChannel childChannel = (Http2StreamChannel) inboundHandler.channel();, +, +        assertTrue(childChannel.isOpen());, +        assertTrue(childChannel.isActive());, +, +        final AtomicBoolean channelOpen = new AtomicBoolean(true);, +        final AtomicBoolean channelActive = new AtomicBoolean(true);, +, +        childChannel.closeFuture().addListener(new ChannelFutureListener() {, +            @Override, +            public void operationComplete(ChannelFuture future) {, +                channelOpen.set(future.channel().isOpen());, +                channelActive.set(future.channel().isActive());, +            }, +        });, +        childChannel.close().syncUninterruptibly();, +, +        assertFalse(channelOpen.get());, +        assertFalse(childChannel.isActive());, +    }, +, +    @Test, +    public void channelClosedTwiceMarksPromiseAsSuccessful() {, +        LastInboundHandler inboundHandler = streamActiveAndWriteHeaders(inboundStream);, +        Http2StreamChannel childChannel = (Http2StreamChannel) inboundHandler.channel();, +, +        assertTrue(childChannel.isOpen());, +        assertTrue(childChannel.isActive());, +        childChannel.close().syncUninterruptibly();, +        childChannel.close().syncUninterruptibly();, +, +        assertFalse(childChannel.isOpen());, +        assertFalse(childChannel.isActive());, +    }, +, +    @Test]