[+++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +import io.netty.channel.local.LocalEventLoop;, +            // Note that we can use any event loop to ensure certain local channels, +            // are handled by the same event loop thread which drives a certain socket channel, +            // to reduce the communication latency between socket channels and local channels., +            sb.eventLoop(new LocalEventLoop(), new LocalEventLoop()), +++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +import io.netty.channel.local.LocalEventLoop;, +            // Note that we can use any event loop to ensure certain local channels, +            // are handled by the same event loop thread which drives a certain socket channel, +            // to reduce the communication latency between socket channels and local channels., +            sb.eventLoop(new LocalEventLoop(), new LocalEventLoop()), +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.local;, +, +import io.netty.channel.SingleThreadEventLoop;, +, +import java.util.concurrent.ThreadFactory;, +, +final class LocalChildEventLoop extends SingleThreadEventLoop {, +, +    LocalChildEventLoop(ThreadFactory threadFactory) {, +        super(threadFactory);, +    }, +, +    @Override, +    protected void run() {, +        for (;;) {, +            Runnable task;, +            try {, +                task = takeTask();, +                task.run();, +            } catch (InterruptedException e) {, +                // Waken up by interruptThread(), +            }, +, +            if (isShutdown() && peekTask() == null) {, +                break;, +            }, +        }, +    }, +, +    @Override, +    protected void wakeup(boolean inEventLoop) {, +        if (!inEventLoop) {, +            interruptThread();, +        }, +    }, +}, +++ b/example/src/main/java/io/netty/example/localecho/LocalEcho.java, +import io.netty.channel.local.LocalEventLoop;, +            // Note that we can use any event loop to ensure certain local channels, +            // are handled by the same event loop thread which drives a certain socket channel, +            // to reduce the communication latency between socket channels and local channels., +            sb.eventLoop(new LocalEventLoop(), new LocalEventLoop()), +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.local;, +, +import io.netty.channel.SingleThreadEventLoop;, +, +import java.util.concurrent.ThreadFactory;, +, +final class LocalChildEventLoop extends SingleThreadEventLoop {, +, +    LocalChildEventLoop(ThreadFactory threadFactory) {, +        super(threadFactory);, +    }, +, +    @Override, +    protected void run() {]