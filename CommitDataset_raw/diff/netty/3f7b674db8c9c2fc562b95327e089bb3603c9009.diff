[+++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java, +import com.jcraft.jzlib.Inflater;, +import com.jcraft.jzlib.JZlib;, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java, +import com.jcraft.jzlib.Inflater;, +import com.jcraft.jzlib.JZlib;, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +    private final int wrapperOverhead;, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(wrapper);, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(ZlibWrapper.ZLIB);, +            int maxOutputLength = (int) Math.ceil(inputLength * 1.001) + 12 + wrapperOverhead;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java, +import com.jcraft.jzlib.Inflater;, +import com.jcraft.jzlib.JZlib;, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +    private final int wrapperOverhead;, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(wrapper);, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(ZlibWrapper.ZLIB);, +            int maxOutputLength = (int) Math.ceil(inputLength * 1.001) + 12 + wrapperOverhead;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +, +        if (!in.isReadable()) {, +            dataLength |= buf.readUnsignedByte() << i * 8;, +                    "Number of bytes mismatch. Expected: " + dataLength + ", Got: " + readLength);, +            crcValue |= (long) in.readUnsignedByte() << i * 8;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java, +import com.jcraft.jzlib.Inflater;, +import com.jcraft.jzlib.JZlib;, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JZlibEncoder.java, +    private final int wrapperOverhead;, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(wrapper);, +, +        wrapperOverhead = ZlibUtil.wrapperOverhead(ZlibWrapper.ZLIB);, +            int maxOutputLength = (int) Math.ceil(inputLength * 1.001) + 12 + wrapperOverhead;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibDecoder.java, +        if (finished) {, +            // Skip data received after finished., +            in.skipBytes(in.readableBytes());, +            return;, +        }, +, +        if (!in.isReadable()) {, +            dataLength |= buf.readUnsignedByte() << i * 8;, +                    "Number of bytes mismatch. Expected: " + dataLength + ", Got: " + readLength);, +            crcValue |= (long) in.readUnsignedByte() << i * 8;, +++ b/codec/src/main/java/io/netty/handler/codec/compression/JdkZlibEncoder.java, +    private final ZlibWrapper wrapper;, +        this.wrapper = wrapper;, +        wrapper = ZlibWrapper.ZLIB;, +            switch (wrapper) {, +                case GZIP:, +                    out.ensureWritable(sizeEstimate + gzipHeader.length);, +                    out.writeBytes(gzipHeader);, +                    break;, +                case ZLIB:, +                    out.ensureWritable(sizeEstimate + 2); // first two magic bytes, +                    break;, +                default:, +                    out.ensureWritable(sizeEstimate);, +        } else {, +            out.ensureWritable(sizeEstimate);, +        }, +, +        if (wrapper == ZlibWrapper.GZIP) {, +            crc.update(inAry);, +            deflate(out);, +, +        if (writeHeader && wrapper == ZlibWrapper.GZIP) {, +            // Write the GZIP header first if not written yet. (i.e. user wrote nothing.), +            writeHeader = false;]