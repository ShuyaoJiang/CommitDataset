[+++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +    public int setBytes(int index, InputStream in, int length), +            return 0;, +        int readBytes = 0;, +, +                int localReadBytes = in.read(buffer.array(), index, length);, +                if (localReadBytes < 0) {, +                    if (readBytes == 0) {, +                        return -1;, +                    } else {, +                        break;, +                }, +                readBytes += localReadBytes;, +                index += localReadBytes;, +                length -= localReadBytes;, +                int localReadBytes = in.read(tmp, i, tmp.length - i);, +                if (localReadBytes < 0) {, +                    if (readBytes == 0) {, +                        return -1;, +                    } else {, +                        break;, +                    }, +, +        return readBytes;, +, +        ByteBuffer slice = (ByteBuffer) buffer.duplicate().limit(index + length).position(index);, +        int readBytes = 0;, +, +        while (readBytes < length) {, +            int localReadBytes = in.read(slice);, +            if (localReadBytes < 0) {, +                if (readBytes == 0) {, +                    return -1;, +                } else {, +                    return readBytes;, +                }, +            } else if (localReadBytes == 0) {, +                break;, +            }, +            readBytes += localReadBytes;, +        }, +, +        return readBytes;, +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +    public int setBytes(int index, InputStream in, int length), +            return 0;, +        int readBytes = 0;, +, +                int localReadBytes = in.read(buffer.array(), index, length);, +                if (localReadBytes < 0) {, +                    if (readBytes == 0) {, +                        return -1;, +                    } else {, +                        break;, +                }, +                readBytes += localReadBytes;, +                index += localReadBytes;, +                length -= localReadBytes;, +                int localReadBytes = in.read(tmp, i, tmp.length - i);, +                if (localReadBytes < 0) {, +                    if (readBytes == 0) {, +                        return -1;, +                    } else {, +                        break;, +                    }, +, +        return readBytes;, +, +        ByteBuffer slice = (ByteBuffer) buffer.duplicate().limit(index + length).position(index);, +        int readBytes = 0;, +, +        while (readBytes < length) {, +            int localReadBytes = in.read(slice);, +            if (localReadBytes < 0) {, +                if (readBytes == 0) {, +                    return -1;, +                } else {, +                    return readBytes;, +                }, +            } else if (localReadBytes == 0) {, +                break;, +            }, +            readBytes += localReadBytes;, +        }, +, +        return readBytes;, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +     * @return the actual number of bytes read in from the specified channel., +     *         {@code -1} if the specified channel is closed., +     *, +    int setBytes(int index, InputStream in, int length) throws IOException;, +     * @return the actual number of bytes read in from the specified channel., +     *         {@code -1} if the specified channel is closed., +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +    public int setBytes(int index, InputStream in, int length), +            return 0;, +        int readBytes = 0;, +, +                int localReadBytes = in.read(buffer.array(), index, length);, +                if (localReadBytes < 0) {]