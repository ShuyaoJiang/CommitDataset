[+++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +import io.netty.channel.socket.ServerSocketChannelConfig;, +, +    private final AioServerSocketChannelConfig config = new AioServerSocketChannelConfig();, +        config.setChannel(javaChannel());, +    public ServerSocketChannelConfig config() {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +import io.netty.channel.socket.ServerSocketChannelConfig;, +, +    private final AioServerSocketChannelConfig config = new AioServerSocketChannelConfig();, +        config.setChannel(javaChannel());, +    public ServerSocketChannelConfig config() {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannelConfig.java, +final class AioServerSocketChannelConfig extends DefaultChannelConfig, +    private volatile AsynchronousServerSocketChannel channel;, +    private volatile Integer receiveBufferSize;, +    private volatile Boolean reuseAddress;, +    void setChannel(AsynchronousServerSocketChannel channel) {, +        if (this.channel != null) {, +            throw new IllegalStateException();, +        }, +, +        if (receiveBufferSize != null) {, +            setReceiveBufferSize(receiveBufferSize);, +        }, +        if (reuseAddress != null) {, +            setReuseAddress(reuseAddress);, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            if (reuseAddress == null) {, +                return false;, +            } else {, +                return reuseAddress;, +            }, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            this.reuseAddress = reuseAddress;, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            if (receiveBufferSize == null) {, +                return 0;, +            } else {, +                return receiveBufferSize;, +            }, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            this.receiveBufferSize = receiveBufferSize;, +            return;, +        }, +, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +import io.netty.channel.socket.ServerSocketChannelConfig;, +, +    private final AioServerSocketChannelConfig config = new AioServerSocketChannelConfig();, +        config.setChannel(javaChannel());, +    public ServerSocketChannelConfig config() {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannelConfig.java, +final class AioServerSocketChannelConfig extends DefaultChannelConfig, +    private volatile AsynchronousServerSocketChannel channel;, +    private volatile Integer receiveBufferSize;, +    private volatile Boolean reuseAddress;, +    void setChannel(AsynchronousServerSocketChannel channel) {, +        if (this.channel != null) {, +            throw new IllegalStateException();, +        }, +, +        if (receiveBufferSize != null) {, +            setReceiveBufferSize(receiveBufferSize);, +        }, +        if (reuseAddress != null) {, +            setReuseAddress(reuseAddress);, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            if (reuseAddress == null) {, +                return false;, +            } else {, +                return reuseAddress;, +            }, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            this.reuseAddress = reuseAddress;, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            if (receiveBufferSize == null) {, +                return 0;, +            } else {, +                return receiveBufferSize;, +            }, +        }, +        AsynchronousServerSocketChannel channel = this.channel;, +        if (channel == null) {, +            this.receiveBufferSize = receiveBufferSize;, +            return;]