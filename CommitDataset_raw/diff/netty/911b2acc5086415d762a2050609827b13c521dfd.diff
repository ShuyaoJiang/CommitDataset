[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    final boolean consumeBytes(int streamId, int bytes) throws Http2Exception {, +        return connection().local().flowController().consumeBytes(stream, bytes);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    final boolean consumeBytes(int streamId, int bytes) throws Http2Exception {, +        return connection().local().flowController().consumeBytes(stream, bytes);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    private boolean parentReadInProgress;, +                addChildChannelToReadPendingQueue(childChannel);, +                break;, +            case READ_IGNORED_CHANNEL_INACTIVE:, +            case READ_QUEUED:, +                // nothing to do:, +                break;, +            default:, +                throw new Error();, +        }, +    }, +, +    final void addChildChannelToReadPendingQueue(DefaultHttp2StreamChannel childChannel) {, +        parentReadInProgress = false;, +    @Override, +    public final void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +        parentReadInProgress = true;, +        super.channelRead(ctx, msg);, +    }, +, +    /**, +     * Return bytes to flow control., +     * <p>, +     * Package private to allow to override for testing, +     * @param ctx The {@link ChannelHandlerContext} associated with the parent channel., +     * @param stream The object representing the HTTP/2 stream., +     * @param bytes The number of bytes to return to flow control., +     * @return {@code true} if a frame has been written as a result of this method call., +     * @throws Http2Exception If this operation violates the flow control limits., +     */, +    boolean onBytesConsumed(@SuppressWarnings("unused") ChannelHandlerContext ctx,, +        return consumeBytes(stream.id(), bytes);, +            return parent().toString() + "(H2 - " + stream + ')';, +            if (readInProgress && (inboundBuffer == null || inboundBuffer.isEmpty())) {, +                if (inboundBuffer == null) {, +                    inboundBuffer = new ArrayDeque<Object>(4);, +                }, +                inboundBuffer.add(frame);, +                readInProgress = true;, +                if (inboundBuffer == null || inboundBuffer.isEmpty()) {, +                // We have already checked that the queue is not empty, so before this value is used it will always be, +                // set by allocHandle.continueReading()., +                boolean continueReading;, +                        continueReading = false;, +                        break;, +                } while (continueReading = allocHandle.continueReading());, +                if (continueReading && parentReadInProgress) {, +                    // We don't know if more frames will be delivered in the parent channel's read loop, so add this, +                    // channel to the channelReadComplete queue to be notified later., +                    addChildChannelToReadPendingQueue(DefaultHttp2StreamChannel.this);, +                } else {, +                    // Reading data may result in frames being written (e.g. WINDOW_UPDATE, RST, etc..). If the parent, +                    // channel is not currently reading we need to force a flush at the child channel, because we cannot, +                    // rely upon flush occurring in channelReadComplete on the parent channel., +                    readInProgress = false;, +                    flush();, +                    if (closePending) {, +                        unsafe.closeForcibly();, +                    }, +                }, +                        writeDoneAndNoFlush |= onBytesConsumed(ctx, stream, numBytesToBeConsumed);, +                if (!writeDoneAndNoFlush) {, +                    // There is nothing to flush so this is a NOOP., +                    return;, +                }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    final boolean consumeBytes(int streamId, int bytes) throws Http2Exception {, +        return connection().local().flowController().consumeBytes(stream, bytes);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    private boolean parentReadInProgress;, +                addChildChannelToReadPendingQueue(childChannel);, +                break;, +            case READ_IGNORED_CHANNEL_INACTIVE:, +            case READ_QUEUED:, +                // nothing to do:, +                break;, +            default:, +                throw new Error();, +        }, +    }, +, +    final void addChildChannelToReadPendingQueue(DefaultHttp2StreamChannel childChannel) {, +        parentReadInProgress = false;, +    @Override, +    public final void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +        parentReadInProgress = true;, +        super.channelRead(ctx, msg);, +    }, +, +    /**, +     * Return bytes to flow control., +     * <p>, +     * Package private to allow to override for testing]