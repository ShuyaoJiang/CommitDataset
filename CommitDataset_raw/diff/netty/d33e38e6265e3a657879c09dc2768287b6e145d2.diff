[+++ b/src/main/java/org/jboss/netty/channel/socket/DefaultDatagramChannelConfig.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel.socket;, +, +import java.io.IOException;, +import java.net.DatagramSocket;, +import java.net.InetAddress;, +import java.net.MulticastSocket;, +import java.net.NetworkInterface;, +import java.net.SocketException;, +, +import org.jboss.netty.channel.ChannelException;, +import org.jboss.netty.channel.DefaultChannelConfig;, +import org.jboss.netty.util.ConversionUtil;, +, +/**, + * The default {@link SocketChannelConfig} implementation., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public class DefaultDatagramChannelConfig extends DefaultChannelConfig, +                                        implements DatagramChannelConfig {, +, +    private final DatagramSocket socket;, +, +    /**, +     * Creates a new instance., +     */, +    public DefaultDatagramChannelConfig(DatagramSocket socket) {, +        if (socket == null) {, +            throw new NullPointerException("socket");, +        }, +        this.socket = socket;, +    }, +, +    @Override, +    public boolean setOption(String key, Object value) {, +        if (super.setOption(key, value)) {, +            return true;, +        }, +, +        if (key.equals("broadcast")) {, +            setBroadcast(ConversionUtil.toBoolean(value));, +        } else if (key.equals("receiveBufferSize")) {, +            setReceiveBufferSize(ConversionUtil.toInt(value));, +        } else if (key.equals("sendBufferSize")) {, +            setSendBufferSize(ConversionUtil.toInt(value));, +        } else if (key.equals("reuseAddress")) {, +            setReuseAddress(ConversionUtil.toBoolean(value));, +        } else if (key.equals("trafficClass")) {, +            setTrafficClass(ConversionUtil.toInt(value));, +        } else {, +            return false;, +        }, +        return true;, +    }, +, +    public boolean isBroadcast() {, +        try {, +            return socket.getBroadcast();, +        } catch (SocketException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    public void setBroadcast(boolean broadcast) {, +        try {, +            socket.setBroadcast(broadcast);, +        } catch (SocketException e) {, +            throw new ChannelException(e);, +        }, +    }, +, +    public InetAddress getInterface() {, +        if (socket instanceof MulticastSocket) {]