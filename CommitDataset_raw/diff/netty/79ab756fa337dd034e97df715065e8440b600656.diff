[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +        if (size == 0) {, +        State state = queue.pollFirst();, +            if (state.streamableBytes > 0 && maxBytes == 0) {, +                // Stop at the first state that can't send. Add this state back to the head of, +                // the queue. Note that empty frames at the head of the queue will always be, +                // written., +                queue.addFirst(state);, +                state.enqueued = true;, +                break;, +            }, +        } while ((state = queue.pollFirst()) != null);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +        if (size == 0) {, +        State state = queue.pollFirst();, +            if (state.streamableBytes > 0 && maxBytes == 0) {, +                // Stop at the first state that can't send. Add this state back to the head of, +                // the queue. Note that empty frames at the head of the queue will always be, +                // written., +                queue.addFirst(state);, +                state.enqueued = true;, +                break;, +            }, +        } while ((state = queue.pollFirst()) != null);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/UniformStreamByteDistributorTest.java, +        // Update the streams., +        updateStream(STREAM_B, CHUNK_SIZE, true);, +        updateStream(STREAM_C, CHUNK_SIZE, true);, +        updateStream(STREAM_D, CHUNK_SIZE, true);, +    public void emptyFrameAtHeadIsWritten() throws Http2Exception {, +        updateStream(STREAM_B, 0, true);, +        updateStream(STREAM_C, 0, true);, +        updateStream(STREAM_D, 10, true);, +        assertTrue(write(10));, +        verifyWrite(STREAM_C, 0);]