[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockZlibEncoder.java, +    SpdyHeaderBlockZlibEncoder(SpdyVersion spdyVersion, int compressionLevel) {, +        super(spdyVersion);, +    private int setInput(ByteBuf decompressed) {, +        int len = decompressed.readableBytes();, +, +        if (decompressed.hasArray()) {, +            compressor.setInput(decompressed.array(), decompressed.arrayOffset() + decompressed.readerIndex(), len);, +        } else {, +            byte[] in = new byte[len];, +            decompressed.getBytes(decompressed.readerIndex(), in);, +            compressor.setInput(in, 0, in.length);, +        }, +, +        return len;, +        while (compressInto(compressed)) {, +            // Although unlikely, it's possible that the compressed size is larger than the decompressed size, +            compressed.ensureWritable(compressed.capacity() << 1);, +    private boolean compressInto(ByteBuf compressed) {, +        byte[] out = compressed.array();, +        int off = compressed.arrayOffset() + compressed.writerIndex();, +        int toWrite = compressed.writableBytes();, +        int numBytes = compressor.deflate(out, off, toWrite, Deflater.SYNC_FLUSH);, +        compressed.writerIndex(compressed.writerIndex() + numBytes);, +        return numBytes == toWrite;, +    }, +, +        ByteBuf compressed = decompressed.alloc().heapBuffer(decompressed.readableBytes());, +        int len = setInput(decompressed);, +        decompressed.skipBytes(len);, +]