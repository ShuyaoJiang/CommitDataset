[+++ b/resolver/src/main/java/io/netty/resolver/DefaultHostsFileEntriesResolver.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.PlatformDependent;, +import java.nio.charset.Charset;, +        this(parseEntries());, +, +    private static HostsFileEntries parseEntries() {, +        if (PlatformDependent.isWindows()) {, +            // Ony windows there seems to be no standard for the encoding used for the hosts file, so let us, +            // try multiple until we either were able to parse it or there is none left and so we return an, +            // empty intstance., +            return HostsFileParser.parseSilently(Charset.defaultCharset(), CharsetUtil.UTF_16, CharsetUtil.UTF_8);, +        }, +        return HostsFileParser.parseSilently();, +    }, +++ b/resolver/src/main/java/io/netty/resolver/DefaultHostsFileEntriesResolver.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.PlatformDependent;, +import java.nio.charset.Charset;, +        this(parseEntries());, +, +    private static HostsFileEntries parseEntries() {, +        if (PlatformDependent.isWindows()) {, +            // Ony windows there seems to be no standard for the encoding used for the hosts file, so let us, +            // try multiple until we either were able to parse it or there is none left and so we return an, +            // empty intstance., +            return HostsFileParser.parseSilently(Charset.defaultCharset(), CharsetUtil.UTF_16, CharsetUtil.UTF_8);, +        }, +        return HostsFileParser.parseSilently();, +    }, +++ b/resolver/src/main/java/io/netty/resolver/HostsFileParser.java, +import java.io.FileInputStream;, +import java.io.InputStreamReader;, +import java.nio.charset.Charset;, +     * Parse hosts file at standard OS location using the systems default {@link Charset} for decoding., +        return parseSilently(Charset.defaultCharset());, +    }, +, +    /**, +     * Parse hosts file at standard OS location using the given {@link Charset}s one after each other until, +     * we were able to parse something or none is left., +     *, +     * @param charsets the {@link Charset}s to try as file encodings when parsing., +     * @return a {@link HostsFileEntries}, +     */, +    public static HostsFileEntries parseSilently(Charset... charsets) {, +            return parse(hostsFile, charsets);, +     * Parse hosts file at standard OS location using the system default {@link Charset} for decoding., +     * Parse a hosts file using the system default {@link Charset} for decoding., +        return parse(file, Charset.defaultCharset());, +, +    /**, +     * Parse a hosts file., +     *, +     * @param file the file to be parsed, +     * @param charsets the {@link Charset}s to try as file encodings when parsing., +     * @return a {@link HostsFileEntries}, +     * @throws IOException file could not be read, +     */, +    public static HostsFileEntries parse(File file, Charset... charsets) throws IOException {, +        checkNotNull(file, "file");, +        checkNotNull(charsets, "charsets");, +        if (file.exists() && file.isFile()) {, +            for (Charset charset: charsets) {, +                HostsFileEntries entries = parse(new BufferedReader(new InputStreamReader(, +                        new FileInputStream(file), charset)));, +                if (entries != HostsFileEntries.EMPTY) {, +                    return entries;, +                }, +            }, +        }, +        return HostsFileEntries.EMPTY;, +++ b/resolver/src/main/java/io/netty/resolver/DefaultHostsFileEntriesResolver.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.PlatformDependent;, +import java.nio.charset.Charset;, +        this(parseEntries());, +, +    private static HostsFileEntries parseEntries() {, +        if (PlatformDependent.isWindows()) {, +            // Ony windows there seems to be no standard for the encoding used for the hosts file, so let us, +            // try multiple until we either were able to parse it or there is none left and so we return an, +            // empty intstance., +            return HostsFileParser.parseSilently(Charset.defaultCharset(), CharsetUtil.UTF_16, CharsetUtil.UTF_8);, +        }, +        return HostsFileParser.parseSilently();, +    }, +++ b/resolver/src/main/java/io/netty/resolver/HostsFileParser.java, +import java.io.FileInputStream;, +import java.io.InputStreamReader;, +import java.nio.charset.Charset;, +     * Parse hosts file at standard OS location using the systems default {@link Charset} for decoding., +        return parseSilently(Charset.defaultCharset());, +    }, +, +    /**, +     * Parse hosts file at standard OS location using the given {@link Charset}s one after each other until, +     * we were able to parse something or none is left., +     *, +     * @param charsets the {@link Charset}s to try as file encodings when parsing.]