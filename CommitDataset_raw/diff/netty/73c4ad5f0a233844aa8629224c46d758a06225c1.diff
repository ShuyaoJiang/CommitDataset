[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.verifyPadding;, +     * @param padding additional bytes that should be added to obscure the true content size. Must be between 0 and, +     *                256 (inclusive)., +        verifyPadding(padding);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.verifyPadding;, +     * @param padding additional bytes that should be added to obscure the true content size. Must be between 0 and, +     *                256 (inclusive)., +        verifyPadding(padding);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        int padding = readPadding(payload);, +        int dataLength = lengthWithoutTrailingPadding(payload.readableBytes(), padding);, +            final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +     * If padding is present in the payload, reads the next byte as padding. The padding also includes the one byte, +     * width of the pad length field. Otherwise, returns zero., +    private int readPadding(ByteBuf payload) {, +        return payload.readUnsignedByte() + 1;, +    }, +, +    /**, +     * The padding parameter consists of the 1 byte pad length field and the trailing padding bytes. This method, +     * returns the number of readable bytes without the trailing padding., +     */, +    private static int lengthWithoutTrailingPadding(int readableBytes, int padding) {, +        return padding == 0, +                ? readableBytes, +                : readableBytes - (padding - 1);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.verifyPadding;, +     * @param padding additional bytes that should be added to obscure the true content size. Must be between 0 and, +     *                256 (inclusive)., +        verifyPadding(padding);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        int padding = readPadding(payload);, +        int dataLength = lengthWithoutTrailingPadding(payload.readableBytes(), padding);, +            final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +     * If padding is present in the payload, reads the next byte as padding. The padding also includes the one byte, +     * width of the pad length field. Otherwise, returns zero., +    private int readPadding(ByteBuf payload) {, +        return payload.readUnsignedByte() + 1;, +    }, +, +    /**, +     * The padding parameter consists of the 1 byte pad length field and the trailing padding bytes. This method, +     * returns the number of readable bytes without the trailing padding., +     */, +    private static int lengthWithoutTrailingPadding(int readableBytes, int padding) {, +        return padding == 0, +                ? readableBytes, +                : readableBytes - (padding - 1);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.verifyPadding;, +     * This buffer is allocated to the maximum size of the padding field, and filled with zeros., +                if (paddingBytes(framePaddingBytes) > 0) {, +                    ctx.write(ZERO_BUFFER.slice(0, paddingBytes(framePaddingBytes)), promiseAggregator.newPromise());, +            int nonFragmentLength = INT_FIELD_LENGTH + padding;, +            // Write out the padding, if any., +            if (paddingBytes(padding) > 0) {, +                ctx.write(ZERO_BUFFER.slice(0, paddingBytes(padding)), promiseAggregator.newPromise());, +            int nonFragmentBytes = padding + flags.getNumPriorityBytes();, +            // Write out the padding, if any., +            if (paddingBytes(padding) > 0) {, +                ctx.write(ZERO_BUFFER.slice(0, paddingBytes(padding)), promiseAggregator.newPromise());, +        int maxFragmentLength = maxFrameSize - padding;, +            int payloadLength = fragmentReadableBytes + padding;, +                payloadLength = fragmentReadableBytes + padding;, +                if (paddingBytes(padding) > 0) {, +                    ctx.write(ZERO_BUFFER.slice(0, paddingBytes(padding)), promiseAggregator.newPromise());, +    /**, +     * Returns the number of padding bytes that should be appended to the end of a frame., +     */, +    private static int paddingBytes(int padding) {, +        // The padding parameter contains the 1 byte pad length field as well as the trailing padding bytes., +        // Subtract 1, so to only get the number of padding bytes that need to be appended to the end of a frame., +        return padding - 1;, +    }, +, +    private static void writePaddingLength(ByteBuf buf, int padding) {, +        if (padding > 0) {, +            // Minus 1, as the pad length field is included in the padding parameter and is 1 byte wide., +            buf.writeByte(padding - 1);, +                int payloadLength = data + padding;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.verifyPadding;, +     * @param padding additional bytes that should be added to obscure the true content size. Must be between 0 and, +     *                256 (inclusive)., +        verifyPadding(padding);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        int padding = readPadding(payload);, +        int dataLength = lengthWithoutTrailingPadding(payload.readableBytes(), padding);, +            final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +        final ByteBuf fragment = payload.readSlice(lengthWithoutTrailingPadding(payload.readableBytes(), padding));, +     * If padding is present in the payload, reads the next byte as padding. The padding also includes the one byte, +     * width of the pad length field. Otherwise, returns zero.]