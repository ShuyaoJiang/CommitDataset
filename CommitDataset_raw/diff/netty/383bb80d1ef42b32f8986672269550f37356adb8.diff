[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            return PooledHeapByteBuf.newInstance(maxCapacity);, +                return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, +                return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            return PooledHeapByteBuf.newInstance(maxCapacity);, +                return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, +                return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +import io.netty.util.Recycler;, +import io.netty.util.ResourceLeakDetector;, +    private final Recycler.Handle recyclerHandle;, +    protected PooledByteBuf(Recycler.Handle recyclerHandle, int maxCapacity) {, +        this.recyclerHandle = recyclerHandle;, +            if (ResourceLeakDetector.ENABLED) {, +            } else {, +                recycle();, +    }, +, +    @SuppressWarnings("unchecked"), +    private void recycle() {, +        Recycler.Handle recyclerHandle = this.recyclerHandle;, +        if (recyclerHandle != null) {, +            setRefCnt(1);, +            ((Recycler<Object>) recycler()).recycle(this, recyclerHandle);, +        }, +    }, +, +    protected abstract Recycler<?> recycler();, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            return PooledHeapByteBuf.newInstance(maxCapacity);, +                return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, +                return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +import io.netty.util.Recycler;, +import io.netty.util.ResourceLeakDetector;, +    private final Recycler.Handle recyclerHandle;, +    protected PooledByteBuf(Recycler.Handle recyclerHandle, int maxCapacity) {, +        this.recyclerHandle = recyclerHandle;, +            if (ResourceLeakDetector.ENABLED) {, +            } else {, +                recycle();, +    }, +, +    @SuppressWarnings("unchecked"), +    private void recycle() {, +        Recycler.Handle recyclerHandle = this.recyclerHandle;, +        if (recyclerHandle != null) {, +            setRefCnt(1);, +            ((Recycler<Object>) recycler()).recycle(this, recyclerHandle);, +        }, +    }, +, +    protected abstract Recycler<?> recycler();, +++ b/buffer/src/main/java/io/netty/buffer/PooledDirectByteBuf.java, +import io.netty.util.Recycler;, +, +    private static final Recycler<PooledDirectByteBuf> RECYCLER = new Recycler<PooledDirectByteBuf>() {, +        @Override, +        protected PooledDirectByteBuf newObject(Handle handle) {, +            return new PooledDirectByteBuf(handle, Integer.MAX_VALUE);, +        }, +    };, +, +    static PooledDirectByteBuf newInstance(int maxCapacity) {, +        if (maxCapacity == Integer.MAX_VALUE) {, +            return RECYCLER.get();, +        } else {, +            return new PooledDirectByteBuf(null, maxCapacity);, +        }, +    }, +, +    private PooledDirectByteBuf(Recycler.Handle recyclerHandle, int maxCapacity) {, +        super(recyclerHandle, maxCapacity);, +, +    @Override, +    protected Recycler<?> recycler() {, +        return RECYCLER;, +    }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            return PooledHeapByteBuf.newInstance(maxCapacity);, +                return PooledUnsafeDirectByteBuf.newInstance(maxCapacity);, +                return PooledDirectByteBuf.newInstance(maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +import io.netty.util.Recycler;, +import io.netty.util.ResourceLeakDetector;, +    private final Recycler.Handle recyclerHandle;, +    protected PooledByteBuf(Recycler.Handle recyclerHandle, int maxCapacity) {, +        this.recyclerHandle = recyclerHandle;, +            if (ResourceLeakDetector.ENABLED) {, +            } else {, +                recycle();, +    }, +, +    @SuppressWarnings("unchecked"), +    private void recycle() {, +        Recycler.Handle recyclerHandle = this.recyclerHandle;, +        if (recyclerHandle != null) {, +            setRefCnt(1);, +            ((Recycler<Object>) recycler()).recycle(this, recyclerHandle);]