[+++ b/transport/src/main/java/io/netty/channel/Channels.java, +    , +    , +    , +    /**, +     * Sends a {@code "channelInterestChanged"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel} once the io-thread runs again., +     */, +    public static void fireChannelInterestChangedLater(Channel channel) {, +        channel.getPipeline().sendUpstreamLater(, +                new UpstreamChannelStateEvent(, +                        channel, ChannelState.INTEREST_OPS, Channel.OP_READ));, +    }, +    , +     * the specified {@link Channel} once the io-thread runs again., +     */, +    public static void fireChannelDisconnectedLater(Channel channel) {, +        channel.getPipeline().sendUpstreamLater(, +                new UpstreamChannelStateEvent(, +                        channel, ChannelState.CONNECTED, null));, +    }, +    , +    /**, +     * Sends a {@code "channelDisconnected"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +    , +    , +    /**, +     * Sends a {@code "channelUnbound"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel} once the io-thread runs again., +     */, +    public static void fireChannelUnboundLater(Channel channel) {, +        channel.getPipeline().sendUpstreamLater(new UpstreamChannelStateEvent(, +                channel, ChannelState.BOUND, null));, +    }, +    , +    , +    , +    /**, +     * Sends a {@code "channelClosed"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel} once the io-thread runs again., +     */, +    public static void fireChannelClosedLater(Channel channel) {, +        channel.getPipeline().sendUpstream(, +                new UpstreamChannelStateEvent(, +                        channel, ChannelState.OPEN, Boolean.FALSE));, +, +        // Notify the parent handler., +        if (channel.getParent() != null) {, +            fireChildChannelStateChangedLater(channel.getParent(), channel);, +        }, +    }, +    , +    , +    , +    /**, +     * Sends a {@code "exceptionCaught"} event to the first, +     * {@link ChannelUpstreamHandler} in the {@link ChannelPipeline} of, +     * the specified {@link Channel} once the io-thread runs again., +     */, +    public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {, +        channel.getPipeline().sendUpstream(, +                new DefaultExceptionEvent(channel, cause));, +    }, +, +    , +    private static void fireChildChannelStateChangedLater(, +            Channel channel, Channel childChannel) {, +        channel.getPipeline().sendUpstreamLater(, +                new DefaultChildChannelStateEvent(channel, childChannel));, +    }, +, +    ]