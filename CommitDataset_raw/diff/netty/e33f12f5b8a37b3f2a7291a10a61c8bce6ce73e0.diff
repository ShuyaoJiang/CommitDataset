[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +    private static final char QUESTION_MARK = '?';, +                // Correctly handle query params., +                // See https://github.com/netty/netty/issues/2732, +                int index = uri.indexOf(QUESTION_MARK, startIndex);, +                if (index == -1) {, +                } else {, +                    if (uri.lastIndexOf(SLASH, index) <= startIndex) {, +                        int len = uri.length();, +                        StringBuilder sb = new StringBuilder(len + 1);, +                        sb.append(uri, 0, index);, +                        sb.append(SLASH);, +                        sb.append(uri, index, len);, +                        uri = sb.toString();, +                    }, +                }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +    private static final char QUESTION_MARK = '?';, +                // Correctly handle query params., +                // See https://github.com/netty/netty/issues/2732, +                int index = uri.indexOf(QUESTION_MARK, startIndex);, +                if (index == -1) {, +                } else {, +                    if (uri.lastIndexOf(SLASH, index) <= startIndex) {, +                        int len = uri.length();, +                        StringBuilder sb = new StringBuilder(len + 1);, +                        sb.append(uri, 0, index);, +                        sb.append(SLASH);, +                        sb.append(uri, index, len);, +                        uri = sb.toString();, +                    }, +                }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +    public void testUriWithoutPath2() throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        ByteBuf buffer = Unpooled.buffer(64);, +        encoder.encodeInitialLine(buffer, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,, +                "http://localhost:9999?p1=v1"));, +        String req = buffer.toString(Charset.forName("US-ASCII"));, +        assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req);, +    }, +, +    @Test]