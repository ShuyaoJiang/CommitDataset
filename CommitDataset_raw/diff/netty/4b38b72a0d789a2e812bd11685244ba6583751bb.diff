[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +    static final String ROOT = ".";, +, +            return ROOT;, +, +        while (in.isReadable()) {, +            final int len = in.readUnsignedByte();, +            final boolean pointer = (len & 0xc0) == 0xc0;, +                if (!in.isReadable()) {, +                    throw new CorruptedFrameException("truncated pointer in a name");, +                }, +, +            } else if (len != 0) {, +                if (!in.isReadable(len)) {, +                    throw new CorruptedFrameException("truncated label in a name");, +                }, +            } else { // len == 0, +                break;, +, +, +            return ROOT;, +        if (name.charAt(name.length() - 1) != '.') {, +            name.append('.');, +        }, +, +        return name.toString();, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +    static final String ROOT = ".";, +, +            return ROOT;, +, +        while (in.isReadable()) {, +            final int len = in.readUnsignedByte();, +            final boolean pointer = (len & 0xc0) == 0xc0;, +                if (!in.isReadable()) {, +                    throw new CorruptedFrameException("truncated pointer in a name");, +                }, +, +            } else if (len != 0) {, +                if (!in.isReadable(len)) {, +                    throw new CorruptedFrameException("truncated label in a name");, +                }, +            } else { // len == 0, +                break;, +, +, +            return ROOT;, +        if (name.charAt(name.length() - 1) != '.') {, +            name.append('.');, +        }, +, +        return name.toString();, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordEncoder.java, +import static io.netty.handler.codec.dns.DefaultDnsRecordDecoder.ROOT;, +, +        if (ROOT.equals(name)) {, +            // Root domain, +            buf.writeByte(0);, +            return;, +, +        final String[] labels = StringUtil.split(name, '.');, +        for (String label : labels) {, +            final int labelLen = label.length();, +            if (labelLen == 0) {, +                // zero-length label means the end of the name., +                break;, +, +            buf.writeByte(labelLen);, +            ByteBufUtil.writeAscii(buf, label);, +        }, +, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +    static final String ROOT = ".";, +, +            return ROOT;, +, +        while (in.isReadable()) {, +            final int len = in.readUnsignedByte();, +            final boolean pointer = (len & 0xc0) == 0xc0;, +                if (!in.isReadable()) {, +                    throw new CorruptedFrameException("truncated pointer in a name");, +                }, +, +            } else if (len != 0) {, +                if (!in.isReadable(len)) {, +                    throw new CorruptedFrameException("truncated label in a name");, +                }, +            } else { // len == 0, +                break;, +, +, +            return ROOT;, +        if (name.charAt(name.length() - 1) != '.') {, +            name.append('.');, +        }, +, +        return name.toString();, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordEncoder.java, +import static io.netty.handler.codec.dns.DefaultDnsRecordDecoder.ROOT;, +]