[+++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import io.netty.channel.Channels;, +import io.netty.channel.ChannelFuture;, +, +        @Override, +        public ChannelFuture execute(ChannelPipeline pipeline, Runnable task) {, +            try {, +                task.run();, +                return Channels.succeededFuture(pipeline.getChannel());, +            } catch (Throwable t) {, +                return Channels.failedFuture(pipeline.getChannel(), t);, +            }, +        }, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import io.netty.channel.Channels;, +import io.netty.channel.ChannelFuture;, +, +        @Override, +        public ChannelFuture execute(ChannelPipeline pipeline, Runnable task) {, +            try {, +                task.run();, +                return Channels.succeededFuture(pipeline.getChannel());, +            } catch (Throwable t) {, +                return Channels.failedFuture(pipeline.getChannel(), t);, +            }, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +    protected ChannelBuffer createCumulationDynamicBuffer(ChannelHandlerContext ctx) {, +            return ChannelBuffers.dynamicBuffer(frameLength, ctx.getChannel().getConfig().getBufferFactory());, +        return super.createCumulationDynamicBuffer(ctx);, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import io.netty.channel.Channels;, +import io.netty.channel.ChannelFuture;, +, +        @Override, +        public ChannelFuture execute(ChannelPipeline pipeline, Runnable task) {, +            try {, +                task.run();, +                return Channels.succeededFuture(pipeline.getChannel());, +            } catch (Throwable t) {, +                return Channels.failedFuture(pipeline.getChannel(), t);, +            }, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +    protected ChannelBuffer createCumulationDynamicBuffer(ChannelHandlerContext ctx) {, +            return ChannelBuffers.dynamicBuffer(frameLength, ctx.getChannel().getConfig().getBufferFactory());, +        return super.createCumulationDynamicBuffer(ctx);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FrameDecoder.java, +                ChannelBuffer cumulation = cumulation(ctx);, +                cumulation.writeBytes(input);, +            ChannelBuffer cumulation = cumulation(ctx);, +            if (cumulation.readable()) {, +            } else {, +                callDecode(ctx, e.getChannel(), input, e.getRemoteAddress());, +                if (input.readable()) {, +                    cumulation.writeBytes(input);, +    }, +, +, +        if (!cumulation.readable()) {, +          this.cumulation = null;, +        }, +            } else {, +            }, +     * Get the currently used {@link ChannelBuffer} for cumulation or create one in a lazy fashion if none exist yet, +     * , +     * @param ctx the {@link ChannelHandlerContext} for this handler, +     * @return buffer the {@link ChannelBuffer} which is used for cumulation, +     */, +    private ChannelBuffer cumulation(ChannelHandlerContext ctx) {, +        ChannelBuffer c = cumulation;, +        if (c == null) {, +            c = createCumulationDynamicBuffer(ctx);, +            cumulation = c;, +        }, +        return c;, +    }, +    , +    /**, +     * Create a new {@link ChannelBuffer} which is used for the cumulation. Be aware that this MUST be a dynamic buffer. Sub-classes may override this to provide a , +     * dynamic {@link ChannelBuffer} which has some prelocated size that better fit their need., +    protected ChannelBuffer createCumulationDynamicBuffer(ChannelHandlerContext ctx) {, +        return ChannelBuffers.dynamicBuffer(ctx.getChannel().getConfig().getBufferFactory());, +++ b/buffer/src/main/java/io/netty/buffer/ChannelBuffers.java, +++ b/buffer/src/test/java/io/netty/buffer/ChannelBuffersTest.java, +++ b/codec/src/main/java/io/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import io.netty.channel.Channels;, +import io.netty.channel.ChannelFuture;, +, +        @Override, +        public ChannelFuture execute(ChannelPipeline pipeline, Runnable task) {]