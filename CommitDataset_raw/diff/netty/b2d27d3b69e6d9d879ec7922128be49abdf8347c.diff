[+++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/group/DefaultChannelGroup.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/group/DefaultChannelGroup.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/group/DefaultChannelGroup.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/group/DefaultChannelGroup.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/OrderedMemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/channel/ChannelLocal.java, +import org.jboss.netty.util.ConcurrentIdentityWeakHashMap;, +    private final ConcurrentMap<Channel, T> map =, +        new ConcurrentIdentityWeakHashMap<Channel, T>();, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFactory.java, +import org.jboss.netty.util.ConcurrentHashMap;, +, +++ b/src/main/java/org/jboss/netty/channel/group/DefaultChannelGroup.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/DefaultObjectSizeEstimator.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/execution/OrderedMemoryAwareThreadPoolExecutor.java, +import org.jboss.netty.util.ConcurrentHashMap;, +++ b/src/main/java/org/jboss/netty/handler/timeout/HashedWheelTimer.java, +import java.util.concurrent.atomic.AtomicInteger;, +import org.jboss.netty.util.ConcurrentIdentityHashMap;, +import org.jboss.netty.util.ReusableIterator;, +    final Executor executor;, +    final Worker worker = new Worker();, +    final AtomicInteger activeTimeouts = new AtomicInteger();, +    final long roundDuration;, +    final ReusableIterator<HashedWheelTimeout>[] iterators;, +        this(executor, 100, TimeUnit.MILLISECONDS, 512); // about 50 sec, +        iterators = createIterators(wheel);, +        roundDuration = tickDuration * wheel.length;, +        Set<HashedWheelTimeout>[] wheel = new Set[ticksPerWheel];, +        for (int i = 0; i < wheel.length; i ++) {, +            wheel[i] = new MapBackedSet<HashedWheelTimeout>(new ConcurrentIdentityHashMap<HashedWheelTimeout, Boolean>());, +        return wheel;, +    }, +, +    @SuppressWarnings("unchecked"), +    private static ReusableIterator<HashedWheelTimeout>[] createIterators(Set<HashedWheelTimeout>[] wheel) {, +        ReusableIterator<HashedWheelTimeout>[] iterators = new ReusableIterator[wheel.length];, +        for (int i = 0; i < wheel.length; i ++) {, +            iterators[i] = (ReusableIterator<HashedWheelTimeout>) wheel[i].iterator();, +        }, +        return iterators;, +        // Add the timeout to the wheel.]