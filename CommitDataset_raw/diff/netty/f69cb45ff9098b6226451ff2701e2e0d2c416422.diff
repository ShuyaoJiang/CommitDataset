[+++ b/src/main/java/org/jboss/netty/bootstrap/ConnectionlessBootstrap.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.bootstrap;, +, +import static org.jboss.netty.channel.Channels.*;, +, +import java.net.InetSocketAddress;, +import java.net.SocketAddress;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.TimeUnit;, +, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelConfig;, +import org.jboss.netty.channel.ChannelException;, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.channel.ChannelPipelineCoverage;, +import org.jboss.netty.channel.ChannelPipelineException;, +import org.jboss.netty.channel.ChannelPipelineFactory;, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.SimpleChannelUpstreamHandler;, +, +/**, + * A helper class which creates a new server-side {@link Channel} for a, + * connectionless transport., + *, + * <h3>Only for connectionless transports</h3>, + *, + * Use {@link ServerBootstrap} instead for connection oriented transports., + * Do not use this helper if you are using a connection oriented transport such, + * as TCP/IP and local transport which accepts an incoming connection and lets, + * the accepted child channels handle received messages., + *, + * <h3>Configuring channels</h3>, + *, + * {@link #setOption(String, Object) Options} are used to configure a channel:, + *, + * <pre>, + * ConnectionlessBootstrap b = ...;, + *, + * // Options for a new channel, + * b.setOption("localAddress", new {@link InetSocketAddress}(8080));, + * b.setOption("tcpNoDelay", true);, + * b.setOption("receiveBufferSize", 1048576);, + * </pre>, + *, + * For the detailed list of available options, please refer to, + * {@link ChannelConfig} and its sub-types, + *, + * <h3>Configuring a channel pipeline</h3>, + *, + * Every channel has its own {@link ChannelPipeline} and you can configure it, + * in two ways., + * <p>, + * {@linkplain #setPipeline(ChannelPipeline) The first approach} is to use, + * the default pipeline and let the bootstrap to shallow-copy the default, + * pipeline for each new channel:, + *, + * <pre>, + * ConnectionlessBootstrap b = ...;, + * {@link ChannelPipeline} p = b.getPipeline();, + *, + * // Add handlers to the pipeline., + * p.addLast("encoder", new EncodingHandler());, + * p.addLast("decoder", new DecodingHandler());, + * p.addLast("logic",   new LogicHandler());, + * </pre>, + *, + * Please note 'shallow-copy' here means that the added {@link ChannelHandler}s, + * are not cloned but only their references are added to the new pipeline., + * Therefore, you have to choose the second approach if you are going to open, + * more than one {@link Channel} whose {@link ChannelPipeline} contains any, + * {@link ChannelHandler} whose {@link ChannelPipelineCoverage} is {@code "one"}., + *]