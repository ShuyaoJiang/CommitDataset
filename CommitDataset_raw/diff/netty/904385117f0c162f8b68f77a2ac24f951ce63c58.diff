[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.MessageToMessageEncoder;, +, +import java.util.List;, +public class WebSocket00FrameEncoder extends MessageToMessageEncoder<WebSocketFrame> implements WebSocketFrameEncoder {, +    private static final ByteBuf _0X00 = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(1, 1).writeByte((byte) 0x00));, +    private static final ByteBuf _0XFF = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(1, 1).writeByte((byte) 0xFF));, +    private static final ByteBuf _0XFF_0X00 = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(2, 2).writeByte((byte) 0xFF).writeByte((byte) 0x00));, +    protected void encode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {, +, +            out.add(_0X00.duplicate());, +            out.add(data.retain());, +            out.add(_0XFF.duplicate());, +            out.add(_0XFF_0X00);, +            ByteBuf buf = ctx.alloc().buffer(5);, +            boolean release = true;, +            try {, +                buf.writeByte((byte) 0x80);, +                            buf.writeByte(b4);, +                            buf.writeByte(b3 | 0x80);, +                            buf.writeByte(b4);, +                        buf.writeByte(b2 | 0x80);, +                        buf.writeByte(b3 | 0x80);, +                        buf.writeByte(b4);, +                    buf.writeByte(b1 | 0x80);, +                    buf.writeByte(b2 | 0x80);, +                    buf.writeByte(b3 | 0x80);, +                    buf.writeByte(b4);, +                out.add(buf);, +                out.add(data.retain());, +                release = false;, +            } finally {, +                if (release) {, +                    buf.release();, +                }, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameEncoder.java, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.MessageToMessageEncoder;, +, +import java.util.List;, +public class WebSocket00FrameEncoder extends MessageToMessageEncoder<WebSocketFrame> implements WebSocketFrameEncoder {, +    private static final ByteBuf _0X00 = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(1, 1).writeByte((byte) 0x00));, +    private static final ByteBuf _0XFF = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(1, 1).writeByte((byte) 0xFF));, +    private static final ByteBuf _0XFF_0X00 = Unpooled.unreleasableBuffer(, +            Unpooled.directBuffer(2, 2).writeByte((byte) 0xFF).writeByte((byte) 0x00));, +    protected void encode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {, +, +            out.add(_0X00.duplicate());, +            out.add(data.retain());, +            out.add(_0XFF.duplicate());, +            out.add(_0XFF_0X00);, +            ByteBuf buf = ctx.alloc().buffer(5);, +            boolean release = true;, +            try {, +                buf.writeByte((byte) 0x80);, +                            buf.writeByte(b4);, +                            buf.writeByte(b3 | 0x80);, +                            buf.writeByte(b4);, +                        buf.writeByte(b2 | 0x80);, +                        buf.writeByte(b3 | 0x80);, +                        buf.writeByte(b4);, +                    buf.writeByte(b1 | 0x80);, +                    buf.writeByte(b2 | 0x80);, +                    buf.writeByte(b3 | 0x80);, +                    buf.writeByte(b4);, +                out.add(buf);, +                out.add(data.retain());, +                release = false;, +            } finally {, +                if (release) {, +                    buf.release();, +                }, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameEncoder.java, +import io.netty.handler.codec.MessageToMessageEncoder;, +import java.util.List;, +public class WebSocket08FrameEncoder extends MessageToMessageEncoder<WebSocketFrame> implements WebSocketFrameEncoder {, +    protected void encode(ChannelHandlerContext ctx, WebSocketFrame msg, List<Object> out) throws Exception {, +        boolean release = true;, +        ByteBuf buf = null;, +        try {, +                int size = 2 + maskLength;, +                if (maskPayload) {, +                    size += length;, +                }, +                buf = ctx.alloc().buffer(size);, +                buf.writeByte(b0);, +                buf.writeByte(b);, +                int size = 4 + maskLength;, +                if (maskPayload) {, +                    size += length;, +                }, +                buf = ctx.alloc().buffer(size);]