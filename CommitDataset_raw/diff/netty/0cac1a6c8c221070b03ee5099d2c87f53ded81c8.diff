[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    private final PropertyKey upgradeKey;, +        upgradeKey = connection().newKey();, +                stream.setProperty(upgradeKey, true);, +        // upgraded requests are ineligible for stream control, +        if (streamId == Http2CodecUtil.HTTP_UPGRADE_STREAM_ID) {, +            Boolean upgraded = stream.getProperty(upgradeKey);, +            if (Boolean.TRUE.equals(upgraded)) {, +                return false;, +            }, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    private final PropertyKey upgradeKey;, +        upgradeKey = connection().newKey();, +                stream.setProperty(upgradeKey, true);, +        // upgraded requests are ineligible for stream control, +        if (streamId == Http2CodecUtil.HTTP_UPGRADE_STREAM_ID) {, +            Boolean upgraded = stream.getProperty(upgradeKey);, +            if (Boolean.TRUE.equals(upgraded)) {, +                return false;, +            }, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java, +    // note that this may behave strangely when used for the initial upgrade, +    // message when using h2c, since that message is ineligible for flow, +    // control, but there is not yet an API for signaling that., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    private final PropertyKey upgradeKey;, +        upgradeKey = connection().newKey();, +                stream.setProperty(upgradeKey, true);, +        // upgraded requests are ineligible for stream control, +        if (streamId == Http2CodecUtil.HTTP_UPGRADE_STREAM_ID) {, +            Boolean upgraded = stream.getProperty(upgradeKey);, +            if (Boolean.TRUE.equals(upgraded)) {, +                return false;, +            }, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/InboundHttpToHttp2Adapter.java, +    // note that this may behave strangely when used for the initial upgrade, +    // message when using h2c, since that message is ineligible for flow, +    // control, but there is not yet an API for signaling that., +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.util.ReferenceCountUtil;, +    @Test, +    public void upgradeWithoutFlowControlling() throws Exception {, +        channel.pipeline().addAfter(http2HandlerCtx.name(), null, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exception {, +                if (msg instanceof Http2DataFrame) {, +                    // Simulate consuming the frame and update the flow-controller., +                    Http2DataFrame data = (Http2DataFrame) msg;, +                    ctx.writeAndFlush(new DefaultHttp2WindowUpdateFrame(data.initialFlowControlledBytes()), +                            .stream(data.stream())).addListener(new ChannelFutureListener() {, +                        @Override, +                        public void operationComplete(ChannelFuture future) throws Exception {, +                            Throwable cause = future.cause();, +                            if (cause != null) {, +                                ctx.fireExceptionCaught(cause);, +                            }, +                        }, +                    });, +                }, +                ReferenceCountUtil.release(msg);, +            }, +        });, +, +        frameListener.onHeadersRead(http2HandlerCtx, Http2CodecUtil.HTTP_UPGRADE_STREAM_ID, request, 31, false);, +, +        // Using reflect as the constructor is package-private and the class is final., +        Constructor<UpgradeEvent> constructor =, +                UpgradeEvent.class.getDeclaredConstructor(CharSequence.class, FullHttpRequest.class);, +, +        // Check if we could make it accessible which may fail on java9., +        Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor) == null);, +, +        String longString = new String(new char[70000]).replace("\0", "*");, +        DefaultFullHttpRequest request =, +            new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/", bb(longString));, +, +        HttpServerUpgradeHandler.UpgradeEvent upgradeEvent = constructor.newInstance(, +            "HTTP/2", request);, +        channel.pipeline().fireUserEventTriggered(upgradeEvent);, +    }, +]