[+++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2FrameReaderTest.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.*;, +import static io.netty.handler.codec.http2.Http2FrameTypes.*;, +import static org.mockito.Mockito.*;, +, +    @Test, +    public void readUnknownFrame() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();, +        ByteBuf payload = Unpooled.buffer();, +        try {, +            payload.writeByte(1);, +, +            writeFrameHeader(input, payload.readableBytes(), (byte) 0xff, new Http2Flags(), 0);, +            input.writeBytes(payload);, +            frameReader.readFrame(ctx, input, listener);, +, +            verify(listener).onUnknownFrame(, +                    ctx, (byte) 0xff, 0, new Http2Flags(), payload.slice(0, 1));, +        } finally {, +            payload.release();, +            input.release();, +        }, +    }, +, +    @Test(expected = Http2Exception.class), +    public void failedWhenContinuationFrameStreamIdMismatch() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();, +        try {, +            Http2Headers headers = new DefaultHttp2Headers(), +                    .authority("foo"), +                    .method("get"), +                    .path("/"), +                    .scheme("https");, +            writeHeaderFrame(input, 1, headers,, +                             new Http2Flags().endOfHeaders(false).endOfStream(true));, +            writeContinuationFrame(input, 3, new DefaultHttp2Headers().add("foo", "bar"),, +                    new Http2Flags().endOfHeaders(true));, +            frameReader.readFrame(ctx, input, listener);, +        } finally {, +            input.release();, +        }, +    }, +, +    @Test(expected = Http2Exception.class), +    public void failedWhenContinuationFrameNotFollowHeaderFrame() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();, +        try {, +            writeContinuationFrame(input, 1, new DefaultHttp2Headers().add("foo", "bar"),, +                                   new Http2Flags().endOfHeaders(true));, +            frameReader.readFrame(ctx, input, listener);, +        } finally {, +            input.release();, +        }, +    }, +, +    @Test(expected = Http2Exception.class), +    public void failedWhenHeaderFrameDependsOnItself() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();, +        try {, +            Http2Headers headers = new DefaultHttp2Headers(), +                    .authority("foo"), +                    .method("get"), +                    .path("/"), +                    .scheme("https");, +            writeHeaderFramePriorityPresent(, +                    input, 1, headers,, +                    new Http2Flags().endOfHeaders(true).endOfStream(true).priorityPresent(true),, +                    1, 10);, +            frameReader.readFrame(ctx, input, listener);, +        } finally {, +            input.release();, +        }, +    }, +, +    @Test, +    public void readHeaderAndData() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();, +        ByteBuf dataPayload = Unpooled.buffer();, +        try {, +            Http2Headers headers = new DefaultHttp2Headers(), +                    .authority("foo"), +                    .method("get"), +                    .path("/"), +                    .scheme("https");, +            dataPayload.writeByte(1);, +            writeHeaderFrameWithData(input, 1, headers, dataPayload);, +, +            frameReader.readFrame(ctx, input, listener);, +, +            verify(listener).onHeadersRead(ctx, 1, headers, 0, false);, +            verify(listener).onDataRead(ctx, 1, dataPayload.slice(0, 1), 0, true);, +        } finally {, +            input.release();, +            dataPayload.release();, +        }, +    }, +, +    @Test(expected = Http2Exception.class), +    public void failedWhenDataFrameNotAssociateWithStream() throws Http2Exception {, +        ByteBuf input = Unpooled.buffer();]