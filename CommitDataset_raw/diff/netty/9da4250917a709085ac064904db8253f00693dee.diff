[+++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.util.AbstractCollection;, +import java.util.Collection;, +            }, +            if (keys[index] == key) {, +    public Collection<V> values() {, +        return new AbstractCollection<V>() {, +            @Override, +            public Iterator<V> iterator() {, +                return new Iterator<V>() {, +                    final Iterator<Entry<V>> iter = IntObjectHashMap.this.iterator();, +                    @Override, +                    public boolean hasNext() {, +                        return iter.hasNext();, +, +                    @Override, +                    public V next() {, +                        return iter.next().value();, +, +                    @Override, +                    public void remove() {, +                        throw new UnsupportedOperationException();, +                    }, +                };, +            }, +, +            @Override, +            public int size() {, +                return size;, +            }, +        };, +                sb.append(keyToString(keys[i])).append('=').append(value == this ? "(this Map)" : value);, +, +    /**, +     * Helper method called by {@link #toString()} in order to convert a single map key into a string., +     */, +    protected String keyToString(int key) {, +        return Integer.toString(key);, +    }, +++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.util.AbstractCollection;, +import java.util.Collection;, +            }, +            if (keys[index] == key) {, +    public Collection<V> values() {, +        return new AbstractCollection<V>() {, +            @Override, +            public Iterator<V> iterator() {, +                return new Iterator<V>() {, +                    final Iterator<Entry<V>> iter = IntObjectHashMap.this.iterator();, +                    @Override, +                    public boolean hasNext() {, +                        return iter.hasNext();, +, +                    @Override, +                    public V next() {, +                        return iter.next().value();, +, +                    @Override, +                    public void remove() {, +                        throw new UnsupportedOperationException();, +                    }, +                };, +            }, +, +            @Override, +            public int size() {, +                return size;, +            }, +        };, +                sb.append(keyToString(keys[i])).append('=').append(value == this ? "(this Map)" : value);, +, +    /**, +     * Helper method called by {@link #toString()} in order to convert a single map key into a string., +     */, +    protected String keyToString(int key) {, +        return Integer.toString(key);, +    }, +++ b/common/src/main/java/io/netty/util/collection/IntObjectMap.java, +import java.util.Collection;, +, +    Collection<V> values();, +++ b/common/src/main/java/io/netty/util/collection/IntObjectHashMap.java, +import java.util.AbstractCollection;, +import java.util.Collection;, +            }, +            if (keys[index] == key) {, +    public Collection<V> values() {, +        return new AbstractCollection<V>() {, +            @Override, +            public Iterator<V> iterator() {, +                return new Iterator<V>() {, +                    final Iterator<Entry<V>> iter = IntObjectHashMap.this.iterator();, +                    @Override, +                    public boolean hasNext() {, +                        return iter.hasNext();, +, +                    @Override, +                    public V next() {, +                        return iter.next().value();]