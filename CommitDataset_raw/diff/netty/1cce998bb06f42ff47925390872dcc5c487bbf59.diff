[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.util.internal.EmptyArrays;, +import java.nio.channels.ClosedChannelException;, +    private static final ClosedChannelException CLOSED_CHANNEL_EXCEPTION = new ClosedChannelException();, +, +    static {, +        CLOSED_CHANNEL_EXCEPTION.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +    }, +, +    /**, +     * The future of the current connection attempt.  If not null, subsequent, +     * connection attempts will fail., +     */, +    private ChannelPromise connectPromise;, +    private ScheduledFuture<?> connectTimeoutFuture;, +    private SocketAddress requestedRemoteAddress;, +    @Override, +    protected void doClose() throws Exception {, +        ChannelPromise promise = connectPromise;, +        if (promise != null) {, +            // Use tryFailure() instead of setFailure() to avoid the race against cancel()., +            promise.tryFailure(CLOSED_CHANNEL_EXCEPTION);, +            connectPromise = null;, +        }, +, +        ScheduledFuture<?> future = connectTimeoutFuture;, +        if (future != null) {, +            future.cancel(false);, +            connectTimeoutFuture = null;, +        }, +        super.doClose();, +    }, +, +                                ChannelPromise connectPromise = AbstractEpollStreamChannel.this.connectPromise;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.util.internal.EmptyArrays;, +import java.nio.channels.ClosedChannelException;, +    private static final ClosedChannelException CLOSED_CHANNEL_EXCEPTION = new ClosedChannelException();, +, +    static {, +        CLOSED_CHANNEL_EXCEPTION.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +    }, +, +    /**, +     * The future of the current connection attempt.  If not null, subsequent, +     * connection attempts will fail., +     */, +    private ChannelPromise connectPromise;, +    private ScheduledFuture<?> connectTimeoutFuture;, +    private SocketAddress requestedRemoteAddress;, +    @Override, +    protected void doClose() throws Exception {, +        ChannelPromise promise = connectPromise;, +        if (promise != null) {, +            // Use tryFailure() instead of setFailure() to avoid the race against cancel()., +            promise.tryFailure(CLOSED_CHANNEL_EXCEPTION);, +            connectPromise = null;, +        }, +, +        ScheduledFuture<?> future = connectTimeoutFuture;, +        if (future != null) {, +            future.cancel(false);, +            connectTimeoutFuture = null;, +        }, +        super.doClose();, +    }, +, +                                ChannelPromise connectPromise = AbstractEpollStreamChannel.this.connectPromise;, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +import io.netty.util.internal.EmptyArrays;, +import java.nio.channels.ClosedChannelException;, +    private static final ClosedChannelException CLOSED_CHANNEL_EXCEPTION = new ClosedChannelException();, +, +    static {, +        CLOSED_CHANNEL_EXCEPTION.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +    }, +, +, +    @Override, +    protected void doClose() throws Exception {, +        ChannelPromise promise = connectPromise;, +        if (promise != null) {, +            // Use tryFailure() instead of setFailure() to avoid the race against cancel()., +            promise.tryFailure(CLOSED_CHANNEL_EXCEPTION);, +            connectPromise = null;, +        }, +, +        ScheduledFuture<?> future = connectTimeoutFuture;, +        if (future != null) {, +            future.cancel(false);, +            connectTimeoutFuture = null;, +        }, +    }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +import io.netty.util.internal.EmptyArrays;, +import java.nio.channels.ClosedChannelException;, +    private static final ClosedChannelException CLOSED_CHANNEL_EXCEPTION = new ClosedChannelException();, +, +    static {, +        CLOSED_CHANNEL_EXCEPTION.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);]