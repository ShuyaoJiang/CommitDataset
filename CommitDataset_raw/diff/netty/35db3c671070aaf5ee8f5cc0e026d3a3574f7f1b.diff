[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder(), +            .append(StringUtil.simpleClassName(this)), +            .append("(ridx: ").append(readerIndex), +            .append(", widx: ").append(writerIndex), +            .append(", cap: ").append(capacity());, +            buf.append('/').append(maxCapacity);, +            buf.append(", unwrapped: ").append(unwrapped);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder(), +            .append(StringUtil.simpleClassName(this)), +            .append("(ridx: ").append(readerIndex), +            .append(", widx: ").append(writerIndex), +            .append(", cap: ").append(capacity());, +            buf.append('/').append(maxCapacity);, +            buf.append(", unwrapped: ").append(unwrapped);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        StringBuilder buf = new StringBuilder(), +            .append("Chunk(s) at 0~25%:"), +            .append(StringUtil.NEWLINE), +            .append(qInit), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 0~50%:"), +            .append(StringUtil.NEWLINE), +            .append(q000), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 25~75%:"), +            .append(StringUtil.NEWLINE), +            .append(q025), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 50~100%:"), +            .append(StringUtil.NEWLINE), +            .append(q050), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 75~100%:"), +            .append(StringUtil.NEWLINE), +            .append(q075), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 100%:"), +            .append(StringUtil.NEWLINE), +            .append(q100), +            .append(StringUtil.NEWLINE), +            .append("tiny subpages:");, +            buf.append(StringUtil.NEWLINE), +               .append(i), +               .append(": ");, +        buf.append(StringUtil.NEWLINE), +           .append("small subpages:");, +            buf.append(StringUtil.NEWLINE), +               .append(i), +               .append(": ");, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        StringBuilder buf = new StringBuilder(), +            .append(StringUtil.simpleClassName(this)), +            .append("(ridx: ").append(readerIndex), +            .append(", widx: ").append(writerIndex), +            .append(", cap: ").append(capacity());, +            buf.append('/').append(maxCapacity);, +            buf.append(", unwrapped: ").append(unwrapped);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        StringBuilder buf = new StringBuilder(), +            .append("Chunk(s) at 0~25%:"), +            .append(StringUtil.NEWLINE), +            .append(qInit), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 0~50%:"), +            .append(StringUtil.NEWLINE), +            .append(q000), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 25~75%:"), +            .append(StringUtil.NEWLINE), +            .append(q025), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 50~100%:"), +            .append(StringUtil.NEWLINE), +            .append(q050), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 75~100%:"), +            .append(StringUtil.NEWLINE), +            .append(q075), +            .append(StringUtil.NEWLINE), +            .append("Chunk(s) at 100%:"), +            .append(StringUtil.NEWLINE), +            .append(q100), +            .append(StringUtil.NEWLINE), +            .append("tiny subpages:");, +            buf.append(StringUtil.NEWLINE), +               .append(i), +               .append(": ");, +        buf.append(StringUtil.NEWLINE), +           .append("small subpages:");, +            buf.append(StringUtil.NEWLINE), +               .append(i), +               .append(": ");, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunk.java, +        return new StringBuilder(), +            .append("Chunk("), +            .append(Integer.toHexString(System.identityHashCode(this))), +            .append(": "), +            .append(usage())]