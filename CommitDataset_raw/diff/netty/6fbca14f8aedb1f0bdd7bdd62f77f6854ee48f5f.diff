[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, + * A decorating HTTP2 encoder that will compress data frames according to the {@code content-encoding} header for each, + * stream. The compression provided by this class will be applied to the data for the entire stream., +public class CompressorHttp2ConnectionEncoder extends DecoratingHttp2ConnectionEncoder {, +    public static final int DEFAULT_COMPRESSION_LEVEL = 6;, +    public static final int DEFAULT_WINDOW_BITS = 15;, +    public static final int DEFAULT_MEM_LEVEL = 8;, +, +    public CompressorHttp2ConnectionEncoder(Http2ConnectionEncoder delegate) {, +        this(delegate, DEFAULT_COMPRESSION_LEVEL, DEFAULT_WINDOW_BITS, DEFAULT_MEM_LEVEL);, +    }, +    public CompressorHttp2ConnectionEncoder(Http2ConnectionEncoder delegate, int compressionLevel, int windowBits,, +                                            int memLevel) {, +        super(delegate);, +        if (compressionLevel < 0 || compressionLevel > 9) {, +            throw new IllegalArgumentException("compressionLevel: " + compressionLevel + " (expected: 0-9)");, +        }, +        if (windowBits < 9 || windowBits > 15) {, +            throw new IllegalArgumentException("windowBits: " + windowBits + " (expected: 9-15)");, +        }, +        if (memLevel < 1 || memLevel > 9) {, +            throw new IllegalArgumentException("memLevel: " + memLevel + " (expected: 1-9)");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, + * A decorating HTTP2 encoder that will compress data frames according to the {@code content-encoding} header for each, + * stream. The compression provided by this class will be applied to the data for the entire stream., +public class CompressorHttp2ConnectionEncoder extends DecoratingHttp2ConnectionEncoder {, +    public static final int DEFAULT_COMPRESSION_LEVEL = 6;, +    public static final int DEFAULT_WINDOW_BITS = 15;, +    public static final int DEFAULT_MEM_LEVEL = 8;, +, +    public CompressorHttp2ConnectionEncoder(Http2ConnectionEncoder delegate) {, +        this(delegate, DEFAULT_COMPRESSION_LEVEL, DEFAULT_WINDOW_BITS, DEFAULT_MEM_LEVEL);, +    }, +    public CompressorHttp2ConnectionEncoder(Http2ConnectionEncoder delegate, int compressionLevel, int windowBits,, +                                            int memLevel) {, +        super(delegate);, +        if (compressionLevel < 0 || compressionLevel > 9) {, +            throw new IllegalArgumentException("compressionLevel: " + compressionLevel + " (expected: 0-9)");, +        }, +        if (windowBits < 9 || windowBits > 15) {, +            throw new IllegalArgumentException("windowBits: " + windowBits + " (expected: 9-15)");, +        }, +        if (memLevel < 1 || memLevel > 9) {, +            throw new IllegalArgumentException("memLevel: " + memLevel + " (expected: 1-9)");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2ConnectionDecoder.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.handler.codec.http2;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandlerContext;, +, +import java.util.List;, +, +/**, + * Decorator around another {@link Http2ConnectionDecoder} instance., + */, +public class DecoratingHttp2ConnectionDecoder implements Http2ConnectionDecoder {, +    private final Http2ConnectionDecoder delegate;, +, +    public DecoratingHttp2ConnectionDecoder(Http2ConnectionDecoder delegate) {, +        this.delegate = checkNotNull(delegate, "delegate");, +    }, +, +    @Override, +    public void lifecycleManager(Http2LifecycleManager lifecycleManager) {, +        delegate.lifecycleManager(lifecycleManager);, +    }, +, +    @Override, +    public Http2Connection connection() {, +        return delegate.connection();, +    }, +, +    @Override, +    public Http2LocalFlowController flowController() {, +        return delegate.flowController();, +    }, +, +    @Override, +    public Http2FrameListener listener() {, +        return delegate.listener();, +    }, +]