[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +        headersLength += HpackHeaderField.sizeOf(name, value);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HpackDecoder.java, +        headersLength += HpackHeaderField.sizeOf(name, value);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/HpackDecoderTest.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.junit.Assert.assertThat;, +    @Rule, +    public ExpectedException expectedException = ExpectedException.none();, +, +        ByteBuf in = Unpooled.buffer(300);, +            hpackDecoder.setMaxHeaderListSize(200, 300);, +, +    @Test, +    public void testAccountForHeaderOverhead() throws Exception {, +        ByteBuf in = Unpooled.buffer(100);, +        try {, +            String headerName = "12345";, +            String headerValue = "56789";, +            long headerSize = headerName.length() + headerValue.length();, +            hpackDecoder.setMaxHeaderListSize(headerSize, 100);, +            HpackEncoder hpackEncoder = new HpackEncoder(true);, +, +            Http2Headers toEncode = new DefaultHttp2Headers();, +            toEncode.add(headerName, headerValue);, +            hpackEncoder.encodeHeaders(1, in, toEncode, NEVER_SENSITIVE);, +, +            Http2Headers decoded = new DefaultHttp2Headers();, +, +            // SETTINGS_MAX_HEADER_LIST_SIZE is big enough for the header to fit..., +            assertThat(hpackDecoder.getMaxHeaderListSize(), is(greaterThanOrEqualTo(headerSize)));, +, +            // ... but decode should fail because we add some overhead for each header entry, +            expectedException.expect(Http2Exception.HeaderListSizeException.class);, +            hpackDecoder.decode(1, in, decoded);, +        } finally {, +            in.release();, +        }, +    }]