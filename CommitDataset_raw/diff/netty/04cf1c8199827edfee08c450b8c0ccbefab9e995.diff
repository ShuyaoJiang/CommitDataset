[+++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutor.java, +    private static final int DEFAULT_POOL_SIZE = Runtime.getRuntime().availableProcessors() * 2;, +    private static final AtomicInteger poolId = new AtomicInteger();, +        this(nThreads, null, args);, +, +            threadFactory = new DefaultThreadFactory();, +, +    private final class DefaultThreadFactory implements ThreadFactory {, +        private final AtomicInteger nextId = new AtomicInteger();, +        private final String prefix;, +, +        DefaultThreadFactory() {, +            String typeName = MultithreadEventExecutor.this.getClass().getSimpleName();, +            typeName = "" + Character.toLowerCase(typeName.charAt(0)) + typeName.substring(1);, +            prefix = typeName + '-' + poolId.incrementAndGet() + '-';, +        }, +, +        @Override, +        public Thread newThread(Runnable r) {, +            Thread t = new Thread(r, prefix + nextId.incrementAndGet());, +            try {, +                if (t.isDaemon()) {, +                    t.setDaemon(false);, +                }, +                if (t.getPriority() != Thread.MAX_PRIORITY) {, +                    t.setPriority(Thread.MAX_PRIORITY);, +                }, +            } catch (Exception ignored) {, +                // Doesn't matter even if failed to set., +            }, +            return t;, +        }, +    }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutor.java, +    private static final int DEFAULT_POOL_SIZE = Runtime.getRuntime().availableProcessors() * 2;, +    private static final AtomicInteger poolId = new AtomicInteger();, +        this(nThreads, null, args);, +, +            threadFactory = new DefaultThreadFactory();, +, +    private final class DefaultThreadFactory implements ThreadFactory {, +        private final AtomicInteger nextId = new AtomicInteger();, +        private final String prefix;, +, +        DefaultThreadFactory() {, +            String typeName = MultithreadEventExecutor.this.getClass().getSimpleName();, +            typeName = "" + Character.toLowerCase(typeName.charAt(0)) + typeName.substring(1);, +            prefix = typeName + '-' + poolId.incrementAndGet() + '-';, +        }, +, +        @Override, +        public Thread newThread(Runnable r) {, +            Thread t = new Thread(r, prefix + nextId.incrementAndGet());, +            try {, +                if (t.isDaemon()) {, +                    t.setDaemon(false);, +                }, +                if (t.getPriority() != Thread.MAX_PRIORITY) {, +                    t.setPriority(Thread.MAX_PRIORITY);, +                }, +            } catch (Exception ignored) {, +                // Doesn't matter even if failed to set., +            }, +            return t;, +        }, +    }, +++ b/transport/src/main/java/io/netty/channel/SingleThreadEventExecutor.java, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutor.java, +    private static final int DEFAULT_POOL_SIZE = Runtime.getRuntime().availableProcessors() * 2;, +    private static final AtomicInteger poolId = new AtomicInteger();, +        this(nThreads, null, args);, +, +            threadFactory = new DefaultThreadFactory();, +, +    private final class DefaultThreadFactory implements ThreadFactory {, +        private final AtomicInteger nextId = new AtomicInteger();, +        private final String prefix;, +, +        DefaultThreadFactory() {, +            String typeName = MultithreadEventExecutor.this.getClass().getSimpleName();, +            typeName = "" + Character.toLowerCase(typeName.charAt(0)) + typeName.substring(1);, +            prefix = typeName + '-' + poolId.incrementAndGet() + '-';, +        }, +, +        @Override, +        public Thread newThread(Runnable r) {, +            Thread t = new Thread(r, prefix + nextId.incrementAndGet());, +            try {, +                if (t.isDaemon()) {, +                    t.setDaemon(false);, +                }, +                if (t.getPriority() != Thread.MAX_PRIORITY) {, +                    t.setPriority(Thread.MAX_PRIORITY);, +                }, +            } catch (Exception ignored) {, +                // Doesn't matter even if failed to set., +            }, +            return t;, +        }, +    }]