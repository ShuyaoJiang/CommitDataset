[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +     * It is preferable to use {@link EventExecutor#newProgressivePromise()} to create a new progressive promise, +    public DefaultProgressivePromise(EventExecutor executor) {, +    protected DefaultProgressivePromise() { /* only for subclasses */ }, +    public ProgressivePromise<V> setProgress(long progress, long total) {, +                    "progress: " + progress + " (expected: 0 <= progress <= total (" + total + "))");, +        notifyProgressiveListeners(progress, total);, +    public boolean tryProgress(long progress, long total) {, +        notifyProgressiveListeners(progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +     * It is preferable to use {@link EventExecutor#newProgressivePromise()} to create a new progressive promise, +    public DefaultProgressivePromise(EventExecutor executor) {, +    protected DefaultProgressivePromise() { /* only for subclasses */ }, +    public ProgressivePromise<V> setProgress(long progress, long total) {, +                    "progress: " + progress + " (expected: 0 <= progress <= total (" + total + "))");, +        notifyProgressiveListeners(progress, total);, +    public boolean tryProgress(long progress, long total) {, +        notifyProgressiveListeners(progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +    void notifyProgressiveListeners(final long progress, final long total) {, +                notifyProgressiveListeners0(, +                        self, (GenericProgressiveFutureListener<?>[]) listeners, progress, total);, +                        self, (GenericProgressiveFutureListener<ProgressiveFuture<V>>) listeners, progress, total);, +                            notifyProgressiveListeners0(self, array, progress, total);, +                            notifyProgressiveListener0(self, l, progress, total);, +            ProgressiveFuture<?> future, GenericProgressiveFutureListener<?>[] listeners, long progress, long total) {, +            notifyProgressiveListener0(future, l, progress, total);, +            ProgressiveFuture future, GenericProgressiveFutureListener l, long progress, long total) {, +            l.operationProgressed(future, progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +     * It is preferable to use {@link EventExecutor#newProgressivePromise()} to create a new progressive promise, +    public DefaultProgressivePromise(EventExecutor executor) {, +    protected DefaultProgressivePromise() { /* only for subclasses */ }, +    public ProgressivePromise<V> setProgress(long progress, long total) {, +                    "progress: " + progress + " (expected: 0 <= progress <= total (" + total + "))");, +        notifyProgressiveListeners(progress, total);, +    public boolean tryProgress(long progress, long total) {, +        notifyProgressiveListeners(progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +    void notifyProgressiveListeners(final long progress, final long total) {, +                notifyProgressiveListeners0(, +                        self, (GenericProgressiveFutureListener<?>[]) listeners, progress, total);, +                        self, (GenericProgressiveFutureListener<ProgressiveFuture<V>>) listeners, progress, total);, +                            notifyProgressiveListeners0(self, array, progress, total);, +                            notifyProgressiveListener0(self, l, progress, total);, +            ProgressiveFuture<?> future, GenericProgressiveFutureListener<?>[] listeners, long progress, long total) {, +            notifyProgressiveListener0(future, l, progress, total);, +            ProgressiveFuture future, GenericProgressiveFutureListener l, long progress, long total) {, +            l.operationProgressed(future, progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +    <V> ProgressivePromise<V> newProgressivePromise();, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +     * It is preferable to use {@link EventExecutor#newProgressivePromise()} to create a new progressive promise, +    public DefaultProgressivePromise(EventExecutor executor) {, +    protected DefaultProgressivePromise() { /* only for subclasses */ }, +    public ProgressivePromise<V> setProgress(long progress, long total) {, +                    "progress: " + progress + " (expected: 0 <= progress <= total (" + total + "))");, +        notifyProgressiveListeners(progress, total);, +    public boolean tryProgress(long progress, long total) {, +        notifyProgressiveListeners(progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +    void notifyProgressiveListeners(final long progress, final long total) {, +                notifyProgressiveListeners0(, +                        self, (GenericProgressiveFutureListener<?>[]) listeners, progress, total);, +                        self, (GenericProgressiveFutureListener<ProgressiveFuture<V>>) listeners, progress, total);, +                            notifyProgressiveListeners0(self, array, progress, total);, +                            notifyProgressiveListener0(self, l, progress, total);, +            ProgressiveFuture<?> future, GenericProgressiveFutureListener<?>[] listeners, long progress, long total) {, +            notifyProgressiveListener0(future, l, progress, total);, +            ProgressiveFuture future, GenericProgressiveFutureListener l, long progress, long total) {, +            l.operationProgressed(future, progress, total);, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +    <V> ProgressivePromise<V> newProgressivePromise();, +++ b/common/src/main/java/io/netty/util/concurrent/GenericProgressiveFutureListener.java, +    void operationProgressed(F future, long progress, long total) throws Exception;, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +    public <V> ProgressivePromise<V> newProgressivePromise() {, +        return new DefaultProgressivePromise<V>(this);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +     * It is preferable to use {@link EventExecutor#newProgressivePromise()} to create a new progressive promise, +    public DefaultProgressivePromise(EventExecutor executor) {, +    protected DefaultProgressivePromise() { /* only for subclasses */ }, +    public ProgressivePromise<V> setProgress(long progress, long total) {, +                    "progress: " + progress + " (expected: 0 <= progress <= total (" + total + "))");, +        notifyProgressiveListeners(progress, total);]