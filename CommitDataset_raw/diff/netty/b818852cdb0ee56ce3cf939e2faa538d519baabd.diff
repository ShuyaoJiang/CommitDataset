[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, +                        // Test that the channel's localAddress is equal to the message's recipient, +                        assertEquals(ctx.channel().localAddress(), msg.recipient());, +, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, +                        // Test that the channel's localAddress is equal to the message's recipient, +                        assertEquals(ctx.channel().localAddress(), msg.recipient());, +, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpRecvOrigDestAddr", "(II)V", (void *) netty_epoll_linuxsocket_setIpRecvOrigDestAddr },, +  { "isIpRecvOrigDestAddr", "(I)I", (void *) netty_epoll_linuxsocket_isIpRecvOrigDestAddr },, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, +                        // Test that the channel's localAddress is equal to the message's recipient, +                        assertEquals(ctx.channel().localAddress(), msg.recipient());, +, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpRecvOrigDestAddr", "(II)V", (void *) netty_epoll_linuxsocket_setIpRecvOrigDestAddr },, +  { "isIpRecvOrigDestAddr", "(I)I", (void *) netty_epoll_linuxsocket_isIpRecvOrigDestAddr },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_RECVORIGDSTADDR = valueOf("IP_RECVORIGDSTADDR");, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, +                        // Test that the channel's localAddress is equal to the message's recipient, +                        assertEquals(ctx.channel().localAddress(), msg.recipient());, +, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpRecvOrigDestAddr", "(II)V", (void *) netty_epoll_linuxsocket_setIpRecvOrigDestAddr },, +  { "isIpRecvOrigDestAddr", "(I)I", (void *) netty_epoll_linuxsocket_isIpRecvOrigDestAddr },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_RECVORIGDSTADDR = valueOf("IP_RECVORIGDSTADDR");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, +                        InetSocketAddress localAddress = remoteAddress.localAddress();, +                        if (localAddress == null) {, +                            localAddress = (InetSocketAddress) localAddress();, +                        }, +, +                                new DatagramPacket(data, localAddress, remoteAddress));, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +, +                        // Test that the channel's localAddress is equal to the message's recipient, +                        assertEquals(ctx.channel().localAddress(), msg.recipient());, +, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +static void netty_epoll_linuxsocket_setIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval));, +}, +, +static jint netty_epoll_linuxsocket_isIpRecvOrigDestAddr(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_RECVORIGDSTADDR, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +  { "setIpRecvOrigDestAddr", "(II)V", (void *) netty_epoll_linuxsocket_setIpRecvOrigDestAddr },, +  { "isIpRecvOrigDestAddr", "(I)I", (void *) netty_epoll_linuxsocket_isIpRecvOrigDestAddr },, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_RECVORIGDSTADDR = valueOf("IP_RECVORIGDSTADDR");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDatagramChannel.java, +                        InetSocketAddress localAddress = remoteAddress.localAddress();]