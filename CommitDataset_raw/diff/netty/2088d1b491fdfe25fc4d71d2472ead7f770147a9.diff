[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(NioSocketChannel.class);, +, +    private static ByteBuffer[] getNioBufferArray() {, +        return BUFFERS.get();, +    }, +    private static ByteBuffer[] doubleNioBufferArray(ByteBuffer[] array, int size) {, +        ByteBuffer[] newArray = new ByteBuffer[array.length << 1];, +        System.arraycopy(array, 0, newArray, 0, size);, +        BUFFERS.set(newArray);, +        return newArray;, +    }, +    private final SocketChannelConfig config;, +, +, +        // Do non-gathering write for a single buffer case., +        if (size <= 1 || !msgs.containsOnly(ByteBuf.class)) {, +            return super.doWrite(msgs, index);, +        }, +, +        ByteBuffer[] nioBuffers = getNioBufferArray();, +        int nioBufferCnt = 0;, +                if (nioBufferCnt == nioBuffers.length) {, +                    nioBuffers = doubleNioBufferArray(nioBuffers, nioBufferCnt);, +                }, +                nioBuffers[nioBufferCnt ++] = buf.nioBuffer();, +                if (nioBufferCnt + nioBufs.length == nioBuffers.length + 1) {, +                    nioBuffers = doubleNioBufferArray(nioBuffers, nioBufferCnt);, +                }, +                for (ByteBuffer nioBuf: nioBufs) {, +                    if (nioBuf == null) {, +                        break;, +                    }, +                    nioBuffers[nioBufferCnt ++] = nioBuf;, +                }, +        long writtenBytes = 0;, +            final long localWrittenBytes = javaChannel().write(nioBuffers, 0, nioBufferCnt);, +            return size - index;, +            // Did not write all buffers completely., +            // Release the fully written buffers and update the indexes of the partially written buffer., +            int writtenBufs = 0;, +                if (readable < writtenBytes) {, +                } else if (readable > writtenBytes) {, +                } else { // readable == writtenBytes, +                    writtenBufs ++;, +                    buf.release();, +                    break;]