[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/handler/codec/rtsp/RtspMethods.java, +/*, + * Copyright 2010 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.codec.rtsp;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.jboss.netty.handler.codec.http.HttpMethod;, +, +/**, + * The request method of RTSP., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Amit Bhayani (amit.bhayani@gmail.com), + * @author Trustin Lee (trustin@gmail.com), + * @version $Rev$, $Date$, + */, +public class RtspMethods {, +, +    /**, +     * The OPTIONS method represents a request for information about the communication options available on the request/response, +     * chain identified by the Request-URI. This method allows the client to determine the options and/or requirements, +     * associated with a resource, or the capabilities of a server, without implying a resource action or initiating a, +     * resource retrieval., +     */, +    public static final HttpMethod OPTIONS = HttpMethod.OPTIONS;, +, +    /**, +     * The DESCRIBE method retrieves the description of a presentation or, +     * media object identified by the request URL from a server., +     */, +    public static final HttpMethod DESCRIBE = new HttpMethod("DESCRIBE");, +, +    /**, +     * The ANNOUNCE posts the description of a presentation or media object, +     * identified by the request URL to a server, or updates the client-side, +     * session description in real-time., +     */, +    public static final HttpMethod ANNOUNCE = new HttpMethod("ANNOUNCE");, +, +    /**, +     * The SETUP request for a URI specifies the transport mechanism to be, +     * used for the streamed media., +     */, +    public static final HttpMethod SETUP = new HttpMethod("SETUP");, +, +    /**, +     * The PLAY method tells the server to start sending data via the, +     * mechanism specified in SETUP., +     */, +    public static final HttpMethod PLAY = new HttpMethod("PLAY");, +, +    /**, +     * The PAUSE request causes the stream delivery to be interrupted, +     * (halted) temporarily., +     */, +    public static final HttpMethod PAUSE = new HttpMethod("PAUSE");, +, +    /**, +     * The TEARDOWN request stops the stream delivery for the given URI,, +     * freeing the resources associated with it., +     */, +    public static final HttpMethod TEARDOWN = new HttpMethod("TEARDOWN");, +, +    /**, +     * The GET_PARAMETER request retrieves the value of a parameter of a, +     * presentation or stream specified in the URI., +     */, +    public static final HttpMethod GET_PARAMETER = new HttpMethod("GET_PARAMETER");, +, +    /**, +     * The SET_PARAMETER requests to set the value of a parameter for a, +     * presentation or stream specified by the URI., +     */, +    public static final HttpMethod SET_PARAMETER = new HttpMethod("SET_PARAMETER");, +, +    /**, +     * The REDIRECT request informs the client that it must connect to another, +     * server location., +     */, +    public static final HttpMethod REDIRECT = new HttpMethod("REDIRECT");, +, +    /**, +     * The RECORD method initiates recording a range of media data according to]