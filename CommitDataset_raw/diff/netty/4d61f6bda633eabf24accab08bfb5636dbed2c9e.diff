[+++ b/src/main/java/org/jboss/netty/handler/trafficshaping/PerformanceCounter.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2009, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.handler.trafficshaping;, +, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Future;, +import java.util.concurrent.atomic.AtomicLong;, +, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + * @author Frederic Bregier (fredbregier@free.fr), + * @version $Rev$, $Date$, + * , + * PerformanceCounter is associated with {@link TrafficShapingHandler} and should be created through, + * a {@link PerformanceCounterFactory}.<br>, + * <br>, + * A PerformanceCounter can limit the traffic or not, globaly or per channel, and always, + * compute statistics on read and written bytes at the specified interval. , + * , + */, +public class PerformanceCounter implements Runnable {, +	/**, +	 * Internal logger, +	 */, +	private static InternalLogger logger = , +		InternalLoggerFactory.getInstance(PerformanceCounter.class);, +	, +	/**, +	 * Current writing bytes, +	 */, +	private final AtomicLong currentWritingBytes = new AtomicLong(0);, +	/**, +	 * Current reading bytes, +	 */, +	private final AtomicLong currentReadingBytes = new AtomicLong(0);, +	/**, +	 * Last writing bandwidth, +	 */, +	private long lastWritingBandwidth = 0;, +	/**, +	 * Last reading bandwidth, +	 */, +	private long lastReadingBandwidth = 0;, +	/**, +	 * Last Time Check taken, +	 */, +	private final AtomicLong lastTime = new AtomicLong(0);, +	/**, +	 * Last written bytes number, +	 */, +	private long lastWritingBytes = 0;, +	/**, +	 * Last read bytes number, +	 */, +	private long lastReadingBytes = 0;, +	/**, +	 * Current Limit in B/s to apply to write, +	 */, +	private long limitWrite = PerformanceCounterFactory.NO_LIMIT;, +	/**, +	 * Current Limit in B/s to apply to read, +	 */, +	private long limitRead = PerformanceCounterFactory.NO_LIMIT;, +	/**, +	 * Delay between two capture, +	 */, +	private long delay = PerformanceCounterFactory.DEFAULT_DELAY; // default 1 s, +	/**, +	 * Name of this Monitor, +	 */, +	private final String name;, +	/**, +	 * Is this monitor for a channel monitoring or for global monitoring]