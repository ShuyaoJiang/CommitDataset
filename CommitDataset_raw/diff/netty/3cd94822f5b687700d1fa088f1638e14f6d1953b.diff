[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.channel.ChannelFuture;, +import io.netty.testsuite.util.TestUtils;, +import io.netty.util.internal.StringUtil;, +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    private void testGatheringWrite0(, +, +        ChannelFuture cf = cc.writeAndFlush(Unpooled.EMPTY_BUFFER);, +        assertNotEquals(cc.voidPromise(), cf);, +        try {, +            assertTrue(cf.await(30000));, +            cf.sync();, +        } catch (Throwable t) {, +            // TODO: Remove this once we fix this test., +            TestUtils.dump(StringUtil.simpleClassName(this));, +            throw t;, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.channel.ChannelFuture;, +import io.netty.testsuite.util.TestUtils;, +import io.netty.util.internal.StringUtil;, +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    private void testGatheringWrite0(, +, +        ChannelFuture cf = cc.writeAndFlush(Unpooled.EMPTY_BUFFER);, +        assertNotEquals(cc.voidPromise(), cf);, +        try {, +            assertTrue(cf.await(30000));, +            cf.sync();, +        } catch (Throwable t) {, +            // TODO: Remove this once we fix this test., +            TestUtils.dump(StringUtil.simpleClassName(this));, +            throw t;, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import io.netty.testsuite.util.TestUtils;, +import io.netty.util.internal.StringUtil;, +        try {, +        } catch (Throwable t) {, +            // TODO: Remove this once we fix this test., +            TestUtils.dump(StringUtil.simpleClassName(this));, +            throw t;, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.channel.ChannelFuture;, +import io.netty.testsuite.util.TestUtils;, +import io.netty.util.internal.StringUtil;, +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    @Test(timeout = 60000), +    private void testGatheringWrite0(, +, +        ChannelFuture cf = cc.writeAndFlush(Unpooled.EMPTY_BUFFER);, +        assertNotEquals(cc.voidPromise(), cf);, +        try {, +            assertTrue(cf.await(30000));, +            cf.sync();, +        } catch (Throwable t) {, +            // TODO: Remove this once we fix this test., +            TestUtils.dump(StringUtil.simpleClassName(this));, +            throw t;, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketSslEchoTest.java, +import io.netty.testsuite.util.TestUtils;, +import io.netty.util.internal.StringUtil;, +        try {, +        } catch (Throwable t) {, +            // TODO: Remove this once we fix this test., +            TestUtils.dump(StringUtil.simpleClassName(this));, +            throw t;, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java, +import io.netty.util.CharsetUtil;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +import javax.management.MBeanServer;, +import java.io.File;, +import java.io.FileOutputStream;, +import java.io.OutputStream;, +import java.lang.management.ManagementFactory;, +import java.lang.management.ThreadInfo;, +import java.lang.reflect.Method;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(TestUtils.class);, +, +    private static final Method hotspotMXBeanDumpHeap;, +    private static final Object hotspotMXBean;, +, +        // Populate the list of random ports.]