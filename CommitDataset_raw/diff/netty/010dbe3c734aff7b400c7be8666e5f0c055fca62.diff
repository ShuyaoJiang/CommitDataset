[+++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) || threadLocalMap.isCleanerFlagSet(index)) {, +, +        threadLocalMap.setCleanerFlag(index);, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) || threadLocalMap.isCleanerFlagSet(index)) {, +, +        threadLocalMap.setCleanerFlag(index);, +++ b/common/src/main/java/io/netty/util/internal/InternalThreadLocalMap.java, +import java.util.BitSet;, +    private BitSet cleanerFlags;, +, +, +    public boolean isCleanerFlagSet(int index) {, +        return cleanerFlags != null && cleanerFlags.get(index);, +    }, +, +    public void setCleanerFlag(int index) {, +        if (cleanerFlags == null) {, +            cleanerFlags = new BitSet();, +        }, +        cleanerFlags.set(index);, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        if (FastThreadLocalThread.willCleanupFastThreadLocals(current) || threadLocalMap.isCleanerFlagSet(index)) {, +, +        threadLocalMap.setCleanerFlag(index);, +++ b/common/src/main/java/io/netty/util/internal/InternalThreadLocalMap.java, +import java.util.BitSet;, +    private BitSet cleanerFlags;, +, +, +    public boolean isCleanerFlagSet(int index) {, +        return cleanerFlags != null && cleanerFlags.get(index);, +    }, +, +    public void setCleanerFlag(int index) {, +        if (cleanerFlags == null) {, +            cleanerFlags = new BitSet();, +        }, +        cleanerFlags.set(index);, +    }, +++ b/common/src/test/java/io/netty/util/concurrent/FastThreadLocalTest.java, +        assertThat(FastThreadLocal.size(), is(1));]