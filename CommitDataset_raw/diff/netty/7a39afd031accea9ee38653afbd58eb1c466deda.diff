[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +    static final Set<String> SUPPORTED_PROTOCOLS_SET;, +, +            final long pool = Pool.create(0);, +, +            Set<String> protocols = new LinkedHashSet<String>(6);, +            // Seems like there is no way to explicitly disable SSLv2Hello in openssl so it is always enabled, +            protocols.add(PROTOCOL_SSL_V2_HELLO);, +            try {, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_SSLV2)) {, +                    protocols.add(PROTOCOL_SSL_V2);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_SSLV3)) {, +                    protocols.add(PROTOCOL_SSL_V3);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1)) {, +                    protocols.add(PROTOCOL_TLS_V1);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1_1)) {, +                    protocols.add(PROTOCOL_TLS_V1_1);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1_2)) {, +                    protocols.add(PROTOCOL_TLS_V1_2);, +                }, +            } finally {, +                Pool.destroy(aprPool);, +            }, +            SUPPORTED_PROTOCOLS_SET = Collections.unmodifiableSet(protocols);, +            SUPPORTED_PROTOCOLS_SET = Collections.emptySet();, +        }, +    }, +, +    private static boolean doesSupportProtocol(long aprPool, int protocol) {, +        long sslCtx = -1;, +        try {, +            sslCtx = SSLContext.make(aprPool, protocol, SSL.SSL_MODE_COMBINED);, +            return true;, +        } catch (Exception ignore) {, +            return false;, +        } finally {, +            if (sslCtx != -1) {, +                SSLContext.free(sslCtx);, +            }, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +    static final Set<String> SUPPORTED_PROTOCOLS_SET;, +, +            final long pool = Pool.create(0);, +, +            Set<String> protocols = new LinkedHashSet<String>(6);, +            // Seems like there is no way to explicitly disable SSLv2Hello in openssl so it is always enabled, +            protocols.add(PROTOCOL_SSL_V2_HELLO);, +            try {, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_SSLV2)) {, +                    protocols.add(PROTOCOL_SSL_V2);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_SSLV3)) {, +                    protocols.add(PROTOCOL_SSL_V3);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1)) {, +                    protocols.add(PROTOCOL_TLS_V1);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1_1)) {, +                    protocols.add(PROTOCOL_TLS_V1_1);, +                }, +                if (doesSupportProtocol(pool, SSL.SSL_PROTOCOL_TLSV1_2)) {, +                    protocols.add(PROTOCOL_TLS_V1_2);, +                }, +            } finally {, +                Pool.destroy(aprPool);, +            }, +            SUPPORTED_PROTOCOLS_SET = Collections.unmodifiableSet(protocols);, +            SUPPORTED_PROTOCOLS_SET = Collections.emptySet();, +        }, +    }, +, +    private static boolean doesSupportProtocol(long aprPool, int protocol) {, +        long sslCtx = -1;, +        try {, +            sslCtx = SSLContext.make(aprPool, protocol, SSL.SSL_MODE_COMBINED);, +            return true;, +        } catch (Exception ignore) {, +            return false;, +        } finally {, +            if (sslCtx != -1) {, +                SSLContext.free(sslCtx);, +            }, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +import org.junit.Assume;, +    public void testWrapWithDifferentSizesTLSv1() throws Exception {, +        testWrapWithDifferentSizes(OpenSsl.PROTOCOL_TLS_V1, TLS_V1_CIPHERS);, +    }, +, +    @Test, +    public void testWrapWithDifferentSizesTLSv1_1() throws Exception {, +        testWrapWithDifferentSizes(OpenSsl.PROTOCOL_TLS_V1_1, TLS_V1_1_CIPHERS);, +    }, +, +    @Test, +    public void testWrapWithDifferentSizesTLSv1_2() throws Exception {, +        testWrapWithDifferentSizes(OpenSsl.PROTOCOL_TLS_V1_2, TLS_V1_2_CIPHERS);]