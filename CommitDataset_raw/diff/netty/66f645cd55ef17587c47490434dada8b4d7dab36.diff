[+++ b/src/main/java/org/jboss/netty/handler/trafficshaping/package-info.java, + * be active or inactive (traffic or statistics).</P>, + * <P>Three classes implement this behavior:<br>, + * <li> <tt>PerformanceCounter</tt>: this class is the kernel of the package. It can be accessed to get some extra information, + * <li> <tt>PerformanceCounterFactory</tt>: this class has to be implemented in your code in order to implement (eventually empty), + * <li> <tt>TrafficShapingHandler</tt>: this class is the handler to be inserted in your pipeline. The insertion can be wherever, + * you want, but <b>it must be placed before any <tt>MemoryAwareThreadPoolExecutor</tt> in your pipeline</b>.</li><br>, + * to have such a</i> <tt>MemoryAwareThreadPoolExecutor</tt> <i>(either non ordered or </i><tt>OrderedMemoryAwareThreadPoolExecutor</tt>, + * <i>) in your pipeline</i></b>, + * </ul></P>, + *, + * <P>Standard use could be as follow:</P>, + *, + * <P><ul>, + * <li>To activate or deactivate the traffic shaping, change the value corresponding to your desire as, + * [Global or per Channel] [Write or Read] Limitation in byte/s.</li><br>, + * <tt>PerformanceCounterFactory.NO_LIMIT</tt> (-1), + * stands for no limitation, so the traffic shaping is deactivate (on what you specified).<br>, + * You can either change those values with the method <tt>changeConfiguration</tt> in PerformanceCounterFactory or, + * directly from the PerformanceCounter method <tt>changeConfiguration</tt>.<br>, + * <br>, + *, + * <li>To activate or deactivate the statistics, you can adjust the delay to a low (not less than 200ms, + * for efficiency reasons) or a high value (let say 24H in ms is huge enough to not get the problem), + * or even using <tt>PerformanceCounterFactory.NO_STAT</tt> (-1)</li>.<br>, + * And if you don't want to do anything with this statistics, just implement an empty method for, + * <tt>PerformanceCounterFactory.accounting(PerformanceCounter)</tt>.<br>, + * Again this can be changed either from PerformanceCounterFactory or directly in PerformanceCounter.<br><br>, + *, + * <li>You can also completely deactivate channel or global PerformanceCounter by setting the boolean to false, + * accordingly to your needs in the PerformanceCounterFactory. It will deactivate the global Monitor. For channels monitor,, + * it will prevent new monitors to be created (or reversely they will be created for newly connected channels).</li>, + * <P>So in your application you will create your own PerformanceCounterFactory and setting the values to fit your needs.</P>, + * your MemoryAwareThreadPoolExecutor:</P>, + * <tt>pipeline.addLast("MemoryExecutor",new ExecutionHandler(memoryAwareThreadPoolExecutor));</tt><br><br>, + * the PerformanceCounterFactcory that is shared between all handlers across the channels.</P>]