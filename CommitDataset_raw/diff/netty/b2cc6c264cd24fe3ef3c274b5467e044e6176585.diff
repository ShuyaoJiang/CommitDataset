[+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +    /**, +     * Transfers this buffer's data to a newly created buffer starting at, +     * the current {@code readerIndex} and increases the {@code readerIndex}, +     * by the number of the transferred bytes (= {@code length})., +     * The returned buffer's {@code readerIndex} and {@code writerIndex} are, +     * {@code 0} and {@code length} respectively., +     *, +     * @param length the number of bytes to transfer, +     *, +     * @return the newly created buffer which contains the transferred bytes, +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code length} is greater than {@code this.readableBytes}, +     */, +, +    /**, +     * Transfers this buffer's data to a newly created buffer starting at, +     * the current {@code readerIndex} until the specified {@code indexFinder}, +     * returns {@code true} and increases the {@code readerIndex}, +     * by the number of the transferred bytes.  The returned buffer's, +     * {@code readerIndex} and {@code writerIndex} are {@code 0} and, +     * the number of the transferred bytes respectively., +     *, +     * @param length the number of bytes to transfer, +     *, +     * @return the newly created buffer which contains the transferred bytes, +     *, +     * @throws NoSuchElementException, +     *         if {@code indexFinder} didn't return {@code true} at all, +     */, +    ChannelBuffer readBytes(ChannelBufferIndexFinder indexFinder);, +, +    /**, +     * Returns a new slice of this buffer's sub-region starting at the current, +     * {@code readerIndex} and increases the {@code readerIndex} by the size, +     * of the new slice (= {@code length})., +     *, +     * @param length the size of the new slice, +     *, +     * @return the newly created slice, +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code length} is greater than {@code this.readableBytes}, +     */, +, +    /**, +     * Returns a new slice of this buffer's sub-region starting at the current, +     * {@code readerIndex} and increases the {@code readerIndex} by the size, +     * of the new slice (determined by {@code indexFinder})., +     *, +     * @param indexFinder finds the end index of the sub-region to be sliced, +     *, +     * @return the newly created slice, +     *, +     * @throws NoSuchElementException, +     *         if {@code indexFinder} didn't return {@code true} at all, +     */, +    ChannelBuffer readSlice(ChannelBufferIndexFinder indexFinder);, +     * {@code indexFinder} returns {@code true} in this buffer., +    int  skipBytes(ChannelBufferIndexFinder indexFinder);, +    /**, +     * Locates the first occurrence of the specified {@code value} in this, +     * buffer.  The search takes place from the specified {@code fromIndex}, +     * (inclusive)  to the specified {@code toIndex} (exclusive)., +     * <p>, +     * If {@code fromIndex} is greater than {@code toIndex}, the search is, +     * performed in a reversed order., +     *, +     * @return the absolute index of the first occurrence if found., +     *         {@code -1} otherwise., +     */, +, +    /**, +     * Locates the first index where the specified {@code indexFinder}, +     * returns {@code true}.  The search takes place from the specified, +     * {@code fromIndex} (inclusive) to the specified {@code toIndex}, +     * (exclusive)., +     * <p>, +     * If {@code fromIndex} is greater than {@code toIndex}, the search is, +     * performed in a reversed order., +     *, +     * @return the absolute index where the specified {@code indexFinder}, +     *         returned {@code true} if the {@code indexFinder} returned, +     *         {@code true}.  {@code -1} otherwise., +     */, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +    /**, +     * Transfers this buffer's data to a newly created buffer starting at, +     * the current {@code readerIndex} and increases the {@code readerIndex}, +     * by the number of the transferred bytes (= {@code length})., +     * The returned buffer's {@code readerIndex} and {@code writerIndex} are, +     * {@code 0} and {@code length} respectively., +     *, +     * @param length the number of bytes to transfer, +     *, +     * @return the newly created buffer which contains the transferred bytes, +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code length} is greater than {@code this.readableBytes}]