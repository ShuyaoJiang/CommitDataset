[+++ b/buffer/src/main/java/io/netty/buffer/FixedCompositeByteBuf.java, +        switch (buffers.length) {, +            case 0:, +                return true;, +            case 1:, +                return buffer(0).hasArray();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return EmptyArrays.EMPTY_BYTES;, +            case 1:, +                return buffer(0).array();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return 0;, +            case 1:, +                return buffer(0).arrayOffset();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return Unpooled.EMPTY_BUFFER.hasMemoryAddress();, +            case 1:, +                return buffer(0).hasMemoryAddress();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return Unpooled.EMPTY_BUFFER.memoryAddress();, +            case 1:, +                return buffer(0).memoryAddress();, +            default:, +    }, +++ b/buffer/src/main/java/io/netty/buffer/FixedCompositeByteBuf.java, +        switch (buffers.length) {, +            case 0:, +                return true;, +            case 1:, +                return buffer(0).hasArray();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return EmptyArrays.EMPTY_BYTES;, +            case 1:, +                return buffer(0).array();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return 0;, +            case 1:, +                return buffer(0).arrayOffset();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return Unpooled.EMPTY_BUFFER.hasMemoryAddress();, +            case 1:, +                return buffer(0).hasMemoryAddress();, +            default:, +    }, +        switch (buffers.length) {, +            case 0:, +                return Unpooled.EMPTY_BUFFER.memoryAddress();, +            case 1:, +                return buffer(0).memoryAddress();, +            default:, +    }, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +import org.junit.Assume;, +, +    @Test, +    public void testHasMemoryAddressWithSingleBuffer() {, +        ByteBuf buf1 = directBuffer(10);, +        if (!buf1.hasMemoryAddress()) {, +            buf1.release();, +            return;, +        }, +        ByteBuf buf = newBuffer(buf1);, +        assertTrue(buf.hasMemoryAddress());, +        assertEquals(buf1.memoryAddress(), buf.memoryAddress());, +        buf.release();, +    }, +, +    @Test, +    public void testHasMemoryAddressWhenEmpty() {, +        Assume.assumeTrue(EMPTY_BUFFER.hasMemoryAddress());, +        ByteBuf buf = newBuffer(new ByteBuf[0]);, +        assertTrue(buf.hasMemoryAddress());, +        assertEquals(EMPTY_BUFFER.memoryAddress(), buf.memoryAddress());, +        buf.release();, +    }, +, +    @Test(expected = UnsupportedOperationException.class), +    public void testHasNoMemoryAddressWhenMultipleBuffers() {, +        ByteBuf buf1 = directBuffer(10);]