[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import static io.netty.handler.codec.http.HttpHeaderNames.SET_COOKIE;, +            if (!itr.hasNext() || cannotBeCombined(name)) {, +            if (values.isEmpty() || cannotBeCombined(name)) {, +        private static boolean cannotBeCombined(CharSequence name) {, +            return SET_COOKIE.contentEqualsIgnoreCase(name);, +        }, +, +            if (currentValue == null || cannotBeCombined(name)) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import static io.netty.handler.codec.http.HttpHeaderNames.SET_COOKIE;, +            if (!itr.hasNext() || cannotBeCombined(name)) {, +            if (values.isEmpty() || cannotBeCombined(name)) {, +        private static boolean cannotBeCombined(CharSequence name) {, +            return SET_COOKIE.contentEqualsIgnoreCase(name);, +        }, +, +            if (currentValue == null || cannotBeCombined(name)) {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import static io.netty.handler.codec.http.HttpHeaderNames.SET_COOKIE;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +    public void dontCombineSetCookieHeaders() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.add(SET_COOKIE, "a");, +        final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders();, +        otherHeaders.add(SET_COOKIE, "b");, +        otherHeaders.add(SET_COOKIE, "c");, +        headers.add(otherHeaders);, +        assertThat(headers.getAll(SET_COOKIE), hasSize(3));, +    }, +, +    @Test, +    public void dontCombineSetCookieHeadersRegardlessOfCase() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.add("Set-Cookie", "a");, +        final CombinedHttpHeaders otherHeaders = newCombinedHttpHeaders();, +        otherHeaders.add("set-cookie", "b");, +        otherHeaders.add("SET-COOKIE", "c");, +        headers.add(otherHeaders);, +        assertThat(headers.getAll(SET_COOKIE), hasSize(3));, +    }, +, +    @Test, +    public void getAllDontCombineSetCookie() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.add(SET_COOKIE, "a");, +        headers.add(SET_COOKIE, "b");, +        assertThat(headers.getAll(SET_COOKIE), hasSize(2));, +        assertEquals(Arrays.asList("a", "b"), headers.getAll(SET_COOKIE));, +    }, +, +    @Test, +    @Test, +    public void nonCombinableHeaderIterator() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.add(SET_COOKIE, "c");, +        headers.add(SET_COOKIE, "b");, +        headers.add(SET_COOKIE, "a");, +, +        final Iterator<String> strItr = headers.valueStringIterator(SET_COOKIE);, +        assertTrue(strItr.hasNext());, +        assertEquals("a", strItr.next());, +        assertTrue(strItr.hasNext());, +        assertEquals("b", strItr.next());, +        assertTrue(strItr.hasNext());, +        assertEquals("c", strItr.next());, +    }, +]