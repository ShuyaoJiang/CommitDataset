[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +    private static final boolean SUPPORTS_KEYMANAGER_FACTORY;, +            boolean supportsKeyManagerFactory = false;, +                long privateKeyBio = 0;, +                long certBio = 0;, +                        try {, +                            SelfSignedCertificate cert = new SelfSignedCertificate();, +                            certBio = OpenSslContext.toBIO(cert.cert());, +                            SSL.setCertificateChainBio(ssl, certBio, false);, +                            supportsKeyManagerFactory = true;, +                        } catch (Throwable ignore) {, +                            logger.debug("KeyManagerFactory not supported.");, +                        }, +                        if (privateKeyBio != 0) {, +                            SSL.freeBIO(privateKeyBio);, +                        }, +                        if (certBio != 0) {, +                            SSL.freeBIO(certBio);, +                        }, +            SUPPORTS_KEYMANAGER_FACTORY = supportsKeyManagerFactory;, +            SUPPORTS_KEYMANAGER_FACTORY = false;, +    /**, +     * Returns {@code true} if {@link javax.net.ssl.KeyManagerFactory} is supported when using OpenSSL., +     */, +    public static boolean supportsKeyManagerFactory() {, +        return SUPPORTS_KEYMANAGER_FACTORY;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import io.netty.handler.ssl.util.SelfSignedCertificate;, +    private static final boolean SUPPORTS_KEYMANAGER_FACTORY;, +            boolean supportsKeyManagerFactory = false;, +                long privateKeyBio = 0;, +                long certBio = 0;, +                        try {, +                            SelfSignedCertificate cert = new SelfSignedCertificate();, +                            certBio = OpenSslContext.toBIO(cert.cert());, +                            SSL.setCertificateChainBio(ssl, certBio, false);, +                            supportsKeyManagerFactory = true;, +                        } catch (Throwable ignore) {, +                            logger.debug("KeyManagerFactory not supported.");, +                        }, +                        if (privateKeyBio != 0) {, +                            SSL.freeBIO(privateKeyBio);, +                        }, +                        if (certBio != 0) {, +                            SSL.freeBIO(certBio);, +                        }, +            SUPPORTS_KEYMANAGER_FACTORY = supportsKeyManagerFactory;, +            SUPPORTS_KEYMANAGER_FACTORY = false;, +    /**, +     * Returns {@code true} if {@link javax.net.ssl.KeyManagerFactory} is supported when using OpenSSL., +     */, +    public static boolean supportsKeyManagerFactory() {, +        return SUPPORTS_KEYMANAGER_FACTORY;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +import org.apache.tomcat.jni.CertificateRequestedCallback;, +import javax.net.ssl.SSLHandshakeException;, +import javax.net.ssl.X509ExtendedKeyManager;, +import javax.net.ssl.X509KeyManager;, +import javax.security.auth.x500.X500Principal;, +import java.util.HashSet;, +import java.util.Set;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(OpenSslClientContext.class);, +                    if (!OpenSsl.supportsKeyManagerFactory()) {, +                        if (keyManagerFactory != null) {, +                            throw new IllegalArgumentException(, +                                    "KeyManagerFactory not supported");, +                        }, +                        if (keyCertChain != null && key != null) {, +                            setKeyMaterial(ctx, keyCertChain, key, keyPassword);, +                        }, +                    } else {, +                        if (keyCertChain != null) {, +                            keyManagerFactory = buildKeyManagerFactory(, +                                    keyCertChain, key, keyPassword, keyManagerFactory);, +                        }, +                        if (keyManagerFactory != null) {, +                            X509KeyManager keyManager = chooseX509KeyManager(keyManagerFactory.getKeyManagers());, +                            OpenSslKeyMaterialManager materialManager = useExtendedKeyManager(keyManager) ?, +                                    new OpenSslExtendedKeyMaterialManager(, +                                            (X509ExtendedKeyManager) keyManager, keyPassword) :, +                                    new OpenSslKeyMaterialManager(keyManager, keyPassword);, +                            SSLContext.setCertRequestedCallback(ctx, new OpenSslCertificateRequestedCallback(, +                                    engineMap, materialManager));, +    @Override, +    OpenSslKeyMaterialManager keyMaterialManager() {, +        return null;, +    }, +, +, +    private static final class OpenSslCertificateRequestedCallback implements CertificateRequestedCallback {]