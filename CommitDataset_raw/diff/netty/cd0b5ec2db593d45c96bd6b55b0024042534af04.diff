[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +    private static final int BOSSES = 2;, +    private static final int WORKERS = 3;, +    private static final EventLoopGroup nioBossGroup =, +            new NioEventLoopGroup(BOSSES, new DefaultThreadFactory("testsuite-sctp-nio-boss", true));, +    private static final EventLoopGroup nioWorkerGroup =, +            new NioEventLoopGroup(WORKERS, new DefaultThreadFactory("testsuite-sctp-nio-worker", true));, +    private static final EventLoopGroup oioBossGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-boss", true));, +    private static final EventLoopGroup oioWorkerGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-worker", true));, +, +                        group(nioBossGroup, nioWorkerGroup)., +                        group(oioBossGroup, oioWorkerGroup)., +                return new Bootstrap().group(nioWorkerGroup).channel(NioSctpChannel.class);, +                return new Bootstrap().group(oioWorkerGroup).channel(OioSctpChannel.class);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +    private static final int BOSSES = 2;, +    private static final int WORKERS = 3;, +    private static final EventLoopGroup nioBossGroup =, +            new NioEventLoopGroup(BOSSES, new DefaultThreadFactory("testsuite-sctp-nio-boss", true));, +    private static final EventLoopGroup nioWorkerGroup =, +            new NioEventLoopGroup(WORKERS, new DefaultThreadFactory("testsuite-sctp-nio-worker", true));, +    private static final EventLoopGroup oioBossGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-boss", true));, +    private static final EventLoopGroup oioWorkerGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-worker", true));, +, +                        group(nioBossGroup, nioWorkerGroup)., +                        group(oioBossGroup, oioWorkerGroup)., +                return new Bootstrap().group(nioWorkerGroup).channel(NioSctpChannel.class);, +                return new Bootstrap().group(oioWorkerGroup).channel(OioSctpChannel.class);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +    private static final int BOSSES = 2;, +    private static final int WORKERS = 3;, +    private static final EventLoopGroup nioBossGroup =, +            new NioEventLoopGroup(BOSSES, new DefaultThreadFactory("testsuite-sctp-nio-boss", true));, +    private static final EventLoopGroup nioWorkerGroup =, +            new NioEventLoopGroup(WORKERS, new DefaultThreadFactory("testsuite-sctp-nio-worker", true));, +    private static final EventLoopGroup oioBossGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-boss", true));, +    private static final EventLoopGroup oioWorkerGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-worker", true));, +, +                        group(nioBossGroup, nioWorkerGroup)., +                        group(oioBossGroup, oioWorkerGroup)., +                return new Bootstrap().group(nioWorkerGroup).channel(NioSctpChannel.class);, +                return new Bootstrap().group(oioWorkerGroup).channel(OioSctpChannel.class);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +    private static final List<Entry<Factory<Bootstrap>, Factory<Bootstrap>>> COMBO = SocketTestPermutation.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +    private static final int BOSSES = 2;, +    private static final int WORKERS = 3;, +    private static final EventLoopGroup nioBossGroup =, +            new NioEventLoopGroup(BOSSES, new DefaultThreadFactory("testsuite-sctp-nio-boss", true));, +    private static final EventLoopGroup nioWorkerGroup =, +            new NioEventLoopGroup(WORKERS, new DefaultThreadFactory("testsuite-sctp-nio-worker", true));, +    private static final EventLoopGroup oioBossGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-boss", true));, +    private static final EventLoopGroup oioWorkerGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-worker", true));, +, +                        group(nioBossGroup, nioWorkerGroup)., +                        group(oioBossGroup, oioWorkerGroup)., +                return new Bootstrap().group(nioWorkerGroup).channel(NioSctpChannel.class);, +                return new Bootstrap().group(oioWorkerGroup).channel(OioSctpChannel.class);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +    private static final List<Entry<Factory<Bootstrap>, Factory<Bootstrap>>> COMBO = SocketTestPermutation.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/AbstractSctpTest.java, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/sctp/SctpTestPermutation.java, +import io.netty.channel.EventLoopGroup;, +import io.netty.util.concurrent.DefaultThreadFactory;, +    private static final int BOSSES = 2;, +    private static final int WORKERS = 3;, +    private static final EventLoopGroup nioBossGroup =, +            new NioEventLoopGroup(BOSSES, new DefaultThreadFactory("testsuite-sctp-nio-boss", true));, +    private static final EventLoopGroup nioWorkerGroup =, +            new NioEventLoopGroup(WORKERS, new DefaultThreadFactory("testsuite-sctp-nio-worker", true));, +    private static final EventLoopGroup oioBossGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-boss", true));, +    private static final EventLoopGroup oioWorkerGroup =, +            new OioEventLoopGroup(Integer.MAX_VALUE, new DefaultThreadFactory("testsuite-sctp-oio-worker", true));, +]