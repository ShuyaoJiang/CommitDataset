[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            return HttpHeaderDateFormat.get().format((Date) value);, +            return HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            return HttpHeaderDateFormat.get().format((Date) value);, +            return HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderDateFormat.java, +    private static ThreadLocal<HttpHeaderDateFormat> dateFormatThreadLocal = new ThreadLocal<HttpHeaderDateFormat>() {, +        @Override, +        protected HttpHeaderDateFormat initialValue() {, +            return new HttpHeaderDateFormat();, +        }, +    };, +, +    static HttpHeaderDateFormat get() {, +        return dateFormatThreadLocal.get();, +    }, +, +    private HttpHeaderDateFormat() {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            return HttpHeaderDateFormat.get().format((Date) value);, +            return HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderDateFormat.java, +    private static ThreadLocal<HttpHeaderDateFormat> dateFormatThreadLocal = new ThreadLocal<HttpHeaderDateFormat>() {, +        @Override, +        protected HttpHeaderDateFormat initialValue() {, +            return new HttpHeaderDateFormat();, +        }, +    };, +, +    static HttpHeaderDateFormat get() {, +        return dateFormatThreadLocal.get();, +    }, +, +    private HttpHeaderDateFormat() {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        return HttpHeaderDateFormat.get().parse(value);, +            return HttpHeaderDateFormat.get().parse(value);, +            message.headers().set(name, HttpHeaderDateFormat.get().format(value));, +            message.headers().set(Names.DATE, HttpHeaderDateFormat.get().format(value));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            return HttpHeaderDateFormat.get().format((Date) value);, +            return HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderDateFormat.java, +    private static ThreadLocal<HttpHeaderDateFormat> dateFormatThreadLocal = new ThreadLocal<HttpHeaderDateFormat>() {, +        @Override, +        protected HttpHeaderDateFormat initialValue() {, +            return new HttpHeaderDateFormat();, +        }, +    };, +, +    static HttpHeaderDateFormat get() {, +        return dateFormatThreadLocal.get();, +    }, +, +    private HttpHeaderDateFormat() {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        return HttpHeaderDateFormat.get().parse(value);, +            return HttpHeaderDateFormat.get().parse(value);, +            message.headers().set(name, HttpHeaderDateFormat.get().format(value));, +            message.headers().set(Names.DATE, HttpHeaderDateFormat.get().format(value));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java, +                        HttpHeaderDateFormat.get().format(, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CookieDecoder.java, +                            HttpHeaderDateFormat.get().parse(value).getTime() -, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            return HttpHeaderDateFormat.get().format((Date) value);, +            return HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaderDateFormat.java, +    private static ThreadLocal<HttpHeaderDateFormat> dateFormatThreadLocal = new ThreadLocal<HttpHeaderDateFormat>() {, +        @Override, +        protected HttpHeaderDateFormat initialValue() {, +            return new HttpHeaderDateFormat();, +        }, +    };, +, +    static HttpHeaderDateFormat get() {, +        return dateFormatThreadLocal.get();, +    }, +, +    private HttpHeaderDateFormat() {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +        return HttpHeaderDateFormat.get().parse(value);, +            return HttpHeaderDateFormat.get().parse(value);, +            message.headers().set(name, HttpHeaderDateFormat.get().format(value));, +            message.headers().set(Names.DATE, HttpHeaderDateFormat.get().format(value));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java, +                        HttpHeaderDateFormat.get().format(, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CookieDecoderTest.java, +                HttpHeaderDateFormat.get().format(new Date(System.currentTimeMillis() + 50000)));]