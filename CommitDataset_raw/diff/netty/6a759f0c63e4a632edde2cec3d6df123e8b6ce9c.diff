[+++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +     * Throws an {@link IndexOutOfBoundsException} if the current, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +     * Throws an {@link IndexOutOfBoundsException} if the current, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +     * Gets an unsigned byte at the specified absolute {@code index} in this, +     * Gets an unsigned 16-bit short integer at the specified absolute, +     * Gets an unsigned 24-bit medium integer at the specified absolute, +     * Gets an unsigned 32-bit integer at the specified absolute {@code index}, +     * non-writable.  This method is basically same with, +     * reaches its limit., +     * reaches its limit., +     * Gets an unsigned byte at the current {@code readerIndex} and increases, +     * Gets an unsigned 16-bit short integer at the current {@code readerIndex}, +     * Gets an unsigned 24-bit medium integer at the current {@code readerIndex}, +     * Gets an unsigned 32-bit integer at the current {@code readerIndex}, +     * non-writable, and increases the {@code readerIndex} by the number of the, +     * reaches its limit, and increases the {@code readerIndex} by the, +     * reaches its limit, and increases the {@code writerIndex} by the, +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +     * Throws an {@link IndexOutOfBoundsException} if the current, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +     * Gets an unsigned byte at the specified absolute {@code index} in this, +     * Gets an unsigned 16-bit short integer at the specified absolute, +     * Gets an unsigned 24-bit medium integer at the specified absolute, +     * Gets an unsigned 32-bit integer at the specified absolute {@code index}, +     * non-writable.  This method is basically same with, +     * reaches its limit., +     * reaches its limit., +     * Gets an unsigned byte at the current {@code readerIndex} and increases, +     * Gets an unsigned 16-bit short integer at the current {@code readerIndex}, +     * Gets an unsigned 24-bit medium integer at the current {@code readerIndex}, +     * Gets an unsigned 32-bit integer at the current {@code readerIndex}, +     * non-writable, and increases the {@code readerIndex} by the number of the, +     * reaches its limit, and increases the {@code readerIndex} by the, +     * reaches its limit, and increases the {@code writerIndex} by the, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +     * Returns the {@link FailedChannelFuture} whose cause is an, +     * Returns {@code true} if and only if the specified object is identical, +     * with this channel (i.e: {@code this == o})., +     * Compares the {@linkplain #getId() ID} of the two channels., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +     * Throws an {@link IndexOutOfBoundsException} if the current, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +     * Gets an unsigned byte at the specified absolute {@code index} in this, +     * Gets an unsigned 16-bit short integer at the specified absolute, +     * Gets an unsigned 24-bit medium integer at the specified absolute, +     * Gets an unsigned 32-bit integer at the specified absolute {@code index}, +     * non-writable.  This method is basically same with, +     * reaches its limit., +     * reaches its limit., +     * Gets an unsigned byte at the current {@code readerIndex} and increases, +     * Gets an unsigned 16-bit short integer at the current {@code readerIndex}, +     * Gets an unsigned 24-bit medium integer at the current {@code readerIndex}, +     * Gets an unsigned 32-bit integer at the current {@code readerIndex}, +     * non-writable, and increases the {@code readerIndex} by the number of the, +     * reaches its limit, and increases the {@code readerIndex} by the, +     * reaches its limit, and increases the {@code writerIndex} by the, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +     * Returns the {@link FailedChannelFuture} whose cause is an, +     * Returns {@code true} if and only if the specified object is identical, +     * with this channel (i.e: {@code this == o})., +     * Compares the {@linkplain #getId() ID} of the two channels., +++ b/src/main/java/org/jboss/netty/channel/AbstractChannelSink.java, +     * Sends an {@link ExceptionEvent} upstream with the specified, +     * {@code cause}., +++ b/src/main/java/org/jboss/netty/bootstrap/ServerBootstrap.java, + * A helper class which creates a new server-side {@link Channel} and accepts, +     * Creates a new channel which is bound to the local address which was, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +     * Throws an {@link IndexOutOfBoundsException} if the current, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, +     * Gets an unsigned byte at the specified absolute {@code index} in this, +     * Gets an unsigned 16-bit short integer at the specified absolute, +     * Gets an unsigned 24-bit medium integer at the specified absolute, +     * Gets an unsigned 32-bit integer at the specified absolute {@code index}, +     * non-writable.  This method is basically same with, +     * reaches its limit., +     * reaches its limit., +     * Gets an unsigned byte at the current {@code readerIndex} and increases, +     * Gets an unsigned 16-bit short integer at the current {@code readerIndex}, +     * Gets an unsigned 24-bit medium integer at the current {@code readerIndex}, +     * Gets an unsigned 32-bit integer at the current {@code readerIndex}, +     * non-writable, and increases the {@code readerIndex} by the number of the, +     * reaches its limit, and increases the {@code readerIndex} by the]