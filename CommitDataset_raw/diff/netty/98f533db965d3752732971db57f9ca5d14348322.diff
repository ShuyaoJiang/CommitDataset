[+++ b/src/test/java/org/jboss/netty/bootstrap/AbstractSocketClientBootstrapTest.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.bootstrap;, +, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.nio.channels.ServerSocketChannel;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelPipelineException;, +import org.jboss.netty.channel.ChannelPipelineFactory;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public abstract class AbstractSocketClientBootstrapTest {, +, +    private static ExecutorService executor;, +, +    @BeforeClass, +    public static void init() {, +        executor = Executors.newCachedThreadPool();, +    }, +, +    @AfterClass, +    public static void destroy() {, +        executor.shutdown();, +        for (;;) {, +            try {, +                if (executor.awaitTermination(1, TimeUnit.SECONDS)) {, +                    break;, +                }, +            } catch (InterruptedException e) {, +                // Ignore., +            }, +        }, +    }, +, +    protected abstract ChannelFactory newClientSocketChannelFactory(Executor executor);, +, +    @Test(timeout = 10000), +    public void testFailedConnectionAttempt() throws Exception {, +        ClientBootstrap bootstrap = new ClientBootstrap();, +        bootstrap.setFactory(newClientSocketChannelFactory(executor));, +        bootstrap.setOption("remoteAddress", new InetSocketAddress("255.255.255.255", 1));, +        ChannelFuture future = bootstrap.connect();, +        future.awaitUninterruptibly();, +        assertFalse(future.isSuccess());, +        assertTrue(future.getCause() instanceof IOException);, +    }, +, +    @Test(timeout = 10000), +    public void testSuccessfulConnectionAttempt() throws Exception {, +        ServerSocketChannel serverSocket = ServerSocketChannel.open();, +        serverSocket.socket().bind(new InetSocketAddress(0));, +, +        try {, +            serverSocket.configureBlocking(false);, +, +            ClientBootstrap bootstrap =, +                new ClientBootstrap(newClientSocketChannelFactory(executor));, +            bootstrap.setOption(]