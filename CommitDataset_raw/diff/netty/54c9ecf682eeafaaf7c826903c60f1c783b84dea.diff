[+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +     * Find the index of the first non-white space character in {@code s} starting at {@code offset}., +     * @param seq The string to search., +     * @param offset The offset to start searching at., +     * @return the index of the first non-white space character or &lt;{@code 0} if none was found., +     */, +    public static int indexOfNonWhiteSpace(CharSequence seq, int offset) {, +        for (; offset < seq.length(); ++offset) {, +            if (!Character.isWhitespace(seq.charAt(offset))) {, +                return offset;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +     * Find the index of the first non-white space character in {@code s} starting at {@code offset}., +     * @param seq The string to search., +     * @param offset The offset to start searching at., +     * @return the index of the first non-white space character or &lt;{@code 0} if none was found., +     */, +    public static int indexOfNonWhiteSpace(CharSequence seq, int offset) {, +        for (; offset < seq.length(); ++offset) {, +            if (!Character.isWhitespace(seq.charAt(offset))) {, +                return offset;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    private final DnsServerAddressStreamProvider dnsServerAddressStreamProvider;, +     * @param dnsServerAddressStreamProvider The {@link DnsServerAddressStreamProvider} used to override the name, +     *                                       servers for each hostname lookup., +            DnsServerAddressStreamProvider dnsServerAddressStreamProvider,, +        this.dnsServerAddressStreamProvider =, +                checkNotNull(dnsServerAddressStreamProvider, "dnsServerAddressStreamProvider");, +        DnsServerAddressStream dnsServerAddressStream =, +                dnsServerAddressStreamProvider.nameServerAddressStream(hostname);, +        SingleResolverContext ctx = dnsServerAddressStream == null ?, +             new SingleResolverContext(this, hostname, additionals, resolveCache, nameServerAddresses.stream()) :, +             new SingleResolverContext(this, hostname, additionals, resolveCache, dnsServerAddressStream);, +                              DnsRecord[] additionals, DnsCache resolveCache, DnsServerAddressStream nameServerAddrs) {, +            super(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                                                               DnsRecord[] additionals, DnsCache resolveCache,, +                                                               DnsServerAddressStream nameServerAddrs) {, +            return new SingleResolverContext(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                            DnsRecord[] additionals, DnsCache resolveCache, DnsServerAddressStream nameServerAddrs) {, +            super(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                DnsNameResolver parent, String hostname,  DnsRecord[] additionals, DnsCache resolveCache,, +                DnsServerAddressStream nameServerAddrs) {, +            return new ListResolverContext(parent, hostname, additionals, resolveCache, nameServerAddrs);, +        DnsServerAddressStream dnsServerAddressStream =, +                dnsServerAddressStreamProvider.nameServerAddressStream(hostname);, +        ListResolverContext ctx = dnsServerAddressStream == null ?, +               new ListResolverContext(this, hostname, additionals, resolveCache, nameServerAddresses.stream()) :, +               new ListResolverContext(this, hostname, additionals, resolveCache, dnsServerAddressStream);, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +     * Find the index of the first non-white space character in {@code s} starting at {@code offset}., +     * @param seq The string to search., +     * @param offset The offset to start searching at., +     * @return the index of the first non-white space character or &lt;{@code 0} if none was found., +     */, +    public static int indexOfNonWhiteSpace(CharSequence seq, int offset) {, +        for (; offset < seq.length(); ++offset) {, +            if (!Character.isWhitespace(seq.charAt(offset))) {, +                return offset;, +            }, +        }, +        return -1;, +    }, +, +    /**, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    private final DnsServerAddressStreamProvider dnsServerAddressStreamProvider;, +     * @param dnsServerAddressStreamProvider The {@link DnsServerAddressStreamProvider} used to override the name, +     *                                       servers for each hostname lookup., +            DnsServerAddressStreamProvider dnsServerAddressStreamProvider,, +        this.dnsServerAddressStreamProvider =, +                checkNotNull(dnsServerAddressStreamProvider, "dnsServerAddressStreamProvider");, +        DnsServerAddressStream dnsServerAddressStream =, +                dnsServerAddressStreamProvider.nameServerAddressStream(hostname);, +        SingleResolverContext ctx = dnsServerAddressStream == null ?, +             new SingleResolverContext(this, hostname, additionals, resolveCache, nameServerAddresses.stream()) :, +             new SingleResolverContext(this, hostname, additionals, resolveCache, dnsServerAddressStream);, +                              DnsRecord[] additionals, DnsCache resolveCache, DnsServerAddressStream nameServerAddrs) {, +            super(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                                                               DnsRecord[] additionals, DnsCache resolveCache,, +                                                               DnsServerAddressStream nameServerAddrs) {, +            return new SingleResolverContext(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                            DnsRecord[] additionals, DnsCache resolveCache, DnsServerAddressStream nameServerAddrs) {, +            super(parent, hostname, additionals, resolveCache, nameServerAddrs);, +                DnsNameResolver parent, String hostname,  DnsRecord[] additionals, DnsCache resolveCache,, +                DnsServerAddressStream nameServerAddrs) {, +            return new ListResolverContext(parent, hostname, additionals, resolveCache, nameServerAddrs);, +        DnsServerAddressStream dnsServerAddressStream =, +                dnsServerAddressStreamProvider.nameServerAddressStream(hostname);, +        ListResolverContext ctx = dnsServerAddressStream == null ?]