[+++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +import io.netty.util.concurrent.PromiseCombiner;, +                    ctx.write(out.getUnsafe(0), promise);, +                    if (promise == ctx.voidPromise()) {, +                        writeVoidPromise(ctx, out);, +                        writePromiseCombiner(ctx, out, promise);, +    private static void writeVoidPromise(ChannelHandlerContext ctx, CodecOutputList out) {, +        final ChannelPromise voidPromise = ctx.voidPromise();, +        for (int i = 0; i < out.size(); i++) {, +            ctx.write(out.getUnsafe(i), voidPromise);, +        }, +    }, +, +    private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) {, +        final PromiseCombiner combiner = new PromiseCombiner();, +        for (int i = 0; i < out.size(); i++) {, +            combiner.add(ctx.write(out.getUnsafe(i)));, +        }, +        combiner.finish(promise);, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +import io.netty.util.concurrent.PromiseCombiner;, +                    ctx.write(out.getUnsafe(0), promise);, +                    if (promise == ctx.voidPromise()) {, +                        writeVoidPromise(ctx, out);, +                        writePromiseCombiner(ctx, out, promise);, +    private static void writeVoidPromise(ChannelHandlerContext ctx, CodecOutputList out) {, +        final ChannelPromise voidPromise = ctx.voidPromise();, +        for (int i = 0; i < out.size(); i++) {, +            ctx.write(out.getUnsafe(i), voidPromise);, +        }, +    }, +, +    private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) {, +        final PromiseCombiner combiner = new PromiseCombiner();, +        for (int i = 0; i < out.size(); i++) {, +            combiner.add(ctx.write(out.getUnsafe(i)));, +        }, +        combiner.finish(promise);, +    }, +, +++ b/codec/src/test/java/io/netty/handler/codec/MessageToMessageEncoderTest.java, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelOutboundHandlerAdapter;, +import io.netty.channel.ChannelPromise;, +import static org.junit.Assert.*;, +, +    @Test, +    public void testIntermediateWriteFailures() {, +        ChannelHandler encoder = new MessageToMessageEncoder<Object>() {, +            @Override, +            protected void encode(ChannelHandlerContext ctx, Object msg, List<Object> out) {, +                out.add(new Object());, +                out.add(msg);, +            }, +        };, +, +        final Exception firstWriteException = new Exception();, +, +        ChannelHandler writeThrower = new ChannelOutboundHandlerAdapter() {, +            private boolean firstWritten;, +            @Override, +            public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {, +                if (firstWritten) {, +                    ctx.write(msg, promise);, +                } else {, +                    firstWritten = true;, +                    promise.setFailure(firstWriteException);, +                }, +            }, +        };, +, +        EmbeddedChannel channel = new EmbeddedChannel(writeThrower, encoder);, +        Object msg = new Object();, +        ChannelFuture write = channel.writeAndFlush(msg);, +        assertSame(firstWriteException, write.cause());, +        assertSame(msg, channel.readOutbound());, +        assertFalse(channel.finish());, +    }]