[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +    boolean inWriteNowLoop;, +    boolean writeSuspended;, +            worker.writeFromTaskLoop(NioSocketChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioClientSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +            channel.worker.writeFromUserCode(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +    boolean inWriteNowLoop;, +    boolean writeSuspended;, +            worker.writeFromTaskLoop(NioSocketChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +                    writeFromSelectorLoop(k);, +    void writeFromUserCode(final NioSocketChannel channel) {, +        if (scheduleWriteIfNecessary(channel)) {, +            return;, +        }, +, +        // From here, we are sure Thread.currentThread() == workerThread., +, +        if (channel.writeSuspended) {, +            // Need to update the queue?, +            return;, +, +        write0(channel);, +    }, +, +    void writeFromTaskLoop(final NioSocketChannel ch) {, +        if (!ch.writeSuspended) {, +            write0(ch);, +        }, +    }, +, +    void writeFromSelectorLoop(final SelectionKey k) {, +        NioSocketChannel ch = (NioSocketChannel) k.attachment();, +        ch.writeSuspended = false;, +        write0(ch);, +    private void write0(NioSocketChannel channel) {, +        final Queue<MessageEvent> writeBuffer = channel.writeBuffer;, +        final int writeSpinCount = channel.getConfig().getWriteSpinCount();, +                        channel.writeSuspended = false;, +                        channel.writeSuspended = true;]