[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +import io.netty.handler.codec.UnsupportedMessageTypeException;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isStreamIdValid;, +            Http2FrameStream frameStream = frame.stream();, +            // It is legit to send a WINDOW_UPDATE frame for the connection stream. The parent channel doesn't attempt, +            // to set the Http2FrameStream so we assume if it is null the WINDOW_UPDATE is for the connection stream., +            try {, +                if (frameStream == null) {, +                    increaseInitialConnectionWindow(frame.windowSizeIncrement());, +                } else {, +                    consumeBytes(frameStream.id(), frame.windowSizeIncrement());, +                }, +                promise.setSuccess();, +            } catch (Throwable t) {, +                promise.setFailure(t);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +import io.netty.handler.codec.UnsupportedMessageTypeException;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isStreamIdValid;, +            Http2FrameStream frameStream = frame.stream();, +            // It is legit to send a WINDOW_UPDATE frame for the connection stream. The parent channel doesn't attempt, +            // to set the Http2FrameStream so we assume if it is null the WINDOW_UPDATE is for the connection stream., +            try {, +                if (frameStream == null) {, +                    increaseInitialConnectionWindow(frame.windowSizeIncrement());, +                } else {, +                    consumeBytes(frameStream.id(), frame.windowSizeIncrement());, +                }, +                promise.setSuccess();, +            } catch (Throwable t) {, +                promise.setFailure(t);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameStream.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +import io.netty.handler.codec.UnsupportedMessageTypeException;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isStreamIdValid;, +            Http2FrameStream frameStream = frame.stream();, +            // It is legit to send a WINDOW_UPDATE frame for the connection stream. The parent channel doesn't attempt, +            // to set the Http2FrameStream so we assume if it is null the WINDOW_UPDATE is for the connection stream., +            try {, +                if (frameStream == null) {, +                    increaseInitialConnectionWindow(frame.windowSizeIncrement());, +                } else {, +                    consumeBytes(frameStream.id(), frame.windowSizeIncrement());, +                }, +                promise.setSuccess();, +            } catch (Throwable t) {, +                promise.setFailure(t);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameStream.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrame.java, + * {@code null}. If the frame applies to a stream, the {@link Http2FrameStream#id()} must be greater than zero., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +import io.netty.handler.codec.UnsupportedMessageTypeException;, +import io.netty.handler.codec.http.HttpServerUpgradeHandler.UpgradeEvent;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isStreamIdValid;, +            Http2FrameStream frameStream = frame.stream();, +            // It is legit to send a WINDOW_UPDATE frame for the connection stream. The parent channel doesn't attempt, +            // to set the Http2FrameStream so we assume if it is null the WINDOW_UPDATE is for the connection stream., +            try {, +                if (frameStream == null) {, +                    increaseInitialConnectionWindow(frame.windowSizeIncrement());, +                } else {, +                    consumeBytes(frameStream.id(), frame.windowSizeIncrement());, +                }, +                promise.setSuccess();, +            } catch (Throwable t) {, +                promise.setFailure(t);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameStream.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrame.java, + * {@code null}. If the frame applies to a stream, the {@link Http2FrameStream#id()} must be greater than zero., +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.anyBoolean;, +import static org.mockito.Mockito.anyInt;, +import static org.mockito.Mockito.anyLong;, +import static org.mockito.Mockito.anyShort;, +import static org.mockito.Mockito.eq;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.same;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +        channel.write(new DefaultHttp2WindowUpdateFrame(windowUpdate));]