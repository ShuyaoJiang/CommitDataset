[+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +        String className = checkNotNull(clazz, "clazz").getName();, +        int start;, +        int last;, +            last = indexOfLastNonOwsChar(value, start, length);, +        } else {, +            start = 0;, +            last = length - 1;, +        }, +        if (start > last) {, +, +        int firstUnescapedSpecial = -1;, +        boolean quoted = false;, +        if (isDoubleQuote(value.charAt(start))) {, +            quoted = isDoubleQuote(value.charAt(last)) && last > start;, +            if (quoted) {, +                start++;, +                last--;, +            } else {, +                firstUnescapedSpecial = start;, +        if (firstUnescapedSpecial < 0) {, +            if (quoted) {, +                    if (isDoubleQuote(value.charAt(i))) {, +                        if (i == last || !isDoubleQuote(value.charAt(i + 1))) {, +                            firstUnescapedSpecial = i;, +                        i++;, +                }, +            } else {, +                for (int i = start; i <= last; i++) {, +                    char c = value.charAt(i);, +                    if (c == LINE_FEED || c == CARRIAGE_RETURN || c == COMMA) {, +                        firstUnescapedSpecial = i;, +                        break;, +                    }, +                    if (isDoubleQuote(c)) {, +                        if (i == last || !isDoubleQuote(value.charAt(i + 1))) {, +                            firstUnescapedSpecial = i;, +                            break;, +                        }, +                        i++;, +                    }, +                }, +            if (firstUnescapedSpecial < 0) {, +                // Special characters is not found or all of them already escaped., +                // In the most cases returns a same string. New string will be instantiated (via StringBuilder), +                // only if it really needed. It's important to prevent GC extra load., +                return quoted? value.subSequence(start - 1, last + 2) : value.subSequence(start, last + 1);, +        StringBuilder result = new StringBuilder(last - start + 1 + CSV_NUMBER_ESCAPE_CHARACTERS);, +        result.append(DOUBLE_QUOTE).append(value, start, firstUnescapedSpecial);, +        for (int i = firstUnescapedSpecial; i <= last; i++) {, +            char c = value.charAt(i);, +            if (isDoubleQuote(c)) {, +                result.append(DOUBLE_QUOTE);, +                if (i < last && isDoubleQuote(value.charAt(i + 1))) {, +                    i++;, +                }, +            }, +            result.append(c);, +        }, +        return result.append(DOUBLE_QUOTE);, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +        String className = checkNotNull(clazz, "clazz").getName();, +        int start;, +        int last;, +            last = indexOfLastNonOwsChar(value, start, length);, +        } else {, +            start = 0;, +            last = length - 1;, +        }, +        if (start > last) {, +, +        int firstUnescapedSpecial = -1;, +        boolean quoted = false;, +        if (isDoubleQuote(value.charAt(start))) {, +            quoted = isDoubleQuote(value.charAt(last)) && last > start;, +            if (quoted) {, +                start++;, +                last--;, +            } else {, +                firstUnescapedSpecial = start;, +        if (firstUnescapedSpecial < 0) {, +            if (quoted) {, +                    if (isDoubleQuote(value.charAt(i))) {, +                        if (i == last || !isDoubleQuote(value.charAt(i + 1))) {, +                            firstUnescapedSpecial = i;, +                        i++;, +                }, +            } else {, +                for (int i = start; i <= last; i++) {, +                    char c = value.charAt(i);, +                    if (c == LINE_FEED || c == CARRIAGE_RETURN || c == COMMA) {, +                        firstUnescapedSpecial = i;, +                        break;, +                    }, +                    if (isDoubleQuote(c)) {, +                        if (i == last || !isDoubleQuote(value.charAt(i + 1))) {, +                            firstUnescapedSpecial = i;, +                            break;, +                        }, +                        i++;]