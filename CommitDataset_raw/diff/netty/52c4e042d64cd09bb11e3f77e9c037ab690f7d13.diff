[+++ b/buffer/src/main/java/io/netty/buffer/ReadOnlyDirectByteBuf.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.ResourceLeak;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.ReadOnlyBufferException;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +, +, +/**, + * Read-only ByteBuf which wraps a read-only direct ByteBuffer., + */, +class ReadOnlyDirectByteBuf extends AbstractReferenceCountedByteBuf {, +    private final ResourceLeak leak = leakDetector.open(this);, +, +    protected final ByteBuffer buffer;, +    private final ByteBufAllocator allocator;, +    private ByteBuffer tmpNioBuf;, +, +    public ReadOnlyDirectByteBuf(ByteBufAllocator allocator, ByteBuffer buffer) {, +        super(buffer.remaining());, +        if (!buffer.isDirect()) {, +            throw new IllegalArgumentException("buffer must be readOnly");, +        }, +        this.allocator = allocator;, +        this.buffer = buffer.slice().order(ByteOrder.BIG_ENDIAN);, +        writerIndex(buffer.limit());, +    }, +, +    @Override, +    protected void deallocate() {, +        leak.close();, +    }, +, +    @Override, +    public byte getByte(int index) {, +        ensureAccessible();, +        return _getByte(index);, +    }, +, +    @Override, +    protected byte _getByte(int index) {, +        return buffer.get(index);, +    }, +, +    @Override, +    public short getShort(int index) {, +        ensureAccessible();, +        return _getShort(index);, +    }, +, +    @Override, +    protected short _getShort(int index) {, +        return buffer.getShort(index);, +    }, +, +    @Override, +    public int getUnsignedMedium(int index) {, +        ensureAccessible();, +        return _getUnsignedMedium(index);, +    }, +, +    @Override, +    protected int _getUnsignedMedium(int index) {, +        return (getByte(index) & 0xff) << 16 | (getByte(index + 1) & 0xff) << 8 | getByte(index + 2) & 0xff;, +    }, +, +    @Override, +    public int getInt(int index) {, +        ensureAccessible();, +        return _getInt(index);, +    }, +, +    @Override, +    protected int _getInt(int index) {, +        return buffer.getInt(index);, +    }, +, +    @Override]