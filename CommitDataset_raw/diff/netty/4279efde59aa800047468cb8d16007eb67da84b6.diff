[+++ b/common/src/main/java/io/netty/util/NetUtil.java, +        int startOffset = 0; // offset for [] ip addresses, +        int endOffset = ipAddress.length();, +        if (endOffset < 2) {, +        // Strip [], +        if (ipAddress.charAt(0) == '[') {, +            if (ipAddress.charAt(endOffset - 1) != ']') {, +                return false; // must have a close ], +            }, +, +            startOffset = 1;, +            endOffset --;, +        }, +, +        // Strip the interface name/index after the percent sign., +        int percentIdx = ipAddress.indexOf('%', startOffset);, +        if (percentIdx >= 0) {, +            endOffset = percentIdx;, +        }, +, +        for (int i = startOffset; i < endOffset; i ++) {, +                    if (numberOfColons == 7 && ipAddress.charAt(startOffset) != ':' &&, +                        ipAddress.charAt(1 + startOffset) != ':') {, +                    if (i == startOffset && (ipAddress.length() <= i || ipAddress.charAt(i + 1) != ':')) {, +            if (word.length() == 0 && ipAddress.charAt(length - 1 - startOffset) == ':' &&, +                ipAddress.charAt(length - 2 - startOffset) != ':') {, +        int tmp;, +++ b/common/src/main/java/io/netty/util/NetUtil.java, +        int startOffset = 0; // offset for [] ip addresses, +        int endOffset = ipAddress.length();, +        if (endOffset < 2) {, +        // Strip [], +        if (ipAddress.charAt(0) == '[') {, +            if (ipAddress.charAt(endOffset - 1) != ']') {, +                return false; // must have a close ], +            }, +, +            startOffset = 1;, +            endOffset --;, +        }, +, +        // Strip the interface name/index after the percent sign., +        int percentIdx = ipAddress.indexOf('%', startOffset);, +        if (percentIdx >= 0) {, +            endOffset = percentIdx;, +        }, +, +        for (int i = startOffset; i < endOffset; i ++) {, +                    if (numberOfColons == 7 && ipAddress.charAt(startOffset) != ':' &&, +                        ipAddress.charAt(1 + startOffset) != ':') {, +                    if (i == startOffset && (ipAddress.length() <= i || ipAddress.charAt(i + 1) != ':')) {, +            if (word.length() == 0 && ipAddress.charAt(length - 1 - startOffset) == ':' &&, +                ipAddress.charAt(length - 2 - startOffset) != ':') {, +        int tmp;, +++ b/common/src/test/java/io/netty/util/NetUtilTest.java, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +    private static final class TestMap extends HashMap<String, String> {, +        private static final long serialVersionUID = -298642816998608473L;, +, +        TestMap(String... values) {, +            for (int i = 0; i < values.length; i += 2) {, +                String key = values[i];, +                String value = values[i + 1];, +                put(key, value);, +, +    private static final Map<String, String> validIpV4Hosts = new TestMap(, +            "192.168.1.0",    "c0a80100",, +            "10.255.255.254", "0afffffe",, +            "172.18.5.4",     "ac120504",, +            "0.0.0.0",        "00000000",, +            "127.0.0.1",      "7f000001");, +, +    private static final Map<String, String> invalidIpV4Hosts = new TestMap(, +            "1.256.3.4",     null,, +            "256.0.0.1",     null,, +            "1.1.1.1.1",     null,, +            "x.255.255.255", null,, +            "0.1:0.0",       null,, +            "0.1.0.0:",      null,, +            "127.0.0.",      null,, +            "1.2..4",        null,, +            "192.0.1",       null,, +            "192.0.1.1.1",   null,, +            "192.0.1.a",     null,, +            "19a.0.1.1",     null,, +            "a.0.1.1",       null,, +            ".0.1.1",        null,, +            "...",           null);, +    , +    private static final Map<String, String> validIpV6Hosts = new TestMap(, +            "::ffff:5.6.7.8",                            "00000000000000000000ffff05060708",, +            "fdf8:f53b:82e4::53",                        "fdf8f53b82e400000000000000000053",, +            "fe80::200:5aee:feaa:20a2",                  "fe8000000000000002005aeefeaa20a2",, +            "2001::1",                                   "20010000000000000000000000000001",, +            "2001:0000:4136:e378:8000:63bf:3fff:fdd2",   "200100004136e378800063bf3ffffdd2",, +            "2001:0002:6c::430",                         "20010002006c00000000000000000430",, +            "2001:10:240:ab::a",                         "20010010024000ab000000000000000a",, +            "2002:cb0a:3cdd:1::1",                       "2002cb0a3cdd00010000000000000001",]