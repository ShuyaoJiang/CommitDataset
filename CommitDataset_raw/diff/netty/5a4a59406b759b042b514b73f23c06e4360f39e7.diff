[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (nioBufferCount() == 1) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (nioBufferCount() == 1) {, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns the maximum number of NIO {@link ByteBuffer}s that consist this buffer.  Note that {@link #nioBuffers()}, +     * or {@link #nioBuffers(int, int)} might return a less number of {@link ByteBuffer}s., +     *, +     * @return {@code -1} if this buffer has no underlying {@link ByteBuffer}., +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one undelying, +     *         {@link ByteBuffer}.  Note that this method does not return {@code 0} to avoid confusion., +     *, +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +    int nioBufferCount();, +     * to {@code buf.nioBuffer(buf.readerIndex(), buf.readableBytes())}.  This method does not, +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (nioBufferCount() == 1) {, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns the maximum number of NIO {@link ByteBuffer}s that consist this buffer.  Note that {@link #nioBuffers()}, +     * or {@link #nioBuffers(int, int)} might return a less number of {@link ByteBuffer}s., +     *, +     * @return {@code -1} if this buffer has no underlying {@link ByteBuffer}., +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one undelying, +     *         {@link ByteBuffer}.  Note that this method does not return {@code 0} to avoid confusion., +     *, +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +    int nioBufferCount();, +     * to {@code buf.nioBuffer(buf.readerIndex(), buf.readableBytes())}.  This method does not, +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +    public int nioBufferCount() {, +        return components.size();, +            buffers.add(s.nioBuffer(index - adjustment, localLength));, +        if (buf.nioBufferCount() == 1) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        if (nioBufferCount() == 1) {, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns the maximum number of NIO {@link ByteBuffer}s that consist this buffer.  Note that {@link #nioBuffers()}, +     * or {@link #nioBuffers(int, int)} might return a less number of {@link ByteBuffer}s., +     *, +     * @return {@code -1} if this buffer has no underlying {@link ByteBuffer}., +     *         the number of the underlying {@link ByteBuffer}s if this buffer has at least one undelying, +     *         {@link ByteBuffer}.  Note that this method does not return {@code 0} to avoid confusion., +     *, +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +    int nioBufferCount();, +     * to {@code buf.nioBuffer(buf.readerIndex(), buf.readableBytes())}.  This method does not, +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffers(), +     * @see #nioBuffers(int, int), +     *, +     * @see #nioBufferCount(), +     * @see #nioBuffer(), +     * @see #nioBuffer(int, int), +     *]