[+++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +         * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +         * some, all, or none of read bytes depending on its internal implementation to reduce, +         * overall memory bandwidth consumption at the cost of potentially additional memory, +         * consumption., +         */, +        void discardSomeReadBytes();, +, +        /**, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +         * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +         * some, all, or none of read bytes depending on its internal implementation to reduce, +         * overall memory bandwidth consumption at the cost of potentially additional memory, +         * consumption., +         */, +        void discardSomeReadBytes();, +, +        /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        public void discardSomeReadBytes() {, +            discardReadComponents();, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +         * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +         * some, all, or none of read bytes depending on its internal implementation to reduce, +         * overall memory bandwidth consumption at the cost of potentially additional memory, +         * consumption., +         */, +        void discardSomeReadBytes();, +, +        /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        public void discardSomeReadBytes() {, +            discardReadComponents();, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/DirectByteBuf.java, +        public void discardSomeReadBytes() {, +            final int readerIndex = readerIndex();, +            if (readerIndex == writerIndex()) {, +                discardReadBytes();, +                return;, +            }, +, +            if (readerIndex > 0 && readerIndex >= capacity >>> 1) {, +                discardReadBytes();, +            }, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +         * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +         * some, all, or none of read bytes depending on its internal implementation to reduce, +         * overall memory bandwidth consumption at the cost of potentially additional memory, +         * consumption., +         */, +        void discardSomeReadBytes();, +, +        /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        public void discardSomeReadBytes() {, +            discardReadComponents();, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/DirectByteBuf.java, +        public void discardSomeReadBytes() {, +            final int readerIndex = readerIndex();, +            if (readerIndex == writerIndex()) {, +                discardReadBytes();, +                return;, +            }, +, +            if (readerIndex > 0 && readerIndex >= capacity >>> 1) {, +                discardReadBytes();, +            }, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +        public void discardSomeReadBytes() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +         * Similar to {@link ByteBuf#discardReadBytes()} except that this method might discard, +         * some, all, or none of read bytes depending on its internal implementation to reduce, +         * overall memory bandwidth consumption at the cost of potentially additional memory, +         * consumption., +         */, +        void discardSomeReadBytes();, +, +        /**, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +        public void discardSomeReadBytes() {, +            discardReadComponents();]