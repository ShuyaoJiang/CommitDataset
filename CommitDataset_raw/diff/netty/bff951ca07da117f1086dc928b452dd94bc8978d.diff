[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +            if (msg instanceof HttpResponse) {, +                HttpResponse rep = (HttpResponse) msg;, +                if (!SWITCHING_PROTOCOLS.equals(rep.status())) {, +                    // The server does not support the requested protocol, just remove this handler, +                    // and continue processing HTTP., +                    // NOTE: not releasing the response since we're letting it propagate to the, +                    // next handler., +                    ctx.fireUserEventTriggered(UpgradeEvent.UPGRADE_REJECTED);, +                    removeThisHandler(ctx);, +                    ctx.fireChannelRead(msg);, +                    return;, +                }, +            }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientUpgradeHandler.java, +            if (msg instanceof HttpResponse) {, +                HttpResponse rep = (HttpResponse) msg;, +                if (!SWITCHING_PROTOCOLS.equals(rep.status())) {, +                    // The server does not support the requested protocol, just remove this handler, +                    // and continue processing HTTP., +                    // NOTE: not releasing the response since we're letting it propagate to the, +                    // next handler., +                    ctx.fireUserEventTriggered(UpgradeEvent.UPGRADE_REJECTED);, +                    removeThisHandler(ctx);, +                    ctx.fireChannelRead(msg);, +                    return;, +                }, +            }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientUpgradeHandlerTest.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.embedded.EmbeddedChannel;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Map;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +public class HttpClientUpgradeHandlerTest {, +, +    private static final class FakeSourceCodec implements HttpClientUpgradeHandler.SourceCodec {, +        @Override, +        public void prepareUpgradeFrom(ChannelHandlerContext ctx) {, +        }, +, +        @Override, +        public void upgradeFrom(ChannelHandlerContext ctx) {, +        }, +    }, +, +    private static final class FakeUpgradeCodec implements HttpClientUpgradeHandler.UpgradeCodec {, +        @Override, +        public CharSequence protocol() {, +            return "fancyhttp";, +        }, +, +        @Override, +        public Collection<CharSequence> setUpgradeHeaders(ChannelHandlerContext ctx, HttpRequest upgradeRequest) {, +            return Collections.emptyList();, +        }, +, +        @Override, +        public void upgradeTo(ChannelHandlerContext ctx, FullHttpResponse upgradeResponse) throws Exception {, +        }, +    }, +, +    private static final class UserEventCatcher extends ChannelInboundHandlerAdapter {, +        private Object evt;, +, +        public Object getUserEvent() {, +            return evt;, +        }, +, +        @Override, +        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {]