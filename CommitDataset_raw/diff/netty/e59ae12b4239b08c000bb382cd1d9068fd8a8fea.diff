[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private static final int CONTINUE_CODE = HttpResponseStatus.CONTINUE.code();, +                final int code = res.getStatus().code();, +                if (code == CONTINUE_CODE) {, +                    // We need to not poll the encoding when response with CONTINUE as another response will follow, +                    // for the issued request. See https://github.com/netty/netty/issues/4079, +                    acceptEncoding = null;, +                } else {, +                }, +                if (isPassthru(code, acceptEncoding)) {, +    private static boolean isPassthru(int code, CharSequence httpMethod) {, +        return code < 200 || code == 204 || code == 304 ||, +               (httpMethod == ZERO_LENGTH_HEAD || (httpMethod == ZERO_LENGTH_CONNECT && code == 200));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +    private static final int CONTINUE_CODE = HttpResponseStatus.CONTINUE.code();, +                final int code = res.getStatus().code();, +                if (code == CONTINUE_CODE) {, +                    // We need to not poll the encoding when response with CONTINUE as another response will follow, +                    // for the issued request. See https://github.com/netty/netty/issues/4079, +                    acceptEncoding = null;, +                } else {, +                }, +                if (isPassthru(code, acceptEncoding)) {, +    private static boolean isPassthru(int code, CharSequence httpMethod) {, +        return code < 200 || code == 204 || code == 304 ||, +               (httpMethod == ZERO_LENGTH_HEAD || (httpMethod == ZERO_LENGTH_CONNECT && code == 200));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +import io.netty.handler.codec.EncoderException;, +import io.netty.util.ReferenceCountUtil;, +    @Test, +    public void test100Continue() throws Exception {, +        FullHttpRequest request = newRequest();, +        HttpHeaders.set100ContinueExpected(request);, +, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        ch.writeInbound(request);, +, +        FullHttpResponse continueResponse = new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.CONTINUE, Unpooled.EMPTY_BUFFER);, +, +        ch.writeOutbound(continueResponse);, +, +        FullHttpResponse res = new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.EMPTY_BUFFER);, +        res.trailingHeaders().set("X-Test", "Netty");, +        ch.writeOutbound(res);, +, +        Object o = ch.readOutbound();, +        assertThat(o, is(instanceOf(FullHttpResponse.class)));, +, +        res = (FullHttpResponse) o;, +        assertSame(continueResponse, res);, +        res.release();, +, +        o = ch.readOutbound();, +        assertThat(o, is(instanceOf(FullHttpResponse.class)));, +, +        res = (FullHttpResponse) o;, +        assertThat(res.headers().get(HttpHeaderNames.TRANSFER_ENCODING), is(nullValue()));, +, +        // Content encoding shouldn't be modified., +        assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING), is(nullValue()));, +        assertThat(res.content().readableBytes(), is(0));, +        assertThat(res.content().toString(CharsetUtil.US_ASCII), is(""));, +        assertEquals("Netty", res.trailingHeaders().get("X-Test"));, +        assertThat(ch.readOutbound(), is(nullValue()));, +    }, +, +    @Test, +    public void testTooManyResponses() throws Exception {, +        FullHttpRequest request = newRequest();, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpContentCompressor());, +        ch.writeInbound(request);, +, +        ch.writeOutbound(new DefaultFullHttpResponse(, +                HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.EMPTY_BUFFER));, +, +        try {, +            ch.writeOutbound(new DefaultFullHttpResponse(, +                    HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.EMPTY_BUFFER));, +            fail();, +        } catch (EncoderException e) {, +            assertTrue(e.getCause() instanceof IllegalStateException);, +        }, +        assertTrue(ch.finish());, +        for (;;) {, +            Object message = ch.readOutbound();, +            if (message == null) {, +                break;, +            }, +            ReferenceCountUtil.release(message);, +        }, +        for (;;) {, +            Object message = ch.readInbound();, +            if (message == null) {, +                break;, +            }, +            ReferenceCountUtil.release(message);, +        }, +    }]