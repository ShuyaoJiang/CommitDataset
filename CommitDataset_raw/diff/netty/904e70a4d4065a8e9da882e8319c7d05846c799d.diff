[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        @Override, +        public final boolean isWriteAllowed() {, +            return windowSize() >= 0;, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        @Override, +        public final boolean isWriteAllowed() {, +            return windowSize() >= 0;, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamByteDistributor.java, +, +        /**, +         * Determine if a write operation is allowed for this stream. This will typically take into account the, +         * stream's flow controller being non-negative., +         * @return {@code true} if a write is allowed on this stream. {@code false} otherwise., +         */, +        boolean isWriteAllowed();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        @Override, +        public final boolean isWriteAllowed() {, +            return windowSize() >= 0;, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamByteDistributor.java, +, +        /**, +         * Determine if a write operation is allowed for this stream. This will typically take into account the, +         * stream's flow controller being non-negative., +         * @return {@code true} if a write is allowed on this stream. {@code false} otherwise., +         */, +        boolean isWriteAllowed();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +        @Override, +        public final boolean isWriteAllowed() {, +            return windowSize() >= 0;, +        }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamByteDistributor.java, +, +        /**, +         * Determine if a write operation is allowed for this stream. This will typically take into account the, +         * stream's flow controller being non-negative., +         * @return {@code true} if a write is allowed on this stream. {@code false} otherwise., +         */, +        boolean isWriteAllowed();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/WeightedFairQueueByteDistributor.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.handler.codec.http2;, +, +import io.netty.util.internal.MathUtil;, +import io.netty.util.internal.PriorityQueue;, +import io.netty.util.internal.PriorityQueueNode;, +, +import java.util.Queue;, +, +import static io.netty.handler.codec.http2.Http2CodecUtil.CONNECTION_STREAM_ID;, +import static io.netty.handler.codec.http2.Http2Error.INTERNAL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static java.lang.Math.min;, +, +/**, + * A {@link StreamByteDistributor} that is sensitive to stream priority and uses, + * <a href="https://en.wikipedia.org/wiki/Weighted_fair_queueing">Weighted Fair Queueing</a> approach for distributing, + * bytes., + * <p>, + * Inspiration for this distributor was taken from Linux's, + * <a href="https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/Documentation/scheduler, + * /sched-design-CFS.txt">Completely Fair Scheduler</a>, + * to model the distribution of bytes to simulate an "ideal multi-tasking CPU", but in this case we are simulating, + * an "ideal multi-tasking NIC"., + * <p>, + * Each write operation will use the {@link #allocationQuantum(int)} to know how many more bytes should be allocated, + * relative to the next stream which wants to write. This is to balance fairness while also considering goodput., + */, +public final class WeightedFairQueueByteDistributor implements StreamByteDistributor {, +    private final Http2Connection.PropertyKey stateKey;, +    private final State connectionState;, +    /**, +     * The minimum number of bytes that we will attempt to allocate to a stream. This is to, +     * help improve goodput on a per-stream basis., +     */]