[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            total = -1;, +            if (progress < 0 || isDone()) {, +                return false;, +            }, +        } else if (progress < 0 || progress > total || isDone()) {, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            total = -1;, +            if (progress < 0 || isDone()) {, +                return false;, +            }, +        } else if (progress < 0 || progress > total || isDone()) {, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +import io.netty.channel.DefaultFileRegion;, +    private final boolean useSendFile;, +, +    public HttpStaticFileServerHandler(boolean useSendFile) {, +        this.useSendFile = useSendFile;, +    }, +, +, +        ChannelFuture sendFileFuture;, +        if (useSendFile) {, +            sendFileFuture =, +                    ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());, +        } else {, +            sendFileFuture =, +                    ctx.write(new ChunkedFile(raf, 0, fileLength, 8192), ctx.newProgressivePromise());, +        }, +, +        sendFileFuture.addListener(new ChannelProgressiveFutureListener() {, +            public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {, +                if (total < 0) { // total unknown, +                } else {, +                    System.err.println("Transfer progress: " + progress + " / " + total);, +                }, +, +        ChannelFuture lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);, +            lastContentFuture.addListener(ChannelFutureListener.CLOSE);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            total = -1;, +            if (progress < 0 || isDone()) {, +                return false;, +            }, +        } else if (progress < 0 || progress > total || isDone()) {, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +import io.netty.channel.DefaultFileRegion;, +    private final boolean useSendFile;, +, +    public HttpStaticFileServerHandler(boolean useSendFile) {, +        this.useSendFile = useSendFile;, +    }, +, +, +        ChannelFuture sendFileFuture;, +        if (useSendFile) {, +            sendFileFuture =, +                    ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());, +        } else {, +            sendFileFuture =, +                    ctx.write(new ChunkedFile(raf, 0, fileLength, 8192), ctx.newProgressivePromise());, +        }, +, +        sendFileFuture.addListener(new ChannelProgressiveFutureListener() {, +            public void operationProgressed(ChannelProgressiveFuture future, long progress, long total) {, +                if (total < 0) { // total unknown, +                } else {, +                    System.err.println("Transfer progress: " + progress + " / " + total);, +                }, +, +        ChannelFuture lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT);, +            lastContentFuture.addListener(ChannelFutureListener.CLOSE);, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerInitializer.java, +        pipeline.addLast("handler", new HttpStaticFileServerHandler(true)); // Specify false if SSL., +++ b/common/src/main/java/io/netty/util/concurrent/DefaultProgressivePromise.java, +        if (total < 0) {, +            total = -1;, +            if (progress < 0 || isDone()) {, +                return false;, +            }, +        } else if (progress < 0 || progress > total || isDone()) {, +++ b/example/src/main/java/io/netty/example/http/file/HttpStaticFileServerHandler.java, +import io.netty.channel.DefaultFileRegion;, +    private final boolean useSendFile;, +, +    public HttpStaticFileServerHandler(boolean useSendFile) {, +        this.useSendFile = useSendFile;, +    }, +, +, +        ChannelFuture sendFileFuture;, +        if (useSendFile) {, +            sendFileFuture =, +                    ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise());, +        } else {, +            sendFileFuture =, +                    ctx.write(new ChunkedFile(raf, 0, fileLength, 8192), ctx.newProgressivePromise());]