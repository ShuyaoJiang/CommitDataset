[+++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, +        stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, +        stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +       <version>${project.version}</version>, +     </dependency>, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, +        stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +       <version>${project.version}</version>, +     </dependency>, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelImpl.java, +            if (m instanceof SctpFrame) {, +                return ((SctpFrame) m).getPayloadBuffer().readableBytes();, +++ b/example/src/main/java/io/netty/example/sctp/SctpClientHandler.java, +import io.netty.channel.sctp.SctpFrame;, +        stateEvent.getChannel().write(new SctpFrame(0, 0, ChannelBuffers.wrappedBuffer("SCTP ECHO".getBytes())));, +++ b/transport-sctp/pom.xml, +    <dependency>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-codec</artifactId>, +       <version>${project.version}</version>, +     </dependency>, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpChannelImpl.java, +            if (m instanceof SctpFrame) {, +                return ((SctpFrame) m).getPayloadBuffer().readableBytes();, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpFrame.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.sctp;, +, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBuffers;, +, +/**, + */, +public final class SctpFrame {, +    private final int streamIdentifier;, +    private final int protocolIdentifier;, +    private final ChannelBuffer payloadBuffer;, +, +    /**, +     * Essential data that is being carried within SCTP Data Chunk, +     * @param protocolIdentifier of payload, +     * @param streamIdentifier that you want to send the payload, +     * @param payloadBuffer channel buffer, +     */, +    public SctpFrame(int protocolIdentifier, int streamIdentifier, ChannelBuffer payloadBuffer) {, +        this.protocolIdentifier = protocolIdentifier;, +        this.streamIdentifier = streamIdentifier;, +        this.payloadBuffer = payloadBuffer;, +    }, +, +    public int getStreamIdentifier() {, +        return streamIdentifier;, +    }, +, +    public int getProtocolIdentifier() {, +        return protocolIdentifier;, +    }, +, +    public ChannelBuffer getPayloadBuffer() {, +        if (payloadBuffer.readable()) {, +            return payloadBuffer.slice();, +        } else {, +            return ChannelBuffers.EMPTY_BUFFER;, +        }, +    }, +, +    @Override, +    public String toString() {, +        return new StringBuilder()., +                append("SctpFrame{")., +                append("streamIdentifier=")., +                append(streamIdentifier)., +                append(", protocolIdentifier=")., +                append(protocolIdentifier).]