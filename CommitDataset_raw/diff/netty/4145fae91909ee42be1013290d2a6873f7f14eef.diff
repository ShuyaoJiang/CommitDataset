[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import static io.netty.handler.codec.http2.Http2Error.valueOf;, +                    setDynamicTableSize(decodeULE128(in, index));, +                    headersLength = indexHeader(decodeULE128(in, index), headers, headersLength);, +                    name = readName(decodeULE128(in, index));, +                    nameLength = decodeULE128(in, index);, +                    valueLength = decodeULE128(in, index);, +    private static int decodeULE128(ByteBuf in, int result) throws Http2Exception {, +        assert result <= 0x7f && result >= 0;, +        for (int readerIndex = in.readerIndex(), shift = 0;, +            if (shift == 28 && ((b & 0x80) != 0 || b > 6)) {, +                // the maximum value that can be represented by a signed 32 bit number is:, +                // 0x7f + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x6 << 28), +                // this means any more shifts will result in overflow so we should break out and throw an error., +                return result + ((b & 0x7F) << shift);, +            result += (b & 0x7F) << shift;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import static io.netty.handler.codec.http2.Http2Error.valueOf;, +                    setDynamicTableSize(decodeULE128(in, index));, +                    headersLength = indexHeader(decodeULE128(in, index), headers, headersLength);, +                    name = readName(decodeULE128(in, index));, +                    nameLength = decodeULE128(in, index);, +                    valueLength = decodeULE128(in, index);, +    private static int decodeULE128(ByteBuf in, int result) throws Http2Exception {, +        assert result <= 0x7f && result >= 0;, +        for (int readerIndex = in.readerIndex(), shift = 0;, +            if (shift == 28 && ((b & 0x80) != 0 || b > 6)) {, +                // the maximum value that can be represented by a signed 32 bit number is:, +                // 0x7f + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x6 << 28), +                // this means any more shifts will result in overflow so we should break out and throw an error., +                return result + ((b & 0x7F) << shift);, +            result += (b & 0x7F) << shift;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/internal/hpack/DecoderTest.java, +import static java.lang.Integer.MAX_VALUE;, +        decode("FF8080808007");, +        decoder.setMaxHeaderTableSize(MAX_VALUE);, +    public void testMaxValidDynamicTableSize() throws Http2Exception {, +        decoder.setMaxHeaderTableSize(MAX_VALUE);, +        String baseValue = "3FE1FFFFFF0";, +        for (int i = 0; i < 7; ++i) {, +            decode(baseValue + i);, +        }, +    }, +, +    @Test]