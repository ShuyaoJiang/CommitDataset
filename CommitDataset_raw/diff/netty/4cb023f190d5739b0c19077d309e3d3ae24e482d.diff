[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    public ByteBuf ioBuffer(int initialCapacity) {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(initialCapacity);, +        }, +        return heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf ioBuffer(int initialCapacity, int maxCapacity) {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(initialCapacity, maxCapacity);, +        }, +        return heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    public ByteBuf ioBuffer(int initialCapacity) {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(initialCapacity);, +        }, +        return heapBuffer(initialCapacity);, +    }, +, +    @Override, +    public ByteBuf ioBuffer(int initialCapacity, int maxCapacity) {, +        if (PlatformDependent.hasUnsafe()) {, +            return directBuffer(initialCapacity, maxCapacity);, +        }, +        return heapBuffer(initialCapacity, maxCapacity);, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufAllocator.java, +     * Allocate a {@link ByteBuf} whose initial capacity is 0, preferably a direct buffer which is suitable for I/O., +     */, +    ByteBuf ioBuffer();, +, +    /**, +     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O., +     */, +    ByteBuf ioBuffer(int initialCapacity);, +, +    /**, +     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O., +     */, +    ByteBuf ioBuffer(int initialCapacity, int maxCapacity);, +, +    /**]