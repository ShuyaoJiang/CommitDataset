[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +, +     * <p>, +     * <p>, +     * {@link ByteBuf#release()} ownership of {@code buffer} is transfered to this {@link CompositeByteBuf}., +     * @param buffer the {@link ByteBuf} to add. {@link ByteBuf#release()} ownership is transfered to this, +     * {@link CompositeByteBuf}., +        checkNotNull(buffer, "buffer");, +     * <p>, +     * <p>, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects in {@code buffers} is transfered to this, +     * {@link CompositeByteBuf}., +     * @param buffers the {@link ByteBuf}s to add. {@link ByteBuf#release()} ownership of all {@link ByteBuf#release()}, +     * ownership of all {@link ByteBuf} objects is transfered to this {@link CompositeByteBuf}., +     * <p>, +     * <p>, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects in {@code buffers} is transfered to this, +     * {@link CompositeByteBuf}., +     * @param buffers the {@link ByteBuf}s to add. {@link ByteBuf#release()} ownership of all {@link ByteBuf#release()}, +     * ownership of all {@link ByteBuf} objects is transfered to this {@link CompositeByteBuf}., +     * <p>, +     * <p>, +     * {@link ByteBuf#release()} ownership of {@code buffer} is transfered to this {@link CompositeByteBuf}., +     * @param cIndex the index on which the {@link ByteBuf} will be added., +     * @param buffer the {@link ByteBuf} to add. {@link ByteBuf#release()} ownership is transfered to this, +     * {@link CompositeByteBuf}., +        checkNotNull(buffer, "buffer");, +    /**, +     * Precondition is that {@code buffer != null}., +     */, +        assert buffer != null;, +        boolean wasAdded = false;, +        try {, +            @SuppressWarnings("deprecation"), +                wasAdded = components.add(c);, +                wasAdded = true;, +        } finally {, +            if (!wasAdded) {, +                buffer.release();, +            }, +        }, +     * <p>, +     * <p>, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects in {@code buffers} is transfered to this, +     * {@link CompositeByteBuf}., +     * @param cIndex the index on which the {@link ByteBuf} will be added. {@link ByteBuf#release()} ownership of all, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects is transfered to this, +     * {@link CompositeByteBuf}., +     * @param buffers the {@link ByteBuf}s to add. {@link ByteBuf#release()} ownership of all {@link ByteBuf#release()}, +     * ownership of all {@link ByteBuf} objects is transfered to this {@link CompositeByteBuf}., +        checkNotNull(buffers, "buffers");, +        int i = 0;, +        try {, +            while (i < buffers.length) {, +                // Increment i now to prepare for the next iteration and prevent a duplicate release (addComponent0, +                // will release if an exception occurs, and we also release in the finally block here)., +                ByteBuf b = buffers[i++];, +        } finally {, +            for (; i < buffers.length; ++i) {, +                ByteBuf b = buffers[i];, +                if (b != null) {, +                    try {, +                        b.release();, +                    } catch (Throwable ignored) {, +                        // ignore, +                    }, +                }, +            }, +        }, +     * <p>, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects in {@code buffers} is transfered to this, +     * {@link CompositeByteBuf}., +     * @param buffers the {@link ByteBuf}s to add.  {@link ByteBuf#release()} ownership of all, +     * {@link ByteBuf#release()} ownership of all {@link ByteBuf} objects is transfered to this, +     * {@link CompositeByteBuf}., +        checkNotNull(buffers, "buffers");, +            try {, +            } finally {, +                if (buffers != list) {, +                    for (ByteBuf b: buffers) {, +                        if (b != null) {, +                            try {, +                                b.release();, +                            } catch (Throwable ignored) {, +                                // ignore, +                            }, +                        }, +                    }, +                }, +            }, +        return direct ? alloc().directBuffer(capacity) : alloc().heapBuffer(capacity);]