[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerKeepAliveHandler.java, +            promise = promise.unvoid().addListener(ChannelFutureListener.CLOSE);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpServerKeepAliveHandler.java, +            promise = promise.unvoid().addListener(ChannelFutureListener.CLOSE);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpServerKeepAliveHandlerTest.java, +    public void testConnectionCloseHeaderHandledCorrectly() throws Exception {, +        HttpResponse response = new DefaultFullHttpResponse(httpVersion, responseStatus);, +        response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);, +        setupMessageLength(response);, +, +        channel.writeAndFlush(response);, +        HttpResponse writtenResponse = channel.readOutbound();, +, +        assertFalse(channel.isOpen());, +        ReferenceCountUtil.release(writtenResponse);, +        assertFalse(channel.finishAndReleaseAll());, +    }, +, +    @Test, +    public void testConnectionCloseHeaderHandledCorrectlyForVoidPromise() throws Exception {, +        HttpResponse response = new DefaultFullHttpResponse(httpVersion, responseStatus);, +        response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);, +        setupMessageLength(response);, +, +        channel.writeAndFlush(response, channel.voidPromise());, +        HttpResponse writtenResponse = channel.readOutbound();, +, +        assertFalse(channel.isOpen());, +        ReferenceCountUtil.release(writtenResponse);, +        assertFalse(channel.finishAndReleaseAll());, +    }, +, +    @Test]