[+++ b/common/src/main/java/io/netty/util/internal/CleanerJava9.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +            final ByteBuffer buffer = ByteBuffer.allocateDirect(1);, +            Object maybeInvokeMethod = AccessController.doPrivileged(new PrivilegedAction<Object>() {, +                @Override, +                public Object run() {, +                        Method m = PlatformDependent0.UNSAFE.getClass().getDeclaredMethod(, +                                "invokeCleaner", ByteBuffer.class);, +                        return m;, +                        return e;, +                        return e;, +                        return e;, +                }, +            });, +, +        // Try to minimize overhead when there is no SecurityManager present., +        // See https://bugs.openjdk.java.net/browse/JDK-8191053., +        if (System.getSecurityManager() == null) {, +        } else {, +            freeDirectBufferPrivileged(buffer);, +        }, +    }, +, +    private static void freeDirectBufferPrivileged(final ByteBuffer buffer) {, +        Exception error = AccessController.doPrivileged(new PrivilegedAction<Exception>() {, +            @Override, +            public Exception run() {, +                try {, +                    INVOKE_CLEANER.invoke(PlatformDependent0.UNSAFE, buffer);, +                } catch (InvocationTargetException e) {, +                    return e;, +                } catch (IllegalAccessException e) {, +                    return e;, +                }, +                return null;, +            }, +        });, +        if (error != null) {, +            PlatformDependent0.throwException(error);, +        }]