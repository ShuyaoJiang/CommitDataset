[+++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +/**, + * Default {@link SingleThreadEventExecutor} implementation which just execute all submitted task in a, + * serial fashion, + *, + */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +/**, + * Default {@link SingleThreadEventExecutor} implementation which just execute all submitted task in a, + * serial fashion, + *, + */, +++ b/transport/src/main/java/io/netty/channel/EventExecutor.java, +/**, + * The {@link EventExecutor} is a special {@link ScheduledExecutorService} which comes, + * with some handy methods to see if a {@link Thread} is executed in a event loop., + * Beside this it also extends the {@link EventExecutorGroup} to allow a generic way to, + * access methods., + *, + */, +, +    /**, +     * Returns a reference to itself., +     */, +    @Override, +    EventExecutor next();, +, +    /**, +     * Return the {@link EventExecutorGroup} which is the parent of this {@link EventExecutor},, +     * or <code>null</code> if it has no parent, +, +     */, +, +    /**, +     * Calls {@link #inEventLoop(Thread)} with {@link Thread#currentThread()} as argument, +     */, +, +    /**, +     * Return <code>true</code> if the given {@link Thread} is executed in the event loop,, +     * <code>false</code> otherwise., +     */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +/**, + * Default {@link SingleThreadEventExecutor} implementation which just execute all submitted task in a, + * serial fashion, + *, + */, +++ b/transport/src/main/java/io/netty/channel/EventExecutor.java, +/**, + * The {@link EventExecutor} is a special {@link ScheduledExecutorService} which comes, + * with some handy methods to see if a {@link Thread} is executed in a event loop., + * Beside this it also extends the {@link EventExecutorGroup} to allow a generic way to, + * access methods., + *, + */, +, +    /**, +     * Returns a reference to itself., +     */, +    @Override, +    EventExecutor next();, +, +    /**, +     * Return the {@link EventExecutorGroup} which is the parent of this {@link EventExecutor},, +     * or <code>null</code> if it has no parent, +, +     */, +, +    /**, +     * Calls {@link #inEventLoop(Thread)} with {@link Thread#currentThread()} as argument, +     */, +, +    /**, +     * Return <code>true</code> if the given {@link Thread} is executed in the event loop,, +     * <code>false</code> otherwise., +     */, +++ b/transport/src/main/java/io/netty/channel/EventExecutorGroup.java, +/**, + * The {@link EventExecutorGroup} is responsible to provide {@link EventExecutor}'s to use via its, + * {@link #next()} method. Beside this it also is responsible to handle their live-cycle and allows, + * to shut them down in a global fashion., + *, + */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +/**, + * Default {@link SingleThreadEventExecutor} implementation which just execute all submitted task in a, + * serial fashion, + *, + */, +++ b/transport/src/main/java/io/netty/channel/EventExecutor.java, +/**, + * The {@link EventExecutor} is a special {@link ScheduledExecutorService} which comes, + * with some handy methods to see if a {@link Thread} is executed in a event loop., + * Beside this it also extends the {@link EventExecutorGroup} to allow a generic way to, + * access methods., + *, + */, +, +    /**, +     * Returns a reference to itself.]