[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                // Disable ticket support by default to be more inline with SSLEngineImpl of the JDK., +                // This also let SSLSession.getId() work the same way for the JDK implementation and the OpenSSLEngine., +                // If tickets are supported SSLSession.getId() will only return an ID on the server-side if it could, +                // make use of tickets., +                SSLContext.setOptions(ctx, SSL.SSL_OP_NO_TICKET);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                // Disable ticket support by default to be more inline with SSLEngineImpl of the JDK., +                // This also let SSLSession.getId() work the same way for the JDK implementation and the OpenSSLEngine., +                // If tickets are supported SSLSession.getId() will only return an ID on the server-side if it could, +                // make use of tickets., +                SSLContext.setOptions(ctx, SSL.SSL_OP_NO_TICKET);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslSessionContext.java, +import io.netty.util.internal.ObjectUtil;, +import org.apache.tomcat.jni.SSL;, +        ObjectUtil.checkNotNull(keys, "keys");, +        SSLContext.clearOptions(context.ctx, SSL.SSL_OP_NO_TICKET);, +        ObjectUtil.checkNotNull(keys, "keys");, +        SSLContext.clearOptions(context.ctx, SSL.SSL_OP_NO_TICKET);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +                // Disable ticket support by default to be more inline with SSLEngineImpl of the JDK., +                // This also let SSLSession.getId() work the same way for the JDK implementation and the OpenSSLEngine., +                // If tickets are supported SSLSession.getId() will only return an ID on the server-side if it could, +                // make use of tickets., +                SSLContext.setOptions(ctx, SSL.SSL_OP_NO_TICKET);, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslSessionContext.java, +import io.netty.util.internal.ObjectUtil;, +import org.apache.tomcat.jni.SSL;, +        ObjectUtil.checkNotNull(keys, "keys");, +        SSLContext.clearOptions(context.ctx, SSL.SSL_OP_NO_TICKET);, +        ObjectUtil.checkNotNull(keys, "keys");, +        SSLContext.clearOptions(context.ctx, SSL.SSL_OP_NO_TICKET);, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +    @Test, +    public void testSSLSessionId() throws Exception {, +        final SslContext clientContext = SslContextBuilder.forClient(), +                .trustManager(InsecureTrustManagerFactory.INSTANCE), +                .sslProvider(sslProvider()), +                .build();, +        SelfSignedCertificate ssc = new SelfSignedCertificate();, +        SslContext serverContext = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()), +                .sslProvider(sslProvider()), +                .build();, +        SSLEngine clientEngine = clientContext.newEngine(UnpooledByteBufAllocator.DEFAULT);, +        SSLEngine serverEngine = serverContext.newEngine(UnpooledByteBufAllocator.DEFAULT);, +, +        // Before the handshake the id should have length == 0, +        assertEquals(0, clientEngine.getSession().getId().length);, +        assertEquals(0, serverEngine.getSession().getId().length);, +, +        handshake(clientEngine, serverEngine);, +, +        // After the handshake the id should have length > 0, +        assertNotEquals(0, clientEngine.getSession().getId().length);, +        assertNotEquals(0, serverEngine.getSession().getId().length);, +        assertArrayEquals(clientEngine.getSession().getId(), serverEngine.getSession().getId());, +    }, +]