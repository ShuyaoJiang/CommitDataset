[+++ b/codec/src/test/java/io/netty/handler/codec/compression/ZlibTest.java, +import io.netty.buffer.ByteBufInputStream;, +import io.netty.util.internal.EmptyArrays;, +import java.util.zip.GZIPInputStream;, +    public void testGZ() throws Exception {, +    private void testDecompressOnly(ZlibWrapper decoderWrapper, byte[] compressed, byte[] data) throws Exception {, +        testDecompressOnly(ZlibWrapper.ZLIB, deflate(BYTES_LARGE2), BYTES_LARGE2);, +        testDecompressOnly(ZlibWrapper.GZIP, gzip(BYTES_LARGE2), BYTES_LARGE2);, +    }, +, +    @Test, +    public void testGZIPCompressOnly() throws Exception {, +        testGZIPCompressOnly0(null); // Do not write anything; just finish the stream., +        testGZIPCompressOnly0(EmptyArrays.EMPTY_BYTES); // Write an empty array., +        testGZIPCompressOnly0(BYTES_SMALL);, +        testGZIPCompressOnly0(BYTES_LARGE);, +    }, +, +    private void testGZIPCompressOnly0(byte[] data) throws IOException {, +        EmbeddedChannel chEncoder = new EmbeddedChannel(createEncoder(ZlibWrapper.GZIP));, +        if (data != null) {, +            chEncoder.writeOutbound(Unpooled.wrappedBuffer(data));, +        }, +        assertTrue(chEncoder.finish());, +, +        ByteBuf encoded = Unpooled.buffer();, +        for (;;) {, +            ByteBuf buf = chEncoder.readOutbound();, +            if (buf == null) {, +                break;, +            }, +            encoded.writeBytes(buf);, +            buf.release();, +        }, +, +        ByteBuf decoded = Unpooled.buffer();, +        GZIPInputStream stream = new GZIPInputStream(new ByteBufInputStream(encoded));, +        byte[] buf = new byte[8192];, +        for (;;) {, +            int readBytes = stream.read(buf);, +            if (readBytes < 0) {, +                break;, +            }, +            decoded.writeBytes(buf, 0, readBytes);, +        }, +        stream.close();, +, +        if (data != null) {, +            assertEquals(Unpooled.wrappedBuffer(data), decoded);, +        } else {, +            assertFalse(decoded.isReadable());, +        }, +, +        encoded.release();, +        decoded.release();]