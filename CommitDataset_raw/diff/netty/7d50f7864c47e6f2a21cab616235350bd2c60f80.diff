[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +                                "(?:DHE|EDH|ECDH|ECDHE|SRP)-(?:DSS|RSA|ECDSA)|" +, +                                "(?:ADH|AECDH|KRB5|PSK|SRP)" +, +     * Converts the specified Java cipher suites to the colon-separated OpenSSL cipher suite specification., +     */, +    static String toOpenSsl(Iterable<String> javaCipherSuites) {, +        final StringBuilder buf = new StringBuilder();, +        for (String c: javaCipherSuites) {, +            if (c == null) {, +                break;, +            }, +, +            String converted = toOpenSsl(c);, +            if (converted != null) {, +                c = converted;, +            }, +, +            buf.append(c);, +            buf.append(':');, +        }, +, +        if (buf.length() > 0) {, +            buf.setLength(buf.length() - 1);, +            return buf.toString();, +        } else {, +            return "";, +        }, +    }, +, +    /**, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +                                "(?:DHE|EDH|ECDH|ECDHE|SRP)-(?:DSS|RSA|ECDSA)|" +, +                                "(?:ADH|AECDH|KRB5|PSK|SRP)" +, +     * Converts the specified Java cipher suites to the colon-separated OpenSSL cipher suite specification., +     */, +    static String toOpenSsl(Iterable<String> javaCipherSuites) {, +        final StringBuilder buf = new StringBuilder();, +        for (String c: javaCipherSuites) {, +            if (c == null) {, +                break;, +            }, +, +            String converted = toOpenSsl(c);, +            if (converted != null) {, +                c = converted;, +            }, +, +            buf.append(c);, +            buf.append(':');, +        }, +, +        if (buf.length() > 0) {, +            buf.setLength(buf.length() - 1);, +            return buf.toString();, +        } else {, +            return "";, +        }, +    }, +, +    /**, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import org.apache.tomcat.jni.Pool;, +import org.apache.tomcat.jni.SSLContext;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +    private static final List<String> AVAILABLE_CIPHER_SUITES;, +, +, +        if (cause == null) {, +            final List<String> availableCipherSuites = new ArrayList<String>(128);, +            final long aprPool = Pool.create(0);, +            try {, +                final long sslCtx = SSLContext.make(aprPool, SSL.SSL_PROTOCOL_ALL, SSL.SSL_MODE_SERVER);, +                try {, +                    SSLContext.setOptions(sslCtx, SSL.SSL_OP_ALL);, +                    SSLContext.setCipherSuite(sslCtx, "ALL");, +                    final long ssl = SSL.newSSL(sslCtx, true);, +                    try {, +                        for (String c: SSL.getCiphers(ssl)) {, +                            // Filter out bad input., +                            if (c == null || c.length() == 0 || availableCipherSuites.contains(c)) {, +                                continue;, +                            }, +                            availableCipherSuites.add(c);, +                        }, +                    } finally {, +                        SSL.freeSSL(ssl);, +                    }, +                } finally {, +                    SSLContext.free(sslCtx);, +                }, +            } catch (Exception e) {, +                logger.warn("Failed to get the list of available OpenSSL cipher suites.", e);, +            } finally {, +                Pool.destroy(aprPool);, +            }, +, +            AVAILABLE_CIPHER_SUITES = Collections.unmodifiableList(availableCipherSuites);]