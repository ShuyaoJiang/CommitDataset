[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +    protected long delayNanos(long currentTimeNanos) {, +        return delayedTask.delayNanos(currentTimeNanos);, +        public long delayNanos(long currentTimeNanos) {, +            return Math.max(0, deadlineNanos() - (currentTimeNanos - START_TIME));, +        }, +, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +    protected long delayNanos(long currentTimeNanos) {, +        return delayedTask.delayNanos(currentTimeNanos);, +        public long delayNanos(long currentTimeNanos) {, +            return Math.max(0, deadlineNanos() - (currentTimeNanos - START_TIME));, +        }, +, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +        int selectorAutoRebuildThreshold = SystemPropertyUtil.getInt("io.netty.selectorAutoRebuildThreshold", 512);, +            selector.selectNow();, +            int selectCnt = 0;, +            long currentTimeNanos = System.nanoTime();, +            long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);, +            for (;;) {, +                long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;, +                if (timeoutMillis <= 0) {, +                    if (selectCnt == 0) {, +                        selector.selectNow();, +                        selectCnt = 1;, +                    }, +                    break;, +                int selectedKeys = selector.select(timeoutMillis);, +                selectCnt ++;, +, +                if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks()) {, +                    // Selected something,, +                    // waken up by user, or, +                    // the task queue has a pending task., +                    break;, +                        selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {, +                            selectCnt);, +                    selectCnt = 1;, +                    break;, +, +                currentTimeNanos = System.nanoTime();, +, +            if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Selector.select() returned prematurely {} times in a row.", selectCnt - 1);, +            selector.selectNow();, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +    protected long delayNanos(long currentTimeNanos) {, +        return delayedTask.delayNanos(currentTimeNanos);, +        public long delayNanos(long currentTimeNanos) {, +            return Math.max(0, deadlineNanos() - (currentTimeNanos - START_TIME));, +        }, +, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +        int selectorAutoRebuildThreshold = SystemPropertyUtil.getInt("io.netty.selectorAutoRebuildThreshold", 512);, +            selector.selectNow();, +            int selectCnt = 0;, +            long currentTimeNanos = System.nanoTime();, +            long selectDeadLineNanos = currentTimeNanos + delayNanos(currentTimeNanos);, +            for (;;) {, +                long timeoutMillis = (selectDeadLineNanos - currentTimeNanos + 500000L) / 1000000L;, +                if (timeoutMillis <= 0) {, +                    if (selectCnt == 0) {, +                        selector.selectNow();, +                        selectCnt = 1;, +                    }, +                    break;, +                int selectedKeys = selector.select(timeoutMillis);, +                selectCnt ++;, +, +                if (selectedKeys != 0 || oldWakenUp || wakenUp.get() || hasTasks()) {, +                    // Selected something,, +                    // waken up by user, or, +                    // the task queue has a pending task., +                    break;, +                        selectCnt >= SELECTOR_AUTO_REBUILD_THRESHOLD) {, +                            selectCnt);, +                    selectCnt = 1;, +                    break;, +, +                currentTimeNanos = System.nanoTime();, +, +            if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Selector.select() returned prematurely {} times in a row.", selectCnt - 1);, +            selector.selectNow();, +++ b/transport/src/test/java/io/netty/channel/SingleThreadEventLoopTest.java, +                    Thread.sleep(TimeUnit.NANOSECONDS.toMillis(delayNanos(System.nanoTime())));]