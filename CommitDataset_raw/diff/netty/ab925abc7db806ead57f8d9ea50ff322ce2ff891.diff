[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public Http2Stream stream(int streamId) {, +        return streamMap.get(streamId);, +    public boolean streamMayHaveExisted(int streamId) {, +        return remoteEndpoint.mayHaveCreatedStream(streamId) || localEndpoint.mayHaveCreatedStream(streamId);, +                    if (stream.id() > lastKnownStream && localEndpoint.isValidStreamId(stream.id())) {, +                    if (stream.id() > lastKnownStream && remoteEndpoint.isValidStreamId(stream.id())) {, +            return localEndpoint.isValidStreamId(id) ? localEndpoint : remoteEndpoint;, +            return localEndpoint.isValidStreamId(id);, +        public boolean isValidStreamId(int streamId) {, +            return streamId > 0 && server == even;, +        }, +, +        @Override, +        public boolean mayHaveCreatedStream(int streamId) {, +            return isValidStreamId(streamId) && streamId <= lastStreamCreated;, +            if (!isValidStreamId(streamId)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public Http2Stream stream(int streamId) {, +        return streamMap.get(streamId);, +    public boolean streamMayHaveExisted(int streamId) {, +        return remoteEndpoint.mayHaveCreatedStream(streamId) || localEndpoint.mayHaveCreatedStream(streamId);, +                    if (stream.id() > lastKnownStream && localEndpoint.isValidStreamId(stream.id())) {, +                    if (stream.id() > lastKnownStream && remoteEndpoint.isValidStreamId(stream.id())) {, +            return localEndpoint.isValidStreamId(id) ? localEndpoint : remoteEndpoint;, +            return localEndpoint.isValidStreamId(id);, +        public boolean isValidStreamId(int streamId) {, +            return streamId > 0 && server == even;, +        }, +, +        @Override, +        public boolean mayHaveCreatedStream(int streamId) {, +            return isValidStreamId(streamId) && streamId <= lastStreamCreated;, +            if (!isValidStreamId(streamId)) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2Stream.State.HALF_CLOSED_REMOTE;, +            Http2Stream stream = connection.stream(streamId);, +            if (stream == null || stream.isResetSent() || streamCreatedAfterGoAwaySent(streamId)) {, +                // Ignoring this frame. We still need to count the frame towards the connection flow control, +                // window, but we immediately mark all bytes as consumed., +                // Verify that the stream may have existed after we apply flow control., +                verifyStreamMayHaveExisted(streamId);, +, +                // All bytes have been consumed., +            boolean allowHalfClosedRemote = false;, +            if (stream == null && !connection.streamMayHaveExisted(streamId)) {, +                // Allow the state to be HALF_CLOSE_REMOTE if we're creating it in that state., +                allowHalfClosedRemote = stream.state() == HALF_CLOSED_REMOTE;, +            }, +, +            if (stream == null || stream.isResetSent() || streamCreatedAfterGoAwaySent(streamId)) {, +            }, +, +                    if (!allowHalfClosedRemote) {, +                        throw streamError(stream.id(), STREAM_CLOSED, "Stream %d in unexpected state: %s",, +                                stream.id(), stream.state());, +                    }, +                    break;, +                    if (connection.streamMayHaveExisted(streamId)) {, +                        // Ignore this frame., +                        return;, +                    }, +, +                } else if (streamCreatedAfterGoAwaySent(streamId)) {, +            Http2Stream stream = connection.stream(streamId);, +            if (stream == null) {, +                verifyStreamMayHaveExisted(streamId);, +                return;, +            }, +            Http2Stream parentStream = connection.stream(streamId);, +            if (streamCreatedAfterGoAwaySent(streamId)) {, +            if (parentStream == null) {, +                throw connectionError(PROTOCOL_ERROR, "Stream does not exist %d", streamId);, +            }, +, +            Http2Stream stream = connection.stream(streamId);, +            if (stream == null || stream.state() == CLOSED || streamCreatedAfterGoAwaySent(streamId)) {, +                // Ignore this frame., +                verifyStreamMayHaveExisted(streamId);, +        private boolean streamCreatedAfterGoAwaySent(int streamId) {, +            return connection.goAwaySent() && streamId > connection.remote().lastKnownStream();, +        }, +, +        private void verifyStreamMayHaveExisted(int streamId) throws Http2Exception {, +            if (!connection.streamMayHaveExisted(streamId)) {, +                throw connectionError(PROTOCOL_ERROR, "Stream does not exist %d", streamId);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public Http2Stream stream(int streamId) {, +        return streamMap.get(streamId);, +    public boolean streamMayHaveExisted(int streamId) {, +        return remoteEndpoint.mayHaveCreatedStream(streamId) || localEndpoint.mayHaveCreatedStream(streamId);, +                    if (stream.id() > lastKnownStream && localEndpoint.isValidStreamId(stream.id())) {, +                    if (stream.id() > lastKnownStream && remoteEndpoint.isValidStreamId(stream.id())) {, +            return localEndpoint.isValidStreamId(id) ? localEndpoint : remoteEndpoint;, +            return localEndpoint.isValidStreamId(id);, +        public boolean isValidStreamId(int streamId) {, +            return streamId > 0 && server == even;, +        }, +]