[+++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +, +    /**, +     * Init the {@link SslHandler}. This will by default call {@link #initEngine(SSLEngine)}, sub-classes may override, +     * this., +     */, +    protected void initHandler(SslHandler handler) {, +        initEngine(handler.engine());, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +, +    /**, +     * Init the {@link SslHandler}. This will by default call {@link #initEngine(SSLEngine)}, sub-classes may override, +     * this., +     */, +    protected void initHandler(SslHandler handler) {, +        initEngine(handler.engine());, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +, +    /**, +     * Init the {@link SslHandler}. This will by default call {@link #initEngine(SSLEngine)}, sub-classes may override, +     * this., +     */, +    protected void initHandler(SslHandler handler) {, +        initEngine(handler.engine());, +    }, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +    protected SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +    protected SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +++ b/handler/src/main/java/io/netty/handler/ssl/DelegatingSslContext.java, +    protected final SslHandler newHandler(ByteBufAllocator alloc, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +    protected final SslHandler newHandler(ByteBufAllocator alloc, String peerHost, int peerPort, boolean startTls) {, +        SslHandler handler = ctx.newHandler(alloc, peerHost, peerPort, startTls);, +        initHandler(handler);, +        return handler;, +    }, +, +    @Override, +, +    /**, +     * Init the {@link SslHandler}. This will by default call {@link #initEngine(SSLEngine)}, sub-classes may override, +     * this., +     */, +    protected void initHandler(SslHandler handler) {, +        initEngine(handler.engine());]