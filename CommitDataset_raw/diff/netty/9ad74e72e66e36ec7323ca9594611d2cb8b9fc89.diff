[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        try {, +        } catch (final NumberFormatException e) {, +            return false;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        try {, +        } catch (final NumberFormatException e) {, +            return false;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * Returns the length of the content or the specified default value if the message does not have the {@code, +     * "Content-Length" header}. Please note that this value is not retrieved from {@link HttpContent#content()} but, +     * from the {@code "Content-Length"} header, and thus they are independent from each other., +     * @param message      the message, +     * @param defaultValue the default value, +     * @return the content length or the specified default value, +     * @throws NumberFormatException if the {@code "Content-Length"} header does not parse as a long, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java, +        try {, +        } catch (final NumberFormatException e) {, +            return false;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +     * Returns the length of the content or the specified default value if the message does not have the {@code, +     * "Content-Length" header}. Please note that this value is not retrieved from {@link HttpContent#content()} but, +     * from the {@code "Content-Length"} header, and thus they are independent from each other., +     * @param message      the message, +     * @param defaultValue the default value, +     * @return the content length or the specified default value, +     * @throws NumberFormatException if the {@code "Content-Length"} header does not parse as a long, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpUtilTest.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.hasToString;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +    public void testGetContentLengthThrowsNumberFormatException() {, +        final HttpMessage message = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        try {, +            HttpUtil.getContentLength(message);, +            fail();, +        } catch (final NumberFormatException e) {, +            // a number format exception is expected here, +        }, +    }, +, +    @Test, +    public void testGetContentLengthIntDefaultValueThrowsNumberFormatException() {, +        final HttpMessage message = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        message.headers().set(HttpHeaderNames.CONTENT_LENGTH, "bar");, +        try {, +            HttpUtil.getContentLength(message, 1);, +            fail();, +        } catch (final NumberFormatException e) {, +            // a number format exception is expected here, +        }, +    }, +, +    @Test, +    public void testGetContentLengthLongDefaultValueThrowsNumberFormatException() {, +        final HttpMessage message = new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);, +        message.headers().set(HttpHeaderNames.CONTENT_LENGTH, "bar");, +        try {, +            HttpUtil.getContentLength(message, 1L);, +            fail();, +        } catch (final NumberFormatException e) {, +            // a number format exception is expected here, +        }]