[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import javax.net.ssl.X509ExtendedTrustManager;, +    private final OpenSslEngineMap engineMap;, +                    engineMap = newEngineMap(manager);, +, +                    // Use this to prevent an error when running on java < 7, +                    if (useExtendedTrustManager(manager)) {, +                        final X509ExtendedTrustManager extendedManager = (X509ExtendedTrustManager) manager;, +                        SSLContext.setCertVerifyCallback(ctx, new AbstractCertificateVerifier() {, +                            void verify(long ssl, X509Certificate[] peerCerts, String auth) throws Exception {, +                                OpenSslEngine engine = engineMap.remove(ssl);, +                                extendedManager.checkServerTrusted(peerCerts, auth, engine);, +                    } else {, +                        SSLContext.setCertVerifyCallback(ctx, new AbstractCertificateVerifier() {, +                            @Override, +                            void verify(long ssl, X509Certificate[] peerCerts, String auth) throws Exception {, +                                manager.checkServerTrusted(peerCerts, auth);, +                            }, +                        });, +                    }, +    @Override, +    OpenSslEngineMap engineMap() {, +        return engineMap;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java, +import javax.net.ssl.X509ExtendedTrustManager;, +    private final OpenSslEngineMap engineMap;, +                    engineMap = newEngineMap(manager);, +, +                    // Use this to prevent an error when running on java < 7, +                    if (useExtendedTrustManager(manager)) {, +                        final X509ExtendedTrustManager extendedManager = (X509ExtendedTrustManager) manager;, +                        SSLContext.setCertVerifyCallback(ctx, new AbstractCertificateVerifier() {, +                            void verify(long ssl, X509Certificate[] peerCerts, String auth) throws Exception {, +                                OpenSslEngine engine = engineMap.remove(ssl);, +                                extendedManager.checkServerTrusted(peerCerts, auth, engine);, +                    } else {, +                        SSLContext.setCertVerifyCallback(ctx, new AbstractCertificateVerifier() {, +                            @Override, +                            void verify(long ssl, X509Certificate[] peerCerts, String auth) throws Exception {, +                                manager.checkServerTrusted(peerCerts, auth);, +                            }, +                        });, +                    }, +    @Override, +    OpenSslEngineMap engineMap() {, +        return engineMap;, +    }, +, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +import org.apache.tomcat.jni.CertificateVerifier;, +import javax.net.ssl.X509ExtendedTrustManager;, +import java.util.Map;, +        OpenSslEngineMap engineMap = engineMap();, +        final OpenSslEngine engine;, +            engine = new OpenSslEngine(ctx, alloc, null, isClient(), sessionContext(), engineMap);, +            engine = new OpenSslEngine(ctx, alloc, protos.get(protos.size() - 1), isClient(),, +                    sessionContext(), engineMap);, +        engineMap.add(engine);, +        return engine;, +    abstract OpenSslEngineMap engineMap();, +, +, +    static OpenSslEngineMap newEngineMap(X509TrustManager trustManager) {, +        if (useExtendedTrustManager(trustManager)) {, +            return new DefaultOpenSslEngineMap();, +        }, +        return OpenSslEngineMap.EMPTY;, +    }, +, +    static boolean useExtendedTrustManager(X509TrustManager trustManager) {, +         return PlatformDependent.javaVersion() >= 7 && trustManager instanceof X509ExtendedTrustManager;, +    }, +, +    abstract static class AbstractCertificateVerifier implements CertificateVerifier {, +        @Override, +        public final boolean verify(long ssl, byte[][] chain, String auth) {, +            X509Certificate[] peerCerts = certificates(chain);, +            try {, +                verify(ssl, peerCerts, auth);, +                return true;, +            } catch (Exception e) {, +                logger.debug("verification of certificate failed", e);, +            }, +            return false;, +        }, +, +        abstract void verify(long ssl, X509Certificate[] peerCerts, String auth) throws Exception;, +    }, +, +    private static final class DefaultOpenSslEngineMap implements OpenSslEngineMap {, +        private final Map<Long, OpenSslEngine> engines = PlatformDependent.newConcurrentHashMap();, +        @Override, +        public OpenSslEngine remove(long ssl) {, +            return engines.remove(ssl);, +        }, +, +        @Override, +        public void add(OpenSslEngine engine) {]