[+++ b/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java, +            final Object object, final Class<?> parameterizedSuperclass, final String typeParamName) {, +            final Object object, Class<?> parameterizedSuperclass, String typeParamName) {, +                    if (!(v.getGenericDeclaration() instanceof Class)) {, +                        return Object.class;, +                    }, +, +                    parameterizedSuperclass = (Class<?>) v.getGenericDeclaration();, +                    if (parameterizedSuperclass.isAssignableFrom(thisClass)) {, +                    } else {, +                        return Object.class;, +                    }, +++ b/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java, +            final Object object, final Class<?> parameterizedSuperclass, final String typeParamName) {, +            final Object object, Class<?> parameterizedSuperclass, String typeParamName) {, +                    if (!(v.getGenericDeclaration() instanceof Class)) {, +                        return Object.class;, +                    }, +, +                    parameterizedSuperclass = (Class<?>) v.getGenericDeclaration();, +                    if (parameterizedSuperclass.isAssignableFrom(thisClass)) {, +                    } else {, +                        return Object.class;, +                    }, +++ b/common/src/test/java/io/netty/util/internal/TypeParameterMatcherTest.java, +, +    private static class V<E> {, +        U<E> u = new U<E>() { };, +    }, +, +    @Test, +    public void testInnerClass() throws Exception {, +        TypeParameterMatcher m = TypeParameterMatcher.find(new V<String>().u, U.class, "E");, +        assertTrue(m.match(new Object()));, +    }]