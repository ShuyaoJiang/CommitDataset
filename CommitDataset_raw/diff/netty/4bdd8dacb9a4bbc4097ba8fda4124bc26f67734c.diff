[+++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +        markReaderIndex();, +        markWriterIndex();, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +        markReaderIndex();, +        markWriterIndex();, +++ b/buffer/src/test/java/io/netty/buffer/DuplicateByteBufTest.java, +import static org.junit.Assert.assertEquals;, +        ByteBuf wrapped = Unpooled.buffer(length);, +        buffer = new DuplicatedByteBuf(wrapped);, +        assertEquals(wrapped.writerIndex(), buffer.writerIndex());, +        assertEquals(wrapped.readerIndex(), buffer.readerIndex());, +, +    @Test, +    public void testMarksInitialized() {, +        ByteBuf wrapped = Unpooled.buffer(8);, +        try {, +            wrapped.writerIndex(6);, +            wrapped.readerIndex(1);, +            ByteBuf duplicate = new DuplicatedByteBuf(wrapped);, +, +            // Test writer mark, +            duplicate.writerIndex(duplicate.writerIndex() + 1);, +            duplicate.resetWriterIndex();, +            assertEquals(wrapped.writerIndex(), duplicate.writerIndex());, +, +            // Test reader mark, +            duplicate.readerIndex(duplicate.readerIndex() + 1);, +            duplicate.resetReaderIndex();, +            assertEquals(wrapped.readerIndex(), duplicate.readerIndex());, +        } finally {, +            wrapped.release();, +        }, +    }, +++ b/buffer/src/main/java/io/netty/buffer/DuplicatedByteBuf.java, +        markReaderIndex();, +        markWriterIndex();, +++ b/buffer/src/test/java/io/netty/buffer/DuplicateByteBufTest.java, +import static org.junit.Assert.assertEquals;, +        ByteBuf wrapped = Unpooled.buffer(length);, +        buffer = new DuplicatedByteBuf(wrapped);, +        assertEquals(wrapped.writerIndex(), buffer.writerIndex());, +        assertEquals(wrapped.readerIndex(), buffer.readerIndex());, +, +    @Test, +    public void testMarksInitialized() {, +        ByteBuf wrapped = Unpooled.buffer(8);, +        try {, +            wrapped.writerIndex(6);, +            wrapped.readerIndex(1);, +            ByteBuf duplicate = new DuplicatedByteBuf(wrapped);, +, +            // Test writer mark, +            duplicate.writerIndex(duplicate.writerIndex() + 1);, +            duplicate.resetWriterIndex();, +            assertEquals(wrapped.writerIndex(), duplicate.writerIndex());, +, +            // Test reader mark, +            duplicate.readerIndex(duplicate.readerIndex() + 1);, +            duplicate.resetReaderIndex();, +            assertEquals(wrapped.readerIndex(), duplicate.readerIndex());, +        } finally {, +            wrapped.release();, +        }, +    }, +++ b/buffer/src/test/java/io/netty/buffer/SlicedByteBufTest.java, +import static org.junit.Assert.assertEquals;, +, +    @Test, +    public void testReaderIndexAndMarks() {, +        ByteBuf wrapped = Unpooled.buffer(16);, +        try {, +            wrapped.writerIndex(14);, +            wrapped.readerIndex(2);, +            wrapped.markWriterIndex();, +            wrapped.markReaderIndex();, +            ByteBuf slice = new SlicedByteBuf(wrapped, 4, 4);, +            assertEquals(0, slice.readerIndex());, +            assertEquals(4, slice.writerIndex());, +, +            slice.readerIndex(slice.readerIndex() + 1);, +            slice.resetReaderIndex();, +            assertEquals(0, slice.readerIndex());, +, +            slice.writerIndex(slice.writerIndex() - 1);, +            slice.resetWriterIndex();, +            assertEquals(0, slice.writerIndex());, +        } finally {, +            wrapped.release();, +        }, +    }]