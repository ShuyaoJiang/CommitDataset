[+++ b/pom.xml, +            <ignore>java.nio.channels.spi.SelectorProvider</ignore>, +++ b/pom.xml, +            <ignore>java.nio.channels.spi.SelectorProvider</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each DatagramChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openDatagramChannel();, +            return SELECTOR_PROVIDER.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +++ b/pom.xml, +            <ignore>java.nio.channels.spi.SelectorProvider</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each DatagramChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openDatagramChannel();, +            return SELECTOR_PROVIDER.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each ServerSocketChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openServerSocketChannel();, +++ b/pom.xml, +            <ignore>java.nio.channels.spi.SelectorProvider</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each DatagramChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openDatagramChannel();, +            return SELECTOR_PROVIDER.openDatagramChannel(ProtocolFamilyConverter.convert(ipFamily));, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each ServerSocketChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openServerSocketChannel();, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java, +import java.nio.channels.spi.SelectorProvider;, +    private static final SelectorProvider SELECTOR_PROVIDER = SelectorProvider.provider();, +            /**, +             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in, +             *  {@link SelectorProvider#provider()} which is called by each SocketChannel.open() otherwise., +             *, +             *  See <a href="See https://github.com/netty/netty/issues/2308">#2308</a>., +             */, +            return SELECTOR_PROVIDER.openSocketChannel();]