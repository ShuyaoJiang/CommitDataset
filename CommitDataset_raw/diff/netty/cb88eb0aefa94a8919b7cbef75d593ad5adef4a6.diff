[+++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/BigEndianHeapChannelBuffer.java, + * Big-endian Java heap buffer., +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/BigEndianHeapChannelBuffer.java, + * Big-endian Java heap buffer., +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +/**, + * NIO direct buffer based buffer., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/BigEndianHeapChannelBuffer.java, + * Big-endian Java heap buffer., +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +/**, + * NIO direct buffer based buffer., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, + * Random and sequential accessible sequence of zero or more bytes (octets)., +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/BigEndianHeapChannelBuffer.java, + * Big-endian Java heap buffer., +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +/**, + * NIO direct buffer based buffer., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, + * Random and sequential accessible sequence of zero or more bytes (octets)., +++ b/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java, + * {@link InputStream} which reads data from a {@link ChannelBuffer}., + * <p>, + * A read operation against this stream will occur at the {@code readerIndex}, + * of its underlying buffer and the {@code readerIndex} will increase during, + * the read operation., + * <p>, + * This stream implements {@link DataInput} for your convenience., + * The endianness of the stream is not always big endian but depends on, + * the endianness of the underlying buffer., +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at the current, +     * {@code writerIndex}., +     */, +    /**, +     * Creates a new stream which reads data from the specified {@code buffer}, +     * starting at the current {@code readerIndex} and ending at, +     * {@code readerIndex + length}., +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code readerIndex + length} is greater than, +     *            {@code writerIndex}, +     */, +    /**, +     * Returns the number of read bytes by this stream so far., +     */, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, + * Skeletal implementation of a buffer., +++ b/src/main/java/org/jboss/netty/buffer/BigEndianHeapChannelBuffer.java, + * Big-endian Java heap buffer., +++ b/src/main/java/org/jboss/netty/buffer/ByteBufferBackedChannelBuffer.java, +/**, + * NIO direct buffer based buffer., + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, + * Random and sequential accessible sequence of zero or more bytes (octets)., +++ b/src/main/java/org/jboss/netty/buffer/ChannelBufferInputStream.java, + * {@link InputStream} which reads data from a {@link ChannelBuffer}., + * <p>, + * A read operation against this stream will occur at the {@code readerIndex}, + * of its underlying buffer and the {@code readerIndex} will increase during]