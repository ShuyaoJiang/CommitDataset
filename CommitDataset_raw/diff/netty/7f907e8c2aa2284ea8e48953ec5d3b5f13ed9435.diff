[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +            values = splitMultipartHeaderValues(svalue);, +, +    /**, +     * Split one header value in Multipart, +     * @return an array of String where values that were separated by ';' or ',', +     */, +    private static String[] splitMultipartHeaderValues(String svalue) {, +        List<String> values = new ArrayList<String>(1);, +        boolean inQuote = false;, +        boolean escapeNext = false;, +        int start = 0;, +        for (int i = 0; i < svalue.length(); i++) {, +            char c = svalue.charAt(i);, +            if (inQuote) {, +                if (escapeNext) {, +                    escapeNext = false;, +                } else {, +                    if (c == '\\') {, +                        escapeNext = true;, +                    } else if (c == '"') {, +                        inQuote = false;, +                    }, +                }, +            } else {, +                if (c == '"') {, +                    inQuote = true;, +                } else if (c == ';') {, +                    values.add(svalue.substring(start, i));, +                    start = i + 1;, +                }, +            }, +        }, +        values.add(svalue.substring(start));, +        return values.toArray(new String[values.size()]);, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +            values = splitMultipartHeaderValues(svalue);, +, +    /**, +     * Split one header value in Multipart, +     * @return an array of String where values that were separated by ';' or ',', +     */, +    private static String[] splitMultipartHeaderValues(String svalue) {, +        List<String> values = new ArrayList<String>(1);, +        boolean inQuote = false;, +        boolean escapeNext = false;, +        int start = 0;, +        for (int i = 0; i < svalue.length(); i++) {, +            char c = svalue.charAt(i);, +            if (inQuote) {, +                if (escapeNext) {, +                    escapeNext = false;, +                } else {, +                    if (c == '\\') {, +                        escapeNext = true;, +                    } else if (c == '"') {, +                        inQuote = false;, +                    }, +                }, +            } else {, +                if (c == '"') {, +                    inQuote = true;, +                } else if (c == ';') {, +                    values.add(svalue.substring(start, i));, +                    start = i + 1;, +                }, +            }, +        }, +        values.add(svalue.substring(start));, +        return values.toArray(new String[values.size()]);, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoderTest.java, +, +    // See https://github.com/netty/netty/issues/3326, +    @Test, +    public void testFilenameContainingSemicolon() throws Exception {, +        final String boundary = "dLV9Wyq26L_-JQxk6ferf-RT153LhOO";, +        final DefaultFullHttpRequest req = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST,, +                "http://localhost");, +        req.headers().add(HttpHeaders.Names.CONTENT_TYPE, "multipart/form-data; boundary=" + boundary);, +        // Force to use memory-based data., +        final DefaultHttpDataFactory inMemoryFactory = new DefaultHttpDataFactory(false);, +        final String data = "asdf";, +        final String filename = "tmp;0.txt";, +        final String body =, +                "--" + boundary + "\r\n" +, +                        "Content-Disposition: form-data; name=\"file\"; filename=\"" + filename + "\"\r\n" +, +                        "Content-Type: image/gif\r\n" +, +                        "\r\n" +, +                        data + "\r\n" +, +                        "--" + boundary + "--\r\n";, +, +        req.content().writeBytes(body.getBytes(CharsetUtil.UTF_8.name()));, +        // Create decoder instance to test., +        final HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(inMemoryFactory, req);, +        assertFalse(decoder.getBodyHttpDatas().isEmpty());, +        decoder.destroy();, +    }]