[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + * for a complete frame, return without modifying the reader index to allow more bytes to arrive., + * To check for complete frames without modifying the reader index, use methods like {@link ByteBuf#getInt(int)}., +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + * for a complete frame, return without modifying the reader index to allow more bytes to arrive., + * To check for complete frames without modifying the reader index, use methods like {@link ByteBuf#getInt(int)}., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, + * Besides this, it also extends the {@link EventExecutorGroup} to allow for a generic, + * way to access methods., +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + * for a complete frame, return without modifying the reader index to allow more bytes to arrive., + * To check for complete frames without modifying the reader index, use methods like {@link ByteBuf#getInt(int)}., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, + * Besides this, it also extends the {@link EventExecutorGroup} to allow for a generic, + * way to access methods., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, + * The {@link EventExecutorGroup} is responsible for providing the {@link EventExecutor}'s to use, + * via its {@link #next()} method. Besides this, it is also responsible for handling their, + * life-cycle and allows shutting them down in a global fashion., +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + * for a complete frame, return without modifying the reader index to allow more bytes to arrive., + * To check for complete frames without modifying the reader index, use methods like {@link ByteBuf#getInt(int)}., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, + * Besides this, it also extends the {@link EventExecutorGroup} to allow for a generic, + * way to access methods., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, + * The {@link EventExecutorGroup} is responsible for providing the {@link EventExecutor}'s to use, + * via its {@link #next()} method. Besides this, it is also responsible for handling their, + * life-cycle and allows shutting them down in a global fashion., +++ b/transport/src/main/java/io/netty/channel/EventLoop.java, + * Will handle all the I/O operations for a {@link Channel} once registered., +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, + * for a complete frame, return without modifying the reader index to allow more bytes to arrive., + * To check for complete frames without modifying the reader index, use methods like {@link ByteBuf#getInt(int)}., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, + * Besides this, it also extends the {@link EventExecutorGroup} to allow for a generic, + * way to access methods., +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, + * The {@link EventExecutorGroup} is responsible for providing the {@link EventExecutor}'s to use, + * via its {@link #next()} method. Besides this, it is also responsible for handling their, + * life-cycle and allows shutting them down in a global fashion., +++ b/transport/src/main/java/io/netty/channel/EventLoop.java, + * Will handle all the I/O operations for a {@link Channel} once registered., +++ b/transport/src/main/java/io/netty/channel/EventLoopGroup.java, + * Special {@link EventExecutorGroup} which allows registering {@link Channel}s that get]