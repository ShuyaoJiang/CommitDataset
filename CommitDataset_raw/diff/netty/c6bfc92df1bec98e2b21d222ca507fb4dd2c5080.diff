[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +            assert dataLength >= 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +            assert dataLength >= 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2LocalFlowController.java, +     * @throws Http2Exception if the number of bytes returned exceeds the {@link #unconsumedBytes}, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2LocalFlowController.java, +            assert dataLength >= 0;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2LocalFlowController.java, +     * @throws Http2Exception if the number of bytes returned exceeds the {@link #unconsumedBytes}, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java, +            decode().onDataRead(ctx, STREAM_ID, data, padding, true);, +            // Verify that the event was absorbed and not propagated to the observer., +    @Test, +    public void emptyDataFrameShouldApplyFlowControl() throws Exception {, +        final ByteBuf data = EMPTY_BUFFER;, +        int padding = 0;, +        int processedBytes = data.readableBytes() + padding;, +        mockFlowControl(processedBytes);, +        try {, +            decode().onDataRead(ctx, STREAM_ID, data, padding, true);, +            verify(localFlow).receiveFlowControlledFrame(eq(ctx), eq(stream), eq(data), eq(padding), eq(true));, +, +            // No bytes were consumed, so there's no window update needed., +            verify(localFlow, never()).consumeBytes(eq(ctx), eq(stream), eq(processedBytes));, +, +            // Verify that the empty data event was propagated to the observer., +            verify(listener).onDataRead(eq(ctx), eq(STREAM_ID), eq(data), eq(padding), eq(true));, +        } finally {, +            data.release();, +        }, +    }, +]