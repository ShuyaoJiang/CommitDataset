[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java, +import static io.netty.handler.codec.http.CookieEncoderUtil.*;, +, +import java.util.Date;, +            Date expires = new Date(cookie.maxAge() * 1000 + System.currentTimeMillis());, +            addUnquoted(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ServerCookieEncoder.java, +import static io.netty.handler.codec.http.CookieEncoderUtil.*;, +, +import java.util.Date;, +            Date expires = new Date(cookie.maxAge() * 1000 + System.currentTimeMillis());, +            addUnquoted(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/ServerCookieEncoderTest.java, +import java.text.ParseException;, +import java.util.Date;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +    public void testEncodingSingleCookieV0() throws ParseException {, +, +        int maxAge = 50;, +, +        String result =, +                "myCookie=myValue; Max-Age=50; Expires=(.+?); Path=/apathsomewhere; Domain=.adomainsomewhere; Secure";, +        cookie.setMaxAge(maxAge);, +, +        Matcher matcher = Pattern.compile(result).matcher(encodedCookie);, +        assertTrue(matcher.find());, +        Date expiresDate = HttpHeaderDateFormat.get().parse(matcher.group(1));, +        long diff = (expiresDate.getTime() - System.currentTimeMillis()) / 1000;, +        // 1 sec should be fine, +        assertTrue(Math.abs(diff - maxAge) <= 1);]