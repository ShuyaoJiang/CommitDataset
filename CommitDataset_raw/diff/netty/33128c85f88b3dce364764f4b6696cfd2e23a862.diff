[+++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +import java.security.PrivateKey;, +import javax.net.ssl.ExtendedSSLSession;, +import javax.net.ssl.KeyManager;, +import javax.net.ssl.KeyManagerFactorySpi;, +import javax.net.ssl.X509ExtendedKeyManager;, +    public void testSupportedSignatureAlgorithms() throws Exception {, +        final SelfSignedCertificate ssc = new SelfSignedCertificate();, +, +        final class TestKeyManagerFactory extends KeyManagerFactory {, +            TestKeyManagerFactory(final KeyManagerFactory factory) {, +                super(new KeyManagerFactorySpi() {, +, +                    private final KeyManager[] managers = factory.getKeyManagers();, +, +                    @Override, +                    protected void engineInit(KeyStore keyStore, char[] chars)  {, +                        throw new UnsupportedOperationException();, +                    }, +, +                    @Override, +                    protected void engineInit(ManagerFactoryParameters managerFactoryParameters) {, +                        throw new UnsupportedOperationException();, +                    }, +, +                    @Override, +                    protected KeyManager[] engineGetKeyManagers() {, +                        KeyManager[] array = new KeyManager[managers.length];, +, +                        for (int i = 0 ; i < array.length; i++) {, +                            final X509ExtendedKeyManager x509ExtendedKeyManager = (X509ExtendedKeyManager) managers[i];, +, +                            array[i] = new X509ExtendedKeyManager() {, +                                @Override, +                                public String[] getClientAliases(String s, Principal[] principals) {, +                                    fail();, +                                    return null;, +                                }, +, +                                @Override, +                                public String chooseClientAlias(, +                                        String[] strings, Principal[] principals, Socket socket) {, +                                    fail();, +                                    return null;, +                                }, +, +                                @Override, +                                public String[] getServerAliases(String s, Principal[] principals) {, +                                    fail();, +                                    return null;, +                                }, +, +                                @Override, +                                public String chooseServerAlias(String s, Principal[] principals, Socket socket) {, +                                    fail();, +                                    return null;, +                                }, +, +                                @Override, +                                public String chooseEngineClientAlias(, +                                        String[] strings, Principal[] principals, SSLEngine sslEngine) {, +                                    assertNotEquals(0, ((ExtendedSSLSession) sslEngine.getHandshakeSession()), +                                            .getPeerSupportedSignatureAlgorithms().length);, +                                    assertNotEquals(0, ((ExtendedSSLSession) sslEngine.getHandshakeSession()), +                                            .getLocalSupportedSignatureAlgorithms().length);, +                                    return x509ExtendedKeyManager.chooseEngineClientAlias(, +                                            strings, principals, sslEngine);, +                                }, +, +                                @Override, +                                public String chooseEngineServerAlias(, +                                        String s, Principal[] principals, SSLEngine sslEngine) {, +                                    assertNotEquals(0, ((ExtendedSSLSession) sslEngine.getHandshakeSession()), +                                            .getPeerSupportedSignatureAlgorithms().length);, +                                    assertNotEquals(0, ((ExtendedSSLSession) sslEngine.getHandshakeSession()), +                                            .getLocalSupportedSignatureAlgorithms().length);, +                                    return x509ExtendedKeyManager.chooseEngineServerAlias(s, principals, sslEngine);, +                                }, +, +                                @Override, +                                public java.security.cert.X509Certificate[] getCertificateChain(String s) {, +                                    return x509ExtendedKeyManager.getCertificateChain(s);, +                                }, +, +                                @Override, +                                public PrivateKey getPrivateKey(String s) {, +                                    return x509ExtendedKeyManager.getPrivateKey(s);, +                                }, +                            };, +                        }, +                        return array;, +                    }, +                }, factory.getProvider(), factory.getAlgorithm());, +            }, +        }, +, +        clientSslCtx = SslContextBuilder.forClient().keyManager(new TestKeyManagerFactory(newKeyManagerFactory(ssc))), +                .trustManager(InsecureTrustManagerFactory.INSTANCE), +                .sslProvider(sslClientProvider()), +                .sslContextProvider(clientSslContextProvider())]