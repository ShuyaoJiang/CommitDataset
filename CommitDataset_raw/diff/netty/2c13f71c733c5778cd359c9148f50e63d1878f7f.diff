[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioChannelOption.java, +import java.nio.channels.Channel;, + * Provides {@link ChannelOption} over a given {@link java.net.SocketOption} which is then passed through the underlying, + * {@link java.nio.channels.NetworkChannel}., +    private final java.net.SocketOption<T> option;, +    private NioChannelOption(java.net.SocketOption<T> option) {, +     * Returns a {@link ChannelOption} for the given {@link java.net.SocketOption}., +    public static <T> ChannelOption<T> of(java.net.SocketOption<T> option) {, +    // It's important to not use java.nio.channels.NetworkChannel as otherwise the classes that sometimes call this, +    // method may not be used on Java 6, as method linking can happen eagerly even if this method was not actually, +    // called at runtime., +    //, +    // See https://github.com/netty/netty/issues/8166, +, +    static <T> boolean setOption(Channel jdkChannel, NioChannelOption<T> option, T value) {, +        java.nio.channels.NetworkChannel channel = (java.nio.channels.NetworkChannel) jdkChannel;, +    static <T> T getOption(Channel jdkChannel, NioChannelOption<T> option) {, +        java.nio.channels.NetworkChannel channel = (java.nio.channels.NetworkChannel) jdkChannel;, +, +    static ChannelOption[] getOptions(Channel jdkChannel) {, +        java.nio.channels.NetworkChannel channel = (java.nio.channels.NetworkChannel) jdkChannel;, +        Set<java.net.SocketOption<?>> supportedOpts = channel.supportedOptions();, +        for (java.net.SocketOption<?> opt : supportedOpts) {]