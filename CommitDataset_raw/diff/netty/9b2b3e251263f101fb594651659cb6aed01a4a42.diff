[+++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufAllocatorTest.java, +import io.netty.util.internal.PlatformDependent;, +    protected boolean isDirectExpected(boolean preferDirect) {, +        return preferDirect && PlatformDependent.hasUnsafe();, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufAllocatorTest.java, +import io.netty.util.internal.PlatformDependent;, +    protected boolean isDirectExpected(boolean preferDirect) {, +        return preferDirect && PlatformDependent.hasUnsafe();, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/ByteBufAllocatorTest.java, +            assertBuffer(buffer, isDirectExpected(preferDirect), 1, defaultMaxCapacity());, +            assertBuffer(buffer, isDirectExpected(preferDirect), 1, maxCapacity);, +    protected abstract boolean isDirectExpected(boolean preferDirect);, +, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufAllocatorTest.java, +import io.netty.util.internal.PlatformDependent;, +    protected boolean isDirectExpected(boolean preferDirect) {, +        return preferDirect && PlatformDependent.hasUnsafe();, +    }, +, +    @Override, +++ b/buffer/src/test/java/io/netty/buffer/ByteBufAllocatorTest.java, +            assertBuffer(buffer, isDirectExpected(preferDirect), 1, defaultMaxCapacity());, +            assertBuffer(buffer, isDirectExpected(preferDirect), 1, maxCapacity);, +    protected abstract boolean isDirectExpected(boolean preferDirect);, +, +++ b/codec/src/test/java/io/netty/handler/codec/compression/Lz4FrameEncoderTest.java, +import io.netty.util.internal.PlatformDependent;, +import static org.junit.Assert.assertFalse;, +    private void testAllocateBuffer(int blockSize, int bufSize, boolean preferDirect) {, +            out = encoder.allocateBuffer(ctx, in, preferDirect);, +                if (!preferDirect) {, +                    // Only check if preferDirect is not true as if a direct buffer is returned or not depends on, +                    // if sun.misc.Unsafe is present., +                    assertFalse(out.isDirect());, +                }]