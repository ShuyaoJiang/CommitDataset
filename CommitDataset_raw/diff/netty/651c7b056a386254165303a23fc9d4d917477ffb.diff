[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +            checkSize(size);, +                checkSize(size + localsize);, +        checkSize(size);, +            checkSize(written);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +            checkSize(size);, +                checkSize(size + localsize);, +        checkSize(size);, +            checkSize(written);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractHttpData.java, +    protected long maxSize = DefaultHttpDataFactory.MAXSIZE;, +    public void setMaxSize(long maxSize) {, +        this.maxSize = maxSize;, +    }, +, +    public void checkSize(long newSize) throws IOException {, +        if (maxSize >= 0 && newSize > maxSize) {, +            throw new IOException("Size exceed allowed maximum capacity");, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +            checkSize(size);, +                checkSize(size + localsize);, +        checkSize(size);, +            checkSize(written);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractHttpData.java, +    protected long maxSize = DefaultHttpDataFactory.MAXSIZE;, +    public void setMaxSize(long maxSize) {, +        this.maxSize = maxSize;, +    }, +, +    public void checkSize(long newSize) throws IOException {, +        if (maxSize >= 0 && newSize > maxSize) {, +            throw new IOException("Size exceed allowed maximum capacity");, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java, +        checkSize(localsize);, +            checkSize(written);, +            checkSize(size + localsize);, +        checkSize(newsize);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java, +            checkSize(size);, +                checkSize(size + localsize);, +        checkSize(size);, +            checkSize(written);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractHttpData.java, +    protected long maxSize = DefaultHttpDataFactory.MAXSIZE;, +    public void setMaxSize(long maxSize) {, +        this.maxSize = maxSize;, +    }, +, +    public void checkSize(long newSize) throws IOException {, +        if (maxSize >= 0 && newSize > maxSize) {, +            throw new IOException("Size exceed allowed maximum capacity");, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java, +        checkSize(localsize);, +            checkSize(written);, +            checkSize(size + localsize);, +        checkSize(newsize);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +    /**, +     * Proposed default MAXSIZE = -1 as UNLIMITED, +     */, +    public static final long MAXSIZE = -1;, +    private long maxSize = MAXSIZE;, +, +    public void setMaxLimit(long max) {, +        this.maxSize = max;, +    }, +, +            attribute.setMaxSize(maxSize);, +            attribute.setMaxSize(maxSize);, +        MemoryAttribute attribute = new MemoryAttribute(name);, +        attribute.setMaxSize(maxSize);, +        return attribute;, +    }, +, +    /**, +     * Utility method, +     * @param data, +     */, +    private void checkHttpDataSize(HttpData data) {, +        try {, +            data.checkSize(data.length());, +        } catch (IOException e) {, +            throw new IllegalArgumentException("Attribute bigger than maxSize allowed");, +        }, +                attribute.setMaxSize(maxSize);, +                attribute.setMaxSize(maxSize);, +            checkHttpDataSize(attribute);, +            attribute.setMaxSize(maxSize);, +            checkHttpDataSize(attribute);, +            MemoryAttribute attribute = new MemoryAttribute(name, value);]