[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    final Channel ch;, +        ChannelFuture future = b.register();, +        Throwable cause = future.cause();, +        if (cause != null) {, +            if (cause instanceof RuntimeException) {, +                throw (RuntimeException) cause;, +            }, +            if (cause instanceof Error) {, +                throw (Error) cause;, +            }, +            throw new IllegalStateException("Unable to create / register Channel", cause);, +        }, +        ch = future.channel();, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +    final Channel ch;, +        ChannelFuture future = b.register();, +        Throwable cause = future.cause();, +        if (cause != null) {, +            if (cause instanceof RuntimeException) {, +                throw (RuntimeException) cause;, +            }, +            if (cause instanceof Error) {, +                throw (Error) cause;, +            }, +            throw new IllegalStateException("Unable to create / register Channel", cause);, +        }, +        ch = future.channel();, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +, +    @Test, +    public void testChannelFactoryException() {, +        final IllegalStateException exception = new IllegalStateException();, +        try {, +            newResolver().channelFactory(new ChannelFactory<DatagramChannel>() {, +                @Override, +                public DatagramChannel newChannel() {, +                    throw exception;, +                }, +            }).build();, +            fail();, +        } catch (Exception e) {, +            assertSame(exception, e);, +        }, +    }]