[+++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    /**, +     * @see SingleThreadEventExecutor#SingleThreadEventExecutor(EventExecutorGroup, ThreadFactory, ChannelTaskScheduler), +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    /**, +     * @see SingleThreadEventExecutor#SingleThreadEventExecutor(EventExecutorGroup, ThreadFactory, ChannelTaskScheduler), +     */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +/**, + * Default implementation of {@link MultithreadEventExecutorGroup} which will use {@link DefaultEventExecutor} instances, + * to handle the tasks., + */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    /**, +     * @see SingleThreadEventExecutor#SingleThreadEventExecutor(EventExecutorGroup, ThreadFactory, ChannelTaskScheduler), +     */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +/**, + * Default implementation of {@link MultithreadEventExecutorGroup} which will use {@link DefaultEventExecutor} instances, + * to handle the tasks., + */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +++ b/transport/src/main/java/io/netty/channel/EventExecutor.java, +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    /**, +     * @see SingleThreadEventExecutor#SingleThreadEventExecutor(EventExecutorGroup, ThreadFactory, ChannelTaskScheduler), +     */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +/**, + * Default implementation of {@link MultithreadEventExecutorGroup} which will use {@link DefaultEventExecutor} instances, + * to handle the tasks., + */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +    /**, +     * @see MultithreadEventExecutorGroup#MultithreadEventExecutorGroup(int, ThreadFactory, Object...), +     */, +++ b/transport/src/main/java/io/netty/channel/EventExecutor.java, +++ b/transport/src/main/java/io/netty/channel/EventLoop.java, +/**, + * Will handle all the I/O-Operations for a {@link Channel} once it was registered., + *, + * One {@link EventLoop} instance will usually handle more then one {@link Channel} but this may depend on, + * implementation details and internals., + *, + */, +++ b/transport/src/main/java/io/netty/channel/ChannelPipelineException.java, + * failed to execute an operation., +++ b/transport/src/main/java/io/netty/channel/DefaultChannelFuture.java, + * The default {@link ChannelFuture} implementation.  It is recommended to use {@link Channel#newFuture()} to create, + * a new {@link ChannelFuture} rather than calling the constructor explicitly., +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutor.java, +    /**, +     * @see SingleThreadEventExecutor#SingleThreadEventExecutor(EventExecutorGroup, ThreadFactory, ChannelTaskScheduler), +     */, +++ b/transport/src/main/java/io/netty/channel/DefaultEventExecutorGroup.java, +/**, + * Default implementation of {@link MultithreadEventExecutorGroup} which will use {@link DefaultEventExecutor} instances, + * to handle the tasks., + */]