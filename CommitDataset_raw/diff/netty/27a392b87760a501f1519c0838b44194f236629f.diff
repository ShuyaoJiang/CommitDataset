[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline.newPromise();, +        return pipeline.newProgressivePromise();, +        return pipeline.newSucceededFuture();, +        return pipeline.newFailedFuture(cause);, +        return pipeline.voidPromise();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline.newPromise();, +        return pipeline.newProgressivePromise();, +        return pipeline.newSucceededFuture();, +        return pipeline.newFailedFuture(cause);, +        return pipeline.voidPromise();, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +public interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable<Channel> {, +    @Override, +    @Override, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline.newPromise();, +        return pipeline.newProgressivePromise();, +        return pipeline.newSucceededFuture();, +        return pipeline.newFailedFuture(cause);, +        return pipeline.voidPromise();, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +public interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable<Channel> {, +    @Override, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +public interface ChannelHandlerContext extends AttributeMap, ChannelInboundInvoker, ChannelOutboundInvoker {, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        return pipeline.newPromise();, +        return pipeline.newProgressivePromise();, +        return pipeline.newSucceededFuture();, +        return pipeline.newFailedFuture(cause);, +        return pipeline.voidPromise();, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +public interface Channel extends AttributeMap, ChannelOutboundInvoker, Comparable<Channel> {, +    @Override, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +public interface ChannelHandlerContext extends AttributeMap, ChannelInboundInvoker, ChannelOutboundInvoker {, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +    @Override, +++ b/transport/src/main/java/io/netty/channel/ChannelInboundInvoker.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel;, +, +public interface ChannelInboundInvoker {, +, +    /**, +     * A {@link Channel} was registered to its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelRegistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +    ChannelInboundInvoker fireChannelRegistered();, +, +    /**, +     * A {@link Channel} was unregistered from its {@link EventLoop}., +     *, +     * This will result in having the  {@link ChannelInboundHandler#channelUnregistered(ChannelHandlerContext)} method, +     * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     */, +    ChannelInboundInvoker fireChannelUnregistered();, +]