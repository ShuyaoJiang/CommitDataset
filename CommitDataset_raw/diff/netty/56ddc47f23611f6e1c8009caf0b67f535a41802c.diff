[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, + *, + * <P>According to RFC 7231, POST, PUT and OPTIONS allow to have a body., + * This encoder will support widely all methods except TRACE since the RFC notes, + * for GET, DELETE, HEAD and CONNECT: (replaces XXX by one of these methods)</P>, + * <P>"A payload within a XXX request message has no defined semantics;, + * sending a payload body on a XXX request might cause some existing, + * implementations to reject the request."</P>, + * <P>On the contrary, for TRACE method, RFC says:</P>, + * <P>"A client MUST NOT send a message body in a TRACE request."</P>, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +        if (method.equals(HttpMethod.TRACE)) {, +            throw new ErrorDataEncoderException("Cannot create a Encoder if request is a TRACE");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, + *, + * <P>According to RFC 7231, POST, PUT and OPTIONS allow to have a body., + * This encoder will support widely all methods except TRACE since the RFC notes, + * for GET, DELETE, HEAD and CONNECT: (replaces XXX by one of these methods)</P>, + * <P>"A payload within a XXX request message has no defined semantics;, + * sending a payload body on a XXX request might cause some existing, + * implementations to reject the request."</P>, + * <P>On the contrary, for TRACE method, RFC says:</P>, + * <P>"A client MUST NOT send a message body in a TRACE request."</P>, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +        if (method.equals(HttpMethod.TRACE)) {, +            throw new ErrorDataEncoderException("Cannot create a Encoder if request is a TRACE");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InterfaceHttpPostRequestDecoder.java, + * This decoder will decode Body and can handle POST BODY., +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.java, + *, + * <P>According to RFC 7231, POST, PUT and OPTIONS allow to have a body., + * This encoder will support widely all methods except TRACE since the RFC notes, + * for GET, DELETE, HEAD and CONNECT: (replaces XXX by one of these methods)</P>, + * <P>"A payload within a XXX request message has no defined semantics;, + * sending a payload body on a XXX request might cause some existing, + * implementations to reject the request."</P>, + * <P>On the contrary, for TRACE method, RFC says:</P>, + * <P>"A client MUST NOT send a message body in a TRACE request."</P>, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +     *             if the request is a TRACE, +        if (method.equals(HttpMethod.TRACE)) {, +            throw new ErrorDataEncoderException("Cannot create a Encoder if request is a TRACE");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/InterfaceHttpPostRequestDecoder.java, + * This decoder will decode Body and can handle POST BODY., +++ b/codec-http/src/test/java/io/netty/handler/codec/http/multipart/HttpPostRequestEncoderTest.java, +import io.netty.handler.codec.http.multipart.HttpPostRequestEncoder.ErrorDataEncoderException;, +import static org.junit.Assert.fail;, +    public void testAllowedMethods() throws Exception {, +        shouldThrowExceptionIfNotAllowed(HttpMethod.CONNECT);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.PUT);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.POST);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.PATCH);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.DELETE);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.GET);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.HEAD);, +        shouldThrowExceptionIfNotAllowed(HttpMethod.OPTIONS);, +        try {, +            shouldThrowExceptionIfNotAllowed(HttpMethod.TRACE);, +            fail("Should raised an exception with TRACE method");, +        } catch (ErrorDataEncoderException e) {, +            // Exception is willing, +        }, +    }, +, +    private void shouldThrowExceptionIfNotAllowed(HttpMethod method) throws Exception {, +                method, "http://localhost");]