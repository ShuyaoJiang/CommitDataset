[+++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroupFuture.java, +, +import java.util.Iterator;, +import java.util.concurrent.TimeUnit;, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroupFuture.java, +, +import java.util.Iterator;, +import java.util.concurrent.TimeUnit;, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +            channel.addClosureListener(remover);, +                c = serverChannels.remove(c.id());, +                c = nonServerChannels.remove(c.id());, +        c.removeClosureListener(remover);, +            ChannelFuture f = c.newFuture();, +            c.close(f);, +            futures.put(c.id(), f.awaitUninterruptibly());, +            ChannelFuture f = c.newFuture();, +            c.close(f);, +            futures.put(c.id(), f);, +            ChannelFuture f = c.newFuture();, +            c.disconnect(f);, +            futures.put(c.id(), f.awaitUninterruptibly());, +            ChannelFuture f = c.newFuture();, +            c.disconnect(f);, +            futures.put(c.id(), f);, +                ChannelFuture f = c.newFuture();, +                c.write(buf.duplicate(), f);, +                futures.put(c.id(), f);, +                ChannelFuture f = c.newFuture();, +                c.write(message, f);, +                futures.put(c.id(), f);]