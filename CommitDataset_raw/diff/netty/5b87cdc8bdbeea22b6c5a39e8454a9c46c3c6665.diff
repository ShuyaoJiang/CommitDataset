[+++ b/common/src/main/java/io/netty/util/internal/ThreadLocalRandom.java, +    private static volatile long initialSeedUniquifier =, +    private static final Thread seedGeneratorThread;, +    private static final BlockingQueue<byte[]> seedQueue;, +    private static final long seedGeneratorStartTime;, +    private static volatile long seedGeneratorEndTime;, +, +    static {, +            seedGeneratorThread = new Thread("initialSeedUniquifierGenerator") {, +                    final SecureRandom random = new SecureRandom(); // Get the real random seed from /dev/random, +                    final byte[] seed = random.generateSeed(8);, +                    seedGeneratorEndTime = System.nanoTime();, +                    seedQueue.add(seed);, +            seedGeneratorThread.setDaemon(true);, +            seedGeneratorThread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {, +            seedQueue = new LinkedBlockingQueue<byte[]>();, +            seedGeneratorStartTime = System.nanoTime();, +            seedGeneratorThread.start();, +        } else {, +            seedGeneratorThread = null;, +            seedQueue = null;, +            seedGeneratorStartTime = 0L;, +        }, +    public static void setInitialSeedUniquifier(long initialSeedUniquifier) {, +        ThreadLocalRandom.initialSeedUniquifier = initialSeedUniquifier;, +    }, +, +    public static long getInitialSeedUniquifier() {, +        // Use the value set via the setter., +        long initialSeedUniquifier = ThreadLocalRandom.initialSeedUniquifier;, +        if (initialSeedUniquifier != 0) {, +            return initialSeedUniquifier;, +        }, +, +        synchronized (ThreadLocalRandom.class) {, +            initialSeedUniquifier = ThreadLocalRandom.initialSeedUniquifier;, +            if (initialSeedUniquifier != 0) {, +                return initialSeedUniquifier;, +            }, +, +            // Get the random seed from the generator thread with timeout., +            final long timeoutSeconds = 3;, +            final long deadLine = seedGeneratorStartTime + TimeUnit.SECONDS.toNanos(timeoutSeconds);, +            boolean interrupted = false;, +            for (;;) {, +                final long waitTime = deadLine - System.nanoTime();, +                    final byte[] seed;, +                    if (waitTime <= 0) {, +                        seed = seedQueue.poll();, +                    } else {, +                        seed = seedQueue.poll(waitTime, TimeUnit.NANOSECONDS);, +                    }, +, +, +                if (waitTime <= 0) {, +                    seedGeneratorThread.interrupt();, +                    logger.warn(, +                            "Failed to generate a seed from SecureRandom within {} seconds. " +, +                            "Not enough entrophy?", timeoutSeconds, +                    );, +                    break;, +                }, +                seedGeneratorThread.interrupt();, +, +            if (seedGeneratorEndTime == 0) {, +                seedGeneratorEndTime = System.nanoTime();, +    }, +                    if (seedGeneratorEndTime != 0) {, +                                actualCurrent,, +                                TimeUnit.NANOSECONDS.toMillis(seedGeneratorEndTime - seedGeneratorStartTime)));, +                    } else {, +                        logger.debug(String.format("-Dio.netty.initialSeedUniquifier: 0x%016x", actualCurrent));, +                    }, +++ b/common/src/main/java/io/netty/util/internal/ThreadLocalRandom.java, +    private static volatile long initialSeedUniquifier =, +    private static final Thread seedGeneratorThread;, +    private static final BlockingQueue<byte[]> seedQueue;, +    private static final long seedGeneratorStartTime;, +    private static volatile long seedGeneratorEndTime;, +, +    static {, +            seedGeneratorThread = new Thread("initialSeedUniquifierGenerator") {, +                    final SecureRandom random = new SecureRandom(); // Get the real random seed from /dev/random, +                    final byte[] seed = random.generateSeed(8);, +                    seedGeneratorEndTime = System.nanoTime();, +                    seedQueue.add(seed);, +            seedGeneratorThread.setDaemon(true);, +            seedGeneratorThread.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {, +            seedQueue = new LinkedBlockingQueue<byte[]>();, +            seedGeneratorStartTime = System.nanoTime();, +            seedGeneratorThread.start();, +        } else {, +            seedGeneratorThread = null;, +            seedQueue = null;, +            seedGeneratorStartTime = 0L;, +        }, +    public static void setInitialSeedUniquifier(long initialSeedUniquifier) {, +        ThreadLocalRandom.initialSeedUniquifier = initialSeedUniquifier;, +    }, +]