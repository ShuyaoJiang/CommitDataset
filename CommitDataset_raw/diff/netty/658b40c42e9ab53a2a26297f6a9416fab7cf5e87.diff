[+++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/ChannelConfig.java, + * A set of configuration properties of a {@link Channel}., + * transport-specific properties:, + * <pre>, + * Channel ch = ...;, + * NioSocketChannelConfig cfg = <strong>(NioSocketChannelConfig) ch.getConfig();</strong>, + * cfg.setWriteSpinCount(4);, + * </pre>, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/ChannelConfig.java, + * A set of configuration properties of a {@link Channel}., + * transport-specific properties:, + * <pre>, + * Channel ch = ...;, + * NioSocketChannelConfig cfg = <strong>(NioSocketChannelConfig) ch.getConfig();</strong>, + * cfg.setWriteSpinCount(4);, + * </pre>, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * please refer to the {@link ChannelEvent} documentation to find out what a, + * upstream event and a downstream event are and what fundamental differences, + * they have, if you didn't read yet., +++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/ChannelConfig.java, + * A set of configuration properties of a {@link Channel}., + * transport-specific properties:, + * <pre>, + * Channel ch = ...;, + * NioSocketChannelConfig cfg = <strong>(NioSocketChannelConfig) ch.getConfig();</strong>, + * cfg.setWriteSpinCount(4);, + * </pre>, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * please refer to the {@link ChannelEvent} documentation to find out what a, + * upstream event and a downstream event are and what fundamental differences, + * they have, if you didn't read yet., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * <h3>Upstream events and downstream events, and their interpretation</h3>, + * If an event flows from the first handler to the last handler in a, + * {@link ChannelPipeline}, we call it a upstream event and say "an event goes, + * upstream".  If an event flows from the last handler to the first handler in, + * a {@link ChannelPipeline}, we call it a downstream event and say "an event, + * goes downstream".  (Please refer to the diagram in {@link ChannelPipeline}, + * for more explanation.), + * a {@link ChannelEvent} is interpreted depending on the type of the handler, + * more in detail., +++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/ChannelConfig.java, + * A set of configuration properties of a {@link Channel}., + * transport-specific properties:, + * <pre>, + * Channel ch = ...;, + * NioSocketChannelConfig cfg = <strong>(NioSocketChannelConfig) ch.getConfig();</strong>, + * cfg.setWriteSpinCount(4);, + * </pre>, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * please refer to the {@link ChannelEvent} documentation to find out what a, + * upstream event and a downstream event are and what fundamental differences, + * they have, if you didn't read yet., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, + * <h3>Upstream events and downstream events, and their interpretation</h3>, + * If an event flows from the first handler to the last handler in a, + * {@link ChannelPipeline}, we call it a upstream event and say "an event goes, + * upstream".  If an event flows from the last handler to the first handler in, + * a {@link ChannelPipeline}, we call it a downstream event and say "an event, + * goes downstream".  (Please refer to the diagram in {@link ChannelPipeline}, + * for more explanation.), + * a {@link ChannelEvent} is interpreted depending on the type of the handler, + * more in detail., +++ b/src/main/java/org/jboss/netty/channel/ChannelFactory.java, + * is attached to the new {@link Channel}, and starts to handle all associated, + * {@link ChannelEvent}s., +     * Creates and opens a new {@link Channel} and attaches the specified, +     * {@link ChannelPipeline} to the new {@link Channel}., +++ b/src/main/java/org/jboss/netty/channel/Channel.java, + * <li>the current state of the channel (e.g. is it open? is it connected?),</li>, + *     associated with the channel.</li>, +++ b/src/main/java/org/jboss/netty/channel/ChannelConfig.java, + * A set of configuration properties of a {@link Channel}., + * transport-specific properties:, + * <pre>, + * Channel ch = ...;, + * NioSocketChannelConfig cfg = <strong>(NioSocketChannelConfig) ch.getConfig();</strong>, + * cfg.setWriteSpinCount(4);, + * </pre>, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * please refer to the {@link ChannelEvent} documentation to find out what a, + * upstream event and a downstream event are and what fundamental differences, + * they have, if you didn't read yet., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java]