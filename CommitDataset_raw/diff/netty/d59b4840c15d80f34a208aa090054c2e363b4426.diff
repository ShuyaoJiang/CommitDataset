[+++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * Compares two {@code int} values., +     *, +     * @param  x the first {@code int} to compare, +     * @param  y the second {@code int} to compare, +     * @return the value {@code 0} if {@code x == y};, +     *         {@code -1} if {@code x < y}; and, +     *         {@code 1} if {@code x > y}, +     */, +    public static int compare(final int x, final int y) {, +        // do not subtract for comparison, it could overflow, +        return x < y ? -1 : (x > y ? 1 : 0);, +    }, +, +    /**, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * Compares two {@code int} values., +     *, +     * @param  x the first {@code int} to compare, +     * @param  y the second {@code int} to compare, +     * @return the value {@code 0} if {@code x == y};, +     *         {@code -1} if {@code x < y}; and, +     *         {@code 1} if {@code x > y}, +     */, +    public static int compare(final int x, final int y) {, +        // do not subtract for comparison, it could overflow, +        return x < y ? -1 : (x > y ? 1 : 0);, +    }, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelId.java, +, +        hashCode = Arrays.hashCode(data);, +    public int compareTo(final ChannelId o) {, +        if (o instanceof DefaultChannelId) {, +            final byte[] otherData = ((DefaultChannelId)o).data;, +            if (this == o) {, +                // short circuit, +            // lexicographic comparison, +            int len1 = data.length;, +            int len2 = otherData.length;, +            int len = Math.min(len1, len2);, +, +            for (int k = 0; k < len; k++) {, +                byte x = data[k];, +                byte y = otherData[k];, +                if (x != y) {, +                    // treat these as unsigned bytes for comparison, +                    return (x & 0xff) - (y & 0xff);, +                }, +            }, +            return len1 - len2;, +        }, +, +        return asLongText().compareTo(o.asLongText());, +    }, +        return this == obj || (obj instanceof DefaultChannelId && Arrays.equals(data, ((DefaultChannelId) obj).data));, +++ b/common/src/main/java/io/netty/util/internal/MathUtil.java, +     * Compares two {@code int} values., +     *, +     * @param  x the first {@code int} to compare, +     * @param  y the second {@code int} to compare, +     * @return the value {@code 0} if {@code x == y};, +     *         {@code -1} if {@code x < y}; and, +     *         {@code 1} if {@code x > y}, +     */, +    public static int compare(final int x, final int y) {, +        // do not subtract for comparison, it could overflow, +        return x < y ? -1 : (x > y ? 1 : 0);, +    }, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelId.java, +, +        hashCode = Arrays.hashCode(data);, +    public int compareTo(final ChannelId o) {, +        if (o instanceof DefaultChannelId) {, +            final byte[] otherData = ((DefaultChannelId)o).data;, +            if (this == o) {, +                // short circuit, +            // lexicographic comparison, +            int len1 = data.length;, +            int len2 = otherData.length;, +            int len = Math.min(len1, len2);, +, +            for (int k = 0; k < len; k++) {, +                byte x = data[k];, +                byte y = otherData[k];, +                if (x != y) {, +                    // treat these as unsigned bytes for comparison, +                    return (x & 0xff) - (y & 0xff);, +                }, +            }, +            return len1 - len2;, +        }, +, +        return asLongText().compareTo(o.asLongText());, +    }, +        return this == obj || (obj instanceof DefaultChannelId && Arrays.equals(data, ((DefaultChannelId) obj).data));, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannelId.java]