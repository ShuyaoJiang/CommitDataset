[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +    private final NonReentrantLock pendingEncryptedWritesLock = new NonReentrantLock();, +        final boolean locked = pendingEncryptedWritesLock.tryLock();, +        try {, +            pendingEncryptedWrites.offer(encryptedWrite);, +        } finally {, +            if (locked) {, +                pendingEncryptedWritesLock.unlock();, +        if (!pendingEncryptedWritesLock.tryLock()) {, +        try {, +        } finally {, +            pendingEncryptedWritesLock.unlock();, +                    !pendingEncryptedWritesLock.isHeldByCurrentThread()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +     * Synchronizes access to the {@link WriteBufferQueue}., +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioSocketChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.util.internal.NonReentrantLock;, +    final NonReentrantLock writeLock = new NonReentrantLock();, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioWorker.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +        final NonReentrantLock writeLock = channel.writeLock;, +        if (!writeLock.tryLock()) {, +++ b/src/main/java/org/jboss/netty/handler/ssl/SslHandler.java, +import org.jboss.netty.util.internal.NonReentrantLock;, +    private final NonReentrantLock pendingEncryptedWritesLock = new NonReentrantLock();, +        final boolean locked = pendingEncryptedWritesLock.tryLock();, +        try {, +            pendingEncryptedWrites.offer(encryptedWrite);, +        } finally {, +            if (locked) {]