[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +    private void writeBytesMultiple(, +            ChannelOutboundBuffer in, int msgCount, ByteBuffer[] nioBuffers) throws IOException {, +    }, +, +    /**, +     * Write a {@link DefaultFileRegion}, +     *, +     * @param region        the {@link DefaultFileRegion} from which the bytes should be written, +     * @return amount       the amount of written bytes, +     */, +    private long doWriteFileRegion(DefaultFileRegion region, long count) throws Exception {, +        return Native.sendfile(fd, region, region.transfered(), count);, +    }, +, +    @Override, +    protected void doWrite(ChannelOutboundBuffer in) throws Exception {, +        for (;;) {, +            final int msgCount = in.size();, +, +            if (msgCount == 0) {, +                // Wrote all messages., +                clearEpollOut();, +                break;, +            }, +, +            // Do gathering write if:, +            // * the outbound buffer contains more than one messages and, +            // * they are all buffers rather than a file region., +            if (msgCount > 1) {, +                // Ensure the pending writes are made of ByteBufs only., +                ByteBuffer[] nioBuffers = in.nioBuffers();, +                if (nioBuffers != null) {, +                    writeBytesMultiple(in, msgCount, nioBuffers);, +, +                    // We do not break the loop here even if the outbound buffer was flushed completely,, +                    // because a user might have triggered another write and flush when we notify his or her, +                    // listeners., +            // The outbound buffer contains only one message or it contains a file region.]