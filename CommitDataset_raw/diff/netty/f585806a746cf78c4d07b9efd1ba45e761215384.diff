[+++ b/common/src/main/java/io/netty/util/concurrent/PromiseNotifier.java, + * {@link GenericFutureListener} implementation which takes other {@link Promise}s, +    private final boolean logNotifyFailure;, +        this(true, promises);, +    }, +, +    /**, +     * Create a new instance., +     *, +     * @param logNotifyFailure {@code true} if logging should be done in case notification fails., +     * @param promises  the {@link Promise}s to notify once this {@link GenericFutureListener} is notified., +     */, +    @SafeVarargs, +    public PromiseNotifier(boolean logNotifyFailure, Promise<? super V>... promises) {, +        this.logNotifyFailure = logNotifyFailure;, +                if (!p.trySuccess(result) && logNotifyFailure) {, +                if (!p.cancel(false) && logNotifyFailure) {, +                if (!p.tryFailure(cause) && logNotifyFailure) {, +++ b/common/src/main/java/io/netty/util/concurrent/PromiseNotifier.java, + * {@link GenericFutureListener} implementation which takes other {@link Promise}s, +    private final boolean logNotifyFailure;, +        this(true, promises);, +    }, +, +    /**, +     * Create a new instance., +     *, +     * @param logNotifyFailure {@code true} if logging should be done in case notification fails., +     * @param promises  the {@link Promise}s to notify once this {@link GenericFutureListener} is notified., +     */, +    @SafeVarargs, +    public PromiseNotifier(boolean logNotifyFailure, Promise<? super V>... promises) {, +        this.logNotifyFailure = logNotifyFailure;, +                if (!p.trySuccess(result) && logNotifyFailure) {, +                if (!p.cancel(false) && logNotifyFailure) {, +                if (!p.tryFailure(cause) && logNotifyFailure) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    addCloseListener(ctx.close(ctx.newPromise()), promise);, +                addCloseListener(ctx.close(ctx.newPromise()), promise);, +            }, +        });, +    }, +, +    private static void addCloseListener(ChannelFuture future, ChannelPromise promise) {, +        // Also we not want to log if the notification happens as this is expected in some cases., +        // See https://github.com/netty/netty/issues/5598, +        future.addListener(new ChannelPromiseNotifier(false, promise));, +++ b/common/src/main/java/io/netty/util/concurrent/PromiseNotifier.java, + * {@link GenericFutureListener} implementation which takes other {@link Promise}s, +    private final boolean logNotifyFailure;, +        this(true, promises);, +    }, +, +    /**, +     * Create a new instance., +     *, +     * @param logNotifyFailure {@code true} if logging should be done in case notification fails., +     * @param promises  the {@link Promise}s to notify once this {@link GenericFutureListener} is notified., +     */, +    @SafeVarargs, +    public PromiseNotifier(boolean logNotifyFailure, Promise<? super V>... promises) {, +        this.logNotifyFailure = logNotifyFailure;, +                if (!p.trySuccess(result) && logNotifyFailure) {, +                if (!p.cancel(false) && logNotifyFailure) {, +                if (!p.tryFailure(cause) && logNotifyFailure) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    addCloseListener(ctx.close(ctx.newPromise()), promise);, +                addCloseListener(ctx.close(ctx.newPromise()), promise);, +            }, +        });, +    }, +, +    private static void addCloseListener(ChannelFuture future, ChannelPromise promise) {, +        // Also we not want to log if the notification happens as this is expected in some cases., +        // See https://github.com/netty/netty/issues/5598, +        future.addListener(new ChannelPromiseNotifier(false, promise));, +++ b/transport/src/main/java/io/netty/channel/ChannelPromiseNotifier.java, + * ChannelFutureListener implementation which takes other {@link ChannelPromise}(s) and notifies them on completion., +, +    /**, +     * Create a new instance, +     *, +     * @param logNotifyFailure {@code true} if logging should be done in case notification fails., +     * @param promises  the {@link ChannelPromise}s to notify once this {@link ChannelFutureListener} is notified., +     */, +    public ChannelPromiseNotifier(boolean logNotifyFailure, ChannelPromise... promises) {, +        super(logNotifyFailure, promises);, +    }]