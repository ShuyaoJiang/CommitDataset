[+++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import static io.netty.buffer.Unpooled.wrappedBuffer;, +                responseHandler.put(streamId, channel.write(request), channel.newPromise());, +                        wrappedBuffer(URL2DATA.getBytes(CharsetUtil.UTF_8)));, +                responseHandler.put(streamId, channel.write(request), channel.newPromise());, +            channel.flush();, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import static io.netty.buffer.Unpooled.wrappedBuffer;, +                responseHandler.put(streamId, channel.write(request), channel.newPromise());, +                        wrappedBuffer(URL2DATA.getBytes(CharsetUtil.UTF_8)));, +                responseHandler.put(streamId, channel.write(request), channel.newPromise());, +            channel.flush();, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/HttpResponseHandler.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.Map;, +    private Map<Integer, Entry<ChannelFuture, ChannelPromise>> streamidPromiseMap;, +        // Use a concurrent map because we add and iterate from the main thread (just for the purposes of the example),, +        // but Netty also does a get on the map when messages are received in a EventLoop thread., +        streamidPromiseMap = PlatformDependent.newConcurrentHashMap();]