[+++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +    private Selector selector;, +    private Selector unwrappedSelector;, +            unwrappedSelector = provider.openSelector();, +            return unwrappedSelector;, +                !((Class<?>) maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) {, +                logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, t);, +            return unwrappedSelector;, +                    selectedKeysField.set(unwrappedSelector, selectedKeySet);, +                    publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);, +            logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, e);, +            return unwrappedSelector;, +        selectedKeys = selectedKeySet;, +        logger.trace("instrumented a special java.util.Set into: {}", unwrappedSelector);, +        return new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet);, +            processSelectedKeysOptimized();, +    private void processSelectedKeysOptimized() {, +        for (int i = 0; i < selectedKeys.size; ++i) {, +            final SelectionKey k = selectedKeys.keys[i];, +            selectedKeys.keys[i] = null;, +                selectedKeys.reset(i + 1);, +    Selector unwrappedSelector() {, +        return unwrappedSelector;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +    private Selector selector;, +    private Selector unwrappedSelector;, +            unwrappedSelector = provider.openSelector();, +            return unwrappedSelector;, +                !((Class<?>) maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) {, +                logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, t);, +            return unwrappedSelector;, +                    selectedKeysField.set(unwrappedSelector, selectedKeySet);, +                    publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);, +            logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, e);, +            return unwrappedSelector;, +        selectedKeys = selectedKeySet;, +        logger.trace("instrumented a special java.util.Set into: {}", unwrappedSelector);, +        return new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet);, +            processSelectedKeysOptimized();, +    private void processSelectedKeysOptimized() {, +        for (int i = 0; i < selectedKeys.size; ++i) {, +            final SelectionKey k = selectedKeys.keys[i];, +            selectedKeys.keys[i] = null;, +                selectedKeys.reset(i + 1);, +    Selector unwrappedSelector() {, +        return unwrappedSelector;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/nio/SelectedSelectionKeySet.java, +import java.util.Arrays;, +    SelectionKey[] keys;, +    int size;, +        keys = new SelectionKey[1024];, +        keys[size++] = o;, +        if (size == keys.length) {, +            increaseCapacity();, +        return size;, +, +    void reset() {, +        reset(0);, +    }, +, +    void reset(int start) {, +        Arrays.fill(keys, start, size, null);, +        size = 0;, +    }, +, +    private void increaseCapacity() {, +        SelectionKey[] newKeys = new SelectionKey[keys.length << 1];, +        System.arraycopy(keys, 0, newKeys, 0, size);, +        keys = newKeys;, +    }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);, +++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +    private Selector selector;, +    private Selector unwrappedSelector;, +            unwrappedSelector = provider.openSelector();, +            return unwrappedSelector;, +                !((Class<?>) maybeSelectorImplClass).isAssignableFrom(unwrappedSelector.getClass())) {, +                logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, t);, +            return unwrappedSelector;, +                    selectedKeysField.set(unwrappedSelector, selectedKeySet);, +                    publicSelectedKeysField.set(unwrappedSelector, selectedKeySet);, +            logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, e);, +            return unwrappedSelector;, +        selectedKeys = selectedKeySet;, +        logger.trace("instrumented a special java.util.Set into: {}", unwrappedSelector);, +        return new SelectedSelectionKeySetSelector(unwrappedSelector, selectedKeySet);, +            processSelectedKeysOptimized();, +    private void processSelectedKeysOptimized() {, +        for (int i = 0; i < selectedKeys.size; ++i) {]