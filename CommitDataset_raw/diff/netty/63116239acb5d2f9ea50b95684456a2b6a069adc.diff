[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +        emptyBuf = new EmptyByteBuf(this);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +        emptyBuf = new EmptyByteBuf(this);, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +/**, + * An empty {@link ByteBuf} whose capacity and maximum capacity are all {@code 0}., + */, +    private static final ByteBuffer EMPTY_BYTE_BUFFER = ByteBuffer.allocateDirect(0);, +    private static final long EMPTY_BYTE_BUFFER_ADDRESS;, +    static {, +        long emptyByteBufferAddress = 0;, +        try {, +                emptyByteBufferAddress = PlatformDependent.directBufferAddress(EMPTY_BYTE_BUFFER);, +        } catch (Throwable t) {, +            // Ignore, +        }, +        EMPTY_BYTE_BUFFER_ADDRESS = emptyByteBufferAddress;, +    }, +, +    private final ByteBufAllocator alloc;, +    private final ByteOrder order;, +    private final String str;, +    private EmptyByteBuf swapped;, +, +    public EmptyByteBuf(ByteBufAllocator alloc) {, +        this(alloc, ByteOrder.BIG_ENDIAN);, +    }, +, +    private EmptyByteBuf(ByteBufAllocator alloc, ByteOrder order) {, +        if (alloc == null) {, +            throw new NullPointerException("alloc");, +        }, +, +        this.alloc = alloc;, +        this.order = order;, +        str = getClass().getSimpleName() + (order == ByteOrder.BIG_ENDIAN? "BE" : "LE");, +        return alloc;, +        return true;, +        if (endianness == order()) {, +            return this;, +        EmptyByteBuf swapped = this.swapped;, +        if (swapped != null) {, +            return swapped;, +        }, +, +        this.swapped = swapped = new EmptyByteBuf(alloc(), endianness);, +        return swapped;, +        return EMPTY_BYTE_BUFFER;, +        return nioBuffer();, +        return new ByteBuffer[] { EMPTY_BYTE_BUFFER };, +        return nioBuffers();, +        return EMPTY_ARRAY;, +        return EMPTY_BYTE_BUFFER_ADDRESS != 0;, +            return EMPTY_BYTE_BUFFER_ADDRESS;, +        return toString(charset);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +        emptyBuf = new EmptyByteBuf(this);, +++ b/buffer/src/main/java/io/netty/buffer/EmptyByteBuf.java, +/**, + * An empty {@link ByteBuf} whose capacity and maximum capacity are all {@code 0}., + */, +    private static final ByteBuffer EMPTY_BYTE_BUFFER = ByteBuffer.allocateDirect(0);, +    private static final long EMPTY_BYTE_BUFFER_ADDRESS;, +    static {, +        long emptyByteBufferAddress = 0;, +        try {, +                emptyByteBufferAddress = PlatformDependent.directBufferAddress(EMPTY_BYTE_BUFFER);, +        } catch (Throwable t) {, +            // Ignore, +        }, +        EMPTY_BYTE_BUFFER_ADDRESS = emptyByteBufferAddress;, +    }, +, +    private final ByteBufAllocator alloc;, +    private final ByteOrder order;, +    private final String str;, +    private EmptyByteBuf swapped;, +, +    public EmptyByteBuf(ByteBufAllocator alloc) {, +        this(alloc, ByteOrder.BIG_ENDIAN);, +    }, +, +    private EmptyByteBuf(ByteBufAllocator alloc, ByteOrder order) {, +        if (alloc == null) {, +            throw new NullPointerException("alloc");, +        }, +, +        this.alloc = alloc;, +        this.order = order;, +        str = getClass().getSimpleName() + (order == ByteOrder.BIG_ENDIAN? "BE" : "LE");, +        return alloc;, +        return true;, +        if (endianness == order()) {, +            return this;, +        EmptyByteBuf swapped = this.swapped;, +        if (swapped != null) {, +            return swapped;, +        }, +]