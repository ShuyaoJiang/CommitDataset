[+++ b/src/test/java/org/jboss/netty/bootstrap/BootstrapTest.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.bootstrap;, +, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Map.Entry;, +, +import org.jboss.netty.channel.ChannelDownstreamHandler;, +import org.jboss.netty.channel.ChannelFactory;, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.channel.ChannelPipelineFactory;, +import org.junit.Test;, +, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + *, + * @version $Rev$, $Date$, + *, + */, +public class BootstrapTest {, +    @Test(expected = IllegalStateException.class), +    public void shouldNotReturnNullFactory() {, +        new Bootstrap().getFactory();, +    }, +, +    @Test(expected = IllegalStateException.class), +    public void shouldNotAllowInitialFactoryToChange() {, +        new Bootstrap(createMock(ChannelFactory.class)).setFactory(null);, +    }, +, +    @Test, +    public void shouldNotAllowFactoryToChangeMoreThanOnce() {, +        Bootstrap b = new Bootstrap();, +        b.setFactory(createMock(ChannelFactory.class));, +        try {, +            b.setFactory(createMock(ChannelFactory.class));, +            fail();, +        } catch (IllegalStateException e) {, +            // Success., +        }, +    }, +, +    @Test(expected = NullPointerException.class), +    public void shouldNotAllowNullFactory() {, +        new Bootstrap().setFactory(null);, +    }, +, +    @Test, +    public void shouldHaveNonNullInitialPipeline() {, +        assertNotNull(new Bootstrap().getPipeline());, +    }, +, +    @Test(expected = NullPointerException.class), +    public void shouldNotAllowNullPipeline() {, +        new Bootstrap().setPipeline(null);, +    }, +, +    @Test, +    public void shouldHaveNonNullInitialPipelineFactory() {, +        assertNotNull(new Bootstrap().getPipelineFactory());, +    }, +, +    @Test, +    public void shouldUpdatePipelineFactoryIfPipelineIsSet() {, +        Bootstrap b = new Bootstrap();, +        ChannelPipelineFactory oldPipelineFactory = b.getPipelineFactory();, +        b.setPipeline(createMock(ChannelPipeline.class));, +        assertNotSame(oldPipelineFactory, b.getPipelineFactory());, +    }]