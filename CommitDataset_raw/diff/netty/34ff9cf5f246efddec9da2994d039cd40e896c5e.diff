[+++ b/codec/src/main/java/io/netty/handler/codec/base64/Base64.java, +        ByteBuf dest = allocator.buffer(encodedBufferSize(len, breakLines)).order(src.order());, +    // package-private for testing, +    static int encodedBufferSize(int len, boolean breakLines) {, +        // Cast len to long to prevent overflow, +        long len43 = ((long) len << 2) / 3;, +, +        // Account for padding, +        long ret = (len43 + 3) & ~3;, +, +        if (breakLines) {, +            ret += len43 / MAX_LINE_LENGTH;, +        }, +, +        return ret < Integer.MAX_VALUE ? (int) ret : Integer.MAX_VALUE;, +    }, +, +    // package-private for testing, +    static int decodedBufferSize(int len) {, +        return len - (len >>> 2);, +    }, +, +            dest = allocator.buffer(decodedBufferSize(len)).order(src.order()); // Upper limit on size of output, +++ b/codec/src/main/java/io/netty/handler/codec/base64/Base64.java, +        ByteBuf dest = allocator.buffer(encodedBufferSize(len, breakLines)).order(src.order());, +    // package-private for testing, +    static int encodedBufferSize(int len, boolean breakLines) {, +        // Cast len to long to prevent overflow, +        long len43 = ((long) len << 2) / 3;, +, +        // Account for padding, +        long ret = (len43 + 3) & ~3;, +, +        if (breakLines) {, +            ret += len43 / MAX_LINE_LENGTH;, +        }, +, +        return ret < Integer.MAX_VALUE ? (int) ret : Integer.MAX_VALUE;, +    }, +, +    // package-private for testing, +    static int decodedBufferSize(int len) {, +        return len - (len >>> 2);, +    }, +, +            dest = allocator.buffer(decodedBufferSize(len)).order(src.order()); // Upper limit on size of output, +++ b/codec/src/test/java/io/netty/handler/codec/base64/Base64Test.java, +, +    @Test, +    public void testOverflowEncodedBufferSize() {, +        assertEquals(Integer.MAX_VALUE, Base64.encodedBufferSize(Integer.MAX_VALUE, true));, +        assertEquals(Integer.MAX_VALUE, Base64.encodedBufferSize(Integer.MAX_VALUE, false));, +    }, +, +    @Test, +    public void testOverflowDecodedBufferSize() {, +        assertEquals(1610612736, Base64.decodedBufferSize(Integer.MAX_VALUE));, +    }]