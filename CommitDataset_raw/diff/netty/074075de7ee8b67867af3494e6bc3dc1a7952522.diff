[+++ b/transport/src/main/java/io/netty/channel/pool/SimpleChannelPool.java, +     * @param releaseHealthCheck will check channel health before offering back if this parameter set to {@code true};, +     *                           otherwise, channel health is only checked at acquisition time, +    /**, +     * Returns the {@link Bootstrap} this pool will use to open new connections., +     *, +     * @return the {@link Bootstrap} this pool will use to open new connections, +     */, +    protected Bootstrap bootstrap() {, +        return bootstrap;, +    }, +, +    /**, +     * Returns the {@link ChannelPoolHandler} that will be notified for the different pool actions., +     *, +     * @return the {@link ChannelPoolHandler} that will be notified for the different pool actions, +     */, +    protected ChannelPoolHandler handler() {, +        return handler;, +    }, +, +    /**, +     * Returns the {@link ChannelHealthChecker} that will be used to check if a {@link Channel} is healthy., +     *, +     * @return the {@link ChannelHealthChecker} that will be used to check if a {@link Channel} is healthy, +     */, +    protected ChannelHealthChecker healthChecker() {, +        return healthCheck;, +    }, +, +    /**, +     * Indicates whether this pool will check the health of channels before offering them back into the pool., +     *, +     * @return {@code true} if this pool will check the health of channels before offering them back into the pool, or, +     * {@code false} if channel health is only checked at acquisition time, +     */, +    protected boolean releaseHealthCheck() {, +        return releaseHealthCheck;, +    }, +, +++ b/transport/src/main/java/io/netty/channel/pool/SimpleChannelPool.java, +     * @param releaseHealthCheck will check channel health before offering back if this parameter set to {@code true};, +     *                           otherwise, channel health is only checked at acquisition time, +    /**, +     * Returns the {@link Bootstrap} this pool will use to open new connections., +     *, +     * @return the {@link Bootstrap} this pool will use to open new connections, +     */, +    protected Bootstrap bootstrap() {, +        return bootstrap;, +    }, +, +    /**, +     * Returns the {@link ChannelPoolHandler} that will be notified for the different pool actions., +     *, +     * @return the {@link ChannelPoolHandler} that will be notified for the different pool actions, +     */, +    protected ChannelPoolHandler handler() {, +        return handler;, +    }, +, +    /**, +     * Returns the {@link ChannelHealthChecker} that will be used to check if a {@link Channel} is healthy., +     *, +     * @return the {@link ChannelHealthChecker} that will be used to check if a {@link Channel} is healthy, +     */, +    protected ChannelHealthChecker healthChecker() {, +        return healthCheck;, +    }, +, +    /**, +     * Indicates whether this pool will check the health of channels before offering them back into the pool., +     *, +     * @return {@code true} if this pool will check the health of channels before offering them back into the pool, or, +     * {@code false} if channel health is only checked at acquisition time, +     */, +    protected boolean releaseHealthCheck() {, +        return releaseHealthCheck;, +    }, +, +++ b/transport/src/test/java/io/netty/channel/pool/SimpleChannelPoolTest.java, +import static org.junit.Assert.*;, +, +    @Test, +    public void testBootstrap() {, +        final SimpleChannelPool pool = new SimpleChannelPool(new Bootstrap(), new CountingChannelPoolHandler());, +, +        try {, +            // Checking for the actual bootstrap object doesn't make sense here, since the pool uses a copy with a, +            // modified channel handler., +            assertNotNull(pool.bootstrap());, +        } finally {, +            pool.close();, +        }, +    }, +, +    @Test, +    public void testHandler() {, +        final ChannelPoolHandler handler = new CountingChannelPoolHandler();, +        final SimpleChannelPool pool = new SimpleChannelPool(new Bootstrap(), handler);]