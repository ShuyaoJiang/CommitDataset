[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +        return SocketTestPermutation.INSTANCE.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +        return SocketTestPermutation.INSTANCE.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +        return SocketTestPermutation.INSTANCE.serverSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +        return SocketTestPermutation.INSTANCE.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +        return SocketTestPermutation.INSTANCE.serverSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +        return SocketTestPermutation.INSTANCE.socket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +        return SocketTestPermutation.INSTANCE.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +        return SocketTestPermutation.INSTANCE.serverSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +        return SocketTestPermutation.INSTANCE.socket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +import io.netty.bootstrap.AbstractBootstrap;, +import java.util.Arrays;, +public class SocketTestPermutation {, +    static final SocketTestPermutation INSTANCE = new SocketTestPermutation();, +, +    protected static final int BOSSES = 2;, +    protected static final int WORKERS = 3;, +, +    protected final EventLoopGroup nioBossGroup =, +    protected final EventLoopGroup nioWorkerGroup =, +    protected final EventLoopGroup oioBossGroup =, +    protected final EventLoopGroup oioWorkerGroup =, +    protected <A extends AbstractBootstrap<?, ?>, B extends AbstractBootstrap<?, ?>>, +    List<BootstrapComboFactory<A, B>> combo(List<BootstrapFactory<A>> sbfs, List<BootstrapFactory<B>> cbfs) {, +        List<BootstrapComboFactory<A, B>> list = new ArrayList<BootstrapComboFactory<A, B>>();, +, +        // Populate the combinations, +        for (BootstrapFactory<A> sbf: sbfs) {, +            for (BootstrapFactory<B> cbf: cbfs) {, +                final BootstrapFactory<A> sbf0 = sbf;, +                final BootstrapFactory<B> cbf0 = cbf;, +                list.add(new BootstrapComboFactory<A, B>() {, +                    @Override, +                    public A newServerInstance() {, +                        return sbf0.newInstance();, +                    }, +, +                    @Override, +                    public B newClientInstance() {, +                        return cbf0.newInstance();, +                    }, +                });, +            }, +        }, +, +        return list;, +    }, +, +    public List<BootstrapComboFactory<ServerBootstrap, Bootstrap>> socket() {, +        List<BootstrapComboFactory<ServerBootstrap, Bootstrap>> list = combo(sbfs, cbfs);, +    public List<BootstrapComboFactory<Bootstrap, Bootstrap>> datagram() {, +        List<BootstrapFactory<Bootstrap>> bfs = Arrays.asList(, +                new BootstrapFactory<Bootstrap>() {, +                },, +                new BootstrapFactory<Bootstrap>() {, +                }, +        );, +        // Populare the combinations., +        return combo(bfs, bfs);, +    public List<BootstrapFactory<ServerBootstrap>> serverSocket() {, +        return Arrays.asList(, +                new BootstrapFactory<ServerBootstrap>() {, +                },, +                new BootstrapFactory<ServerBootstrap>() {, +                }, +        );, +    public List<BootstrapFactory<Bootstrap>> clientSocket() {, +        return Arrays.asList(, +                new BootstrapFactory<Bootstrap>() {, +                },, +                new BootstrapFactory<Bootstrap>() {, +        );, +    }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractClientSocketTest.java, +        return SocketTestPermutation.INSTANCE.clientSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +        return SocketTestPermutation.INSTANCE.datagram();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +        return SocketTestPermutation.INSTANCE.serverSocket();, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +        return SocketTestPermutation.INSTANCE.socket();]