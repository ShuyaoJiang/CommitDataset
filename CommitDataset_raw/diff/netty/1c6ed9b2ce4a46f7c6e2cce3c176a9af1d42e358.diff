[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +/**, + * Skeltal {@link ByteBufAllocator} implementation to extend., + */, +    /**, +     * Instance use heap buffers by default, +     */, +    /**, +     * Create new instance, +     *, +     * @param directByDefault   {@code true} if direct buffers should be used by default., +     */, +    /**, +     * Create a heap {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +, +    /**, +     * Create a direct {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +/**, + * Skeltal {@link ByteBufAllocator} implementation to extend., + */, +    /**, +     * Instance use heap buffers by default, +     */, +    /**, +     * Create new instance, +     *, +     * @param directByDefault   {@code true} if direct buffers should be used by default., +     */, +    /**, +     * Create a heap {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +, +    /**, +     * Create a direct {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +/**, + * Abstract base class for {@link ByteBuf} implementations that wrap another, + * {@link ByteBuf}., + */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +/**, + * Skeltal {@link ByteBufAllocator} implementation to extend., + */, +    /**, +     * Instance use heap buffers by default, +     */, +    /**, +     * Create new instance, +     *, +     * @param directByDefault   {@code true} if direct buffers should be used by default., +     */, +    /**, +     * Create a heap {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +, +    /**, +     * Create a direct {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +/**, + * Abstract base class for {@link ByteBuf} implementations that wrap another, + * {@link ByteBuf}., + */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractMessageBuf.java, +/**, + * Abstract base class for {@link MessageBuf} implementations., + * @param <T>, + */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +/**, + * Skeltal {@link ByteBufAllocator} implementation to extend., + */, +    /**, +     * Instance use heap buffers by default, +     */, +    /**, +     * Create new instance, +     *, +     * @param directByDefault   {@code true} if direct buffers should be used by default., +     */, +    /**, +     * Create a heap {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +, +    /**, +     * Create a direct {@link ByteBuf} with the given initialCapacity and maxCapacity., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractDerivedByteBuf.java, +/**, + * Abstract base class for {@link ByteBuf} implementations that wrap another, + * {@link ByteBuf}., + */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractMessageBuf.java, +/**, + * Abstract base class for {@link MessageBuf} implementations., + * @param <T>]