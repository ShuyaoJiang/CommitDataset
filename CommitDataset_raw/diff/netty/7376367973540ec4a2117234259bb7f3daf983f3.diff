[+++ b/src/main/java/org/jboss/netty/handler/traffic/TrafficCounterFactory.java, +    private long channelWriteLimit = 0;, +    private long channelReadLimit = 0;, +    private long globalWriteLimit = 0;, +    private long globalReadLimit = 0;, +     * @param newChannelWriteLimit, +     * @param newChannelReadLimit, +     * @param newGlobalWriteLimit, +     * @param newGlobalReadLimit, +            boolean newChannelActive, long newChannelWriteLimit,, +            long newChannelReadLimit, long newChannelDelay,, +            boolean newGlobalActive, long newGlobalWriteLimit,, +            long newGlobalReadLimit, long newGlobalDelay) {, +        executorService = newexecutorService;, +        channelActive = newChannelActive;, +        channelWriteLimit = newChannelWriteLimit;, +        channelReadLimit = newChannelReadLimit;, +        channelDelay = newChannelDelay;, +        globalActive = newGlobalActive;, +        globalWriteLimit = newGlobalWriteLimit;, +        globalReadLimit = newGlobalReadLimit;, +        globalDelay = newGlobalDelay;, +     * @param channelWriteLimit, +     * @param channelReadLimit, +     * @param globalWriteLimit, +     * @param globalReadLimit, +            boolean channelActive, long channelWriteLimit,, +            long channelReadLimit, long channelDelay, boolean globalActive,, +            long globalWriteLimit, long globalReadLimit, long globalDelay) {, +        init(executorService, channelActive, channelWriteLimit,, +                channelReadLimit, channelDelay, globalActive, globalWriteLimit,, +                globalReadLimit, globalDelay);, +     * @param channelWriteLimit, +     * @param channelReadLimit, +     * @param globalWriteLimit, +     * @param globalReadLimit, +            boolean channelActive, long channelWriteLimit,, +            long channelReadLimit, boolean globalActive, long globalWriteLimit,, +            long globalReadLimit) {, +        init(executorService, channelActive, channelWriteLimit,, +                channelReadLimit, DEFAULT_DELAY, globalActive,, +                globalWriteLimit, globalReadLimit, DEFAULT_DELAY);, +     * @param globalWriteLimit, +     * @param globalReadLimit, +            boolean channelActive, boolean globalActive, long globalWriteLimit,, +            long globalReadLimit, long globalDelay) {, +                DEFAULT_DELAY, globalActive, globalWriteLimit, globalReadLimit,, +     * @param globalWriteLimit, +     * @param globalReadLimit, +            boolean channelActive, boolean globalActive, long globalWriteLimit,, +            long globalReadLimit) {, +                DEFAULT_DELAY, globalActive, globalWriteLimit, globalReadLimit,, +        channelActive = active;, +        if (globalActive) {, +        globalActive = active;, +     * @param newchannelWriteLimit, +     * @param newchannelReadLimit, +     * @param newglobalWriteLimit, +     * @param newglobalReadLimit, +    public void configure(long newchannelWriteLimit,, +            long newchannelReadLimit, long newchanneldelay,, +            long newglobalWriteLimit, long newglobalReadLimit,, +        channelWriteLimit = newchannelWriteLimit;, +        channelReadLimit = newchannelReadLimit;, +        channelDelay = newchanneldelay;, +        globalWriteLimit = newglobalWriteLimit;, +        globalReadLimit = newglobalReadLimit;, +        globalDelay = newglobaldelay;, +        if (globalTrafficMonitor != null) {, +            globalTrafficMonitor.configure(null,, +                    newglobalWriteLimit, newglobalReadLimit, newglobaldelay);, +        if (globalActive) {, +            if (globalTrafficMonitor == null) {, +                globalTrafficMonitor = new TrafficCounter(this,, +                        executorService, null, "GlobalPC",, +                        globalWriteLimit, globalReadLimit,, +                        globalDelay);, +                globalTrafficMonitor.start();, +        return globalTrafficMonitor;, +        if (channelActive && (channelReadLimit > 0 || channelWriteLimit > 0, +                || channelDelay > 0)) {, +            return new TrafficCounter(this, executorService, channel,, +                    "ChannelPC" + channel.getId(), channelWriteLimit,, +                    channelReadLimit, channelDelay);, +        if (globalTrafficMonitor != null) {, +            globalTrafficMonitor.stop();, +            globalTrafficMonitor = null;, +        return channelDelay;, +     * @return the channelReadLimit, +    public long getChannelReadLimit() {, +        return channelReadLimit;, +     * @param channelReadLimit, +     *            the channelReadLimit to set, +    public void setChannelReadLimit(long channelReadLimit) {, +        this.channelReadLimit = channelReadLimit;, +     * @return the channelWriteLimit, +    public long getChannelWriteLimit() {, +        return channelWriteLimit;, +     * @param channelWriteLimit, +     *            the channelWriteLimit to set]