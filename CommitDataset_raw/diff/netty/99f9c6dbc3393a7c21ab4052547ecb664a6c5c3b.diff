[+++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +++ b/microbench/src/test/java/io/netty/microbench/util/AbstractMicrobenchmark.java, +import org.openjdk.jmh.annotations.Fork;, +import org.openjdk.jmh.annotations.Measurement;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.State;, +import org.openjdk.jmh.annotations.Warmup;, +@Warmup(iterations = AbstractMicrobenchmark.DEFAULT_WARMUP_ITERATIONS), +@Measurement(iterations = AbstractMicrobenchmark.DEFAULT_MEASURE_ITERATIONS), +@Fork(AbstractMicrobenchmark.DEFAULT_FORKS), +@State(Scope.Thread), +    protected static final int DEFAULT_WARMUP_ITERATIONS = 10;, +    protected static final int DEFAULT_MEASURE_ITERATIONS = 1;, +    protected static final int DEFAULT_FORKS = 2;, +            .jvmArgs(JVM_ARGS);, +, +        if (getWarmupIterations() > 0) {, +            runnerOptions.warmupIterations(getWarmupIterations());, +        }, +, +        if (getMeasureIterations() > 0) {, +            runnerOptions.measurementIterations(getMeasureIterations());, +        }, +, +        if (getForks() > 0) {, +            runnerOptions.forks(getForks());, +        }, +        return Integer.parseInt(System.getProperty("warmupIterations", "-1"));, +        return Integer.parseInt(System.getProperty("measureIterations", "-1"));, +        return Integer.parseInt(System.getProperty("forks", "-1"));]