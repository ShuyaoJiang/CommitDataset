[+++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *         channel.pipeline().addLast("idleStateHandler", new {@link IdleStateHandler}(60, 30, 0);, + *         channel.pipeline().addLast("myHandler", new MyHandler());, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *         channel.pipeline().addLast("idleStateHandler", new {@link IdleStateHandler}(60, 30, 0);, + *         channel.pipeline().addLast("myHandler", new MyHandler());, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *         channel.pipeline().addLast("idleStateHandler", new {@link IdleStateHandler}(60, 30, 0);, + *         channel.pipeline().addLast("myHandler", new MyHandler());, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *         channel.pipeline().addLast("idleStateHandler", new {@link IdleStateHandler}(60, 30, 0);, + *         channel.pipeline().addLast("myHandler", new MyHandler());, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, +++ b/handler/src/main/java/io/netty/handler/timeout/WriteTimeoutHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, +++ b/transport/src/main/java/io/netty/channel/ChannelHandler.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.MessageBuf;, +import io.netty.util.Attribute;, +import io.netty.util.AttributeKey;, + * Handles or intercepts a {@link ChannelInboundInvoker} or {@link ChannelOutboundInvoker} operation, and forwards it, + * to the next handler in a {@link ChannelPipeline}., + * {@link ChannelHandler} itself does not provide many methods.  To handle a, + * a {@link ChannelInboundInvoker} or {@link ChannelOutboundInvoker} operation, + * you need to implement its sub-interfaces.  There are many different sub-interfaces, + * which handles inbound and outbound operations., + *, + * But the most useful for developers may be:, + * <li>{@link ChannelInboundByteHandlerAdapter} handles and intercepts inbound operations where the inbound message, + * type is a {@link ByteBuf}.</li>, + * <li>{@link ChannelInboundMessageHandlerAdapter} handles and intercepts inbound operations where the inbound message, + * type is a {@link MessageBuf}.</li>, + *  * <li>{@link ChannelOutboundByteHandlerAdapter} handles and intercepts outbound operations where the inbound message, + * type is a {@link ByteBuf}.</li>, + * <li>{@link ChannelOutboundMessageHandlerAdapter} handles and intercepts outbound operations where the inbound message, + * type is a {@link MessageBuf}.</li>, + * public interface Message {, + *     // your methods here, + * }, + *, + * public class DataServerHandler extends {@link ChannelInboundMessageHandlerAdapter}&ltMessage&gt {, + *     public void messageReceived({@link ChannelHandlerContext} ctx, Message message) {, + *         if (message instanceof LoginMessage) {, + *             authenticate((LoginMessage) message);, + *         } else (message instanceof GetDataMessage) {, + *                 ch.write(fetchSecret((GetDataMessage) message));, + * // See {@link ChannelInitializer#initChannel(Channel)}., + * public class DataServerInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *     public void initChannel({@link Channel} channel) {, + *         channel.pipeline().addLast("handler", <b>new DataServerHandler()</b>);, + *, + * public interface Message {, + *     // your methods here, + * }, + *, + * public class DataServerHandler extends {@link ChannelInboundMessageHandlerAdapter}&ltMessage&gt {, + *   private final {@link AttributeKey}&lt{@link Boolean}&gt auth =, + *           new {@link AttributeKey}&lt{@link Boolean}&gt("auth");, + *, + *   // This handler will receive a sequence of increasing integers starting, + *   // from 1., + *   {@code @Override}, + *   public void messageReceived({@link ChannelHandlerContext} ctx, {@link Integer} integer) {, + *     {@link Attribute}&lt{@link Boolean}&gt attr = ctx.getAttr(auth);, + *     public void messageReceived({@link ChannelHandlerContext} ctx, Message message) {, + *         {@link Channel} ch = ctx.channel();, + *         if (message instanceof LoginMessage) {, + *             <b>attr.set(true)</b>;, + *         } else (message instanceof GetDataMessage) {, + *             if (<b>Boolean.TRUE.equals(attr.get())</b>) {, + * public class DataServerInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     public void initChannel({@link Channel} channel) {, + *         channel.pipeline().addLast("handler", <b>SHARED</b>);, + *, + * In the examples above which used an attachment,, + * Please refer to the {@link ChannelHandler}, and, + * {@link ChannelPipeline} to find out more about inbound and outbound operations,, + * what fundamental differences they have, how they flow in a  pipeline,  and how to handle, + * the operation in your application., +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, + * public class MyChannelInitializer extends {@link ChannelInitializer}&lt{@link Channel}&gt {, + *     {@code @Override}, + *         channel.pipeline().addLast("idleStateHandler", new {@link IdleStateHandler}(60, 30, 0);, + *         channel.pipeline().addLast("myHandler", new MyHandler());]