[+++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +, +                OpenSslSessionContext context = sessionContext();, +                if (context != null) {, +                    context.destroy();, +                }, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +, +                OpenSslSessionContext context = sessionContext();, +                if (context != null) {, +                    context.destroy();, +                }, +++ b/handler/src/test/java/io/netty/handler/ssl/SslContextBuilderTest.java, +import javax.net.ssl.SSLException;, +import java.util.Collections;, +    @Test(expected = IllegalArgumentException.class), +    public void testInvalidCipherJdk() throws Exception {, +        Assume.assumeTrue(OpenSsl.isAvailable());, +        testInvalidCipher(SslProvider.JDK);, +    }, +, +    @Test(expected = SSLException.class), +    public void testInvalidCipherOpenSSL() throws Exception {, +        Assume.assumeTrue(OpenSsl.isAvailable());, +        testInvalidCipher(SslProvider.OPENSSL);, +    }, +, +    private static void testInvalidCipher(SslProvider provider) throws Exception {, +        SelfSignedCertificate cert = new SelfSignedCertificate();, +        SslContextBuilder builder = SslContextBuilder.forClient(), +                .sslProvider(provider), +                .ciphers(Collections.singleton("SOME_INVALID_CIPHER")), +                .keyManager(cert.certificate(),, +                        cert.privateKey()), +                .trustManager(cert.certificate());, +        SslContext context = builder.build();, +        context.newEngine(UnpooledByteBufAllocator.DEFAULT);, +    }, +]