[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHttpDecoder.java, +    private final Map<Integer, FullHttpMessage> messageMap;, +        this(version, maxContentLength, new HashMap<Integer, FullHttpMessage>());, +    }, +, +    /**, +     * Creates a new instance with the specified parameters., +     *, +     * @param version the protocol version, +     * @param maxContentLength the maximum length of the message content., +     *        If the length of the message content exceeds this value,, +     *        a {@link TooLongFrameException} will be raised., +     * @param messageMap the {@link Map} used to hold partially received messages., +     */, +    protected SpdyHttpDecoder(int version, int maxContentLength, Map<Integer, FullHttpMessage> messageMap) {, +        this.messageMap = messageMap;, +    }, +, +    protected FullHttpMessage putMessage(int streamId, FullHttpMessage message) {, +        return messageMap.put(streamId, message);, +    }, +, +    protected FullHttpMessage getMessage(int streamId) {, +        return messageMap.get(streamId);, +    }, +, +    protected FullHttpMessage removeMessage(int streamId) {, +        return messageMap.remove(streamId);, +            int streamId = spdySynStreamFrame.getStreamId();, +            if (SpdyCodecUtil.isServerId(streamId)) {, +                        new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.INVALID_STREAM);, +                        new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.PROTOCOL_ERROR);, +                    SpdyHttpHeaders.setStreamId(httpResponseWithEntity, streamId);, +                        putMessage(streamId, httpResponseWithEntity);, +                        new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.PROTOCOL_ERROR);, +                    SpdyHttpHeaders.setStreamId(httpRequestWithEntity, streamId);, +                        putMessage(streamId, httpRequestWithEntity);, +                    SpdySynReplyFrame spdySynReplyFrame = new DefaultSpdySynReplyFrame(streamId);, +            int streamId = spdySynReplyFrame.getStreamId();, +                SpdyHttpHeaders.setStreamId(httpResponseWithEntity, streamId);, +                    putMessage(streamId, httpResponseWithEntity);, +                    new DefaultSpdyRstStreamFrame(streamId, SpdyStreamStatus.PROTOCOL_ERROR);, +            int streamId = spdyHeadersFrame.getStreamId();, +            FullHttpMessage fullHttpMessage = getMessage(streamId);, +            if (fullHttpMessage == null) {, +                fullHttpMessage.headers().add(e.getKey(), e.getValue());, +            }, +, +            if (spdyHeadersFrame.isLast()) {, +                HttpHeaders.setContentLength(fullHttpMessage, fullHttpMessage.content().readableBytes());, +                removeMessage(streamId);, +                out.add(fullHttpMessage);, +            int streamId = spdyDataFrame.getStreamId();, +            FullHttpMessage fullHttpMessage = getMessage(streamId);, +                removeMessage(streamId);, +                removeMessage(streamId);, +            int streamId = spdyRstStreamFrame.getStreamId();, +            removeMessage(streamId);]