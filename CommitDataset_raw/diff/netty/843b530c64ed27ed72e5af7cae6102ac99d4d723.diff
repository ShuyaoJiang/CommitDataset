[+++ b/src/main/java/org/jboss/netty/channel/ChannelFutureListener.java, + * in the handler method can cause an unexpected pause during I/O.  If you need, + * to perform a blocking operation on I/O completion, try to execute the, + * operation in a different thread using a thread pool., +++ b/src/main/java/org/jboss/netty/channel/ChannelFutureListener.java, + * in the handler method can cause an unexpected pause during I/O.  If you need, + * to perform a blocking operation on I/O completion, try to execute the, + * operation in a different thread using a thread pool., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * object.  A {@link ChannelHandler} is supposed to interact with the, + * {@link ChannelPipeline} it belongs to via a context object.  Using the, + * or the previous handler or modify the behavior of the pipeline, or store the, + * information (attachment) which is specific to the handler., + * Please refer to the {@link ChannelEvent} and {@link ChannelPipeline} to find, + * out what a upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelFutureListener.java, + * in the handler method can cause an unexpected pause during I/O.  If you need, + * to perform a blocking operation on I/O completion, try to execute the, + * operation in a different thread using a thread pool., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * object.  A {@link ChannelHandler} is supposed to interact with the, + * {@link ChannelPipeline} it belongs to via a context object.  Using the, + * or the previous handler or modify the behavior of the pipeline, or store the, + * information (attachment) which is specific to the handler., + * Please refer to the {@link ChannelEvent} and {@link ChannelPipeline} to find, + * out what a upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * Provides the properties and operations which are specific to a, + * {@link ChannelHandler} in a pipeline, modify the behavior of the pipeline,, + * or store the information (attachment) which is specific to the handler., + *         <b>n</b> = the number of the handler entries in a pipeline, + *, + * +---------+        +----------+        +----+----+        +----+----+, + *                                             | 1..1             |, + *                                       +-----+------+           |, + *                                       | Attachment |<----------+, + *                                       +------------+    stores, + * the single instance can be invoked with different, + * {@link ChannelHandlerContext}s if it is added to one or more, + * {@link ChannelPipeline}s more than once., + * <p>, + * For example, the following handler will have as many independent attachments, + * as how many times it is added to pipelines, regardless if it is added to the, + * same pipeline multiple times or added to different pipelines multiple times:, + * <h3>Additional resources worth reading</h3>, + * <p>, + * Please refer to the {@link ChannelHandler}, {@link ChannelEvent}, and, + * {@link ChannelPipeline} to find out what a upstream event and a downstream, + * event are, what fundamental differences they have, and how they flow in a, + * pipeline., + *, +    /**, +     * Retrieves an object which is {@link #setAttachment(Object) attached} to, +     * this context., +     *, +     * @return {@code null} if no object was attached or, +     *                      {@code null} was attached, +     */, +, +    /**, +     * Attaches an object to this context to store a stateful information, +     * specific to the {@link ChannelHandler} which is associated with this, +     * context., +     */, +++ b/src/main/java/org/jboss/netty/channel/ChannelFutureListener.java, + * in the handler method can cause an unexpected pause during I/O.  If you need, + * to perform a blocking operation on I/O completion, try to execute the, + * operation in a different thread using a thread pool., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandler.java, + * object.  A {@link ChannelHandler} is supposed to interact with the, + * {@link ChannelPipeline} it belongs to via a context object.  Using the, + * or the previous handler or modify the behavior of the pipeline, or store the, + * information (attachment) which is specific to the handler., + * Please refer to the {@link ChannelEvent} and {@link ChannelPipeline} to find, + * out what a upstream event and a downstream event are, what fundamental, + * differences they have, and how they flow in a pipeline., +++ b/src/main/java/org/jboss/netty/channel/ChannelHandlerContext.java, + * Provides the properties and operations which are specific to a, + * {@link ChannelHandler} in a pipeline, modify the behavior of the pipeline,, + * or store the information (attachment) which is specific to the handler., + *         <b>n</b> = the number of the handler entries in a pipeline, + *, + * +---------+        +----------+        +----+----+        +----+----+, + *                                             | 1..1             |, + *                                       +-----+------+           |, + *                                       | Attachment |<----------+, + *                                       +------------+    stores, + * the single instance can be invoked with different, + * {@link ChannelHandlerContext}s if it is added to one or more, + * {@link ChannelPipeline}s more than once., + * <p>, + * For example, the following handler will have as many independent attachments, + * as how many times it is added to pipelines, regardless if it is added to the, + * same pipeline multiple times or added to different pipelines multiple times:, + * <h3>Additional resources worth reading</h3>, + * <p>, + * Please refer to the {@link ChannelHandler}, {@link ChannelEvent}, and, + * {@link ChannelPipeline} to find out what a upstream event and a downstream]