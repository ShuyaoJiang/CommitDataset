[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void Java_io_netty_channel_epoll_Native_setTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void Java_io_netty_channel_epoll_Native_setTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT = valueOf(T, "TCP_USER_TIMEOUT");, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void Java_io_netty_channel_epoll_Native_setTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT = valueOf(T, "TCP_USER_TIMEOUT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannelConfig.java, +        if (option == EpollChannelOption.TCP_USER_TIMEOUT) {, +            return (T) Integer.valueOf(getTcpUserTimeout());, +        }, +        } else if (option == EpollChannelOption.TCP_USER_TIMEOUT) {, +            setTcpUserTimeout((Integer) value);, +    /**, +     * Get the {@code TCP_USER_TIMEOUT} option on the socket. See {@code man 7 tcp} for more details., +     */, +    public int getTcpUserTimeout() {, +        return Native.getTcpUserTimeout(channel.fd().intValue());, +    }, +, +    /**, +     * Set the {@code TCP_USER_TIMEOUT} option on the socket. See {@code man 7 tcp} for more details., +     */, +    public EpollSocketChannelConfig setTcpUserTimeout(int milliseconds) {, +        Native.setTcpUserTimeout(channel.fd().intValue(), milliseconds);, +        return this;, +    }, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void Java_io_netty_channel_epoll_Native_setTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_getTcpUserTimeout(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, TCP_USER_TIMEOUT, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Integer> TCP_USER_TIMEOUT = valueOf(T, "TCP_USER_TIMEOUT");, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannelConfig.java, +        if (option == EpollChannelOption.TCP_USER_TIMEOUT) {, +            return (T) Integer.valueOf(getTcpUserTimeout());, +        }, +        } else if (option == EpollChannelOption.TCP_USER_TIMEOUT) {, +            setTcpUserTimeout((Integer) value);, +    /**, +     * Get the {@code TCP_USER_TIMEOUT} option on the socket. See {@code man 7 tcp} for more details., +     */, +    public int getTcpUserTimeout() {, +        return Native.getTcpUserTimeout(channel.fd().intValue());, +    }, +, +    /**, +     * Set the {@code TCP_USER_TIMEOUT} option on the socket. See {@code man 7 tcp} for more details., +     */, +    public EpollSocketChannelConfig setTcpUserTimeout(int milliseconds) {, +        Native.setTcpUserTimeout(channel.fd().intValue(), milliseconds);, +        return this;, +    }, +]