[+++ b/transport-native-kqueue/src/main/c/netty_kqueue_eventarray.c, +static void netty_kqueue_eventarray_evSet(JNIEnv* env, jclass clzz, jlong keventAddress, jint ident, jshort filter, jshort flags, jint fflags) {, +    EV_SET((struct kevent*) keventAddress, ident, filter, flags, fflags, 0, NULL);, +  { "evSet", "(JISSI)V", (void *) netty_kqueue_eventarray_evSet }, +            fixed_method_table,, +            fixed_method_table_size) != 0) {, +++ b/transport-native-kqueue/src/main/c/netty_kqueue_eventarray.c, +static void netty_kqueue_eventarray_evSet(JNIEnv* env, jclass clzz, jlong keventAddress, jint ident, jshort filter, jshort flags, jint fflags) {, +    EV_SET((struct kevent*) keventAddress, ident, filter, flags, fflags, 0, NULL);, +  { "evSet", "(JISSI)V", (void *) netty_kqueue_eventarray_evSet }, +            fixed_method_table,, +            fixed_method_table_size) != 0) {, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java, +, +        ((KQueueEventLoop) eventLoop()).add(this);, +, +++ b/transport-native-kqueue/src/main/c/netty_kqueue_eventarray.c, +static void netty_kqueue_eventarray_evSet(JNIEnv* env, jclass clzz, jlong keventAddress, jint ident, jshort filter, jshort flags, jint fflags) {, +    EV_SET((struct kevent*) keventAddress, ident, filter, flags, fflags, 0, NULL);, +  { "evSet", "(JISSI)V", (void *) netty_kqueue_eventarray_evSet }, +            fixed_method_table,, +            fixed_method_table_size) != 0) {, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java, +, +        ((KQueueEventLoop) eventLoop()).add(this);, +, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueEventArray.java, +        evSet(getKEventOffset(size++) + memoryAddress, ch.socket.intValue(), filter, flags, fflags);, +    private static native void evSet(long keventAddress, int ident, short filter, short flags, int fflags);, +++ b/transport-native-kqueue/src/main/c/netty_kqueue_eventarray.c, +static void netty_kqueue_eventarray_evSet(JNIEnv* env, jclass clzz, jlong keventAddress, jint ident, jshort filter, jshort flags, jint fflags) {, +    EV_SET((struct kevent*) keventAddress, ident, filter, flags, fflags, 0, NULL);, +  { "evSet", "(JISSI)V", (void *) netty_kqueue_eventarray_evSet }, +            fixed_method_table,, +            fixed_method_table_size) != 0) {, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/AbstractKQueueChannel.java, +, +        ((KQueueEventLoop) eventLoop()).add(this);, +, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueEventArray.java, +        evSet(getKEventOffset(size++) + memoryAddress, ch.socket.intValue(), filter, flags, fflags);, +    private static native void evSet(long keventAddress, int ident, short filter, short flags, int fflags);, +++ b/transport-native-kqueue/src/main/java/io/netty/channel/kqueue/KQueueEventLoop.java, +import io.netty.util.collection.IntObjectHashMap;, +import io.netty.util.collection.IntObjectMap;, +    private final IntObjectMap<AbstractKQueueChannel> channels = new IntObjectHashMap<AbstractKQueueChannel>(4096);, +    void add(AbstractKQueueChannel ch) {, +        assert inEventLoop();, +        channels.put(ch.fd().intValue(), ch);, +    }, +, +    void remove(AbstractKQueueChannel ch) {, +        channels.remove(ch.fd().intValue());, +            final int fd = eventList.fd(i);, +                        (filter == Native.EVFILT_USER && fd == KQUEUE_WAKE_UP_IDENT);, +            AbstractKQueueChannel channel = channels.get(fd);]