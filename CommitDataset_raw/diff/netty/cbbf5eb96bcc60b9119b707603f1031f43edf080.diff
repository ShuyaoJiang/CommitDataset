[+++ b/pom.xml, +        <scope>test</scope>, +      </dependency>, +, +      <!-- Test dependency for generating a compressed heap dump file -->, +      <dependency>, +        <groupId>org.tukaani</groupId>, +        <artifactId>xz</artifactId>, +        <version>1.5</version>, +++ b/pom.xml, +        <scope>test</scope>, +      </dependency>, +, +      <!-- Test dependency for generating a compressed heap dump file -->, +      <dependency>, +        <groupId>org.tukaani</groupId>, +        <artifactId>xz</artifactId>, +        <version>1.5</version>, +++ b/testsuite/pom.xml, +, +    <dependency>, +      <groupId>org.tukaani</groupId>, +      <artifactId>xz</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/pom.xml, +        <scope>test</scope>, +      </dependency>, +, +      <!-- Test dependency for generating a compressed heap dump file -->, +      <dependency>, +        <groupId>org.tukaani</groupId>, +        <artifactId>xz</artifactId>, +        <version>1.5</version>, +++ b/testsuite/pom.xml, +, +    <dependency>, +      <groupId>org.tukaani</groupId>, +      <artifactId>xz</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/testsuite/src/test/java/io/netty/testsuite/util/TestUtils.java, +import org.tukaani.xz.LZMA2Options;, +import org.tukaani.xz.XZOutputStream;, +import java.io.FileInputStream;, +import java.io.InputStream;, +            return;, +        }, +, +        final String xzFilename = filename + ".xz";, +        logger.info("Compressing the heap dump: {}", xzFilename);, +        final byte[] buf = new byte[65536];, +        InputStream in = null;, +        OutputStream out = null;, +        try {, +            in = new FileInputStream(filename);, +            out = new XZOutputStream(new FileOutputStream(xzFilename), new LZMA2Options(9));, +            for (;;) {, +                int readBytes = in.read(buf);, +                if (readBytes < 0) {, +                    break;, +                }, +                if (readBytes == 0) {, +                    continue;, +                }, +                out.write(buf, 0, readBytes);, +            }, +            out.close();, +            in.close();, +        } catch (Exception e) {, +            logger.warn("Failed to compress the heap dump: {}", xzFilename, e);, +        } finally {, +            if (in != null) {, +                try {, +                    in.close();, +                } catch (IOException ignored) {, +                    // Ignore., +                }, +            }, +            if (out != null) {, +                try {, +                    out.close();, +                } catch (IOException ignored) {, +                    // Ignore., +                }, +            }, +        }, +, +        // Delete the uncompressed dump in favor of the compressed one., +        if (!file.delete()) {, +            logger.warn("Failed to delete the uncompressed heap dump: {}", filename);]