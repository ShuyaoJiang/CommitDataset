[+++ b/transport-native-epoll/src/main/c/exception_helper.h, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +void throwRuntimeException(JNIEnv* env, char* message);, +void throwRuntimeExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +void throwIOException(JNIEnv* env, char* message);, +void throwIOExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +void throwClosedChannelException(JNIEnv* env);, +void throwOutOfMemoryError(JNIEnv* env);, +char* exceptionMessage(char* msg, int error);, +++ b/transport-native-epoll/src/main/c/exception_helper.h, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +void throwRuntimeException(JNIEnv* env, char* message);, +void throwRuntimeExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +void throwIOException(JNIEnv* env, char* message);, +void throwIOExceptionErrorNo(JNIEnv* env, char* message, int errorNumber);, +void throwClosedChannelException(JNIEnv* env);, +void throwOutOfMemoryError(JNIEnv* env);, +char* exceptionMessage(char* msg, int error);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include "exception_helper.h", +void throwRuntimeException(JNIEnv* env, char* message) {, +void throwRuntimeExceptionErrorNo(JNIEnv* env, char* message, int errorNumber) {, +    char* allocatedMessage = exceptionMessage(message, errorNumber);, +    (*env)->ThrowNew(env, runtimeExceptionClass, allocatedMessage);, +    free(allocatedMessage);, +}, +, +void throwIOException(JNIEnv* env, char* message) {, +void throwIOExceptionErrorNo(JNIEnv* env, char* message, int errorNumber) {, +    char* allocatedMessage = exceptionMessage(message, errorNumber);, +    (*env)->ThrowNew(env, ioExceptionClass, allocatedMessage);, +    free(allocatedMessage);, +}, +, +void throwClosedChannelException(JNIEnv* env) {, +void throwOutOfMemoryError(JNIEnv* env) {, +/** Notice: every usage of exceptionMessage needs to release the allocated memory for the sequence of char */, +char* exceptionMessage(char* msg, int error) {, +    if (error < 0) {, +        // some functions return negative values, +        // and it's hard to keep track of when to send -error and when not, +        // this will just take care when things are forgotten, +        // what would generate a proper error, +        error = error * -1;, +    }, +    //strerror is returning a constant, so no need to free anything coming from strerror, +    throwRuntimeExceptionErrorNo(env, "getsockopt() failed: ", err);, +        throwRuntimeExceptionErrorNo(env, "setsockopt() failed: ", err);, +        throwRuntimeExceptionErrorNo(env, "eventfd() failed: ", err);, +        throwRuntimeExceptionErrorNo(env, "eventfd_write() failed: ", err);, +            throwRuntimeExceptionErrorNo(env, "epoll_create1() failed: ", err);, +            throwRuntimeExceptionErrorNo(env, "epoll_create() failed: ", err);, +            throwRuntimeExceptionErrorNo(env, "fcntl() failed: ", err);, +        throwIOExceptionErrorNo(env, "recvfrom() failed: ", err);, +    throwRuntimeExceptionErrorNo(env, "uname() failed: ", err);]