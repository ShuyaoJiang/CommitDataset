[+++ b/common/src/test/java/io/netty/util/HashedWheelTimerTest.java, +    @Test(timeout = 3000), +        final CountDownLatch latch = new CountDownLatch(3);, +            timerProcessed.newTimeout(new TimerTask() {, +                @Override, +                public void run(final Timeout timeout) throws Exception {, +                    latch.countDown();, +            }, 1, TimeUnit.MILLISECONDS);, +        }, +, +        latch.await();, +    @Test(timeout = 3000), +        final CountDownLatch latch = new CountDownLatch(3);, +                    latch.countDown();, +        latch.await();, +            timer.newTimeout(createNoOpTimerTask(), 1, TimeUnit.MILLISECONDS);, +            fail("Expected exception didn't occur.");, +        } catch (IllegalStateException ignored) {, +            // expected, +    @Test(timeout = 5000), +        final CountDownLatch latch = new CountDownLatch(3);, +                timer.newTimeout(this, 100, TimeUnit.MILLISECONDS);, +                latch.countDown();, +        }, 100, TimeUnit.MILLISECONDS);, +, +        latch.await();, +        assertFalse(timer.stop().isEmpty());, +        timer.newTimeout(createNoOpTimerTask(), 5, TimeUnit.SECONDS);, +        timer.newTimeout(createNoOpTimerTask(), 5, TimeUnit.SECONDS);, +            timer.newTimeout(createNoOpTimerTask(), 1, TimeUnit.MILLISECONDS);, +        final int tickDurationMs = 100;, +        final HashedWheelTimer timer = new HashedWheelTimer(Executors.defaultThreadFactory(), tickDurationMs,, +        timer.newTimeout(createNoOpTimerTask(), 5, TimeUnit.SECONDS);, +        Timeout timeoutToCancel = timer.newTimeout(createNoOpTimerTask(), 5, TimeUnit.SECONDS);, +        assertTrue(timeoutToCancel.cancel());, +        Thread.sleep(tickDurationMs * 5);, +, +        final CountDownLatch secondLatch = new CountDownLatch(1);, +        timer.newTimeout(createCountDownLatchTimerTask(secondLatch), 90, TimeUnit.MILLISECONDS);, +, +        secondLatch.await();, +    @Test(timeout = 3000), +    public void testNewTimeoutShouldStopThrowingRejectedExecutionExceptionWhenExistingTimeoutIsExecuted(), +        throws InterruptedException {, +        final CountDownLatch latch = new CountDownLatch(1);, +        final HashedWheelTimer timer = new HashedWheelTimer(Executors.defaultThreadFactory(), 25,, +            TimeUnit.MILLISECONDS, 4, true, 2);, +        timer.newTimeout(createNoOpTimerTask(), 5, TimeUnit.SECONDS);, +        timer.newTimeout(createCountDownLatchTimerTask(latch), 90, TimeUnit.MILLISECONDS);, +        latch.await();, +, +        final CountDownLatch secondLatch = new CountDownLatch(1);, +        timer.newTimeout(createCountDownLatchTimerTask(secondLatch), 90, TimeUnit.MILLISECONDS);, +, +        secondLatch.await();, +        timer.stop();, +, +    private static TimerTask createCountDownLatchTimerTask(final CountDownLatch latch) {, +        return new TimerTask() {, +            @Override, +            public void run(final Timeout timeout) throws Exception {, +                latch.countDown();, +            }, +        };, +    }]