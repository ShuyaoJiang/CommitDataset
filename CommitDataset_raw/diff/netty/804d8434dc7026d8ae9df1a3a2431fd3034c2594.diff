[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void goAwayReceived(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (localEndpoint.lastStreamKnownByPeer() >= 0 && localEndpoint.lastStreamKnownByPeer() < lastKnownStream) {, +            throw connectionError(PROTOCOL_ERROR, "lastStreamId MUST NOT increase. Current value: %d new value: %d",, +                    localEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, localEndpoint);, +    public boolean goAwaySent(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (remoteEndpoint.lastStreamKnownByPeer() >= 0) {, +            // Protect against re-entrancy. Could happen if writing the frame fails, and error handling, +            // treating this is a connection handler and doing a graceful shutdown..., +            if (lastKnownStream == remoteEndpoint.lastStreamKnownByPeer()) {, +                return false;, +            }, +            if (lastKnownStream > remoteEndpoint.lastStreamKnownByPeer()) {, +                throw connectionError(PROTOCOL_ERROR, "Last stream identifier must not increase between " +, +                                "sending multiple GOAWAY frames (was '%d', is '%d').",, +                        remoteEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +            }, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, remoteEndpoint);, +        return true;, +    }, +, +    private void closeStreamsGreaterThanLastKnownStreamId(final int lastKnownStream,, +                                                          final DefaultEndpoint<?> endpoint) throws Http2Exception {, +                if (stream.id() > lastKnownStream && endpoint.isValidStreamId(stream.id())) {, +            if (lastStreamKnownByPeer >= 0 && streamId > lastStreamKnownByPeer) {, +                        "Cannot create stream %d greater than Last-Stream-ID %d from GOAWAY.",, +                        streamId, lastStreamKnownByPeer);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void goAwayReceived(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (localEndpoint.lastStreamKnownByPeer() >= 0 && localEndpoint.lastStreamKnownByPeer() < lastKnownStream) {, +            throw connectionError(PROTOCOL_ERROR, "lastStreamId MUST NOT increase. Current value: %d new value: %d",, +                    localEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, localEndpoint);, +    public boolean goAwaySent(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (remoteEndpoint.lastStreamKnownByPeer() >= 0) {, +            // Protect against re-entrancy. Could happen if writing the frame fails, and error handling, +            // treating this is a connection handler and doing a graceful shutdown..., +            if (lastKnownStream == remoteEndpoint.lastStreamKnownByPeer()) {, +                return false;, +            }, +            if (lastKnownStream > remoteEndpoint.lastStreamKnownByPeer()) {, +                throw connectionError(PROTOCOL_ERROR, "Last stream identifier must not increase between " +, +                                "sending multiple GOAWAY frames (was '%d', is '%d').",, +                        remoteEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +            }, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, remoteEndpoint);, +        return true;, +    }, +, +    private void closeStreamsGreaterThanLastKnownStreamId(final int lastKnownStream,, +                                                          final DefaultEndpoint<?> endpoint) throws Http2Exception {, +                if (stream.id() > lastKnownStream && endpoint.isValidStreamId(stream.id())) {, +            if (lastStreamKnownByPeer >= 0 && streamId > lastStreamKnownByPeer) {, +                        "Cannot create stream %d greater than Last-Stream-ID %d from GOAWAY.",, +                        streamId, lastStreamKnownByPeer);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +        listener.onGoAwayRead(ctx, lastStreamId, errorCode, debugData);, +                // If we have sent a reset stream it is assumed the stream will be closed after the write completes., +                // If we have not sent a reset, but the stream was created after a GoAway this is not supported by, +                // DefaultHttp2Connection and if a custom Http2Connection is used it is assumed the lifetime is managed, +                // elsewhere so we don't close the stream or otherwise modify the stream's state., +, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void goAwayReceived(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (localEndpoint.lastStreamKnownByPeer() >= 0 && localEndpoint.lastStreamKnownByPeer() < lastKnownStream) {, +            throw connectionError(PROTOCOL_ERROR, "lastStreamId MUST NOT increase. Current value: %d new value: %d",, +                    localEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, localEndpoint);, +    public boolean goAwaySent(final int lastKnownStream, long errorCode, ByteBuf debugData) throws Http2Exception {, +        if (remoteEndpoint.lastStreamKnownByPeer() >= 0) {, +            // Protect against re-entrancy. Could happen if writing the frame fails, and error handling, +            // treating this is a connection handler and doing a graceful shutdown..., +            if (lastKnownStream == remoteEndpoint.lastStreamKnownByPeer()) {, +                return false;, +            }, +            if (lastKnownStream > remoteEndpoint.lastStreamKnownByPeer()) {, +                throw connectionError(PROTOCOL_ERROR, "Last stream identifier must not increase between " +, +                                "sending multiple GOAWAY frames (was '%d', is '%d').",, +                        remoteEndpoint.lastStreamKnownByPeer(), lastKnownStream);, +            }, +        }, +, +        closeStreamsGreaterThanLastKnownStreamId(lastKnownStream, remoteEndpoint);, +        return true;, +    }, +, +    private void closeStreamsGreaterThanLastKnownStreamId(final int lastKnownStream,, +                                                          final DefaultEndpoint<?> endpoint) throws Http2Exception {]