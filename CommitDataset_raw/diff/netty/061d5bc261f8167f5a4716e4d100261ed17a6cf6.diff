[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.util.internal.ThreadLocalRandom;, +import static org.hamcrest.CoreMatchers.is;, +        ThreadLocalRandom.current().nextBytes(data);, +        final File file = File.createTempFile("netty-", ".tmp");, +        final FileOutputStream out = new FileOutputStream(file);, +        final Random random = ThreadLocalRandom.current();, +, +        // Prepend random data which will not be transferred, so that we can test non-zero start offset, +        final int startOffset = random.nextInt(8192);, +        for (int i = 0; i < startOffset; i ++) {, +            out.write(random.nextInt());, +        }, +, +        // .. and here comes the real data to transfer., +, +        // .. and then some extra data which is not supposed to be transferred., +        for (int i = random.nextInt(8192); i > 0; i --) {, +            out.write(random.nextInt());, +        }, +, +        FileRegion region = new DefaultFileRegion(new FileInputStream(file).getChannel(), startOffset, data.length);, +, +        // Make sure we did not receive more than we expected., +        assertThat(sh.counter, is(data.length));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.util.internal.ThreadLocalRandom;, +import static org.hamcrest.CoreMatchers.is;, +        ThreadLocalRandom.current().nextBytes(data);, +        final File file = File.createTempFile("netty-", ".tmp");, +        final FileOutputStream out = new FileOutputStream(file);, +        final Random random = ThreadLocalRandom.current();, +, +        // Prepend random data which will not be transferred, so that we can test non-zero start offset, +        final int startOffset = random.nextInt(8192);, +        for (int i = 0; i < startOffset; i ++) {, +            out.write(random.nextInt());, +        }, +, +        // .. and here comes the real data to transfer., +, +        // .. and then some extra data which is not supposed to be transferred., +        for (int i = random.nextInt(8192); i > 0; i --) {, +            out.write(random.nextInt());, +        }, +, +        FileRegion region = new DefaultFileRegion(new FileInputStream(file).getChannel(), startOffset, data.length);, +, +        // Make sure we did not receive more than we expected., +        assertThat(sh.counter, is(data.length));, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +    off_t offset = base_off + off;, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.util.internal.ThreadLocalRandom;, +import static org.hamcrest.CoreMatchers.is;, +        ThreadLocalRandom.current().nextBytes(data);, +        final File file = File.createTempFile("netty-", ".tmp");, +        final FileOutputStream out = new FileOutputStream(file);, +        final Random random = ThreadLocalRandom.current();, +, +        // Prepend random data which will not be transferred, so that we can test non-zero start offset, +        final int startOffset = random.nextInt(8192);, +        for (int i = 0; i < startOffset; i ++) {, +            out.write(random.nextInt());, +        }, +, +        // .. and here comes the real data to transfer., +, +        // .. and then some extra data which is not supposed to be transferred., +        for (int i = random.nextInt(8192); i > 0; i --) {, +            out.write(random.nextInt());, +        }, +, +        FileRegion region = new DefaultFileRegion(new FileInputStream(file).getChannel(), startOffset, data.length);, +, +        // Make sure we did not receive more than we expected., +        assertThat(sh.counter, is(data.length));, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +    off_t offset = base_off + off;, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jlong Java_io_netty_channel_epoll_Native_sendfile(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.util.internal.ThreadLocalRandom;, +import static org.hamcrest.CoreMatchers.is;, +        ThreadLocalRandom.current().nextBytes(data);, +        final File file = File.createTempFile("netty-", ".tmp");, +        final FileOutputStream out = new FileOutputStream(file);, +        final Random random = ThreadLocalRandom.current();, +, +        // Prepend random data which will not be transferred, so that we can test non-zero start offset, +        final int startOffset = random.nextInt(8192);, +        for (int i = 0; i < startOffset; i ++) {, +            out.write(random.nextInt());, +        }, +, +        // .. and here comes the real data to transfer., +, +        // .. and then some extra data which is not supposed to be transferred.]