[+++ b/common/src/main/java/io/netty/util/internal/ObjectCleaner.java, +, +    // Package-private for testing, +    static final String CLEANER_THREAD_NAME = ObjectCleaner.class.getSimpleName() + "Thread";, +            // Mark this as a daemon thread to ensure that we the JVM can exit if this is the only thread that is, +            // running., +            cleanupThread.setDaemon(true);, +++ b/common/src/main/java/io/netty/util/internal/ObjectCleaner.java, +, +    // Package-private for testing, +    static final String CLEANER_THREAD_NAME = ObjectCleaner.class.getSimpleName() + "Thread";, +            // Mark this as a daemon thread to ensure that we the JVM can exit if this is the only thread that is, +            // running., +            cleanupThread.setDaemon(true);, +++ b/common/src/test/java/io/netty/util/internal/ObjectCleanerTest.java, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +    @Test(timeout = 5000), +    public void testCleanerThreadIsDaemon() throws Exception {, +        temporaryObject = new Object();, +        ObjectCleaner.register(temporaryObject, new Runnable() {, +            @Override, +            public void run() {, +                // NOOP, +            }, +        });, +, +        Thread cleanerThread = null;, +, +        for (Thread thread : Thread.getAllStackTraces().keySet()) {, +            if (thread.getName().equals(ObjectCleaner.CLEANER_THREAD_NAME)) {, +                cleanerThread = thread;, +                break;, +            }, +        }, +        assertNotNull(cleanerThread);, +        assertTrue(cleanerThread.isDaemon());, +    }]