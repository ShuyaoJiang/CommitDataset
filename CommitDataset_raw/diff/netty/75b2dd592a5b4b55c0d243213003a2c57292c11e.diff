[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.lang.reflect.Method;, +        private static final boolean UNALIGNED;, +, +        static {, +            boolean unaligned = false;, +            try {, +                Class<?> bitsClass = Class.forName("java.nio.Bits", false, ClassLoader.getSystemClassLoader());, +                Method unalignedMethod = bitsClass.getDeclaredMethod("unaligned");, +                unalignedMethod.setAccessible(true);, +                unaligned = Boolean.TRUE.equals(unalignedMethod.invoke(null));, +            } catch (Throwable t) {, +                // Ignore, +            }, +, +            UNALIGNED = unaligned;, +        }, +, +            if (UNALIGNED) {, +                return new PooledUnsafeDirectByteBuf(maxCapacity);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.lang.reflect.Method;, +        private static final boolean UNALIGNED;, +, +        static {, +            boolean unaligned = false;, +            try {, +                Class<?> bitsClass = Class.forName("java.nio.Bits", false, ClassLoader.getSystemClassLoader());, +                Method unalignedMethod = bitsClass.getDeclaredMethod("unaligned");, +                unalignedMethod.setAccessible(true);, +                unaligned = Boolean.TRUE.equals(unalignedMethod.invoke(null));, +            } catch (Throwable t) {, +                // Ignore, +            }, +, +            UNALIGNED = unaligned;, +        }, +, +            if (UNALIGNED) {, +                return new PooledUnsafeDirectByteBuf(maxCapacity);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +    void init(PoolChunk<T> chunk, long handle, int offset, int length, int maxLength) {, +    void initUnpooled(PoolChunk<T> chunk, int length) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +import java.lang.reflect.Method;, +        private static final boolean UNALIGNED;, +, +        static {, +            boolean unaligned = false;, +            try {, +                Class<?> bitsClass = Class.forName("java.nio.Bits", false, ClassLoader.getSystemClassLoader());, +                Method unalignedMethod = bitsClass.getDeclaredMethod("unaligned");, +                unalignedMethod.setAccessible(true);, +                unaligned = Boolean.TRUE.equals(unalignedMethod.invoke(null));, +            } catch (Throwable t) {, +                // Ignore, +            }, +, +            UNALIGNED = unaligned;, +        }, +, +            if (UNALIGNED) {, +                return new PooledUnsafeDirectByteBuf(maxCapacity);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBuf.java, +    void init(PoolChunk<T> chunk, long handle, int offset, int length, int maxLength) {, +    void initUnpooled(PoolChunk<T> chunk, int length) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledUnsafeDirectByteBuf.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.buffer;, +, +import sun.misc.Unsafe;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.lang.reflect.Field;, +import java.nio.Buffer;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;]