[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket07FrameDecoder.java, +     * @param expectMaskedFrames, +    public WebSocket07FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength) {, +        this(expectMaskedFrames, allowExtensions, maxFramePayloadLength, false);, +    }, +, +    /**, +     * Constructor, +     *, +     * @param expectMaskedFrames, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     * @param allowMaskMismatch, +     *            Allows to loosen the masking requirement on received frames. When this is set to false then also, +     *            frames which are not masked properly according to the standard will still be accepted., +     */, +    public WebSocket07FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength,, +                                   boolean allowMaskMismatch) {, +        super(expectMaskedFrames, allowExtensions, maxFramePayloadLength, allowMaskMismatch);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket07FrameDecoder.java, +     * @param expectMaskedFrames, +    public WebSocket07FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength) {, +        this(expectMaskedFrames, allowExtensions, maxFramePayloadLength, false);, +    }, +, +    /**, +     * Constructor, +     *, +     * @param expectMaskedFrames, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     * @param allowMaskMismatch, +     *            Allows to loosen the masking requirement on received frames. When this is set to false then also, +     *            frames which are not masked properly according to the standard will still be accepted., +     */, +    public WebSocket07FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength,, +                                   boolean allowMaskMismatch) {, +        super(expectMaskedFrames, allowExtensions, maxFramePayloadLength, allowMaskMismatch);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private final boolean expectMaskedFrames;, +    private final boolean allowMaskMismatch;, +    private boolean frameMasked;, +     * @param expectMaskedFrames, +    public WebSocket08FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength) {, +        this(expectMaskedFrames, allowExtensions, maxFramePayloadLength, false);, +    }, +, +    /**, +     * Constructor, +     *, +     * @param expectMaskedFrames, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     * @param allowMaskMismatch, +     *            Allows to loosen the masking requirement on received frames. When this is set to false then also, +     *            frames which are not masked properly according to the standard will still be accepted., +     */, +    public WebSocket08FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength,, +                                   boolean allowMaskMismatch) {, +        this.expectMaskedFrames = expectMaskedFrames;, +        this.allowMaskMismatch = allowMaskMismatch;, +                    frameMasked = (b & 0x80) != 0;, +                    if (!allowMaskMismatch && expectMaskedFrames != frameMasked) {, +                        protocolViolation(ctx, "received a frame that is not masked as expected");, +, +                    if (frameMasked) {, +                        if (frameMasked) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket07FrameDecoder.java, +     * @param expectMaskedFrames, +    public WebSocket07FrameDecoder(boolean expectMaskedFrames, boolean allowExtensions, int maxFramePayloadLength) {, +        this(expectMaskedFrames, allowExtensions, maxFramePayloadLength, false);, +    }, +, +    /**, +     * Constructor, +     *, +     * @param expectMaskedFrames, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     * @param allowMaskMismatch]