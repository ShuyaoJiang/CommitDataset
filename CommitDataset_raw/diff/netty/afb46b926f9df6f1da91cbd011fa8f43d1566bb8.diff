[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, +import io.netty.channel.Channel;, +import io.netty.handler.codec.http.HttpServerCodec;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(SpdyOrHttpChooser.class);, +, +        HTTP_1_0("http/1.0");, +         * @param name the protocol name, +         * @return the selected protocol or {@code null} if there is no match, +            return null;, +    protected SpdyOrHttpChooser() { }, +        if (configurePipeline(ctx)) {, +    private boolean configurePipeline(ChannelHandlerContext ctx) {, +            throw new IllegalStateException("cannot find a SslHandler in the pipeline (required for SPDY)");, +        if (!handler.handshakeFuture().isDone()) {, +        }, +, +        SelectedProtocol protocol;, +        try {, +            protocol = selectProtocol(handler);, +        } catch (Exception e) {, +            throw new IllegalStateException("failed to get the selected protocol", e);, +        }, +, +        if (protocol == null) {, +            throw new IllegalStateException("unknown protocol");, +        }, +, +        switch (protocol) {, +            try {, +                configureSpdy(ctx, SpdyVersion.SPDY_3_1);, +            } catch (Exception e) {, +                throw new IllegalStateException("failed to configure a SPDY pipeline", e);, +            }, +            try {, +                configureHttp1(ctx);, +            } catch (Exception e) {, +                throw new IllegalStateException("failed to configure a HTTP/1 pipeline", e);, +            }, +     * Returns the {@link SelectedProtocol} for the current SSL session.  By default, this method returns the first, +     * known protocol., +     * @return the selected application-level protocol, or {@code null} if the application-level protocol name of, +     *         the specified {@code sslHandler} is neither {@code "http/1.1"}, {@code "http/1.0"} nor {@code "spdy/3.1"}, +    protected SelectedProtocol selectProtocol(SslHandler sslHandler) throws Exception {, +        final String appProto = sslHandler.applicationProtocol();, +        return appProto != null? SelectedProtocol.protocol(appProto) : SelectedProtocol.HTTP_1_1;, +    }, +, +    /**, +     * Configures the {@link Channel} of the specified {@code ctx} for HTTP/2., +     * <p>, +     * A typical implementation of this method will look like the following:, +     * <pre>, +     * {@link ChannelPipeline} p = ctx.pipeline();, +     * p.addLast(new {@link SpdyFrameCodec}(version));, +     * p.addLast(new {@link SpdySessionHandler}(version, true));, +     * p.addLast(new {@link SpdyHttpEncoder}(version));, +     * p.addLast(new {@link SpdyHttpDecoder}(version, <i>maxSpdyContentLength</i>));, +     * p.addLast(new {@link SpdyHttpResponseStreamIdHandler}());, +     * p.addLast(new <i>YourHttpRequestHandler</i>());, +     * </pre>, +     * </p>, +     */, +    protected abstract void configureSpdy(ChannelHandlerContext ctx, SpdyVersion version) throws Exception;, +, +    /**, +     * Configures the {@link Channel} of the specified {@code ctx} for HTTP/1., +     * <p>, +     * A typical implementation of this method will look like the following:, +     * <pre>, +     * {@link ChannelPipeline} p = ctx.pipeline();, +     * p.addLast(new {@link HttpServerCodec}());, +     * p.addLast(new <i>YourHttpRequestHandler</i>());, +     * </pre>, +     * </p>, +     */, +    protected abstract void configureHttp1(ChannelHandlerContext ctx) throws Exception;, +, +    @Override, +    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +        logger.warn("{} Failed to select the application-level protocol:", ctx.channel(), cause);, +        ctx.close();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyOrHttpChooser.java, +import io.netty.channel.Channel;, +import io.netty.handler.codec.http.HttpServerCodec;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +    private static final InternalLogger logger = InternalLoggerFactory.getInstance(SpdyOrHttpChooser.class);, +, +        HTTP_1_0("http/1.0");, +         * @param name the protocol name, +         * @return the selected protocol or {@code null} if there is no match, +            return null;, +    protected SpdyOrHttpChooser() { }, +        if (configurePipeline(ctx)) {, +    private boolean configurePipeline(ChannelHandlerContext ctx) {, +            throw new IllegalStateException("cannot find a SslHandler in the pipeline (required for SPDY)");, +        if (!handler.handshakeFuture().isDone()) {, +        }]