[+++ b/common/src/main/java/io/netty/util/internal/chmv8/ForkJoinPool.java, +     *, +     * Note: this was changed to fix https://github.com/netty/netty/issues/4211, +     * Instead of using "ThreadLocal<Submitter>" like jsr166e, just use "ThreadLocal<int[]>" to, +     * avoid leaking the Submitter's class loader. Here "int[]" is just an array with exactly one, +     * int., +    static final ThreadLocal<int[]> submitters;, +    //static final class Submitter {, +    //    int seed;, +    //    Submitter(int s) { seed = s; }, +    //}, +        int[] z = submitters.get();, +                (q = ws[m & (r = z[0]) & SQMASK]) != null && r != 0 &&, +        for (int[] z = submitters.get();;) {, +                    submitters.set(z = new int[]{ r });, +                r = z[0];, +                z[0] = r ^= (r << 5);, +        int[] z; ForkJoinPool p; WorkQueue[] ws; int m, r;, +                ws[m & z[0] & SQMASK] : null;, +        int[] z = submitters.get();, +                (joiner = ws[z[0] & m & SQMASK]) != null &&, +        int[] z = submitters.get();, +                (joiner = ws[(j = z[0]) & m & SQMASK]) != null && task != null) {, +        submitters = new ThreadLocal<int[]>();]