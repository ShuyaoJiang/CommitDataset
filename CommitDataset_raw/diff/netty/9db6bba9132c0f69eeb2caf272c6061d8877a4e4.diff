[+++ b/src/main/java/org/jboss/netty/channel/socket/http/AcceptedServerChannelRequestDispatch.java, +        if (HttpHeaders.getContentLength(request, 0) == 0 ||, +++ b/src/main/java/org/jboss/netty/channel/socket/http/AcceptedServerChannelRequestDispatch.java, +        if (HttpHeaders.getContentLength(request, 0) == 0 ||, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelMessageUtils.java, +                HttpHeaders.getContentLength(response, 0) == expectedContents.length &&, +                HttpHeaders.getContentLength(response, 0) == 0) {, +++ b/src/main/java/org/jboss/netty/channel/socket/http/AcceptedServerChannelRequestDispatch.java, +        if (HttpHeaders.getContentLength(request, 0) == 0 ||, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelMessageUtils.java, +                HttpHeaders.getContentLength(response, 0) == expectedContents.length &&, +                HttpHeaders.getContentLength(response, 0) == 0) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaderDateFormat.java, +        if (date == null) {, +        }, +        if (date == null) {, +        }, +++ b/src/main/java/org/jboss/netty/channel/socket/http/AcceptedServerChannelRequestDispatch.java, +        if (HttpHeaders.getContentLength(request, 0) == 0 ||, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelMessageUtils.java, +                HttpHeaders.getContentLength(response, 0) == expectedContents.length &&, +                HttpHeaders.getContentLength(response, 0) == 0) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaderDateFormat.java, +        if (date == null) {, +        }, +        if (date == null) {, +        }, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java, +import java.util.Calendar;, +     * If the specified value is not a {@link String}, it is converted into a, +     * {@link String} by {@link Object#toString()}, except for {@link Date}, +     * and {@link Calendar} which are formatted to the date format defined in, +     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">RFC2616</a>., +     * This method can be represented approximately as the following code:, +     * <pre>, +     * removeHeader(message, name);, +     * for (Object v: values) {, +     *     if (v == null) {, +     *         break;, +     *     }, +     *     addHeader(message, name, v);, +     * }, +     * </pre>, +     * If the specified value is not a {@link String}, it is converted into a, +     * {@link String} by {@link Object#toString()}, except for {@link Date}, +     * and {@link Calendar} which are formatted to the date format defined in, +     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">RFC2616</a>., +     * Removes the header with the specified name., +     */, +    public static void removeHeader(HttpMessage message, String name) {, +        message.removeHeader(name);, +    }, +, +    /**, +     * Removes all headers from the specified message., +     */, +    public static void clearHeaders(HttpMessage message) {, +        message.clearHeaders();, +    }, +, +    /**, +            throw new NumberFormatException("header not found: " + name);, +     * Returns the date header value with the specified header name.  If, +     * there are more than one header value for the specified header name, the, +     * first value is returned., +     *, +     * @return the header value, +     * @throws ParseException, +     *         if there is no such header or the header value is not a formatted date, +     */, +    public static Date getDateHeader(HttpMessage message, String name) throws ParseException {, +        String value = getHeader(message, name);, +        if (value == null) {, +            throw new ParseException("header not found: " + name, 0);, +        }, +        return new HttpHeaderDateFormat().parse(value);, +    }, +, +    /**, +     * Returns the date header value with the specified header name.  If, +     * there are more than one header value for the specified header name, the, +     * first value is returned., +     *, +     * @return the header value or the {@code defaultValue} if there is no such, +     *         header or the header value is not a formatted date, +     */, +    public static Date getDateHeader(HttpMessage message, String name, Date defaultValue) {, +        final String value = getHeader(message, name);, +        if (value == null) {, +            return defaultValue;, +        }, +, +        try {, +            return new HttpHeaderDateFormat().parse(value);, +        } catch (ParseException e) {, +            return defaultValue;, +        }, +    }, +, +    /**]