[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +         * after a {@code GOAWAY} is sent if the following conditions hold:, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +         * after a {@code GOAWAY} is sent if the following conditions hold:, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +                // Mark the state as cancelled, we'll clear the pending queue via cancel() below., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +         * after a {@code GOAWAY} is sent if the following conditions hold:, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +                // Mark the state as cancelled, we'll clear the pending queue via cancel() below., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +         * Notifies the listener that the given stream has transitioned from {@code OPEN} to {@code HALF CLOSED}., +         * This method will <strong>not</strong> be called until a state transition occurs from when, +         * {@link #onStreamActive(Http2Stream)} was called., +         * The stream can be inspected to determine which side is {@code HALF CLOSED}., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +         * after a {@code GOAWAY} is sent if the following conditions hold:, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +                // Mark the state as cancelled, we'll clear the pending queue via cancel() below., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +         * Notifies the listener that the given stream has transitioned from {@code OPEN} to {@code HALF CLOSED}., +         * This method will <strong>not</strong> be called until a state transition occurs from when, +         * {@link #onStreamActive(Http2Stream)} was called., +         * The stream can be inspected to determine which side is {@code HALF CLOSED}., +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DataCompressionHttp2Test.java, +import io.netty.handler.codec.http2.Http2Stream.State;, +            public void onStreamActive(Http2Stream stream) {, +                if (stream.state() == State.HALF_CLOSED_LOCAL || stream.state() == State.HALF_CLOSED_REMOTE) {, +                    serverLatch.countDown();, +                }, +            }, +            @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +         * after a {@code GOAWAY} is sent if the following conditions hold:, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +                // Mark the state as cancelled, we'll clear the pending queue via cancel() below., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +         * Notifies the listener that the given stream has transitioned from {@code OPEN} to {@code HALF CLOSED}., +         * This method will <strong>not</strong> be called until a state transition occurs from when, +         * {@link #onStreamActive(Http2Stream)} was called., +         * The stream can be inspected to determine which side is {@code HALF CLOSED}., +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DataCompressionHttp2Test.java, +import io.netty.handler.codec.http2.Http2Stream.State;, +            public void onStreamActive(Http2Stream stream) {, +                if (stream.state() == State.HALF_CLOSED_LOCAL || stream.state() == State.HALF_CLOSED_REMOTE) {, +                    serverLatch.countDown();, +                }, +            }, +            @Override, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionRoundtripTest.java, +import static org.mockito.Matchers.anyLong;, +    public void headersWithEndStreamShouldNotSendError() throws Exception {, +        bootstrapEnv(1, 1, 2, 1);, +, +        // Create a single stream by sending a HEADERS frame to the server., +        final short weight = 16;, +        final Http2Headers headers = dummyHeaders();, +        runInChannel(clientChannel, new Http2Runnable() {, +            @Override, +            public void run() {, +                http2Client.encoder().writeHeaders(ctx(), 3, headers, 0, weight, false, 0, true,, +                        newPromise());, +                ctx().flush();, +            }, +        });, +, +        assertTrue(requestLatch.await(5, SECONDS));, +        verify(serverListener).onHeadersRead(any(ChannelHandlerContext.class), eq(3), eq(headers),, +                eq(0), eq(weight), eq(false), eq(0), eq(true));, +        // Wait for some time to see if a go_away or reset frame will be received., +        Thread.sleep(1000);, +, +        // Verify that no errors have been received., +        verify(serverListener, never()).onGoAwayRead(any(ChannelHandlerContext.class), anyInt(),, +                anyLong(), any(ByteBuf.class));, +        verify(serverListener, never()).onRstStreamRead(any(ChannelHandlerContext.class), anyInt(),, +                anyLong());, +    }, +, +    @Test, +        bootstrapEnv(1, 1, 2, 1);, +        bootstrapEnv(1, 1, 2, 1);]