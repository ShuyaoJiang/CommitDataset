[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    /**, +     * Create a new instance., +     * @param validate {@code true} to validate header names according to, +     * <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>. {@code false} to not validate header names., +     * @param arraySizeHint A hint as to how large the hash data structure should be., +     * The next positive power of two will be used. An upper bound may be enforced., +     */, +    @SuppressWarnings("unchecked"), +    public DefaultHttp2Headers(boolean validate, int arraySizeHint) {, +        // Case sensitive compare is used because it is cheaper, and header validation can be used to catch invalid, +        // headers., +        super(CASE_SENSITIVE_HASHER,, +              CharSequenceValueConverter.INSTANCE,, +              validate ? HTTP2_NAME_VALIDATOR : NameValidator.NOT_NULL,, +              arraySizeHint);, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    /**, +     * Create a new instance., +     * @param validate {@code true} to validate header names according to, +     * <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>. {@code false} to not validate header names., +     * @param arraySizeHint A hint as to how large the hash data structure should be., +     * The next positive power of two will be used. An upper bound may be enforced., +     */, +    @SuppressWarnings("unchecked"), +    public DefaultHttp2Headers(boolean validate, int arraySizeHint) {, +        // Case sensitive compare is used because it is cheaper, and header validation can be used to catch invalid, +        // headers., +        super(CASE_SENSITIVE_HASHER,, +              CharSequenceValueConverter.INSTANCE,, +              validate ? HTTP2_NAME_VALIDATOR : NameValidator.NOT_NULL,, +              arraySizeHint);, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5;, +    private static final float HEADERS_COUNT_WEIGHT_HISTORICAL = 1 - HEADERS_COUNT_WEIGHT_NEW;, +, +    /**, +     * Used to calculate an exponential moving average of header sizes to get an estimate of how large the data, +     * structure for storing headers should be., +     */, +    private float headerArraySizeAccumulator = 8;, +            final Http2Headers headers = new DefaultHttp2Headers(validateHeaders, (int) headerArraySizeAccumulator);, +            headerArraySizeAccumulator =  HEADERS_COUNT_WEIGHT_NEW * headers.size() +, +                                          HEADERS_COUNT_WEIGHT_HISTORICAL * headerArraySizeAccumulator;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    /**, +     * Create a new instance., +     * @param validate {@code true} to validate header names according to, +     * <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>. {@code false} to not validate header names., +     * @param arraySizeHint A hint as to how large the hash data structure should be., +     * The next positive power of two will be used. An upper bound may be enforced., +     */, +    @SuppressWarnings("unchecked"), +    public DefaultHttp2Headers(boolean validate, int arraySizeHint) {, +        // Case sensitive compare is used because it is cheaper, and header validation can be used to catch invalid, +        // headers., +        super(CASE_SENSITIVE_HASHER,, +              CharSequenceValueConverter.INSTANCE,, +              validate ? HTTP2_NAME_VALIDATOR : NameValidator.NOT_NULL,, +              arraySizeHint);, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +    private static final float HEADERS_COUNT_WEIGHT_NEW = 1 / 5;, +    private static final float HEADERS_COUNT_WEIGHT_HISTORICAL = 1 - HEADERS_COUNT_WEIGHT_NEW;, +, +    /**, +     * Used to calculate an exponential moving average of header sizes to get an estimate of how large the data, +     * structure for storing headers should be., +     */, +    private float headerArraySizeAccumulator = 8;, +            final Http2Headers headers = new DefaultHttp2Headers(validateHeaders, (int) headerArraySizeAccumulator);, +            headerArraySizeAccumulator =  HEADERS_COUNT_WEIGHT_NEW * headers.size() +, +                                          HEADERS_COUNT_WEIGHT_HISTORICAL * headerArraySizeAccumulator;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpConversionUtil.java, +        final Http2Headers out = new DefaultHttp2Headers(validateHeaders, inHeaders.size());, +        toHttp2Headers(inHeaders, out);, +        return out;, +        final Http2Headers out = new DefaultHttp2Headers(validateHeaders, inHeaders.size());, +        toHttp2Headers(inHeaders, out);, +        return out;, +    }, +    public static void toHttp2Headers(HttpHeaders inHeaders, Http2Headers out) throws Exception {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +    /**, +     * Create a new instance., +     * @param validate {@code true} to validate header names according to, +     * <a href="https://tools.ietf.org/html/rfc7540">rfc7540</a>. {@code false} to not validate header names., +     * @param arraySizeHint A hint as to how large the hash data structure should be., +     * The next positive power of two will be used. An upper bound may be enforced., +     */, +    @SuppressWarnings("unchecked"), +    public DefaultHttp2Headers(boolean validate, int arraySizeHint) {, +        // Case sensitive compare is used because it is cheaper, and header validation can be used to catch invalid, +        // headers., +        super(CASE_SENSITIVE_HASHER,]