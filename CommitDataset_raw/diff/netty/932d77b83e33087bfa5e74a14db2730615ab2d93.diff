[+++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import javax.net.ssl.SSLEngine;, +, +    /**, +     * Wraps the given {@link SSLEngine} to add extra tests while executing methods if possible / needed., +     */, +    static SSLEngine wrapSSLEngineForTesting(SSLEngine engine) {, +        if (engine instanceof ReferenceCountedOpenSslEngine) {, +            return new OpenSslErrorStackAssertSSLEngine((ReferenceCountedOpenSslEngine) engine);, +        }, +        return engine;, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import javax.net.ssl.SSLEngine;, +, +    /**, +     * Wraps the given {@link SSLEngine} to add extra tests while executing methods if possible / needed., +     */, +    static SSLEngine wrapSSLEngineForTesting(SSLEngine engine) {, +        if (engine instanceof ReferenceCountedOpenSslEngine) {, +            return new OpenSslErrorStackAssertSSLEngine((ReferenceCountedOpenSslEngine) engine);, +        }, +        return engine;, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java, +import javax.net.ssl.SSLEngine;, +, +    @Override, +    protected SSLEngine wrapEngine(SSLEngine engine) {, +        return Java8SslTestUtils.wrapSSLEngineForTesting(engine);, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import javax.net.ssl.SSLEngine;, +, +    /**, +     * Wraps the given {@link SSLEngine} to add extra tests while executing methods if possible / needed., +     */, +    static SSLEngine wrapSSLEngineForTesting(SSLEngine engine) {, +        if (engine instanceof ReferenceCountedOpenSslEngine) {, +            return new OpenSslErrorStackAssertSSLEngine((ReferenceCountedOpenSslEngine) engine);, +        }, +        return engine;, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/JdkOpenSslEngineInteroptTest.java, +import javax.net.ssl.SSLEngine;, +, +    @Override, +    protected SSLEngine wrapEngine(SSLEngine engine) {, +        return Java8SslTestUtils.wrapSSLEngineForTesting(engine);, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/OpenSslEngineTest.java, +        assertEquals("SSL error stack not correctly consumed", 0, SSL.getLastErrorNumber());, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +                    src.capacity() + unwrapEngine(clientEngine).maxWrapOverhead() - 1);, +                    src.capacity() + unwrapEngine(clientEngine).maxWrapOverhead());, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +                    + unwrapEngine(clientEngine).maxWrapOverhead());, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +                    unwrapEngine(clientEngine).maxEncryptedPacketLength() - 1);, +        SSLEngine client = wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine server = wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine client = wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine server = wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine client = wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine server = wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine client = wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +        SSLEngine server = wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +        ByteBuffer dst = allocateBuffer(srcLen + unwrapEngine(engine).maxWrapOverhead());, +        SSLEngine engine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +        SSLEngine engine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +, +    @Override, +    protected SSLEngine wrapEngine(SSLEngine engine) {, +        if (PlatformDependent.javaVersion() >= 8) {, +            return Java8SslTestUtils.wrapSSLEngineForTesting(engine);, +        }, +        return engine;, +    }, +, +    ReferenceCountedOpenSslEngine unwrapEngine(SSLEngine engine) {, +        if (engine instanceof JdkSslEngine) {, +            return (ReferenceCountedOpenSslEngine) ((JdkSslEngine) engine).getWrappedEngine();, +        }, +        return (ReferenceCountedOpenSslEngine) engine;, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/Java8SslTestUtils.java, +import javax.net.ssl.SSLEngine;, +, +    /**, +     * Wraps the given {@link SSLEngine} to add extra tests while executing methods if possible / needed., +     */, +    static SSLEngine wrapSSLEngineForTesting(SSLEngine engine) {, +        if (engine instanceof ReferenceCountedOpenSslEngine) {]