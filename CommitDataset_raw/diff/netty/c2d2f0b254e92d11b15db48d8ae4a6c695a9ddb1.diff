[+++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +import io.netty.buffer.ChannelBufferFactory;, +    protected ChannelBuffer newCumulationBuffer(ChannelHandlerContext ctx, int minimumCapacity) {, +        ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();, +            return ChannelBuffers.dynamicBuffer(, +                    factory.getDefaultOrder(), frameLength, ctx.getChannel().getConfig().getBufferFactory());, +        return super.newCumulationBuffer(ctx, minimumCapacity);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +import io.netty.buffer.ChannelBufferFactory;, +    protected ChannelBuffer newCumulationBuffer(ChannelHandlerContext ctx, int minimumCapacity) {, +        ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();, +            return ChannelBuffers.dynamicBuffer(, +                    factory.getDefaultOrder(), frameLength, ctx.getChannel().getConfig().getBufferFactory());, +        return super.newCumulationBuffer(ctx, minimumCapacity);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FrameDecoder.java, +import io.netty.buffer.ChannelBufferFactory;, +                (this.cumulation = newCumulationBuffer(ctx, input.readableBytes())).writeBytes(input);, +            ChannelBuffer cumulation = this.cumulation;, +            assert cumulation.readable();, +            if (cumulation.writableBytes() < input.readableBytes()) {, +            }, +            if (!cumulation.readable()) {, +                this.cumulation = null;, +            this.cumulation = null;, +, +     * Create a new {@link ChannelBuffer} which is used for the cumulation., +     * Be aware that this MUST be a dynamic buffer. Sub-classes may override, +     * this to provide a dynamic {@link ChannelBuffer} which has some, +     * pre-allocated size that better fit their need., +    protected ChannelBuffer newCumulationBuffer(, +            ChannelHandlerContext ctx, int minimumCapacity) {, +        ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();, +        return ChannelBuffers.dynamicBuffer(, +                factory.getDefaultOrder(), minimumCapacity, factory);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FixedLengthFrameDecoder.java, +import io.netty.buffer.ChannelBufferFactory;, +    protected ChannelBuffer newCumulationBuffer(ChannelHandlerContext ctx, int minimumCapacity) {, +        ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();, +            return ChannelBuffers.dynamicBuffer(, +                    factory.getDefaultOrder(), frameLength, ctx.getChannel().getConfig().getBufferFactory());, +        return super.newCumulationBuffer(ctx, minimumCapacity);, +++ b/codec/src/main/java/io/netty/handler/codec/frame/FrameDecoder.java, +import io.netty.buffer.ChannelBufferFactory;, +                (this.cumulation = newCumulationBuffer(ctx, input.readableBytes())).writeBytes(input);, +            ChannelBuffer cumulation = this.cumulation;, +            assert cumulation.readable();, +            if (cumulation.writableBytes() < input.readableBytes()) {, +            }, +            if (!cumulation.readable()) {, +                this.cumulation = null;, +            this.cumulation = null;, +, +     * Create a new {@link ChannelBuffer} which is used for the cumulation., +     * Be aware that this MUST be a dynamic buffer. Sub-classes may override, +     * this to provide a dynamic {@link ChannelBuffer} which has some, +     * pre-allocated size that better fit their need., +    protected ChannelBuffer newCumulationBuffer(, +            ChannelHandlerContext ctx, int minimumCapacity) {, +        ChannelBufferFactory factory = ctx.getChannel().getConfig().getBufferFactory();, +        return ChannelBuffers.dynamicBuffer(, +                factory.getDefaultOrder(), minimumCapacity, factory);, +++ b/codec/src/main/java/io/netty/handler/codec/replay/ReplayingDecoder.java, +        if (cumulation == null) {, +            // the cumulation buffer is not created yet so just pass the input, +            // to callDecode(...) method, +            this.cumulation = input;, +            replayable = new ReplayingDecoderBuffer(input);, +, +            int oldReaderIndex = input.readerIndex();, +            int inputSize = input.readableBytes();, +            callDecode(, +                    ctx, e.getChannel(),, +                    input, replayable,, +                    e.getRemoteAddress());, +, +            if (input.readable()) {, +                // seems like there is something readable left in the input buffer, +                // or decoder wants a replay - create the cumulation buffer and, +                // copy the input into it, +                if (checkpoint >= 0) {, +                    ChannelBuffer cumulation = this.cumulation =, +                            newCumulationBuffer(ctx, inputSize);, +                    cumulation.writeBytes(input, oldReaderIndex, inputSize);, +                    cumulation.readerIndex(input.readerIndex());, +                    replayable = new ReplayingDecoderBuffer(cumulation);, +                } else {, +                    System.out.println("B");, +                    ChannelBuffer cumulation = this.cumulation =, +                            newCumulationBuffer(ctx, input.readableBytes());, +                    replayable = new ReplayingDecoderBuffer(cumulation);, +                }, +            } else {, +                this.cumulation = null;, +                replayable = ReplayingDecoderBuffer.EMPTY_BUFFER;, +            }, +        } else {, +            ChannelBuffer cumulation = this.cumulation;, +            assert cumulation.readable();, +            if (cumulation.writableBytes() < input.readableBytes()) {, +                cumulation.discardReadBytes();]