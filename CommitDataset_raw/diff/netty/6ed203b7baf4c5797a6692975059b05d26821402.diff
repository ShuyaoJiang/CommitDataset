[+++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +        // As java.nio.ServerSocketChannel.isBound() will continue to return true even after the channel was closed, +        // we will also need to check if it is open., +        return isOpen() && javaChannel().socket().isBound();, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioServerSocketChannel.java, +        // As java.nio.ServerSocketChannel.isBound() will continue to return true even after the channel was closed, +        // we will also need to check if it is open., +        return isOpen() && javaChannel().socket().isBound();, +++ b/transport/src/test/java/io/netty/channel/socket/nio/NioServerSocketChannelTest.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +    @Test, +    public void testIsActiveFalseAfterClose()  {, +        NioServerSocketChannel serverSocketChannel = new NioServerSocketChannel();, +        EventLoopGroup group = new NioEventLoopGroup(1);, +        try {, +            group.register(serverSocketChannel).syncUninterruptibly();, +            Channel channel = serverSocketChannel.bind(new InetSocketAddress(0)).syncUninterruptibly().channel();, +            Assert.assertTrue(channel.isActive());, +            Assert.assertTrue(channel.isOpen());, +            channel.close().syncUninterruptibly();, +            Assert.assertFalse(channel.isOpen());, +            Assert.assertFalse(channel.isActive());, +        } finally {, +            group.shutdownGracefully();, +        }, +    }, +]