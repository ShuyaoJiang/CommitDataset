[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundInvoker.java, +     * Request to bind to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation, +     * completes, either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#bind(ChannelHandlerContext, SocketAddress, ChannelPromise)} method, +     * called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to connect to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation, +     * completes, either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#connect(ChannelHandlerContext, SocketAddress, SocketAddress, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to connect to the given {@link SocketAddress} while bind to the localAddress and notify the, +     * {@link ChannelFuture} once the operation completes, either because the operation was successful or because of, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#connect(ChannelHandlerContext, SocketAddress, SocketAddress, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to discconect from the remote peer and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#disconnect(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to close this ChannelOutboundInvoker and notify the {@link ChannelFuture} once the operation completes,, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#close(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to deregister this ChannelOutboundInvoker from the previous assigned {@link EventExecutor} and notify the, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#deregister(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to flush all pending data which belongs to this ChannelOutboundInvoker and notify the, +     * {@link ChannelFuture} once the operation completes, either because the operation was successful or because of, +     * an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#flush(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to write a message via this ChannelOutboundInvoker and notify the {@link ChannelFuture}, +     * <p>, +     * This will result in having the message added to the outbound buffer of the next {@link ChannelOutboundHandler}, +     * and the {@link ChannelOperationHandler#flush(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to send a {@link FileRegion} via this ChannelOutboundInvoker and notify the {@link ChannelFuture}, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#sendFile(ChannelHandlerContext, FileRegion, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to bind to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation, +     * completes, either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#bind(ChannelHandlerContext, SocketAddress, ChannelPromise)} method, +     * called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to connect to the given {@link SocketAddress} and notify the {@link ChannelFuture} once the operation, +     * completes, either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#connect(ChannelHandlerContext, SocketAddress, SocketAddress, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to connect to the given {@link SocketAddress} while bind to the localAddress and notify the, +     * {@link ChannelFuture} once the operation completes, either because the operation was successful or because of, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#connect(ChannelHandlerContext, SocketAddress, SocketAddress, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to discconect from the remote peer and notify the {@link ChannelFuture} once the operation completes,, +     * either because the operation was successful or because of an error., +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#disconnect(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to close this ChannelOutboundInvoker and notify the {@link ChannelFuture} once the operation completes,, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#close(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the, +     * {@link Channel}., +     * Request to deregister this ChannelOutboundInvoker from the previous assigned {@link EventExecutor} and notify the, +     * <p>, +     * This will result in having the, +     * {@link ChannelOperationHandler#deregister(ChannelHandlerContext, ChannelPromise)}, +     * method called of the next {@link ChannelOperationHandler} contained in the  {@link ChannelPipeline} of the]