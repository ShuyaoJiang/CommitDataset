[+++ b/NOTICE.txt, +This product contains a modified portion of and optionally depends on 'Protocol Buffers', Google's data, +++ b/NOTICE.txt, +This product contains a modified portion of and optionally depends on 'Protocol Buffers', Google's data, +++ b/codec/pom.xml, +      <groupId>com.google.protobuf.nano</groupId>, +      <artifactId>protobuf-javanano</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/NOTICE.txt, +This product contains a modified portion of and optionally depends on 'Protocol Buffers', Google's data, +++ b/codec/pom.xml, +      <groupId>com.google.protobuf.nano</groupId>, +      <artifactId>protobuf-javanano</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/codec/src/main/java/io/netty/handler/codec/protobuf/ProtobufDecoder.java, + * Copyright 2015 The Netty Project, + * void channelRead({@link ChannelHandlerContext} ctx, Object msg) {, + *     MyMessage req = (MyMessage) msg;, +    protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out), +            throws Exception {, +                out.add(prototype.getParserForType().parseFrom(, +                        array, offset, length, extensionRegistry));, +                out.add(prototype.newBuilderForType().mergeFrom(, +                        array, offset, length, extensionRegistry).build());, +++ b/NOTICE.txt, +This product contains a modified portion of and optionally depends on 'Protocol Buffers', Google's data, +++ b/codec/pom.xml, +      <groupId>com.google.protobuf.nano</groupId>, +      <artifactId>protobuf-javanano</artifactId>, +      <optional>true</optional>, +    </dependency>, +    <dependency>, +++ b/codec/src/main/java/io/netty/handler/codec/protobuf/ProtobufDecoder.java, + * Copyright 2015 The Netty Project, + * void channelRead({@link ChannelHandlerContext} ctx, Object msg) {, + *     MyMessage req = (MyMessage) msg;, +    protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out), +            throws Exception {, +                out.add(prototype.getParserForType().parseFrom(, +                        array, offset, length, extensionRegistry));, +                out.add(prototype.newBuilderForType().mergeFrom(, +                        array, offset, length, extensionRegistry).build());, +++ b/codec/src/main/java/io/netty/handler/codec/protobuf/ProtobufDecoderNano.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.protobuf;, +, +import com.google.protobuf.nano.MessageNano;, +, +import java.util.List;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.ChannelHandler.Sharable;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.codec.ByteToMessageDecoder;, +import io.netty.handler.codec.LengthFieldBasedFrameDecoder;, +import io.netty.handler.codec.MessageToMessageDecoder;, +import io.netty.util.internal.ObjectUtil;, +, +/**, + * Decodes a received {@link ByteBuf} into a, + * <a href="http://code.google.com/p/protobuf/">Google Protocol Buffers</a>, + * {@link MessageNano}. Please note that this decoder must, + * be used with a proper {@link ByteToMessageDecoder} such as {@link LengthFieldBasedFrameDecoder}, + * if you are using a stream-based transport such as TCP/IP. A typical setup for TCP/IP would be:, + * <pre>, + * {@link ChannelPipeline} pipeline = ...;, + *, + * // Decoders, + * pipeline.addLast("frameDecoder",, + *                  new {@link LengthFieldBasedFrameDecoder}(1048576, 0, 4, 0, 4));, + * pipeline.addLast("protobufDecoder",, + *                  new {@link ProtobufDecoderNano}(MyMessage.getDefaultInstance()));, + *, + * // Encoder, + * pipeline.addLast("frameEncoder", new {@link io.netty.handler.codec.LengthFieldPrepender}(4));, + * pipeline.addLast("protobufEncoder", new {@link ProtobufEncoderNano}());, + * </pre>, + * and then you can use a {@code MyMessage} instead of a {@link ByteBuf}, + * as a message:, + * <pre>, + * void channelRead({@link ChannelHandlerContext} ctx, Object msg) {]