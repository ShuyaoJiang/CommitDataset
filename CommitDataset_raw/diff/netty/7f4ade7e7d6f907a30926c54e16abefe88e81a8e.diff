[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        cleanupSafely(ctx);, +        cleanupSafely(ctx);, +            decoder.finishAndReleaseAll();, +    private void cleanupSafely(ChannelHandlerContext ctx) {, +        try {, +            cleanup();, +        } catch (Throwable cause) {, +            // If cleanup throws any error we need to propagate it through the pipeline, +            // so we don't fail to propagate pipeline events., +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        cleanupSafely(ctx);, +        cleanupSafely(ctx);, +            decoder.finishAndReleaseAll();, +    private void cleanupSafely(ChannelHandlerContext ctx) {, +        try {, +            cleanup();, +        } catch (Throwable cause) {, +            // If cleanup throws any error we need to propagate it through the pipeline, +            // so we don't fail to propagate pipeline events., +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        cleanupSafely(ctx);, +        cleanupSafely(ctx);, +            encoder.finishAndReleaseAll();, +    private void cleanupSafely(ChannelHandlerContext ctx) {, +        try {, +            cleanup();, +        } catch (Throwable cause) {, +            // If cleanup throws any error we need to propagate it through the pipeline, +            // so we don't fail to propagate pipeline events., +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +        cleanupSafely(ctx);, +        cleanupSafely(ctx);, +            decoder.finishAndReleaseAll();, +    private void cleanupSafely(ChannelHandlerContext ctx) {, +        try {, +            cleanup();, +        } catch (Throwable cause) {, +            // If cleanup throws any error we need to propagate it through the pipeline, +            // so we don't fail to propagate pipeline events., +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +        cleanupSafely(ctx);, +        cleanupSafely(ctx);, +            encoder.finishAndReleaseAll();, +    private void cleanupSafely(ChannelHandlerContext ctx) {, +        try {, +            cleanup();, +        } catch (Throwable cause) {, +            // If cleanup throws any error we need to propagate it through the pipeline, +            // so we don't fail to propagate pipeline events., +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java, +import io.netty.handler.codec.CodecException;, +import io.netty.handler.codec.DecoderException;, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.junit.Assert.*;, +    @Test, +    public void testCleanupThrows() {, +        HttpContentDecoder decoder = new HttpContentDecoder() {, +            @Override, +            protected EmbeddedChannel newContentDecoder(String contentEncoding) throws Exception {, +                return new EmbeddedChannel(new ChannelInboundHandlerAdapter() {, +                    @Override, +                    public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +                        ctx.fireExceptionCaught(new DecoderException());, +                        ctx.fireChannelInactive();, +                    }, +                });, +            }, +        };, +, +        final AtomicBoolean channelInactiveCalled = new AtomicBoolean();, +        EmbeddedChannel channel = new EmbeddedChannel(decoder, new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelInactive(ChannelHandlerContext ctx) throws Exception {, +                assertTrue(channelInactiveCalled.compareAndSet(false, true));, +                super.channelInactive(ctx);, +            }, +        });, +        assertTrue(channel.writeInbound(new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/")));, +        HttpContent content = new DefaultHttpContent(Unpooled.buffer().writeZero(10));]