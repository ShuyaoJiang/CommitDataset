[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    /**, +     * Should be called by every method that tries to access the buffers content to check, +     * if the buffer was released before., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    /**, +     * Should be called by every method that tries to access the buffers content to check, +     * if the buffer was released before., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCounted.java, +/**, + * Abstract base class for classes wants to implement {@link ReferenceCounted}., + */, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    /**, +     * Should be called by every method that tries to access the buffers content to check, +     * if the buffer was released before., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCounted.java, +/**, + * Abstract base class for classes wants to implement {@link ReferenceCounted}., + */, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    /**, +     * Should be called by every method that tries to access the buffers content to check, +     * if the buffer was released before., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCounted.java, +/**, + * Abstract base class for classes wants to implement {@link ReferenceCounted}., + */, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    /**, +     * Creates a new {@link MessageBuf} with reasonably small initial capacity, which, +     * expands its capacity boundlessly on demand., +     */, +    /**, +     * Creates a new {@link MessageBuf} with the specified {@code initialCapacity}., +     */, +    /**, +     * Creates a new {@link MessageBuf} with the specified {@code initialCapacity} and, +     * {@code maxCapacity}., +     */, +    /**, +     * Creates a new {@link MessageBuf} which wraps the given {@code queue}., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    /**, +     * Should be called by every method that tries to access the buffers content to check, +     * if the buffer was released before., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCounted.java, +/**, + * Abstract base class for classes wants to implement {@link ReferenceCounted}., + */, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    /**, +     * Called once {@link #refCnt()} is equals 0., +     */, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +    /**, +     * Creates a new {@link MessageBuf} with reasonably small initial capacity, which, +     * expands its capacity boundlessly on demand., +     */, +    /**, +     * Creates a new {@link MessageBuf} with the specified {@code initialCapacity}., +     */, +    /**, +     * Creates a new {@link MessageBuf} with the specified {@code initialCapacity} and, +     * {@code maxCapacity}., +     */, +    /**, +     * Creates a new {@link MessageBuf} which wraps the given {@code queue}., +     */, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +    /**, +     * Default instance, +     */, +    /**]