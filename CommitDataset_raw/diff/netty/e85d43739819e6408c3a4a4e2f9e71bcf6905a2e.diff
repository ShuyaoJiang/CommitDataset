[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        this(alloc, direct, maxNumComponents, buffers, 0, buffers.length);, +    }, +, +    CompositeByteBuf(, +            ByteBufAllocator alloc, boolean direct, int maxNumComponents, ByteBuf[] buffers, int offset, int len) {, +        addComponents0(false, 0, buffers, offset, len);, +        addComponents0(increaseWriterIndex, components.size(), buffers, 0, buffers.length);, +        addComponents0(false, cIndex, buffers, 0, buffers.length);, +    private int addComponents0(boolean increaseWriterIndex, int cIndex, ByteBuf[] buffers, int offset, int len) {, +        int i = offset;, +            while (i < len) {, +            for (; i < len; ++i) {, +        return addComponents0(increaseIndex, cIndex, col.toArray(new ByteBuf[col.size()]), 0 , col.size());, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        this(alloc, direct, maxNumComponents, buffers, 0, buffers.length);, +    }, +, +    CompositeByteBuf(, +            ByteBufAllocator alloc, boolean direct, int maxNumComponents, ByteBuf[] buffers, int offset, int len) {, +        addComponents0(false, 0, buffers, offset, len);, +        addComponents0(increaseWriterIndex, components.size(), buffers, 0, buffers.length);, +        addComponents0(false, cIndex, buffers, 0, buffers.length);, +    private int addComponents0(boolean increaseWriterIndex, int cIndex, ByteBuf[] buffers, int offset, int len) {, +        int i = offset;, +            while (i < len) {, +            for (; i < len; ++i) {, +        return addComponents0(increaseIndex, cIndex, col.toArray(new ByteBuf[col.size()]), 0 , col.size());, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +            for (int i = 0; i < buffers.length; i++) {, +                ByteBuf buf = buffers[i];, +                if (buf.isReadable()) {, +                    return new CompositeByteBuf(ALLOC, false, maxNumComponents, buffers, i, buffers.length);, +                buf.release();, +            break;, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        this(alloc, direct, maxNumComponents, buffers, 0, buffers.length);, +    }, +, +    CompositeByteBuf(, +            ByteBufAllocator alloc, boolean direct, int maxNumComponents, ByteBuf[] buffers, int offset, int len) {, +        addComponents0(false, 0, buffers, offset, len);, +        addComponents0(increaseWriterIndex, components.size(), buffers, 0, buffers.length);, +        addComponents0(false, cIndex, buffers, 0, buffers.length);, +    private int addComponents0(boolean increaseWriterIndex, int cIndex, ByteBuf[] buffers, int offset, int len) {, +        int i = offset;, +            while (i < len) {, +            for (; i < len; ++i) {, +        return addComponents0(increaseIndex, cIndex, col.toArray(new ByteBuf[col.size()]), 0 , col.size());, +++ b/buffer/src/main/java/io/netty/buffer/Unpooled.java, +            for (int i = 0; i < buffers.length; i++) {, +                ByteBuf buf = buffers[i];, +                if (buf.isReadable()) {, +                    return new CompositeByteBuf(ALLOC, false, maxNumComponents, buffers, i, buffers.length);, +                buf.release();, +            break;, +++ b/buffer/src/test/java/io/netty/buffer/UnpooledTest.java, +, +    // See https://github.com/netty/netty/issues/5597, +    @Test, +    public void testWrapByteBufArrayStartsWithNonReadable() {, +        ByteBuf buffer1 = buffer(8);, +        ByteBuf buffer2 = buffer(8).writeZero(8); // Ensure the ByteBuf is readable., +        ByteBuf buffer3 = buffer(8);, +        ByteBuf buffer4 = buffer(8).writeZero(8); // Ensure the ByteBuf is readable., +, +        ByteBuf wrapped = wrappedBuffer(buffer1, buffer2, buffer3, buffer4);, +        assertEquals(16, wrapped.readableBytes());, +        assertTrue(wrapped.release());, +        assertEquals(0, buffer1.refCnt());, +        assertEquals(0, buffer2.refCnt());, +        assertEquals(0, buffer3.refCnt());, +        assertEquals(0, buffer4.refCnt());, +        assertEquals(0, wrapped.refCnt());, +    }]