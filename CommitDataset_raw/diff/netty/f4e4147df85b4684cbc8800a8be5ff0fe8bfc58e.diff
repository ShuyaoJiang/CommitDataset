[+++ b/common/src/main/java/io/netty/util/internal/logging/LocationAwareSlf4JLogger.java, +    static final String FQCN = LocationAwareSlf4JLogger.class.getName();, +    private void log(final int level, final String message) {, +        logger.log(null, FQCN, level, message, null, null);, +    private void log(final int level, final String message, Throwable cause) {, +        logger.log(null, FQCN, level, message, null, cause);, +    }, +, +    private void log(final int level, final org.slf4j.helpers.FormattingTuple tuple) {, +        logger.log(null, FQCN, level, tuple.getMessage(), tuple.getArgArray(), tuple.getThrowable());, +            log(TRACE_INT, msg);, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +++ b/common/src/main/java/io/netty/util/internal/logging/LocationAwareSlf4JLogger.java, +    static final String FQCN = LocationAwareSlf4JLogger.class.getName();, +    private void log(final int level, final String message) {, +        logger.log(null, FQCN, level, message, null, null);, +    private void log(final int level, final String message, Throwable cause) {, +        logger.log(null, FQCN, level, message, null, cause);, +    }, +, +    private void log(final int level, final org.slf4j.helpers.FormattingTuple tuple) {, +        logger.log(null, FQCN, level, tuple.getMessage(), tuple.getArgArray(), tuple.getThrowable());, +            log(TRACE_INT, msg);, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(TRACE_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(DEBUG_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(INFO_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +            log(WARN_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, arg));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, argA, argB));, +            log(ERROR_INT, org.slf4j.helpers.MessageFormatter.format(format, argArray));, +++ b/common/src/test/java/io/netty/util/internal/logging/Slf4JLoggerFactoryTest.java, +import org.mockito.ArgumentCaptor;, +import org.mockito.ArgumentMatchers;, +import org.slf4j.Marker;, +import java.util.Iterator;, +, +import static org.junit.Assert.assertFalse;, +import static org.mockito.ArgumentMatchers.*;, +import static org.mockito.Mockito.*;, +, +    @Test, +    public void testFormatMessage() {, +        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);, +        LocationAwareLogger logger = mock(LocationAwareLogger.class);, +        when(logger.isDebugEnabled()).thenReturn(true);, +        when(logger.isErrorEnabled()).thenReturn(true);, +        when(logger.isInfoEnabled()).thenReturn(true);, +        when(logger.isTraceEnabled()).thenReturn(true);, +        when(logger.isWarnEnabled()).thenReturn(true);, +        when(logger.getName()).thenReturn("testlogger");, +, +        InternalLogger internalLogger = Slf4JLoggerFactory.wrapLogger(logger);, +        internalLogger.debug("{}", "debug");, +        internalLogger.debug("{} {}", "debug1", "debug2");, +, +        internalLogger.error("{}", "error");, +        internalLogger.error("{} {}", "error1", "error2");, +, +        internalLogger.info("{}", "info");, +        internalLogger.info("{} {}", "info1", "info2");, +, +        internalLogger.trace("{}", "trace");, +        internalLogger.trace("{} {}", "trace1", "trace2");, +, +        internalLogger.warn("{}", "warn");, +        internalLogger.warn("{} {}", "warn1", "warn2");, +, +        verify(logger, times(2)).log(ArgumentMatchers.<Marker>isNull(), eq(LocationAwareSlf4JLogger.FQCN),, +                eq(LocationAwareLogger.DEBUG_INT), captor.capture(), any(Object[].class),, +                ArgumentMatchers.<Throwable>isNull());, +        verify(logger, times(2)).log(ArgumentMatchers.<Marker>isNull(), eq(LocationAwareSlf4JLogger.FQCN),, +                eq(LocationAwareLogger.ERROR_INT), captor.capture(), any(Object[].class),, +                ArgumentMatchers.<Throwable>isNull());, +        verify(logger, times(2)).log(ArgumentMatchers.<Marker>isNull(), eq(LocationAwareSlf4JLogger.FQCN),, +                eq(LocationAwareLogger.INFO_INT), captor.capture(), any(Object[].class),, +                ArgumentMatchers.<Throwable>isNull());, +        verify(logger, times(2)).log(ArgumentMatchers.<Marker>isNull(), eq(LocationAwareSlf4JLogger.FQCN),, +                eq(LocationAwareLogger.TRACE_INT), captor.capture(), any(Object[].class),]