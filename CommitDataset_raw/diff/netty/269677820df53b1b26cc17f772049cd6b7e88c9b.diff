[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + * Return Code of {@link MqttConnAckMessage}, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + * Return Code of {@link MqttConnAckMessage}, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java, +public final class MqttConnectVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + * Return Code of {@link MqttConnAckMessage}, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java, +public final class MqttConnectVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +public final class MqttDecoder extends ReplayingDecoder<DecoderState> {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + * Return Code of {@link MqttConnAckMessage}, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java, +public final class MqttConnectVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +public final class MqttDecoder extends ReplayingDecoder<DecoderState> {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +import io.netty.util.internal.EmptyArrays;, + * Encodes Mqtt messages into bytes following the protocol specification v3.1, +public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {, +    public static final MqttEncoder INSTANCE = new MqttEncoder();, +    private MqttEncoder() { }, +        byte[] willTopicBytes = willTopic != null ? encodeStringUtf8(willTopic) : EmptyArrays.EMPTY_BYTES;, +        byte[] willMessageBytes = willMessage != null ? encodeStringUtf8(willMessage) : EmptyArrays.EMPTY_BYTES;, +        byte[] userNameBytes = userName != null ? encodeStringUtf8(userName) : EmptyArrays.EMPTY_BYTES;, +        byte[] passwordBytes = password != null ? encodeStringUtf8(password) : EmptyArrays.EMPTY_BYTES;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +        }, +        if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +public final class MqttConnAckVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java, +public final class MqttConnectPayload {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java, + * Return Code of {@link MqttConnAckMessage}, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java, +public final class MqttConnectVariableHeader {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +public final class MqttDecoder extends ReplayingDecoder<DecoderState> {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +import io.netty.util.internal.EmptyArrays;, + * Encodes Mqtt messages into bytes following the protocol specification v3.1, +public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {, +    public static final MqttEncoder INSTANCE = new MqttEncoder();, +    private MqttEncoder() { }, +        byte[] willTopicBytes = willTopic != null ? encodeStringUtf8(willTopic) : EmptyArrays.EMPTY_BYTES;, +        byte[] willMessageBytes = willMessage != null ? encodeStringUtf8(willMessage) : EmptyArrays.EMPTY_BYTES;, +        byte[] userNameBytes = userName != null ? encodeStringUtf8(userName) : EmptyArrays.EMPTY_BYTES;, +        byte[] passwordBytes = password != null ? encodeStringUtf8(password) : EmptyArrays.EMPTY_BYTES;, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttFixedHeader.java, +import io.netty.util.internal.ObjectUtil;, +public final class MqttFixedHeader {, +        this.messageType = ObjectUtil.checkNotNull(messageType, "messageType");, +        this.qosLevel = ObjectUtil.checkNotNull(qosLevel, "qosLevel");, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java]