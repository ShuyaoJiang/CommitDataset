[+++ b/handler/src/main/java/io/netty/handler/traffic/TrafficCounter.java, +import java.util.concurrent.TimeUnit;, +import io.netty.util.Timeout;, +import io.netty.util.Timer;, +import io.netty.util.TimerTask;, +    private final AbstractTrafficShapingHandler trafficShapingHandler;, +     * One Timer for all Counter, +    private final Timer timer;  // replace executor, +    /**, +     * Monitor created once in start(), +     */, +    private TimerTask timerTask;, +    /**, +     * used in stop() to cancel the timer, +     */, +    volatile private Timeout timeout = null;, +     *, +    private static class TrafficMonitoringTask implements TimerTask {, +        protected TrafficMonitoringTask(, +        public void run(Timeout timeout) throws Exception {, +            if (!counter.monitorActive.get()) {, +            timeout = , +                counter.timer.newTimeout(this, counter.checkInterval.get(), TimeUnit.MILLISECONDS);                        , +                timerTask = new TrafficMonitoringTask(trafficShapingHandler, this);, +                timeout = , +                    timer.newTimeout(timerTask, checkInterval.get(), TimeUnit.MILLISECONDS);, +            if (timeout != null) {, +                timeout.cancel();, +            }, +     * Constructor with the {@link AbstractTrafficShapingHandler} that hosts it, the Timer to use, its, +     * @param timer, +     *            Could be a HashedWheelTimer, +            Timer timer, String name, long checkInterval) {, +        this.timer = timer;]