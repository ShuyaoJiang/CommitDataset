[+++ b/handler/src/main/java/io/netty/handler/ssl/AbstractSniHandler.java, +                                                                                CharsetUtil.US_ASCII);, +                                                select(ctx, hostname.toLowerCase(Locale.US));, +++ b/handler/src/main/java/io/netty/handler/ssl/AbstractSniHandler.java, +                                                                                CharsetUtil.US_ASCII);, +                                                select(ctx, hostname.toLowerCase(Locale.US));, +++ b/handler/src/test/java/io/netty/handler/ssl/SniHandlerTest.java, +            try {, +                // hex dump of a client hello packet, which contains hostname "CHAT4.LEANCLOUD.CN", +                String tlsHandshakeMessageHex1 = "16030100";, +                // part 2, +                String tlsHandshakeMessageHex = "c6010000c20303bb0855d66532c05a0ef784f7c384feeafa68b3" +, +                        "b655ac7288650d5eed4aa3fb52000038c02cc030009fcca9cca8ccaac02b" +, +                        "c02f009ec024c028006bc023c0270067c00ac0140039c009c0130033009d" +, +                        "009c003d003c0035002f00ff010000610000001700150000124348415434" +, +                        "2e4c45414e434c4f55442e434e000b000403000102000a000a0008001d00" +, +                        "170019001800230000000d0020001e060106020603050105020503040104" +, +                        "0204030301030203030201020202030016000000170000";, +, +                ch.writeInbound(Unpooled.wrappedBuffer(DatatypeConverter.parseHexBinary(tlsHandshakeMessageHex1)));, +                ch.writeInbound(Unpooled.wrappedBuffer(DatatypeConverter.parseHexBinary(tlsHandshakeMessageHex)));, +, +                // This should produce an alert, +                assertTrue(ch.finish());, +, +                assertThat(handler.hostname(), is("chat4.leancloud.cn"));, +                assertThat(handler.sslContext(), is(leanContext));, +            } finally {, +                ch.finishAndReleaseAll();, +            }, +        } finally {, +            releaseAll(leanContext, leanContext2, nettyContext);, +        }, +    }, +, +    @Test(expected = DecoderException.class), +    public void testNonAsciiServerNameParsing() throws Exception {, +        SslContext nettyContext = makeSslContext(provider, false);, +        SslContext leanContext = makeSslContext(provider, false);, +        SslContext leanContext2 = makeSslContext(provider, false);, +, +        try {, +            DomainNameMapping<SslContext> mapping = new DomainNameMappingBuilder<SslContext>(nettyContext), +                    .add("*.netty.io", nettyContext), +                    // input with custom cases, +                    .add("*.LEANCLOUD.CN", leanContext), +                    // a hostname conflict with previous one, since we are using order-sensitive config,, +                    // the engine won't be used with the handler., +                    .add("chat4.leancloud.cn", leanContext2), +                    .build();, +, +            SniHandler handler = new SniHandler(mapping);, +            EmbeddedChannel ch = new EmbeddedChannel(handler);, +, +            try {, +                // hex dump of a client hello packet, which contains an invalid hostname "CHAT4。LEANCLOUD。CN", +                // Decode should fail because of the badly encoded "HostName" string in the SNI extension, +                // that isn't ASCII as per RFC 6066 - https://tools.ietf.org/html/rfc6066#page-6, +            } finally {, +                ch.finishAndReleaseAll();]