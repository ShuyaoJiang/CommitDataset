[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +    public ChannelFuture handshake(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        return handshake(channel, channel.newFuture());, +    }, +, +    /**, +     * Begins the opening handshake, +     *, +     * @param channel, +     *            Channel, +     * @param future, +     *            the {@link ChannelFuture} to be notified when the opening handshake is sent, +     */, +    public abstract ChannelFuture handshake(Channel channel, ChannelFuture future);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +    public ChannelFuture handshake(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        return handshake(channel, channel.newFuture());, +    }, +, +    /**, +     * Begins the opening handshake, +     *, +     * @param channel, +     *            Channel, +     * @param future, +     *            the {@link ChannelFuture} to be notified when the opening handshake is sent, +     */, +    public abstract ChannelFuture handshake(Channel channel, ChannelFuture future);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +    public ChannelFuture handshake(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        return handshake(channel, channel.newFuture());, +    }, +, +    /**, +     * Begins the opening handshake, +     *, +     * @param channel, +     *            Channel, +     * @param future, +     *            the {@link ChannelFuture} to be notified when the opening handshake is sent, +     */, +    public abstract ChannelFuture handshake(Channel channel, ChannelFuture future);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +    public ChannelFuture handshake(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        return handshake(channel, channel.newFuture());, +    }, +, +    /**, +     * Begins the opening handshake, +     *, +     * @param channel, +     *            Channel, +     * @param future, +     *            the {@link ChannelFuture} to be notified when the opening handshake is sent, +     */, +    public abstract ChannelFuture handshake(Channel channel, ChannelFuture future);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +    public ChannelFuture handshake(Channel channel) {, +        if (channel == null) {, +            throw new NullPointerException("channel");, +        }, +        return handshake(channel, channel.newFuture());, +    }, +, +    /**, +     * Begins the opening handshake, +     *, +     * @param channel, +     *            Channel, +     * @param future, +     *            the {@link ChannelFuture} to be notified when the opening handshake is sent, +     */, +    public abstract ChannelFuture handshake(Channel channel, ChannelFuture future);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +    public ChannelFuture handshake(Channel channel, final ChannelFuture handshakeFuture) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java]