[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.handler.codec.http.HttpUtil;, +        respond(ctx, request, response);, +        respond(ctx, request, new DefaultFullHttpResponse(request.protocolVersion(), FORBIDDEN));, +    }, +, +    private static void respond(, +            final ChannelHandlerContext ctx,, +            final HttpRequest request,, +            final HttpResponse response) {, +, +        final boolean keepAlive = HttpUtil.isKeepAlive(request);, +, +        HttpUtil.setKeepAlive(response, keepAlive);, +, +        final ChannelFuture future = ctx.writeAndFlush(response);, +        if (!keepAlive) {, +            future.addListener(ChannelFutureListener.CLOSE);, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import io.netty.channel.ChannelFuture;, +import io.netty.handler.codec.http.HttpUtil;, +        respond(ctx, request, response);, +        respond(ctx, request, new DefaultFullHttpResponse(request.protocolVersion(), FORBIDDEN));, +    }, +, +    private static void respond(, +            final ChannelHandlerContext ctx,, +            final HttpRequest request,, +            final HttpResponse response) {, +, +        final boolean keepAlive = HttpUtil.isKeepAlive(request);, +, +        HttpUtil.setKeepAlive(response, keepAlive);, +, +        final ChannelFuture future = ctx.writeAndFlush(response);, +        if (!keepAlive) {, +            future.addListener(ChannelFutureListener.CLOSE);, +        }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/cors/CorsHandlerTest.java, +import io.netty.handler.codec.http.HttpUtil;, +import io.netty.util.AsciiString;, +import io.netty.util.ReferenceCountUtil;, +import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;, +import static io.netty.handler.codec.http.HttpHeaderValues.KEEP_ALIVE;, +import static io.netty.handler.codec.http.HttpHeaderValues.CLOSE;, +    public void shortCurcuitWithConnectionKeepAliveShouldStayOpen() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +        request.headers().set(CONNECTION, KEEP_ALIVE);, +, +        assertThat(channel.writeInbound(request), is(false));, +        final HttpResponse response = channel.readOutbound();, +        assertThat(HttpUtil.isKeepAlive(response), is(true));, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(FORBIDDEN));, +        assertThat(ReferenceCountUtil.release(response), is(true));, +        assertThat(channel.finish(), is(false));, +    }, +, +    @Test, +    public void shortCurcuitWithoutConnectionShouldStayOpen() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +, +        assertThat(channel.writeInbound(request), is(false));, +        final HttpResponse response = channel.readOutbound();, +        assertThat(HttpUtil.isKeepAlive(response), is(true));, +, +        assertThat(channel.isOpen(), is(true));, +        assertThat(response.status(), is(FORBIDDEN));, +        assertThat(ReferenceCountUtil.release(response), is(true));, +        assertThat(channel.finish(), is(false));, +    }, +, +    @Test, +    public void shortCurcuitWithConnectionCloseShouldClose() {, +        final CorsConfig config = forOrigin("http://localhost:8080").shortCircuit().build();, +        final EmbeddedChannel channel = new EmbeddedChannel(new CorsHandler(config));, +        final FullHttpRequest request = createHttpRequest(GET);, +        request.headers().set(ORIGIN, "http://localhost:8888");, +        request.headers().set(CONNECTION, CLOSE);, +, +        assertThat(channel.writeInbound(request), is(false));, +        final HttpResponse response = channel.readOutbound();, +        assertThat(HttpUtil.isKeepAlive(response), is(false));, +, +        assertThat(channel.isOpen(), is(false));, +        assertThat(response.status(), is(FORBIDDEN));, +        assertThat(ReferenceCountUtil.release(response), is(true));, +        assertThat(channel.finish(), is(false));, +    }, +, +    @Test]