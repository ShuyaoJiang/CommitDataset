[+++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.channel.EventLoop;, +, +    /**, +     * Deregister all {@link Channel}s in this group from their {@link EventLoop}., +     * Please note that this operation is asynchronous as {@link Channel#deregister()} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture deregister();, +++ b/transport/src/main/java/io/netty/channel/group/ChannelGroup.java, +import io.netty.channel.EventLoop;, +, +    /**, +     * Deregister all {@link Channel}s in this group from their {@link EventLoop}., +     * Please note that this operation is asynchronous as {@link Channel#deregister()} is., +     *, +     * @return the {@link ChannelGroupFuture} instance that notifies when, +     *         the operation is done for all channels, +     */, +    ChannelGroupFuture deregister();, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +    public ChannelGroupFuture deregister() {, +        Map<Integer, ChannelFuture> futures =, +                new LinkedHashMap<Integer, ChannelFuture>(size());, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.id(), c.deregister());, +        }, +        for (Channel c: nonServerChannels.values()) {, +            futures.put(c.id(), c.deregister());, +        }, +, +        return new DefaultChannelGroupFuture(this, futures);, +    }, +, +    @Override]