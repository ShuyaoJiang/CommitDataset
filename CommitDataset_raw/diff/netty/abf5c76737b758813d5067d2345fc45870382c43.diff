[+++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, + * <p>, + * In spite of the disadvantages mentioned above, there are certainly cases, + * where it is more convenient to call {@link #await()}. In such a case, please, + * make sure you do not call {@link #await()} in an I/O thread.  Otherwise,, + * {@link IllegalStateException} will be raised to avoid a dead lock., +++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, + * <p>, + * In spite of the disadvantages mentioned above, there are certainly cases, + * where it is more convenient to call {@link #await()}. In such a case, please, + * make sure you do not call {@link #await()} in an I/O thread.  Otherwise,, + * {@link IllegalStateException} will be raised to avoid a dead lock., +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroup.java, + * <h3>Broadcast a message to multiple {@link Channel}s</h3>, + * <p>, + * If you need to broadcast a message to more than one {@link Channel}, you can, + * add the {@link Channel}s associated with the recipients and call {@link ChannelGroup#write(Object)}:, + * <pre>, + * <strong>ChannelGroup recipients = new DefaultChannelGroup();</strong>, + * recipients.add(channelA);, + * recipients.add(channelB);, + * .., + * <strong>recipients.write(ChannelBuffers.copiedBuffer(, + *         "Service will shut down for maintenance in 5 minutes.", "UTF-8"));</strong>, + * </pre>, + *, + * <strong>ChannelGroup allChannels = new DefaultChannelGroup();</strong>, + *     <strong>allChannels.add(serverChannel);<strong>, + *     <strong>allChannels.close().awaitUninterruptibly();</strong>, + *         <strong>allChannels.add(e.getChannel());</strong>, +++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, + * <p>, + * In spite of the disadvantages mentioned above, there are certainly cases, + * where it is more convenient to call {@link #await()}. In such a case, please, + * make sure you do not call {@link #await()} in an I/O thread.  Otherwise,, + * {@link IllegalStateException} will be raised to avoid a dead lock., +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroup.java, + * <h3>Broadcast a message to multiple {@link Channel}s</h3>, + * <p>, + * If you need to broadcast a message to more than one {@link Channel}, you can, + * add the {@link Channel}s associated with the recipients and call {@link ChannelGroup#write(Object)}:, + * <pre>, + * <strong>ChannelGroup recipients = new DefaultChannelGroup();</strong>, + * recipients.add(channelA);, + * recipients.add(channelB);, + * .., + * <strong>recipients.write(ChannelBuffers.copiedBuffer(, + *         "Service will shut down for maintenance in 5 minutes.", "UTF-8"));</strong>, + * </pre>, + *, + * <strong>ChannelGroup allChannels = new DefaultChannelGroup();</strong>, + *     <strong>allChannels.add(serverChannel);<strong>, + *     <strong>allChannels.close().awaitUninterruptibly();</strong>, + *         <strong>allChannels.add(e.getChannel());</strong>, +++ b/src/main/java/org/jboss/netty/channel/group/ChannelGroupFuture.java, + * <p>, + * In spite of the disadvantages mentioned above, there are certainly cases, + * where it is more convenient to call {@link #await()}. In such a case, please, + * make sure you do not call {@link #await()} in an I/O thread.  Otherwise,, + * {@link IllegalStateException} will be raised to avoid a dead lock.]