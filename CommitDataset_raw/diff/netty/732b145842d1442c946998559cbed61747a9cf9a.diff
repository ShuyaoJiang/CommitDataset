[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, +     * Returns the graceful shutdown timeout of the {@link Http2Connection} in milliseconds. Returns -1 if the, +     * timeout is indefinite., +        if (gracefulShutdownTimeoutMillis < -1) {, +            throw new IllegalArgumentException("gracefulShutdownTimeoutMillis: " + gracefulShutdownTimeoutMillis +, +                                               " (expected: -1 for indefinite or >= 0)");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, +     * Returns the graceful shutdown timeout of the {@link Http2Connection} in milliseconds. Returns -1 if the, +     * timeout is indefinite., +        if (gracefulShutdownTimeoutMillis < -1) {, +            throw new IllegalArgumentException("gracefulShutdownTimeoutMillis: " + gracefulShutdownTimeoutMillis +, +                                               " (expected: -1 for indefinite or >= 0)");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +     * the connection during the graceful shutdown process. Returns -1 if this connection is configured to wait, +     * indefinitely for all streams to close., +        if (gracefulShutdownTimeoutMillis < -1) {, +                                               " (expected: -1 for indefinite or >= 0)");, +            if (gracefulShutdownTimeoutMillis < 0) {, +                closeListener = new ClosingChannelFutureListener(ctx, promise);, +            } else {, +    }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, +     * Returns the graceful shutdown timeout of the {@link Http2Connection} in milliseconds. Returns -1 if the, +     * timeout is indefinite., +        if (gracefulShutdownTimeoutMillis < -1) {, +            throw new IllegalArgumentException("gracefulShutdownTimeoutMillis: " + gracefulShutdownTimeoutMillis +, +                                               " (expected: -1 for indefinite or >= 0)");, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +     * the connection during the graceful shutdown process. Returns -1 if this connection is configured to wait, +     * indefinitely for all streams to close., +        if (gracefulShutdownTimeoutMillis < -1) {, +                                               " (expected: -1 for indefinite or >= 0)");, +            if (gracefulShutdownTimeoutMillis < 0) {, +                closeListener = new ClosingChannelFutureListener(ctx, promise);, +            } else {, +    }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2ConnectionHandlerTest.java, +import java.util.concurrent.TimeUnit;, +    @Test, +    public void gracefulShutdownTimeoutTest() throws Exception {, +        handler = newHandler();, +        final long expectedMillis = 1234;, +        handler.gracefulShutdownTimeoutMillis(expectedMillis);, +        handler.close(ctx, promise);, +        verify(executor).schedule(any(Runnable.class), eq(expectedMillis), eq(TimeUnit.MILLISECONDS));, +    }, +, +    @Test, +    public void gracefulShutdownIndefiniteTimeoutTest() throws Exception {, +        handler = newHandler();, +        handler.gracefulShutdownTimeoutMillis(-1);, +        handler.close(ctx, promise);, +        verify(executor, never()).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class));, +    }, +]