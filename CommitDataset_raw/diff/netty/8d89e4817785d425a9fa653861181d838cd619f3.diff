[+++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +/**, + * Abstract base class for OIO which reads and writes bytes from/to a Socket, + */, +    /**, +     * @see AbstractOioByteChannel#AbstractOioByteChannel(Channel, Integer), +     */, +    protected AbstractOioUnsafe newUnsafe() {, +    /**, +     * Return the number of bytes ready to read from the underlying Socket., +     */, +, +    /**, +     * Read bytes from the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} into which the read bytes will be written, +     * @return amount       the number of bytes read. This may return a negative amount if the underlying, +     *                      Socket was closed, +     * @throws Exception    is thrown if an error accoured, +     */, +, +    /**, +     * Write the data which is hold by the {@link ByteBuf} to the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} which holds the data to transfer, +     * @throws Exception    is thrown if an error accoured, +     */, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +/**, + * Abstract base class for OIO which reads and writes bytes from/to a Socket, + */, +    /**, +     * @see AbstractOioByteChannel#AbstractOioByteChannel(Channel, Integer), +     */, +    protected AbstractOioUnsafe newUnsafe() {, +    /**, +     * Return the number of bytes ready to read from the underlying Socket., +     */, +, +    /**, +     * Read bytes from the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} into which the read bytes will be written, +     * @return amount       the number of bytes read. This may return a negative amount if the underlying, +     *                      Socket was closed, +     * @throws Exception    is thrown if an error accoured, +     */, +, +    /**, +     * Write the data which is hold by the {@link ByteBuf} to the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} which holds the data to transfer, +     * @throws Exception    is thrown if an error accoured, +     */, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations that use Old-Blocking-IO, + */, +    /**, +     * @see AbstractChannel#AbstractChannel(io.netty.channel.Channel, Integer), +     */, +    /**, +     * Connect to the remote peer using the given localAddress if one is specified or null otherwise., +     */, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +/**, + * Abstract base class for OIO which reads and writes bytes from/to a Socket, + */, +    /**, +     * @see AbstractOioByteChannel#AbstractOioByteChannel(Channel, Integer), +     */, +    protected AbstractOioUnsafe newUnsafe() {, +    /**, +     * Return the number of bytes ready to read from the underlying Socket., +     */, +, +    /**, +     * Read bytes from the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} into which the read bytes will be written, +     * @return amount       the number of bytes read. This may return a negative amount if the underlying, +     *                      Socket was closed, +     * @throws Exception    is thrown if an error accoured, +     */, +, +    /**, +     * Write the data which is hold by the {@link ByteBuf} to the underlying Socket., +     *, +     * @param buf           the {@link ByteBuf} which holds the data to transfer, +     * @throws Exception    is thrown if an error accoured, +     */, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations that use Old-Blocking-IO, + */, +    /**, +     * @see AbstractChannel#AbstractChannel(io.netty.channel.Channel, Integer), +     */, +    /**, +     * Connect to the remote peer using the given localAddress if one is specified or null otherwise.]