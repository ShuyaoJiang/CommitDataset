[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    private static final AtomicIntegerFieldUpdater<SingleThreadEventExecutor> STATE_UPDATER;, +, +    static {, +        AtomicIntegerFieldUpdater<SingleThreadEventExecutor> updater =, +                PlatformDependent.newAtomicIntegerFieldUpdater(SingleThreadEventExecutor.class, "state");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(SingleThreadEventExecutor.class, "state");, +        }, +        STATE_UPDATER = updater;, +    }, +, +, +    @SuppressWarnings({ "FieldMayBeFinal", "unused" }), +, +        if (!inEventLoop || STATE_UPDATER.get(this) == ST_SHUTTING_DOWN) {, +        boolean wakeup;, +        int oldState;, +        for (;;) {, +            int newState;, +            wakeup = true;, +            oldState = STATE_UPDATER.get(this);, +                newState = ST_SHUTTING_DOWN;, +                switch (oldState) {, +                        newState = ST_SHUTTING_DOWN;, +                        newState = oldState;, +            if (STATE_UPDATER.compareAndSet(this, oldState, newState)) {, +                break;, +            }, +        }, +        gracefulShutdownQuietPeriod = unit.toNanos(quietPeriod);, +        gracefulShutdownTimeout = unit.toNanos(timeout);, +, +        if (oldState == ST_NOT_STARTED) {, +            doStartThread();, +        boolean wakeup;, +        int oldState;, +        for (;;) {, +            if (isShuttingDown()) {, +            int newState;, +            wakeup = true;, +            oldState = STATE_UPDATER.get(this);, +                newState = ST_SHUTDOWN;, +                switch (oldState) {, +                        newState = ST_SHUTDOWN;, +                        newState = oldState;, +            if (STATE_UPDATER.compareAndSet(this, oldState, newState)) {, +                break;, +            }, +        }, +, +        if (oldState == ST_NOT_STARTED) {, +            doStartThread();, +        return STATE_UPDATER.get(this) >= ST_SHUTTING_DOWN;, +        return STATE_UPDATER.get(this) >= ST_SHUTDOWN;, +        return STATE_UPDATER.get(this) == ST_TERMINATED;, +        if (STATE_UPDATER.get(this) == ST_NOT_STARTED) {, +            if (STATE_UPDATER.compareAndSet(this, ST_NOT_STARTED, ST_STARTED)) {, +                    for (;;) {, +                        int oldState = STATE_UPDATER.get(SingleThreadEventExecutor.this);, +                        if (oldState >= ST_SHUTTING_DOWN || STATE_UPDATER.compareAndSet(, +                                SingleThreadEventExecutor.this, oldState, ST_SHUTTING_DOWN)) {, +                            break;, +                        }, +                            STATE_UPDATER.set(SingleThreadEventExecutor.this, ST_TERMINATED);]