[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.buffer.CompositeByteBuf;, +        testGatheringWrite0(sb, cb, false);, +    }, +, +    @Test(timeout = 30000), +    public void testGatheringWriteWithComposite() throws Throwable {, +        run();, +    }, +, +    public void testGatheringWriteWithComposite(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testGatheringWrite0(sb, cb, true);, +    }, +, +    private static void testGatheringWrite0(ServerBootstrap sb, Bootstrap cb, boolean composite) throws Throwable {, +            if (composite && i % 2 == 0) {, +                int split =  buf.readableBytes() / 2;, +                int size = buf.readableBytes() - split;, +                int oldIndex = buf.writerIndex();, +                buf.writerIndex(split);, +                ByteBuf buf2 = Unpooled.buffer(size).writeBytes(buf, split, oldIndex - split);, +                CompositeByteBuf comp = Unpooled.compositeBuffer();, +                comp.addComponent(buf).addComponent(buf2).writerIndex(length);, +                messages.add(comp);, +            } else {, +            }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.buffer.CompositeByteBuf;, +        testGatheringWrite0(sb, cb, false);, +    }, +, +    @Test(timeout = 30000), +    public void testGatheringWriteWithComposite() throws Throwable {, +        run();, +    }, +, +    public void testGatheringWriteWithComposite(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testGatheringWrite0(sb, cb, true);, +    }, +, +    private static void testGatheringWrite0(ServerBootstrap sb, Bootstrap cb, boolean composite) throws Throwable {, +            if (composite && i % 2 == 0) {, +                int split =  buf.readableBytes() / 2;, +                int size = buf.readableBytes() - split;, +                int oldIndex = buf.writerIndex();, +                buf.writerIndex(split);, +                ByteBuf buf2 = Unpooled.buffer(size).writeBytes(buf, split, oldIndex - split);, +                CompositeByteBuf comp = Unpooled.compositeBuffer();, +                comp.addComponent(buf).addComponent(buf2).writerIndex(length);, +                messages.add(comp);, +            } else {, +            }, +++ b/transport/src/main/java/io/netty/channel/MessageList.java, +import io.netty.buffer.ByteBuf;, +    private boolean byteBufsOnly = true;, +        if (byteBufsOnly && !(value instanceof ByteBuf)) {, +            byteBufsOnly = false;, +        }, +        if (byteBufsOnly) {, +            for (int i = srcIdx; i < srcIdx; i++) {, +                if (!(src[i] instanceof ByteBuf)) {, +                    byteBufsOnly = false;, +                    break;, +                }, +            }, +        }, +, +        byteBufsOnly = true;, +    /**, +     * Returns {@code true} if all messages contained in this {@link MessageList} are assignment-compatible with the, +     * object represented by this {@link Class}., +     */, +    public boolean containsOnly(Class<?> clazz) {, +        if (clazz == ByteBuf.class) {, +            return byteBufsOnly;, +        }, +        for (int i = 0; i < size; i++) {, +            if (!clazz.isInstance(elements[i])) {, +                return false;, +            }, +        }, +        return true;, +    }, +, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketGatheringWriteTest.java, +import io.netty.buffer.CompositeByteBuf;, +        testGatheringWrite0(sb, cb, false);, +    }, +, +    @Test(timeout = 30000), +    public void testGatheringWriteWithComposite() throws Throwable {, +        run();, +    }, +, +    public void testGatheringWriteWithComposite(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testGatheringWrite0(sb, cb, true);, +    }, +, +    private static void testGatheringWrite0(ServerBootstrap sb, Bootstrap cb, boolean composite) throws Throwable {, +            if (composite && i % 2 == 0) {]