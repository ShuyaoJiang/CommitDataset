[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        closeHeadersContinuation();, +    }, +, +    private void closeHeadersContinuation() {, +            headersContinuation = null;, +    private void verifyUnknownFrame() throws Http2Exception {, +        if (headersContinuation != null) {, +            int streamId = headersContinuation.getStreamId();, +            closeHeadersContinuation();, +            throw connectionError(PROTOCOL_ERROR, "Extension frames must not be in the middle of headers ", +                    + "on stream %d", streamId);, +        }, +    }, +, +            resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +    }, +, +    private void resetHeadersContinuationIfEnd(boolean endOfHeaders) {, +        if (endOfHeaders) {, +            closeHeadersContinuation();, +        }, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        verifyUnknownFrame();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +        closeHeadersContinuation();, +    }, +, +    private void closeHeadersContinuation() {, +            headersContinuation = null;, +    private void verifyUnknownFrame() throws Http2Exception {, +        if (headersContinuation != null) {, +            int streamId = headersContinuation.getStreamId();, +            closeHeadersContinuation();, +            throw connectionError(PROTOCOL_ERROR, "Extension frames must not be in the middle of headers ", +                    + "on stream %d", streamId);, +        }, +    }, +, +            resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +    }, +, +    private void resetHeadersContinuationIfEnd(boolean endOfHeaders) {, +        if (endOfHeaders) {, +            closeHeadersContinuation();, +        }, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        resetHeadersContinuationIfEnd(flags.endOfHeaders());, +        verifyUnknownFrame();, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2FrameReaderTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.handler.codec.http2;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +import io.netty.buffer.UnpooledByteBufAllocator;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.handler.codec.http2.internal.hpack.Encoder;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +import static io.netty.handler.codec.http2.Http2FrameTypes.CONTINUATION;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +import static io.netty.handler.codec.http2.Http2CodecUtil.writeFrameHeader;, +import static io.netty.handler.codec.http2.Http2FrameTypes.HEADERS;, +, +/**, + * Tests for {@link DefaultHttp2FrameReader}., + */, +public class DefaultHttp2FrameReaderTest {, +    @Mock, +    private Http2FrameListener listener;, +, +    @Mock, +    private ChannelHandlerContext ctx;, +, +    private DefaultHttp2FrameReader frameReader;, +, +    // Used to generate frame, +    private Encoder encoder;]