[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.buffer.Unpooled;, +, +                        // IllegalStateException will be thrown as we did not write anything, +                        // Its ok to just write an EMPTY_BUFFER as if there are reference count issues these will be, +                        // propagated as the caller of the encode(...) method will release the original, +                        // buffer., +                        // Writing an empty buffer will not actually write anything on the wire, so if there is a user, +                        // error with msg it will not be visible externally, +                        out.add(Unpooled.EMPTY_BUFFER);, +            out.add(encodeAndRetain(msg));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectEncoder.java, +import io.netty.buffer.Unpooled;, +, +                        // IllegalStateException will be thrown as we did not write anything, +                        // Its ok to just write an EMPTY_BUFFER as if there are reference count issues these will be, +                        // propagated as the caller of the encode(...) method will release the original, +                        // buffer., +                        // Writing an empty buffer will not actually write anything on the wire, so if there is a user, +                        // error with msg it will not be visible externally, +                        out.add(Unpooled.EMPTY_BUFFER);, +            out.add(encodeAndRetain(msg));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestEncoderTest.java, +import static org.junit.Assert.*;, +    public void testEmptyBufferShouldPassThrough() throws Exception {, +, +    @Test, +    public void testEmptyContentChunked() throws Exception {, +        testEmptyContent(true);, +    }, +, +    @Test, +    public void testEmptyContentNotChunked() throws Exception {, +        testEmptyContent(false);, +    }, +, +    private void testEmptyContent(boolean chunked) throws Exception {, +        HttpRequestEncoder encoder = new HttpRequestEncoder();, +        EmbeddedChannel channel = new EmbeddedChannel(encoder);, +        HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/");, +        if (chunked) {, +            HttpUtil.setTransferEncodingChunked(request, true);, +        }, +        assertTrue(channel.writeOutbound(request));, +, +        ByteBuf contentBuffer = Unpooled.buffer();, +        assertTrue(channel.writeOutbound(new DefaultHttpContent(contentBuffer)));, +, +        ByteBuf lastContentBuffer = Unpooled.buffer();, +        assertTrue(channel.writeOutbound(new DefaultHttpContent(lastContentBuffer)));, +, +        // Ensure we only produce ByteBuf instances., +        ByteBuf head = channel.readOutbound();, +        assertTrue(head.release());, +, +        ByteBuf content = channel.readOutbound();, +        content.release();, +, +        ByteBuf lastContent = channel.readOutbound();, +        lastContent.release();, +        assertFalse(channel.finish());, +    }]