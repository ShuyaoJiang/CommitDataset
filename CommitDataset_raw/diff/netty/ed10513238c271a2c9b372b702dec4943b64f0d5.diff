[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.CodecException;, +            final HttpMessage message = (HttpMessage) msg;, +            final HttpHeaders headers = message.headers();, +            decoder = newContentDecoder(contentEncoding);, +            if (decoder == null) {, +                if (message instanceof HttpContent) {, +                    ((HttpContent) message).retain();, +                }, +                out.add(message);, +                return;, +            }, +, +            // Remove content-length header:, +            // the correct value can be set only after all chunks are processed/decoded., +            // If buffering is not an issue, add HttpObjectAggregator down the chain, it will set the header., +            // Otherwise, rely on LastHttpContent message., +            headers.remove(HttpHeaderNames.CONTENT_LENGTH);, +, +            // set new content encoding,, +            CharSequence targetContentEncoding = getTargetContentEncoding(contentEncoding);, +            if (HttpHeaderValues.IDENTITY.equals(targetContentEncoding)) {, +            if (message instanceof HttpContent) {, +                // If message is a full request or response object (headers + data), don't copy data part into out., +                // Output headers only; data part will be decoded below., +                // Note: "copy" object must not be an instance of LastHttpContent class,, +                // as this would (erroneously) indicate the end of the HttpMessage to other handlers., +                HttpMessage copy;, +                if (message instanceof HttpRequest) {, +                    HttpRequest r = (HttpRequest) message; // HttpRequest or FullHttpRequest, +                    copy = new DefaultHttpRequest(r.protocolVersion(), r.method(), r.uri());, +                } else if (message instanceof HttpResponse) {, +                    HttpResponse r = (HttpResponse) message; // HttpResponse or FullHttpResponse, +                    copy = new DefaultHttpResponse(r.protocolVersion(), r.status());, +                    throw new CodecException("Object of class " + message.getClass().getName() +, +                                             " is not a HttpRequest or HttpResponse");, +                copy.headers().set(message.headers());, +                copy.setDecoderResult(message.decoderResult());, +                out.add(copy);, +            } else {, +                out.add(message);, +            }, +        }, +, +        if (msg instanceof HttpContent) {, +            final HttpContent c = (HttpContent) msg;, +            if (decoder == null) {, +            } else {, +                decodeContent(c, out);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.CodecException;, +            final HttpMessage message = (HttpMessage) msg;, +            final HttpHeaders headers = message.headers();, +            decoder = newContentDecoder(contentEncoding);, +            if (decoder == null) {, +                if (message instanceof HttpContent) {, +                    ((HttpContent) message).retain();, +                }, +                out.add(message);, +                return;, +            }, +, +            // Remove content-length header:, +            // the correct value can be set only after all chunks are processed/decoded., +            // If buffering is not an issue, add HttpObjectAggregator down the chain, it will set the header., +            // Otherwise, rely on LastHttpContent message., +            headers.remove(HttpHeaderNames.CONTENT_LENGTH);, +, +            // set new content encoding,, +            CharSequence targetContentEncoding = getTargetContentEncoding(contentEncoding);, +            if (HttpHeaderValues.IDENTITY.equals(targetContentEncoding)) {, +            if (message instanceof HttpContent) {, +                // If message is a full request or response object (headers + data), don't copy data part into out., +                // Output headers only; data part will be decoded below., +                // Note: "copy" object must not be an instance of LastHttpContent class,, +                // as this would (erroneously) indicate the end of the HttpMessage to other handlers., +                HttpMessage copy;, +                if (message instanceof HttpRequest) {, +                    HttpRequest r = (HttpRequest) message; // HttpRequest or FullHttpRequest, +                    copy = new DefaultHttpRequest(r.protocolVersion(), r.method(), r.uri());, +                } else if (message instanceof HttpResponse) {, +                    HttpResponse r = (HttpResponse) message; // HttpResponse or FullHttpResponse, +                    copy = new DefaultHttpResponse(r.protocolVersion(), r.status());, +                    throw new CodecException("Object of class " + message.getClass().getName() +, +                                             " is not a HttpRequest or HttpResponse");, +                copy.headers().set(message.headers());, +                copy.setDecoderResult(message.decoderResult());, +                out.add(copy);, +            } else {, +                out.add(message);, +            }, +        }, +, +        if (msg instanceof HttpContent) {, +            final HttpContent c = (HttpContent) msg;, +            if (decoder == null) {, +            } else {, +                decodeContent(c, out);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java, +/*]