[+++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +        if (logger.isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "READ COMPLETE"));, +        }, +        ctx.fireChannelReadComplete();, +    }, +, +    @Override, +            logger.log(internalLevel, format(ctx, "READ", msg));, +    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {, +        if (logger.isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "WRITABILITY CHANGED"));, +        }, +        ctx.fireChannelWritabilityChanged();, +    }, +, +    @Override, +++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {, +        if (logger.isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "READ COMPLETE"));, +        }, +        ctx.fireChannelReadComplete();, +    }, +, +    @Override, +            logger.log(internalLevel, format(ctx, "READ", msg));, +    public void channelWritabilityChanged(ChannelHandlerContext ctx) throws Exception {, +        if (logger.isEnabled(internalLevel)) {, +            logger.log(internalLevel, format(ctx, "WRITABILITY CHANGED"));, +        }, +        ctx.fireChannelWritabilityChanged();, +    }, +, +    @Override, +++ b/handler/src/test/java/io/netty/handler/logging/LoggingHandlerTest.java, +    public void shouldLogChannelWritabilityChanged() throws Exception {, +        EmbeddedChannel channel = new EmbeddedChannel(new LoggingHandler());, +        // this is used to switch the channel to become unwritable, +        channel.config().setWriteBufferLowWaterMark(5);, +        channel.config().setWriteBufferHighWaterMark(10);, +        channel.write("hello", channel.newPromise());, +, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+WRITABILITY CHANGED$")));, +    }, +, +    @Test, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+READ: " + msg + '$')));, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+READ: " + msg.readableBytes() + "B$")));, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+READ: 0B$")));, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+READ: foobar, 5B$")));, +    @Test, +    public void shouldLogChannelReadComplete() throws Exception {, +        ByteBuf msg = Unpooled.EMPTY_BUFFER;, +        EmbeddedChannel channel = new EmbeddedChannel(new LoggingHandler());, +        channel.writeInbound(msg);, +        verify(appender).doAppend(argThat(new RegexLogMatcher(".+READ COMPLETE$")));, +    }, +]