[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +    public boolean equals(Object o) {, +        if (!(o instanceof Http2Headers)) {, +            return false;, +        }, +, +        return equals((Http2Headers) o, CASE_SENSITIVE_HASHER);, +    }, +, +    @Override, +    public int hashCode() {, +        return hashCode(CASE_SENSITIVE_HASHER);, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +    public boolean equals(Object o) {, +        if (!(o instanceof Http2Headers)) {, +            return false;, +        }, +, +        return equals((Http2Headers) o, CASE_SENSITIVE_HASHER);, +    }, +, +    @Override, +    public int hashCode() {, +        return hashCode(CASE_SENSITIVE_HASHER);, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpConversionUtil.java, +import static io.netty.handler.codec.http.HttpScheme.HTTP;, +import static io.netty.handler.codec.http.HttpScheme.HTTPS;, +import static io.netty.handler.codec.http.HttpUtil.isAsteriskForm;, +import static io.netty.handler.codec.http.HttpUtil.isOriginForm;, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.handler.codec.http2.Http2Exception.streamError;, +import static io.netty.util.AsciiString.EMPTY_STRING;, +import static io.netty.util.ByteProcessor.FIND_SEMI_COLON;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static io.netty.util.internal.StringUtil.isNullOrEmpty;, +import static io.netty.util.internal.StringUtil.length;, +                if (aName.contentEqualsIgnoreCase(HttpHeaderNames.TE) &&, +                    !AsciiString.contentEqualsIgnoreCase(entry.getValue(), HttpHeaderValues.TRAILERS)) {, +                    throw new IllegalArgumentException("Invalid value for " + HttpHeaderNames.TE + ": " +, +                                                        entry.getValue());, +                }, +                if (aName.contentEqualsIgnoreCase(HttpHeaderNames.COOKIE)) {, +                    AsciiString value = AsciiString.of(entry.getValue());, +                    // split up cookies to allow for better compression, +                    // https://tools.ietf.org/html/rfc7540#section-8.1.2.5, +                    int index = value.forEachByte(FIND_SEMI_COLON);, +                    if (index != -1) {, +                        int start = 0;, +                        do {, +                            out.add(HttpHeaderNames.COOKIE, value.subSequence(start, index, false));, +                            // skip 2 characters "; " (see https://tools.ietf.org/html/rfc6265#section-4.2.1), +                            start = index + 2;, +                        } while (start < value.length() &&, +                                (index = value.forEachByte(start, value.length() - start, FIND_SEMI_COLON)) != -1);, +                        if (start >= value.length()) {, +                            throw new IllegalArgumentException("cookie value is of unexpected format: " + value);, +                        }, +                        out.add(HttpHeaderNames.COOKIE, value.subSequence(start, value.length(), false));, +                    } else {, +                        out.add(HttpHeaderNames.COOKIE, value);, +                    }, +                } else {, +                    out.add(aName, entry.getValue());, +                if (HttpHeaderNames.COOKIE.equals(name)) {, +                    // combine the cookie values into 1 header entry., +                    // https://tools.ietf.org/html/rfc7540#section-8.1.2.5, +                    String existingCookie = output.get(HttpHeaderNames.COOKIE);, +                    output.set(HttpHeaderNames.COOKIE,, +                               (existingCookie != null) ? (existingCookie + "; " + value) : value);, +                } else {, +                    output.add(name, value);, +                }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;, +import static io.netty.handler.codec.http2.Http2Exception.connectionError;, +import static io.netty.util.AsciiString.CASE_SENSITIVE_HASHER;, +import static io.netty.util.AsciiString.isUpperCase;, +    public boolean equals(Object o) {, +        if (!(o instanceof Http2Headers)) {, +            return false;, +        }, +, +        return equals((Http2Headers) o, CASE_SENSITIVE_HASHER);, +    }, +]