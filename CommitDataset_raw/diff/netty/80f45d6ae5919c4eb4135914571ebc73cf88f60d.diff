[+++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/FileDescriptor.java, +import io.netty.util.internal.PlatformDependent;, +, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    private static final AtomicIntegerFieldUpdater<FileDescriptor> openUpdater;, +    static {, +        AtomicIntegerFieldUpdater<FileDescriptor> updater, +                = PlatformDependent.newAtomicIntegerFieldUpdater(FileDescriptor.class, "open");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(FileDescriptor.class, "open");, +        }, +        openUpdater = updater;, +    }, +, +    private volatile int open = 1;, +        if (openUpdater.compareAndSet(this, 1, 0)) {, +    }, +        return open == 1;, +++ b/transport-native-epoll/src/main/java/io/netty/channel/unix/FileDescriptor.java, +import io.netty.util.internal.PlatformDependent;, +, +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;, +    private static final AtomicIntegerFieldUpdater<FileDescriptor> openUpdater;, +    static {, +        AtomicIntegerFieldUpdater<FileDescriptor> updater, +                = PlatformDependent.newAtomicIntegerFieldUpdater(FileDescriptor.class, "open");, +        if (updater == null) {, +            updater = AtomicIntegerFieldUpdater.newUpdater(FileDescriptor.class, "open");, +        }, +        openUpdater = updater;, +    }, +, +    private volatile int open = 1;, +        if (openUpdater.compareAndSet(this, 1, 0)) {, +    }, +        return open == 1;, +++ b/transport-native-epoll/src/test/java/io/netty/channel/unix/SocketTest.java, +    }, +, +    @Test, +    public void testDoubleCloseDoesNotThrow() throws IOException {, +        Socket socket = Socket.newSocketStream();, +        socket.close();]