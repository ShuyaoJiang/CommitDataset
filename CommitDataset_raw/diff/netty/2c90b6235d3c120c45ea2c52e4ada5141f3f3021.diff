[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodec.java, +            Http2FrameStream stream = headersFrame.stream();, +            int id = stream == null ? 0 : stream.id();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodec.java, +            Http2FrameStream stream = headersFrame.stream();, +            int id = stream == null ? 0 : stream.id();, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2StreamFrameToHttpObjectCodecTest.java, +        testDecodeFullResponseHeaders(false);, +    }, +, +    @Test, +    public void testDecodeFullResponseHeadersWithStreamID() throws Exception {, +        testDecodeFullResponseHeaders(true);, +    }, +, +    private void testDecodeFullResponseHeaders(boolean withStreamId) throws Exception {, +        Http2HeadersFrame frame = new DefaultHttp2HeadersFrame(headers, true);, +        if (withStreamId) {, +            frame.stream(new Http2FrameStream() {, +                @Override, +                public int id() {, +                    return 1;, +                }, +, +                @Override, +                public Http2Stream.State state() {, +                    return Http2Stream.State.OPEN;, +                }, +            });, +        }, +, +        assertTrue(ch.writeInbound(frame));, +            if (withStreamId) {, +                assertEquals(1,, +                        (int) response.headers().getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text()));, +            }]