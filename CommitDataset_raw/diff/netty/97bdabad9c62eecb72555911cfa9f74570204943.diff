[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +import io.netty.buffer.BufUtil;, +import io.netty.handler.codec.DecoderException;, +import java.util.Iterator;, +public class HttpPostRequestDecoder implements Iterator<InterfaceHttpData> {, +    public HttpPostRequestDecoder offer(HttpContent content) throws ErrorDataDecoderException {, +        // Maybe we should better not copy here for performance reasons but this will need, +        // more care by teh caller to release the content in a correct manner later, +        // So maybe something to optimize on a later stage, +        ByteBuf chunked = content.content().copy();, +        return this;, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                                setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    currentAttribute.addContent(undecodedChunk.slice(firstpos, currentpos - firstpos).retain(), false);, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                                setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    currentAttribute.addContent(undecodedChunk.slice(firstpos, currentpos - firstpos).retain(), false);, +        ByteBuf buffer = undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain();, +        ByteBuf buffer = undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain();, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), true);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), false);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), true);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), false);, +    @Override, +    public void remove() {, +        throw new UnsupportedOperationException();, +    }, +, +    public static class NotEnoughDataDecoderException extends DecoderException {, +    public static class EndOfDataDecoderException extends DecoderException {, +    public static class ErrorDataDecoderException extends DecoderException {, +    public static class IncompatibleDataDecoderException extends DecoderException {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +import io.netty.buffer.BufUtil;, +import io.netty.handler.codec.DecoderException;, +import java.util.Iterator;, +public class HttpPostRequestDecoder implements Iterator<InterfaceHttpData> {, +    public HttpPostRequestDecoder offer(HttpContent content) throws ErrorDataDecoderException {, +        // Maybe we should better not copy here for performance reasons but this will need, +        // more care by teh caller to release the content in a correct manner later, +        // So maybe something to optimize on a later stage, +        ByteBuf chunked = content.content().copy();, +        return this;, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                                setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    currentAttribute.addContent(undecodedChunk.slice(firstpos, currentpos - firstpos).retain(), false);, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                                setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                        setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    setFinalBuffer(undecodedChunk.slice(firstpos, ampersandpos - firstpos).retain());, +                    currentAttribute.addContent(undecodedChunk.slice(firstpos, currentpos - firstpos).retain(), false);, +        ByteBuf buffer = undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain();, +        ByteBuf buffer = undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain();, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), true);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), false);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), true);, +                    currentAttribute.addContent(, +                            undecodedChunk.slice(readerIndex, lastPosition - readerIndex).retain(), false);, +    @Override, +    public void remove() {, +        throw new UnsupportedOperationException();, +    }, +, +    public static class NotEnoughDataDecoderException extends DecoderException {, +    public static class EndOfDataDecoderException extends DecoderException {, +    public static class ErrorDataDecoderException extends DecoderException {, +    public static class IncompatibleDataDecoderException extends DecoderException {, +++ b/example/src/main/java/io/netty/example/http/upload/HttpUploadServerHandler.java, +import io.netty.buffer.BufUtil;, +        //BufUtil.release(data);]