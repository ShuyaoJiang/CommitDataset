[+++ b/handler/src/test/java/io/netty/handler/ssl/ConscryptJdkSslEngineInteropTest.java, +, +    @Ignore("Ignore due bug in Conscrypt"), +    @Override, +    public void testSessionBindingEvent() throws Exception {, +        // Ignore due bug in Conscrypt where the incorrect SSLSession object is used in the SSLSessionBindingEvent., +        // See https://github.com/google/conscrypt/issues/593, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/ConscryptJdkSslEngineInteropTest.java, +, +    @Ignore("Ignore due bug in Conscrypt"), +    @Override, +    public void testSessionBindingEvent() throws Exception {, +        // Ignore due bug in Conscrypt where the incorrect SSLSession object is used in the SSLSessionBindingEvent., +        // See https://github.com/google/conscrypt/issues/593, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/ConscryptSslEngineTest.java, +, +    @Ignore("Ignore due bug in Conscrypt"), +    @Override, +    public void testSessionBindingEvent() throws Exception {, +        // Ignore due bug in Conscrypt where the incorrect SSLSession object is used in the SSLSessionBindingEvent., +        // See https://github.com/google/conscrypt/issues/593, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/ConscryptJdkSslEngineInteropTest.java, +, +    @Ignore("Ignore due bug in Conscrypt"), +    @Override, +    public void testSessionBindingEvent() throws Exception {, +        // Ignore due bug in Conscrypt where the incorrect SSLSession object is used in the SSLSessionBindingEvent., +        // See https://github.com/google/conscrypt/issues/593, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/ConscryptSslEngineTest.java, +, +    @Ignore("Ignore due bug in Conscrypt"), +    @Override, +    public void testSessionBindingEvent() throws Exception {, +        // Ignore due bug in Conscrypt where the incorrect SSLSession object is used in the SSLSessionBindingEvent., +        // See https://github.com/google/conscrypt/issues/593, +    }, +++ b/handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java, +import javax.net.ssl.SSLSessionBindingEvent;, +import javax.net.ssl.SSLSessionBindingListener;, +    public void testSessionBindingEvent() throws Exception {, +        clientSslCtx = SslContextBuilder.forClient(), +                .trustManager(InsecureTrustManagerFactory.INSTANCE), +                .sslProvider(sslClientProvider()), +                .sslContextProvider(clientSslContextProvider()), +                .protocols(protocols()), +                .ciphers(ciphers()), +                .build();, +        SelfSignedCertificate ssc = new SelfSignedCertificate();, +        serverSslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()), +                .sslProvider(sslServerProvider()), +                .sslContextProvider(serverSslContextProvider()), +                .protocols(protocols()), +                .ciphers(ciphers()), +                .build();, +        SSLEngine clientEngine = null;, +        SSLEngine serverEngine = null;, +        try {, +            clientEngine = wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            serverEngine = wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));, +            handshake(clientEngine, serverEngine);, +            SSLSession session = clientEngine.getSession();, +            assertEquals(0, session.getValueNames().length);, +, +            class SSLSessionBindingEventValue implements SSLSessionBindingListener {, +                SSLSessionBindingEvent boundEvent;, +                SSLSessionBindingEvent unboundEvent;, +, +                @Override, +                public void valueBound(SSLSessionBindingEvent sslSessionBindingEvent) {, +                    assertNull(boundEvent);, +                    boundEvent = sslSessionBindingEvent;, +                }, +, +                @Override, +                public void valueUnbound(SSLSessionBindingEvent sslSessionBindingEvent) {, +                    assertNull(unboundEvent);, +                    unboundEvent = sslSessionBindingEvent;, +                }, +            }, +, +            String name = "name";, +            String name2 = "name2";, +, +            SSLSessionBindingEventValue value1 = new SSLSessionBindingEventValue();, +            session.putValue(name, value1);, +            assertSSLSessionBindingEventValue(name, session, value1.boundEvent);, +            assertNull(value1.unboundEvent);, +            assertEquals(1, session.getValueNames().length);, +, +            session.putValue(name2, "value");, +, +            SSLSessionBindingEventValue value2 = new SSLSessionBindingEventValue();, +            session.putValue(name, value2);, +            assertEquals(2, session.getValueNames().length);, +, +            assertSSLSessionBindingEventValue(name, session, value1.unboundEvent);]