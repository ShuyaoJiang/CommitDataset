[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import java.util.List;, +        public List<CharSequence> getAll(CharSequence name) {, +            List<CharSequence> values = super.getAll(name);, +            if (values.isEmpty()) {, +                return values;, +            }, +            if (values.size() != 1) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return StringUtil.unescapeCsvFields(values.get(0));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl setObject(CharSequence name, Object value) {, +            super.set(name, commaSeparate(objectEscaper(), value));, +            return this;, +        }, +, +        @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import java.util.List;, +        public List<CharSequence> getAll(CharSequence name) {, +            List<CharSequence> values = super.getAll(name);, +            if (values.isEmpty()) {, +                return values;, +            }, +            if (values.size() != 1) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return StringUtil.unescapeCsvFields(values.get(0));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl setObject(CharSequence name, Object value) {, +            super.set(name, commaSeparate(objectEscaper(), value));, +            return this;, +        }, +, +        @Override, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import java.util.Arrays;, +        assertEquals(HeaderValue.SIX_QUOTED.subset(4), headers.getAll(HEADER_NAME));, +        assertEquals(HeaderValue.EIGHT.subset(6), headers.getAll(HEADER_NAME));, +        assertEquals(Arrays.asList(""), headers.getAll(HEADER_NAME));, +        assertEquals(headerValue.asList(), headers.getAll(HEADER_NAME));, +, +    @Test, +    public void testGetAll() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.set(HEADER_NAME, Arrays.asList("a", "b", "c"));, +        assertEquals(Arrays.asList("a", "b", "c"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("a,", "b,", "c,"));, +        assertEquals(Arrays.asList("a,", "b,", "c,"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("a\"", "b\"", "c\""));, +        assertEquals(Arrays.asList("a\"", "b\"", "c\""), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("\"a\"", "\"b\"", "\"c\""));, +        assertEquals(Arrays.asList("a", "b", "c"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, "a,b,c");, +        assertEquals(Arrays.asList("a,b,c"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, "\"a,b,c\"");, +        assertEquals(Arrays.asList("a,b,c"), headers.getAll(HEADER_NAME));, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/CombinedHttpHeaders.java, +import java.util.List;, +        public List<CharSequence> getAll(CharSequence name) {, +            List<CharSequence> values = super.getAll(name);, +            if (values.isEmpty()) {, +                return values;, +            }, +            if (values.size() != 1) {, +                throw new IllegalStateException("CombinedHttpHeaders should only have one value");, +            }, +            return StringUtil.unescapeCsvFields(values.get(0));, +        }, +, +        @Override, +        public CombinedHttpHeadersImpl setObject(CharSequence name, Object value) {, +            super.set(name, commaSeparate(objectEscaper(), value));, +            return this;, +        }, +, +        @Override, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/CombinedHttpHeadersTest.java, +import java.util.Arrays;, +        assertEquals(HeaderValue.SIX_QUOTED.subset(4), headers.getAll(HEADER_NAME));, +        assertEquals(HeaderValue.EIGHT.subset(6), headers.getAll(HEADER_NAME));, +        assertEquals(Arrays.asList(""), headers.getAll(HEADER_NAME));, +        assertEquals(headerValue.asList(), headers.getAll(HEADER_NAME));, +, +    @Test, +    public void testGetAll() {, +        final CombinedHttpHeaders headers = newCombinedHttpHeaders();, +        headers.set(HEADER_NAME, Arrays.asList("a", "b", "c"));, +        assertEquals(Arrays.asList("a", "b", "c"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("a,", "b,", "c,"));, +        assertEquals(Arrays.asList("a,", "b,", "c,"), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("a\"", "b\"", "c\""));, +        assertEquals(Arrays.asList("a\"", "b\"", "c\""), headers.getAll(HEADER_NAME));, +        headers.set(HEADER_NAME, Arrays.asList("\"a\"", "\"b\"", "\"c\""));]