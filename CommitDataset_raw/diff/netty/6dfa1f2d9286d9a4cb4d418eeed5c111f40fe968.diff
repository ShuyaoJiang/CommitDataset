[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2PromisedRequestVerifier.ALWAYS_VERIFY;, +    private final Http2PromisedRequestVerifier requestVerifier;, +        private Http2PromisedRequestVerifier requestVerifier = ALWAYS_VERIFY;, +        public Http2ConnectionDecoder.Builder requestVerifier(Http2PromisedRequestVerifier requestVerifier) {, +            this.requestVerifier = requestVerifier;, +            return this;, +        }, +, +        @Override, +        requestVerifier = checkNotNull(builder.requestVerifier, "requestVerifier");, +            if (!requestVerifier.isAuthoritative(ctx, headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not authoritative",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isCacheable(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be cacheable",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isSafe(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be safe",, +                        streamId, promisedStreamId);, +            }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2PromisedRequestVerifier.ALWAYS_VERIFY;, +    private final Http2PromisedRequestVerifier requestVerifier;, +        private Http2PromisedRequestVerifier requestVerifier = ALWAYS_VERIFY;, +        public Http2ConnectionDecoder.Builder requestVerifier(Http2PromisedRequestVerifier requestVerifier) {, +            this.requestVerifier = requestVerifier;, +            return this;, +        }, +, +        @Override, +        requestVerifier = checkNotNull(builder.requestVerifier, "requestVerifier");, +            if (!requestVerifier.isAuthoritative(ctx, headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not authoritative",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isCacheable(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be cacheable",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isSafe(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be safe",, +                        streamId, promisedStreamId);, +            }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +            throw connectionError(COMPRESSION_ERROR, e, e.getMessage());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2PromisedRequestVerifier.ALWAYS_VERIFY;, +    private final Http2PromisedRequestVerifier requestVerifier;, +        private Http2PromisedRequestVerifier requestVerifier = ALWAYS_VERIFY;, +        public Http2ConnectionDecoder.Builder requestVerifier(Http2PromisedRequestVerifier requestVerifier) {, +            this.requestVerifier = requestVerifier;, +            return this;, +        }, +, +        @Override, +        requestVerifier = checkNotNull(builder.requestVerifier, "requestVerifier");, +            if (!requestVerifier.isAuthoritative(ctx, headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not authoritative",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isCacheable(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be cacheable",, +                        streamId, promisedStreamId);, +            }, +            if (!requestVerifier.isSafe(headers)) {, +                throw streamError(promisedStreamId, PROTOCOL_ERROR,, +                        "Promised request on stream %d for promised stream %d is not known to be safe",, +                        streamId, promisedStreamId);, +            }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +            throw connectionError(COMPRESSION_ERROR, e, e.getMessage());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final String HTTP_UPGRADE_PROTOCOL_NAME = "h2c-17";, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = "h2-17";, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import static io.netty.handler.codec.http2.Http2PromisedRequestVerifier.ALWAYS_VERIFY;, +    private final Http2PromisedRequestVerifier requestVerifier;, +        private Http2PromisedRequestVerifier requestVerifier = ALWAYS_VERIFY;, +        public Http2ConnectionDecoder.Builder requestVerifier(Http2PromisedRequestVerifier requestVerifier) {, +            this.requestVerifier = requestVerifier;, +            return this;, +        }, +, +        @Override, +        requestVerifier = checkNotNull(builder.requestVerifier, "requestVerifier");, +            if (!requestVerifier.isAuthoritative(ctx, headers)) {]