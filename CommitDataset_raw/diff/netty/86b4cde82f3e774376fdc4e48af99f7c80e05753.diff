[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundMessageBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundMessageBuffer() called from outside the eventLoop");, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundMessageBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundMessageBuffer() called from outside the eventLoop");, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +        final Freeable holder = new Freeable() {, +        final DefaultChannelPipeline pipeline = new DefaultChannelPipeline(channel);, +        channel.eventLoop().execute(new Runnable() {, +            @Override, +            public void run() {, +            }, +        });, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundMessageBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundMessageBuffer() called from outside the eventLoop");, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +        final Freeable holder = new Freeable() {, +        final DefaultChannelPipeline pipeline = new DefaultChannelPipeline(channel);, +        channel.eventLoop().execute(new Runnable() {, +            @Override, +            public void run() {, +            }, +        });, +++ b/transport/src/test/java/io/netty/channel/local/LocalChannelRegistryTest.java, +import java.util.concurrent.CountDownLatch;, +, +            final CountDownLatch latch = new CountDownLatch(1);, +            final Channel cc = cb.connect(addr).sync().channel();, +            cc.eventLoop().execute(new Runnable() {, +                @Override, +                public void run() {, +                    latch.countDown();, +                }, +            });, +            latch.await();, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextInboundMessageBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundByteBuffer() called from outside the eventLoop");, +                }, +                if (executor().inEventLoop()) {, +                throw new IllegalStateException("nextOutboundMessageBuffer() called from outside the eventLoop");, +++ b/transport/src/test/java/io/netty/channel/DefaultChannelPipelineTest.java, +        final Freeable holder = new Freeable() {, +        final DefaultChannelPipeline pipeline = new DefaultChannelPipeline(channel);, +        channel.eventLoop().execute(new Runnable() {, +            @Override, +            public void run() {, +            }, +        });, +++ b/transport/src/test/java/io/netty/channel/local/LocalChannelRegistryTest.java, +import java.util.concurrent.CountDownLatch;, +, +            final CountDownLatch latch = new CountDownLatch(1);, +            final Channel cc = cb.connect(addr).sync().channel();, +            cc.eventLoop().execute(new Runnable() {, +                @Override, +                public void run() {, +                    latch.countDown();, +                }, +            });, +            latch.await();]