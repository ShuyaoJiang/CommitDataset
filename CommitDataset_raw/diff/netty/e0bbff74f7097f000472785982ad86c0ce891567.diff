[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +                // Just delegate to super method which has all the needed handling., +                return super.isContentAlwaysEmpty(msg);, +                // All responses to the HEAD request method MUST NOT include a, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +                // Just delegate to super method which has all the needed handling., +                return super.isContentAlwaysEmpty(msg);, +                // All responses to the HEAD request method MUST NOT include a, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpClientCodecTest.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +    @Test, +    public void testWebSocket00Response() {, +        byte[] data = ("HTTP/1.1 101 WebSocket Protocol Handshake\r\n" +, +                "Upgrade: WebSocket\r\n" +, +                "Connection: Upgrade\r\n" +, +                "Sec-WebSocket-Origin: http://localhost:8080\r\n" +, +                "Sec-WebSocket-Location: ws://localhost/some/path\r\n" +, +                "\r\n" +, +                "1234567812345678").getBytes();, +        EmbeddedChannel ch = new EmbeddedChannel(new HttpClientCodec());, +        assertTrue(ch.writeInbound(Unpooled.wrappedBuffer(data)));, +, +        HttpResponse res = ch.readInbound();, +        assertThat(res.protocolVersion(), sameInstance(HttpVersion.HTTP_1_1));, +        assertThat(res.status(), is(HttpResponseStatus.SWITCHING_PROTOCOLS));, +        HttpContent content = ch.readInbound();, +        assertThat(content.content().readableBytes(), is(16));, +        content.release();, +, +        assertThat(ch.finish(), is(false));, +, +        assertThat(ch.readInbound(), is(nullValue()));, +    }]