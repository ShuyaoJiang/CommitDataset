[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +    // Protocols, +    private static final String PROTOCOL_SSL_V2_HELLO = "SSLv2Hello";, +    private static final String PROTOCOL_SSL_V2 = "SSLv2";, +    private static final String PROTOCOL_SSL_V3 = "SSLv3";, +    private static final String PROTOCOL_TLS_V1 = "TLSv1";, +    private static final String PROTOCOL_TLS_V1_1 = "TLSv1.1";, +    private static final String PROTOCOL_TLS_V1_2 = "TLSv1.2";, +, +    private static final String[] SUPPORTED_PROTOCOLS = {, +            PROTOCOL_SSL_V2_HELLO,, +            PROTOCOL_SSL_V2,, +            PROTOCOL_SSL_V3,, +            PROTOCOL_TLS_V1,, +            PROTOCOL_TLS_V1_1,, +            PROTOCOL_TLS_V1_2, +    };, +    private static final Set<String> SUPPORTED_PROTOCOLS_SET = new HashSet<String>(Arrays.asList(SUPPORTED_PROTOCOLS));, +, +        return SUPPORTED_PROTOCOLS.clone();, +        List<String> enabled = new ArrayList<String>();, +        // Seems like there is no way to explict disable SSLv2Hello in openssl so it is always enabled, +        enabled.add(PROTOCOL_SSL_V2_HELLO);, +        int opts = SSL.getOptions(ssl);, +        if ((opts & SSL.SSL_OP_NO_TLSv1) == 0) {, +            enabled.add(PROTOCOL_TLS_V1);, +        }, +        if ((opts & SSL.SSL_OP_NO_TLSv1_1) == 0) {, +            enabled.add(PROTOCOL_TLS_V1_1);, +        }, +        if ((opts & SSL.SSL_OP_NO_TLSv1_2) == 0) {, +            enabled.add(PROTOCOL_TLS_V1_2);, +        }, +        if ((opts & SSL.SSL_OP_NO_SSLv2) == 0) {, +            enabled.add(PROTOCOL_SSL_V2);, +        }, +        if ((opts & SSL.SSL_OP_NO_SSLv3) == 0) {, +            enabled.add(PROTOCOL_SSL_V3);, +        }, +        int size = enabled.size();, +        if (size == 0) {, +        } else {, +            return enabled.toArray(new String[size]);, +        }, +    public void setEnabledProtocols(String[] protocols) {, +        if (protocols == null) {, +            // This is correct from the API docs, +            throw new IllegalArgumentException();, +        }, +        boolean sslv2 = false;, +        boolean sslv3 = false;, +        boolean tlsv1 = false;, +        boolean tlsv1_1 = false;, +        boolean tlsv1_2 = false;, +        for (String p: protocols) {, +            if (!SUPPORTED_PROTOCOLS_SET.contains(p)) {, +                throw new IllegalArgumentException("Protocol " + p + " is not supported.");, +            }, +            if (p.equals(PROTOCOL_SSL_V2)) {, +                sslv2 = true;, +            } else if (p.equals(PROTOCOL_SSL_V3)) {, +                sslv3 = true;, +            } else if (p.equals(PROTOCOL_TLS_V1)) {, +                tlsv1 = true;, +            } else if (p.equals(PROTOCOL_TLS_V1_1)) {, +                tlsv1_1 = true;, +            } else if (p.equals(PROTOCOL_TLS_V1_2)) {, +                tlsv1_2 = true;, +            }, +        }, +        // Enable all and then disable what we not want, +        SSL.setOptions(ssl, SSL.SSL_OP_ALL);, +, +        if (!sslv2) {, +            SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv2);, +        }, +        if (!sslv3) {, +            SSL.setOptions(ssl, SSL.SSL_OP_NO_SSLv3);, +        }, +        if (!tlsv1) {, +            SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1);, +        }, +        if (!tlsv1_1) {, +            SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_1);, +        }, +        if (!tlsv1_2) {, +            SSL.setOptions(ssl, SSL.SSL_OP_NO_TLSv1_2);, +        }]