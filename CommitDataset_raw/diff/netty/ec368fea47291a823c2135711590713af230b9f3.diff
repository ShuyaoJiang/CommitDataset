[+++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +, +        public void lastBytesRead(int bytes) {, +            // If we read as much as we asked for we should check if we need to ramp up the size of our next guess., +            // This helps adjust more quickly when large amounts of data is pending and can avoid going back to, +            // the selector to check for more data. Going back to the selector can add significant latency for large, +            // data transfers., +            if (bytes == attemptedBytesRead()) {, +                record(bytes);, +            }, +            super.lastBytesRead(bytes);, +        }, +, +        @Override, +            if (actualReadBytes <= SIZE_TABLE[max(0, index - INDEX_DECREMENT - 1)]) {, +                    index = max(index - INDEX_DECREMENT, minIndex);, +                index = min(index + INDEX_INCREMENT, maxIndex);, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +, +        public void lastBytesRead(int bytes) {, +            // If we read as much as we asked for we should check if we need to ramp up the size of our next guess., +            // This helps adjust more quickly when large amounts of data is pending and can avoid going back to, +            // the selector to check for more data. Going back to the selector can add significant latency for large, +            // data transfers., +            if (bytes == attemptedBytesRead()) {, +                record(bytes);, +            }, +            super.lastBytesRead(bytes);, +        }, +, +        @Override, +            if (actualReadBytes <= SIZE_TABLE[max(0, index - INDEX_DECREMENT - 1)]) {, +                    index = max(index - INDEX_DECREMENT, minIndex);, +                index = min(index + INDEX_INCREMENT, maxIndex);, +++ b/transport/src/main/java/io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator.java, +        public void lastBytesRead(int bytes) {, +++ b/transport/src/main/java/io/netty/channel/AdaptiveRecvByteBufAllocator.java, +import static java.lang.Math.max;, +import static java.lang.Math.min;, +, +        public void lastBytesRead(int bytes) {, +            // If we read as much as we asked for we should check if we need to ramp up the size of our next guess., +            // This helps adjust more quickly when large amounts of data is pending and can avoid going back to, +            // the selector to check for more data. Going back to the selector can add significant latency for large, +            // data transfers., +            if (bytes == attemptedBytesRead()) {, +                record(bytes);, +            }, +            super.lastBytesRead(bytes);, +        }, +, +        @Override, +            if (actualReadBytes <= SIZE_TABLE[max(0, index - INDEX_DECREMENT - 1)]) {, +                    index = max(index - INDEX_DECREMENT, minIndex);, +                index = min(index + INDEX_INCREMENT, maxIndex);, +++ b/transport/src/main/java/io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator.java, +        public void lastBytesRead(int bytes) {, +++ b/transport/src/test/java/io/netty/channel/AdaptiveRecvByteBufAllocatorTest.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.UnpooledByteBufAllocator;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mock;, +, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +public class AdaptiveRecvByteBufAllocatorTest {, +    @Mock, +    private ChannelConfig config;, +    private ByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;, +    private RecvByteBufAllocator.ExtendedHandle handle;, +, +    @Before, +    public void setup() {, +        config = mock(ChannelConfig.class);, +        when(config.isAutoRead()).thenReturn(true);]