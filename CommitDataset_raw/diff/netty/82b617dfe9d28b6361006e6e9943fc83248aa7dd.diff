[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return new UnpooledDuplicatedByteBuf(this);, +        return new UnpooledSlicedByteBuf(this, index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return new UnpooledDuplicatedByteBuf(this);, +        return new UnpooledSlicedByteBuf(this, index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +abstract class AbstractPooledDerivedByteBuf extends AbstractReferenceCountedByteBuf {, +    private final Handle<AbstractPooledDerivedByteBuf> recyclerHandle;, +    AbstractPooledDerivedByteBuf(Handle<? extends AbstractPooledDerivedByteBuf> recyclerHandle) {, +        this.recyclerHandle = (Handle<AbstractPooledDerivedByteBuf>) recyclerHandle;, +    final <U extends AbstractPooledDerivedByteBuf> U init(, +            AbstractByteBuf unwrapped, ByteBuf wrapped, int readerIndex, int writerIndex, int maxCapacity) {, +        wrapped.retain(); // Retain up front to ensure the wrapped buffer is accessible before doing more work., +        this.buffer = unwrapped;, +            setIndex0(readerIndex, writerIndex); // It is assumed the bounds checking is done by the caller., +            wrapped = null;, +            if (wrapped != null) {, +                wrapped.release();, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +        return new UnpooledDuplicatedByteBuf(this);, +        return new UnpooledSlicedByteBuf(this, index, length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractPooledDerivedByteBuf.java, +abstract class AbstractPooledDerivedByteBuf extends AbstractReferenceCountedByteBuf {, +    private final Handle<AbstractPooledDerivedByteBuf> recyclerHandle;, +    AbstractPooledDerivedByteBuf(Handle<? extends AbstractPooledDerivedByteBuf> recyclerHandle) {, +        this.recyclerHandle = (Handle<AbstractPooledDerivedByteBuf>) recyclerHandle;, +    final <U extends AbstractPooledDerivedByteBuf> U init(, +            AbstractByteBuf unwrapped, ByteBuf wrapped, int readerIndex, int writerIndex, int maxCapacity) {, +        wrapped.retain(); // Retain up front to ensure the wrapped buffer is accessible before doing more work., +        this.buffer = unwrapped;, +            setIndex0(readerIndex, writerIndex); // It is assumed the bounds checking is done by the caller., +            wrapped = null;, +            if (wrapped != null) {, +                wrapped.release();, +++ b/buffer/src/main/java/io/netty/buffer/AbstractUnpooledSlicedByteBuf.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.ByteProcessor;, +import io.netty.util.CharsetUtil;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.channels.FileChannel;, +import java.nio.channels.GatheringByteChannel;, +import java.nio.channels.ScatteringByteChannel;, +import java.nio.charset.Charset;, +, +import static io.netty.util.internal.MathUtil.isOutOfBounds;, +, +abstract class AbstractUnpooledSlicedByteBuf extends AbstractDerivedByteBuf {, +    private final ByteBuf buffer;, +    private final int adjustment;, +, +    AbstractUnpooledSlicedByteBuf(ByteBuf buffer, int index, int length) {, +        super(length);, +        checkSliceOutOfBounds(index, length, buffer);, +, +        if (buffer instanceof AbstractUnpooledSlicedByteBuf) {, +            this.buffer = ((AbstractUnpooledSlicedByteBuf) buffer).buffer;, +            adjustment = ((AbstractUnpooledSlicedByteBuf) buffer).adjustment + index;, +        } else if (buffer instanceof DuplicatedByteBuf) {, +            this.buffer = buffer.unwrap();, +            adjustment = index;, +        } else {, +            this.buffer = buffer;, +            adjustment = index;, +        }, +, +        initLength(length);, +        writerIndex(length);, +    }, +, +    /**, +     * Called by the constructor before {@link #writerIndex(int)}., +     * @param length the {@code length} argument from the constructor., +     */, +    void initLength(int length) {, +    }, +, +    int length() {, +        return capacity();]