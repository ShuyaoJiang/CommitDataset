[+++ b/handler/src/main/java/io/netty/handler/logging/LoggingHandler.java, +import io.netty.buffer.ChannelBuffer;, +import java.util.Queue;, +    private static final String NEWLINE = String.format("%n");, +        this(DEFAULT_LEVEL);, +        this(clazz, DEFAULT_LEVEL);, +    protected String format(ChannelHandlerContext ctx, String message) {, +    protected String formatBuffer(String bufName, ChannelBufferHolder<Object> holder) {, +        String content;, +        int size;, +        String elemType;, +        if (holder.hasByteBuffer()) {, +            ChannelBuffer buf = holder.byteBuffer();, +            size = buf.readableBytes();, +            elemType = "Byte";, +            content = hexdump(buf);, +        } else {, +            Queue<Object> buf = holder.messageBuffer();, +            content = buf.toString();, +            size = buf.size();, +            elemType = "Object";, +        }, +, +        return String.format("%s[%s](%d): %s", bufName, elemType, size, content);, +    }, +, +    private static String hexdump(ChannelBuffer buf) {, +        // TODO: Optimize using lookup tables, +        int length = buf.readableBytes();, +        int rows = length / 16 + (length % 15 == 0? 0 : 1) + 4;, +        StringBuilder dump = new StringBuilder(rows * 80);, +, +        dump.append(NEWLINE);, +        dump.append("         +-------------------------------------------------+");, +        dump.append(NEWLINE);, +        dump.append("         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |");, +        dump.append(NEWLINE);, +        dump.append("+--------+-------------------------------------------------+----------------+");, +, +        int i;, +        for (i = buf.readerIndex(); i < buf.writerIndex(); i ++) {, +            int relIdx = i - buf.readerIndex();, +            int relIdxMod16 = relIdx & 15;, +            if (relIdxMod16 == 0) {, +                dump.append(NEWLINE);, +                dump.append(String.format("|%8x|", relIdx));, +            }, +            dump.append(String.format(" %02x", buf.getUnsignedByte(i)));, +            if (relIdxMod16 == 15) {, +                dump.append(" |");, +                for (int j = i - 15; j <= i; j ++) {, +                    dump.append(toChar(buf.getByte(j)));, +                }, +                dump.append('|');, +            }, +        }, +        if ((i - buf.readerIndex() & 15) != 0) {, +            int remainder = length & 15;, +            for (int j = 16 - remainder; j > 0; j --) {, +                dump.append("   ");, +            }, +            dump.append(" |");, +            for (int j = i - remainder; j < i; j ++) {, +                dump.append(toChar(buf.getByte(j)));, +            }, +            for (int j = 16 - remainder; j > 0; j --) {, +                dump.append(' ');, +            }, +            dump.append('|');, +        }, +, +        dump.append(NEWLINE);, +        dump.append("+--------+-------------------------------------------------+----------------+");, +        return dump.toString();, +    }, +, +    private static char toChar(int ch) {, +        ch = ch & 0xff;, +        if (ch <= 0x1f || ch >= 0x7f) {, +            return '.';, +        } else {, +            return (char) ch;, +        }, +    }, +, +            logger.log(level, format(ctx, "REGISTERED"));, +            logger.log(level, format(ctx, "UNREGISTERED"));, +            logger.log(level, format(ctx, "ACTIVE"));, +            logger.log(level, format(ctx, "INACTIVE"));, +            logger.log(level, format(ctx, String.format("EXCEPTION: %s", cause)), cause);, +            logger.log(level, format(ctx, String.format("USER_EVENT: %s", evt)));, +            logger.log(level, format(ctx, formatBuffer("INBUF", ctx.in())));, +        ctx.fireInboundBufferUpdated();, +            logger.log(level, format(ctx, String.format("bind(%s)", localAddress)));, +            logger.log(level, format(ctx, String.format("connect(%s, %s)", remoteAddress, localAddress)));, +            logger.log(level, format(ctx, "disconnect()"));, +            logger.log(level, format(ctx, "close()"));, +            logger.log(level, format(ctx, "deregister()"));, +            logger.log(level, format(ctx, "flush()"));]