[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, ThreadFactory threadFactory, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, threadFactory, true, maxPendingTasks, rejectedExecutionHandler);, +    }, +, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, executor, true, maxPendingTasks, rejectedExecutionHandler);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, ThreadFactory threadFactory, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, threadFactory, true, maxPendingTasks, rejectedExecutionHandler);, +    }, +, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, executor, true, maxPendingTasks, rejectedExecutionHandler);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, SingleThreadEventExecutor.DEFAULT_MAX_PENDING_EXECUTOR_TASKS,, +                RejectedExecutionHandlers.reject());, +     * @param rejectedHandler   the {@link RejectedExecutionHandler} to use., +    public DefaultEventExecutorGroup(int nThreads, ThreadFactory threadFactory, int maxPendingTasks,, +                                     RejectedExecutionHandler rejectedHandler) {, +        super(nThreads, threadFactory, maxPendingTasks, rejectedHandler);, +        return new DefaultEventExecutor(this, executor, (Integer) args[0], (RejectedExecutionHandler) args[1]);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, ThreadFactory threadFactory, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, threadFactory, true, maxPendingTasks, rejectedExecutionHandler);, +    }, +, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, executor, true, maxPendingTasks, rejectedExecutionHandler);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, SingleThreadEventExecutor.DEFAULT_MAX_PENDING_EXECUTOR_TASKS,, +                RejectedExecutionHandlers.reject());, +     * @param rejectedHandler   the {@link RejectedExecutionHandler} to use., +    public DefaultEventExecutorGroup(int nThreads, ThreadFactory threadFactory, int maxPendingTasks,, +                                     RejectedExecutionHandler rejectedHandler) {, +        super(nThreads, threadFactory, maxPendingTasks, rejectedHandler);, +        return new DefaultEventExecutor(this, executor, (Integer) args[0], (RejectedExecutionHandler) args[1]);, +++ b/common/src/main/java/io/netty/util/concurrent/RejectedExecutionHandler.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.util.concurrent;, +, +/**, + * Similar to {@link java.util.concurrent.RejectedExecutionHandler} but specific to {@link SingleThreadEventExecutor}., + */, +public interface RejectedExecutionHandler {, +, +    /**, +     * Called when someone tried to add a task to {@link SingleThreadEventExecutor} but this failed due capacity, +     * restrictions., +     */, +    void rejected(Runnable task, SingleThreadEventExecutor executor);, +}, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, ThreadFactory threadFactory, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, threadFactory, true, maxPendingTasks, rejectedExecutionHandler);, +    }, +, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks,, +                                RejectedExecutionHandler rejectedExecutionHandler) {, +        super(parent, executor, true, maxPendingTasks, rejectedExecutionHandler);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, SingleThreadEventExecutor.DEFAULT_MAX_PENDING_EXECUTOR_TASKS,, +                RejectedExecutionHandlers.reject());, +     * @param rejectedHandler   the {@link RejectedExecutionHandler} to use., +    public DefaultEventExecutorGroup(int nThreads, ThreadFactory threadFactory, int maxPendingTasks,, +                                     RejectedExecutionHandler rejectedHandler) {, +        super(nThreads, threadFactory, maxPendingTasks, rejectedHandler);, +        return new DefaultEventExecutor(this, executor, (Integer) args[0], (RejectedExecutionHandler) args[1]);, +++ b/common/src/main/java/io/netty/util/concurrent/RejectedExecutionHandler.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software]