[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsConfig.java, +import io.netty.handler.codec.http.DefaultHttpHeaders;, +import io.netty.handler.codec.http.HttpHeaders;, +import io.netty.handler.codec.http.HttpHeaders.Names;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.concurrent.Callable;, +    private final Map<CharSequence, Callable<?>> preflightHeaders;, +        preflightHeaders = builder.preflightHeaders;, +     *, +     * To expose other headers they need to be specified, which is what this method enables by, +     * adding the headers names to the CORS 'Access-Control-Expose-Headers' response header., +     * By default cookies are not included in CORS requests but if isCredentialsAllowed returns, +     * true cookies will be added to CORS requests. Setting this value to true will set the, +     * CORS 'Access-Control-Allow-Credentials' response header to true., +     *, +     * Please note that cookie support needs to be enabled on the client side as well., +     * The client needs to opt-in to send cookies by calling:, +     * <pre>, +     * xhr.withCredentials = true;, +     * </pre>, +     * The default value for 'withCredentials' is false in which case no cookies are sent., +     * Settning this to true will included cookies in cross origin requests., +     * When making a preflight request the client has to perform two request with can be inefficient., +     * This setting will set the CORS 'Access-Control-Max-Age' response header and enables the, +     * caching of the preflight response for the specified time. During this time no preflight, +     * request will be made., +     * @return {@code Set} of {@link HttpMethod}s that represent the allowed Request Methods., +     * The header names returned from this method will be used to set the CORS, +     * 'Access-Control-Allow-Headers' response header., +     * @return {@code Set<String>} of strings that represent the allowed Request Headers., +    /**, +     * Returns HTTP response headers that should be added to a CORS preflight response., +     *, +     * @return {@link HttpHeaders} the HTTP response headers to be added., +     */, +    public HttpHeaders preflightResponseHeaders() {, +        if (preflightHeaders.isEmpty()) {, +            return HttpHeaders.EMPTY_HEADERS;, +        }, +        final HttpHeaders preflightHeaders = new DefaultHttpHeaders();, +        for (Entry<CharSequence, Callable<?>> entry : this.preflightHeaders.entrySet()) {, +            final Object value = getValue(entry.getValue());, +            if (value instanceof Iterable) {, +                preflightHeaders.add(entry.getKey(), (Iterable<?>) value);, +            } else {, +                preflightHeaders.add(entry.getKey(), value);, +            }, +        }, +        return preflightHeaders;, +    }, +, +    private static <T> T getValue(final Callable<T> callable) {, +        try {, +            return callable.call();, +        } catch (final Exception e) {, +            throw new IllegalStateException("Could not generate value for callable [" + callable + ']', e);, +        }, +    }, +, +    @Override, +                ", allowedRequestHeaders=" + allowedRequestHeaders +, +                ", preflightHeaders=" + preflightHeaders + ']';, +    /**, +     * Creates a Builder instance with it's origin set to '*'., +     *, +     * @return Builder to support method chaining., +     */, +    /**, +     * Creates a {@link Builder} instance with the specified origin., +     *, +     * @return {@link Builder} to support method chaining., +     */, +    /**, +     * Builder used to configure and build a CorsConfig instance., +     */, +        private final Map<CharSequence, Callable<?>> preflightHeaders = new HashMap<CharSequence, Callable<?>>();, +        private boolean noPreflightHeaders;, +        /**, +         * Creates a new Builder instance with the origin passed in., +         *, +         * @param origin the origin to be used for this builder., +         */, +        /**, +         * Web browsers may set the 'Origin' request header to 'null' if a resource is loaded, +         * from the local file system. Calling this method will enable a successful CORS response, +         * with a wildcard for the the CORS response header 'Access-Control-Allow-Origin'., +         *, +         * @return {@link Builder} to support method chaining., +         */, +        /**, +         * Disables CORS support., +         *, +         * @return {@link Builder} to support method chaining., +         */, +        /**, +         * Specifies the headers to be exposed to calling clients., +         *]