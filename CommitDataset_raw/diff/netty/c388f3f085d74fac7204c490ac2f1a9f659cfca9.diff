[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +     * Creates a new connection with the given settings., +        activeStreams = new ActiveStreams(listeners);, +     * Allows events which would modify the collection of active streams to be queued while iterating via {@link, +     * #forEachActiveStream(Http2StreamVisitor)}., +         * Trigger the original intention of this event. Expect to modify the active streams list., +         * <p/>, +    /**, +     * Manages the list of currently active streams.  Queues any {@link Event}s that would modify the list of, +     * active streams in order to prevent modification while iterating., +     */, +    private final class ActiveStreams {, +, +        public ActiveStreams(List<Listener> listeners) {, +                    removeStream(stream);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +     * Creates a new connection with the given settings., +        activeStreams = new ActiveStreams(listeners);, +     * Allows events which would modify the collection of active streams to be queued while iterating via {@link, +     * #forEachActiveStream(Http2StreamVisitor)}., +         * Trigger the original intention of this event. Expect to modify the active streams list., +         * <p/>, +    /**, +     * Manages the list of currently active streams.  Queues any {@link Event}s that would modify the list of, +     * active streams in order to prevent modification while iterating., +     */, +    private final class ActiveStreams {, +, +        public ActiveStreams(List<Listener> listeners) {, +                    removeStream(stream);, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +     * Creates a new connection with the given settings., +        activeStreams = new ActiveStreams(listeners);, +     * Allows events which would modify the collection of active streams to be queued while iterating via {@link, +     * #forEachActiveStream(Http2StreamVisitor)}., +         * Trigger the original intention of this event. Expect to modify the active streams list., +         * <p/>, +    /**, +     * Manages the list of currently active streams.  Queues any {@link Event}s that would modify the list of, +     * active streams in order to prevent modification while iterating., +     */, +    private final class ActiveStreams {, +, +        public ActiveStreams(List<Listener> listeners) {, +                    removeStream(stream);, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +     * Creates a new connection with the given settings., +        activeStreams = new ActiveStreams(listeners);, +     * Allows events which would modify the collection of active streams to be queued while iterating via {@link, +     * #forEachActiveStream(Http2StreamVisitor)}., +         * Trigger the original intention of this event. Expect to modify the active streams list., +         * <p/>, +    /**, +     * Manages the list of currently active streams.  Queues any {@link Event}s that would modify the list of, +     * active streams in order to prevent modification while iterating., +     */, +    private final class ActiveStreams {, +, +        public ActiveStreams(List<Listener> listeners) {, +                    removeStream(stream);, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +, +++ /dev/null]