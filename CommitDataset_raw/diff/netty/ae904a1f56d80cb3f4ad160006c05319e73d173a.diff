[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +import io.netty.channel.ChannelOption;, +        run();, +        cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +import io.netty.channel.ChannelOption;, +        run();, +        cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    @Deprecated, +    public static final ChannelOption<Boolean> DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION =, +            new ChannelOption<Boolean>("DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION");, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +import io.netty.channel.ChannelOption;, +        run();, +        cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    @Deprecated, +    public static final ChannelOption<Boolean> DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION =, +            new ChannelOption<Boolean>("DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, +    private volatile boolean activeOnOpen;, +                IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION);, +        if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            return (T) Boolean.valueOf(activeOnOpen);, +        }, +        } else if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            setActiveOnOpen((Boolean) value);, +    private void setActiveOnOpen(boolean activeOnOpen) {, +        if (channel.isRegistered()) {, +            throw new IllegalStateException("Can only changed before channel was registered");, +        }, +        this.activeOnOpen = activeOnOpen;, +    }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +import io.netty.channel.ChannelOption;, +        run();, +        cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    @Deprecated, +    public static final ChannelOption<Boolean> DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION =, +            new ChannelOption<Boolean>("DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, +    private volatile boolean activeOnOpen;, +                IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION);, +        if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            return (T) Boolean.valueOf(activeOnOpen);, +        }, +        } else if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            setActiveOnOpen((Boolean) value);, +    private void setActiveOnOpen(boolean activeOnOpen) {, +        if (channel.isRegistered()) {, +            throw new IllegalStateException("Can only changed before channel was registered");, +        }, +        this.activeOnOpen = activeOnOpen;, +    }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import io.netty.channel.ChannelOption;, +        return ch.isOpen() && (, +                (config.getOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) && isRegistered()), +                || ch.socket().isBound());, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java, +import io.netty.channel.ChannelOption;, +        run();, +        cb.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    @Deprecated, +    public static final ChannelOption<Boolean> DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION =, +            new ChannelOption<Boolean>("DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultDatagramChannelConfig.java, +    private volatile boolean activeOnOpen;, +                IP_MULTICAST_ADDR, IP_MULTICAST_IF, IP_MULTICAST_TTL, IP_TOS, DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION);, +        if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            return (T) Boolean.valueOf(activeOnOpen);, +        }, +        } else if (option == DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) {, +            setActiveOnOpen((Boolean) value);, +    private void setActiveOnOpen(boolean activeOnOpen) {, +        if (channel.isRegistered()) {, +            throw new IllegalStateException("Can only changed before channel was registered");, +        }, +        this.activeOnOpen = activeOnOpen;, +    }, +++ b/transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java, +import io.netty.channel.ChannelOption;, +        return ch.isOpen() && (, +                (config.getOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) && isRegistered()), +                || ch.socket().isBound());, +++ b/transport/src/main/java/io/netty/channel/socket/oio/OioDatagramChannel.java, +import io.netty.channel.ChannelOption;, +        return isOpen() && (config.getOption(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION) && isRegistered()), +                || socket.isBound();]