[+++ b/buffer/src/test/java/io/netty/buffer/ByteProcessorTest.java, +        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));, +        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));, +++ b/buffer/src/test/java/io/netty/buffer/ByteProcessorTest.java, +        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));, +        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseDecoder.java, +                HttpResponseStatus.valueOf(Integer.parseInt(initialLine[1]), initialLine[2]), validateHeaders);, +++ b/buffer/src/test/java/io/netty/buffer/ByteProcessorTest.java, +        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));, +        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseDecoder.java, +                HttpResponseStatus.valueOf(Integer.parseInt(initialLine[1]), initialLine[2]), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseStatus.java, +import static io.netty.handler.codec.http.HttpConstants.SP;, +import static io.netty.util.ByteProcessor.FIND_ASCII_SPACE;, +import static java.lang.Integer.parseInt;, +, +     * If the specified code is a standard HTTP status code, a cached instance, +        HttpResponseStatus status = valueOf0(code);, +        return status != null ? status : new HttpResponseStatus(code);, +    }, +, +    private static HttpResponseStatus valueOf0(int code) {, +        return null;, +    }, +    /**, +     * Returns the {@link HttpResponseStatus} represented by the specified {@code code} and {@code reasonPhrase}., +     * If the specified code is a standard HTTP status {@code code} and {@code reasonPhrase}, a cached instance, +     * will be returned. Otherwise, a new instance will be returned., +     * @param code The response code value., +     * @param reasonPhrase The response code reason phrase., +     * @return the {@link HttpResponseStatus} represented by the specified {@code code} and {@code reasonPhrase}., +     */, +    public static HttpResponseStatus valueOf(int code, String reasonPhrase) {, +        HttpResponseStatus responseStatus = valueOf0(code);, +        return responseStatus != null && responseStatus.reasonPhrase().contentEquals(reasonPhrase) ? responseStatus :, +                new HttpResponseStatus(code, reasonPhrase);, +        return (line instanceof AsciiString) ? parseLine((AsciiString) line) : parseLine(line.toString());, +     * Parses the specified HTTP status line into a {@link HttpResponseStatus}. The expected formats of the line are:, +     * <ul>, +     * <li>{@code statusCode} (e.g. 200)</li>, +     * <li>{@code statusCode} {@code reasonPhrase} (e.g. 404 Not Found)</li>, +     * </ul>, +     *, +     * @throws IllegalArgumentException if the specified status line is malformed, +    public static HttpResponseStatus parseLine(String line) {, +        try {, +            int space = line.indexOf(' ');, +            return space == -1 ? valueOf(parseInt(line)) :, +                    valueOf(parseInt(line.substring(0, space)), line.substring(space + 1));, +        } catch (Exception e) {, +            throw new IllegalArgumentException("malformed status line: " + line, e);, +            int space = line.forEachByte(FIND_ASCII_SPACE);, +            return space == -1 ? valueOf(line.parseInt()) : valueOf(line.parseInt(0, space), line.toString(space + 1));, +        String codeString = Integer.toString(code);, +        codeAsText = new AsciiString(codeString);, +            this.bytes = (codeString + ' ' + reasonPhrase).getBytes(CharsetUtil.US_ASCII);, +++ b/buffer/src/test/java/io/netty/buffer/ByteProcessorTest.java, +        assertEquals(24, buf.forEachByte(19, length - 19, ByteProcessor.FIND_ASCII_SPACE));, +        assertEquals(25, buf.forEachByteDesc(0, length, ByteProcessor.FIND_ASCII_SPACE));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseDecoder.java, +                HttpResponseStatus.valueOf(Integer.parseInt(initialLine[1]), initialLine[2]), validateHeaders);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseStatus.java, +import static io.netty.handler.codec.http.HttpConstants.SP;, +import static io.netty.util.ByteProcessor.FIND_ASCII_SPACE;, +import static java.lang.Integer.parseInt;, +, +     * If the specified code is a standard HTTP status code, a cached instance, +        HttpResponseStatus status = valueOf0(code);, +        return status != null ? status : new HttpResponseStatus(code);, +    }, +, +    private static HttpResponseStatus valueOf0(int code) {, +        return null;, +    }, +    /**, +     * Returns the {@link HttpResponseStatus} represented by the specified {@code code} and {@code reasonPhrase}., +     * If the specified code is a standard HTTP status {@code code} and {@code reasonPhrase}, a cached instance, +     * will be returned. Otherwise, a new instance will be returned., +     * @param code The response code value., +     * @param reasonPhrase The response code reason phrase., +     * @return the {@link HttpResponseStatus} represented by the specified {@code code} and {@code reasonPhrase}., +     */, +    public static HttpResponseStatus valueOf(int code, String reasonPhrase) {, +        HttpResponseStatus responseStatus = valueOf0(code);, +        return responseStatus != null && responseStatus.reasonPhrase().contentEquals(reasonPhrase) ? responseStatus :, +                new HttpResponseStatus(code, reasonPhrase);, +        return (line instanceof AsciiString) ? parseLine((AsciiString) line) : parseLine(line.toString());, +     * Parses the specified HTTP status line into a {@link HttpResponseStatus}. The expected formats of the line are:, +     * <ul>, +     * <li>{@code statusCode} (e.g. 200)</li>, +     * <li>{@code statusCode} {@code reasonPhrase} (e.g. 404 Not Found)</li>, +     * </ul>, +     *, +     * @throws IllegalArgumentException if the specified status line is malformed, +    public static HttpResponseStatus parseLine(String line) {, +        try {, +            int space = line.indexOf(' ');, +            return space == -1 ? valueOf(parseInt(line)) :]