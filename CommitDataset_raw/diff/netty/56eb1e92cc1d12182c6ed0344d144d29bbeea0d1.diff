[+++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import java.util.concurrent.CountDownLatch;, +, +    @Test(timeout = 2000L), +    public void testCachesClearedOnClose() throws Exception {, +        final CountDownLatch resolveLatch = new CountDownLatch(1);, +        final CountDownLatch authoritativeLatch = new CountDownLatch(1);, +, +        DnsNameResolver resolver = newResolver().resolveCache(new DnsCache() {, +            @Override, +            public void clear() {, +                resolveLatch.countDown();, +            }, +, +            @Override, +            public boolean clear(String hostname) {, +                return false;, +            }, +, +            @Override, +            public List<? extends DnsCacheEntry> get(String hostname, DnsRecord[] additionals) {, +                return null;, +            }, +, +            @Override, +            public DnsCacheEntry cache(, +                    String hostname, DnsRecord[] additionals, InetAddress address, long originalTtl, EventLoop loop) {, +                return null;, +            }, +, +            @Override, +            public DnsCacheEntry cache(, +                    String hostname, DnsRecord[] additionals, Throwable cause, EventLoop loop) {, +                return null;, +            }, +        }), +        .authoritativeDnsServerCache(new DnsCache() {, +            @Override, +            public void clear() {, +                authoritativeLatch.countDown();, +            }, +, +            @Override, +            public boolean clear(String hostname) {, +                return false;, +            }, +, +            @Override, +            public List<? extends DnsCacheEntry> get(String hostname, DnsRecord[] additionals) {, +                return null;, +            }, +, +            @Override, +            public DnsCacheEntry cache(, +                    String hostname, DnsRecord[] additionals, InetAddress address, long originalTtl, EventLoop loop) {, +                return null;, +            }, +, +            @Override, +            public DnsCacheEntry cache(String hostname, DnsRecord[] additionals, Throwable cause, EventLoop loop) {, +                return null;, +            }, +        }).build();, +, +        resolver.close();, +        resolveLatch.await();, +        authoritativeLatch.await();, +    }]