[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java, +            cnameQuestion = new DefaultDnsQuestion(cname, question.type(), dnsClass);, +        final DnsQuestion question;, +        try {, +            question = new DefaultDnsQuestion(hostname, type, dnsClass);, +        } catch (Throwable cause) {, +            // Assume a single failure means that queries will succeed. If the hostname is invalid for one type, +            // there is no case where it is known to be valid for another type., +            promise.tryFailure(new IllegalArgumentException("Unable to create DNS Question for: [" + hostname + ", " +, +                    type + "]", cause));, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsResolveContext.java, +            cnameQuestion = new DefaultDnsQuestion(cname, question.type(), dnsClass);, +        final DnsQuestion question;, +        try {, +            question = new DefaultDnsQuestion(hostname, type, dnsClass);, +        } catch (Throwable cause) {, +            // Assume a single failure means that queries will succeed. If the hostname is invalid for one type, +            // there is no case where it is known to be valid for another type., +            promise.tryFailure(new IllegalArgumentException("Unable to create DNS Question for: [" + hostname + ", " +, +                    type + "]", cause));, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import static java.util.Collections.singletonList;, +    @Rule, +    public ExpectedException expectedException = ExpectedException.none();, +, +, +    @Test, +    public void testSearchDomainQueryFailureForSingleAddressTypeCompletes() {, +        expectedException.expect(UnknownHostException.class);, +        testSearchDomainQueryFailureCompletes(ResolvedAddressTypes.IPV4_ONLY);, +    }, +, +    @Test, +    public void testSearchDomainQueryFailureForMultipleAddressTypeCompletes() {, +        expectedException.expect(UnknownHostException.class);, +        testSearchDomainQueryFailureCompletes(ResolvedAddressTypes.IPV4_PREFERRED);, +    }, +, +    private void testSearchDomainQueryFailureCompletes(ResolvedAddressTypes types) {, +        DnsNameResolver resolver = newResolver(), +                .resolvedAddressTypes(types), +                .ndots(1), +                .searchDomains(singletonList(".")).build();, +        try {, +            resolver.resolve("invalid.com").syncUninterruptibly();, +        } finally {, +            resolver.close();, +        }, +    }]