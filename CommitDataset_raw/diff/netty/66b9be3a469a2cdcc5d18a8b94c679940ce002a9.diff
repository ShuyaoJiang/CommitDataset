[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    final int directMemoryCacheAlignment;, +    final int directMemoryCacheAlignmentMask;, +    protected PoolArena(PooledByteBufAllocator parent, int pageSize,, +          int maxOrder, int pageShifts, int chunkSize, int cacheAlignment) {, +        this.directMemoryCacheAlignment = cacheAlignment;, +        this.directMemoryCacheAlignmentMask = cacheAlignment - 1;, +, +            return directMemoryCacheAlignment == 0 ? reqCapacity : alignCapacity(reqCapacity);, +            assert directMemoryCacheAlignment == 0 || (normalizedCapacity & directMemoryCacheAlignmentMask) == 0;, +        if (directMemoryCacheAlignment > 0) {, +            return alignCapacity(reqCapacity);, +        }, +, +    int alignCapacity(int reqCapacity) {, +        int delta = reqCapacity & directMemoryCacheAlignmentMask;, +        return delta == 0 ? reqCapacity : reqCapacity + directMemoryCacheAlignment - delta;, +    }, +, +        HeapArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,, +                int pageShifts, int chunkSize, int directMemoryCacheAlignment) {, +            super(parent, pageSize, maxOrder, pageShifts, chunkSize,, +                    directMemoryCacheAlignment);, +            return new PoolChunk<byte[]>(this, new byte[chunkSize], pageSize, maxOrder, pageShifts, chunkSize, 0);, +            return new PoolChunk<byte[]>(this, new byte[capacity], capacity, 0);, +        DirectArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,, +                int pageShifts, int chunkSize, int directMemoryCacheAlignment) {, +            super(parent, pageSize, maxOrder, pageShifts, chunkSize,, +                    directMemoryCacheAlignment);, +        private int offsetCacheLine(ByteBuffer memory) {, +            return (int) (PlatformDependent.directBufferAddress(memory) & directMemoryCacheAlignmentMask);, +        }, +, +        protected PoolChunk<ByteBuffer> newChunk(int pageSize, int maxOrder,, +                int pageShifts, int chunkSize) {, +            if (directMemoryCacheAlignment == 0) {, +                return new PoolChunk<ByteBuffer>(this,, +                        allocateDirect(chunkSize), pageSize, maxOrder,, +                        pageShifts, chunkSize, 0);, +            }, +            final ByteBuffer memory = allocateDirect(chunkSize, +                    + directMemoryCacheAlignment);, +            return new PoolChunk<ByteBuffer>(this, memory, pageSize,, +                    maxOrder, pageShifts, chunkSize,, +                    offsetCacheLine(memory));, +            if (directMemoryCacheAlignment == 0) {, +                return new PoolChunk<ByteBuffer>(this,, +                        allocateDirect(capacity), capacity, 0);, +            }, +            final ByteBuffer memory = allocateDirect(capacity, +                    + directMemoryCacheAlignment);, +            return new PoolChunk<ByteBuffer>(this, memory, capacity,, +                    offsetCacheLine(memory));, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +    final int directMemoryCacheAlignment;, +    final int directMemoryCacheAlignmentMask;, +    protected PoolArena(PooledByteBufAllocator parent, int pageSize,, +          int maxOrder, int pageShifts, int chunkSize, int cacheAlignment) {, +        this.directMemoryCacheAlignment = cacheAlignment;, +        this.directMemoryCacheAlignmentMask = cacheAlignment - 1;, +, +            return directMemoryCacheAlignment == 0 ? reqCapacity : alignCapacity(reqCapacity);, +            assert directMemoryCacheAlignment == 0 || (normalizedCapacity & directMemoryCacheAlignmentMask) == 0;, +        if (directMemoryCacheAlignment > 0) {, +            return alignCapacity(reqCapacity);, +        }, +, +    int alignCapacity(int reqCapacity) {, +        int delta = reqCapacity & directMemoryCacheAlignmentMask;, +        return delta == 0 ? reqCapacity : reqCapacity + directMemoryCacheAlignment - delta;, +    }, +, +        HeapArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,, +                int pageShifts, int chunkSize, int directMemoryCacheAlignment) {, +            super(parent, pageSize, maxOrder, pageShifts, chunkSize,, +                    directMemoryCacheAlignment);, +            return new PoolChunk<byte[]>(this, new byte[chunkSize], pageSize, maxOrder, pageShifts, chunkSize, 0);, +            return new PoolChunk<byte[]>(this, new byte[capacity], capacity, 0);, +        DirectArena(PooledByteBufAllocator parent, int pageSize, int maxOrder,, +                int pageShifts, int chunkSize, int directMemoryCacheAlignment) {, +            super(parent, pageSize, maxOrder, pageShifts, chunkSize,, +                    directMemoryCacheAlignment);, +        private int offsetCacheLine(ByteBuffer memory) {, +            return (int) (PlatformDependent.directBufferAddress(memory) & directMemoryCacheAlignmentMask);, +        }, +, +        protected PoolChunk<ByteBuffer> newChunk(int pageSize, int maxOrder,, +                int pageShifts, int chunkSize) {, +            if (directMemoryCacheAlignment == 0) {, +                return new PoolChunk<ByteBuffer>(this,, +                        allocateDirect(chunkSize), pageSize, maxOrder,, +                        pageShifts, chunkSize, 0);, +            }, +            final ByteBuffer memory = allocateDirect(chunkSize, +                    + directMemoryCacheAlignment);, +            return new PoolChunk<ByteBuffer>(this, memory, pageSize,, +                    maxOrder, pageShifts, chunkSize,, +                    offsetCacheLine(memory));, +            if (directMemoryCacheAlignment == 0) {, +                return new PoolChunk<ByteBuffer>(this,]