[+++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoder.java, +                    int remainingLength = valueLength - alreadyReadChunkSize;, +                    if (toRead > remainingLength) {, +                        toRead = remainingLength;, +, +                    MemcacheContent chunk;, +                    if ((alreadyReadChunkSize += toRead) >= valueLength) {, +                        chunk = new DefaultLastMemcacheContent(chunkBuffer);, +                    } else {, +                        chunk = new DefaultMemcacheContent(chunkBuffer);, +                    }, +++ b/codec-memcache/src/main/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoder.java, +                    int remainingLength = valueLength - alreadyReadChunkSize;, +                    if (toRead > remainingLength) {, +                        toRead = remainingLength;, +, +                    MemcacheContent chunk;, +                    if ((alreadyReadChunkSize += toRead) >= valueLength) {, +                        chunk = new DefaultLastMemcacheContent(chunkBuffer);, +                    } else {, +                        chunk = new DefaultMemcacheContent(chunkBuffer);, +                    }, +++ b/codec-memcache/src/test/java/io/netty/handler/codec/memcache/binary/BinaryMemcacheDecoderTest.java, +import io.netty.util.CharsetUtil;, +        (byte) 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,, +        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6f, +        (byte) 0x80, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,, +        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6f, 0x6f, 0x01, 0x02, 0x03, 0x04, 0x05,, +        0x06, 0x07, 0x08, +    };, +, +    private static final byte[] GET_RESPONSE_CHUNK_1 =  {, +        (byte) 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,, +        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,, +        0x64, (byte) 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,, +        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,, +    };, +, +    private static final byte[] GET_RESPONSE_CHUNK_2 = {, +            0x6e, 0x64, (byte) 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,, +            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f,, +            0x75, 0x6e, 0x64, +            System.out.println(content);, +    @Test, +    public void shouldDecodeSeparatedValues() {, +        String msgBody = "Not found";, +        channel = new EmbeddedChannel(new BinaryMemcacheResponseDecoder());, +, +        channel.writeInbound(Unpooled.buffer().writeBytes(GET_RESPONSE_CHUNK_1));, +        channel.writeInbound(Unpooled.buffer().writeBytes(GET_RESPONSE_CHUNK_2));, +, +        // First message, +        BinaryMemcacheResponse response = (BinaryMemcacheResponse) channel.readInbound();, +        assertThat(response.getHeader().getStatus(), is(BinaryMemcacheResponseStatus.KEY_ENOENT));, +        assertThat(response.getHeader().getTotalBodyLength(), is(msgBody.length()));, +, +        // First message first content chunk, +        MemcacheContent content = (MemcacheContent) channel.readInbound();, +        assertThat(content, instanceOf(LastMemcacheContent.class));, +        assertThat(content.content().toString(CharsetUtil.UTF_8), is(msgBody));, +, +        // Second message, +        response = (BinaryMemcacheResponse) channel.readInbound();, +        assertThat(response.getHeader().getStatus(), is(BinaryMemcacheResponseStatus.KEY_ENOENT));, +        assertThat(response.getHeader().getTotalBodyLength(), is(msgBody.length()));, +, +        // Second message first content chunk, +        content = (MemcacheContent) channel.readInbound();, +        assertThat(content, instanceOf(MemcacheContent.class));, +        assertThat(content.content().toString(CharsetUtil.UTF_8), is(msgBody.substring(0, 7)));, +, +        // Second message second content chunk, +        content = (MemcacheContent) channel.readInbound();, +        assertThat(content, instanceOf(LastMemcacheContent.class));, +        assertThat(content.content().toString(CharsetUtil.UTF_8), is(msgBody.substring(7, 9)));, +, +        // Third message, +        response = (BinaryMemcacheResponse) channel.readInbound();, +        assertThat(response.getHeader().getStatus(), is(BinaryMemcacheResponseStatus.KEY_ENOENT));, +        assertThat(response.getHeader().getTotalBodyLength(), is(msgBody.length()));, +, +        // Third message first content chunk, +        content = (MemcacheContent) channel.readInbound();, +        assertThat(content, instanceOf(LastMemcacheContent.class));, +        assertThat(content.content().toString(CharsetUtil.UTF_8), is(msgBody));, +    }, +]