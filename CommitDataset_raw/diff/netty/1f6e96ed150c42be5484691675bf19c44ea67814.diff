[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +    protected ZlibWrapper determineWrapper(String acceptEncoding) {, +        float starQ = -1.0f;, +        float gzipQ = -1.0f;, +        float deflateQ = -1.0f;, +        for (String encoding : acceptEncoding.split(",")) {, +            float q = 1.0f;, +            int equalsPos = encoding.indexOf('=');, +            if (equalsPos != -1) {, +                try {, +                    q = Float.valueOf(encoding.substring(equalsPos + 1));, +                } catch (NumberFormatException e) {, +                    // Ignore encoding, +                    q = 0.0f;, +                }, +            }, +            if (encoding.indexOf("*") >= 0) {, +                starQ = q;, +            } else if (encoding.indexOf("gzip") >= 0 && q > gzipQ) {, +                gzipQ = q;, +            } else if (encoding.indexOf("deflate") >= 0 && q > deflateQ) {, +                deflateQ = q;, +            }, +        }, +        if (gzipQ > 0.0f || deflateQ > 0.0f) {, +            if (gzipQ >= deflateQ) {, +                return ZlibWrapper.GZIP;, +            } else {, +                return ZlibWrapper.ZLIB;, +            }, +        }, +        if (starQ > 0.0f) {, +            if (gzipQ == -1.0f) {, +            if (deflateQ == -1.0f) {, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentCompressor.java, +    protected ZlibWrapper determineWrapper(String acceptEncoding) {, +        float starQ = -1.0f;, +        float gzipQ = -1.0f;, +        float deflateQ = -1.0f;, +        for (String encoding : acceptEncoding.split(",")) {, +            float q = 1.0f;, +            int equalsPos = encoding.indexOf('=');, +            if (equalsPos != -1) {, +                try {, +                    q = Float.valueOf(encoding.substring(equalsPos + 1));, +                } catch (NumberFormatException e) {, +                    // Ignore encoding, +                    q = 0.0f;, +                }, +            }, +            if (encoding.indexOf("*") >= 0) {, +                starQ = q;, +            } else if (encoding.indexOf("gzip") >= 0 && q > gzipQ) {, +                gzipQ = q;, +            } else if (encoding.indexOf("deflate") >= 0 && q > deflateQ) {, +                deflateQ = q;, +            }, +        }, +        if (gzipQ > 0.0f || deflateQ > 0.0f) {, +            if (gzipQ >= deflateQ) {, +                return ZlibWrapper.GZIP;, +            } else {, +                return ZlibWrapper.ZLIB;, +            }, +        }, +        if (starQ > 0.0f) {, +            if (gzipQ == -1.0f) {, +            if (deflateQ == -1.0f) {, +        }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +/*, +* Copyright 2011 The Netty Project, +*, +* The Netty Project licenses this file to you under the Apache License,, +* version 2.0 (the "License"); you may not use this file except in compliance, +* with the License. You may obtain a copy of the License at:, +*, +* http://www.apache.org/licenses/LICENSE-2.0, +*, +* Unless required by applicable law or agreed to in writing, software, +* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, +* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, +* License for the specific language governing permissions and limitations, +* under the License., +*/, +package io.netty.handler.codec.http;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +import io.netty.handler.codec.compression.ZlibWrapper;, +, +public class HttpContentCompressorTest {, +    @Test, +    public void testGetTargetContentEncoding() throws Exception {, +        HttpContentCompressor compressor = new HttpContentCompressor();, +, +        String[] tests = {, +            // Accept-Encoding -> Content-Encoding]