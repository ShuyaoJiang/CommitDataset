[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +                    decoder.decode(buf.nioBuffer(index, length));, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +                    decoder.decode(buf.nioBuffer(index, length));, +++ b/buffer/src/test/java/io/netty/buffer/ByteBufUtilTest.java, +import java.nio.Buffer;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +, +    @Test, +    public void testIsTextMultiThreaded() throws Throwable {, +        final ByteBuf buffer = Unpooled.copiedBuffer("Hello, World!", CharsetUtil.ISO_8859_1);, +, +        try {, +            final AtomicInteger counter = new AtomicInteger(60000);, +            final AtomicReference<Throwable> errorRef = new AtomicReference<Throwable>();, +            List<Thread> threads = new ArrayList<Thread>();, +            for (int i = 0; i < 10; i++) {, +                Thread thread = new Thread(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                            while (errorRef.get() == null && counter.decrementAndGet() > 0) {, +                                assertTrue(ByteBufUtil.isText(buffer, CharsetUtil.ISO_8859_1));, +                            }, +                        } catch (Throwable cause) {, +                            errorRef.compareAndSet(null, cause);, +                        }, +                    }, +                });, +                threads.add(thread);, +            }, +            for (Thread thread : threads) {, +                thread.start();, +            }, +, +            for (Thread thread : threads) {, +                thread.join();, +            }, +, +            Throwable error = errorRef.get();, +            if (error != null) {, +                throw error;, +            }, +        } finally {, +            buffer.release();, +        }, +    }]