[+++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, +        if (start == end) {, +            // If start and end index is the same we need to return an empty sequence to conform to the interface., +            // As our expanding logic depends on the fact that we have a char[] with length > 0 we need to construct, +            // an instance for which this is true., +            return new AppendableCharSequence(Math.min(16, chars.length));, +        }, +++ b/common/src/main/java/io/netty/util/internal/AppendableCharSequence.java, +        if (start == end) {, +            // If start and end index is the same we need to return an empty sequence to conform to the interface., +            // As our expanding logic depends on the fact that we have a char[] with length > 0 we need to construct, +            // an instance for which this is true., +            return new AppendableCharSequence(Math.min(16, chars.length));, +        }, +++ b/common/src/test/java/io/netty/util/internal/AppendableCharSequenceTest.java, +    @Test, +    public void testEmptySubSequence() {, +        AppendableCharSequence master = new AppendableCharSequence(26);, +        master.append("abcdefghijlkmonpqrstuvwxyz");, +        AppendableCharSequence sub =  master.subSequence(0, 0);, +        assertEquals(0, sub.length());, +        sub.append('b');, +        assertEquals('b', sub.charAt(0));, +    }, +]