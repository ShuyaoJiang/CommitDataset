[+++ b/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +    protected boolean handleReadSuspend(ChannelHandlerContext ctx, ChannelEvent e) {, +                    return true;, +        return false;, +++ b/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +    protected boolean handleReadSuspend(ChannelHandlerContext ctx, ChannelEvent e) {, +                    return true;, +        return false;, +++ b/src/main/java/io/netty/handler/execution/seda/FineGrainedSedaExecutor.java, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which use the two given {@link Executor}'s as default. One is used for upstream events and one for downstream events., +     * , +     * @param upstreamExecutor   use the given {@link Executor} as default for downstream events, +     * @param downstreamExecutor use the given {@link Executor} as default for upstream events, +     */, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which used the given {@link Executor} as default for upstream and downstream events, +     * , +     * @param executor use the given {@link Executor} as default for upstream and downstream events, +     * , +     */, +++ b/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +    protected boolean handleReadSuspend(ChannelHandlerContext ctx, ChannelEvent e) {, +                    return true;, +        return false;, +++ b/src/main/java/io/netty/handler/execution/seda/FineGrainedSedaExecutor.java, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which use the two given {@link Executor}'s as default. One is used for upstream events and one for downstream events., +     * , +     * @param upstreamExecutor   use the given {@link Executor} as default for downstream events, +     * @param downstreamExecutor use the given {@link Executor} as default for upstream events, +     */, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which used the given {@link Executor} as default for upstream and downstream events, +     * , +     * @param executor use the given {@link Executor} as default for upstream and downstream events, +     * , +     */, +++ b/src/main/java/io/netty/handler/execution/seda/SedaHandler.java, +    /**, +     * Create a new {@link SedaHandler} which uses the given {@link SedaExecutor}, +     * , +     * @param executor the {@link SedaExecutor} to hand off tasks, +     */, +    /**, +     * Hand the event to the {@link Executor}, +     */, +, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +++ b/src/main/java/io/netty/handler/execution/ExecutionHandler.java, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +    protected boolean handleReadSuspend(ChannelHandlerContext ctx, ChannelEvent e) {, +                    return true;, +        return false;, +++ b/src/main/java/io/netty/handler/execution/seda/FineGrainedSedaExecutor.java, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which use the two given {@link Executor}'s as default. One is used for upstream events and one for downstream events., +     * , +     * @param upstreamExecutor   use the given {@link Executor} as default for downstream events, +     * @param downstreamExecutor use the given {@link Executor} as default for upstream events, +     */, +    /**, +     * Create a new {@link FineGrainedSedaExecutor} which used the given {@link Executor} as default for upstream and downstream events, +     * , +     * @param executor use the given {@link Executor} as default for upstream and downstream events, +     * , +     */, +++ b/src/main/java/io/netty/handler/execution/seda/SedaHandler.java, +    /**, +     * Create a new {@link SedaHandler} which uses the given {@link SedaExecutor}, +     * , +     * @param executor the {@link SedaExecutor} to hand off tasks, +     */, +    /**, +     * Hand the event to the {@link Executor}, +     */, +, +        // check if the read was suspend, +        if (!handleReadSuspend(ctx, e)) {, +    }, +++ b/src/main/java/io/netty/handler/execution/seda/SedaMemoryAwareThreadPoolExecutor.java, +    /**, +     * , +     * @see MemoryAwareThreadPoolExecutor#MemoryAwareThreadPoolExecutor(int, long, long, long, TimeUnit, ObjectSizeEstimator, ThreadFactory), +     */, +    /**, +     * @see MemoryAwareThreadPoolExecutor#MemoryAwareThreadPoolExecutor(int, long, long, long, TimeUnit, ThreadFactory)]