[+++ b/buffer/src/main/java/io/netty/buffer/PoolChunkList.java, +        return minUsage == Integer.MIN_VALUE ? 1 : minUsage;, +        return maxUsage == Integer.MAX_VALUE ? 100 : maxUsage;, +++ b/buffer/src/main/java/io/netty/buffer/PoolChunkList.java, +        return minUsage == Integer.MIN_VALUE ? 1 : minUsage;, +        return maxUsage == Integer.MAX_VALUE ? 100 : maxUsage;, +++ b/buffer/src/test/java/io/netty/buffer/PooledByteBufAllocatorTest.java, +    @Test, +    public void testPoolChunkListMetric() {, +        for (PoolArenaMetric arenaMetric: PooledByteBufAllocator.DEFAULT.heapArenas()) {, +            assertPoolChunkListMetric(arenaMetric);, +        }, +    }, +, +    private static void assertPoolChunkListMetric(PoolArenaMetric arenaMetric) {, +        List<PoolChunkListMetric> lists = arenaMetric.chunkLists();, +        assertEquals(6, lists.size());, +        assertPoolChunkListMetric(lists.get(0), 1, 25);, +        assertPoolChunkListMetric(lists.get(1), 1, 50);, +        assertPoolChunkListMetric(lists.get(2), 25, 75);, +        assertPoolChunkListMetric(lists.get(4), 75, 100);, +        assertPoolChunkListMetric(lists.get(5), 100, 100);, +    }, +, +    private static void assertPoolChunkListMetric(PoolChunkListMetric m, int min, int max) {, +        assertEquals(min, m.minUsage());, +        assertEquals(max, m.maxUsage());, +    }, +]