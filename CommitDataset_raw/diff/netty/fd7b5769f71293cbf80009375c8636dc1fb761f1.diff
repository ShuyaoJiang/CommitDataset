[+++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelHandler.Sharable;, + *     private final {@link ChannelHandler} idleStateHandler;, + *         this.idleStateHandler = <b>new {@link IdleStateHandler}(timer, 60, 30, 0), // timer must be shared.</b>, + *             idleStateHandler,, +@Sharable, +        destroy(ctx);, +        destroy(ctx);, +        State state = (State) ctx.getAttachment();, +        state.lastReadTime = System.currentTimeMillis();, +            State state = (State) ctx.getAttachment();, +            state.lastWriteTime = System.currentTimeMillis();, +        State state = new State();, +        ctx.setAttachment(state);, +, +        state.lastReadTime = state.lastWriteTime = System.currentTimeMillis();, +            state.readerIdleTimeout = timer.newTimeout(, +            state.writerIdleTimeout = timer.newTimeout(, +            state.allIdleTimeout = timer.newTimeout(, +    private void destroy(ChannelHandlerContext ctx) {, +        State state = (State) ctx.getAttachment();, +        if (state.readerIdleTimeout != null) {, +            state.readerIdleTimeout.cancel();, +            state.readerIdleTimeout = null;, +        if (state.writerIdleTimeout != null) {, +            state.writerIdleTimeout.cancel();, +            state.writerIdleTimeout = null;, +        if (state.allIdleTimeout != null) {, +            state.allIdleTimeout.cancel();, +            state.allIdleTimeout = null;, +            State state = (State) ctx.getAttachment();, +            long lastReadTime = state.lastReadTime;, +                state.readerIdleTimeout =, +                state.readerIdleTimeout =, +            State state = (State) ctx.getAttachment();, +            long lastWriteTime = state.lastWriteTime;, +                state.writerIdleTimeout =, +                state.writerIdleTimeout =, +            State state = (State) ctx.getAttachment();, +            long lastIoTime = Math.max(state.lastReadTime, state.lastWriteTime);, +                state.allIdleTimeout =, +                state.allIdleTimeout =, +, +    private static final class State {, +        State() {, +            super();, +        }, +, +        volatile Timeout readerIdleTimeout;, +        volatile long lastReadTime;, +, +        volatile Timeout writerIdleTimeout;, +        volatile long lastWriteTime;, +, +        volatile Timeout allIdleTimeout;, +    }, +++ b/src/main/java/org/jboss/netty/handler/timeout/IdleStateHandler.java, +import org.jboss.netty.channel.ChannelHandler;, +import org.jboss.netty.channel.ChannelHandler.Sharable;, + *     private final {@link ChannelHandler} idleStateHandler;, + *         this.idleStateHandler = <b>new {@link IdleStateHandler}(timer, 60, 30, 0), // timer must be shared.</b>, + *             idleStateHandler,, +@Sharable, +        destroy(ctx);, +        destroy(ctx);, +        State state = (State) ctx.getAttachment();, +        state.lastReadTime = System.currentTimeMillis();, +            State state = (State) ctx.getAttachment();, +            state.lastWriteTime = System.currentTimeMillis();, +        State state = new State();, +        ctx.setAttachment(state);, +, +        state.lastReadTime = state.lastWriteTime = System.currentTimeMillis();, +            state.readerIdleTimeout = timer.newTimeout(, +            state.writerIdleTimeout = timer.newTimeout(, +            state.allIdleTimeout = timer.newTimeout(, +    private void destroy(ChannelHandlerContext ctx) {, +        State state = (State) ctx.getAttachment();, +        if (state.readerIdleTimeout != null) {, +            state.readerIdleTimeout.cancel();, +            state.readerIdleTimeout = null;, +        if (state.writerIdleTimeout != null) {, +            state.writerIdleTimeout.cancel();, +            state.writerIdleTimeout = null;, +        if (state.allIdleTimeout != null) {, +            state.allIdleTimeout.cancel();, +            state.allIdleTimeout = null;, +            State state = (State) ctx.getAttachment();, +            long lastReadTime = state.lastReadTime;, +                state.readerIdleTimeout =, +                state.readerIdleTimeout =, +            State state = (State) ctx.getAttachment();, +            long lastWriteTime = state.lastWriteTime;, +                state.writerIdleTimeout =, +                state.writerIdleTimeout =, +            State state = (State) ctx.getAttachment();, +            long lastIoTime = Math.max(state.lastReadTime, state.lastWriteTime);, +                state.allIdleTimeout =, +                state.allIdleTimeout =]