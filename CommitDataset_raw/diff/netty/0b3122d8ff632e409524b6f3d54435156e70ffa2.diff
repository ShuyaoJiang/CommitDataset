[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +        CharSequence charsetCharSequence = getCharsetAsSequence(message);, +     * @deprecated use {@link #getCharsetAsSequence(HttpMessage)}, +    @Deprecated, +        return getCharsetAsSequence(message);, +    }, +, +    /**, +     * Fetch charset from message's Content-Type header as a char sequence., +     *, +     * A lot of sites/possibly clients have charset="CHARSET", for example charset="utf-8". Or "utf8" instead of "utf-8", +     * This is not according to standard, but this method provide an ability to catch desired mistakes manually in code, +     *, +     * @return the {@code CharSequence} with charset from message's Content-Type header, +     * or {@code null} if charset is not presented, +     */, +    public static CharSequence getCharsetAsSequence(HttpMessage message) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java, +        CharSequence charsetCharSequence = getCharsetAsSequence(message);, +     * @deprecated use {@link #getCharsetAsSequence(HttpMessage)}, +    @Deprecated, +        return getCharsetAsSequence(message);, +    }, +, +    /**, +     * Fetch charset from message's Content-Type header as a char sequence., +     *, +     * A lot of sites/possibly clients have charset="CHARSET", for example charset="utf-8". Or "utf8" instead of "utf-8", +     * This is not according to standard, but this method provide an ability to catch desired mistakes manually in code, +     *, +     * @return the {@code CharSequence} with charset from message's Content-Type header, +     * or {@code null} if charset is not presented, +     */, +    public static CharSequence getCharsetAsSequence(HttpMessage message) {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpUtilTest.java, +        assertEquals("\"utf8\"", HttpUtil.getCharsetAsSequence(message));, +        assertNull(HttpUtil.getCharsetAsSequence(message));, +        assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(message, CharsetUtil.UTF_8));, +        assertEquals(CharsetUtil.UTF_8, HttpUtil.getCharset(message, CharsetUtil.UTF_8));]