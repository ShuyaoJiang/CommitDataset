[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +            // There were tasks in the queue. Wait a little bit more until no tasks are queued for the quiet period or, +            // terminate if the quiet period is 0., +            // See https://github.com/netty/netty/issues/4241, +            if (gracefulShutdownQuietPeriod == 0) {, +                return true;, +            }, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +            // There were tasks in the queue. Wait a little bit more until no tasks are queued for the quiet period or, +            // terminate if the quiet period is 0., +            // See https://github.com/netty/netty/issues/4241, +            if (gracefulShutdownQuietPeriod == 0) {, +                return true;, +            }, +++ b/transport/src/test/java/io/netty/channel/AbstractEventLoopTest.java, +import io.netty.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +, +    @Test(timeout = 5000), +    public void testShutdownGracefullyNoQuietPeriod() throws Exception {, +        EventLoopGroup loop = newEventLoopGroup();, +        ServerBootstrap b = new ServerBootstrap();, +        b.group(loop), +                .channel(newChannel()), +                .childHandler(new ChannelInboundHandlerAdapter());, +, +        // Not close the Channel to ensure the EventLoop is still shutdown in time., +        b.bind(0).sync().channel();, +, +        Future<?> f = loop.shutdownGracefully(0, 1, TimeUnit.MINUTES);, +        assertTrue(loop.awaitTermination(2, TimeUnit.SECONDS));, +        assertTrue(f.syncUninterruptibly().isSuccess());, +        assertTrue(loop.isShutdown());, +        assertTrue(loop.isTerminated());, +    }, +]