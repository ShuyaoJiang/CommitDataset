[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import java.util.concurrent.atomic.AtomicLong;, +import io.netty.channel.ChannelStateEvent;, +import io.netty.handler.codec.PrematureChannelClosureException;, + * , + * If the {@link Channel} gets closed and there are requests missing for a response, + * a {@link PrematureChannelClosureException} is thrown., + * , +    private final AtomicLong requestResponseCounter = new AtomicLong(0);, +, +            Object obj =  super.encode(ctx, channel, msg);, +            , +            // check if the request is chunked if so do not increment, +            if (msg instanceof HttpRequest && !((HttpRequest) msg).isChunked()) {, +                requestResponseCounter.incrementAndGet();, +            } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                // increment as its the last chunk, +                requestResponseCounter.incrementAndGet();, +            }, +            , +            return obj;, +        , +                Object msg = super.decode(ctx, channel, buffer, state);, +                , +                if (msg != null) {, +                    // check if its a HttpMessage and its not chunked, +                    if (msg instanceof HttpMessage && !((HttpMessage) msg).isChunked()) {, +                        requestResponseCounter.decrementAndGet();, +                    } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                        requestResponseCounter.decrementAndGet();, +                    }, +                }, +               , +                return msg;, +, +        @Override, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {, +            super.channelClosed(ctx, e);, +            , +            long missingResponses = requestResponseCounter.get();, +            if (missingResponses > 0) {, +                throw new PrematureChannelClosureException("Channel closed but still missing " + missingResponses + " response(s)");, +            }, +        }, +        , +        , +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpClientCodec.java, +import java.util.concurrent.atomic.AtomicLong;, +import io.netty.channel.ChannelStateEvent;, +import io.netty.handler.codec.PrematureChannelClosureException;, + * , + * If the {@link Channel} gets closed and there are requests missing for a response, + * a {@link PrematureChannelClosureException} is thrown., + * , +    private final AtomicLong requestResponseCounter = new AtomicLong(0);, +, +            Object obj =  super.encode(ctx, channel, msg);, +            , +            // check if the request is chunked if so do not increment, +            if (msg instanceof HttpRequest && !((HttpRequest) msg).isChunked()) {, +                requestResponseCounter.incrementAndGet();, +            } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                // increment as its the last chunk, +                requestResponseCounter.incrementAndGet();, +            }, +            , +            return obj;, +        , +                Object msg = super.decode(ctx, channel, buffer, state);, +                , +                if (msg != null) {, +                    // check if its a HttpMessage and its not chunked, +                    if (msg instanceof HttpMessage && !((HttpMessage) msg).isChunked()) {, +                        requestResponseCounter.decrementAndGet();, +                    } else if (msg instanceof HttpChunk && ((HttpChunk) msg).isLast()) {, +                        requestResponseCounter.decrementAndGet();, +                    }, +                }, +               , +                return msg;, +, +        @Override, +        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {, +            super.channelClosed(ctx, e);, +            , +            long missingResponses = requestResponseCounter.get();, +            if (missingResponses > 0) {, +                throw new PrematureChannelClosureException("Channel closed but still missing " + missingResponses + " response(s)");, +            }, +        }, +        , +        , +++ b/codec/src/main/java/io/netty/handler/codec/PrematureChannelClosureException.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *]