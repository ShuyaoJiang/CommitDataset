[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +, +jint write0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_write(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return write0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_writeAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return write0(env, clazz, fd, (void *) address, pos, limit);, +}, +, +jint read0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_read(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return read0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_readAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return read0(env, clazz, fd, (void*) address, pos, limit);, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +, +jint write0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_write(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return write0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_writeAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return write0(env, clazz, fd, (void *) address, pos, limit);, +}, +, +jint read0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_read(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return read0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_readAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return read0(env, clazz, fd, (void*) address, pos, limit);, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_writeAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit);, +jint Java_io_netty_channel_epoll_Native_readAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +, +jint write0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_write(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return write0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_writeAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return write0(env, clazz, fd, (void *) address, pos, limit);, +}, +, +jint read0(JNIEnv * env, jclass clazz, jint fd, void *buffer, jint pos, jint limit) {, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_read(JNIEnv * env, jclass clazz, jint fd, jobject jbuffer, jint pos, jint limit) {, +    void *buffer = (*env)->GetDirectBufferAddress(env, jbuffer);, +    if (buffer == NULL) {, +        throwRuntimeException(env, "Unable to access address of buffer");, +        return -1;, +    }, +    return read0(env, clazz, fd, buffer, pos, limit);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_readAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit) {, +    return read0(env, clazz, fd, (void*) address, pos, limit);, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jint Java_io_netty_channel_epoll_Native_writeAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit);, +jint Java_io_netty_channel_epoll_Native_readAddress(JNIEnv * env, jclass clazz, jint fd, jlong address, jint pos, jint limit);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollSocketChannel.java, +            if (buf.hasMemoryAddress()) {, +                localFlushedAmount = Native.writeAddress(fd, buf.memoryAddress(), readerIndex, buf.writerIndex());, +            } else {]