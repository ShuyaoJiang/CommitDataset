[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +    protected Object decodeLast(, +            ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer), +            throws Exception {, +        Object frame = decode(ctx, channel, buffer);, +        headerBlockDecompressor.end();, +        return frame;, +    }, +, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +    protected Object decodeLast(, +            ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer), +            throws Exception {, +        Object frame = decode(ctx, channel, buffer);, +        headerBlockDecompressor.end();, +        return frame;, +    }, +, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecompressor.java, +        return new SpdyHeaderBlockZlibDecompressor();, +    abstract void decode(ChannelBuffer decompressed) throws Exception;, +    abstract void end();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +    protected Object decodeLast(, +            ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer), +            throws Exception {, +        Object frame = decode(ctx, channel, buffer);, +        headerBlockDecompressor.end();, +        return frame;, +    }, +, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecompressor.java, +        return new SpdyHeaderBlockZlibDecompressor();, +    abstract void decode(ChannelBuffer decompressed) throws Exception;, +    abstract void end();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibDecompressor.java, +, +    @Override, +    public void end() {, +        z.inflateEnd();, +        z.next_in = null;, +        z.next_out = null;, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +    protected Object decodeLast(, +            ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer), +            throws Exception {, +        Object frame = decode(ctx, channel, buffer);, +        headerBlockDecompressor.end();, +        return frame;, +    }, +, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecompressor.java, +        return new SpdyHeaderBlockZlibDecompressor();, +    abstract void decode(ChannelBuffer decompressed) throws Exception;, +    abstract void end();, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibDecompressor.java, +, +    @Override, +    public void end() {, +        z.inflateEnd();, +        z.next_in = null;, +        z.next_out = null;, +    }, +++ b/src/main/java/org/jboss/netty/handler/codec/spdy/SpdyHeaderBlockZlibDecompressor.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.codec.spdy;, +, +import java.util.zip.DataFormatException;, +import java.util.zip.Inflater;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +, +import static org.jboss.netty.handler.codec.spdy.SpdyCodecUtil.*;, +, +class SpdyHeaderBlockZlibDecompressor extends SpdyHeaderBlockDecompressor {, +, +    private final byte[] out = new byte[8192];]