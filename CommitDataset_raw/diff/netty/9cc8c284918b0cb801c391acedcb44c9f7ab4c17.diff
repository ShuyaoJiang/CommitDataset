[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * proper synchronization in the handler implementation.  Also, please refer to, + * the {@link ChannelPipelineCoverage} annotation to understand the, + * relationship between a handler and its stateful properties., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * proper synchronization in the handler implementation.  Also, please refer to, + * the {@link ChannelPipelineCoverage} annotation to understand the, + * relationship between a handler and its stateful properties., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.handler.execution.ExecutionHandler;, + * A list of {@link ChannelHandler}s which handles or intercepts a, + * {@link ChannelEvent}., + * <p>, + * {@link ChannelPipeline} implements an advanced form of the, + * <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/InterceptingFilter.html">Intercepting, + * Filter</a> pattern to give a user full control over how an event is handled, + * and how {@link ChannelHandler}s in the pipeline interact with each other., + * <p>, + * Every {@link Channel} has its own pipeline instance.  Each pipeline is, + * created by the {@link ChannelPipelineFactory} specified when a new channel, + * is created by the {@link ChannelFactory}., + * <p>, + * A user is supposed to have one or more {@link ChannelHandler}s in a, + * pipeline to receive I/O events (e.g. read) and to request I/O operations, + * (e.g. write and close).  For example, a typical server will have the following, + * handlers in each channel's pipeline, but your mileage may vary depending on, + * the complexity and characteristics of the protocol and business logic:, + *, + * <ol>, + * <li>Protocol Decoder - translates binary data (e.g. {@link ChannelBuffer}), + *                        into a Java object.</li>, + * <li>Protocol Encoder - translates a Java object into binary data.</li>, + * <li>{@link ExecutionHandler} - applies a thread model.</li>, + * <li>Business Logic Handler - performs the actual business logic, + *                              (e.g. database access).</li>, + * </ol>, + * A {@link ChannelHandler} can be added or removed at any time because a, + * The following diagram describes how events flow upstream and downstream in, + * a {@link ChannelPipeline} typically:, +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * proper synchronization in the handler implementation.  Also, please refer to, + * the {@link ChannelPipelineCoverage} annotation to understand the, + * relationship between a handler and its stateful properties., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipeline.java, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.handler.execution.ExecutionHandler;, + * A list of {@link ChannelHandler}s which handles or intercepts a, + * {@link ChannelEvent}., + * <p>, + * {@link ChannelPipeline} implements an advanced form of the, + * <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/InterceptingFilter.html">Intercepting, + * Filter</a> pattern to give a user full control over how an event is handled, + * and how {@link ChannelHandler}s in the pipeline interact with each other., + * <p>, + * Every {@link Channel} has its own pipeline instance.  Each pipeline is, + * created by the {@link ChannelPipelineFactory} specified when a new channel, + * is created by the {@link ChannelFactory}., + * <p>, + * A user is supposed to have one or more {@link ChannelHandler}s in a, + * pipeline to receive I/O events (e.g. read) and to request I/O operations, + * (e.g. write and close).  For example, a typical server will have the following, + * handlers in each channel's pipeline, but your mileage may vary depending on, + * the complexity and characteristics of the protocol and business logic:, + *, + * <ol>, + * <li>Protocol Decoder - translates binary data (e.g. {@link ChannelBuffer}), + *                        into a Java object.</li>, + * <li>Protocol Encoder - translates a Java object into binary data.</li>, + * <li>{@link ExecutionHandler} - applies a thread model.</li>, + * <li>Business Logic Handler - performs the actual business logic, + *                              (e.g. database access).</li>, + * </ol>, + * A {@link ChannelHandler} can be added or removed at any time because a, + * The following diagram describes how events flow upstream and downstream in, + * a {@link ChannelPipeline} typically:, +++ b/src/main/java/org/jboss/netty/channel/ChannelUpstreamHandler.java, + * <p>, + * Also, please refer to the {@link ChannelPipelineCoverage} annotation to, + * understand the relationship between a handler and its stateful properties.]