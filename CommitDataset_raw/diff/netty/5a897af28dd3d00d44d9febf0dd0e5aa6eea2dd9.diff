[+++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +    public int bytesBefore(byte value) {, +        return bytesBefore(readerIndex(), readableBytes(), value);, +    }, +, +    public int bytesBefore(ChannelBufferIndexFinder indexFinder) {, +        return bytesBefore(readerIndex(), readableBytes(), indexFinder);, +    }, +, +    public int bytesBefore(int length, byte value) {, +        checkReadableBytes(length);, +        return bytesBefore(readerIndex(), length, value);, +    }, +, +    public int bytesBefore(int length, ChannelBufferIndexFinder indexFinder) {, +        checkReadableBytes(length);, +        return bytesBefore(readerIndex(), length, indexFinder);, +    }, +, +    public int bytesBefore(int index, int length, byte value) {, +        int endIndex = indexOf(index, index + length, value);, +        if (endIndex < 0) {, +            return -1;, +        }, +        return endIndex - index;, +    }, +, +    public int bytesBefore(int index, int length,, +            ChannelBufferIndexFinder indexFinder) {, +        int endIndex = indexOf(index, index + length, indexFinder);, +        if (endIndex < 0) {, +            return -1;, +        }, +        return endIndex - index;, +    }, +, +++ b/src/main/java/org/jboss/netty/buffer/AbstractChannelBuffer.java, +    public int bytesBefore(byte value) {, +        return bytesBefore(readerIndex(), readableBytes(), value);, +    }, +, +    public int bytesBefore(ChannelBufferIndexFinder indexFinder) {, +        return bytesBefore(readerIndex(), readableBytes(), indexFinder);, +    }, +, +    public int bytesBefore(int length, byte value) {, +        checkReadableBytes(length);, +        return bytesBefore(readerIndex(), length, value);, +    }, +, +    public int bytesBefore(int length, ChannelBufferIndexFinder indexFinder) {, +        checkReadableBytes(length);, +        return bytesBefore(readerIndex(), length, indexFinder);, +    }, +, +    public int bytesBefore(int index, int length, byte value) {, +        int endIndex = indexOf(index, index + length, value);, +        if (endIndex < 0) {, +            return -1;, +        }, +        return endIndex - index;, +    }, +, +    public int bytesBefore(int index, int length,, +            ChannelBufferIndexFinder indexFinder) {, +        int endIndex = indexOf(index, index + length, indexFinder);, +        if (endIndex < 0) {, +            return -1;, +        }, +        return endIndex - index;, +    }, +, +++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffer.java, + * Various {@link #indexOf(int, int, byte)} methods help you locate an index of, + * a value which meets a certain criteria.  Complicated dynamic sequential, + * search can be done with {@link ChannelBufferIndexFinder} as well as simple, + * static single byte search., + * <p>, + * If you are decoding variable length data such as NUL-terminated string, you, + * will find {@link #bytesBefore(byte)} also useful., +     * @deprecated Use {@link #bytesBefore(ChannelBufferIndexFinder)} and {@link #readBytes(int)} instead., +    @Deprecated, +     * @deprecated Use {@link #bytesBefore(ChannelBufferIndexFinder)} and {@link #readSlice(int)} instead., +    @Deprecated, +     * @deprecated Use {@link #bytesBefore(ChannelBufferIndexFinder)} and {@link #skipBytes(int)} instead., +    @Deprecated, +     * Locates the first place where the specified {@code indexFinder}, +     *         returned {@code true}.  {@code -1} if the {@code indexFinder}, +     *         did not return {@code true} at all., +     * Locates the first occurrence of the specified {@code value} in this, +     * buffer.  The search takes place from the current {@code readerIndex}, +     * (inclusive) to the current {@code writerIndex} (exclusive)., +     * <p>, +     * This method does not modify {@code readerIndex} or {@code writerIndex} of, +     * this buffer., +     *, +     * @return the number of bytes between the current {@code readerIndex}, +     *         and the first occurrence if found. {@code -1} otherwise., +     */, +    int bytesBefore(byte value);]