[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java, +import java.util.Collection;, +            // Allocate the bytes for the connection window to the streams, but do not write., +            allocateBytesForTree(connectionStream, connectionWindow);, +, +            // Now write all of the allocated bytes. Copying the activeStreams array to avoid, +            // side effects due to stream removal/addition which might occur as a result, +            // of end-of-stream or errors., +            Collection<Http2Stream> streams = connection.activeStreams();, +            for (Http2Stream stream : streams.toArray(new Http2Stream[streams.size()])) {, +                state(stream).writeAllocatedBytes();, +     * This will allocate bytes by stream weight and priority for the entire tree rooted at {@code parent}, but does, +     * not write any bytes., +     *, +     * @param parent The parent of the tree., +    private int allocateBytesForTree(Http2Stream parent, int connectionWindow) {, +                int childBytesAllocated = allocateBytesForTree(child, connectionWindow);, +                if (bytesForChild > 0) {, +                    if (state.streamableBytesForTree() > 0) {, +                    int childBytesAllocated = allocateBytesForTree(child, bytesForTree);, +            // Also artificially reduce the streamable bytes for this tree to give the appearance, +            // that the data has been written. This will be restored before the allocated bytes are, +            // actually written., +            incrementStreamableBytesForTree(-bytes);, +         * Write bytes allocated bytes for this stream., +        void writeAllocatedBytes() {, +            int numBytes = allocated;, +, +            // Restore the number of streamable bytes to this branch., +            incrementStreamableBytesForTree(allocated);, +            resetAllocated();, +, +            // Perform the write., +            writeBytes(numBytes);, +            return max(0, min(pendingBytes - allocated, window));, +                if (bytes - bytesAttempted <= 0 && !isNextFrameEmpty()) {, +                    // The frame had data and all of it was written., +         * @return {@code true} if there is a next frame and its size is zero., +         */, +        private boolean isNextFrameEmpty() {, +            return hasFrame() && peek().size() == 0;, +        }, +, +        /**]