[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +            decodeString(decoder, src.nioBuffer(readerIndex, len), dst);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +            decodeString(decoder, src.nioBuffer(readerIndex, len), dst);, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.util.ArrayList;, +import java.util.List;, +    @Test(timeout = 5000), +    public void testToStringMultipleThreads() throws Throwable {, +        buffer.clear();, +        buffer.writeBytes("Hello, World!".getBytes(CharsetUtil.ISO_8859_1));, +, +        final AtomicInteger counter = new AtomicInteger(60000);, +        final AtomicReference<Throwable> errorRef = new AtomicReference<Throwable>();, +        List<Thread> threads = new ArrayList<Thread>();, +        for (int i = 0; i < 10; i++) {, +            Thread thread = new Thread(new Runnable() {, +                @Override, +                public void run() {, +                    try {, +                        while (errorRef.get() == null && counter.decrementAndGet() > 0) {, +                            assertEquals("Hello, World!", buffer.toString(CharsetUtil.ISO_8859_1));, +                        }, +                    } catch (Throwable cause) {, +                        errorRef.compareAndSet(null, cause);, +                    }, +                }, +            });, +            threads.add(thread);, +        }, +        for (Thread thread : threads) {, +            thread.start();, +        }, +, +        for (Thread thread : threads) {, +            thread.join();, +        }, +, +        Throwable error = errorRef.get();, +        if (error != null) {, +            throw error;, +        }, +    }, +]