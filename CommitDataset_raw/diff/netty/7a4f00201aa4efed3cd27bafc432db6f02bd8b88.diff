[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * The {@link NioDatagramWorker} for this NioDatagramChannnel., +    final NioDatagramWorker worker;, +            final NioDatagramWorker worker) {, +     * WriteTask is a simple runnable performs writes by delegating the {@link NioDatagramWorker}., +            NioDatagramWorker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * The {@link NioDatagramWorker} for this NioDatagramChannnel., +    final NioDatagramWorker worker;, +            final NioDatagramWorker worker) {, +     * WriteTask is a simple runnable performs writes by delegating the {@link NioDatagramWorker}., +            NioDatagramWorker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, + * A {@link NioDatagramPipelineSink} contains an array of {@link NioDatagramWorker}s, +    private final NioDatagramWorker[] workers;, +     * Creates a new {@link NioDatagramPipelineSink} with a the number of {@link NioDatagramWorker}s specified in workerCount., +     * The {@link NioDatagramWorker}s take care of reading and writing for the {@link NioDatagramChannel}., +        workers = new NioDatagramWorker[workerCount];, +            workers[i] = new NioDatagramWorker(id, i + 1, workerExecutor);, +                    NioDatagramWorker.close(channel, future);, +                    NioDatagramWorker.close(channel, future);, +                    NioDatagramWorker.disconnect(channel, future);, +                NioDatagramWorker.setInterestOps(channel, future, ((Integer) value), +            NioDatagramWorker.write(channel, true);, +                NioDatagramWorker.close(channel, future);, +    NioDatagramWorker nextWorker() {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +     * The {@link NioDatagramWorker} for this NioDatagramChannnel., +    final NioDatagramWorker worker;, +            final NioDatagramWorker worker) {, +     * WriteTask is a simple runnable performs writes by delegating the {@link NioDatagramWorker}., +            NioDatagramWorker.write(NioDatagramChannel.this, false);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, + * A {@link NioDatagramPipelineSink} contains an array of {@link NioDatagramWorker}s, +    private final NioDatagramWorker[] workers;, +     * Creates a new {@link NioDatagramPipelineSink} with a the number of {@link NioDatagramWorker}s specified in workerCount., +     * The {@link NioDatagramWorker}s take care of reading and writing for the {@link NioDatagramChannel}., +        workers = new NioDatagramWorker[workerCount];, +            workers[i] = new NioDatagramWorker(id, i + 1, workerExecutor);, +                    NioDatagramWorker.close(channel, future);, +                    NioDatagramWorker.close(channel, future);, +                    NioDatagramWorker.disconnect(channel, future);, +                NioDatagramWorker.setInterestOps(channel, future, ((Integer) value), +            NioDatagramWorker.write(channel, true);, +                NioDatagramWorker.close(channel, future);, +    NioDatagramWorker nextWorker() {, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2008, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.channel.socket.nio;, +, +import static org.jboss.netty.channel.Channels.*;, +, +import java.io.IOException;, +import java.net.SocketAddress;, +import java.nio.ByteBuffer;, +import java.nio.channels.AsynchronousCloseException;, +import java.nio.channels.CancelledKeyException;, +import java.nio.channels.ClosedChannelException;, +import java.nio.channels.DatagramChannel;, +import java.nio.channels.NotYetConnectedException;, +import java.nio.channels.SelectionKey;, +import java.nio.channels.Selector;, +import java.util.Iterator;, +import java.util.Queue;, +import java.util.Set;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.ReadWriteLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBufferFactory;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelException;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.ReceiveBufferSizePredictor;]