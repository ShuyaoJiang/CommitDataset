[+++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +import java.net.IDN;, +import java.net.SocketAddress;, +import java.util.List;, +import java.util.Locale;, +, +import javax.net.ssl.SSLEngine;, +, +                onSslContext(ctx, hostname, future.getNow());, +                            onSslContext(ctx, hostname, future.getNow());, +    /**, +     * Called upon successful completion of the {@link AsyncMapping}'s {@link Future}., +     *, +     * @see #select(ChannelHandlerContext, String), +     */, +    private void onSslContext(ChannelHandlerContext ctx, String hostname, SslContext sslContext) {, +        this.selection = new Selection(sslContext, hostname);, +            replaceHandler(ctx, hostname, sslContext);, +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +    /**, +     * The default implementation of this method will simply replace {@code this} {@link SniHandler}, +     * instance with a {@link SslHandler}. Users may override this method to implement custom behavior., +     *, +     * Please be aware that this method may get called after a client has already disconnected and, +     * custom implementations must take it into consideration when overriding this method., +     *, +     * It's also possible for the hostname argument to be {@code null}., +     */, +    protected void replaceHandler(ChannelHandlerContext ctx, String hostname, SslContext sslContext) throws Exception {, +        SSLEngine sslEngine = null;, +        try {, +            sslEngine = sslContext.newEngine(ctx.alloc());, +            ctx.pipeline().replace(this, SslHandler.class.getName(), SslContext.newHandler(sslEngine));, +            sslEngine = null;, +        } finally {, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +import java.net.IDN;, +import java.net.SocketAddress;, +import java.util.List;, +import java.util.Locale;, +, +import javax.net.ssl.SSLEngine;, +, +                onSslContext(ctx, hostname, future.getNow());, +                            onSslContext(ctx, hostname, future.getNow());, +    /**, +     * Called upon successful completion of the {@link AsyncMapping}'s {@link Future}., +     *, +     * @see #select(ChannelHandlerContext, String), +     */, +    private void onSslContext(ChannelHandlerContext ctx, String hostname, SslContext sslContext) {, +        this.selection = new Selection(sslContext, hostname);, +            replaceHandler(ctx, hostname, sslContext);, +            ctx.fireExceptionCaught(cause);, +        }, +    }, +, +    /**, +     * The default implementation of this method will simply replace {@code this} {@link SniHandler}, +     * instance with a {@link SslHandler}. Users may override this method to implement custom behavior., +     *, +     * Please be aware that this method may get called after a client has already disconnected and, +     * custom implementations must take it into consideration when overriding this method., +     *, +     * It's also possible for the hostname argument to be {@code null}., +     */, +    protected void replaceHandler(ChannelHandlerContext ctx, String hostname, SslContext sslContext) throws Exception {, +        SSLEngine sslEngine = null;, +        try {, +            sslEngine = sslContext.newEngine(ctx.alloc());, +            ctx.pipeline().replace(this, SslHandler.class.getName(), SslContext.newHandler(sslEngine));, +            sslEngine = null;, +        } finally {, +++ b/handler/src/test/java/io/netty/handler/ssl/SniHandlerTest.java, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.nullValue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.junit.Assume.assumeTrue;, +, +import java.io.File;, +import java.net.InetSocketAddress;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +import javax.net.ssl.SSLEngine;, +import javax.xml.bind.DatatypeConverter;, +, +import org.junit.Test;, +, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.channel.DefaultEventLoopGroup;, +import io.netty.channel.local.LocalAddress;, +import io.netty.channel.local.LocalChannel;, +import io.netty.channel.local.LocalServerChannel;]