[+++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, +            ChannelBuffer buf;, +                fireMessageReceived(channel, buf);, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelWorker.java, +            ChannelBuffer buf;, +                fireMessageReceived(channel, buf);, +++ b/src/main/java/org/jboss/netty/channel/socket/http/HttpTunnelingClientSocketChannel.java, +import static org.jboss.netty.channel.Channels.*;, +import org.jboss.netty.handler.codec.http.Cookie;, +import org.jboss.netty.handler.codec.http.CookieDecoder;, +import org.jboss.netty.handler.codec.http.CookieEncoder;, +import org.jboss.netty.handler.codec.http.DefaultHttpChunk;, +import org.jboss.netty.handler.codec.http.DefaultHttpRequest;, +import org.jboss.netty.handler.codec.http.HttpChunk;, +import org.jboss.netty.handler.codec.http.HttpHeaders;, +import org.jboss.netty.handler.codec.http.HttpMethod;, +import org.jboss.netty.handler.codec.http.HttpRequest;, +import org.jboss.netty.handler.codec.http.HttpRequestEncoder;, +import org.jboss.netty.handler.codec.http.HttpResponse;, +import org.jboss.netty.handler.codec.http.HttpResponseDecoder;, +import org.jboss.netty.handler.codec.http.HttpVersion;, +    private static final String JSESSIONID = "JSESSIONID";, +, +    final BlockingQueue<ChannelBuffer> messages = new LinkedTransferQueue<ChannelBuffer>();, +        HttpRequest req = new DefaultHttpRequest(, +                HttpVersion.HTTP_1_1, HttpMethod.POST, url.getRawPath());, +        req.setHeader(HttpHeaders.Names.HOST, url.getHost());, +        req.setHeader(HttpHeaders.Names.CONTENT_TYPE, "application/octet-stream");, +        req.setHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);, +        req.setHeader(HttpHeaders.Names.CONTENT_TRANSFER_ENCODING, HttpHeaders.Values.BINARY);, +        , +        if (sessionId != null) {, +            CookieEncoder ce = new CookieEncoder(false);, +            ce.addCookie(JSESSIONID, sessionId);, +            req.setHeader(HttpHeaders.Names.COOKIE, ce.encode());, +        channel.write(req);, +    }, +, +        // TODO Expose the codec options via HttpTunnelingSocketChannelConfig, +        channelPipeline.addLast("decoder", new HttpResponseDecoder());, +        channelPipeline.addLast("encoder", new HttpRequestEncoder());, +            channel.write(new DefaultHttpChunk(a)).awaitUninterruptibly();, +    ChannelBuffer receiveChunk() {, +        ChannelBuffer buf = null;, +                channel.write(HttpChunk.LAST_CHUNK).awaitUninterruptibly();, +        , +        private volatile boolean readingChunks;, +            if (!readingChunks) {, +                HttpResponse res = (HttpResponse) e.getMessage();, +                String newSessionId = null;, +                newSessionId = getSessionId(res, HttpHeaders.Names.SET_COOKIE);, +                if (newSessionId == null) {, +                    newSessionId = getSessionId(res, HttpHeaders.Names.SET_COOKIE2);, +                }, +                , +                if (newSessionId == null) {, +                    // XXX: Server does not support JSESSIONID?, +                }, +                , +                , +                sessionId = newSessionId;, +                , +                if (res.isChunked()) {, +                    readingChunks = true;, +                } else {, +                    ChannelBuffer content = res.getContent();, +                    if (content.readable()) {, +                        System.out.println("1: " + content.toString("ISO-8859-1"));, +                        messages.offer(content);, +            } else {, +                HttpChunk chunk = (HttpChunk) e.getMessage();, +                if (!chunk.isLast()) {, +                    System.out.println("2: " + chunk.getContent());, +                    messages.offer(chunk.getContent());, +                } else {, +                    readingChunks = false;, +                , +    , +    static String getSessionId(HttpResponse res, String headerName) {, +        CookieDecoder decoder = null;, +        for (String v: res.getHeaders(headerName)) {, +            if (decoder == null) {, +                decoder = new CookieDecoder();, +            }, +            , +            for (Cookie c: decoder.decode(v)) {, +                if (c.getName().equals(JSESSIONID)) {, +                    return c.getValue();, +                }, +            }, +        }, +        return null;, +    }]