[+++ b/handler/src/main/java/io/netty/handler/ssl/PemPrivateKey.java, +        byte[] bytes = key.getEncoded();, +        if (bytes == null) {, +            throw new IllegalArgumentException(key.getClass().getName() + " does not support encoding");, +        }, +, +        ByteBuf encoded = Unpooled.wrappedBuffer(bytes);, +++ b/handler/src/main/java/io/netty/handler/ssl/PemPrivateKey.java, +        byte[] bytes = key.getEncoded();, +        if (bytes == null) {, +            throw new IllegalArgumentException(key.getClass().getName() + " does not support encoding");, +        }, +, +        ByteBuf encoded = Unpooled.wrappedBuffer(bytes);, +++ b/handler/src/test/java/io/netty/handler/ssl/PemEncodedTest.java, +import java.security.PrivateKey;, +import io.netty.buffer.Unpooled;, +import io.netty.buffer.UnpooledByteBufAllocator;, +    @Test(expected = IllegalArgumentException.class), +    public void testEncodedReturnsNull() throws Exception {, +        PemPrivateKey.toPEM(UnpooledByteBufAllocator.DEFAULT, true, new PrivateKey() {, +            @Override, +            public String getAlgorithm() {, +                return null;, +            }, +, +            @Override, +            public String getFormat() {, +                return null;, +            }, +, +            @Override, +            public byte[] getEncoded() {, +                return null;, +            }, +        });, +    }, +]