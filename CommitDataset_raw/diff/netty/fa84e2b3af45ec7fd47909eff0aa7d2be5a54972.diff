[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    ChannelHandlerContext ctx;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    ChannelHandlerContext ctx;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    final void flush0(ChannelHandlerContext ctx) {, +    static final class Http2MultiplexCodecStream extends DefaultHttp2FrameStream {, +                            writeDoneAndNoFlush |= consumeBytes(stream.id(), numBytesToBeConsumed);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    ChannelHandlerContext ctx;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    final void flush0(ChannelHandlerContext ctx) {, +    static final class Http2MultiplexCodecStream extends DefaultHttp2FrameStream {, +                            writeDoneAndNoFlush |= consumeBytes(stream.id(), numBytesToBeConsumed);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodecBuilder.java, +    private Http2FrameWriter frameWriter;, +    // For testing only., +    Http2MultiplexCodecBuilder frameWriter(Http2FrameWriter frameWriter) {, +        this.frameWriter = checkNotNull(frameWriter, "frameWriter");, +        return this;, +    }, +, +        Http2FrameWriter frameWriter = this.frameWriter;, +        if (frameWriter != null) {, +            // This is to support our tests and will never be executed by the user as frameWriter(...), +            // is package-private., +            DefaultHttp2Connection connection = new DefaultHttp2Connection(isServer(), maxReservedStreams());, +            Long maxHeaderListSize = initialSettings().maxHeaderListSize();, +            Http2FrameReader frameReader = new DefaultHttp2FrameReader(maxHeaderListSize == null ?, +                    new DefaultHttp2HeadersDecoder(true) :, +                    new DefaultHttp2HeadersDecoder(true, maxHeaderListSize));, +, +            if (frameLogger() != null) {, +                frameWriter = new Http2OutboundFrameLogger(frameWriter, frameLogger());, +                frameReader = new Http2InboundFrameLogger(frameReader, frameLogger());, +            }, +            Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(connection, frameWriter);, +            if (encoderEnforceMaxConcurrentStreams()) {, +                encoder = new StreamBufferingEncoder(encoder);, +            }, +            Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder, frameReader);, +, +            return build(decoder, encoder, initialSettings());, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java, +    ChannelHandlerContext ctx;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +    final void flush0(ChannelHandlerContext ctx) {, +    static final class Http2MultiplexCodecStream extends DefaultHttp2FrameStream {, +                            writeDoneAndNoFlush |= consumeBytes(stream.id(), numBytesToBeConsumed);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodecBuilder.java, +    private Http2FrameWriter frameWriter;, +    // For testing only., +    Http2MultiplexCodecBuilder frameWriter(Http2FrameWriter frameWriter) {, +        this.frameWriter = checkNotNull(frameWriter, "frameWriter");, +        return this;, +    }, +, +        Http2FrameWriter frameWriter = this.frameWriter;, +        if (frameWriter != null) {, +            // This is to support our tests and will never be executed by the user as frameWriter(...), +            // is package-private., +            DefaultHttp2Connection connection = new DefaultHttp2Connection(isServer(), maxReservedStreams());, +            Long maxHeaderListSize = initialSettings().maxHeaderListSize();, +            Http2FrameReader frameReader = new DefaultHttp2FrameReader(maxHeaderListSize == null ?, +                    new DefaultHttp2HeadersDecoder(true) :, +                    new DefaultHttp2HeadersDecoder(true, maxHeaderListSize));, +, +            if (frameLogger() != null) {, +                frameWriter = new Http2OutboundFrameLogger(frameWriter, frameLogger());, +                frameReader = new Http2InboundFrameLogger(frameReader, frameLogger());, +            }, +            Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(connection, frameWriter);, +            if (encoderEnforceMaxConcurrentStreams()) {, +                encoder = new StreamBufferingEncoder(encoder);, +            }, +            Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(connection, encoder, frameReader);, +, +            return build(decoder, encoder, initialSettings());, +        }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2FrameCodecTest.java, +import static io.netty.handler.codec.http2.Http2TestUtil.anyChannelPromise;, +import static io.netty.handler.codec.http2.Http2TestUtil.anyHttp2Settings;, +import static io.netty.handler.codec.http2.Http2TestUtil.assertEqualsAndRelease;, +import static io.netty.handler.codec.http2.Http2TestUtil.bb;, +, +, +    private Http2FrameInboundWriter frameInboundWriter;, +, +        frameWriter = Http2TestUtil.mockedFrameWriter();, +, +        frameInboundWriter = new Http2FrameInboundWriter(channel);, +        verify(frameWriter).writeSettings(eqFrameCodecCtx(), anyHttp2Settings(), anyChannelPromise());, +, +        frameInboundWriter.writeInboundSettings(initialRemoteSettings);, +, +        verify(frameWriter).writeSettingsAck(eqFrameCodecCtx(), anyChannelPromise());, +, +        frameInboundWriter.writeInboundSettingsAck();, +        frameInboundWriter.writeInboundHeaders(1, request, 31, true);]