[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static java.lang.Math.max;, +            max(1, SystemPropertyUtil.getInt("io.netty.http2.childrenMapSize", 4));, +        /**, +         * The minimum stream ID allowed when creating the next stream. This only applies at the time the stream is, +         * created. If the ID of the stream being created is less than this value, stream creation will fail. Upon, +         * successful creation of a stream, this value is incremented to the next valid stream ID., +         */, +        private int nextStreamIdToCreate;, +        /**, +         * Used for reservation of stream IDs. Stream IDs can be reserved in advance by applications before the streams, +         * are actually created.  For example, applications may choose to buffer stream creation attempts as a way of, +         * working around {@code SETTINGS_MAX_CONCURRENT_STREAMS}, in which case they will reserve stream IDs for each, +         * buffered stream., +         */, +        private int nextReservationStreamId;, +            if (server) {, +                nextStreamIdToCreate = 2;, +                nextReservationStreamId = 0;, +            } else {, +                nextStreamIdToCreate = 1;, +                // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +                nextReservationStreamId = 1;, +            }, +        public int incrementAndGetNextStreamId() {, +            return nextReservationStreamId >= 0 ? nextReservationStreamId += 2 : nextReservationStreamId;, +        }, +, +        private void incrementExpectedStreamId(int streamId) {, +            if (streamId > nextReservationStreamId && nextReservationStreamId >= 0) {, +                nextReservationStreamId = streamId;, +            }, +            nextStreamIdToCreate = streamId + 2;, +            return isValidStreamId(streamId) && streamId <= lastStreamCreated();, +            incrementExpectedStreamId(streamId);, +            incrementExpectedStreamId(streamId);, +            return nextStreamIdToCreate > 1 ? nextStreamIdToCreate - 2 : 0;, +            if (streamId < nextStreamIdToCreate) {, +                        streamId, nextStreamIdToCreate);, +            if (nextStreamIdToCreate <= 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static java.lang.Math.max;, +            max(1, SystemPropertyUtil.getInt("io.netty.http2.childrenMapSize", 4));, +        /**, +         * The minimum stream ID allowed when creating the next stream. This only applies at the time the stream is, +         * created. If the ID of the stream being created is less than this value, stream creation will fail. Upon, +         * successful creation of a stream, this value is incremented to the next valid stream ID., +         */, +        private int nextStreamIdToCreate;, +        /**, +         * Used for reservation of stream IDs. Stream IDs can be reserved in advance by applications before the streams, +         * are actually created.  For example, applications may choose to buffer stream creation attempts as a way of, +         * working around {@code SETTINGS_MAX_CONCURRENT_STREAMS}, in which case they will reserve stream IDs for each, +         * buffered stream., +         */, +        private int nextReservationStreamId;, +            if (server) {, +                nextStreamIdToCreate = 2;, +                nextReservationStreamId = 0;, +            } else {, +                nextStreamIdToCreate = 1;, +                // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +                nextReservationStreamId = 1;, +            }, +        public int incrementAndGetNextStreamId() {, +            return nextReservationStreamId >= 0 ? nextReservationStreamId += 2 : nextReservationStreamId;, +        }, +, +        private void incrementExpectedStreamId(int streamId) {, +            if (streamId > nextReservationStreamId && nextReservationStreamId >= 0) {, +                nextReservationStreamId = streamId;, +            }, +            nextStreamIdToCreate = streamId + 2;, +            return isValidStreamId(streamId) && streamId <= lastStreamCreated();, +            incrementExpectedStreamId(streamId);, +            incrementExpectedStreamId(streamId);, +            return nextStreamIdToCreate > 1 ? nextStreamIdToCreate - 2 : 0;, +            if (streamId < nextStreamIdToCreate) {, +                        streamId, nextStreamIdToCreate);, +            if (nextStreamIdToCreate <= 0) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +         * Increment and get the next generated stream id this endpoint. If negative, the stream IDs are, +        int incrementAndGetNextStreamId();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static java.lang.Math.max;, +            max(1, SystemPropertyUtil.getInt("io.netty.http2.childrenMapSize", 4));, +        /**, +         * The minimum stream ID allowed when creating the next stream. This only applies at the time the stream is, +         * created. If the ID of the stream being created is less than this value, stream creation will fail. Upon, +         * successful creation of a stream, this value is incremented to the next valid stream ID., +         */, +        private int nextStreamIdToCreate;, +        /**, +         * Used for reservation of stream IDs. Stream IDs can be reserved in advance by applications before the streams, +         * are actually created.  For example, applications may choose to buffer stream creation attempts as a way of, +         * working around {@code SETTINGS_MAX_CONCURRENT_STREAMS}, in which case they will reserve stream IDs for each, +         * buffered stream., +         */, +        private int nextReservationStreamId;, +            if (server) {]