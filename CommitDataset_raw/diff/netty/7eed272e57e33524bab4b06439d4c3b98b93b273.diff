[+++ b/buffer/src/main/java/io/netty/buffer/FilteredMessageBuf.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.buffer;, +, +import java.util.Collection;, +import java.util.Iterator;, +, +public abstract class FilteredMessageBuf implements MessageBuf<Object> {, +, +    protected final MessageBuf<Object> buf;, +, +    @SuppressWarnings("unchecked"), +    protected FilteredMessageBuf(MessageBuf<?> buf) {, +        if (buf == null) {, +            throw new NullPointerException("buf");, +        }, +        this.buf = (MessageBuf<Object>) buf;, +    }, +, +    protected abstract Object filter(Object msg);, +, +    @Override, +    public int drainTo(Collection<? super Object> c) {, +        return buf.drainTo(c);, +    }, +, +    @Override, +    public int drainTo(Collection<? super Object> c, int maxElements) {, +        return buf.drainTo(c, maxElements);, +    }, +, +    @Override, +    public BufType type() {, +        return buf.type();, +    }, +, +    @Override, +    public int maxCapacity() {, +        return buf.maxCapacity();, +    }, +, +    @Override, +    public boolean isReadable() {, +        return buf.isReadable();, +    }, +, +    @Override, +    public boolean isReadable(int size) {, +        return buf.isReadable(size);, +    }, +, +    @Override, +    public boolean isWritable() {, +        return buf.isWritable();, +    }, +, +    @Override, +    public boolean isWritable(int size) {, +        return buf.isWritable(size);, +    }, +, +    @Override, +    public boolean add(Object e) {, +        if (e == null) {, +            throw new NullPointerException("e");, +        }, +, +        e = filter(e);, +        ensureNonNull(e);, +, +        return buf.add(e);, +    }, +, +    @Override, +    public boolean offer(Object e) {, +        if (e == null) {, +            throw new NullPointerException("e");, +        }, +, +        e = filter(e);, +        ensureNonNull(e);, +, +        return buf.offer(e);, +    }, +]