[+++ b/transport-native-epoll/src/main/c/netty_unix_socket.c, + /* , + * Since glibc 2.8, the _GNU_SOURCE feature test macro must be defined, + * (before including any header files) in order to obtain the, + * definition of this structure. See <a href=https://linux.die.net/man/7/unix>, + */, +#define _GNU_SOURCE, +static jclass peerCredentialsClass = NULL;, +static jmethodID peerCredentialsMethodId = NULL;, +, +static jobject netty_channel_unix_socket_getPeerCredentials(JNIEnv *env, jclass clazz, jint fd) {, +     struct ucred credentials;, +     if(netty_unix_socket_getOption(env,fd, SOL_SOCKET, SO_PEERCRED, &credentials, sizeof (credentials))) {, +         return NULL;, +     }, +     return (*env)->NewObject(env, peerCredentialsClass, peerCredentialsMethodId, credentials.pid, credentials.uid, credentials.gid);, +}, +    return fixed_method_table_size + 3;, +    ++dynamicMethod;, +    dynamicTypeName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/unix/PeerCredentials;");, +    dynamicMethod->name = "getPeerCredentials";, +    dynamicMethod->signature = netty_unix_util_prepend("(I)L", dynamicTypeName);, +    dynamicMethod->fnPtr = (void *) netty_channel_unix_socket_getPeerCredentials;, +    free(dynamicTypeName);, +    nettyClassName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/unix/PeerCredentials");, +    jclass localPeerCredsClass = (*env)->FindClass(env, nettyClassName);, +    free(nettyClassName);, +    nettyClassName = NULL;, +    if (localPeerCredsClass == NULL) {, +        // pending exception..., +        return JNI_ERR;, +    }, +    peerCredentialsClass = (jclass) (*env)->NewGlobalRef(env, localPeerCredsClass);, +    if (peerCredentialsClass == NULL) {, +        // out-of-memory!, +        netty_unix_errors_throwOutOfMemoryError(env);, +        return JNI_ERR;, +    }, +    peerCredentialsMethodId = (*env)->GetMethodID(env, peerCredentialsClass, "<init>", "(III)V");, +    if (peerCredentialsMethodId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get method ID: PeerCredentials.<init>(int, int, int)");, +        return JNI_ERR;, +    }, +, +    if (peerCredentialsClass != NULL) {, +        (*env)->DeleteGlobalRef(env, peerCredentialsClass);, +        peerCredentialsClass = NULL;, +    }, +++ b/transport-native-epoll/src/main/c/netty_unix_socket.c, + /* , + * Since glibc 2.8, the _GNU_SOURCE feature test macro must be defined, + * (before including any header files) in order to obtain the, + * definition of this structure. See <a href=https://linux.die.net/man/7/unix>, + */, +#define _GNU_SOURCE, +static jclass peerCredentialsClass = NULL;, +static jmethodID peerCredentialsMethodId = NULL;, +, +static jobject netty_channel_unix_socket_getPeerCredentials(JNIEnv *env, jclass clazz, jint fd) {, +     struct ucred credentials;, +     if(netty_unix_socket_getOption(env,fd, SOL_SOCKET, SO_PEERCRED, &credentials, sizeof (credentials))) {, +         return NULL;, +     }, +     return (*env)->NewObject(env, peerCredentialsClass, peerCredentialsMethodId, credentials.pid, credentials.uid, credentials.gid);, +}, +    return fixed_method_table_size + 3;, +    ++dynamicMethod;, +    dynamicTypeName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/unix/PeerCredentials;");, +    dynamicMethod->name = "getPeerCredentials";, +    dynamicMethod->signature = netty_unix_util_prepend("(I)L", dynamicTypeName);, +    dynamicMethod->fnPtr = (void *) netty_channel_unix_socket_getPeerCredentials;, +    free(dynamicTypeName);, +    nettyClassName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/unix/PeerCredentials");, +    jclass localPeerCredsClass = (*env)->FindClass(env, nettyClassName);, +    free(nettyClassName);, +    nettyClassName = NULL;, +    if (localPeerCredsClass == NULL) {, +        // pending exception..., +        return JNI_ERR;, +    }, +    peerCredentialsClass = (jclass) (*env)->NewGlobalRef(env, localPeerCredsClass);, +    if (peerCredentialsClass == NULL) {, +        // out-of-memory!, +        netty_unix_errors_throwOutOfMemoryError(env);, +        return JNI_ERR;, +    }, +    peerCredentialsMethodId = (*env)->GetMethodID(env, peerCredentialsClass, "<init>", "(III)V");, +    if (peerCredentialsMethodId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get method ID: PeerCredentials.<init>(int, int, int)");, +        return JNI_ERR;, +    }, +, +    if (peerCredentialsClass != NULL) {, +        (*env)->DeleteGlobalRef(env, peerCredentialsClass);, +        peerCredentialsClass = NULL;, +    }, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollDomainSocketChannel.java, +import io.netty.channel.unix.PeerCredentials;, +import java.io.IOException;, +    /**]