[+++ b/pom.xml, +                  <!-- This is needed because of java.util.zip.Deflater and NIO UDP multicast-->, +            <!-- Used for NIO UDP multicast -->, +            <ignore>java.nio.channels.DatagramChannel</ignore>, +            <ignore>java.nio.channels.MembershipKey</ignore>, +            <ignore>java.net.StandardSocketOptions</ignore>, +++ b/pom.xml, +                  <!-- This is needed because of java.util.zip.Deflater and NIO UDP multicast-->, +            <!-- Used for NIO UDP multicast -->, +            <ignore>java.nio.channels.DatagramChannel</ignore>, +            <ignore>java.nio.channels.MembershipKey</ignore>, +            <ignore>java.net.StandardSocketOptions</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannel.java, +import io.netty.channel.ChannelFuture;, +    ChannelFuture joinGroup(InetAddress multicastAddress);, +    ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +    ChannelFuture leaveGroup(InetAddress multicastAddress);, +    ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +++ b/pom.xml, +                  <!-- This is needed because of java.util.zip.Deflater and NIO UDP multicast-->, +            <!-- Used for NIO UDP multicast -->, +            <ignore>java.nio.channels.DatagramChannel</ignore>, +            <ignore>java.nio.channels.MembershipKey</ignore>, +            <ignore>java.net.StandardSocketOptions</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannel.java, +import io.netty.channel.ChannelFuture;, +    ChannelFuture joinGroup(InetAddress multicastAddress);, +    ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +    ChannelFuture leaveGroup(InetAddress multicastAddress);, +    ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/DefaultNioDatagramChannelConfig.java, +import io.netty.channel.ChannelException;, +import io.netty.util.internal.DetectionUtil;, +, +import java.io.IOException;, +import java.net.NetworkInterface;, +import java.net.StandardSocketOptions;, +import java.nio.channels.DatagramChannel;, +import java.util.Map;, +    private final DatagramChannel channel;, +, +    DefaultNioDatagramChannelConfig(DatagramChannel channel) {, +        super(channel.socket());, +        this.channel = channel;, +    , +    @Override, +    public void setNetworkInterface(NetworkInterface networkInterface) {, +        if (DetectionUtil.javaVersion() < 7) {, +            throw new UnsupportedOperationException();, +        } else {, +            try {, +                channel.setOption(StandardSocketOptions.IP_MULTICAST_IF, networkInterface);, +            } catch (IOException e) {, +                throw new ChannelException(e);, +            }, +        }, +    }, +, +    @Override, +    public NetworkInterface getNetworkInterface() {, +        if (DetectionUtil.javaVersion() < 7) {, +            throw new UnsupportedOperationException();, +        } else {, +            try {, +                return (NetworkInterface) channel.getOption(StandardSocketOptions.IP_MULTICAST_IF);, +            } catch (IOException e) {, +                throw new ChannelException(e);, +            }, +        }, +    }, +, +++ b/pom.xml, +                  <!-- This is needed because of java.util.zip.Deflater and NIO UDP multicast-->, +            <!-- Used for NIO UDP multicast -->, +            <ignore>java.nio.channels.DatagramChannel</ignore>, +            <ignore>java.nio.channels.MembershipKey</ignore>, +            <ignore>java.net.StandardSocketOptions</ignore>, +++ b/transport/src/main/java/io/netty/channel/socket/DatagramChannel.java, +import io.netty.channel.ChannelFuture;, +    ChannelFuture joinGroup(InetAddress multicastAddress);, +    ChannelFuture joinGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +    ChannelFuture leaveGroup(InetAddress multicastAddress);, +    ChannelFuture leaveGroup(InetSocketAddress multicastAddress, NetworkInterface networkInterface);, +++ b/transport/src/main/java/io/netty/channel/socket/nio/DefaultNioDatagramChannelConfig.java, +import io.netty.channel.ChannelException;, +import io.netty.util.internal.DetectionUtil;, +, +import java.io.IOException;, +import java.net.NetworkInterface;, +import java.net.StandardSocketOptions;, +import java.nio.channels.DatagramChannel;, +import java.util.Map;, +    private final DatagramChannel channel;, +, +    DefaultNioDatagramChannelConfig(DatagramChannel channel) {, +        super(channel.socket());, +        this.channel = channel;, +    , +    @Override, +    public void setNetworkInterface(NetworkInterface networkInterface) {]