[+++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.util.internal.logging.InternalLogger;, +    static void setChannelOptions(, +            Channel channel, Map<ChannelOption<?>, Object> options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options.entrySet()) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    static void setChannelOptions(, +            Channel channel, Map.Entry<ChannelOption<?>, Object>[] options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    @SuppressWarnings("unchecked"), +    private static void setChannelOption(, +            Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {, +        try {, +            if (!channel.config().setOption((ChannelOption<Object>) option, value)) {, +                logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);, +            }, +        } catch (Throwable t) {, +            logger.warn(, +                    "Failed to set channel option '{}' with value '{}' for channel '{}'", option, channel, channel, t);, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.util.internal.logging.InternalLogger;, +    static void setChannelOptions(, +            Channel channel, Map<ChannelOption<?>, Object> options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options.entrySet()) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    static void setChannelOptions(, +            Channel channel, Map.Entry<ChannelOption<?>, Object>[] options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    @SuppressWarnings("unchecked"), +    private static void setChannelOption(, +            Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {, +        try {, +            if (!channel.config().setOption((ChannelOption<Object>) option, value)) {, +                logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);, +            }, +        } catch (Throwable t) {, +            logger.warn(, +                    "Failed to set channel option '{}' with value '{}' for channel '{}'", option, channel, channel, t);, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +            setChannelOptions(channel, options, logger);, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +import io.netty.util.internal.logging.InternalLogger;, +    static void setChannelOptions(, +            Channel channel, Map<ChannelOption<?>, Object> options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options.entrySet()) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    static void setChannelOptions(, +            Channel channel, Map.Entry<ChannelOption<?>, Object>[] options, InternalLogger logger) {, +        for (Map.Entry<ChannelOption<?>, Object> e: options) {, +            setChannelOption(channel, e.getKey(), e.getValue(), logger);, +        }, +    }, +, +    @SuppressWarnings("unchecked"), +    private static void setChannelOption(, +            Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {, +        try {, +            if (!channel.config().setOption((ChannelOption<Object>) option, value)) {, +                logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);, +            }, +        } catch (Throwable t) {, +            logger.warn(, +                    "Failed to set channel option '{}' with value '{}' for channel '{}'", option, channel, channel, t);, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +            setChannelOptions(channel, options, logger);, +++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java, +            setChannelOptions(channel, options, logger);, +    private static Entry<AttributeKey<?>, Object>[] newAttrArray(int size) {, +    private static Map.Entry<ChannelOption<?>, Object>[] newOptionArray(int size) {, +        return new Map.Entry[size];, +                setChannelOptions(child, childOptions, logger);]