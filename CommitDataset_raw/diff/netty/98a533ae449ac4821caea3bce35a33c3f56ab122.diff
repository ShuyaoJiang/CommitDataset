[+++ b/common/src/main/java/io/netty/util/Recycler.java, +    final int threadLocalCapacity() {, +        return threadLocal.get().elements.length;, +    }, +, +            if (size == elements.length) {, +                elements = Arrays.copyOf(elements, Math.min(size << 1, maxCapacity));, +++ b/common/src/main/java/io/netty/util/Recycler.java, +    final int threadLocalCapacity() {, +        return threadLocal.get().elements.length;, +    }, +, +            if (size == elements.length) {, +                elements = Arrays.copyOf(elements, Math.min(size << 1, maxCapacity));, +++ b/common/src/test/java/io/netty/util/RecyclerTest.java, +import java.util.Random;, +, +, +    /**, +     * Test to make sure bug #2848 never happens again, +     * https://github.com/netty/netty/issues/2848, +     */, +    @Test, +    public void testMaxCapacity() {, +        testMaxCapacity(300);, +        Random rand = new Random();, +        for (int i = 0; i < 50; i++) {, +            testMaxCapacity(rand.nextInt(1000) + 256); // 256 - 1256, +        }, +    }, +, +    void testMaxCapacity(int maxCapacity) {, +        Recycler<HandledObject> recycler = new Recycler<HandledObject>(maxCapacity) {, +            @Override, +            protected HandledObject newObject(, +                    Recycler.Handle<HandledObject> handle) {, +                return new HandledObject(handle);, +            }, +        };, +, +        HandledObject[] objects = new HandledObject[maxCapacity * 3];, +        for (int i = 0; i < objects.length; i++) {, +            objects[i] = recycler.get();, +        }, +, +        for (int i = 0; i < objects.length; i++) {, +            recycler.recycle(objects[i], objects[i].handle);, +            objects[i] = null;, +        }, +, +        Assert.assertEquals(maxCapacity, recycler.threadLocalCapacity());, +    }, +, +    static final class HandledObject {, +        Recycler.Handle<HandledObject> handle;, +, +        HandledObject(Recycler.Handle<HandledObject> handle) {, +            this.handle = handle;, +        }, +    }]