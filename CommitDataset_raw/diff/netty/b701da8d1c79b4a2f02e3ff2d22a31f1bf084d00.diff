[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +    private static final Http2Exception DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION = unknownStackTrace(, +            connectionError(COMPRESSION_ERROR, "HPACK - long overflow"), Decoder.class, "decodeULE128(...)");, +    private static final Http2Exception DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION = unknownStackTrace(, +            connectionError(COMPRESSION_ERROR, "HPACK - int overflow"), Decoder.class, "decodeULE128ToInt(...)");, +                    setDynamicTableSize(decodeULE128(in, (long) index));, +    private void setDynamicTableSize(long dynamicTableSize) throws Http2Exception {, +    /**, +     * Unsigned Little Endian Base 128 Variable-Length Integer Encoding, +     * <p>, +     * Visible for testing only!, +     */, +    static int decodeULE128(ByteBuf in, int result) throws Http2Exception {, +        final int readerIndex = in.readerIndex();, +        final long v = decodeULE128(in, (long) result);, +        if (v > Integer.MAX_VALUE) {, +            // [0x1,0x7f] + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x6 << 28), +            // OR, +            // 0x0 + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x7 << 28), +            // we should reset the readerIndex if we overflowed the int type., +            in.readerIndex(readerIndex);, +            throw DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION;, +        }, +        return (int) v;, +    }, +, +    /**, +     * Unsigned Little Endian Base 128 Variable-Length Integer Encoding, +     * <p>, +     * Visible for testing only!, +     */, +    static long decodeULE128(ByteBuf in, long result) throws Http2Exception {, +        assert result <= 0x7f && result >= 0;, +        final boolean resultStartedAtZero = result == 0;, +        final int writerIndex = in.writerIndex();, +        for (int readerIndex = in.readerIndex(), shift = 0; readerIndex < writerIndex; ++readerIndex, shift += 7) {, +            byte b = in.getByte(readerIndex);, +            if (shift == 56 && ((b & 0x80) != 0 || b == 0x7F && !resultStartedAtZero)) {, +                // the maximum value that can be represented by a signed 64 bit number is:, +                // [0x01L, 0x7fL] + 0x7fL + (0x7fL << 7) + (0x7fL << 14) + (0x7fL << 21) + (0x7fL << 28) + (0x7fL << 35), +                // + (0x7fL << 42) + (0x7fL << 49) + (0x7eL << 56), +                // OR, +                // 0x0L + 0x7fL + (0x7fL << 7) + (0x7fL << 14) + (0x7fL << 21) + (0x7fL << 28) + (0x7fL << 35) +, +                // (0x7fL << 42) + (0x7fL << 49) + (0x7fL << 56), +                throw DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION;, +                return result + ((b & 0x7FL) << shift);, +            result += (b & 0x7FL) << shift;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +    private static final Http2Exception DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION = unknownStackTrace(, +            connectionError(COMPRESSION_ERROR, "HPACK - long overflow"), Decoder.class, "decodeULE128(...)");, +    private static final Http2Exception DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION = unknownStackTrace(, +            connectionError(COMPRESSION_ERROR, "HPACK - int overflow"), Decoder.class, "decodeULE128ToInt(...)");, +                    setDynamicTableSize(decodeULE128(in, (long) index));, +    private void setDynamicTableSize(long dynamicTableSize) throws Http2Exception {, +    /**, +     * Unsigned Little Endian Base 128 Variable-Length Integer Encoding, +     * <p>, +     * Visible for testing only!, +     */, +    static int decodeULE128(ByteBuf in, int result) throws Http2Exception {, +        final int readerIndex = in.readerIndex();, +        final long v = decodeULE128(in, (long) result);, +        if (v > Integer.MAX_VALUE) {, +            // [0x1,0x7f] + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x6 << 28), +            // OR, +            // 0x0 + 0x7f + (0x7f << 7) + (0x7f << 14) + (0x7f << 21) + (0x7 << 28), +            // we should reset the readerIndex if we overflowed the int type., +            in.readerIndex(readerIndex);, +            throw DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION;, +        }, +        return (int) v;, +    }, +, +    /**, +     * Unsigned Little Endian Base 128 Variable-Length Integer Encoding, +     * <p>, +     * Visible for testing only!, +     */, +    static long decodeULE128(ByteBuf in, long result) throws Http2Exception {, +        assert result <= 0x7f && result >= 0;, +        final boolean resultStartedAtZero = result == 0;, +        final int writerIndex = in.writerIndex();, +        for (int readerIndex = in.readerIndex(), shift = 0; readerIndex < writerIndex; ++readerIndex, shift += 7) {, +            byte b = in.getByte(readerIndex);, +            if (shift == 56 && ((b & 0x80) != 0 || b == 0x7F && !resultStartedAtZero)) {, +                // the maximum value that can be represented by a signed 64 bit number is:, +                // [0x01L, 0x7fL] + 0x7fL + (0x7fL << 7) + (0x7fL << 14) + (0x7fL << 21) + (0x7fL << 28) + (0x7fL << 35), +                // + (0x7fL << 42) + (0x7fL << 49) + (0x7eL << 56), +                // OR, +                // 0x0L + 0x7fL + (0x7fL << 7) + (0x7fL << 14) + (0x7fL << 21) + (0x7fL << 28) + (0x7fL << 35) +, +                // (0x7fL << 42) + (0x7fL << 49) + (0x7fL << 56), +                throw DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION;, +                return result + ((b & 0x7FL) << shift);, +            result += (b & 0x7FL) << shift;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +        encodeInteger(out, 0x20, 5, maxHeaderTableSize);, +     * Encode integer according to <a href="https://tools.ietf.org/html/rfc7541#section-5.1">Section 5.1</a>., +        encodeInteger(out, mask, n, (long) i);, +    }, +]