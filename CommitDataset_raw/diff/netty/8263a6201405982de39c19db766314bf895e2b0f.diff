[+++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufInputStream;, +, +import javax.crypto.Cipher;, +import javax.crypto.EncryptedPrivateKeyInfo;, +import javax.crypto.NoSuchPaddingException;, +import javax.crypto.SecretKey;, +import javax.crypto.SecretKeyFactory;, +import javax.crypto.spec.PBEKeySpec;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLSessionContext;, +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     *, +     *, +     * @throws InvalidKeyException if the decryption key based on {@code password} cannot be used to decrypt, +     *                             {@code key}, +    private static PKCS8EncodedKeySpec generateKeySpec(char[] password, byte[] key), +            throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException,, +                   InvalidKeyException, InvalidAlgorithmParameterException {, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufInputStream;, +, +import javax.crypto.Cipher;, +import javax.crypto.EncryptedPrivateKeyInfo;, +import javax.crypto.NoSuchPaddingException;, +import javax.crypto.SecretKey;, +import javax.crypto.SecretKeyFactory;, +import javax.crypto.spec.PBEKeySpec;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLSessionContext;, +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     *, +     *, +     * @throws InvalidKeyException if the decryption key based on {@code password} cannot be used to decrypt, +     *                             {@code key}, +    private static PKCS8EncodedKeySpec generateKeySpec(char[] password, byte[] key), +            throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException,, +                   InvalidKeyException, InvalidAlgorithmParameterException {, +++ b/handler/src/test/java/io/netty/handler/ssl/JdkSslServerContextTest.java, +import javax.net.ssl.SSLException;, +import java.io.File;, +, +        File keyFile = new File(getClass().getResource("test_encrypted.pem").getFile());, +        File crtFile = new File(getClass().getResource("test.crt").getFile());, +        File keyFile = new File(getClass().getResource("test_unencrypted.pem").getFile());, +        File crtFile = new File(getClass().getResource("test.crt").getFile());, +++ b/handler/src/main/java/io/netty/handler/ssl/JdkSslServerContext.java, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufInputStream;, +, +import javax.crypto.Cipher;, +import javax.crypto.EncryptedPrivateKeyInfo;, +import javax.crypto.NoSuchPaddingException;, +import javax.crypto.SecretKey;, +import javax.crypto.SecretKeyFactory;, +import javax.crypto.spec.PBEKeySpec;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLSessionContext;, +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects.]