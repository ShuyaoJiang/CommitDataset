[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +    private final boolean sessionPresent;, +, +    public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent) {, +        this.sessionPresent = sessionPresent;, +    public boolean isSessionPresent() { return sessionPresent; }, +, +            .append(", sessionPresent=").append(sessionPresent), +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +    private final boolean sessionPresent;, +, +    public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent) {, +        this.sessionPresent = sessionPresent;, +    public boolean isSessionPresent() { return sessionPresent; }, +, +            .append(", sessionPresent=").append(sessionPresent), +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final boolean sessionPresent = (buffer.readUnsignedByte() & 0x01) == 0x01;, +                new MqttConnAckVariableHeader(MqttConnectReturnCode.valueOf(returnCode), sessionPresent);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +    private final boolean sessionPresent;, +, +    public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent) {, +        this.sessionPresent = sessionPresent;, +    public boolean isSessionPresent() { return sessionPresent; }, +, +            .append(", sessionPresent=").append(sessionPresent), +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final boolean sessionPresent = (buffer.readUnsignedByte() & 0x01) == 0x01;, +                new MqttConnAckVariableHeader(MqttConnectReturnCode.valueOf(returnCode), sessionPresent);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +        buf.writeByte(message.variableHeader().sessionPresent() ? 0x01 : 0x00);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java, +    private final boolean sessionPresent;, +, +    public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent) {, +        this.sessionPresent = sessionPresent;, +    public boolean isSessionPresent() { return sessionPresent; }, +, +            .append(", sessionPresent=").append(sessionPresent), +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final boolean sessionPresent = (buffer.readUnsignedByte() & 0x01) == 0x01;, +                new MqttConnAckVariableHeader(MqttConnectReturnCode.valueOf(returnCode), sessionPresent);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +        buf.writeByte(message.variableHeader().sessionPresent() ? 0x01 : 0x00);, +++ b/codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java, +                new MqttConnAckVariableHeader(MqttConnectReturnCode.CONNECTION_ACCEPTED, true);]