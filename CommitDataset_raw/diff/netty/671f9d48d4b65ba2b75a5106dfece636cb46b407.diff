[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import io.netty.util.internal.PlatformDependent;, +, +    private final Map<Integer, StreamState> activeStreams = PlatformDependent.newConcurrentHashMap();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import io.netty.util.internal.PlatformDependent;, +, +    private final Map<Integer, StreamState> activeStreams = PlatformDependent.newConcurrentHashMap();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +import io.netty.util.internal.PlatformDependent;, +, +                new WeakReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +                new SoftReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import io.netty.util.internal.PlatformDependent;, +, +    private final Map<Integer, StreamState> activeStreams = PlatformDependent.newConcurrentHashMap();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +import io.netty.util.internal.PlatformDependent;, +, +                new WeakReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +                new SoftReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +import io.netty.util.internal.PlatformDependent;, +, +@SuppressWarnings("UnusedDeclaration") // 'T' is used only at compile time, +    private static final ConcurrentMap<String, Boolean> names = PlatformDependent.newConcurrentHashMap();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import io.netty.util.internal.PlatformDependent;, +, +    private final Map<Integer, StreamState> activeStreams = PlatformDependent.newConcurrentHashMap();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +import io.netty.util.internal.PlatformDependent;, +, +                new WeakReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +                new SoftReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +import io.netty.util.internal.PlatformDependent;, +, +@SuppressWarnings("UnusedDeclaration") // 'T' is used only at compile time, +    private static final ConcurrentMap<String, Boolean> names = PlatformDependent.newConcurrentHashMap();, +++ b/common/src/main/java/io/netty/util/HashedWheelTimer.java, +                    PlatformDependent.<HashedWheelTimeout, Boolean>newConcurrentHashMap());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/DefaultHttpDataFactory.java, +import io.netty.util.internal.PlatformDependent;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<HttpRequest, List<HttpData>> requestFileDeleteMap =, +            PlatformDependent.newConcurrentHashMap();, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySession.java, +import io.netty.util.internal.PlatformDependent;, +, +    private final Map<Integer, StreamState> activeStreams = PlatformDependent.newConcurrentHashMap();, +++ b/codec/src/main/java/io/netty/handler/codec/serialization/ClassResolvers.java, +import io.netty.util.internal.PlatformDependent;, +, +                new WeakReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +                new SoftReferenceMap<String, Class<?>>(, +                        PlatformDependent.<String, Reference<Class<?>>>newConcurrentHashMap()));, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +import io.netty.util.internal.PlatformDependent;, +, +@SuppressWarnings("UnusedDeclaration") // 'T' is used only at compile time]