[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    ComposedLastHttpContent(HttpHeaders trailingHeaders, DecoderResult result) {, +        this(trailingHeaders);, +        this.result = result;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    ComposedLastHttpContent(HttpHeaders trailingHeaders, DecoderResult result) {, +        this(trailingHeaders);, +        this.result = result;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    ComposedLastHttpContent(HttpHeaders trailingHeaders, DecoderResult result) {, +        this(trailingHeaders);, +        this.result = result;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    ComposedLastHttpContent(HttpHeaders trailingHeaders, DecoderResult result) {, +        this(trailingHeaders);, +        this.result = result;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +import io.netty.handler.codec.DecoderResult;, +        assertEquals(DecoderResult.SUCCESS, chunk.decoderResult());, +        assertEquals(DecoderResult.SUCCESS, res.decoderResult());, +        assertEquals(DecoderResult.SUCCESS, res.decoderResult());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    ComposedLastHttpContent(HttpHeaders trailingHeaders, DecoderResult result) {, +        this(trailingHeaders);, +        this.result = result;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentEncoder.java, +import io.netty.handler.codec.DecoderResult;, +                out.add(new ComposedLastHttpContent(headers, DecoderResult.SUCCESS));, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +import io.netty.handler.codec.DecoderResult;, +        assertEquals(DecoderResult.SUCCESS, chunk.decoderResult());, +        assertEquals(DecoderResult.SUCCESS, res.decoderResult());, +        assertEquals(DecoderResult.SUCCESS, res.decoderResult());, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java, +    public void testChunkedRequestDecompression() {, +        HttpResponseDecoder decoder = new HttpResponseDecoder();, +        HttpContentDecoder decompressor = new HttpContentDecompressor();, +, +        EmbeddedChannel channel = new EmbeddedChannel(decoder, decompressor, null);, +, +        String headers = "HTTP/1.1 200 OK\r\n", +                + "Transfer-Encoding: chunked\r\n", +                + "Trailer: My-Trailer\r\n", +                + "Content-Encoding: gzip\r\n\r\n";, +, +        channel.writeInbound(Unpooled.copiedBuffer(headers.getBytes(CharsetUtil.US_ASCII)));, +, +        String chunkLength = Integer.toHexString(GZ_HELLO_WORLD.length);, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(chunkLength + "\r\n", CharsetUtil.US_ASCII)));, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(GZ_HELLO_WORLD)));, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer("\r\n".getBytes(CharsetUtil.US_ASCII))));, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer("0\r\n", CharsetUtil.US_ASCII)));, +        assertTrue(channel.writeInbound(Unpooled.copiedBuffer("My-Trailer: 42\r\n\r\n\r\n", CharsetUtil.US_ASCII)));, +, +        Object ob1 = channel.readInbound();, +        assertThat(ob1, is(instanceOf(DefaultHttpResponse.class)));, +, +        Object ob2 = channel.readInbound();, +        assertThat(ob1, is(instanceOf(DefaultHttpResponse.class)));, +        HttpContent content = (HttpContent) ob2;, +        assertEquals(HELLO_WORLD, content.content().toString(CharsetUtil.US_ASCII));, +        content.release();, +, +        Object ob3 = channel.readInbound();, +        assertThat(ob1, is(instanceOf(DefaultHttpResponse.class)));, +        LastHttpContent lastContent = (LastHttpContent) ob3;, +        assertNotNull(lastContent.decoderResult());, +        assertTrue(lastContent.decoderResult().isSuccess());, +        assertFalse(lastContent.trailingHeaders().isEmpty());, +        assertEquals("42", lastContent.trailingHeaders().get("My-Trailer"));, +        assertHasInboundMessages(channel, false);, +        assertHasOutboundMessages(channel, false);]