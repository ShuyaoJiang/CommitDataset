[+++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import java.nio.channels.WritableByteChannel;, +    public void testCustomFileRegion() throws Throwable {, +        run();, +    }, +, +    @Test, +        testFileRegion0(sb, cb, false, true, true);, +    }, +, +    public void testCustomFileRegion(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testFileRegion0(sb, cb, false, true, false);, +        testFileRegion0(sb, cb, true, true, true);, +        testFileRegion0(sb, cb, false, false, true);, +        testFileRegion0(sb, cb, true, false, true);, +            ServerBootstrap sb, Bootstrap cb, boolean voidPromise, final boolean autoRead, boolean defaultFileRegion), +            throws Throwable {, +        if (!defaultFileRegion) {, +            region = new FileRegionWrapper(region);, +            emptyRegion = new FileRegionWrapper(emptyRegion);, +        }, +, +    private static final class FileRegionWrapper implements FileRegion {, +        private final FileRegion region;, +, +        FileRegionWrapper(FileRegion region) {, +            this.region = region;, +        }, +, +        @Override, +        public int refCnt() {, +            return region.refCnt();, +        }, +, +        @Override, +        public long position() {, +            return region.position();, +        }, +, +        @Override, +        @Deprecated, +        public long transfered() {, +            return region.transfered();, +        }, +, +        @Override, +        public boolean release() {, +            return region.release();, +        }, +, +        @Override, +        public long transferred() {, +            return region.transferred();, +        }, +, +        @Override, +        public long count() {, +            return region.count();, +        }, +, +        @Override, +        public boolean release(int decrement) {, +            return region.release(decrement);, +        }, +, +        @Override, +        public long transferTo(WritableByteChannel target, long position) throws IOException {, +            return region.transferTo(target, position);, +        }, +, +        @Override, +        public FileRegion retain() {, +            region.retain();, +            return this;, +        }, +, +        @Override, +        public FileRegion retain(int increment) {, +            region.retain(increment);, +            return this;, +        }, +, +        @Override, +        public FileRegion touch() {, +            region.touch();, +            return this;, +        }, +, +        @Override, +        public FileRegion touch(Object hint) {, +            region.touch(hint);, +            return this;, +        }, +    }, +++ b/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import java.nio.channels.WritableByteChannel;, +    public void testCustomFileRegion() throws Throwable {, +        run();, +    }, +]