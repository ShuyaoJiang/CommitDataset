[+++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, +import java.util.Collections;, +import java.util.HashMap;, +        public Set<Map.Entry<String, V>> entries() {, +            int length = domainNamePatterns.length;, +            Map<String, V> map = new HashMap<String, V>(length);, +            for (int index = 0; index < length; ++index) {, +                map.put(domainNamePatterns[index], values[index]);, +            }, +            return Collections.unmodifiableSet(map.entrySet());, +        }, +, +        @Override, +++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, +import java.util.Collections;, +import java.util.HashMap;, +        public Set<Map.Entry<String, V>> entries() {, +            int length = domainNamePatterns.length;, +            Map<String, V> map = new HashMap<String, V>(length);, +            for (int index = 0; index < length; ++index) {, +                map.put(domainNamePatterns[index], values[index]);, +            }, +            return Collections.unmodifiableSet(map.entrySet());, +        }, +, +        @Override, +++ b/common/src/main/java/io/netty/util/DomainNameMapping.java, +import java.util.Collections;, +import java.util.Set;, +    /**, +     * Returns a read-only {@link Set} of the domain mapping patterns and their associated value objects., +     */, +    public Set<Map.Entry<String, V>> entries() {, +        return Collections.unmodifiableSet(map.entrySet());, +    }, +, +++ b/common/src/main/java/io/netty/util/DomainMappingBuilder.java, +import java.util.Collections;, +import java.util.HashMap;, +        public Set<Map.Entry<String, V>> entries() {, +            int length = domainNamePatterns.length;, +            Map<String, V> map = new HashMap<String, V>(length);, +            for (int index = 0; index < length; ++index) {, +                map.put(domainNamePatterns[index], values[index]);, +            }, +            return Collections.unmodifiableSet(map.entrySet());, +        }, +, +        @Override, +++ b/common/src/main/java/io/netty/util/DomainNameMapping.java, +import java.util.Collections;, +import java.util.Set;, +    /**, +     * Returns a read-only {@link Set} of the domain mapping patterns and their associated value objects., +     */, +    public Set<Map.Entry<String, V>> entries() {, +        return Collections.unmodifiableSet(map.entrySet());, +    }, +, +++ b/common/src/test/java/io/netty/util/DomainNameMappingTest.java, +import java.util.HashMap;, +import java.util.Map;, +, +, +    @Test, +    public void testEntries() {, +        DomainNameMapping<String> mapping = new DomainNameMapping<String>("NotFound"), +            .add("netty.io", "Netty"), +            .add("downloads.netty.io", "Netty-Downloads");, +, +        Map<String, String> entries = new HashMap<String, String>();, +        for (Map.Entry<String, String> entry: mapping.entries()) {, +            entries.put(entry.getKey(), entry.getValue());, +        }, +, +        assertEquals(2, entries.size());, +        assertEquals("Netty", entries.get("netty.io"));, +        assertEquals("Netty-Downloads", entries.get("downloads.netty.io"));, +    }, +, +    @Test, +    public void testEntriesWithImmutableDomainNameMapping() {, +        DomainNameMapping<String> mapping = new DomainMappingBuilder<String>("NotFound"), +            .add("netty.io", "Netty"), +            .add("downloads.netty.io", "Netty-Downloads"), +            .build();, +, +        Map<String, String> entries = new HashMap<String, String>();, +        for (Map.Entry<String, String> entry: mapping.entries()) {, +            entries.put(entry.getKey(), entry.getValue());, +        }, +, +        assertEquals(2, entries.size());, +        assertEquals("Netty", entries.get("netty.io"));, +        assertEquals("Netty-Downloads", entries.get("downloads.netty.io"));, +    }]