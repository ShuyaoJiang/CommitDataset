[+++ b/transport-http/pom.xml, +, +    <!-- Servlet API - completely optional -->, +    <!-- Used for HTTP tunneling transport -->, +    <dependency>, +      <groupId>javax.servlet</groupId>, +      <artifactId>servlet-api</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/transport-http/pom.xml, +, +    <!-- Servlet API - completely optional -->, +    <!-- Used for HTTP tunneling transport -->, +    <dependency>, +      <groupId>javax.servlet</groupId>, +      <artifactId>servlet-api</artifactId>, +      <optional>true</optional>, +    </dependency>, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelingServlet.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.socket.http;, +, +import java.io.EOFException;, +import java.io.IOException;, +import java.io.PushbackInputStream;, +import java.net.SocketAddress;, +, +import javax.servlet.ServletConfig;, +import javax.servlet.ServletException;, +import javax.servlet.ServletOutputStream;, +import javax.servlet.http.HttpServlet;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFactory;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.Channels;, +import io.netty.channel.ExceptionEvent;, +import io.netty.channel.MessageEvent;, +import io.netty.channel.SimpleChannelUpstreamHandler;, +import io.netty.channel.local.DefaultLocalClientChannelFactory;, +import io.netty.channel.local.LocalAddress;, +import io.netty.handler.codec.http.HttpHeaders;, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +, +/**, + * An {@link HttpServlet} that proxies an incoming data to the actual server, + * and vice versa.  Please refer to the, + * <a href="package-summary.html#package_description">package summary</a> for, + * the detailed usage., + * @apiviz.landmark, + */, +public class HttpTunnelingServlet extends HttpServlet {, +, +    private static final long serialVersionUID = 4259910275899756070L;, +, +    private static final String ENDPOINT = "endpoint";, +, +    static final InternalLogger logger = InternalLoggerFactory.getInstance(HttpTunnelingServlet.class);, +, +    private volatile SocketAddress remoteAddress;, +    private volatile ChannelFactory channelFactory;, +, +    @Override, +    public void init() throws ServletException {, +        ServletConfig config = getServletConfig();, +        String endpoint = config.getInitParameter(ENDPOINT);, +        if (endpoint == null) {, +            throw new ServletException("init-param '" + ENDPOINT + "' must be specified.");, +        }, +, +        try {, +            remoteAddress = parseEndpoint(endpoint.trim());, +        } catch (ServletException e) {, +            throw e;, +        } catch (Exception e) {, +            throw new ServletException("Failed to parse an endpoint.", e);, +        }, +]