[+++ b/src/main/java/org/jboss/netty/bootstrap/Bootstrap.java, +import org.jboss.netty.channel.Channel;, + * Helper class which helps a user initialize a {@link Channel}.  This class, + * provides the common data structure for its subclasses which implements an, + * actual channel initialization from the common data structure.  Please refer, + * to {@link ClientBootstrap} and {@link ServerBootstrap} for client side and, + * server-side channel initialization respectively., + *, + *, +    /**, +     * Creates a new instance with no {@link ChannelFactory} set., +     * {@link #setFactory(ChannelFactory)} must be called at once before any, +     * I/O operation is requested., +     */, +    protected Bootstrap() {, +    /**, +     * Creates a new instance with the specified initial {@link ChannelFactory}., +     */, +    protected Bootstrap(ChannelFactory channelFactory) {, +    /**, +     * Returns the {@link ChannelFactory} that will be used to perform an, +     * I/O operation., +     *, +     * @throws IllegalStateException, +     *         if the factory is not set for this bootstrap yet., +     *         The factory can be set in the constructor or, +     *         {@link #setFactory(ChannelFactory)}., +     */, +    /**, +     * Sets the {@link ChannelFactory} that will be used to perform an I/O, +     * operation.  This method can be called only once and can't be called at, +     * all if the factory was specified in the constructor., +     *, +     * @throws IllegalStateException, +     *         if the factory is already set, +     */, +    /**, +     * Returns the default {@link ChannelPipeline} which is cloned when a new, +     * {@link Channel} is created.  Bootstrap creates a new pipeline which has, +     * the same entries with the returned pipeline for a new {@link Channel}., +     *, +     * @return the default {@link ChannelPipeline}. {@code null} if, +     *         {@link #setPipelineFactory(ChannelPipelineFactory)} was, +     *         called last time., +     */, +    /**, +     * Sets the default {@link ChannelPipeline} which is cloned when a new, +     * {@link Channel} is created.  Bootstrap creates a new pipeline which has, +     * the same entries with the specified pipeline for a new channel. Calling, +     * this method also sets the {@code pipelineFactory} property to an, +     * internal {@link ChannelPipelineFactory} implementation which returns, +     * a copy of the specified pipeline., +     */, +    /**, +     * Convenience method for {@link #getPipeline()} which returns the default, +     * pipeline of this bootstrap as an ordered map., +     *, +     * @throws IllegalStateException, +     *         if {@link #setPipelineFactory(ChannelPipelineFactory)} is in, +     *         use to create a new pipeline, +     */, +    /**, +     * Convenience method for {@link #setPipeline} which sets the default, +     * pipeline of this bootstrap from an ordered map., +     *, +     * @throws IllegalArgumentException, +     *         if the specified map is not an ordered map, +     */, +    /**, +     * Returns the {@link ChannelPipelineFactory} which creates a new, +     * {@link ChannelPipeline} for a new {@link Channel}., +     *, +     * @see #getPipeline(), +     */, +    /**, +     * Sets the {@link ChannelPipelineFactory} which creates a new, +     * {@link ChannelPipeline} for a new {@link Channel}.  Calling this method, +     * invalidates the current {@code pipeline} property of this bootstrap., +     * Subsequent {@link #getPipeline()} and {@link #getPipelineAsMap()} calls, +     * will raise {@link IllegalStateException}., +     *, +     * @see #setPipeline(ChannelPipeline), +     * @see #setPipelineAsMap(Map), +     */, +    /**, +     * Returns the options which configures a new {@link Channel}., +     */, +    /**, +     * Sets the options which configures a new {@link Channel}., +     */, +    /**, +     * Returns the value of the option with the specified key., +     *, +     * @return the option value if the option is found., +     *         {@code null} otherwise., +     */, +    /**, +     * Sets an option with the specified key and value.  If there's already, +     * an option with the same key, it's replaced with the new value.  If the, +     * specified value is {@code null}, an existing option with the specified]