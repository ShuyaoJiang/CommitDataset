[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMethod.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import io.netty.util.AsciiString;, + * The request method of HTTP or its derived protocols, such as, +     * The OPTIONS method represents a request for information about the communication options, +     * available on the request/response chain identified by the Request-URI. This method allows, +    public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");, +     * The GET method means retrieve whatever information (in the form of an entity) is identified, +    public static final HttpMethod GET = new HttpMethod("GET");, +     * The HEAD method is identical to GET except that the server MUST NOT return a message-body, +    public static final HttpMethod HEAD = new HttpMethod("HEAD");, +     * The POST method is used to request that the origin server accept the entity enclosed in the, +    public static final HttpMethod POST = new HttpMethod("POST");, +     * The PUT method requests that the enclosed entity be stored under the supplied Request-URI., +    public static final HttpMethod PUT = new HttpMethod("PUT");, +     * The PATCH method requests that a set of changes described in the, +    public static final HttpMethod PATCH = new HttpMethod("PATCH");, +     * The DELETE method requests that the origin server delete the resource identified by the, +    public static final HttpMethod DELETE = new HttpMethod("DELETE");, +     * The TRACE method is used to invoke a remote, application-layer loop- back of the request, +    public static final HttpMethod TRACE = new HttpMethod("TRACE");, +     * This specification reserves the method name CONNECT for use with a proxy that can dynamically, +    public static final HttpMethod CONNECT = new HttpMethod("CONNECT");, +     * If the specified name is a standard HTTP method name, a cached instance, +    private final AsciiString name;, +     * Creates a new HTTP method with the specified name.  You will not need to, +     * create a new method unless you are implementing a protocol derived from, +        this.name = new AsciiString(name);, +     * Returns the name of this method., +        return name.toString();, +    }, +, +    /**, +     * Returns the name of this method., +     */, +    public AsciiString asciiName() {, +        return name.toString();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMethod.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import io.netty.util.AsciiString;, + * The request method of HTTP or its derived protocols, such as, +     * The OPTIONS method represents a request for information about the communication options, +     * available on the request/response chain identified by the Request-URI. This method allows, +    public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");, +     * The GET method means retrieve whatever information (in the form of an entity) is identified, +    public static final HttpMethod GET = new HttpMethod("GET");, +     * The HEAD method is identical to GET except that the server MUST NOT return a message-body, +    public static final HttpMethod HEAD = new HttpMethod("HEAD");, +     * The POST method is used to request that the origin server accept the entity enclosed in the, +    public static final HttpMethod POST = new HttpMethod("POST");, +     * The PUT method requests that the enclosed entity be stored under the supplied Request-URI., +    public static final HttpMethod PUT = new HttpMethod("PUT");, +     * The PATCH method requests that a set of changes described in the, +    public static final HttpMethod PATCH = new HttpMethod("PATCH");, +     * The DELETE method requests that the origin server delete the resource identified by the, +    public static final HttpMethod DELETE = new HttpMethod("DELETE");, +     * The TRACE method is used to invoke a remote, application-layer loop- back of the request, +    public static final HttpMethod TRACE = new HttpMethod("TRACE");, +     * This specification reserves the method name CONNECT for use with a proxy that can dynamically, +    public static final HttpMethod CONNECT = new HttpMethod("CONNECT");, +     * If the specified name is a standard HTTP method name, a cached instance, +    private final AsciiString name;, +     * Creates a new HTTP method with the specified name.  You will not need to, +     * create a new method unless you are implementing a protocol derived from, +        this.name = new AsciiString(name);, +     * Returns the name of this method., +        return name.toString();, +    }, +, +    /**, +     * Returns the name of this method., +     */, +    public AsciiString asciiName() {, +        return name.toString();, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java, +import io.netty.buffer.ByteBufUtil;, +        ByteBufUtil.writeAscii(buf, request.method().name());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpMethod.java, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import io.netty.util.AsciiString;, + * The request method of HTTP or its derived protocols, such as, +     * The OPTIONS method represents a request for information about the communication options, +     * available on the request/response chain identified by the Request-URI. This method allows, +    public static final HttpMethod OPTIONS = new HttpMethod("OPTIONS");, +     * The GET method means retrieve whatever information (in the form of an entity) is identified, +    public static final HttpMethod GET = new HttpMethod("GET");, +     * The HEAD method is identical to GET except that the server MUST NOT return a message-body, +    public static final HttpMethod HEAD = new HttpMethod("HEAD");, +     * The POST method is used to request that the origin server accept the entity enclosed in the, +    public static final HttpMethod POST = new HttpMethod("POST");, +     * The PUT method requests that the enclosed entity be stored under the supplied Request-URI., +    public static final HttpMethod PUT = new HttpMethod("PUT");, +     * The PATCH method requests that a set of changes described in the, +    public static final HttpMethod PATCH = new HttpMethod("PATCH");, +     * The DELETE method requests that the origin server delete the resource identified by the, +    public static final HttpMethod DELETE = new HttpMethod("DELETE");, +     * The TRACE method is used to invoke a remote, application-layer loop- back of the request, +    public static final HttpMethod TRACE = new HttpMethod("TRACE");, +     * This specification reserves the method name CONNECT for use with a proxy that can dynamically, +    public static final HttpMethod CONNECT = new HttpMethod("CONNECT");]