[+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +    /**, +     * Determine if the string {@code s} ends with the char {@code c}., +     *, +     * @param s the string to test, +     * @param c the tested char, +     * @return true if {@code s} ends with the char {@code c}, +     */, +    public static boolean endsWith(CharSequence s, char c) {, +        int len = s.length();, +        return len > 0 && s.charAt(len - 1) == c;, +    }, +, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +    /**, +     * Determine if the string {@code s} ends with the char {@code c}., +     *, +     * @param s the string to test, +     * @param c the tested char, +     * @return true if {@code s} ends with the char {@code c}, +     */, +    public static boolean endsWith(CharSequence s, char c) {, +        int len = s.length();, +        return len > 0 && s.charAt(len - 1) == c;, +    }, +, +++ b/common/src/test/java/io/netty/util/internal/StringUtilTest.java, +, +    @Test, +    public void testEndsWith() {, +        assertFalse(StringUtil.endsWith("", 'u'));, +        assertTrue(StringUtil.endsWith("u", 'u'));, +        assertTrue(StringUtil.endsWith("-u", 'u'));, +        assertFalse(StringUtil.endsWith("-", 'u'));, +        assertFalse(StringUtil.endsWith("u-", 'u'));, +    }, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +    /**, +     * Determine if the string {@code s} ends with the char {@code c}., +     *, +     * @param s the string to test, +     * @param c the tested char, +     * @return true if {@code s} ends with the char {@code c}, +     */, +    public static boolean endsWith(CharSequence s, char c) {, +        int len = s.length();, +        return len > 0 && s.charAt(len - 1) == c;, +    }, +, +++ b/common/src/test/java/io/netty/util/internal/StringUtilTest.java, +, +    @Test, +    public void testEndsWith() {, +        assertFalse(StringUtil.endsWith("", 'u'));, +        assertTrue(StringUtil.endsWith("u", 'u'));, +        assertTrue(StringUtil.endsWith("-u", 'u'));, +        assertFalse(StringUtil.endsWith("-", 'u'));, +        assertFalse(StringUtil.endsWith("u-", 'u'));, +    }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.util.internal.EmptyArrays;, +import io.netty.util.internal.StringUtil;, +import java.lang.reflect.Method;, +    static final String[] DEFAULT_SEACH_DOMAINS;, +    static {, +        String[] searchDomains;, +        try {, +            Class<?> configClass = Class.forName("sun.net.dns.ResolverConfiguration");, +            Method open = configClass.getMethod("open");, +            Method nameservers = configClass.getMethod("searchlist");, +            Object instance = open.invoke(null);, +, +            @SuppressWarnings("unchecked"), +            List<String> list = (List<String>) nameservers.invoke(instance);, +            searchDomains = list.toArray(new String[list.size()]);, +        } catch (Exception ignore) {, +            // Failed to get the system name search domain list., +            searchDomains = EmptyArrays.EMPTY_STRINGS;, +        }, +        DEFAULT_SEACH_DOMAINS = searchDomains;, +    }, +, +    private final String[] searchDomains;, +    private final int ndots;, +     * @param searchDomains the list of search domain, +     * @param ndots the ndots value, +            HostsFileEntriesResolver hostsFileEntriesResolver,, +            String[] searchDomains,, +            int ndots) {, +        this.searchDomains = checkNotNull(searchDomains, "searchDomains").clone();, +        this.ndots = checkPositive(ndots, "ndots");, +    final String[] searchDomains() {, +        return searchDomains;, +    }, +, +    final int ndots() {, +        return ndots;, +    }, +, +        SingleResolverContext ctx = new SingleResolverContext(this, hostname, resolveCache);]