[+++ /dev/null, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +                    ApplicationProtocolNames.HTTP_2,, +                    ApplicationProtocolNames.HTTP_1_1)), +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +                    ApplicationProtocolNames.HTTP_2,, +                    ApplicationProtocolNames.HTTP_1_1)), +++ b/example/src/main/java/io/netty/example/http2/helloworld/server/Http2OrHttpHandler.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +import io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;, +public class Http2OrHttpHandler extends ApplicationProtocolNegotiationHandler {, +    protected Http2OrHttpHandler() {, +        super(ApplicationProtocolNames.HTTP_1_1);, +    protected void configurePipeline(ChannelHandlerContext ctx, String protocol) throws Exception {, +        if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {, +            ctx.pipeline().addLast(new HelloWorldHttp2Handler());, +            return;, +        }, +, +        if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {, +            return;, +        }, +, +        throw new IllegalStateException("unknown protocol: " + protocol);, +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +                    ApplicationProtocolNames.HTTP_2,, +                    ApplicationProtocolNames.HTTP_1_1)), +++ b/example/src/main/java/io/netty/example/http2/helloworld/server/Http2OrHttpHandler.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +import io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;, +public class Http2OrHttpHandler extends ApplicationProtocolNegotiationHandler {, +    protected Http2OrHttpHandler() {, +        super(ApplicationProtocolNames.HTTP_1_1);, +    protected void configurePipeline(ChannelHandlerContext ctx, String protocol) throws Exception {, +        if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {, +            ctx.pipeline().addLast(new HelloWorldHttp2Handler());, +            return;, +        }, +, +        if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {, +            return;, +        }, +, +        throw new IllegalStateException("unknown protocol: " + protocol);, +++ b/example/src/main/java/io/netty/example/http2/helloworld/server/Http2Server.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +                    ApplicationProtocolNames.HTTP_2,, +                    ApplicationProtocolNames.HTTP_1_1)), +++ /dev/null, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +    public static final String TLS_UPGRADE_PROTOCOL_NAME = ApplicationProtocolNames.HTTP_2;, +++ /dev/null, +++ b/example/src/main/java/io/netty/example/http2/helloworld/client/Http2Client.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +                    ApplicationProtocolNames.HTTP_2,, +                    ApplicationProtocolNames.HTTP_1_1)), +++ b/example/src/main/java/io/netty/example/http2/helloworld/server/Http2OrHttpHandler.java, +import io.netty.handler.ssl.ApplicationProtocolNames;, +import io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;, +public class Http2OrHttpHandler extends ApplicationProtocolNegotiationHandler {, +    protected Http2OrHttpHandler() {, +        super(ApplicationProtocolNames.HTTP_1_1);, +    protected void configurePipeline(ChannelHandlerContext ctx, String protocol) throws Exception {, +        if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {, +            ctx.pipeline().addLast(new HelloWorldHttp2Handler());, +            return;, +        }, +, +        if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {, +            return;, +        }, +]