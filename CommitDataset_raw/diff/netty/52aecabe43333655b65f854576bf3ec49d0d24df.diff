[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +, +            if (msg instanceof Http2StreamFrame) {, +                    throw new IllegalArgumentException("Stream id must not be set on the frame. Was: ", +                        + frame.streamId());, +                        ReferenceCountUtil.release(frame);, +                        throw new IllegalArgumentException("The first frame must be a headers frame. Was: ", +                            + frame.name());, +            } else if (msg instanceof Http2GoAwayFrame) {, +                ChannelPromise promise = ctx.newPromise();, +                promise.addListener(this);, +                writeFromStreamChannel(msg, promise, false);, +            } else {, +                ReferenceCountUtil.release(msg);, +                throw new IllegalArgumentException("Message must be an Http2GoAwayFrame or Http2StreamFrame: " + msg);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2MultiplexCodec.java, +, +            if (msg instanceof Http2StreamFrame) {, +                    throw new IllegalArgumentException("Stream id must not be set on the frame. Was: ", +                        + frame.streamId());, +                        ReferenceCountUtil.release(frame);, +                        throw new IllegalArgumentException("The first frame must be a headers frame. Was: ", +                            + frame.name());, +            } else if (msg instanceof Http2GoAwayFrame) {, +                ChannelPromise promise = ctx.newPromise();, +                promise.addListener(this);, +                writeFromStreamChannel(msg, promise, false);, +            } else {, +                ReferenceCountUtil.release(msg);, +                throw new IllegalArgumentException("Message must be an Http2GoAwayFrame or Http2StreamFrame: " + msg);, +            }, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2MultiplexCodecTest.java, +    @Test, +    public void outboundStreamShouldWriteGoAwayWithoutReset() {, +        childChannelInitializer.handler = new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelActive(ChannelHandlerContext ctx) throws Exception {, +                ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.NO_ERROR));, +                ctx.fireChannelActive();, +            }, +        };, +, +        Http2StreamChannelBootstrap b = new Http2StreamChannelBootstrap();, +        b.parentChannel(parentChannel).handler(childChannelInitializer);, +        Channel childChannel = b.connect().channel();, +        assertTrue(childChannel.isActive());, +, +        Http2GoAwayFrame goAwayFrame = parentChannel.readOutbound();, +        assertNotNull(goAwayFrame);, +        goAwayFrame.release();, +, +        childChannel.close();, +        parentChannel.runPendingTasks();, +, +        Http2ResetFrame reset = parentChannel.readOutbound();, +        assertNull(reset);, +    }, +]