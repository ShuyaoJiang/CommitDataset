[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        private int dataSize;, +            dataSize = queue.readableBytes();, +            return dataSize + padding;, +            // Don't update dataSize because we need to ensure the size() method returns a consistent size even after, +            // error so we don't invalidate flow control when returning bytes to flow control., +            dataSize = queue.readableBytes();, +            dataSize = queue.readableBytes();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        private int dataSize;, +            dataSize = queue.readableBytes();, +            return dataSize + padding;, +            // Don't update dataSize because we need to ensure the size() method returns a consistent size even after, +            // error so we don't invalidate flow control when returning bytes to flow control., +            dataSize = queue.readableBytes();, +            dataSize = queue.readableBytes();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +            assert hasFrame || newStreamableBytes == 0 :, +                "hasFrame: " + hasFrame + " newStreamableBytes: " + newStreamableBytes;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +        private int dataSize;, +            dataSize = queue.readableBytes();, +            return dataSize + padding;, +            // Don't update dataSize because we need to ensure the size() method returns a consistent size even after, +            // error so we don't invalidate flow control when returning bytes to flow control., +            dataSize = queue.readableBytes();, +            dataSize = queue.readableBytes();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/UniformStreamByteDistributor.java, +            assert hasFrame || newStreamableBytes == 0 :, +                "hasFrame: " + hasFrame + " newStreamableBytes: " + newStreamableBytes;, +++ b/transport/src/main/java/io/netty/channel/CoalescingBufferQueue.java, +    private final ArrayDeque<Object> bufAndListenerPairs;, +        this(channel, 4);, +    }, +, +    public CoalescingBufferQueue(Channel channel, int initSize) {, +        bufAndListenerPairs = new ArrayDeque<Object>(initSize);]