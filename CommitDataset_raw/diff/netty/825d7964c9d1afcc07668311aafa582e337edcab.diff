[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private final ChannelPipeline pipeline = new DefaultChannelPipeline(this);, +    private final ChannelFuture succeededFuture = new SucceededChannelFuture(this);, +, +, +    @Override, +    public ChannelFuture newFuture() {, +        return new DefaultChannelFuture(this, false);, +    }, +, +    @Override, +    public ChannelFuture newSucceededFuture() {, +        return succeededFuture;, +    }, +, +    @Override, +    public ChannelFuture newFailedFuture(Throwable cause) {, +        return new FailedChannelFuture(this, cause);, +    }, +, +, +    @Override, +    public void removeClosureListener(ChannelFutureListener listener) {, +        if (listener == null) {, +            throw new NullPointerException("listener");, +        }, +        synchronized (closureListeners) {, +            if (!notifiedClosureListeners) {, +                closureListeners.remove(listener);, +            }, +        }, +    }, +, +            listener.operationComplete(newSucceededFuture());, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private final ChannelPipeline pipeline = new DefaultChannelPipeline(this);, +    private final ChannelFuture succeededFuture = new SucceededChannelFuture(this);, +, +, +    @Override, +    public ChannelFuture newFuture() {, +        return new DefaultChannelFuture(this, false);, +    }, +, +    @Override, +    public ChannelFuture newSucceededFuture() {, +        return succeededFuture;, +    }, +, +    @Override, +    public ChannelFuture newFailedFuture(Throwable cause) {, +        return new FailedChannelFuture(this, cause);, +    }, +, +, +    @Override, +    public void removeClosureListener(ChannelFutureListener listener) {, +        if (listener == null) {, +            throw new NullPointerException("listener");, +        }, +        synchronized (closureListeners) {, +            if (!notifiedClosureListeners) {, +                closureListeners.remove(listener);, +            }, +        }, +    }, +, +            listener.operationComplete(newSucceededFuture());, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +public interface Channel extends AttributeMap, ChannelFutureFactory, Comparable<Channel> {, +    void removeClosureListener(ChannelFutureListener remover);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    private final ChannelPipeline pipeline = new DefaultChannelPipeline(this);, +    private final ChannelFuture succeededFuture = new SucceededChannelFuture(this);, +, +, +    @Override, +    public ChannelFuture newFuture() {, +        return new DefaultChannelFuture(this, false);, +    }, +, +    @Override, +    public ChannelFuture newSucceededFuture() {, +        return succeededFuture;, +    }, +, +    @Override, +    public ChannelFuture newFailedFuture(Throwable cause) {, +        return new FailedChannelFuture(this, cause);, +    }, +, +, +    @Override, +    public void removeClosureListener(ChannelFutureListener listener) {, +        if (listener == null) {, +            throw new NullPointerException("listener");, +        }, +        synchronized (closureListeners) {, +            if (!notifiedClosureListeners) {, +                closureListeners.remove(listener);]