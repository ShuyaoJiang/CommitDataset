[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    private final AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        this.ch = ch;, +        return ch.isOpen();, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    private final AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        this.ch = ch;, +        return ch.isOpen();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +                    logger.warn("close_notify write attempt timed out. Force-closing the connection.");, +                if (timeoutFuture.cancel(false)) {, +            }, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +++ b/transport/src/main/java/io/netty/channel/local/LocalChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    private final AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        this.ch = ch;, +        return ch.isOpen();, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChildEventLoop.java, +            if (isShutdown()) {, +                task = pollTask();, +                if (task == null) {, +                task.run();, +            }, +        if (!inEventLoop && isShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioCompletionHandler.java, +    private static final int MAX_STACK_DEPTH = 4;, +    private static final ThreadLocal<Integer> STACK_DEPTH = new ThreadLocal<Integer>() {, +        @Override, +        protected Integer initialValue() {, +            return 0;, +        }, +    };, +, +        EventLoop loop = channel.eventLoop();, +        if (loop.inEventLoop()) {, +            Integer d = STACK_DEPTH.get();, +            if (d < MAX_STACK_DEPTH) {, +                STACK_DEPTH.set(d + 1);]