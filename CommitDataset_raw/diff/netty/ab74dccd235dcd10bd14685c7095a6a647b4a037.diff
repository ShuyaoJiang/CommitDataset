[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static io.netty.handler.codec.http2.Http2Exception.closedStreamError;, +            // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +            // This check must be after all id validated checks, but before the max streams check because it may be, +            // recoverable to some degree for handling frames which can be sent on closed streams., +            if (streamId < nextStreamId) {, +                throw closedStreamError(PROTOCOL_ERROR, "Request stream %d is behind the next expected stream %d",, +                        streamId, nextStreamId);, +            }, +            if (!canCreateStream()) {, +                throw connectionError(REFUSED_STREAM, "Maximum streams exceeded for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static io.netty.handler.codec.http2.Http2Exception.closedStreamError;, +            // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +            // This check must be after all id validated checks, but before the max streams check because it may be, +            // recoverable to some degree for handling frames which can be sent on closed streams., +            if (streamId < nextStreamId) {, +                throw closedStreamError(PROTOCOL_ERROR, "Request stream %d is behind the next expected stream %d",, +                        streamId, nextStreamId);, +            }, +            if (!canCreateStream()) {, +                throw connectionError(REFUSED_STREAM, "Maximum streams exceeded for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +            try {, +            } catch (ClosedStreamCreationException ignored) {, +                // It is possible that either the stream for this frame or the parent stream is closed., +                // In this case we should ignore the exception and allow the frame to be sent., +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static io.netty.handler.codec.http2.Http2Exception.closedStreamError;, +            // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +            // This check must be after all id validated checks, but before the max streams check because it may be, +            // recoverable to some degree for handling frames which can be sent on closed streams., +            if (streamId < nextStreamId) {, +                throw closedStreamError(PROTOCOL_ERROR, "Request stream %d is behind the next expected stream %d",, +                        streamId, nextStreamId);, +            }, +            if (!canCreateStream()) {, +                throw connectionError(REFUSED_STREAM, "Maximum streams exceeded for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +            try {, +            } catch (ClosedStreamCreationException ignored) {, +                // It is possible that either the stream for this frame or the parent stream is closed., +                // In this case we should ignore the exception and allow the frame to be sent., +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +            // The set priority operation must be done before sending the frame. The parent may not yet exist, +            // and the priority tree may also be modified before sending., +        } catch (ClosedStreamCreationException ignored) {, +            // It is possible that either the stream for this frame or the parent stream is closed., +            // In this case we should ignore the exception and allow the frame to be sent., +        } catch (Throwable t) {, +            return promise.setFailure(t);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import static io.netty.handler.codec.http2.Http2Exception.closedStreamError;, +            // For manually created client-side streams, 1 is reserved for HTTP upgrade, so start at 3., +            // This check must be after all id validated checks, but before the max streams check because it may be, +            // recoverable to some degree for handling frames which can be sent on closed streams., +            if (streamId < nextStreamId) {, +                throw closedStreamError(PROTOCOL_ERROR, "Request stream %d is behind the next expected stream %d",, +                        streamId, nextStreamId);, +            }, +            if (!canCreateStream()) {, +                throw connectionError(REFUSED_STREAM, "Maximum streams exceeded for this endpoint.");, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +            try {, +            } catch (ClosedStreamCreationException ignored) {, +                // It is possible that either the stream for this frame or the parent stream is closed., +                // In this case we should ignore the exception and allow the frame to be sent., +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +import io.netty.handler.codec.http2.Http2Exception.ClosedStreamCreationException;, +            // The set priority operation must be done before sending the frame. The parent may not yet exist, +            // and the priority tree may also be modified before sending., +        } catch (ClosedStreamCreationException ignored) {, +            // It is possible that either the stream for this frame or the parent stream is closed., +            // In this case we should ignore the exception and allow the frame to be sent., +        } catch (Throwable t) {, +            return promise.setFailure(t);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Exception.java, +     * Use if an error has occurred which can not be isolated to a single stream, but instead applies, +     * to the entire connection., +     * @param error The type of error as defined by the HTTP/2 specification., +     * @param fmt String with the content and format for the additional debug data., +     * @param args Objects which fit into the format defined by {@code fmt}., +     * @return An exception which can be translated into a HTTP/2 error., +     */, +    public static Http2Exception closedStreamError(Http2Error error, String fmt, Object... args) {, +        return new ClosedStreamCreationException(error, String.format(fmt, args));, +    }, +, +    /**]