[+++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        InternalThreadLocalMap threadLocalMap = InternalThreadLocalMap.get();, +        registerCleaner(threadLocalMap);, +        return value;, +    }, +, +    private void registerCleaner(final InternalThreadLocalMap threadLocalMap) {, +            InternalThreadLocalMap threadLocalMap = InternalThreadLocalMap.get();, +            boolean alreadySet = threadLocalMap.isIndexedVariableSet(index);, +            set(threadLocalMap, value);, +, +            if (!alreadySet) {, +                registerCleaner(threadLocalMap);, +            }, +++ b/common/src/main/java/io/netty/util/concurrent/FastThreadLocal.java, +        InternalThreadLocalMap threadLocalMap = InternalThreadLocalMap.get();, +        registerCleaner(threadLocalMap);, +        return value;, +    }, +, +    private void registerCleaner(final InternalThreadLocalMap threadLocalMap) {, +            InternalThreadLocalMap threadLocalMap = InternalThreadLocalMap.get();, +            boolean alreadySet = threadLocalMap.isIndexedVariableSet(index);, +            set(threadLocalMap, value);, +, +            if (!alreadySet) {, +                registerCleaner(threadLocalMap);, +            }, +++ b/common/src/test/java/io/netty/util/concurrent/FastThreadLocalTest.java, +    public void testOnRemoveCalledForFastThreadLocalGet() throws Exception {, +        testOnRemoveCalled(true, true);, +    public void testOnRemoveCalledForNonFastThreadLocalGet() throws Exception {, +        testOnRemoveCalled(false, true);, +    @Test(timeout = 4000), +    public void testOnRemoveCalledForFastThreadLocalSet() throws Exception {, +        testOnRemoveCalled(true, false);, +    }, +, +    @Test(timeout = 4000), +    public void testOnRemoveCalledForNonFastThreadLocalSet() throws Exception {, +        testOnRemoveCalled(false, false);, +    }, +, +    private static void testOnRemoveCalled(boolean fastThreadLocal, final boolean callGet) throws Exception {, +                if (callGet) {, +                } else {, +                    threadLocal.set(Thread.currentThread().getName());, +                    threadLocal2.set(Thread.currentThread().getName());, +                }]