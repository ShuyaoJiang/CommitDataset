[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +                        ctx.flush();, +        ctx.write(spdyRstStreamFrame);, +        ChannelFuture f = ctx.flush();, +            f.addListener(new ClosingChannelFutureListener(ctx));, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +                        ctx.flush();, +        ctx.write(spdyRstStreamFrame);, +        ChannelFuture f = ctx.flush();, +            f.addListener(new ClosingChannelFutureListener(ctx));, +++ b/codec-http/src/test/java/io/netty/handler/codec/spdy/SpdySessionHandlerTest.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(SpdySessionHandlerTest.class);, +, +            logger.info("Running: testSpdyClientSessionHandler v" + version);, +            logger.info("Running: testSpdyServerSessionHandler v" + version);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdySessionHandler.java, +                        ctx.flush();, +        ctx.write(spdyRstStreamFrame);, +        ChannelFuture f = ctx.flush();, +            f.addListener(new ClosingChannelFutureListener(ctx));, +++ b/codec-http/src/test/java/io/netty/handler/codec/spdy/SpdySessionHandlerTest.java, +import io.netty.logging.InternalLogger;, +import io.netty.logging.InternalLoggerFactory;, +    private static final InternalLogger logger =, +            InternalLoggerFactory.getInstance(SpdySessionHandlerTest.class);, +, +            logger.info("Running: testSpdyClientSessionHandler v" + version);, +            logger.info("Running: testSpdyServerSessionHandler v" + version);, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +                throw new NoSuchBufferException();, +                throw new NoSuchBufferException();, +                    throw new NoSuchBufferException();, +                    throw new NoSuchBufferException();, +    ChannelFuture write(DefaultChannelHandlerContext ctx, final Object message, final ChannelFuture future) {, +        boolean msgBuf = false;, +        for (;;) {, +            if (ctx == null) {, +                executor = channel.eventLoop();, +                if (out.hasByteBuffer()) {, +                    if(!(message instanceof ChannelBuffer)) {, +                } else {, +                    msgBuf = true;, +                }, +                break;, +            }, +, +            out = ctx.outbound();, +            if (out.hasMessageBuffer()) {, +                msgBuf = true;, +                executor = ctx.executor();, +                break;, +            } else if (message instanceof ChannelBuffer) {, +                executor = ctx.executor();, +                break;, +            }, +, +            ctx = ctx.prev;, +        }, +, +        if (executor.inEventLoop()) {, +            if (msgBuf) {, +                out.messageBuffer().add(message);, +            } else {, +                ChannelBuffer buf = (ChannelBuffer) message;, +                out.byteBuffer().writeBytes(buf, buf.readerIndex(), buf.readableBytes());, +            }, +            final DefaultChannelHandlerContext ctx0 = ctx;, +                    write(ctx0, message, future);]