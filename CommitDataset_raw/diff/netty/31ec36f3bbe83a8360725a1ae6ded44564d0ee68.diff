[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketChannel.java, +            socket.configureBlocking(false);, +            , +            throw new ChannelException("Failed to enter non-blocking mode.", e);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketChannel.java, +            socket.configureBlocking(false);, +            , +            throw new ChannelException("Failed to enter non-blocking mode.", e);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioServerSocketPipelineSink.java, +import java.nio.channels.SelectionKey;, +import java.nio.channels.Selector;, +import java.nio.channels.SocketChannel;, +        private final Selector selector;, +        Boss(NioServerSocketChannel channel) throws IOException {, +            , +            selector = Selector.open();, +            , +            boolean registered = false;, +            try {, +                channel.socket.register(selector, SelectionKey.OP_ACCEPT);, +                registered = true;, +            } finally {, +                if (!registered) {, +                    closeSelector();, +                }, +            }, +            for (;;) {, +                    if (selector.select(1000) > 0) {, +                        selector.selectedKeys().clear();, +                        for (;;) {, +                            SocketChannel acceptedSocket = channel.socket.accept();, +                            if (acceptedSocket != null) {, +                                registerAcceptedChannel(acceptedSocket);, +                            } else {, +                                break;, +                            }, +            , +            closeSelector();, +        }, +, +        private void registerAcceptedChannel(SocketChannel acceptedSocket) {, +            try {, +                ChannelPipeline pipeline =, +                    channel.getConfig().getPipelineFactory().getPipeline();, +                NioWorker worker = nextWorker();, +                worker.register(new NioAcceptedSocketChannel(, +                        channel.getFactory(), pipeline, channel,, +                        NioServerSocketPipelineSink.this, acceptedSocket,, +                        worker), null);, +            } catch (Exception e) {, +                logger.warn(, +                        "Failed to initialize an accepted socket.", e);, +                try {, +                    acceptedSocket.close();, +                } catch (IOException e2) {, +                    logger.warn(, +                            "Failed to close a partially accepted socket.",, +                            e2);, +                }, +            }, +        }, +, +        private void closeSelector() {, +            try {, +                selector.close();, +            } catch (Exception e) {, +                logger.warn("Failed to close a selector.", e);, +            }]