[+++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/FixedReceiveBufferSizePredictor.java, + * size prediction.  This predictor ignores the feed back from the I/O thread., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/FixedReceiveBufferSizePredictor.java, + * size prediction.  This predictor ignores the feed back from the I/O thread., +++ b/src/main/java/org/jboss/netty/channel/ReceiveBufferSizePredictor.java, + * known, an I/O thread will call {@link #previousReceiveBufferSize(int)} to, + * update the predictor so it can predict more accurately next time., +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/FixedReceiveBufferSizePredictor.java, + * size prediction.  This predictor ignores the feed back from the I/O thread., +++ b/src/main/java/org/jboss/netty/channel/ReceiveBufferSizePredictor.java, + * known, an I/O thread will call {@link #previousReceiveBufferSize(int)} to, + * update the predictor so it can predict more accurately next time., +++ b/src/main/java/org/jboss/netty/channel/ServerChannel.java, +import org.jboss.netty.channel.socket.ServerSocketChannel;, +, + * A {@link Channel} that accepts an incoming connection attempt and creates, + * its child {@link Channel}s by accepting them.  {@link ServerSocketChannel} is, + * a good example., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/FixedReceiveBufferSizePredictor.java, + * size prediction.  This predictor ignores the feed back from the I/O thread., +++ b/src/main/java/org/jboss/netty/channel/ReceiveBufferSizePredictor.java, + * known, an I/O thread will call {@link #previousReceiveBufferSize(int)} to, + * update the predictor so it can predict more accurately next time., +++ b/src/main/java/org/jboss/netty/channel/ServerChannel.java, +import org.jboss.netty.channel.socket.ServerSocketChannel;, +, + * A {@link Channel} that accepts an incoming connection attempt and creates, + * its child {@link Channel}s by accepting them.  {@link ServerSocketChannel} is, + * a good example., + *, +++ b/src/main/java/org/jboss/netty/channel/ServerChannelFactory.java, + * A {@link ChannelFactory} that creates a {@link ServerChannel}., + *, +++ b/src/main/java/org/jboss/netty/channel/ChannelPipelineFactory.java, + * the child channel accepted by a {@link ServerChannel}, but it is safe to use, + * it for any other purposes., +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +++ b/src/main/java/org/jboss/netty/channel/DownstreamChannelStateEvent.java, + * The default downstream {@link ChannelStateEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/DownstreamMessageEvent.java, + * The default downstream {@link MessageEvent} implementation., +++ b/src/main/java/org/jboss/netty/channel/FixedReceiveBufferSizePredictor.java, + * size prediction.  This predictor ignores the feed back from the I/O thread., +++ b/src/main/java/org/jboss/netty/channel/ReceiveBufferSizePredictor.java, + * known, an I/O thread will call {@link #previousReceiveBufferSize(int)} to, + * update the predictor so it can predict more accurately next time.]