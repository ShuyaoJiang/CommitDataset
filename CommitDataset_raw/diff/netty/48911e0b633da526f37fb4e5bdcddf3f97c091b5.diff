[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        headers.set(HttpHeaderNames.UPGRADE, WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY1, key1), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY2, key2);, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        headers.set(HttpHeaderNames.UPGRADE, WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY1, key1), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY2, key2);, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +, +        headers.set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY, key), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN, websocketOriginValue(wsURL));, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +        headers.set(HttpHeaderNames.SEC_WEBSOCKET_VERSION, "7");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        headers.set(HttpHeaderNames.UPGRADE, WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY1, key1), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY2, key2);, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +, +        headers.set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY, key), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN, websocketOriginValue(wsURL));, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +        headers.set(HttpHeaderNames.SEC_WEBSOCKET_VERSION, "7");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +, +        headers.set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY, key), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN, websocketOriginValue(wsURL));, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +        headers.set(HttpHeaderNames.SEC_WEBSOCKET_VERSION, "8");, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +        headers.set(HttpHeaderNames.UPGRADE, WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL)), +               .set(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY1, key1), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY2, key2);, +, +        String expectedSubprotocol = expectedSubprotocol();, +        if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {, +            headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL, expectedSubprotocol);, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +, +        headers.set(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET), +               .set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE), +               .set(HttpHeaderNames.SEC_WEBSOCKET_KEY, key), +               .set(HttpHeaderNames.HOST, websocketHostValue(wsURL))]