[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +import io.netty.util.Attribute;, +import io.netty.util.AttributeKey;, +import static io.netty.channel.DefaultChannelPipeline.*;, +, +final class DefaultChannelHandlerContext implements ChannelHandlerContext {, +    public <T> Attribute<T> attr(AttributeKey<T> key) {, +        return channel.attr(key);, +    }, +, +    @Override, +    @SuppressWarnings("deprecation"), +    @SuppressWarnings("deprecation"), +    @SuppressWarnings("deprecation"), +    abstract static class AbstractWriteTask<T extends AbstractWriteTask<T>> implements Runnable {, +        private final Recycler.Handle<T> handle;, +        private AbstractWriteTask(Recycler.Handle<T> handle) {, +        protected static void init(AbstractWriteTask<?> task, DefaultChannelHandlerContext ctx,, +        protected abstract void recycle(Recycler.Handle<T> handle);, +    static final class WriteTask, +            extends AbstractWriteTask<WriteTask> implements SingleThreadEventLoop.NonWakeupRunnable {, +            protected WriteTask newObject(Handle<WriteTask> handle) {, +        private WriteTask(Recycler.Handle<WriteTask> handle) {, +        protected void recycle(Recycler.Handle<WriteTask> handle) {, +    static final class WriteAndFlushTask extends AbstractWriteTask<WriteAndFlushTask> {, +            protected WriteAndFlushTask newObject(Handle<WriteAndFlushTask> handle) {, +        private WriteAndFlushTask(Recycler.Handle<WriteAndFlushTask> handle) {, +        protected void recycle(Recycler.Handle<WriteAndFlushTask> handle) {]