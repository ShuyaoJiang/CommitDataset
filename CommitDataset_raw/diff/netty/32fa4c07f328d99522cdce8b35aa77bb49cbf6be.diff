[+++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +public class DefaultCompositeByteBuf extends AbstractReferenceCountedByteBuf implements CompositeByteBuf {, +        if (buffers instanceof ByteBuf) {, +            // If buffers also implements ByteBuf (e.g. CompositeByteBuf), it has to go to addComponent(ByteBuf)., +            return addComponent0(cIndex, (ByteBuf) buffers);, +        if (!(buffers instanceof Collection)) {, +            buffers = list;, +        }, +, +        Collection<ByteBuf> col = (Collection<ByteBuf>) buffers;, +        return addComponents0(cIndex, col.toArray(new ByteBuf[col.size()]));, +++ b/buffer/src/main/java/io/netty/buffer/DefaultCompositeByteBuf.java, +public class DefaultCompositeByteBuf extends AbstractReferenceCountedByteBuf implements CompositeByteBuf {, +        if (buffers instanceof ByteBuf) {, +            // If buffers also implements ByteBuf (e.g. CompositeByteBuf), it has to go to addComponent(ByteBuf)., +            return addComponent0(cIndex, (ByteBuf) buffers);, +        if (!(buffers instanceof Collection)) {, +            buffers = list;, +        }, +, +        Collection<ByteBuf> col = (Collection<ByteBuf>) buffers;, +        return addComponents0(cIndex, col.toArray(new ByteBuf[col.size()]));, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +public abstract class AbstractCompositeByteBufTest extends AbstractByteBufTest {, +        CompositeByteBuf bufA = compositeBuffer();, +        bufA.addComponents(c1, c2, c3).writerIndex(3);, +        CompositeByteBuf bufB = compositeBuffer();, +        bufB.addComponents(bufA);, +        // Ensure that bufA.refCnt() did not change., +        assertThat(bufA.refCnt(), is(1));, +, +        // This should decrease bufA.refCnt()., +        bufB.release();, +        assertThat(bufB.refCnt(), is(0));, +, +        // Ensure bufA.refCnt() changed., +        assertThat(bufA.refCnt(), is(0));, +, +        // Ensure that c[123]'s refCnt also changed due to the deallocation of bufA., +        assertThat(c1.refCnt(), is(0));, +        assertThat(c2.refCnt(), is(1));, +        assertThat(c3.refCnt(), is(2));, +, +        c3.release(2);, +        c2.release();]