[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +                decodeWasNull = !out.insertSinceRecycled();, +                fireChannelRead(ctx, out, size);, +    /**, +     * Get {@code numElements} out of the {@link List} and forward these through the pipeline., +     */, +    static void fireChannelRead(ChannelHandlerContext ctx, List<Object> msgs, int numElements) {, +        for (int i = 0; i < numElements; i ++) {, +            ctx.fireChannelRead(msgs.get(i));, +        }, +    }, +, +                fireChannelRead(ctx, out, size);, +, +                if (outSize > 0) {, +                    fireChannelRead(ctx, out, outSize);, +                    out.clear();, +                    outSize = 0;, +                }, +, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +                decodeWasNull = !out.insertSinceRecycled();, +                fireChannelRead(ctx, out, size);, +    /**, +     * Get {@code numElements} out of the {@link List} and forward these through the pipeline., +     */, +    static void fireChannelRead(ChannelHandlerContext ctx, List<Object> msgs, int numElements) {, +        for (int i = 0; i < numElements; i ++) {, +            ctx.fireChannelRead(msgs.get(i));, +        }, +    }, +, +                fireChannelRead(ctx, out, size);, +, +                if (outSize > 0) {, +                    fireChannelRead(ctx, out, outSize);, +                    out.clear();, +                    outSize = 0;, +                }, +, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +, +                    fireChannelRead(ctx, out, size);, +, +                if (outSize > 0) {, +                    fireChannelRead(ctx, out, outSize);, +                    out.clear();, +                    outSize = 0;, +                }, +, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +                decodeWasNull = !out.insertSinceRecycled();, +                fireChannelRead(ctx, out, size);, +    /**, +     * Get {@code numElements} out of the {@link List} and forward these through the pipeline., +     */, +    static void fireChannelRead(ChannelHandlerContext ctx, List<Object> msgs, int numElements) {, +        for (int i = 0; i < numElements; i ++) {, +            ctx.fireChannelRead(msgs.get(i));, +        }, +    }, +, +                fireChannelRead(ctx, out, size);, +, +                if (outSize > 0) {, +                    fireChannelRead(ctx, out, outSize);, +                    out.clear();, +                    outSize = 0;, +                }, +, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +, +                    fireChannelRead(ctx, out, size);, +, +                if (outSize > 0) {, +                    fireChannelRead(ctx, out, outSize);, +                    out.clear();, +                    outSize = 0;, +                }, +, +++ b/common/src/main/java/io/netty/util/internal/RecyclableArrayList.java, +    private boolean insertSinceRecycled;, +, +        if (super.addAll(c)) {, +            insertSinceRecycled = true;, +            return true;, +        }, +        return false;, +        if (super.addAll(index, c)) {, +            insertSinceRecycled = true;, +            return true;, +        }, +        return false;, +        if (super.add(element)) {, +            insertSinceRecycled = true;, +            return true;, +        }, +        return false;, +        insertSinceRecycled = true;, +        Object old = super.set(index, element);]