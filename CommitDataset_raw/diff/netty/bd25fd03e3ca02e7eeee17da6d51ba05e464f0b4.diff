[+++ b/transport/src/test/java/io/netty/channel/ChannelInitializerTest.java, +import java.util.concurrent.atomic.AtomicReference;, +    public void testInitChannelThrowsRegisterFirst() {, +        testInitChannelThrows(true);, +    }, +, +    @Test, +    public void testInitChannelThrowsRegisterAfter() {, +        testInitChannelThrows(false);, +    }, +, +    private void testInitChannelThrows(boolean registerFirst) {, +        final Exception exception = new Exception();, +        final AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();, +, +        ChannelPipeline pipeline = new LocalChannel().pipeline();, +, +        if (registerFirst) {, +            group.register(pipeline.channel()).syncUninterruptibly();, +        }, +        pipeline.addFirst(new ChannelInitializer<Channel>() {, +            @Override, +            protected void initChannel(Channel ch) throws Exception {, +                throw exception;, +            }, +, +            @Override, +            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {, +                causeRef.set(cause);, +                super.exceptionCaught(ctx, cause);, +            }, +        });, +, +        if (!registerFirst) {, +            group.register(pipeline.channel()).syncUninterruptibly();, +        }, +        pipeline.channel().close().syncUninterruptibly();, +        pipeline.channel().closeFuture().syncUninterruptibly();, +, +        assertSame(exception, causeRef.get());, +    }, +, +    @Test]