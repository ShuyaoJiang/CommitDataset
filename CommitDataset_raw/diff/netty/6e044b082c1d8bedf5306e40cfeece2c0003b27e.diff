[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            // Connection has terminated, close the encoder and decoder., +            encoder().close();, +            decoder().close();, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            // Connection has terminated, close the encoder and decoder., +            encoder().close();, +            decoder().close();, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamBufferingEncoder.java, +import io.netty.buffer.ByteBufUtil;, +import io.netty.util.ByteString;, + * {@link Http2GoAwayException}., +     * Thrown if buffered streams are terminated due to this encoder being closed., +     */, +    public static final class Http2ChannelClosedException extends Http2Exception {, +        private static final long serialVersionUID = 4768543442094476971L;, +, +        public Http2ChannelClosedException() {, +            super(Http2Error.REFUSED_STREAM, "Connection closed");, +        }, +    }, +, +    /**, +    public static final class Http2GoAwayException extends Http2Exception {, +        private final ByteString debugData;, +        public Http2GoAwayException(int lastStreamId, long errorCode, ByteString debugData) {, +        public ByteString debugData() {, +    private boolean closed;, +        if (closed) {, +            return promise.setFailure(new Http2ChannelClosedException());, +        }, +        try {, +            if (!closed) {, +                closed = true;, +, +                // Fail all buffered streams., +                Http2ChannelClosedException e = new Http2ChannelClosedException();, +                while (!pendingStreams.isEmpty()) {, +                    PendingStream stream = pendingStreams.pollFirstEntry().getValue();, +                    stream.close(e);, +                }, +            }, +        } finally {, +        }, +        Exception e = new Http2GoAwayException(lastStreamId, errorCode,, +                new ByteString(ByteBufUtil.getBytes(debugData), false));, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +            // Connection has terminated, close the encoder and decoder., +            encoder().close();, +            decoder().close();, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamBufferingEncoder.java, +import io.netty.buffer.ByteBufUtil;, +import io.netty.util.ByteString;, + * {@link Http2GoAwayException}., +     * Thrown if buffered streams are terminated due to this encoder being closed., +     */, +    public static final class Http2ChannelClosedException extends Http2Exception {, +        private static final long serialVersionUID = 4768543442094476971L;, +, +        public Http2ChannelClosedException() {, +            super(Http2Error.REFUSED_STREAM, "Connection closed");, +        }, +    }, +, +    /**, +    public static final class Http2GoAwayException extends Http2Exception {, +        private final ByteString debugData;, +        public Http2GoAwayException(int lastStreamId, long errorCode, ByteString debugData) {, +        public ByteString debugData() {, +    private boolean closed;, +        if (closed) {, +            return promise.setFailure(new Http2ChannelClosedException());, +        }, +        try {, +            if (!closed) {, +                closed = true;, +, +                // Fail all buffered streams., +                Http2ChannelClosedException e = new Http2ChannelClosedException();, +                while (!pendingStreams.isEmpty()) {, +                    PendingStream stream = pendingStreams.pollFirstEntry().getValue();, +                    stream.close(e);, +                }, +            }, +        } finally {, +        }, +        Exception e = new Http2GoAwayException(lastStreamId, errorCode,, +                new ByteString(ByteBufUtil.getBytes(debugData), false));, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/StreamBufferingEncoderTest.java, +import io.netty.handler.codec.http2.StreamBufferingEncoder.Http2ChannelClosedException;, +import io.netty.handler.codec.http2.StreamBufferingEncoder.Http2GoAwayException;, +        connection.goAwayReceived(11, 8, EMPTY_BUFFER);, +        verify(promise, never()).setFailure(any(Http2GoAwayException.class));, +    @Test, +    public void closeShouldCancelAllBufferedStreams() {, +        encoder.writeSettingsAck(ctx, promise);, +        connection.local().maxActiveStreams(0);]