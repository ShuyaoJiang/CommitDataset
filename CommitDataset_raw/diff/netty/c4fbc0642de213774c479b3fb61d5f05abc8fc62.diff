[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.concurrent.UnaryPromiseNotifier;, +                closePromise.addListener(new UnaryPromiseNotifier<Void>(promise));, +                DefaultStream stream = (DefaultStream) itr.next().value();, +                    // modify the streamMap. Pass the iterator in so that remove will be called to prevent concurrent, +                    // modification exceptions., +                    stream.close(itr);, +    void removeStream(DefaultStream stream, Iterator<?> itr) {, +            if (itr == null) {, +            } else {, +                itr.remove();, +            }, +        Http2Stream close(Iterator<?> itr) {, +            activeStreams.deactivate(this, itr);, +        public Http2Stream close() {, +            return close(null);, +        }, +, +        @Override, +                        removeStream(oldParent, null);, +                    removeStream(this, null);, +        public void deactivate(final DefaultStream stream, final Iterator<?> itr) {, +                removeFromActiveStreams(stream, itr);, +                        removeFromActiveStreams(stream, itr);, +        void removeFromActiveStreams(DefaultStream stream, Iterator<?> itr) {, +            removeStream(stream, itr);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import io.netty.util.concurrent.UnaryPromiseNotifier;, +                closePromise.addListener(new UnaryPromiseNotifier<Void>(promise));, +                DefaultStream stream = (DefaultStream) itr.next().value();, +                    // modify the streamMap. Pass the iterator in so that remove will be called to prevent concurrent, +                    // modification exceptions., +                    stream.close(itr);, +    void removeStream(DefaultStream stream, Iterator<?> itr) {, +            if (itr == null) {, +            } else {, +                itr.remove();, +            }, +        Http2Stream close(Iterator<?> itr) {, +            activeStreams.deactivate(this, itr);, +        public Http2Stream close() {, +            return close(null);, +        }, +, +        @Override, +                        removeStream(oldParent, null);, +                    removeStream(this, null);, +        public void deactivate(final DefaultStream stream, final Iterator<?> itr) {, +                removeFromActiveStreams(stream, itr);, +                        removeFromActiveStreams(stream, itr);, +        void removeFromActiveStreams(DefaultStream stream, Iterator<?> itr) {, +            removeStream(stream, itr);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionTest.java, +        doAnswer(new Answer<Void>() {, +            @Override, +            public Void answer(InvocationOnMock invocation) throws Throwable {, +                assertNotNull(client.stream(invocation.getArgumentAt(0, Http2Stream.class).id()));, +                return null;, +            }, +        }).when(clientListener).onStreamClosed(any(Http2Stream.class));, +        doAnswer(new Answer<Void>() {, +            @Override, +            public Void answer(InvocationOnMock invocation) throws Throwable {, +                assertNull(client.stream(invocation.getArgumentAt(0, Http2Stream.class).id()));, +                return null;, +            }, +        }).when(clientListener).onStreamRemoved(any(Http2Stream.class));]