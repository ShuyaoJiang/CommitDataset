[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpContent.java, +               "(data: " + content() + ", decoderResult: " + decoderResult() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpContent.java, +               "(data: " + content() + ", decoderResult: " + decoderResult() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpObject.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpContent.java, +               "(data: " + content() + ", decoderResult: " + decoderResult() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpObject.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append(decoderResult());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpContent.java, +               "(data: " + content() + ", decoderResult: " + decoderResult() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpObject.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append(decoderResult());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpResponse.java, +        buf.append(decoderResult());, +        buf.append(getStatus());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/ComposedLastHttpContent.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpContent.java, +               "(data: " + content() + ", decoderResult: " + decoderResult() + ')';, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpObject.java, +    public DecoderResult decoderResult() {, +    public DecoderResult getDecoderResult() {, +        return decoderResult();, +    }, +, +    @Override, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append(decoderResult());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpResponse.java, +        buf.append(decoderResult());, +        buf.append(getStatus());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +    private static final byte[] HEADER_SEPERATOR = { COLON, SP };, +        } catch (NumberFormatException ignored) {, +        } catch (ParseException ignored) {, +            } catch (NumberFormatException ignored) {, +, +        if (headers.isEmpty()) {, +            return this;]