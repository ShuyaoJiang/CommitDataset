[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamChannel.java, +import io.netty.util.internal.ObjectUtil;, +    // Volatile, as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    protected AbstractHttp2StreamChannel(Channel parent) {, +        return isOpen();, +     * This method must only be called within the parent channel's eventloop., +     */, +    protected void streamId(int streamId) {, +        if (this.streamId != -1) {, +            throw new IllegalStateException("Stream identifier may only be set once.");, +        }, +        this.streamId = ObjectUtil.checkPositiveOrZero(streamId, "streamId");, +    }, +, +    protected int streamId() {, +        return streamId;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamChannel.java, +import io.netty.util.internal.ObjectUtil;, +    // Volatile, as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    protected AbstractHttp2StreamChannel(Channel parent) {, +        return isOpen();, +     * This method must only be called within the parent channel's eventloop., +     */, +    protected void streamId(int streamId) {, +        if (this.streamId != -1) {, +            throw new IllegalStateException("Stream identifier may only be set once.");, +        }, +        this.streamId = ObjectUtil.checkPositiveOrZero(streamId, "streamId");, +    }, +, +    protected int streamId() {, +        return streamId;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamFrame.java, +    // Volatile as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    public AbstractHttp2StreamFrame streamId(int streamId) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamChannel.java, +import io.netty.util.internal.ObjectUtil;, +    // Volatile, as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    protected AbstractHttp2StreamChannel(Channel parent) {, +        return isOpen();, +     * This method must only be called within the parent channel's eventloop., +     */, +    protected void streamId(int streamId) {, +        if (this.streamId != -1) {, +            throw new IllegalStateException("Stream identifier may only be set once.");, +        }, +        this.streamId = ObjectUtil.checkPositiveOrZero(streamId, "streamId");, +    }, +, +    protected int streamId() {, +        return streamId;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamFrame.java, +    // Volatile as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    public AbstractHttp2StreamFrame streamId(int streamId) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +    public DefaultHttp2DataFrame streamId(int streamId) {, +        super.streamId(streamId);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamChannel.java, +import io.netty.util.internal.ObjectUtil;, +    // Volatile, as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    protected AbstractHttp2StreamChannel(Channel parent) {, +        return isOpen();, +     * This method must only be called within the parent channel's eventloop., +     */, +    protected void streamId(int streamId) {, +        if (this.streamId != -1) {, +            throw new IllegalStateException("Stream identifier may only be set once.");, +        }, +        this.streamId = ObjectUtil.checkPositiveOrZero(streamId, "streamId");, +    }, +, +    protected int streamId() {, +        return streamId;, +    }, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2StreamFrame.java, +    // Volatile as parent and child channel may be on different eventloops., +    private volatile int streamId = -1;, +    public AbstractHttp2StreamFrame streamId(int streamId) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2DataFrame.java, +    public DefaultHttp2DataFrame streamId(int streamId) {, +        super.streamId(streamId);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersFrame.java, +    public DefaultHttp2HeadersFrame streamId(int streamId) {]