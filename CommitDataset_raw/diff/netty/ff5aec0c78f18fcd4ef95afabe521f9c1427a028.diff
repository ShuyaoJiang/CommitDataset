[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        outboundMsgMatcher = TypeParameterMatcher.find(this, parameterizedHandlerType, messageTypeParamIndex);, +        return outboundMsgMatcher.match(msg);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        outboundMsgMatcher = TypeParameterMatcher.find(this, parameterizedHandlerType, messageTypeParamIndex);, +        return outboundMsgMatcher.match(msg);, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher inboundMsgMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        inboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 0);, +        outboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 1);, +        inboundMsgMatcher = TypeParameterMatcher.find(, +        outboundMsgMatcher = TypeParameterMatcher.find(, +        return inboundMsgMatcher.match(msg);, +        return outboundMsgMatcher.match(msg);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        outboundMsgMatcher = TypeParameterMatcher.find(this, parameterizedHandlerType, messageTypeParamIndex);, +        return outboundMsgMatcher.match(msg);, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher inboundMsgMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        inboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 0);, +        outboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 1);, +        inboundMsgMatcher = TypeParameterMatcher.find(, +        outboundMsgMatcher = TypeParameterMatcher.find(, +        return inboundMsgMatcher.match(msg);, +        return outboundMsgMatcher.match(msg);, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        outboundMsgMatcher = TypeParameterMatcher.find(this, parameterizedHandlerType, messageTypeParamIndex);, +        return outboundMsgMatcher.match(msg);, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageCodec.java, +import io.netty.util.internal.TypeParameterMatcher;, +    private final TypeParameterMatcher inboundMsgMatcher;, +    private final TypeParameterMatcher outboundMsgMatcher;, +        inboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 0);, +        outboundMsgMatcher = TypeParameterMatcher.find(this, MessageToMessageCodec.class, 1);, +        inboundMsgMatcher = TypeParameterMatcher.find(, +        outboundMsgMatcher = TypeParameterMatcher.find(, +        return inboundMsgMatcher.match(msg);, +        return outboundMsgMatcher.match(msg);, +++ /dev/null, +++ b/common/src/main/java/io/netty/util/internal/TypeParameterMatcher.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.util.internal;, +, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.util.IdentityHashMap;, +import java.util.Map;, +, +public abstract class TypeParameterMatcher {, +, +    private static final TypeParameterMatcher NOOP = new TypeParameterMatcher() {, +        @Override, +        public boolean match(Object msg) {, +            return true;, +        }, +    };, +, +    private static final ThreadLocal<Map<Class<?>, TypeParameterMatcher>> typeMap =, +            new ThreadLocal<Map<Class<?>, TypeParameterMatcher>>() {, +                @Override, +                protected Map<Class<?>, TypeParameterMatcher> initialValue() {, +                    return new IdentityHashMap<Class<?>, TypeParameterMatcher>();, +                }, +            };, +, +    public static TypeParameterMatcher find(, +            final Object object, final Class<?> parameterizedSuperClass, final int typeParamIndex) {, +, +        final Map<Class<?>, TypeParameterMatcher> typeMap = TypeParameterMatcher.typeMap.get();, +        final Class<?> thisClass = object.getClass();, +, +        TypeParameterMatcher matcher = typeMap.get(thisClass);]