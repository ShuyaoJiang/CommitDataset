[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java, +            }, +        }, +, +                        DefaultDnsCacheEntry replacedEntry = null;, +                        for (int i = 0; i < entries.size(); i++) {, +                            DefaultDnsCacheEntry entry = entries.get(i);, +                            // Only add old entry if the address is not the same as the one we try to add as well., +                            // In this case we will skip it and just add the new entry as this may have, +                            // more up-to-date data and cancel the old after we were able to update the cache., +                            if (!e.address().equals(entry.address())) {, +                                newEntries.add(entry);, +                            } else {, +                                assert replacedEntry == null;, +                                replacedEntry = entry;, +                            }, +                        }, +                            if (replacedEntry != null) {, +                                replacedEntry.cancelExpiration();, +                            }, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java, +            }, +        }, +, +                        DefaultDnsCacheEntry replacedEntry = null;, +                        for (int i = 0; i < entries.size(); i++) {, +                            DefaultDnsCacheEntry entry = entries.get(i);, +                            // Only add old entry if the address is not the same as the one we try to add as well., +                            // In this case we will skip it and just add the new entry as this may have, +                            // more up-to-date data and cancel the old after we were able to update the cache., +                            if (!e.address().equals(entry.address())) {, +                                newEntries.add(entry);, +                            } else {, +                                assert replacedEntry == null;, +                                replacedEntry = entry;, +                            }, +                        }, +                            if (replacedEntry != null) {, +                                replacedEntry.cancelExpiration();, +                            }, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DefaultDnsCacheTest.java, +, +import java.net.InetAddress;, +import java.util.List;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +, +        InetAddress addr1 = InetAddress.getByAddress(new byte[] { 10, 0, 0, 1 });, +        InetAddress addr2 = InetAddress.getByAddress(new byte[] { 10, 0, 0, 2 });, +            cache.cache("netty.io", null, addr1, 1, loop);, +            cache.cache("netty.io", null, addr2, 10000, loop);, +                public Throwable call() {, +                        assertNull(cache.get("netty.io", null));, +            assertNotNull(cache.cache("netty.io", null, NetUtil.LOCALHOST, days, loop));, +, +    @Test, +    public void testAddMultipleAddressesForSameHostname() throws Exception {, +        InetAddress addr1 = InetAddress.getByAddress(new byte[] { 10, 0, 0, 1 });, +        InetAddress addr2 = InetAddress.getByAddress(new byte[] { 10, 0, 0, 2 });, +        EventLoopGroup group = new DefaultEventLoopGroup(1);, +, +        try {, +            EventLoop loop = group.next();, +            final DefaultDnsCache cache = new DefaultDnsCache();, +            cache.cache("netty.io", null, addr1, 1, loop);, +            cache.cache("netty.io", null, addr2, 10000, loop);, +, +            List<? extends DnsCacheEntry> entries = cache.get("netty.io", null);, +            assertEquals(2, entries.size());, +            assertEntry(entries.get(0), addr1);, +            assertEntry(entries.get(1), addr2);, +        } finally {, +            group.shutdownGracefully();, +        }, +    }, +, +    @Test, +    public void testAddSameAddressForSameHostname() throws Exception {, +        InetAddress addr1 = InetAddress.getByAddress(new byte[] { 10, 0, 0, 1 });, +        EventLoopGroup group = new DefaultEventLoopGroup(1);, +, +        try {, +            EventLoop loop = group.next();, +            final DefaultDnsCache cache = new DefaultDnsCache();, +            cache.cache("netty.io", null, addr1, 1, loop);, +            cache.cache("netty.io", null, addr1, 10000, loop);, +, +            List<? extends DnsCacheEntry> entries = cache.get("netty.io", null);, +            assertEquals(1, entries.size());, +            assertEntry(entries.get(0), addr1);, +        } finally {, +            group.shutdownGracefully();, +        }, +    }, +, +    private static void assertEntry(DnsCacheEntry entry, InetAddress address) {, +        assertEquals(address, entry.address());, +        assertNull(entry.cause());]