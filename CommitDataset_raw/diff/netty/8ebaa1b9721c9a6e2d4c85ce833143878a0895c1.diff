[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +        protected Map<Class<?>, String> initialValue() {, +            // If the registered is false it means that the channel was not registered on an eventLoop yet., +                callHandlerAddedInEventLoop(newCtx, executor);, +            // If the registered is false it means that the channel was not registered on an eventLoop yet., +                callHandlerAddedInEventLoop(newCtx, executor);, +            // If the registered is false it means that the channel was not registered on an eventLoop yet., +                callHandlerAddedInEventLoop(newCtx, executor);, +            // If the registered is false it means that the channel was not registered on an eventLoop yet., +                callHandlerAddedInEventLoop(newCtx, executor);, +    private void callHandlerAddedInEventLoop(final AbstractChannelHandlerContext newCtx, EventExecutor executor) {, +        newCtx.setAddPending();, +        executor.execute(new Runnable() {, +            @Override, +            public void run() {, +                callHandlerAdded0(newCtx);, +            }, +        });, +    }, +, +        public void channelRegistered(ChannelHandlerContext ctx) { }, +        public void channelUnregistered(ChannelHandlerContext ctx) { }, +        public void channelActive(ChannelHandlerContext ctx) {, +        public void channelInactive(ChannelHandlerContext ctx) {, +        public void channelWritabilityChanged(ChannelHandlerContext ctx) {, +        public void handlerAdded(ChannelHandlerContext ctx) { }, +        public void handlerRemoved(ChannelHandlerContext ctx) { }, +        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {, +        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +        public void channelRead(ChannelHandlerContext ctx, Object msg) {, +        public void channelReadComplete(ChannelHandlerContext ctx) {, +        public void handlerAdded(ChannelHandlerContext ctx) {, +        public void handlerRemoved(ChannelHandlerContext ctx) {, +                ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise) {, +                ChannelPromise promise) {, +        public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) {, +        public void close(ChannelHandlerContext ctx, ChannelPromise promise) {, +        public void deregister(ChannelHandlerContext ctx, ChannelPromise promise) {, +        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {, +        public void flush(ChannelHandlerContext ctx) {, +        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {, +        public void channelRegistered(ChannelHandlerContext ctx) {, +        public void channelUnregistered(ChannelHandlerContext ctx) {, +        public void channelActive(ChannelHandlerContext ctx) {, +        public void channelInactive(ChannelHandlerContext ctx) {, +        public void channelRead(ChannelHandlerContext ctx, Object msg) {, +        public void channelReadComplete(ChannelHandlerContext ctx) {, +        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {, +        public void channelWritabilityChanged(ChannelHandlerContext ctx) {]