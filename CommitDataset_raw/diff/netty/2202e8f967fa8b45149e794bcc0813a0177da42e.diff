[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +, +package io.netty.handler.codec.http2;, +, +import io.netty.handler.codec.http2.Http2HeadersEncoder.SensitivityDetector;, +, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +/**, + * Abstract base class which defines commonly used features required to build {@link Http2ConnectionHandler} instances., + *, + * <h3>Three ways to build a {@link Http2ConnectionHandler}</h3>, + * <h4>Let the builder create a {@link Http2ConnectionHandler}</h4>, + * Simply call all the necessary setter methods, and then use {@link #build()} to build a new, + * {@link Http2ConnectionHandler}. Setting the following properties are prohibited because they are used for, + * other ways of building a {@link Http2ConnectionHandler}., + * conflicts with this option:, + * <ul>, + *   <li>{@link #connection(Http2Connection)}</li>, + *   <li>{@link #codec(Http2ConnectionDecoder, Http2ConnectionEncoder)}</li>, + * </ul>, + *, + *, + * <h4>Let the builder use the {@link Http2ConnectionHandler} you specified</h4>, + * Call {@link #connection(Http2Connection)} to tell the builder that you want to build the handler from the, + * {@link Http2Connection} you specified. Setting the following properties are prohibited and thus will trigger, + * an {@link IllegalStateException} because they conflict with this option., + * <ul>, + *   <li>{@link #server(boolean)}</li>, + *   <li>{@link #codec(Http2ConnectionDecoder, Http2ConnectionEncoder)}</li>, + * </ul>, + *, + * <h4>Let the builder use the {@link Http2ConnectionDecoder} and {@link Http2ConnectionEncoder} you specified</h4>, + * Call {@link #codec(Http2ConnectionDecoder, Http2ConnectionEncoder)} to tell the builder that you want to built the, + * handler from the {@link Http2ConnectionDecoder} and {@link Http2ConnectionEncoder} you specified. Setting the, + * following properties are prohibited and thus will trigger an {@link IllegalStateException} because they conflict, + * with this option:, + * <ul>, + *   <li>{@link #server(boolean)}</li>, + *   <li>{@link #connection(Http2Connection)}</li>, + *   <li>{@link #frameLogger(Http2FrameLogger)}</li>, + *   <li>{@link #headerSensitivityDetector(SensitivityDetector)}</li>, + *   <li>{@link #encoderEnforceMaxConcurrentStreams(boolean)}</li>, + * </ul>, + *, + * <h3>Exposing necessary methods in a subclass</h3>, + * {@link #build()} method and all property access methods are {@code protected}. Choose the methods to expose to the, + * users of your builder implementation and make them {@code public}., + *, + * @param <T> The type of handler created by this builder., + * @param <B> The concrete type of this builder., + */, +public abstract class AbstractHttp2ConnectionHandlerBuilder<T extends Http2ConnectionHandler,, +                                                            B extends AbstractHttp2ConnectionHandlerBuilder<T, B>> {, +, +    private static final long DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS = MILLISECONDS.convert(30, SECONDS);, +    private static final SensitivityDetector DEFAULT_HEADER_SENSITIVITY_DETECTOR = Http2HeadersEncoder.NEVER_SENSITIVE;, +, +    // The properties that can always be set., +    private boolean validateHeaders = true;, +    private Http2Settings initialSettings = new Http2Settings();, +    private Http2FrameListener frameListener;, +    private long gracefulShutdownTimeoutMillis = DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS;, +, +    // The property that will prohibit connection() and codec() if set by server(),, +    // because this property is used only when this builder creates a Http2Connection., +    private Boolean isServer;, +, +    // The property that will prohibit server() and codec() if set by connection()., +    private Http2Connection connection;, +, +    // The properties that will prohibit server() and connection() if set by codec()., +    private Http2ConnectionDecoder decoder;, +    private Http2ConnectionEncoder encoder;, +, +    // The properties that are:, +    // * mutually exclusive against codec() and, +    // * OK to use with server() and connection(), +    private Http2FrameLogger frameLogger;, +    private SensitivityDetector headerSensitivityDetector;, +    private Boolean encoderEnforceMaxConcurrentStreams;, +, +    /**]