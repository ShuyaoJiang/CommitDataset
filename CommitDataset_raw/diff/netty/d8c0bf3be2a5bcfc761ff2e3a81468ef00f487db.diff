[+++ b/codec/src/main/java/io/netty/handler/codec/bytes/ByteArrayEncoder.java, +import io.netty.buffer.BufType;, +import io.netty.channel.ChannelOutboundMessageHandlerAdapter;, +import io.netty.channel.ChannelPromise;, +public class ByteArrayEncoder extends ChannelOutboundMessageHandlerAdapter<byte[]> {, +    private final BufType nextBufferType;, +, +    public ByteArrayEncoder(BufType nextBufferType) {, +        if (nextBufferType == null) {, +            throw new NullPointerException("nextBufferType");, +        }, +        this.nextBufferType = nextBufferType;, +    public void flush(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {, +        MessageBuf<Object> in = ctx.outboundMessageBuffer();, +        MessageBuf<Object> msgOut = ctx.nextOutboundMessageBuffer();, +        ByteBuf byteOut = ctx.nextOutboundByteBuffer();, +, +        try {, +            for (;;) {, +                Object m = in.poll();, +                if (m == null) {, +                    break;, +                if (!(m instanceof byte[])) {, +                    msgOut.add(m);, +                    continue;, +, +                byte[] a = (byte[]) m;, +                if (a.length == 0) {, +                    continue;, +                }, +, +                switch (nextBufferType) {, +                    case BYTE:, +                        byteOut.writeBytes(a);, +                        break;, +                    case MESSAGE:, +                        msgOut.add(Unpooled.wrappedBuffer(a));, +                        break;, +                    default:, +                        throw new Error();, +                }, +            }, +        } finally {, +            ctx.flush(promise);, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/bytes/ByteArrayEncoder.java, +import io.netty.buffer.BufType;, +import io.netty.channel.ChannelOutboundMessageHandlerAdapter;, +import io.netty.channel.ChannelPromise;, +public class ByteArrayEncoder extends ChannelOutboundMessageHandlerAdapter<byte[]> {, +    private final BufType nextBufferType;, +, +    public ByteArrayEncoder(BufType nextBufferType) {, +        if (nextBufferType == null) {, +            throw new NullPointerException("nextBufferType");, +        }, +        this.nextBufferType = nextBufferType;, +    public void flush(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {, +        MessageBuf<Object> in = ctx.outboundMessageBuffer();, +        MessageBuf<Object> msgOut = ctx.nextOutboundMessageBuffer();, +        ByteBuf byteOut = ctx.nextOutboundByteBuffer();, +, +        try {, +            for (;;) {, +                Object m = in.poll();, +                if (m == null) {, +                    break;, +                if (!(m instanceof byte[])) {, +                    msgOut.add(m);, +                    continue;, +, +                byte[] a = (byte[]) m;, +                if (a.length == 0) {, +                    continue;, +                }, +, +                switch (nextBufferType) {, +                    case BYTE:, +                        byteOut.writeBytes(a);, +                        break;, +                    case MESSAGE:, +                        msgOut.add(Unpooled.wrappedBuffer(a));, +                        break;, +                    default:, +                        throw new Error();, +                }, +            }, +        } finally {, +            ctx.flush(promise);, +        }, +++ b/codec/src/main/java/io/netty/handler/codec/string/StringEncoder.java, +import io.netty.buffer.BufType;, +import io.netty.buffer.MessageBuf;, +import io.netty.channel.ChannelOutboundMessageHandlerAdapter;, +import io.netty.channel.ChannelPromise;, +public class StringEncoder extends ChannelOutboundMessageHandlerAdapter<CharSequence> {, +    private final BufType nextBufferType;, +    public StringEncoder(BufType nextBufferType) {, +        this(nextBufferType, Charset.defaultCharset());, +    public StringEncoder(BufType nextBufferType, Charset charset) {]