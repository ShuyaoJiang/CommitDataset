[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    /**, +     * Creates a new instance of {@code WebSocketFrameDecoder} with the specified {@code maxFrameSize}. If the client, +     * sends a frame size larger than {@code maxFrameSize}, the channel will be closed., +     * , +     * @param maxFrameSize, +     *            the maximum frame size to decode, +     */, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +        this.maxFrameSize = maxFrameSize;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    /**, +     * Creates a new instance of {@code WebSocketFrameDecoder} with the specified {@code maxFrameSize}. If the client, +     * sends a frame size larger than {@code maxFrameSize}, the channel will be closed., +     * , +     * @param maxFrameSize, +     *            the maximum frame size to decode, +     */, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +        this.maxFrameSize = maxFrameSize;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private long maxFramePayloadLength;, +     * Constructor with default values, +        this(maskedPayload, allowExtensions, Long.MAX_VALUE);, +    }, +    , +    /**, +     * Constructor, +     * , +     * @param maskedPayload, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     */, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > this.maxFramePayloadLength) {, +                protocolViolation(channel, "Max frame length of " + this.maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +, +            , +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final long maxFrameSize;, +    /**, +     * Creates a new instance of {@code WebSocketFrameDecoder} with the specified {@code maxFrameSize}. If the client, +     * sends a frame size larger than {@code maxFrameSize}, the channel will be closed., +     * , +     * @param maxFrameSize, +     *            the maximum frame size to decode, +     */, +    public WebSocket00FrameDecoder(long maxFrameSize) {, +        this.maxFrameSize = maxFrameSize;, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    private long maxFramePayloadLength;, +     * Constructor with default values, +        this(maskedPayload, allowExtensions, Long.MAX_VALUE);, +    }, +    , +    /**, +     * Constructor, +     * , +     * @param maskedPayload, +     *            Web socket servers must set this to true processed incoming masked payload. Client implementations, +     *            must set this to false., +     * @param allowExtensions, +     *            Flag to allow reserved extension bits to be used or not, +     * @param maxFramePayloadLength, +     *            Maximum length of a frame's payload. Setting this to an appropriate value for you application, +     *            helps check for denial of services attacks., +     */, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions, long maxFramePayloadLength) {, +        this.maxFramePayloadLength = maxFramePayloadLength;, +            if (framePayloadLength > this.maxFramePayloadLength) {, +                protocolViolation(channel, "Max frame length of " + this.maxFramePayloadLength + " has been exceeded.");, +                return null;, +            }, +            long willHaveReadByteCount = framePayloadBytesRead + rbytes;, +, +            , +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +     * Constructor with default values, +        this(maskedPayload, allowExtensions, Long.MAX_VALUE);, +    }, +    , +    /**, +     * Constructor]