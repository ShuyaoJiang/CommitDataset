[+++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);, +    private final long readerIdleTimeNanos;, +    private final long writerIdleTimeNanos;, +    private final long allIdleTimeNanos;, +            readerIdleTimeNanos = 0;, +            readerIdleTimeNanos = Math.max(unit.toNanos(readerIdleTime), MIN_TIMEOUT_NANOS);, +            writerIdleTimeNanos = 0;, +            writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);, +            allIdleTimeNanos = 0;, +            allIdleTimeNanos = Math.max(unit.toNanos(allIdleTime), MIN_TIMEOUT_NANOS);, +        return TimeUnit.NANOSECONDS.toMillis(readerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(writerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(allIdleTimeNanos);, +        lastReadTime = System.nanoTime();, +                lastWriteTime = System.nanoTime();, +        lastReadTime = lastWriteTime = System.nanoTime();, +        if (readerIdleTimeNanos > 0) {, +                    readerIdleTimeNanos, TimeUnit.NANOSECONDS);, +        if (writerIdleTimeNanos > 0) {, +                    writerIdleTimeNanos, TimeUnit.NANOSECONDS);, +        if (allIdleTimeNanos > 0) {, +                    allIdleTimeNanos, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = readerIdleTimeNanos - (currentTime - lastReadTime);, +                    ctx.executor().schedule(this, readerIdleTimeNanos, TimeUnit.NANOSECONDS);, +                readerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = writerIdleTimeNanos - (currentTime - lastWriteTime);, +                        this, writerIdleTimeNanos, TimeUnit.NANOSECONDS);, +                writerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = allIdleTimeNanos - (currentTime - lastIoTime);, +                        this, allIdleTimeNanos, TimeUnit.NANOSECONDS);, +                allIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);, +    private final long readerIdleTimeNanos;, +    private final long writerIdleTimeNanos;, +    private final long allIdleTimeNanos;, +            readerIdleTimeNanos = 0;, +            readerIdleTimeNanos = Math.max(unit.toNanos(readerIdleTime), MIN_TIMEOUT_NANOS);, +            writerIdleTimeNanos = 0;, +            writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);, +            allIdleTimeNanos = 0;, +            allIdleTimeNanos = Math.max(unit.toNanos(allIdleTime), MIN_TIMEOUT_NANOS);, +        return TimeUnit.NANOSECONDS.toMillis(readerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(writerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(allIdleTimeNanos);, +        lastReadTime = System.nanoTime();, +                lastWriteTime = System.nanoTime();, +        lastReadTime = lastWriteTime = System.nanoTime();, +        if (readerIdleTimeNanos > 0) {, +                    readerIdleTimeNanos, TimeUnit.NANOSECONDS);, +        if (writerIdleTimeNanos > 0) {, +                    writerIdleTimeNanos, TimeUnit.NANOSECONDS);, +        if (allIdleTimeNanos > 0) {, +                    allIdleTimeNanos, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = readerIdleTimeNanos - (currentTime - lastReadTime);, +                    ctx.executor().schedule(this, readerIdleTimeNanos, TimeUnit.NANOSECONDS);, +                readerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = writerIdleTimeNanos - (currentTime - lastWriteTime);, +                        this, writerIdleTimeNanos, TimeUnit.NANOSECONDS);, +                writerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = allIdleTimeNanos - (currentTime - lastIoTime);, +                        this, allIdleTimeNanos, TimeUnit.NANOSECONDS);, +                allIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +++ b/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutHandler.java, +    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);, +    private final long timeoutNanos;, +            timeoutNanos = 0;, +            timeoutNanos = Math.max(unit.toNanos(timeout), MIN_TIMEOUT_NANOS);, +        lastReadTime = System.nanoTime();, +        lastReadTime = System.nanoTime();, +        if (timeoutNanos > 0) {, +                    timeoutNanos, TimeUnit.NANOSECONDS);, +            long currentTime = System.nanoTime();, +            long nextDelay = timeoutNanos - (currentTime - lastReadTime);, +                timeout = ctx.executor().schedule(this, timeoutNanos, TimeUnit.NANOSECONDS);, +                timeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);, +++ b/handler/src/main/java/io/netty/handler/timeout/IdleStateHandler.java, +    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);, +    private final long readerIdleTimeNanos;, +    private final long writerIdleTimeNanos;, +    private final long allIdleTimeNanos;, +            readerIdleTimeNanos = 0;, +            readerIdleTimeNanos = Math.max(unit.toNanos(readerIdleTime), MIN_TIMEOUT_NANOS);, +            writerIdleTimeNanos = 0;, +            writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);, +            allIdleTimeNanos = 0;, +            allIdleTimeNanos = Math.max(unit.toNanos(allIdleTime), MIN_TIMEOUT_NANOS);, +        return TimeUnit.NANOSECONDS.toMillis(readerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(writerIdleTimeNanos);, +        return TimeUnit.NANOSECONDS.toMillis(allIdleTimeNanos);, +        lastReadTime = System.nanoTime();, +                lastWriteTime = System.nanoTime();, +        lastReadTime = lastWriteTime = System.nanoTime();]