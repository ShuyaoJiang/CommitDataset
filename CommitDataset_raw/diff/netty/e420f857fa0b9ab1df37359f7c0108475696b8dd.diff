[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +import io.netty.handler.codec.HeadersUtils;, +, +    @Override, +    public String toString() {, +        return HeadersUtils.toString(getClass(), iteratorCharSequence(), size());, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +import io.netty.handler.codec.HeadersUtils;, +, +    @Override, +    public String toString() {, +        return HeadersUtils.toString(getClass(), iteratorCharSequence(), size());, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +    @Test, +    public void toStringOnEmptyHeaders() {, +        assertEquals("DefaultHttpHeaders[]", newDefaultDefaultHttpHeaders().toString());, +    }, +, +    @Test, +    public void toStringOnSingleHeader() {, +        assertEquals("DefaultHttpHeaders[foo: bar]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .toString());, +    }, +, +    @Test, +    public void toStringOnMultipleHeaders() {, +        assertEquals("DefaultHttpHeaders[foo: bar, baz: qix]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .add("baz", "qix"), +                .toString());, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +import io.netty.handler.codec.HeadersUtils;, +, +    @Override, +    public String toString() {, +        return HeadersUtils.toString(getClass(), iteratorCharSequence(), size());, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +    @Test, +    public void toStringOnEmptyHeaders() {, +        assertEquals("DefaultHttpHeaders[]", newDefaultDefaultHttpHeaders().toString());, +    }, +, +    @Test, +    public void toStringOnSingleHeader() {, +        assertEquals("DefaultHttpHeaders[foo: bar]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .toString());, +    }, +, +    @Test, +    public void toStringOnMultipleHeaders() {, +        assertEquals("DefaultHttpHeaders[foo: bar, baz: qix]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .add("baz", "qix"), +                .toString());, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java, +        return HeadersUtils.toString(getClass(), iterator(), size());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpHeaders.java, +import io.netty.handler.codec.HeadersUtils;, +, +    @Override, +    public String toString() {, +        return HeadersUtils.toString(getClass(), iteratorCharSequence(), size());, +    }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +    @Test, +    public void toStringOnEmptyHeaders() {, +        assertEquals("DefaultHttpHeaders[]", newDefaultDefaultHttpHeaders().toString());, +    }, +, +    @Test, +    public void toStringOnSingleHeader() {, +        assertEquals("DefaultHttpHeaders[foo: bar]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .toString());, +    }, +, +    @Test, +    public void toStringOnMultipleHeaders() {, +        assertEquals("DefaultHttpHeaders[foo: bar, baz: qix]", newDefaultDefaultHttpHeaders(), +                .add("foo", "bar"), +                .add("baz", "qix"), +                .toString());, +    }, +, +++ b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java, +        return HeadersUtils.toString(getClass(), iterator(), size());, +++ b/codec/src/main/java/io/netty/handler/codec/HeadersUtils.java, +     * Helper for implementing toString for {@link DefaultHeaders} and wrappers such as DefaultHttpHeaders., +     * @param headersClass the class of headers, +     * @param headersIt the iterator on the actual headers, +     * @param size the size of the iterator]