[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/ReadOnlyHttpHeaders.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.http;, +, +import io.netty.util.AsciiString;, +import io.netty.util.internal.UnstableApi;, +, +import java.util.AbstractMap.SimpleImmutableEntry;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;, +, +import static io.netty.handler.codec.CharSequenceValueConverter.INSTANCE;, +import static io.netty.handler.codec.http.DefaultHttpHeaders.HttpNameValidator;, +import static io.netty.util.AsciiString.contentEqualsIgnoreCase;, +, +/**, + * A variant of {@link HttpHeaders} which only supports read-only methods., + * <p>, + * Any array passed to this class may be used directly in the underlying data structures of this class. If these, + * arrays may be modified it is the caller's responsibility to supply this class with a copy of the array., + * <p>, + * This may be a good alternative to {@link DefaultHttpHeaders} if your have a fixed set of headers which will not, + * change., + */, +@UnstableApi, +public final class ReadOnlyHttpHeaders extends HttpHeaders {, +    private final CharSequence[] nameValuePairs;, +, +    /**, +     * Create a new instance., +     * @param validateHeaders {@code true} to validate the contents of each header name., +     * @param nameValuePairs An array of the structure {@code [<name,value>,<name,value>,...]}., +     *                      A copy will <strong>NOT</strong> be made of this array. If the contents of this array, +     *                      may be modified externally you are responsible for passing in a copy., +     */, +    public ReadOnlyHttpHeaders(boolean validateHeaders, CharSequence... nameValuePairs) {, +        if ((nameValuePairs.length & 1) != 0) {, +            throw newInvalidArraySizeException();, +        }, +        if (validateHeaders) {, +            validateHeaders(nameValuePairs);, +        }, +        this.nameValuePairs = nameValuePairs;, +    }, +, +    private static IllegalArgumentException newInvalidArraySizeException() {, +        return new IllegalArgumentException("nameValuePairs must be arrays of [name, value] pairs");, +    }, +, +    private static void validateHeaders(CharSequence... keyValuePairs) {, +        for (int i = 0; i < keyValuePairs.length; i += 2) {, +            HttpNameValidator.validateName(keyValuePairs[i]);, +        }, +    }, +, +    private CharSequence get0(CharSequence name) {, +        final int nameHash = AsciiString.hashCode(name);, +        for (int i = 0; i < nameValuePairs.length; i += 2) {, +            CharSequence roName = nameValuePairs[i];, +            if (roName.hashCode() == nameHash && contentEqualsIgnoreCase(roName, name)) {, +                return nameValuePairs[i + 1];, +            }, +        }, +        return null;, +    }, +, +    @Override, +    public String get(String name) {, +        CharSequence value = get0(name);, +        return value == null ? null : value.toString();, +    }, +, +    @Override, +    public Integer getInt(CharSequence name) {, +        CharSequence value = get0(name);, +        return value == null ? null : INSTANCE.convertToInt(value);, +    }, +, +    @Override, +    public int getInt(CharSequence name, int defaultValue) {]