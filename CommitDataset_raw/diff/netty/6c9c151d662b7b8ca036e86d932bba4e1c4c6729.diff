[+++ b/common/src/main/java/io/netty/util/AttributeMap.java, +     * an {@link Attribute} which does not have a value set yet., +++ b/common/src/main/java/io/netty/util/AttributeMap.java, +     * an {@link Attribute} which does not have a value set yet., +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    // Flushed messages are stored in a circular buffer., +++ b/common/src/main/java/io/netty/util/AttributeMap.java, +     * an {@link Attribute} which does not have a value set yet., +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    // Flushed messages are stored in a circular buffer., +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundInvoker.java, +, +++ b/common/src/main/java/io/netty/util/AttributeMap.java, +     * an {@link Attribute} which does not have a value set yet., +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +    // Flushed messages are stored in a circular buffer., +++ b/transport/src/main/java/io/netty/channel/ChannelOutboundInvoker.java, +, +++ b/transport/src/main/java/io/netty/channel/ChannelPropertyAccess.java, +     * Return the assigned {@link ByteBufAllocator} which will be used to allocate {@link ByteBuf}s., +     * Create a new {@link ChannelFuture} which is marked as succeeded already. So {@link ChannelFuture#isSuccess()}, +     * Create a new {@link ChannelFuture} which is marked as failed already. So {@link ChannelFuture#isSuccess()}, +     * if you want to save an object allocation for every write operation. You will not be able to detect if the operation]