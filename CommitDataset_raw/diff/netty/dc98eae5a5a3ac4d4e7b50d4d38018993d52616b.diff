[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import java.util.Locale;, +    private static final String HTTP_SCHEME_PREFIX = HttpScheme.HTTP + "://";, +    private static final String HTTPS_SCHEME_PREFIX = HttpScheme.HTTPS + "://";, +, +    static CharSequence websocketOriginValue(URI wsURL) {, +        String scheme = wsURL.getScheme();, +        final String schemePrefix;, +        int port = wsURL.getPort();, +        final int defaultPort;, +        if (WebSocketScheme.WSS.name().contentEquals(scheme), +            || HttpScheme.HTTPS.name().contentEquals(scheme), +            || (scheme == null && port == WebSocketScheme.WSS.port())) {, +, +            schemePrefix = HTTPS_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WSS.port();, +        } else {, +            schemePrefix = HTTP_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WS.port();, +        }, +, +        // Convert uri-host to lower case (by RFC 6454, chapter 4 "Origin of a URI"), +        String host = wsURL.getHost().toLowerCase(Locale.US);, +, +        if (port != defaultPort && port != -1) {, +            return schemePrefix + NetUtil.toSocketAddressString(host, port);, +        return schemePrefix + host;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import java.util.Locale;, +    private static final String HTTP_SCHEME_PREFIX = HttpScheme.HTTP + "://";, +    private static final String HTTPS_SCHEME_PREFIX = HttpScheme.HTTPS + "://";, +, +    static CharSequence websocketOriginValue(URI wsURL) {, +        String scheme = wsURL.getScheme();, +        final String schemePrefix;, +        int port = wsURL.getPort();, +        final int defaultPort;, +        if (WebSocketScheme.WSS.name().contentEquals(scheme), +            || HttpScheme.HTTPS.name().contentEquals(scheme), +            || (scheme == null && port == WebSocketScheme.WSS.port())) {, +, +            schemePrefix = HTTPS_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WSS.port();, +        } else {, +            schemePrefix = HTTP_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WS.port();, +        }, +, +        // Convert uri-host to lower case (by RFC 6454, chapter 4 "Origin of a URI"), +        String host = wsURL.getHost().toLowerCase(Locale.US);, +, +        if (port != defaultPort && port != -1) {, +            return schemePrefix + NetUtil.toSocketAddressString(host, port);, +        return schemePrefix + host;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +               .add(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import java.util.Locale;, +    private static final String HTTP_SCHEME_PREFIX = HttpScheme.HTTP + "://";, +    private static final String HTTPS_SCHEME_PREFIX = HttpScheme.HTTPS + "://";, +, +    static CharSequence websocketOriginValue(URI wsURL) {, +        String scheme = wsURL.getScheme();, +        final String schemePrefix;, +        int port = wsURL.getPort();, +        final int defaultPort;, +        if (WebSocketScheme.WSS.name().contentEquals(scheme), +            || HttpScheme.HTTPS.name().contentEquals(scheme), +            || (scheme == null && port == WebSocketScheme.WSS.port())) {, +, +            schemePrefix = HTTPS_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WSS.port();, +        } else {, +            schemePrefix = HTTP_SCHEME_PREFIX;, +            defaultPort = WebSocketScheme.WS.port();, +        }, +, +        // Convert uri-host to lower case (by RFC 6454, chapter 4 "Origin of a URI"), +        String host = wsURL.getHost().toLowerCase(Locale.US);, +, +        if (port != defaultPort && port != -1) {, +            return schemePrefix + NetUtil.toSocketAddressString(host, port);, +        return schemePrefix + host;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +               .add(HttpHeaderNames.ORIGIN, websocketOriginValue(wsURL)), +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07.java, +               .add(HttpHeaderNames.SEC_WEBSOCKET_ORIGIN, websocketOriginValue(wsURL));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import java.util.Locale;, +    private static final String HTTP_SCHEME_PREFIX = HttpScheme.HTTP + "://";, +    private static final String HTTPS_SCHEME_PREFIX = HttpScheme.HTTPS + "://";, +, +    static CharSequence websocketOriginValue(URI wsURL) {, +        String scheme = wsURL.getScheme();, +        final String schemePrefix;, +        int port = wsURL.getPort();, +        final int defaultPort;, +        if (WebSocketScheme.WSS.name().contentEquals(scheme), +            || HttpScheme.HTTPS.name().contentEquals(scheme), +            || (scheme == null && port == WebSocketScheme.WSS.port())) {]