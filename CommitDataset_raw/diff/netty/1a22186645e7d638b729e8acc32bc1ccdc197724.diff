[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsConfig.java, +    private final boolean shortCurcuit;, +        shortCurcuit = builder.shortCurcuit;, +    /**, +     * Determines whether a CORS request should be rejected if it's invalid before being, +     * further processing., +     *, +     * CORS headers are set after a request is processed. This may not always be desired, +     * and this setting will check that the Origin is valid and if it is not valid no, +     * further processing will take place, and a error will be returned to the calling client., +     *, +     * @return {@code true} if a CORS request should short-curcuit upon receiving an invalid Origin header., +     */, +    public boolean isShortCurcuit() {, +        return shortCurcuit;, +    }, +, +        private boolean shortCurcuit;, +, +        /**, +         * Specifies that a CORS request should be rejected if it's invalid before being, +         * further processing., +         *, +         * CORS headers are set after a request is processed. This may not always be desired, +         * and this setting will check that the Origin is valid and if it is not valid no, +         * further processing will take place, and a error will be returned to the calling client., +         *, +         * @return {@link Builder} to support method chaining., +         */, +        public Builder shortCurcuit() {, +            shortCurcuit = true;, +            return this;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsConfig.java, +    private final boolean shortCurcuit;, +        shortCurcuit = builder.shortCurcuit;, +    /**, +     * Determines whether a CORS request should be rejected if it's invalid before being, +     * further processing., +     *, +     * CORS headers are set after a request is processed. This may not always be desired, +     * and this setting will check that the Origin is valid and if it is not valid no, +     * further processing will take place, and a error will be returned to the calling client., +     *, +     * @return {@code true} if a CORS request should short-curcuit upon receiving an invalid Origin header., +     */, +    public boolean isShortCurcuit() {, +        return shortCurcuit;, +    }, +, +        private boolean shortCurcuit;, +, +        /**, +         * Specifies that a CORS request should be rejected if it's invalid before being, +         * further processing., +         *, +         * CORS headers are set after a request is processed. This may not always be desired, +         * and this setting will check that the Origin is valid and if it is not valid no, +         * further processing will take place, and a error will be returned to the calling client., +         *, +         * @return {@link Builder} to support method chaining., +         */, +        public Builder shortCurcuit() {, +            shortCurcuit = true;, +            return this;, +        }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/cors/CorsHandler.java, +import io.netty.handler.codec.http.DefaultFullHttpResponse;, + * This handler can be configured using a {@link CorsConfig}, please, +            if (config.isShortCurcuit() && !validateOrigin()) {, +                forbidden(ctx, request);, +                return;, +            }, +        final HttpResponse response = new DefaultFullHttpResponse(request.getProtocolVersion(), OK);, +    private boolean validateOrigin() {, +        if (config.isAnyOriginSupported()) {, +            return true;, +        }, +, +        final String origin = request.headers().get(ORIGIN);, +        if (origin == null) {, +            // Not a CORS request so we cannot validate it. It may be a non CORS request., +            return true;, +        }, +, +        if ("null".equals(origin) && config.isNullOriginAllowed()) {, +            return true;, +        }, +, +        return config.origins().contains(origin);, +    }, +, +    private static void setVaryHeader(final HttpResponse response) {, +    private static void setAnyOrigin(final HttpResponse response) {, +    private static void setOrigin(final HttpResponse response, final String origin) {, +, +    private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest request) {, +        ctx.writeAndFlush(new DefaultFullHttpResponse(request.getProtocolVersion(), FORBIDDEN)), +                .addListener(ChannelFutureListener.CLOSE);, +    }]