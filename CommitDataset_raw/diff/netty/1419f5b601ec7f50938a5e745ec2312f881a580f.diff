[+++ b/example/pom.xml, +      <groupId>${conscrypt.groupId}</groupId>, +      <artifactId>${conscrypt.artifactId}</artifactId>, +      <classifier>${conscrypt.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/example/pom.xml, +      <groupId>${conscrypt.groupId}</groupId>, +      <artifactId>${conscrypt.artifactId}</artifactId>, +      <classifier>${conscrypt.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/handler/pom.xml, +      <groupId>${conscrypt.groupId}</groupId>, +      <artifactId>${conscrypt.artifactId}</artifactId>, +      <classifier>${conscrypt.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/example/pom.xml, +      <groupId>${conscrypt.groupId}</groupId>, +      <artifactId>${conscrypt.artifactId}</artifactId>, +      <classifier>${conscrypt.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/handler/pom.xml, +      <groupId>${conscrypt.groupId}</groupId>, +      <artifactId>${conscrypt.artifactId}</artifactId>, +      <classifier>${conscrypt.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/handler/src/main/java/io/netty/handler/ssl/ConscryptAlpnSslEngine.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import static io.netty.handler.ssl.SslUtils.toSSLHandshakeException;, +import static io.netty.util.internal.ObjectUtil.checkNotNull;, +import static java.lang.Math.min;, +, +import io.netty.handler.ssl.JdkApplicationProtocolNegotiator.ProtocolSelectionListener;, +import io.netty.handler.ssl.JdkApplicationProtocolNegotiator.ProtocolSelector;, +import java.lang.reflect.Method;, +import java.nio.ByteBuffer;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLEngineResult;, +import javax.net.ssl.SSLException;, +import org.conscrypt.Conscrypt;, +import org.conscrypt.HandshakeListener;, +, +/**, + * A {@link JdkSslEngine} that uses the Conscrypt provider or SSL with ALPN., + */, +abstract class ConscryptAlpnSslEngine extends JdkSslEngine {, +    private static final Class<?> ENGINES_CLASS = getEnginesClass();, +, +    /**, +     * Indicates whether or not conscrypt is available on the current system., +     */, +    static boolean isAvailable() {, +        return ENGINES_CLASS != null;, +    }, +, +    static boolean isEngineSupported(SSLEngine engine) {, +        return isAvailable() && isConscryptEngine(engine, ENGINES_CLASS);, +    }, +, +    static ConscryptAlpnSslEngine newClientEngine(SSLEngine engine,, +            JdkApplicationProtocolNegotiator applicationNegotiator) {, +        return new ClientEngine(engine, applicationNegotiator);, +    }, +, +    static ConscryptAlpnSslEngine newServerEngine(SSLEngine engine,, +            JdkApplicationProtocolNegotiator applicationNegotiator) {, +        return new ServerEngine(engine, applicationNegotiator);, +    }, +, +    private ConscryptAlpnSslEngine(SSLEngine engine, List<String> protocols) {, +        super(engine);, +, +        // Set the list of supported ALPN protocols on the engine., +        Conscrypt.Engines.setAlpnProtocols(engine, protocols.toArray(new String[protocols.size()]));, +    }, +, +    /**]