[+++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import org.jboss.netty.util.internal.QueueFactory;, +    final Queue<MessageEvent> writeBuffer = QueueFactory.createQueue(MessageEvent.class);, +++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java, +import org.jboss.netty.util.internal.QueueFactory;, +    final Queue<MessageEvent> writeBuffer = QueueFactory.createQueue(MessageEvent.class);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/AbstractWriteRequestQueue.java, +/*, + * Copyright 2011 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.channel.socket.nio;, +, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.TimeUnit;, +, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.util.internal.QueueFactory;, +, +/**, + * , + * , + * , + *, + * @author <a href="http://www.jboss.org/netty/">The Netty Project</a>, + * @author <a href="http://www.murkycloud.com/">Norman Maurer</a>, + *, + */, +abstract class AbstractWriteRequestQueue implements BlockingQueue<MessageEvent>{, +, +    protected final BlockingQueue<MessageEvent> queue;, +, +    public AbstractWriteRequestQueue() {, +        this.queue = QueueFactory.createQueue(MessageEvent.class);, +    }, +, +    @Override, +    public MessageEvent remove() {, +        return queue.remove();, +    }, +, +    @Override, +    public MessageEvent element() {, +        return queue.element();, +    }, +, +    @Override, +    public MessageEvent peek() {, +        return queue.peek();, +    }, +, +    @Override, +    public int size() {, +        return queue.size();, +    }, +, +    @Override, +    public boolean isEmpty() {, +        return queue.isEmpty();, +    }, +, +    @Override, +    public Iterator<MessageEvent> iterator() {, +        return queue.iterator();, +    }, +, +    @Override, +    public Object[] toArray() {, +        return queue.toArray();, +    }, +, +    @Override, +    public <T> T[] toArray(T[] a) {, +        return queue.toArray(a);, +    }, +, +    @Override, +    public boolean containsAll(Collection<?> c) {, +        return queue.containsAll(c);, +    }, +, +    @Override, +    public boolean addAll(Collection<? extends MessageEvent> c) {, +        return queue.addAll(c);, +    }, +, +    @Override]