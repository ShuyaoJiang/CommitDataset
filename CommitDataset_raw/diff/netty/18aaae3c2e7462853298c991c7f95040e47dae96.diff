[+++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    protected boolean inFlushNow;, +        public void flushNow() {, +            boolean handleFlush = true;, +                        handleFlush = doFlushByteBuffer(out);, +                if (handleFlush) {, +                }, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +    protected final void notifyFlushFutures() {, +    protected final void notifyFlushFutures(Throwable cause) {, +++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    protected boolean inFlushNow;, +        public void flushNow() {, +            boolean handleFlush = true;, +                        handleFlush = doFlushByteBuffer(out);, +                if (handleFlush) {, +                }, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +    protected final void notifyFlushFutures() {, +    protected final void notifyFlushFutures(Throwable cause) {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    protected boolean inFlushNow;, +        public void flushNow() {, +            boolean handleFlush = true;, +                        handleFlush = doFlushByteBuffer(out);, +                if (handleFlush) {, +                }, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +    protected final void notifyFlushFutures() {, +    protected final void notifyFlushFutures(Throwable cause) {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedByteChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +        return true;, +++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    protected boolean inFlushNow;, +        public void flushNow() {, +            boolean handleFlush = true;, +                        handleFlush = doFlushByteBuffer(out);, +                if (handleFlush) {, +                }, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +    protected final void notifyFlushFutures() {, +    protected final void notifyFlushFutures(Throwable cause) {, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedByteChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +        return true;, +++ b/transport/src/main/java/io/netty/channel/socket/nio/AbstractNioByteChannel.java, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {, +            return true;, +        return true;, +++ b/pom.xml, +            <!-- Used for NIO2 -->, +            <ignore>java.nio.channels.AsynchronousChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousServerSocketChannel</ignore>, +            <ignore>java.nio.channels.AsynchronousChannelGroup</ignore>, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    protected boolean inFlushNow;, +        public void flushNow() {, +            boolean handleFlush = true;, +                        handleFlush = doFlushByteBuffer(out);, +                if (handleFlush) {, +                }, +    protected boolean doFlushByteBuffer(ByteBuf buf) throws Exception {]