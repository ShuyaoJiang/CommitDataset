[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSctpTest.java, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSctpTest.java, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s)", testName.getMethodName(), ++ i, COMBO.size(), sb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSctpTest.java, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s)", testName.getMethodName(), ++ i, COMBO.size(), sb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSctpTest.java, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s)", testName.getMethodName(), ++ i, COMBO.size(), sb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +import io.netty.channel.socket.nio.NioSctpServerChannel;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import io.netty.channel.socket.nio.NioSocketChannel;, +, +                    @Override, +                    public String toString() {, +                        return NioDatagramChannel.class.getSimpleName() + ".class";, +                    }, +                return new ServerBootstrap().group(parentGroup, childGroup).channel(AioServerSocketChannel.class);, +                return new Bootstrap().group(loop).channel(AioSocketChannel.class);, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractDatagramTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSctpTest.java, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractServerSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s)", testName.getMethodName(), ++ i, COMBO.size(), sb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/AbstractSocketTest.java, +import org.junit.Rule;, +import org.junit.rules.TestName;, +                    "Running: %s %d of %d (%s + %s)", testName.getMethodName(), ++ i, COMBO.size(), sb, cb));, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketTestPermutation.java, +import io.netty.channel.socket.nio.NioSctpServerChannel;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import io.netty.channel.socket.nio.NioSocketChannel;, +, +                    @Override, +                    public String toString() {, +                        return NioDatagramChannel.class.getSimpleName() + ".class";, +                    }, +                return new ServerBootstrap().group(parentGroup, childGroup).channel(AioServerSocketChannel.class);, +                return new Bootstrap().group(loop).channel(AioSocketChannel.class);, +++ b/transport/src/main/java/io/netty/bootstrap/AbstractBootstrap.java, +    public String toString() {, +        StringBuilder buf = new StringBuilder();, +        buf.append(getClass().getSimpleName());, +        buf.append('(');, +        if (group != null) {, +            buf.append("group: ");, +            buf.append(group.getClass().getSimpleName());, +            buf.append(", ");, +        }, +        if (factory != null) {, +            buf.append("factory: ");, +            buf.append(factory);, +            buf.append(", ");, +        }, +        if (localAddress != null) {]