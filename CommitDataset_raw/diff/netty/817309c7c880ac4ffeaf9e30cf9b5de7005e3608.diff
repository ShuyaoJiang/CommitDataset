[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +    private volatile long handshakeTimeoutMillis = 10000;, +    private volatile long closeNotifyTimeoutMillis = 3000;, +, +    public long getHandshakeTimeoutMillis() {, +        return handshakeTimeoutMillis;, +    }, +, +    public void setHandshakeTimeout(long handshakeTimeout, TimeUnit unit) {, +        if (unit == null) {, +            throw new NullPointerException("unit");, +        }, +, +        setHandshakeTimeoutMillis(unit.toMillis(handshakeTimeout));, +    }, +, +    public void setHandshakeTimeoutMillis(long handshakeTimeoutMillis) {, +        if (handshakeTimeoutMillis < 0) {, +            throw new IllegalArgumentException(, +                    "handshakeTimeoutMillis: " + handshakeTimeoutMillis + " (expected: >= 0)");, +        }, +        this.handshakeTimeoutMillis = handshakeTimeoutMillis;, +    }, +, +    public long getCloseNotifyTimeoutMillis() {, +        return handshakeTimeoutMillis;, +    }, +, +    public void setCloseNotifyTimeout(long closeNotifyTimeout, TimeUnit unit) {, +        if (unit == null) {, +            throw new NullPointerException("unit");, +        }, +, +        setCloseNotifyTimeoutMillis(unit.toMillis(closeNotifyTimeout));, +    }, +, +    public void setCloseNotifyTimeoutMillis(long closeNotifyTimeoutMillis) {, +        if (closeNotifyTimeoutMillis < 0) {, +            throw new IllegalArgumentException(, +                    "closeNotifyTimeoutMillis: " + closeNotifyTimeoutMillis + " (expected: >= 0)");, +        }, +        this.closeNotifyTimeoutMillis = closeNotifyTimeoutMillis;, +    }, +, +        }, handshakeTimeoutMillis, TimeUnit.MILLISECONDS);, +    private void safeClose(, +        }, closeNotifyTimeoutMillis, TimeUnit.MILLISECONDS);]