[+++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/pom.xml, +        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/pom.xml, +        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +#include "netty_unix_buffer.h", +    if (netty_unix_buffer_JNI_OnLoad(env, packagePrefix) == JNI_ERR) {, +        return JNI_ERR;, +    }, +    netty_unix_buffer_JNI_OnUnLoad(env);, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/pom.xml, +        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +#include "netty_unix_buffer.h", +    if (netty_unix_buffer_JNI_OnLoad(env, packagePrefix) == JNI_ERR) {, +        return JNI_ERR;, +    }, +    netty_unix_buffer_JNI_OnUnLoad(env);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/pom.xml, +        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +#include "netty_unix_buffer.h", +    if (netty_unix_buffer_JNI_OnLoad(env, packagePrefix) == JNI_ERR) {, +        return JNI_ERR;, +    }, +    netty_unix_buffer_JNI_OnUnLoad(env);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Epoll.java, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledDirectByteBuf.java, +        setByteBuffer(allocateDirect(initialCapacity));, +++ b/buffer/src/test/java/io/netty/buffer/FixedCompositeByteBufTest.java, +    @Test, +        } catch (UnsupportedOperationException expected) {, +            // expected, +++ b/pom.xml, +        <argLine.noUnsafe>-Dio.netty.noUnsafe=true</argLine.noUnsafe>, +++ b/transport-native-epoll/src/main/c/netty_epoll_native.c, +#include "netty_unix_buffer.h", +    if (netty_unix_buffer_JNI_OnLoad(env, packagePrefix) == JNI_ERR) {, +        return JNI_ERR;, +    }, +    netty_unix_buffer_JNI_OnUnLoad(env);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Epoll.java, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventArray.java, +import io.netty.channel.unix.Buffer;, +import java.nio.ByteBuffer;, +, +    private ByteBuffer memory;, +        memory = Buffer.allocateDirectWithNativeOrder(calculateBufferCapacity(length));, +        memoryAddress = Buffer.memoryAddress(memory);, +        // There is no need to preserve what was in the memory before., +        ByteBuffer buffer = Buffer.allocateDirectWithNativeOrder(calculateBufferCapacity(length));, +        Buffer.free(memory);, +        memory = buffer;, +        memoryAddress = Buffer.memoryAddress(buffer);, +        Buffer.free(memory);, +        memoryAddress = 0;, +        return getInt(index, 0);, +        return getInt(index, EPOLL_DATA_OFFSET);, +    }, +, +    private int getInt(int index, int offset) {, +        if (PlatformDependent.hasUnsafe()) {, +            return PlatformDependent.getInt(memoryAddress + index * EPOLL_EVENT_SIZE + offset);, +        }, +        return memory.getInt(index * EPOLL_EVENT_SIZE + offset);]