[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headersSent;, +        public Http2Stream headersSent() {, +            headersSent = true;, +            return this;, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            return headersSent;, +        }, +, +        @Override, +, +        @Override, +        public Http2Stream headersSent() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            throw new UnsupportedOperationException();, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headersSent;, +        public Http2Stream headersSent() {, +            headersSent = true;, +            return this;, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            return headersSent;, +        }, +, +        @Override, +, +        @Override, +        public Http2Stream headersSent() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            throw new UnsupportedOperationException();, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                ChannelFuture future = frameWriter.writeHeaders(ctx, streamId, headers, streamDependency,, +                                                                weight, exclusive, padding, endOfStream, promise);, +                // Synchronously set the headersSent flag to ensure that we do not subsequently write, +                // other headers containing pseudo-header fields., +                stream.headersSent();, +, +                return future;, +                stream.headersSent();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headersSent;, +        public Http2Stream headersSent() {, +            headersSent = true;, +            return this;, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            return headersSent;, +        }, +, +        @Override, +, +        @Override, +        public Http2Stream headersSent() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            throw new UnsupportedOperationException();, +        }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java, +                ChannelFuture future = frameWriter.writeHeaders(ctx, streamId, headers, streamDependency,, +                                                                weight, exclusive, padding, endOfStream, promise);, +                // Synchronously set the headersSent flag to ensure that we do not subsequently write, +                // other headers containing pseudo-header fields., +                stream.headersSent();, +, +                return future;, +                stream.headersSent();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +            headerListSizeExceeded(streamId, headersDecoder.configuration().headerTable().maxHeaderListSize(), true);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +        private boolean headersSent;, +        public Http2Stream headersSent() {, +            headersSent = true;, +            return this;, +        }, +, +        @Override, +        public boolean isHeadersSent() {, +            return headersSent;, +        }]