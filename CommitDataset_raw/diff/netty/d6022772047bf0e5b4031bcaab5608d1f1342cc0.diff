[+++ b/transport/src/main/java/io/netty/channel/ChannelOutboundBuffer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +            Throwable err = promise.cause();, +            if (err == null) {, +                logger.warn("Failed to mark a promise as success because it has succeeded already: {}", promise);, +            } else {, +                logger.warn(, +                        "Failed to mark a promise as success because it has failed already: {}, unnotified cause {}",, +                        promise, stackTraceToString(err));, +            }, +            Throwable err = promise.cause();, +            if (err == null) {, +                logger.warn("Failed to mark a promise as failure because it has succeeded already: {}", promise, cause);, +            } else {, +                logger.warn(, +                        "Failed to mark a promise as failure because it hass failed already: {}, unnotified cause {}",, +                        promise, stackTraceToString(err), cause);, +            }, +        }, +    }, +, +    private static String stackTraceToString(Throwable cause) {, +        ByteArrayOutputStream out = new ByteArrayOutputStream();, +        PrintStream pout = new PrintStream(out);, +        cause.printStackTrace(pout);, +        pout.flush();, +        try {, +            return new String(out.toByteArray());, +        } finally {, +            try {, +                out.close();, +            } catch (IOException ignore) {, +                // ignore as should never happen, +            }]