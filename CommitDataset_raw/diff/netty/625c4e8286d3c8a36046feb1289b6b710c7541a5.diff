[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +            PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +            PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +        final PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +            PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +        final PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/common/src/main/java/io/netty/util/concurrent/PromiseAggregator.java, + * @deprecated Use {@link PromiseCombiner#PromiseCombiner(EventExecutor)}., +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +            PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +        final PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/common/src/main/java/io/netty/util/concurrent/PromiseAggregator.java, + * @deprecated Use {@link PromiseCombiner#PromiseCombiner(EventExecutor)}., +++ b/common/src/main/java/io/netty/util/concurrent/PromiseCombiner.java, + *, + * <p>This implementation is <strong>NOT</strong> thread-safe and all methods must be called, + * from the {@link EventExecutor} thread.</p>, +        public void operationComplete(final Future<?> future) {, +            if (executor.inEventLoop()) {, +                operationComplete0(future);, +            } else {, +                executor.execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        operationComplete0(future);, +                    }, +                });, +            }, +        }, +, +        private void operationComplete0(Future<?> future) {, +            assert executor.inEventLoop();, +            if (doneCount == expectedCount && aggregatePromise != null) {, +    private final EventExecutor executor;, +, +    /**, +     * Deprecated use {@link PromiseCombiner#PromiseCombiner(EventExecutor)}., +     */, +    @Deprecated, +    public PromiseCombiner() {, +        this(ImmediateEventExecutor.INSTANCE);, +    }, +, +    /**, +     * The {@link EventExecutor} to use for notifications. You must call {@link #add(Future)}, {@link #addAll(Future[])}, +     * and {@link #finish(Promise)} from within the {@link EventExecutor} thread., +     *, +     * @param executor the {@link EventExecutor} to use for notifications., +     */, +    public PromiseCombiner(EventExecutor executor) {, +        this.executor = ObjectUtil.checkNotNull(executor, "executor");, +    }, +, +        checkInEventLoop();, +        checkInEventLoop();, +        if (this.aggregatePromise != null) {, +    private void checkInEventLoop() {, +        if (!executor.inEventLoop()) {, +            throw new IllegalStateException("Must be called from EventExecutor thread");, +        }, +    }, +, +        if (aggregatePromise != null) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/CompressorHttp2ConnectionEncoder.java, +            PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/codec/src/main/java/io/netty/handler/codec/MessageToMessageEncoder.java, +        final PromiseCombiner combiner = new PromiseCombiner(ctx.executor());, +++ b/common/src/main/java/io/netty/util/concurrent/PromiseAggregator.java, + * @deprecated Use {@link PromiseCombiner#PromiseCombiner(EventExecutor)}., +++ b/common/src/main/java/io/netty/util/concurrent/PromiseCombiner.java, + *, + * <p>This implementation is <strong>NOT</strong> thread-safe and all methods must be called, + * from the {@link EventExecutor} thread.</p>, +        public void operationComplete(final Future<?> future) {, +            if (executor.inEventLoop()) {, +                operationComplete0(future);, +            } else {, +                executor.execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        operationComplete0(future);, +                    }, +                });, +            }, +        }, +, +        private void operationComplete0(Future<?> future) {, +            assert executor.inEventLoop();, +            if (doneCount == expectedCount && aggregatePromise != null) {, +    private final EventExecutor executor;, +, +    /**, +     * Deprecated use {@link PromiseCombiner#PromiseCombiner(EventExecutor)}., +     */, +    @Deprecated]