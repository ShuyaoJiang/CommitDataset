[+++ b/handler/src/main/java/io/netty/handler/ssl/ExtendedOpenSslSession.java, +    public String getProtocol() {, +++ b/handler/src/main/java/io/netty/handler/ssl/ExtendedOpenSslSession.java, +    public String getProtocol() {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import static io.netty.handler.ssl.SslUtils.*;, +, +            addIfSupported(availableJavaCipherSuites, defaultCiphers, TLSV13_CIPHER_SUITES);, +, +            if (tlsv13Supported && doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_3, SSL.SSL_OP_NO_TLSv1_3)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/ExtendedOpenSslSession.java, +    public String getProtocol() {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +import static io.netty.handler.ssl.SslUtils.*;, +, +            addIfSupported(availableJavaCipherSuites, defaultCiphers, TLSV13_CIPHER_SUITES);, +, +            if (tlsv13Supported && doesSupportProtocol(SSL.SSL_PROTOCOL_TLSV1_3, SSL.SSL_OP_NO_TLSv1_3)) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslTlsv13X509ExtendedTrustManager.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.util.internal.EmptyArrays;, +import io.netty.util.internal.PlatformDependent;, +, +import javax.net.ssl.SSLEngine;, +import javax.net.ssl.SSLEngineResult;, +import javax.net.ssl.SSLEngineResult.HandshakeStatus;, +import javax.net.ssl.SSLException;, +import javax.net.ssl.SSLPeerUnverifiedException;, +import javax.net.ssl.SSLSession;, +import javax.net.ssl.SSLSessionContext;, +import javax.net.ssl.X509ExtendedTrustManager;, +import java.net.Socket;, +import java.nio.ByteBuffer;, +import java.security.Principal;, +import java.security.cert.Certificate;, +import java.security.cert.CertificateException;, +import java.security.cert.X509Certificate;, +import java.util.List;, +, +/**, + * Provide a way to use {@code TLSv1.3} with Java versions prior to 11 by adding a, + * <a href="http://mail.openjdk.java.net/pipermail/security-dev/2018-September/018242.html>workaround</a> for the, + * default {@link X509ExtendedTrustManager} implementations provided by the JDK that can not handle a protocol version, + * of {@code TLSv1.3}., + */, +final class OpenSslTlsv13X509ExtendedTrustManager extends X509ExtendedTrustManager {, +, +    private final X509ExtendedTrustManager tm;, +, +    private OpenSslTlsv13X509ExtendedTrustManager(X509ExtendedTrustManager tm) {, +        this.tm = tm;, +    }, +, +    static X509ExtendedTrustManager wrap(X509ExtendedTrustManager tm, boolean client) {, +        if (PlatformDependent.javaVersion() < 11) {, +            X509Certificate[] certs = new X509Certificate[1];, +            try {, +                if (client) {, +                    tm.checkServerTrusted(certs, "RSA", new DummySSLEngine(true));, +                } else {, +                    tm.checkClientTrusted(certs, "RSA", new DummySSLEngine(false));, +                }, +            } catch (IllegalArgumentException e) {, +                // If this happened we failed because our protocol version was not known by the implementation., +                // See http://mail.openjdk.java.net/pipermail/security-dev/2018-September/018242.html., +                return new OpenSslTlsv13X509ExtendedTrustManager(tm);, +            } catch (Throwable ignore) {, +                // Just assume we do not need to wrap., +            }, +        }, +        return tm;, +    }, +, +    @Override, +    public void checkClientTrusted(X509Certificate[] x509Certificates, String s, Socket socket), +            throws CertificateException {, +        tm.checkClientTrusted(x509Certificates, s, socket);, +    }, +, +    @Override, +    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, Socket socket), +            throws CertificateException {, +        tm.checkServerTrusted(x509Certificates, s, socket);, +    }]