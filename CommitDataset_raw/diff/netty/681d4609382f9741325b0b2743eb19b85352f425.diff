[+++ b/NOTICE.txt, +This product contains a modified portion of 'Apache Harmony', an open source, +Java SE, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.harmony.txt (Apache License 2.0), +  * HOMEPAGE:, +    * http://archive.apache.org/dist/harmony/, +, +, +++ b/NOTICE.txt, +This product contains a modified portion of 'Apache Harmony', an open source, +Java SE, which can be obtained at:, +, +  * LICENSE:, +    * license/LICENSE.harmony.txt (Apache License 2.0), +  * HOMEPAGE:, +    * http://archive.apache.org/dist/harmony/, +, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +import io.netty.handler.codec.AsciiString;, +import io.netty.handler.codec.DefaultTextHeaders;, +import io.netty.handler.codec.TextHeaders;, +    private final TextHeaders headers;, +        headers = validate? new ValidatingTextHeaders() : new NonValidatingTextHeaders();, +    DefaultHttpHeaders(TextHeaders headers) {, +        this.headers = headers;, +            this.headers.add(((DefaultHttpHeaders) headers).headers);, +            this.headers.set(((DefaultHttpHeaders) headers).headers);, +    public HttpHeaders add(String name, Object value) {, +        headers.add(name, value);, +        return this;, +    public HttpHeaders add(CharSequence name, Object value) {, +        headers.add(name, value);, +        headers.add(name, values);, +        return this;, +        headers.add(name, values);, +    public HttpHeaders remove(String name) {, +        headers.remove(name);, +        return this;, +    public HttpHeaders remove(CharSequence name) {, +        headers.remove(name);, +        return this;, +    @Override, +    public HttpHeaders set(String name, Object value) {, +        headers.set(name, value);, +        return this;, +    @Override, +    public HttpHeaders set(CharSequence name, Object value) {, +        headers.set(name, value);, +        return this;, +    }, +, +    @Override, +    public HttpHeaders set(String name, Iterable<?> values) {, +        headers.set(name, values);, +        return this;, +    }, +, +    @Override, +    public HttpHeaders set(CharSequence name, Iterable<?> values) {, +        headers.set(name, values);, +        headers.clear();, +    public String get(String name) {, +        return headers.get(name);, +    public String get(CharSequence name) {, +        return headers.get(name);, +    public List<String> getAll(String name) {, +        return headers.getAll(name);, +    public List<String> getAll(CharSequence name) {, +        return headers.getAll(name);, +        return headers.entries();, +        return headers.iterator();, +        return headers.contains(name);, +        return headers.contains(name);, +        return headers.isEmpty();, +    public boolean contains(String name, String value, boolean ignoreCase) {, +        return headers.contains(name, value, ignoreCase);, +    public boolean contains(CharSequence name, CharSequence value, boolean ignoreCase) {, +        return headers.contains(name, value, ignoreCase);, +        return headers.names();, +        headers.forEachEntry(new HttpHeadersEncoder(buf));, +    static class NonValidatingTextHeaders extends DefaultTextHeaders {, +        protected CharSequence convertValue(Object value) {, +, +            CharSequence seq;, +            if (value instanceof CharSequence) {, +                seq = (CharSequence) value;, +            } else if (value instanceof Number) {, +                seq = value.toString();, +            } else if (value instanceof Date) {, +                seq = HttpHeaderDateFormat.get().format((Date) value);, +            } else if (value instanceof Calendar) {, +                seq = HttpHeaderDateFormat.get().format(((Calendar) value).getTime());, +            } else {, +                seq = value.toString();, +            }, +, +            return seq;]