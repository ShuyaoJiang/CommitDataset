[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void deactivate(Http2Stream stream) {, +      deactivateInternal((DefaultStream) stream);, +    }, +, +    @Override, +    private void activateInternal(DefaultStream stream) {, +    private void deactivateInternal(DefaultStream stream) {, +        if (activeStreams.remove(stream)) {, +            // Update the number of active streams initiated by the endpoint., +            stream.createdBy().numActiveStreams--;, +, +            // Notify the listeners., +            for (Listener listener : listeners) {, +                listener.streamInactive(stream);, +            }, +, +            // Mark this stream for removal., +            removalPolicy.markForRemoval(stream);, +        }, +    }, +, +            activateInternal(this);, +            deactivateInternal(this);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void deactivate(Http2Stream stream) {, +      deactivateInternal((DefaultStream) stream);, +    }, +, +    @Override, +    private void activateInternal(DefaultStream stream) {, +    private void deactivateInternal(DefaultStream stream) {, +        if (activeStreams.remove(stream)) {, +            // Update the number of active streams initiated by the endpoint., +            stream.createdBy().numActiveStreams--;, +, +            // Notify the listeners., +            for (Listener listener : listeners) {, +                listener.streamInactive(stream);, +            }, +, +            // Mark this stream for removal., +            removalPolicy.markForRemoval(stream);, +        }, +    }, +, +            activateInternal(this);, +            deactivateInternal(this);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, + * Provides the default implementation for processing inbound frame events and delegates to a, + * {@link Http2FrameListener}, + * This interface enforces inbound flow control functionality through, + * {@link Http2LocalFlowController}, +                    // Always fail the stream if we've more data after the remote endpoint half-closed., +                    error = streamError(stream.id(), STREAM_CLOSED, "Stream %d in unexpected state: %s",, +                        stream.id(), stream.state());, +                    break;, +                if (bytesToReturn > 0) {, +            switch (parentStream.state()) {, +              case OPEN:, +              case HALF_CLOSED_LOCAL:, +                  // Allowed to receive push promise in these states., +                  break;, +              default:, +                  // Connection error., +                  throw connectionError(PROTOCOL_ERROR,, +                      "Stream %d in unexpected state for receiving push promise: %s",, +                      parentStream.id(), parentStream.state());, +            }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +    public void deactivate(Http2Stream stream) {, +      deactivateInternal((DefaultStream) stream);, +    }, +, +    @Override, +    private void activateInternal(DefaultStream stream) {, +    private void deactivateInternal(DefaultStream stream) {, +        if (activeStreams.remove(stream)) {, +            // Update the number of active streams initiated by the endpoint., +            stream.createdBy().numActiveStreams--;, +, +            // Notify the listeners., +            for (Listener listener : listeners) {, +                listener.streamInactive(stream);, +            }, +, +            // Mark this stream for removal., +            removalPolicy.markForRemoval(stream);, +        }, +    }, +, +            activateInternal(this);, +            deactivateInternal(this);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, + * Provides the default implementation for processing inbound frame events and delegates to a, + * {@link Http2FrameListener}, + * This interface enforces inbound flow control functionality through, + * {@link Http2LocalFlowController}, +                    // Always fail the stream if we've more data after the remote endpoint half-closed.]