[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            if (name == null || name.length() == 0) {, +                throw new IllegalArgumentException("empty headers are not allowed [" + name + "]");, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            if (name == null || name.length() == 0) {, +                throw new IllegalArgumentException("empty headers are not allowed [" + name + "]");, +            }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;, +    @Test(expected = IllegalArgumentException.class), +    public void nullHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(null, "foo");, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void emtpyHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(StringUtil.EMPTY_STRING, "foo");, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            if (name == null || name.length() == 0) {, +                throw new IllegalArgumentException("empty headers are not allowed [" + name + "]");, +            }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;, +    @Test(expected = IllegalArgumentException.class), +    public void nullHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(null, "foo");, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void emtpyHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(StringUtil.EMPTY_STRING, "foo");, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +            if (name == null || name.length() == 0) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR,, +                        "empty headers are not allowed [%s]", name));, +            }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            if (name == null || name.length() == 0) {, +                throw new IllegalArgumentException("empty headers are not allowed [" + name + "]");, +            }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;, +    @Test(expected = IllegalArgumentException.class), +    public void nullHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(null, "foo");, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void emtpyHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(StringUtil.EMPTY_STRING, "foo");, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +            if (name == null || name.length() == 0) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR,, +                        "empty headers are not allowed [%s]", name));, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Decoder.java, +import io.netty.util.internal.EmptyArrays;, +import static io.netty.util.internal.EmptyArrays.EMPTY_BYTES;, +, +            new IOException("HPACK - decompression failure");, +            new IOException("HPACK - illegal index value");, +            new IOException("HPACK - invalid max dynamic table size");, +            new IOException("HPACK - max dynamic table size change required");, +    static {, +        DECOMPRESSION_EXCEPTION.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +        ILLEGAL_INDEX_VALUE.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +        INVALID_MAX_DYNAMIC_TABLE_SIZE.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +        MAX_DYNAMIC_TABLE_SIZE_CHANGE_REQUIRED.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE);, +    }, +                                name = EMPTY_BYTES;, +                                name = EMPTY_BYTES;, +                            name = EMPTY_BYTES;, +                            name = EMPTY_BYTES;, +                            insertHeader(headerListener, name, EMPTY_BYTES, indexType);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java, +            if (name == null || name.length() == 0) {, +                throw new IllegalArgumentException("empty headers are not allowed [" + name + "]");, +            }, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import io.netty.util.internal.StringUtil;, +    @Test(expected = IllegalArgumentException.class), +    public void nullHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(null, "foo");, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void emtpyHeaderNameNotAllowed() {, +        new DefaultHttpHeaders().add(StringUtil.EMPTY_STRING, "foo");, +    }, +, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Headers.java, +            if (name == null || name.length() == 0) {, +                PlatformDependent.throwException(connectionError(PROTOCOL_ERROR,]