[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + *                           {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *                             {@link Void} state) {, + *        the state type which is usually an {@link Enum}; use {@link Void} if state management is, + *        unused, +public abstract class ReplayingDecoder<O, S> extends ByteToMessageDecoder<O> {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + *                           {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *                             {@link Void} state) {, + *        the state type which is usually an {@link Enum}; use {@link Void} if state management is, + *        unused, +public abstract class ReplayingDecoder<O, S> extends ByteToMessageDecoder<O> {, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/CompatibleMarshallingDecoder.java, +public class CompatibleMarshallingDecoder extends ReplayingDecoder<Object, Void> {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + *                           {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *                             {@link Void} state) {, + *        the state type which is usually an {@link Enum}; use {@link Void} if state management is, + *        unused, +public abstract class ReplayingDecoder<O, S> extends ByteToMessageDecoder<O> {, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/CompatibleMarshallingDecoder.java, +public class CompatibleMarshallingDecoder extends ReplayingDecoder<Object, Void> {, +++ b/codec/src/test/java/io/netty/handler/codec/ReplayingDecoderTest.java, +    private static final class LineDecoder extends ReplayingDecoder<ByteBuf, Void> {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + *                           {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *                             {@link Void} state) {, + *        the state type which is usually an {@link Enum}; use {@link Void} if state management is, + *        unused, +public abstract class ReplayingDecoder<O, S> extends ByteToMessageDecoder<O> {, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/CompatibleMarshallingDecoder.java, +public class CompatibleMarshallingDecoder extends ReplayingDecoder<Object, Void> {, +++ b/codec/src/test/java/io/netty/handler/codec/ReplayingDecoderTest.java, +    private static final class LineDecoder extends ReplayingDecoder<ByteBuf, Void> {, +++ /dev/null, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +public class WebSocket00FrameDecoder extends ReplayingDecoder<WebSocketFrame, Void> {, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {, + *                           {@link Void} state) throws Exception {, + * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {, + *                             {@link Void} state) {, + *        the state type which is usually an {@link Enum}; use {@link Void} if state management is, + *        unused, +public abstract class ReplayingDecoder<O, S> extends ByteToMessageDecoder<O> {, +++ b/codec/src/main/java/io/netty/handler/codec/marshalling/CompatibleMarshallingDecoder.java, +public class CompatibleMarshallingDecoder extends ReplayingDecoder<Object, Void> {, +++ b/codec/src/test/java/io/netty/handler/codec/ReplayingDecoderTest.java, +    private static final class LineDecoder extends ReplayingDecoder<ByteBuf, Void> {, +++ /dev/null, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +        if (flushing) {, +        if (buf.readable()) {, +        } else {, +            notifyFlushFutures();, +            flushing = false;, +            byteBuf.discardReadBytes();]