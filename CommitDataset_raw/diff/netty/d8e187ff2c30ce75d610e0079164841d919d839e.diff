[+++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/SocketTest.java, +        // IPTOS_THROUGHPUT, +        final int value = 0x08;, +++ b/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/SocketTest.java, +        // IPTOS_THROUGHPUT, +        final int value = 0x08;, +++ b/transport-native-unix-common/src/main/c/netty_unix_socket.c, +    if (socketType == AF_INET6) {, +        // This call will put an exception on the stack to be processed once the JNI calls completes if, +        // setsockopt failed and return a negative value., +        int rc = netty_unix_socket_setOption(env, fd, IPPROTO_IPV6, IPV6_TCLASS, &optval, sizeof(optval));, +        if (rc >= 0) {, +            // Previous call successful now try to set also for ipv4, +            if (netty_unix_socket_setOption0(fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval)) == -1) {, +                if (errno != ENOPROTOOPT) {, +                    // throw exception, +                    netty_unix_socket_setOptionHandleError(env, errno);, +                }, +    } else {, +        netty_unix_socket_setOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval));, +    }, +}, +    if (socketType == AF_INET6) {, +            if (errno == ENOPROTOOPT) {, +                if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval)) == -1) {, +                    return -1;, +                }, +            } else {, +    } else {, +         if (netty_unix_socket_getOption(env, fd, IPPROTO_IP, IP_TOS, &optval, sizeof(optval)) == -1) {, +            return -1;, +         }, +    }]