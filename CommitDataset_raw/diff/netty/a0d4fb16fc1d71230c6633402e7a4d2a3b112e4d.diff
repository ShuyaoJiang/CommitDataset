[+++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks) {, +        super(parent, executor, true, maxPendingTasks);, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks) {, +        super(parent, executor, true, maxPendingTasks);, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, DefaultEventExecutor.DEFAULT_MAX_PENDING_TASKS);, +    }, +, +    /**, +     * Create a new instance., +     *, +     * @param nThreads          the number of threads that will be used by this instance., +     * @param threadFactory     the ThreadFactory to use, or {@code null} if the default should be used., +     * @param maxPendingTasks   the maximum number of pending tasks before new tasks will be rejected., +     */, +    public DefaultEventExecutorGroup(int nThreads, ThreadFactory threadFactory, int maxPendingTasks) {, +        super(nThreads, threadFactory, maxPendingTasks);, +        return new DefaultEventExecutor(this, executor, (Integer) args[0]);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks) {, +        super(parent, executor, true, maxPendingTasks);, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, DefaultEventExecutor.DEFAULT_MAX_PENDING_TASKS);, +    }, +, +    /**, +     * Create a new instance., +     *, +     * @param nThreads          the number of threads that will be used by this instance., +     * @param threadFactory     the ThreadFactory to use, or {@code null} if the default should be used., +     * @param maxPendingTasks   the maximum number of pending tasks before new tasks will be rejected., +     */, +    public DefaultEventExecutorGroup(int nThreads, ThreadFactory threadFactory, int maxPendingTasks) {, +        super(nThreads, threadFactory, maxPendingTasks);, +        return new DefaultEventExecutor(this, executor, (Integer) args[0]);, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.SystemPropertyUtil;, +    static final int DEFAULT_MAX_PENDING_TASKS = Math.max(16,, +            SystemPropertyUtil.getInt("io.netty.eventexecutor.maxPendingTasks", Integer.MAX_VALUE));, +, +    @SuppressWarnings("unused"), +    private final int maxPendingTasks;, +     * @param threadFactory     the {@link ThreadFactory} which will be used for the used {@link Thread}, +     * @param addTaskWakesUp    {@code true} if and only if invocation of {@link #addTask(Runnable)} will wake up the, +     *                          executor thread, +     * @param maxPendingTasks   the maximum number of pending tasks before new tasks will be rejected., +     */, +    protected SingleThreadEventExecutor(, +            EventExecutorGroup parent, ThreadFactory threadFactory, boolean addTaskWakesUp, int maxPendingTasks) {, +        this(parent, new ThreadPerTaskExecutor(threadFactory), addTaskWakesUp, maxPendingTasks);, +    }, +, +    /**, +     * Create a new instance, +     *, +     * @param parent            the {@link EventExecutorGroup} which is the parent of this instance and belongs to it, +        this(parent, executor, addTaskWakesUp, DEFAULT_MAX_PENDING_TASKS);, +    }, +, +    /**, +     * Create a new instance, +     *, +     * @param parent            the {@link EventExecutorGroup} which is the parent of this instance and belongs to it, +     * @param executor          the {@link Executor} which will be used for executing, +     * @param addTaskWakesUp    {@code true} if and only if invocation of {@link #addTask(Runnable)} will wake up the, +     *                          executor thread, +     * @param maxPendingTasks   the maximum number of pending tasks before new tasks will be rejected., +     */, +    @SuppressWarnings("deprecation"), +    protected SingleThreadEventExecutor(EventExecutorGroup parent, Executor executor,, +                                        boolean addTaskWakesUp, int maxPendingTasks) {, +        this.maxPendingTasks = Math.max(16, maxPendingTasks);, +     * @deprecated Please use and override {@link #newTaskQueue(int)}., +     */, +    @Deprecated, +    protected Queue<Runnable> newTaskQueue() {, +        return newTaskQueue(maxPendingTasks);, +    }, +, +    /**, +    protected Queue<Runnable> newTaskQueue(int maxPendingTasks) {, +        return new LinkedBlockingQueue<Runnable>(maxPendingTasks);, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutor.java, +    public DefaultEventExecutor(EventExecutorGroup parent, Executor executor, int maxPendingTasks) {, +        super(parent, executor, true, maxPendingTasks);, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultEventExecutorGroup.java, +        this(nThreads, threadFactory, DefaultEventExecutor.DEFAULT_MAX_PENDING_TASKS);, +    }, +, +    /**]