[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +, +import io.netty.util.collection.CharObjectMap;, +            ByteBuf buf = ctx.alloc().buffer(DATA_FRAME_HEADER_LENGTH);, +            for (CharObjectMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +, +import io.netty.util.collection.CharObjectMap;, +            ByteBuf buf = ctx.alloc().buffer(DATA_FRAME_HEADER_LENGTH);, +            for (CharObjectMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ClientUpgradeCodec.java, +, +import io.netty.util.collection.CharObjectHashMap;, +            for (CharObjectHashMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +, +import io.netty.util.collection.CharObjectMap;, +            ByteBuf buf = ctx.alloc().buffer(DATA_FRAME_HEADER_LENGTH);, +            for (CharObjectMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ClientUpgradeCodec.java, +, +import io.netty.util.collection.CharObjectHashMap;, +            for (CharObjectHashMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final char SETTINGS_HEADER_TABLE_SIZE = 1;, +    public static final char SETTINGS_ENABLE_PUSH = 2;, +    public static final char SETTINGS_MAX_CONCURRENT_STREAMS = 3;, +    public static final char SETTINGS_INITIAL_WINDOW_SIZE = 4;, +    public static final char SETTINGS_MAX_FRAME_SIZE = 5;, +    public static final char SETTINGS_MAX_HEADER_LIST_SIZE = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +, +import io.netty.util.collection.CharObjectMap;, +            ByteBuf buf = ctx.alloc().buffer(DATA_FRAME_HEADER_LENGTH);, +            for (CharObjectMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ClientUpgradeCodec.java, +, +import io.netty.util.collection.CharObjectHashMap;, +            for (CharObjectHashMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final char SETTINGS_HEADER_TABLE_SIZE = 1;, +    public static final char SETTINGS_ENABLE_PUSH = 2;, +    public static final char SETTINGS_MAX_CONCURRENT_STREAMS = 3;, +    public static final char SETTINGS_INITIAL_WINDOW_SIZE = 4;, +    public static final char SETTINGS_MAX_FRAME_SIZE = 5;, +    public static final char SETTINGS_MAX_HEADER_LIST_SIZE = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_LIST_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_INITIAL_WINDOW_SIZE;, +, +import io.netty.util.collection.CharObjectHashMap;, +public final class Http2Settings extends CharObjectHashMap<Long> {, +    public Long put(char key, Long value) {, +     * A helper method that returns {@link Long#intValue()} on the return of {@link #get(char)}, if present. Note that, +     * if the range of the value exceeds {@link Integer#MAX_VALUE}, the {@link #get(char)} method should, +    public Integer getIntValue(char key) {, +    protected String keyToString(char key) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +                char id = (char) payload.readUnsignedShort();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +, +import io.netty.util.collection.CharObjectMap;, +            ByteBuf buf = ctx.alloc().buffer(DATA_FRAME_HEADER_LENGTH);, +            for (CharObjectMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ClientUpgradeCodec.java, +, +import io.netty.util.collection.CharObjectHashMap;, +            for (CharObjectHashMap.Entry<Long> entry : settings.entries()) {, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2CodecUtil.java, +    public static final char SETTINGS_HEADER_TABLE_SIZE = 1;, +    public static final char SETTINGS_ENABLE_PUSH = 2;, +    public static final char SETTINGS_MAX_CONCURRENT_STREAMS = 3;, +    public static final char SETTINGS_INITIAL_WINDOW_SIZE = 4;, +    public static final char SETTINGS_MAX_FRAME_SIZE = 5;, +    public static final char SETTINGS_MAX_HEADER_LIST_SIZE = 6;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Settings.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_LIST_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_TABLE_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_INITIAL_WINDOW_SIZE;, +, +import io.netty.util.collection.CharObjectHashMap;, +public final class Http2Settings extends CharObjectHashMap<Long> {, +    public Long put(char key, Long value) {, +     * A helper method that returns {@link Long#intValue()} on the return of {@link #get(char)}, if present. Note that, +     * if the range of the value exceeds {@link Integer#MAX_VALUE}, the {@link #get(char)} method should, +    public Integer getIntValue(char key) {, +    protected String keyToString(char key) {, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2SettingsTest.java, +        char key = 0;]