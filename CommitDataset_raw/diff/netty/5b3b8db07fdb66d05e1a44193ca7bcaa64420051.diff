[+++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +class EpollEventLoop extends SingleThreadEventLoop {, +    @SuppressWarnings("unused") // AtomicIntegerFieldUpdater, +            delayNanos = (int) min(totalDelay - delaySeconds * 1000000000L, MAX_SCHEDULED_TIMERFD_NS);, +    /**, +     * Visible only for testing!, +     */, +    void handleLoopException(Throwable t) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollEventLoop.java, +class EpollEventLoop extends SingleThreadEventLoop {, +    @SuppressWarnings("unused") // AtomicIntegerFieldUpdater, +            delayNanos = (int) min(totalDelay - delaySeconds * 1000000000L, MAX_SCHEDULED_TIMERFD_NS);, +    /**, +     * Visible only for testing!, +     */, +    void handleLoopException(Throwable t) {, +++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollEventLoopTest.java, +import io.netty.channel.DefaultSelectStrategyFactory;, +import io.netty.util.concurrent.DefaultThreadFactory;, +import io.netty.util.concurrent.RejectedExecutionHandlers;, +import io.netty.util.concurrent.ThreadPerTaskExecutor;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.junit.Assert.assertNull;, +        final AtomicReference<Throwable> capture = new AtomicReference<Throwable>();, +        final EventLoopGroup group = new EpollEventLoop(null,, +                new ThreadPerTaskExecutor(new DefaultThreadFactory(getClass())), 0,, +                DefaultSelectStrategyFactory.INSTANCE.newSelectStrategy(), RejectedExecutionHandlers.reject()) {, +            @Override, +            void handleLoopException(Throwable t) {, +                capture.set(t);, +                super.handleLoopException(t);, +            }, +        };, +, +        try {, +            final EventLoop eventLoop = group.next();, +            Future<?> future = eventLoop.schedule(new Runnable() {, +            assertNull(capture.get());, +        } finally {, +}]