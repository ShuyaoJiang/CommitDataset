[+++ b/handler/src/test/java/io/netty/handler/ipfilter/IpFilterRuleTest.java, +public class IpFilterRuleTest extends TestCase {, +    public static boolean accept(IpFilterRuleHandler h, InetSocketAddress addr) throws Exception {, +        return h.accept(new ChannelHandlerContext() {, +            public boolean canHandleDownstream() {, +            public boolean canHandleUpstream() {, +            public Object getAttachment() {, +            public Channel getChannel() {, +            public ChannelHandler getHandler() {, +            public String getName() {, +            public ChannelPipeline getPipeline() {, +            public void sendDownstream(ChannelEvent e) {, +            public void sendUpstream(ChannelEvent e) {, +            public void setAttachment(Object attachment) {, +                new UpstreamMessageEvent(new Channel() {, +                    public ChannelFuture bind(SocketAddress localAddress) {, +                    public ChannelFuture close() {, +                    public ChannelFuture connect(SocketAddress remoteAddress) {, +                    public ChannelFuture disconnect() {, +                    public ChannelFuture getCloseFuture() {, +                    public ChannelConfig getConfig() {, +                    public ChannelFactory getFactory() {, +                    public Integer getId() {, +                    public int getInterestOps() {, +                    public SocketAddress getLocalAddress() {, +                    public Channel getParent() {, +                    public ChannelPipeline getPipeline() {, +                    public SocketAddress getRemoteAddress() {, +                    public boolean isBound() {, +                    public boolean isConnected() {, +                    public boolean isOpen() {, +                    public boolean isReadable() {, +                    public boolean isWritable() {, +                    public ChannelFuture setInterestOps(int interestOps) {, +                    public ChannelFuture setReadable(boolean readable) {, +                    public ChannelFuture unbind() {, +                    public ChannelFuture write(Object message) {, +                    public ChannelFuture write(Object message, SocketAddress remoteAddress) {, +                    public int compareTo(Channel o) {, +    public void testIpFilterRule() throws Exception {]