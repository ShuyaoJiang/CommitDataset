[+++ b/src/docbook/en-US/module/architecture.xml, +      Traditional I/O APIs in Java provide different types and methods for, +      another tedious and difficult.  The lack of portability between, +      transports becomes a problem when you need to support additional, +      transports, as this often entails rewriting the network layer of the, +      application.  Logically, many protocols can run on more than one, +      transport such as TCP/IP, UDP/IP, SCTP, and serial port communication., +      To make matters worse, Java's New I/O (NIO) API introduced, +      incompatibilities with the old blocking I/O (OIO) API and will continue, +      to do so in the next release, NIO.2 (AIO).  Because all these APIs are, +      different from each other in design and performance characteristics, you, +      are often forced to determine which API your application will depend on, +      before you even begin the implementation phase., +      to be in trouble when your business grows exponentially and your server, +      needs to serve tens of thousands of clients simultaneously.  You could, +      start with NIO, but doing so may hinder rapid development by greatly, +      increasing development time due to the complexity of the NIO Selector, +      API., +      Netty has a universal asynchronous I/O interface called a &Channel;, which, +      abstracts away all operations required for point-to-point communication., +      Switching from one transport to another usually takes just a couple, +      Also, you are even able to take advantage of new transports which aren't, +      yet written (such as serial port communication transport), again, +      write your own transport by extending the core API.]