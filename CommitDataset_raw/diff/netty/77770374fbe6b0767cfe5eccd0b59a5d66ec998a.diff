[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.UnstableApi;, +        taskQueue = newTaskQueue(this.maxPendingTasks);, +        return pollTaskFrom(taskQueue);, +    }, +, +    protected final Runnable pollTaskFrom(Queue<Runnable> taskQueue) {, +            reject(task);, +        assert inEventLoop();, +        boolean ranAtLeastOne = false;, +, +            if (runAllTasksFrom(taskQueue)) {, +                ranAtLeastOne = true;, +        if (ranAtLeastOne) {, +        }, +        afterRunningAllTasks();, +        return ranAtLeastOne;, +    }, +, +    /**, +     * Runs all tasks from the passed {@code taskQueue}., +     *, +     * @param taskQueue To poll and execute all tasks., +     *, +     * @return {@code true} if atleast one task was executed., +     */, +    protected final boolean runAllTasksFrom(Queue<Runnable> taskQueue) {, +        Runnable task = pollTaskFrom(taskQueue);, +        if (task == null) {, +            return false;, +        }, +        for (;;) {, +            safeExecute(task);, +            task = pollTaskFrom(taskQueue);, +            if (task == null) {, +        }, +    }, +            afterRunningAllTasks();, +            safeExecute(task);, +        afterRunningAllTasks();, +     * Invoked before returning from {@link #runAllTasks()} and {@link #runAllTasks(long)}., +     */, +    @UnstableApi, +    protected void afterRunningAllTasks() { }, +, +    private static void safeExecute(Runnable task) {, +        try {, +            task.run();, +        } catch (Throwable t) {, +            logger.warn("A task raised an exception. Task: {}", task, t);, +        }, +    }, +, +    /**, +    /**, +     * Offers the task to the associated {@link RejectedExecutionHandler}., +     *, +     * @param task to reject., +     */, +    protected final void reject(Runnable task) {, +        rejectedExecutionHandler.rejected(task, this);, +    }, +, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.UnstableApi;, +        taskQueue = newTaskQueue(this.maxPendingTasks);, +        return pollTaskFrom(taskQueue);, +    }, +, +    protected final Runnable pollTaskFrom(Queue<Runnable> taskQueue) {, +            reject(task);, +        assert inEventLoop();, +        boolean ranAtLeastOne = false;, +, +            if (runAllTasksFrom(taskQueue)) {, +                ranAtLeastOne = true;, +        if (ranAtLeastOne) {, +        }, +        afterRunningAllTasks();, +        return ranAtLeastOne;, +    }, +, +    /**, +     * Runs all tasks from the passed {@code taskQueue}., +     *, +     * @param taskQueue To poll and execute all tasks., +     *, +     * @return {@code true} if atleast one task was executed., +     */, +    protected final boolean runAllTasksFrom(Queue<Runnable> taskQueue) {, +        Runnable task = pollTaskFrom(taskQueue);, +        if (task == null) {, +            return false;, +        }, +        for (;;) {, +            safeExecute(task);, +            task = pollTaskFrom(taskQueue);, +            if (task == null) {, +        }, +    }]