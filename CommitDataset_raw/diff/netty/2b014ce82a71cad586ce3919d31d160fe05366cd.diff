[+++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +    static final class ImmediateEventExecutor extends AbstractEventExecutorWithoutScheduler {, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +    static final class ImmediateEventExecutor extends AbstractEventExecutorWithoutScheduler {, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroupFuture.java, +import io.netty.util.concurrent.BlockingOperationException;, +    @Override, +    protected void checkDeadLock() {, +        EventExecutor e = executor();, +        if (e != null && !(e instanceof DefaultChannelGroup.ImmediateEventExecutor) && e.inEventLoop()) {, +            throw new BlockingOperationException();, +        }, +    }, +, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroup.java, +    static final class ImmediateEventExecutor extends AbstractEventExecutorWithoutScheduler {, +++ b/transport/src/main/java/io/netty/channel/group/DefaultChannelGroupFuture.java, +import io.netty.util.concurrent.BlockingOperationException;, +    @Override, +    protected void checkDeadLock() {, +        EventExecutor e = executor();, +        if (e != null && !(e instanceof DefaultChannelGroup.ImmediateEventExecutor) && e.inEventLoop()) {, +            throw new BlockingOperationException();, +        }, +    }, +, +++ b/transport/src/test/java/io/netty/channel/group/DefaultChannnelGroupTest.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.group;, +, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelStateHandlerAdapter;, +import io.netty.channel.nio.NioEventLoopGroup;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import org.junit.Test;, +, +public class DefaultChannnelGroupTest {, +, +, +    // Test for #1183, +    @Test, +    public void testNotThrowBlockingOperationException() {, +        final ChannelGroup allChannels = new DefaultChannelGroup();, +        ServerBootstrap b = new ServerBootstrap();, +, +        b.group(new NioEventLoopGroup(), new NioEventLoopGroup());, +        b.childHandler(new ChannelStateHandlerAdapter() {, +            @Override, +            public void channelActive(ChannelHandlerContext ctx) {, +                allChannels.add(ctx.channel());, +            }, +, +            @Override, +            public void inboundBufferUpdated(ChannelHandlerContext ctx) {, +            }, +        });, +        b.channel(NioServerSocketChannel.class);, +, +        ChannelFuture f = b.bind(0).syncUninterruptibly();, +, +        if (f.isSuccess()) {, +            allChannels.add(f.channel());, +            allChannels.close().awaitUninterruptibly();, +        }, +        b.shutdown();, +    }, +}]