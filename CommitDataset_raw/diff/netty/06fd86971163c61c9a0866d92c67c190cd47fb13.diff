[+++ b/README.md, +- __3__ branch contains code for Netty 3.x, +++ b/README.md, +- __3__ branch contains code for Netty 3.x, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer[] nioBuffers() {, +        return nioBuffers(readerIndex, readableBytes());, +    }, +, +    @Override, +++ b/README.md, +- __3__ branch contains code for Netty 3.x, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer[] nioBuffers() {, +        return nioBuffers(readerIndex, readableBytes());, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns {@code true} if and only if {@link #nioBuffers()} method will not fail., +     */, +    boolean hasNioBuffers();, +, +    /**, +     * Exposes this buffer's readable bytes as an NIO {@link ByteBuffer}'s.  The returned buffer, +     * shares the content with this buffer, while changing the position and limit of the returned, +     * NIO buffer does not affect the indexes and marks of this buffer. This method does not, +     * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +     */, +    ByteBuffer[] nioBuffers();, +, +    /**, +     * Exposes this buffer's bytes as an NIO {@link ByteBuffer}'s for the specified offset and length, +     * The returned buffer shares the content with this buffer, while changing the position and limit, +     * of the returned NIO buffer does not affect the indexes and marks of this buffer. This method does, +     * not modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +     */, +    ByteBuffer[] nioBuffers(int offset, int length);, +, +    /**, +         * Returns the internal NIO buffer array that is reused for I/O., +         *, +         * @throws UnsupportedOperationException if the buffer has no internal NIO buffer array, +         */, +        ByteBuffer[] nioBuffers();, +, +        /**, +++ b/README.md, +- __3__ branch contains code for Netty 3.x, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public ByteBuffer[] nioBuffers() {, +        return nioBuffers(readerIndex, readableBytes());, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +     * Returns {@code true} if and only if {@link #nioBuffers()} method will not fail., +     */, +    boolean hasNioBuffers();, +, +    /**, +     * Exposes this buffer's readable bytes as an NIO {@link ByteBuffer}'s.  The returned buffer, +     * shares the content with this buffer, while changing the position and limit of the returned, +     * NIO buffer does not affect the indexes and marks of this buffer. This method does not, +     * modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +     */, +    ByteBuffer[] nioBuffers();, +, +    /**, +     * Exposes this buffer's bytes as an NIO {@link ByteBuffer}'s for the specified offset and length, +     * The returned buffer shares the content with this buffer, while changing the position and limit, +     * of the returned NIO buffer does not affect the indexes and marks of this buffer. This method does, +     * not modify {@code readerIndex} or {@code writerIndex} of this buffer.  Please note that the, +     * returned NIO buffer will not see the changes of this buffer if this buffer is a dynamic, +     * buffer and it adjusted its capacity., +     *, +     *, +     * @throws UnsupportedOperationException, +     *         if this buffer cannot create a {@link ByteBuffer} that shares the content with itself, +     */, +    ByteBuffer[] nioBuffers(int offset, int length);, +]