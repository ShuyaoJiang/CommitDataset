[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java, +/*, + * JBoss, Home of Professional Open Source, + *, + * Copyright 2009, Red Hat Middleware LLC, and individual contributors, + * by the @author tags. See the COPYRIGHT.txt in the distribution for a, + * full listing of individual contributors., + *, + * This is free software; you can redistribute it and/or modify it, + * under the terms of the GNU Lesser General Public License as, + * published by the Free Software Foundation; either version 2.1 of, + * the License, or (at your option) any later version., + *, + * This software is distributed in the hope that it will be useful,, + * but WITHOUT ANY WARRANTY; without even the implied warranty of, + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU, + * Lesser General Public License for more details., + *, + * You should have received a copy of the GNU Lesser General Public, + * License along with this software; if not, write to the Free, + * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, + * 02110-1301 USA, or see the FSF site: http://www.fsf.org., + */, +package org.jboss.netty.handler.stream;, +, +import static org.jboss.netty.buffer.ChannelBuffers.*;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.RandomAccessFile;, +, +/**, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Trustin Lee (tlee@redhat.com), + * @version $Rev$, $Date$, + */, +public class ChunkedFile implements ChunkedInput {, +, +    private static final int DEFAULT_CHUNK_SIZE = 8192;, +, +    private final RandomAccessFile file;, +    private final long startOffset;, +    private final long endOffset;, +    private final int chunkSize;, +    private volatile long offset;, +, +    public ChunkedFile(File file) throws IOException {, +        this(file, DEFAULT_CHUNK_SIZE);, +    }, +, +    public ChunkedFile(File file, int chunkSize) throws IOException {, +        this(new RandomAccessFile(file, "r"), chunkSize);, +    }, +, +    public ChunkedFile(RandomAccessFile file, int chunkSize) throws IOException {, +        this(file, 0, file.length(), chunkSize);, +    }, +, +    public ChunkedFile(RandomAccessFile file, long offset, long length, int chunkSize) throws IOException {, +        if (file == null) {, +            throw new NullPointerException("file");, +        }, +        if (offset < 0) {, +            throw new IllegalArgumentException(, +                    "offset: " + offset + " (expected: 0 or greater)");, +        }, +        if (length < 0) {, +            throw new IllegalArgumentException(, +                    "length: " + length + " (expected: 0 or greater)");, +        }, +, +        this.file = file;, +        this.offset = startOffset = offset;, +        endOffset = offset + length;, +        this.chunkSize = chunkSize;, +, +        file.seek(offset);, +    }, +, +    public long getStartOffset() {, +        return startOffset;, +    }, +, +    public long getEndOffset() {, +        return endOffset;, +    }, +, +    public long getCurrentOffset() {, +        return offset;, +    }, +, +    public boolean available() throws Exception {, +        return offset < endOffset && file.getChannel().isOpen();, +    }, +]