[+++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompactObjectInputStream.java, +import java.util.HashMap;, +import java.util.Map;, +    private final Map<String, Class<?>> classCache = new HashMap<String, Class<?>>();, +            return ObjectStreamClass.lookupAny(clazz);, +        // Query the cache first., +        Class<?> clazz = classCache.get(className);, +        if (clazz != null) {, +            return clazz;, +, +        // And then try to resolve., +        try {, +            clazz = loadClass(className);, +        } catch (ClassNotFoundException ex) {, +            clazz = super.resolveClass(desc);, +        }, +, +        classCache.put(className, clazz);, +        return clazz;, +        // Query the cache first., +        clazz = classCache.get(className);, +        if (clazz != null) {, +            return clazz;, +        }, +, +        // And then try to load., +, +        classCache.put(className, clazz);, +++ b/src/main/java/org/jboss/netty/handler/codec/serialization/CompactObjectInputStream.java, +import java.util.HashMap;, +import java.util.Map;, +    private final Map<String, Class<?>> classCache = new HashMap<String, Class<?>>();, +            return ObjectStreamClass.lookupAny(clazz);, +        // Query the cache first., +        Class<?> clazz = classCache.get(className);, +        if (clazz != null) {, +            return clazz;, +, +        // And then try to resolve., +        try {, +            clazz = loadClass(className);, +        } catch (ClassNotFoundException ex) {, +            clazz = super.resolveClass(desc);, +        }, +, +        classCache.put(className, clazz);, +        return clazz;, +        // Query the cache first., +        clazz = classCache.get(className);, +        if (clazz != null) {, +            return clazz;, +        }, +, +        // And then try to load., +, +        classCache.put(className, clazz);, +++ b/src/test/java/org/jboss/netty/handler/codec/serialization/CompactObjectSerializationTest.java, +/*, + * Copyright 2011 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.codec.serialization;, +, +import java.io.PipedInputStream;, +import java.io.PipedOutputStream;, +import java.util.List;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +/**, + * @author <a href="http://gleamynode.net/">Trustin Lee</a>, + */, +public class CompactObjectSerializationTest {, +, +    @Test, +    public void testInterfaceSerialization() throws Exception {, +        PipedOutputStream pipeOut = new PipedOutputStream();, +        PipedInputStream pipeIn = new PipedInputStream(pipeOut);, +        CompactObjectOutputStream out = new CompactObjectOutputStream(pipeOut);, +        CompactObjectInputStream in = new CompactObjectInputStream(pipeIn);, +        out.writeObject(List.class);, +        Assert.assertSame(List.class, in.readObject());, +    }, +}]