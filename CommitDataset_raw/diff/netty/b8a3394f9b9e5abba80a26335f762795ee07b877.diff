[+++ b/microbench/pom.xml, +    <!-- This only be set when run on mac as on other platforms we just want to include the jar without native, +         code -->, +    <kqueue.classifier />, +      <id>mac</id>, +      <activation>, +        <os>, +          <family>mac</family>, +        </os>, +      </activation>, +      <properties>, +        <kqueue.classifier>${jni.classifier}</kqueue.classifier>, +      </properties>, +      <build>, +        <plugins>, +          <plugin>, +            <artifactId>maven-compiler-plugin</artifactId>, +            <configuration>, +              <includes>, +                <include>**/*.java</include>, +              </includes>, +            </configuration>, +          </plugin>, +        </plugins>, +      </build>, +    </profile>, +    <profile>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-kqueue</artifactId>, +      <version>${project.version}</version>, +      <classifier>${kqueue.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/microbench/pom.xml, +    <!-- This only be set when run on mac as on other platforms we just want to include the jar without native, +         code -->, +    <kqueue.classifier />, +      <id>mac</id>, +      <activation>, +        <os>, +          <family>mac</family>, +        </os>, +      </activation>, +      <properties>, +        <kqueue.classifier>${jni.classifier}</kqueue.classifier>, +      </properties>, +      <build>, +        <plugins>, +          <plugin>, +            <artifactId>maven-compiler-plugin</artifactId>, +            <configuration>, +              <includes>, +                <include>**/*.java</include>, +              </includes>, +            </configuration>, +          </plugin>, +        </plugins>, +      </build>, +    </profile>, +    <profile>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-kqueue</artifactId>, +      <version>${project.version}</version>, +      <classifier>${kqueue.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/microbench/src/main/java/io/netty/microbench/concurrent/BurstCostExecutorsBenchmark.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License, version 2.0 (the, + * "License"); you may not use this file except in compliance with the License. You may obtain a, + * copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +package io.netty.microbench.concurrent;, +, +import io.netty.channel.epoll.Epoll;, +import io.netty.channel.epoll.EpollEventLoopGroup;, +import io.netty.channel.kqueue.KQueue;, +import io.netty.channel.kqueue.KQueueEventLoopGroup;, +import io.netty.channel.nio.NioEventLoopGroup;, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import io.netty.util.concurrent.DefaultEventExecutor;, +import io.netty.util.internal.PlatformDependent;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.BenchmarkMode;, +import org.openjdk.jmh.annotations.Mode;, +import org.openjdk.jmh.annotations.OutputTimeUnit;, +import org.openjdk.jmh.annotations.Param;, +import org.openjdk.jmh.annotations.Scope;, +import org.openjdk.jmh.annotations.Setup;, +import org.openjdk.jmh.annotations.State;, +import org.openjdk.jmh.annotations.TearDown;]