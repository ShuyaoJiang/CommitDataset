[+++ b/common/src/main/java/io/netty/util/UniqueName.java, +        if (id < other.id) {, +            return -1;, +        } else if (id > other.id) {, +            return 1;, +        } else {, +            return 0;, +        }, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +        if (id < other.id) {, +            return -1;, +        } else if (id > other.id) {, +            return 1;, +        } else {, +            return 0;, +        }, +++ b/common/src/test/java/io/netty/logging/InternalLoggerFactoryTest.java, +    , +    @Test, +    public void shouldGetInstance() {, +        InternalLoggerFactory.setDefaultFactory(oldLoggerFactory);, +        , +        String helloWorld = "Hello, world!";, +        , +        InternalLogger one = InternalLoggerFactory.getInstance("helloWorld");, +        InternalLogger two = InternalLoggerFactory.getInstance(helloWorld.getClass());, +        , +        assertNotNull(one);, +        assertNotNull(two);, +        assertNotSame(one, two);, +    }, +++ b/common/src/main/java/io/netty/util/UniqueName.java, +        if (id < other.id) {, +            return -1;, +        } else if (id > other.id) {, +            return 1;, +        } else {, +            return 0;, +        }, +++ b/common/src/test/java/io/netty/logging/InternalLoggerFactoryTest.java, +    , +    @Test, +    public void shouldGetInstance() {, +        InternalLoggerFactory.setDefaultFactory(oldLoggerFactory);, +        , +        String helloWorld = "Hello, world!";, +        , +        InternalLogger one = InternalLoggerFactory.getInstance("helloWorld");, +        InternalLogger two = InternalLoggerFactory.getInstance(helloWorld.getClass());, +        , +        assertNotNull(one);, +        assertNotNull(two);, +        assertNotSame(one, two);, +    }, +++ b/common/src/test/java/io/netty/util/UniqueNameTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.assertSame;, +    @Test(expected=NullPointerException.class), +    public void testCannnotProvideNullMap() {, +        UniqueName nullName = new UniqueName(null, "Nothing");, +    }, +, +    @Test(expected=NullPointerException.class), +    public void testCannotProvideNullName() {, +        UniqueName nullName = new UniqueName(this.names, null);, +    }, +, +    @Test, +    public void testArgsCanBePassed() {, +        UniqueName nullName = new UniqueName(this.names, "Argh, matey!", 2, 5, new Object());, +    }, +, +                    assertNotSame(currentName, otherName);, +                    assertNotSame(currentName.hashCode(), otherName.hashCode());, +                    assertFalse(currentName.equals(otherName));, +                    assertNotSame(currentName.compareTo(otherName), 0);, +                    assertNotSame(currentName.toString(), otherName.toString());, +    @Test, +    public void testCompareNames() {, +        UniqueName one = registerName("One");, +        UniqueName two = registerName("Two");, +, +        ConcurrentHashMap<String, Boolean> mapTwo = new ConcurrentHashMap<String, Boolean>();, +, +        UniqueName three = new UniqueName(mapTwo, "One");, +, +        assertSame(one.compareTo(one), 0);, +        assertSame(one.compareTo(two), -5);, +        assertSame(one.compareTo(three), -1);, +        assertSame(three.compareTo(one), 1);, +    }, +]