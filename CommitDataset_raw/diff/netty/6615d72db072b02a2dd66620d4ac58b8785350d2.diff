[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <sys/utsname.h>, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd) {, +    int optval;, +    if (getOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +, +JNIEXPORT jstring JNICALL Java_io_netty_channel_epoll_Native_kernelVersion(JNIEnv *env, jclass clazz) {, +    struct utsname name;, +, +    int res = uname(&name);, +    if (res == 0) {, +        return (*env)->NewStringUTF(env, name.release);, +    }, +    int err = errno;, +    throwRuntimeException(env, exceptionMessage("Error during uname(...): ", err));, +    return NULL;, +, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <sys/utsname.h>, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd) {, +    int optval;, +    if (getOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +, +JNIEXPORT jstring JNICALL Java_io_netty_channel_epoll_Native_kernelVersion(JNIEnv *env, jclass clazz) {, +    struct utsname name;, +, +    int res = uname(&name);, +    if (res == 0) {, +        return (*env)->NewStringUTF(env, name.release);, +    }, +    int err = errno;, +    throwRuntimeException(env, exceptionMessage("Error during uname(...): ", err));, +    return NULL;, +, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval);, +jint Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd);, +jstring Java_io_netty_channel_epoll_Native_kernelVersion(JNIEnv *env, jclass clazz);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <sys/utsname.h>, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd) {, +    int optval;, +    if (getOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval)) == -1) {, +        return -1;, +    }, +    return optval;, +}, +, +, +JNIEXPORT jstring JNICALL Java_io_netty_channel_epoll_Native_kernelVersion(JNIEnv *env, jclass clazz) {, +    struct utsname name;, +, +    int res = uname(&name);, +    if (res == 0) {, +        return (*env)->NewStringUTF(env, name.release);, +    }, +    int err = errno;, +    throwRuntimeException(env, exceptionMessage("Error during uname(...): ", err));, +    return NULL;, +, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval);, +jint Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd);, +jstring Java_io_netty_channel_epoll_Native_kernelVersion(JNIEnv *env, jclass clazz);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> SO_REUSEPORT = ChannelOption.valueOf(T, "SO_REUSEPORT");, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +#include <sys/utsname.h>, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setReusePort(JNIEnv * env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, SOL_SOCKET, SO_REUSEPORT, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isReusePort(JNIEnv *env, jclass clazz, jint fd) {, +    int optval;]