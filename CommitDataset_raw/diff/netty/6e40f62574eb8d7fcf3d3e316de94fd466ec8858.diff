[+++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +    private final ChannelFuture closeFuture = new UnfailingChannelFuture(this, false);, +        return !closeFuture.isDone();, +        return closeFuture.setSuccess();, +        ChannelFuture returnedCloseFuture = Channels.close(this);, +        assert closeFuture == returnedCloseFuture;, +        return closeFuture;, +    }, +, +    public ChannelFuture getCloseFuture() {, +        return closeFuture;, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +    private final ChannelFuture closeFuture = new UnfailingChannelFuture(this, false);, +        return !closeFuture.isDone();, +        return closeFuture.setSuccess();, +        ChannelFuture returnedCloseFuture = Channels.close(this);, +        assert closeFuture == returnedCloseFuture;, +        return closeFuture;, +    }, +, +    public ChannelFuture getCloseFuture() {, +        return closeFuture;, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +     * connected, it will be disconnected and unbound first.  Once a channel, +     * is closed, it can not be open again.  Calling this method on a closed, +     * channel has no effect.  Please note that this method always returns the, +     * same future instance., +     * Returns the {@link ChannelFuture} which will be notified when this, +     * channel is closed.  This method always returns the same future instance., +     */, +    ChannelFuture getCloseFuture();, +, +    /**, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +    private final ChannelFuture closeFuture = new UnfailingChannelFuture(this, false);, +        return !closeFuture.isDone();, +        return closeFuture.setSuccess();, +        ChannelFuture returnedCloseFuture = Channels.close(this);, +        assert closeFuture == returnedCloseFuture;, +        return closeFuture;, +    }, +, +    public ChannelFuture getCloseFuture() {, +        return closeFuture;, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +     * connected, it will be disconnected and unbound first.  Once a channel, +     * is closed, it can not be open again.  Calling this method on a closed, +     * channel has no effect.  Please note that this method always returns the, +     * same future instance., +     * Returns the {@link ChannelFuture} which will be notified when this, +     * channel is closed.  This method always returns the same future instance., +     */, +    ChannelFuture getCloseFuture();, +, +    /**, +++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, +    boolean setSuccess();, +    boolean setFailure(Throwable cause);, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +    private final ChannelFuture closeFuture = new UnfailingChannelFuture(this, false);, +        return !closeFuture.isDone();, +        return closeFuture.setSuccess();, +        ChannelFuture returnedCloseFuture = Channels.close(this);, +        assert closeFuture == returnedCloseFuture;, +        return closeFuture;, +    }, +, +    public ChannelFuture getCloseFuture() {, +        return closeFuture;, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +     * connected, it will be disconnected and unbound first.  Once a channel, +     * is closed, it can not be open again.  Calling this method on a closed, +     * channel has no effect.  Please note that this method always returns the, +     * same future instance., +     * Returns the {@link ChannelFuture} which will be notified when this, +     * channel is closed.  This method always returns the same future instance., +     */, +    ChannelFuture getCloseFuture();, +, +    /**, +++ b/src/main/java/org/jboss/netty/channel/ChannelFuture.java, +    boolean setSuccess();, +    boolean setFailure(Throwable cause);, +++ b/src/main/java/org/jboss/netty/channel/Channels.java, +        ChannelFuture future = channel.getCloseFuture();, +++ b/src/main/java/org/jboss/netty/channel/AbstractChannel.java, +    private final ChannelFuture closeFuture = new UnfailingChannelFuture(this, false);, +        return !closeFuture.isDone();, +        return closeFuture.setSuccess();, +        ChannelFuture returnedCloseFuture = Channels.close(this);, +        assert closeFuture == returnedCloseFuture;, +        return closeFuture;, +    }, +, +    public ChannelFuture getCloseFuture() {, +        return closeFuture;, +++ b/src/main/java/org/jboss/netty/channel/Channel.java, +     * connected, it will be disconnected and unbound first.  Once a channel, +     * is closed, it can not be open again.  Calling this method on a closed, +     * channel has no effect.  Please note that this method always returns the]