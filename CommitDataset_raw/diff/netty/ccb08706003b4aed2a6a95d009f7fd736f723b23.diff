[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import java.nio.channels.FileChannel;, +    public int readBytes(FileChannel out, long position, int length), +            throws IOException {, +        checkReadableBytes(length);, +        int readBytes = getBytes(readerIndex, out, position, length);, +        readerIndex += readBytes;, +        return readBytes;, +    }, +, +    @Override, +    public int writeBytes(FileChannel in, long position, int length) throws IOException {, +        ensureAccessible();, +        ensureWritable(length);, +        int writtenBytes = setBytes(writerIndex, in, position, length);, +        if (writtenBytes > 0) {, +            writerIndex += writtenBytes;, +        }, +        return writtenBytes;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +import java.nio.channels.FileChannel;, +    public int readBytes(FileChannel out, long position, int length), +            throws IOException {, +        checkReadableBytes(length);, +        int readBytes = getBytes(readerIndex, out, position, length);, +        readerIndex += readBytes;, +        return readBytes;, +    }, +, +    @Override, +    public int writeBytes(FileChannel in, long position, int length) throws IOException {, +        ensureAccessible();, +        ensureWritable(length);, +        int writtenBytes = setBytes(writerIndex, in, position, length);, +        if (writtenBytes > 0) {, +            writerIndex += writtenBytes;, +        }, +        return writtenBytes;, +    }, +, +    @Override, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, +import java.nio.channels.FileChannel;, +     * Transfers this buffer's data starting at the specified absolute {@code index}, +     * to the specified channel starting at the given file position., +     * This method does not modify {@code readerIndex} or {@code writerIndex} of, +     * this buffer. This method does not modify the channel's position., +     *, +     * @param position the file position at which the transfer is to begin, +     * @param length the maximum number of bytes to transfer, +     *, +     * @return the actual number of bytes written out to the specified channel, +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         if {@code index + length} is greater than, +     *            {@code this.capacity}, +     * @throws IOException, +     *         if the specified channel threw an exception during I/O, +     */, +    public abstract int getBytes(int index, FileChannel out, long position, int length) throws IOException;, +, +    /**, +     * Transfers the content of the specified source channel starting at the given file position, +     * to this buffer starting at the specified absolute {@code index}., +     * This method does not modify {@code readerIndex} or {@code writerIndex} of, +     * this buffer. This method does not modify the channel's position., +     *, +     * @param position the file position at which the transfer is to begin, +     * @param length the maximum number of bytes to transfer, +     *, +     * @return the actual number of bytes read in from the specified channel., +     *         {@code -1} if the specified channel is closed., +     *, +     * @throws IndexOutOfBoundsException, +     *         if the specified {@code index} is less than {@code 0} or, +     *         if {@code index + length} is greater than {@code this.capacity}, +     * @throws IOException, +     *         if the specified channel threw an exception during I/O, +     */, +    public abstract int setBytes(int index, FileChannel in, long position, int length) throws IOException;, +, +    /**, +     * Transfers this buffer's data starting at the current {@code readerIndex}, +     * to the specified channel starting at the given file position., +     * This method does not modify the channel's position., +     *, +     * @param position the file position at which the transfer is to begin, +     * @param length the maximum number of bytes to transfer, +     *, +     * @return the actual number of bytes written out to the specified channel, +     *, +     * @throws IndexOutOfBoundsException, +     *         if {@code length} is greater than {@code this.readableBytes}, +     * @throws IOException, +     *         if the specified channel threw an exception during I/O, +     */]