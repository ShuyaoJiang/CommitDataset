[+++ /dev/null, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelServerChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelServerChannelSink extends AbstractChannelSink {, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelServerChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelServerChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/test/java/io/netty/channel/socket/http/FakeChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +public class FakeChannelSink extends AbstractChannelSink {, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelServerChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelServerChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/test/java/io/netty/channel/socket/http/FakeChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +public class FakeChannelSink extends AbstractChannelSink {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelSink.java, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelServerChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelServerChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/test/java/io/netty/channel/socket/http/FakeChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +public class FakeChannelSink extends AbstractChannelSink {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelSink.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractScptChannelSink.java, +            super.fireUpstreamEventLater(pipeline, e);, +++ /dev/null, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelAcceptedChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelAcceptedChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelClientChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelClientChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/main/java/io/netty/channel/socket/http/HttpTunnelServerChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +class HttpTunnelServerChannelSink extends AbstractChannelSink {, +++ b/transport-http/src/test/java/io/netty/channel/socket/http/FakeChannelSink.java, +import io.netty.channel.AbstractChannelSink;, +public class FakeChannelSink extends AbstractChannelSink {, +++ b/transport-rxtx/src/main/java/io/netty/channel/rxtx/RxtxChannelSink.java, +++ b/transport-sctp/src/main/java/io/netty/channel/sctp/AbstractScptChannelSink.java, +            super.fireUpstreamEventLater(pipeline, e);, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelSink.java, +        if (isFireExceptionCaughtLater(event, actualCause)) {, +            fireExceptionCaughtLater(event.getChannel(), actualCause);, +        } else {, +    , +    protected boolean isFireExceptionCaughtLater(ChannelEvent event, Throwable actualCause) {, +        return false;, +    }, +, +    /**, +     * This implementation just send the event now via {@link ChannelPipeline#sendUpstream(ChannelEvent)}. Sub-classes should override this if they can handle it, +     * in a better way, +     */, +    @Override, +    public void fireUpstreamEventLater(ChannelPipeline pipeline, ChannelEvent e) throws Exception {, +        pipeline.sendUpstream(e);, +    }, +, +}]