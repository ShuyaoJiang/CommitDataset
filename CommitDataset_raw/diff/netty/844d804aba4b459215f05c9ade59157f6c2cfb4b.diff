[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +        final String[] searchDomains = parent.searchDomains();, +        if (searchDomains.length == 0 || parent.ndots() == 0 || StringUtil.endsWith(hostname, '.')) {, +            final boolean startWithoutSearchDomain = hasNDots();, +            final String initialHostname = startWithoutSearchDomain ? hostname : hostname + '.' + searchDomains[0];, +            final int initialSearchDomainIdx = startWithoutSearchDomain ? 0 : 1;, +            doSearchDomainQuery(initialHostname, new FutureListener<T>() {, +                private int searchDomainIdx = initialSearchDomainIdx;, +                    } else if (searchDomainIdx < searchDomains.length) {, +                        doSearchDomainQuery(hostname + '.' + searchDomains[searchDomainIdx++], this);, +                    } else {, +                        if (!startWithoutSearchDomain) {, +                            internalResolve(promise);, +                }, +    private boolean hasNDots() {, +        for (int idx = hostname.length() - 1, dots = 0; idx >= 0; idx--) {, +            if (hostname.charAt(idx) == '.' && ++dots >= parent.ndots()) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +    private void doSearchDomainQuery(String hostname, FutureListener<T> listener) {, +        DnsNameResolverContext<T> nextContext = newResolverContext(parent, hostname, additionals, resolveCache,, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +        final String[] searchDomains = parent.searchDomains();, +        if (searchDomains.length == 0 || parent.ndots() == 0 || StringUtil.endsWith(hostname, '.')) {, +            final boolean startWithoutSearchDomain = hasNDots();, +            final String initialHostname = startWithoutSearchDomain ? hostname : hostname + '.' + searchDomains[0];, +            final int initialSearchDomainIdx = startWithoutSearchDomain ? 0 : 1;, +            doSearchDomainQuery(initialHostname, new FutureListener<T>() {, +                private int searchDomainIdx = initialSearchDomainIdx;, +                    } else if (searchDomainIdx < searchDomains.length) {, +                        doSearchDomainQuery(hostname + '.' + searchDomains[searchDomainIdx++], this);, +                    } else {, +                        if (!startWithoutSearchDomain) {, +                            internalResolve(promise);, +                }, +    private boolean hasNDots() {, +        for (int idx = hostname.length() - 1, dots = 0; idx >= 0; idx--) {, +            if (hostname.charAt(idx) == '.' && ++dots >= parent.ndots()) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +    private void doSearchDomainQuery(String hostname, FutureListener<T> listener) {, +        DnsNameResolverContext<T> nextContext = newResolverContext(parent, hostname, additionals, resolveCache,, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/SearchDomainTest.java, +        // "host3" does not contain a dot nor it's absolute but it should still be resolved after search list have, +        // been checked, +        resolved = assertResolve(resolver, "host3");, +        assertEquals(store.getAddress("host3"), resolved);, +        // "host3" does not contain a dot nor it's absolute but it should still be resolved after search list have, +        // been checked, +        resolved = assertResolveAll(resolver, "host3");, +        assertEquals(store.getAddresses("host3"), resolved);, +        resolver = newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(1).build();, +    public void testExceptionMsgDoesNotContainSearchDomainIfNdotsIsNotReached() throws Exception {, +        resolver = newResolver().searchDomains(Collections.singletonList("foo.com")).ndots(2).build();]