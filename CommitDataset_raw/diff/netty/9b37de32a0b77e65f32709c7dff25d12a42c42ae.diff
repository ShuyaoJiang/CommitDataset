[+++ b/common/src/main/java/io/netty/logging/AbstractInternalLogger.java, +        case TRACE:, +            return isTraceEnabled();, +        case TRACE:, +            trace(msg, cause);, +            break;, +        case TRACE:, +            trace(msg);, +            break;, +++ b/common/src/main/java/io/netty/logging/AbstractInternalLogger.java, +        case TRACE:, +            return isTraceEnabled();, +        case TRACE:, +            trace(msg, cause);, +            break;, +        case TRACE:, +            trace(msg);, +            break;, +++ b/common/src/main/java/io/netty/logging/CommonsLogger.java, +    public void trace(String msg) {, +        logger.trace(msg);, +    }, +, +    @Override, +    public void trace(String msg, Throwable cause) {, +        logger.trace(msg, cause);, +    }, +, +    @Override, +    public boolean isTraceEnabled() {, +        return logger.isTraceEnabled();, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/logging/AbstractInternalLogger.java, +        case TRACE:, +            return isTraceEnabled();, +        case TRACE:, +            trace(msg, cause);, +            break;, +        case TRACE:, +            trace(msg);, +            break;, +++ b/common/src/main/java/io/netty/logging/CommonsLogger.java, +    public void trace(String msg) {, +        logger.trace(msg);, +    }, +, +    @Override, +    public void trace(String msg, Throwable cause) {, +        logger.trace(msg, cause);, +    }, +, +    @Override, +    public boolean isTraceEnabled() {, +        return logger.isTraceEnabled();, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/logging/InternalLogLevel.java, +     * 'TRACE' log level., +     */, +    TRACE,, +    /**, +++ b/common/src/main/java/io/netty/logging/AbstractInternalLogger.java, +        case TRACE:, +            return isTraceEnabled();, +        case TRACE:, +            trace(msg, cause);, +            break;, +        case TRACE:, +            trace(msg);, +            break;, +++ b/common/src/main/java/io/netty/logging/CommonsLogger.java, +    public void trace(String msg) {, +        logger.trace(msg);, +    }, +, +    @Override, +    public void trace(String msg, Throwable cause) {, +        logger.trace(msg, cause);, +    }, +, +    @Override, +    public boolean isTraceEnabled() {, +        return logger.isTraceEnabled();, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/logging/InternalLogLevel.java, +     * 'TRACE' log level., +     */, +    TRACE,, +    /**, +++ b/common/src/main/java/io/netty/logging/InternalLogger.java, +     * Returns {@code true} if a TRACE level message is logged., +     */, +    boolean isTraceEnabled();, +, +    /**]