[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +                        String[] values = StringUtil.split(contents[i], '=', 2);, +                        String values = StringUtil.substringAfter(contents[2], '=');, +                        multipartMixedBoundary = "--" + values;, +                            String values = StringUtil.substringAfter(contents[i], '=');, +                                        cleanString(values));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +                        String[] values = StringUtil.split(contents[i], '=', 2);, +                        String values = StringUtil.substringAfter(contents[2], '=');, +                        multipartMixedBoundary = "--" + values;, +                            String values = StringUtil.substringAfter(contents[i], '=');, +                                        cleanString(values));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +            String boundary = StringUtil.substringAfter(headerContentType[mrank], '=');, +            if (boundary == null) {, +            if (boundary.charAt(0) == '"') {, +                String bound = boundary.trim();, +                    boundary = bound.substring(1, index);, +                String charset = StringUtil.substringAfter(headerContentType[crank], '=');, +                if (charset != null) {, +                    return new String[] {"--" + boundary, charset};, +            return new String[] {"--" + boundary};, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +                        String[] values = StringUtil.split(contents[i], '=', 2);, +                        String values = StringUtil.substringAfter(contents[2], '=');, +                        multipartMixedBoundary = "--" + values;, +                            String values = StringUtil.substringAfter(contents[i], '=');, +                                        cleanString(values));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostRequestDecoder.java, +            String boundary = StringUtil.substringAfter(headerContentType[mrank], '=');, +            if (boundary == null) {, +            if (boundary.charAt(0) == '"') {, +                String bound = boundary.trim();, +                    boundary = bound.substring(1, index);, +                String charset = StringUtil.substringAfter(headerContentType[crank], '=');, +                if (charset != null) {, +                    return new String[] {"--" + boundary, charset};, +            return new String[] {"--" + boundary};, +++ b/common/src/main/java/io/netty/util/internal/StringUtil.java, +     * Splits the specified {@link String} with the specified delimiter in maxParts maximum parts., +     * This operation is a simplified and optimized, +     * version of {@link String#split(String, int)}., +     */, +    public static String[] split(String value, char delim, int maxParts) {, +        final int end = value.length();, +        final List<String> res = new ArrayList<String>();, +, +        int start = 0;, +        int cpt = 1;, +        for (int i = 0; i < end && cpt < maxParts; i ++) {, +            if (value.charAt(i) == delim) {, +                if (start == i) {, +                    res.add(EMPTY_STRING);, +                } else {, +                    res.add(value.substring(start, i));, +                }, +                start = i + 1;, +                cpt++;, +            }, +        }, +, +        if (start == 0) { // If no delimiter was found in the value, +            res.add(value);, +        } else {, +            if (start != end) {, +                // Add the last element if it's not empty., +                res.add(value.substring(start, end));, +            } else {, +                // Truncate trailing empty elements., +                for (int i = res.size() - 1; i >= 0; i --) {, +                    if (res.get(i).isEmpty()) {, +                        res.remove(i);, +                    } else {, +                        break;, +                    }, +                }, +            }, +        }, +, +        return res.toArray(new String[res.size()]);, +    }, +, +    /**, +     * Get the item after one char delim if the delim is found (else null)., +     * This operation is a simplified and optimized, +     * version of {@link String#split(String, int)}., +     */, +    public static String substringAfter(String value, char delim) {, +        int pos = value.indexOf(delim);, +        if (pos >= 0) {, +            return value.substring(pos + 1);, +        }, +        return null;, +    }, +, +    /**, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/multipart/HttpPostMultipartRequestDecoder.java, +                        String[] values = StringUtil.split(contents[i], '=', 2);, +                        String values = StringUtil.substringAfter(contents[2], '=');, +                        multipartMixedBoundary = "--" + values;]