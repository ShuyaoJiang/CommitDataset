[+++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockCompressor.java, +import java.util.zip.Deflater;, +, +    private static final boolean USE_ZLIB;, +, +    static {, +        boolean java7 = false;, +        try {, +            Deflater.class.getDeclaredMethod(, +                    "deflate",, +                    new Class<?>[] { byte[].class, int.class, int.class, int.class });, +            java7 = true;, +        } catch (Exception e) {, +            // Ignore, +        }, +, +        USE_ZLIB = java7;, +    }, +, +        if (USE_ZLIB) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockCompressor.java, +import java.util.zip.Deflater;, +, +    private static final boolean USE_ZLIB;, +, +    static {, +        boolean java7 = false;, +        try {, +            Deflater.class.getDeclaredMethod(, +                    "deflate",, +                    new Class<?>[] { byte[].class, int.class, int.class, int.class });, +            java7 = true;, +        } catch (Exception e) {, +            // Ignore, +        }, +, +        USE_ZLIB = java7;, +    }, +, +        if (USE_ZLIB) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecompressor.java, +        return new SpdyHeaderBlockJZlibDecompressor();, +    abstract void decode(ChannelBuffer decompressed);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyFrameDecoder.java, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockCompressor.java, +import java.util.zip.Deflater;, +, +    private static final boolean USE_ZLIB;, +, +    static {, +        boolean java7 = false;, +        try {, +            Deflater.class.getDeclaredMethod(, +                    "deflate",, +                    new Class<?>[] { byte[].class, int.class, int.class, int.class });, +            java7 = true;, +        } catch (Exception e) {, +            // Ignore, +        }, +, +        USE_ZLIB = java7;, +    }, +, +        if (USE_ZLIB) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockDecompressor.java, +        return new SpdyHeaderBlockJZlibDecompressor();, +    abstract void decode(ChannelBuffer decompressed);, +++ b/codec-http/src/main/java/io/netty/handler/codec/spdy/SpdyHeaderBlockJZlibDecompressor.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.spdy;, +, +import io.netty.buffer.ChannelBuffer;, +import io.netty.handler.codec.compression.CompressionException;, +import io.netty.util.internal.jzlib.JZlib;, +import io.netty.util.internal.jzlib.ZStream;, +, +import static io.netty.handler.codec.spdy.SpdyCodecUtil.*;, +, +class SpdyHeaderBlockJZlibDecompressor extends SpdyHeaderBlockDecompressor {, +, +    private final byte[] out = new byte[8192];, +    private final ZStream z = new ZStream();, +]