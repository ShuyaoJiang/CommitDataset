[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval);, +jint Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval);, +jint Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_FREEBIND = ChannelOption.valueOf("IP_FREEBIND");, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +         return -1;, +     }, +     return optval;, +}, +, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +void Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval);, +jint Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java, +    public static final ChannelOption<Boolean> IP_FREEBIND = ChannelOption.valueOf("IP_FREEBIND");, +, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollServerSocketChannelConfig.java, +        return getOptions(super.getOptions(), EpollChannelOption.SO_REUSEPORT, EpollChannelOption.IP_FREEBIND);, +        if (option == EpollChannelOption.IP_FREEBIND) {, +            return (T) Boolean.valueOf(isFreeBind());, +        }, +        } else if (option == EpollChannelOption.IP_FREEBIND) {, +            setFreeBind((Boolean) value);, +, +    /**, +     * Returns {@code true} if <a href="http://man7.org/linux/man-pages/man7/ip.7.html">IP_FREEBIND</a> is enabled,, +     * {@code false} otherwise., +     */, +    public boolean isFreeBind() {, +        return Native.isIpFreeBind(channel.fd().intValue()) != 0;, +    }, +, +    /**, +     * If {@code true} is used <a href="http://man7.org/linux/man-pages/man7/ip.7.html">IP_FREEBIND</a> is enabled,, +     * {@code false} for disable it. Default is disabled., +     */, +    public EpollServerSocketChannelConfig setFreeBind(boolean freeBind) {, +        Native.setIpFreeBind(channel.fd().intValue(), freeBind ? 1: 0);, +        return this;, +    }, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT void JNICALL Java_io_netty_channel_epoll_Native_setIpFreeBind(JNIEnv* env, jclass clazz, jint fd, jint optval) {, +    setOption(env, fd, IPPROTO_IP, IP_FREEBIND, &optval, sizeof(optval));, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_isIpFreeBind(JNIEnv* env, jclass clazz, jint fd) {, +     int optval;, +     if (getOption(env, fd, IPPROTO_TCP, IP_FREEBIND, &optval, sizeof(optval)) == -1) {, +         return -1;]