[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +            headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpContentDecoder.java, +            headers.set(HttpHeaderNames.TRANSFER_ENCODING, HttpHeaderValues.CHUNKED);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentDecoderTest.java, +, +        assertFalse("Content-Length header not removed.", r.headers().contains(HttpHeaderNames.CONTENT_LENGTH));, +, +        String transferEncoding = r.headers().get(HttpHeaderNames.TRANSFER_ENCODING);, +        assertNotNull("Content-length as well as transfer-encoding not set.", transferEncoding);, +        assertEquals("Unexpected transfer-encoding value.", HttpHeaderValues.CHUNKED.toString(), transferEncoding);, +        contentLength = calculateContentLength(req, contentLength);, +        byte[] receivedContent = readContent(req, contentLength);, +        contentLength = calculateContentLength(resp, contentLength);, +        byte[] receivedContent = readContent(resp, contentLength);, +    private static byte[] gzDecompress(byte[] input) {, +    private static byte[] readContent(Queue<Object> req, int contentLength) {, +        byte[] receivedContent = new byte[contentLength];, +        int readCount = 0;, +        for (Object o : req) {, +            if (o instanceof HttpContent) {, +                ByteBuf b = ((HttpContent) o).content();, +                int readableBytes = b.readableBytes();, +                b.readBytes(receivedContent, readCount, readableBytes);, +                readCount += readableBytes;, +            }, +        }, +        return receivedContent;, +    }, +, +    private static int calculateContentLength(Queue<Object> req, int contentLength) {, +        for (Object o : req) {, +            if (o instanceof HttpContent) {, +                assertTrue(((HttpContent) o).refCnt() > 0);, +                ByteBuf b = ((HttpContent) o).content();, +                contentLength += b.readableBytes();, +            }, +        }, +        return contentLength;, +    }, +, +    private static byte[] gzCompress(byte[] input) {, +    private static void assertHasInboundMessages(EmbeddedChannel channel, boolean hasMessages) {, +    private static void assertHasOutboundMessages(EmbeddedChannel channel, boolean hasMessages) {]