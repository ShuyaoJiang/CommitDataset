[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +        super(maskedPayload, allowExtensions);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +        super(maskedPayload, allowExtensions);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +            Map<String, String> customHeaders) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +        super(maskedPayload, allowExtensions);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +            Map<String, String> customHeaders) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +            Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +, +        , +        channel.getPipeline().replace(HttpResponseDecoder.class, "ws-decoder", new WebSocket00FrameDecoder());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +        super(maskedPayload, allowExtensions);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +            Map<String, String> customHeaders) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +            Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +, +        , +        channel.getPipeline().replace(HttpResponseDecoder.class, "ws-decoder", new WebSocket00FrameDecoder());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +     * Constructor specifying the destination web socket location and version to initiate, +            boolean allowExtensions, Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +                new WebSocket08FrameDecoder(false, allowExtensions));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +            int willHaveReadByteCount = framePayloadBytesRead + rbytes;, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket13FrameDecoder.java, +    public WebSocket13FrameDecoder(boolean maskedPayload, boolean allowExtensions) {, +        super(maskedPayload, allowExtensions);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +            Map<String, String> customHeaders) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java, +            Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +, +        , +        channel.getPipeline().replace(HttpResponseDecoder.class, "ws-decoder", new WebSocket00FrameDecoder());, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java, +     * Constructor specifying the destination web socket location and version to initiate, +            boolean allowExtensions, Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +                new WebSocket08FrameDecoder(false, allowExtensions));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java, +     * Constructor specifying the destination web socket location and version to initiate, +            boolean allowExtensions, Map<String, String> customHeaders) {, +        super(webSocketURL, version, subprotocol, customHeaders);, +                new WebSocket13FrameDecoder(false, allowExtensions));, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket00FrameDecoder.java, +    private final int maxFrameSize;, +    public WebSocket00FrameDecoder(int maxFrameSize) {, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocket08FrameDecoder.java, +    public WebSocket08FrameDecoder(boolean maskedPayload, boolean allowExtensions) {]