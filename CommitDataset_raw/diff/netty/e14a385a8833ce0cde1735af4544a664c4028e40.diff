[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslEngine.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.util.Collections;, +    private static final Class<?> SNI_HOSTNAME_CLASS;, +    private static final Method GET_SERVER_NAMES_METHOD;, +    private static final Method SET_SERVER_NAMES_METHOD;, +    private static final Method GET_ASCII_NAME_METHOD;, +, +, +        Class<?> sniHostNameClass = null;, +        Method getAsciiNameMethod = null;, +        Method getServerNamesMethod = null;, +        Method setServerNamesMethod = null;, +        if (PlatformDependent.javaVersion() >= 8) {, +            try {, +                sniHostNameClass = Class.forName("javax.net.ssl.SNIHostName", false,, +                        PlatformDependent.getClassLoader(OpenSslEngine.class));, +                Object sniHostName = sniHostNameClass.getConstructor(String.class).newInstance("netty.io");, +                getAsciiNameMethod = sniHostNameClass.getDeclaredMethod("getAsciiName");, +                @SuppressWarnings("unused"), +                String name = (String) getAsciiNameMethod.invoke(sniHostName);, +, +                getServerNamesMethod = SSLParameters.class.getDeclaredMethod("getServerNames");, +                setServerNamesMethod = SSLParameters.class.getDeclaredMethod("setServerNames", List.class);, +                SSLParameters parameters = new SSLParameters();, +                @SuppressWarnings({ "rawtypes", "unused" }), +                List serverNames = (List) getServerNamesMethod.invoke(parameters);, +                setServerNamesMethod.invoke(parameters, Collections.emptyList());, +            } catch (Throwable ingore) {, +                sniHostNameClass = null;, +                getAsciiNameMethod = null;, +                getServerNamesMethod = null;, +                setServerNamesMethod = null;, +            }, +        }, +        SNI_HOSTNAME_CLASS = sniHostNameClass;, +        GET_ASCII_NAME_METHOD = getAsciiNameMethod;, +        GET_SERVER_NAMES_METHOD = getServerNamesMethod;, +        SET_SERVER_NAMES_METHOD = setServerNamesMethod;, +    private String endPointIdentificationAlgorithm;, +    private Object algorithmConstraints;, +    private List<?> sniHostNames;, +    public synchronized SSLParameters getSSLParameters() {, +        int version = PlatformDependent.javaVersion();, +        if (version >= 7) {, +            if (version >= 8 && SET_SERVER_NAMES_METHOD != null && sniHostNames != null) {, +                try {, +                    SET_SERVER_NAMES_METHOD.invoke(sslParameters, sniHostNames);, +                } catch (IllegalAccessException e) {, +                    throw new Error(e);, +                } catch (InvocationTargetException e) {, +                    throw new Error(e);, +                }, +            }, +    public synchronized void setSSLParameters(SSLParameters sslParameters) {, +        int version = PlatformDependent.javaVersion();, +        if (version >= 7) {, +, +            if (version >= 8 && SNI_HOSTNAME_CLASS != null && clientMode && !isDestroyed()) {, +                assert GET_SERVER_NAMES_METHOD != null;, +                assert GET_ASCII_NAME_METHOD != null;, +                try {, +                    List<?> servernames = (List<?>) GET_SERVER_NAMES_METHOD.invoke(sslParameters);, +                    for (Object serverName : servernames) {, +                        if (SNI_HOSTNAME_CLASS.isInstance(serverName)) {, +                            SSL.setTlsExtHostName(ssl, (String) GET_ASCII_NAME_METHOD.invoke(serverName));, +                        } else {, +                            throw new IllegalArgumentException("Only " + SNI_HOSTNAME_CLASS.getName(), +                                    + " instances are supported, but found: " + serverName);, +                        }, +                    }, +                    sniHostNames = servernames;, +                } catch (IllegalAccessException e) {, +                    throw new Error(e);, +                } catch (InvocationTargetException e) {, +                    throw new Error(e);, +                }, +            }]