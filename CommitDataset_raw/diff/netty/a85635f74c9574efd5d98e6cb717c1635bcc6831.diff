[+++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/websocket/WebSocketServerHandler.java, +        if (!isKeepAlive(req) || res.getStatus().getCode() != 200) {, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/websocket/WebSocketServerHandler.java, +        if (!isKeepAlive(req) || res.getStatus().getCode() != 200) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    @Deprecated, +        return HttpHeaders.isKeepAlive(this);, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/websocket/WebSocketServerHandler.java, +        if (!isKeepAlive(req) || res.getStatus().getCode() != 200) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    @Deprecated, +        return HttpHeaders.isKeepAlive(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(chunked: ");, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/websocket/WebSocketServerHandler.java, +        if (!isKeepAlive(req) || res.getStatus().getCode() != 200) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    @Deprecated, +        return HttpHeaders.isKeepAlive(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(chunked: ");, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpResponse.java, +        buf.append("(chunked: ");, +++ b/src/main/java/org/jboss/netty/example/http/file/HttpStaticFileServerHandler.java, +        if (!isKeepAlive(request)) {, +++ b/src/main/java/org/jboss/netty/example/http/snoop/HttpRequestHandler.java, +        boolean keepAlive = isKeepAlive(request);, +        System.out.println(response.toString());, +++ b/src/main/java/org/jboss/netty/example/http/websocket/WebSocketServerHandler.java, +        if (!isKeepAlive(req) || res.getStatus().getCode() != 200) {, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpMessage.java, +    @Deprecated, +        return HttpHeaders.isKeepAlive(this);, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpRequest.java, +        buf.append("(chunked: ");, +++ b/src/main/java/org/jboss/netty/handler/codec/http/DefaultHttpResponse.java, +        buf.append("(chunked: ");, +++ b/src/main/java/org/jboss/netty/handler/codec/http/HttpHeaders.java, +    /**, +     * Returns {@code true} if and only if the connection can remain open and, +     * thus 'kept alive'.  This methods respects the value of the, +     * {@code "Connection"} header first and then the return value of, +     * {@link HttpVersion#isKeepAliveDefault()}., +     */, +    public static boolean isKeepAlive(HttpMessage message) {, +        String connection = message.getHeader(Names.CONNECTION);, +        if (Values.CLOSE.equalsIgnoreCase(connection)) {, +            return false;, +        }, +, +        if (message.getProtocolVersion().isKeepAliveDefault()) {, +            return !Values.CLOSE.equalsIgnoreCase(connection);, +        } else {, +            return Values.KEEP_ALIVE.equalsIgnoreCase(connection);, +        }, +    }, +, +    /**, +     * Sets the value of the {@code "Connection"} header depending on the, +     * protocol version of the specified message.  This method sets or removes, +     * the {@code "Connection"} header depending on what the default keep alive, +     * mode of the message's protocol version is, as specified by, +     * {@link HttpVersion#isKeepAliveDefault()}., +     * <ul>, +     * <li>If the connection is kept alive by default:, +     *     <ul>, +     *     <li>set to {@code "close"} if {@code keepAlive} is {@code false}.</li>, +     *     <li>remove otherwise.</li>, +     *     </ul></li>, +     * <li>If the connection is closed by default:, +     *     <ul>, +     *     <li>set to {@code "keep-alive"} if {@code keepAlive} is {@code true}.</li>, +     *     <li>remove otherwise.</li>]