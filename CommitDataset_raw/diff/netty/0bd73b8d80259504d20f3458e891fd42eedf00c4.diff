[+++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +     * Replaces the inbound byte buffer with the given buffer.  This returns the, +     * old buffer, so any readable bytes can be handled appropriately by the caller., +     *, +     * @param newInboundByteBuf the new inbound byte buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    ByteBuf replaceInboundByteBuffer(ByteBuf newInboundByteBuf);, +, +    /**, +     * Replaces the inbound message buffer with the given buffer.  This returns the, +     * old buffer, so any pending messages can be handled appropriately by the caller., +     *, +     * @param newInboundMsgBuf the new inbound message buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    <T> MessageBuf<T> replaceInboundMessageBuffer(MessageBuf<T> newInboundMsgBuf);, +, +    /**, +     * Replaces the outbound byte buffer with the given buffer.  This returns the, +     * old buffer, so any readable bytes can be handled appropriately by the caller., +     *, +     * @param newOutboundByteBuf the new inbound byte buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    ByteBuf replaceOutboundByteBuffer(ByteBuf newOutboundByteBuf);, +, +    /**, +     * Replaces the outbound message buffer with the given buffer.  This returns the, +     * old buffer, so any pending messages can be handled appropriately by the caller., +     *, +     * @param newOutboundMsgBuf the new inbound message buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    <T> MessageBuf<T> replaceOutboundMessageBuffer(MessageBuf<T> newOutboundMsgBuf);, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +     * Replaces the inbound byte buffer with the given buffer.  This returns the, +     * old buffer, so any readable bytes can be handled appropriately by the caller., +     *, +     * @param newInboundByteBuf the new inbound byte buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    ByteBuf replaceInboundByteBuffer(ByteBuf newInboundByteBuf);, +, +    /**, +     * Replaces the inbound message buffer with the given buffer.  This returns the, +     * old buffer, so any pending messages can be handled appropriately by the caller., +     *, +     * @param newInboundMsgBuf the new inbound message buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    <T> MessageBuf<T> replaceInboundMessageBuffer(MessageBuf<T> newInboundMsgBuf);, +, +    /**, +     * Replaces the outbound byte buffer with the given buffer.  This returns the, +     * old buffer, so any readable bytes can be handled appropriately by the caller., +     *, +     * @param newOutboundByteBuf the new inbound byte buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    ByteBuf replaceOutboundByteBuffer(ByteBuf newOutboundByteBuf);, +, +    /**, +     * Replaces the outbound message buffer with the given buffer.  This returns the, +     * old buffer, so any pending messages can be handled appropriately by the caller., +     *, +     * @param newOutboundMsgBuf the new inbound message buffer, +     * @return the old buffer., +     * @throws NullPointerException if the argument is {@code null}., +     */, +    <T> MessageBuf<T> replaceOutboundMessageBuffer(MessageBuf<T> newOutboundMsgBuf);, +, +    /**, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +    MessageBuf<Object> inMsgBuf;, +    ByteBuf inByteBuf;, +    MessageBuf<Object> outMsgBuf;, +    ByteBuf outByteBuf;, +    /**, +     * Executes a task on the event loop and waits for it to finish.  If the task is interrupted, then the, +     * current thread will be interrupted and this will return {@code null}.  It is expected that the task, +     * performs any appropriate locking., +     * <p>, +     * If the {@link Callable#call()} call throws a {@link Throwable}, but it is not an instance of, +     * {@link Error}, {@link RuntimeException}, or {@link Exception}, then it is wrapped inside an, +     * {@link AssertionError} and that is thrown instead.</p>, +     *, +     * @param c execute this callable and return its value]