[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelOutboundHandler;, +import io.netty.channel.ChannelPromise;, +import io.netty.handler.codec.ByteToMessageDecoder;, +import io.netty.handler.codec.http2.Http2Exception.CompositeStreamException;, +import io.netty.handler.codec.http2.Http2Exception.StreamException;, +import io.netty.util.concurrent.ScheduledFuture;, +import io.netty.util.internal.OneTimeTask;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +import java.net.SocketAddress;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +    private static final long DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS = MILLISECONDS.convert(30, SECONDS);, +, +    private long gracefulShutdownTimeoutMillis = DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS;, +    /**, +     * Get the amount of time (in milliseconds) this endpoint will wait for all streams to be closed before closing, +     * the connection during the graceful shutdown process., +     */, +    public long gracefulShutdownTimeoutMillis() {, +        return gracefulShutdownTimeoutMillis;, +    }, +, +    /**, +     * Set the amount of time (in milliseconds) this endpoint will wait for all streams to be closed before closing, +     * the connection during the graceful shutdown process., +     * @param gracefulShutdownTimeoutMillis the amount of time (in milliseconds) this endpoint will wait for all, +     * streams to be closed before closing the connection during the graceful shutdown process., +     */, +    public void gracefulShutdownTimeoutMillis(long gracefulShutdownTimeoutMillis) {, +        if (gracefulShutdownTimeoutMillis < 0) {, +            throw new IllegalArgumentException("gracefulShutdownTimeoutMillis: " + gracefulShutdownTimeoutMillis +, +                    " (expected: >= 0)");, +        }, +        this.gracefulShutdownTimeoutMillis = gracefulShutdownTimeoutMillis;, +    }, +, +        doGracefulShutdown(ctx, future, promise);, +    }, +    private void doGracefulShutdown(ChannelHandlerContext ctx, ChannelFuture future, ChannelPromise promise) {, +            closeListener = new ClosingChannelFutureListener(ctx, promise,, +                                        gracefulShutdownTimeoutMillis, MILLISECONDS);, +, +        ChannelPromise promise = ctx.newPromise();, +        ChannelFuture future = goAway(ctx, http2Ex);, +        switch (http2Ex.shutdownHint()) {, +        case GRACEFUL_SHUTDOWN:, +            doGracefulShutdown(ctx, future, promise);, +            break;, +        default:, +            future.addListener(new ClosingChannelFutureListener(ctx, promise));, +            break;, +        }, +        private final ScheduledFuture<?> timeoutTask;, +            timeoutTask = null;, +        }, +, +        ClosingChannelFutureListener(final ChannelHandlerContext ctx, final ChannelPromise promise,, +                                     long timeout, TimeUnit unit) {, +            this.ctx = ctx;, +            this.promise = promise;, +            timeoutTask = ctx.executor().schedule(new OneTimeTask() {, +                @Override, +                public void run() {, +                    ctx.close(promise);, +                }, +            }, timeout, unit);, +            if (timeoutTask != null) {, +                timeoutTask.cancel(false);, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.ByteBufUtil;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelFutureListener;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelOutboundHandler;, +import io.netty.channel.ChannelPromise;, +import io.netty.handler.codec.ByteToMessageDecoder;, +import io.netty.handler.codec.http2.Http2Exception.CompositeStreamException;, +import io.netty.handler.codec.http2.Http2Exception.StreamException;, +import io.netty.util.concurrent.ScheduledFuture;, +import io.netty.util.internal.OneTimeTask;, +import io.netty.util.internal.logging.InternalLogger;, +import io.netty.util.internal.logging.InternalLoggerFactory;, +, +import java.net.SocketAddress;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +]