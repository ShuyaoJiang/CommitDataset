[+++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    ChannelType type();, +, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    ChannelType type();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    ChannelType type();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolders.java, +    private static final ChannelBufferHolder<Object> DISCARD_MESSAGE_BUFFER =, +            new ChannelBufferHolder<Object>(new NoopQueue<Object>());, +    private static final ChannelBufferHolder<Byte> DISCARD_BYTE_BUFFER =, +            new ChannelBufferHolder<Byte>(new NoopByteBuf());, +    @SuppressWarnings("unchecked"), +    public static <E> ChannelBufferHolder<E> discardMessageBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_MESSAGE_BUFFER;, +    public static <E> ChannelBufferHolder<E> discardByteBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_BYTE_BUFFER;, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    ChannelType type();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolders.java, +    private static final ChannelBufferHolder<Object> DISCARD_MESSAGE_BUFFER =, +            new ChannelBufferHolder<Object>(new NoopQueue<Object>());, +    private static final ChannelBufferHolder<Byte> DISCARD_BYTE_BUFFER =, +            new ChannelBufferHolder<Byte>(new NoopByteBuf());, +    @SuppressWarnings("unchecked"), +    public static <E> ChannelBufferHolder<E> discardMessageBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_MESSAGE_BUFFER;, +    public static <E> ChannelBufferHolder<E> discardByteBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_BYTE_BUFFER;, +++ b/transport/src/main/java/io/netty/channel/ChannelType.java, +package io.netty.channel;, +, +public enum ChannelType {, +    STREAM,, +    MESSAGE;, +}, +++ b/transport/src/main/java/io/netty/channel/AbstractServerChannel.java, +        super(null, id, ChannelBufferHolders.discardMessageBuffer());, +    public ChannelType type() {, +        return ChannelType.MESSAGE;, +    }, +, +    @Override, +++ b/transport/src/main/java/io/netty/channel/Channel.java, +    ChannelType type();, +, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolder.java, +++ b/transport/src/main/java/io/netty/channel/ChannelBufferHolders.java, +    private static final ChannelBufferHolder<Object> DISCARD_MESSAGE_BUFFER =, +            new ChannelBufferHolder<Object>(new NoopQueue<Object>());, +    private static final ChannelBufferHolder<Byte> DISCARD_BYTE_BUFFER =, +            new ChannelBufferHolder<Byte>(new NoopByteBuf());, +    @SuppressWarnings("unchecked"), +    public static <E> ChannelBufferHolder<E> discardMessageBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_MESSAGE_BUFFER;, +    public static <E> ChannelBufferHolder<E> discardByteBuffer() {, +        return (ChannelBufferHolder<E>) DISCARD_BYTE_BUFFER;, +++ b/transport/src/main/java/io/netty/channel/ChannelType.java, +package io.netty.channel;]