[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        super.decodeLast(ctx, in, out);, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        super.decodeLast(ctx, in, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        if (in.isReadable()) {, +            // Only call decode() if there is something left in the buffer to decode., +            // See https://github.com/netty/netty/issues/4386, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        super.decodeLast(ctx, in, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        if (in.isReadable()) {, +            // Only call decode() if there is something left in the buffer to decode., +            // See https://github.com/netty/netty/issues/4386, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        if (in.isReadable()) {, +            // Only call decode() if there is something left in the buffer to decode., +            // See https://github.com/netty/netty/issues/4386, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +        super.decodeLast(ctx, in, out);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageCodec.java, +        if (in.isReadable()) {, +            // Only call decode() if there is something left in the buffer to decode., +            // See https://github.com/netty/netty/issues/4386, +    }, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +        if (in.isReadable()) {, +            // Only call decode() if there is something left in the buffer to decode., +            // See https://github.com/netty/netty/issues/4386, +    }, +++ b/codec/src/test/java/io/netty/handler/codec/ByteToMessageDecoderTest.java, +import io.netty.util.internal.ThreadLocalRandom;, +                int readable = in.readableBytes();, +                assertTrue(readable > 0);, +                in.skipBytes(readable);, +, +            @Override, +            protected void decodeLast(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                assertFalse(in.isReadable());, +                out.add("data");, +, +    @Test, +    public void testDecodeLastEmptyBuffer() {, +        EmbeddedChannel channel = new EmbeddedChannel(new ByteToMessageDecoder() {, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                int readable = in.readableBytes();, +                assertTrue(readable > 0);, +                out.add(in.readBytes(readable));, +            }, +        });, +        byte[] bytes = new byte[1024];, +        ThreadLocalRandom.current().nextBytes(bytes);, +, +        assertTrue(channel.writeInbound(Unpooled.wrappedBuffer(bytes)));, +        assertBuffer(Unpooled.wrappedBuffer(bytes), (ByteBuf) channel.readInbound());, +        assertNull(channel.readInbound());, +        assertFalse(channel.finish());, +        assertNull(channel.readInbound());, +    }, +, +    @Test, +    public void testDecodeLastNonEmptyBuffer() {, +        EmbeddedChannel channel = new EmbeddedChannel(new ByteToMessageDecoder() {, +            private boolean decodeLast;, +, +            @Override, +            protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                int readable = in.readableBytes();, +                assertTrue(readable > 0);, +                if (!decodeLast && readable == 1) {, +                    return;, +                }, +                out.add(in.readBytes(decodeLast ? readable : readable - 1));, +            }, +, +            @Override, +            protected void decodeLast(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {, +                assertFalse(decodeLast);, +                decodeLast = true;, +                super.decodeLast(ctx, in, out);, +            }, +        });, +        byte[] bytes = new byte[1024];, +        ThreadLocalRandom.current().nextBytes(bytes);, +, +        assertTrue(channel.writeInbound(Unpooled.wrappedBuffer(bytes)));, +        assertBuffer(Unpooled.wrappedBuffer(bytes, 0, bytes.length - 1), (ByteBuf) channel.readInbound());, +        assertNull(channel.readInbound());, +        assertTrue(channel.finish());, +        assertBuffer(Unpooled.wrappedBuffer(bytes, bytes.length - 1, 1), (ByteBuf) channel.readInbound());, +        assertNull(channel.readInbound());, +    }, +, +    private static void assertBuffer(ByteBuf expected, ByteBuf buffer) {, +        try {, +            assertEquals(expected, buffer);]