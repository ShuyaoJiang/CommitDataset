[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +        for (Http2Error error : errors) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +        for (Http2Error error : errors) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2BlockCompressor.java, +        for (boolean isCondensedInUse : condensedInUse) {, +            writer.writeBoolean(out, isCondensedInUse);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +        for (Http2Error error : errors) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2BlockCompressor.java, +        for (boolean isCondensedInUse : condensedInUse) {, +            writer.writeBoolean(out, isCondensedInUse);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +            String message = t.getMessage();, +            if (message != null && IGNORABLE_ERROR_MESSAGE.matcher(message).matches()) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +        for (Http2Error error : errors) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2BlockCompressor.java, +        for (boolean isCondensedInUse : condensedInUse) {, +            writer.writeBoolean(out, isCondensedInUse);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +            String message = t.getMessage();, +            if (message != null && IGNORABLE_ERROR_MESSAGE.matcher(message).matches()) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/IovArray.java, +        for (ByteBuffer nioBuffer : buffers) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +        for (PoolSubpage<?> head : pages) {, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +        for (PoolArena<?> arena : arenas) {, +            total += arena.numThreadCaches.get();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Error.java, +        for (Http2Error error : errors) {, +++ b/codec/src/main/java/io/netty/handler/codec/compression/Bzip2BlockCompressor.java, +        for (boolean isCondensedInUse : condensedInUse) {, +            writer.writeBoolean(out, isCondensedInUse);, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +            String message = t.getMessage();, +            if (message != null && IGNORABLE_ERROR_MESSAGE.matcher(message).matches()) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/IovArray.java, +        for (ByteBuffer nioBuffer : buffers) {, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/NativeDatagramPacketArray.java, +                    NativeDatagramPacket[] packetsArray = value.packets;, +                    for (NativeDatagramPacket datagramPacket : packetsArray) {, +                        datagramPacket.release();]