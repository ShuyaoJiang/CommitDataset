[+++ b/example/src/main/java/io/netty/example/filetransfer/FileServer.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.filetransfer;, +, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundMessageHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.SocketChannel;, +import io.netty.channel.socket.nio.NioEventLoopGroup;, +import io.netty.channel.socket.nio.NioServerSocketChannel;, +import io.netty.channel.DefaultFileRegion;, +import io.netty.handler.codec.LineBasedFrameDecoder;, +import io.netty.handler.codec.string.StringDecoder;, +import io.netty.handler.codec.string.StringEncoder;, +import io.netty.handler.logging.LogLevel;, +import io.netty.handler.logging.LoggingHandler;, +import io.netty.util.CharsetUtil;, +, +import java.io.File;, +import java.io.FileInputStream;, +import java.net.InetSocketAddress;, +, +/**, + * Server that accept the path of a file an echo back its content., + */, +public class FileServer {, +, +    private final int port;, +, +    public FileServer(int port) {, +        this.port = port;, +    }, +, +    public void run() throws Exception {, +        // Configure the server., +        ServerBootstrap b = new ServerBootstrap();, +        try {, +            b.group(new NioEventLoopGroup(), new NioEventLoopGroup()), +             .channel(NioServerSocketChannel.class), +             .option(ChannelOption.SO_BACKLOG, 100), +             .localAddress(new InetSocketAddress(port)), +             .childOption(ChannelOption.TCP_NODELAY, true), +             .handler(new LoggingHandler(LogLevel.INFO)), +             .childHandler(new ChannelInitializer<SocketChannel>() {, +                 @Override, +                 public void initChannel(SocketChannel ch) throws Exception {, +                     ch.pipeline().addLast(, +                             new StringEncoder(CharsetUtil.UTF_8),, +                             new LineBasedFrameDecoder(8192),, +                             new StringDecoder(CharsetUtil.UTF_8),, +                             new FileHandler());, +                 }, +             });, +, +            // Start the server., +            ChannelFuture f = b.bind().sync();, +, +            // Wait until the server socket is closed., +            f.channel().closeFuture().sync();, +        } finally {, +            // Shut down all event loops to terminate all threads., +            b.shutdown();, +        }, +    }, +, +    public static void main(String[] args) throws Exception {, +        int port;, +        if (args.length > 0) {, +            port = Integer.parseInt(args[0]);, +        } else {, +            port = 8080;, +        }, +        new FileServer(port).run();, +    }, +, +    private static final class FileHandler extends ChannelInboundMessageHandlerAdapter<String> {, +        @Override, +        public void messageReceived(ChannelHandlerContext ctx, String msg) throws Exception {, +            File file = new File(msg);, +            if (file.exists()) {, +                ctx.write(file + " " + file.length() + "\r\n");, +                ctx.sendFile(new DefaultFileRegion(new FileInputStream(file).getChannel(), 0, file.length()));, +]