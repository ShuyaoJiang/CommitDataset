[+++ /dev/null, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +import io.netty.util.Signal;, +    static final Signal REPLAY = new Signal(ReplayingDecoder.class.getName() + ".REPLAY");, +, +        } catch (Signal replay) {, +            replay.expect(REPLAY);, +                } catch (Signal replay) {, +                    replay.expect(REPLAY);, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +import io.netty.util.Signal;, +    static final Signal REPLAY = new Signal(ReplayingDecoder.class.getName() + ".REPLAY");, +, +        } catch (Signal replay) {, +            replay.expect(REPLAY);, +                } catch (Signal replay) {, +                    replay.expect(REPLAY);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.buffer.ChannelBufferIndexFinder;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.util.Signal;, +, +    private static final Signal REPLAY = ReplayingDecoder.REPLAY;, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +import io.netty.util.Signal;, +    static final Signal REPLAY = new Signal(ReplayingDecoder.class.getName() + ".REPLAY");, +, +        } catch (Signal replay) {, +            replay.expect(REPLAY);, +                } catch (Signal replay) {, +                    replay.expect(REPLAY);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.buffer.ChannelBufferIndexFinder;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.util.Signal;, +, +    private static final Signal REPLAY = ReplayingDecoder.REPLAY;, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +public final class AttributeKey<T> extends UniqueKey<T> {, +        super(names, name, valueType);, +++ /dev/null, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoder.java, +import io.netty.util.Signal;, +    static final Signal REPLAY = new Signal(ReplayingDecoder.class.getName() + ".REPLAY");, +, +        } catch (Signal replay) {, +            replay.expect(REPLAY);, +                } catch (Signal replay) {, +                    replay.expect(REPLAY);, +++ b/codec/src/main/java/io/netty/handler/codec/ReplayingDecoderBuffer.java, +import io.netty.buffer.ChannelBuffer;, +import io.netty.buffer.ChannelBufferFactory;, +import io.netty.buffer.ChannelBufferIndexFinder;, +import io.netty.buffer.ChannelBuffers;, +import io.netty.util.Signal;, +, +    private static final Signal REPLAY = ReplayingDecoder.REPLAY;, +++ b/common/src/main/java/io/netty/util/AttributeKey.java, +public final class AttributeKey<T> extends UniqueKey<T> {, +        super(names, name, valueType);, +++ b/common/src/main/java/io/netty/util/Signal.java, +package io.netty.util;, +, +, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +public final class Signal extends Error {, +, +    private static final long serialVersionUID = -221145131122459977L;, +, +    private static final ConcurrentMap<String, Boolean> map =, +            new ConcurrentHashMap<String, Boolean>();, +, +    private final SignalName uname;, +, +    public Signal(String name) {, +        super(name);, +        uname = new SignalName(name);, +    }, +, +    public void expect(Signal signal) {, +        if (this != signal) {, +            throw new IllegalStateException("unexpected signal: " + signal);, +        }, +    }, +, +    @Override, +    public Throwable initCause(Throwable cause) {, +        return this;, +    }, +, +    @Override]