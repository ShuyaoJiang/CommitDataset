[+++ b/transport/src/main/java/io/netty/channel/EventLoop.java, +    EventLoop register(Channel channel, ChannelFuture future);, +++ b/transport/src/main/java/io/netty/channel/EventLoop.java, +    EventLoop register(Channel channel, ChannelFuture future);, +++ b/transport/src/main/java/io/netty/channel/EventLoopException.java, +package io.netty.channel;, +, +public class EventLoopException extends ChannelException {, +, +    private static final long serialVersionUID = -8969100344583703616L;, +, +    public EventLoopException() {, +    }, +, +    public EventLoopException(String message, Throwable cause) {, +        super(message, cause);, +    }, +, +    public EventLoopException(String message) {, +        super(message);, +    }, +, +    public EventLoopException(Throwable cause) {, +        super(cause);, +    }, +, +}, +++ b/transport/src/main/java/io/netty/channel/EventLoop.java, +    EventLoop register(Channel channel, ChannelFuture future);, +++ b/transport/src/main/java/io/netty/channel/EventLoopException.java, +package io.netty.channel;, +, +public class EventLoopException extends ChannelException {, +, +    private static final long serialVersionUID = -8969100344583703616L;, +, +    public EventLoopException() {, +    }, +, +    public EventLoopException(String message, Throwable cause) {, +        super(message, cause);, +    }, +, +    public EventLoopException(String message) {, +        super(message);, +    }, +, +    public EventLoopException(Throwable cause) {, +        super(cause);, +    }, +, +}, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoop.java, +package io.netty.channel;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.atomic.AtomicInteger;, +, +public class MultithreadEventLoop implements EventLoop {, +, +    private final EventLoop[] children;, +    private final AtomicInteger childIndex = new AtomicInteger();, +, +, +    public MultithreadEventLoop(Class<? extends SingleThreadEventLoop> loopType, int nThreads) {, +        this(loopType, nThreads, Executors.defaultThreadFactory());, +    }, +, +    public MultithreadEventLoop(Class<? extends SingleThreadEventLoop> loopType, int nThreads, ThreadFactory threadFactory) {, +        if (loopType == null) {, +            throw new NullPointerException("loopType");, +        }, +        if (nThreads <= 0) {, +            throw new IllegalArgumentException("nThreads: " + nThreads + " (expected: > 0)");, +        }, +        if (threadFactory == null) {, +            throw new NullPointerException("threadFactory");, +        }, +, +        children = new EventLoop[nThreads];, +        for (int i = 0; i < nThreads; i ++) {, +            try {, +                children[i] = loopType.getConstructor(ThreadFactory.class).newInstance(threadFactory);, +            } catch (Exception e) {, +                throw new EventLoopException("failed to create a child event loop: " + loopType.getName(), e);, +            } finally {, +                for (int j = 0; j < i; j ++) {, +                    children[j].shutdown();, +                }, +            }, +        }]