[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.Collection;, +import java.util.Set;, +    private final Collection<AbstractEventExecutor> selfCollection = Collections.singleton(this);, +    public <E extends EventExecutor> Set<E> children() {, +        return (Set<E>) selfCollection;, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.Collection;, +import java.util.Set;, +    private final Collection<AbstractEventExecutor> selfCollection = Collections.singleton(this);, +    public <E extends EventExecutor> Set<E> children() {, +        return (Set<E>) selfCollection;, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +import java.util.Set;, +, +     * Returns an unmodifiable singleton set which contains itself., +     */, +    @Override, +    <E extends EventExecutor> Set<E> children();, +, +    /**, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.Collection;, +import java.util.Set;, +    private final Collection<AbstractEventExecutor> selfCollection = Collections.singleton(this);, +    public <E extends EventExecutor> Set<E> children() {, +        return (Set<E>) selfCollection;, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +import java.util.Set;, +, +     * Returns an unmodifiable singleton set which contains itself., +     */, +    @Override, +    <E extends EventExecutor> Set<E> children();, +, +    /**, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, +import java.util.Set;, +     * Returns {@code true} if and only if all {@link EventExecutor}s managed by this {@link EventExecutorGroup}, +     * are being {@linkplain #shutdownGracefully() shut down gracefuclly} or was {@linkplain #isShutdown() shut down}., +     * Returns the {@link Future} which is notified when all {@link EventExecutor}s managed by this, +     * {@link EventExecutorGroup} have been terminated., +     * Returns one of the {@link EventExecutor}s managed by this {@link EventExecutorGroup}., +     * @deprecated Use {@link #children()} instead., +    @Deprecated, +    /**, +     * Returns the unmodifiable set of {@link EventExecutor}s managed by this {@link EventExecutorGroup}., +     */, +    <E extends EventExecutor> Set<E> children();, +, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractEventExecutor.java, +import java.util.Collection;, +import java.util.Set;, +    private final Collection<AbstractEventExecutor> selfCollection = Collections.singleton(this);, +    public <E extends EventExecutor> Set<E> children() {, +        return (Set<E>) selfCollection;, +    }, +, +    @Override, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutor.java, +import java.util.Set;, +, +     * Returns an unmodifiable singleton set which contains itself., +     */, +    @Override, +    <E extends EventExecutor> Set<E> children();, +, +    /**, +++ b/common/src/main/java/io/netty/util/concurrent/EventExecutorGroup.java, +import java.util.Set;, +     * Returns {@code true} if and only if all {@link EventExecutor}s managed by this {@link EventExecutorGroup}, +     * are being {@linkplain #shutdownGracefully() shut down gracefuclly} or was {@linkplain #isShutdown() shut down}., +     * Returns the {@link Future} which is notified when all {@link EventExecutor}s managed by this, +     * {@link EventExecutorGroup} have been terminated., +     * Returns one of the {@link EventExecutor}s managed by this {@link EventExecutorGroup}., +     * @deprecated Use {@link #children()} instead., +    @Deprecated, +    /**, +     * Returns the unmodifiable set of {@link EventExecutor}s managed by this {@link EventExecutorGroup}., +     */, +    <E extends EventExecutor> Set<E> children();, +, +++ b/common/src/main/java/io/netty/util/concurrent/MultithreadEventExecutorGroup.java, +import java.util.LinkedHashSet;, +    private final Set<EventExecutor> readonlyChildren;, +        children = new EventExecutor[nThreads];, +                            // Let the caller handle the interruption., +, +        Set<EventExecutor> childrenSet = new LinkedHashSet<EventExecutor>(children.length);, +        Collections.addAll(childrenSet, children);, +        readonlyChildren = Collections.unmodifiableSet(childrenSet);]