[+++ b/common/src/main/java/io/netty/util/concurrent/AbstractFuture.java, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractFuture.java, +++ b/common/src/main/java/io/netty/util/concurrent/CompleteFuture.java, +, +    @Override, +    public boolean isCancellable() {, +        return false;, +    }, +, +    @Override, +    public boolean isCancelled() {, +        return false;, +    }, +, +    @Override, +    public boolean cancel(boolean mayInterruptIfRunning) {, +        return false;, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/AbstractFuture.java, +++ b/common/src/main/java/io/netty/util/concurrent/CompleteFuture.java, +, +    @Override, +    public boolean isCancellable() {, +        return false;, +    }, +, +    @Override, +    public boolean isCancelled() {, +        return false;, +    }, +, +    @Override, +    public boolean cancel(boolean mayInterruptIfRunning) {, +        return false;, +    }, +++ b/common/src/main/java/io/netty/util/concurrent/DefaultPromise.java, +import java.util.concurrent.CancellationException;, +    private static final Signal UNCANCELLABLE = new Signal(DefaultPromise.class.getName() + ".UNCANCELLABLE");, +    public boolean isCancelled() {, +        return isCancelled0(result);, +    }, +, +    private static boolean isCancelled0(Object result) {, +        return result instanceof CauseHolder && ((CauseHolder) result).cause instanceof CancellationException;, +    }, +, +    @Override, +    public boolean isCancellable() {, +        return result == null;, +    }, +, +    @Override, +        return isDone0(result);, +    }, +, +    private static boolean isDone0(Object result) {, +        return result != null && result != UNCANCELLABLE;, +        if (result == null || result == UNCANCELLABLE) {, +        Object result = this.result;, +        if (result instanceof CauseHolder) {, +            return ((CauseHolder) result).cause;, +    @Override, +    public boolean cancel(boolean mayInterruptIfRunning) {, +        Object result = this.result;, +        if (isDone0(result) || result == UNCANCELLABLE) {, +            return false;, +        }, +, +        synchronized (this) {, +            // Allow only once., +            result = this.result;, +            if (isDone0(result) || result == UNCANCELLABLE) {, +                return false;, +            }, +, +            this.result = new CauseHolder(new CancellationException());, +            if (hasWaiters()) {, +                notifyAll();, +            }, +        }, +        return true;, +    }, +, +    @Override, +    public boolean setUncancellable() {, +        Object result = this.result;, +        if (isDone0(result)) {, +            return isCancelled0(result);, +        }, +, +        synchronized (this) {, +            // Allow only once., +            result = this.result;, +            if (isDone0(result)) {, +                return isCancelled0(result);, +            }, +, +            this.result = UNCANCELLABLE;, +        }, +        return true;]