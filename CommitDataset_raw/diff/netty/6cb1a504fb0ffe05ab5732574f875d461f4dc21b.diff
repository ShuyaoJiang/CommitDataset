[+++ b/src/main/java/org/jboss/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import java.lang.reflect.Array;, +abstract class AbstractCodecEmbedder<E> implements CodecEmbedder<E> {, +    public final E poll() {, +        return (E) productQueue.poll();, +    public final E peek() {, +        return (E) productQueue.peek();, +    }, +, +    public final Object[] pollAll() {, +        return pollAll(new Object[size()]);, +    }, +, +    @SuppressWarnings("unchecked"), +    public final <T> T[] pollAll(T[] a) {, +        if (a == null) {, +            throw new NullPointerException("a");, +        }, +, +        final int size = size();, +, +        // Create a new array if the specified one is too small., +        if (a.length < size) {, +            a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);, +        }, +, +        for (int i = 0;; i ++) {, +            T product = (T) poll();, +            if (product == null) {, +                break;, +            }, +            a[i] = product;, +        }, +, +        // Put the terminator if necessary., +        if (a.length > size) {, +            a[size] = null;, +        }, +, +        return a;, +    }, +, +    public final int size() {, +        return productQueue.size();, +++ b/src/main/java/org/jboss/netty/handler/codec/embedder/AbstractCodecEmbedder.java, +import java.lang.reflect.Array;, +abstract class AbstractCodecEmbedder<E> implements CodecEmbedder<E> {, +    public final E poll() {, +        return (E) productQueue.poll();, +    public final E peek() {, +        return (E) productQueue.peek();, +    }, +, +    public final Object[] pollAll() {, +        return pollAll(new Object[size()]);, +    }, +, +    @SuppressWarnings("unchecked"), +    public final <T> T[] pollAll(T[] a) {, +        if (a == null) {, +            throw new NullPointerException("a");, +        }, +, +        final int size = size();, +, +        // Create a new array if the specified one is too small., +        if (a.length < size) {, +            a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);, +        }, +, +        for (int i = 0;; i ++) {, +            T product = (T) poll();, +            if (product == null) {, +                break;, +            }, +            a[i] = product;, +        }, +, +        // Put the terminator if necessary., +        if (a.length > size) {, +            a[size] = null;, +        }, +, +        return a;, +    }, +, +    public final int size() {, +        return productQueue.size();, +++ b/src/main/java/org/jboss/netty/handler/codec/embedder/CodecEmbedder.java, +import java.util.Collection;, +, +public interface CodecEmbedder<E> {, +    E poll();, +    E peek();, +, +    /**, +     * Consumes all encoded or decoded output from the product queue.  The, +     * output object is generated by the offered input objects.  The behavior, +     * of this method is identical with {@link Collection#toArray()} except that, +     * the product queue is cleared.]