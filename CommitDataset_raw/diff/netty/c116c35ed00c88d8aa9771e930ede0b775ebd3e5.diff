[+++ b/handler/src/main/java/io/netty/handler/ssl/util/BouncyCastleSelfSignedCertGenerator.java, +import java.util.Date;, +import static io.netty.handler.ssl.util.SelfSignedCertificate.newSelfSignedCertificate;, +    static String[] generate(String fqdn, KeyPair keypair, SecureRandom random, Date notBefore, Date notAfter), +            throws Exception {, +                owner, new BigInteger(64, random), notBefore, notAfter, owner, keypair.getPublic());, +++ b/handler/src/main/java/io/netty/handler/ssl/util/BouncyCastleSelfSignedCertGenerator.java, +import java.util.Date;, +import static io.netty.handler.ssl.util.SelfSignedCertificate.newSelfSignedCertificate;, +    static String[] generate(String fqdn, KeyPair keypair, SecureRandom random, Date notBefore, Date notAfter), +            throws Exception {, +                owner, new BigInteger(64, random), notBefore, notAfter, owner, keypair.getPublic());, +++ b/handler/src/main/java/io/netty/handler/ssl/util/OpenJdkSelfSignedCertGenerator.java, +import java.util.Date;, +    static String[] generate(String fqdn, KeyPair keypair, SecureRandom random, Date notBefore, Date notAfter), +            throws Exception {, +        info.set(X509CertInfo.VALIDITY, new CertificateValidity(notBefore, notAfter));, +++ b/handler/src/main/java/io/netty/handler/ssl/util/BouncyCastleSelfSignedCertGenerator.java, +import java.util.Date;, +import static io.netty.handler.ssl.util.SelfSignedCertificate.newSelfSignedCertificate;, +    static String[] generate(String fqdn, KeyPair keypair, SecureRandom random, Date notBefore, Date notAfter), +            throws Exception {, +                owner, new BigInteger(64, random), notBefore, notAfter, owner, keypair.getPublic());, +++ b/handler/src/main/java/io/netty/handler/ssl/util/OpenJdkSelfSignedCertGenerator.java, +import java.util.Date;, +    static String[] generate(String fqdn, KeyPair keypair, SecureRandom random, Date notBefore, Date notAfter), +            throws Exception {, +        info.set(X509CertInfo.VALIDITY, new CertificateValidity(notBefore, notAfter));, +++ b/handler/src/main/java/io/netty/handler/ssl/util/SelfSignedCertificate.java, +import io.netty.util.internal.SystemPropertyUtil;, +    private static final Date DEFAULT_NOT_BEFORE = new Date(SystemPropertyUtil.getLong(, +            "io.netty.selfSignedCertificate.defaultNotBefore", System.currentTimeMillis() - 86400000L * 365));, +    private static final Date DEFAULT_NOT_AFTER = new Date(SystemPropertyUtil.getLong(, +            "io.netty.selfSignedCertificate.defaultNotAfter", 253402300799000L));, +        this(DEFAULT_NOT_BEFORE, DEFAULT_NOT_AFTER);, +    }, +, +    /**, +     * Creates a new instance., +     * @param notBefore Certificate is not valid before this time, +     * @param notAfter Certificate is not valid after this time, +     */, +    public SelfSignedCertificate(Date notBefore, Date notAfter) throws CertificateException {, +        this(fqdn, DEFAULT_NOT_BEFORE, DEFAULT_NOT_AFTER);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param fqdn a fully qualified domain name, +     * @param notBefore Certificate is not valid before this time, +     * @param notAfter Certificate is not valid after this time, +     */, +    public SelfSignedCertificate(String fqdn, Date notBefore, Date notAfter) throws CertificateException {, +        this(fqdn, ThreadLocalInsecureRandom.current(), 1024, notBefore, notAfter);, +        this(fqdn, random, bits, DEFAULT_NOT_BEFORE, DEFAULT_NOT_AFTER);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param fqdn a fully qualified domain name, +     * @param random the {@link java.security.SecureRandom} to use, +     * @param bits the number of bits of the generated private key, +     * @param notBefore Certificate is not valid before this time, +     * @param notAfter Certificate is not valid after this time, +     */, +    public SelfSignedCertificate(String fqdn, SecureRandom random, int bits, Date notBefore, Date notAfter), +            throws CertificateException {, +            paths = OpenJdkSelfSignedCertGenerator.generate(fqdn, keypair, random, notBefore, notAfter);, +                paths = BouncyCastleSelfSignedCertGenerator.generate(fqdn, keypair, random, notBefore, notAfter);]