[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpResponseStatus.java, +import io.netty.handler.codec.AsciiString;, +    public static final HttpResponseStatus CONTINUE = httpResponseStatus(100, "Continue");, +    public static final HttpResponseStatus SWITCHING_PROTOCOLS = httpResponseStatus(101, "Switching Protocols");, +    public static final HttpResponseStatus PROCESSING = httpResponseStatus(102, "Processing");, +    public static final HttpResponseStatus OK = httpResponseStatus(200, "OK");, +    public static final HttpResponseStatus CREATED = httpResponseStatus(201, "Created");, +    public static final HttpResponseStatus ACCEPTED = httpResponseStatus(202, "Accepted");, +            httpResponseStatus(203, "Non-Authoritative Information");, +    public static final HttpResponseStatus NO_CONTENT = httpResponseStatus(204, "No Content");, +    public static final HttpResponseStatus RESET_CONTENT = httpResponseStatus(205, "Reset Content");, +    public static final HttpResponseStatus PARTIAL_CONTENT = httpResponseStatus(206, "Partial Content");, +    public static final HttpResponseStatus MULTI_STATUS = httpResponseStatus(207, "Multi-Status");, +    public static final HttpResponseStatus MULTIPLE_CHOICES = httpResponseStatus(300, "Multiple Choices");, +    public static final HttpResponseStatus MOVED_PERMANENTLY = httpResponseStatus(301, "Moved Permanently");, +    public static final HttpResponseStatus FOUND = httpResponseStatus(302, "Found");, +    public static final HttpResponseStatus SEE_OTHER = httpResponseStatus(303, "See Other");, +    public static final HttpResponseStatus NOT_MODIFIED = httpResponseStatus(304, "Not Modified");, +    public static final HttpResponseStatus USE_PROXY = httpResponseStatus(305, "Use Proxy");, +    public static final HttpResponseStatus TEMPORARY_REDIRECT = httpResponseStatus(307, "Temporary Redirect");, +    public static final HttpResponseStatus BAD_REQUEST = httpResponseStatus(400, "Bad Request");, +    public static final HttpResponseStatus UNAUTHORIZED = httpResponseStatus(401, "Unauthorized");, +    public static final HttpResponseStatus PAYMENT_REQUIRED = httpResponseStatus(402, "Payment Required");, +    public static final HttpResponseStatus FORBIDDEN = httpResponseStatus(403, "Forbidden");, +    public static final HttpResponseStatus NOT_FOUND = httpResponseStatus(404, "Not Found");, +    public static final HttpResponseStatus METHOD_NOT_ALLOWED = httpResponseStatus(405, "Method Not Allowed");, +    public static final HttpResponseStatus NOT_ACCEPTABLE = httpResponseStatus(406, "Not Acceptable");, +            httpResponseStatus(407, "Proxy Authentication Required");, +    public static final HttpResponseStatus REQUEST_TIMEOUT = httpResponseStatus(408, "Request Timeout");, +    public static final HttpResponseStatus CONFLICT = httpResponseStatus(409, "Conflict");, +    public static final HttpResponseStatus GONE = httpResponseStatus(410, "Gone");, +    public static final HttpResponseStatus LENGTH_REQUIRED = httpResponseStatus(411, "Length Required");, +    public static final HttpResponseStatus PRECONDITION_FAILED = httpResponseStatus(412, "Precondition Failed");, +            httpResponseStatus(413, "Request Entity Too Large");, +    public static final HttpResponseStatus REQUEST_URI_TOO_LONG = httpResponseStatus(414, "Request-URI Too Long");, +    public static final HttpResponseStatus UNSUPPORTED_MEDIA_TYPE = httpResponseStatus(415, "Unsupported Media Type");, +            httpResponseStatus(416, "Requested Range Not Satisfiable");, +    public static final HttpResponseStatus EXPECTATION_FAILED = httpResponseStatus(417, "Expectation Failed");, +, +    /**, +     * 421 Misdirected Request, +     *, +     * <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#section-9.1.2">421 Status Code</a>, +     */, +    public static final HttpResponseStatus MISDIRECTED_REQUEST = httpResponseStatus(421, "Misdirected Request");, +    public static final HttpResponseStatus UNPROCESSABLE_ENTITY = httpResponseStatus(422, "Unprocessable Entity");, +    public static final HttpResponseStatus LOCKED = httpResponseStatus(423, "Locked");, +    public static final HttpResponseStatus FAILED_DEPENDENCY = httpResponseStatus(424, "Failed Dependency");, +    public static final HttpResponseStatus UNORDERED_COLLECTION = httpResponseStatus(425, "Unordered Collection");, +    public static final HttpResponseStatus UPGRADE_REQUIRED = httpResponseStatus(426, "Upgrade Required");, +    public static final HttpResponseStatus PRECONDITION_REQUIRED = httpResponseStatus(428, "Precondition Required");, +    public static final HttpResponseStatus TOO_MANY_REQUESTS = httpResponseStatus(429, "Too Many Requests");, +            httpResponseStatus(431, "Request Header Fields Too Large");, +    public static final HttpResponseStatus INTERNAL_SERVER_ERROR = httpResponseStatus(500, "Internal Server Error");, +    public static final HttpResponseStatus NOT_IMPLEMENTED = httpResponseStatus(501, "Not Implemented");, +    public static final HttpResponseStatus BAD_GATEWAY = httpResponseStatus(502, "Bad Gateway");, +    public static final HttpResponseStatus SERVICE_UNAVAILABLE = httpResponseStatus(503, "Service Unavailable");, +    public static final HttpResponseStatus GATEWAY_TIMEOUT = httpResponseStatus(504, "Gateway Timeout");, +            httpResponseStatus(505, "HTTP Version Not Supported");, +    public static final HttpResponseStatus VARIANT_ALSO_NEGOTIATES = httpResponseStatus(506, "Variant Also Negotiates");, +    public static final HttpResponseStatus INSUFFICIENT_STORAGE = httpResponseStatus(507, "Insufficient Storage");, +    public static final HttpResponseStatus NOT_EXTENDED = httpResponseStatus(510, "Not Extended");, +            httpResponseStatus(511, "Network Authentication Required");, +        case 421:, +            return MISDIRECTED_REQUEST;, +    private final AsciiString codeAsString;, +        codeAsString = new AsciiString(Integer.toString(code));, +     * Returns the status code as {@link AsciiString}., +     */, +    public AsciiString codeAsText() {, +        return codeAsString;, +    }, +, +    /**, +, +    private static HttpResponseStatus httpResponseStatus(int statusCode, String reasonPhrase) {, +        return new HttpResponseStatus(statusCode, reasonPhrase, true);, +    }]