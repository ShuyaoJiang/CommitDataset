[+++ b/README.md, +- __3.2__ branch contains code for Netty 3.x, +++ b/README.md, +- __3.2__ branch contains code for Netty 3.x, +++ b/all/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +            <phase>generate-resources</phase>, +            <phase>generate-resources</phase>, +            <phase>generate-sources</phase>, +            <version>2.8.1</version>, +                <id>javadoc</id>, +++ b/README.md, +- __3.2__ branch contains code for Netty 3.x, +++ b/all/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +            <phase>generate-resources</phase>, +            <phase>generate-resources</phase>, +            <phase>generate-sources</phase>, +            <version>2.8.1</version>, +                <id>javadoc</id>, +++ b/buffer/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +++ b/README.md, +- __3.2__ branch contains code for Netty 3.x, +++ b/all/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +            <phase>generate-resources</phase>, +            <phase>generate-resources</phase>, +            <phase>generate-sources</phase>, +            <version>2.8.1</version>, +                <id>javadoc</id>, +++ b/buffer/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    protected AbstractByteBuf(ByteOrder endianness) {, +        if (readerIndex == writerIndex) {, +            clear();, +        setBytes(0, this, readerIndex, writerIndex - readerIndex);, +        writerIndex -= readerIndex;, +        markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +        markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +        readerIndex = 0;, +    @Override, +    public void ensureWritableBytes(int writableBytes) {, +        if (writableBytes > writableBytes()) {, +            throw new IndexOutOfBoundsException("Writable bytes exceeded: Got ", +                    + writableBytes + ", maximum is " + writableBytes());, +        ByteBuf buf = factory().getBuffer(order(), length);, +++ b/README.md, +- __3.2__ branch contains code for Netty 3.x, +++ b/all/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +            <phase>generate-resources</phase>, +            <phase>generate-resources</phase>, +            <phase>generate-sources</phase>, +            <version>2.8.1</version>, +                <id>javadoc</id>, +++ b/buffer/pom.xml, +    <version>4.0.0.Alpha1-SNAPSHOT</version>, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    protected AbstractByteBuf(ByteOrder endianness) {, +        if (readerIndex == writerIndex) {, +            clear();, +        setBytes(0, this, readerIndex, writerIndex - readerIndex);, +        writerIndex -= readerIndex;, +        markedReaderIndex = Math.max(markedReaderIndex - readerIndex, 0);, +        markedWriterIndex = Math.max(markedWriterIndex - readerIndex, 0);, +        readerIndex = 0;, +    @Override, +    public void ensureWritableBytes(int writableBytes) {, +        if (writableBytes > writableBytes()) {, +            throw new IndexOutOfBoundsException("Writable bytes exceeded: Got ", +                    + writableBytes + ", maximum is " + writableBytes());, +        ByteBuf buf = factory().getBuffer(order(), length);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufFactory.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import java.nio.ByteOrder;, +, +/**, + * A skeletal implementation of {@link ByteBufFactory}., + */, +public abstract class AbstractByteBufFactory implements ByteBufFactory {, +, +    private final ByteOrder defaultOrder;]