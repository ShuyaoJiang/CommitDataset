[+++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            // Only check freeSweepAllocationThreshold when there are caches in use., +            if (freeSweepAllocationThreshold < 1) {, +                throw new IllegalArgumentException("freeSweepAllocationThreshold: ", +                        + freeSweepAllocationThreshold + " (expected: > 0)");, +            }, +        if (cacheSize > 0 && numCaches > 0) {, +        if (cacheSize > 0 && maxCachedBufferCapacity > 0) {, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            // Only check freeSweepAllocationThreshold when there are caches in use., +            if (freeSweepAllocationThreshold < 1) {, +                throw new IllegalArgumentException("freeSweepAllocationThreshold: ", +                        + freeSweepAllocationThreshold + " (expected: > 0)");, +            }, +        if (cacheSize > 0 && numCaches > 0) {, +        if (cacheSize > 0 && maxCachedBufferCapacity > 0) {, +++ b/buffer/src/test/java/io/netty/buffer/PooledByteBufAllocatorTest.java, +    public void testWithoutUseCacheForAllThreads() {, +        assertFalse(Thread.currentThread() instanceof FastThreadLocalThread);, +, +        PooledByteBufAllocator pool = new PooledByteBufAllocator(, +                /*preferDirect=*/ false,, +                /*nHeapArena=*/ 1,, +                /*nDirectArena=*/ 1,, +                /*pageSize=*/8192,, +                /*maxOrder=*/ 11,, +                /*tinyCacheSize=*/ 0,, +                /*smallCacheSize=*/ 0,, +                /*normalCacheSize=*/ 0,, +                /*useCacheForAllThreads=*/ false);, +        ByteBuf buf = pool.buffer(1);, +        buf.release();, +    }, +, +    @Test]