[+++ b/transport/src/main/java/io/netty/channel/DefaultChannelId.java, +import io.netty.util.internal.PlatformDependent;, +import java.net.UnknownHostException;, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +        InetAddress bestInetAddr = null;, +        try {, +            bestInetAddr = InetAddress.getByAddress(new byte[] { 127, 0, 0, 1 });, +        } catch (UnknownHostException e) {, +            // Never happens., +            PlatformDependent.throwException(e);, +        }, +        Map<NetworkInterface, InetAddress> ifaces = new LinkedHashMap<NetworkInterface, InetAddress>();, +                if (addrs.hasMoreElements()) {, +                    InetAddress a = addrs.nextElement();, +                    if (!a.isLoopbackAddress()) {, +                        ifaces.put(iface, a);, +                    }, +        for (Entry<NetworkInterface, InetAddress> entry: ifaces.entrySet()) {, +            NetworkInterface iface = entry.getKey();, +            InetAddress inetAddr = entry.getValue();, +            int res = compareAddresses(bestMacAddr, macAddr);, +            if (res < 0) {, +                bestInetAddr = inetAddr;, +            } else if (res == 0) {, +                if (compareAddresses(bestInetAddr, inetAddr) < 0) {, +                    bestMacAddr = macAddr;, +                    bestInetAddr = inetAddr;, +                }, +    /**, +     * @return positive - current is better, 0 - cannot tell from MAC addr, negative - candidate is better., +     */, +    private static int compareAddresses(byte[] current, byte[] candidate) {, +            return 1;, +            return 1;, +            return 1;, +            return 1;, +                return current.length - candidate.length;, +                return 1;, +                return -1;, +                return current.length - candidate.length;, +    /**, +     * @return positive - current is better, 0 - cannot tell, negative - candidate is better, +     */, +    private static int compareAddresses(InetAddress current, InetAddress candidate) {, +        return scoreAddress(current) - scoreAddress(candidate);, +    }, +, +    private static int scoreAddress(InetAddress addr) {, +        if (addr.isAnyLocalAddress()) {, +            return 0;, +        }, +        if (addr.isMulticastAddress()) {, +            return 1;, +        }, +        if (addr.isLinkLocalAddress()) {, +            return 2;, +        }, +        if (addr.isSiteLocalAddress()) {, +            return 3;, +        }, +, +        return 4;, +    }, +]