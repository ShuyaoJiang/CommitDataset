[+++ b/transport/src/main/java/io/netty/channel/nio/SelectedSelectionKeySet.java, +import java.util.NoSuchElementException;, +        return new Iterator<SelectionKey>() {, +            private int idx;, +, +            @Override, +            public boolean hasNext() {, +                return idx < size;, +            }, +, +            @Override, +            public SelectionKey next() {, +                if (!hasNext()) {, +                    throw new NoSuchElementException();, +                }, +                return keys[idx++];, +            }, +        };, +++ b/transport/src/main/java/io/netty/channel/nio/SelectedSelectionKeySet.java, +import java.util.NoSuchElementException;, +        return new Iterator<SelectionKey>() {, +            private int idx;, +, +            @Override, +            public boolean hasNext() {, +                return idx < size;, +            }, +, +            @Override, +            public SelectionKey next() {, +                if (!hasNext()) {, +                    throw new NoSuchElementException();, +                }, +                return keys[idx++];, +            }, +        };, +++ b/transport/src/test/java/io/netty/channel/nio/SelectedSelectionKeySetTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +import static org.junit.Assert.*;, +    @Mock, +    private SelectionKey mockKey3;, +, +, +    @Test, +    public void iterator() {, +        SelectedSelectionKeySet set = new SelectedSelectionKeySet();, +        assertTrue(set.add(mockKey));, +        assertTrue(set.add(mockKey2));, +        Iterator<SelectionKey> keys = set.iterator();, +        assertTrue(keys.hasNext());, +        assertSame(mockKey, keys.next());, +        assertTrue(keys.hasNext());, +        assertSame(mockKey2, keys.next());, +        assertFalse(keys.hasNext());, +, +        try {, +            keys.next();, +            fail();, +        } catch (NoSuchElementException expected) {, +            // expected, +        }, +, +        try {, +            keys.remove();, +            fail();, +        } catch (UnsupportedOperationException expected) {, +            // expected, +        }, +    }, +, +    @Test, +    public void contains() {, +        SelectedSelectionKeySet set = new SelectedSelectionKeySet();, +        assertTrue(set.add(mockKey));, +        assertTrue(set.add(mockKey2));, +        assertTrue(set.contains(mockKey));, +        assertTrue(set.contains(mockKey2));, +        assertFalse(set.contains(mockKey3));, +    }, +, +    @Test, +    public void remove() {, +        SelectedSelectionKeySet set = new SelectedSelectionKeySet();, +        assertTrue(set.add(mockKey));, +        assertFalse(set.remove(mockKey2));, +        try {, +            set.remove(mockKey);, +            fail();, +        } catch (UnsupportedOperationException expected) {, +            // expected, +        }, +    }]