[+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java, +    private static final int SELECTOR_AUTO_REBUILD_THRESHOLD =, +            SystemPropertyUtil.getInt("io.netty.selectorAutoRebuildThreshold", 16);, +, +            logger.debug("Selector auto-rebuild threshold: {}", SELECTOR_AUTO_REBUILD_THRESHOLD);, +    private int prematureSelectorReturns;, +        resetPrematureSelectorReturns();, +            newSelector = openSelector();, +                    select();, +            if (selector.selectNow() != 0) {, +                resetPrematureSelectorReturns();, +            }, +    private void select() throws IOException {, +        Selector selector = this.selector;, +                long startTimeNanos = System.nanoTime();, +                if (selector.select(delayMillis) == 0) {, +                    if (wakenUp.get() || hasTasks()) {, +                        // Waken up by user or the task queue has a pending task., +                        return;, +                    }, +, +                    long delayNanos = delayNanos();, +                    if (delayNanos <= 0) {, +                        // Waken up to handle a delayed task., +                        return;, +                    }, +, +                    if (System.nanoTime() - startTimeNanos < delayNanos >>> 1) {, +                        // Returned way before the specified timeout with no selected keys., +                        // This may be because of the JDK /dev/epoll bug - increment the counter., +                        if (++ prematureSelectorReturns >= SELECTOR_AUTO_REBUILD_THRESHOLD) {, +                            // The selector returned prematurely many times in a row., +                            // Rebuild the selector to work around the problem., +                            logger.warn(, +                                    "Selector.select() returned prematurely {} times in a row; rebuilding selector.",, +                                    prematureSelectorReturns);, +                            rebuildSelector();, +                            selector = this.selector;, +, +                            // Select again to populate selectedKeys., +                            selector.selectNow();, +                        }, +                        resetPrematureSelectorReturns();, +                    }, +                } else {, +                    // reset counter, +                    resetPrematureSelectorReturns();, +                }, +            } else {, +                if (selector.selectNow() != 0) {, +                    resetPrematureSelectorReturns();, +                }, +            if (selector.selectNow() != 0) {, +                resetPrematureSelectorReturns();, +            }, +, +    private void resetPrematureSelectorReturns() {, +        int prematureSelectorReturns = this.prematureSelectorReturns;, +        if (prematureSelectorReturns != 0) {, +            if (logger.isWarnEnabled()) {, +                logger.warn("Selector.select() returned prematurely {} times in a row.", prematureSelectorReturns);, +            }, +            this.prematureSelectorReturns = 0;, +        }, +    }]