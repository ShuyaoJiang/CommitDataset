[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.internal.StringUtil;, +, +        // Verify the subprotocol that we received from the server., +        // This must be one of our expected subprotocols - or null/empty if we didn't want to speak a subprotocol, +        String receivedProtocol = response.headers().get(HttpHeaders.Names.SEC_WEBSOCKET_PROTOCOL);, +        receivedProtocol = receivedProtocol != null ? receivedProtocol.trim() : null;, +        String expectedProtocol = expectedSubprotocol != null ? expectedSubprotocol : "";, +        boolean protocolValid = false;, +, +        if (expectedProtocol.isEmpty() && receivedProtocol == null) {, +            // No subprotocol required and none received, +            protocolValid = true;, +            setActualSubprotocol(expectedSubprotocol); // null or "" - we echo what the user requested, +        } else if (!expectedProtocol.isEmpty() && receivedProtocol != null && !receivedProtocol.isEmpty()) {, +            // We require a subprotocol and received one -> verify it, +            for (String protocol : StringUtil.split(expectedSubprotocol, ',')) {, +                if (protocol.trim().equals(receivedProtocol)) {, +                    protocolValid = true;, +                    setActualSubprotocol(receivedProtocol);, +                    break;, +                }, +            }, +        } // else mixed cases - which are all errors, +, +        if (!protocolValid) {, +            throw new WebSocketHandshakeException(String.format(, +                    "Invalid subprotocol. Actual: %s. Expected one of: %s",, +                    receivedProtocol, expectedSubprotocol));, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java, +import io.netty.util.internal.StringUtil;, +, +        // Verify the subprotocol that we received from the server., +        // This must be one of our expected subprotocols - or null/empty if we didn't want to speak a subprotocol, +        String receivedProtocol = response.headers().get(HttpHeaders.Names.SEC_WEBSOCKET_PROTOCOL);, +        receivedProtocol = receivedProtocol != null ? receivedProtocol.trim() : null;, +        String expectedProtocol = expectedSubprotocol != null ? expectedSubprotocol : "";, +        boolean protocolValid = false;, +, +        if (expectedProtocol.isEmpty() && receivedProtocol == null) {, +            // No subprotocol required and none received, +            protocolValid = true;, +            setActualSubprotocol(expectedSubprotocol); // null or "" - we echo what the user requested, +        } else if (!expectedProtocol.isEmpty() && receivedProtocol != null && !receivedProtocol.isEmpty()) {, +            // We require a subprotocol and received one -> verify it, +            for (String protocol : StringUtil.split(expectedSubprotocol, ',')) {, +                if (protocol.trim().equals(receivedProtocol)) {, +                    protocolValid = true;, +                    setActualSubprotocol(receivedProtocol);, +                    break;, +                }, +            }, +        } // else mixed cases - which are all errors, +, +        if (!protocolValid) {, +            throw new WebSocketHandshakeException(String.format(, +                    "Invalid subprotocol. Actual: %s. Expected one of: %s",, +                    receivedProtocol, expectedSubprotocol));, +        }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientProtocolHandler.java, +     * Returns the used handshaker, +     */, +    public WebSocketClientHandshaker handshaker() { return handshaker; }, +, +    /**]