[+++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    final Lock writeLock = new ReentrantLock();, +            worker.write(NioDatagramChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    final Lock writeLock = new ReentrantLock();, +            worker.write(NioDatagramChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +            channel.worker.write(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    final Lock writeLock = new ReentrantLock();, +            worker.write(NioDatagramChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +            channel.worker.write(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +        write((NioDatagramChannel) k.attachment());, +    void write(final NioDatagramChannel channel) {, +        if (!channel.writeLock.tryLock()) {, +            rescheduleWrite(channel);, +        final Queue<MessageEvent> writeBuffer = channel.writeBufferQueue;, +        final int writeSpinCount = channel.getConfig().getWriteSpinCount();, +        if (addOpWrite) {, +                int interestOps = channel.getRawInterestOps();, +                    setInterestOps0(channel, interestOps);, +        } else if (removeOpWrite) {, +                int interestOps = channel.getRawInterestOps();, +                    setInterestOps0(channel, interestOps);, +                }, +            }, +    private void rescheduleWrite(final NioDatagramChannel channel) {, +        if (channel.writeTaskInTaskQueue.compareAndSet(false, true)) {, +            // "add" the channels writeTask to the writeTaskQueue., +            boolean offered = writeTaskQueue.offer(channel.writeTask);, +            assert offered;, +        }, +, +        final Selector selector = this.selector;, +        if (selector != null) {, +            if (wakenUp.compareAndSet(false, true)) {, +                selector.wakeup();, +            }, +        // Override OP_WRITE flag - a user cannot change this flag., +        interestOps &= ~Channel.OP_WRITE;, +        interestOps |= channel.getRawInterestOps() & Channel.OP_WRITE;, +, +            final boolean changed;, +                changed = setInterestOps0(channel, interestOps);, +            }, +, +            future.setSuccess();, +            if (changed) {, +                fireChannelInterestChanged(channel);, +            }, +        } catch (final CancelledKeyException e) {, +            // setInterestOps() was called on a closed channel., +            ClosedChannelException cce = new ClosedChannelException();, +            future.setFailure(cce);, +            fireExceptionCaught(channel, cce);, +        } catch (final Throwable t) {, +            future.setFailure(t);, +            fireExceptionCaught(channel, t);, +        }, +    }, +, +    private boolean setInterestOps0(NioDatagramChannel channel, int interestOps) {, +            return false;, +                return true;, +                    return true;, +                        return true;, +        return false;, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramChannel.java, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    final Lock writeLock = new ReentrantLock();, +            worker.write(NioDatagramChannel.this);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramPipelineSink.java, +            channel.worker.write(channel);, +++ b/src/main/java/org/jboss/netty/channel/socket/nio/NioDatagramWorker.java, +        write((NioDatagramChannel) k.attachment());, +    void write(final NioDatagramChannel channel) {, +        if (!channel.writeLock.tryLock()) {, +            rescheduleWrite(channel);, +        final Queue<MessageEvent> writeBuffer = channel.writeBufferQueue;, +        final int writeSpinCount = channel.getConfig().getWriteSpinCount();, +        if (addOpWrite) {, +                int interestOps = channel.getRawInterestOps();, +                    setInterestOps0(channel, interestOps);, +        } else if (removeOpWrite) {, +                int interestOps = channel.getRawInterestOps();, +                    setInterestOps0(channel, interestOps);, +                }, +            }, +    private void rescheduleWrite(final NioDatagramChannel channel) {, +        if (channel.writeTaskInTaskQueue.compareAndSet(false, true)) {, +            // "add" the channels writeTask to the writeTaskQueue.]