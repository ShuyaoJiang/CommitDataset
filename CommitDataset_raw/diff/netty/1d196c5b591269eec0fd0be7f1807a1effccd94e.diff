[+++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, +import io.netty.channel.ChannelException;, +    private ByteBuf decodeOut;, +    public void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {, +            decodeOut = null;, +        }, +        for (;;) {, +            PendingWrite write = pendingUnencryptedWrites.poll();, +            if (write == null) {, +                break;, +            }, +            write.fail(new ChannelException("Pending write on removal of SslHandler"));, +                unwrapLater(ctx);, +    private void unwrapLater(ChannelHandlerContext ctx) throws SSLException {, +            MessageList<Object> messageList = MessageList.newInstance();, +            decode(ctx, internalBuffer(),  messageList);, +            if (messageList.isEmpty()) {, +                messageList.recycle();, +            } else {, +                ctx.fireMessageReceived(messageList);, +            }, +    }, +, +                unwrapLater(ctx);, +    protected void decode(ChannelHandlerContext ctx, ByteBuf in, MessageList<Object> out) throws SSLException {, +            // the previous packet was consumed so try to read the length of the next packet, +            final int readableBytes = in.readableBytes();, +                // not enough bytes readable to read the packet length, +                // Not an SSL/TLS packet, +        if (in.readableBytes() < packetLength) {, +            // wait until the whole packet can be read, +        try {, +            // slice out the whole packet so unwrap will only be called with complete packets, +            int readerIndex = in.readerIndex();, +            in.skipBytes(packetLength);, +            unwrap(ctx, in.nioBuffer(readerIndex, packetLength), out);, +        } finally {, +            this.packetLength = 0;, +        }, +    }, +, +    private void unwrap(ChannelHandlerContext ctx, ByteBuffer packet, MessageList<Object> out) throws SSLException {, +                SSLEngineResult result = unwrap(engine, packet, decodeOut);, +                out.add(decodeOut);, +    private static SSLEngineResult unwrap(SSLEngine engine, ByteBuffer in, ByteBuf out) throws SSLException {, +            SSLEngineResult result = engine.unwrap(in, out0);]