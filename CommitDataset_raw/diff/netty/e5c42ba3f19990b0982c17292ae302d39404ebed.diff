[+++ b/src/main/java/org/jboss/netty/group/DefaultChannelGroup.java, +import java.util.ArrayList;, +import java.util.Collection;, +import org.jboss.netty.channel.ServerChannel;, +import org.jboss.netty.util.CombinedIterator;, +    private final ConcurrentMap<UUID, Channel> serverChannels = new ConcurrentHashMap<UUID, Channel>();, +    private final ConcurrentMap<UUID, Channel> nonServerChannels = new ConcurrentHashMap<UUID, Channel>();, +        return nonServerChannels.isEmpty() && serverChannels.isEmpty();, +        return nonServerChannels.size() + serverChannels.size();, +        Channel c = nonServerChannels.get(id);, +        if (c != null) {, +            return c;, +        } else {, +            return serverChannels.get(id);, +        }, +            return nonServerChannels.containsKey(o) || serverChannels.containsKey(o);, +            Channel c = (Channel) o;, +            if (o instanceof ServerChannel) {, +                return serverChannels.containsKey(c.getId());, +            } else {, +                return nonServerChannels.containsKey(c.getId());, +            }, +        ConcurrentMap<UUID, Channel> map =, +            channel instanceof ServerChannel? serverChannels : nonServerChannels;, +, +        boolean added = map.putIfAbsent(channel.getId(), channel) == null;, +            c = nonServerChannels.remove(o);, +            if (c == null) {, +                c = serverChannels.remove(o);, +            }, +            c = (Channel) o;, +            if (c instanceof ServerChannel) {, +                c = serverChannels.remove(c.getId());, +            } else {, +                c = nonServerChannels.remove(c.getId());, +            }, +        nonServerChannels.clear();, +        serverChannels.clear();, +        return new CombinedIterator<Channel>(, +                serverChannels.values().iterator(),, +                nonServerChannels.values().iterator());, +        Collection<Channel> channels = new ArrayList<Channel>(size());, +        channels.addAll(serverChannels.values());, +        channels.addAll(nonServerChannels.values());, +        return channels.toArray();, +        Collection<Channel> channels = new ArrayList<Channel>(size());, +        channels.addAll(serverChannels.values());, +        channels.addAll(nonServerChannels.values());, +        return channels.toArray(a);, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.getId(), c.close().awaitUninterruptibly());, +        }, +        for (Channel c: nonServerChannels.values()) {, +, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.getId(), c.disconnect().awaitUninterruptibly());, +        }, +        for (Channel c: nonServerChannels.values()) {, +, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.getId(), c.setInterestOps(interestOps).awaitUninterruptibly());, +        }, +        for (Channel c: nonServerChannels.values()) {, +, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.getId(), c.setReadable(readable).awaitUninterruptibly());, +        }, +        for (Channel c: nonServerChannels.values()) {, +, +, +        for (Channel c: serverChannels.values()) {, +            futures.put(c.getId(), c.unbind().awaitUninterruptibly());, +        }, +        for (Channel c: nonServerChannels.values()) {, +, +++ b/src/main/java/org/jboss/netty/group/DefaultChannelGroup.java, +import java.util.ArrayList;, +import java.util.Collection;, +import org.jboss.netty.channel.ServerChannel;, +import org.jboss.netty.util.CombinedIterator;, +    private final ConcurrentMap<UUID, Channel> serverChannels = new ConcurrentHashMap<UUID, Channel>();, +    private final ConcurrentMap<UUID, Channel> nonServerChannels = new ConcurrentHashMap<UUID, Channel>();, +        return nonServerChannels.isEmpty() && serverChannels.isEmpty();, +        return nonServerChannels.size() + serverChannels.size();, +        Channel c = nonServerChannels.get(id);, +        if (c != null) {, +            return c;, +        } else {, +            return serverChannels.get(id);, +        }, +            return nonServerChannels.containsKey(o) || serverChannels.containsKey(o);, +            Channel c = (Channel) o;, +            if (o instanceof ServerChannel) {, +                return serverChannels.containsKey(c.getId());, +            } else {, +                return nonServerChannels.containsKey(c.getId());]