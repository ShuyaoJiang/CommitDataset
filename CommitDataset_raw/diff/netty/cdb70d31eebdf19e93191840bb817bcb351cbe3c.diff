[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_MAX_COMPONENTS = 16;, +    protected static CompositeByteBuf toLeakAwareBuffer(CompositeByteBuf buf) {, +        ResourceLeak leak;, +        switch (ResourceLeakDetector.getLevel()) {, +            case SIMPLE:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new SimpleLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            case ADVANCED:, +            case PARANOID:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new AdvancedLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            default:, +                break;, +        }, +        return buf;, +    }, +, +        return toLeakAwareBuffer(new CompositeByteBuf(this, false, maxNumComponents));, +        return toLeakAwareBuffer(new CompositeByteBuf(this, true, maxNumComponents));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_MAX_COMPONENTS = 16;, +    protected static CompositeByteBuf toLeakAwareBuffer(CompositeByteBuf buf) {, +        ResourceLeak leak;, +        switch (ResourceLeakDetector.getLevel()) {, +            case SIMPLE:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new SimpleLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            case ADVANCED:, +            case PARANOID:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new AdvancedLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            default:, +                break;, +        }, +        return buf;, +    }, +, +        return toLeakAwareBuffer(new CompositeByteBuf(this, false, maxNumComponents));, +        return toLeakAwareBuffer(new CompositeByteBuf(this, true, maxNumComponents));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    public int refCnt() {, +    public boolean release() {, +    public boolean release(int decrement) {, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBufAllocator.java, +    static final int DEFAULT_MAX_COMPONENTS = 16;, +    protected static CompositeByteBuf toLeakAwareBuffer(CompositeByteBuf buf) {, +        ResourceLeak leak;, +        switch (ResourceLeakDetector.getLevel()) {, +            case SIMPLE:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new SimpleLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            case ADVANCED:, +            case PARANOID:, +                leak = AbstractByteBuf.leakDetector.open(buf);, +                if (leak != null) {, +                    buf = new AdvancedLeakAwareCompositeByteBuf(buf, leak);, +                }, +                break;, +            default:, +                break;, +        }, +        return buf;, +    }, +, +        return toLeakAwareBuffer(new CompositeByteBuf(this, false, maxNumComponents));, +        return toLeakAwareBuffer(new CompositeByteBuf(this, true, maxNumComponents));, +++ b/buffer/src/main/java/io/netty/buffer/AbstractReferenceCountedByteBuf.java, +    public int refCnt() {, +    public boolean release() {, +    public boolean release(int decrement) {, +++ b/buffer/src/main/java/io/netty/buffer/AdvancedLeakAwareByteBuf.java, +    static void recordLeakNonRefCountingOperation(ResourceLeak leak) {, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);, +        recordLeakNonRefCountingOperation(leak);]