[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return delegate.frameListener();, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return delegate.frameListener();, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return listener;, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return delegate.frameListener();, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return listener;, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionDecoder.java, +     * Get the {@link Http2FrameListener} which will be notified when frames are decoded., +     */, +    Http2FrameListener frameListener();, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DecoratingHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return delegate.frameListener();, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +    public Http2FrameListener frameListener() {, +        return listener;, +    }, +, +    @Override, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionDecoder.java, +     * Get the {@link Http2FrameListener} which will be notified when frames are decoded., +     */, +    Http2FrameListener frameListener();, +, +    /**, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.SMALLEST_MAX_CONCURRENT_STREAMS;, +    private long gracefulShutdownTimeoutMillis;, +    /**, +     * Builder which builds {@link Http2ConnectionHandler} objects., +     */, +    public static final class Builder extends BuilderBase<Http2ConnectionHandler, Builder> {, +        @Override, +        public Http2ConnectionHandler build0(Http2ConnectionDecoder decoder,, +                                             Http2ConnectionEncoder encoder) {, +            return new Http2ConnectionHandler(decoder, encoder, initialSettings());, +     * Base class for a {@code builder} of any subclass of {@link Http2ConnectionHandler}., +     * @param <T> The type of handler created by this builder., +     * @param <B> The concrete type for this builder., +    public abstract static class BuilderBase<T extends Http2ConnectionHandler, B extends BuilderBase<T, B>> {, +        private Http2Settings initialSettings = new Http2Settings();, +        private Http2FrameListener frameListener;, +        private Http2FrameLogger frameLogger;, +        private boolean validateHeaders = true;, +        private boolean server = true;, +        private int encoderMaxConcurrentStreams = SMALLEST_MAX_CONCURRENT_STREAMS;, +        private long gracefulShutdownTimeoutMillis = DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS;, +, +        /**, +         * Sets the listener for inbound frames., +         * This listener will only be set if the decoder's listener is {@code null}., +         */, +        public B frameListener(Http2FrameListener listener) {, +            frameListener = listener;, +            return thisB();, +        }, +, +        /**, +         * Determine if HTTP headers should be validated according to, +         * <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.6">RFC 7540, 8.1.2.6</a>., +         */, +        public B validateHeaders(boolean validate) {, +            validateHeaders = validate;, +            return thisB();, +        }, +, +        /**, +         * Get if HTTP headers should be validated according to, +         * <a href="https://tools.ietf.org/html/rfc7540#section-8.1.2.6">RFC 7540, 8.1.2.6</a>., +         */, +        public final boolean isValidateHeaders() {]