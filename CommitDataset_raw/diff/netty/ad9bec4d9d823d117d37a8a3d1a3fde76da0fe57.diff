[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +extern int pipe2(int pipefd[2], int flags) __attribute__((weak));, +, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_pipe0(JNIEnv* env, jclass clazz) {, +    int fd[2];, +    if (pipe2) {, +        // we can just use pipe2 and so save extra syscalls;, +        if (pipe2(fd, O_NONBLOCK) != 0) {, +            return -errno;, +        }, +    } else {, +         if (pipe(fd) == 0) {, +            if (fcntl(fd[0], F_SETFD, O_NONBLOCK) < 0) {, +                int err = errno;, +                close(fd[0]);, +                close(fd[1]);, +                return -err;, +            }, +            if (fcntl(fd[1], F_SETFD, O_NONBLOCK) < 0) {, +                int err = errno;, +                close(fd[0]);, +                close(fd[1]);, +                return -err;, +            }, +         } else {, +            return -errno;, +         }, +    }, +, +    // encode the fds into a long, +    return (((long) fd[0]) << 32) | (fd[1] & 0xffffffffL);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_splice0(JNIEnv* env, jclass clazz, jint fd, jint offIn, jint fdOut, jint offOut, jint len) {, +    ssize_t res;, +    int err;, +    loff_t off_in = offIn >= 0 ? (loff_t) offIn : NULL;, +    loff_t off_out = offOut >= 0 ? (loff_t) offOut : NULL;, +, +    do {, +       res = splice(fd, off_in, fdOut, off_out, (size_t) len, SPLICE_F_NONBLOCK | SPLICE_F_MOVE);, +       // keep on splicing if it was interrupted, +    } while (res == -1 && ((err = errno) == EINTR));, +, +    if (res < 0) {, +        return -err;, +    }, +    return (jint) res;, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +extern int pipe2(int pipefd[2], int flags) __attribute__((weak));, +, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_pipe0(JNIEnv* env, jclass clazz) {, +    int fd[2];, +    if (pipe2) {, +        // we can just use pipe2 and so save extra syscalls;, +        if (pipe2(fd, O_NONBLOCK) != 0) {, +            return -errno;, +        }, +    } else {, +         if (pipe(fd) == 0) {, +            if (fcntl(fd[0], F_SETFD, O_NONBLOCK) < 0) {, +                int err = errno;, +                close(fd[0]);, +                close(fd[1]);, +                return -err;, +            }, +            if (fcntl(fd[1], F_SETFD, O_NONBLOCK) < 0) {, +                int err = errno;, +                close(fd[0]);, +                close(fd[1]);, +                return -err;, +            }, +         } else {, +            return -errno;, +         }, +    }, +, +    // encode the fds into a long, +    return (((long) fd[0]) << 32) | (fd[1] & 0xffffffffL);, +}, +, +JNIEXPORT jint JNICALL Java_io_netty_channel_epoll_Native_splice0(JNIEnv* env, jclass clazz, jint fd, jint offIn, jint fdOut, jint offOut, jint len) {, +    ssize_t res;, +    int err;, +    loff_t off_in = offIn >= 0 ? (loff_t) offIn : NULL;, +    loff_t off_out = offOut >= 0 ? (loff_t) offOut : NULL;, +, +    do {, +       res = splice(fd, off_in, fdOut, off_out, (size_t) len, SPLICE_F_NONBLOCK | SPLICE_F_MOVE);, +       // keep on splicing if it was interrupted, +    } while (res == -1 && ((err = errno) == EINTR));, +, +    if (res < 0) {, +        return -err;, +    }, +    return (jint) res;, +}, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +]