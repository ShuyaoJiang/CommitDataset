[+++ /dev/null, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, + * method and check for a {@link SslHandshakeCompletionEvent}., +    private static final SslHandshakeCompletionEvent HANDSHAKE_SUCCESS_EVENT = new SslHandshakeCompletionEvent(null);, +            ctx.fireUserEventTriggered(new SslHandshakeCompletionEvent(cause));, +++ /dev/null, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandler.java, + * method and check for a {@link SslHandshakeCompletionEvent}., +    private static final SslHandshakeCompletionEvent HANDSHAKE_SUCCESS_EVENT = new SslHandshakeCompletionEvent(null);, +            ctx.fireUserEventTriggered(new SslHandshakeCompletionEvent(cause));, +++ b/handler/src/main/java/io/netty/handler/ssl/SslHandshakeCompletionEvent.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +, +/**, + * Event that is fired once the SSL handshake is complete, which may be because it was successful or there, + * was an error., + */, +public final class SslHandshakeCompletionEvent {, +, +    private final Throwable cause;, +, +    SslHandshakeCompletionEvent(Throwable cause) {, +        this.cause = cause;, +    }, +, +    /**, +     * Return {@code true} if the handshake was successful, +     */, +    public boolean isSuccess() {, +        return cause == null;, +    }, +, +    /**, +     * Return the {@link Throwable} if {@link #isSuccess()} returns {@code false}, +     * and so the handshake failed., +     */, +    public Throwable cause() {, +        return cause;, +    }, +}]