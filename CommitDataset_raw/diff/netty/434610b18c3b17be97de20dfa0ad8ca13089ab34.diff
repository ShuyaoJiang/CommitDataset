[+++ b/transport/src/main/java/io/netty/channel/aio/AbstractAioChannel.java, +    private SocketAddress requestedRemoteAddress;, +                    requestedRemoteAddress = remoteAddress;, +                                ConnectException cause =, +                                        new ConnectException("connection timed out: " + remoteAddress);, +                                if (connectFuture != null && connectFuture.tryFailure(cause)) {, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }, +            if (t instanceof ConnectException) {, +                Throwable newT = new ConnectException(t.getMessage() + ": " + requestedRemoteAddress);, +                newT.setStackTrace(t.getStackTrace());, +                t = newT;, +            }, +++ b/transport/src/main/java/io/netty/channel/aio/AbstractAioChannel.java, +    private SocketAddress requestedRemoteAddress;, +                    requestedRemoteAddress = remoteAddress;, +                                ConnectException cause =, +                                        new ConnectException("connection timed out: " + remoteAddress);, +                                if (connectFuture != null && connectFuture.tryFailure(cause)) {, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }, +            if (t instanceof ConnectException) {, +                Throwable newT = new ConnectException(t.getMessage() + ": " + requestedRemoteAddress);, +                newT.setStackTrace(t.getStackTrace());, +                t = newT;, +            }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +    private SocketAddress requestedRemoteAddress;, +                        requestedRemoteAddress = remoteAddress;, +                                    ConnectException cause =, +                                            new ConnectException("connection timed out: " + remoteAddress);, +                                    if (connectPromise != null && connectPromise.tryFailure(cause)) {, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }, +                if (t instanceof ConnectException) {, +                    Throwable newT = new ConnectException(t.getMessage() + ": " + requestedRemoteAddress);, +                    newT.setStackTrace(t.getStackTrace());, +                    t = newT;, +                }, +, +++ b/transport/src/main/java/io/netty/channel/aio/AbstractAioChannel.java, +    private SocketAddress requestedRemoteAddress;, +                    requestedRemoteAddress = remoteAddress;, +                                ConnectException cause =, +                                        new ConnectException("connection timed out: " + remoteAddress);, +                                if (connectFuture != null && connectFuture.tryFailure(cause)) {, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }, +            if (t instanceof ConnectException) {, +                Throwable newT = new ConnectException(t.getMessage() + ": " + requestedRemoteAddress);, +                newT.setStackTrace(t.getStackTrace());, +                t = newT;, +            }, +++ b/transport/src/main/java/io/netty/channel/nio/AbstractNioChannel.java, +    private SocketAddress requestedRemoteAddress;, +                        requestedRemoteAddress = remoteAddress;, +                                    ConnectException cause =, +                                            new ConnectException("connection timed out: " + remoteAddress);, +                                    if (connectPromise != null && connectPromise.tryFailure(cause)) {, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }, +                if (t instanceof ConnectException) {, +                    Throwable newT = new ConnectException(t.getMessage() + ": " + requestedRemoteAddress);, +                    newT.setStackTrace(t.getStackTrace());, +                    t = newT;, +                }, +, +++ b/transport/src/main/java/io/netty/channel/oio/AbstractOioChannel.java, +import java.net.ConnectException;, +                    if (t instanceof ConnectException) {, +                        Throwable newT = new ConnectException(t.getMessage() + ": " + remoteAddress);, +                        newT.setStackTrace(t.getStackTrace());, +                        t = newT;, +                    }]