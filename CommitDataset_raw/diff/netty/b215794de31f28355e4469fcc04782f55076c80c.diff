[+++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +#include <sys/sendfile.h>, +static jfieldID fileChannelFieldId = NULL;, +static jfieldID transferredFieldId = NULL;, +static jfieldID fdFieldId = NULL;, +static jfieldID fileDescriptorFieldId = NULL;, +, +, +static jlong netty_epoll_linuxsocket_sendFile(JNIEnv* env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +    jobject fileChannel = (*env)->GetObjectField(env, fileRegion, fileChannelFieldId);, +    if (fileChannel == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get DefaultFileRegion.file");, +        return -1;, +    }, +    jobject fileDescriptor = (*env)->GetObjectField(env, fileChannel, fileDescriptorFieldId);, +    if (fileDescriptor == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileChannelImpl.fd");, +        return -1;, +    }, +    jint srcFd = (*env)->GetIntField(env, fileDescriptor, fdFieldId);, +    if (srcFd == -1) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get FileDescriptor.fd");, +        return -1;, +    }, +    ssize_t res;, +    off_t offset = base_off + off;, +    int err;, +    do {, +      res = sendfile(fd, srcFd, &offset, (size_t) len);, +    } while (res == -1 && ((err = errno) == EINTR));, +    if (res < 0) {, +        return -err;, +    }, +    if (res > 0) {, +        // update the transferred field in DefaultFileRegion, +        (*env)->SetLongField(env, fileRegion, transferredFieldId, off + res);, +    }, +, +    return res;, +}, +  // "sendFile" has a dynamic signature, +    return fixed_method_table_size + 2; // 2 is for the dynamic method signatures., +, +    ++dynamicMethod;, +    dynamicTypeName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/DefaultFileRegion;JJJ)J");, +    dynamicMethod->name = "sendFile";, +    dynamicMethod->signature = netty_unix_util_prepend("(IL", dynamicTypeName);, +    dynamicMethod->fnPtr = (void *) netty_epoll_linuxsocket_sendFile;, +    free(dynamicTypeName);, +    nettyClassName = netty_unix_util_prepend(packagePrefix, "io/netty/channel/DefaultFileRegion");, +    jclass fileRegionCls = (*env)->FindClass(env, nettyClassName);, +    free(nettyClassName);, +    nettyClassName = NULL;, +    if (fileRegionCls == NULL) {, +        return JNI_ERR;, +    }, +    fileChannelFieldId = (*env)->GetFieldID(env, fileRegionCls, "file", "Ljava/nio/channels/FileChannel;");, +    if (fileChannelFieldId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.file");, +        return JNI_ERR;, +    }, +    transferredFieldId = (*env)->GetFieldID(env, fileRegionCls, "transferred", "J");, +    if (transferredFieldId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get field ID: DefaultFileRegion.transferred");, +        return JNI_ERR;, +    }, +, +    jclass fileChannelCls = (*env)->FindClass(env, "sun/nio/ch/FileChannelImpl");, +    if (fileChannelCls == NULL) {, +        // pending exception..., +        return JNI_ERR;, +    }, +    fileDescriptorFieldId = (*env)->GetFieldID(env, fileChannelCls, "fd", "Ljava/io/FileDescriptor;");, +    if (fileDescriptorFieldId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileChannelImpl.fd");, +        return JNI_ERR;, +    }, +, +    jclass fileDescriptorCls = (*env)->FindClass(env, "java/io/FileDescriptor");, +    if (fileDescriptorCls == NULL) {, +        // pending exception..., +        return JNI_ERR;, +    }, +    fdFieldId = (*env)->GetFieldID(env, fileDescriptorCls, "fd", "I");, +    if (fdFieldId == NULL) {, +        netty_unix_errors_throwRuntimeException(env, "failed to get field ID: FileDescriptor.fd");, +        return JNI_ERR;, +    }, +, +++ b/transport-native-epoll/src/main/c/netty_epoll_linuxsocket.c, +#include <sys/sendfile.h>, +static jfieldID fileChannelFieldId = NULL;, +static jfieldID transferredFieldId = NULL;, +static jfieldID fdFieldId = NULL;, +static jfieldID fileDescriptorFieldId = NULL;, +, +, +static jlong netty_epoll_linuxsocket_sendFile(JNIEnv* env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +    jobject fileChannel = (*env)->GetObjectField(env, fileRegion, fileChannelFieldId);, +    if (fileChannel == NULL) {]