[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        pipeline = newChannelPipeline();, +        pipeline = newChannelPipeline();, +    /**, +     * Returns a new {@link DefaultChannelPipeline} instance., +     */, +    protected DefaultChannelPipeline newChannelPipeline() {, +        return new DefaultChannelPipeline(this);, +    }, +, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +        pipeline = newChannelPipeline();, +        pipeline = newChannelPipeline();, +    /**, +     * Returns a new {@link DefaultChannelPipeline} instance., +     */, +    protected DefaultChannelPipeline newChannelPipeline() {, +        return new DefaultChannelPipeline(this);, +    }, +, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +import io.netty.util.internal.ObjectUtil;, +public class DefaultChannelPipeline implements ChannelPipeline {, +    private static final String HEAD_NAME = generateName0(HeadContext.class);, +    private static final String TAIL_NAME = generateName0(TailContext.class);, +, +    private final Channel channel;, +    // - protected as this should only be called from within the same package or if someone extends, +    //   DefaultChannelPipeline., +    // - Tied to AbstractChannel as we need to ensure that callHandlerAddedForAllHandlers() is correctly called., +    protected DefaultChannelPipeline(AbstractChannel channel) {, +        this.channel = ObjectUtil.checkNotNull(channel, "channel");, +    final Object touch(Object msg, AbstractChannelHandlerContext next) {, +    public final Channel channel() {, +    public final ChannelPipeline addFirst(String name, ChannelHandler handler) {, +    public final ChannelPipeline addFirst(EventExecutorGroup group, String name, ChannelHandler handler) {, +    public final ChannelPipeline addLast(String name, ChannelHandler handler) {, +    public final ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler) {, +    public final ChannelPipeline addBefore(String baseName, String name, ChannelHandler handler) {, +    public final ChannelPipeline addBefore(, +    public final ChannelPipeline addAfter(String baseName, String name, ChannelHandler handler) {, +    public final ChannelPipeline addAfter(, +    public final ChannelPipeline addFirst(ChannelHandler... handlers) {, +    public final ChannelPipeline addFirst(EventExecutorGroup executor, ChannelHandler... handlers) {, +    public final ChannelPipeline addLast(ChannelHandler... handlers) {, +    public final ChannelPipeline addLast(EventExecutorGroup executor, ChannelHandler... handlers) {, +    public final ChannelPipeline remove(ChannelHandler handler) {, +    public final ChannelHandler remove(String name) {, +    public final <T extends ChannelHandler> T remove(Class<T> handlerType) {, +    public final ChannelHandler removeFirst() {, +    public final ChannelHandler removeLast() {, +    public final ChannelPipeline replace(ChannelHandler oldHandler, String newName, ChannelHandler newHandler) {, +    public final ChannelHandler replace(String oldName, String newName, ChannelHandler newHandler) {, +    public final <T extends ChannelHandler> T replace(, +    public final ChannelHandler first() {, +    public final ChannelHandlerContext firstContext() {, +    public final ChannelHandler last() {, +    public final ChannelHandlerContext lastContext() {, +    public final ChannelHandler get(String name) {, +    public final <T extends ChannelHandler> T get(Class<T> handlerType) {, +    public final ChannelHandlerContext context(String name) {, +    public final ChannelHandlerContext context(ChannelHandler handler) {, +    public final ChannelHandlerContext context(Class<? extends ChannelHandler> handlerType) {, +    public final List<String> names() {, +    public final Map<String, ChannelHandler> toMap() {, +    public final Iterator<Map.Entry<String, ChannelHandler>> iterator() {, +    public final String toString() {, +    public final ChannelPipeline fireChannelRegistered() {, +    public final ChannelPipeline fireChannelUnregistered() {, +    public final ChannelPipeline fireChannelActive() {, +    public final ChannelPipeline fireChannelInactive() {, +    public final ChannelPipeline fireExceptionCaught(Throwable cause) {, +    public final ChannelPipeline fireUserEventTriggered(Object event) {, +    public final ChannelPipeline fireChannelRead(Object msg) {, +    public final ChannelPipeline fireChannelReadComplete() {, +    public final ChannelPipeline fireChannelWritabilityChanged() {, +    public final ChannelFuture bind(SocketAddress localAddress) {, +    public final ChannelFuture connect(SocketAddress remoteAddress) {, +    public final ChannelFuture connect(SocketAddress remoteAddress, SocketAddress localAddress) {, +    public final ChannelFuture disconnect() {, +    public final ChannelFuture close() {, +    public final ChannelFuture deregister() {, +    public final ChannelPipeline flush() {, +    public final ChannelFuture bind(SocketAddress localAddress, ChannelPromise promise) {, +    public final ChannelFuture connect(SocketAddress remoteAddress, ChannelPromise promise) {, +    public final ChannelFuture connect(, +            SocketAddress remoteAddress, SocketAddress localAddress, ChannelPromise promise) {, +    public final ChannelFuture disconnect(ChannelPromise promise) {, +    public final ChannelFuture close(ChannelPromise promise) {, +    public final ChannelFuture deregister(final ChannelPromise promise) {, +    public final ChannelPipeline read() {, +    public final ChannelFuture write(Object msg) {, +    public final ChannelFuture write(Object msg, ChannelPromise promise) {, +    public final ChannelFuture writeAndFlush(Object msg, ChannelPromise promise) {, +    public final ChannelFuture writeAndFlush(Object msg) {, +    public final ChannelPromise newPromise() {, +    public final ChannelProgressivePromise newProgressivePromise() {, +    public final ChannelFuture newSucceededFuture() {, +    public final ChannelFuture newFailedFuture(Throwable cause) {, +    public final ChannelPromise voidPromise() {]