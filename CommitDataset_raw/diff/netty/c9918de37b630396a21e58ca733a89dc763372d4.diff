[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeadersEncoder.java, +     * @param streamId  the identifier of the stream for which the headers are encoded., +    void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeadersEncoder.java, +     * @param streamId  the identifier of the stream for which the headers are encoded., +    void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +import static io.netty.handler.codec.http2.Http2CodecUtil.headerListSizeExceeded;, +    public void encodeHeaders(int streamId, ByteBuf out, Http2Headers headers, SensitivityDetector sensitivityDetector), +            encodeHeadersEnforceMaxHeaderListSize(streamId, out, headers, sensitivityDetector);, +    private void encodeHeadersEnforceMaxHeaderListSize(int streamId, ByteBuf out, Http2Headers headers,, +                headerListSizeExceeded(streamId, maxHeaderListSize);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeadersEncoder.java, +     * @param streamId  the identifier of the stream for which the headers are encoded., +    void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +import static io.netty.handler.codec.http2.Http2CodecUtil.headerListSizeExceeded;, +    public void encodeHeaders(int streamId, ByteBuf out, Http2Headers headers, SensitivityDetector sensitivityDetector), +            encodeHeadersEnforceMaxHeaderListSize(streamId, out, headers, sensitivityDetector);, +    private void encodeHeadersEnforceMaxHeaderListSize(int streamId, ByteBuf out, Http2Headers headers,, +                headerListSizeExceeded(streamId, maxHeaderListSize);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoderTest.java, +        encoder.encodeHeaders(3 /* randomly chosen */, out, http2Headers, NEVER_SENSITIVE);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeadersEncoder.java, +     * @param streamId  the identifier of the stream for which the headers are encoded., +    void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +import static io.netty.handler.codec.http2.Http2CodecUtil.headerListSizeExceeded;, +    public void encodeHeaders(int streamId, ByteBuf out, Http2Headers headers, SensitivityDetector sensitivityDetector), +            encodeHeadersEnforceMaxHeaderListSize(streamId, out, headers, sensitivityDetector);, +    private void encodeHeadersEnforceMaxHeaderListSize(int streamId, ByteBuf out, Http2Headers headers,, +                headerListSizeExceeded(streamId, maxHeaderListSize);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoderTest.java, +        encoder.encodeHeaders(3 /* randomly chosen */, out, http2Headers, NEVER_SENSITIVE);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoderTest.java, +import io.netty.handler.codec.http2.Http2Exception.StreamException;, +            encoder.encodeHeaders(3 /* randomly chosen */, headers, buf);, +    @Test(expected = StreamException.class), +        encoder.encodeHeaders(3 /* randomly chosen */, headers, Unpooled.buffer());, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameWriter.java, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +            headersEncoder.encodeHeaders(streamId, headers, headerBlock);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoder.java, +    public void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception {, +            encoder.encodeHeaders(streamId, buffer, headers, sensitivityDetector);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2HeadersEncoder.java, +     * @param streamId  the identifier of the stream for which the headers are encoded., +    void encodeHeaders(int streamId, Http2Headers headers, ByteBuf buffer) throws Http2Exception;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/internal/hpack/Encoder.java, +import io.netty.handler.codec.http2.Http2CodecUtil;, +import static io.netty.handler.codec.http2.Http2CodecUtil.headerListSizeExceeded;, +    public void encodeHeaders(int streamId, ByteBuf out, Http2Headers headers, SensitivityDetector sensitivityDetector), +            encodeHeadersEnforceMaxHeaderListSize(streamId, out, headers, sensitivityDetector);, +    private void encodeHeadersEnforceMaxHeaderListSize(int streamId, ByteBuf out, Http2Headers headers,, +                headerListSizeExceeded(streamId, maxHeaderListSize);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoderTest.java, +        encoder.encodeHeaders(3 /* randomly chosen */, out, http2Headers, NEVER_SENSITIVE);, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2HeadersEncoderTest.java, +import io.netty.handler.codec.http2.Http2Exception.StreamException;, +            encoder.encodeHeaders(3 /* randomly chosen */, headers, buf);, +    @Test(expected = StreamException.class), +        encoder.encodeHeaders(3 /* randomly chosen */, headers, Unpooled.buffer());, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/Http2HeaderBlockIOTest.java, +        encoder.encodeHeaders(3 /* randomly chosen */, in, buffer);]