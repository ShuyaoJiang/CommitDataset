[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DatagramDnsResponseDecoder.java, +            final DnsRecord r = recordDecoder.decodeRecord(buf);, +            if (r == null) {, +                // Truncated response, +                break;, +            }, +, +            response.addRecord(section, r);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DatagramDnsResponseDecoder.java, +            final DnsRecord r = recordDecoder.decodeRecord(buf);, +            if (r == null) {, +                // Truncated response, +                break;, +            }, +, +            response.addRecord(section, r);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +        final int startOffset = in.readerIndex();, +, +        final int endOffset = in.writerIndex();, +        if (endOffset - startOffset < 10) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +        if (endOffset - offset < length) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DatagramDnsResponseDecoder.java, +            final DnsRecord r = recordDecoder.decodeRecord(buf);, +            if (r == null) {, +                // Truncated response, +                break;, +            }, +, +            response.addRecord(section, r);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +        final int startOffset = in.readerIndex();, +, +        final int endOffset = in.writerIndex();, +        if (endOffset - startOffset < 10) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +        if (endOffset - offset < length) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsRecordDecoder.java, +     *, +     * @return the decoded record, or {@code null} if there are not enough data in the input buffer, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DatagramDnsResponseDecoder.java, +            final DnsRecord r = recordDecoder.decodeRecord(buf);, +            if (r == null) {, +                // Truncated response, +                break;, +            }, +, +            response.addRecord(section, r);, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DefaultDnsRecordDecoder.java, +        final int startOffset = in.readerIndex();, +, +        final int endOffset = in.writerIndex();, +        if (endOffset - startOffset < 10) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +        if (endOffset - offset < length) {, +            // Not enough data, +            in.readerIndex(startOffset);, +            return null;, +        }, +, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsRecordDecoder.java, +     *, +     * @return the decoded record, or {@code null} if there are not enough data in the input buffer, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsCacheEntry.java, +import java.net.InetAddress;, +    private final String hostname;, +    private final InetAddress address;, +    DnsCacheEntry(String hostname, InetAddress address) {, +        this.hostname = hostname;, +        this.address = address;, +    DnsCacheEntry(String hostname, Throwable cause) {, +        this.hostname = hostname;, +        address = null;, +    }, +, +    String hostname() {, +        return hostname;]