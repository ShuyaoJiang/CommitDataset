[+++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * such as {@link Channel#write(Object)} and {@link Channel#close()}., + * <h3>{@link SimpleChannelDownstreamHandler}</h3>, + * In most cases, you will get to use a {@link SimpleChannelDownstreamHandler}, + * to implement a downstream handler because it provides an individual handler, + * method for each event type.  You might want to implement this interface, + * directly though if you want to handle various types of events in more, + * generic way., +++ b/src/main/java/org/jboss/netty/channel/ChannelDownstreamHandler.java, + * such as {@link Channel#write(Object)} and {@link Channel#close()}., + * <h3>{@link SimpleChannelDownstreamHandler}</h3>, + * In most cases, you will get to use a {@link SimpleChannelDownstreamHandler}, + * to implement a downstream handler because it provides an individual handler, + * method for each event type.  You might want to implement this interface, + * directly though if you want to handle various types of events in more, + * generic way., +++ b/src/main/java/org/jboss/netty/channel/ChannelEvent.java, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.Socket;, +import java.net.SocketAddress;, +, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.channel.socket.ServerSocketChannel;, +, + * A {@link ChannelEvent} is handled by a series of {@link ChannelHandler}s in, + * a {@link ChannelPipeline}., + * When your server receives a message from a client, the event associated with, + * the received message is an upstream event.  When your server sends a message, + * or reply to the client, the event associated with the write request is a, + * downstream event.  The same rule applies for the client side.  If your client, + * sent a request to the server, it means your client triggered a downstream, + * event.  If your client received a response from the server, it means, + * your client will be notified with an upstream event.  Upstream events are, + * often the result of inbound operations such as {@link InputStream#read(byte[])},, + * and downstream events are the request for outbound operations such as, + * {@link OutputStream#write(byte[])}, {@link Socket#connect(SocketAddress)},, + * and {@link Socket#close()}., + * <h4>Upstream events</h4>, + *, + * <table border="1" cellspacing="0" cellpadding="6">, + * <tr>, + * <th>Event name</th></th><th>Event type and condition</th><th>Meaning</th>, + * </tr>, + * <tr>, + * <td>{@code "messageReceived"}</td>, + * <td>{@link MessageEvent}</td>, + * <td>a message object (e.g. {@link ChannelBuffer}) was received from a remote peer</td>, + * </tr>, + * <tr>, + * <td>{@code "exceptionCaught"}</td>, + * <td>{@link ExceptionEvent}</td>, + * <td>an exception was raised by an I/O thread or a {@link ChannelHandler}</td>, + * </tr>, + * <tr>, + * <td>{@code "channelOpen"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#OPEN OPEN}, value = {@code true})</td>, + * <td>a {@link Channel} is open, but not bound nor connected</td>, + * </tr>, + * <tr>, + * <td>{@code "channelClosed"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#OPEN OPEN}, value = {@code false})</td>, + * <td>a {@link Channel} was closed and all its related resources were released</td>, + * </tr>, + * <tr>, + * <td>{@code "channelBound"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#BOUND BOUND}, value = {@link SocketAddress})</td>, + * <td>a {@link Channel} is open and bound to a local address, but not connected</td>, + * </tr>, + * <tr>, + * <td>{@code "channelUnbound"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#BOUND BOUND}, value = {@code null})</td>, + * <td>a {@link Channel} was unbound from the current local address</td>, + * </tr>, + * <tr>, + * <td>{@code "channelConnected"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#CONNECTED CONNECTED}, value = {@link SocketAddress})</td>, + * <td>a {@link Channel} is open, bound to a local address, and connected to a remote address</td>, + * </tr>, + * <tr>, + * <td>{@code "writeComplete"}</td>, + * <td>{@link WriteCompletionEvent}</td>, + * <td>something has been written to a remote peer</td>, + * </tr>, + * <tr>, + * <td>{@code "channelDisconnected"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#CONNECTED CONNECTED}, value = {@code null})</td>, + * <td>a {@link Channel} was disconnected from its remote peer</td>, + * </tr>, + * <tr>, + * <td>{@code "channelInterestChanged"}</td>, + * <td>{@link ChannelStateEvent}<br/>(state = {@link ChannelState#INTEREST_OPS INTEREST_OPS}, no value)</td>, + * <td>a {@link Channel}'s {@link Channel#getInterestOps() interestOps} was changed</td>, + * </tr>, + * </table>, + * These two additional event types are used only for a parent channel which, + * can have a child channel (e.g. {@link ServerSocketChannel})., + * <p>, + * <table border="1" cellspacing="0" cellpadding="6">, + * <tr>]