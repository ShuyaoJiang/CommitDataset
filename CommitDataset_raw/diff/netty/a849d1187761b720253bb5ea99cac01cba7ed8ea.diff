[+++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public boolean isPooled() {, +        return false;, +    }, +, +    @Override, +            return ByteBufs.EMPTY_BUFFER;, +        return ByteBufs.decodeString(nioBuffer, charset);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, value);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, indexFinder);, +        return ByteBufs.hashCode(this);, +        return ByteBufs.equals(this, (ByteBuf) o);, +        return ByteBufs.compare(this, that);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public boolean isPooled() {, +        return false;, +    }, +, +    @Override, +            return ByteBufs.EMPTY_BUFFER;, +        return ByteBufs.decodeString(nioBuffer, charset);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, value);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, indexFinder);, +        return ByteBufs.hashCode(this);, +        return ByteBufs.equals(this, (ByteBuf) o);, +        return ByteBufs.compare(this, that);, +++ b/buffer/src/main/java/io/netty/buffer/BigEndianHeapByteBuf.java, + * A big-endian Java heap buffer.  It is recommended to use {@link ByteBufs#buffer(int)}, + * and {@link ByteBufs#wrappedBuffer(byte[])} instead of calling the, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public boolean isPooled() {, +        return false;, +    }, +, +    @Override, +            return ByteBufs.EMPTY_BUFFER;, +        return ByteBufs.decodeString(nioBuffer, charset);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, value);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, indexFinder);, +        return ByteBufs.hashCode(this);, +        return ByteBufs.equals(this, (ByteBuf) o);, +        return ByteBufs.compare(this, that);, +++ b/buffer/src/main/java/io/netty/buffer/BigEndianHeapByteBuf.java, + * A big-endian Java heap buffer.  It is recommended to use {@link ByteBufs#buffer(int)}, + * and {@link ByteBufs#wrappedBuffer(byte[])} instead of calling the, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, + * {@link ByteBufs} rather than calling an individual implementation's, +public interface ByteBuf extends ChannelBuf, Comparable<ByteBuf> {, +     * {@link ByteBuf} buf = {@link ByteBufs}.buffer(8);, +     * {@link ByteBuf} buf = {@link ByteBufs}.wrappedBuffer(new byte[8]);, +++ b/buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java, +    public boolean isPooled() {, +        return false;, +    }, +, +    @Override, +            return ByteBufs.EMPTY_BUFFER;, +        return ByteBufs.decodeString(nioBuffer, charset);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, value);, +        return ByteBufs.indexOf(this, fromIndex, toIndex, indexFinder);, +        return ByteBufs.hashCode(this);, +        return ByteBufs.equals(this, (ByteBuf) o);, +        return ByteBufs.compare(this, that);, +++ b/buffer/src/main/java/io/netty/buffer/BigEndianHeapByteBuf.java, + * A big-endian Java heap buffer.  It is recommended to use {@link ByteBufs#buffer(int)}, + * and {@link ByteBufs#wrappedBuffer(byte[])} instead of calling the, +++ b/buffer/src/main/java/io/netty/buffer/ByteBuf.java, + * {@link ByteBufs} rather than calling an individual implementation's, +public interface ByteBuf extends ChannelBuf, Comparable<ByteBuf> {, +     * {@link ByteBuf} buf = {@link ByteBufs}.buffer(8);, +     * {@link ByteBuf} buf = {@link ByteBufs}.wrappedBuffer(new byte[8]);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufs.java, +/*, + * Copyright 2012 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.CharsetUtil;, +, +import java.nio.ByteBuffer;, +import java.nio.ByteOrder;, +import java.nio.CharBuffer;, +import java.nio.charset.CharacterCodingException;, +import java.nio.charset.Charset;, +import java.nio.charset.CharsetDecoder;, +import java.nio.charset.CharsetEncoder;, +import java.nio.charset.CoderResult;, +import java.util.ArrayList;]