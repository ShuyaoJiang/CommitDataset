[+++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisEncoder.java, +import io.netty.channel.ChannelHandler.Sharable;, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            Command command = (Command) o;, +            command.write(cb);, +            Channels.write(ctx, future, cb);, +, +        } else if (o instanceof Iterable) {, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            ChannelFuture future = e.getFuture();, +, +            // Useful for transactions and database select, +            for (Object i : (Iterable<?>) o) {, +                if (i instanceof Command) {, +                    Command command = (Command) i;, +                    command.write(cb);, +                } else {, +                    super.writeRequested(ctx, e);, +                    return;, +++ b/codec/src/main/java/io/netty/handler/codec/redis/Command.java, +    static final byte[] ARGS_PREFIX = "*".getBytes();, +    static final byte[] CRLF = "\r\n".getBytes();, +    static final byte[] BYTES_PREFIX = "$".getBytes();, +    static final byte[] EMPTY_BYTES = new byte[0];, +    static final byte[] NEG_ONE_AND_CRLF = convertWithCRLF(-1);, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisDecoder.java, +++ b/codec/src/main/java/io/netty/handler/codec/redis/RedisEncoder.java, +import io.netty.channel.ChannelHandler.Sharable;, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            Command command = (Command) o;, +            command.write(cb);, +            Channels.write(ctx, future, cb);, +, +        } else if (o instanceof Iterable) {, +            ChannelBuffer cb = ChannelBuffers.dynamicBuffer();, +            ChannelFuture future = e.getFuture();, +, +            // Useful for transactions and database select, +            for (Object i : (Iterable<?>) o) {, +                if (i instanceof Command) {, +                    Command command = (Command) i;, +                    command.write(cb);, +                } else {, +                    super.writeRequested(ctx, e);, +                    return;, +++ b/example/src/main/java/io/netty/example/redis/RedisClient.java, +/*, + * Copyright 2011 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.example.redis;, +, +import io.netty.bootstrap.ClientBootstrap;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelFuture;, +import io.netty.channel.ChannelPipeline;, +import io.netty.channel.ChannelPipelineFactory;, +import io.netty.channel.Channels;, +import io.netty.channel.socket.nio.NioClientSocketChannelFactory;, +import io.netty.handler.codec.redis.Command;, +import io.netty.handler.codec.redis.RedisDecoder;, +import io.netty.handler.codec.redis.RedisEncoder;, +import io.netty.handler.codec.redis.Reply;, +import io.netty.handler.queue.BlockingReadHandler;, +, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.List;]