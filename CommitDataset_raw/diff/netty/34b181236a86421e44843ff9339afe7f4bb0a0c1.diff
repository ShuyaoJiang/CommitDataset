[+++ b/src/main/java/org/jboss/netty/handler/traffic/AbstractTrafficShapingHandler.java, +/*, + * Copyright 2009 Red Hat, Inc., + *, + * Red Hat licenses this file to you under the Apache License, version 2.0, + * (the "License"); you may not use this file except in compliance with the, + * License.  You may obtain a copy of the License at:, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package org.jboss.netty.handler.traffic;, +, +import java.util.concurrent.Executor;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelEvent;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelState;, +import org.jboss.netty.channel.ChannelStateEvent;, +import org.jboss.netty.channel.MessageEvent;, +import org.jboss.netty.channel.SimpleChannelHandler;, +import org.jboss.netty.logging.InternalLogger;, +import org.jboss.netty.logging.InternalLoggerFactory;, +import org.jboss.netty.util.DefaultObjectSizeEstimator;, +import org.jboss.netty.util.ExternalResourceReleasable;, +import org.jboss.netty.util.ObjectSizeEstimator;, +import org.jboss.netty.util.internal.ExecutorUtil;, +, +/**, + * AbstractTrafficShapingHandler allows to limit the global bandwidth, + * (see {@link GlobalTrafficShapingHandler}) or per session, + * bandwidth (see {@link ChannelTrafficShapingHandler}), as traffic shaping., + * It allows too to implement an almost real time monitoring of the bandwidth using, + * the monitors from {@link TrafficCounter} that will call back every checkInterval, + * the method doAccounting of this handler.<br>, + * <br>, + *, + * An {@link ObjectSizeEstimator} can be passed at construction to specify what, + * is the size of the object to be read or write accordingly to the type of, + * object. If not specified, it will used the {@link DefaultObjectSizeEstimator} implementation.<br><br>, + *, + * If you want for any particular reasons to stop the monitoring (accounting) or to change, + * the read/write limit or the check interval, several methods allow that for you:<br>, + * <ul>, + * <li><tt>configure</tt> allows you to change read or write limits, or the checkInterval</li>, + * <li><tt>getTrafficCounter</tt> allows you to have access to the TrafficCounter and so to stop, + * or start the monitoring, to change the checkInterval directly, or to have access to its values.</li>, + * <li></li>, + * </ul>, + *, + * @author The Netty Project (netty-dev@lists.jboss.org), + * @author Frederic Bregier, + * @version $Rev: 1832 $, $Date: 2009-10-25 19:53:54 +0900 (Sun, 25 Oct 2009) $, + */, +public abstract class AbstractTrafficShapingHandler extends, +        SimpleChannelHandler implements ExternalResourceReleasable {, +    /**, +     * Internal logger, +     */, +    static InternalLogger logger = InternalLoggerFactory, +            .getInstance(AbstractTrafficShapingHandler.class);, +, +    /**, +     * Default delay between two checks: 1s, +     */, +    public static final long DEFAULT_CHECK_INTERVAL = 1000;, +, +    /**, +     * Default minimal time to wait, +     */, +    private static final long MINIMAL_WAIT = 10;, +, +    /**, +     * Traffic Counter, +     */, +    protected TrafficCounter trafficCounter = null;, +, +    /**, +     * ObjectSizeEstimator, +     */, +    private ObjectSizeEstimator objectSizeEstimator = null;, +, +    /**, +     * Executor to associated to any TrafficCounter, +     */, +    protected Executor executor = null;, +, +    /**, +     * Limit in B/s to apply to write, +     */, +    private long writeLimit = 0;, +, +    /**]