[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +    protected String pristineHostname;, +                        nextContext.pristineHostname = hostname;, +        buf.append("failed to resolve '");, +        if (pristineHostname != null) {, +          buf.append(pristineHostname);, +        } else {, +          buf.append(hostname);, +        }, +        buf.append('\'');, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java, +    protected String pristineHostname;, +                        nextContext.pristineHostname = hostname;, +        buf.append("failed to resolve '");, +        if (pristineHostname != null) {, +          buf.append(pristineHostname);, +        } else {, +          buf.append(hostname);, +        }, +        buf.append('\'');, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/SearchDomainTest.java, +import java.net.UnknownHostException;, +import static org.junit.Assert.assertThat;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.core.StringContains.containsString;, +, +    @Test, +    public void testExceptionMsgNoSearchDomain() throws Exception {, +        Set<String> domains = new HashSet<String>();, +, +        TestDnsServer.MapRecordStoreA store = new TestDnsServer.MapRecordStoreA(domains);, +        dnsServer = new TestDnsServer(store);, +        dnsServer.start();, +, +        resolver = newResolver().searchDomains(Collections.singletonList("foo.com")).build();, +, +        Future<InetAddress> fut = resolver.resolve("unknown.hostname");, +        assertTrue(fut.await(10, TimeUnit.SECONDS));, +        assertFalse(fut.isSuccess());, +        final Throwable cause = fut.cause();, +        assertEquals(UnknownHostException.class, cause.getClass());, +        assertThat("search domain is included in UnknownHostException", cause.getMessage(),, +            not(containsString("foo.com")));, +    }]