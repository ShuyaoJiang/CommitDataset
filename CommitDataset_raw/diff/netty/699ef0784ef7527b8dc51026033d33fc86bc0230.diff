[+++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, false);, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true, false);, +        testSimpleEcho0(sb, cb, 32, false, false);, +        testSimpleEcho0(sb, cb, 32, true, false);, +    }, +, +    @Test(timeout = 30000), +    public void testSimpleEchoWithVoidPromise() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, true);, +    }, +, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridgeAndVoidPromise() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBridgeAndVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true, true);, +            ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize, boolean bridge, boolean voidPromise), +            throws Throwable {, +            ByteBuf buf = Unpooled.wrappedBuffer(data, i, length);, +            if (voidPromise) {, +                assertEquals(cc.voidPromise(), cc.write(buf, cc.voidPromise()));, +            } else {, +                assertNotEquals(cc.voidPromise(), cc.write(buf));, +            }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, false);, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true, false);, +        testSimpleEcho0(sb, cb, 32, false, false);, +        testSimpleEcho0(sb, cb, 32, true, false);, +    }, +, +    @Test(timeout = 30000), +    public void testSimpleEchoWithVoidPromise() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, true);, +    }, +, +    @Test(timeout = 30000), +    public void testSimpleEchoWithBridgeAndVoidPromise() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithBridgeAndVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true, true);, +            ServerBootstrap sb, Bootstrap cb, int maxInboundBufferSize, boolean bridge, boolean voidPromise), +            throws Throwable {, +            ByteBuf buf = Unpooled.wrappedBuffer(data, i, length);, +            if (voidPromise) {, +                assertEquals(cc.voidPromise(), cc.write(buf, cc.voidPromise()));, +            } else {, +                assertNotEquals(cc.voidPromise(), cc.write(buf));, +            }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java, +import io.netty.channel.FileRegion;, +    @Test, +    public void testFileRegionVoidPromise() throws Throwable {, +        run();, +    }, +, +        testFileRegion0(sb, cb, false);, +    }, +, +    public void testFileRegionVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testFileRegion0(sb, cb, true);, +    }, +, +    private void testFileRegion0(ServerBootstrap sb, Bootstrap cb, boolean voidPromise) throws Throwable {, +        FileRegion region = new DefaultFileRegion(new FileInputStream(file).getChannel(),, +                0L, file.length());, +        if (voidPromise) {, +            assertEquals(cc.voidPromise(), cc.sendFile(region, cc.voidPromise()));, +        } else {, +            assertNotEquals(cc.voidPromise(), cc.sendFile(region));, +        }, +++ b/testsuite/src/test/java/io/netty/testsuite/transport/socket/SocketEchoTest.java, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, false);, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, true, false);, +        testSimpleEcho0(sb, cb, 32, false, false);, +        testSimpleEcho0(sb, cb, 32, true, false);, +    }, +, +    @Test(timeout = 30000), +    public void testSimpleEchoWithVoidPromise() throws Throwable {, +        run();, +    }, +, +    public void testSimpleEchoWithVoidPromise(ServerBootstrap sb, Bootstrap cb) throws Throwable {, +        testSimpleEcho0(sb, cb, Integer.MAX_VALUE, false, true);, +    }, +]