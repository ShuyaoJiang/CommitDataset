[+++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final Queue<ByteBuf> freeLaterQueue = new ArrayDeque<ByteBuf>();, +, +    protected ByteBuf freeLater(ByteBuf buf) {, +        freeLaterQueue.add(buf);, +        return buf;, +    }, +, +, +        for (;;) {, +            ByteBuf buf = freeLaterQueue.poll();, +            if (buf == null) {, +                break;, +            }, +, +            if (buf.refCnt() > 0) {, +                buf.release(buf.refCnt());, +            }, +        }, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(wrappedBuffer(expectedValueContent));, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(wrappedBuffer(expectedValueContent));, +        ByteBuf copy = freeLater(copiedBuffer(buffer));, +        ByteBuf copy = freeLater(buffer.copy());, +        ByteBuf elemA = freeLater(buffer(15));, +        ByteBuf elemB = freeLater(directBuffer(15));, +        assertTrue(set.contains(freeLater(elemA.copy())));, +        ByteBuf elemBCopy = freeLater(elemB.copy());, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final Queue<ByteBuf> freeLaterQueue = new ArrayDeque<ByteBuf>();, +, +    protected ByteBuf freeLater(ByteBuf buf) {, +        freeLaterQueue.add(buf);, +        return buf;, +    }, +, +, +        for (;;) {, +            ByteBuf buf = freeLaterQueue.poll();, +            if (buf == null) {, +                break;, +            }, +, +            if (buf.refCnt() > 0) {, +                buf.release(buf.refCnt());, +            }, +        }, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(wrappedBuffer(expectedValueContent));, +        ByteBuf value = freeLater(directBuffer(BLOCK_SIZE * 2));, +        ByteBuf expectedValue = freeLater(wrappedBuffer(expectedValueContent));, +        ByteBuf copy = freeLater(copiedBuffer(buffer));, +        ByteBuf copy = freeLater(buffer.copy());, +        ByteBuf elemA = freeLater(buffer(15));, +        ByteBuf elemB = freeLater(directBuffer(15));, +        assertTrue(set.contains(freeLater(elemA.copy())));, +        ByteBuf elemBCopy = freeLater(elemB.copy());, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +        a = freeLater(wrappedBuffer(new byte[] { 1 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 2 }).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[]{3}).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 0, 1, 2, 3, 4 }, 3, 1).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 4 }).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 0, 1, 2, 4, 5 }, 3, 1).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 7, 8, 9, 10 }).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, 6, 5).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 7, 8, 5, 9, 10 }).order(order)));, +        a = freeLater(wrappedBuffer(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).order(order));, +        b = freeLater(wrappedBuffer(, +                wrappedBuffer(new byte[] { 0, 1, 2, 3, 4, 6, 7, 8, 5, 9, 10, 11 }, 6, 5).order(order)));, +        ByteBuf buf = freeLater(compositeBuffer());, +++ b/buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final Queue<ByteBuf> freeLaterQueue = new ArrayDeque<ByteBuf>();, +]