[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +static inline void throwRuntimeException(JNIEnv* env, char* message) {, +static inline void throwIOException(JNIEnv* env, char* message) {, +static inline void throwClosedChannelException(JNIEnv* env) {, +static inline void throwOutOfMemoryError(JNIEnv* env) {, +static inline char* exceptionMessage(char* msg, int error) {, +static inline jint epollCtl(JNIEnv* env, jint efd, int op, jint fd, jint flags) {, +static inline jint getOption(JNIEnv* env, jint fd, int level, int optname, void* optval, socklen_t optlen) {, +static inline int setOption(JNIEnv* env, jint fd, int level, int optname, const void* optval, socklen_t len) {, +static jbyteArray createInetSocketAddressArray(JNIEnv* env, struct sockaddr_storage addr) {, +static jobject createDatagramSocketAddress(JNIEnv* env, struct sockaddr_storage addr, int len) {, +static int init_sockaddr(JNIEnv* env, jbyteArray address, jint scopeId, jint jport, struct sockaddr_storage* addr) {, +static int init_in_addr(JNIEnv* env, jbyteArray address, struct in_addr* addr) {, +static inline jint _write(JNIEnv* env, jclass clazz, jint fd, void* buffer, jint pos, jint limit) {, +static inline jint _sendTo(JNIEnv* env, jint fd, void* buffer, jint pos, jint limit ,jbyteArray address, jint scopeId, jint port) {, +static inline jobject recvFrom0(JNIEnv* env, jint fd, void* buffer, jint pos, jint limit) {, +static inline jlong _writev(JNIEnv* env, jclass clazz, jint fd, struct iovec* iov, jint length) {, +static inline jint _read(JNIEnv* env, jclass clazz, jint fd, void* buffer, jint pos, jint limit) {, +static inline jint socket0(JNIEnv* env, jclass clazz, int type) {]