[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.SETTINGS_INITIAL_WINDOW_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isMaxFrameSizeValid;, +import static io.netty.handler.codec.http2.Http2CodecUtil.readUnsignedInt;, +import static io.netty.handler.codec.http2.Http2Error.ENHANCE_YOUR_CALM;, +import static io.netty.handler.codec.http2.Http2Exception.streamError;, +                        listener.onHeadersRead(ctx, headersStreamId, hdrBlockBuilder.headers(), streamDependency,, +                                weight, exclusive, padding, headersFlags.endOfStream());, +                    listener.onPushPromiseRead(ctx, pushPromiseStreamId, promisedStreamId,, +                            headersBlockBuilder().headers(), padding);, +         * The local header size maximum has been exceeded while accumulating bytes., +         * @throws Http2Exception A connection error indicating too much data has been received., +         */, +        private void headerSizeExceeded() throws Http2Exception {, +            close();, +            throw connectionError(ENHANCE_YOUR_CALM, "Header size exceeded max allowed size (%d)",, +                    headersDecoder.configuration().maxHeaderSize());, +        }, +, +        /**, +        final void addFragment(ByteBuf fragment, ByteBufAllocator alloc, boolean endOfHeaders) throws Http2Exception {, +                if (fragment.readableBytes() > headersDecoder.configuration().maxHeaderSize()) {, +                    headerSizeExceeded();, +                }, +            if (headersDecoder.configuration().maxHeaderSize() - fragment.readableBytes() <, +                    headerBlock.readableBytes()) {, +                headerSizeExceeded();, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.SETTINGS_INITIAL_WINDOW_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isMaxFrameSizeValid;, +import static io.netty.handler.codec.http2.Http2CodecUtil.readUnsignedInt;, +import static io.netty.handler.codec.http2.Http2Error.ENHANCE_YOUR_CALM;, +import static io.netty.handler.codec.http2.Http2Exception.streamError;, +                        listener.onHeadersRead(ctx, headersStreamId, hdrBlockBuilder.headers(), streamDependency,, +                                weight, exclusive, padding, headersFlags.endOfStream());, +                    listener.onPushPromiseRead(ctx, pushPromiseStreamId, promisedStreamId,, +                            headersBlockBuilder().headers(), padding);, +         * The local header size maximum has been exceeded while accumulating bytes., +         * @throws Http2Exception A connection error indicating too much data has been received., +         */, +        private void headerSizeExceeded() throws Http2Exception {, +            close();, +            throw connectionError(ENHANCE_YOUR_CALM, "Header size exceeded max allowed size (%d)",, +                    headersDecoder.configuration().maxHeaderSize());, +        }, +, +        /**, +        final void addFragment(ByteBuf fragment, ByteBufAllocator alloc, boolean endOfHeaders) throws Http2Exception {, +                if (fragment.readableBytes() > headersDecoder.configuration().maxHeaderSize()) {, +                    headerSizeExceeded();, +                }, +            if (headersDecoder.configuration().maxHeaderSize() - fragment.readableBytes() <, +                    headerBlock.readableBytes()) {, +                headerSizeExceeded();, +            }, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2HeadersDecoder.java, +import static io.netty.handler.codec.http2.Http2Error.ENHANCE_YOUR_CALM;, +    private final int maxHeaderSize;, +        if (maxHeaderSize <= 0) {, +            throw new IllegalArgumentException("maxHeaderSize must be positive: " + maxHeaderSize);, +        }, +        this.maxHeaderSize = maxHeaderSize;, +    public int maxHeaderSize() {, +        return maxHeaderSize;, +    }, +, +    @Override, +    /**, +     * Respond to headers block resulting in the maximum header size being exceeded., +     * @throws Http2Exception If we can not recover from the truncation., +     */, +    protected void maxHeaderSizeExceeded() throws Http2Exception {, +        throw connectionError(ENHANCE_YOUR_CALM, "Header size exceeded max allowed bytes (%d)", maxHeaderSize);, +    }, +, +            if (decoder.endHeaderBlock()) {, +                maxHeaderSizeExceeded();, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2FrameReader.java, +import static io.netty.handler.codec.http2.Http2CodecUtil.SETTINGS_INITIAL_WINDOW_SIZE;, +import static io.netty.handler.codec.http2.Http2CodecUtil.isMaxFrameSizeValid;, +import static io.netty.handler.codec.http2.Http2CodecUtil.readUnsignedInt;, +import static io.netty.handler.codec.http2.Http2Error.ENHANCE_YOUR_CALM;, +import static io.netty.handler.codec.http2.Http2Exception.streamError;, +                        listener.onHeadersRead(ctx, headersStreamId, hdrBlockBuilder.headers(), streamDependency,, +                                weight, exclusive, padding, headersFlags.endOfStream());, +                    listener.onPushPromiseRead(ctx, pushPromiseStreamId, promisedStreamId,, +                            headersBlockBuilder().headers(), padding);, +         * The local header size maximum has been exceeded while accumulating bytes., +         * @throws Http2Exception A connection error indicating too much data has been received., +         */, +        private void headerSizeExceeded() throws Http2Exception {, +            close();, +            throw connectionError(ENHANCE_YOUR_CALM, "Header size exceeded max allowed size (%d)",, +                    headersDecoder.configuration().maxHeaderSize());, +        }, +, +        /**, +        final void addFragment(ByteBuf fragment, ByteBufAllocator alloc, boolean endOfHeaders) throws Http2Exception {, +                if (fragment.readableBytes() > headersDecoder.configuration().maxHeaderSize()) {]