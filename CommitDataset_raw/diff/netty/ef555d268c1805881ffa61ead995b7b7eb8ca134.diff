[+++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    /**, +     * Reset the stored remoteAddress, +     */, +    /**, +     * Create a new {@link AbstractUnsafe} instance which will be used for the life-time of the {@link Channel}, +     */, +    protected abstract AbstractUnsafe newUnsafe();, +    /**, +     * {@link Unsafe} implementation which sub-classes must extend and use., +     */, +    /**, +     * Return {@code true} if the given {@link EventLoop} is compatible with this instance., +     */, +    /**, +     * Returns the {@link SocketAddress} which is bound locally., +     */, +, +    /**, +     * Return the {@link SocketAddress} which the {@link Channel} is connected to., +     */, +    /**, +     * Is called after the {@link Channel} is registered with its {@link EventLoop} as part of the register process., +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +     *, +     * Sub-classes may override this method as it will just return {@code null}, +     */, +    protected Runnable doRegister() throws Exception {, +        return null;, +    }, +, +    /**, +     * Bind the {@link Channel} to the {@link SocketAddress}, +     */, +, +    /**, +     * Disconnect this {@link Channel} from its remote peer, +     */, +, +    /**, +     * Will be called before the actual close operation will be performed. Sub-classes may override this as the default, +     * is to do nothing., +     */, +    /**, +     * Close the {@link Channel}, +     */, +, +    /**, +     * Deregister the {@link Channel} from its {@link EventLoop}., +     *, +     * Sub-classes may override this method, +     */, +    protected void doDeregister() throws Exception {, +        // NOOP, +    }, +, +    /**, +     * Flush the content of the given {@link ByteBuf} to the remote peer., +     *, +     * Sub-classes may override this as this implementation will just thrown an {@link UnsupportedOperationException}, +     */, +, +    /**, +     * Flush the content of the given {@link MessageBuf} to the remote peer., +     *, +     * Sub-classes may override this as this implementation will just thrown an {@link UnsupportedOperationException}, +     */, +    /**, +     * Flush the content of the given {@link FileRegion} to the remote peer., +     *, +     * Sub-classes may override this as this implementation will just thrown an {@link UnsupportedOperationException}, +     */, +    /**, +     * Return {@code true} if a flush to the {@link Channel} is currently pending., +     */, +++ b/transport/src/main/java/io/netty/channel/AbstractChannel.java, +    /**, +     * Reset the stored remoteAddress, +     */, +    /**, +     * Create a new {@link AbstractUnsafe} instance which will be used for the life-time of the {@link Channel}, +     */, +    protected abstract AbstractUnsafe newUnsafe();, +    /**, +     * {@link Unsafe} implementation which sub-classes must extend and use., +     */, +    /**, +     * Return {@code true} if the given {@link EventLoop} is compatible with this instance., +     */, +    /**, +     * Returns the {@link SocketAddress} which is bound locally., +     */, +, +    /**, +     * Return the {@link SocketAddress} which the {@link Channel} is connected to., +     */, +    /**, +     * Is called after the {@link Channel} is registered with its {@link EventLoop} as part of the register process., +     * You can return a {@link Runnable} which will be run as post-task of the registration process., +     *]