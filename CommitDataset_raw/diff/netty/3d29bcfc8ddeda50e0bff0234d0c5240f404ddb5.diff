[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +                    this, allocateDirect(chunkSize),, +                    pageSize, maxOrder, pageShifts, chunkSize);, +            return new PoolChunk<ByteBuffer>(this, allocateDirect(capacity), capacity);, +        }, +, +        private static ByteBuffer allocateDirect(int capacity) {, +            return PlatformDependent.useDirectBufferNoCleaner() ?, +                    PlatformDependent.allocateDirectNoCleaner(capacity) : ByteBuffer.allocateDirect(capacity);, +            if (PlatformDependent.useDirectBufferNoCleaner()) {, +                PlatformDependent.freeDirectNoCleaner(chunk.memory);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +                    this, allocateDirect(chunkSize),, +                    pageSize, maxOrder, pageShifts, chunkSize);, +            return new PoolChunk<ByteBuffer>(this, allocateDirect(capacity), capacity);, +        }, +, +        private static ByteBuffer allocateDirect(int capacity) {, +            return PlatformDependent.useDirectBufferNoCleaner() ?, +                    PlatformDependent.allocateDirectNoCleaner(capacity) : ByteBuffer.allocateDirect(capacity);, +            if (PlatformDependent.useDirectBufferNoCleaner()) {, +                PlatformDependent.freeDirectNoCleaner(chunk.memory);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +                buf = UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +                    this, allocateDirect(chunkSize),, +                    pageSize, maxOrder, pageShifts, chunkSize);, +            return new PoolChunk<ByteBuffer>(this, allocateDirect(capacity), capacity);, +        }, +, +        private static ByteBuffer allocateDirect(int capacity) {, +            return PlatformDependent.useDirectBufferNoCleaner() ?, +                    PlatformDependent.allocateDirectNoCleaner(capacity) : ByteBuffer.allocateDirect(capacity);, +            if (PlatformDependent.useDirectBufferNoCleaner()) {, +                PlatformDependent.freeDirectNoCleaner(chunk.memory);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +                buf = UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +                UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity) :, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +                    this, allocateDirect(chunkSize),, +                    pageSize, maxOrder, pageShifts, chunkSize);, +            return new PoolChunk<ByteBuffer>(this, allocateDirect(capacity), capacity);, +        }, +, +        private static ByteBuffer allocateDirect(int capacity) {, +            return PlatformDependent.useDirectBufferNoCleaner() ?, +                    PlatformDependent.allocateDirectNoCleaner(capacity) : ByteBuffer.allocateDirect(capacity);, +            if (PlatformDependent.useDirectBufferNoCleaner()) {, +                PlatformDependent.freeDirectNoCleaner(chunk.memory);, +            } else {, +        }, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +                buf = UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java, +                UnsafeByteBufUtil.newUnsafeDirectByteBuf(this, initialCapacity, maxCapacity) :, +++ b/buffer/src/main/java/io/netty/buffer/UnpooledUnsafeNoCleanerDirectByteBuf.java, +/*, + * Copyright 2016 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.buffer;, +, +import io.netty.util.internal.PlatformDependent;, +, +import java.nio.ByteBuffer;, +, +final class UnpooledUnsafeNoCleanerDirectByteBuf extends UnpooledUnsafeDirectByteBuf {, +, +    UnpooledUnsafeNoCleanerDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {, +        super(alloc, initialCapacity, maxCapacity);, +    }, +, +    @Override, +    protected ByteBuffer allocateDirect(int initialCapacity) {, +        return PlatformDependent.allocateDirectNoCleaner(initialCapacity);, +    }, +, +    @Override, +    protected void freeDirect(ByteBuffer buffer) {, +        PlatformDependent.freeDirectNoCleaner(buffer);, +    }, +}]