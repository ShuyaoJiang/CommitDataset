[+++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import java.util.Locale;, +            public Set<ResourceRecord> getRecords(QuestionRecord question) {, +                        Map<String, Object> attr = new HashMap<String, Object>();, +                        attr.put(DnsAttribute.IP_ADDRESS.toLowerCase(Locale.US), overriddenIP);, +                        return Collections.<ResourceRecord>singleton(, +                                new TestDnsServer.TestResourceRecord(, +                                        question.getDomainName(), question.getRecordType(), attr));, +    private static void testNonCachedResolveEmptyHostName(String inetHost) throws Exception {, +    public void testCNAMEResolveAllIpv4() throws IOException {, +    public void testCNAMEResolveAllIpv6() throws IOException {, +    private static void testCNAMERecursiveResolve(boolean ipv4Preferred) throws IOException {, +            public Set<ResourceRecord> getRecords(QuestionRecord question) {, +        final TestDnsServer dnsServer1 = new TestDnsServer(Collections.singleton("notnetty.com"));, +        final TestDnsServer dnsServer2 = new TestDnsServer(Collections.singleton(knownHostName));, +        final TestDnsServer dnsServer1 = new TestDnsServer(Collections.singleton("notnetty.com"));, +        final TestDnsServer dnsServer2 = new TestDnsServer(Collections.singleton(knownHostName));, +            String hostname) {, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/DnsNameResolverTest.java, +import java.util.Locale;, +            public Set<ResourceRecord> getRecords(QuestionRecord question) {, +                        Map<String, Object> attr = new HashMap<String, Object>();, +                        attr.put(DnsAttribute.IP_ADDRESS.toLowerCase(Locale.US), overriddenIP);, +                        return Collections.<ResourceRecord>singleton(, +                                new TestDnsServer.TestResourceRecord(, +                                        question.getDomainName(), question.getRecordType(), attr));, +    private static void testNonCachedResolveEmptyHostName(String inetHost) throws Exception {, +    public void testCNAMEResolveAllIpv4() throws IOException {, +    public void testCNAMEResolveAllIpv6() throws IOException {, +    private static void testCNAMERecursiveResolve(boolean ipv4Preferred) throws IOException {, +            public Set<ResourceRecord> getRecords(QuestionRecord question) {, +        final TestDnsServer dnsServer1 = new TestDnsServer(Collections.singleton("notnetty.com"));, +        final TestDnsServer dnsServer2 = new TestDnsServer(Collections.singleton(knownHostName));, +        final TestDnsServer dnsServer1 = new TestDnsServer(Collections.singleton("notnetty.com"));, +        final TestDnsServer dnsServer2 = new TestDnsServer(Collections.singleton(knownHostName));, +            String hostname) {, +++ b/resolver-dns/src/test/java/io/netty/resolver/dns/TestDnsServer.java, +import java.util.Locale;, +            public void sessionCreated(IoSession session) {, +        public ProtocolEncoder getEncoder(IoSession session) {, +        public ProtocolDecoder getDecoder(IoSession session) {, +                    throw new IllegalStateException(resourceRecord.get(DnsAttribute.IP_ADDRESS));, +    static final class MapRecordStoreA implements RecordStore {, +        MapRecordStoreA(Set<String> domains, int length) {, +        MapRecordStoreA(Set<String> domains) {, +        public Set<ResourceRecord> getRecords(QuestionRecord questionRecord) {, +                    Map<String, Object> attributes = new HashMap<String, Object>();, +                    records.add(new TestResourceRecord(name, questionRecord.getRecordType(), attributes));, +                Map<String, Object> attr = new HashMap<String, Object>();, +                            attr.put(DnsAttribute.IP_ADDRESS.toLowerCase(Locale.US), nextIp());, +                            attr.put(DnsAttribute.IP_ADDRESS.toLowerCase(Locale.US), nextIp6());, +                            attr.put(DnsAttribute.DOMAIN_NAME.toLowerCase(Locale.US), nextDomain());, +                            attr.put(DnsAttribute.MX_PREFERENCE.toLowerCase(Locale.US), String.valueOf(++priority));, +                return Collections.<ResourceRecord>singleton(, +                        new TestResourceRecord(name, questionRecord.getRecordType(), attr));, +, +    static final class TestResourceRecord extends ResourceRecordImpl {, +, +        TestResourceRecord(String domainName, RecordType recordType, Map<String, Object> attributes) {, +            super(domainName, recordType, RecordClass.IN, 100, attributes);, +        }, +, +        @Override, +        public int hashCode() {, +            return System.identityHashCode(this);, +        }, +, +        @Override, +        public boolean equals(Object o) {, +            return o == this;, +        }, +    }]