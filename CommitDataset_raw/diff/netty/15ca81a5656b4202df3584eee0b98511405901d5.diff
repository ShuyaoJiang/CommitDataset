[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslServerContext.java, +        this(certChainFile, keyFile, keyPassword, null, null,, +            OpenSslDefaultApplicationProtocolNegotiator.INSTANCE, 0, 0);, +        this(certChainFile, keyFile, keyPassword, null, ciphers,, +            toNegotiator(apn, false), sessionCacheSize, sessionTimeout);, +            File certChainFile, File keyFile, String keyPassword, TrustManagerFactory trustManagerFactory,, +                    if (trustManagerFactory == null) {, +                        // Mimic the way SSLContext.getInstance(KeyManager[], null, null) works, +                        trustManagerFactory = TrustManagerFactory.getInstance(, +                        trustManagerFactory.init((KeyStore) null);, +                    } else {, +                        trustManagerFactory.init(ks);, +                    }, +, +                    final X509TrustManager manager = chooseTrustManager(trustManagerFactory.getTrustManagers());, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslServerContext.java, +        this(certChainFile, keyFile, keyPassword, null, null,, +            OpenSslDefaultApplicationProtocolNegotiator.INSTANCE, 0, 0);, +        this(certChainFile, keyFile, keyPassword, null, ciphers,, +            toNegotiator(apn, false), sessionCacheSize, sessionTimeout);, +            File certChainFile, File keyFile, String keyPassword, TrustManagerFactory trustManagerFactory,, +                    if (trustManagerFactory == null) {, +                        // Mimic the way SSLContext.getInstance(KeyManager[], null, null) works, +                        trustManagerFactory = TrustManagerFactory.getInstance(, +                        trustManagerFactory.init((KeyStore) null);, +                    } else {, +                        trustManagerFactory.init(ks);, +                    }, +, +                    final X509TrustManager manager = chooseTrustManager(trustManagerFactory.getTrustManagers());, +++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +        return newServerContext(provider, certChainFile, keyFile, keyPassword,, +                ciphers, IdentityCipherSuiteFilter.INSTANCE,, +                toApplicationProtocolConfig(nextProtocols), sessionCacheSize, sessionTimeout);, +    }, +, +    /**, +     * Creates a new server-side {@link SslContext}., +     *, +     * @param provider the {@link SslContext} implementation to use., +     *                 {@code null} to use the current default one., +     * @param certChainFile an X.509 certificate chain file in PEM format, +     * @param keyFile a PKCS#8 private key file in PEM format, +     * @param keyPassword the password of the {@code keyFile}., +     *                    {@code null} if it's not password-protected., +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link javax.net.ssl.TrustManager}s, +     *                            that verifies the certificates sent from servers., +     *                            {@code null} to use the default., +     * @param ciphers the cipher suites to enable, in the order of preference., +     *                {@code null} to use the default cipher suites., +     * @param nextProtocols the application layer protocols to accept, in the order of preference., +     *                      {@code null} to disable TLS NPN/ALPN extension., +     * @param sessionCacheSize the size of the cache used for storing SSL session objects., +     *                         {@code 0} to use the default value., +     * @param sessionTimeout the timeout for the cached SSL session objects, in seconds., +     *                       {@code 0} to use the default value., +     * @return a new server-side {@link SslContext}, +     */, +    public static SslContext newServerContext(, +            SslProvider provider,, +            File certChainFile, File keyFile, String keyPassword, TrustManagerFactory trustManagerFactory,, +            Iterable<String> ciphers, Iterable<String> nextProtocols,, +            long sessionCacheSize, long sessionTimeout) throws SSLException {, +                provider, null, trustManagerFactory, certChainFile, keyFile, keyPassword,, +                null, ciphers, IdentityCipherSuiteFilter.INSTANCE,]