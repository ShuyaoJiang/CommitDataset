[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +            switch(stream.state()) {, +            case IDLE:, +                throw connectionError(PROTOCOL_ERROR, "RST_STREAM received for IDLE stream %d", streamId);, +            case CLOSED:, +                return; // RST_STREAM frames must be ignored for closed streams., +            default:, +                break;, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java, +            switch(stream.state()) {, +            case IDLE:, +                throw connectionError(PROTOCOL_ERROR, "RST_STREAM received for IDLE stream %d", streamId);, +            case CLOSED:, +                return; // RST_STREAM frames must be ignored for closed streams., +            default:, +                break;, +++ b/codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java, +import static io.netty.handler.codec.http2.Http2Stream.State.IDLE;, +    @Test(expected = Http2Exception.class), +    public void rstStreamOnIdleStreamShouldThrow() throws Exception {, +        when(stream.state()).thenReturn(IDLE);, +        decode().onRstStreamRead(ctx, STREAM_ID, PROTOCOL_ERROR.code());, +        verify(lifecycleManager).closeStream(eq(stream), eq(future));, +        verify(listener, never()).onRstStreamRead(any(ChannelHandlerContext.class), anyInt(), anyLong());, +    }, +]