[+++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Read the given amount of bytes into a new {@link ByteBuf} that is allocated from the {@link ByteBufAllocator}., +     */, +    public static ByteBuf readBytes(ByteBufAllocator alloc, ByteBuf buffer, int length) {, +        boolean release = true;, +        ByteBuf dst = alloc.buffer(length);, +        try {, +            buffer.readBytes(dst);, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +            }, +        }, +    }, +, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Read the given amount of bytes into a new {@link ByteBuf} that is allocated from the {@link ByteBufAllocator}., +     */, +    public static ByteBuf readBytes(ByteBufAllocator alloc, ByteBuf buffer, int length) {, +        boolean release = true;, +        ByteBuf dst = alloc.buffer(length);, +        try {, +            buffer.readBytes(dst);, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +            }, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import static io.netty.buffer.ByteBufUtil.readBytes;, +, +            out.add(new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead)));, +            ByteBuf content = readBytes(ctx.alloc(), buffer, toRead);, +            readFixedLengthContent(ctx, buffer, out);, +            ByteBuf content = readBytes(ctx.alloc(), buffer, toRead);, +            HttpContent chunk = new DefaultHttpContent(readBytes(ctx.alloc(), buffer, (int) chunkSize));, +            HttpContent chunk = new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead));, +    private void readFixedLengthContent(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) {, +            out.add(new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead)));, +            content = readBytes(ctx.alloc(), buffer, (int) length);, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Read the given amount of bytes into a new {@link ByteBuf} that is allocated from the {@link ByteBufAllocator}., +     */, +    public static ByteBuf readBytes(ByteBufAllocator alloc, ByteBuf buffer, int length) {, +        boolean release = true;, +        ByteBuf dst = alloc.buffer(length);, +        try {, +            buffer.readBytes(dst);, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +            }, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import static io.netty.buffer.ByteBufUtil.readBytes;, +, +            out.add(new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead)));, +            ByteBuf content = readBytes(ctx.alloc(), buffer, toRead);, +            readFixedLengthContent(ctx, buffer, out);, +            ByteBuf content = readBytes(ctx.alloc(), buffer, toRead);, +            HttpContent chunk = new DefaultHttpContent(readBytes(ctx.alloc(), buffer, (int) chunkSize));, +            HttpContent chunk = new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead));, +    private void readFixedLengthContent(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) {, +            out.add(new DefaultHttpContent(readBytes(ctx.alloc(), buffer, toRead)));, +            content = readBytes(ctx.alloc(), buffer, (int) length);, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/HttpContentCompressorTest.java, +        chunk.release();, +        chunk.release();, +++ b/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java, +    /**, +     * Read the given amount of bytes into a new {@link ByteBuf} that is allocated from the {@link ByteBufAllocator}., +     */, +    public static ByteBuf readBytes(ByteBufAllocator alloc, ByteBuf buffer, int length) {, +        boolean release = true;, +        ByteBuf dst = alloc.buffer(length);, +        try {, +            buffer.readBytes(dst);, +            release = false;, +            return dst;, +        } finally {, +            if (release) {, +                dst.release();, +            }, +        }, +    }, +, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java]