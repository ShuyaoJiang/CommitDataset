[+++ b/microbench/pom.xml, +    <!-- This only be set when run on linux as on other platforms we just want to include the jar without native, +         code -->, +    <epoll.classifier/>, +      <properties>, +        <epoll.classifier>${jni.classifier}</epoll.classifier>, +      </properties>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-epoll</artifactId>, +      <version>${project.version}</version>, +      <classifier>${epoll.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/microbench/pom.xml, +    <!-- This only be set when run on linux as on other platforms we just want to include the jar without native, +         code -->, +    <epoll.classifier/>, +      <properties>, +        <epoll.classifier>${jni.classifier}</epoll.classifier>, +      </properties>, +      <groupId>${project.groupId}</groupId>, +      <artifactId>netty-transport-native-epoll</artifactId>, +      <version>${project.version}</version>, +      <classifier>${epoll.classifier}</classifier>, +    </dependency>, +    <dependency>, +++ b/microbench/src/main/java/io/netty/microbench/channel/epoll/EpollSocketChannelBenchmark.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.microbench.channel.epoll;, +, +import io.netty.bootstrap.Bootstrap;, +import io.netty.bootstrap.ServerBootstrap;, +import io.netty.buffer.ByteBuf;, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelDuplexHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPromise;, +import io.netty.channel.epoll.EpollEventLoopGroup;, +import io.netty.channel.epoll.EpollServerSocketChannel;, +import io.netty.channel.epoll.EpollSocketChannel;, +import io.netty.microbench.util.AbstractMicrobenchmark;, +import io.netty.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +import org.openjdk.jmh.annotations.Benchmark;, +import org.openjdk.jmh.annotations.Setup;, +import org.openjdk.jmh.annotations.TearDown;, +, +public class EpollSocketChannelBenchmark extends AbstractMicrobenchmark {, +, +    private EpollEventLoopGroup group;, +    private Channel serverChan;, +    private Channel chan;, +    private ByteBuf abyte;, +    private ScheduledFuture<?> future;, +, +    @Setup, +    public void setup() throws Exception {, +        group = new EpollEventLoopGroup(1);, +, +        // add an arbitrary timeout to make the timer reschedule, +        future = group.schedule(new Runnable() {, +            @Override, +            public void run() {, +                throw new AssertionError();, +            }, +        }, 5, TimeUnit.MINUTES);, +        serverChan = new ServerBootstrap(), +            .channel(EpollServerSocketChannel.class), +            .group(group), +            .childHandler(new ChannelInitializer<Channel>() {, +                @Override, +                protected void initChannel(Channel ch) {, +                    ch.pipeline().addLast(new ChannelDuplexHandler() {, +                        @Override, +                        public void channelRead(ChannelHandlerContext ctx, Object msg) {, +                            if (msg instanceof ByteBuf) {, +                                ctx.writeAndFlush(msg, ctx.voidPromise());, +                            } else {, +                                throw new AssertionError();, +                            }, +                        }, +                    });, +                }, +            }), +            .bind(0)]