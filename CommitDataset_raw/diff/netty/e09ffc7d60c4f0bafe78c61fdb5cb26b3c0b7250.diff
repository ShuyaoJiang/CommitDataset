[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +    static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {, +        if (mqttVersion == MqttVersion.MQTT_3_1) {, +        } else if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId’s, +            // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId., +            return clientId != null;, +        }, +        throw new IllegalArgumentException(mqttVersion + " is unknown mqtt version");, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +    static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {, +        if (mqttVersion == MqttVersion.MQTT_3_1) {, +        } else if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId’s, +            // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId., +            return clientId != null;, +        }, +        throw new IllegalArgumentException(mqttVersion + " is unknown mqtt version");, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final byte protocolLevel = buffer.readByte();, +        numberOfBytesConsumed += 1;, +, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(protoString.value, protocolLevel);, +, +        numberOfBytesConsumed += 1;, +                mqttVersion.protocolName(),, +                mqttVersion.protocolLevel(),, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(mqttConnectVariableHeader.name(),, +                (byte) mqttConnectVariableHeader.version());, +        if (!isValidClientId(mqttVersion, decodedClientIdValue)) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +    static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {, +        if (mqttVersion == MqttVersion.MQTT_3_1) {, +        } else if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId’s, +            // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId., +            return clientId != null;, +        }, +        throw new IllegalArgumentException(mqttVersion + " is unknown mqtt version");, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final byte protocolLevel = buffer.readByte();, +        numberOfBytesConsumed += 1;, +, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(protoString.value, protocolLevel);, +, +        numberOfBytesConsumed += 1;, +                mqttVersion.protocolName(),, +                mqttVersion.protocolLevel(),, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(mqttConnectVariableHeader.name(),, +                (byte) mqttConnectVariableHeader.version());, +        if (!isValidClientId(mqttVersion, decodedClientIdValue)) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +import static io.netty.handler.codec.mqtt.MqttCodecUtil.*;, +, +        MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(variableHeader.name(),, +                (byte) variableHeader.version());, +        if (!isValidClientId(mqttVersion, clientIdentifier)) {, +            throw new MqttIdentifierRejectedException("invalid clientIdentifier: " + clientIdentifier);, +        byte[] protocolNameBytes = mqttVersion.protocolNameBytes();, +        int variableHeaderBufferSize = 2 + protocolNameBytes.length + 4;, +        buf.writeShort(protocolNameBytes.length);, +        buf.writeBytes(protocolNameBytes);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +    static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {, +        if (mqttVersion == MqttVersion.MQTT_3_1) {, +        } else if (mqttVersion == MqttVersion.MQTT_3_1_1) {, +            // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId’s, +            // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId., +            return clientId != null;, +        }, +        throw new IllegalArgumentException(mqttVersion + " is unknown mqtt version");, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java, +        final byte protocolLevel = buffer.readByte();, +        numberOfBytesConsumed += 1;, +, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(protoString.value, protocolLevel);, +, +        numberOfBytesConsumed += 1;, +                mqttVersion.protocolName(),, +                mqttVersion.protocolLevel(),, +        final MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(mqttConnectVariableHeader.name(),, +                (byte) mqttConnectVariableHeader.version());, +        if (!isValidClientId(mqttVersion, decodedClientIdValue)) {, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java, +import static io.netty.handler.codec.mqtt.MqttCodecUtil.*;, +, +        MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(variableHeader.name(),, +                (byte) variableHeader.version());, +        if (!isValidClientId(mqttVersion, clientIdentifier)) {, +            throw new MqttIdentifierRejectedException("invalid clientIdentifier: " + clientIdentifier);, +        byte[] protocolNameBytes = mqttVersion.protocolNameBytes();, +        int variableHeaderBufferSize = 2 + protocolNameBytes.length + 4;, +        buf.writeShort(protocolNameBytes.length);, +        buf.writeBytes(protocolNameBytes);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttQoS.java, +    EXACTLY_ONCE(2),, +    FAILURE(0x80);, +++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java, +    static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {, +        if (mqttVersion == MqttVersion.MQTT_3_1) {]