[+++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final int MISUSE_WARNING_THRESHOLD = 1024;, +    private static final AtomicInteger activeInstances = new AtomicInteger();, +    private static final AtomicBoolean loggedMisuseWarning = new AtomicBoolean();, +, +, +        // Misuse check, +        int activeInstances = MemoryAwareThreadPoolExecutor.activeInstances.incrementAndGet();, +        if (activeInstances >= MISUSE_WARNING_THRESHOLD &&, +            loggedMisuseWarning.compareAndSet(false, true)) {, +            logger.warn(, +                    "There are too many active " + getClass().getSimpleName() +, +                    " instances (" + activeInstances + ") - you should share " +, +                    "the small number of instances to avoid excessive resource " +, +                    "consumption.");, +        }, +    }, +, +    @Override, +    protected void terminated() {, +        super.terminated();, +        activeInstances.decrementAndGet();, +++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final int MISUSE_WARNING_THRESHOLD = 1024;, +    private static final AtomicInteger activeInstances = new AtomicInteger();, +    private static final AtomicBoolean loggedMisuseWarning = new AtomicBoolean();, +, +, +        // Misuse check, +        int activeInstances = MemoryAwareThreadPoolExecutor.activeInstances.incrementAndGet();, +        if (activeInstances >= MISUSE_WARNING_THRESHOLD &&, +            loggedMisuseWarning.compareAndSet(false, true)) {, +            logger.warn(, +                    "There are too many active " + getClass().getSimpleName() +, +                    " instances (" + activeInstances + ") - you should share " +, +                    "the small number of instances to avoid excessive resource " +, +                    "consumption.");, +        }, +    }, +, +    @Override, +    protected void terminated() {, +        super.terminated();, +        activeInstances.decrementAndGet();, +++ b/src/main/java/org/jboss/netty/handler/timeout/HashedWheelTimer.java, +    private static final int MISUSE_WARNING_THRESHOLD = 1024;, +    private static final AtomicInteger activeInstances = new AtomicInteger();, +    private static final AtomicBoolean loggedMisuseWarning = new AtomicBoolean();, +, +, +        // Misuse check, +        int activeInstances = HashedWheelTimer.activeInstances.incrementAndGet();, +        if (activeInstances >= MISUSE_WARNING_THRESHOLD &&, +            loggedMisuseWarning.compareAndSet(false, true)) {, +            logger.warn(, +                    "There are too many active " + getClass().getSimpleName() +, +                    " instances (" + activeInstances + ") - you should share " +, +                    "the small number of instances to avoid excessive resource " +, +                    "consumption.");, +        }, +        activeInstances.decrementAndGet();, +]