[+++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.PlatformDependent;, +            try {, +            } catch (Throwable cause) {, +                STATE_UPDATER.set(this, ST_TERMINATED);, +                terminationFuture.tryFailure(cause);, +, +                if (!(cause instanceof Exception)) {, +                    // Also rethrow as it may be an OOME for example, +                    PlatformDependent.throwException(cause);, +                }, +                return terminationFuture;, +            }, +            try {, +            } catch (Throwable cause) {, +                STATE_UPDATER.set(this, ST_TERMINATED);, +                terminationFuture.tryFailure(cause);, +, +                if (!(cause instanceof Exception)) {, +                    // Also rethrow as it may be an OOME for example, +                    PlatformDependent.throwException(cause);, +                }, +                return;, +            }, +                try {, +                } catch (Throwable cause) {, +                    STATE_UPDATER.set(this, ST_NOT_STARTED);, +                    PlatformDependent.throwException(cause);, +                }, +++ b/common/src/main/java/io/netty/util/concurrent/SingleThreadEventExecutor.java, +import io.netty.util.internal.PlatformDependent;, +            try {, +            } catch (Throwable cause) {, +                STATE_UPDATER.set(this, ST_TERMINATED);, +                terminationFuture.tryFailure(cause);, +, +                if (!(cause instanceof Exception)) {, +                    // Also rethrow as it may be an OOME for example, +                    PlatformDependent.throwException(cause);, +                }, +                return terminationFuture;, +            }, +            try {, +            } catch (Throwable cause) {, +                STATE_UPDATER.set(this, ST_TERMINATED);, +                terminationFuture.tryFailure(cause);, +, +                if (!(cause instanceof Exception)) {, +                    // Also rethrow as it may be an OOME for example, +                    PlatformDependent.throwException(cause);, +                }, +                return;, +            }, +                try {, +                } catch (Throwable cause) {, +                    STATE_UPDATER.set(this, ST_NOT_STARTED);, +                    PlatformDependent.throwException(cause);, +                }, +++ b/common/src/test/java/io/netty/util/concurrent/SingleThreadEventExecutorTest.java, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +    public void testWrappedExecutureIsShutdown() {, +        ExecutorService executorService = Executors.newSingleThreadExecutor();, +, +        SingleThreadEventExecutor executor = new SingleThreadEventExecutor(null, executorService, false) {, +            @Override, +            protected void run() {, +                while (!confirmShutdown()) {, +                    Runnable task = takeTask();, +                    if (task != null) {, +                        task.run();, +                    }, +                }, +            }, +        };, +, +        executorService.shutdownNow();, +        executeShouldFail(executor);, +        executeShouldFail(executor);, +        try {, +            executor.shutdownGracefully().syncUninterruptibly();, +            Assert.fail();, +        } catch (RejectedExecutionException expected) {, +            // expected, +        }, +        Assert.assertTrue(executor.isShutdown());, +    }, +, +    private static void executeShouldFail(Executor executor) {, +        try {, +            executor.execute(new Runnable() {, +                @Override, +                public void run() {, +                    // Noop., +                }, +            });, +            Assert.fail();, +        } catch (RejectedExecutionException expected) {, +            // expected, +        }]