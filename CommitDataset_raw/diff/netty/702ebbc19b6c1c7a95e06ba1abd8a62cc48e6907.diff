[+++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResponseDecoder.java, +        int checked = 0;, +        int length = buf.writerIndex();, +                // check for loops, +                checked += 2;, +                if (checked >= length) {, +                    return null;, +                }, +++ b/codec-dns/src/main/java/io/netty/handler/codec/dns/DnsResponseDecoder.java, +        int checked = 0;, +        int length = buf.writerIndex();, +                // check for loops, +                checked += 2;, +                if (checked >= length) {, +                    return null;, +                }, +++ b/codec-dns/src/test/java/io/netty/handler/codec/dns/DnsResponseTest.java, +import io.netty.handler.codec.DecoderException;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +    private static final byte[] malformedLoopPacket = { 0, 4, -127, -128, 0, 1, 0, 0, 0, 0, 0, 0, -64, 12, 0, 1, 0, 1 };, +, +, +    @Rule, +    public ExpectedException exception = ExpectedException.none();, +, +    @Test, +    public void readMalormedResponseTest() throws Exception {, +        EmbeddedChannel embedder = new EmbeddedChannel(new DnsResponseDecoder());, +        ByteBuf packet = embedder.alloc().buffer(512).writeBytes(malformedLoopPacket);, +        exception.expect(DecoderException.class);, +        exception.expectMessage("java.lang.NullPointerException: name");, +        embedder.writeInbound(new DatagramPacket(packet, null, new InetSocketAddress(0)));, +    }]