[+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        int bytesToSlice = length;, +        int firstBufOffset = offset - firstC.offset;, +        ByteBuf slice = firstC.buf.slice(firstBufOffset + firstC.buf.readerIndex(),, +                                         Math.min(firstC.length - firstBufOffset, bytesToSlice));, +        bytesToSlice -= slice.readableBytes();, +        if (bytesToSlice == 0) {, +            return Collections.singletonList(slice);, +, +        List<ByteBuf> sliceList = new ArrayList<ByteBuf>(components.size() - componentId);, +        sliceList.add(slice);, +, +        // Add all the slices until there is nothing more left and then return the List., +        do {, +            Component component = components.get(++componentId);, +            slice = component.buf.slice(component.buf.readerIndex(), Math.min(component.length, bytesToSlice));, +            bytesToSlice -= slice.readableBytes();, +            sliceList.add(slice);, +        return sliceList;, +++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java, +        int bytesToSlice = length;, +        int firstBufOffset = offset - firstC.offset;, +        ByteBuf slice = firstC.buf.slice(firstBufOffset + firstC.buf.readerIndex(),, +                                         Math.min(firstC.length - firstBufOffset, bytesToSlice));, +        bytesToSlice -= slice.readableBytes();, +        if (bytesToSlice == 0) {, +            return Collections.singletonList(slice);, +, +        List<ByteBuf> sliceList = new ArrayList<ByteBuf>(components.size() - componentId);, +        sliceList.add(slice);, +, +        // Add all the slices until there is nothing more left and then return the List., +        do {, +            Component component = components.get(++componentId);, +            slice = component.buf.slice(component.buf.readerIndex(), Math.min(component.length, bytesToSlice));, +            bytesToSlice -= slice.readableBytes();, +            sliceList.add(slice);, +        return sliceList;, +++ b/buffer/src/test/java/io/netty/buffer/AbstractCompositeByteBufTest.java, +import io.netty.util.internal.PlatformDependent;, +, +    @Test, +    public void testDecomposeMultiple() {, +        testDecompose(150, 500, 3);, +    }, +, +    @Test, +    public void testDecomposeOne() {, +        testDecompose(310, 50, 1);, +    }, +, +    @Test, +    public void testDecomposeNone() {, +        testDecompose(310, 0, 0);, +    }, +, +    private static void testDecompose(int offset, int length, int expectedListSize) {, +        byte[] bytes = new byte[1024];, +        PlatformDependent.threadLocalRandom().nextBytes(bytes);, +        ByteBuf buf = wrappedBuffer(bytes);, +, +        CompositeByteBuf composite = compositeBuffer();, +        composite.addComponents(true,, +                                buf.retainedSlice(100, 200),, +                                buf.retainedSlice(300, 400),, +                                buf.retainedSlice(700, 100));, +, +        ByteBuf slice = composite.slice(offset, length);, +        List<ByteBuf> bufferList = composite.decompose(offset, length);, +        assertEquals(expectedListSize, bufferList.size());, +        ByteBuf wrapped = wrappedBuffer(bufferList.toArray(new ByteBuf[0]));, +, +        assertEquals(slice, wrapped);, +        composite.release();, +        buf.release();, +, +        for (ByteBuf buffer: bufferList) {, +            assertEquals(0, buffer.refCnt());, +        }, +    }, +]