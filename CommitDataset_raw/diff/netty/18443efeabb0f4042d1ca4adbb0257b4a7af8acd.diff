[+++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +import io.netty.util.internal.ObjectUtil;, +import java.nio.ByteOrder;, +    private final ByteOrder byteOrder;, +        this(ByteOrder.BIG_ENDIAN, lengthFieldLength, lengthAdjustment, lengthIncludesLengthFieldLength);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param byteOrder         the {@link ByteOrder} of the length field, +     * @param lengthFieldLength the length of the prepended length field., +     *                          Only 1, 2, 3, 4, and 8 are allowed., +     * @param lengthAdjustment  the compensation value to add to the value, +     *                          of the length field, +     * @param lengthIncludesLengthFieldLength, +     *                          if {@code true}, the length of the prepended, +     *                          length field is added to the value of the, +     *                          prepended length field., +     *, +     * @throws IllegalArgumentException, +     *         if {@code lengthFieldLength} is not 1, 2, 3, 4, or 8, +     */, +    public LengthFieldPrepender(, +            ByteOrder byteOrder, int lengthFieldLength,, +            int lengthAdjustment, boolean lengthIncludesLengthFieldLength) {, +        ObjectUtil.checkNotNull(byteOrder, "byteOrder");, +        this.byteOrder = byteOrder;, +            out.add(ctx.alloc().buffer(1).order(byteOrder).writeByte((byte) length));, +            out.add(ctx.alloc().buffer(2).order(byteOrder).writeShort((short) length));, +            out.add(ctx.alloc().buffer(3).order(byteOrder).writeMedium(length));, +            out.add(ctx.alloc().buffer(4).order(byteOrder).writeInt(length));, +            out.add(ctx.alloc().buffer(8).order(byteOrder).writeLong(length));, +++ b/codec/src/main/java/io/netty/handler/codec/LengthFieldPrepender.java, +import io.netty.util.internal.ObjectUtil;, +import java.nio.ByteOrder;, +    private final ByteOrder byteOrder;, +        this(ByteOrder.BIG_ENDIAN, lengthFieldLength, lengthAdjustment, lengthIncludesLengthFieldLength);, +    }, +, +    /**, +     * Creates a new instance., +     *, +     * @param byteOrder         the {@link ByteOrder} of the length field, +     * @param lengthFieldLength the length of the prepended length field., +     *                          Only 1, 2, 3, 4, and 8 are allowed., +     * @param lengthAdjustment  the compensation value to add to the value, +     *                          of the length field, +     * @param lengthIncludesLengthFieldLength, +     *                          if {@code true}, the length of the prepended, +     *                          length field is added to the value of the, +     *                          prepended length field., +     *, +     * @throws IllegalArgumentException, +     *         if {@code lengthFieldLength} is not 1, 2, 3, 4, or 8, +     */, +    public LengthFieldPrepender(, +            ByteOrder byteOrder, int lengthFieldLength,, +            int lengthAdjustment, boolean lengthIncludesLengthFieldLength) {, +        ObjectUtil.checkNotNull(byteOrder, "byteOrder");, +        this.byteOrder = byteOrder;, +            out.add(ctx.alloc().buffer(1).order(byteOrder).writeByte((byte) length));, +            out.add(ctx.alloc().buffer(2).order(byteOrder).writeShort((short) length));, +            out.add(ctx.alloc().buffer(3).order(byteOrder).writeMedium(length));, +            out.add(ctx.alloc().buffer(4).order(byteOrder).writeInt(length));, +            out.add(ctx.alloc().buffer(8).order(byteOrder).writeLong(length));, +++ b/codec/src/test/java/io/netty/handler/codec/frame/LengthFieldPrependerTest.java, +import java.nio.ByteOrder;, +, +, +    @Test, +    public void testPrependLengthInLittleEndian() throws Exception {, +        final EmbeddedChannel ch = new EmbeddedChannel(new LengthFieldPrepender(ByteOrder.LITTLE_ENDIAN, 4, 0, false));, +        ch.writeOutbound(msg);, +        ByteBuf buf = ch.readOutbound();, +        assertEquals(4, buf.readableBytes());, +        byte[] writtenBytes = new byte[buf.readableBytes()];, +        buf.getBytes(0, writtenBytes);, +        assertEquals(1, writtenBytes[0]);, +        assertEquals(0, writtenBytes[1]);, +        assertEquals(0, writtenBytes[2]);, +        assertEquals(0, writtenBytes[3]);, +        buf.release();, +, +        buf = ch.readOutbound();, +        assertSame(buf, msg);, +        buf.release();, +        assertFalse("The channel must have been completely read", ch.finish());, +    }, +]