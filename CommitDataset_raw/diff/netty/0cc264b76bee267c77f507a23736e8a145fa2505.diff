[+++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import java.util.Random;, +, +    private static final ByteBufAllocator unpooledAllocator = new UnpooledByteBufAllocator(true);, +    private static final ByteBufAllocator pooledAllocator =, +            new PooledByteBufAllocator(true, 4, 4, 8192, 11, 0, 0, 0); // Disable thread-local cache, +, +    private static final int MAX_LIVE_BUFFERS = 8192;, +    private static final Random rand = new Random();, +    private static final ByteBuf[] unpooledHeapBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] unpooledDirectBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] pooledHeapBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] pooledDirectBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +        int idx = rand.nextInt(unpooledHeapBuffers.length);, +        ByteBuf oldBuf = unpooledHeapBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        unpooledHeapBuffers[idx] = unpooledAllocator.heapBuffer(size);, +        int idx = rand.nextInt(unpooledDirectBuffers.length);, +        ByteBuf oldBuf = unpooledDirectBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        unpooledDirectBuffers[idx] = unpooledAllocator.directBuffer(size);, +        int idx = rand.nextInt(pooledHeapBuffers.length);, +        ByteBuf oldBuf = pooledHeapBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        pooledHeapBuffers[idx] = pooledAllocator.heapBuffer(size);, +        int idx = rand.nextInt(pooledDirectBuffers.length);, +        ByteBuf oldBuf = pooledDirectBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        pooledDirectBuffers[idx] = pooledAllocator.directBuffer(size);, +    }, +++ b/microbench/src/test/java/io/netty/microbench/buffer/ByteBufAllocatorBenchmark.java, +import java.util.Random;, +, +    private static final ByteBufAllocator unpooledAllocator = new UnpooledByteBufAllocator(true);, +    private static final ByteBufAllocator pooledAllocator =, +            new PooledByteBufAllocator(true, 4, 4, 8192, 11, 0, 0, 0); // Disable thread-local cache, +, +    private static final int MAX_LIVE_BUFFERS = 8192;, +    private static final Random rand = new Random();, +    private static final ByteBuf[] unpooledHeapBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] unpooledDirectBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] pooledHeapBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +    private static final ByteBuf[] pooledDirectBuffers = new ByteBuf[MAX_LIVE_BUFFERS];, +        int idx = rand.nextInt(unpooledHeapBuffers.length);, +        ByteBuf oldBuf = unpooledHeapBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        unpooledHeapBuffers[idx] = unpooledAllocator.heapBuffer(size);, +        int idx = rand.nextInt(unpooledDirectBuffers.length);, +        ByteBuf oldBuf = unpooledDirectBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        unpooledDirectBuffers[idx] = unpooledAllocator.directBuffer(size);, +        int idx = rand.nextInt(pooledHeapBuffers.length);, +        ByteBuf oldBuf = pooledHeapBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        }, +        pooledHeapBuffers[idx] = pooledAllocator.heapBuffer(size);, +        int idx = rand.nextInt(pooledDirectBuffers.length);, +        ByteBuf oldBuf = pooledDirectBuffers[idx];, +        if (oldBuf != null) {, +            oldBuf.release();, +        pooledDirectBuffers[idx] = pooledAllocator.directBuffer(size);, +    }, +++ b/microbench/src/test/java/io/netty/microbench/util/AbstractMicrobenchmark.java, +    protected static final String[] JVM_ARGS = {]