[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +int init_sockaddr(JNIEnv * env, jbyteArray address, jint scopeId, jint jport, struct sockaddr_storage * addr) {, +    // Use GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical to signal the VM that we really would like, +    // to not do a memory copy here. This is ok as we not do any blocking action here anyway., +    // This is important as the VM may suspend GC for the time!, +    jbyte* addressBytes = (*env)->GetPrimitiveArrayCritical(env, address, 0);, +    if (addressBytes == NULL) {, +        // No memory left ?!?!?, +        throwOutOfMemoryError(env, "Can't allocate memory");, +        return -1;, +    }, +    (*env)->ReleasePrimitiveArrayCritical(env, address, addressBytes, JNI_ABORT);, +    return 0;, +int init_in_addr(JNIEnv * env, jbyteArray address, struct in_addr * addr) {, +    // Use GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical to signal the VM that we really would like, +    // to not do a memory copy here. This is ok as we not do any blocking action here anyway., +    // This is important as the VM may suspend GC for the time!, +    jbyte* addressBytes = (*env)->GetPrimitiveArrayCritical(env, address, 0);, +    if (addressBytes == NULL) {, +        // No memory left ?!?!?, +        throwOutOfMemoryError(env, "Can't allocate memory");, +        return -1;, +    }, +    (*env)->ReleasePrimitiveArrayCritical(env, address, addressBytes, JNI_ABORT);, +    return 0;, +    // Use GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical to signal the VM that we really would like, +    // to not do a memory copy here. This is ok as we not do any blocking action here anyway., +    // This is important as the VM may suspend GC for the time!, +    jlong *elements = (*env)->GetPrimitiveArrayCritical(env, events, &isCopy);, +    (*env)->ReleasePrimitiveArrayCritical(env, events, elements, mode);, +    if (init_sockaddr(env, address, scopeId, port, &addr) == -1) {, +        return -1;, +    }, +    if (init_sockaddr(env, address, scopeId, port, &addr) == -1) {, +        return -1;, +    }, +    if (init_sockaddr(env, address, scopeId, port, &addr) == -1) {, +        return -1;, +    }]