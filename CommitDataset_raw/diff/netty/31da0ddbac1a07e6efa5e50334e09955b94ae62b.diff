[+++ b/common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java, + * Creates an {@link InternalLogger} or changes the default factory, + * implementation.  This factory allows you to choose what logging framework, + * Netty should use.  The default factory is {@link Slf4JLoggerFactory}.  If SLF4J, + * is not available, {@link Log4JLoggerFactory} is used.  If Log4J is not available,, + * {@link JdkLoggerFactory} is used.  You can change it to your preferred, + * logging framework before other Netty classes are loaded:, + * <pre>, + * {@link InternalLoggerFactory}.setDefaultFactory({@link Log4JLoggerFactory}.INSTANCE);, + * </pre>, + * Please note that the new default factory is effective only for the classes, + * which were loaded after the default factory is changed.  Therefore,, + * {@link #setDefaultFactory(InternalLoggerFactory)} should be called as early, + * as possible and shouldn't be called more than once., +    private static volatile InternalLoggerFactory defaultFactory;, +     * Returns the default factory.  The initial default factory is, +     * {@link JdkLoggerFactory}., +        if (defaultFactory == null) {, +            defaultFactory = newDefaultFactory(InternalLoggerFactory.class.getName());, +        }, +        return defaultFactory;, +     * Changes the default factory., +        if (defaultFactory == null) {, +            throw new NullPointerException("defaultFactory");, +        }, +        InternalLoggerFactory.defaultFactory = defaultFactory;, +        return getInstance(clazz.getName());, +        return getDefaultFactory().newInstance(name);, +++ b/common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java, + * Creates an {@link InternalLogger} or changes the default factory, + * implementation.  This factory allows you to choose what logging framework, + * Netty should use.  The default factory is {@link Slf4JLoggerFactory}.  If SLF4J, + * is not available, {@link Log4JLoggerFactory} is used.  If Log4J is not available,, + * {@link JdkLoggerFactory} is used.  You can change it to your preferred, + * logging framework before other Netty classes are loaded:, + * <pre>, + * {@link InternalLoggerFactory}.setDefaultFactory({@link Log4JLoggerFactory}.INSTANCE);, + * </pre>, + * Please note that the new default factory is effective only for the classes, + * which were loaded after the default factory is changed.  Therefore,, + * {@link #setDefaultFactory(InternalLoggerFactory)} should be called as early, + * as possible and shouldn't be called more than once., +    private static volatile InternalLoggerFactory defaultFactory;, +     * Returns the default factory.  The initial default factory is, +     * {@link JdkLoggerFactory}., +        if (defaultFactory == null) {, +            defaultFactory = newDefaultFactory(InternalLoggerFactory.class.getName());, +        }, +        return defaultFactory;, +     * Changes the default factory., +        if (defaultFactory == null) {, +            throw new NullPointerException("defaultFactory");, +        }, +        InternalLoggerFactory.defaultFactory = defaultFactory;, +        return getInstance(clazz.getName());, +        return getDefaultFactory().newInstance(name);, +++ b/common/src/test/java/io/netty/util/internal/logging/InternalLoggerFactoryTest.java, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +    private InternalLoggerFactory oldLoggerFactory;, +        oldLoggerFactory = InternalLoggerFactory.getDefaultFactory();, +        InternalLoggerFactory mockFactory = createMock(InternalLoggerFactory.class);, +        InternalLoggerFactory.setDefaultFactory(mockFactory);, +        InternalLoggerFactory.setDefaultFactory(oldLoggerFactory);, +        InternalLoggerFactory.setDefaultFactory(null);, +        InternalLoggerFactory.setDefaultFactory(oldLoggerFactory);, +        String helloWorld = "Hello, world!";, +, +        InternalLogger one = InternalLoggerFactory.getInstance("helloWorld");, +        InternalLogger two = InternalLoggerFactory.getInstance(helloWorld.getClass());, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");, +        InternalLogger logger = InternalLoggerFactory.getInstance("mock");]