[+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +            DnsServerAddresses nameServerAddresses) {, +        this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, +            DnsServerAddresses nameServerAddresses) {, +        return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, +     * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., +            DnsServerAddresses nameServerAddresses) throws Exception {, +                newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +            DnsServerAddresses nameServerAddresses) {, +        this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, +            DnsServerAddresses nameServerAddresses) {, +        return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, +     * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., +            DnsServerAddresses nameServerAddresses) throws Exception {, +                newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelOption;, +    final Future<Channel> channelFuture;, +            final DnsCache resolveCache,, +        b.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +        final DnsResponseHandler responseHandler = new DnsResponseHandler(executor().<Channel>newPromise());, +        channelFuture = responseHandler.channelActivePromise;, +        ch = (DatagramChannel) b.register().channel();, +        ch.config().setRecvByteBufAllocator(new FixedRecvByteBufAllocator(maxPayloadSize));, +, +        ch.closeFuture().addListener(new ChannelFutureListener() {, +, +        private final Promise<Channel> channelActivePromise;, +, +        DnsResponseHandler(Promise<Channel> channelActivePromise) {, +            this.channelActivePromise = channelActivePromise;, +        }, +, +        public void channelActive(ChannelHandlerContext ctx) throws Exception {, +            super.channelActive(ctx);, +            channelActivePromise.setSuccess(ctx.channel());, +        }, +, +        @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +            DnsServerAddresses nameServerAddresses) {, +        this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, +            DnsServerAddresses nameServerAddresses) {, +        return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, +     * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., +            DnsServerAddresses nameServerAddresses) throws Exception {, +                newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelOption;, +    final Future<Channel> channelFuture;, +            final DnsCache resolveCache,, +        b.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +        final DnsResponseHandler responseHandler = new DnsResponseHandler(executor().<Channel>newPromise());, +        channelFuture = responseHandler.channelActivePromise;, +        ch = (DatagramChannel) b.register().channel();, +        ch.config().setRecvByteBufAllocator(new FixedRecvByteBufAllocator(maxPayloadSize));, +, +        ch.closeFuture().addListener(new ChannelFutureListener() {, +, +        private final Promise<Channel> channelActivePromise;, +, +        DnsResponseHandler(Promise<Channel> channelActivePromise) {, +            this.channelActivePromise = channelActivePromise;, +        }, +, +        public void channelActive(ChannelHandlerContext ctx) throws Exception {, +            super.channelActive(ctx);, +            channelActivePromise.setSuccess(ctx.channel());, +        }, +, +        @Override, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsAddressResolverGroup.java, +            DnsServerAddresses nameServerAddresses) {, +        this(new ReflectiveChannelFactory<DatagramChannel>(channelType), nameServerAddresses);, +            DnsServerAddresses nameServerAddresses) {, +        return newResolver((EventLoop) executor, channelFactory, nameServerAddresses);, +     * @deprecated Override {@link #newNameResolver(EventLoop, ChannelFactory, DnsServerAddresses)}., +            DnsServerAddresses nameServerAddresses) throws Exception {, +                newNameResolver(eventLoop, channelFactory, nameServerAddresses),, +++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolver.java, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelOption;, +    final Future<Channel> channelFuture;, +            final DnsCache resolveCache,, +        b.option(ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION, true);, +        final DnsResponseHandler responseHandler = new DnsResponseHandler(executor().<Channel>newPromise());, +        channelFuture = responseHandler.channelActivePromise;, +        ch = (DatagramChannel) b.register().channel();, +        ch.config().setRecvByteBufAllocator(new FixedRecvByteBufAllocator(maxPayloadSize));, +, +        ch.closeFuture().addListener(new ChannelFutureListener() {, +, +        private final Promise<Channel> channelActivePromise;, +, +        DnsResponseHandler(Promise<Channel> channelActivePromise) {, +            this.channelActivePromise = channelActivePromise;]