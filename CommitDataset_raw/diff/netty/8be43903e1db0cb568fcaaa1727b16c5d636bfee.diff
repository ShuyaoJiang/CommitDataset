[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +                ctx.nextInboundByteBuffer().writeBytes(in);, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +                ctx.nextInboundByteBuffer().writeBytes(in);, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerContext.java, +     * <p>, +     * Be cautious with caching {@link #inboundByteBuffer()} as it may change as a result of this, +     * method.  For example, instead of extending {@link io.netty.handler.codec.ByteToMessageDecoder},, +     * extend what that class does (currently, {@link ChannelInboundHandlerAdapter} and, +     * {@link ChannelInboundByteHandler}.  In other words, implementing your own, +     * {@link ChannelInboundHandlerAdapter#inboundBufferUpdated(ChannelHandlerContext)}/{@link ChannelStateHandler#inboundBufferUpdated(ChannelHandlerContext)}, +     * will help guarantee a replaced buffer won't be missed.</p>, +     * <p>, +     * Be cautious with caching {@link #inboundMessageBuffer()} as it may change as a result of this, +     * method.  For example, instead of extending {@link io.netty.handler.codec.MessageToMessageDecoder},, +     * extend what that class does (currently, {@link ChannelInboundHandlerAdapter} and, +     * {@link ChannelInboundMessageHandler}.  In other words, implementing your own, +     * {@link ChannelInboundHandlerAdapter#inboundBufferUpdated(ChannelHandlerContext)}/{@link ChannelStateHandler#inboundBufferUpdated(ChannelHandlerContext)}, +     * will help guarantee a replaced buffer won't be missed.</p>, +     * <p>, +     * Be cautious with caching {@link #outboundByteBuffer()} as it may change as a result of this, +     * method.  For example, instead of extending {@link io.netty.handler.codec.ByteToByteEncoder},, +     * extend what that class does (currently, {@link ChannelOutboundByteHandlerAdapter})., +     * In other words, implementing your own, +     * {@link ChannelOutboundHandlerAdapter#flush(ChannelHandlerContext, ChannelFuture)}/{@link ChannelOperationHandler#flush(ChannelHandlerContext, ChannelFuture)}, +     * will help guarantee a replaced buffer won't be missed.</p>, +     * <p>, +     * Be cautious with caching {@link #outboundMessageBuffer()} as it may change as a result of this, +     * method.  For example, instead of extending {@link io.netty.handler.codec.MessageToByteEncoder}, +     * or {@link io.netty.handler.codec.MessageToMessageEncoder}, extend what these classes do (currently,, +     * {@link ChannelOutboundMessageHandlerAdapter}.  In other words, implementing your own, +     * {@link ChannelOutboundHandlerAdapter#flush(ChannelHandlerContext, ChannelFuture)}/{@link ChannelOperationHandler#flush(ChannelHandlerContext, ChannelFuture)}, +     * will help guarantee a replaced buffer won't be missed.</p>]