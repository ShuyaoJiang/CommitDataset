[+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.buffer.ByteBufProcessor;, +    private final AppendableCharSequence seq = new AppendableCharSequence(128);, +    private final HeaderParser headerParser = new HeaderParser(seq);, +    private final LineParser lineParser = new LineParser(seq);, +            String[] initialLine = splitInitialLine(lineParser.parse(buffer));, +            AppendableCharSequence line = lineParser.parse(buffer);, +        AppendableCharSequence line = headerParser.parse(buffer);, +                line = headerParser.parse(buffer);, +        AppendableCharSequence line = headerParser.parse(buffer);, +                line = headerParser.parse(buffer);, +, +    private final class HeaderParser implements ByteBufProcessor {, +        private final AppendableCharSequence seq;, +, +        HeaderParser(AppendableCharSequence seq) {, +            this.seq = seq;, +        }, +, +        public AppendableCharSequence parse(ByteBuf buffer) {, +            seq.reset();, +            headerSize = 0;, +            int i = buffer.forEachByte(this);, +            buffer.readerIndex(i + 1);, +            return seq;, +        }, +, +        @Override, +        public boolean process(byte value) throws Exception {, +            char nextByte = (char) value;, +            headerSize++;, +            if (nextByte == HttpConstants.CR) {, +                return true;, +            }, +            if (nextByte == HttpConstants.LF) {, +                return false;, +            }, +, +            // Abort decoding if the header part is too large., +            if (headerSize >= maxHeaderSize) {, +                // TODO: Respond with Bad Request and discard the traffic, +                //    or close the connection., +                //       No need to notify the upstream handlers - just log., +                //       If decoding a response, just throw an exception., +                throw new TooLongFrameException(, +                        "HTTP header is larger than " +, +                                maxHeaderSize + " bytes.");, +            }, +, +            seq.append(nextByte);, +            return true;, +        }, +    }, +, +    private final class LineParser implements ByteBufProcessor {, +        private final AppendableCharSequence seq;, +        private int size;, +, +        LineParser(AppendableCharSequence seq) {, +            this.seq = seq;, +        }, +, +        public AppendableCharSequence parse(ByteBuf buffer) {, +            seq.reset();, +            size = 0;, +            int i = buffer.forEachByte(this);, +            buffer.readerIndex(i + 1);, +            return seq;, +        }, +, +        @Override, +        public boolean process(byte value) throws Exception {, +            char nextByte = (char) value;, +            if (nextByte == HttpConstants.CR) {, +                return true;, +            } else if (nextByte == HttpConstants.LF) {, +                return false;, +            } else {, +                if (size >= maxInitialLineLength) {, +                    // TODO: Respond with Bad Request and discard the traffic, +                    //    or close the connection., +                    //       No need to notify the upstream handlers - just log., +                    //       If decoding a response, just throw an exception., +                    throw new TooLongFrameException(, +                            "An HTTP line is larger than " + maxInitialLineLength +, +                                    " bytes.");, +                }, +                size ++;, +                seq.append(nextByte);, +                return true;, +            }, +        }, +    }, +++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java, +import io.netty.buffer.ByteBufProcessor;, +    private final AppendableCharSequence seq = new AppendableCharSequence(128);, +    private final HeaderParser headerParser = new HeaderParser(seq);, +    private final LineParser lineParser = new LineParser(seq);, +            String[] initialLine = splitInitialLine(lineParser.parse(buffer));, +            AppendableCharSequence line = lineParser.parse(buffer);]