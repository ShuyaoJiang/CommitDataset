[+++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> SO_TIMEOUT =, +            new ChannelOption<Integer>("SO_TIMEOUT");, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> SO_TIMEOUT =, +            new ChannelOption<Integer>("SO_TIMEOUT");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultServerSocketChannelConfig.java, +    protected final ServerSocket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> SO_TIMEOUT =, +            new ChannelOption<Integer>("SO_TIMEOUT");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultServerSocketChannelConfig.java, +    protected final ServerSocket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultSocketChannelConfig.java, +    protected final Socket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> SO_TIMEOUT =, +            new ChannelOption<Integer>("SO_TIMEOUT");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultServerSocketChannelConfig.java, +    protected final ServerSocket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultSocketChannelConfig.java, +    protected final Socket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +    /**, +     * Check if the input was shutdown and if so return {@code true}. The default implementation sleeps also for, +     * {@link #SO_TIMEOUT} milliseconds to simulate some blocking., +     */, +    protected boolean checkInputShutdown() {, +            return true;, +        }, +        return false;, +    }, +, +    @Override, +    protected void doRead() {, +        if (checkInputShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/ChannelOption.java, +    public static final ChannelOption<Integer> SO_TIMEOUT =, +            new ChannelOption<Integer>("SO_TIMEOUT");, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultServerSocketChannelConfig.java, +    protected final ServerSocket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/socket/DefaultSocketChannelConfig.java, +    protected final Socket javaSocket;, +++ b/transport/src/main/java/io/netty/channel/socket/oio/AbstractOioByteChannel.java, +    /**, +     * Check if the input was shutdown and if so return {@code true}. The default implementation sleeps also for, +     * {@link #SO_TIMEOUT} milliseconds to simulate some blocking., +     */, +    protected boolean checkInputShutdown() {, +            return true;, +        }, +        return false;, +    }, +, +    @Override, +    protected void doRead() {, +        if (checkInputShutdown()) {, +++ b/transport/src/main/java/io/netty/channel/socket/oio/DefaultOioServerSocketChannelConfig.java, +/*, + * Copyright 2013 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.socket.oio;, +, +import io.netty.channel.ChannelException;, +import io.netty.channel.ChannelOption;, +import io.netty.channel.socket.DefaultServerSocketChannelConfig;, +import io.netty.channel.socket.ServerSocketChannel;, +, +import java.io.IOException;, +import java.net.ServerSocket;, +import java.util.Map;, +, +import static io.netty.channel.ChannelOption.SO_TIMEOUT;, +, +/**, + * Default {@link OioServerSocketChannelConfig} implementation, + */, +public class DefaultOioServerSocketChannelConfig extends DefaultServerSocketChannelConfig implements, +        OioServerSocketChannelConfig {, +, +    public DefaultOioServerSocketChannelConfig(ServerSocketChannel channel, ServerSocket javaSocket) {, +        super(channel, javaSocket);, +    }, +, +    @Override, +    public Map<ChannelOption<?>, Object> getOptions() {, +        return getOptions(, +                super.getOptions(), SO_TIMEOUT);]