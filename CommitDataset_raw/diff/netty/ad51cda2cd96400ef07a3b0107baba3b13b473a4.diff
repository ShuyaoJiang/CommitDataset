[+++ b/codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java, +/*, + * Copyright 2017 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.mqtt;, +, +import io.netty.buffer.ByteBuf;, +import io.netty.buffer.Unpooled;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public final class MqttMessageBuilders {, +, +    public static final class PublishBuilder {, +        private String topic;, +        private boolean retained;, +        private MqttQoS qos;, +        private ByteBuf payload;, +        private int messageId;, +, +        PublishBuilder() {, +        }, +, +        public PublishBuilder topicName(String topic) {, +            this.topic = topic;, +            return this;, +        }, +, +        public PublishBuilder retained(boolean retained) {, +            this.retained = retained;, +            return this;, +        }, +, +        public PublishBuilder qos(MqttQoS qos) {, +            this.qos = qos;, +            return this;, +        }, +, +        public PublishBuilder payload(ByteBuf payload) {, +            this.payload = payload;, +            return this;, +        }, +, +        public PublishBuilder messageId(int messageId) {, +            this.messageId = messageId;, +            return this;, +        }, +, +        public MqttPublishMessage build() {, +            MqttFixedHeader mqttFixedHeader = new MqttFixedHeader(MqttMessageType.PUBLISH, false, qos, retained, 0);, +            MqttPublishVariableHeader mqttVariableHeader = new MqttPublishVariableHeader(topic, messageId);, +            return new MqttPublishMessage(mqttFixedHeader, mqttVariableHeader, Unpooled.buffer().writeBytes(payload));, +        }, +    }, +, +    public static final class ConnectBuilder {, +, +        private MqttVersion version = MqttVersion.MQTT_3_1_1;, +        private String clientId;, +        private boolean cleanSession;, +        private boolean hasUser;, +        private boolean hasPassword;, +        private int keepAliveSecs;, +        private boolean willFlag;, +        private boolean willRetain;, +        private MqttQoS willQos = MqttQoS.AT_MOST_ONCE;, +        private String willTopic;, +        private String willMessage;, +        private String username;, +        private String password;, +, +        ConnectBuilder() {, +        }, +, +        public ConnectBuilder protocolVersion(MqttVersion version) {, +            this.version = version;, +            return this;, +        }, +, +        public ConnectBuilder clientId(String clientId) {, +            this.clientId = clientId;, +            return this;, +        }, +, +        public ConnectBuilder cleanSession(boolean cleanSession) {, +            this.cleanSession = cleanSession;, +            return this;]