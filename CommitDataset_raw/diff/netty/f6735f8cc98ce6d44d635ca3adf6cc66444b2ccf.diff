[+++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     * Create a new instance., +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     * Create a new instance., +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +     * @see {@link MultithreadEventExecutorGroup##MultithreadEventLoopGroup(int,ThreadFactory, Object...)}, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     * Create a new instance., +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +     * @see {@link MultithreadEventExecutorGroup##MultithreadEventLoopGroup(int,ThreadFactory, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations that use the new {@link AsynchronousChannel} which is part, + * of NIO.2., + */, +    /**, +     * Creates a new instance., +     *, +     * @param id, +     *        the unique non-negative integer ID of this channel., +     *        Specify {@code null} to auto-generate a unique negative integer, +     *        ID., +     * @param parent, +     *        the parent of this channel. {@code null} if there's no parent., +     * @param ch, +     *        the {@link AsynchronousChannel} which will handle the IO or {@code null} if not created yet., +     */, +    /**, +     * Return the underlying {@link AsynchronousChannel}. Be aware this should only be called after it was set as, +     * otherwise it will throw an {@link IllegalStateException}., +     */, +    /**, +     * Connect to the remote peer using the given localAddress if one is specified or {@code null} otherwise., +     */, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     * Create a new instance., +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +     * @see {@link MultithreadEventExecutorGroup##MultithreadEventLoopGroup(int,ThreadFactory, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations that use the new {@link AsynchronousChannel} which is part, + * of NIO.2., + */, +    /**, +     * Creates a new instance., +     *, +     * @param id, +     *        the unique non-negative integer ID of this channel., +     *        Specify {@code null} to auto-generate a unique negative integer, +     *        ID., +     * @param parent, +     *        the parent of this channel. {@code null} if there's no parent., +     * @param ch, +     *        the {@link AsynchronousChannel} which will handle the IO or {@code null} if not created yet., +     */, +    /**, +     * Return the underlying {@link AsynchronousChannel}. Be aware this should only be called after it was set as, +     * otherwise it will throw an {@link IllegalStateException}., +     */, +    /**, +     * Connect to the remote peer using the given localAddress if one is specified or {@code null} otherwise., +     */, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioChannelFinder.java, +, +    /**, +     * Try to find the {@link AbstractAioChannel} for the given {@link Runnable}., +     *, +     * @param   command         the {@link Runnable} for which the {@link AbstractAioChannel} should be found., +     * @return  channel         the {@link AbstractAioChannel} which belongs to the {@link Runnable} or {@code null} if, +     *                          it could not found., +     * @throws  Exception       will get thrown if an error accours., +     */, +++ b/transport/src/main/java/io/netty/channel/MultithreadEventExecutorGroup.java, +     * Create a new instance., +++ b/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java, +     * @see {@link MultithreadEventExecutorGroup##MultithreadEventLoopGroup(int,ThreadFactory, Object...)}, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +/**, + * Abstract base class for {@link Channel} implementations that use the new {@link AsynchronousChannel} which is part, + * of NIO.2., + */, +    /**, +     * Creates a new instance., +     *, +     * @param id, +     *        the unique non-negative integer ID of this channel., +     *        Specify {@code null} to auto-generate a unique negative integer, +     *        ID., +     * @param parent, +     *        the parent of this channel. {@code null} if there's no parent., +     * @param ch, +     *        the {@link AsynchronousChannel} which will handle the IO or {@code null} if not created yet., +     */, +    /**, +     * Return the underlying {@link AsynchronousChannel}. Be aware this should only be called after it was set as, +     * otherwise it will throw an {@link IllegalStateException}., +     */, +    /**, +     * Connect to the remote peer using the given localAddress if one is specified or {@code null} otherwise., +     */]