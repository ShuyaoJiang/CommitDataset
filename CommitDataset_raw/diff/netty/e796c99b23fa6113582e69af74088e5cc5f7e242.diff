[+++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import static org.junit.Assert.*;, +    public void testStringKeyRetrievedAsAsciiString() {, +        final HttpHeaders headers = new DefaultHttpHeaders(false);, +, +        // Test adding String key and retrieving it using a AsciiString key, +        final String connection = "keep-alive";, +        headers.add("Connection", connection);, +, +        // Passes, +        final String value = headers.getAsString(HttpHeaderNames.CONNECTION.toString());, +        assertNotNull(value);, +        assertEquals(connection, value);, +, +        // Passes, +        final String value2 = headers.getAsString(HttpHeaderNames.CONNECTION);, +        assertNotNull(value2);, +        assertEquals(connection, value2);, +    }, +, +    @Test, +    public void testAsciiStringKeyRetrievedAsString() {, +        final HttpHeaders headers = new DefaultHttpHeaders(false);, +, +        // Test adding AsciiString key and retrieving it using a String key, +        final String cacheControl = "no-cache";, +        headers.add(HttpHeaderNames.CACHE_CONTROL, cacheControl);, +, +        final String value = headers.getAsString(HttpHeaderNames.CACHE_CONTROL);, +        assertNotNull(value);, +        assertEquals(cacheControl, value);, +, +        final String value2 = headers.getAsString(HttpHeaderNames.CACHE_CONTROL.toString());, +        assertNotNull(value2);, +        assertEquals(cacheControl, value2);, +    }, +, +    @Test, +    public void testEqualsIgnoreCase() {, +++ b/codec-http/src/test/java/io/netty/handler/codec/http/DefaultHttpHeadersTest.java, +import static org.junit.Assert.*;, +    public void testStringKeyRetrievedAsAsciiString() {, +        final HttpHeaders headers = new DefaultHttpHeaders(false);, +, +        // Test adding String key and retrieving it using a AsciiString key, +        final String connection = "keep-alive";, +        headers.add("Connection", connection);, +, +        // Passes, +        final String value = headers.getAsString(HttpHeaderNames.CONNECTION.toString());, +        assertNotNull(value);, +        assertEquals(connection, value);, +, +        // Passes, +        final String value2 = headers.getAsString(HttpHeaderNames.CONNECTION);, +        assertNotNull(value2);, +        assertEquals(connection, value2);, +    }, +, +    @Test, +    public void testAsciiStringKeyRetrievedAsString() {, +        final HttpHeaders headers = new DefaultHttpHeaders(false);, +, +        // Test adding AsciiString key and retrieving it using a String key, +        final String cacheControl = "no-cache";, +        headers.add(HttpHeaderNames.CACHE_CONTROL, cacheControl);, +, +        final String value = headers.getAsString(HttpHeaderNames.CACHE_CONTROL);, +        assertNotNull(value);, +        assertEquals(cacheControl, value);, +, +        final String value2 = headers.getAsString(HttpHeaderNames.CACHE_CONTROL.toString());, +        assertNotNull(value2);, +        assertEquals(cacheControl, value2);, +    }, +, +    @Test, +    public void testEqualsIgnoreCase() {, +++ b/codec-http/src/test/java/io/netty/handler/codec/spdy/DefaultSpdyHeadersTest.java, +/*, + * Copyright 2015 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.codec.spdy;, +, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;]