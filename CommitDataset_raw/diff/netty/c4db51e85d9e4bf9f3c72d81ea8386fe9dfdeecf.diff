[+++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    protected AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        if (ch == null) {, +            throw new IllegalStateException("Try to access Channel before eventLoop was registered");, +        }, +        if (ch == null) {, +            return true;, +        }, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    protected AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        if (ch == null) {, +            throw new IllegalStateException("Try to access Channel before eventLoop was registered");, +        }, +        if (ch == null) {, +            return true;, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +        super(null, null, newSocket(parentGroup.group));, +, +                    new AioSocketChannel(channel, null, ch));, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    protected AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        if (ch == null) {, +            throw new IllegalStateException("Try to access Channel before eventLoop was registered");, +        }, +        if (ch == null) {, +            return true;, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +        super(null, null, newSocket(parentGroup.group));, +, +                    new AioSocketChannel(channel, null, ch));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +    private AioSocketChannelConfig config;, +    public AioSocketChannel() {, +        this(null, null, null);, +            AioServerSocketChannel parent, Integer id, AsynchronousSocketChannel ch) {, +        super(parent, id, ch);, +        config = new AioSocketChannelConfig(null);, +        return ch != null && javaChannel().isOpen() && remoteAddress0() != null;, +        if (ch == null) {, +            ch = newSocket(((AioEventLoopGroup) eventLoop().parent()).group);, +            config.channel = javaChannel();, +        }, +++ b/transport/src/main/java/io/netty/bootstrap/Bootstrap.java, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AbstractAioChannel.java, +    protected AsynchronousChannel ch;, +    protected AbstractAioChannel(Channel parent, Integer id, AsynchronousChannel ch) {, +        if (ch == null) {, +            throw new IllegalStateException("Try to access Channel before eventLoop was registered");, +        }, +        if (ch == null) {, +            return true;, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioServerSocketChannel.java, +        super(null, null, newSocket(parentGroup.group));, +, +                    new AioSocketChannel(channel, null, ch));, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannel.java, +    private AioSocketChannelConfig config;, +    public AioSocketChannel() {, +        this(null, null, null);, +            AioServerSocketChannel parent, Integer id, AsynchronousSocketChannel ch) {, +        super(parent, id, ch);, +        config = new AioSocketChannelConfig(null);, +        return ch != null && javaChannel().isOpen() && remoteAddress0() != null;, +        if (ch == null) {, +            ch = newSocket(((AioEventLoopGroup) eventLoop().parent()).group);, +            config.channel = javaChannel();, +        }, +++ b/transport/src/main/java/io/netty/channel/socket/aio/AioSocketChannelConfig.java, +    volatile NetworkChannel channel;, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +        channelNull();, +, +    private void channelNull() {, +        if (channel == null) {, +            throw new IllegalStateException("Channel not set while try to change options on it");, +        }, +    }]