[+++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jlong Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len);, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jlong Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Native.java, +    public static long sendfile(, +            int dest, DefaultFileRegion src, long baseOffset, long offset, long length) throws IOException {, +        // Open the file-region as it may be created via the lazy constructor. This is needed as we directly access, +        // the FileChannel field directly via JNI, +        src.open();, +, +        return sendfile0(dest, src, baseOffset, offset, length);, +    }, +, +    private static native long sendfile0(, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.c, +JNIEXPORT jlong JNICALL Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len) {, +++ b/transport-native-epoll/src/main/c/io_netty_channel_epoll_Native.h, +jlong Java_io_netty_channel_epoll_Native_sendfile0(JNIEnv *env, jclass clazz, jint fd, jobject fileRegion, jlong base_off, jlong off, jlong len);, +++ b/transport-native-epoll/src/main/java/io/netty/channel/epoll/Native.java, +    public static long sendfile(, +            int dest, DefaultFileRegion src, long baseOffset, long offset, long length) throws IOException {, +        // Open the file-region as it may be created via the lazy constructor. This is needed as we directly access, +        // the FileChannel field directly via JNI, +        src.open();, +, +        return sendfile0(dest, src, baseOffset, offset, length);, +    }, +, +    private static native long sendfile0(, +++ b/transport/src/main/java/io/netty/channel/DefaultFileRegion.java, +import io.netty.util.IllegalReferenceCountException;, +import java.io.File;, +import java.io.RandomAccessFile;, + * Default {@link FileRegion} implementation which transfer data from a {@link FileChannel} or {@link File}., +    private final File f;, +    private FileChannel file;, +        f = null;, +    }, +, +    /**, +     * Create a new instance using the given {@link File}. The {@link File} will be opened lazily or, +     * explicitly via {@link #open()}., +     *, +     * @param f         the {@link File} which should be transfered, +     * @param position  the position from which the transfer should start, +     * @param count     the number of bytes to transfer, +     */, +    public DefaultFileRegion(File f, long position, long count) {, +        if (f == null) {, +            throw new NullPointerException("f");, +        }, +        if (position < 0) {, +            throw new IllegalArgumentException("position must be >= 0 but was " + position);, +        }, +        if (count < 0) {, +            throw new IllegalArgumentException("count must be >= 0 but was " + count);, +        }, +        this.position = position;, +        this.count = count;, +        this.f = f;, +    }, +, +    /**, +     * Returns {@code true} if the {@link FileRegion} has a open file-descriptor, +     */, +    public boolean isOpen() {, +        return file != null;, +    }, +, +    /**, +     * Explicitly open the underlying file-descriptor if not done yet., +     */, +    public void open() throws IOException {, +        if (!isOpen() && refCnt() > 0) {, +            // Only open if this DefaultFileRegion was not released yet., +            file = new RandomAccessFile(f, "r").getChannel();, +        }, +        if (refCnt() == 0) {, +            throw new IllegalReferenceCountException(0);, +        }, +        // Call open to make sure fc is initialized. This is a no-oop if we called it before., +        open();, +        FileChannel file = this.file;, +, +        if (file == null) {, +            return;, +        }, +        this.file = null;, +]