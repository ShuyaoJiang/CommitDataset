[+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import java.util.Iterator;, +    /**, +     * We chose a {@link List} over a {@link Set} to avoid allocating an {@link Iterator} objects when iterating over, +     * the listeners., +     */, +    private final List<Listener> listeners = new ArrayList<Listener>(4);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onGoAwayReceived(lastKnownStream, errorCode, debugData);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onGoAwaySent(lastKnownStream, errorCode, debugData);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamRemoved(stream);, +                for (int i = 0; i < listeners.size(); i++) {, +                    listeners.get(i).onStreamActive(this);, +                    for (int i = 0; i < listeners.size(); i++) {, +                        listeners.get(i).onStreamClosed(this);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamHalfClosed(stream);, +                for (int i = 0; i < listeners.size(); i++) {, +                    listeners.get(i).onWeightChanged(this, oldWeight);, +            for (int j = 0; j < listeners.size(); j++) {, +                event.notifyListener(listeners.get(j));, +        for (int i = 0; i < listeners.size(); i++) {, +            listeners.get(i).onPriorityTreeParentChanging(stream, newParent);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamAdded(stream);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2Connection.java, +import java.util.Iterator;, +    /**, +     * We chose a {@link List} over a {@link Set} to avoid allocating an {@link Iterator} objects when iterating over, +     * the listeners., +     */, +    private final List<Listener> listeners = new ArrayList<Listener>(4);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onGoAwayReceived(lastKnownStream, errorCode, debugData);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onGoAwaySent(lastKnownStream, errorCode, debugData);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamRemoved(stream);, +                for (int i = 0; i < listeners.size(); i++) {, +                    listeners.get(i).onStreamActive(this);, +                    for (int i = 0; i < listeners.size(); i++) {, +                        listeners.get(i).onStreamClosed(this);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamHalfClosed(stream);, +                for (int i = 0; i < listeners.size(); i++) {, +                    listeners.get(i).onWeightChanged(this, oldWeight);, +            for (int j = 0; j < listeners.size(); j++) {, +                event.notifyListener(listeners.get(j));, +        for (int i = 0; i < listeners.size(); i++) {, +            listeners.get(i).onPriorityTreeParentChanging(stream, newParent);, +            for (int i = 0; i < listeners.size(); i++) {, +                listeners.get(i).onStreamAdded(stream);, +++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2Connection.java, +     * Adds a listener of stream life-cycle events., +     * Removes a listener of stream life-cycle events. If the same listener was added multiple times, +     * then only the first occurence gets removed.]