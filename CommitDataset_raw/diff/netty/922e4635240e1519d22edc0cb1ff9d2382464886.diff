[+++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            freeChunk(chunk, handle, sizeClass, nioBuffer, false);, +    void freeChunk(PoolChunk<T> chunk, long handle, SizeClass sizeClass, ByteBuffer nioBuffer, boolean finalizer) {, +            // We only call this if freeChunk is not called because of the PoolThreadCache finalizer as otherwise this, +            // may fail due lazy class-loading in for example tomcat., +            if (!finalizer) {, +            }, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            freeChunk(chunk, handle, sizeClass, nioBuffer, false);, +    void freeChunk(PoolChunk<T> chunk, long handle, SizeClass sizeClass, ByteBuffer nioBuffer, boolean finalizer) {, +            // We only call this if freeChunk is not called because of the PoolThreadCache finalizer as otherwise this, +            // may fail due lazy class-loading in for example tomcat., +            if (!finalizer) {, +            }, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            free(true);, +    void free(boolean finalizer) {, +            int numFreed = free(tinySubPageDirectCaches, finalizer) +, +                    free(smallSubPageDirectCaches, finalizer) +, +                    free(normalDirectCaches, finalizer) +, +                    free(tinySubPageHeapCaches, finalizer) +, +                    free(smallSubPageHeapCaches, finalizer) +, +                    free(normalHeapCaches, finalizer);, +    private static int free(MemoryRegionCache<?>[] caches, boolean finalizer) {, +            numFreed += free(c, finalizer);, +    private static int free(MemoryRegionCache<?> cache, boolean finalizer) {, +        return cache.free(finalizer);, +        public final int free(boolean finalizer) {, +            return free(Integer.MAX_VALUE, finalizer);, +        private int free(int max, boolean finalizer) {, +                    freeEntry(entry, finalizer);, +                free(free, false);, +        private  void freeEntry(Entry entry, boolean finalizer) {, +            if (!finalizer) {, +                // recycle now so PoolChunk can be GC'ed. This will only be done if this is not freed because of, +                // a finalizer., +            }, +            chunk.arena.freeChunk(chunk, handle, sizeClass, nioBuffer, finalizer);, +++ b/buffer/src/main/java/io/netty/buffer/PoolArena.java, +            freeChunk(chunk, handle, sizeClass, nioBuffer, false);, +    void freeChunk(PoolChunk<T> chunk, long handle, SizeClass sizeClass, ByteBuffer nioBuffer, boolean finalizer) {, +            // We only call this if freeChunk is not called because of the PoolThreadCache finalizer as otherwise this, +            // may fail due lazy class-loading in for example tomcat., +            if (!finalizer) {, +            }, +++ b/buffer/src/main/java/io/netty/buffer/PoolThreadCache.java, +            free(true);, +    void free(boolean finalizer) {, +            int numFreed = free(tinySubPageDirectCaches, finalizer) +, +                    free(smallSubPageDirectCaches, finalizer) +, +                    free(normalDirectCaches, finalizer) +, +                    free(tinySubPageHeapCaches, finalizer) +, +                    free(smallSubPageHeapCaches, finalizer) +, +                    free(normalHeapCaches, finalizer);, +    private static int free(MemoryRegionCache<?>[] caches, boolean finalizer) {, +            numFreed += free(c, finalizer);, +    private static int free(MemoryRegionCache<?> cache, boolean finalizer) {, +        return cache.free(finalizer);, +        public final int free(boolean finalizer) {, +            return free(Integer.MAX_VALUE, finalizer);, +        private int free(int max, boolean finalizer) {, +                    freeEntry(entry, finalizer);, +                free(free, false);, +        private  void freeEntry(Entry entry, boolean finalizer) {, +            if (!finalizer) {, +                // recycle now so PoolChunk can be GC'ed. This will only be done if this is not freed because of, +                // a finalizer., +            }, +            chunk.arena.freeChunk(chunk, handle, sizeClass, nioBuffer, finalizer);, +++ b/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java, +            threadCache.free(false);]