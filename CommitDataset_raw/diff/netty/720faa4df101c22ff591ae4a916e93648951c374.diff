[+++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            ctx.fireChannelReadComplete();, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            ctx.fireChannelReadComplete();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +     * Set when the {@link ChannelInboundHandler#channelRead(ChannelHandlerContext, Object)} of, +     * this context's handler is invoked., +     * Cleared when a user calls {@link #fireChannelReadComplete()} on this context., +     *, +     * See {@link #fireChannelReadComplete()} to understand how this flag is used., +     */, +    boolean invokedThisChannelRead;, +, +    /**, +    private volatile boolean invokedNextChannelRead;, +    private volatile boolean invokedPrevRead;, +        invokedNextChannelRead = true;, +         *, +         * Only one exception is when nobody invoked the channelRead() method of this context's handler., +         * It means the handler has been added later dynamically., +        if (invokedNextChannelRead ||  // The handler of this context produced a message, or, +            !invokedThisChannelRead) { // it is not required to produce a message to trigger the event., +, +            invokedNextChannelRead = false;, +            invokedPrevRead = false;, +, +        if (invokedPrevRead && !channel().config().isAutoRead()) {, +            invokedPrevRead = false;, +        invokedPrevRead = true;, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            ctx.fireChannelReadComplete();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +     * Set when the {@link ChannelInboundHandler#channelRead(ChannelHandlerContext, Object)} of, +     * this context's handler is invoked., +     * Cleared when a user calls {@link #fireChannelReadComplete()} on this context., +     *, +     * See {@link #fireChannelReadComplete()} to understand how this flag is used., +     */, +    boolean invokedThisChannelRead;, +, +    /**, +    private volatile boolean invokedNextChannelRead;, +    private volatile boolean invokedPrevRead;, +        invokedNextChannelRead = true;, +         *, +         * Only one exception is when nobody invoked the channelRead() method of this context's handler., +         * It means the handler has been added later dynamically., +        if (invokedNextChannelRead ||  // The handler of this context produced a message, or, +            !invokedThisChannelRead) { // it is not required to produce a message to trigger the event., +, +            invokedNextChannelRead = false;, +            invokedPrevRead = false;, +, +        if (invokedPrevRead && !channel().config().isAutoRead()) {, +            invokedPrevRead = false;, +        invokedPrevRead = true;, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerInvokerUtil.java, +            ((AbstractChannelHandlerContext) ctx).invokedThisChannelRead = true;, +++ b/codec/src/main/java/io/netty/handler/codec/ByteToMessageDecoder.java, +            ctx.fireChannelReadComplete();, +++ b/transport/src/main/java/io/netty/channel/AbstractChannelHandlerContext.java, +     * Set when the {@link ChannelInboundHandler#channelRead(ChannelHandlerContext, Object)} of, +     * this context's handler is invoked., +     * Cleared when a user calls {@link #fireChannelReadComplete()} on this context., +     *, +     * See {@link #fireChannelReadComplete()} to understand how this flag is used., +     */, +    boolean invokedThisChannelRead;, +, +    /**, +    private volatile boolean invokedNextChannelRead;, +    private volatile boolean invokedPrevRead;, +        invokedNextChannelRead = true;, +         *, +         * Only one exception is when nobody invoked the channelRead() method of this context's handler., +         * It means the handler has been added later dynamically., +        if (invokedNextChannelRead ||  // The handler of this context produced a message, or, +            !invokedThisChannelRead) { // it is not required to produce a message to trigger the event., +, +            invokedNextChannelRead = false;, +            invokedPrevRead = false;, +, +        if (invokedPrevRead && !channel().config().isAutoRead()) {, +            invokedPrevRead = false;, +        invokedPrevRead = true;, +++ b/transport/src/main/java/io/netty/channel/ChannelHandlerInvokerUtil.java, +            ((AbstractChannelHandlerContext) ctx).invokedThisChannelRead = true;, +++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java, +            ctx.invokedThisChannelRead = false;]