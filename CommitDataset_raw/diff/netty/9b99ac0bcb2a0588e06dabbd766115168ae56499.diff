[+++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +        p.addLast(new LastInboundHandler());, +++ b/transport/src/main/java/io/netty/channel/embedded/EmbeddedChannel.java, +        p.addLast(new LastInboundHandler());, +++ b/transport/src/test/java/io/netty/channel/embedded/EmbeddedChannelTest.java, +/*, + * Copyright 2014 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.channel.embedded;, +, +import io.netty.channel.Channel;, +import io.netty.channel.ChannelHandler;, +import io.netty.channel.ChannelHandlerContext;, +import io.netty.channel.ChannelInboundHandlerAdapter;, +import io.netty.channel.ChannelInitializer;, +import io.netty.channel.ChannelPipeline;, +import org.junit.Assert;, +import org.junit.Test;, +, +public class EmbeddedChannelTest {, +, +    @Test, +    public void testConstructWithChannelInitializer() {, +        final Integer first = 1;, +        final Integer second = 2;, +, +        final ChannelHandler handler = new ChannelInboundHandlerAdapter() {, +            @Override, +            public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {, +                ctx.fireChannelRead(first);, +                ctx.fireChannelRead(second);, +            }, +        };, +        EmbeddedChannel channel = new EmbeddedChannel(new ChannelInitializer<Channel>() {, +            @Override, +            protected void initChannel(Channel ch) throws Exception {, +                ch.pipeline().addLast(handler);, +            }, +        });, +        ChannelPipeline pipeline = channel.pipeline();, +        Assert.assertSame(handler, pipeline.firstContext().handler());, +        Assert.assertTrue(channel.writeInbound(3));, +        Assert.assertTrue(channel.finish());, +        Assert.assertSame(first, channel.readInbound());, +        Assert.assertSame(second, channel.readInbound());, +        Assert.assertNull(channel.readInbound());, +    }, +}]