[+++ b/transport/src/main/java/io/netty/channel/ChannelPipeline.java, +import io.netty.util.concurrent.DefaultEventExecutorGroup;, +import java.net.SocketAddress;, +import java.nio.ByteBuffer;, +import java.nio.channels.SocketChannel;, + * A list of {@link ChannelHandler}s which handles or intercepts inbound events and outbount operations of a, + * {@link Channel}.  {@link ChannelPipeline} implements an advanced form of the, + * <a href="http://www.oracle.com/technetwork/java/interceptingfilter-142169.html">Intercepting Filter</a> pattern, + * to give a user full control over how an event is handled and how the {@link ChannelHandler}s in a pipeline, + * interact with each other., + * Each channel has its own pipeline and it is created automatically when a new channel is created., + * The following diagram describes how I/O events are processed by {@link ChannelHandler}s in a {@link ChannelPipeline}, + * typically. An I/O event is handled by either a {@link ChannelInboundHandler} or a {@link ChannelOutboundHandler}, + * and be forwarded to its closest handler by calling the event propagation methods defined in, + * {@link ChannelHandlerContext}, such as {@link ChannelHandlerContext#fireMessageReceived(MessageList)} and, + * {@link ChannelHandlerContext#write(MessageList)}., + *  +---------------------------------------------------+---------------+, + *  |    +---------------------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|, + *  |    +----------+----------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  |    +----------+----------+            +-----------+----------+    |, + *  +---------------+-----------------------------------+---------------+, + *  +---------------+-----------------------------------+---------------+, + *  +-------------------------------------------------------------------+, + * An inbound event is handled by the inbound handlers in the bottom-up direction as shown on the left side of the, + * diagram.  An inbound handler usually handles the inbound data generated by the I/O thread on the bottom of the, + * diagram.  The inbound data is often read from a remote peer via the actual input operation such as, + * {@link SocketChannel#read(ByteBuffer)}.  If an inbound event goes beyond the top inbound handler, it is discarded, + * silently, or logged if it needs your attention., + * An outbound event is handled by the outbound handler in the top-down direction as shown on the right side of the, + * diagram.  An outbound handler usually generates or transforms the outbound traffic such as write requests., + * If an outbound event goes beyond the bottom outbound handler, it is handled by an I/O thread associated with the, + * {@link Channel}. The I/O thread often performs the actual output operation such as, + * {@link SocketChannel#write(ByteBuffer)}., + * In the example above, the class whose name starts with {@code Inbound} means it is an inbound handler., + * The class whose name starts with {@code Outbound} means it is a outbound handler., + * In the given example configuration, the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound., + * When an event goes outbound, the order is 5, 4, 3, 2, 1.  On top of this principle, {@link ChannelPipeline} skips, + * <li>3 and 4 don't implement {@link ChannelInboundHandler}, and therefore the actual evaluation order of an inbound, + *     event will be: 1, 2, and 5.</li>, + * <li>1 and 2 implement {@link ChannelOutboundHandler}, and therefore the actual evaluation order of a, + *     outbound event will be: 5, 4, and 3.</li>, + * <li>If 5 implements both {@link ChannelInboundHandler} and {@link ChannelOutboundHandler}, the evaluation order of, + *     an inbound and a outbound event could be 125 and 543 respectively.</li>, + * <h3>Forwarding an event to the next handler</h3>, + *, + * As you might noticed in the diagram shows, a handler has to invoke the event propagation methods in, + * {@link ChannelHandlerContext} to forward an event to its next handler.  Those methods include:, + * <ul>, + * <li>Inbound event propagation methods:, + *     <ul>, + *     <li>{@link ChannelHandlerContext#fireChannelRegistered()}</li>, + *     <li>{@link ChannelHandlerContext#fireChannelActive()}</li>, + *     <li>{@link ChannelHandlerContext#fireMessageReceived(MessageList)}</li>, + *     <li>{@link ChannelHandlerContext#fireExceptionCaught(Throwable)}</li>, + *     <li>{@link ChannelHandlerContext#fireUserEventTriggered(Object)}</li>, + *     <li>{@link ChannelHandlerContext#fireChannelReadSuspended()}</li>, + *     <li>{@link ChannelHandlerContext#fireChannelWritabilityChanged()}</li>, + *     <li>{@link ChannelHandlerContext#fireChannelInactive()}</li>, + *     <li>{@link ChannelHandlerContext#fireChannelUnregistered()}</li>, + *     </ul>, + * </li>, + * <li>Outbound event propagation methods:, + *     <ul>, + *     <li>{@link ChannelHandlerContext#bind(SocketAddress, ChannelPromise)}</li>, + *     <li>{@link ChannelHandlerContext#connect(SocketAddress, SocketAddress, ChannelPromise)}</li>, + *     <li>{@link ChannelHandlerContext#write(MessageList)}</li>, + *     <li>{@link ChannelHandlerContext#read()}</li>, + *     <li>{@link ChannelHandlerContext#disconnect(ChannelPromise)}</li>, + *     <li>{@link ChannelHandlerContext#close(ChannelPromise)}</li>, + *     <li>{@link ChannelHandlerContext#deregister(ChannelPromise)}</li>, + *     </ul>, + * </li>, + * </ul>, + *, + * and the following example shows how the event propagation is usually done:, + *, + * <pre>, + * public class MyInboundHandler extends {@link ChannelInboundHandlerAdapter} {, + *     {@code @Override}, + *     public void channelActive({@link ChannelHandlerContext} ctx) {, + *         System.out.println("Connected!");, + *         ctx.fireChannelActive();, + *     }, + * }, + *, + * public clas MyOutboundHandler extends {@link ChannelOutboundHandlerAdapter} {, + *     {@code @Override}, + *     public void close({@link ChannelHandlerContext} ctx, {@link ChannelPromise} promise) {, + *         System.out.println("Closing ..");, + *         ctx.close(promise);, + *     }, + * }, + * </pre>, + *]