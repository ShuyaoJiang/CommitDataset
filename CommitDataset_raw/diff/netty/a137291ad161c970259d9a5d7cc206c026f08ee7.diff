[+++ b/handler/src/main/java/io/netty/handler/ssl/OpenSslX509KeyManagerFactory.java, +/*, + * Copyright 2018 The Netty Project, + *, + * The Netty Project licenses this file to you under the Apache License,, + * version 2.0 (the "License"); you may not use this file except in compliance, + * with the License. You may obtain a copy of the License at:, + *, + *   http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations, + * under the License., + */, +package io.netty.handler.ssl;, +, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.UnpooledByteBufAllocator;, +import io.netty.util.ReferenceCountUtil;, +import io.netty.util.internal.ObjectUtil;, +, +import javax.net.ssl.KeyManager;, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.KeyManagerFactorySpi;, +import javax.net.ssl.ManagerFactoryParameters;, +import javax.net.ssl.X509KeyManager;, +import java.security.InvalidAlgorithmParameterException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import java.security.Provider;, +import java.security.UnrecoverableKeyException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Special {@link KeyManagerFactory} that pre-compute the keymaterial used when {@link SslProvider#OPENSSL} or, + * {@link SslProvider#OPENSSL_REFCNT} is used and so will improve handshake times and its performance., + *, + * Because the keymaterial is pre-computed any modification to the {@link KeyStore} is ignored after, + * {@link #init(KeyStore, char[])} is called., + *, + * {@link #init(ManagerFactoryParameters)} is not supported by this implementation and so a call to it will always, + * result in an {@link InvalidAlgorithmParameterException}., + */, +public final class OpenSslX509KeyManagerFactory extends KeyManagerFactory {, +, +    private final OpenSslKeyManagerFactorySpi spi;, +, +    public OpenSslX509KeyManagerFactory() {, +        this(newOpenSslKeyManagerFactorySpi(null));, +    }, +, +    public OpenSslX509KeyManagerFactory(Provider provider) {, +        this(newOpenSslKeyManagerFactorySpi(provider));, +    }, +, +    public OpenSslX509KeyManagerFactory(String algorithm, Provider provider) throws NoSuchAlgorithmException {, +        this(newOpenSslKeyManagerFactorySpi(algorithm, provider));, +    }, +, +    private OpenSslX509KeyManagerFactory(OpenSslKeyManagerFactorySpi spi) {, +        super(spi, spi.kmf.getProvider(), spi.kmf.getAlgorithm());, +        this.spi = spi;, +    }, +, +    private static OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(Provider provider) {, +        try {, +            return newOpenSslKeyManagerFactorySpi(null, provider);, +        } catch (NoSuchAlgorithmException e) {, +            // This should never happen as we use the default algorithm., +            throw new IllegalStateException(e);, +        }, +    }, +, +    private static OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(String algorithm, Provider provider), +            throws NoSuchAlgorithmException {, +        if (algorithm == null) {, +            algorithm = KeyManagerFactory.getDefaultAlgorithm();, +        }, +        return new OpenSslKeyManagerFactorySpi(, +                provider == null ? KeyManagerFactory.getInstance(algorithm) :, +                        KeyManagerFactory.getInstance(algorithm, provider));, +    }, +, +    OpenSslKeyMaterialProvider newProvider() {, +        return spi.newProvider();, +    }, +, +    private static final class OpenSslKeyManagerFactorySpi extends KeyManagerFactorySpi {, +        final KeyManagerFactory kmf;, +        private volatile ProviderFactory providerFactory;, +, +        OpenSslKeyManagerFactorySpi(KeyManagerFactory kmf) {, +            this.kmf = ObjectUtil.checkNotNull(kmf, "kmf");, +        }, +]