[+++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +                convertedCiphers, DEFAULT_CIPHERS, OpenSsl.availableOpenSslCipherSuites()));, +    public void setBioNonApplicationBufferSize(int bioNonApplicationBufferSize) {, +                checkPositiveOrZero(bioNonApplicationBufferSize, "bioNonApplicationBufferSize");, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +                convertedCiphers, DEFAULT_CIPHERS, OpenSsl.availableOpenSslCipherSuites()));, +    public void setBioNonApplicationBufferSize(int bioNonApplicationBufferSize) {, +                checkPositiveOrZero(bioNonApplicationBufferSize, "bioNonApplicationBufferSize");, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +                    status = handshake();, +, +                                }, +                                if (packetLength == 0) {, +        if (protocolVersion == null || protocolVersion.isEmpty()) {, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +                convertedCiphers, DEFAULT_CIPHERS, OpenSsl.availableOpenSslCipherSuites()));, +    public void setBioNonApplicationBufferSize(int bioNonApplicationBufferSize) {, +                checkPositiveOrZero(bioNonApplicationBufferSize, "bioNonApplicationBufferSize");, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +                    status = handshake();, +, +                                }, +                                if (packetLength == 0) {, +        if (protocolVersion == null || protocolVersion.isEmpty()) {, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +        selection = new Selection(sslContext, hostname);, +            selection = EMPTY_SELECTION;, +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +                convertedCiphers, DEFAULT_CIPHERS, OpenSsl.availableOpenSslCipherSuites()));, +    public void setBioNonApplicationBufferSize(int bioNonApplicationBufferSize) {, +                checkPositiveOrZero(bioNonApplicationBufferSize, "bioNonApplicationBufferSize");, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslEngine.java, +                    status = handshake();, +, +                                }, +                                if (packetLength == 0) {, +        if (protocolVersion == null || protocolVersion.isEmpty()) {, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_NONE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_REQUIRE, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +                    SSL.setVerify(ssl, SSL.SSL_CVERIFY_OPTIONAL, ReferenceCountedOpenSslContext.VERIFY_DEPTH);, +++ b/handler/src/main/java/io/netty/handler/ssl/SniHandler.java, +        selection = new Selection(sslContext, hostname);, +            selection = EMPTY_SELECTION;, +++ b/handler/src/main/java/io/netty/handler/ssl/SslContext.java, +     * @param trustManagerFactory the {@link TrustManagerFactory} that provides the {@link TrustManager}s, +     * Creates a new instance (startTls set to {@code false})., +++ b/handler/src/main/java/io/netty/handler/ssl/CipherSuiteConverter.java, +        if (handshakeAlgo.isEmpty()) {, +            if (handshakeAlgo.isEmpty()) {, +        if (handshakeAlgo.isEmpty()) {, +++ b/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java, +                            if (c == null || c.isEmpty() || availableOpenSslCipherSuites.contains(c)) {, +                            certBio = ReferenceCountedOpenSslContext.toBIO(cert.cert());, +++ b/handler/src/main/java/io/netty/handler/ssl/ReferenceCountedOpenSslContext.java, +                convertedCiphers, DEFAULT_CIPHERS, OpenSsl.availableOpenSslCipherSuites()));]