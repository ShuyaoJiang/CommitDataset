[+++ b/src/main/java/org/jboss/netty/handler/execution/MemoryAwareThreadPoolExecutor.java, +    private volatile Settings settings;, +        if (maxChannelMemorySize < 0) {, +            throw new IllegalArgumentException(, +                    "maxChannelMemorySize: " + maxChannelMemorySize);, +        }, +        if (maxTotalMemorySize < 0) {, +            throw new IllegalArgumentException(, +                    "maxTotalMemorySize: " + maxTotalMemorySize);, +        }, +        settings = new Settings(, +                objectSizeEstimator, maxChannelMemorySize, maxTotalMemorySize);, +        return settings.objectSizeEstimator;, +    }, +, +    /**, +     * Sets the {@link ObjectSizeEstimator} of this pool., +     */, +    public void setObjectSizeEstimator(ObjectSizeEstimator objectSizeEstimator) {, +        if (objectSizeEstimator == null) {, +            throw new NullPointerException("objectSizeEstimator");, +        }, +, +        settings = new Settings(, +                objectSizeEstimator,, +                settings.maxChannelMemorySize, settings.maxTotalMemorySize);, +        settings = new Settings(, +                settings.objectSizeEstimator,, +                maxChannelMemorySize, settings.maxTotalMemorySize);, +        settings = new Settings(, +                settings.objectSizeEstimator,, +                settings.maxChannelMemorySize, maxTotalMemorySize);, +        if (!(command instanceof ChannelEventRunnable)) {, +            command = new MemoryAwareRunnable(command);, +        }, +, +, +        int increment = settings.objectSizeEstimator.estimateSize(task);, +        } else {, +            ((MemoryAwareRunnable) task).estimatedSize = increment;, +            increment = ((MemoryAwareRunnable) task).estimatedSize;, +        final ObjectSizeEstimator objectSizeEstimator;, +        Settings(ObjectSizeEstimator objectSizeEstimator,, +                 long maxChannelMemorySize, long maxTotalMemorySize) {, +            this.objectSizeEstimator = objectSizeEstimator;, +, +    private static class MemoryAwareRunnable implements Runnable {, +        final Runnable task;, +        volatile int estimatedSize;, +, +        MemoryAwareRunnable(Runnable task) {, +            this.task = task;, +        }, +, +        public void run() {, +            task.run();, +        }, +    }]