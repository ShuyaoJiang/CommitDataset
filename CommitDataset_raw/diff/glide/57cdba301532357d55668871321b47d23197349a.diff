[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, +   * configuration, and containing only transparent pixels., +   *, +   * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +   * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data., +   *, +   * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, +   * configuration, and containing only transparent pixels., +   *, +   * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +   * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data., +   *, +   * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.NonNull;, +  @NonNull, +    return Bitmap.createBitmap(width, height, config);, +  @NonNull, +    return get(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, +   * configuration, and containing only transparent pixels., +   *, +   * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +   * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data., +   *, +   * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.NonNull;, +  @NonNull, +    return Bitmap.createBitmap(width, height, config);, +  @NonNull, +    return get(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.support.annotation.NonNull;, +  @NonNull, +  public Bitmap get(int width, int height, Bitmap.Config config) {, +    Bitmap result = getDirtyOrNull(width, height, config);, +    } else {, +      result = Bitmap.createBitmap(width, height, config);, +  @NonNull, +  public Bitmap getDirty(int width, int height, Bitmap.Config config) {, +    Bitmap result = getDirtyOrNull(width, height, config);, +    if (result == null) {, +      result = Bitmap.createBitmap(width, height, config);, +    }, +    return result;, +  }, +, +  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +import android.support.annotation.NonNull;, +   * configuration, and containing only transparent pixels., +   *, +   * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +   * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data., +   *, +   * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be, +   * allocated. </p>, +  @NonNull, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +import android.support.annotation.NonNull;, +  @NonNull, +    return Bitmap.createBitmap(width, height, config);, +  @NonNull, +    return get(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.support.annotation.NonNull;, +  @NonNull, +  public Bitmap get(int width, int height, Bitmap.Config config) {, +    Bitmap result = getDirtyOrNull(width, height, config);, +    } else {, +      result = Bitmap.createBitmap(width, height, config);, +  @NonNull, +  public Bitmap getDirty(int width, int height, Bitmap.Config config) {, +    Bitmap result = getDirtyOrNull(width, height, config);, +    if (result == null) {, +      result = Bitmap.createBitmap(width, height, config);, +    }, +    return result;, +  }, +, +  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {]