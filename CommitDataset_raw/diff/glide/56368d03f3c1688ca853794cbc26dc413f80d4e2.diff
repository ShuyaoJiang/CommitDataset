[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +        .addModifiers(Modifier.PUBLIC, Modifier.FINAL), +        .varargs(requestOptionMethod.varargs), +        .addAnnotations(, +            FluentIterable.from(requestOptionMethod.annotations), +                .filter(new Predicate<AnnotationSpec>() {, +                  @Override, +                  public boolean apply(AnnotationSpec input) {, +                    return !input.type.equals(TypeName.get(Override.class));, +                  }, +                }), +                .toList(), +        ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +        .addModifiers(Modifier.PUBLIC, Modifier.FINAL), +        .varargs(requestOptionMethod.varargs), +        .addAnnotations(, +            FluentIterable.from(requestOptionMethod.annotations), +                .filter(new Predicate<AnnotationSpec>() {, +                  @Override, +                  public boolean apply(AnnotationSpec input) {, +                    return !input.type.equals(TypeName.get(Override.class));, +                  }, +                }), +                .toList(), +        ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +    MethodSpec.Builder result = MethodSpec.overriding(methodToOverride), +        .addModifiers(Modifier.FINAL), +            .build());, +, +    if (methodToOverride.getSimpleName().toString().equals("transforms")) {, +      result.addAnnotation(, +          AnnotationSpec.builder(SafeVarargs.class), +              .build());, +    }, +, +    return result.build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +        .addModifiers(Modifier.PUBLIC, Modifier.FINAL), +        .varargs(requestOptionMethod.varargs), +        .addAnnotations(, +            FluentIterable.from(requestOptionMethod.annotations), +                .filter(new Predicate<AnnotationSpec>() {, +                  @Override, +                  public boolean apply(AnnotationSpec input) {, +                    return !input.type.equals(TypeName.get(Override.class));, +                  }, +                }), +                .toList(), +        ), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +    MethodSpec.Builder result = MethodSpec.overriding(methodToOverride), +        .addModifiers(Modifier.FINAL), +            .build());, +, +    if (methodToOverride.getSimpleName().toString().equals("transforms")) {, +      result.addAnnotation(, +          AnnotationSpec.builder(SafeVarargs.class), +              .build());, +    }, +, +    return result.build();, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +  @SuppressWarnings({"unchecked", "varargs"})]