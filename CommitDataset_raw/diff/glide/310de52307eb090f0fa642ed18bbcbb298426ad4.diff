[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, +, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.resource.UnitTransformation;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, +    private static final GifDrawableFactory GIF_DRAWABLE_FACTORY = new DefaultGifDrawableFactory();, +    private final BitmapPool bitmapPool;, +    /** The target dimensions we should pass to Glide to use when loading individual frames */, +    private final GifDrawableFactory factory;, +, +    /** The final dimensions of the transformed frames */, +    private int frameHeight;, +    private int frameWidth;, +        this(context, bitmapPool, gifId, header, data, targetWidth, targetHeight, GIF_DRAWABLE_FACTORY);, +    }, +, +    GifData(Context context, BitmapPool bitmapPool, String gifId, GifHeader header, byte[] data,, +            int targetWidth, int targetHeight, GifDrawableFactory factory) {, +        this.bitmapPool = bitmapPool;, +        this.factory = factory;, +, +        frameWidth = header.getWidth();, +        frameHeight = header.getHeight();, +, +        // The drawable needs to be initialized with the correct width and height in order for a view displaying it, +        // to end up with the right dimensions. Since our transformations may arbitrarily modify the dimensions of, +        // our gif, here we create a stand in for a frame and pass it to the transformation to see what the final, +        // transformed dimensions will be so that our drawable can report the correct intrinsict width and height., +        Bitmap toTest = bitmapPool.get(header.getWidth(), header.getHeight(), Bitmap.Config.RGB_565);, +        if (toTest == null) {, +            toTest = Bitmap.createBitmap(header.getWidth(), header.getHeight(), Bitmap.Config.RGB_565);, +        }, +        Resource<Bitmap> bitmapResource = new BitmapResource(toTest, bitmapPool);, +        Resource<Bitmap> transformed = transformation.transform(bitmapResource, targetWidth, targetHeight);, +        if (bitmapResource != transformed) {, +            bitmapResource.recycle();, +        }, +        Bitmap bitmap = transformed.get();, +        frameWidth = bitmap.getWidth();, +        frameHeight = bitmap.getHeight();, +        transformed.recycle();, +        GifDrawable result = factory.build(context, bitmapProvider, getFrameTransformation(), targetWidth, targetHeight,, +                gifId, header, data, frameWidth, frameHeight);, +    interface GifDrawableFactory {, +        public GifDrawable build(Context context, GifDecoder.BitmapProvider provider,, +                Transformation<Bitmap> frameTransformation, int targetWidth, int targetHeight, String gifId,, +                GifHeader header, byte[] data, int frameWidth, int frameHeight);, +    }, +, +    private static class DefaultGifDrawableFactory implements GifDrawableFactory {, +, +        @Override, +        public GifDrawable build(Context context, GifDecoder.BitmapProvider provider, Transformation<Bitmap>, +                frameTransformation, int targetWidth, int targetHeight, String gifId, GifHeader header, byte[] data,, +                int frameWidth, int frameHeight) {, +            return new GifDrawable(context, provider, frameTransformation, targetWidth, targetHeight, gifId, header,, +                    data, frameWidth, frameHeight);, +        }, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, +, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.resource.UnitTransformation;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, +    private static final GifDrawableFactory GIF_DRAWABLE_FACTORY = new DefaultGifDrawableFactory();, +    private final BitmapPool bitmapPool;, +    /** The target dimensions we should pass to Glide to use when loading individual frames */, +    private final GifDrawableFactory factory;, +, +    /** The final dimensions of the transformed frames */, +    private int frameHeight;, +    private int frameWidth;, +        this(context, bitmapPool, gifId, header, data, targetWidth, targetHeight, GIF_DRAWABLE_FACTORY);, +    }, +, +    GifData(Context context, BitmapPool bitmapPool, String gifId, GifHeader header, byte[] data,, +            int targetWidth, int targetHeight, GifDrawableFactory factory) {, +        this.bitmapPool = bitmapPool;, +        this.factory = factory;, +, +        frameWidth = header.getWidth();, +        frameHeight = header.getHeight();, +, +        // The drawable needs to be initialized with the correct width and height in order for a view displaying it, +        // to end up with the right dimensions. Since our transformations may arbitrarily modify the dimensions of, +        // our gif, here we create a stand in for a frame and pass it to the transformation to see what the final, +        // transformed dimensions will be so that our drawable can report the correct intrinsict width and height., +        Bitmap toTest = bitmapPool.get(header.getWidth(), header.getHeight(), Bitmap.Config.RGB_565);, +        if (toTest == null) {, +            toTest = Bitmap.createBitmap(header.getWidth(), header.getHeight(), Bitmap.Config.RGB_565);, +        }, +        Resource<Bitmap> bitmapResource = new BitmapResource(toTest, bitmapPool);, +        Resource<Bitmap> transformed = transformation.transform(bitmapResource, targetWidth, targetHeight);, +        if (bitmapResource != transformed) {, +            bitmapResource.recycle();, +        }, +        Bitmap bitmap = transformed.get();, +        frameWidth = bitmap.getWidth();, +        frameHeight = bitmap.getHeight();]