[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.request.GenericRequest;, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.request.GenericRequest;, +import com.bumptech.glide.request.RequestListener;, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +package com.bumptech.glide.request;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.util.Log;, +import android.view.animation.Animation;, +import android.view.animation.AnimationUtils;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.engine.Engine;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.target.Target;, +, +import java.io.InputStream;, +, +/**, + * A {@link Request} that loads a {@link Resource} into a given {@link Target}., + *, + * @param <A> The type of the model that the resource will be loaded from., + * @param <T> The type of the data that the resource will be loaded from., + * @param <Z> The type of the resource that will be loaded., + */, +public class GenericRequest<A, T, Z, R> implements Request, Target.SizeReadyCallback, ResourceCallback {, +    private static final String TAG = "Request";, +, +    private final int placeholderResourceId;, +    private final int errorResourceId;, +    private final Context context;, +    private final Transformation<Z> transformation;, +    private final LoadProvider<A, T, Z, R> loadProvider;, +    private final int animationId;, +    private final RequestCoordinator requestCoordinator;, +    private final A model;, +    private Class<R> transcodeClass;, +    private boolean isMemoryCacheable;, +    private Priority priority;, +    private final Target<R> target;, +    private final RequestListener<A> requestListener;, +    private final float sizeMultiplier;, +    private final Engine engine;, +    private Animation animation;, +    private Drawable placeholderDrawable;, +    private Drawable errorDrawable;, +    private boolean isCancelled;, +    private boolean isError;, +    private boolean loadedFromMemoryCache;, +    private Resource resource;, +    private Engine.LoadStatus loadStatus;, +, +    public GenericRequest(LoadProvider<A, T, Z, R> loadProvider, A model, Context context, Priority priority,, +            Target<R> target, float sizeMultiplier, Drawable placeholderDrawable, int placeholderResourceId,, +            Drawable errorDrawable, int errorResourceId, RequestListener<A> requestListener, int animationId,, +            Animation animation, RequestCoordinator requestCoordinator, Engine engine,, +            Transformation<Z> transformation, Class<R> transcodeClass, boolean isMemoryCacheable) {, +        this.loadProvider = loadProvider;, +        this.model = model;, +        this.context = context;, +        this.priority = priority;, +        this.target = target;, +        this.sizeMultiplier = sizeMultiplier;, +        this.placeholderDrawable = placeholderDrawable;, +        this.placeholderResourceId = placeholderResourceId;, +        this.errorDrawable = errorDrawable;, +        this.errorResourceId = errorResourceId;, +        this.requestListener = requestListener;, +        this.animationId = animationId;, +        this.animation = animation;, +        this.requestCoordinator = requestCoordinator;, +        this.engine = engine;, +        this.transformation = transformation;, +        this.transcodeClass = transcodeClass;, +        this.isMemoryCacheable = isMemoryCacheable;, +]