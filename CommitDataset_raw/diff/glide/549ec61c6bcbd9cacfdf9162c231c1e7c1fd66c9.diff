[+++ b/library/src/com/bumptech/glide/util/ByteArrayPool.java, +    // 16 KB., +    private static final int TEMP_BYTES_SIZE = 16 * 1024;, +    // 512 KB., +    private static final int MAX_SIZE = 512 * 1024;, +    private static final int MAX_BYTE_ARRAY_COUNT = MAX_SIZE / TEMP_BYTES_SIZE;, +    private ByteArrayPool() {  }, +    public void clear() {, +        synchronized (tempQueue) {, +            tempQueue.clear();, +        }, +    public boolean releaseBytes(byte[] bytes) {, +        if (bytes.length != TEMP_BYTES_SIZE) {, +            return false;, +        }, +, +        boolean accepted = false;, +            if (tempQueue.size() < MAX_BYTE_ARRAY_COUNT) {, +                accepted = true;, +        return accepted;, +    }, +++ b/library/src/com/bumptech/glide/util/ByteArrayPool.java, +    // 16 KB., +    private static final int TEMP_BYTES_SIZE = 16 * 1024;, +    // 512 KB., +    private static final int MAX_SIZE = 512 * 1024;, +    private static final int MAX_BYTE_ARRAY_COUNT = MAX_SIZE / TEMP_BYTES_SIZE;, +    private ByteArrayPool() {  }, +    public void clear() {, +        synchronized (tempQueue) {, +            tempQueue.clear();, +        }, +    public boolean releaseBytes(byte[] bytes) {, +        if (bytes.length != TEMP_BYTES_SIZE) {, +            return false;, +        }, +, +        boolean accepted = false;, +            if (tempQueue.size() < MAX_BYTE_ARRAY_COUNT) {, +                accepted = true;, +        return accepted;, +    }, +++ b/library/tests/src/com/bumptech/glide/util/ByteArrayPoolTest.java, +package com.bumptech.glide.util;, +, +import android.test.AndroidTestCase;, +, +public class ByteArrayPoolTest extends AndroidTestCase {, +    @Override, +    protected void setUp() throws Exception {, +        ByteArrayPool.get().clear();, +    }, +, +    public void testEmptyPoolReturnsBytes() {, +        assertNotNull(ByteArrayPool.get().getBytes());, +    }, +, +    public void testNonEmptyPoolReturnsAvailableBytes() {, +        ByteArrayPool pool = ByteArrayPool.get();, +        byte[] available = pool.getBytes();, +        pool.releaseBytes(available);, +, +        assertEquals(available, pool.getBytes());, +    }, +, +    public void testPoolIsSizeBounded() {, +        ByteArrayPool pool = ByteArrayPool.get();, +, +        byte[] seed = pool.getBytes();, +        boolean rejected = false;, +        // Some way too high number, +        for (int i = 0; i < 2000 && !rejected; i++) {, +            byte[] toPut = new byte[seed.length];, +            rejected = !pool.releaseBytes(toPut);, +        }, +, +        assertTrue(rejected);, +    }, +, +    public void testByteArrayPoolIgnoresIncorrectSizes() {, +        ByteArrayPool pool = ByteArrayPool.get();, +        byte[] toPut = new byte[0];, +, +        assertFalse(pool.releaseBytes(toPut));, +    }, +}]