[+++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +, +, +        final Bitmap streamed = loadApproximate(path, width, height);, +        final Bitmap streamed = loadApproximate(path, width > height ? 1 : width, height > width ? 1 : height);, +     * Load the image at the given path at nearly the given dimensions maintaining the original proportions. Will also, +     * rotate the image according to the orientation in the images EXIF data if available., +     * from http://stackoverflow.com/questions/7051025/how-do-i-scale-a-streaming-bitmap-in-place-without-reading-the-whole-image-first, +     *, +     * @param path The path where the image is stored, +     * @return A Bitmap containing the image, +    public Bitmap loadApproximate(String path, int width, int height) {, +        int orientation = getOrientation(path);, +        if(orientation == 90 || orientation == 270) {, +            //Swap width and height for initial downsample calculation if its oriented so., +            //The image will then be rotated back to normal., +            int w = width;, +            width = height;, +            height = w;, +        }, +, +        final int[] dimens = getDimensions(path);, +        final int originalWidth = dimens[0];, +        final int originalHeight = dimens[1];, +, +        // inSampleSize prefers multiples of 2, but we prefer to prioritize memory savings, +        int sampleSize = Math.min(originalHeight / height, originalWidth / width);, +, +        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions();, +        decodeBitmapOptions.inSampleSize = sampleSize;, +, +        Bitmap result = decodeStream(path, decodeBitmapOptions);, +, +        if (orientation != 0) {, +            result = rotateImage(result, orientation);, +        }, +, +        return result;, +    /**, +     * A potentially expensive operation to load the image at the given path. If a recycled Bitmap whose dimensions, +     * exactly match those of the image at the given path is provided, the operation is much less expensive in terms, +     * of memory., +     *, +     * Note this method will throw an exception of a Bitmap with dimensions not matching those of the image at path, +     * is provided., +     *, +     * @param path The path where the image is stored, +     * @param recycle A Bitmap we can load the image into, or null, +     * @return A new bitmap containing the image at the given path, or recycle if recycle is not null, +     */, +    private Bitmap load(String path, Bitmap recycle) {, +        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(recycle);, +        final Bitmap result = decodeStream(path, decodeBitmapOptions);, +        return result == null ? null : orientImage(path, result);, +    }, +, +    /**, +     * A potentially expensive operation to load the image at the given path. If a recycled Bitmap whose dimensions, +     * exactly match those of the image at the given path is provided, the operation is much less expensive in terms, +     * of memory., +     *, +     * Note this method will throw an exception of a Bitmap with dimensions not matching those of the image at path, +     * is provided., +     *, +     * @param is The InputStream representing the image data, +     * @param recycle A Bitmap we can load the image into, or null, +     * @return A new bitmap containing the image from the given InputStream, or recycle if recycle is not null, +     */, +    private Bitmap load(InputStream is, Bitmap recycle){, +        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(recycle);, +        return decodeStream(is, decodeBitmapOptions);, +    }, +, +    /**, +     * A method for getting the dimensions of an image at the given path, +     *, +     * @param path The path where the image is stored, +     * @return an array containing the dimensions of the image in the form {width, height}, +     */, +    private int[] getDimensions(String path) {, +        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions();, +        decodeBoundsOptions.inJustDecodeBounds = true;, +        decodeStream(path, decodeBoundsOptions);, +        return new int[] { decodeBoundsOptions.outWidth, decodeBoundsOptions.outHeight };, +    }, +, +     /**, +     * A method for getting the dimensions of an image from the given InputStream, +     *, +     * @param is The InputStream representing the image, +     * @return an array containing the dimensions of the image in the form {width, height}, +     */, +    private int[] getDimension(InputStream is) {, +        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions();, +        decodeBoundsOptions.inJustDecodeBounds = true;, +        decodeStream(is, decodeBoundsOptions);, +        return new int[] { decodeBoundsOptions.outWidth, decodeBoundsOptions.outHeight };, +    }, +, +    private Bitmap decodeStream(String path, BitmapFactory.Options decodeBitmapOptions) {]