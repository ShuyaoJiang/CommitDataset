[+++ b/library/src/com/bumptech/glide/resize/ImageResizer.java, +     * Scale the image so that either the width of the image matches the given width and the height of the image is, +     * greater than the given height or vice versa, and then crop the larger dimension to match the given dimension., +     * Does not maintain the image's aspect ratio, +     *, +     * @param is The InputStream for the image, +     * @param width The minimum width of the image, +     * @param height The minimum height of the image, +    public Bitmap centerCrop(InputStream is, int width, int height) {, +        final Bitmap streamed = loadAtLeast(is, width, height);, +     * Scale the image uniformly (maintaining the image's aspect ratio) so that one of the dimensions of the image, +     * will be equal to the given dimension and the other will be less than the given dimension, +     * @param is The InputStream for the image, +     * @param width The maximum width of the image, +     * @param height The maximum height of the image, +    public Bitmap fitInSpace(InputStream is, int width, int height) {, +        final Bitmap streamed = loadAtLeast(is, width > height ? 1 : width, height > width ? 1 : height);, +     * Scale the image uniformly (maintaining the image's aspect ratio) so that the dimensions of the image will be, +     * greater than or equal to the given width and height., +     * @param is An inputStream for the image, +    public Bitmap loadAtLeast(InputStream is, int width, int height) {, +        RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, bytes);, +     * Scale the image uniformly (maintaining the image's aspect ratio) so that the dimensions of the image will be, +     * less than or equal to the given width and height. Unlike {@link #fitInSpace(android.graphics.Bitmap, int, int)},, +     * one or both dimensions may be less than the given dimensions., +     * @param is An InputStream for the image., +     * Load the image at its original size, +     * @param is The InputStream for the image, +    /**, +     * Load the image at its original size, +     *, +     * This is somewhat more efficient than {@link #loadAsIs(java.io.InputStream)} because it does not need to read, +     * the image header to determine the image's width and height. Instead, it assumes the given width and height, +     *, +     * @param is The InputStream for the image, +     * @param width The width of the image represented by the InputStream, +     * @param height The height of the image represented by the InputStream, +     * @return The loaded image, +     */, +     * A potentially expensive operation to load the image for the given InputStream. If a recycled Bitmap whose, +     * dimensions exactly match those of the image for the given InputStream is available, the operation is much less, +     * expensive in terms of memory., +     * Note - this method will throw an exception of a Bitmap with dimensions not matching those of the image for the, +     * given InputStream is provided.]