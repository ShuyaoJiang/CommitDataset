[+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder())), +        .prepend(InputStream.class, GifDrawable.class, new GifResourceDecoder(context, bitmapPool)), +   * Use {@link GlideBuilder#setMemoryCache(MemoryCache)} to put a permanent memory size if you want, +   * @throws IllegalArgumentException if an object other than Glide's metadata is put as the view's, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder())), +        .prepend(InputStream.class, GifDrawable.class, new GifResourceDecoder(context, bitmapPool)), +   * Use {@link GlideBuilder#setMemoryCache(MemoryCache)} to put a permanent memory size if you want, +   * @throws IllegalArgumentException if an object other than Glide's metadata is put as the view's, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  public Registry getRegistry() {, +    return registry;, +  }, +, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +      public Class<TestDrawable> getResourceClass() {, +        return TestDrawable.class;, +      }, +, +      @Override, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder())), +        .prepend(InputStream.class, GifDrawable.class, new GifResourceDecoder(context, bitmapPool)), +   * Use {@link GlideBuilder#setMemoryCache(MemoryCache)} to put a permanent memory size if you want, +   * @throws IllegalArgumentException if an object other than Glide's metadata is put as the view's, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  public Registry getRegistry() {, +    return registry;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, + * <p> Must be put using, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +     * Returns a Volley request for the given image url. The given future should be put as a]