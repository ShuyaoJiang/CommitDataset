[+++ b/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +        doFetchImage(path, model, width, height, new InternalImageReadyCallback(cb, path, model));, +    protected void onImageReady(String path, T model, Bitmap image, boolean isUsed) { }, +    protected void onImageLoadFailed(String path, T model, Exception e) { }, +        private final String path;, +        private final WeakReference<T> modelRef;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String path, T model) {, +            this.modelRef = new WeakReference<T>(model);, +            this.path = path;, +            final T model = modelRef.get();, +            if (cb != null && modelRef != null) {, +                BaseImageLoader.this.onImageReady(path, model, image, result);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BaseImageLoader.this.onImageLoadFailed(path, model, e);, +++ b/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +        doFetchImage(path, model, width, height, new InternalImageReadyCallback(cb, path, model));, +    protected void onImageReady(String path, T model, Bitmap image, boolean isUsed) { }, +    protected void onImageLoadFailed(String path, T model, Exception e) { }, +        private final String path;, +        private final WeakReference<T> modelRef;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String path, T model) {, +            this.modelRef = new WeakReference<T>(model);, +            this.path = path;, +            final T model = modelRef.get();, +            if (cb != null && modelRef != null) {, +                BaseImageLoader.this.onImageReady(path, model, image, result);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BaseImageLoader.this.onImageLoadFailed(path, model, e);, +++ b/src/com/bumptech/photos/loader/path/BasePathLoader.java, +        doFetchPath(model, width, height, new InternalPathReadyCallback(cb, model));, +    protected void onPathReady(String path, T model, boolean isUsed) { }, +    protected void onPathFetchFailed(T model, Exception e) { }, +        private final WeakReference<T> modelRef;, +        public InternalPathReadyCallback(PathReadyCallback cb, T model) {, +            this.modelRef = new WeakReference<T>(model);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BasePathLoader.this.onPathReady(path, model, result);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BasePathLoader.this.onPathFetchFailed(model, e);, +++ b/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +        doFetchImage(path, model, width, height, new InternalImageReadyCallback(cb, path, model));, +    protected void onImageReady(String path, T model, Bitmap image, boolean isUsed) { }, +    protected void onImageLoadFailed(String path, T model, Exception e) { }, +        private final String path;, +        private final WeakReference<T> modelRef;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String path, T model) {, +            this.modelRef = new WeakReference<T>(model);, +            this.path = path;, +            final T model = modelRef.get();, +            if (cb != null && modelRef != null) {, +                BaseImageLoader.this.onImageReady(path, model, image, result);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BaseImageLoader.this.onImageLoadFailed(path, model, e);, +++ b/src/com/bumptech/photos/loader/path/BasePathLoader.java, +        doFetchPath(model, width, height, new InternalPathReadyCallback(cb, model));, +    protected void onPathReady(String path, T model, boolean isUsed) { }, +    protected void onPathFetchFailed(T model, Exception e) { }, +        private final WeakReference<T> modelRef;, +        public InternalPathReadyCallback(PathReadyCallback cb, T model) {, +            this.modelRef = new WeakReference<T>(model);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BasePathLoader.this.onPathReady(path, model, result);, +            final T model = modelRef.get();, +            if (cb != null && model != null) {, +                BasePathLoader.this.onPathFetchFailed(model, e);, +++ b/src/com/bumptech/photos/resize/loader/ImageManagerLoader.java, +    protected void onImageReady(String path, T model, Bitmap image, boolean isUsed) {]