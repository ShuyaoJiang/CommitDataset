[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, +      Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.anyMapOf;, +    when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +    when(modelLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +          anyMapOf(String.class, Object.class))), +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, +      Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.anyMapOf;, +    when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +    when(modelLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +          anyMapOf(String.class, Object.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java, +import java.util.HashMap;, +, +    assertEquals(fetcher, loader.buildLoadData(assetUri, IMAGE_SIDE, IMAGE_SIDE,, +        new HashMap<String, Object>()).fetcher);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, +      Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.anyMapOf;, +    when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +    when(modelLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +          anyMapOf(String.class, Object.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java, +import java.util.HashMap;, +, +    assertEquals(fetcher, loader.buildLoadData(assetUri, IMAGE_SIDE, IMAGE_SIDE,, +        new HashMap<String, Object>()).fetcher);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java, +import java.util.HashMap;, +import java.util.Map;, +  Map<String, Object> options;, +    options = new HashMap<>();, +    DataFetcher<Object> fetcher = loader.buildLoadData(data, -1, -1, options).fetcher;, +    loader.buildLoadData(data, 10, 10, options).fetcher.loadData(Priority.HIGH, callback);, +    assertEquals(Object.class,, +        loader.buildLoadData(new byte[10], 10, 10, options).fetcher.getDataClass());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,, +      Map<String, Object> options) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java, +import java.util.Map;, +  public LoadData<InputStream> buildLoadData(GlideUrl url, int width, int height,, +      Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.anyMapOf;, +    when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +    when(modelLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +        anyMapOf(String.class, Object.class))), +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt(),, +          anyMapOf(String.class, Object.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java, +import java.util.HashMap;, +, +    assertEquals(fetcher, loader.buildLoadData(assetUri, IMAGE_SIDE, IMAGE_SIDE,, +        new HashMap<String, Object>()).fetcher);]