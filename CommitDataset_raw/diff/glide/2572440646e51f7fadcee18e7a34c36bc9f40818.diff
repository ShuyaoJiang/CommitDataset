[+++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, +    public void testDoesNotCloseNullData() throws IOException {, +, +        @Override, +        protected void close(Closeable data) throws IOException {, +            data.close();, +        }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, +    public void testDoesNotCloseNullData() throws IOException {, +, +        @Override, +        protected void close(Closeable data) throws IOException {, +            data.close();, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import java.io.IOException;, +, +    @Override, +    protected void close(ParcelFileDescriptor data) throws IOException {, +        data.close();, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, +    public void testDoesNotCloseNullData() throws IOException {, +, +        @Override, +        protected void close(Closeable data) throws IOException {, +            data.close();, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import java.io.IOException;, +, +    @Override, +    protected void close(ParcelFileDescriptor data) throws IOException {, +        data.close();, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, +public abstract class LocalUriFetcher<T> implements DataFetcher<T> {, +                close(data);, +, +    /**, +     * Returns a concrete data type from the given {@link android.net.Uri} using the given, +     * {@link android.content.ContentResolver}., +     *, +     * @throws FileNotFoundException, +     */, +, +    /**, +     * Closes the concrete data type if necessary., +     *, +     * <p>, +     *     Note - We can't rely on the closeable interface because it was added after our min API level. See issue #157., +     * </p>, +     *, +     * @param data The data to close., +     * @throws IOException, +     */, +    protected abstract void close(T data) throws IOException;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java, +    public void testDoesNotCloseNullData() throws IOException {, +, +        @Override, +        protected void close(Closeable data) throws IOException {, +            data.close();, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java, +import java.io.IOException;, +, +    @Override, +    protected void close(ParcelFileDescriptor data) throws IOException {, +        data.close();, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, +public abstract class LocalUriFetcher<T> implements DataFetcher<T> {, +                close(data);, +, +    /**, +     * Returns a concrete data type from the given {@link android.net.Uri} using the given, +     * {@link android.content.ContentResolver}., +     *, +     * @throws FileNotFoundException, +     */, +, +    /**, +     * Closes the concrete data type if necessary., +     *, +     * <p>, +     *     Note - We can't rely on the closeable interface because it was added after our min API level. See issue #157., +     * </p>, +     *, +     * @param data The data to close., +     * @throws IOException, +     */, +    protected abstract void close(T data) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java, +import java.io.IOException;, +, +    @Override, +    protected void close(InputStream data) throws IOException {, +        data.close();, +    }]