[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class,, +        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class,, +        .append(Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class,, +            new VideoBitmapDecoder(bitmapPool)), +        .append(Registry.BUCKET_BITMAP_DRAWABLE, ByteBuffer.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_BITMAP_DRAWABLE, InputStream.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_BITMAP_DRAWABLE, ParcelFileDescriptor.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_GIF, InputStream.class, GifDrawable.class,, +        .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder), +        .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<>()), +        .append(Registry.BUCKET_BITMAP, GifDecoder.class, Bitmap.class,, +            new GifFrameResourceDecoder(bitmapPool)), +        .append(File.class, File.class, new UnitModelLoader.Factory<>()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class,, +        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class,, +        .append(Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class,, +            new VideoBitmapDecoder(bitmapPool)), +        .append(Registry.BUCKET_BITMAP_DRAWABLE, ByteBuffer.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_BITMAP_DRAWABLE, InputStream.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_BITMAP_DRAWABLE, ParcelFileDescriptor.class, BitmapDrawable.class,, +        .append(Registry.BUCKET_GIF, InputStream.class, GifDrawable.class,, +        .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder), +        .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<>()), +        .append(Registry.BUCKET_BITMAP, GifDecoder.class, Bitmap.class,, +            new GifFrameResourceDecoder(bitmapPool)), +        .append(File.class, File.class, new UnitModelLoader.Factory<>()), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import java.util.Arrays;, +  public static final String BUCKET_GIF = "Gif";, +  public static final String BUCKET_BITMAP = "Bitmap";, +  public static final String BUCKET_BITMAP_DRAWABLE = "BitmapDrawable";, +  private static final String BUCKET_PREPEND_ALL = "legacy_prepend_all";, +  private static final String BUCKET_APPEND_ALL = "legacy_append";, +, +    setResourceDecoderBucketPriorityList(, +        Arrays.asList(BUCKET_GIF, BUCKET_BITMAP, BUCKET_BITMAP_DRAWABLE));, +   * Appends the given {@link ResourceDecoder} onto the list of all available, +   * {@link ResourceDecoder}s allowing it to be used if all earlier and default, +   * {@link ResourceDecoder}s for the given types fail (or there are none)., +   * @see #append(String, Class, Class, ResourceDecoder), +    append(BUCKET_APPEND_ALL, dataClass, resourceClass, decoder);, +   * Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s, +   * in this bucket, allowing it to be used if all earlier and default {@link ResourceDecoder}s for, +   * the given types in this bucket fail (or there are none)., +   *, +   * <p>If you're attempting to replace an existing {@link ResourceDecoder} or would like to ensure, +   * that your {@link ResourceDecoder} gets the chance to run before an existing, +   * {@link ResourceDecoder}, use {@link #prepend(Class, Class, ResourceDecoder)}. This method is, +   * best for new types of resources and data or as a way to add an additional fallback decoder, +   * for an existing type of data., +   *, +   * @see #prepend(String, Class, Class, ResourceDecoder), +   * @see #setResourceDecoderBucketPriorityList(List), +   *, +   * @param bucket The bucket identifier to add this decoder to., +   * @param dataClass The data that will be decoded from, +   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc)., +   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc)., +   * @param decoder The {@link ResourceDecoder} to register., +   */, +  public <Data, TResource> Registry append(, +      String bucket,, +      Class<Data> dataClass,, +      Class<TResource> resourceClass,, +      ResourceDecoder<Data, TResource> decoder) {, +    decoderRegistry.append(bucket, decoder, dataClass, resourceClass);, +    return this;, +  }, +, +  /**, +   * Prepends the given {@link ResourceDecoder} into the list of all available, +   * {@link ResourceDecoder}s so that it is attempted before all later and default, +   * {@link ResourceDecoder}s for the given types., +   * @see #prepend(String, Class, Class, ResourceDecoder), +    prepend(BUCKET_PREPEND_ALL, dataClass, resourceClass, decoder);, +    return this;, +  }, +, +  /**, +   * Prepends the given {@link ResourceDecoder} into the list of available {@link ResourceDecoder}s, +   * in the same bucket so that it is attempted before all later and default, +   * {@link ResourceDecoder}s for the given types in that bucket., +   *, +   * <p>This method allows you to replace the default {@link ResourceDecoder} for this bucket, +   * because it ensures the registered {@link ResourceDecoder} will run first. You can use the, +   * {@link ResourceDecoder#handles(Object, Options)} to fall back to the default, +   * {@link ResourceDecoder}s if you only want to change the default functionality for certain, +   * types of data., +   *, +   * @see #append(String, Class, Class, ResourceDecoder), +   * @see #setResourceDecoderBucketPriorityList(List), +   *, +   * @param bucket The bucket identifier to add this decoder to., +   * @param dataClass The data that will be decoded from, +   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc)., +   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).]