[+++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + *    {@literal @android.support.annotation.NonNull}, + *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, +        .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + *    {@literal @android.support.annotation.NonNull}, + *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, +        .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + *    {@literal @android.support.annotation.NonNull}, + *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, +        .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +        .addTypeVariable(TypeVariableName.get("ResourceType")), +        .addParameter(classOfResouceType.annotated(NON_NULL), "resourceClass"), +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + *    {@literal @android.support.annotation.NonNull}, + *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, +        .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +        .addTypeVariable(TypeVariableName.get("ResourceType")), +        .addParameter(classOfResouceType.annotated(NON_NULL), "resourceClass"), +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import android.support.annotation.NonNull;, +  @NonNull, +++ b/annotation/compiler/build.gradle, +// Make sure running `gradlew :annotation:compiler:check` actually does full quality control., +test.dependsOn ':annotation:compiler:test:test', +, +    inputs.files compiledJar, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + *    {@literal @android.support.annotation.NonNull}, + *    public java.util.Set&lt;java.lang.Class&lt;?>> getExcludedModuleClasses() {, +        .addAnnotation(ClassName.get("android.support.annotation", "NonNull")), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final AnnotationSpec NON_NULL = AnnotationSpec, +      .builder(ClassName.get("android.support.annotation", "NonNull")), +      .build();, +        .addAnnotation(NON_NULL), +        .addTypeVariable(TypeVariableName.get("ResourceType")), +        .addParameter(classOfResouceType.annotated(NON_NULL), "resourceClass"), +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java, +import android.support.annotation.NonNull;, +  @NonNull, +++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java, +import android.support.annotation.NonNull;, +  @NonNull]