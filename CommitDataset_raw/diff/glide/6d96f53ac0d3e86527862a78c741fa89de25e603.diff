[+++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, +    private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, +         *     public void onException(Exception e, T model, Target target) {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +            loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, +            loaderFactory.register(URL.class, new ModelLoaderFactory<URL>() {, +                ModelLoader<URL> errorUrlLoader = new ModelLoader<URL>() {, +                    @Override, +                    public StreamLoader getStreamLoader(URL model, int width, int height) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    }, +, +                    @Override, +                    public String getId(URL model) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    }, +                };, +, +                @Override, +                public ModelLoader<URL> build(Context context, GenericLoaderFactory factories) {, +                    return errorUrlLoader;, +                }, +, +                @Override @SuppressWarnings("unchecked"), +                public Class<? extends ModelLoader<URL>> loaderClass() {, +                    return (Class<ModelLoader<URL>>) errorUrlLoader.getClass();, +                }, +, +                @Override, +                public void teardown() {, +                }, +            });, +     * {@link ImageManager} with custom options for use with {@link com.bumptech.glide.Glide.Request} and/or as an, +     * Set the {@link ImageManager} to use with {@link Glide.Request}., +     * Set the {@link ImageManager} to use with {@link Glide.Request} Replaces the current, +     * models. Typically the {@link Glide#using(com.bumptech.glide.loader.model.ModelLoader)} syntax is preferred, +     * because it directly links the model with the ModelLoader being used to load it., +     *     used for any other model class, {@link com.bumptech.glide.loader.model.ModelLoaderFactory#teardown()}, +     * @param clazz The class, +     * @param factory The factory to use, +     * @param <T> The type of the model, +    public <T> void register(Class<T> clazz, ModelLoaderFactory<T> factory) {, +        ModelLoaderFactory<T> removed = loaderFactory.register(clazz, factory);, +     * @param clazz The class to get a {@link ModelLoader} for, +    public static <T> ModelLoader<T> buildModelLoader(Class<T> clazz, Context context) {, +        return GLIDE.loaderFactory.buildModelLoader(clazz, context);, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T> ModelLoaderFactory<T> getFactory(T model) {, +        return loaderFactory.getFactory((Class<T>) model.getClass());, +    }, +, +    private ImageViewTarget getImageViewTarget(ImageView imageView) {, +        Object tag = imageView.getTag();, +        ImageViewTarget result = null;, +        if (tag instanceof ImageViewTarget) {, +            result = (ImageViewTarget) tag;, +        } else if (tag != null) {, +            throw new IllegalArgumentException("You cannot set a tag on an image view Glide is loading an image into");, +        }, +, +        return result;, +    }, +, +    private ImageViewTarget getImageViewTargetOrSet(ImageView imageView) {, +        ImageViewTarget result = getImageViewTarget(imageView);, +        if (result == null) {, +            result = new ImageViewTarget(imageView);, +            imageView.setTag(result);, +        }, +        return result;, +     * Set the {@link ModelLoaderFactory} and therefore the model type to use for a new load., +     *     Note - You can use this method to set a {@link ModelLoaderFactory} for models that don't have a default]