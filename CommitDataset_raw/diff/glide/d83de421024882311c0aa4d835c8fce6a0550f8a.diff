[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +      // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java, +      // config and is treated as null in java code. On KitKat+ these Bitmaps can be reconfigured, +      // and are suitable for re-use., +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {, +      configs.remove(Bitmap.Config.HARDWARE);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +      // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java, +      // config and is treated as null in java code. On KitKat+ these Bitmaps can be reconfigured, +      // and are suitable for re-use., +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {, +      configs.remove(Bitmap.Config.HARDWARE);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import android.graphics.Bitmap.Config;, +  static final String TAG = "Downsampler";, +  private final HardwareConfigState hardwareConfigState = HardwareConfigState.getInstance();, +    calculateConfig(is, decodeFormat, options, targetWidth, targetHeight);, +  private void calculateConfig(, +      InputStream is,, +      DecodeFormat format,, +      BitmapFactory.Options optionsWithScaling,, +      int targetWidth,, +      int targetHeight), +      throws IOException {, +, +    if (hardwareConfigState.setHardwareConfigIfAllowed(, +        targetWidth, targetHeight, optionsWithScaling)) {, +      return;, +    }, +, +      optionsWithScaling.inPreferredConfig = Bitmap.Config.ARGB_8888;, +      return;, +    optionsWithScaling.inPreferredConfig =, +        hasAlpha ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +    if (optionsWithScaling.inPreferredConfig == Config.RGB_565, +        || optionsWithScaling.inPreferredConfig == Config.ARGB_4444, +        || optionsWithScaling.inPreferredConfig == Config.ALPHA_8) {, +      optionsWithScaling.inDither = true;, +    }, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O, +        && options.inPreferredConfig == Config.HARDWARE) {, +      return;, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +      // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java, +      // config and is treated as null in java code. On KitKat+ these Bitmaps can be reconfigured, +      // and are suitable for re-use., +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {, +      configs.remove(Bitmap.Config.HARDWARE);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +import android.graphics.Bitmap.Config;, +  static final String TAG = "Downsampler";, +  private final HardwareConfigState hardwareConfigState = HardwareConfigState.getInstance();, +    calculateConfig(is, decodeFormat, options, targetWidth, targetHeight);, +  private void calculateConfig(, +      InputStream is,, +      DecodeFormat format,, +      BitmapFactory.Options optionsWithScaling,, +      int targetWidth,, +      int targetHeight), +      throws IOException {, +, +    if (hardwareConfigState.setHardwareConfigIfAllowed(, +        targetWidth, targetHeight, optionsWithScaling)) {, +      return;, +    }, +, +      optionsWithScaling.inPreferredConfig = Bitmap.Config.ARGB_8888;, +      return;, +    optionsWithScaling.inPreferredConfig =, +        hasAlpha ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +    if (optionsWithScaling.inPreferredConfig == Config.RGB_565, +        || optionsWithScaling.inPreferredConfig == Config.ARGB_4444, +        || optionsWithScaling.inPreferredConfig == Config.ALPHA_8) {, +      optionsWithScaling.inDither = true;, +    }, +    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O, +        && options.inPreferredConfig == Config.HARDWARE) {, +      return;, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.os.Build;, +import android.util.Log;, +import java.io.File;, +, +/**, + * State and constants for interacting with {@link android.graphics.Bitmap.Config#HARDWARE} on, + * Android O+., + */, +final class HardwareConfigState {]