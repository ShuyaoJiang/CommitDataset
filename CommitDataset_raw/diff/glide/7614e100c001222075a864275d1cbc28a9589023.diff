[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;, +        /* Drawables */, +        .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context)), +        .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources)), +        .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;, +        /* Drawables */, +        .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context)), +        .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources)), +        .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources)), +++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java, +, +  /**, +   * Factory for loading resource {@link Uri}s from Android resource ids., +   */, +  public static class UriFactory implements ModelLoaderFactory<Integer, Uri> {, +, +    private final Resources resources;, +, +    public UriFactory(Resources resources) {, +      this.resources = resources;, +    }, +, +    @Override, +    public ModelLoader<Integer, Uri> build(MultiModelLoaderFactory multiFactory) {, +      return new ResourceLoader<>(resources, new UnitModelLoader<Uri>());, +    }, +, +    @Override, +    public void teardown() {, +      // Do nothing., +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;, +        /* Drawables */, +        .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context)), +        .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources)), +        .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources)), +++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java, +, +  /**, +   * Factory for loading resource {@link Uri}s from Android resource ids., +   */, +  public static class UriFactory implements ModelLoaderFactory<Integer, Uri> {, +, +    private final Resources resources;, +, +    public UriFactory(Resources resources) {, +      this.resources = resources;, +    }, +, +    @Override, +    public ModelLoader<Integer, Uri> build(MultiModelLoaderFactory multiFactory) {, +      return new ResourceLoader<>(resources, new UnitModelLoader<Uri>());, +    }, +, +    @Override, +    public void teardown() {, +      // Do nothing., +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java, +package com.bumptech.glide.load.resource.drawable;, +, +import android.content.Context;, +import android.content.res.Resources;, +import android.content.res.Resources.Theme;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.DrawableRes;, +import android.support.annotation.Nullable;, +import android.support.v4.content.res.ResourcesCompat;, +import android.support.v7.content.res.AppCompatResources;, +, +/**, + * Handles decoding Drawables with the v7 support library if present and falling back to the v4, + * support library otherwise., + */, +public final class DrawableDecoderCompat {, +  private static volatile boolean shouldCallAppCompatResources = true;, +  private DrawableDecoderCompat() {, +    // Utility class., +  }, +, +  /**, +   * Loads a Drawable using {@link AppCompatResources} if available and {@link ResourcesCompat}, +   * otherwise, depending on whether or not the v7 support library is included in the application., +   */, +  public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullable Theme theme) {, +    try {, +      // Race conditions may cause us to attempt to load using v7 more than once. That's ok since, +      // this check is a modest optimization and the output will be correct anyway., +      if (shouldCallAppCompatResources) {, +        return loadDrawableV7(context, id);, +      }]