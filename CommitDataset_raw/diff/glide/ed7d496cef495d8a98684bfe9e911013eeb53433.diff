[+++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +import com.bumptech.photos.loader.opener.StreamOpener;, + * subclasses with a weak reference to the calling {@link com.bumptech.photos.presenter.ImagePresenter}., +public abstract class BaseImageLoader implements ImageLoader {, +    public final Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb) {, +        doFetchImage(id, streamOpener, width, height, new InternalImageReadyCallback(cb, id));, +     * @see ImageLoader#fetchImage(String, com.bumptech.photos.loader.opener.StreamOpener, int, int, com.bumptech.photos.loader.image.ImageLoader.ImageReadyCallback), +     * @param id A unique id identifying this particular image that will be combined with the provided size info to use as a cache key., +     * @param streamOpener The {@link StreamOpener} that will be used to load the image if it is not cached, +    protected abstract void doFetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb);, +     * @param id The unique id of the image, +    protected void onImageReady(String id, Bitmap image, boolean isUsed) { }, +     * A lifecycle method called after the requesting object is notified that this loader failed to load a Bitmap., +     * Should be used to cleanup or update any data related to the failed load., +     * @param id The unique id of the image, +    protected boolean onImageLoadFailed(Exception e, String id) {, +        private final String id;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String id) {, +            this.id = id;, +            if (cb != null) {, +                BaseImageLoader.this.onImageReady(id, image, result);, +            if (cb != null) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, id)) {, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +import com.bumptech.photos.loader.opener.StreamOpener;, + * subclasses with a weak reference to the calling {@link com.bumptech.photos.presenter.ImagePresenter}., +public abstract class BaseImageLoader implements ImageLoader {, +    public final Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb) {, +        doFetchImage(id, streamOpener, width, height, new InternalImageReadyCallback(cb, id));, +     * @see ImageLoader#fetchImage(String, com.bumptech.photos.loader.opener.StreamOpener, int, int, com.bumptech.photos.loader.image.ImageLoader.ImageReadyCallback), +     * @param id A unique id identifying this particular image that will be combined with the provided size info to use as a cache key., +     * @param streamOpener The {@link StreamOpener} that will be used to load the image if it is not cached, +    protected abstract void doFetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb);, +     * @param id The unique id of the image, +    protected void onImageReady(String id, Bitmap image, boolean isUsed) { }, +     * A lifecycle method called after the requesting object is notified that this loader failed to load a Bitmap., +     * Should be used to cleanup or update any data related to the failed load., +     * @param id The unique id of the image, +    protected boolean onImageLoadFailed(Exception e, String id) {, +        private final String id;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String id) {, +            this.id = id;, +            if (cb != null) {, +                BaseImageLoader.this.onImageReady(id, image, result);, +            if (cb != null) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, id)) {, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +import com.bumptech.photos.loader.opener.StreamOpener;, + * An interface used by {@link com.bumptech.photos.presenter.ImagePresenter} to fetch a bitmap for a given id and, + * dimensions and/or input streams, +public interface ImageLoader {, +     * {@link ImageLoader} when a load completes either successfully or because of an exception, +     * @param id A unique id identifying this particular image that will be combined with the provided size info to use as a cache key., +     * @param streamOpener The {@link StreamOpener} that will be used to load the image if it is not cached, +    public Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb);, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +import com.bumptech.photos.loader.opener.StreamOpener;, + * subclasses with a weak reference to the calling {@link com.bumptech.photos.presenter.ImagePresenter}., +public abstract class BaseImageLoader implements ImageLoader {, +    public final Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb) {, +        doFetchImage(id, streamOpener, width, height, new InternalImageReadyCallback(cb, id));, +     * @see ImageLoader#fetchImage(String, com.bumptech.photos.loader.opener.StreamOpener, int, int, com.bumptech.photos.loader.image.ImageLoader.ImageReadyCallback), +     * @param id A unique id identifying this particular image that will be combined with the provided size info to use as a cache key., +     * @param streamOpener The {@link StreamOpener} that will be used to load the image if it is not cached, +    protected abstract void doFetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb);, +     * @param id The unique id of the image, +    protected void onImageReady(String id, Bitmap image, boolean isUsed) { }, +     * A lifecycle method called after the requesting object is notified that this loader failed to load a Bitmap., +     * Should be used to cleanup or update any data related to the failed load., +     * @param id The unique id of the image, +    protected boolean onImageLoadFailed(Exception e, String id) {, +        private final String id;, +        public InternalImageReadyCallback(ImageReadyCallback cb, String id) {, +            this.id = id;, +            if (cb != null) {, +                BaseImageLoader.this.onImageReady(id, image, result);, +            if (cb != null) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, id)) {, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +import com.bumptech.photos.loader.opener.StreamOpener;, + * An interface used by {@link com.bumptech.photos.presenter.ImagePresenter} to fetch a bitmap for a given id and, + * dimensions and/or input streams, +public interface ImageLoader {, +     * {@link ImageLoader} when a load completes either successfully or because of an exception, +     * @param id A unique id identifying this particular image that will be combined with the provided size info to use as a cache key., +     * @param streamOpener The {@link StreamOpener} that will be used to load the image if it is not cached, +    public Object fetchImage(String id, StreamOpener streamOpener, int width, int height, ImageReadyCallback cb);, +++ b/library/src/com/bumptech/photos/loader/model/ModelStreamLoader.java, +package com.bumptech.photos.loader.model;, +, +import com.bumptech.photos.loader.opener.StreamOpener;, +, +/**, + * An interface used by {@link com.bumptech.photos.presenter.ImagePresenter} to fetch a unique id and a means of, + * obtaining input streams to an image represented by the given model, + *, + * @param <T> The type of the model that represents an image, + */, +public interface ModelStreamLoader<T> {, +    /**]