[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +, +        // Acquired once and then released while notifying., +        InOrder order = inOrder(harness.engineResource);, +        order.verify(harness.engineResource, times(harness.numCbs + 1)).acquire();, +        order.verify(harness.engineResource, times(1)).release();, +            harness.getJob().onException(exception);, +        verify(harness.engineResource, times(2)).acquire();, +        verify(harness.engineResource, times(2)).acquire();, +//, +//    @Test, +//    public void testRemovingCallbackDuringOnResourceReadyPreventsResourceFromBeingAcquiredForCallback() {, +//        final EngineJob job = harness.getJob();, +//        final ResourceCallback called = mock(ResourceCallback.class);, +//        final ResourceCallback notYetCalled = mock(ResourceCallback.class);, +//, +//        doAnswer(new Answer() {, +//            @Override, +//            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +//                job.removeCallback(notYetCalled);, +//                return null;, +//            }, +//        }).when(called).onResourceReady(any(Resource.class));, +//, +//        job.addCallback(called);, +//        job.addCallback(notYetCalled);, +//, +//        job.onResourceReady(harness.resource);, +//    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +, +        // Acquired once and then released while notifying., +        InOrder order = inOrder(harness.engineResource);, +        order.verify(harness.engineResource, times(harness.numCbs + 1)).acquire();, +        order.verify(harness.engineResource, times(1)).release();, +            harness.getJob().onException(exception);, +        verify(harness.engineResource, times(2)).acquire();, +        verify(harness.engineResource, times(2)).acquire();, +//, +//    @Test, +//    public void testRemovingCallbackDuringOnResourceReadyPreventsResourceFromBeingAcquiredForCallback() {, +//        final EngineJob job = harness.getJob();, +//        final ResourceCallback called = mock(ResourceCallback.class);, +//        final ResourceCallback notYetCalled = mock(ResourceCallback.class);, +//, +//        doAnswer(new Answer() {, +//            @Override, +//            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +//                job.removeCallback(notYetCalled);, +//                return null;, +//            }, +//        }).when(called).onResourceReady(any(Resource.class));, +//, +//        job.addCallback(called);, +//        job.addCallback(notYetCalled);, +//, +//        job.onResourceReady(harness.resource);, +//    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource.acquire();, +        engineResource.acquire();, +        engineResource.acquire();, +        engineResource.acquire();, +        engineResource.acquire();, +        engineResource.acquire();, +                    engineResource.acquire();, +        engineResource.acquire();, +        engineResource.acquire();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +, +        // Acquired once and then released while notifying., +        InOrder order = inOrder(harness.engineResource);, +        order.verify(harness.engineResource, times(harness.numCbs + 1)).acquire();, +        order.verify(harness.engineResource, times(1)).release();, +            harness.getJob().onException(exception);, +        verify(harness.engineResource, times(2)).acquire();, +        verify(harness.engineResource, times(2)).acquire();, +//, +//    @Test, +//    public void testRemovingCallbackDuringOnResourceReadyPreventsResourceFromBeingAcquiredForCallback() {, +//        final EngineJob job = harness.getJob();, +//        final ResourceCallback called = mock(ResourceCallback.class);, +//        final ResourceCallback notYetCalled = mock(ResourceCallback.class);, +//, +//        doAnswer(new Answer() {, +//            @Override, +//            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +//                job.removeCallback(notYetCalled);, +//                return null;, +//            }, +//        }).when(called).onResourceReady(any(Resource.class));, +//, +//        job.addCallback(called);, +//        job.addCallback(notYetCalled);]