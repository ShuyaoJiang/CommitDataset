[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, +        /* Bitmaps */, +        resourceEncoderRegistry.add(Bitmap.class, new BitmapEncoder());, +, +        /* GlideBitmapDrawables */, +        decoderRegistry.append(new GlideBitmapDrawableDecoder<InputStream>(context.getResources(), bitmapPool,, +                new StreamBitmapDecoder(bitmapPool, decodeFormat)), InputStream.class, GlideBitmapDrawable.class);, +        resourceEncoderRegistry.add(GlideBitmapDrawable.class,, +                new GlideBitmapDrawableEncoder(bitmapPool, new BitmapEncoder()));, +        /* Gifs */, +, +        /* Gif Frames */, +        /* Files */, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, +        /* Bitmaps */, +        resourceEncoderRegistry.add(Bitmap.class, new BitmapEncoder());, +, +        /* GlideBitmapDrawables */, +        decoderRegistry.append(new GlideBitmapDrawableDecoder<InputStream>(context.getResources(), bitmapPool,, +                new StreamBitmapDecoder(bitmapPool, decodeFormat)), InputStream.class, GlideBitmapDrawable.class);, +        resourceEncoderRegistry.add(GlideBitmapDrawable.class,, +                new GlideBitmapDrawableEncoder(bitmapPool, new BitmapEncoder()));, +        /* Gifs */, +, +        /* Gif Frames */, +        /* Files */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    private final DataFetcherSet sourceFetchers;, +    public DecodeJob(Class<Z> resourceClass, EngineKey resultKey, int width, int height, DataFetcherSet sourceFetchers,, +        this(resourceClass, resultKey, width, height, sourceFetchers, requestContext, transformation, transcoder,, +    DecodeJob(Class<Z> resourceClass, EngineKey resultKey, int width, int height, DataFetcherSet sourceFetchers,, +        this.sourceFetchers = sourceFetchers;, +        Resource<Z> decoded = decodeFromFetcherSet(sourceFetchers, diskCacheStrategy == DiskCacheStrategy.SOURCE);, +        return transformEncodeAndTranscode(decoded);, +    }, +, +    private Resource<Z> decodeFromFetcherSet(DataFetcherSet fetchers, boolean cacheSource) throws Exception {, +                Resource<Z> decoded = decodeSource(fetcher, cacheSource);, +                if (decoded != null) {, +                    return decoded;, +, +        sourceFetchers.cancel();, +    private <T> Resource<Z> decodeSource(DataFetcher<T> fetcher, boolean cacheSource) throws Exception {, +            return decodeFromSourceData(rewinder, cacheSource);, +    private <T> Resource<Z> decodeFromSourceData(DataRewinder<T> rewinder, boolean cacheSource) throws Exception {, +        if (cacheSource) {, +    private <T> Resource<Z> cacheAndDecodeSourceData(DataRewinder<T> rewinder) throws Exception {, +    private Resource<Z> loadFromCache(Key key) throws Exception {, +        DataFetcherSet fetchers = requestContext.getDataFetchers(cacheFile, width, height);, +            result = decodeFromFetcherSet(fetchers, false /*cacheSource*/);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +, +        /* Bitmaps */, +        resourceEncoderRegistry.add(Bitmap.class, new BitmapEncoder());, +, +        /* GlideBitmapDrawables */, +        decoderRegistry.append(new GlideBitmapDrawableDecoder<InputStream>(context.getResources(), bitmapPool,, +                new StreamBitmapDecoder(bitmapPool, decodeFormat)), InputStream.class, GlideBitmapDrawable.class);, +        resourceEncoderRegistry.add(GlideBitmapDrawable.class,, +                new GlideBitmapDrawableEncoder(bitmapPool, new BitmapEncoder()));, +        /* Gifs */, +, +        /* Gif Frames */, +        /* Files */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    private final DataFetcherSet sourceFetchers;, +    public DecodeJob(Class<Z> resourceClass, EngineKey resultKey, int width, int height, DataFetcherSet sourceFetchers,, +        this(resourceClass, resultKey, width, height, sourceFetchers, requestContext, transformation, transcoder,, +    DecodeJob(Class<Z> resourceClass, EngineKey resultKey, int width, int height, DataFetcherSet sourceFetchers,, +        this.sourceFetchers = sourceFetchers;, +        Resource<Z> decoded = decodeFromFetcherSet(sourceFetchers, diskCacheStrategy == DiskCacheStrategy.SOURCE);, +        return transformEncodeAndTranscode(decoded);, +    }, +, +    private Resource<Z> decodeFromFetcherSet(DataFetcherSet fetchers, boolean cacheSource) throws Exception {, +                Resource<Z> decoded = decodeSource(fetcher, cacheSource);, +                if (decoded != null) {, +                    return decoded;, +, +        sourceFetchers.cancel();, +    private <T> Resource<Z> decodeSource(DataFetcher<T> fetcher, boolean cacheSource) throws Exception {, +            return decodeFromSourceData(rewinder, cacheSource);, +    private <T> Resource<Z> decodeFromSourceData(DataRewinder<T> rewinder, boolean cacheSource) throws Exception {, +        if (cacheSource) {, +    private <T> Resource<Z> cacheAndDecodeSourceData(DataRewinder<T> rewinder) throws Exception {, +    private Resource<Z> loadFromCache(Key key) throws Exception {, +        DataFetcherSet fetchers = requestContext.getDataFetchers(cacheFile, width, height);, +            result = decodeFromFetcherSet(fetchers, false /*cacheSource*/);, +++ /dev/null]