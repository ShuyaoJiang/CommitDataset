[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.MethodSpec.Builder;, +            .addParameters(ProcessorUtil.getParameters(methodToOverride));, +    addReturnAnnotations(builder, methodToOverride);, +  private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {, +    String visibleForTestingTypeQualifiedName =, +        processingEnv, +            .getElementUtils(), +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +, +      // Suppress a lint warning if we're overriding a VisibleForTesting method., +      // See #1977., +      String annotationQualifiedName = mirror.getAnnotationType().toString();, +      if (annotationQualifiedName.equals(visibleForTestingTypeQualifiedName)) {, +        builder.addAnnotation(, +            AnnotationSpec.builder(, +                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME)), +                .addMember("value", "$S", "VisibleForTests"), +                .build());, +      }, +    }, +, +    return builder;, +  }, +, +, +    Builder builder = MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString()), +        .addParameters(ProcessorUtil.getParameters(methodToOverride)), +            parameter.getSimpleName());, +, +    return addReturnAnnotations(builder, methodToOverride).build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.MethodSpec.Builder;, +            .addParameters(ProcessorUtil.getParameters(methodToOverride));, +    addReturnAnnotations(builder, methodToOverride);, +  private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {, +    String visibleForTestingTypeQualifiedName =, +        processingEnv, +            .getElementUtils(), +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +, +      // Suppress a lint warning if we're overriding a VisibleForTesting method., +      // See #1977., +      String annotationQualifiedName = mirror.getAnnotationType().toString();, +      if (annotationQualifiedName.equals(visibleForTestingTypeQualifiedName)) {, +        builder.addAnnotation(, +            AnnotationSpec.builder(, +                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME)), +                .addMember("value", "$S", "VisibleForTests"), +                .build());, +      }, +    }, +, +    return builder;, +  }, +, +, +    Builder builder = MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString()), +        .addParameters(ProcessorUtil.getParameters(methodToOverride)), +            parameter.getSimpleName());, +, +    return addReturnAnnotations(builder, methodToOverride).build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +import com.squareup.javapoet.MethodSpec.Builder;, +            .addParameters(ProcessorUtil.getParameters(methodToOverride));, +    addReturnAnnotations(builder, methodToOverride);, +  private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {, +    String visibleForTestingTypeQualifiedName =, +        processingEnv, +            .getElementUtils(), +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +, +      // Suppress a lint warning if we're overriding a VisibleForTesting method., +      // See #1977., +      String annotationQualifiedName = mirror.getAnnotationType().toString();, +      if (annotationQualifiedName.equals(visibleForTestingTypeQualifiedName)) {, +        builder.addAnnotation(, +            AnnotationSpec.builder(, +                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME)), +                .addMember("value", "$S", "VisibleForTests"), +                .build());, +      }, +    }, +, +    return builder;, +  }, +]