[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +      List<?> values = (List<?>) value;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +      List<?> values = (List<?>) value;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.HashSet;, +import java.util.Set;, +          .addAnnotation(SafeVarargs.class), +          .addAnnotation(, +              AnnotationSpec.builder(SuppressWarnings.class), +                  .addMember("value", "$S", "varargs"), +                  .build());, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // We need to combine warnings below., +                        && !input.type.equals(TypeName.get(SuppressWarnings.class));, +    AnnotationSpec suppressWarnings = buildSuppressWarnings(requestOptionMethod);, +    if (suppressWarnings != null) {, +      result.addAnnotation(suppressWarnings);, +    }, +    return result.build();, +  @Nullable, +  private AnnotationSpec buildSuppressWarnings(MethodSpec requestOptionMethod) {, +    Set<String> suppressions = new HashSet<>();, +    if (requestOptionMethod.annotations.contains(, +        AnnotationSpec.builder(SuppressWarnings.class).build())) {, +      for (AnnotationSpec annotation : requestOptionMethod.annotations) {, +        if (annotation.type.equals(TypeName.get(SuppressWarnings.class))) {, +          List<CodeBlock> codeBlocks = annotation.members.get("value");, +          suppressions.addAll(FluentIterable.from(codeBlocks).transform(, +              new Function<CodeBlock, String>() {, +                @Override, +                public String apply(CodeBlock input) {, +                  return input.toString();, +                }, +              }).toSet());, +        }, +      }, +    }, +, +    if (requestOptionMethod.annotations.contains(, +        AnnotationSpec.builder(SafeVarargs.class).build())) {, +      suppressions.add("unchecked");, +      suppressions.add("varargs");, +    }, +, +    if (suppressions.isEmpty()) {, +      return null;, +    }, +, +    AnnotationSpec.Builder builder = AnnotationSpec.builder(SuppressWarnings.class);, +    for (String suppression : suppressions) {, +      builder.addMember("value", "$S", suppression);, +    }, +, +    return builder.build();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +      List<?> values = (List<?>) value;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.HashSet;, +import java.util.Set;, +          .addAnnotation(SafeVarargs.class), +          .addAnnotation(, +              AnnotationSpec.builder(SuppressWarnings.class), +                  .addMember("value", "$S", "varargs"), +                  .build());, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // We need to combine warnings below., +                        && !input.type.equals(TypeName.get(SuppressWarnings.class));, +    AnnotationSpec suppressWarnings = buildSuppressWarnings(requestOptionMethod);, +    if (suppressWarnings != null) {, +      result.addAnnotation(suppressWarnings);, +    }, +    return result.build();, +  @Nullable, +  private AnnotationSpec buildSuppressWarnings(MethodSpec requestOptionMethod) {, +    Set<String> suppressions = new HashSet<>();, +    if (requestOptionMethod.annotations.contains(, +        AnnotationSpec.builder(SuppressWarnings.class).build())) {, +      for (AnnotationSpec annotation : requestOptionMethod.annotations) {, +        if (annotation.type.equals(TypeName.get(SuppressWarnings.class))) {, +          List<CodeBlock> codeBlocks = annotation.members.get("value");, +          suppressions.addAll(FluentIterable.from(codeBlocks).transform(, +              new Function<CodeBlock, String>() {, +                @Override, +                public String apply(CodeBlock input) {, +                  return input.toString();, +                }, +              }).toSet());, +        }, +      }, +    }, +, +    if (requestOptionMethod.annotations.contains(, +        AnnotationSpec.builder(SafeVarargs.class).build())) {, +      suppressions.add("unchecked");, +      suppressions.add("varargs");, +    }, +, +    if (suppressions.isEmpty()) {, +      return null;]