[+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +  /**, +   * Constructor that defaults {@code waitForLayout} to {@code false}., +   */, +  /**, +   * @param waitForLayout If set to {@code true}, Glide will always wait for any pending layout pass, +   * before checking for the size a View. If set to {@code false} Glide will only wait for a pending, +   * layout pass if it's unable to resolve the size from layout parameters or an existing View size., +   * Because setting this parameter to {@code true} forces Glide to wait for the layout pass to, +   * occur before starting the load, setting this parameter to {@code true} can cause flashing in, +   * some cases and should be used sparingly. If layout parameters are set to fixed sizes, they will, +   * still be used instead of the View's dimensions even if this parameter is set to {@code true}., +   * This parameter is a fallback only., +   */, +      // coherent choice, it's extremely dangerous because original images may be much too large to, +      // fit in memory or so large that only a couple can fit in memory, causing OOMs. If users want, +      // the original image, they can always use .override(Target.SIZE_ORIGINAL). Since wrap_content, +      // Since WRAP_CONTENT is sometimes used as a default layout parameter, we always wait for, +      // layout to complete before using this fallback parameter (ConstraintLayout among others)., +      if (!view.isLayoutRequested() && paramSize == LayoutParams.WRAP_CONTENT) {]