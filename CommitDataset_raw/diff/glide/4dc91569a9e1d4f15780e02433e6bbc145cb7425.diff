[+++ b/samples/flickr/build.gradle, +        minSdkVersion 11, +++ b/samples/flickr/build.gradle, +        minSdkVersion 11, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, +import android.support.v4.view.MenuItemCompat;, +import android.support.v7.app.AppCompatActivity;, +import android.view.Menu;, +import android.view.MenuInflater;, +import android.widget.SearchView;, +import com.bumptech.glide.samples.flickr.api.Query;, +import com.bumptech.glide.samples.flickr.api.RecentQuery;, +import com.bumptech.glide.samples.flickr.api.SearchQuery;, +import java.util.Collections;, +public class FlickrSearchActivity extends AppCompatActivity, +    implements SearchView.OnQueryTextListener {, +  private static final String STATE_QUERY = "state_search_string";, +  private final QueryListener queryListener = new QueryListener();, +  private Set<PhotoViewer> photoViewers = new HashSet<>();, +  private List<Photo> currentPhotos = new ArrayList<>();, +  private SearchView searchView;, +  private Query currentQuery;, +  @Override, +  public boolean onCreateOptionsMenu(Menu menu) {, +    MenuInflater menuInflater = getMenuInflater();, +    menuInflater.inflate(R.menu.search_activity, menu);, +, +    searchView =, +        (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.search));, +    searchView.setSubmitButtonEnabled(true);, +    searchView.setIconified(false);, +    searchView.setOnQueryTextListener(this);, +, +    return true;, +  }, +, +  @Override, +  public boolean onQueryTextSubmit(String query) {, +    executeSearch(query);, +    searchView.setQuery("", false /*submit*/);, +    return true;, +  }, +, +  @Override, +  public boolean onQueryTextChange(String newText) {, +    return false;, +  }, +, +    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder(), +        .detectAll(), +        .penaltyLog(), +        .build());, +, +    Api.get(this).registerSearchListener(queryListener);, +      Query savedQuery = savedInstanceState.getParcelable(STATE_QUERY);, +      if (savedQuery != null) {, +        executeQuery(savedQuery);, +    } else {, +      executeQuery(RecentQuery.get());, +    if (savedInstanceState == null) {, +  }, +    if (currentQuery != null) {, +      outState.putParcelable(STATE_QUERY, currentQuery);, +    Api.get(this).unregisterSearchListener(queryListener);, +  private void executeSearch(String searchString) {, +    Query query = TextUtils.isEmpty(searchString) ? null : new SearchQuery(searchString);, +    executeQuery(query);, +  private void executeQuery(Query query) {, +    currentQuery = query;, +    if (query == null) {, +      queryListener.onSearchCompleted(null, Collections.<Photo>emptyList());, +    searchTerm.setText(getString(R.string.searching_for, currentQuery.getDescription()));, +    Api.get(this).query(currentQuery);, +  private class QueryListener implements Api.QueryListener {, +    public void onSearchCompleted(Query query, List<Photo> photos) {, +      if (!isCurrentQuery(query)) {, +    private boolean isCurrentQuery(Query query) {, +      return currentQuery != null && currentQuery.equals(query);, +    }, +, +    public void onSearchFailed(Query query, Exception e) {, +      if (!isCurrentQuery(query)) {, +      searchTerm.setText(getString(R.string.search_failed, currentQuery.getDescription()));, +    @Override, +    public CharSequence getPageTitle(int position) {, +      Page page = Page.values()[position];, +      int titleId = PAGE_TO_TITLE.get(page);, +      return getString(titleId);, +    }, +, +++ b/samples/flickr/build.gradle, +        minSdkVersion 11, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, +import android.support.v4.view.MenuItemCompat;, +import android.support.v7.app.AppCompatActivity;, +import android.view.Menu;, +import android.view.MenuInflater;, +import android.widget.SearchView;, +import com.bumptech.glide.samples.flickr.api.Query;, +import com.bumptech.glide.samples.flickr.api.RecentQuery;]