[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;, +import org.mockito.InOrder;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.verify;, +    private GifBitmapWrapperResourceDecoder.ImageTypeParser parser;, +    private ImageVideoWrapper source;, +    private GifBitmapWrapperResourceDecoder.BufferedStreamFactory streamFactory;, +    private InputStream bis;, +        parser = mock(GifBitmapWrapperResourceDecoder.ImageTypeParser.class);, +        streamFactory = mock(GifBitmapWrapperResourceDecoder.BufferedStreamFactory.class);, +        decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, parser, streamFactory);, +, +        source = mock(ImageVideoWrapper.class);, +        InputStream is = new ByteArrayInputStream(new byte[0]);, +        when(source.getStream()).thenReturn(is);, +        bis = mock(InputStream.class);, +        when(streamFactory.build(eq(is), any(byte[].class))).thenReturn(bis);, +    }, +, +    @Test, +    public void testDecodesGifTypeWithGifDecoder() throws IOException {, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        int width = 100;, +        int height = 200;, +        Resource<GifDrawable> expected = mock(Resource.class);, +, +        when(gifDecoder.decode(any(InputStream.class), eq(width), eq(height))).thenReturn(expected);, +, +        Resource<GifBitmapWrapper> result = decoder.decode(source, width, height);, +, +        assertEquals(expected, result.get().getGifResource());, +    }, +, +    @Test, +    public void testDecodesBitmapTypeWithBitmapDecoder() throws IOException {, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.JPEG);, +        int width = 150;, +        int height = 101;, +        Resource<Bitmap> expected = mock(Resource.class);, +, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), eq(width), eq(height))).thenReturn(expected);, +, +        Resource<GifBitmapWrapper> result = decoder.decode(source, width, height);, +, +        assertEquals(expected, result.get().getBitmapResource());, +    }, +, +    @Test, +    public void testReturnsGifResourceIfBothGifAndBitmapDecodersCanDecode() throws IOException {, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        int width = 101;, +        int height = 102;, +        Resource<GifDrawable> expected = mock(Resource.class);, +        when(gifDecoder.decode(any(InputStream.class), eq(width), eq(height))).thenReturn(expected);, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), eq(width), eq(height))), +                .thenReturn(mock(Resource.class));, +, +        Resource<GifBitmapWrapper> result = decoder.decode(source, width, height);, +, +        assertEquals(expected, result.get().getGifResource());, +    }, +, +    @Test, +    public void testBitmapDecoderIsGivenImageVideoWrapperWithBufferedStreamIfStreamIsNotNull() throws IOException {, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.PNG);, +, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenAnswer(, +                new Answer<Resource<Bitmap>>() {, +                    @Override, +                    public Resource<Bitmap> answer(InvocationOnMock invocation) throws Throwable {, +                        ImageVideoWrapper wrapper = (ImageVideoWrapper) invocation.getArguments()[0];, +                        assertEquals(bis, wrapper.getStream());, +                        return mock(Resource.class);, +                    }, +                });, +, +        decoder.decode(source, 100, 100);, +, +        verify(bitmapDecoder).decode(any(ImageVideoWrapper.class), anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDecodesBitmapTypeWhenGifTypeButGifDecoderFails() throws IOException {, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(null);, +, +        Resource<Bitmap> expected = mock(Resource.class);, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenReturn(expected);]