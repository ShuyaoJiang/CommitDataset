[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    // Lazily instantiate to avoid exceptions if Glide is initialized on a background thread. See #295., +    private ReferenceQueue<EngineResource<?>> resourceReferenceQueue;, +, +            activeResources.put(key, new ResourceWeakReference(key, cached, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +                activeResources.put(key, new ResourceWeakReference(key, resource, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +        Util.assertMainThread();, +    private ReferenceQueue<EngineResource<?>> getReferenceQueue() {, +        if (resourceReferenceQueue == null) {, +            resourceReferenceQueue = new ReferenceQueue<EngineResource<?>>();, +            MessageQueue queue = Looper.myQueue();, +            queue.addIdleHandler(new RefQueueIdleHandler(activeResources, resourceReferenceQueue));, +        }, +        return resourceReferenceQueue;, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    // Lazily instantiate to avoid exceptions if Glide is initialized on a background thread. See #295., +    private ReferenceQueue<EngineResource<?>> resourceReferenceQueue;, +, +            activeResources.put(key, new ResourceWeakReference(key, cached, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +                activeResources.put(key, new ResourceWeakReference(key, resource, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +        Util.assertMainThread();, +    private ReferenceQueue<EngineResource<?>> getReferenceQueue() {, +        if (resourceReferenceQueue == null) {, +            resourceReferenceQueue = new ReferenceQueue<EngineResource<?>>();, +            MessageQueue queue = Looper.myQueue();, +            queue.addIdleHandler(new RefQueueIdleHandler(activeResources, resourceReferenceQueue));, +        }, +        return resourceReferenceQueue;, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.os.Looper;, +    private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    // Lazily instantiate to avoid exceptions if Glide is initialized on a background thread. See #295., +    private ReferenceQueue<EngineResource<?>> resourceReferenceQueue;, +, +            activeResources.put(key, new ResourceWeakReference(key, cached, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +                activeResources.put(key, new ResourceWeakReference(key, resource, getReferenceQueue()));, +        Util.assertMainThread();, +        Util.assertMainThread();, +        Util.assertMainThread();, +    private ReferenceQueue<EngineResource<?>> getReferenceQueue() {, +        if (resourceReferenceQueue == null) {, +            resourceReferenceQueue = new ReferenceQueue<EngineResource<?>>();, +            MessageQueue queue = Looper.myQueue();, +            queue.addIdleHandler(new RefQueueIdleHandler(activeResources, resourceReferenceQueue));, +        }, +        return resourceReferenceQueue;, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.os.Looper;, +    private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java, +import android.os.Looper;, +    private final Handler handler = new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());]