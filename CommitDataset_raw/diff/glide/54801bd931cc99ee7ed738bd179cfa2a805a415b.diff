[+++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +  boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +  boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    boolean newModulesWritten = libraryModuleProcessor.processModules(env);, +    boolean newExtensionWritten = extensionProcessor.processExtensions(env);, +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +  boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    boolean newModulesWritten = libraryModuleProcessor.processModules(env);, +    boolean newExtensionWritten = extensionProcessor.processExtensions(env);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    return argument.toString().equals(expected);, +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +  boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    boolean newModulesWritten = libraryModuleProcessor.processModules(env);, +    boolean newExtensionWritten = extensionProcessor.processExtensions(env);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    return argument.toString().equals(expected);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +    StringBuilder code = new StringBuilder(returnsValue ? "return " : "");, +    code.append("$T.$N(");, +        code.append("$L, ");, +      code = new StringBuilder(code.substring(0, code.length() - 2));, +    code.append(")");, +    builder.addStatement(code.toString(), args.toArray(new Object[0]));, +++ b/annotation/compiler/build.gradle, +    compileOnly "com.squareup:javapoet:${JAVAPOET_VERSION}", +    compileOnly "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}", +    compileOnly "com.google.code.findbugs:jsr305:${JSR_305_VERSION}", +    // This is to support com.sun.tools.javac.util.List, currently used in RootModuleGenerator., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +    private final Set<String> glideModules;, +    private final Set<String> extensions;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +  boolean processExtensions(RoundEnvironment env) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    boolean newModulesWritten = libraryModuleProcessor.processModules(env);, +    boolean newExtensionWritten = extensionProcessor.processExtensions(env);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    return argument.toString().equals(expected);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +    StringBuilder code = new StringBuilder(returnsValue ? "return " : "");, +    code.append("$T.$N(");, +        code.append("$L, ");, +      code = new StringBuilder(code.substring(0, code.length() - 2));, +    code.append(")");, +    builder.addStatement(code.toString(), args.toArray(new Object[0]));, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/IndexerGenerator.java, +    StringBuilder indexerName = new StringBuilder(, +        INDEXER_NAME_PREFIX + annotation.getSimpleName() + "_");, +      indexerName.append(element.getQualifiedName().toString().replace(".", "_"));, +      indexerName.append("_");]