[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +    this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +    this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +  @Nullable private final ByteArrayPool byteArrayPool;, +  /**, +   * Constructs an instance without a shared byte array pool. Byte arrays will be always constructed, +   * when requested., +   */, +    this(bitmapPool, null /*byteArrayPool*/);, +  }, +, +  /**, +   * Constructs an instance with a shared byte array pool. Byte arrays will be reused where, +   * possible., +   */, +  public GifBitmapProvider(BitmapPool bitmapPool, @Nullable ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +, +  @Override, +  public byte[] obtainByteArray(int size) {, +    if (byteArrayPool == null) {, +      return new byte[size];, +    }, +    return byteArrayPool.get(size);, +  }, +, +  @Override, +  public void release(byte[] bytes) {, +    if (byteArrayPool == null) {, +      return;, +    }, +    byteArrayPool.put(bytes);, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +    this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +  @Nullable private final ByteArrayPool byteArrayPool;, +  /**, +   * Constructs an instance without a shared byte array pool. Byte arrays will be always constructed, +   * when requested., +   */, +    this(bitmapPool, null /*byteArrayPool*/);, +  }, +, +  /**, +   * Constructs an instance with a shared byte array pool. Byte arrays will be reused where, +   * possible., +   */, +  public GifBitmapProvider(BitmapPool bitmapPool, @Nullable ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +, +  @Override, +  public byte[] obtainByteArray(int size) {, +    if (byteArrayPool == null) {, +      return new byte[size];, +    }, +    return byteArrayPool.get(size);, +  }, +, +  @Override, +  public void release(byte[] bytes) {, +    if (byteArrayPool == null) {, +      return;, +    }, +    byteArrayPool.put(bytes);, +  }, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +  private byte[] block;, +, +    /**, +     * Returns a byte array used for decoding and generating the frame bitmap., +     *, +     * @param size the size of the byte array to obtain, +     */, +    byte[] obtainByteArray(int size);, +, +    /**, +     * Releases the given byte array back to the pool., +     */, +    void release(byte[] bytes);, +, +    if (block != null) {, +      bitmapProvider.release(block);, +    }, +        if (block == null) {, +          block = bitmapProvider.obtainByteArray(255);, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +    this.provider = new GifBitmapProvider(bitmapPool, byteArrayPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +  @Nullable private final ByteArrayPool byteArrayPool;, +  /**]