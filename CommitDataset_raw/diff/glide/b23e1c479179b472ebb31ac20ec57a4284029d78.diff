[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.Arrays;, +import java.util.List;, +        for (DiskCacheStrategy strategy : list(DiskCacheStrategy.ALL, DiskCacheStrategy.RESULT)) {, +        for (DiskCacheStrategy strategy : list(DiskCacheStrategy.NONE, DiskCacheStrategy.SOURCE)) {, +    private static <T> List<T> list(T... items) {, +        return Arrays.asList(items);, +    }, +, +        DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.Arrays;, +import java.util.List;, +        for (DiskCacheStrategy strategy : list(DiskCacheStrategy.ALL, DiskCacheStrategy.RESULT)) {, +        for (DiskCacheStrategy strategy : list(DiskCacheStrategy.NONE, DiskCacheStrategy.SOURCE)) {, +    private static <T> List<T> list(T... items) {, +        return Arrays.asList(items);, +    }, +, +        DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +import java.util.ArrayList;, +import java.util.List;, +    /**, +     * {@link Number} and {@link List} are arbitrarily chosen types to test some type safety as well., +     * Both are in the middle of the hierarchy having multiple descendants and ancestors., +     */, +        ModelLoader<Number, Object> modelLoader;, +        Number model = 123456;, +        Target<List> target = mock(Target.class);, +        Resource<List> resource = mock(Resource.class);, +        LoadProvider<Number, Object, Object, List> loadProvider = mock(LoadProvider.class);, +        RequestListener<Number, List> requestListener = mock(RequestListener.class);, +        GlideAnimationFactory<List> factory = mock(GlideAnimationFactory.class);, +        List result = new ArrayList();, +            when(modelLoader.getResourceFetcher(any(Number.class), anyInt(), anyInt())), +                    .thenReturn(mock(DataFetcher.class));, +        public GenericRequest<Number, Object, Object, List> getRequest() {, +                    List.class,, +    @Test(expected = NullPointerException.class), +    public void testReturnsWhenMissingCacheDecoderAndNeeded3() {, +        harness.getRequest();, +        verify(harness.requestListener), +                .onException(any(Exception.class), any(Number.class), eq(harness.target), anyBoolean());, +    }, +, +    @Test, +    public void testCanHandleEmptyResources() {, +        GenericRequest request = harness.getRequest();, +        when(harness.resource.get()).thenReturn(null);, +, +        request.onResourceReady(harness.resource);, +, +        assertTrue(request.isFailed());, +        verify(harness.engine).release(eq(harness.resource));, +        verify(harness.requestListener), +                .onException(any(Exception.class), any(Number.class), eq(harness.target), anyBoolean());, +    }, +, +    @Test, +    public void testCanHandleNonConformingResources() {, +        GenericRequest request = harness.getRequest();, +        when(((Resource) (harness.resource)).get()).thenReturn("Invalid mocked String, this should be a List");, +, +        request.onResourceReady(harness.resource);, +, +        assertTrue(request.isFailed());, +        verify(harness.engine).release(eq(harness.resource));, +        verify(harness.requestListener), +                .onException(any(Exception.class), any(Number.class), eq(harness.target), anyBoolean());, +        GenericRequest request = harness.getRequest();, +        GenericRequest request = harness.getRequest();, +        GenericRequest request = harness.getRequest();, +        GenericRequest request = harness.getRequest();, +        verify(harness.target).onResourceReady(eq(harness.result), any(GlideAnimation.class));, +        GenericRequest request = harness.getRequest();, +        when(harness.requestListener.onResourceReady(any(List.class), any(Number.class), eq(harness.target),, +        verify(harness.target).onResourceReady(eq(harness.result), any(GlideAnimation.class));, +        GenericRequest request = harness.getRequest();, +        when(harness.requestListener.onResourceReady(any(List.class), any(Number.class), eq(harness.target),, +        verify(harness.target, never()).onResourceReady(any(List.class), any(GlideAnimation.class));, +        GenericRequest request = harness.getRequest();, +        GenericRequest request = harness.getRequest();, +        when(harness.requestListener, +                .onException(any(Exception.class), any(Number.class), eq(harness.target), anyBoolean())), +        GenericRequest request = harness.getRequest();, +        when(harness.requestListener, +                .onException(any(Exception.class), any(Number.class), eq(harness.target), anyBoolean())), +        GenericRequest request = harness.getRequest();, +        verify(harness.requestListener).onResourceReady(eq(harness.result), any(Number.class), any(Target.class),, +        GenericRequest request = harness.getRequest();, +        verify(harness.requestListener).onResourceReady(any(List.class), eq(harness.model), any(Target.class),, +        GenericRequest request = harness.getRequest();, +        verify(harness.requestListener).onResourceReady(any(List.class), any(Number.class), eq(harness.target),, +                anyBoolean(), anyBoolean());, +        final GenericRequest request = harness.getRequest();, +        verify(harness.requestListener).onResourceReady(eq(harness.result), any(Number.class), any(Target.class),, +                eq(true), anyBoolean());, +        GenericRequest request = harness.getRequest();, +        verify(harness.requestListener).onResourceReady(eq(harness.result), any(Number.class), any(Target.class),]