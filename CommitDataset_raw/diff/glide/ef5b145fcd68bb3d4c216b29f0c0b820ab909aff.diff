[+++ b/src/com/bumptech/photos/view/ImagePresenter.java, +    public static class Builder<T> {, +        private ImageView imageView;, +        private AssetPathConverter<T> assetPathConverter;, +        private ImageLoader imageLoader;, +        private int placeholderResourceId;, +        private Drawable placeholderDrawable;, +        private ImageSetCallback imageSetCallback;, +        private AssetPresenterCoordinator coordinator;, +, +        public ImagePresenter<T> build(){, +            assert imageView != null : "cannot create presenter without an image view";, +            assert assetPathConverter != null : "cannot create presenter without an asset to path converter";, +            assert imageLoader != null : "cannot create presenter without an image loader";, +, +            return new ImagePresenter<T>(this);, +        }, +, +        public Builder<T> setImageView(ImageView imageView) {, +            this.imageView = imageView;, +            return this;, +        }, +, +        public Builder<T> setAssetPathConverter(AssetPathConverter<T> converter) {, +            this.assetPathConverter = converter;, +            return this;, +        }, +, +        public Builder<T> setImageLoader(ImageLoader imageLoader) {, +            this.imageLoader = imageLoader;, +            return this;, +        }, +, +        public Builder<T> setPlaceholderResource(int resourceId) {, +            assert resourceId == 0 || placeholderDrawable == null : "Can't set both a placeholder drawable and a placeholder resource";, +, +            this.placeholderResourceId = resourceId;, +            return this;, +        }, +, +        public Builder<T> setPlaceholderDrawable(Drawable placeholderDrawable) {, +            assert placeholderDrawable == null || placeholderResourceId == 0 : "Can't set both a placeholder drawable and a placeholder resource";, +, +            this.placeholderDrawable = placeholderDrawable;, +            return this;, +        }, +, +        public Builder<T> setImageSetCallback(ImageSetCallback cb) {, +            this.imageSetCallback = cb;, +            return this;, +        }, +, +        public Builder<T> setAssetPresenterCoordinator(AssetPresenterCoordinator<T> coordinator) {, +            this.coordinator = coordinator;, +            return this;, +        }, +    }, +, +    private final Drawable placeholderDrawable;, +    private final ImageSetCallback imageSetCallback;, +    private final AssetPresenterCoordinator coordinator;, +, +    private ImagePresenter(Builder<T> builder) {, +        this.imageView = builder.imageView;, +        this.assetIdToPath = builder.assetPathConverter;, +        this.imageLoader = builder.imageLoader;, +        if (builder.placeholderResourceId != 0) {, +            this.placeholderDrawable = imageView.getResources().getDrawable(builder.placeholderResourceId);, +        } else {, +            this.placeholderDrawable = builder.placeholderDrawable;, +        }, +        this.coordinator = builder.coordinator;, +        this.imageSetCallback = builder.imageSetCallback;, +    public ImageView getImageView() {, +        return imageView;, +    private void doLoad(String path, int loadCount) {, +        imageLoader.loadImage(path, width, height, new ImageReadyCallback(this, loadCount));, +    }, +, +++ b/src/com/bumptech/photos/view/ImagePresenter.java, +    public static class Builder<T> {, +        private ImageView imageView;, +        private AssetPathConverter<T> assetPathConverter;, +        private ImageLoader imageLoader;, +        private int placeholderResourceId;, +        private Drawable placeholderDrawable;, +        private ImageSetCallback imageSetCallback;, +        private AssetPresenterCoordinator coordinator;, +, +        public ImagePresenter<T> build(){, +            assert imageView != null : "cannot create presenter without an image view";, +            assert assetPathConverter != null : "cannot create presenter without an asset to path converter";, +            assert imageLoader != null : "cannot create presenter without an image loader";, +, +            return new ImagePresenter<T>(this);, +        }, +, +        public Builder<T> setImageView(ImageView imageView) {, +            this.imageView = imageView;, +            return this;]