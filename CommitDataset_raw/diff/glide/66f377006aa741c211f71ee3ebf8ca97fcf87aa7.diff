[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +              "autoClone()"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +              "autoClone()"), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +    this.requestOptions = toSet.clone().autoClone();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +              "autoClone()"), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +    this.requestOptions = toSet.clone().autoClone();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +   *, +   * @deprecated Use {@link #autoClone()} instead., +  @Deprecated, +    return autoClone();, +  }, +, +  /**, +   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen, +   * before the mutation resulting in all methods returning a new Object and leaving the original, +   * locked object unmodified., +   *, +   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects, +   * are mutable and are not locked., +   */, +  public final CHILD autoClone() {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +              "autoClone()"), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +    this.requestOptions = toSet.clone().autoClone();, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +   *, +   * @deprecated Use {@link #autoClone()} instead., +  @Deprecated, +    return autoClone();, +  }, +, +  /**, +   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen, +   * before the mutation resulting in all methods returning a new Object and leaving the original, +   * locked object unmodified., +   *, +   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects, +   * are mutable and are not locked., +   */, +  public final CHILD autoClone() {, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +        skipMemoryCacheTrueOptions = new RequestOptions().skipMemoryCache(true).autoClone();, +        skipMemoryCacheFalseOptions = new RequestOptions().skipMemoryCache(false).autoClone();, +          .autoClone();, +              .autoClone();, +          .autoClone();, +          .autoClone();, +          .autoClone();, +          .autoClone();]