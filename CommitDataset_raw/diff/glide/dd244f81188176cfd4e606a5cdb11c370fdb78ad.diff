[+++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +        flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +        flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +        final Resources res = getResources();, +        flickerApi = new Api(res.getDimensionPixelSize(R.dimen.large_photo_side));, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +        flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +        final Resources res = getResources();, +        flickerApi = new Api(res.getDimensionPixelSize(R.dimen.large_photo_side));, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +    private final String sizeKey;, +    public Api(int maxPhotoSize) {, +        this.sizeKey = getSizeKey(maxPhotoSize, maxPhotoSize);, +    private static String getPhotoUrl(Photo photo, String sizeKey) {, +    public void downloadPhoto(Photo photo, File cacheDir, final PhotoCallback cb) {, +        File out = new File(cacheDir.getPath() + File.separator + photo.id + photo.secret + sizeKey);, +            downloader.download(getPhotoUrl(photo, sizeKey), out, new Downloader.DiskCallback() {]