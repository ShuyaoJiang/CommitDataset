[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, +        GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), +    @Implements(Bitmap.class), +    public static class MutableShadowBitmap extends ShadowBitmap {, +, +        @Implementation, +        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, +            Bitmap bitmap = ShadowBitmap.createBitmap(width, height, config);, +            Robolectric.shadowOf(bitmap).setMutable(true);, +            return bitmap;, +        }, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, +        GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), +    @Implements(Bitmap.class), +    public static class MutableShadowBitmap extends ShadowBitmap {, +, +        @Implementation, +        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, +            Bitmap bitmap = ShadowBitmap.createBitmap(width, height, config);, +            Robolectric.shadowOf(bitmap).setMutable(true);, +            return bitmap;, +        }, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.util.Util;, +    public void testReturnsDrawableSizePlusFirstFrameSize() {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(drawable.getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(size + Util.getBitmapByteSize(firstFrame), resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, +        GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), +    @Implements(Bitmap.class), +    public static class MutableShadowBitmap extends ShadowBitmap {, +, +        @Implementation, +        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, +            Bitmap bitmap = ShadowBitmap.createBitmap(width, height, config);, +            Robolectric.shadowOf(bitmap).setMutable(true);, +            return bitmap;, +        }, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.util.Util;, +    public void testReturnsDrawableSizePlusFirstFrameSize() {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(drawable.getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(size + Util.getBitmapByteSize(firstFrame), resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +    private Bitmap firstFrame;, +    private BitmapPool bitmapPool;, +        firstFrame = Bitmap.createBitmap(frameWidth, frameHeight, Bitmap.Config.RGB_565);, +        bitmapPool = mock(BitmapPool.class);, +        drawable = new GifDrawable(gifDecoder, frameManager, firstFrame, bitmapPool);, +    public void testShouldDrawFirstFrameBeforeAnyFrameRead() {, +        verify(canvas).drawBitmap(eq(firstFrame), anyInt(), anyInt(), any(Paint.class));, +    }, +, +    @Test, +    public void testShouldNotDrawNullBitmapFrame() {, +        Canvas canvas = mock(Canvas.class);, +        drawable = new GifDrawable(gifDecoder, frameManager, firstFrame, bitmapPool);, +        drawable.onFrameRead(null, 0);, +        drawable.draw(canvas);, +, +        verify(canvas).drawBitmap(eq(firstFrame), anyInt(), anyInt(), any(Paint.class));, +    public void testDoesNotDrawNullFirstFrame() {, +        drawable = new GifDrawable(gifDecoder, frameManager, null, bitmapPool);, +        Canvas canvas = mock(Canvas.class);, +, +        verify(canvas, never()).drawBitmap(any(Bitmap.class), anyInt(), anyInt(), any(Paint.class));, +    }, +, +    @Test, +        verify(frameManager, never()).getNextFrame(any(GifFrameManager.FrameCallback.class));, +    public void testRecycleReturnsFirstFrameToPool() {, +        drawable.recycle();, +, +        verify(bitmapPool).put(eq(firstFrame));, +    }, +, +    @Test, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100, "fakeId",, +                gifHeader, new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import org.robolectric.shadows.ShadowBitmap;, +        GlideShadowLooper.class, GlideTest.MutableShadowBitmap.class }), +    @Implements(Bitmap.class), +    public static class MutableShadowBitmap extends ShadowBitmap {, +]