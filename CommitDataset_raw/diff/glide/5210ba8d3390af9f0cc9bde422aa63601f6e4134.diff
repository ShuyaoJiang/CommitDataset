[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +        RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +        RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +    private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        manager =, +            new RequestManager(Robolectric.application, lifecycle, treeNode, requestTracker, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +        RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +    private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        manager =, +            new RequestManager(Robolectric.application, lifecycle, treeNode, requestTracker, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java, +            assertTrue(harness.hasFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG));, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, requestManager);, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, null);, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, null);, +        assertEquals(RequestManagerRetriever.class.getPackage().getName(), RequestManagerRetriever.FRAGMENT_TAG);, +            return null != controller.get(), +                .getFragmentManager(), +                .findFragmentByTag(RequestManagerRetriever.FRAGMENT_TAG);, +                    .add(fragment, RequestManagerRetriever.FRAGMENT_TAG), +            return controller.get().getSupportFragmentManager().findFragmentByTag(RequestManagerRetriever.FRAGMENT_TAG), +                    .add(fragment, RequestManagerRetriever.FRAGMENT_TAG), +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +        RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        requestManager = new RequestManager(getContext(), lifecycle, treeNode);, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +    private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +        manager =, +            new RequestManager(Robolectric.application, lifecycle, treeNode, requestTracker, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java, +            assertTrue(harness.hasFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG));, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, requestManager);, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, null);, +            harness.addFragmentWithTag(RequestManagerRetriever.FRAGMENT_TAG, null);, +        assertEquals(RequestManagerRetriever.class.getPackage().getName(), RequestManagerRetriever.FRAGMENT_TAG);, +            return null != controller.get(), +                .getFragmentManager(), +                .findFragmentByTag(RequestManagerRetriever.FRAGMENT_TAG);, +                    .add(fragment, RequestManagerRetriever.FRAGMENT_TAG), +            return controller.get().getSupportFragmentManager().findFragmentByTag(RequestManagerRetriever.FRAGMENT_TAG), +                    .add(fragment, RequestManagerRetriever.FRAGMENT_TAG), +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +    private final RequestManagerTreeNode treeNode;, +    public RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode) {, +        this(context, lifecycle, treeNode, new RequestTracker(), new ConnectivityMonitorFactory());, +    RequestManager(Context context, final Lifecycle lifecycle, RequestManagerTreeNode treeNode,, +            RequestTracker requestTracker, ConnectivityMonitorFactory factory) {, +        this.treeNode = treeNode;, +     * Performs {@link #pauseRequests()} recursively for all managers that are contextually descendant, +     * to this manager based on the Activity/Fragment hierarchy:, +     *, +     * <ul>, +     * <li>When pausing on an Activity all attached fragments will also get paused., +     * <li>When pausing on an attached Fragment all descendant fragments will also get paused., +     * <li>When pausing on a detached Fragment or the application context only the current RequestManager is paused., +     * </ul>, +     *, +     * <p>Note, on pre-Jelly Bean MR1 calling pause on a Fragment will not cause child fragments to pause, in this, +     * case either call pause on the Activity or use a support Fragment., +     */, +    public void pauseRequestsRecursive() {, +        Util.assertMainThread();, +        pauseRequests();, +        for (RequestManager requestManager : treeNode.getDescendants()) {, +            requestManager.pauseRequests();, +        }, +    }, +, +    /**, +     * Performs {@link #resumeRequests()} recursively for all managers that are contextually descendant, +     * to this manager based on the Activity/Fragment hierarchy. The hierarchical semantics are identical as for, +     * {@link #pauseRequestsRecursive()}., +     */, +    public void resumeRequestsRecursive() {, +        Util.assertMainThread();, +        resumeRequests();, +        for (RequestManager requestManager : treeNode.getDescendants()) {, +            requestManager.resumeRequests();, +        }, +    }, +, +    /**, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.RequestManagerTreeNode;, +        RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);]