[+++ b/src/com/bumptech/photos/imagemanager/ImageManager.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.imagemanager;, +, +import android.graphics.Bitmap;, +import android.os.Build;, +import android.os.Handler;, +import android.os.SystemClock;, +import com.bumptech.photos.cache.LruPhotoCache;, +import com.bumptech.photos.cache.PhotoDiskCache;, +import com.bumptech.photos.cache.SizedBitmapCache;, +import com.bumptech.photos.resize.ResizeJobGenerator;, +, +import java.io.File;, +import java.io.InputStream;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 5:02 PM, + * To change this template use File | Settings | File Templates., + */, +public class ImageManager {, +    public static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;, +, +    private PhotoDiskCache diskCache;, +    private LruPhotoCache memoryCache;, +    private ResizeJobGenerator resizer;, +    private Handler backgroundHandler;, +    private Map<Integer, Integer> bitmapReferenceCounter = new HashMap<Integer, Integer>();, +    private SizedBitmapCache bitmapCache = new SizedBitmapCache();, +, +    private enum ResizeType {, +        CENTER_CROP,, +        FIT_CENTER,, +        APPROXIMATE,, +        AS_IS, +    }, +, +    public ImageManager(int maxMemCacheSize, long maxDiskCacheSize, File diskCacheDir, Handler mainHandler, Handler backgroundHandler) {, +        this.backgroundHandler = backgroundHandler;, +        this.memoryCache = new LruPhotoCache(maxMemCacheSize);, +        memoryCache.setPhotoRemovedListener(new LruPhotoCache.PhotoRemovedListener() {, +            @Override, +            public void onPhotoRemoved(String key, Bitmap bitmap) {, +                releaseBitmap(bitmap);, +            }, +        });, +        this.diskCache = new PhotoDiskCache(diskCacheDir, maxDiskCacheSize, mainHandler, backgroundHandler);, +        this.resizer = new ResizeJobGenerator(mainHandler, CAN_RECYCLE ? bitmapCache : null);, +    }, +, +    /**, +     * Loads the image for the given id, +     * @param path - the path id to the image, +     * @param cb - the callback called when the load completes, +     * @return A token tracking this request, +     */, +    public Object getImage(final String path, final LoadedCallback cb){, +        final Object token = cb;, +        final String key = getKey(path, 0, 0, ResizeType.AS_IS);, +        if (!returnFromCache(key, cb)) {, +            final Runnable task = resizer.loadAsIs(path, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +        }, +        return token;, +    }, +, +    /**, +     * Loads the image for the given id assuming its width and height are exactly those given, +     * @param path - the path to the image, +     * @param width - the width of the image on disk, +     * @param height - the height of the image on disk, +     * @param cb - the callback called when the load completes, +     * @return A token tracking this request, +     */, +    public Object getImageExact(final String path, int width, int height, final LoadedCallback cb) {, +        final Object token = cb;, +        final String key = getKey(path, width, height, ResizeType.AS_IS);, +        if (!returnFromCache(key, cb)) {, +            final Runnable task = resizer.loadAsIs(path, width, height, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +        }, +        return token;, +    }, +, +    /**, +     * Loads the image for the given id to nearly the given width and height maintaining the original proportions, +     * @param path - the id of the image, +     * @param width - the desired width in pixels, +     * @param height - the desired height of the slice, +     * @param cb - the callback called when the task finishes, +     * @return A token tracking this request, +     */]