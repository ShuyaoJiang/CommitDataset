[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.UrlLoader;, +    @SuppressWarnings("unchecked"), +    private static <T> ModelLoader<T> getModelFor(T model) {, +        if (model == URL.class) {, +            return (ModelLoader<T>) new UrlLoader();, +        } else if (model == File.class) {, +            return (ModelLoader<T>) new FileLoader();, +        } else {, +            throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +, +                    ", you need to provide one by calling with()");, +        }, +    }, +, +        private ModelLoader<T> modelLoader = null;, +        @SuppressWarnings("unchecked"), +         * Set the {@link ModelLoader} for the model. For URL models, defaults to {@link UrlLoader},, +         * for File models, defaults to {@link FileLoader}., +         * @param modelLoader The {@link ModelLoader} to use. Replaces any existing loader, +        public Request<T> with(ModelLoader<T> modelLoader) {, +            this.modelLoader = modelLoader;, +            builder.setModelLoader(modelLoader);, +         * Resizes models using {@link ImageManager#centerCrop(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#fitCenter(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#getImageApproximate(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +                if (modelLoader == null) {, +                    modelLoader = getModelFor(model);, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.UrlLoader;, +    @SuppressWarnings("unchecked"), +    private static <T> ModelLoader<T> getModelFor(T model) {, +        if (model == URL.class) {, +            return (ModelLoader<T>) new UrlLoader();, +        } else if (model == File.class) {, +            return (ModelLoader<T>) new FileLoader();, +        } else {, +            throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +, +                    ", you need to provide one by calling with()");, +        }, +    }, +, +        private ModelLoader<T> modelLoader = null;, +        @SuppressWarnings("unchecked"), +         * Set the {@link ModelLoader} for the model. For URL models, defaults to {@link UrlLoader},, +         * for File models, defaults to {@link FileLoader}., +         * @param modelLoader The {@link ModelLoader} to use. Replaces any existing loader, +        public Request<T> with(ModelLoader<T> modelLoader) {, +            this.modelLoader = modelLoader;, +            builder.setModelLoader(modelLoader);, +         * Resizes models using {@link ImageManager#centerCrop(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#fitCenter(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#getImageApproximate(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +                if (modelLoader == null) {, +                    modelLoader = getModelFor(model);, +++ b/library/src/com/bumptech/glide/loader/image/BaseImageLoader.java, +import com.bumptech.glide.loader.stream.StreamLoader;, +    public final Object fetchImage(String id, StreamLoader streamLoader, int width, int height, ImageReadyCallback cb) {, +        doFetchImage(id, streamLoader, width, height, new InternalImageReadyCallback(cb, id));, +     * @see ImageLoader#fetchImage(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.loader.image.ImageLoader.ImageReadyCallback), +     * @param id A string id that uniquely identifies the image to be loaded. It may include the width and height, but, +     *           is not required to do so, +     * @param streamLoader The {@link StreamLoader} that will be used to load the image if it is not cached, +    protected abstract void doFetchImage(String id, StreamLoader streamLoader, int width, int height, ImageReadyCallback cb);, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.UrlLoader;, +    @SuppressWarnings("unchecked"), +    private static <T> ModelLoader<T> getModelFor(T model) {, +        if (model == URL.class) {, +            return (ModelLoader<T>) new UrlLoader();, +        } else if (model == File.class) {, +            return (ModelLoader<T>) new FileLoader();, +        } else {, +            throw new IllegalArgumentException("No default ModelLoader for class=" + model.getClass() +, +                    ", you need to provide one by calling with()");, +        }, +    }, +, +        private ModelLoader<T> modelLoader = null;, +        @SuppressWarnings("unchecked"), +         * Set the {@link ModelLoader} for the model. For URL models, defaults to {@link UrlLoader},, +         * for File models, defaults to {@link FileLoader}., +         * @param modelLoader The {@link ModelLoader} to use. Replaces any existing loader, +        public Request<T> with(ModelLoader<T> modelLoader) {, +            this.modelLoader = modelLoader;, +            builder.setModelLoader(modelLoader);, +         * Resizes models using {@link ImageManager#centerCrop(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#fitCenter(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +         * Resizes models using {@link ImageManager#getImageApproximate(String, com.bumptech.glide.loader.stream.StreamLoader, int, int, com.bumptech.glide.resize.LoadedCallback)}, +                if (modelLoader == null) {, +                    modelLoader = getModelFor(model);, +++ b/library/src/com/bumptech/glide/loader/image/BaseImageLoader.java, +import com.bumptech.glide.loader.stream.StreamLoader;, +    public final Object fetchImage(String id, StreamLoader streamLoader, int width, int height, ImageReadyCallback cb) {, +        doFetchImage(id, streamLoader, width, height, new InternalImageReadyCallback(cb, id));]