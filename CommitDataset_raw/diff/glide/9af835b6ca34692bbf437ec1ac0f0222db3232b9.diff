[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.resize.bitmap_recycle.SizedBitmapPool;, +        private BitmapPool bitmapPool;, +        private BitmapReferenceCounter bitmapReferenceCounter;, +            if (!CAN_RECYCLE) {, +                bitmapPool = new BitmapPoolAdapter();, +            }, +         * Set the implementation of a {@link BitmapPool} to use to store and retrieve recycled bitmaps based on their, +         * width and height. Should be thread safe and size limited in some way to avoid OOM exceptions., +         * @param bitmapPool The BitmapPool implementation to use, +        public Builder setBitmapPool(BitmapPool bitmapPool) {, +            if (CAN_RECYCLE) {, +                this.bitmapPool = bitmapPool;, +            }, +            return this;, +        }, +, +        /**, +         * Call to prevent the ImageManager from recycling bitmaps., +         *, +         * @return This Builder, +         */, +        public Builder disableBitmapRecycling() {, +            recycleBitmaps = false;, +, +            if (!recycleBitmaps) {, +                bitmapPool = new BitmapPoolAdapter();, +                bitmapReferenceCounter = new BitmapReferenceCounterAdapter();, +            } else {, +                if (bitmapPool == null) {, +                    bitmapPool = new SizedBitmapPool(getSafeMemoryCacheSize(context));, +                }, +                bitmapReferenceCounter = new ConcurrentBitmapReferenceCounter(bitmapPool);, +            }, +        bitmapReferenceCounter = builder.bitmapReferenceCounter;, +        resizer = new ImageResizer(builder.bitmapPool, builder.decodeBitmapOptions);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.resize.bitmap_recycle.SizedBitmapPool;, +        private BitmapPool bitmapPool;, +        private BitmapReferenceCounter bitmapReferenceCounter;, +            if (!CAN_RECYCLE) {, +                bitmapPool = new BitmapPoolAdapter();, +            }, +         * Set the implementation of a {@link BitmapPool} to use to store and retrieve recycled bitmaps based on their, +         * width and height. Should be thread safe and size limited in some way to avoid OOM exceptions., +         * @param bitmapPool The BitmapPool implementation to use, +        public Builder setBitmapPool(BitmapPool bitmapPool) {, +            if (CAN_RECYCLE) {, +                this.bitmapPool = bitmapPool;, +            }, +            return this;, +        }, +, +        /**, +         * Call to prevent the ImageManager from recycling bitmaps., +         *, +         * @return This Builder, +         */, +        public Builder disableBitmapRecycling() {, +            recycleBitmaps = false;, +, +            if (!recycleBitmaps) {, +                bitmapPool = new BitmapPoolAdapter();, +                bitmapReferenceCounter = new BitmapReferenceCounterAdapter();, +            } else {, +                if (bitmapPool == null) {, +                    bitmapPool = new SizedBitmapPool(getSafeMemoryCacheSize(context));, +                }, +                bitmapReferenceCounter = new ConcurrentBitmapReferenceCounter(bitmapPool);, +            }, +        bitmapReferenceCounter = builder.bitmapReferenceCounter;, +        resizer = new ImageResizer(builder.bitmapPool, builder.decodeBitmapOptions);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/ConcurrentBitmapReferenceCounter.java, +    public ConcurrentBitmapReferenceCounter(BitmapPool target) {, +        counter = new ConcurrentHashMap<Integer, InnerTracker>();, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.resize.bitmap_recycle.SizedBitmapPool;, +        private BitmapPool bitmapPool;, +        private BitmapReferenceCounter bitmapReferenceCounter;, +            if (!CAN_RECYCLE) {, +                bitmapPool = new BitmapPoolAdapter();, +            }, +         * Set the implementation of a {@link BitmapPool} to use to store and retrieve recycled bitmaps based on their, +         * width and height. Should be thread safe and size limited in some way to avoid OOM exceptions., +         * @param bitmapPool The BitmapPool implementation to use, +        public Builder setBitmapPool(BitmapPool bitmapPool) {, +            if (CAN_RECYCLE) {, +                this.bitmapPool = bitmapPool;, +            }, +            return this;, +        }, +, +        /**, +         * Call to prevent the ImageManager from recycling bitmaps., +         *, +         * @return This Builder, +         */]