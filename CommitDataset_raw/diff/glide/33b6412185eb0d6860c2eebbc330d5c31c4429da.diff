[+++ b/library/src/main/java/com/bumptech/glide/Priority.java, +  LOW,, +++ b/library/src/main/java/com/bumptech/glide/Priority.java, +  LOW,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +    return SingleRequest.obtain(, +        context,, +        model,, +        transcodeClass,, +        requestOptions,, +        overrideWidth,, +        overrideHeight,, +        target,, +        requestListener,, +        requestCoordinator,, +        context.getEngine(),, +        transitionOptions.getTransitionFactory());, +++ b/library/src/main/java/com/bumptech/glide/Priority.java, +  LOW,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +    return SingleRequest.obtain(, +        context,, +        model,, +        transcodeClass,, +        requestOptions,, +        overrideWidth,, +        overrideHeight,, +        target,, +        requestListener,, +        requestCoordinator,, +        context.getEngine(),, +        transitionOptions.getTransitionFactory());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private List<Key> cacheKeys;, +  private final DecodeHelper<?> helper;, +, +  DataCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {, +    this(helper.getCacheKeys(), helper, cb);, +  }, +, +  // In some cases we may want to load a specific cache key (when loading from source written to, +  // cache), so we accept a list of keys rather than just obtain the list from the helper., +  DataCacheGenerator(List<Key> cacheKeys, DecodeHelper<?> helper, FetcherReadyCallback cb) {, +    this.cacheKeys = cacheKeys;, +    this.helper = helper;, +      if (sourceIdIndex >= cacheKeys.size()) {, +      Key sourceId = cacheKeys.get(sourceIdIndex);, +      Key originalKey = new DataCacheKey(sourceId, helper.getSignature());, +      cacheFile = helper.getDiskCache().get(originalKey);, +        modelLoaders = helper.getModelLoaders(cacheFile);, +          modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),, +              helper.getOptions()).fetcher;, +        fetcher.loadData(helper.getPriority(), this);, +++ b/library/src/main/java/com/bumptech/glide/Priority.java, +  LOW,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +    return SingleRequest.obtain(, +        context,, +        model,, +        transcodeClass,, +        requestOptions,, +        overrideWidth,, +        overrideHeight,, +        target,, +        requestListener,, +        requestCoordinator,, +        context.getEngine(),, +        transitionOptions.getTransitionFactory());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private List<Key> cacheKeys;, +  private final DecodeHelper<?> helper;, +, +  DataCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {, +    this(helper.getCacheKeys(), helper, cb);, +  }, +, +  // In some cases we may want to load a specific cache key (when loading from source written to, +  // cache), so we accept a list of keys rather than just obtain the list from the helper., +  DataCacheGenerator(List<Key> cacheKeys, DecodeHelper<?> helper, FetcherReadyCallback cb) {, +    this.cacheKeys = cacheKeys;, +    this.helper = helper;, +      if (sourceIdIndex >= cacheKeys.size()) {, +      Key sourceId = cacheKeys.get(sourceIdIndex);, +      Key originalKey = new DataCacheKey(sourceId, helper.getSignature());, +      cacheFile = helper.getDiskCache().get(originalKey);, +        modelLoaders = helper.getModelLoaders(cacheFile);, +          modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),, +              helper.getOptions()).fetcher;, +        fetcher.loadData(helper.getPriority(), this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +package com.bumptech.glide.load.engine;, +, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.Registry;, +import com.bumptech.glide.load.Encoder;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;]