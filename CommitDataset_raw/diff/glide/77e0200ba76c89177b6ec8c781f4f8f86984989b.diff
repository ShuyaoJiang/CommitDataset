[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.view.ViewGroup;, +import android.widget.ImageView;, +import static junit.framework.Assert.assertNotNull;, +    private ImageView imageView;, +        imageView = new ImageView(Robolectric.application);, +        imageView.setLayoutParams(new ViewGroup.LayoutParams(100, 100));, +        Glide.with(getContext()).load(file).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +//        Glide.with(getContext()).loadFromImage(url).into(target);, +//, +//        verify(target).onResourceReady(any(Resource.class));, +//        verify(target).setRequest((Request) notNull());, +        Glide.with(getContext()).loadFromImage(url).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(uri).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(string).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(integer).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).loadFromImage(bytes).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +, +        Glide.with(getContext()).loadFromImage(bytes, id).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.view.ViewGroup;, +import android.widget.ImageView;, +import static junit.framework.Assert.assertNotNull;, +    private ImageView imageView;, +        imageView = new ImageView(Robolectric.application);, +        imageView.setLayoutParams(new ViewGroup.LayoutParams(100, 100));, +        Glide.with(getContext()).load(file).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +//        Glide.with(getContext()).loadFromImage(url).into(target);, +//, +//        verify(target).onResourceReady(any(Resource.class));, +//        verify(target).setRequest((Request) notNull());, +        Glide.with(getContext()).loadFromImage(url).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(uri).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(string).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).load(integer).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +        Glide.with(getContext()).loadFromImage(bytes).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +, +        Glide.with(getContext()).loadFromImage(bytes, id).into(imageView);, +, +        assertNotNull(imageView.getDrawable());, +++ b/library/robolectric/src/com/bumptech/glide/load/data/transcode/TranscoderFactoriesTest.java, +package com.bumptech.glide.load.data.transcode;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import java.io.File;, +, +import static junit.framework.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +, +public class TranscoderFactoriesTest {, +    private TranscoderFactories factories;, +, +    @Before, +    public void setUp() {, +        factories = new TranscoderFactories();, +    }, +, +    @Test, +    public void testReturnsUnitDecoderIfClassesAreIdentical() {, +        assertEquals(UnitTranscoder.get(), factories.get(Object.class, Object.class));, +    }, +, +    @Test, +    public void testCanRegisterAndRetreiveResouceTranscoder() {, +        ResourceTranscoder transcoder = mock(ResourceTranscoder.class);, +        factories.register(File.class, Object.class, transcoder);, +, +        assertEquals(transcoder, factories.get(File.class, Object.class));, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsIfNoTranscoderRegistered() {]