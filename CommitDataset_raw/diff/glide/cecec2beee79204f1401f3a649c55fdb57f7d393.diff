[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +    private ExecutorService diskCacheService;, +            ExecutorService diskCacheService, ExecutorService resizeService) {, +        this.diskCacheService = diskCacheService;, +        this.service = resizeService;, +                sourceRunner, diskCacheService, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +    private ExecutorService diskCacheService;, +            ExecutorService diskCacheService, ExecutorService resizeService) {, +        this.diskCacheService = diskCacheService;, +        this.service = resizeService;, +                sourceRunner, diskCacheService, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, +import android.os.Message;, +    private ExecutorService diskCacheService;, +    private ExecutorService resizeService;, +    public EngineBuilder setResizeService(ExecutorService service) {, +        resizeService = service;, +        return this;, +    }, +, +    public EngineBuilder setDiskCacheService(ExecutorService service) {, +        diskCacheService = service;, +        if (resizeService == null) {, +            resizeService = new FifoPriorityThreadPoolExecutor(cores);, +        }, +        if (diskCacheService == null) {, +            diskCacheService = new FifoPriorityThreadPoolExecutor(1);, +            bgHandler = new Handler(handlerThread.getLooper(), new Handler.Callback() {, +                @Override, +                public boolean handleMessage(Message message) {, +                    if (message.what == 0) {, +                        ((Runnable) message.obj).run();, +                        return true;, +                    }, +                    return false;, +                }, +            });, +        factory = new DefaultResourceRunnerFactory(memoryCache, diskCache, new Handler(Looper.getMainLooper()),, +                diskCacheService, resizeService);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +    private ExecutorService diskCacheService;, +            ExecutorService diskCacheService, ExecutorService resizeService) {, +        this.diskCacheService = diskCacheService;, +        this.service = resizeService;, +                sourceRunner, diskCacheService, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineBuilder.java, +import android.os.Message;, +    private ExecutorService diskCacheService;, +    private ExecutorService resizeService;, +    public EngineBuilder setResizeService(ExecutorService service) {, +        resizeService = service;, +        return this;, +    }, +, +    public EngineBuilder setDiskCacheService(ExecutorService service) {, +        diskCacheService = service;, +        if (resizeService == null) {, +            resizeService = new FifoPriorityThreadPoolExecutor(cores);, +        }, +        if (diskCacheService == null) {, +            diskCacheService = new FifoPriorityThreadPoolExecutor(1);, +            bgHandler = new Handler(handlerThread.getLooper(), new Handler.Callback() {, +                @Override, +                public boolean handleMessage(Message message) {, +                    if (message.what == 0) {, +                        ((Runnable) message.obj).run();, +                        return true;, +                    }, +                    return false;, +                }, +            });, +        factory = new DefaultResourceRunnerFactory(memoryCache, diskCache, new Handler(Looper.getMainLooper()),, +                diskCacheService, resizeService);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.engine.executor.Prioritized;, +public class ResourceRunner<Z, R> implements Runnable, Prioritized {, +    private final Transformation<Z> transformation;, +    private final ResourceTranscoder<Z, R> transcoder;, +    private final Priority priority;, +    private final ExecutorService diskCacheService;, +    private final ExecutorService resizeService;, +            ResourceTranscoder<Z, R> transcoder, SourceResourceRunner sourceRunner, ExecutorService diskCacheService,, +            ExecutorService resizeService, EngineJob job, Priority priority) {, +        this.diskCacheService = diskCacheService;, +        this.resizeService = resizeService;, +        this.priority = priority;, +        future = diskCacheService.submit(this);, +            future = resizeService.submit(sourceRunner);, +, +    @Override, +    public int getPriority() {, +        return priority.ordinal();, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +    private ExecutorService diskCacheService;, +            ExecutorService diskCacheService, ExecutorService resizeService) {, +        this.diskCacheService = diskCacheService;, +        this.service = resizeService;]