[+++ b/library/src/test/java/com/bumptech/glide/RequestManagerTest.java, +import android.app.Application;, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.request.target.BaseTarget;, +import com.bumptech.glide.request.target.SizeReadyCallback;, +import com.bumptech.glide.request.transition.Transition;, +import java.io.File;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +  @Mock private Lifecycle lifecycle = mock(Lifecycle.class);, +  @Mock private RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);, +  private Application context;, +  private BaseTarget<Drawable> target;, +    context = RuntimeEnvironment.application;, +, +     target = new BaseTarget<Drawable>() {, +       @Override, +       public void onResourceReady(Drawable resource, Transition<? super Drawable> transition) {, +         // Empty., +       }, +       @Override, +       public void getSize(SizeReadyCallback cb) {, +         // Empty., +       }, +       @Override, +       public void removeCallback(SizeReadyCallback cb) {, +         // Empty., +       }, +    };, +, +, +  @Test, +  public void clear_withRequestStartedInSiblingManager_doesNotThrow() {, +    final RequestManager child1 = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.emptySet();, +          }, +        }, context);, +     final RequestManager child2 = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.emptySet();, +          }, +        }, context);, +    new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return new HashSet<>(java.util.Arrays.asList(child1, child2));, +          }, +        }, context);, +, +    File file = new File("fake");, +    child1.load(file).into(target);, +    child2.clear(target);, +  }, +, +  @Test, +  public void clear_withRequestStartedInChildManager_doesNotThrow() {, +    final RequestManager child = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.emptySet();, +          }, +        }, context);, +    RequestManager parent = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.singleton(child);, +          }, +        }, context);, +, +    File file = new File("fake");, +    child.load(file).into(target);, +    parent.clear(target);, +  }, +, +  @Test, +  public void clear_withRequestStartedInParentManager_doesNotThrow() {, +    final RequestManager child = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.emptySet();, +          }, +        }, context);, +    RequestManager parent = new RequestManager(Glide.get(context), lifecycle,, +        new RequestManagerTreeNode() {, +          @Override, +          public Set<RequestManager> getDescendants() {, +            return Collections.singleton(child);, +          }, +        }, context);, +]