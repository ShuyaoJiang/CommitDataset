[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    /** The initial stage. */, +    INITIALIZE,, +        stage = getNextStage(Stage.INITIALIZE);, +      stage = getNextStage(stage);, +  private Stage getNextStage(Stage current) {, +    if (current == null) {, +    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, +    switch (current) {, +      case INITIALIZE:, +        return strategy.decodeCachedResource(), +            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, +        return strategy.decodeCachedData(), +            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    /** The initial stage. */, +    INITIALIZE,, +        stage = getNextStage(Stage.INITIALIZE);, +      stage = getNextStage(stage);, +  private Stage getNextStage(Stage current) {, +    if (current == null) {, +    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, +    switch (current) {, +      case INITIALIZE:, +        return strategy.decodeCachedResource(), +            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, +        return strategy.decodeCachedData(), +            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    /** The initial stage. */, +    INITIALIZE,, +        stage = getNextStage(Stage.INITIALIZE);, +      stage = getNextStage(stage);, +  private Stage getNextStage(Stage current) {, +    if (current == null) {, +    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, +    switch (current) {, +      case INITIALIZE:, +        return strategy.decodeCachedResource(), +            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, +        return strategy.decodeCachedData(), +            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    /** The initial stage. */, +    INITIALIZE,, +        stage = getNextStage(Stage.INITIALIZE);, +      stage = getNextStage(stage);, +  private Stage getNextStage(Stage current) {, +    if (current == null) {, +    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, +    switch (current) {, +      case INITIALIZE:, +        return strategy.decodeCachedResource(), +            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, +        return strategy.decodeCachedData(), +            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    /** The initial stage. */, +    INITIALIZE,, +        stage = getNextStage(Stage.INITIALIZE);, +      stage = getNextStage(stage);, +  private Stage getNextStage(Stage current) {, +    if (current == null) {, +    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();, +    switch (current) {, +      case INITIALIZE:, +        return strategy.decodeCachedResource(), +            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);, +        return strategy.decodeCachedData(), +            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java, +   * A Key for an {@link Boolean} option that if set to {@code true}, disables this decoder, +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java, +  private static final String BASE_URL = "https://api.giphy.com/";, +    void onSearchComplete(SearchResult result);]