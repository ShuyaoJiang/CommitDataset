[+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.NonNull;, +     * Returns a {@link List} of models that need to be loaded for the list to display adapter items, +     * in positions between {@code start} and {@code end}., +     *, +     * <p>Every model returned by this method is expected to produce a valid {@link RequestBuilder}, +     * in {@link #getPreloadRequestBuilder(Object)}. If that's not possible for any set of models,, +     * avoid including them in the {@link List} returned by this method., +     *, +     * <p>Although it's acceptable for the returned {@link List} to contain {@code null} models,, +     * it's best to filter them from the list instead of adding {@code null} to avoid unnecessary, +     * logic and expanding the size of the {@link List}, +    @NonNull, +     * Returns a {@link RequestBuilder} for a given item on which, +     * {@link RequestBuilder#load(Object)}} has been called or {@code null} if no valid load can be, +     * started., +     * <p>For the preloader to be effective, the {@link RequestBuilder} returned here must use, +     * exactly the same size and set of options as the {@link RequestBuilder} used when the ``View``, +     * is bound. You may need to specify a size in both places to ensure that the width and height, +     * match exactly. If so, you can use, +     * {@link com.bumptech.glide.request.RequestOptions#override(int, int)} to do so., +     *, +     * <p>The target and context will be provided by the preloader., +     *, +     * <p>If {@link RequestBuilder#load(Object)} is not called by this method, the preloader will, +     * trigger a {@link RuntimeException}. If you don't want to load a particular item or position,, +     * filter it from the list returned by {@link #getPreloadItems(int)}., +    @Nullable, +     *, +     * <p>If this method returns {@code null}, then no request will be started for the given item., +  private void preloadItem(@Nullable T item, int position, int perItemPosition) {, +    if (item == null) {, +      return;, +    int[] dimensions =, +        preloadDimensionProvider.getPreloadSize(item, position, perItemPosition);, +    if (dimensions == null) {, +      return;, +    }, +    RequestBuilder<Object> preloadRequestBuilder =, +        preloadModelProvider.getPreloadRequestBuilder(item);, +    if (preloadRequestBuilder == null) {, +      return;, +    }, +, +    preloadRequestBuilder.into(preloadTargetQueue.next(dimensions[0], dimensions[1]));, +    PreloadTargetQueue(int size) {, +  private static final class PreloadTarget extends BaseTarget<Object> {, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +import android.support.annotation.NonNull;, +     * Returns a {@link List} of models that need to be loaded for the list to display adapter items, +     * in positions between {@code start} and {@code end}., +     *, +     * <p>Every model returned by this method is expected to produce a valid {@link RequestBuilder}, +     * in {@link #getPreloadRequestBuilder(Object)}. If that's not possible for any set of models,, +     * avoid including them in the {@link List} returned by this method., +     *, +     * <p>Although it's acceptable for the returned {@link List} to contain {@code null} models,, +     * it's best to filter them from the list instead of adding {@code null} to avoid unnecessary, +     * logic and expanding the size of the {@link List}, +    @NonNull, +     * Returns a {@link RequestBuilder} for a given item on which, +     * {@link RequestBuilder#load(Object)}} has been called or {@code null} if no valid load can be, +     * started., +     * <p>For the preloader to be effective, the {@link RequestBuilder} returned here must use, +     * exactly the same size and set of options as the {@link RequestBuilder} used when the ``View``, +     * is bound. You may need to specify a size in both places to ensure that the width and height, +     * match exactly. If so, you can use, +     * {@link com.bumptech.glide.request.RequestOptions#override(int, int)} to do so., +     *, +     * <p>The target and context will be provided by the preloader., +     *, +     * <p>If {@link RequestBuilder#load(Object)} is not called by this method, the preloader will, +     * trigger a {@link RuntimeException}. If you don't want to load a particular item or position,, +     * filter it from the list returned by {@link #getPreloadItems(int)}., +    @Nullable, +     *, +     * <p>If this method returns {@code null}, then no request will be started for the given item., +  private void preloadItem(@Nullable T item, int position, int perItemPosition) {, +    if (item == null) {, +      return;, +    int[] dimensions =, +        preloadDimensionProvider.getPreloadSize(item, position, perItemPosition);, +    if (dimensions == null) {, +      return;, +    }, +    RequestBuilder<Object> preloadRequestBuilder =, +        preloadModelProvider.getPreloadRequestBuilder(item);, +    if (preloadRequestBuilder == null) {, +      return;, +    }, +, +    preloadRequestBuilder.into(preloadTargetQueue.next(dimensions[0], dimensions[1]));, +    PreloadTargetQueue(int size) {, +  private static final class PreloadTarget extends BaseTarget<Object> {, +++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java, +import android.support.annotation.NonNull;, +      @NonNull, +      @NonNull, +      @NonNull, +      @NonNull]