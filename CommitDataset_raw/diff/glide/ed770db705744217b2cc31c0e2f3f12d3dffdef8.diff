[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  void removeFromManagers(Target<?> target) {, +    synchronized (managers) {, +        if (requestManager.untrack(target)) {, +    throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  void removeFromManagers(Target<?> target) {, +    synchronized (managers) {, +        if (requestManager.untrack(target)) {, +    throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +  public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(, +      Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {, +          List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, +              .getTranscodeClasses(registeredResourceClass, transcodeClass);, +          if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  void removeFromManagers(Target<?> target) {, +    synchronized (managers) {, +        if (requestManager.untrack(target)) {, +    throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +  public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(, +      Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {, +          List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, +              .getTranscodeClasses(registeredResourceClass, transcodeClass);, +          if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.manager.TargetTracker;, +  private final TargetTracker targetTracker = new TargetTracker();, +  private final Runnable addSelfToLifecycle = new Runnable() {, +    @Override, +    public void run() {, +      lifecycle.addListener(RequestManager.this);, +    }, +  };, +  private final Handler mainHandler = new Handler(Looper.getMainLooper());, +  private final ConnectivityMonitor connectivityMonitor;, +    connectivityMonitor =, +      mainHandler.post(addSelfToLifecycle);, +    targetTracker.onStart();, +    targetTracker.onStop();, +    targetTracker.onDestroy();, +    for (Target<?> target : targetTracker.getAll()) {, +      clear(target);, +    }, +    targetTracker.clear();, +    lifecycle.removeListener(this);, +    lifecycle.removeListener(connectivityMonitor);, +    mainHandler.removeCallbacks(addSelfToLifecycle);, +    Glide.get(context).unregisterRequestManager(this);, +    untrackOrDelegate(target);, +  private void untrackOrDelegate(Target<?> target) {, +    boolean isOwnedByUs = untrack(target);, +      Glide.get(context).removeFromManagers(target);, +  boolean untrack(Target<?> target) {, +    Request request = target.getRequest();, +    if (requestTracker.clearRemoveAndRecycle(request)) {, +      targetTracker.untrack(target);, +      target.setRequest(null);, +      return true;, +    } else {, +      return true;, +    }, +    targetTracker.track(target);, +  @Override, +  public String toString() {, +    return super.toString() + "{tracker=" + requestTracker + ", treeNode=" + treeNode + "}";, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  void removeFromManagers(Target<?> target) {, +    synchronized (managers) {, +        if (requestManager.untrack(target)) {, +    throw new IllegalStateException("Failed to remove target from managers");, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +  public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(, +      Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {, +          List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry, +              .getTranscodeClasses(registeredResourceClass, transcodeClass);, +          if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.manager.TargetTracker;, +  private final TargetTracker targetTracker = new TargetTracker();, +  private final Runnable addSelfToLifecycle = new Runnable() {, +    @Override, +    public void run() {, +      lifecycle.addListener(RequestManager.this);, +    }, +  };, +  private final Handler mainHandler = new Handler(Looper.getMainLooper());, +  private final ConnectivityMonitor connectivityMonitor;, +    connectivityMonitor =, +      mainHandler.post(addSelfToLifecycle);, +    targetTracker.onStart();, +    targetTracker.onStop();, +    targetTracker.onDestroy();, +    for (Target<?> target : targetTracker.getAll()) {, +      clear(target);, +    }]