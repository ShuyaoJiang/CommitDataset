[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);, +        request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);, +        request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        request = new DrawableTypeRequest<String>(model, mock(ModelLoader.class),, +                mock(ModelLoader.class), Robolectric.application, Glide.get(Robolectric.application),, +                mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);, +        request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        request = new DrawableTypeRequest<String>(model, mock(ModelLoader.class),, +                mock(ModelLoader.class), Robolectric.application, Glide.get(Robolectric.application),, +                mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, new Object(), mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, null, null, Object.class, mock(Glide.class), requestTracker,, +                mock(Lifecycle.class));, +        return new GenericRequestBuilder(Robolectric.application, null, null, Object.class, glide, requestTracker,, +                mock(Lifecycle.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);, +        request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        request = new DrawableTypeRequest<String>(model, mock(ModelLoader.class),, +                mock(ModelLoader.class), Robolectric.application, Glide.get(Robolectric.application),, +                mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, new Object(), mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, null, null, Object.class, mock(Glide.class), requestTracker,, +                mock(Lifecycle.class));, +        return new GenericRequestBuilder(Robolectric.application, null, null, Object.class, glide, requestTracker,, +                mock(Lifecycle.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +                Glide.get(Robolectric.application), model, mock(ModelLoader.class), Object.class,, +                Object.class, mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);, +        request = new BitmapTypeRequest(original, mock(ModelLoader.class), mock(ModelLoader.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        request = new DrawableTypeRequest<String>(model, mock(ModelLoader.class),, +                mock(ModelLoader.class), Robolectric.application, Glide.get(Robolectric.application),, +                mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, new Object(), mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, null, null, Object.class, mock(Glide.class), requestTracker,, +                mock(Lifecycle.class));, +        return new GenericRequestBuilder(Robolectric.application, null, null, Object.class, glide, requestTracker,, +                mock(Lifecycle.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +                Glide.get(Robolectric.application), model, mock(ModelLoader.class), Object.class,, +                Object.class, mock(RequestTracker.class), mock(Lifecycle.class), optionsApplier);, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +import com.bumptech.glide.provider.DataLoadProvider;, +import com.bumptech.glide.provider.LoadProvider;, +, +        Glide glide = mock(Glide.class);, +        when(glide.buildTranscoder(any(Class.class), any(Class.class))).thenReturn(mock(ResourceTranscoder.class));, +        when(glide.buildDataProvider(any(Class.class), any(Class.class))).thenReturn(mock(DataLoadProvider.class));, +, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, model,, +                mock(LoadProvider.class), null, glide, null, null);]