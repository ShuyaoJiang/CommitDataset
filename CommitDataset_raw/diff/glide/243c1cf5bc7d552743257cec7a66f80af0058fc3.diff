[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +import android.support.annotation.VisibleForTesting;, +  @VisibleForTesting, +  final Map<Key, ResourceWeakReference> activeEngineResources = new HashMap<>();, +    ResourceWeakReference removed =, +        activeEngineResources.put(, +            key, new ResourceWeakReference(key, resource, getReferenceQueue()));, +    if (removed != null) {, +      removed.reset();, +    }, +    ResourceWeakReference removed = activeEngineResources.remove(key);, +    if (removed != null) {, +      removed.reset();, +    }, +    if (!ref.isCacheable || ref.resource == null) {, +  @VisibleForTesting, +  static final class ResourceWeakReference extends WeakReference<EngineResource<?>> {, +    @Nullable @SuppressWarnings("WeakerAccess") @Synthetic Resource<?> resource;, +, +        @NonNull Key key,, +        @NonNull EngineResource<?> referent,, +        @NonNull ReferenceQueue<? super EngineResource<?>> queue) {, +      super(referent, queue);, +      this.resource =, +          referent.isCacheable() ? Preconditions.checkNotNull(referent.getResource()) : null;, +      isCacheable = referent.isCacheable();, +    }, +, +    void reset() {, +      resource = null;, +      clear();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +import android.support.annotation.VisibleForTesting;, +  @VisibleForTesting, +  final Map<Key, ResourceWeakReference> activeEngineResources = new HashMap<>();, +    ResourceWeakReference removed =, +        activeEngineResources.put(, +            key, new ResourceWeakReference(key, resource, getReferenceQueue()));, +    if (removed != null) {, +      removed.reset();, +    }, +    ResourceWeakReference removed = activeEngineResources.remove(key);, +    if (removed != null) {, +      removed.reset();, +    }, +    if (!ref.isCacheable || ref.resource == null) {, +  @VisibleForTesting, +  static final class ResourceWeakReference extends WeakReference<EngineResource<?>> {, +    @Nullable @SuppressWarnings("WeakerAccess") @Synthetic Resource<?> resource;, +, +        @NonNull Key key,, +        @NonNull EngineResource<?> referent,, +        @NonNull ReferenceQueue<? super EngineResource<?>> queue) {, +      super(referent, queue);, +      this.resource =, +          referent.isCacheable() ? Preconditions.checkNotNull(referent.getResource()) : null;, +      isCacheable = referent.isCacheable();, +    }, +, +    void reset() {, +      resource = null;, +      clear();, +++ b/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java, +package com.bumptech.glide.load.engine;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +, +import android.os.MessageQueue.IdleHandler;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.ActiveResources.ResourceWeakReference;, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, +import com.bumptech.glide.tests.GlideShadowLooper;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(shadows = GlideShadowLooper.class), +public class ActiveResourcesTest {, +, +  @Mock private ResourceListener listener;, +  @Mock private Key key;, +  @Mock private Resource<Object> resource;, +, +  private ActiveResources resources;, +, +  @Before, +  public void setUp() {, +    MockitoAnnotations.initMocks(this);, +    resources = new ActiveResources();, +    resources.setListener(listener);]