[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +import java.util.Map;, +    private final Headers headers;, +    private final String stringUrl;, +    private String safeStringUrl;, +        this(url, Headers.NONE);, +        this(url, Headers.NONE);, +    }, +, +    public GlideUrl(URL url, Headers headers) {, +        if (url == null) {, +            throw new IllegalArgumentException("URL must not be null!");, +        }, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        this.url = url;, +        stringUrl = null;, +        this.headers = headers;, +    }, +, +    public GlideUrl(String url, Headers headers) {, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        this.headers = headers;, +        if (safeUrl == null) {, +            safeUrl = new URL(getSafeStringUrl());, +        }, +    public String toStringUrl() {, +        return getSafeStringUrl();, +    }, +, +    private String getSafeStringUrl() {, +        if (TextUtils.isEmpty(safeStringUrl)) {, +            String unsafeStringUrl = stringUrl;, +            if (TextUtils.isEmpty(unsafeStringUrl)) {, +                unsafeStringUrl = url.toString();, +            }, +            safeStringUrl = Uri.encode(unsafeStringUrl, ALLOWED_URI_CHARS);, +        }, +        return safeStringUrl;, +    }, +, +    public Map<String, String> getHeaders() {, +        return headers.getHeaders();, +        String urlString = getSafeStringUrl();, +        StringBuilder stringBuilder = new StringBuilder(urlString);, +        Map<String, String> headerMap = headers.getHeaders();, +        for (Map.Entry<String, String> entry : headerMap.entrySet()) {, +            stringBuilder.append('\n'), +                .append(entry.getKey()), +                .append(": "), +                .append(entry.getValue());, +        return stringBuilder.toString();, +        if (o instanceof GlideUrl) {, +          GlideUrl other = (GlideUrl) o;, +          return getSafeStringUrl().equals(other.getSafeStringUrl()), +              && headers.equals(other.headers);, +        int hashCode = getSafeStringUrl().hashCode();, +        hashCode = 31 * hashCode + headers.hashCode();, +        return hashCode;, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +import java.util.Map;, +    private final Headers headers;, +    private final String stringUrl;, +    private String safeStringUrl;, +        this(url, Headers.NONE);, +        this(url, Headers.NONE);, +    }, +, +    public GlideUrl(URL url, Headers headers) {, +        if (url == null) {, +            throw new IllegalArgumentException("URL must not be null!");, +        }, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        this.url = url;, +        stringUrl = null;, +        this.headers = headers;, +    }, +, +    public GlideUrl(String url, Headers headers) {, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        this.headers = headers;, +        if (safeUrl == null) {, +            safeUrl = new URL(getSafeStringUrl());, +        }, +    public String toStringUrl() {, +        return getSafeStringUrl();, +    }, +, +    private String getSafeStringUrl() {, +        if (TextUtils.isEmpty(safeStringUrl)) {, +            String unsafeStringUrl = stringUrl;, +            if (TextUtils.isEmpty(unsafeStringUrl)) {, +                unsafeStringUrl = url.toString();]