[+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, +    private static final float SQUARE_RATIO_MARGIN = 0.05f;, +, +        //TODO: Try to generalize this to other sizes/shapes., +        // This is a dirty hack that tries to make loading square thumbnails and then square full images less costly by, +        // forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions. If a, +        // drawable is replaced in an ImageView by another drawable with different intrinsic dimensions, the ImageView, +        // requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers lots of these calls, +        // and causes significant amounts of jank., +        float viewRatio = view.getWidth() / (float) view.getHeight();, +        float drawableRatio = resource.getIntrinsicWidth() / (float) resource.getIntrinsicHeight();, +        if (Math.abs(viewRatio - 1f) <= SQUARE_RATIO_MARGIN && Math.abs(drawableRatio - 1f) <= SQUARE_RATIO_MARGIN) {, +            resource = new SquaringDrawable(resource, view.getWidth());, +        }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java, +    private static final float SQUARE_RATIO_MARGIN = 0.05f;, +, +        //TODO: Try to generalize this to other sizes/shapes., +        // This is a dirty hack that tries to make loading square thumbnails and then square full images less costly by, +        // forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions. If a, +        // drawable is replaced in an ImageView by another drawable with different intrinsic dimensions, the ImageView, +        // requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers lots of these calls, +        // and causes significant amounts of jank., +        float viewRatio = view.getWidth() / (float) view.getHeight();, +        float drawableRatio = resource.getIntrinsicWidth() / (float) resource.getIntrinsicHeight();, +        if (Math.abs(viewRatio - 1f) <= SQUARE_RATIO_MARGIN && Math.abs(drawableRatio - 1f) <= SQUARE_RATIO_MARGIN) {, +            resource = new SquaringDrawable(resource, view.getWidth());, +        }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/SquaringDrawable.java, +package com.bumptech.glide.request.target;, +, +import android.annotation.TargetApi;, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.PorterDuff;, +import android.graphics.Rect;, +import android.graphics.drawable.Drawable;, +, +/**, + * A wrapper drawable to square the wrapped drawable so that it expands to fill a square with exactly the given side, + * length. The goal of this drawable is to ensure that square thumbnail drawables always match the size of the view, + * they will be displayed in to avoid a costly requestLayout call. This class should not be used with views or drawables, + * that are not square., + */, +public class SquaringDrawable extends Drawable {, +    private final Drawable wrapped;, +    private int side;, +, +    public SquaringDrawable(Drawable wrapped, int side) {, +        this.wrapped = wrapped;, +        this.side = side;, +    }, +, +    @Override, +    public void setBounds(int left, int top, int right, int bottom) {, +        super.setBounds(left, top, right, bottom);, +        wrapped.setBounds(left, top, right, bottom);, +    }, +, +    @Override, +    public void setBounds(Rect bounds) {, +        super.setBounds(bounds);, +        wrapped.setBounds(bounds);, +    }, +    public void setChangingConfigurations(int configs) {, +        wrapped.setChangingConfigurations(configs);, +    }, +, +    @Override, +    public int getChangingConfigurations() {, +        return wrapped.getChangingConfigurations();, +    }, +, +    @Override, +    public void setDither(boolean dither) {, +        wrapped.setDither(dither);, +    }, +, +    @Override, +    public void setFilterBitmap(boolean filter) {, +        wrapped.setFilterBitmap(filter);, +    }, +, +    @TargetApi(11), +    @Override, +    public Callback getCallback() {, +        return wrapped.getCallback();, +    }, +, +    @TargetApi(19), +    @Override, +    public int getAlpha() {, +        return wrapped.getAlpha();, +    }, +, +    @Override, +    public void setColorFilter(int color, PorterDuff.Mode mode) {, +        wrapped.setColorFilter(color, mode);]