[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +    private static final String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";, +    private static final int DEFAULT_DISK_CACHE_SIZE = 30 * 1024 * 1024;, +    public static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;, +, +        return getPhotoCacheDir(context, DEFAULT_DISK_CACHE_DIR);, +    public static class Builder {, +        private final Context context;, +, +        private ExecutorService resizeService = null;, +        private MemoryCache memoryCache = null;, +        private DiskCache diskCache = null;, +, +        private Bitmap.CompressFormat diskCacheFormat = Bitmap.CompressFormat.JPEG;, +        private boolean recycleBitmaps = CAN_RECYCLE;, +        private int maxBitmapsPerSize = 20;, +, +        public BitmapFactory.Options decodeBitmapOptions = ImageResizer.getDefaultOptions();, +, +        public Builder(Context context) {, +            this.context = context;, +, +        public ImageManager build() {, +            setDefaults();, +, +            return new ImageManager(this);, +        }, +, +        public Builder setResizeService(ExecutorService resizeService) {, +            this.resizeService = resizeService;, +            return this;, +        }, +, +        public Builder setDiskCacheFormat(Bitmap.CompressFormat diskCacheFormat) {, +            this.diskCacheFormat = diskCacheFormat;, +            return this;, +        }, +, +        public Builder setRecycleBitmaps(boolean recycleBitmaps) {, +            this.recycleBitmaps = recycleBitmaps && CAN_RECYCLE;, +            return this;, +        }, +, +        public Builder setMemoryCache(MemoryCache memoryCache) {, +            this.memoryCache = memoryCache;, +            return this;, +        }, +, +        public Builder disableMemoryCache() {, +            if (memoryCache != null) {, +                throw new IllegalArgumentException("Can't disable memory cache after setting it");, +            }, +            memoryCache = new MemoryCacheAdapter();, +            return this;, +        }, +, +        public Builder setDefaultMemoryCacheSize(int maxSize) {, +            if (memoryCache != null) {, +                throw new IllegalArgumentException("Can't set a default memory cache after setting a custom one");, +            }, +, +            memoryCache = new LruPhotoCache(maxSize);, +            return this;, +        }, +, +        public Builder setDiskCache(DiskCache diskCache) {, +            this.diskCache = diskCache;, +            return this;, +        }, +, +        public Builder disableDiskCache() {, +            diskCache = new DiskCacheAdapter();, +            return this;, +        }, +, +        public Builder setDefaultDiskCacheOptions(File dir) {, +            setDefaultDiskCacheOptions(dir, DEFAULT_DISK_CACHE_SIZE);, +            return this;, +        }, +, +        public Builder setDefaultDiskCacheOptions(int size) {, +            setDefaultDiskCacheOptions(getPhotoCacheDir(context), size);, +            return this;, +        }, +, +        public Builder setDefaultDiskCacheOptions(File dir, int size) {, +            if (size <= 0) {, +                throw new IllegalArgumentException("Size must be >= 0");, +            }, +, +            if (diskCache != null) {, +                throw new IllegalArgumentException("Can't set disk cache twice");, +            }, +, +                diskCache = DiskLruCacheWrapper.get(dir, size);, +                disableDiskCache();, +            return this;, +        public Builder setMaxBitmapsPerSize(int maxBitmapsPerSize) {, +            this.maxBitmapsPerSize = maxBitmapsPerSize;, +            return this;]