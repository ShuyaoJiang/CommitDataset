[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java, +  /**, +   * An integer indicating the frame option used to retrieve a target frame., +   *, +   * <p>This option will be ignored if {@link #TARGET_FRAME} is not set or is set to, +   * {@link #DEFAULT_FRAME}., +   *, +   * @see MediaMetadataRetriever#getFrameAtTime(long, int), +   */, +  public static final Option<Integer> FRAME_OPTION = Option.disk(, +      "com.bumptech.glide.load.resource.bitmap.VideoBitmapDecode.FrameOption",, +      null /*defaultValue*/,, +      new Option.CacheKeyUpdater<Integer>() {, +        private final ByteBuffer buffer = ByteBuffer.allocate(Integer.SIZE / Byte.SIZE);, +        @Override, +        public void update(byte[] keyBytes, Integer value, MessageDigest messageDigest) {, +          if (value == null) {, +            return;, +          }, +          messageDigest.update(keyBytes);, +          synchronized (buffer) {, +            buffer.position(0);, +            messageDigest.update(buffer.putInt(value).array());, +          }, +        }, +      }, +  );, +, +    long frameTimeMicros = options.get(TARGET_FRAME);, +    if (frameTimeMicros < 0 && frameTimeMicros != DEFAULT_FRAME) {, +          "Requested frame must be non-negative, or DEFAULT_FRAME, given: " + frameTimeMicros);, +    Integer frameOption = options.get(FRAME_OPTION);, +    if (frameTimeMicros == DEFAULT_FRAME) {, +    } else if (frameOption == null) {, +      result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros);, +      result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);]