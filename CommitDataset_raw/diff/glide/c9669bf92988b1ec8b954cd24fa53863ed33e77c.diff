[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return Math.min(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return Math.max(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +   * @param sourceWidth   The width in pixels of the image to be downsampled., +   * @param sourceHeight  The height in piexels of the image to be downsampled., +   * @param requestedWidth  The width in pixels of the view/target the image will be displayed in., +   * @param requestedHeight The height in pixels of the view/target the imag will be displayed in., +  int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return Math.min(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return Math.max(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +   * @param sourceWidth   The width in pixels of the image to be downsampled., +   * @param sourceHeight  The height in piexels of the image to be downsampled., +   * @param requestedWidth  The width in pixels of the view/target the image will be displayed in., +   * @param requestedHeight The height in pixels of the view/target the imag will be displayed in., +  int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +  private static final String TAG = "Downsampler";, +   * @param requestedWidth  The width the final image should be close to., +   * @param requestedHeight The height the final image should be close to., +  public Resource<Bitmap> decode(InputStream is, int requestedWidth, int requestedHeight,, +          downsampleStrategy, decodeFormat, requestedWidth, requestedHeight, callbacks);, +      DecodeFormat decodeFormat, int requestedWidth, int requestedHeight,, +      DecodeCallbacks callbacks) throws IOException {, +    int[] sourceDimensions = getDimensions(is, bitmapFactoryOptions, callbacks);, +    int sourceWidth = sourceDimensions[0];, +    int sourceHeight = sourceDimensions[1];, +    int sampleSize = getRoundedSampleSize(downsampleStrategy, degreesToRotate, sourceWidth,, +        sourceHeight, requestedWidth, requestedHeight);, +    Bitmap downsampled = downsampleWithSize(is, bitmapFactoryOptions, bitmapPool, sourceWidth,, +        sourceHeight, sampleSize, decodeFormat, requestedWidth, requestedHeight, callbacks);, +      int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {, +    int targetHeight = requestedHeight == Target.SIZE_ORIGINAL ? sourceHeight : requestedHeight;, +    int targetWidth = requestedWidth == Target.SIZE_ORIGINAL ? sourceWidth : requestedWidth;, +          downsampleStrategy.getSampleSize(sourceHeight, sourceWidth, targetWidth, targetHeight);, +          downsampleStrategy.getSampleSize(sourceWidth, sourceHeight, targetWidth, targetHeight);, +      BitmapPool pool, int sourceWidth, int sourceHeight, int sampleSize, DecodeFormat decodeFormat,, +      int requestedWidth, int requestedHeight, DecodeCallbacks callbacks) throws IOException {, +    // Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding., +      int targetWidth = (int) Math.ceil(sourceWidth / (double) sampleSize);, +      int targetHeight = (int) Math.ceil(sourceHeight / (double) sampleSize);, +    return decodeStream(is, options, requestedWidth, requestedHeight, callbacks);, +    // On KitKat+, any bitmap (of a given config) can be used to decode any other bitmap, +    // (with the same config)., +    decodeStream(is, options, -1, -1, decodeCallbacks);, +      int requestedWidth, int requestedHeight, DecodeCallbacks callbacks) throws IOException {, +    // BitmapFactory.Options out* variables are reset by most calls to decodeStream, successful or, +    // otherwise, so capture here in case we log below., +      // Once we've read the image header, we no longer need to allow the buffer to expand in, +      // size. To avoid unnecessary allocations reading image data, we fix the mark limit so that it, +      // is no larger than our current buffer size here. See issue #225., +      callbacks.onObtainBounds();, +    } else {, +      maybeLogDecode(outWidth, outHeight, outMimeType, options, result, requestedWidth,, +          requestedHeight);, +  private static void maybeLogDecode(int outWidth, int outHeight, String outMimeType,, +      BitmapFactory.Options options, Bitmap result, int targetWidth, int targetHeight) {, +    if (!Log.isLoggable(TAG, Log.VERBOSE)) {, +      return;, +    }, +    Log.v(TAG, "Decoded " + getBitmapString(result), +        + " from [" + outWidth + "x" + outHeight + "] " + outMimeType, +        + " with inBitmap " + getInBitmapString(options), +        + " for [" + targetWidth + "x" + targetHeight + "] and sample size: ", +        + options.inSampleSize);, +  }, +, +  @TargetApi(Build.VERSION_CODES.HONEYCOMB), +  private static String getInBitmapString(BitmapFactory.Options options) {, +    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB, +        ? getBitmapString(options.inBitmap) : null;, +  }, +, +  @TargetApi(Build.VERSION_CODES.KITKAT), +  private static String getBitmapString(Bitmap bitmap) {, +    final String result;, +    if (bitmap == null) {, +      result = null;, +    } else {, +      String sizeString = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT, +          ? " (" + bitmap.getAllocationByteCount() + ")" : "";, +      result = "[" + bitmap.getWidth() + "x" + bitmap.getHeight() + "] " + bitmap.getConfig(), +          + sizeString;, +    }, +    return result;, +  }, +, +          + ", inBitmap: " + getInBitmapString(options), e);]