[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/photomanager/LoadedCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.photomanager;, +, +import android.graphics.Bitmap;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 7:04 PM, + * To change this template use File | Settings | File Templates., + */, +public interface LoadedCallback {, +    public void onLoadCompleted(Bitmap loaded);, +    public void onLoadFailed(Exception e);, +}, +++ /dev/null, +++ /dev/null, +++ b/src/com/bumptech/photos/photomanager/LoadedCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.photomanager;, +, +import android.graphics.Bitmap;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 7:04 PM, + * To change this template use File | Settings | File Templates., + */, +public interface LoadedCallback {, +    public void onLoadCompleted(Bitmap loaded);, +    public void onLoadFailed(Exception e);, +}, +++ b/src/com/bumptech/photos/photomanager/PhotoManager.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.photomanager;, +, +import android.graphics.Bitmap;, +import android.os.Build;, +import android.os.Handler;, +import android.os.SystemClock;, +import com.bumptech.photos.cache.LruPhotoCache;, +import com.bumptech.photos.cache.PhotoDiskCache;, +import com.bumptech.photos.cache.SizedBitmapCache;, +import com.bumptech.photos.resize.ResizeJobGenerator;, +, +import java.io.File;, +import java.io.InputStream;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Created by IntelliJ IDEA., + * User: sam, + * Date: 2/9/12, + * Time: 5:02 PM, + * To change this template use File | Settings | File Templates., + */, +public class PhotoManager {, +    public static final boolean CAN_RECYCLE = Build.VERSION.SDK_INT >= 11;, +, +    private PhotoDiskCache diskCache;, +    private LruPhotoCache memoryCache;, +    private ResizeJobGenerator resizer;, +    private Handler backgroundHandler;, +    private Map<Integer, Integer> bitmapReferenceCounter = new HashMap<Integer, Integer>();, +    private SizedBitmapCache bitmapCache = new SizedBitmapCache();, +, +    private enum ResizeType {, +        CENTER_CROP,, +        FIT_CENTER,, +        APPROXIMATE,, +        AS_IS, +    }, +, +    public PhotoManager(int maxMemCacheSize, long maxDiskCacheSize, File diskCacheDir, Handler mainHandler, Handler backgroundHandler) {, +        this.backgroundHandler = backgroundHandler;, +        this.memoryCache = new LruPhotoCache(maxMemCacheSize);, +        memoryCache.setPhotoRemovedListener(new LruPhotoCache.PhotoRemovedListener() {, +            @Override, +            public void onPhotoRemoved(String key, Bitmap bitmap) {, +                releaseBitmap(bitmap);, +            }]