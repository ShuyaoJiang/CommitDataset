[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.DataUrlLoader;, +        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.DataUrlLoader;, +        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory()), +++ b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java, +package com.bumptech.glide.load.model;, +, +import android.content.Context;, +import android.util.Base64;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.signature.ObjectKey;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * A simple model loader for loading data from a Data URL String., + *, + * Data URIs use the "data" scheme., + *, + * <p>See http://www.ietf.org/rfc/rfc2397.txt  for a complete description of the 'data' URL scheme., + *, + * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],somedata"</pre>, + */, +public final class DataUrlLoader<Data> implements ModelLoader<String, Data> {, +, +  private static final String DATA_SCHEME_IMAGE = "data:image";, +  private static final String BASE64_TAG = ";base64";, +  private final DataDecoder<Data> dataDecoder;, +, +  public DataUrlLoader(DataDecoder<Data> dataDecoder) {, +    this.dataDecoder = dataDecoder;, +  }, +, +  @Override, +  public LoadData<Data> buildLoadData(String model, int width, int height, Options options) {, +    return new LoadData<>(new ObjectKey(model), new DataUriFetcher<Data>(model, dataDecoder));, +  }, +, +  @Override, +  public boolean handles(String url) {, +    return url.startsWith(DATA_SCHEME_IMAGE);, +  }, +, +  /**, +   * Allows decoding a specific type of data from a Data URL String., +   *, +   * @param <Data> The type of data that can be opened., +   */, +  public interface DataDecoder<Data> {, +, +    Data decode(String uri) throws IllegalArgumentException;, +, +    void close(Data data) throws IOException;, +, +    Class<Data> getDataClass();, +  }, +, +  private static final class DataUriFetcher<Data> implements DataFetcher<Data> {, +, +    private final String dataUri;, +    private final DataDecoder<Data> reader;, +    private Data data;, +, +    public DataUriFetcher(String dataUri, DataDecoder<Data> reader) {, +      this.dataUri = dataUri;, +      this.reader = reader;, +    }, +, +    @Override, +    public void loadData(Priority priority, DataCallback<? super Data> callback) {, +      try {, +        data = reader.decode(dataUri);, +        callback.onDataReady(data);, +      } catch (IllegalArgumentException e) {, +        callback.onLoadFailed(e);, +      }, +    }, +, +    @Override, +    public void cleanup() {, +      try {, +        reader.close(data);, +      } catch (IOException e) {, +        // Ignored., +      }, +    }, +, +    @Override, +    public void cancel() {, +      // Do nothing., +    }, +]