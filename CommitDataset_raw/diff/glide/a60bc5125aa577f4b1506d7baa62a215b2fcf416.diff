[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +        when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +        when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, +        assertEquals(expected, glideUrl.toStringUrl());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +        when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, +        assertEquals(expected, glideUrl.toStringUrl());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +                        assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +                assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +        when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, +        assertEquals(expected, glideUrl.toStringUrl());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +                        assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +                assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +        return glideUrl.getCacheKey();, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +                .url(url.toStringUrl()), +        return url.getCacheKey();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +        String stringUrl = url.toStringUrl();, +        return url.getCacheKey();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +        when(glideUrl.getCacheKey()).thenReturn(expected);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java, +        assertEquals(expected, glideUrl.toStringUrl());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +                        assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +                assertEquals(urlLoader.resultUrl, glideUrl.toStringUrl());, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +        return glideUrl.getCacheKey();, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, + * <p>  Users wishing to replace the class for handling URLs must register a factory using GlideUrl. </p>, + * <p> To obtain a properly escaped URL, call {@link #toURL()}. To obtain a properly escaped string URL, call, + * {@link #toStringUrl()}. To obtain a less safe, but less expensive to calculate cache key, call, + * {@link #getCacheKey()}. </p>, + *, + * <p> This class can also optionally wrap {@link com.bumptech.glide.load.model.Headers} for convenience. </p>, +    /**, +     * Returns a properly escaped {@link java.net.URL} that can be used to make http/https requests., +     *, +     * @see #toStringUrl(), +     * @see #getCacheKey(), +     * @throws MalformedURLException, +     */, +    /**, +     * Returns a properly escaped {@link String} url that can be used to make http/https requests., +     *, +     * @see #toURL(), +     * @see #getCacheKey(), +     */, +    /**, +     * Returns a non-null {@link Map} containing headers., +     */, +    /**, +     * Returns an inexpensive to calculate {@link String} suitable for use as a disk cache key., +     *, +     * <p> This method does not include headers. </p>, +     *, +     * <p> Unlike {@link #toStringUrl()}} and {@link #toURL()}, this method does not escape input. </p>, +     */]