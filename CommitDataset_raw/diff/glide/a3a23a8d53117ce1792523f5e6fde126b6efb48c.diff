[+++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +import java.util.LinkedList;, +import java.util.Queue;, +    private Queue<byte[]> tempQueue = new LinkedList<byte[]>();, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        final Bitmap streamed = streamIn(path, width, height, tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        final Bitmap streamed = streamIn(path, width > height ? 1 : width, height > width ? 1 : height, tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        final Bitmap result = streamIn(path, width, height, tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +, +        return result;, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +            dimens = getDimension(is1, tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +, +        return loadAsIs(is2, getRecycled(dimens));, +, +    public Bitmap loadAsIs(final InputStream is, final Bitmap recycled) {, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        final Bitmap result = load(is, recycled, tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +        return result;, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        final Bitmap result = load(path, getRecycled(width, height), tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +        return result;, +        byte[] tempStorage = getTempBytes();, +        byte[] bufStorage = getTempBytes();, +        int[] dimens = getDimensions(path, tempStorage, bufStorage);, +        final Bitmap result = load(path, getRecycled(dimens), tempStorage, bufStorage);, +        releaseTempBytes(tempStorage, bufStorage);, +        return result;, +, +    private byte[] getTempBytes() {, +        final byte[] result;, +        if (tempQueue.size() > 0) {, +            result = tempQueue.remove();, +        } else {, +            Log.d("IR: created temp bytes");, +            result = new byte[16 * 1024];, +        }, +        return result;, +    }, +, +    private void releaseTempBytes(byte[]... byteArrays) {, +        for (byte[] bytes : byteArrays) {, +            releaseTempBytes(bytes);, +        }, +    }, +, +    private void releaseTempBytes(byte[] bytes) {, +        tempQueue.add(bytes);, +    }, +, +, +    public static Bitmap load(String path, byte[] tempStorage, byte[] bufStorage) {, +        return load(path, null, tempStorage, bufStorage);, +    public static Bitmap load(String path, Bitmap recycle, byte[] tempStorage, byte[] bufStorage) {, +            result = load(new FileInputStream(path), recycle, tempStorage, bufStorage);, +    public static Bitmap load(InputStream is, byte[] tempSpace, byte[] bufSpace) {, +        return load(is, null, tempSpace, bufSpace);, +    public static Bitmap load(InputStream is, Bitmap recycle, byte[] tempSpace, byte[] bufSpace){, +        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(recycle, tempSpace);, +        return decodeStream(is, decodeBitmapOptions, bufSpace);, +    public static int[] getDimensions(String path, byte[] tempStorage, byte[] bufStorage) {, +        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions(tempStorage);, +        decodeBoundsOptions.inJustDecodeBounds = true;, +        decodeStream(path, decodeBoundsOptions, bufStorage);, +        return new int[] { decodeBoundsOptions.outWidth, decodeBoundsOptions.outHeight };, +    public static int[] getDimension(InputStream is, byte[] tempSpace, byte[] bufSpace) {, +        final BitmapFactory.Options decodeBoundsOptions = getDefaultOptions(tempSpace);, +        decodeStream(is, decodeBoundsOptions, bufSpace);, +    public static Bitmap streamIn(String path, int width, int height, byte[] tempSpace, byte[] bufSpace) {, +        final int[] dimens = getDimensions(path, tempSpace, bufSpace);, +        final BitmapFactory.Options decodeBitmapOptions = getDefaultOptions(tempSpace);, +, +        result = decodeStream(path, decodeBitmapOptions, bufSpace);, +, +, +   private static Bitmap decodeStream(String path, BitmapFactory.Options decodeBitmapOptions, byte[] bufSpace) {, +       InputStream is = null;, +       Bitmap result = null;, +       try {, +           is = new FileInputStream(path);, +           result = decodeStream(is, decodeBitmapOptions, bufSpace);, +       } catch (FileNotFoundException e) {, +           e.printStackTrace();, +       } finally {, +           if (is !=null) {, +               try {]