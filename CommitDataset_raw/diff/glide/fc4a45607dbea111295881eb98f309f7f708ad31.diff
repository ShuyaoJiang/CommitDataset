[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +  @Rule, +  public ExpectedException expectedException = ExpectedException.none();, +, +  public void load_withBitmapAliasResourceId_asBitmap_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.bitmap_alias), +        .submit(), +        .get();, +    assertThat(bitmap).isNotNull();, +  }, +, +  @Test, +  public void load_withShapeDrawableResourceId_asBitmap_withSizeOriginal_fails(), +      throws ExecutionException, InterruptedException {, +    expectedException.expect(ExecutionException.class);, +    Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.shape_drawable), +        .submit(), +        .get();, +  }, +, +  @Test, +  public void load_withShapeDrawableResourceId_asBitmap_withValidSize_returnsNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.shape_drawable), +        .submit(100, 200), +        .get();, +    assertThat(bitmap).isNotNull();, +    assertThat(bitmap.getWidth()).isEqualTo(100);, +    assertThat(bitmap.getHeight()).isEqualTo(200);, +  }, +, +  @Test, +  public void load_withStateListDrawableResourceId_asBitmap_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.state_list_drawable), +        .submit(), +        .get();, +    assertThat(bitmap).isNotNull();, +  }, +, +  @Test, +  public void load_withVectorDrawableResourceId_asBitmap_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.vector_drawable), +        .submit(), +        .get();, +    assertThat(bitmap).isNotNull();, +  }, +, +  @Test, +, +  @Test, +  public void load_withNinePatchResourceId_asBitmap_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.googlelogo_color_120x44dp), +        .submit(), +        .get();, +, +    assertThat(bitmap).isNotNull();, +  }, +, +  public void load_withApplicationIconResourceIdUri_asBitmap_producesNonNullBitmap(), +      throws NameNotFoundException, ExecutionException, InterruptedException {, +    for (String packageName : getInstalledPackages()) {, +      int iconResourceId = getResourceId(packageName);, +, +      Uri uri = new Uri.Builder(), +          .scheme(ContentResolver.SCHEME_ANDROID_RESOURCE), +          .authority(packageName), +          .path(String.valueOf(iconResourceId)), +          .build();, +, +      Bitmap bitmap = Glide.with(context), +          .asBitmap(), +          .load(uri), +          .submit(), +          .get();, +      assertThat(bitmap).isNotNull();, +    }, +  }, +, +  @Test, +  @Test, +  public void load_withApplicationIconResourceNameUri_asBitmap_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException, NameNotFoundException {]