[+++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +    private TranscodeRequest<String, Object, Object> request;, +        when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, +        request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, +        RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +    private TranscodeRequest<String, Object, Object> request;, +        when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, +        request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, +        RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ /dev/null, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +    private TranscodeRequest<String, Object, Object> request;, +        when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, +        request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, +        RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        RequestBuilder<Drawable, Drawable> firstRequest = requestManager.from(String.class).transcoder, +                (firstTranscoder), +        RequestBuilder<Drawable, Drawable> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +    private TranscodeRequest<String, Object, Object> request;, +        when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, +        request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, +        RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        RequestBuilder<Drawable, Drawable> firstRequest = requestManager.from(String.class).transcoder, +                (firstTranscoder), +        RequestBuilder<Drawable, Drawable> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import android.graphics.Bitmap;, +, +    private RequestBuilder<Bitmap, Bitmap> request;, +            public RequestBuilder<Bitmap, Bitmap> getPreloadRequestBuilder(Object item) {, +                return mock(RequestBuilder.class);, +            public RequestBuilder<Bitmap, Bitmap> getPreloadRequestBuilder(Object item) {, +                return mock(RequestBuilder.class);, +            public RequestBuilder getPreloadRequestBuilder(Object item) {, +            public RequestBuilder getPreloadRequestBuilder(Object item) {, +    private List<Integer> getTagetsSizes(RequestBuilder<?, ?> requestBuilder,, +            VerificationMode callVerificationMode) {, +        // TODO: fixme., +            public RequestBuilder getPreloadRequestBuilder(Object item) {, +        public RequestBuilder getPreloadRequestBuilder(Object item) {, +            return mock(RequestBuilder.class);, +++ b/.idea/codeStyleSettings.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +    private TranscodeRequest<String, Object, Object> request;, +        when(optionsApplier.apply(any(RequestBuilder.class))).thenAnswer(arg(0));, +        request = new TranscodeRequest<String, Object, Object>(Robolectric.application,, +        RequestBuilder<String, Object, Object, Object> builder = request.transcode(transcoder, Object.class);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        RequestBuilder<Drawable, Drawable> firstRequest = requestManager.from(String.class).transcoder, +                (firstTranscoder), +        RequestBuilder<Drawable, Drawable> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import android.graphics.Bitmap;, +, +    private RequestBuilder<Bitmap, Bitmap> request;]