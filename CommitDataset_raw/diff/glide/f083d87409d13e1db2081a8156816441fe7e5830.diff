[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final boolean isLoggingRequestOriginsEnabled;, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final boolean isLoggingRequestOriginsEnabled;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java, +  private static final long serialVersionUID = -7530898992688511851L;, +, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final boolean isLoggingRequestOriginsEnabled;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java, +  private static final long serialVersionUID = -7530898992688511851L;, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  // We need to rethrow only CallbackException, but not other types of Throwables., +  @SuppressWarnings("PMD.AvoidRethrowingException"), +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final boolean isLoggingRequestOriginsEnabled;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java, +  private static final long serialVersionUID = -7530898992688511851L;, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  // We need to rethrow only CallbackException, but not other types of Throwables., +  @SuppressWarnings("PMD.AvoidRethrowingException"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +  @SuppressWarnings("WeakerAccess"), +  @Synthetic, +  synchronized void callCallbackOnResourceReady(ResourceCallback cb) {, +  @SuppressWarnings("WeakerAccess"), +  @Synthetic, +  synchronized void callCallbackOnLoadFailed(ResourceCallback cb) {, +  // We have to post Runnables in a loop. Typically there will be very few callbacks. AccessorMethod, +  // seems to be a false positive, +  @SuppressWarnings(, +          {"WeakerAccess", "PMD.AvoidInstantiatingObjectsInLoops", "PMD.AccessorMethodGeneration"}), +  // We have to post Runnables in a loop. Typically there will be very few callbacks. Acessor method, +  // warning seems to be false positive., +  @SuppressWarnings(, +          {"WeakerAccess", "PMD.AvoidInstantiatingObjectsInLoops", "PMD.AccessorMethodGeneration"}), +      this(new ArrayList<ResourceCallbackAndExecutor>(2));, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/gradle.properties, +ANDROID_X_VERSION=1.0.0, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final boolean isLoggingRequestOriginsEnabled;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/CallbackException.java, +  private static final long serialVersionUID = -7530898992688511851L;, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  // We need to rethrow only CallbackException, but not other types of Throwables., +  @SuppressWarnings("PMD.AvoidRethrowingException"), +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +  @SuppressWarnings("WeakerAccess"), +  @Synthetic, +  synchronized void callCallbackOnResourceReady(ResourceCallback cb) {, +  @SuppressWarnings("WeakerAccess"), +  @Synthetic, +  synchronized void callCallbackOnLoadFailed(ResourceCallback cb) {, +  // We have to post Runnables in a loop. Typically there will be very few callbacks. AccessorMethod, +  // seems to be a false positive, +  @SuppressWarnings(, +          {"WeakerAccess", "PMD.AvoidInstantiatingObjectsInLoops", "PMD.AccessorMethodGeneration"})]