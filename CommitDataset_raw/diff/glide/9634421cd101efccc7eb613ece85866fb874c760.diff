[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, including: " + getName(typeElement));, +  private static String getQualifiedMethodName(ExecutableElement executableElement) {, +    return getEnclosingClassName(executableElement) + "#" + getName(executableElement);, +  }, +, +  private static String getEnclosingClassName(Element element) {, +    return element.getEnclosingElement().toString();, +  }, +, +  private static String getName(Element element) {, +    return element.toString();, +  }, +, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, with private constructors and only static", +              + " methods. Found a non-private constructor in: " + getEnclosingClassName(element));, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, with private constructors and only static", +              + " methods. Found parameters in the constructor of: ", +              + getEnclosingClassName(element));, +          + " object, but " + getQualifiedMethodName(executableElement) + " returns " + returnType, +          + ". If you're using old style @GlideOption methods, your method may have a void return", +          + " type, but doing so is deprecated and support will be removed in a future version");, +          + "RequestOptions object as their first parameter, but ", +          + getQualifiedMethodName(executableElement) + " has none");, +          + " RequestOptions object as their first parameter, but the first parameter in ", +          + getQualifiedMethodName(executableElement) + " is " + expected);, +          + getQualifiedMethodName(element));, +          + getQualifiedMethodName(element));, +          + expectedClassName + "> object, but " + getQualifiedMethodName(executableElement), +          + " returns: " + returnType + ". If you're using old style @GlideType methods, your", +          + " method may have a void return type, but doing so is deprecated and support will be", +          + " removed in a future version");, +          + getQualifiedMethodName(executableElement));, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType, +          + " for: " + getQualifiedMethodName(executableElement));, +          getQualifiedMethodName(executableElement), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, including: " + getName(typeElement));, +  private static String getQualifiedMethodName(ExecutableElement executableElement) {, +    return getEnclosingClassName(executableElement) + "#" + getName(executableElement);, +  }, +, +  private static String getEnclosingClassName(Element element) {, +    return element.getEnclosingElement().toString();, +  }, +, +  private static String getName(Element element) {, +    return element.toString();, +  }, +, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, with private constructors and only static", +              + " methods. Found a non-private constructor in: " + getEnclosingClassName(element));, +      throw new IllegalArgumentException(, +          "RequestOptionsExtensions must be public, with private constructors and only static", +              + " methods. Found parameters in the constructor of: ", +              + getEnclosingClassName(element));, +          + " object, but " + getQualifiedMethodName(executableElement) + " returns " + returnType, +          + ". If you're using old style @GlideOption methods, your method may have a void return", +          + " type, but doing so is deprecated and support will be removed in a future version");, +          + "RequestOptions object as their first parameter, but ", +          + getQualifiedMethodName(executableElement) + " has none");, +          + " RequestOptions object as their first parameter, but the first parameter in ", +          + getQualifiedMethodName(executableElement) + " is " + expected);, +          + getQualifiedMethodName(element));, +          + getQualifiedMethodName(element));, +          + expectedClassName + "> object, but " + getQualifiedMethodName(executableElement), +          + " returns: " + returnType + ". If you're using old style @GlideType methods, your", +          + " method may have a void return type, but doing so is deprecated and support will be", +          + " removed in a future version");, +          + getQualifiedMethodName(executableElement));, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType, +          + " for: " + getQualifiedMethodName(executableElement));, +          getQualifiedMethodName(executableElement), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java, +import static org.junit.Assert.fail;, +import com.google.common.truth.Truth;, +    try {, +      fail("Failed to throw expected exception");, +    } catch (RuntimeException e) {, +      Throwable cause = e.getCause();, +      Truth.assertThat(cause.getMessage()).contains("non-private constructor");, +      Truth.assertThat(cause.getMessage()).contains("PublicConstructor");, +, +    }, +  public void compilation_withPackagePrivateExtension_fails() {, +    try {, +                  "PackagePrivateExtension",, +                  "class PackagePrivateExtension {",, +                  "  private PackagePrivateExtension() {}",, +      fail("Failed to throw expected exception");, +    } catch (RuntimeException e) {, +      Throwable cause = e.getCause();, +      Truth.assertThat(cause.getMessage()).contains("must be public");, +      Truth.assertThat(cause.getMessage()).contains("PackagePrivateExtension");, +    }]