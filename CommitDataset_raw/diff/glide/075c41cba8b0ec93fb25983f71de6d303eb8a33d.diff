[+++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +    private boolean isErrorSet = false;, +, +            isErrorSet = false;, +            if (!isImageSet && !isErrorSet) {, +        isErrorSet = false;, +                    isErrorSet = true;, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +    private boolean isErrorSet = false;, +, +            isErrorSet = false;, +            if (!isImageSet && !isErrorSet) {, +        isErrorSet = false;, +                    isErrorSet = true;, +++ b/library/tests/src/com/bumptech/glide/ImagePresenterTest.java, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.loader.image.ImageLoader;, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.resize.load.Transformation;, +, +    public void testErrorPlaceholderIsSetOnException() {, +        Drawable errorDrawable = new ColorDrawable(Color.RED);, +        ImagePresenter<Object> imagePresenter = new ImagePresenter.Builder<Object>(), +                .setImageView(imageView), +                .setModelLoader(new ModelLoader<Object>() {, +                    @Override, +                    public StreamLoader getStreamLoader(Object model, int width, int height) {, +                        return new StreamLoader() {, +                            @Override, +                            public void loadStream(StreamReadyCallback cb) {, +                            }, +, +                            @Override, +                            public void cancel() {, +                            }, +                        };, +                    }, +, +                    @Override, +                    public String getId(Object model) {, +                        return model.toString();, +                    }, +                }), +                .setImageLoader(new ImageLoader() {, +                    @Override, +                    public Object fetchImage(String id, StreamLoader streamLoader, Transformation transformation, int width, int height, ImageReadyCallback cb) {, +                        cb.onException(new Exception("Test"));, +                        return null;, +                    }, +, +                    @Override, +                    public void clear() { }, +                }), +                .setErrorDrawable(errorDrawable), +                .build();, +, +        assertNull(imageView.getDrawable());, +        imagePresenter.setModel(new Object());, +        assertEquals(errorDrawable, imageView.getDrawable());, +    }]