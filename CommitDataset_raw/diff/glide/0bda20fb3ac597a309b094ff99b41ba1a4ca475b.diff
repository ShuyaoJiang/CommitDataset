[+++ b/library/src/androidTest/java/com/bumptech/glide/util/TransformationUtilsTest.java, +import org.robolectric.annotation.Config;, +import org.robolectric.annotation.Implementation;, +import org.robolectric.annotation.Implements;, +import org.robolectric.shadows.ShadowBitmap;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.when;, +@Config(shadows = { TransformationUtilsTest.AlphaShadowBitmap.class }), +    @Test, +    public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapIsReused() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +, +        toReuse.setHasAlpha(false);, +        toTransform.setHasAlpha(true);, +, +        Bitmap result = TransformationUtils.centerCrop(toReuse, toTransform, toReuse.getWidth(), toReuse.getHeight());, +, +        assertEquals(toReuse, result);, +        assertTrue(result.hasAlpha());, +    }, +, +    @Test, +    public void testCenterCropSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlphaAndOutBitmapIsReused() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +, +        toReuse.setHasAlpha(true);, +        toTransform.setHasAlpha(false);, +, +        Bitmap result = TransformationUtils.centerCrop(toReuse, toTransform, toReuse.getWidth(), toReuse.getHeight());, +, +        assertEquals(toReuse, result);, +        assertFalse(result.hasAlpha());, +    }, +, +    @Test, +    public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        BitmapPool pool = mock(BitmapPool.class);, +, +        toTransform.setHasAlpha(true);, +, +        Bitmap result = TransformationUtils.centerCrop(null, toTransform, toTransform.getWidth() / 2,, +                toTransform.getHeight() / 2);, +, +        assertTrue(result.hasAlpha());, +    }, +, +    @Test, +    public void testSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlpha() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        toTransform.setHasAlpha(false);, +, +        Bitmap result = TransformationUtils.centerCrop(null, toTransform, toTransform.getWidth() / 2,, +                toTransform.getHeight() / 2);, +, +        assertFalse(result.hasAlpha());, +    }, +, +    @Test, +    public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapIsReused() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +        BitmapPool bitmapPool = mock(BitmapPool.class);, +        when(bitmapPool.get(eq(toReuse.getWidth()), eq(toReuse.getHeight()), eq(toReuse.getConfig()))), +                .thenReturn(toReuse);, +, +        toReuse.setHasAlpha(false);, +        toTransform.setHasAlpha(true);, +, +        Bitmap result = TransformationUtils.fitCenter(toTransform, bitmapPool, toReuse.getWidth(), toReuse.getHeight());, +, +        assertEquals(toReuse, result);, +        assertTrue(result.hasAlpha());, +    }, +, +    @Test, +    public void testFitCenterSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlphaAndOutBitmapIsReused() {, +        Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);, +        BitmapPool bitmapPool = mock(BitmapPool.class);, +        when(bitmapPool.get(eq(toReuse.getWidth()), eq(toReuse.getHeight()), eq(toReuse.getConfig()))), +                .thenReturn(toReuse);, +, +        toReuse.setHasAlpha(true);, +        toTransform.setHasAlpha(false);, +, +        Bitmap result = TransformationUtils.fitCenter(toTransform, bitmapPool, toReuse.getWidth(), toReuse.getHeight());, +, +        assertEquals(toReuse, result);, +        assertFalse(result.hasAlpha());]