[+++ b/build.gradle, +        if (project.hasProperty("android"), +                && project.name != 'pmd', +                && project.name != 'findbugs') {, +++ b/build.gradle, +        if (project.hasProperty("android"), +                && project.name != 'pmd', +                && project.name != 'findbugs') {, +++ b/library/build.gradle, +check.dependsOn(':library:findbugs:findbugs'), +check.dependsOn(':library:pmd:pmd'), +// Used in pmd and findbugs subprojects., +@SuppressWarnings("GroovyUnusedDeclaration"), +++ b/build.gradle, +        if (project.hasProperty("android"), +                && project.name != 'pmd', +                && project.name != 'findbugs') {, +++ b/library/build.gradle, +check.dependsOn(':library:findbugs:findbugs'), +check.dependsOn(':library:pmd:pmd'), +// Used in pmd and findbugs subprojects., +@SuppressWarnings("GroovyUnusedDeclaration"), +++ b/library/findbugs/build.gradle, +apply plugin: 'findbugs', +, +findbugs {, +    toolVersion FINDBUGS_VERSION, +}, +, +def library = project(':library'), +, +tasks.create('findbugs', FindBugs) {, +    dependsOn library.tasks.compileDebugJavaWithJavac, +, +    description 'Run findbugs', +    group 'verification', +, +    classes = fileTree(library.tasks.compileDebugJavaWithJavac.destinationDir), +    source library.android.sourceSets.main.java.srcDirs, +    classpath = files(), +    doFirst {, +        classpath += library.classPathForQuality(), +    }, +    effort = 'max', +    excludeFilter = file("${library.projectDir}/findbugs-exclude.xml"), +, +    // Failures are caught and printed by the violations plugin., +    ignoreFailures = true, +, +    reports {, +        xml.enabled = true, +        html.enabled = false, +    }, +}, +++ b/build.gradle, +        if (project.hasProperty("android"), +                && project.name != 'pmd', +                && project.name != 'findbugs') {, +++ b/library/build.gradle, +check.dependsOn(':library:findbugs:findbugs'), +check.dependsOn(':library:pmd:pmd'), +// Used in pmd and findbugs subprojects., +@SuppressWarnings("GroovyUnusedDeclaration"), +++ b/library/findbugs/build.gradle, +apply plugin: 'findbugs', +, +findbugs {, +    toolVersion FINDBUGS_VERSION, +}, +, +def library = project(':library'), +, +tasks.create('findbugs', FindBugs) {, +    dependsOn library.tasks.compileDebugJavaWithJavac, +, +    description 'Run findbugs', +    group 'verification', +, +    classes = fileTree(library.tasks.compileDebugJavaWithJavac.destinationDir), +    source library.android.sourceSets.main.java.srcDirs, +    classpath = files(), +    doFirst {, +        classpath += library.classPathForQuality(), +    }, +    effort = 'max', +    excludeFilter = file("${library.projectDir}/findbugs-exclude.xml"), +, +    // Failures are caught and printed by the violations plugin., +    ignoreFailures = true, +, +    reports {, +        xml.enabled = true, +        html.enabled = false, +    }, +}, +++ b/library/pmd/build.gradle, +apply plugin: 'pmd', +, +def library = project(':library'), +]