[+++ b/library/src/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.Engine;, +            BitmapPool bitmapPool, ImageViewTargetFactory factory, Engine engine) {, +        super(context, model, streamLoadProvider, fileDescriptorLoadProvider, Bitmap.class, factory, engine);, +        return transform(new CenterCrop(bitmapPool));, +        return transform(new FitCenter(bitmapPool));, +++ b/library/src/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.Engine;, +            BitmapPool bitmapPool, ImageViewTargetFactory factory, Engine engine) {, +        super(context, model, streamLoadProvider, fileDescriptorLoadProvider, Bitmap.class, factory, engine);, +        return transform(new CenterCrop(bitmapPool));, +        return transform(new FitCenter(bitmapPool));, +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.Engine;, +    private final Engine engine;, +            Class<ResourceType> resourceClass, ImageViewTargetFactory viewTargetFactory,, +            Engine engine) {, +        this.engine = engine;, +                animationId, animation, requestCoordinator, engine, getFinalTransformation(),, +++ b/library/src/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.Engine;, +            BitmapPool bitmapPool, ImageViewTargetFactory factory, Engine engine) {, +        super(context, model, streamLoadProvider, fileDescriptorLoadProvider, Bitmap.class, factory, engine);, +        return transform(new CenterCrop(bitmapPool));, +        return transform(new FitCenter(bitmapPool));, +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.Engine;, +    private final Engine engine;, +            Class<ResourceType> resourceClass, ImageViewTargetFactory viewTargetFactory,, +            Engine engine) {, +        this.engine = engine;, +                animationId, animation, requestCoordinator, engine, getFinalTransformation(),, +++ b/library/src/com/bumptech/glide/Glide.java, +        return new ModelRequest(context, glide.defaultStreamProvider, glide.defaultFileDescriptorProvider,, +                glide.bitmapPool, glide.factory, glide.engine);, +        private Engine engine;, +                BitmapPool bitmapPool, ImageViewTargetFactory factory, Engine engine) {, +            this.engine = engine;, +            return new ImageModelRequest<T>(context, modelLoader, streamDataProvider, bitmapPool, factory, engine);, +            return new ImageModelRequest<byte[]>(context, modelLoader, streamDataProvider, bitmapPool, factory, engine);, +            return new VideoModelRequest<T>(context, modelLoader, fileDescriptorDataProvider, bitmapPool, factory,, +                    engine);, +            return new BitmapRequestBuilder<byte[]>(context, model, loadProvider, null, bitmapPool, factory, engine);, +                    bitmapPool, factory, engine);, +        private Engine engine;, +                ImageViewTargetFactory factory, Engine engine) {, +            this.engine = engine;, +                    factory, engine);, +        private Engine engine;, +                ImageViewTargetFactory factory, Engine engine) {, +            this.engine = engine;, +                    new FixedLoadProvider<T, InputStream, Bitmap>(loader, dataLoadProvider), null, bitmapPool, factory,, +                    engine);]