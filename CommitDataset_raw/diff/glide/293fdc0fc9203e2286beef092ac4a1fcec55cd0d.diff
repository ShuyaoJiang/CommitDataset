[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    //special downsampler that doesn't check exif, and assumes inWidth and inHeight == outWidth and outHeight so it, +    //doesn't need to read the image header for size information, +    private static Downsampler DISK_CACHE_DOWNSAMPLER = new Downsampler() {, +, +        @Override, +        public Bitmap downsample(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool, int outWidth, int outHeight) {, +            return downsampleWithSize(bis, options, pool, outWidth, outHeight, 1);, +        }, +, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return 0;, +        }, +    };, +, +, +                result = resizer.load(is, width, height, DISK_CACHE_DOWNSAMPLER);, +    }, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    //special downsampler that doesn't check exif, and assumes inWidth and inHeight == outWidth and outHeight so it, +    //doesn't need to read the image header for size information, +    private static Downsampler DISK_CACHE_DOWNSAMPLER = new Downsampler() {, +, +        @Override, +        public Bitmap downsample(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool, int outWidth, int outHeight) {, +            return downsampleWithSize(bis, options, pool, outWidth, outHeight, 1);, +        }, +, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return 0;, +        }, +    };, +, +, +                result = resizer.load(is, width, height, DISK_CACHE_DOWNSAMPLER);, +    }, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, +            e.printStackTrace();, +        final int inWidth = inDimens[0];, +        final int inHeight = inDimens[1];, +            //if we're rotating the image +-90 degrees, we need to downsample accordingly so the image width is, +            //decreased to near our target's height and the image height is decreased to near our target width, +            sampleSize = getSampleSize(inHeight, inWidth, outWidth, outHeight);, +        final Bitmap downsampled = downsampleWithSize(bis, options, pool, inWidth, inHeight, sampleSize);, +    protected Bitmap downsampleWithSize(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool, int inWidth, int inHeight, int sampleSize) {, +        if (sampleSize > 1) {, +            options.inSampleSize = sampleSize;, +        } else {, +            setInBitmap(options, pool.get(inWidth, inHeight));, +        }, +        return decodeStream(bis, options);, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    //special downsampler that doesn't check exif, and assumes inWidth and inHeight == outWidth and outHeight so it, +    //doesn't need to read the image header for size information, +    private static Downsampler DISK_CACHE_DOWNSAMPLER = new Downsampler() {, +, +        @Override, +        public Bitmap downsample(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool, int outWidth, int outHeight) {, +            return downsampleWithSize(bis, options, pool, outWidth, outHeight, 1);, +        }, +, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return 0;, +        }, +    };, +, +, +                result = resizer.load(is, width, height, DISK_CACHE_DOWNSAMPLER);, +    }, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, +            e.printStackTrace();, +        final int inWidth = inDimens[0];, +        final int inHeight = inDimens[1];, +            //if we're rotating the image +-90 degrees, we need to downsample accordingly so the image width is, +            //decreased to near our target's height and the image height is decreased to near our target width, +            sampleSize = getSampleSize(inHeight, inWidth, outWidth, outHeight);, +        final Bitmap downsampled = downsampleWithSize(bis, options, pool, inWidth, inHeight, sampleSize);, +    protected Bitmap downsampleWithSize(RecyclableBufferedInputStream bis, BitmapFactory.Options options, BitmapPool pool, int inWidth, int inHeight, int sampleSize) {, +        if (sampleSize > 1) {, +            options.inSampleSize = sampleSize;, +        } else {, +            setInBitmap(options, pool.get(inWidth, inHeight));, +        }, +        return decodeStream(bis, options);, +    }, +, +++ b/library/src/com/bumptech/glide/resize/load/ImageResizer.java, +    public Bitmap load(InputStream is, int outWidth, int outHeight, Downsampler downsampler) {, +        return load(is, outWidth, outHeight, downsampler, Transformation.NONE);, +    }, +]