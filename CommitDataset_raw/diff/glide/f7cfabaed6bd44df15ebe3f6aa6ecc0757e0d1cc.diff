[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isCacheable*/);, +        engineResource = new EngineResource<Object>(mock(Resource.class), true);, +        engineResource = new EngineResource<Object>(mock(Resource.class), false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isCacheable*/);, +        engineResource = new EngineResource<Object>(mock(Resource.class), true);, +        engineResource = new EngineResource<Object>(mock(Resource.class), false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        when(harness.resource.isCacheable()).thenReturn(false);, +        when(harness.resource.isCacheable()).thenReturn(false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isCacheable*/);, +        engineResource = new EngineResource<Object>(mock(Resource.class), true);, +        engineResource = new EngineResource<Object>(mock(Resource.class), false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        when(harness.resource.isCacheable()).thenReturn(false);, +        when(harness.resource.isCacheable()).thenReturn(false);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +            result = new EngineResource(cached, true /*isCacheable*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isCacheable*/);, +        engineResource = new EngineResource<Object>(mock(Resource.class), true);, +        engineResource = new EngineResource<Object>(mock(Resource.class), false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        when(harness.resource.isCacheable()).thenReturn(false);, +        when(harness.resource.isCacheable()).thenReturn(false);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +            result = new EngineResource(cached, true /*isCacheable*/);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +                EngineResource engineResource = engineResourceFactory.build(resource, isCacheable);, +        public <R> EngineResource<R> build(Resource<R> resource, boolean isMemoryCacheable) {, +            return new EngineResource<R>(resource, isMemoryCacheable);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    public void testResourceIsCacheableWhenIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +    public void testResourceIsCacheableWhenNotIsCacheableOnReady() {, +        verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isCacheable*/);, +        engineResource = new EngineResource<Object>(mock(Resource.class), true);, +        engineResource = new EngineResource<Object>(mock(Resource.class), false);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        when(harness.resource.isCacheable()).thenReturn(false);, +        when(harness.resource.isCacheable()).thenReturn(false);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +            result = new EngineResource(cached, true /*isCacheable*/);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +                EngineResource engineResource = engineResourceFactory.build(resource, isCacheable);, +        public <R> EngineResource<R> build(Resource<R> resource, boolean isMemoryCacheable) {, +            return new EngineResource<R>(resource, isMemoryCacheable);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java, +    private final boolean isCacheable;, +    EngineResource(Resource<Z> toWrap, boolean isCacheable) {, +        this.isCacheable = isCacheable;]