[+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, +  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, +    return new GenericTransitionOptions<TranscodeType>().dontTransition();, +  }, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, +  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, +    return new GenericTransitionOptions<TranscodeType>().dontTransition();, +  }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +  private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, +  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, +    return new GenericTransitionOptions<TranscodeType>().dontTransition();, +  }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +  private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +public final class DrawableTransitionOptions extends, +    TransitionOptions<DrawableTransitionOptions, Drawable> {, +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, +  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, +    return new GenericTransitionOptions<TranscodeType>().dontTransition();, +  }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +  private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +public final class DrawableTransitionOptions extends, +    TransitionOptions<DrawableTransitionOptions, Drawable> {, +++ b/samples/flickr/build.gradle, +    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java, +@SuppressWarnings("PMD.UseUtilityClass"), +, +  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {, +    return new GenericTransitionOptions<TranscodeType>().dontTransition();, +  }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +  private final RequestManager requestManager;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +public final class DrawableTransitionOptions extends, +    TransitionOptions<DrawableTransitionOptions, Drawable> {, +++ b/samples/flickr/build.gradle, +    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}", +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +import static com.bumptech.glide.GenericTransitionOptions.withNoTransition;, +import android.graphics.Rect;, +import android.support.v7.widget.GridLayoutManager;, +import android.support.v7.widget.RecyclerView;, +import android.util.Log;, +import java.util.Collections;, +  private RecyclerView grid;, +  private GridLayoutManager layoutManager;, +        .transition(withNoTransition()), +        .transition(withNoTransition()), +    final int gridMargin = getResources().getDimensionPixelOffset(R.dimen.grid_margin);, +    int spanCount = getResources().getDisplayMetrics().widthPixels / (photoSize + (2 * gridMargin));, +    grid = (RecyclerView) result.findViewById(R.id.flickr_photo_grid);, +    layoutManager = new GridLayoutManager(getActivity(), spanCount);, +    grid.setLayoutManager(layoutManager);, +, +    grid.addItemDecoration(new RecyclerView.ItemDecoration() {, +      @Override, +      public void getItemOffsets(Rect outRect, View view, RecyclerView parent,, +          RecyclerView.State state) {, +        outRect.set(gridMargin, gridMargin, gridMargin, gridMargin);, +      }, +    });, +    grid.setRecyclerListener(new RecyclerView.RecyclerListener() {, +      @Override, +      public void onViewRecycled(RecyclerView.ViewHolder holder) {, +        PhotoViewHolder photoViewHolder = (PhotoViewHolder) holder;, +        Glide.with(FlickrPhotoGrid.this).clear(photoViewHolder.imageView);, +      }, +    });, +, +    int heightCount = getResources().getDisplayMetrics().heightPixels / photoSize;, +    grid.getRecycledViewPool().setMaxRecycledViews(0, spanCount * heightCount * 2);, +    grid.setItemViewCacheSize(0);, +        new FixedPreloadSizeProvider<>(photoSize, photoSize);, +    final ListPreloader<Photo> preloader = new ListPreloader<>(Glide.with(this), adapter,, +    grid.addOnScrollListener(new RecyclerToListViewScrollListener(preloader));, +      grid.scrollToPosition(index);, +      int index = layoutManager.findFirstVisibleItemPosition();, +  private class PhotoAdapter extends RecyclerView.Adapter<PhotoViewHolder> implements, +    private List<Photo> photos = Collections.emptyList();, +    public int getItemViewType(int position) {, +    public PhotoViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {, +      View view = inflater.inflate(R.layout.flickr_photo_grid_item, parent, false);, +      ViewGroup.LayoutParams params = view.getLayoutParams();, +      return new PhotoViewHolder(view);, +    @Override, +    public void onBindViewHolder(PhotoViewHolder holder, int position) {]