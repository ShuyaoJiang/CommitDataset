[+++ b/src/com/bumptech/photos/view/ImagePresenter.java, +import android.os.Handler;, +import android.os.SystemClock;, +    private static final String PENDING_LOAD_TOKEN = "pending_load";, +    private static final int PENDING_LOAD_DELAY = 20; //60 fps = 1000/60 = 16.67 ms, +, +    private Object pathToken;, +    private Object imageToken;, +, +    private Handler handler = new Handler();, +, +            if (width != 0 && height != 0) {, +                postPendingLoad();, +        imageView.getViewTreeObserver().addOnGlobalLayoutListener(new SizeObserver(imageView, ImagePresenter.this));, +                    pendingLoad = null;, +    private void postPendingLoad() {, +        if (pendingLoad == null) return;, +, +        //If an image view is actively changing sizes, we want to delay our resize job until, +        //the size has stabilized so that the image we load will match the final size, rather than some, +        //size part way through the change. One example of this is as part of an animation where a view is, +        //expanding or shrinking, +        handler.removeCallbacksAndMessages(PENDING_LOAD_TOKEN);, +        handler.postAtTime(pendingLoad, PENDING_LOAD_TOKEN, SystemClock.uptimeMillis() + PENDING_LOAD_DELAY);, +    }, +]