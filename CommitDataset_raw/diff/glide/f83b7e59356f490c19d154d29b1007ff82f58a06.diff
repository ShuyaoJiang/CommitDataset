[+++ b/library/src/com/bumptech/glide/Glide.java, +     * A class for handling exceptions that occur while loading images, +     *, +     * @param <T> The type of the model being loaded, +     */, +    public static abstract class ExceptionHandler<T> {, +, +        /**, +         * Called when an exception occurs during a load. Will only be called if we currently want to display an image, +         * for the given model in the given target. It is recommended to create a single instance per activity/fragment, +         * rather than instantiate a new object for each call to {@code Glide.load()} to avoid object churn., +         *, +         * <p>, +         *     It is safe to reload this or a different model or change what is displayed in the target at this point., +         *     For example:, +         * <pre>, +         * <code>, +         *     public void onException(Exception e, T model, Target target) {, +         *         target.setPlaceholder(R.drawable.a_specific_error_for_my_exception);, +         *         Glide.load(model).into(target);, +         *     }, +         * </code>, +         * </pre>, +         * </p>, +         *, +         * <p>, +         *     Note - if you want to reload this or any other model after an exception, you will need to include all, +         *     relevant builder calls (like centerCrop, placeholder etc)., +         * </p>, +         *, +         * @param e The exception, or null, +         * @param model The model we were trying to load when the exception occured, +         * @param target The {@link Target} we were trying to load the image into, +         */, +        public abstract void onException(Exception e, T model, Target target);, +, +        /**, +         * {@inheritDoc}, +         *, +         * <p>, +         *     By default we only check the both objects are not null and that their classes are identical. This assumes, +         *     that two instances of the same anonymous inner class will behave identically., +         * </p>, +         */, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            return true;, +        }, +, +        /**, +         * {@inheritDoc }, +         */, +        @Override, +        public int hashCode() {, +            throw new UnsupportedOperationException();, +        }, +    }, +, +    /**, +        private ExceptionHandler<T> exceptionHandler;, +         * Sets an exception handler to use if a load fails. Note it's best to create a single instance of an exception, +         * handler per activity/fragment rather than pass one in per request., +         *, +         * @param exceptionHandler The exception handler to use, +         * @return This request, +         */, +        public Request<T> exception(ExceptionHandler<T> exceptionHandler) {, +            this.exceptionHandler = exceptionHandler;, +, +            return this;, +        }, +, +        /**, +        private ImagePresenter<T> buildImagePresenter(final Target target) {, +            if (exceptionHandler != null) {, +                builder.setExceptionHandler(new ImagePresenter.ExceptionHandler<T>() {, +                    @Override, +                    public void onException(Exception e, T model, boolean isCurrent) {, +                        if (isCurrent) {, +                            exceptionHandler.onException(e, model, target);, +                        }, +                    }, +                });, +            }, +, +        private final ExceptionHandler exceptionHandler;, +            exceptionHandler = request.exceptionHandler;, +            if (exceptionHandler == null ? metadata.exceptionHandler != null :, +                    !exceptionHandler.equals(metadata.exceptionHandler)) return false;, +++ b/library/src/com/bumptech/glide/Glide.java, +     * A class for handling exceptions that occur while loading images, +     *, +     * @param <T> The type of the model being loaded, +     */, +    public static abstract class ExceptionHandler<T> {, +, +        /**]