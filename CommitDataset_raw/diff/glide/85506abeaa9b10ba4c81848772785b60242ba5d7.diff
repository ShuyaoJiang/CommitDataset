[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + * Interface for an array pool that pools arrays of different types., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + * Interface for an array pool that pools arrays of different types., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, + * Adapter for handling primitive byte arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + * Interface for an array pool that pools arrays of different types., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, + * Adapter for handling primitive byte arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, + * Adapter for handling primitive int arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + * Interface for an array pool that pools arrays of different types., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, + * Adapter for handling primitive byte arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, + * Adapter for handling primitive int arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.util.Preconditions;, +, +    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);, +      result = getArrayForKey(key);, +  @SuppressWarnings("unchecked"), +  @Nullable, +  private <T> T getArrayForKey(Key key) {, +    return (T) groupedMap.get(key);, +  }, +, +      Preconditions.checkNotNull(evicted);, +      ArrayAdapterInterface<Object> arrayAdapter = getAdapterFromObject(evicted);, +  private void decrementArrayOfSize(int size, Class<?> arrayClass) {, +  private NavigableMap<Integer, Integer> getSizesForAdapter(Class<?> arrayClass) {, +  @SuppressWarnings("unchecked"), +  private <T> ArrayAdapterInterface<T> getAdapterFromObject(T object) {, +    return (ArrayAdapterInterface<T>) getAdapterFromType(object.getClass());, +  }, +, +  @SuppressWarnings("unchecked"), +  private <T> ArrayAdapterInterface<T> getAdapterFromType(Class<T> arrayPoolClass) {, +    int currentSize = 0;, +    for (Class<?> type : sortedSizes.keySet()) {, +        ArrayAdapterInterface<?> adapter = getAdapterFromType(type);, +        currentSize += size * sortedSizes.get(type).get(size) * adapter.getElementSizeInBytes();, +    return currentSize;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java, + * Interface for handling operations on a primitive array type., +   * TAG for logging., +   * Return the length of the given array., +   * Reset the array for re-use (e.g. set all values to 0)., +   * Allocate and return an array of the specified size., +   * Return the size of an element in the array in bytes (e.g. for int return 4)., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java, + * Interface for an array pool that pools arrays of different types., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java, + * Adapter for handling primitive byte arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java, + * Adapter for handling primitive int arrays., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +import android.support.annotation.Nullable;, +import com.bumptech.glide.util.Preconditions;, +, +    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);, +      result = getArrayForKey(key);]