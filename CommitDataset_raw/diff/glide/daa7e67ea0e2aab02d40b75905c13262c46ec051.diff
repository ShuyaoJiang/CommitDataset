[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private final ArrayPool arrayPool;, +  Glide(, +      Engine engine,, +      MemoryCache memoryCache,, +      BitmapPool bitmapPool,, +      ArrayPool arrayPool,, +      Context context,, +      int logLevel,, +      RequestOptions defaultRequestOptions) {, +    this.arrayPool = arrayPool;, +    this.byteArrayPool = new LruByteArrayPool();, +    ByteBufferGifDecoder byteBufferGifDecoder =, +        new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, +  public ArrayPool getArrayPool() {, +    return arrayPool;, +  }, +, +    arrayPool.clearMemory();, +    arrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private final ArrayPool arrayPool;, +  Glide(, +      Engine engine,, +      MemoryCache memoryCache,, +      BitmapPool bitmapPool,, +      ArrayPool arrayPool,, +      Context context,, +      int logLevel,, +      RequestOptions defaultRequestOptions) {, +    this.arrayPool = arrayPool;, +    this.byteArrayPool = new LruByteArrayPool();, +    ByteBufferGifDecoder byteBufferGifDecoder =, +        new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, +  public ArrayPool getArrayPool() {, +    return arrayPool;, +  }, +, +    arrayPool.clearMemory();, +    arrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;, +  private ArrayPool arrayPool;, +   * Sets the {@link ArrayPool} implementation to allow variable sized arrays to be stored, +   * @param arrayPool The pool to use., +  public GlideBuilder setArrayPool(ArrayPool arrayPool) {, +    this.arrayPool = arrayPool;, +    if (arrayPool == null) {, +      arrayPool = new LruArrayPool(memorySizeCalculator.getArrayPoolSizeInBytes());, +    return new Glide(, +        engine,, +        memoryCache,, +        bitmapPool,, +        arrayPool,, +        context,, +        logLevel,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private final ArrayPool arrayPool;, +  Glide(, +      Engine engine,, +      MemoryCache memoryCache,, +      BitmapPool bitmapPool,, +      ArrayPool arrayPool,, +      Context context,, +      int logLevel,, +      RequestOptions defaultRequestOptions) {, +    this.arrayPool = arrayPool;, +    this.byteArrayPool = new LruByteArrayPool();, +    ByteBufferGifDecoder byteBufferGifDecoder =, +        new ByteBufferGifDecoder(context, bitmapPool, arrayPool);, +  public ArrayPool getArrayPool() {, +    return arrayPool;, +  }, +, +    arrayPool.clearMemory();, +    arrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;, +  private ArrayPool arrayPool;, +   * Sets the {@link ArrayPool} implementation to allow variable sized arrays to be stored, +   * @param arrayPool The pool to use., +  public GlideBuilder setArrayPool(ArrayPool arrayPool) {, +    this.arrayPool = arrayPool;, +    if (arrayPool == null) {, +      arrayPool = new LruArrayPool(memorySizeCalculator.getArrayPoolSizeInBytes());, +    return new Glide(, +        engine,, +        memoryCache,, +        bitmapPool,, +        arrayPool,, +        context,, +        logLevel,]