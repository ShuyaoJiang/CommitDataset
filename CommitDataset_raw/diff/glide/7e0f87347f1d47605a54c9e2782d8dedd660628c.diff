[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.times;, +    verify(request).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withNullRequest_doesNothingAndReturnsFalse() {, +    assertThat(tracker.clearRemoveAndRecycle(null)).isFalse();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withUnTrackedRequest_doesNothingAndReturnsFalse() {, +    Request request = mock(Request.class);, +, +    assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, +    verify(request, never()).clear();, +    verify(request, never()).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturnsTrue() {, +    Request request = mock(Request.class);, +    tracker.addRequest(request);, +, +    assertThat(tracker.clearRemoveAndRecycle(request)).isTrue();, +    verify(request).clear();, +    verify(request).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {, +    Request request = mock(Request.class);, +    tracker.addRequest(request);, +    tracker.clearRemoveAndRecycle(request);, +    assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, +    verify(request, times(1)).clear();, +    verify(request, times(1)).recycle();, +    tracker.clearRemoveAndRecycle(request);, +    verify(request, times(1)).clear();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).begin();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).clear();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();, +  private class ClearAndRemoveRequest implements Answer<Void> {, +    public ClearAndRemoveRequest(Request toRemove) {, +      tracker.clearRemoveAndRecycle(toRemove);, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.times;, +    verify(request).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withNullRequest_doesNothingAndReturnsFalse() {, +    assertThat(tracker.clearRemoveAndRecycle(null)).isFalse();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withUnTrackedRequest_doesNothingAndReturnsFalse() {, +    Request request = mock(Request.class);, +, +    assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, +    verify(request, never()).clear();, +    verify(request, never()).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturnsTrue() {, +    Request request = mock(Request.class);, +    tracker.addRequest(request);, +, +    assertThat(tracker.clearRemoveAndRecycle(request)).isTrue();, +    verify(request).clear();, +    verify(request).recycle();, +  }, +, +  @Test, +  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {, +    Request request = mock(Request.class);, +    tracker.addRequest(request);, +    tracker.clearRemoveAndRecycle(request);, +    assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();, +, +    verify(request, times(1)).clear();, +    verify(request, times(1)).recycle();, +    tracker.clearRemoveAndRecycle(request);, +    verify(request, times(1)).clear();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).begin();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).clear();, +    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();, +  private class ClearAndRemoveRequest implements Answer<Void> {, +    public ClearAndRemoveRequest(Request toRemove) {, +      tracker.clearRemoveAndRecycle(toRemove);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    if (request != null) {]