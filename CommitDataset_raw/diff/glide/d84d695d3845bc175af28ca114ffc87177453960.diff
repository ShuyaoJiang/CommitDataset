[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, +    private final BitmapDrawable drawable;, +    private final BitmapPool bitmapPool;, +, +    private BitmapDrawable next;, +, +        this.next = drawable;, +        // We usually just have one consumer, so return the given drawable (created on a bg thread) to the first, +        // consumer and then create a new drawable for each subsequent consumer., +        if (next == null) {, +            next = (BitmapDrawable) drawable.getConstantState().newDrawable();, +        }, +        BitmapDrawable result = next;, +        next = null;, +        return result;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, +    private final BitmapDrawable drawable;, +    private final BitmapPool bitmapPool;, +, +    private BitmapDrawable next;, +, +        this.next = drawable;, +        // We usually just have one consumer, so return the given drawable (created on a bg thread) to the first, +        // consumer and then create a new drawable for each subsequent consumer., +        if (next == null) {, +            next = (BitmapDrawable) drawable.getConstantState().newDrawable();, +        }, +        BitmapDrawable result = next;, +        next = null;, +        return result;, +++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java, +import static org.junit.Assert.assertFalse;, +, +    @Test, +    public void testReturnsDifferentDrawableEachTime() {, +        BitmapDrawableResource resource = harness.create();, +        BitmapDrawable first = resource.get();, +        BitmapDrawable second = resource.get();, +, +        assertFalse(first == second);, +    }, +]