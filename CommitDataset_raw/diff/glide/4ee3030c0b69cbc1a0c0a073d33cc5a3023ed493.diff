[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, +    @Test, +    public void testReturnsNullIfTransformReturnsNull() {, +        BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, +            @Override, +            public String getId() {, +                return null;, +            }, +, +            @Override, +            protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, +                return null;, +            }, +        };, +, +        Resource<Bitmap> resource = mock(Resource.class);, +        when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, +        assertNull(transform.transform(resource, 100, 100));, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, +    @Test, +    public void testReturnsNullIfTransformReturnsNull() {, +        BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, +            @Override, +            public String getId() {, +                return null;, +            }, +, +            @Override, +            protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, +                return null;, +            }, +        };, +, +        Resource<Bitmap> resource = mock(Resource.class);, +        when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, +        assertNull(transform.transform(resource, 100, 100));, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillIdleHandler.java, +                memoryCache.put(new UniqueKey(), BitmapResource.obtain(bitmap, bitmapPool));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, +    @Test, +    public void testReturnsNullIfTransformReturnsNull() {, +        BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, +            @Override, +            public String getId() {, +                return null;, +            }, +, +            @Override, +            protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, +                return null;, +            }, +        };, +, +        Resource<Bitmap> resource = mock(Resource.class);, +        when(resource.get()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, +        assertNull(transform.transform(resource, 100, 100));, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillIdleHandler.java, +                memoryCache.put(new UniqueKey(), BitmapResource.obtain(bitmap, bitmapPool));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java, +    /**, +     * Returns a new {@link BitmapResource} wrapping the given {@link Bitmap} if the Bitmap is non-null or null if the, +     * given Bitmap is null., +     *, +     * @param bitmap A Bitmap., +     * @param bitmapPool A non-null {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool}., +     */, +    public static BitmapResource obtain(Bitmap bitmap, BitmapPool bitmapPool) {, +        if (bitmap == null) {, +            return null;, +        } else {, +            return new BitmapResource(bitmap, bitmapPool);, +        }, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import static org.junit.Assert.assertNull;, +    @Test, +    public void testReturnsNullIfTransformReturnsNull() {, +        BitmapTransformation transform = new BitmapTransformation(bitmapPool) {, +, +            @Override, +            public String getId() {, +                return null;, +            }, +, +            @Override, +            protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, +                return null;, +            }, +        };, +]