[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +            transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +            transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +            transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;, +public class GifRequestBuilder<ModelType>, +        extends GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable>, +            LoadProvider<ModelType, InputStream, GifDrawable, GifDrawable> loadProvider, Glide glide,, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +            GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable> thumbnailRequest) {, +            ResourceDecoder<InputStream, GifDrawable> decoder) {, +            ResourceDecoder<File, GifDrawable> cacheDecoder) {, +            ResourceEncoder<GifDrawable> encoder) {, +    private GifDrawableTransformation[] toGifTransformations(Transformation<Bitmap>[] bitmapTransformations) {, +        GifDrawableTransformation[] transformations = new GifDrawableTransformation[bitmapTransformations.length];, +            transformations[i] = new GifDrawableTransformation(bitmapTransformations[i], glide.getBitmapPool());, +    public GifRequestBuilder<ModelType> transform(Transformation<GifDrawable>... transformations) {, +    public GifRequestBuilder<ModelType> transcoder(ResourceTranscoder<GifDrawable, GifDrawable> transcoder) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +            transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;, +public class GifRequestBuilder<ModelType>, +        extends GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable>, +            LoadProvider<ModelType, InputStream, GifDrawable, GifDrawable> loadProvider, Glide glide,, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +            GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable> thumbnailRequest) {, +            ResourceDecoder<InputStream, GifDrawable> decoder) {, +            ResourceDecoder<File, GifDrawable> cacheDecoder) {, +            ResourceEncoder<GifDrawable> encoder) {, +    private GifDrawableTransformation[] toGifTransformations(Transformation<Bitmap>[] bitmapTransformations) {, +        GifDrawableTransformation[] transformations = new GifDrawableTransformation[bitmapTransformations.length];, +            transformations[i] = new GifDrawableTransformation(bitmapTransformations[i], glide.getBitmapPool());, +    public GifRequestBuilder<ModelType> transform(Transformation<GifDrawable>... transformations) {, +    public GifRequestBuilder<ModelType> transcoder(ResourceTranscoder<GifDrawable, GifDrawable> transcoder) {, +++ b/library/src/main/java/com/bumptech/glide/GifTypeRequest.java, +import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;, + * {@link com.bumptech.glide.load.resource.gif.GifDrawable} into another resource type., +    private static <A, R> FixedLoadProvider<A, InputStream, GifDrawable, R> buildProvider(Glide glide,, +            ResourceTranscoder<GifDrawable, R> transcoder) {, +            transcoder = glide.buildTranscoder(GifDrawable.class, transcodeClass);, +        DataLoadProvider<InputStream, GifDrawable> dataLoadProvider = glide.buildDataProvider(InputStream.class,, +                GifDrawable.class);, +        return new FixedLoadProvider<A, InputStream, GifDrawable, R>(streamModelLoader, transcoder, dataLoadProvider);, +     * Sets a transcoder to transcode the decoded {@link com.bumptech.glide.load.resource.gif.GifDrawable} into another, +     * {@link com.bumptech.glide.load.resource.gif.GifDrawable} will be transcoded to., +     * @param <R> The type of the resource the {@link com.bumptech.glide.load.resource.gif.GifDrawable} will be, +    public <R> GenericRequestBuilder<ModelType, InputStream, GifDrawable, R> transcode(, +            ResourceTranscoder<GifDrawable, R> transcoder, Class<R> transcodeClass) {, +        FixedLoadProvider<ModelType, InputStream, GifDrawable, R> provider = buildProvider(glide, streamModelLoader,, +                transcodeClass, transcoder);, +        return optionsApplier.apply(model, new GenericRequestBuilder<ModelType, InputStream, GifDrawable, R>(context,, +                model, provider, transcodeClass, glide, requestTracker, lifecycle));, +    public GenericRequestBuilder<ModelType, InputStream, GifDrawable, byte[]> toBytes() {, +        return transcode(new GifDrawableBytesTranscoder(), byte[].class);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +            transformations[i] = new GifBitmapWrapperTransformation(glide.getBitmapPool(), bitmapTransformations[i]);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;, +public class GifRequestBuilder<ModelType>, +        extends GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable>, +            LoadProvider<ModelType, InputStream, GifDrawable, GifDrawable> loadProvider, Glide glide,, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +            GenericRequestBuilder<ModelType, InputStream, GifDrawable, GifDrawable> thumbnailRequest) {, +            ResourceDecoder<InputStream, GifDrawable> decoder) {, +            ResourceDecoder<File, GifDrawable> cacheDecoder) {, +            ResourceEncoder<GifDrawable> encoder) {, +    private GifDrawableTransformation[] toGifTransformations(Transformation<Bitmap>[] bitmapTransformations) {, +        GifDrawableTransformation[] transformations = new GifDrawableTransformation[bitmapTransformations.length];, +            transformations[i] = new GifDrawableTransformation(bitmapTransformations[i], glide.getBitmapPool());, +    public GifRequestBuilder<ModelType> transform(Transformation<GifDrawable>... transformations) {, +    public GifRequestBuilder<ModelType> transcoder(ResourceTranscoder<GifDrawable, GifDrawable> transcoder) {, +++ b/library/src/main/java/com/bumptech/glide/GifTypeRequest.java, +import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;, + * {@link com.bumptech.glide.load.resource.gif.GifDrawable} into another resource type., +    private static <A, R> FixedLoadProvider<A, InputStream, GifDrawable, R> buildProvider(Glide glide,, +            ResourceTranscoder<GifDrawable, R> transcoder) {, +            transcoder = glide.buildTranscoder(GifDrawable.class, transcodeClass);, +        DataLoadProvider<InputStream, GifDrawable> dataLoadProvider = glide.buildDataProvider(InputStream.class,, +                GifDrawable.class);, +        return new FixedLoadProvider<A, InputStream, GifDrawable, R>(streamModelLoader, transcoder, dataLoadProvider);, +     * Sets a transcoder to transcode the decoded {@link com.bumptech.glide.load.resource.gif.GifDrawable} into another, +     * {@link com.bumptech.glide.load.resource.gif.GifDrawable} will be transcoded to., +     * @param <R> The type of the resource the {@link com.bumptech.glide.load.resource.gif.GifDrawable} will be, +    public <R> GenericRequestBuilder<ModelType, InputStream, GifDrawable, R> transcode(, +            ResourceTranscoder<GifDrawable, R> transcoder, Class<R> transcodeClass) {, +        FixedLoadProvider<ModelType, InputStream, GifDrawable, R> provider = buildProvider(glide, streamModelLoader,, +                transcodeClass, transcoder);, +        return optionsApplier.apply(model, new GenericRequestBuilder<ModelType, InputStream, GifDrawable, R>(context,, +                model, provider, transcodeClass, glide, requestTracker, lifecycle));, +    public GenericRequestBuilder<ModelType, InputStream, GifDrawable, byte[]> toBytes() {, +        return transcode(new GifDrawableBytesTranscoder(), byte[].class);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java]