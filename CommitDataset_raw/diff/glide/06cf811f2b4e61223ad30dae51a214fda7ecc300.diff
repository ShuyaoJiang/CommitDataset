[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, +      int intrinsicCount = state.frameLoader.getLoopCount();, +      maxLoopCount =, +          (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, +      int intrinsicCount = state.frameLoader.getLoopCount();, +      maxLoopCount =, +          (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    return gifDecoder.getTotalIterationCount();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, +      int intrinsicCount = state.frameLoader.getLoopCount();, +      maxLoopCount =, +          (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    return gifDecoder.getTotalIterationCount();, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertTrue("drawable should be still running", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +  public void testUsesDecoderTotalLoopCountIfLoopCountIsLoopIntrinsic() {, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +  public void testLoopsForeverIfLoopCountIsLoopIntrinsicAndTotalIterationCountIsForever() {, +    final int frameCount = 3;, +    final int loopCount = 40;, +    when(frameLoader.getLoopCount()).thenReturn(GifDecoder.TOTAL_ITERATION_COUNT_FOREVER);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +    drawable.setVisible(true, true);, +    drawable.start();, +, +    runLoops(loopCount, frameCount);, +, +    verifyRanLoops(loopCount, frameCount);, +    assertTrue("drawable should be still running", drawable.isRunning());, +  }, +, +, +  @Test, +        assertTrue("drawable should be started before calling drawable.onFrameReady()",, +            drawable.isRunning());, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import static com.bumptech.glide.gifdecoder.GifDecoder.TOTAL_ITERATION_COUNT_FOREVER;, +, +      int intrinsicCount = state.frameLoader.getLoopCount();, +      maxLoopCount =, +          (intrinsicCount == TOTAL_ITERATION_COUNT_FOREVER) ? LOOP_FOREVER : intrinsicCount;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    return gifDecoder.getTotalIterationCount();, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertTrue("drawable should be still running", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +  public void testUsesDecoderTotalLoopCountIfLoopCountIsLoopIntrinsic() {, +    assertFalse("drawable should be stopped after loop is completed", drawable.isRunning());, +  public void testLoopsForeverIfLoopCountIsLoopIntrinsicAndTotalIterationCountIsForever() {, +    final int frameCount = 3;, +    final int loopCount = 40;, +    when(frameLoader.getLoopCount()).thenReturn(GifDecoder.TOTAL_ITERATION_COUNT_FOREVER);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +    drawable.setVisible(true, true);, +    drawable.start();, +, +    runLoops(loopCount, frameCount);, +, +    verifyRanLoops(loopCount, frameCount);, +    assertTrue("drawable should be still running", drawable.isRunning());, +  }, +, +, +  @Test, +        assertTrue("drawable should be started before calling drawable.onFrameReady()",, +            drawable.isRunning());, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +  /** The total iteration count which means repeat forever. */, +  int TOTAL_ITERATION_COUNT_FOREVER = 0;, +   * Gets the "Netscape" loop count, if any. A count of 0 means repeat indefinitely., +   * @deprecated Use {@link #getNetscapeLoopCount()} instead., +   *             This method cannot distinguish whether the loop count is 1 or doesn't exist., +   * @return loop count if one was specified, else 1., +  @Deprecated, +   * Gets the "Netscape" loop count, if any., +   * A count of 0 ({@link GifHeader#NETSCAPE_LOOP_COUNT_FOREVER}) means repeat indefinitely.]