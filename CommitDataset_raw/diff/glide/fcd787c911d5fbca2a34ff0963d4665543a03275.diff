[+++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.BaseUrlLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +        loaderFactory.register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());, +        loaderFactory.register(File.class, InputStream.class, new StreamFileLoader.Factory());, +        loaderFactory.register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, +        loaderFactory.register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());, +        loaderFactory.register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());, +        loaderFactory.register(String.class, InputStream.class, new StreamStringLoader.Factory());, +        loaderFactory.register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());, +        loaderFactory.register(Uri.class, InputStream.class, new StreamUriLoader.Factory());, +        loaderFactory.register(URL.class, ParcelFileDescriptor.class, new ModelLoaderFactory<URL, ParcelFileDescriptor>() {, +            @Override, +            public ModelLoader<URL, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {, +                throw new IllegalArgumentException("No ModelLoaderFactory for urls and file descriptors registered " +, +                        "with Glide");, +            }, +, +            @Override, +            public Class<? extends ModelLoader<URL, ParcelFileDescriptor>> loaderClass() {, +                throw new IllegalArgumentException("No ModelLoaderFactory for urls and file descriptors registered " +, +                        "with Glide");, +            }, +, +            @Override, +            public void teardown() {, +            }, +        });, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls and InputStreams " +, +                                "registered with Glide");, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls and InputStreams " +, +                                "registered with Glide");, +    public static <T, Y> ModelRequest<T, Y> using(final ModelLoader<T, Y> modelLoader) {, +     * @param streamModelLoader The model loader to use., +    public static <T> StreamModelRequest<T> using(final StreamModelLoader<T> streamModelLoader) {, +                return streamModelLoader;, +                return (Class<StreamModelLoader<T>>) streamModelLoader.getClass();, +    public static <T> FileDescriptorModelRequest<T> using(final FileDescriptorModelLoader<T> loader) {, +        return new FileDescriptorModelRequest<T>(new ModelLoaderFactory<T, ParcelFileDescriptor>() {, +            @Override, +            public ModelLoader<T, ParcelFileDescriptor> build(Context context, GenericLoaderFactory factories) {, +                return loader;, +            }, +, +            @SuppressWarnings("unchecked"), +            @Override, +            public Class<? extends ModelLoader<T, ParcelFileDescriptor>> loaderClass() {, +                return (Class<FileDescriptorModelLoader<T>>) loader.getClass();, +            }, +, +            @Override, +            public void teardown() {, +            }, +        });, +    }, +, +     * given {@link String}. Defaults to {@link StreamStringLoader.Factory} and {@link StreamStringLoader} to load the given model., +     * @param string The string representing the image. Must be either a path, or a uri handled by {@link StreamUriLoader}, +     * Defaults to {@link StreamUriLoader.Factory} and {@link StreamUriLoader}., +     * @param uri The uri representing the image. Must be a uri handled by {@link StreamUriLoader}, +     * given {@link File}. Defaults to {@link StreamFileLoader.Factory} and {@link StreamFileLoader} to load the given model., +     * given {@link Integer} resource id. Defaults to {@link StreamResourceLoader.Factory} and {@link StreamResourceLoader} to load, +    public static class FileDescriptorModelRequest<T> {, +        private ModelLoaderFactory<T, ParcelFileDescriptor> factory;, +, +        private FileDescriptorModelRequest(ModelLoaderFactory<T, ParcelFileDescriptor> factory) {, +            this.factory = factory;, +        }, +, +        public Request<T, ParcelFileDescriptor> load(T model) {, +            return new Request<T, ParcelFileDescriptor>(model, factory).decoder(new VideoBitmapDecoder());, +        }, +    }, +, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.BaseUrlLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;]