[+++ b/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java, +    public void testCanAddAndRemoveBitmap() {, +        Bitmap bitmap = getBitmap();, +        pool.put(bitmap);, +        assertEquals(bitmap, getEquivalentFromPool(bitmap));, +    }, +, +    public void testCanAddAndRemoveBitmapsOfDifferentSizes() {, +        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Bitmap second = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_8888);, +        pool.put(first);, +        pool.put(second);, +        assertEquals(first, getEquivalentFromPool(first));, +        assertEquals(second, getEquivalentFromPool(second));, +    }, +, +    public void testCanAddAndRemoveBitmapsOfDifferentConfigs() {, +        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Bitmap second = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +        pool.put(first);, +        pool.put(second);, +        assertEquals(first, getEquivalentFromPool(first));, +        assertEquals(second, getEquivalentFromPool(second));, +    }, +, +    public void testPoolIsSizeLimited() {, +        List<Bitmap> bitmaps = fillPool();, +        Bitmap first = bitmaps.get(0);, +        pool.put(Bitmap.createBitmap(first));, +, +        int totalInPool = 0;, +        for (int i = 0; i < bitmaps.size(); i++) {, +            if (getEquivalentFromPool(first) == null) {, +                break;, +            }, +            totalInPool++;, +        }, +, +        assertEquals(bitmaps.size(), totalInPool);, +    }, +, +    public void testLeastRecentlyAcquiredBitmapRemovedFirst() {, +        Bitmap special = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +        pool.put(Bitmap.createBitmap(special));, +        pool.put(Bitmap.createBitmap(special));, +        getEquivalentFromPool(special);, +        List<Bitmap> bitmaps = fillPool();, +, +        assertNotNull(getEquivalentFromPool(special));, +, +        Bitmap first = bitmaps.get(0);, +        int totalAcquired = 0;, +        for (int i = 0; i < bitmaps.size(); i++) {, +            if (getEquivalentFromPool(first) == null) {, +                break;, +            }, +            totalAcquired++;, +        }, +, +        assertEquals(totalAcquired, bitmaps.size() - 1);, +    }, +, +        assertNotNull(getEquivalentFromPool(first));, +        assertNull(getEquivalentFromPool(first));, +    private Bitmap getEquivalentFromPool(Bitmap bitmap) {, +        return pool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());, +    }, +, +++ b/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java, +    public void testCanAddAndRemoveBitmap() {, +        Bitmap bitmap = getBitmap();, +        pool.put(bitmap);, +        assertEquals(bitmap, getEquivalentFromPool(bitmap));, +    }, +, +    public void testCanAddAndRemoveBitmapsOfDifferentSizes() {, +        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Bitmap second = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_8888);, +        pool.put(first);, +        pool.put(second);, +        assertEquals(first, getEquivalentFromPool(first));, +        assertEquals(second, getEquivalentFromPool(second));, +    }, +, +    public void testCanAddAndRemoveBitmapsOfDifferentConfigs() {, +        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Bitmap second = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +        pool.put(first);, +        pool.put(second);, +        assertEquals(first, getEquivalentFromPool(first));, +        assertEquals(second, getEquivalentFromPool(second));, +    }, +, +    public void testPoolIsSizeLimited() {, +        List<Bitmap> bitmaps = fillPool();, +        Bitmap first = bitmaps.get(0);, +        pool.put(Bitmap.createBitmap(first));, +, +        int totalInPool = 0;, +        for (int i = 0; i < bitmaps.size(); i++) {]