[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.isA;, +import android.graphics.drawable.BitmapDrawable;, +    doAnswer(new CallSizeReady()).when(target).getSize(isA(SizeReadyCallback.class));, +    when(bgHandler.post(isA(Runnable.class))).thenAnswer(new Answer<Boolean>() {, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(Bitmap.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(notNull(), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(GifDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target, times(2)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(4)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(3)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));, +    doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));, +    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));, +        .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +    when(failLoader.buildLoadData(isA(failModel), anyInt(), anyInt(), isA(Options.class))), +    when(failLoader.handles(isA(failModel))).thenReturn(true);, +    when(failFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +    when(modelLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +          .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +    when(modelLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class))), +    when(modelLoader.handles(isA(modelClass))).thenReturn(true);, +      }).when(executor).execute(isA(Runnable.class));, +            .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +      when(mockUrlLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class))), +      when(mockUrlLoader.handles(isA(modelClass))).thenReturn(true);, +      when(mockUrlLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.isA;, +import android.graphics.drawable.BitmapDrawable;, +    doAnswer(new CallSizeReady()).when(target).getSize(isA(SizeReadyCallback.class));, +    when(bgHandler.post(isA(Runnable.class))).thenAnswer(new Answer<Boolean>() {, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(Bitmap.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(notNull(), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(GifDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target, times(2)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(4)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(3)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));, +    doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));, +    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));, +        .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +    when(failLoader.buildLoadData(isA(failModel), anyInt(), anyInt(), isA(Options.class))), +    when(failLoader.handles(isA(failModel))).thenReturn(true);, +    when(failFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +    when(modelLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +          .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +    when(modelLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class))), +    when(modelLoader.handles(isA(modelClass))).thenReturn(true);, +      }).when(executor).execute(isA(Runnable.class));, +            .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));, +      when(mockUrlLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class))), +      when(mockUrlLoader.handles(isA(modelClass))).thenReturn(true);, +      when(mockUrlLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import static org.mockito.Matchers.isA;, +    verify(requestManager).track(eq(target), isA(Request.class));, +    when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class))), +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static org.mockito.Matchers.isA;, +import android.graphics.drawable.BitmapDrawable;, +    doAnswer(new CallSizeReady()).when(target).getSize(isA(SizeReadyCallback.class));, +    when(bgHandler.post(isA(Runnable.class))).thenAnswer(new Answer<Boolean>() {, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(Bitmap.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(notNull(), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(GifDrawable.class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));, +    verify(target, times(2)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(4)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    verify(target, times(3)).onResourceReady(isA(Drawable.class), isA(Transition.class));, +    doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));, +    doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));, +    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));, +    verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));, +        .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));]