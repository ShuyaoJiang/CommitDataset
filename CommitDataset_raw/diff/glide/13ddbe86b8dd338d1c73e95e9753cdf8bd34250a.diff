[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      if (Log.isLoggable(TAG, Log.DEBUG)) {, +        Log.d(TAG, "DecodeJob threw unexpectedly, isCancelled: " + isCancelled, e);, +      if (!isCancelled) {, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      if (Log.isLoggable(TAG, Log.DEBUG)) {, +        Log.d(TAG, "DecodeJob threw unexpectedly, isCancelled: " + isCancelled, e);, +      if (!isCancelled) {, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +   * Constructor to build a fixed thread pool with the given pool size., +    this(poolSize, new DefaultThreadFactory());, +   * Constructor to build a fixed thread pool with the given pool size., +    this(poolSize, new DefaultThreadFactory(uncaughtThrowableStrategy));, +   * Constructor to build a fixed thread pool with the given pool size., +    this(poolSize, new DefaultThreadFactory(name));, +  /**, +   * Constructor to build a fixed thread pool with the given pool size., +   *, +   * @param name The prefix for each thread name., +   * @param poolSize The number of threads., +   * @param uncaughtThrowableStrategy The {@link, +   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to, +   *                                  handle uncaught exceptions., +   */, +  public GlideExecutor(String name, int poolSize,, +    this(poolSize, new DefaultThreadFactory(name, uncaughtThrowableStrategy));, +  private GlideExecutor(int corePoolSize, ThreadFactory threadFactory) {, +    super(corePoolSize, corePoolSize, 0, TimeUnit.MILLISECONDS,, +        new PriorityBlockingQueue<Runnable>(), threadFactory);, +          throw new RuntimeException("Request threw uncaught throwable", t);, +  private static final class DefaultThreadFactory implements ThreadFactory {, +    private final UncaughtThrowableStrategy uncaughtThrowableStrategy;, +    DefaultThreadFactory() {, +    DefaultThreadFactory(String name) {, +      this(name, UncaughtThrowableStrategy.LOG);, +    }, +, +    DefaultThreadFactory(UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +      this(DEFAULT_NAME, uncaughtThrowableStrategy);, +    }, +, +    DefaultThreadFactory(String name, UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +      this.uncaughtThrowableStrategy = uncaughtThrowableStrategy;, +          try {, +          } catch (Throwable t) {, +            uncaughtThrowableStrategy.handle(t);, +          }]