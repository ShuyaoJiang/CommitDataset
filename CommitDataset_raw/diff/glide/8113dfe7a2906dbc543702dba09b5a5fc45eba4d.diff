[+++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +    return getFetcher(Headers.DEFAULT);, +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +    return getFetcher(Headers.DEFAULT);, +++ b/library/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +, +TRUTH_VERSION=0.26, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +import static org.junit.Assume.assumeTrue;, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +    // Most likely an instance of http://stackoverflow.com/q/991489/253468, +    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));, +++ b/integration/volley/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +    return getFetcher(Headers.DEFAULT);, +++ b/library/build.gradle, +    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}", +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +   * @param isFirstResource {@code true} if this exception is for the first resource to load., +   * @return {@code true} if the listener has handled updating the target for the given exception,, +   *         {@code false} to allow Glide's request to update the target., +   * @param isFirstResource   {@code true} if this is the first resource to in this load to be, +   *                          loaded into the target. For example when loading a thumbnail and a, +   *                          full-sized image, this will be {@code true} for the first image to, +   *                          load and {@code false} for the second., +   * @return {@code true} if the listener has handled setting the resource on the target,, +   *         {@code false} to allow Glide's request to update the target., +   *         Setting the resource includes handling animations, be sure to take that into account., +++ b/gradle.properties, +org.gradle.daemon=true, +org.gradle.configureondemand=true, +org.gradle.parallel=true, +]