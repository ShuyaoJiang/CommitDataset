[+++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, +public class GifRequestBuilder<ModelType> extends GenericRequestBuilder<ModelType, InputStream, GifData, GifDrawable>, +        implements BitmapOptions, DrawableOptions {, +    private final Context context;, +    private final Glide glide;, +            LoadProvider<ModelType, InputStream, GifData, GifDrawable> loadProvider,, +            Glide glide, RequestTracker requestTracker) {, +        super(context, model, loadProvider, GifDrawable.class, glide, requestTracker);, +        this.context = context;, +    public GifRequestBuilder<ModelType> thumbnail(, +            GenericRequestBuilder<ModelType, InputStream, GifData, GifDrawable> thumbnailRequest) {, +    public GifRequestBuilder<ModelType> thumbnail(GifRequestBuilder<ModelType> thumbnailRequest) {, +    public GifRequestBuilder<ModelType> thumbnail(float sizeMultiplier) {, +    public GifRequestBuilder<ModelType> sizeMultiplier(float sizeMultiplier) {, +    public GifRequestBuilder<ModelType> decoder(, +    public GifRequestBuilder<ModelType> cacheDecoder(, +    public GifRequestBuilder<ModelType> encoder(, +    public GifRequestBuilder<ModelType> priority(Priority priority) {, +    public GifRequestBuilder<ModelType> centerCrop() {, +    public GifRequestBuilder<ModelType> fitCenter() {, +    public GifRequestBuilder<ModelType> transformFrame(Transformation<Bitmap> bitmapTransformation) {, +    public GifRequestBuilder<ModelType> transform(Transformation<GifData> transformation) {, +    public GifRequestBuilder<ModelType> transcoder(ResourceTranscoder<GifData, GifDrawable> transcoder) {, +    public GifRequestBuilder<ModelType> crossFade() {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GifDrawable>());, +        return this;, +    }, +, +    /**, +     * {@inheritDoc}, +     */, +    @Override, +    public GifRequestBuilder<ModelType> crossFade(int duration) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GifDrawable>(duration));, +        return this;, +    }, +, +    /**, +     * {@inheritDoc}, +     */, +    @Override, +    public GifRequestBuilder<ModelType> crossFade(Animation animation, int duration) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GifDrawable>(animation, duration));, +        return this;, +    }, +, +    /**, +     * {@inheritDoc}, +     */, +    @Override, +    public GifRequestBuilder<ModelType> crossFade(int animationId, int duration) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GifDrawable>(context, animationId,, +                duration));, +        return this;, +    }, +, +    /**, +     * {@inheritDoc}, +     */, +    @Override, +    public GifRequestBuilder<ModelType> dontAnimate() {, +    public GifRequestBuilder<ModelType> animate(int animationId) {, +    public GifRequestBuilder<ModelType> animate(Animation animation) {, +    public GifRequestBuilder<ModelType> animate(ViewPropertyAnimation.Animator animator) {, +    public GifRequestBuilder<ModelType> placeholder(int resourceId) {, +    public GifRequestBuilder<ModelType> placeholder(Drawable drawable) {, +    public GifRequestBuilder<ModelType> error(int resourceId) {, +    public GifRequestBuilder<ModelType> error(Drawable drawable) {, +    public GifRequestBuilder<ModelType> listener(, +            RequestListener<ModelType, GifDrawable> requestListener) {, +    public GifRequestBuilder<ModelType> skipMemoryCache(boolean skip) {, +    public GifRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, +    public GifRequestBuilder<ModelType> override(int width, int height) {, +    public GifRequestBuilder<ModelType> sourceEncoder(Encoder<InputStream> sourceEncoder) {, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +import com.bumptech.glide.load.resource.gif.GifDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, +public class GifRequestBuilder<ModelType> extends GenericRequestBuilder<ModelType, InputStream, GifData, GifDrawable>, +        implements BitmapOptions, DrawableOptions {, +    private final Context context;, +    private final Glide glide;, +            LoadProvider<ModelType, InputStream, GifData, GifDrawable> loadProvider,, +            Glide glide, RequestTracker requestTracker) {, +        super(context, model, loadProvider, GifDrawable.class, glide, requestTracker);, +        this.context = context;, +    public GifRequestBuilder<ModelType> thumbnail(, +            GenericRequestBuilder<ModelType, InputStream, GifData, GifDrawable> thumbnailRequest) {, +    public GifRequestBuilder<ModelType> thumbnail(GifRequestBuilder<ModelType> thumbnailRequest) {, +    public GifRequestBuilder<ModelType> thumbnail(float sizeMultiplier) {, +    public GifRequestBuilder<ModelType> sizeMultiplier(float sizeMultiplier) {, +    public GifRequestBuilder<ModelType> decoder(, +    public GifRequestBuilder<ModelType> cacheDecoder(, +    public GifRequestBuilder<ModelType> encoder(, +    public GifRequestBuilder<ModelType> priority(Priority priority) {, +    public GifRequestBuilder<ModelType> centerCrop() {, +    public GifRequestBuilder<ModelType> fitCenter() {, +    public GifRequestBuilder<ModelType> transformFrame(Transformation<Bitmap> bitmapTransformation) {, +    public GifRequestBuilder<ModelType> transform(Transformation<GifData> transformation) {]