[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +                    .setBitmapLoadFactory(, +                            new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +                                    imageModelLoader != null && imageDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, ImageResourceType>(, +                                            imageModelLoader, imageDecoder) : null,, +                                    videoModelLoader != null && videoDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, VideoResourceType>(, +                                            videoModelLoader, videoDecoder) : null,, +                                    transformationLoader)), +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +                    .setBitmapLoadFactory(, +                            new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +                                    imageModelLoader != null && imageDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, ImageResourceType>(, +                                            imageModelLoader, imageDecoder) : null,, +                                    videoModelLoader != null && videoDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, VideoResourceType>(, +                                            videoModelLoader, videoDecoder) : null,, +                                    transformationLoader)), +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ResourceBitmapLoad;, +    private final ResourceBitmapLoadFactory<T, Y> imageLoadFactory;, +    private final ResourceBitmapLoadFactory<T, Z> videoLoadFactory;, +    public ImageVideoBitmapLoadFactory(ResourceBitmapLoadFactory<T, Y> imageLoadFactory,, +            ResourceBitmapLoadFactory<T, Z> videoLoadFactory, TransformationLoader<T> transformationLoader) {, +        this.imageLoadFactory = imageLoadFactory;, +        this.videoLoadFactory = videoLoadFactory;, +        if (imageLoadFactory == null && videoLoadFactory == null) {, +        BitmapLoad imageLoad = null;, +        if (imageLoadFactory != null) {, +            imageLoad = imageLoadFactory.getLoadTask(model, width, height);, +        BitmapLoad videoLoad = null;, +        if (videoLoadFactory != null) {, +            videoLoad = videoLoadFactory.getLoadTask(model, width, height);, +        return new ImageVideoBitmapLoad(imageLoad, videoLoad, width, height, transformation);, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +                    .setBitmapLoadFactory(, +                            new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(, +                                    imageModelLoader != null && imageDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, ImageResourceType>(, +                                            imageModelLoader, imageDecoder) : null,, +                                    videoModelLoader != null && videoDecoder != null ?, +                                    new ResourceBitmapLoadFactory<ModelType, VideoResourceType>(, +                                            videoModelLoader, videoDecoder) : null,, +                                    transformationLoader)), +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ResourceBitmapLoad;, +    private final ResourceBitmapLoadFactory<T, Y> imageLoadFactory;, +    private final ResourceBitmapLoadFactory<T, Z> videoLoadFactory;, +    public ImageVideoBitmapLoadFactory(ResourceBitmapLoadFactory<T, Y> imageLoadFactory,, +            ResourceBitmapLoadFactory<T, Z> videoLoadFactory, TransformationLoader<T> transformationLoader) {, +        this.imageLoadFactory = imageLoadFactory;, +        this.videoLoadFactory = videoLoadFactory;, +        if (imageLoadFactory == null && videoLoadFactory == null) {, +        BitmapLoad imageLoad = null;, +        if (imageLoadFactory != null) {, +            imageLoad = imageLoadFactory.getLoadTask(model, width, height);, +        BitmapLoad videoLoad = null;, +        if (videoLoadFactory != null) {, +            videoLoad = videoLoadFactory.getLoadTask(model, width, height);, +        return new ImageVideoBitmapLoad(imageLoad, videoLoad, width, height, transformation);, +++ b/library/src/com/bumptech/glide/loader/bitmap/ResourceBitmapLoadFactory.java, +package com.bumptech.glide.loader.bitmap;, +, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.resource.ResourceFetcher;, +import com.bumptech.glide.resize.BitmapLoad;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.ResourceBitmapLoad;, +, +public class ResourceBitmapLoadFactory<T, Y> implements BitmapLoadFactory<T> {, +    private final ModelLoader<T, Y> modelLoader;, +    private final BitmapDecoder<Y> decoder;, +, +    public ResourceBitmapLoadFactory(ModelLoader<T, Y> modelLoader, BitmapDecoder<Y> decoder) {, +        if (modelLoader == null) {, +            throw new IllegalArgumentException("Can't create load factory with null model loader");, +        }, +        if (decoder == null) {, +            throw new IllegalArgumentException("Can't create load factory with null decoder");, +        }, +        this.modelLoader = modelLoader;, +        this.decoder = decoder;, +    }, +, +    @Override, +    public BitmapLoad getLoadTask(T model, int width, int height) {, +        final String id = modelLoader.getId(model);, +        final ResourceFetcher<Y> resourceFetcher = modelLoader.getResourceFetcher(model, width, height);, +        return new ResourceBitmapLoad<Y>(id, resourceFetcher, decoder, width, height);, +    }, +}, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +                    .setBitmapLoadFactory(, +                            new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(]