[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, +package com.bumptech.glide.load.resource;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class SimpleResourceTest {, +    private Anything object;, +    private SimpleResource resource;, +, +    @Before, +    public void setUp() {, +        object = new Anything();, +        resource = new SimpleResource(object);, +    }, +, +    @Test, +    public void testReturnsGivenObject() {, +        assertEquals(object, resource.get());, +    }, +, +    @Test, +    public void testReturnsGivenObjectMultipleTimes() {, +        assertEquals(object, resource.get());, +        assertEquals(object, resource.get());, +        assertEquals(object, resource.get());, +    }, +, +    private static class Anything { }, +}, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, +package com.bumptech.glide.load.resource;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class SimpleResourceTest {, +    private Anything object;, +    private SimpleResource resource;, +, +    @Before, +    public void setUp() {, +        object = new Anything();, +        resource = new SimpleResource(object);, +    }, +, +    @Test, +    public void testReturnsGivenObject() {, +        assertEquals(object, resource.get());, +    }, +, +    @Test, +    public void testReturnsGivenObjectMultipleTimes() {, +        assertEquals(object, resource.get());, +        assertEquals(object, resource.get());, +        assertEquals(object, resource.get());, +    }, +, +    private static class Anything { }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/SimpleResource.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.load.engine.Resource;, +, +/**, + * Simple wrapper for an arbitrary object which helps to satisfy some of the glide engine's contracts., + * <b>Suggested usages only include resource object which don't have size and cannot be recycled/closed.</b>, + *, + * @param <T> type of the wrapped resource, + */, +// TODO: there isn't much point in caching these..., +public class SimpleResource<T> implements Resource<T> {, +    protected final T data;, +, +    public SimpleResource(T data) {, +        this.data = data;, +    }, +, +    @Override, +    public final T get() {, +        return data;, +    }, +, +    @Override, +    public final int getSize() {, +        return 1;, +    }, +, +    @Override, +    public void recycle() {, +        // no op, +    }, +}, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java, +package com.bumptech.glide.load.resource;]