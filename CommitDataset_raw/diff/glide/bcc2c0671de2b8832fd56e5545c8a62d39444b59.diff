[+++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import static org.junit.Assert.assertEquals;, +    @Test, +    public void testPriorityMatchesMetadataPriority() {, +        when(harness.metadata.getPriority()).thenReturn(Priority.LOW);, +        assertEquals(Priority.LOW.ordinal(), harness.runner.getPriority());, +, +        when(harness.metadata.getPriority()).thenReturn(Priority.HIGH);, +        assertEquals(Priority.HIGH.ordinal(), harness.runner.getPriority());, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import static org.junit.Assert.assertEquals;, +    @Test, +    public void testPriorityMatchesMetadataPriority() {, +        when(harness.metadata.getPriority()).thenReturn(Priority.LOW);, +        assertEquals(Priority.LOW.ordinal(), harness.runner.getPriority());, +, +        when(harness.metadata.getPriority()).thenReturn(Priority.HIGH);, +        assertEquals(Priority.HIGH.ordinal(), harness.runner.getPriority());, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                result = Downsampler.NONE.decode(is, bitmapPool, -1, -1, task.getMetadata().getDecodeFormat());, +                return metadata.getPriority().ordinal();, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import static org.junit.Assert.assertEquals;, +    @Test, +    public void testPriorityMatchesMetadataPriority() {, +        when(harness.metadata.getPriority()).thenReturn(Priority.LOW);, +        assertEquals(Priority.LOW.ordinal(), harness.runner.getPriority());, +, +        when(harness.metadata.getPriority()).thenReturn(Priority.HIGH);, +        assertEquals(Priority.HIGH.ordinal(), harness.runner.getPriority());, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                result = Downsampler.NONE.decode(is, bitmapPool, -1, -1, task.getMetadata().getDecodeFormat());, +                return metadata.getPriority().ordinal();, +++ b/library/src/com/bumptech/glide/resize/Metadata.java, +    private final Priority priority;, +    private final DecodeFormat decodeFormat;, +, +    public Priority getPriority() {, +        return priority;, +    }, +, +    public DecodeFormat getDecodeFormat() {, +        return decodeFormat;, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import static org.junit.Assert.assertEquals;, +    @Test, +    public void testPriorityMatchesMetadataPriority() {, +        when(harness.metadata.getPriority()).thenReturn(Priority.LOW);, +        assertEquals(Priority.LOW.ordinal(), harness.runner.getPriority());, +, +        when(harness.metadata.getPriority()).thenReturn(Priority.HIGH);, +        assertEquals(Priority.HIGH.ordinal(), harness.runner.getPriority());, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                result = Downsampler.NONE.decode(is, bitmapPool, -1, -1, task.getMetadata().getDecodeFormat());, +                return metadata.getPriority().ordinal();, +++ b/library/src/com/bumptech/glide/resize/Metadata.java, +    private final Priority priority;, +    private final DecodeFormat decodeFormat;, +, +    public Priority getPriority() {, +        return priority;, +    }, +, +    public DecodeFormat getDecodeFormat() {, +        return decodeFormat;, +    }, +, +++ b/library/src/com/bumptech/glide/resize/SourceResourceRunner.java, +public class SourceResourceRunner<T, Z> implements Runnable, DiskCache.Writer, Prioritized {, +, +    @Override, +    public int getPriority() {, +        return metadata.getPriority().ordinal();, +    }, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import static org.junit.Assert.assertEquals;, +    @Test, +    public void testPriorityMatchesMetadataPriority() {, +        when(harness.metadata.getPriority()).thenReturn(Priority.LOW);, +        assertEquals(Priority.LOW.ordinal(), harness.runner.getPriority());, +, +        when(harness.metadata.getPriority()).thenReturn(Priority.HIGH);, +        assertEquals(Priority.HIGH.ordinal(), harness.runner.getPriority());, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                result = Downsampler.NONE.decode(is, bitmapPool, -1, -1, task.getMetadata().getDecodeFormat());, +                return metadata.getPriority().ordinal();, +++ b/library/src/com/bumptech/glide/resize/Metadata.java, +    private final Priority priority;]