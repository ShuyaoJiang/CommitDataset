[+++ b/library/src/com/bumptech/glide/resize/load/TransformationUtils.java, +        final float widthPercentage = width / (float) toFit.getWidth();, +        final float heightPercentage = height / (float) toFit.getHeight();, +        final float minPercentage = Math.min(widthPercentage, heightPercentage);, +, +        final int targetWidth = Math.round(minPercentage * toFit.getWidth());, +        final int targetHeight = Math.round(minPercentage * toFit.getHeight());, +        matrix.setScale(minPercentage, minPercentage);, +++ b/library/src/com/bumptech/glide/resize/load/TransformationUtils.java, +        final float widthPercentage = width / (float) toFit.getWidth();, +        final float heightPercentage = height / (float) toFit.getHeight();, +        final float minPercentage = Math.min(widthPercentage, heightPercentage);, +, +        final int targetWidth = Math.round(minPercentage * toFit.getWidth());, +        final int targetHeight = Math.round(minPercentage * toFit.getHeight());, +        matrix.setScale(minPercentage, minPercentage);, +++ b/library/tests/src/com/bumptech/glide/util/TransformationUtilsTest.java, +package com.bumptech.glide.util;, +, +import android.graphics.Bitmap;, +import android.test.AndroidTestCase;, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.resize.load.TransformationUtils;, +, +import static org.mockito.Mockito.mock;, +, +public class TransformationUtilsTest extends AndroidTestCase {, +, +    public void testFitCenterWithWideBitmap() {, +        final int maxSide = 500;, +, +        Bitmap wide = Bitmap.createBitmap(2000, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(wide, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(wide, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    public void testFitCenterWithSmallWideBitmap() {, +        final int maxSide = 500;, +, +        Bitmap smallWide = Bitmap.createBitmap(400, 40, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(smallWide, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(smallWide, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    public void testFitCenterWithTallBitmap() {, +        final int maxSide = 500;, +, +        Bitmap tall = Bitmap.createBitmap(65, 3000, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(tall, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(tall, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    public void testFitCenterWithSmallTallBitmap() {, +        final int maxSide = 500;, +, +        Bitmap smallTall = Bitmap.createBitmap(10, 400, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(smallTall, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(smallTall, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    public void testFitCenterWithSquareBitmap() {, +        final int maxSide = 500;, +, +        Bitmap square = Bitmap.createBitmap(600, 600, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(square, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(square, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    public void testFitCenterWithTooSmallSquareBitmap() {, +        final int maxSide = 500;, +, +        Bitmap smallSquare = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +, +        Bitmap transformed = TransformationUtils.fitCenter(smallSquare, mock(BitmapPool.class), maxSide, maxSide);, +, +        assertHasOriginalAspectRatio(smallSquare, transformed);, +        assertBitmapFitsExactlyWithinBounds(maxSide, transformed);, +    }, +, +    private static void assertHasOriginalAspectRatio(Bitmap original, Bitmap transformed) {, +        final float wiggle = 0.05f;, +, +        float originalAspectRatio = original.getWidth() / (float) original.getHeight();, +        float transformedAspectRatio = transformed.getWidth() / (float) transformed.getHeight();, +]