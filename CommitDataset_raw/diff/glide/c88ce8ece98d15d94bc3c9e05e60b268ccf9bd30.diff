[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, +        if (tag instanceof ImageViewTarget) {, +            if (tag != null) {, +                Log.d("Replacing existing tag=" + tag + " on view=" + imageView + " with an ImageViewTarge");, +            }, +            ImagePresenter<T> result = target.getImagePresenter();, +, +            if (previous != null && result == null) {, +                previous = null;, +            }, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                final Animation animation = AnimationUtils.loadAnimation(context, animationId);, +                builder.setImageReadyCallback(new ImageReadyCallback() {, +                    public void onImageReady(Target target, boolean fromCache) {, +                        if (!fromCache) {, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, +        if (tag instanceof ImageViewTarget) {, +            if (tag != null) {, +                Log.d("Replacing existing tag=" + tag + " on view=" + imageView + " with an ImageViewTarge");, +            }, +            ImagePresenter<T> result = target.getImagePresenter();, +, +            if (previous != null && result == null) {, +                previous = null;, +            }, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                final Animation animation = AnimationUtils.loadAnimation(context, animationId);, +                builder.setImageReadyCallback(new ImageReadyCallback() {, +                    public void onImageReady(Target target, boolean fromCache) {, +                        if (!fromCache) {, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +        private ImageReadyCallback imageReadyCallback;, +        public Builder<T> setImageReadyCallback(ImageReadyCallback cb) {, +    private final ImageReadyCallback imageReadyCallback;, +                    imageReadyCallback.onImageReady(target, loadedFromCache);, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, +        if (tag instanceof ImageViewTarget) {, +            if (tag != null) {, +                Log.d("Replacing existing tag=" + tag + " on view=" + imageView + " with an ImageViewTarge");, +            }, +            ImagePresenter<T> result = target.getImagePresenter();, +, +            if (previous != null && result == null) {, +                previous = null;, +            }, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                final Animation animation = AnimationUtils.loadAnimation(context, animationId);, +                builder.setImageReadyCallback(new ImageReadyCallback() {, +                    public void onImageReady(Target target, boolean fromCache) {, +                        if (!fromCache) {, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +        private ImageReadyCallback imageReadyCallback;, +        public Builder<T> setImageReadyCallback(ImageReadyCallback cb) {, +    private final ImageReadyCallback imageReadyCallback;, +                    imageReadyCallback.onImageReady(target, loadedFromCache);, +++ b/library/src/com/bumptech/glide/presenter/ImageReadyCallback.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.glide.presenter;, +, +import com.bumptech.glide.presenter.target.Target;, +, +/**, + * A callback interface used to perform some action when an {@link ImagePresenter} sets a new bitmap in an, + * {@link android.widget.ImageView}, + */, +public interface ImageReadyCallback {, +, +    /**, +     * The method called when a bitmap is set, +     *, +     * @param target The target that will display the bitmap, +     * @param fromCache True iff the load completed without a placeholder being shown., +     */, +    public void onImageReady(Target target, boolean fromCache);, +}, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.ImageReadyCallback;, +        if (tag instanceof ImageViewTarget) {, +            if (tag != null) {, +                Log.d("Replacing existing tag=" + tag + " on view=" + imageView + " with an ImageViewTarge");, +            }, +            ImagePresenter<T> result = target.getImagePresenter();, +, +            if (previous != null && result == null) {, +                previous = null;, +            }, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                final Animation animation = AnimationUtils.loadAnimation(context, animationId);, +                builder.setImageReadyCallback(new ImageReadyCallback() {, +                    public void onImageReady(Target target, boolean fromCache) {, +                        if (!fromCache) {, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +        private ImageReadyCallback imageReadyCallback;, +        public Builder<T> setImageReadyCallback(ImageReadyCallback cb) {]