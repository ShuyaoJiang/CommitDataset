[+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +  public boolean isCleared() {, +    return primary.isFailed() ? error.isCleared() : primary.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +  public boolean isCleared() {, +    return primary.isFailed() ? error.isCleared() : primary.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/Request.java, +   * Returns true if the request has been cleared., +  boolean isCleared();, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +  public boolean isCleared() {, +    return primary.isFailed() ? error.isCleared() : primary.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/Request.java, +   * Returns true if the request has been cleared., +  boolean isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +     * Cleared by the user with a placeholder set, may be restarted., +  private void cancel() {, +, +  public boolean isCleared() {, +    return status == Status.CLEARED;, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +  public boolean isCleared() {, +    return primary.isFailed() ? error.isCleared() : primary.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/Request.java, +   * Returns true if the request has been cleared., +  boolean isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +     * Cleared by the user with a placeholder set, may be restarted., +  private void cancel() {, +, +  public boolean isCleared() {, +    return status == Status.CLEARED;, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, +  public boolean isCleared() {, +    return full.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java, +        request.clear();, +        request.clear();, +      // We don't need to check for cleared here. Any explicit clear by a user will remove the, +      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared, +      // it. As a result it should be safe for us to resume cleared requests., +      if (!request.isComplete() && !request.isRunning()) {, +      if (!request.isComplete() && !request.isCleared()) {, +        request.clear();, +          // Ensure the request will be restarted in onResume., +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +  public boolean isCleared() {, +    return primary.isFailed() ? error.isCleared() : primary.isCleared();, +++ b/library/src/main/java/com/bumptech/glide/request/Request.java]