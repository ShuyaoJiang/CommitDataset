[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +    private final Queue<byte[]> tempQueue = new LinkedList<byte[]>();, +    private final SizedBitmapCache bitmapCache;, +        byte[] result = null;, +        synchronized (tempQueue) {, +            }, +        }, +        if (result == null) {, +        synchronized (tempQueue) {, +        }, +    }, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +    private final Queue<byte[]> tempQueue = new LinkedList<byte[]>();, +    private final SizedBitmapCache bitmapCache;, +        byte[] result = null;, +        synchronized (tempQueue) {, +            }, +        }, +        if (result == null) {, +        synchronized (tempQueue) {, +        }, +    }, +++ b/library/src/com/bumptech/photos/resize/cache/SizedBitmapCache.java, +import java.util.concurrent.ConcurrentLinkedQueue;, +        Queue<Bitmap> available;, +        synchronized (availableBitmaps) {, +            available = availableBitmaps.get(sizeKey);, +                available = new ConcurrentLinkedQueue<Bitmap>();, +        }, +, +        //Log.d("SBC: put bitmap key=" + sizeKey + " size=" + available.size() + " maxPerSize=" + maxPerSize);, +        final Queue<Bitmap> available;, +, +        synchronized (availableBitmaps) {, +             available = availableBitmaps.get(sizeKey);, +        }, +, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +    private final Queue<byte[]> tempQueue = new LinkedList<byte[]>();, +    private final SizedBitmapCache bitmapCache;, +        byte[] result = null;, +        synchronized (tempQueue) {, +            }, +        }, +        if (result == null) {, +        synchronized (tempQueue) {, +        }, +    }, +++ b/library/src/com/bumptech/photos/resize/cache/SizedBitmapCache.java, +import java.util.concurrent.ConcurrentLinkedQueue;, +        Queue<Bitmap> available;, +        synchronized (availableBitmaps) {, +            available = availableBitmaps.get(sizeKey);, +                available = new ConcurrentLinkedQueue<Bitmap>();, +        }, +, +        //Log.d("SBC: put bitmap key=" + sizeKey + " size=" + available.size() + " maxPerSize=" + maxPerSize);, +        final Queue<Bitmap> available;, +, +        synchronized (availableBitmaps) {, +             available = availableBitmaps.get(sizeKey);, +        }, +, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +        options.useDiskCache = false;, +        options.useMemoryCache = false;, +        options.maxMemorySize = 2 * 1024 * 1024;]