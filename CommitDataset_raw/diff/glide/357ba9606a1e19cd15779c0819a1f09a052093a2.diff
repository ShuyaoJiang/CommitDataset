[+++ b/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;, +import android.graphics.Bitmap;, +import java.util.Iterator;, +import java.util.Map;, +    @Override, +    public void clearMemory() {, +        final Iterator<Map.Entry<String,Bitmap>> iterator = cache.entrySet().iterator();, +        while (iterator.hasNext()) {, +            iterator.next();, +            iterator.remove();, +        }, +        currentSize = 0;, +    }, +, +    @Override, +    public void trimMemory(int level) {, +        if (level >= TRIM_MEMORY_MODERATE) {, +            // Nearing middle of list of cached background apps, +            // Evict our entire bitmap cache, +            clearMemory();, +        } else if (level >= TRIM_MEMORY_BACKGROUND) {, +            // Entering list of cached background apps, +            // Evict oldest half of our bitmap cache, +            trimToSize(currentSize / 2);, +        }, +    }, +, +    private void trimToSize(int size) {, +        Map.Entry<String, Bitmap> last;, +        while (currentSize > size) {, +, +    private void evict() {, +        trimToSize(maxSize);, +    }, +++ b/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;, +import android.graphics.Bitmap;, +import java.util.Iterator;, +import java.util.Map;, +    @Override, +    public void clearMemory() {, +        final Iterator<Map.Entry<String,Bitmap>> iterator = cache.entrySet().iterator();, +        while (iterator.hasNext()) {, +            iterator.next();, +            iterator.remove();, +        }, +        currentSize = 0;, +    }, +, +    @Override, +    public void trimMemory(int level) {, +        if (level >= TRIM_MEMORY_MODERATE) {, +            // Nearing middle of list of cached background apps, +            // Evict our entire bitmap cache, +            clearMemory();, +        } else if (level >= TRIM_MEMORY_BACKGROUND) {, +            // Entering list of cached background apps, +            // Evict oldest half of our bitmap cache, +            trimToSize(currentSize / 2);, +        }, +    }, +, +    private void trimToSize(int size) {, +        Map.Entry<String, Bitmap> last;, +        while (currentSize > size) {, +, +    private void evict() {, +        trimToSize(maxSize);, +    }, +++ b/library/src/com/bumptech/glide/resize/cache/MemoryCache.java, +import android.content.ComponentCallbacks2;, +, +    /**, +     * Evict all items from the memory cache., +     */, +    public void clearMemory();, +, +    /**, +     * Trim the memory cache to the appropriate level. Typically called on the callback onTrimMemory., +     * @param level This integer represents a trim level as specified in {@link ComponentCallbacks2}, +     */, +    public void trimMemory(int level);, +++ b/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;, +import android.graphics.Bitmap;, +import java.util.Iterator;, +import java.util.Map;, +    @Override, +    public void clearMemory() {, +        final Iterator<Map.Entry<String,Bitmap>> iterator = cache.entrySet().iterator();, +        while (iterator.hasNext()) {, +            iterator.next();, +            iterator.remove();, +        }, +        currentSize = 0;, +    }]