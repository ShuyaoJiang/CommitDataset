[+++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, +      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, +  @Test, +  public void testHandlesInexactSizesInByteArrayPools() {, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Portrait", i);, +    }, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Landscape", i);, +    }, +  }, +++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, +      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, +  @Test, +  public void testHandlesInexactSizesInByteArrayPools() {, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Portrait", i);, +    }, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Landscape", i);, +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, +    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;, +++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, +      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, +  @Test, +  public void testHandlesInexactSizesInByteArrayPools() {, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Portrait", i);, +    }, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Landscape", i);, +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, +    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;, +++ b/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java, +      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),, +, +  @Test, +  public void testHandlesInexactSizesInByteArrayPools() {, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Portrait", i);, +    }, +    for (int i = 1; i <= 8; i++) {, +      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +      assertOrientation("Landscape", i);, +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java, +    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java, +  /**, +   * A constant indicating we were unable to parse the orientation from the image either because, +   * no exif segment containing orientation data existed, or because of an I/O error attempting to, +   * read the exif segment., +   */, +  public static final int UNKNOWN_ORIENTATION = -1;, +      if (Log.isLoggable(TAG, Log.DEBUG)) {, +        Log.d(TAG, "Parser doesn't handle magic number: " + magicNumber);, +      }, +      return UNKNOWN_ORIENTATION;, +      int exifSegmentLength = moveToExifSegmentAndGetLength();, +      if (exifSegmentLength == -1) {, +        if (Log.isLoggable(TAG, Log.DEBUG)) {, +          Log.d(TAG, "Failed to parse exif segment length, or exif segment not found");, +        }, +        return UNKNOWN_ORIENTATION;, +      }, +      byte[] exifData = byteArrayPool.get(exifSegmentLength);, +      try {, +        return parseExifSegment(exifData, exifSegmentLength);, +      } finally {, +        byteArrayPool.put(exifData);, +      }, +    }, +  }, +, +  private int parseExifSegment(byte[] tempArray, int exifSegmentLength) throws IOException {, +    int read = reader.read(tempArray, exifSegmentLength);, +    if (read != exifSegmentLength) {, +      if (Log.isLoggable(TAG, Log.DEBUG)) {, +        Log.d(TAG, "Unable to read exif segment data", +            + ", length: " + exifSegmentLength, +            + ", actually read: " + read);]