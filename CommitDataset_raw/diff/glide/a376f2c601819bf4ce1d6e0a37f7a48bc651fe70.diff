[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules, + * and the original AppGlideModule., + * made or classes registered in LibraryGlideModules., + *        android.util.Log.d("Glide", "Discovered LibraryGlideModule from annotation:", + *            + "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");, + *      new com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule(), +  TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClassNames) {, +            appGlideModuleClassName, libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +        generateRegisterComponents(libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +  private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClassNames,, +    for (String glideModule : libraryGlideModuleClassNames) {, +      Set<String> libraryGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {, +    for (String glideModule : libraryGlideModuleClassNames) {, +            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);, +            "Discovered LibraryGlideModule from annotation: " + moduleClassName);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules, + * and the original AppGlideModule., + * made or classes registered in LibraryGlideModules., + *        android.util.Log.d("Glide", "Discovered LibraryGlideModule from annotation:", + *            + "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");, + *      new com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule(), +  TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClassNames) {, +            appGlideModuleClassName, libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +        generateRegisterComponents(libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +  private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClassNames,, +    for (String glideModule : libraryGlideModuleClassNames) {, +      Set<String> libraryGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {, +    for (String glideModule : libraryGlideModuleClassNames) {, +            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);, +            "Discovered LibraryGlideModule from annotation: " + moduleClassName);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules, + * and the original AppGlideModule., + * made or classes registered in LibraryGlideModules., + *        android.util.Log.d("Glide", "Discovered LibraryGlideModule from annotation:", + *            + "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");, + *      new com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule(), +  TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClassNames) {, +            appGlideModuleClassName, libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +        generateRegisterComponents(libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +  private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClassNames,, +    for (String glideModule : libraryGlideModuleClassNames) {, +      Set<String> libraryGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {, +    for (String glideModule : libraryGlideModuleClassNames) {, +            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);, +            "Discovered LibraryGlideModule from annotation: " + moduleClassName);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * {@link LibraryGlideModule} implementations that are, + *   <li>For {@link LibraryGlideModule}s - A GlideIndexer class in a, + *      {@link LibraryGlideModule} classes., + *     {@link LibraryGlideModule}s and the, +  private LibraryModuleProcessor libraryModuleProcessor;, +    libraryModuleProcessor = new LibraryModuleProcessor(processorUtil, indexerGenerator);, +    result.addAll(libraryModuleProcessor.getSupportedAnnotationTypes());, +   *   <li>Find all LibraryGlideModules, +   *   <li>For each LibraryGlideModule, write an Indexer with an Annotation with the class name., +    boolean newModulesWritten = libraryModuleProcessor.processModules(set, env);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, + * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules, + * and the original AppGlideModule., + * made or classes registered in LibraryGlideModules., + *        android.util.Log.d("Glide", "Discovered LibraryGlideModule from annotation:", + *            + "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule");, + *      new com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule(), +  TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClassNames) {, +            appGlideModuleClassName, libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +        generateRegisterComponents(libraryGlideModuleClassNames, excludedGlideModuleClassNames);, +  private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClassNames,, +    for (String glideModule : libraryGlideModuleClassNames) {, +      Set<String> libraryGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {, +    for (String glideModule : libraryGlideModuleClassNames) {, +            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);, +            "Discovered LibraryGlideModule from annotation: " + moduleClassName);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * {@link LibraryGlideModule} implementations that are, + *   <li>For {@link LibraryGlideModule}s - A GlideIndexer class in a, + *      {@link LibraryGlideModule} classes., + *     {@link LibraryGlideModule}s and the, +  private LibraryModuleProcessor libraryModuleProcessor;, +    libraryModuleProcessor = new LibraryModuleProcessor(processorUtil, indexerGenerator);, +    result.addAll(libraryModuleProcessor.getSupportedAnnotationTypes());, +   *   <li>Find all LibraryGlideModules, +   *   <li>For each LibraryGlideModule, write an Indexer with an Annotation with the class name., +    boolean newModulesWritten = libraryModuleProcessor.processModules(set, env);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/IndexerGenerator.java, + * LibraryGlideModules and/or one or more GlideExtensions., + * <p>We use a separate class so that LibraryGlideModules and GlideExtensions written in libraries, + * can be bundled into an AAR and later retrieved by the annotation processor when it processes the, + * <p>The output file generated by this class with a LibraryGlideModule looks like this:, + *      modules = "com.bumptech.glide.integration.okhttp3.OkHttpLibraryGlideModule", + *  public class Indexer_GlideModule_com_bumptech_glide_integration_okhttp3_OkHttpLibraryGlideModule, + *  {, +      } else if (processorUtil.isLibraryGlideModule(element)) {, +  private static TypeSpec generate(List<TypeElement> libraryModules,, +    for (TypeElement childModule : libraryModules) {]