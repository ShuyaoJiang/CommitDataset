[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, +        this.sourceKey = sourceId;, +    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, +        this.sourceKey = sourceId;, +    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, +  public Key getSourceKey() {, +    return sourceKey;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, +        this.sourceKey = sourceId;, +    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, +  public Key getSourceKey() {, +    return sourceKey;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +import com.bumptech.glide.load.DataSource;, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, +        this.sourceKey = sourceId;, +    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, +  public Key getSourceKey() {, +    return sourceKey;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +import com.bumptech.glide.load.DataSource;, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private Key currentSourceKey;, +  private DataSource currentDataSource;, +  private long startFetchTime;, +  public synchronized void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher,, +      DataSource dataSource) {, +    this.currentSourceKey = sourceKey;, +    this.currentDataSource = dataSource;, +      logWithTimeAndKey("Retrieved data", startFetchTime,, +          "data: " + currentData, +          + ", cache key: " + currentSourceKey, +          + ", fetcher: " + currentFetcher);, +    Resource<R> resource = decodeFromData(currentFetcher, currentData, currentDataSource);, +  private <Data> Resource<R> decodeFromData(DataFetcher<?> fetcher, Data data,, +      DataSource dataSource) {, +  private void logWithTimeAndKey(String message, long startTime) {, +    logWithTimeAndKey(message, startTime, null /*extraArgs*/);, +  private void logWithTimeAndKey(String message, long startTime, String extraArgs) {, +    Logs.log(Log.VERBOSE, message + " in " + LogTime.getElapsedMillis(startTime), +        + ", load key: " + loadKey, +        + (extraArgs != null ? ", " + extraArgs : ""), +        + ", thread: " + Thread.currentThread().getName());, +      boolean isFromAlternateCacheKey = !requestContext.isSourceKey(currentSourceKey);, +          key = new DataCacheKey(currentSourceKey, requestContext.getSignature());, +          key = new ResourceCacheKey(currentSourceKey, requestContext.getSignature(), width, height,, +          logWithTimeAndKey("Encoded resource to cache", startEncodeTime,, +              "cache key: " + key, +              + ", encode strategy: " + encodeStrategy);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +import com.bumptech.glide.load.DataSource;, +        this.sourceKey = sourceId;, +    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheKey.java, +  public Key getSourceKey() {, +    return sourceKey;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +import com.bumptech.glide.load.DataSource;, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private Key currentSourceKey;, +  private DataSource currentDataSource;, +  private long startFetchTime;, +  public synchronized void onDataFetcherReady(Key sourceKey, Object data, DataFetcher fetcher,, +      DataSource dataSource) {, +    this.currentSourceKey = sourceKey;, +    this.currentDataSource = dataSource;, +      logWithTimeAndKey("Retrieved data", startFetchTime,, +          "data: " + currentData, +          + ", cache key: " + currentSourceKey, +          + ", fetcher: " + currentFetcher);, +    Resource<R> resource = decodeFromData(currentFetcher, currentData, currentDataSource);, +  private <Data> Resource<R> decodeFromData(DataFetcher<?> fetcher, Data data,, +      DataSource dataSource) {, +  private void logWithTimeAndKey(String message, long startTime) {, +    logWithTimeAndKey(message, startTime, null /*extraArgs*/);, +  private void logWithTimeAndKey(String message, long startTime, String extraArgs) {, +    Logs.log(Log.VERBOSE, message + " in " + LogTime.getElapsedMillis(startTime), +        + ", load key: " + loadKey, +        + (extraArgs != null ? ", " + extraArgs : ""), +        + ", thread: " + Thread.currentThread().getName());, +      boolean isFromAlternateCacheKey = !requestContext.isSourceKey(currentSourceKey);]