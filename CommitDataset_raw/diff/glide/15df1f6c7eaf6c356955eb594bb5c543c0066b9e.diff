[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   *, +   * @deprecated Use {@link #submit(int, int)} instead., +  @Deprecated, +    return submit(width, height);, +  }, +, +  /**, +   * Returns a future that can be used to do a blocking get on a background thread., +   *, +   * <p>This method defaults to {@link Target#SIZE_ORIGINAL} for the width and the height. However,, +   * since the width and height will be overriden by values passed to {@link, +   * RequestOptions#override(int, int)}, this method can be used whenever {@link RequestOptions}, +   * with override values are applied, or whenever you want to retrieve the image in its original, +   * size., +   *, +   * @see #submit(int, int), +   * @see #into(Target), +   */, +  public FutureTarget<TranscodeType> submit() {, +    return submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);, +  }, +, +  /**, +   * Returns a future that can be used to do a blocking get on a background thread., +   *, +   * @param width  The desired width in pixels, or {@link Target#SIZE_ORIGINAL}. This will be, +   *               overridden by, +   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)} if, +   *               previously called., +   * @param height The desired height in pixels, or {@link Target#SIZE_ORIGINAL}. This will be, +   *               overridden by, +   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)}} if, +   *               previously called)., +   */, +  public FutureTarget<TranscodeType> submit(int width, int height) {, +    if (Util.isOnBackgroundThread()) {, +    } else {, +      into(target);, +    }, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   *, +   * @deprecated Use {@link #submit(int, int)} instead., +  @Deprecated, +    return submit(width, height);, +  }, +, +  /**, +   * Returns a future that can be used to do a blocking get on a background thread., +   *, +   * <p>This method defaults to {@link Target#SIZE_ORIGINAL} for the width and the height. However,, +   * since the width and height will be overriden by values passed to {@link, +   * RequestOptions#override(int, int)}, this method can be used whenever {@link RequestOptions}, +   * with override values are applied, or whenever you want to retrieve the image in its original, +   * size., +   *, +   * @see #submit(int, int), +   * @see #into(Target), +   */, +  public FutureTarget<TranscodeType> submit() {, +    return submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);, +  }, +, +  /**, +   * Returns a future that can be used to do a blocking get on a background thread., +   *, +   * @param width  The desired width in pixels, or {@link Target#SIZE_ORIGINAL}. This will be, +   *               overridden by, +   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)} if, +   *               previously called., +   * @param height The desired height in pixels, or {@link Target#SIZE_ORIGINAL}. This will be, +   *               overridden by, +   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)}} if, +   *               previously called)., +   */, +  public FutureTarget<TranscodeType> submit(int width, int height) {, +    if (Util.isOnBackgroundThread()) {, +    } else {, +      into(target);, +    }, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +   * A helper method equivalent to calling {@link #asDrawable()} and then {@link, +   * RequestBuilder#load(Object)} with the given model., +   *, +   * @return A new request builder for loading a {@link Drawable} using the given model., +   */, +  public RequestBuilder<Drawable> load(@Nullable Object model) {, +    return asDrawable().load(model);, +  }, +, +  /**, +   * A helper method equivalent to calling {@link #downloadOnly()} ()} and then {@link, +   * RequestBuilder#load(Object)} with the given model., +   *, +   * @return A new request builder for loading a {@link Drawable} using the given model., +   */, +  public RequestBuilder<File> download(@Nullable Object model) {, +    return downloadOnly().load(model);, +  }, +]