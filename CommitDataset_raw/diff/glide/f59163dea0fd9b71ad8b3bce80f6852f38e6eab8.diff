[+++ b/.gitignore, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, +        if (tag != null && tag instanceof ImageViewTarget) {, +            ImagePresenter<T> result = target.getImagePresenter();, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, +        if (tag != null && tag instanceof ImageViewTarget) {, +            ImagePresenter<T> result = target.getImagePresenter();, +++ b/library/src/com/bumptech/glide/presenter/target/ImageViewTarget.java, + * A target wrapping an ImageView that makes use of {@link ImageView#setTag(Object)} to store and retrieve, + * ImagePresenters. Also obtains the runtime dimensions of the ImageView., +    /**, +     * TODO: use {@link View#setTag(int, Object)} when we can do so and still create, +     * a jar, +     */, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, +        if (tag != null && tag instanceof ImageViewTarget) {, +            ImagePresenter<T> result = target.getImagePresenter();, +++ b/library/src/com/bumptech/glide/presenter/target/ImageViewTarget.java, + * A target wrapping an ImageView that makes use of {@link ImageView#setTag(Object)} to store and retrieve, + * ImagePresenters. Also obtains the runtime dimensions of the ImageView., +    /**, +     * TODO: use {@link View#setTag(int, Object)} when we can do so and still create, +     * a jar, +     */, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import java.io.UnsupportedEncodingException;, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.HashMap;, +import java.util.Map;, +    private final SafeKeyGenerator safeKeyGenerator = new SafeKeyGenerator();, +        final String key = safeKeyGenerator.getSafeKey(id, transformation, downsampler, width, height);, +++ b/.gitignore, +++ b/README.md, +Sam Judd - <sam.a.judd@gmail.com> @samajudd, +++ b/library/src/com/bumptech/glide/Glide.java, +        if (tag != null && tag instanceof ImageViewTarget) {, +            ImagePresenter<T> result = target.getImagePresenter();, +++ b/library/src/com/bumptech/glide/presenter/target/ImageViewTarget.java, + * A target wrapping an ImageView that makes use of {@link ImageView#setTag(Object)} to store and retrieve, + * ImagePresenters. Also obtains the runtime dimensions of the ImageView., +    /**, +     * TODO: use {@link View#setTag(int, Object)} when we can do so and still create, +     * a jar, +     */, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import java.io.UnsupportedEncodingException;, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.HashMap;, +import java.util.Map;, +    private final SafeKeyGenerator safeKeyGenerator = new SafeKeyGenerator();, +        final String key = safeKeyGenerator.getSafeKey(id, transformation, downsampler, width, height);, +++ b/library/src/com/bumptech/glide/resize/SafeKeyGenerator.java, +package com.bumptech.glide.resize;, +, +import android.os.Build;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.Transformation;, +import com.bumptech.glide.util.Util;, +, +import java.io.UnsupportedEncodingException;, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayDeque;, +import java.util.HashMap;, +import java.util.LinkedList;, +import java.util.Map;, +import java.util.Queue;, +, +public class SafeKeyGenerator {, +    private final Map<LoadId, String> loadIdToSafeHash = new HashMap<LoadId, String>();, +    private final ByteBuffer byteBuffer = ByteBuffer.allocate(8);, +    private final LoadIdPool loadIdPool = new LoadIdPool();, +    private MessageDigest messageDigest;, +, +    public SafeKeyGenerator() {, +        try {, +            messageDigest = MessageDigest.getInstance("SHA-256");, +        } catch (NoSuchAlgorithmException e) {, +            e.printStackTrace();, +        }, +    }, +, +    public String getSafeKey(String id, Transformation transformation, Downsampler downsampler, int width, int height) {]