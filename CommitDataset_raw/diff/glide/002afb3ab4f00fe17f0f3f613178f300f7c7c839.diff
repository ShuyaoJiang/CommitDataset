[+++ b/library/findbugs-exclude.xml, +    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, +    <Match>, +        <Class name="com.bumptech.glide.load.engine.DecodeJob" />, +        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, +    </Match>, +, +++ b/library/findbugs-exclude.xml, +    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, +    <Match>, +        <Class name="com.bumptech.glide.load.engine.DecodeJob" />, +        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, +    </Match>, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +      GlideExecutor executor = mock(GlideExecutor.class);, +      doAnswer(new Answer<Void>() {, +        public Void answer(InvocationOnMock invocation) throws Throwable {, +          return null;, +      }).when(executor).execute(any(Runnable.class));, +          .setResizeExecutor(executor).setDiskCacheExecutor(executor);, +++ b/library/findbugs-exclude.xml, +    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, +    <Match>, +        <Class name="com.bumptech.glide.load.engine.DecodeJob" />, +        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, +    </Match>, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +      GlideExecutor executor = mock(GlideExecutor.class);, +      doAnswer(new Answer<Void>() {, +        public Void answer(InvocationOnMock invocation) throws Throwable {, +          return null;, +      }).when(executor).execute(any(Runnable.class));, +          .setResizeExecutor(executor).setDiskCacheExecutor(executor);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import android.support.v4.util.Pools;, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +  public void testDoesNotNotifyCancelledIfCompletes() {, +    job.start(harness.decodeJob);, +  public void testCancelsDecodeJobOnCancel() {, +  public void testSubmitsDecodeJobToSourceServiceOnSubmitForSource() {, +    verify(harness.sourceService).execute(eq(harness.decodeJob));, +  public void testSubmitsDecodeJobToDiskCacheServiceOnStart() {, +    verify(harness.diskCacheService).execute(eq(harness.decodeJob));, +    GlideExecutor diskCacheService = mock(GlideExecutor.class);, +    GlideExecutor sourceService = mock(GlideExecutor.class);, +    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);, +      job = new EngineJob(diskCacheService, sourceService, listener, pool, factory), +          .init(key, isCacheable);, +    GlideExecutor diskCacheService = mock(GlideExecutor.class);, +    GlideExecutor sourceService = mock(GlideExecutor.class);, +    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);, +      EngineJob result = new EngineJob(diskCacheService, sourceService, listener, pool, factory), +          .init(key, isCacheable);, +++ b/library/findbugs-exclude.xml, +    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, +    <Match>, +        <Class name="com.bumptech.glide.load.engine.DecodeJob" />, +        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />, +    </Match>, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +      GlideExecutor executor = mock(GlideExecutor.class);, +      doAnswer(new Answer<Void>() {, +        public Void answer(InvocationOnMock invocation) throws Throwable {, +          return null;, +      }).when(executor).execute(any(Runnable.class));, +          .setResizeExecutor(executor).setDiskCacheExecutor(executor);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import android.support.v4.util.Pools;, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +  public void testDoesNotNotifyCancelledIfCompletes() {, +    job.start(harness.decodeJob);, +  public void testCancelsDecodeJobOnCancel() {, +  public void testSubmitsDecodeJobToSourceServiceOnSubmitForSource() {, +    verify(harness.sourceService).execute(eq(harness.decodeJob));, +  public void testSubmitsDecodeJobToDiskCacheServiceOnStart() {, +    verify(harness.diskCacheService).execute(eq(harness.decodeJob));, +    GlideExecutor diskCacheService = mock(GlideExecutor.class);, +    GlideExecutor sourceService = mock(GlideExecutor.class);, +    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);, +      job = new EngineJob(diskCacheService, sourceService, listener, pool, factory), +          .init(key, isCacheable);, +    GlideExecutor diskCacheService = mock(GlideExecutor.class);, +    GlideExecutor sourceService = mock(GlideExecutor.class);, +    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);, +      EngineJob result = new EngineJob(diskCacheService, sourceService, listener, pool, factory), +          .init(key, isCacheable);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +      engine = new Engine(cache, mock(DiskCache.Factory.class), mock(GlideExecutor.class),, +          mock(GlideExecutor.class), jobs, keyFactory, activeResources, engineJobFactory,, +++ b/library/findbugs-exclude.xml, +    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->, +    <Match>, +        <Class name="com.bumptech.glide.load.engine.DecodeJob" />]