[+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.load.MultiTransformation;, +   * Applies the given {@link Transformation}s in the given order for, +   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},, +   * {@link android.graphics.drawable.BitmapDrawable}, and, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}), +   * and throws an exception if asked to transform an unknown type., +   * <p>, +   * <p>This will override previous calls to {@link #dontTransform()}., +   *, +   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s., +   * @see #optionalTransform(Transformation), +   * @see #optionalTransform(Class, Transformation), +   */, +  public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {, +    if (isAutoCloneEnabled) {, +      return clone().transforms(transformations);, +    }, +, +    optionalTransform(new MultiTransformation<>(transformations));, +    isTransformationRequired = true;, +    fields |= TRANSFORMATION_REQUIRED;, +    return selfOrThrowIfLocked();, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import com.bumptech.glide.load.MultiTransformation;, +   * Applies the given {@link Transformation}s in the given order for, +   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},, +   * {@link android.graphics.drawable.BitmapDrawable}, and, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}), +   * and throws an exception if asked to transform an unknown type., +   * <p>, +   * <p>This will override previous calls to {@link #dontTransform()}., +   *, +   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s., +   * @see #optionalTransform(Transformation), +   * @see #optionalTransform(Class, Transformation), +   */, +  public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {, +    if (isAutoCloneEnabled) {, +      return clone().transforms(transformations);, +    }, +, +    optionalTransform(new MultiTransformation<>(transformations));, +    isTransformationRequired = true;, +    fields |= TRANSFORMATION_REQUIRED;, +    return selfOrThrowIfLocked();, +  }, +, +  /**, +++ b/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java, +, +import com.bumptech.glide.load.MultiTransformation;, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.CircleCrop;, +, +, +  @Test, +  public void testApplyMultiTransform() {, +    options.transforms(new CircleCrop(), new CenterCrop());, +    assertThat(options.isTransformationRequired()).isTrue();, +    assertThat(options.getTransformations()).containsKey(Bitmap.class);, +    assertThat(options.getTransformations().get(Bitmap.class)), +      .isInstanceOf(MultiTransformation.class);, +  }]