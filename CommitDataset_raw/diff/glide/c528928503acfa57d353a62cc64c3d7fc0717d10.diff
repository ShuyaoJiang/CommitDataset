[+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java, +import android.graphics.Bitmap.CompressFormat;, +import java.io.ByteArrayOutputStream;, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, quality));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.WEBP, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.PNG, 90));, +    byte[] encode() throws IOException {, +      return ByteBufferUtil.toBytes(ByteBufferUtil.fromFile(file));, +    }, +, +    byte[] expectedData(CompressFormat expectedFormat, int expectedQuality) {, +      ByteArrayOutputStream os = new ByteArrayOutputStream();, +      bitmap.compress(expectedFormat, expectedQuality, os);, +      return os.toByteArray();, +++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java, +import android.graphics.Bitmap.CompressFormat;, +import java.io.ByteArrayOutputStream;, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, quality));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.WEBP, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.JPEG, 90));, +    assertThat(harness.encode()).isEqualTo(harness.expectedData(CompressFormat.PNG, 90));, +    byte[] encode() throws IOException {, +      return ByteBufferUtil.toBytes(ByteBufferUtil.fromFile(file));, +    }, +, +    byte[] expectedData(CompressFormat expectedFormat, int expectedQuality) {, +      ByteArrayOutputStream os = new ByteArrayOutputStream();, +      bitmap.compress(expectedFormat, expectedQuality, os);, +      return os.toByteArray();, +++ b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java, +import com.bumptech.glide.util.Preconditions;, +import java.io.ByteArrayOutputStream;, +    assertThat(harness.getTranscodeResult()).isEqualTo(harness.getExpectedData());, +    assertThat(harness.getTranscodeResult()).isEqualTo(harness.getExpectedData());, +      assertThat(harness.getTranscodeResult()).isEqualTo(harness.getExpectedData());, +    harness.getTranscodeResult();, +    byte[] getTranscodeResult() {, +      Resource<byte[]> bytesResource =, +          Preconditions.checkNotNull(transcoder.transcode(bitmapResource, options));, +      return bytesResource.get();, +    }, +, +    byte[] getExpectedData() {, +      ByteArrayOutputStream os = new ByteArrayOutputStream();, +      bitmap.compress(compressFormat, quality, os);, +      return os.toByteArray();]