[+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +   * Returns a new fixed thread pool with the default thread count returned from, +   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_DISK_CACHE_EXECUTOR_NAME} thread name, +   * prefix, and a custom, +   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}, +   * uncaught throwable strategy., +   *, +   * <p>Disk cache executors do not allow network operations on their threads., +   * @param uncaughtThrowableStrategy The {@link, +   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to, +   *                                  handle uncaught exceptions., +   */, +  public static GlideExecutor newDiskCacheExecutor(, +          UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,, +                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);, +  }, +, +  /**, +   * Returns a new fixed thread pool with the default thread count returned from, +   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_SOURCE_EXECUTOR_NAME} thread name, +   * prefix, and a custom, +   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}, +   * uncaught throwable strategy., +   *, +   * <p>Source executors allow network operations on their threads., +   *, +   * @param uncaughtThrowableStrategy The {@link, +   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to, +   *                                  handle uncaught exceptions., +   */, +  public static GlideExecutor newSourceExecutor(, +          UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,, +                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);, +  }, +, +  /**, +  public interface UncaughtThrowableStrategy {, +    UncaughtThrowableStrategy IGNORE = new UncaughtThrowableStrategy() {, +      @Override, +      public void handle(Throwable t) {, +        //ignore, +      }, +    };, +    UncaughtThrowableStrategy LOG = new UncaughtThrowableStrategy() {, +      public void handle(Throwable t) {, +    };, +    UncaughtThrowableStrategy THROW = new UncaughtThrowableStrategy() {, +      public void handle(Throwable t) {, +    UncaughtThrowableStrategy DEFAULT = LOG;, +    void handle(Throwable t);]