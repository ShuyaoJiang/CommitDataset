[+++ b/src/com/bumptech/photos/PhotoManager.java, +    public Object getImage(final String path, final LoadedCallback cb){, +            final Runnable task = resizer.loadAsIs(path, getResizeCb(key, token, cb, false, false));, +++ b/src/com/bumptech/photos/PhotoManager.java, +    public Object getImage(final String path, final LoadedCallback cb){, +            final Runnable task = resizer.loadAsIs(path, getResizeCb(key, token, cb, false, false));, +++ b/src/com/bumptech/photos/cache/PhotoDiskCache.java, +    public Runnable put(final String key, final Bitmap bitmap) {, +        return new Runnable() {, +                if (bitmap == null) return;, +, +        };, +    public Runnable get(final String key, final GetCallback cb) {, +        return new Runnable() {, +        };, +++ b/src/com/bumptech/photos/PhotoManager.java, +    public Object getImage(final String path, final LoadedCallback cb){, +            final Runnable task = resizer.loadAsIs(path, getResizeCb(key, token, cb, false, false));, +++ b/src/com/bumptech/photos/cache/PhotoDiskCache.java, +    public Runnable put(final String key, final Bitmap bitmap) {, +        return new Runnable() {, +                if (bitmap == null) return;, +, +        };, +    public Runnable get(final String key, final GetCallback cb) {, +        return new Runnable() {, +        };, +++ b/src/com/bumptech/photos/resize/PhotoStreamResizer.java, +    public PhotoStreamResizer(Handler mainHandler){, +    public Runnable resizeCenterCrop(final String path, final int width, final int height, ResizeCallback callback){, +        return new StreamResizeRunnable(callback) {, +            public Bitmap resize() {, +                Bitmap streamed = Utils.streamIn(path, width, height);, +    public Runnable fitInSpace(final String path, final int width, final int height, ResizeCallback callback){, +        return new StreamResizeRunnable(callback) {, +            public Bitmap resize() {, +    public Runnable loadApproximate(final String path, final int width, final int height, ResizeCallback callback){, +        return new StreamResizeRunnable(callback) {, +            public Bitmap resize() {, +    public Runnable loadAsIs(final InputStream is, final Bitmap recycle, final ResizeCallback callback) {, +        return new StreamResizeRunnable(callback) {, +            public Bitmap resize() {, +    public Runnable loadAsIs(String path, ResizeCallback callback){, +    public Runnable loadAsIs(final String path, final Bitmap recycled, ResizeCallback callback){, +        return new StreamResizeRunnable(callback) {, +            public Bitmap resize() {, +    };, +    private abstract class StreamResizeRunnable implements Runnable {, +        private final PhotoStreamResizer.ResizeCallback callback;, +        public StreamResizeRunnable(PhotoStreamResizer.ResizeCallback callback) {, +        public final void run() {, +                final Bitmap result = resize();, +, +        public abstract Bitmap resize();]