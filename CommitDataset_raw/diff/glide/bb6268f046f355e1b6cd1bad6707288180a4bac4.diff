[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +, +            Class<R> transcodedClass, ResourceTranscoder<Bitmap, R> transcoder) {, +        if (streamModelLoader == null && fileDescriptorModelLoader == null) {, +            return null;, +        }, +, +        if (transcoder == null) {, +            transcoder = glide.buildTranscoder(Bitmap.class, transcodedClass);, +        }, +        DataLoadProvider<ImageVideoWrapper, Bitmap> loadProvider = glide.buildDataProvider(ImageVideoWrapper.class,, +                Bitmap.class);, +        ImageVideoModelLoader<A> modelLoader = new ImageVideoModelLoader<A>(streamModelLoader,, +                fileDescriptorModelLoader);, +, +        return new FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R>(modelLoader, transcoder, loadProvider);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +, +            Class<R> transcodedClass, ResourceTranscoder<Bitmap, R> transcoder) {, +        if (streamModelLoader == null && fileDescriptorModelLoader == null) {, +            return null;, +        }, +, +        if (transcoder == null) {, +            transcoder = glide.buildTranscoder(Bitmap.class, transcodedClass);, +        }, +        DataLoadProvider<ImageVideoWrapper, Bitmap> loadProvider = glide.buildDataProvider(ImageVideoWrapper.class,, +                Bitmap.class);, +        ImageVideoModelLoader<A> modelLoader = new ImageVideoModelLoader<A>(streamModelLoader,, +                fileDescriptorModelLoader);, +, +        return new FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R>(modelLoader, transcoder, loadProvider);, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.request.target.Target;, +import java.io.File;, +        if (streamModelLoader == null && fileDescriptorModelLoader == null) {, +            return null;, +        if (transcoder == null) {, +            transcoder = glide.buildTranscoder(resourceClass, transcodedClass);, +        }, +        DataLoadProvider<ImageVideoWrapper, Z> dataLoadProvider = glide.buildDataProvider(ImageVideoWrapper.class,, +                resourceClass);, +        ImageVideoModelLoader<A> modelLoader = new ImageVideoModelLoader<A>(streamModelLoader,, +                fileDescriptorModelLoader);, +        return new FixedLoadProvider<A, ImageVideoWrapper, Z, R>(modelLoader, transcoder, dataLoadProvider);, +    }, +, +    /**, +     * Loads the original unmodified data into the cache and calls the given Target with the cache File, +     * @param target The Target that will receive the cache File when the load completes, +     * @param <Y> The type of Target., +     * @return The given Target., +     */, +    public <Y extends Target<File>> Y downloadOnly(Y target) {, +        return getDownloadOnlyRequest().downloadOnly(target);, +    }, +, +    /**, +     * Loads the original unmodified data into the cache and returns a {@link java.util.concurrent.Future} that can be, +     * used to retrieve the cache File containing the data., +     * @param width The width to use to fetch the data., +     * @param height The height to use to fetch the data., +     * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File containing the data., +     */, +    public FutureTarget<File> downloadOnly(int width, int height) {, +        return getDownloadOnlyRequest().downloadOnly(width, height);, +    }, +, +    private GenericTranscodeRequest<A, InputStream, File> getDownloadOnlyRequest() {, +        return optionsApplier.apply(model, new GenericTranscodeRequest<A, InputStream, File>(context, glide, model,, +                streamModelLoader, InputStream.class, File.class, requestTracker, optionsApplier));, +    }, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +, +            Class<R> transcodedClass, ResourceTranscoder<Bitmap, R> transcoder) {, +        if (streamModelLoader == null && fileDescriptorModelLoader == null) {, +            return null;, +        }, +, +        if (transcoder == null) {, +            transcoder = glide.buildTranscoder(Bitmap.class, transcodedClass);, +        }, +        DataLoadProvider<ImageVideoWrapper, Bitmap> loadProvider = glide.buildDataProvider(ImageVideoWrapper.class,, +                Bitmap.class);, +        ImageVideoModelLoader<A> modelLoader = new ImageVideoModelLoader<A>(streamModelLoader,, +                fileDescriptorModelLoader);, +, +        return new FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R>(modelLoader, transcoder, loadProvider);, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, +import com.bumptech.glide.request.FutureTarget;, +import com.bumptech.glide.request.target.Target;, +import java.io.File;, +        if (streamModelLoader == null && fileDescriptorModelLoader == null) {, +            return null;, +        if (transcoder == null) {, +            transcoder = glide.buildTranscoder(resourceClass, transcodedClass);, +        }]