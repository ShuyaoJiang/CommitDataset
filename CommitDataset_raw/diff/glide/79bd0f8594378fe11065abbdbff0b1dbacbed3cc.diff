[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,, +          encodeStrategy)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,, +          encodeStrategy)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +  ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  AUTOMATIC(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  };, +  DiskCacheStrategy(boolean decodeCachedData,, +  public abstract boolean isDataCacheable(DataSource dataSource);, +   * Returns true if this request should cache the final transformed resource., +  public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey,, +      DataSource dataSource, EncodeStrategy encodeStrategy);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,, +          encodeStrategy)) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java, +  ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  },, +  AUTOMATIC(true /*decodeCachedData*/, true /*decodeCachedResource*/) {, +    public boolean isDataCacheable(DataSource dataSource) {, +    public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource dataSource,, +  };, +  DiskCacheStrategy(boolean decodeCachedData,, +  public abstract boolean isDataCacheable(DataSource dataSource);, +   * Returns true if this request should cache the final transformed resource., +  public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey,, +      DataSource dataSource, EncodeStrategy encodeStrategy);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java, +    DiskCacheStrategy diskCacheStrategy = requestContext.getDiskCacheStrategy();, +    if (data != null && diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) {]