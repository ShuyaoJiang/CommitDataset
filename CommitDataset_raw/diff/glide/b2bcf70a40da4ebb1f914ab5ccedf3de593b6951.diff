[+++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorFileLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorFileLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorUriLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorFileLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorUriLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/stream/StreamByteArrayLoader.java, +import java.util.UUID;, +public class StreamByteArrayLoader implements StreamModelLoader<byte[]> {, +        return new ByteArrayFetcher(model);, +    }, +, +    @Override, +    public String getId(byte[] model) {, +        return UUID.randomUUID().toString();, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorFileLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorUriLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/stream/StreamByteArrayLoader.java, +import java.util.UUID;, +public class StreamByteArrayLoader implements StreamModelLoader<byte[]> {, +        return new ByteArrayFetcher(model);, +    }, +, +    @Override, +    public String getId(byte[] model) {, +        return UUID.randomUUID().toString();, +++ b/library/src/com/bumptech/glide/loader/bitmap/resource/ByteArrayFetcher.java, +    public ByteArrayFetcher(byte[] bytes) {, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;, +        String imageId = null;, +            imageId = imageModelLoader.getId(model);, +        String videoId = null;, +            videoId = videoModelLoader.getId(model);, +        return new ImageVideoBitmapLoad<Y, Z>(imageId, imageFetcher, imageDecoder, videoId, videoFetcher, videoDecoder,, +                transformation, width, height);, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorFileLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/file_descriptor/FileDescriptorUriLoader.java, +, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/stream/StreamByteArrayLoader.java, +import java.util.UUID;, +public class StreamByteArrayLoader implements StreamModelLoader<byte[]> {, +        return new ByteArrayFetcher(model);, +    }, +, +    @Override, +    public String getId(byte[] model) {, +        return UUID.randomUUID().toString();, +++ b/library/src/com/bumptech/glide/loader/bitmap/resource/ByteArrayFetcher.java, +    public ByteArrayFetcher(byte[] bytes) {, +++ b/library/src/com/bumptech/glide/loader/bitmap/resource/LocalUriFetcher.java, +++ b/library/src/com/bumptech/glide/loader/bitmap/ImageVideoBitmapLoadFactory.java, +import com.bumptech.glide.resize.load.ImageVideoBitmapLoad;]