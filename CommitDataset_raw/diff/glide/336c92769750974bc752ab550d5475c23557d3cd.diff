[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java, +package com.bumptech.glide.load.engine;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.signature.StringSignature;, +import com.bumptech.glide.tests.KeyAssertions;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +import java.io.UnsupportedEncodingException;, +import java.security.NoSuchAlgorithmException;, +, +@RunWith(JUnit4.class), +public class ResourceCacheKeyTest {, +, +  private Factory factory;, +, +  @Before, +  public void setUp() {, +    factory = new Factory();, +  }, +, +  @Test, +  public void testIdenticalWithSameArguments(), +      throws UnsupportedEncodingException, NoSuchAlgorithmException {, +    KeyAssertions.assertSame(factory.build(), factory.build());, +  }, +, +  @Test, +  public void testDifferIfSourceKeyDiffers(), +      throws UnsupportedEncodingException, NoSuchAlgorithmException {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.sourceKey = new StringSignature("secondKey");, +      }, +    });, +  }, +, +  @Test, +  public void testDiffersIfSignatureDiffers() {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.signature = new StringSignature("secondSignature");, +      }, +    });, +  }, +, +  @Test, +  public void testDiffersIfWidthDiffers() {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.width = factory.width * 2;, +      }, +    });, +  }, +, +  @Test, +  public void testDiffersIfHeightDiffers() {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.height = factory.height * 2;, +      }, +    });, +  }, +, +  @Test, +  public void tesDiffersIfTransformationDiffers() {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.transformation = mock(Transformation.class);, +        when(factory.transformation.getId()).thenReturn("otherTransformation");, +      }, +    });, +  }, +, +  @Test, +  public void testDiffersIfResourceDiffers() {, +    mutateAndAssertDifferent(new FactoryMutation() {, +      @Override, +      public void mutate(Factory factory) {, +        factory.resourceClass = Integer.class;, +      }, +    });, +  }, +, +  interface FactoryMutation {]