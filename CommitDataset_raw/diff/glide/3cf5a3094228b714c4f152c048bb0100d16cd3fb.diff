[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import com.bumptech.glide.request.target.Target;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +    @Mock, +        MockitoAnnotations.initMocks(this);, +        Resource<Bitmap> resource = mockResource(100, 100);, +        Resource<Bitmap> resource = mockResource(1, 2);, +        final Resource<Bitmap> resource = mockResource(223, 4123);, +                assertEquals(resource.get(), toTransform);, +                return resource.get();, +, +        Resource<Bitmap> resource = mockResource(100, 100);, +, +    @Test, +    public void testCallsTransformWithGivenBitmapWidthIfWidthIsSizeOriginal() {, +        SizeTrackingTransform transform = new SizeTrackingTransform();, +, +        int expectedWidth = 200;, +        Resource<Bitmap> resource = mockResource(expectedWidth, 300);, +        transform.transform(resource, Target.SIZE_ORIGINAL, 500);, +, +        assertEquals(expectedWidth, transform.givenWidth);, +    }, +, +    @Test, +    public void testCallsTransformWithGivenBitmapHeightIfHeightIsSizeOriginal() {, +        SizeTrackingTransform transform = new SizeTrackingTransform();, +, +        int expectedHeight = 500;, +        Resource<Bitmap> resource = mockResource(123, expectedHeight);, +        transform.transform(resource, 444, expectedHeight);, +, +        assertEquals(expectedHeight, transform.givenHeight);, +    }, +, +    @SuppressWarnings("unchecked"), +    private Resource<Bitmap> mockResource(int width, int height) {, +        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);, +        Resource<Bitmap> resource = mock(Resource.class);, +        when(resource.get()).thenReturn(bitmap);, +        return resource;, +    }, +, +    private class SizeTrackingTransform extends BitmapTransformation {, +        int givenWidth;, +        int givenHeight;, +, +        public SizeTrackingTransform() {, +            super(bitmapPool);, +        }, +, +        @Override, +        protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {, +            givenWidth = outWidth;, +            givenHeight = outHeight;, +            return null;, +        }, +, +        @Override, +        public String getId() {, +            return null;, +        }, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java, +import com.bumptech.glide.request.target.Target;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +    @Mock, +        MockitoAnnotations.initMocks(this);, +        Resource<Bitmap> resource = mockResource(100, 100);, +        Resource<Bitmap> resource = mockResource(1, 2);, +        final Resource<Bitmap> resource = mockResource(223, 4123);, +                assertEquals(resource.get(), toTransform);, +                return resource.get();, +, +        Resource<Bitmap> resource = mockResource(100, 100);, +, +    @Test, +    public void testCallsTransformWithGivenBitmapWidthIfWidthIsSizeOriginal() {, +        SizeTrackingTransform transform = new SizeTrackingTransform();, +, +        int expectedWidth = 200;, +        Resource<Bitmap> resource = mockResource(expectedWidth, 300);, +        transform.transform(resource, Target.SIZE_ORIGINAL, 500);, +, +        assertEquals(expectedWidth, transform.givenWidth);, +    }, +, +    @Test, +    public void testCallsTransformWithGivenBitmapHeightIfHeightIsSizeOriginal() {, +        SizeTrackingTransform transform = new SizeTrackingTransform();, +, +        int expectedHeight = 500;, +        Resource<Bitmap> resource = mockResource(123, expectedHeight);, +        transform.transform(resource, 444, expectedHeight);, +, +        assertEquals(expectedHeight, transform.givenHeight);, +    }, +]