[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.TypeVariableName;, +import java.util.LinkedHashSet;, +import javax.lang.model.element.TypeParameterElement;, +import javax.lang.model.type.TypeVariable;, +  static MethodSpec.Builder overriding(ExecutableElement method) {, +    String methodName = method.getSimpleName().toString();, +, +    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName), +        .addAnnotation(Override.class);, +, +    Set<Modifier> modifiers = method.getModifiers();, +    modifiers = new LinkedHashSet<>(modifiers);, +    modifiers.remove(Modifier.ABSTRACT);, +    Modifier defaultModifier = null;, +    // Modifier.DEFAULT doesn't exist until Java 8., +    try {, +      defaultModifier = Modifier.valueOf("DEFAULT");, +    } catch (IllegalArgumentException e) {, +      // Ignored., +    }, +    modifiers.remove(defaultModifier);, +, +    builder = builder.addModifiers(modifiers);, +, +    for (TypeParameterElement typeParameterElement : method.getTypeParameters()) {, +      TypeVariable var = (TypeVariable) typeParameterElement.asType();, +      builder = builder.addTypeVariable(TypeVariableName.get(var));, +    }, +, +    builder = builder.returns(TypeName.get(method.getReturnType())), +        .addParameters(getParameters(method)), +        .varargs(method.isVarArgs());, +, +    for (TypeMirror thrownType : method.getThrownTypes()) {, +      builder = builder.addException(TypeName.get(thrownType));, +    }, +, +    return builder;, +  }, +, +  static List<ParameterSpec> getParameters(ExecutableElement method) {, +    return getParameters(method.getParameters());, +  }, +, +  static List<ParameterSpec> getParameters(List<? extends VariableElement> parameters) {, +    List<ParameterSpec> result = new ArrayList<>();, +    for (VariableElement parameter : parameters) {, +      result.add(getParameter(parameter));, +    }, +    return result;, +  }, +, +  private static ParameterSpec getParameter(VariableElement method) {, +    TypeName type = TypeName.get(method.asType());, +    String name = method.getSimpleName().toString();, +    return ParameterSpec.builder(type, name), +        .addModifiers(method.getModifiers()), +        .addAnnotations(getAnnotations(method)), +        .build();, +  }, +, +  private static List<AnnotationSpec> getAnnotations(VariableElement element) {, +    List<AnnotationSpec> result = new ArrayList<>();, +    for (AnnotationMirror mirror : element.getAnnotationMirrors()) {, +      result.add(AnnotationSpec.get(mirror));, +    }, +    return result;, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.TypeVariableName;, +import java.util.LinkedHashSet;, +import javax.lang.model.element.TypeParameterElement;, +import javax.lang.model.type.TypeVariable;, +  static MethodSpec.Builder overriding(ExecutableElement method) {, +    String methodName = method.getSimpleName().toString();, +, +    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName), +        .addAnnotation(Override.class);, +, +    Set<Modifier> modifiers = method.getModifiers();, +    modifiers = new LinkedHashSet<>(modifiers);, +    modifiers.remove(Modifier.ABSTRACT);, +    Modifier defaultModifier = null;, +    // Modifier.DEFAULT doesn't exist until Java 8., +    try {, +      defaultModifier = Modifier.valueOf("DEFAULT");, +    } catch (IllegalArgumentException e) {, +      // Ignored., +    }, +    modifiers.remove(defaultModifier);, +, +    builder = builder.addModifiers(modifiers);, +, +    for (TypeParameterElement typeParameterElement : method.getTypeParameters()) {, +      TypeVariable var = (TypeVariable) typeParameterElement.asType();, +      builder = builder.addTypeVariable(TypeVariableName.get(var));]