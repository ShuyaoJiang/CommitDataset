[+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static org.mockito.Mockito.doAnswer;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +    public void testAvoidsConcurrentModificationWhenResuming() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        doAnswer(new RemoveRequest(second)).when(first).begin();, +, +        tracker.addRequest(mock(Request.class));, +        tracker.addRequest(first);, +        tracker.addRequest(second);, +, +        tracker.resumeRequests();, +    }, +, +    @Test, +    public void testAvoidsConcurrentModificationWhenPausing() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        when(first.isRunning()).thenReturn(true);, +        doAnswer(new RemoveRequest(second)).when(first).pause();, +, +        tracker.addRequest(mock(Request.class));, +        tracker.addRequest(first);, +        tracker.addRequest(second);, +, +        tracker.pauseRequests();, +    }, +, +    @Test, +    public void testAvoidsConcurrentModificationWhenClearing() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        doAnswer(new RemoveRequest(second)).when(first).clear();, +, +        tracker.addRequest(mock(Request.class));, +        tracker.addRequest(first);, +        tracker.addRequest(second);, +, +        tracker.clearRequests();, +    }, +, +    @Test, +    public void testAvoidsConcurrentModificationWhenRestarting() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        doAnswer(new RemoveRequest(second)).when(first).pause();, +, +        tracker.addRequest(mock(Request.class));, +        tracker.addRequest(first);, +        tracker.addRequest(second);, +, +        tracker.restartRequests();, +    }, +, +    @Test, +, +    private class RemoveRequest implements Answer<Void> {, +, +        private Request toRemove;, +, +        public RemoveRequest(Request toRemove) {, +            this.toRemove = toRemove;, +        }, +, +        @Override, +        public Void answer(InvocationOnMock invocationOnMock) throws Throwable {, +            tracker.removeRequest(toRemove);, +            return null;, +        }, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +import static org.mockito.Mockito.doAnswer;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +    public void testAvoidsConcurrentModificationWhenResuming() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        doAnswer(new RemoveRequest(second)).when(first).begin();, +, +        tracker.addRequest(mock(Request.class));, +        tracker.addRequest(first);, +        tracker.addRequest(second);, +, +        tracker.resumeRequests();, +    }, +, +    @Test, +    public void testAvoidsConcurrentModificationWhenPausing() {, +        Request first = mock(Request.class);, +        Request second = mock(Request.class);, +, +        when(first.isRunning()).thenReturn(true);, +        doAnswer(new RemoveRequest(second)).when(first).pause();]