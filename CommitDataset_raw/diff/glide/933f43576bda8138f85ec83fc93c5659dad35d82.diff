[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +        final String key = getKey(id, -1, -1, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.APPROXIMATE);, +        final String key = getKey(id, width, height, ResizeType.CENTER_CROP);, +        final String key = getKey(id, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(String key, LoadedCallback cb, ImageManagerJob job) {, +    private Object runJob(String key, LoadedCallback cb, boolean useDiskCache, ImageManagerJob job) {, +    private boolean returnFromCache(String key, LoadedCallback cb) {, +        private String key;, +        public void execute(String key, LoadedCallback cb, boolean useDiskCache) {, +                result = getFromDiskCache(key);, +                    putInDiskCache(key, result);, +    private void putInMemoryCache(String key, final Bitmap bitmap) {, +    private static String getKey(String id, int width, int height, ResizeType type){, +        return String.valueOf(Util.hash(id.hashCode(), width, height, type.hashCode()));, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +        final String key = getKey(id, -1, -1, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.APPROXIMATE);, +        final String key = getKey(id, width, height, ResizeType.CENTER_CROP);, +        final String key = getKey(id, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(String key, LoadedCallback cb, ImageManagerJob job) {, +    private Object runJob(String key, LoadedCallback cb, boolean useDiskCache, ImageManagerJob job) {, +    private boolean returnFromCache(String key, LoadedCallback cb) {, +        private String key;, +        public void execute(String key, LoadedCallback cb, boolean useDiskCache) {, +                result = getFromDiskCache(key);, +                    putInDiskCache(key, result);, +    private void putInMemoryCache(String key, final Bitmap bitmap) {, +    private static String getKey(String id, int width, int height, ResizeType type){, +        return String.valueOf(Util.hash(id.hashCode(), width, height, type.hashCode()));, +++ b/library/src/com/bumptech/glide/resize/cache/LruPhotoCache.java, +    private final LruCache<String, Bitmap> lruCache;, +        lruCache = new LruCache<String, Bitmap>(maxSize) {, +            protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {, +            protected int sizeOf(String key, Bitmap value) {, +    public boolean contains(String key) {, +        return lruCache.get(key) != null;, +    public Bitmap get(String key) {, +    public Bitmap put(String key, Bitmap bitmap) {, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +        final String key = getKey(id, -1, -1, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.APPROXIMATE);, +        final String key = getKey(id, width, height, ResizeType.CENTER_CROP);, +        final String key = getKey(id, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(String key, LoadedCallback cb, ImageManagerJob job) {, +    private Object runJob(String key, LoadedCallback cb, boolean useDiskCache, ImageManagerJob job) {, +    private boolean returnFromCache(String key, LoadedCallback cb) {, +        private String key;, +        public void execute(String key, LoadedCallback cb, boolean useDiskCache) {, +                result = getFromDiskCache(key);, +                    putInDiskCache(key, result);, +    private void putInMemoryCache(String key, final Bitmap bitmap) {, +    private static String getKey(String id, int width, int height, ResizeType type){, +        return String.valueOf(Util.hash(id.hashCode(), width, height, type.hashCode()));, +++ b/library/src/com/bumptech/glide/resize/cache/LruPhotoCache.java, +    private final LruCache<String, Bitmap> lruCache;, +        lruCache = new LruCache<String, Bitmap>(maxSize) {, +            protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {, +            protected int sizeOf(String key, Bitmap value) {, +    public boolean contains(String key) {, +        return lruCache.get(key) != null;, +    public Bitmap get(String key) {, +    public Bitmap put(String key, Bitmap bitmap) {, +++ b/library/src/com/bumptech/glide/resize/cache/MemoryCache.java, +    public boolean contains(String key);, +    public Bitmap get(String key);, +    public Bitmap put(String key, Bitmap bitmap);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +        final String key = getKey(id, -1, -1, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.AS_IS);, +        final String key = getKey(id, width, height, ResizeType.APPROXIMATE);, +        final String key = getKey(id, width, height, ResizeType.CENTER_CROP);, +        final String key = getKey(id, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(String key, LoadedCallback cb, ImageManagerJob job) {, +    private Object runJob(String key, LoadedCallback cb, boolean useDiskCache, ImageManagerJob job) {, +    private boolean returnFromCache(String key, LoadedCallback cb) {, +        private String key;, +        public void execute(String key, LoadedCallback cb, boolean useDiskCache) {, +                result = getFromDiskCache(key);, +                    putInDiskCache(key, result);, +    private void putInMemoryCache(String key, final Bitmap bitmap) {, +    private static String getKey(String id, int width, int height, ResizeType type){, +        return String.valueOf(Util.hash(id.hashCode(), width, height, type.hashCode()));, +++ b/library/src/com/bumptech/glide/resize/cache/LruPhotoCache.java, +    private final LruCache<String, Bitmap> lruCache;, +        lruCache = new LruCache<String, Bitmap>(maxSize) {, +            protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {, +            protected int sizeOf(String key, Bitmap value) {, +    public boolean contains(String key) {, +        return lruCache.get(key) != null;, +    public Bitmap get(String key) {, +    public Bitmap put(String key, Bitmap bitmap) {, +++ b/library/src/com/bumptech/glide/resize/cache/MemoryCache.java, +    public boolean contains(String key);, +    public Bitmap get(String key);, +    public Bitmap put(String key, Bitmap bitmap);, +++ b/library/src/com/bumptech/glide/resize/cache/MemoryCacheAdapter.java]