[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +                    listener);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +                    listener);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +    @Test, +    public void testDoesNotNotifyCancelledIfCompletesBeforeCancel() {, +        harness.job.onResourceReady(harness.resource);, +        harness.job.cancel();, +, +        verify(harness.listener, never()).onEngineJobCancelled(eq(ID));, +    }, +, +    @Test, +    public void testDoesNotNotifyCancelledIfAlreadyCancelled() {, +        harness.job.cancel();, +        harness.job.cancel();, +, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(ID));, +    }, +, +        EngineJob <Object> job = new EngineJob<Object>(ID, resourceCache, mainHandler, referenceCounter, listener);, +, +        public EngineJobHarness() {, +            job.addCallback(cb);, +        }, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +                    listener);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +    @Test, +    public void testDoesNotNotifyCancelledIfCompletesBeforeCancel() {, +        harness.job.onResourceReady(harness.resource);, +        harness.job.cancel();, +, +        verify(harness.listener, never()).onEngineJobCancelled(eq(ID));, +    }, +, +    @Test, +    public void testDoesNotNotifyCancelledIfAlreadyCancelled() {, +        harness.job.cancel();, +        harness.job.cancel();, +, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(ID));, +    }, +, +        EngineJob <Object> job = new EngineJob<Object>(ID, resourceCache, mainHandler, referenceCounter, listener);, +, +        public EngineJobHarness() {, +            job.addCallback(cb);, +        }, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +    public void testCallbackIsAddedToNewEngineJobWithNoExistingLoad() {, +        harness.doLoad();, +, +        verify(harness.job).addCallback(eq(harness.cb));, +    }, +, +    @Test, +        assertTrue(harness.runners.containsKey(harness.cacheKey));, +        when(harness.cache.get(eq(harness.cacheKey))).thenReturn(harness.resource);, +    public void testResourceIsAcquiredIfReturnedFromCache() {, +        when(harness.cache.get(eq(harness.cacheKey))).thenReturn(harness.resource);, +, +        harness.doLoad();, +, +        verify(harness.resourceReferenceCounter).acquireResource(eq(harness.resource));, +    }, +, +    @Test, +        when(harness.cache.get(eq(harness.cacheKey))).thenReturn(mock(Resource.class));, +        when(harness.cache.get(eq(harness.cacheKey))).thenReturn(mock(Resource.class));, +        harness.engine.onEngineJobComplete(harness.cacheKey);, +        assertFalse(harness.runners.containsKey(harness.cacheKey));, +        harness.engine.onEngineJobComplete(harness.cacheKey);, +        harness.engine.onEngineJobCancelled(harness.cacheKey);, +        assertFalse(harness.runners.containsKey(harness.cacheKey));, +        harness.engine.onEngineJobCancelled(harness.cacheKey);, +    @Test, +    public void testCacheKeyContainsRelevantIds() {, +        harness.doLoad();, +, +        String expectedCacheKey = ID + harness.width + harness.height + harness.cacheDecoder.getId() +, +                harness.decoder.getId() + harness.transformation.getId() + harness.encoder.getId();, +, +        verify(harness.cache).get(eq(expectedCacheKey));, +    }, +, +    @Test, +    public void testRunnerIsPutInRunnersWithCacheKeyWithRelevantIds() {, +        harness.doLoad();, +, +        assertNotNull(harness.runners.get(harness.cacheKey));, +    }, +]