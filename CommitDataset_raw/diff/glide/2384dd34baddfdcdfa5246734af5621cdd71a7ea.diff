[+++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/library/build.gradle, +    androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/library/build.gradle, +    androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.hasItem;, +                    return Collections.emptyList();, +                    return  Collections.emptyList();, +                    return Collections.emptyList();, +                    return Collections.emptyList();, +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/library/build.gradle, +    androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.hasItem;, +                    return Collections.emptyList();, +                    return  Collections.emptyList();, +                    return Collections.emptyList();, +                    return Collections.emptyList();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java, +import static org.hamcrest.Matchers.containsString;, +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/library/build.gradle, +    androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.hasItem;, +                    return Collections.emptyList();, +                    return  Collections.emptyList();, +                    return Collections.emptyList();, +                    return Collections.emptyList();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java, +import static org.hamcrest.Matchers.containsString;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />, +            <message key="import.illegal" value="Import from illegal package - {0}. Use org.mockito.Matchers to instantiate argument matchers; or org.hamcrest.Matchers for assertThat." />, +        </module>, +++ b/library/build.gradle, +    androidTestCompile 'org.hamcrest:hamcrest-library:1.3', +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.hasItem;, +                    return Collections.emptyList();, +                    return  Collections.emptyList();, +                    return Collections.emptyList();, +                    return Collections.emptyList();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/MediaStoreThumbFetcherTest.java, +import static org.hamcrest.Matchers.containsString;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.hamcrest.Matchers.hasKey;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +        assertThat(harness.runners, hasKey((Key) harness.cacheKey));, +        verify(harness.cb, never()).onResourceReady(isNull(Resource.class));, +        assertThat(harness.activeResources, not(hasKey((Key) harness.cacheKey)));, +        assertThat(harness.runners, not(hasKey((Key) harness.cacheKey)));, +        assertThat(harness.activeResources, not(hasKey((Key) harness.cacheKey)));, +        assertThat(harness.runners, not(hasKey((Key) harness.cacheKey)));, +        assertThat(harness.activeResources, not(hasKey((Key) harness.cacheKey)));, +        assertThat(harness.runners, hasEntry(equalTo((Key) harness.cacheKey), notNullValue(ResourceRunner.class)));, +++ b/checkstyle.xml, +        <!-- Prevent importing Mockito matchers directly -->, +        <module name="IllegalImport">, +            <property name="illegalPkgs" value="org.mockito.internal" />]