[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.resize.loader.AsIs;, +import java.lang.reflect.InvocationTargetException;, +import static android.view.ViewGroup.LayoutParams;, +, +            AS_IS,, +        private ResizeOption resizeOption = null;, +         * Resize models using {@link CenterCrop}. Replaces any existing resize style, +         * Resize models using {@link FitCenter}. Replaces any existing resize style, +         * Resize models using {@link Approximate}. Replaces any existing resize style, +         * Load images at their original size using {@link com.bumptech.glide.resize.loader.AsIs}. Replaces any existing, +         * resize style, +         *, +         * @return This Request, +         */, +        public Request<T> asIs() {, +            resizeOption = ResizeOption.AS_IS;, +            imageLoader = null;, +, +            return this;, +        }, +, +        /**, +            resizeOption = getFinalResizeOption(imageView);, +, +        private ResizeOption getFinalResizeOption(ImageView imageView) {, +            ResizeOption result = resizeOption;, +            if (result == null) {, +                //default to Approximate unless view's layout params are set to wrap content, in which case the only, +                //loader that makes sense is AsIs since all the others crop based on the view's size, +                final LayoutParams lp = imageView.getLayoutParams();, +                if (lp != null && (lp.width == LayoutParams.WRAP_CONTENT || lp.height == LayoutParams.WRAP_CONTENT)) {, +                    result = ResizeOption.AS_IS;, +                } else {, +                    result = ResizeOption.APPROXIMATE;, +                }, +            }, +            return result;, +        }, +, +, +            Class<? extends ImageLoader> imageLoaderClass = getImageLoaderClassFor(resizeOption);, +            try {, +                return imageLoaderClass.getConstructor(Context.class).newInstance(context);, +            } catch (InstantiationException e) {, +                e.printStackTrace();, +            } catch (IllegalAccessException e) {, +                e.printStackTrace();, +            } catch (InvocationTargetException e) {, +                e.printStackTrace();, +            } catch (NoSuchMethodException e) {, +                e.printStackTrace();, +            }, +            return null;, +        }, +, +        private static Class<? extends ImageLoader> getImageLoaderClassFor(ResizeOption resizeOption) {, +            final Class<? extends ImageLoader> imageLoaderClass;, +                    imageLoaderClass = Approximate.class;, +                    imageLoaderClass = CenterCrop.class;, +                    imageLoaderClass = FitCenter.class;, +                    break;, +                case AS_IS:, +                    imageLoaderClass = AsIs.class;, +            return imageLoaderClass;, +                    imageLoaderClass = getImageLoaderClassFor(request.resizeOption);, +, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.resize.loader.AsIs;, +import java.lang.reflect.InvocationTargetException;, +import static android.view.ViewGroup.LayoutParams;, +, +            AS_IS,, +        private ResizeOption resizeOption = null;, +         * Resize models using {@link CenterCrop}. Replaces any existing resize style, +         * Resize models using {@link FitCenter}. Replaces any existing resize style, +         * Resize models using {@link Approximate}. Replaces any existing resize style, +         * Load images at their original size using {@link com.bumptech.glide.resize.loader.AsIs}. Replaces any existing, +         * resize style, +         *, +         * @return This Request, +         */, +        public Request<T> asIs() {, +            resizeOption = ResizeOption.AS_IS;, +            imageLoader = null;, +, +            return this;, +        }, +, +        /**, +            resizeOption = getFinalResizeOption(imageView);, +, +        private ResizeOption getFinalResizeOption(ImageView imageView) {, +            ResizeOption result = resizeOption;, +            if (result == null) {, +                //default to Approximate unless view's layout params are set to wrap content, in which case the only, +                //loader that makes sense is AsIs since all the others crop based on the view's size, +                final LayoutParams lp = imageView.getLayoutParams();]