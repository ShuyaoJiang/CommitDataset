[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private GlideExecutor sourceUnlimitedExecutor;, +, +    sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, +      engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private GlideExecutor sourceUnlimitedExecutor;, +, +    sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, +      engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +      GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,, +      GlideExecutor sourceUnlimitedExecutor) {, +    this(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, +        null, null, null, null, null, null);, +      GlideExecutor sourceExecutor, GlideExecutor sourceUnlimitedExecutor, Map<Key, EngineJob> jobs,, +      EngineKeyFactory keyFactory, Map<Key, WeakReference<EngineResource<?>>> activeResources,, +      EngineJobFactory engineJobFactory, DecodeJobFactory decodeJobFactory,, +      ResourceRecycler resourceRecycler) {, +      engineJobFactory = new EngineJobFactory(diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor, this);, +      boolean useUnlimitedSourceExecutorPool,, +    EngineJob<R> engineJob = engineJobFactory.build(key, isMemoryCacheable,, +        useUnlimitedSourceExecutorPool);, +    private final GlideExecutor sourceUnlimitedExecutor;, +            return new EngineJob<Object>(diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, +                listener, pool);, +        GlideExecutor sourceUnlimitedExecutor, EngineJobListener listener) {, +      this.sourceUnlimitedExecutor = sourceUnlimitedExecutor;, +    <R> EngineJob<R> build(Key key, boolean isMemoryCacheable,, +        boolean useUnlimitedSourceGeneratorPool) {, +      return result.init(key, isMemoryCacheable, useUnlimitedSourceGeneratorPool);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private GlideExecutor sourceUnlimitedExecutor;, +, +    sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, +      engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +      GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,, +      GlideExecutor sourceUnlimitedExecutor) {, +    this(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, +        null, null, null, null, null, null);, +      GlideExecutor sourceExecutor, GlideExecutor sourceUnlimitedExecutor, Map<Key, EngineJob> jobs,, +      EngineKeyFactory keyFactory, Map<Key, WeakReference<EngineResource<?>>> activeResources,, +      EngineJobFactory engineJobFactory, DecodeJobFactory decodeJobFactory,, +      ResourceRecycler resourceRecycler) {, +      engineJobFactory = new EngineJobFactory(diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor, this);, +      boolean useUnlimitedSourceExecutorPool,, +    EngineJob<R> engineJob = engineJobFactory.build(key, isMemoryCacheable,, +        useUnlimitedSourceExecutorPool);, +    private final GlideExecutor sourceUnlimitedExecutor;, +            return new EngineJob<Object>(diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, +                listener, pool);, +        GlideExecutor sourceUnlimitedExecutor, EngineJobListener listener) {, +      this.sourceUnlimitedExecutor = sourceUnlimitedExecutor;, +    <R> EngineJob<R> build(Key key, boolean isMemoryCacheable,, +        boolean useUnlimitedSourceGeneratorPool) {, +      return result.init(key, isMemoryCacheable, useUnlimitedSourceGeneratorPool);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +  private final GlideExecutor sourceUnlimitedExecutor;, +  private boolean useUnlimitedSourceGeneratorPool;, +      GlideExecutor sourceUnlimitedExecutor,, +    this(diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor, listener, pool,, +        DEFAULT_FACTORY);, +      GlideExecutor sourceUnlimitedExecutor,, +    this.sourceUnlimitedExecutor = sourceUnlimitedExecutor;, +  EngineJob<R> init(Key key, boolean isCacheable, boolean useUnlimitedSourceGeneratorPool) {, +    this.useUnlimitedSourceGeneratorPool = useUnlimitedSourceGeneratorPool;, +    GlideExecutor executor = decodeJob.willDecodeFromCache(), +        ? diskCacheExecutor, +        : getActiveSourceExecutor();, +  private GlideExecutor getActiveSourceExecutor() {, +    return useUnlimitedSourceGeneratorPool ? sourceUnlimitedExecutor : sourceExecutor;, +  }, +, +    boolean isPendingJobRemoved = diskCacheExecutor.remove(decodeJob), +        || sourceExecutor.remove(decodeJob), +        || sourceUnlimitedExecutor.remove(decodeJob);, +      getActiveSourceExecutor().execute(job);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private GlideExecutor sourceUnlimitedExecutor;, +, +    sourceUnlimitedExecutor = GlideExecutor.newUnlimitedSourceExecutor();, +, +      engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor,, +          sourceUnlimitedExecutor);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +      GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,, +      GlideExecutor sourceUnlimitedExecutor) {, +    this(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor,, +        null, null, null, null, null, null);, +      GlideExecutor sourceExecutor, GlideExecutor sourceUnlimitedExecutor, Map<Key, EngineJob> jobs,, +      EngineKeyFactory keyFactory, Map<Key, WeakReference<EngineResource<?>>> activeResources,]