[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import java.nio.ByteBuffer;, +      registerMockModelLoader(GlideUrl.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, ParcelFileDescriptor.class,, +          mock(ParcelFileDescriptor.class), registry);, +      registerMockModelLoader(File.class, ByteBuffer.class,, +          ByteBuffer.allocate(10), registry);, +    }, +, +    private static <X, Y> void registerMockModelLoader(Class<X> modelClass, Class<Y> dataClass,, +          Y loadedData, Registry registry) {, +      DataFetcher<Y> mockStreamFetcher = mock(DataFetcher.class);, +      when(mockStreamFetcher.getDataClass()).thenReturn(dataClass);, +        doAnswer(new Util.CallDataReady<>(loadedData)), +      ModelLoader<X, Y> mockUrlLoader = mock(ModelLoader.class);, +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt())), +      when(mockUrlLoader.handles(any(modelClass))).thenReturn(true);, +      ModelLoaderFactory<X, Y> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);, +      registry.replace(modelClass, dataClass, mockUrlLoaderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import java.nio.ByteBuffer;, +      registerMockModelLoader(GlideUrl.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, ParcelFileDescriptor.class,, +          mock(ParcelFileDescriptor.class), registry);, +      registerMockModelLoader(File.class, ByteBuffer.class,, +          ByteBuffer.allocate(10), registry);, +    }, +, +    private static <X, Y> void registerMockModelLoader(Class<X> modelClass, Class<Y> dataClass,, +          Y loadedData, Registry registry) {, +      DataFetcher<Y> mockStreamFetcher = mock(DataFetcher.class);, +      when(mockStreamFetcher.getDataClass()).thenReturn(dataClass);, +        doAnswer(new Util.CallDataReady<>(loadedData)), +      ModelLoader<X, Y> mockUrlLoader = mock(ModelLoader.class);, +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt())), +      when(mockUrlLoader.handles(any(modelClass))).thenReturn(true);, +      ModelLoaderFactory<X, Y> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);, +      registry.replace(modelClass, dataClass, mockUrlLoaderFactory);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import java.nio.ByteBuffer;, +      registerMockModelLoader(GlideUrl.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, ParcelFileDescriptor.class,, +          mock(ParcelFileDescriptor.class), registry);, +      registerMockModelLoader(File.class, ByteBuffer.class,, +          ByteBuffer.allocate(10), registry);, +    }, +, +    private static <X, Y> void registerMockModelLoader(Class<X> modelClass, Class<Y> dataClass,, +          Y loadedData, Registry registry) {, +      DataFetcher<Y> mockStreamFetcher = mock(DataFetcher.class);, +      when(mockStreamFetcher.getDataClass()).thenReturn(dataClass);, +        doAnswer(new Util.CallDataReady<>(loadedData)), +      ModelLoader<X, Y> mockUrlLoader = mock(ModelLoader.class);, +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt())), +      when(mockUrlLoader.handles(any(modelClass))).thenReturn(true);, +      ModelLoaderFactory<X, Y> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);, +      registry.replace(modelClass, dataClass, mockUrlLoaderFactory);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import java.nio.ByteBuffer;, +      registerMockModelLoader(GlideUrl.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, InputStream.class,, +          new ByteArrayInputStream(new byte[0]), registry);, +      registerMockModelLoader(File.class, ParcelFileDescriptor.class,, +          mock(ParcelFileDescriptor.class), registry);, +      registerMockModelLoader(File.class, ByteBuffer.class,, +          ByteBuffer.allocate(10), registry);, +    }, +, +    private static <X, Y> void registerMockModelLoader(Class<X> modelClass, Class<Y> dataClass,, +          Y loadedData, Registry registry) {, +      DataFetcher<Y> mockStreamFetcher = mock(DataFetcher.class);, +      when(mockStreamFetcher.getDataClass()).thenReturn(dataClass);, +        doAnswer(new Util.CallDataReady<>(loadedData)), +      ModelLoader<X, Y> mockUrlLoader = mock(ModelLoader.class);, +      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt())), +      when(mockUrlLoader.handles(any(modelClass))).thenReturn(true);, +      ModelLoaderFactory<X, Y> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);, +      registry.replace(modelClass, dataClass, mockUrlLoaderFactory);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +@RunWith(JUnit4.class), +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java]