[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +      @NonNull Class<Model> modelClass,, +      @NonNull Class<TResource> resourceClass,, +    List<Class<?>> result =, +        modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);, +      modelToResourceClassCache.put(, +          modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +      @NonNull Class<Model> modelClass,, +      @NonNull Class<TResource> resourceClass,, +    List<Class<?>> result =, +        modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);, +      modelToResourceClassCache.put(, +          modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));, +++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java, +  public List<Class<?>> get(, +      @NonNull Class<?> modelClass,, +      @NonNull Class<?> resourceClass,, +      @NonNull Class<?> transcodeClass) {, +      key = new MultiClassKey(modelClass, resourceClass, transcodeClass);, +      key.set(modelClass, resourceClass, transcodeClass);, +  public void put(, +      @NonNull Class<?> modelClass,, +      @NonNull Class<?> resourceClass,, +      @NonNull Class<?> transcodeClass,, +          .put(new MultiClassKey(modelClass, resourceClass, transcodeClass), resourceClasses);, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +      @NonNull Class<Model> modelClass,, +      @NonNull Class<TResource> resourceClass,, +    List<Class<?>> result =, +        modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);, +      modelToResourceClassCache.put(, +          modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));, +++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java, +  public List<Class<?>> get(, +      @NonNull Class<?> modelClass,, +      @NonNull Class<?> resourceClass,, +      @NonNull Class<?> transcodeClass) {, +      key = new MultiClassKey(modelClass, resourceClass, transcodeClass);, +      key.set(modelClass, resourceClass, transcodeClass);, +  public void put(, +      @NonNull Class<?> modelClass,, +      @NonNull Class<?> resourceClass,, +      @NonNull Class<?> transcodeClass,, +          .put(new MultiClassKey(modelClass, resourceClass, transcodeClass), resourceClasses);, +++ b/library/test/src/test/java/com/bumptech/glide/RegistryTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import java.util.List;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE), +public class RegistryTest {, +, +  @Mock private ModelLoaderFactory<Model, Data> modelLoaderFactory;, +  @Mock private ResourceDecoder<Data, ResourceOne> resourceOneDecoder;, +  @Mock private ResourceDecoder<Data, ResourceTwo> resourceTwoDecoder;, +  @Mock private ResourceTranscoder<ResourceOne, TranscodeOne> resourceOneTranscodeOneTranscoder;, +  private Registry registry;, +, +  @Before, +  public void setUp() {, +    MockitoAnnotations.initMocks(this);, +    registry = new Registry();, +  }, +, +  @Test, +  public void getRegisteredResourceClasses_withNoResources_isEmpty() {, +    assertThat(getRegisteredResourceClasses()).isEmpty();, +  }, +, +  @Test, +  public void getRegisteredResourceClasses_withOneDataClass_noResourceClasses_isEmpty() {, +    registry.append(Model.class, Data.class, modelLoaderFactory);, +    assertThat(getRegisteredResourceClasses()).isEmpty();, +  }, +, +  @Test, +  public void getRegisteredResourceClasses_withOneDataAndResourceClass_noTranscodeClass_isEmpty() {, +    registry.append(Model.class, Data.class, modelLoaderFactory);, +    registry.append(Data.class, ResourceOne.class, resourceOneDecoder);, +    assertThat(getRegisteredResourceClasses()).isEmpty();, +  }, +, +  @Test, +  public void getRegisteredResourceClasses_withOneDataAndResourceAndTranscodeClass_isNotEmpty() {, +    registry.append(Model.class, Data.class, modelLoaderFactory);, +    registry.append(Data.class, ResourceOne.class, resourceOneDecoder);]