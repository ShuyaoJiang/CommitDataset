[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, +    private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, +        String contentLength = response.header(CONTENT_LENGTH_HEADER);, +        stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, +    private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, +        String contentLength = response.header(CONTENT_LENGTH_HEADER);, +        stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import com.bumptech.glide.util.ContentLengthInputStream;, +    private static final String CONTENT_LENGTH_HEADER = "Content-Length";, +, +        String contentLength = response.header(CONTENT_LENGTH_HEADER);, +        stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +++ b/library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java, +package com.bumptech.glide.util;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Mockito.when;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class ContentLengthInputStreamTest {, +  @Mock InputStream wrapped;, +, +  @Before, +  public void setUp() {, +    MockitoAnnotations.initMocks(this);, +  }, +, +  @Test, +  public void testAvailable_withZeroReadsAndValidContentLength_returnsContentLength(), +      throws IOException {, +    int value = 123356;, +    InputStream is = ContentLengthInputStream.obtain(wrapped, String.valueOf(value));, +, +    assertThat(is.available()).isEqualTo(value);, +  }, +, +  @Test, +  public void testAvailable_withNullContentLength_returnsWrappedAvailable(), +      throws IOException {, +    InputStream is = ContentLengthInputStream.obtain(wrapped, null /*contentLengthHeader*/);, +    int expected = 1234;, +    when(wrapped.available()).thenReturn(expected);, +, +    assertThat(is.available()).isEqualTo(expected);, +  }, +, +  @Test, +  public void testAvailable_withInvalidContentLength_returnsWrappedAvailable() throws IOException {, +    InputStream is = ContentLengthInputStream.obtain(wrapped, "invalid_length");, +    int expected = 567;, +    when(wrapped.available()).thenReturn(expected);, +, +    assertThat(is.available()).isEqualTo(expected);, +  }, +, +  @Test, +  public void testAvailable_withRead_returnsContentLengthOffsetByRead() throws IOException {, +    int contentLength = 999;, +    InputStream is = ContentLengthInputStream.obtain(wrapped, String.valueOf(contentLength));, +    when(wrapped.read()).thenReturn(1);, +, +    assertThat(is.read()).isEqualTo(1);, +    assertThat(is.available()).isEqualTo(contentLength - 1);, +  }, +, +  @Test, +  public void testAvailable_handlesReadValueOfZero() throws IOException {, +    int contentLength = 999;, +    InputStream is = ContentLengthInputStream.obtain(wrapped, String.valueOf(contentLength));]