[+++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public Bitmap get(int width, int height, Bitmap.Config config);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public Bitmap get(int width, int height, Bitmap.Config config);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    public Bitmap get(int width, int height, Bitmap.Config config) {, +, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public Bitmap get(int width, int height, Bitmap.Config config);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    public Bitmap get(int width, int height, Bitmap.Config config) {, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +    public synchronized Bitmap get(int width, int height, Bitmap.Config config) {, +        final Bitmap result = pool.get(width, height, config);, +            Log.d("LBP: missing bitmap for width=" + width + " height=" + height + " config=" + config);, +            private final Queue<Key> keyPool = new LinkedList<Key>();, +            public Key get(int width, int height, Bitmap.Config config) {, +                result.init(width, height, config);, +            private Bitmap.Config config; //this can be null :(, +            public void init(int width, int height, Bitmap.Config config) {, +                this.config = config;, +                if (config != key.config) return false;, +                result = 31 * result + (config != null ? config.hashCode() : 0);, +            final Key key = keyPool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());, +        public Bitmap get(int width, int height, Bitmap.Config config) {, +            final Key key = keyPool.get(width, height, config);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +                bitmap.compress(bitmap.getConfig() == Bitmap.Config.ARGB_8888 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG, bitmapCompressQuality, os);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public Bitmap get(int width, int height, Bitmap.Config config);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    public Bitmap get(int width, int height, Bitmap.Config config) {, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +    public synchronized Bitmap get(int width, int height, Bitmap.Config config) {, +        final Bitmap result = pool.get(width, height, config);, +            Log.d("LBP: missing bitmap for width=" + width + " height=" + height + " config=" + config);, +            private final Queue<Key> keyPool = new LinkedList<Key>();, +            public Key get(int width, int height, Bitmap.Config config) {, +                result.init(width, height, config);, +            private Bitmap.Config config; //this can be null :(, +            public void init(int width, int height, Bitmap.Config config) {, +                this.config = config;, +                if (config != key.config) return false;, +                result = 31 * result + (config != null ? config.hashCode() : 0);, +            final Key key = keyPool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());, +        public Bitmap get(int width, int height, Bitmap.Config config) {, +            final Key key = keyPool.get(width, height, config);, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, +import com.bumptech.glide.util.Log;, +            orientation = new ExifOrientationParser(bis).getOrientation();, +            setInBitmap(options, pool.get(inWidth, inHeight, getConfig(bis)));, +    private Bitmap.Config getConfig(RecyclableBufferedInputStream bis) {, +        Bitmap.Config result = Bitmap.Config.RGB_565;, +        bis.mark(1024); //we probably only need 25, but this is safer (particularly since the buffer size is > 1024), +        try {, +            result = new ExifOrientationParser(bis).hasAlpha() ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;, +        } catch (IOException e) {, +            e.printStackTrace();, +        } finally {, +            try {, +                bis.reset();, +            } catch (IOException e) {, +                e.printStackTrace();, +            }, +        }, +        return result;, +    }, +, +        if (result == null && !options.inJustDecodeBounds) {, +            throw new IllegalArgumentException("IP: null result, sampleSize=" + options.inSampleSize);, +        }, +            Log.d("Downsampler: exception loading inDecodeBounds=" + options.inJustDecodeBounds + " sample=" + options.inSampleSize);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                Log.e("IP: onImageLoadException model= " + model);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java]