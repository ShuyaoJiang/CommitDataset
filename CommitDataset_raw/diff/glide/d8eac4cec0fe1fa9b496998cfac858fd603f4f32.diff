[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, +    private final RequestTracker requestTracker;, +    private final RequestManager.OptionsApplier optionsApplier;, +    private final Lifecycle lifecycle;, +            Glide glide, RequestTracker requestTracker, Lifecycle lifecycle,, +            RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                transcodeClass, glide, requestTracker, lifecycle));, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, +    private final RequestTracker requestTracker;, +    private final RequestManager.OptionsApplier optionsApplier;, +    private final Lifecycle lifecycle;, +            Glide glide, RequestTracker requestTracker, Lifecycle lifecycle,, +            RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                transcodeClass, glide, requestTracker, lifecycle));, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, loadProvider, Drawable.class, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, +    private final RequestTracker requestTracker;, +    private final RequestManager.OptionsApplier optionsApplier;, +    private final Lifecycle lifecycle;, +            Glide glide, RequestTracker requestTracker, Lifecycle lifecycle,, +            RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                transcodeClass, glide, requestTracker, lifecycle));, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, loadProvider, Drawable.class, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private Lifecycle lifecycle;, +            RequestTracker requestTracker, Lifecycle lifecycle, RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                fileDescriptorModelLoader, glide, requestTracker, lifecycle, optionsApplier));, +                requestTracker, lifecycle, optionsApplier));, +                model, streamModelLoader, InputStream.class, File.class, requestTracker, lifecycle, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, streamLoadProvider, transcodeClass, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;, +    private final RequestTracker requestTracker;, +    private final RequestManager.OptionsApplier optionsApplier;, +    private final Lifecycle lifecycle;, +            Glide glide, RequestTracker requestTracker, Lifecycle lifecycle,, +            RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                transcodeClass, glide, requestTracker, lifecycle));, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +            RequestTracker requestTracker, Lifecycle lifecycle) {, +        super(context, model, loadProvider, Drawable.class, glide, requestTracker, lifecycle);, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private Lifecycle lifecycle;, +            RequestTracker requestTracker, Lifecycle lifecycle, RequestManager.OptionsApplier optionsApplier) {, +                glide, requestTracker, lifecycle);, +        this.lifecycle = lifecycle;, +                fileDescriptorModelLoader, glide, requestTracker, lifecycle, optionsApplier));, +                requestTracker, lifecycle, optionsApplier));, +                model, streamModelLoader, InputStream.class, File.class, requestTracker, lifecycle, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.manager.Lifecycle;, +    private Lifecycle lifecycle;, +            Class<TranscodeType> transcodeClass, Glide glide, RequestTracker requestTracker, Lifecycle lifecycle) {, +        this.lifecycle = lifecycle;, +        lifecycle.addListener(target);]