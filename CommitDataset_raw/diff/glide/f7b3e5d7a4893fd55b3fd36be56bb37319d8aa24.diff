[+++ b/checkstyle_suppressions.xml, +    <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/checkstyle_suppressions.xml, +    <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/library/build.gradle, +    compile project(':third_party:gif_encoder'), +++ b/checkstyle_suppressions.xml, +    <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>, +++ b/library/build.gradle, +    compile project(':third_party:gif_encoder'), +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.gifdecoder.GifHeader;, +import com.bumptech.glide.gifdecoder.GifHeaderParser;, +import com.bumptech.glide.gifencoder.AnimatedGifEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import org.mockito.InOrder;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.verify;, +    private GifDecoder decoder;, +    private GifHeaderParser parser;, +    private AnimatedGifEncoder gifEncoder;, +    private Resource<Bitmap> frameResource;, +    private Transformation frameTransformation;, +, +        GifResourceEncoder.Factory factory = mock(GifResourceEncoder.Factory.class);, +        decoder = mock(GifDecoder.class);, +        when(factory.buildDecoder(any(GifDecoder.BitmapProvider.class))).thenReturn(decoder);, +        parser = mock(GifHeaderParser.class);, +        when(factory.buildParser()).thenReturn(parser);, +        gifEncoder = mock(AnimatedGifEncoder.class);, +        when(factory.buildEncoder()).thenReturn(gifEncoder);, +        frameResource = mock(Resource.class);, +        when(factory.buildFrameResource(any(Bitmap.class), any(BitmapPool.class))).thenReturn(frameResource);, +, +        frameTransformation = mock(Transformation.class);, +        when(frameTransformation.transform(any(Resource.class), anyInt(), anyInt())).thenReturn(frameResource);, +, +        when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);, +, +, +        encoder = new GifResourceEncoder(mock(BitmapPool.class), factory);, +    public void testReturnsFalseIfEncoderFailsToStart() {, +        OutputStream os = mock(OutputStream.class);, +        when(gifEncoder.start(eq(os))).thenReturn(false);, +        assertFalse(encoder.encode(resource, mock(OutputStream.class)));, +    public void testSetsDataOnParserBeforeParsingHeader() {, +        byte[] data = new byte[1];, +        when(gifDrawable.getData()).thenReturn(data);, +, +        GifHeader header = mock(GifHeader.class);, +        when(parser.parseHeader()).thenReturn(header);, +, +        encoder.encode(resource, mock(OutputStream.class));, +, +        InOrder order = inOrder(parser, decoder);, +        order.verify(parser).setData(eq(data));, +        order.verify(parser).parseHeader();, +        order.verify(decoder).setData(header, data);, +    public void testAdvancesDecoderBeforeAttemptingToGetFirstFrame() {, +        when(gifEncoder.start(any(OutputStream.class))).thenReturn(true);, +        when(decoder.getFrameCount()).thenReturn(1);, +        when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +        encoder.encode(resource, mock(OutputStream.class));, +, +        InOrder order = inOrder(decoder);, +        order.verify(decoder).advance();, +        order.verify(decoder).getNextFrame();, +    }, +, +    @Test, +    public void testSetsDelayOnEncoderAfterAddingFrame() {, +        when(gifEncoder.start(any(OutputStream.class))).thenReturn(true);, +        when(gifEncoder.addFrame(any(Bitmap.class))).thenReturn(true);, +, +        when(decoder.getFrameCount()).thenReturn(1);, +        when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));, +        int expectedIndex = 34;, +        when(decoder.getCurrentFrameIndex()).thenReturn(expectedIndex);, +        int expectedDelay = 5000;, +        when(decoder.getDelay(eq(expectedIndex))).thenReturn(expectedDelay);, +, +        encoder.encode(resource, mock(OutputStream.class));, +, +        InOrder order = inOrder(gifEncoder, decoder);, +        order.verify(decoder).advance();, +        order.verify(gifEncoder).addFrame(any(Bitmap.class));, +        order.verify(gifEncoder).setDelay(eq(expectedDelay));, +        order.verify(decoder).advance();, +    }, +, +    @Test, +    public void testWritesSingleFrameToEncoderAndReturnsTrueIfEncoderFinishes() {, +        OutputStream os = mock(OutputStream.class);, +        Bitmap frame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);]