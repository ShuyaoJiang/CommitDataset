[+++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import android.view.View;, +import android.widget.ImageView;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {, +        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);, +    }, +, +, +    /**, +     * Cancel any pending loads Glide may have for the target and free any resources (such as {@link Bitmap}s) that may, +     * have been loaded for the target so they may be reused., +     *, +     * @param target The Target to cancel loads for., +     */, +    public static void clear(Target target) {, +        ImagePresenter imagePresenter = target.getImagePresenter();, +        if (imagePresenter != null) {, +            imagePresenter.clear();, +        }, +     * Cancel any pending loads Glide may have for the view and free any resources that may have been loaded for the, +     * view., +     * <p>, +     *     Note that this will only work if {@link View#setTag(Object)} is not called on this view outside of Glide., +     * </p>, +     *, +     * @see #clear(Target)., +     *, +     * @param view The view to cancel loads and free resources for., +     * @throws IllegalArgumentException if an object other than Glide's metadata is set as the view's tag., +    public static void clear(View view) {, +        Target viewTarget = new CancelTarget(view);, +        clear(viewTarget);, +         * @return The given target., +        /**, +         * Sets the {@link ImageView} the image will be loaded into, cancels any existing loads into the view, and frees, +         * any resources Glide has loaded into the view so they may be reused., +         *, +         * @see #clear(View), +         *, +         * @param view The view to cancel previous loads for and load the new image into., +         * @return The {@link ImageViewTarget} used to wrap the given {@link ImageView}., +         */, +        public ImageViewTarget into(ImageView view) {, +            return into(new ImageViewTarget(view));, +        }, +, +            ImagePresenter<ModelType, Y> imagePresenter = buildImagePresenter(target);, +, +    private static class CancelTarget extends ViewTarget<View> {, +        public CancelTarget(View view) {, +            super(view);, +        }, +, +        @Override, +        public void onImageReady(Bitmap bitmap) { }, +, +        @Override, +        public void setPlaceholder(Drawable placeholder) { }, +    }, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.drawable.Drawable;, +import android.view.View;, +import android.widget.ImageView;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {, +        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);, +    }, +, +, +    /**, +     * Cancel any pending loads Glide may have for the target and free any resources (such as {@link Bitmap}s) that may, +     * have been loaded for the target so they may be reused., +     *, +     * @param target The Target to cancel loads for., +     */, +    public static void clear(Target target) {, +        ImagePresenter imagePresenter = target.getImagePresenter();, +        if (imagePresenter != null) {, +            imagePresenter.clear();, +        }, +     * Cancel any pending loads Glide may have for the view and free any resources that may have been loaded for the, +     * view., +     * <p>, +     *     Note that this will only work if {@link View#setTag(Object)} is not called on this view outside of Glide., +     * </p>, +     *, +     * @see #clear(Target)., +     *, +     * @param view The view to cancel loads and free resources for., +     * @throws IllegalArgumentException if an object other than Glide's metadata is set as the view's tag., +    public static void clear(View view) {, +        Target viewTarget = new CancelTarget(view);, +        clear(viewTarget);, +         * @return The given target.]