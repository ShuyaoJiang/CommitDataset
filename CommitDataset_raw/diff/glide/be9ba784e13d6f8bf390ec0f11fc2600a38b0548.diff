[+++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.model.ImageVideoWrapper;, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.FitCenter;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmap;, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapTransformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.bitmap.RequestListener;, +, +import java.io.InputStream;, +, +public class DrawableRequestBuilder<ModelType> extends, +        GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmap, Drawable> {, +    private final Context context;, +    private final Glide glide;, +, +    public DrawableRequestBuilder(Context context, ModelType model,, +            LoadProvider<ModelType, ImageVideoWrapper, GifBitmap, Drawable> loadProvider, Glide glide) {, +        super(context, model, loadProvider, Drawable.class, glide);, +        this.context = context;, +        this.glide = glide;, +    }, +, +    public DrawableRequestBuilder<ModelType> thumbnail(, +            DrawableRequestBuilder<ModelType> thumbnailRequest) {, +        super.thumbnail(thumbnailRequest);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> thumbnail(, +            GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmap, Drawable> thumbnailRequest) {, +        super.thumbnail(thumbnailRequest);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> thumbnail(float sizeMultiplier) {, +        super.thumbnail(sizeMultiplier);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> sizeMultiplier(, +            float sizeMultiplier) {, +        super.sizeMultiplier(sizeMultiplier);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> decoder(, +            ResourceDecoder<ImageVideoWrapper, GifBitmap> decoder) {, +        super.decoder(decoder);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> cacheDecoder(, +            ResourceDecoder<InputStream, GifBitmap> cacheDecoder) {, +        super.cacheDecoder(cacheDecoder);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> encoder(, +            ResourceEncoder<GifBitmap> encoder) {, +        super.encoder(encoder);, +        return this;, +    }, +, +    @Override, +    public DrawableRequestBuilder<ModelType> priority(Priority priority) {, +        super.priority(priority);, +        return this;, +    }, +, +    public DrawableRequestBuilder<ModelType> centerCrop() {, +        return bitmapTransform(new CenterCrop(glide.getBitmapPool()));, +    }, +, +    public DrawableRequestBuilder<ModelType> fitCenter() {, +        return bitmapTransform(new FitCenter(glide.getBitmapPool()));, +    }, +, +    public DrawableRequestBuilder<ModelType> bitmapTransform(Transformation<Bitmap> bitmapTransformation) {, +        return transform(new GifBitmapTransformation(context, bitmapTransformation));, +    }, +]