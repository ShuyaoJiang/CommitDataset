[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    @Override, +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<Drawable, ? extends Drawable> transcoder) {, +        super.transcoder(transcoder);, +        return this;, +    }, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    @Override, +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<Drawable, ? extends Drawable> transcoder) {, +        super.transcoder(transcoder);, +        return this;, +    }, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private GlideAnimationFactory<? super TranscodeType> animationFactory = NoAnimation.getFactory();, +            GlideAnimationFactory<? super TranscodeType> animationFactory) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    @Override, +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<Drawable, ? extends Drawable> transcoder) {, +        super.transcoder(transcoder);, +        return this;, +    }, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private GlideAnimationFactory<? super TranscodeType> animationFactory = NoAnimation.getFactory();, +            GlideAnimationFactory<? super TranscodeType> animationFactory) {, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    @Override, +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<Drawable, ? extends Drawable> transcoder) {, +        super.transcoder(transcoder);, +        return this;, +    }, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private GlideAnimationFactory<? super TranscodeType> animationFactory = NoAnimation.getFactory();, +            GlideAnimationFactory<? super TranscodeType> animationFactory) {, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +public final class GenericRequest<A, Z, R> implements Request, SizeReadyCallback,, +    private static final Queue<GenericRequest<?, ?, ?>> REQUEST_POOL = Util.createQueue(0);, +    private GlideAnimationFactory<? super R> animationFactory;, +    public static <A, Z, R> GenericRequest<A, Z, R> obtain(, +            GlideAnimationFactory<? super R> animationFactory,, +        GenericRequest<A, Z, R> request = (GenericRequest<A, Z, R>) REQUEST_POOL.poll();, +            request = new GenericRequest<A, Z, R>();, +            GlideAnimationFactory<? super R> animationFactory,, +            GlideAnimation<? super R> animation = animationFactory.build(loadedFromMemoryCache, isFirstReadyResource());, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    @Override, +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<Drawable, ? extends Drawable> transcoder) {, +        super.transcoder(transcoder);, +        return this;, +    }, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private GlideAnimationFactory<? super TranscodeType> animationFactory = NoAnimation.getFactory();, +            GlideAnimationFactory<? super TranscodeType> animationFactory) {, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +        super.animate(new DrawableCrossFadeFactory());, +        super.animate(new DrawableCrossFadeFactory(duration));, +        super.animate(new DrawableCrossFadeFactory(animation, duration));, +        super.animate(new DrawableCrossFadeFactory(context, animationId,, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +public final class GenericRequest<A, Z, R> implements Request, SizeReadyCallback,, +    private static final Queue<GenericRequest<?, ?, ?>> REQUEST_POOL = Util.createQueue(0);]