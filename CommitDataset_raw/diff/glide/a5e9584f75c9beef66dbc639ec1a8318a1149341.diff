[+++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java, +        return keyGenerator.getSafeKey(new StringKey(getRandomId()));, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java, +        return keyGenerator.getSafeKey(new StringKey(getRandomId()));, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +        @Override, +        public void update(MessageDigest messageDigest) throws UnsupportedEncodingException {, +            messageDigest.update(toString().getBytes("UTF-8"));, +        }, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java, +        return keyGenerator.getSafeKey(new StringKey(getRandomId()));, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +        @Override, +        public void update(MessageDigest messageDigest) throws UnsupportedEncodingException {, +            messageDigest.update(toString().getBytes("UTF-8"));, +        }, +++ b/library/src/com/bumptech/glide/load/Key.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +/**, + * A very generic interface that must implement {@link #equals(Object)} and {@link #hashCode()} to include a set of, + * uniquely identifying information for the object(s) represented by this key. Keys are used as cache keys so they must, + * be unique within a given dataset., + *, + */, +    /**, +     * Adds all uniquely identifying information to the given digest., +     */, +    public void update(MessageDigest messageDigest) throws UnsupportedEncodingException;, +, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java, +        return keyGenerator.getSafeKey(new StringKey(getRandomId()));, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +        @Override, +        public void update(MessageDigest messageDigest) throws UnsupportedEncodingException {, +            messageDigest.update(toString().getBytes("UTF-8"));, +        }, +++ b/library/src/com/bumptech/glide/load/Key.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +/**, + * A very generic interface that must implement {@link #equals(Object)} and {@link #hashCode()} to include a set of, + * uniquely identifying information for the object(s) represented by this key. Keys are used as cache keys so they must, + * be unique within a given dataset., + *, + */, +    /**, +     * Adds all uniquely identifying information to the given digest., +     */, +    public void update(MessageDigest messageDigest) throws UnsupportedEncodingException;, +, +++ b/library/src/com/bumptech/glide/load/engine/EngineKey.java, +import java.io.UnsupportedEncodingException;, +import java.nio.ByteBuffer;, +import java.security.MessageDigest;, +, +    private static final String FORMAT = "UTF-8";, +, +, +    @Override, +    public void update(MessageDigest messageDigest) throws UnsupportedEncodingException {, +        byte[] dimensions = ByteBuffer.allocate(8), +                .putInt(width), +                .putInt(height), +                .array();, +        messageDigest.update(id.getBytes(FORMAT));, +        messageDigest.update(dimensions);, +        messageDigest.update(cacheDecoder.getId().getBytes(FORMAT));, +        messageDigest.update(decoder.getId().getBytes(FORMAT));, +        messageDigest.update(transformation.getId().getBytes(FORMAT));, +        messageDigest.update(encoder.getId().getBytes(FORMAT));, +    }, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/KeyGeneratorTest.java, +        return keyGenerator.getSafeKey(new StringKey(getRandomId()));, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +        @Override, +        public void update(MessageDigest messageDigest) throws UnsupportedEncodingException {, +            messageDigest.update(toString().getBytes("UTF-8"));, +        }, +++ b/library/src/com/bumptech/glide/load/Key.java, +import java.io.UnsupportedEncodingException;, +import java.security.MessageDigest;, +, +/**, + * A very generic interface that must implement {@link #equals(Object)} and {@link #hashCode()} to include a set of, + * uniquely identifying information for the object(s) represented by this key. Keys are used as cache keys so they must]