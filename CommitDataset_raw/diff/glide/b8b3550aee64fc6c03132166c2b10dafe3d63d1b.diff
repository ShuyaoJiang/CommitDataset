[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    this(url, Headers.DEFAULT);, +    this(url, Headers.DEFAULT);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    this(url, Headers.DEFAULT);, +    this(url, Headers.DEFAULT);, +++ b/library/src/main/java/com/bumptech/glide/load/model/Headers.java, +  /**, +   * An empty Headers object that can be used if users don't want to provide headers., +   *, +   * @deprecated Use {@link #DEFAULT} instead., +   */, +  @Deprecated, +   * A Headers object containing reasonable defaults that should be used when users don't want, +   * to provide their own headers., +   */, +  Headers DEFAULT = new LazyHeaders.Builder().build();, +, +  /**, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    this(url, Headers.DEFAULT);, +    this(url, Headers.DEFAULT);, +++ b/library/src/main/java/com/bumptech/glide/load/model/Headers.java, +  /**, +   * An empty Headers object that can be used if users don't want to provide headers., +   *, +   * @deprecated Use {@link #DEFAULT} instead., +   */, +  @Deprecated, +   * A Headers object containing reasonable defaults that should be used when users don't want, +   * to provide their own headers., +   */, +  Headers DEFAULT = new LazyHeaders.Builder().build();, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java, +import android.text.TextUtils;, +, +   * Adds an {@link LazyHeaderFactory} that will be used to construct a value for the given, +   * key* lazily on a background thread., +   *, +   * <p> This class may include default values for User-Agent and Accept-Encoding headers. These, +   * will be replaced by calls to either {@link #setHeader(String, LazyHeaderFactory)} or, +   * {@link #addHeader(String, String)}, even though {@link #addHeader(String, LazyHeaderFactory)}, +   * would usually append an additional value. </p>, +   // PMD doesn't like the necessary static block to initialize DEFAULT_HEADERS., +  @SuppressWarnings("PMD.FieldDeclarationsShouldBeAtStartOfClass"), +    private static final String USER_AGENT_HEADER = "User-Agent";, +    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");, +    private static final String ENCODING_HEADER = "Accept-Encoding";, +    private static final String DEFAULT_ENCODING = "identity";, +    private static final Map<String, List<LazyHeaderFactory>> DEFAULT_HEADERS;, +, +    // Set Accept-Encoding header to do our best to avoid gzip since it's both inefficient for, +    // images and also makes it more difficult for us to detect and prevent partial content, +    // rendering. See #440., +    static {, +      Map<String, List<LazyHeaderFactory>> temp, +          = new HashMap<>(2);, +      if (!TextUtils.isEmpty(DEFAULT_USER_AGENT)) {, +        temp.put(USER_AGENT_HEADER,, +            Collections.<LazyHeaderFactory>singletonList(, +                new StringHeaderFactory(DEFAULT_USER_AGENT)));, +      }, +      temp.put(ENCODING_HEADER,, +          Collections.<LazyHeaderFactory>singletonList(, +              new StringHeaderFactory(DEFAULT_ENCODING)));, +      DEFAULT_HEADERS = Collections.unmodifiableMap(temp);, +    }, +, +    private boolean copyOnModify = true;, +    private boolean isEncodingDefault = true;, +    private Map<String, List<LazyHeaderFactory>> headers = DEFAULT_HEADERS;, +    private boolean isUserAgentDefault = headers.containsKey(DEFAULT_USER_AGENT);, +     * <p> Use {@link #addHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O, +     * (ie an oauth token). </p>, +, +     * key lazily on a background thread., +     * <p> Headers may have multiple values whose order is defined by the order in which, +     * this method is called. </p>, +     * <p> This class does not prevent you from adding the same value to a given key multiple, +     * times </p>, +      if ((isEncodingDefault && ENCODING_HEADER.equalsIgnoreCase(key)), +          || (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key))) {, +        return setHeader(key, factory);, +      copyIfNecessary();, +      getFactories(key).add(factory);]