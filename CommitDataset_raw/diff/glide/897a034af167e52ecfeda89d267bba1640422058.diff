[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import java.util.Arrays;, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +    }, +        for (Exception exception : list(new Exception("test"), null)) {, +            harness = new EngineJobHarness();, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +            verify(newCallback).onException(eq(exception));, +        }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +, +    @Test, +    public void testRemovingCallbackAfterLoadFailsWithNullExceptionDoesNotCancelJob() {, +        EngineJob job = harness.getJob();, +, +        job.onException(null);, +        job.removeCallback(harness.cb);, +        verify(harness.listener, never()).onEngineJobCancelled(any(EngineJob.class), any(Key.class));, +    }, +, +    private static <T> List<T> list(T... items) {, +        return Arrays.asList(items);, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import java.util.Arrays;, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +    }, +        for (Exception exception : list(new Exception("test"), null)) {, +            harness = new EngineJobHarness();, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +            verify(newCallback).onException(eq(exception));, +        }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +        for (Exception exception : list(new RuntimeException("test"), null)) {, +            harness = new EngineJobHarness();, +            job.onException(exception);, +    }, +, +    @Test, +    public void testRemovingCallbackAfterLoadFailsWithNullExceptionDoesNotCancelJob() {, +        EngineJob job = harness.getJob();, +, +        job.onException(null);, +        job.removeCallback(harness.cb);, +        verify(harness.listener, never()).onEngineJobCancelled(any(EngineJob.class), any(Key.class));, +    }, +, +    private static <T> List<T> list(T... items) {, +        return Arrays.asList(items);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +, +    // Either resource or exception (particularly exception) may be returned to us null, so use booleans to track if, +    // we've received them instead of relying on them to be non-null. See issue #180., +    private boolean hasResource;, +    private boolean hasException;, +        if (hasResource) {, +        } else if (hasException) {, +        if (hasResource || hasException) {, +        if (hasException || hasResource || isCancelled) {, +                hasResource = true;, +                hasException = true;]