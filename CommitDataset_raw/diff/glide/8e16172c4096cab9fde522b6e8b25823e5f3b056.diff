[+++ b/library/tests/src/com/bumptech/glide/LruCacheTest.java, +package com.bumptech.glide;, +, +import android.content.ComponentCallbacks2;, +import android.graphics.Bitmap;, +import android.test.AndroidTestCase;, +import com.bumptech.glide.resize.cache.LruMemoryCache;, +import com.bumptech.glide.resize.cache.MemoryCache;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.UUID;, +import java.util.concurrent.atomic.AtomicInteger;, +, +public class LruCacheTest extends AndroidTestCase {, +    // 1MB, +    private static final int SIZE = 1024 * 1024;, +    private LruMemoryCache cache;, +    private String key;, +    private Bitmap test;, +, +    @Override, +    protected void setUp() throws Exception {, +        super.setUp();, +        cache = new LruMemoryCache(SIZE);, +        key = getKey();, +        test = getBitmap();, +    }, +, +    public void testCanAddABitmap() {, +        cache.put(key, test);, +        assertNotNull(cache.get(key));, +    }, +, +    public void testLeastRecentlyAddKeyEvictedFirstIfGetsAreEqual() {, +        LruMemoryCache smallCache = new LruMemoryCache(2 * getSize(test));, +        smallCache.put(key, test);, +        smallCache.put(getKey(), getBitmap());, +        final AtomicInteger totalRemoved = new AtomicInteger();, +        smallCache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +            @Override, +            public void onImageRemoved(Bitmap removed) {, +                assertEquals(test, removed);, +                totalRemoved.getAndIncrement();, +            }, +        });, +        smallCache.put(getKey(), getBitmap());, +        assertEquals(1, totalRemoved.get());, +    }, +, +    public void testLeastRecentlyUsedKeyEvictedFirst() {, +        LruMemoryCache smallCache = new LruMemoryCache(2 * getSize(test));, +        smallCache.put(key, test);, +        smallCache.put(getKey(), getBitmap());, +        smallCache.get(key);, +        final AtomicInteger totalRemoved = new AtomicInteger();, +        smallCache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +            @Override, +            public void onImageRemoved(Bitmap removed) {, +                assertNotSame(test, removed);, +                totalRemoved.getAndIncrement();, +            }, +        });, +        smallCache.put(getKey(), getBitmap());, +        assertEquals(1, totalRemoved.get());, +    }, +, +    public void testImageRemovedListenerCalledWhenBitmapEvicted() {, +        LruMemoryCache smallCache = new LruMemoryCache(getSize(test));, +        smallCache.put(getKey(), test);, +        final AtomicInteger totalRemoved = new AtomicInteger();, +        smallCache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +            @Override, +            public void onImageRemoved(Bitmap removed) {, +                totalRemoved.getAndIncrement();, +            }, +        });, +        smallCache.put(getKey(), getBitmap());, +        assertEquals(1, totalRemoved.get());, +    }, +, +    public void testBitmapLargerThanPoolIsImmediatelyEvicted() {, +        final Bitmap tooLarge = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);, +        assertTrue(getSize(tooLarge) > SIZE);, +        final AtomicInteger totalRemoved = new AtomicInteger();, +        cache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +            @Override, +            public void onImageRemoved(Bitmap removed) {, +                totalRemoved.incrementAndGet();, +                assertEquals(tooLarge, removed);, +            }, +        });, +        cache.put(key, tooLarge);, +        assertFalse(cache.contains(key));, +        assertEquals(1, totalRemoved.get());, +    }, +, +    public void testEmptyCacheDoesNotContainKey() {, +        assertFalse(cache.contains(key));, +    }]