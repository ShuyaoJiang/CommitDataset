[+++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +                        .setModelLoader(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +                        .setModelLoader(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +                    .with(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +                        .setModelLoader(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +                    .with(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ /dev/null, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +                        .setModelLoader(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +                    .with(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ /dev/null, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import com.android.volley.RequestQueue;, +import com.android.volley.Response;, +import com.android.volley.VolleyError;, +import com.android.volley.toolbox.StringRequest;, +import com.bumptech.glide.Glide;, +    private final RequestQueue requestQueue;, +, +            API = new Api(applicationContext);, +    protected Api(Context applicationContext) {, +        this.requestQueue = Glide.get().getRequestQueue(applicationContext);, +    public static String getPhotoURL(Photo photo, int width, int height) {, +        return getPhotoUrl(photo, getSizeKey(width, height));, +        requestQueue.add(new StringRequest(Request.Method.GET, getSearchUrl(text), new Response.Listener<String>() {, +            public void onResponse(String response) {, +                    JSONObject searchResults = new JSONObject(response.substring(14, response.length()-1));, +        }, new Response.ErrorListener() {, +            public void onErrorResponse(VolleyError error) {, +                error.printStackTrace();, +        }));, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrModelLoader.java, +import com.bumptech.glide.loader.model.VolleyModelLoader;, +public class FlickrModelLoader extends VolleyModelLoader<Photo> {, +        super(requestQueue);, +    protected String getUrl(Photo model, int width, int height) {, +        return Api.getPhotoURL(model, width, height);, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +                        .setModelLoader(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +                    .with(new FlickrModelLoader(Glide.get().getRequestQueue(getActivity()))), +++ /dev/null, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import com.android.volley.RequestQueue;, +import com.android.volley.Response;, +import com.android.volley.VolleyError;, +import com.android.volley.toolbox.StringRequest;, +import com.bumptech.glide.Glide;, +    private final RequestQueue requestQueue;, +, +            API = new Api(applicationContext);, +    protected Api(Context applicationContext) {, +        this.requestQueue = Glide.get().getRequestQueue(applicationContext);, +    public static String getPhotoURL(Photo photo, int width, int height) {, +        return getPhotoUrl(photo, getSizeKey(width, height));, +        requestQueue.add(new StringRequest(Request.Method.GET, getSearchUrl(text), new Response.Listener<String>() {, +            public void onResponse(String response) {, +                    JSONObject searchResults = new JSONObject(response.substring(14, response.length()-1));, +        }, new Response.ErrorListener() {, +            public void onErrorResponse(VolleyError error) {, +                error.printStackTrace();, +        }));, +++ /dev/null]