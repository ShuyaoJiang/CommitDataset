[+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +  private boolean isCallingCallbacks;, +    assertNotCallingCallbacks();, +    assertNotCallingCallbacks();, +    assertNotCallingCallbacks();, +  // Avoids difficult to understand errors like #2413., +  private void assertNotCallingCallbacks() {, +    if (isCallingCallbacks) {, +      throw new IllegalStateException("You can't start or clear loads in RequestListener or", +          + " Target callbacks. If you must do so, consider posting your into() or clear() calls", +          + " to the main thread using a Handler instead.");, +    }, +  }, +, +    assertNotCallingCallbacks();, +    isCallingCallbacks = true;, +    try {, +    } finally {, +      isCallingCallbacks = false;, +    }, +, +    isCallingCallbacks = true;, +    try {, +    } finally {, +      isCallingCallbacks = false;, +    }, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +  private boolean isCallingCallbacks;, +    assertNotCallingCallbacks();, +    assertNotCallingCallbacks();, +    assertNotCallingCallbacks();, +  // Avoids difficult to understand errors like #2413., +  private void assertNotCallingCallbacks() {, +    if (isCallingCallbacks) {, +      throw new IllegalStateException("You can't start or clear loads in RequestListener or", +          + " Target callbacks. If you must do so, consider posting your into() or clear() calls", +          + " to the main thread using a Handler instead.");, +    }, +  }, +, +    assertNotCallingCallbacks();, +    isCallingCallbacks = true;, +    try {, +    } finally {, +      isCallingCallbacks = false;, +    }, +, +    isCallingCallbacks = true;, +    try {, +    } finally {, +      isCallingCallbacks = false;, +    }, +++ b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java, +import android.os.Handler;, +import android.os.Handler.Callback;, +import android.os.Looper;, +import android.os.Message;, +  private static final int MESSAGE_CLEAR = 1;, +  private static final Handler HANDLER = new Handler(Looper.getMainLooper(), new Callback() {, +    @Override, +    public boolean handleMessage(Message message) {, +      if (message.what == MESSAGE_CLEAR) {, +        ((PreloadTarget<?>) message.obj).clear();, +        return true;, +      }, +      return false;, +    }, +  });, +    HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();, +  }, +, +  private void clear() {]