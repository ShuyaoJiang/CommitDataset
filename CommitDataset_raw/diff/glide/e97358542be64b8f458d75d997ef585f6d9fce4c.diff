[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +     * models. Typically the {@link RequestManager#using(StreamModelLoader)} or, +     * {@link RequestManager#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * @see RequestManager#using(FileDescriptorModelLoader), +     * @see RequestManager#using(StreamModelLoader), +    public static RequestManager with(Context context) {, +        return RequestManagerRetriever.get(context);, +    public static RequestManager with(Activity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(FragmentActivity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(android.app.Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +    public static RequestManager with(Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +     * models. Typically the {@link RequestManager#using(StreamModelLoader)} or, +     * {@link RequestManager#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * @see RequestManager#using(FileDescriptorModelLoader), +     * @see RequestManager#using(StreamModelLoader), +    public static RequestManager with(Context context) {, +        return RequestManagerRetriever.get(context);, +    public static RequestManager with(Activity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(FragmentActivity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(android.app.Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +    public static RequestManager with(Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +     * models. Typically the {@link RequestManager#using(StreamModelLoader)} or, +     * {@link RequestManager#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * @see RequestManager#using(FileDescriptorModelLoader), +     * @see RequestManager#using(StreamModelLoader), +    public static RequestManager with(Context context) {, +        return RequestManagerRetriever.get(context);, +    public static RequestManager with(Activity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(FragmentActivity activity) {, +        return RequestManagerRetriever.get(activity);, +    public static RequestManager with(android.app.Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +    public static RequestManager with(Fragment fragment) {, +        return RequestManagerRetriever.get(fragment);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import android.app.Activity;, +import android.app.Fragment;, +import android.net.Uri;, +import android.os.ParcelFileDescriptor;, +import android.provider.MediaStore;, +import android.support.v4.app.FragmentActivity;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.load.model.stream.MediaStoreStreamLoader;, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.load.model.stream.StreamFileLoader;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.model.stream.StreamResourceLoader;, +import com.bumptech.glide.load.model.stream.StreamStringLoader;, +import com.bumptech.glide.load.model.stream.StreamUriLoader;, +import com.bumptech.glide.volley.VolleyUrlLoader;, +import java.io.File;, +import java.io.InputStream;, +import java.net.URL;, +import java.util.UUID;, +, +/**, + * A class for managing and starting requests for Glide. Can use activity, fragment and connectivity lifecycle events to, + * intelligently stop, start, and restart requests. Retrieve either by instantiating a new object, or to take advantage, + * built in Activity and Fragment lifecycle handling, use the static Glide.load methods with your Fragment or Activity., + *, + * @see Glide#with(Activity), + * @see Glide#with(FragmentActivity), + * @see Glide#with(Fragment), + * @see Glide#with(android.support.v4.app.Fragment), + * @see Glide#with(Context), + */, +    private final Context context;, +    private final Glide glide;, +        this.context = context;, +        this.connectivityMonitor = factory.build(context, new RequestManagerConnectivityListener(requestTracker));, +        this.glide = Glide.get(context);, +    /**, +     * Lifecycle callback that registers for connectivity events (if the android.permission.ACCESS_NETWORK_STATE, +     * permission is present) and restarts failed or paused requests., +     */, +    /**, +     * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE, +     * permission is present) and pauses in progress loads., +     */, +    /**, +     * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed, +     * requests., +     */]