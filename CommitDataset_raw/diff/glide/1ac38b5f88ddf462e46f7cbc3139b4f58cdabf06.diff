[+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +import android.os.Build;, +      if (isViewStateValid() && isSizeValid(currentWidth) && isSizeValid(currentHeight)) {, +    private boolean isViewStateValid() {, +      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +        return view.isLaidOut();, +      }, +      return !view.isLayoutRequested();, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +import android.os.Build;, +      if (isViewStateValid() && isSizeValid(currentWidth) && isSizeValid(currentHeight)) {, +    private boolean isViewStateValid() {, +      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +        return view.isLaidOut();, +      }, +      return !view.isLayoutRequested();, +    }, +, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +    imageView.layout(0, 0, 100, 100);, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +import android.os.Build;, +      if (isViewStateValid() && isSizeValid(currentWidth) && isSizeValid(currentHeight)) {, +    private boolean isViewStateValid() {, +      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +        return view.isLaidOut();, +      }, +      return !view.isLayoutRequested();, +    }, +, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +    imageView.layout(0, 0, 100, 100);, +++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java, +import android.os.Build;, +import com.bumptech.glide.tests.Util;, +import org.junit.After;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +@Config(manifest = Config.NONE, sdk = 19, shadows = { ViewTargetTest.SizedShadowView.class,, +  @Mock private SizeReadyCallback cb;, +  @Mock private Request request;, +  private int sdkVersion;, +    sdkVersion = Build.VERSION.SDK_INT;, +    MockitoAnnotations.initMocks(this);, +    shadowView = Shadow.extract(view);, +    shadowObserver = Shadow.extract(view.getViewTreeObserver());, +  }, +, +  @After, +  public void tearDown() {, +    Util.setSdkVersionInt(sdkVersion);, +    shadowView, +        .setWidth(dimens), +        .setHeight(dimens), +        .setIsLaidOut(true);, +    shadowView.setIsLaidOut(true);, +    shadowView.setIsLaidOut(true);, +    shadowView.setIsLaidOut(true);, +    shadowView.setIsLaidOut(true);, +    shadowView.setIsLaidOut(true);, +  @Test, +  public void getSize_withValidWidthAndHeight_notLaidOut_doesNotCallSizeReady() {, +    shadowView, +        .setWidth(100), +        .setHeight(100), +        .setIsLaidOut(false);, +    target.getSize(cb);, +, +    verify(cb, never()).onSizeReady(anyInt(), anyInt());, +  }, +, +  @Test, +  public void getSize_withValidWidthAndHeight_preV19_layoutRequested_doesNotCallSizeReady() {, +    Util.setSdkVersionInt(18);, +    shadowView, +        .setWidth(100), +        .setHeight(100), +        .requestLayout();, +, +    target.getSize(cb);, +, +    verify(cb, never()).onSizeReady(anyInt(), anyInt());, +  }, +, +    private boolean isLaidOut;, +    private boolean isLayoutRequested;, +    public SizedShadowView setWidth(int width) {, +      return this;, +    public SizedShadowView setHeight(int height) {, +      return this;, +    }, +, +    public SizedShadowView setIsLaidOut(boolean isLaidOut) {, +      this.isLaidOut = isLaidOut;, +      return this;, +    }, +, +    @Implementation]