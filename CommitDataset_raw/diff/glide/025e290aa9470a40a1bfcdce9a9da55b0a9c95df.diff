[+++ b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java, +  private final String notificationTag;, +    this(context, viewId, remoteViews, notification, notificationId, null);, +   * Constructor using a Notification object, a notificationId, and a notificationTag to get a, +   * handle on the Notification in order to update it that uses {@link #SIZE_ORIGINAL} as the, +   * target width and height., +   *, +   * @param context         Context to use in the AppWidgetManager initialization., +   * @param viewId          The id of the ImageView view that will load the image., +   * @param remoteViews     RemoteViews object which contains the ImageView that will load the, +   *                        bitmap., +   * @param notification    The Notification object that we want to update., +   * @param notificationId  The notificationId of the Notification that we want to load the Bitmap., +   * @param notificationTag The notificationTag of the Notification that we want to load the Bitmap., +   *                        May be {@code null}., +   */, +  public NotificationTarget(Context context, int viewId, RemoteViews remoteViews,, +      Notification notification, int notificationId, String notificationTag) {, +    this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, notification, notificationId,, +      notificationTag);, +  }, +, +  /**, +   * Constructor using a Notification object, a notificationId, and a notificationTag to get a, +   * handle on the Notification in order to update it., +   * @param notificationTag The notificationTag of the Notification that we want to load the, +   *                        Bitmap. May be {@code null}., +  public NotificationTarget(Context context, int width, int height, int viewId,, +      RemoteViews remoteViews, Notification notification, int notificationId,, +      String notificationTag) {, +    this.notificationTag = notificationTag;, +    manager.notify(this.notificationTag, this.notificationId, this.notification);, +++ b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java, +  private final String notificationTag;, +    this(context, viewId, remoteViews, notification, notificationId, null);, +   * Constructor using a Notification object, a notificationId, and a notificationTag to get a, +   * handle on the Notification in order to update it that uses {@link #SIZE_ORIGINAL} as the, +   * target width and height., +   *, +   * @param context         Context to use in the AppWidgetManager initialization., +   * @param viewId          The id of the ImageView view that will load the image., +   * @param remoteViews     RemoteViews object which contains the ImageView that will load the, +   *                        bitmap., +   * @param notification    The Notification object that we want to update., +   * @param notificationId  The notificationId of the Notification that we want to load the Bitmap., +   * @param notificationTag The notificationTag of the Notification that we want to load the Bitmap., +   *                        May be {@code null}., +   */, +  public NotificationTarget(Context context, int viewId, RemoteViews remoteViews,, +      Notification notification, int notificationId, String notificationTag) {, +    this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, notification, notificationId,, +      notificationTag);, +  }, +, +  /**, +   * Constructor using a Notification object, a notificationId, and a notificationTag to get a, +   * handle on the Notification in order to update it., +   * @param notificationTag The notificationTag of the Notification that we want to load the, +   *                        Bitmap. May be {@code null}., +  public NotificationTarget(Context context, int width, int height, int viewId,, +      RemoteViews remoteViews, Notification notification, int notificationId,, +      String notificationTag) {, +    this.notificationTag = notificationTag;, +    manager.notify(this.notificationTag, this.notificationId, this.notification);, +++ b/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java, +  private String notificationTag;, +    notificationTag = "tag";, +            viewId, remoteViews, notification, notificationId, notificationTag);, +    assertEquals(notificationTag, shadowManager.updatedNotificationTag);, +        123 /*viewId*/, mock(RemoteViews.class), mock(Notification.class), 456 /*notificationId*/,, +        "tag" /*notificationTag*/);, +        123 /*viewId*/, mock(RemoteViews.class), null /*notification*/, 456 /*notificationId*/,, +        "tag" /*notificationTag*/);, +        123 /*viewId*/, null /*remoteViews*/, mock(Notification.class), 456 /*notificationId*/,, +        "tag" /*notificationTag*/);, +    String updatedNotificationTag;, +    public void notify(String notificationTag, int notificationId, Notification notification) {, +      updatedNotificationTag = notificationTag;]