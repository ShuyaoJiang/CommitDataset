[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.MemoryCache;, +import com.bumptech.photos.resize.cache.MemoryCacheAdapter;, +    private final MemoryCache memoryCache;, +, +    }, +, +    private static MemoryCache buildMemoryCache(Options options, Context context) {, +        if (options.useMemoryCache && options.maxMemorySize <= 0) {, +            options.maxMemorySize = LruPhotoCache.getMaxCacheSize(context);, +        }, +, +        final MemoryCache result;, +        if (!options.useMemoryCache) {, +            result = new MemoryCacheAdapter();, +        } else {, +            result = new LruPhotoCache(options.maxMemorySize);, +        }, +        return result;, +        this(buildMemoryCache(options, context), diskCache, resizeService, options);, +    }, +, +    public ImageManager(MemoryCache memoryCache, DiskCache diskCache, ExecutorService resizeService, Options options) {, +            memoryCache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +                public void onImageRemoved(Bitmap bitmap) {, +        this.memoryCache = memoryCache;, +        Bitmap inCache = memoryCache.get(key);, +        if (memoryCache.put(key, bitmap) != bitmap) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.MemoryCache;, +import com.bumptech.photos.resize.cache.MemoryCacheAdapter;, +    private final MemoryCache memoryCache;, +, +    }, +, +    private static MemoryCache buildMemoryCache(Options options, Context context) {, +        if (options.useMemoryCache && options.maxMemorySize <= 0) {, +            options.maxMemorySize = LruPhotoCache.getMaxCacheSize(context);, +        }, +, +        final MemoryCache result;, +        if (!options.useMemoryCache) {, +            result = new MemoryCacheAdapter();, +        } else {, +            result = new LruPhotoCache(options.maxMemorySize);, +        }, +        return result;, +        this(buildMemoryCache(options, context), diskCache, resizeService, options);, +    }, +, +    public ImageManager(MemoryCache memoryCache, DiskCache diskCache, ExecutorService resizeService, Options options) {, +            memoryCache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {, +                public void onImageRemoved(Bitmap bitmap) {, +        this.memoryCache = memoryCache;, +        Bitmap inCache = memoryCache.get(key);, +        if (memoryCache.put(key, bitmap) != bitmap) {, +++ b/library/src/com/bumptech/photos/resize/cache/LruPhotoCache.java, +public class LruPhotoCache implements MemoryCache {, +    private final LruCache<Integer, Bitmap> lruCache;, +    private ImageRemovedListener imageRemovedListener;, +        lruCache = new LruCache<Integer, Bitmap>(maxSize) {, +            @Override, +            protected void entryRemoved(boolean evicted, Integer key, Bitmap oldValue, Bitmap newValue) {, +                super.entryRemoved(evicted, key, oldValue, newValue);, +                if (imageRemovedListener != null) {, +                    imageRemovedListener.onImageRemoved(oldValue);, +                }, +        };, +, +    @Override, +    public Bitmap get(Integer key) {, +        return lruCache.get(key);, +    }, +, +    @Override, +    public Bitmap put(Integer key, Bitmap bitmap) {, +        return lruCache.put(key, bitmap);, +    }, +, +    @Override, +    public void setImageRemovedListener(ImageRemovedListener listener) {, +        this.imageRemovedListener = listener;, +    }, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.MemoryCache;, +import com.bumptech.photos.resize.cache.MemoryCacheAdapter;, +    private final MemoryCache memoryCache;, +, +    }, +, +    private static MemoryCache buildMemoryCache(Options options, Context context) {, +        if (options.useMemoryCache && options.maxMemorySize <= 0) {, +            options.maxMemorySize = LruPhotoCache.getMaxCacheSize(context);, +        }, +, +        final MemoryCache result;, +        if (!options.useMemoryCache) {, +            result = new MemoryCacheAdapter();, +        } else {, +            result = new LruPhotoCache(options.maxMemorySize);]