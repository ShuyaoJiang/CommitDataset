[+++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/library/build.gradle, +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +, +    public void testReturnsInputStreamOnStatusOk() throws Exception {, +        InputStream expected = new ByteArrayInputStream(new byte[0]);, +        when(urlConnection.getResponseCode()).thenReturn(200);, +        when(urlConnection.getInputStream()).thenReturn(expected);, +, +        assertEquals(expected, fetcher.loadData(Priority.NORMAL));, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIsNegativeOne() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(-1);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIs300() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(300);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIs500() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(500);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test, +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +, +    public void testReturnsInputStreamOnStatusOk() throws Exception {, +        InputStream expected = new ByteArrayInputStream(new byte[0]);, +        when(urlConnection.getResponseCode()).thenReturn(200);, +        when(urlConnection.getInputStream()).thenReturn(expected);, +, +        assertEquals(expected, fetcher.loadData(Priority.NORMAL));, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIsNegativeOne() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(-1);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIs300() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(300);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test(expected = IOException.class), +    public void testThrowsIfStatusCodeIs500() throws Exception {, +        when(urlConnection.getResponseCode()).thenReturn(500);, +        fetcher.loadData(Priority.HIGH);, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +    private GlideUrl glideUrl;, +        urlConnection = factory.build(glideUrl.toURL());, +        // TODO: we should consider disconnecting the url connection here, but we can't do so directly because it, +        // would cause a strict mode violation., +++ b/integration/volley/build.gradle, +    compile 'com.mcxiaoke.volley:library:1.0.+', +++ /dev/null, +++ b/library/build.gradle, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +, +    public void testReturnsInputStreamOnStatusOk() throws Exception {, +        InputStream expected = new ByteArrayInputStream(new byte[0]);, +        when(urlConnection.getResponseCode()).thenReturn(200);, +        when(urlConnection.getInputStream()).thenReturn(expected);, +, +        assertEquals(expected, fetcher.loadData(Priority.NORMAL));]