[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    private final BitmapPool bitmapPool;, +        bitmapPool = builder.bitmapPool;, +     * Get the {@link BitmapPool} this ImageManager is using. If Bitmap recycling is not supported, an, +     * {@link BitmapPoolAdapter} will be returned. For the pool to be useful you must return a bitmap to the pool for, +     * every bitmap you obtain from the pool., +     *, +     * <p>, +     *     Note the BitmapPool api is likely to change in the near future to support some new features released in, +     *     KitKat., +     * </p>, +     *, +     * @return The bitmap pool., +     */, +    public BitmapPool getBitmapPool() {, +        return bitmapPool;, +    }, +, +    /**, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    private final BitmapPool bitmapPool;, +        bitmapPool = builder.bitmapPool;, +     * Get the {@link BitmapPool} this ImageManager is using. If Bitmap recycling is not supported, an, +     * {@link BitmapPoolAdapter} will be returned. For the pool to be useful you must return a bitmap to the pool for, +     * every bitmap you obtain from the pool., +     *, +     * <p>, +     *     Note the BitmapPool api is likely to change in the near future to support some new features released in, +     *     KitKat., +     * </p>, +     *, +     * @return The bitmap pool., +     */, +    public BitmapPool getBitmapPool() {, +        return bitmapPool;, +    }, +, +    /**, +++ b/library/tests/src/com/bumptech/glide/GlideTest.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +    public void testObtainAndOfferToBitmapPool() {, +        Bitmap small = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Bitmap large = Bitmap.createBitmap(512, 512, Bitmap.Config.RGB_565);, +        BitmapPool bitmapPool = Glide.get().getImageManager(getInstrumentation().getContext()).getBitmapPool();, +        bitmapPool.put(small);, +        bitmapPool.put(large);, +, +        assertEquals(small, bitmapPool.get(small.getWidth(), small.getHeight(), small.getConfig()));, +        assertEquals(large, bitmapPool.get(large.getWidth(), large.getHeight(), large.getConfig()));, +    }, +]