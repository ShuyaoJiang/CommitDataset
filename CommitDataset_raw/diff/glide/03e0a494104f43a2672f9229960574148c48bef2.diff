[+++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows =, +    VolleyStreamFetcherServerTest.FakeSystemClock.class), +  public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +  public void testReturnsNullAfterTooManyRedirects() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs500() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs400() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows =, +    VolleyStreamFetcherServerTest.FakeSystemClock.class), +  public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +  public void testReturnsNullAfterTooManyRedirects() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs500() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs400() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import android.util.Log;, +, +import com.bumptech.glide.Logs;, +import java.io.IOException;, +import java.util.concurrent.ExecutionException;, +  public InputStream loadData(Priority priority) throws IOException {, +    try {, +    } catch (InterruptedException e) {, +      if (Logs.isEnabled(Log.VERBOSE)) {, +        Logs.log(Log.VERBOSE, "Interrupted waiting for Volley response", e);, +      }, +    } catch (ExecutionException e) {, +      if (Logs.isEnabled(Log.VERBOSE)) {, +        Logs.log(Log.VERBOSE, "ExecutionException waiting for Volley response", e);, +      }, +    }, +    return null;, +++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public InputStream loadData(Priority priority) throws IOException {, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +@Config(manifest = Config.NONE, emulateSdk = 18, shadows =, +    VolleyStreamFetcherServerTest.FakeSystemClock.class), +  public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +  public void testReturnsNullAfterTooManyRedirects() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs500() throws Exception {, +    assertThat(getFetcher().loadData(Priority.NORMAL)).isNull();, +  public void testReturnsNullIfStatusCodeIs400() throws Exception {, +    assertThat(getFetcher().loadData(Priority.LOW)).isNull();, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +import android.util.Log;, +, +import com.bumptech.glide.Logs;, +import java.io.IOException;, +import java.util.concurrent.ExecutionException;, +  public InputStream loadData(Priority priority) throws IOException {, +    try {, +    } catch (InterruptedException e) {, +      if (Logs.isEnabled(Log.VERBOSE)) {, +        Logs.log(Log.VERBOSE, "Interrupted waiting for Volley response", e);, +      }, +    } catch (ExecutionException e) {, +      if (Logs.isEnabled(Log.VERBOSE)) {, +        Logs.log(Log.VERBOSE, "ExecutionException waiting for Volley response", e);, +      }, +    }, +    return null;, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +      public boolean onLoadFailed(Object model, Target target,, +    verify(target).onLoadFailed(eq(drawable));, +    verify(target).onLoadFailed(eq(error));, +++ b/integration/okhttp/okhttp.iml, +    <orderEntry type="module" module-name="library" />, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java]