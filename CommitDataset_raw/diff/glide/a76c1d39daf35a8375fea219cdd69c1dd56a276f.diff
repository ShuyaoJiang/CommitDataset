[+++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +    private Animation animation;, +    private Drawable placeholderDrawable;, +    private Drawable errorPlaceholder;, +     * Sets an animation to run on the wrapped target when an image load finishes. Will only be run if the image, +     * was loaded asynchronously (ie was not in the memory cache), +     *, +     * @param animation The animation to run, +     * @return This RequestBuilder, +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> animate(Animation animation) {, +        this.animation = animation;, +, +        return this;, +    }, +, +    /**, +     * Sets a drawable to display while an image is loading., +     *, +     * @param drawable The drawable to display as a placeholder., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> placeholder(Drawable drawable) {, +        this.placeholderDrawable = drawable;, +, +        return this;, +    }, +, +    /**, +     * Sets a {@link Drawable} to display if a load fails., +     *, +     * @param drawable The drawable to display., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> error(Drawable drawable) {, +        this.errorPlaceholder = drawable;, +, +        return this;, +    }, +, +    /**, +            if (thumbnailRequestBuilder.animationId == 0) {, +            if (thumbnailRequestBuilder.animation == null) {, +                thumbnailRequestBuilder.animation = animation;, +            }, +, +                .setAnimation(animation), +                .setPlaceholderDrawable(placeholderDrawable), +                .setErrorDrawable(errorPlaceholder), +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +    private Animation animation;, +    private Drawable placeholderDrawable;, +    private Drawable errorPlaceholder;, +     * Sets an animation to run on the wrapped target when an image load finishes. Will only be run if the image, +     * was loaded asynchronously (ie was not in the memory cache), +     *, +     * @param animation The animation to run, +     * @return This RequestBuilder, +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> animate(Animation animation) {, +        this.animation = animation;, +, +        return this;, +    }, +, +    /**, +     * Sets a drawable to display while an image is loading., +     *, +     * @param drawable The drawable to display as a placeholder., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> placeholder(Drawable drawable) {, +        this.placeholderDrawable = drawable;, +, +        return this;, +    }, +, +    /**, +     * Sets a {@link Drawable} to display if a load fails., +     *, +     * @param drawable The drawable to display., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> error(Drawable drawable) {, +        this.errorPlaceholder = drawable;, +, +        return this;, +    }, +, +    /**, +            if (thumbnailRequestBuilder.animationId == 0) {, +            if (thumbnailRequestBuilder.animation == null) {, +                thumbnailRequestBuilder.animation = animation;, +            }, +, +                .setAnimation(animation)]