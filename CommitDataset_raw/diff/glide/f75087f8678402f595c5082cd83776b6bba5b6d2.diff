[+++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +  private boolean isGeneratedAppGlideModulePending;, +//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +//      return false;, +//    }, +      isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +  private boolean isGeneratedAppGlideModulePending;, +//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +//      return false;, +//    }, +      isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +          + " RequestBuilder object as their first and only parameter, but given multiple for: ", +    TypeMirror argumentType = first.asType();, +    if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType);, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +  private boolean isGeneratedAppGlideModulePending;, +//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +//      return false;, +//    }, +      isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +          + " RequestBuilder object as their first and only parameter, but given multiple for: ", +    TypeMirror argumentType = first.asType();, +    if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +    String visibleForTestingTypeQualifiedName =, +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +      String annotationQualfiedName = mirror.getAnnotationType().toString();, +      if (annotationQualfiedName.equals(visibleForTestingTypeQualifiedName)) {, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +  private boolean isGeneratedAppGlideModulePending;, +//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +//      return false;, +//    }, +      isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +          + " RequestBuilder object as their first and only parameter, but given multiple for: ", +    TypeMirror argumentType = first.asType();, +    if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +    String visibleForTestingTypeQualifiedName =, +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +      String annotationQualfiedName = mirror.getAnnotationType().toString();, +      if (annotationQualfiedName.equals(visibleForTestingTypeQualifiedName)) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +  void error(String toLog) {, +    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, toLog);, +  }, +, +      if (excludedModuleAnnotationValue == null, +          || excludedModuleAnnotationValue instanceof Attribute.UnresolvedClass) {, +        throw new IllegalArgumentException(, +            "Failed to find value for: " + annotationClass + " from mirrors: ", +                + clazz.getAnnotationMirrors());, +++ b/annotation/compiler/build.gradle, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +  private boolean isGeneratedAppGlideModulePending;, +//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {, +//      return false;, +//    }, +      isGeneratedAppGlideModulePending = true;, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +          + " RequestBuilder object as their first and only parameter, but given multiple for: ", +    TypeMirror argumentType = first.asType();, +    if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +          + " RequestBuilder object as their first and only parameter, but given: " + argumentType);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +    String visibleForTestingTypeQualifiedName =, +            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME), +            .toString();, +      String annotationQualfiedName = mirror.getAnnotationType().toString();, +      if (annotationQualfiedName.equals(visibleForTestingTypeQualifiedName)) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +  void error(String toLog) {, +    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, toLog);, +  }, +, +      if (excludedModuleAnnotationValue == null, +          || excludedModuleAnnotationValue instanceof Attribute.UnresolvedClass) {, +        throw new IllegalArgumentException(, +            "Failed to find value for: " + annotationClass + " from mirrors: ", +                + clazz.getAnnotationMirrors());, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +    MethodAndStaticVar methodAndVar = generateStaticMethodEquivalentForExtensionMethod(element);, +    if (methodAndVar != null) {, +      result.add(methodAndVar);, +    }, +  @Nullable]