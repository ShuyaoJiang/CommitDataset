[+++ b/library/src/com/bumptech/glide/Glide.java, +        public Request<ModelType> thumbnail(Request<ModelType> thumbnailRequest) {, +            super.thumbnail(thumbnailRequest);, +            return this;, +        }, +, +         public Request<ModelType> sizeMultiplier(float sizeMultiplier) {, +             super.sizeMultiplier(sizeMultiplier);, +             return this;, +         }, +, +        private GenericRequest<ModelType, ImageResourceType, VideoResourceType> thumbnailRequest;, +        private Float sizeMultiplier;, +        /**, +         * Loads and displays the image retrieved by the given thumbnail request if it finishes before this request., +         * Best used for loading thumbnail images that are smaller and will be loaded more quickly than the fullsize, +         * image. There are no guarantees about the order in which the requests will actually finish. However, if the, +         * thumb request completes after the full request, the thumb image will never replace the full image., +         *, +         * @see #thumbnail(float), +         *, +         * <p>, +         *     Note - Any options on the main request will not be passed on to the thumbnail request. For example, if, +         *     you want an animation to occur when either the full image loads or the thumbnail loads, you need to call, +         *     {@link #animate(int)} on both the thumb and the full request. For a simpler thumbnail option, see, +         *     {@link #thumbnail(float)}., +         * </p>, +         *, +         * <p>, +         *     Only the thumbnail call on the main request will be obeyed., +         * </p>, +         *, +         * @param thumbnailRequest The request to use to load the thumbnail., +         * @return This builder object., +         */, +        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> thumbnail(, +                GenericRequest<ModelType, ImageResourceType, VideoResourceType> thumbnailRequest) {, +            this.thumbnailRequest = thumbnailRequest;, +, +            return this;, +        }, +, +        /**, +         * Loads an image in an identical manner to this request except with the dimensions of the target multiplied, +         * by the given size multiplier. If the thumbnail load completes before the fullsize load, the thumbnail will, +         * be shown. If the thumbnail load completes afer the fullsize load, the thumbnail will not be shown., +         *, +         * <p>, +         *     Note - The thumbnail image will be smaller than the size requested so the target (or {@link ImageView}), +         *     must be able to scale the thumbnail appropriately. See {@link ImageView.ScaleType}., +         * </p>, +         *, +         * <p>, +         *     Almost all options will be copied from the original load, including the {@link ModelLoader},, +         *     {@link BitmapDecoder}, and {@link Transformation}s. However, {@link #placeholder(int)} and, +         *     {@link #error(int)}, and {@link #listener(RequestListener)} will only be used on the fullsize load and, +         *     will not be copied for the thumbnail load., +         * </p>, +         *, +         * <p>, +         *     Only the thumbnail call on the main request will be obeyed., +         * </p>, +         *, +         * @param sizeMultiplier The multiplier to apply to the {@link Target}'s dimensions when loading the thumbnail., +         * @return This builder object., +         */, +        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> thumbnail(float sizeMultiplier) {, +, +            return this;, +        }, +, +        /**, +         * Applies a multiplier to the {@link Target}'s size before loading the image. Useful for loading thumbnails, +         * or trying to avoid loading huge bitmaps on devices with overly dense screens., +         *, +         * @param sizeMultiplier The multiplier to apply to the {@link Target}'s dimensions when loading the image., +         * @return This builder object., +         */, +        public GenericRequest<ModelType, ImageResourceType, VideoResourceType> sizeMultiplier(float sizeMultiplier) {, +            if (sizeMultiplier < 0f || sizeMultiplier > 1f) {, +                throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");, +            }, +            this.sizeMultiplier = sizeMultiplier;, +, +        private <Y extends Target> ImagePresenter.Builder<ModelType, Y> createPresenterBuilder(, +                ModelLoader<ModelType, VideoResourceType> videoModelLoader, final Y target, final boolean isThumbCopy) {, +            // We need to set the animation on both the full and the thumb copy so that the animation always occurs, +            // regardless of whether the full or the thumb finishes first., +            if (animationId != -1 || (requestListener != null && !isThumbCopy)) {, +                    public void onImageReady(ModelType model, Y target, boolean isFromMemoryCache,, +                            boolean isAnyImageSet) {, +                        if (isAnyImageSet) {, +                            return;, +                        }, +, +                        if (animation != null && !isFromMemoryCache) {, +            if (sizeMultiplier != null && !isThumbCopy) {, +                builder.setSizeMultiplier(sizeMultiplier);, +            }, +]