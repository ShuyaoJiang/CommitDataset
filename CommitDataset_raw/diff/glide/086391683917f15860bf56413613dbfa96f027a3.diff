[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private void notifyComplete(Resource<R> resource, DataSource dataSource) {, +    callback.onResourceReady(resource, dataSource);, +      notifyEncodeAndRelease(resource, currentDataSource);, +  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, +    notifyComplete(result, dataSource);, +    void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private void notifyComplete(Resource<R> resource, DataSource dataSource) {, +    callback.onResourceReady(resource, dataSource);, +      notifyEncodeAndRelease(resource, currentDataSource);, +  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, +    notifyComplete(result, dataSource);, +    void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.DataSource;, +      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);, +      cb.onResourceReady(active, DataSource.MEMORY_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private void notifyComplete(Resource<R> resource, DataSource dataSource) {, +    callback.onResourceReady(resource, dataSource);, +      notifyEncodeAndRelease(resource, currentDataSource);, +  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, +    notifyComplete(result, dataSource);, +    void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.DataSource;, +      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);, +      cb.onResourceReady(active, DataSource.MEMORY_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import com.bumptech.glide.load.DataSource;, +  private DataSource dataSource;, +      cb.onResourceReady(engineResource, dataSource);, +        cb.onResourceReady(engineResource, dataSource);, +    dataSource = null;, +  public void onResourceReady(Resource<R> resource, DataSource dataSource) {, +    this.dataSource = dataSource;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private void notifyComplete(Resource<R> resource, DataSource dataSource) {, +    callback.onResourceReady(resource, dataSource);, +      notifyEncodeAndRelease(resource, currentDataSource);, +  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, +    notifyComplete(result, dataSource);, +    void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.DataSource;, +      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);, +      cb.onResourceReady(active, DataSource.MEMORY_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import com.bumptech.glide.load.DataSource;, +  private DataSource dataSource;, +      cb.onResourceReady(engineResource, dataSource);, +        cb.onResourceReady(engineResource, dataSource);, +    dataSource = null;, +  public void onResourceReady(Resource<R> resource, DataSource dataSource) {, +    this.dataSource = dataSource;, +++ b/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java, +import com.bumptech.glide.load.DataSource;, +  void onResourceReady(Resource<?> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private void notifyComplete(Resource<R> resource, DataSource dataSource) {, +    callback.onResourceReady(resource, dataSource);, +      notifyEncodeAndRelease(resource, currentDataSource);, +  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {, +    notifyComplete(result, dataSource);, +    void onResourceReady(Resource<R> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.DataSource;, +      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);, +      cb.onResourceReady(active, DataSource.MEMORY_CACHE);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import com.bumptech.glide.load.DataSource;, +  private DataSource dataSource;, +      cb.onResourceReady(engineResource, dataSource);, +        cb.onResourceReady(engineResource, dataSource);, +    dataSource = null;, +  public void onResourceReady(Resource<R> resource, DataSource dataSource) {, +    this.dataSource = dataSource;, +++ b/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java, +import com.bumptech.glide.load.DataSource;, +  void onResourceReady(Resource<?> resource, DataSource dataSource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import com.bumptech.glide.load.DataSource;, +  private int width;, +  private int height;, +    width = -1;, +    height = -1;, +    this.width = Math.round(sizeMultiplier * width);, +    this.height = Math.round(sizeMultiplier * height);, +        this.width,, +        this.height,, +  public void onResourceReady(Resource<?> resource, DataSource dataSource) {, +    onResourceReady((Resource<R>) resource, (R) received, dataSource);, +   * Internal {@link #onResourceReady(Resource, DataSource)} where arguments are known to be safe., +  private void onResourceReady(Resource<R> resource, R result, DataSource dataSource) {, +    if (Log.isLoggable(TAG, Log.VERBOSE)) {, +      Log.v(TAG, "Finished loading " + result.getClass().getSimpleName() + " from " + dataSource, +          + " for " + model + " with size [" + width + "x" + height + "] in ", +          + LogTime.getElapsedMillis(startTime) + " ms");, +    }]