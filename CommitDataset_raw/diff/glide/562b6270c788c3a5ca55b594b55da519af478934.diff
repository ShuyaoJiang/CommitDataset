[+++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        EngineJobListener listener = mock(EngineJobListener.class);, +        ResourceCallback<Object> cb = mock(ResourceCallback.class);, +        DefaultResourceRunnerFactory factory = new DefaultResourceRunnerFactory(resourceCache, diskCache,, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, encoder, metadata, listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        EngineJobListener listener = mock(EngineJobListener.class);, +        ResourceCallback<Object> cb = mock(ResourceCallback.class);, +        DefaultResourceRunnerFactory factory = new DefaultResourceRunnerFactory(resourceCache, diskCache,, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, encoder, metadata, listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, +    private EngineJobHarness harness;, +, +    @Before, +    public void setUp() {, +        harness = new EngineJobHarness();, +    }, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.cb).onResourceReady(eq(harness.resource));, +    public void testListenerNotifiedJobCompleteOnOnResourceReady() {, +        harness.job.onResourceReady(harness.resource);, +, +        verify(harness.listener).onEngineJobComplete(eq(ID));, +    public void testResourceAddedToCacheOnResourceReady() {, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.resourceCache).put(eq(ID), eq(harness.resource));, +        harness.job.onException(exception);, +        verify(harness.cb).onException(eq(exception));, +    public void testListenerNotifiedJobCompleteOnException() {, +        harness.job.onException(new Exception("test"));, +        verify(harness.listener).onEngineJobComplete(eq(ID));, +    public void testListenerNotifiedOfCancelOnCancel() {, +        harness.job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(ID));, +        harness.job.cancel();, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.cb, never()).onResourceReady(eq(harness.resource));, +        harness.job.cancel();, +        harness.job.onException(new Exception("test"));, +        verify(harness.cb, never()).onException(any(Exception.class));, +    public void testRemovingAllCallbacksCancelsRunner() {, +        harness.job.removeCallback(harness.cb);, +, +        assertTrue(harness.job.isCancelled());, +    }, +, +    @Test, +    public void removingSomeCallbacksDoesNotCancelRunner() {, +        harness.job.addCallback(mock(ResourceCallback.class));, +        harness.job.removeCallback(harness.cb);, +, +        assertFalse(harness.job.isCancelled());, +    }, +, +    @SuppressWarnings("unchecked"), +    private static class EngineJobHarness {, +        ResourceCache resourceCache = mock(ResourceCache.class);, +        Handler mainHandler = new Handler();, +        ResourceCallback<Object> cb = mock(ResourceCallback.class);, +        Resource<Object> resource = mock(Resource.class);, +        EngineJobListener listener = mock(EngineJobListener.class);, +        EngineJob <Object> job = new EngineJob<Object>(ID, resourceCache, mainHandler, listener, cb);, +        public EngineJobHarness() {, +            job.addCallback(cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        EngineJobListener listener = mock(EngineJobListener.class);, +        ResourceCallback<Object> cb = mock(ResourceCallback.class);, +        DefaultResourceRunnerFactory factory = new DefaultResourceRunnerFactory(resourceCache, diskCache,, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, encoder, metadata, listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +import org.junit.Before;, +import static org.junit.Assert.assertTrue;, +    private EngineJobHarness harness;, +, +    @Before, +    public void setUp() {, +        harness = new EngineJobHarness();, +    }, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.cb).onResourceReady(eq(harness.resource));, +    public void testListenerNotifiedJobCompleteOnOnResourceReady() {, +        harness.job.onResourceReady(harness.resource);, +, +        verify(harness.listener).onEngineJobComplete(eq(ID));, +    public void testResourceAddedToCacheOnResourceReady() {, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.resourceCache).put(eq(ID), eq(harness.resource));, +        harness.job.onException(exception);, +        verify(harness.cb).onException(eq(exception));, +    public void testListenerNotifiedJobCompleteOnException() {, +        harness.job.onException(new Exception("test"));, +        verify(harness.listener).onEngineJobComplete(eq(ID));, +    public void testListenerNotifiedOfCancelOnCancel() {, +        harness.job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(ID));, +        harness.job.cancel();, +        harness.job.onResourceReady(harness.resource);, +        verify(harness.cb, never()).onResourceReady(eq(harness.resource));]