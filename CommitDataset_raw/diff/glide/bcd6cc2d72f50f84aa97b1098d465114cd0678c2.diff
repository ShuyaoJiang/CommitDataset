[+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +      try {, +      } catch (SecurityException e) {, +        // See #1405., +        if (Log.isLoggable(TAG, Log.WARN)) {, +          Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);, +        }, +        // Default to true;, +        isConnected = true;, +      }, +      // See #1405, +      isConnected = isConnected(context);, +++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +      try {, +      } catch (SecurityException e) {, +        // See #1405., +        if (Log.isLoggable(TAG, Log.WARN)) {, +          Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);, +        }, +        // Default to true;, +        isConnected = true;, +      }, +      // See #1405, +      isConnected = isConnected(context);, +++ b/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java, +import com.bumptech.glide.manager.DefaultConnectivityMonitorTest.PermissionConnectivityManager;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.robolectric.annotation.Implementation;, +import org.robolectric.annotation.Implements;, +import org.robolectric.shadow.api.Shadow;, +@Config(manifest = Config.NONE, sdk = 18, shadows = PermissionConnectivityManager.class), +  @Mock private ConnectivityMonitor.ConnectivityListener listener;, +  private ConnectivityHarness harness;, +, +    MockitoAnnotations.initMocks(this);, +    harness = new ConnectivityHarness();, +  @Test, +  public void register_withMissingPermission_doesNotThrow() {, +    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;, +, +    monitor.onStart();, +  }, +, +  @Test, +  public void register_withMissingPermission_doesNotRegisterReceiver() {, +    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;, +, +    monitor.onStart();, +, +    assertThat(getConnectivityReceivers()).isEmpty();, +  }, +, +  @Test, +  public void onReceive_withMissingPermission_doesNotThrow() {, +    monitor.onStart();, +    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;, +    harness.broadcast();, +  }, +, +  @Test, +  public void onReceive_withMissingPermission_previouslyDisconnected_notifiesListenersConnected() {, +    harness.disconnect();, +    monitor.onStart();, +    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;, +    harness.broadcast();, +, +    verify(listener).onConnectivityChanged(true);, +  }, +, +  @Test, +  public void onReceive_withMissingPermission_previouslyConnected_doesNotNotifyListeners() {, +    harness.connect();, +    monitor.onStart();, +    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;, +    harness.broadcast();, +, +    verify(listener, never()).onConnectivityChanged(anyBoolean());, +  }, +, +    private final PermissionConnectivityManager shadowConnectivityManager;, +      shadowConnectivityManager = Shadow.extract(connectivityManager);, +    void disconnect() {, +    void connect() {, +    void broadcast() {, +, +  @Implements(ConnectivityManager.class), +  public static final class PermissionConnectivityManager extends ShadowConnectivityManager {, +    private boolean isNetworkPermissionGranted = true;, +, +    @Implementation, +    public NetworkInfo getActiveNetworkInfo() {, +      if (!isNetworkPermissionGranted) {, +        throw new SecurityException();, +      }, +      return super.getActiveNetworkInfo();, +    }, +  }]