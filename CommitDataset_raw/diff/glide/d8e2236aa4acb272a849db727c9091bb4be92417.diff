[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.graphics.BitmapFactory;, +, +        /**, +         * Options for loading bitmaps. Some of these fields will be overwritten, including inSampleSize, inBitmap,, +         * and maybe inMutable depending on how recycleBitmaps is set., +         *, +         * Config and dither for example can be set, +         */, +        public BitmapFactory.Options bitmapDecodeOptions = ImageResizer.getDefaultOptions();, +            options.bitmapDecodeOptions.inMutable = false;, +        this.resizer = new ImageResizer(bitmapCache, options.bitmapDecodeOptions);, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.graphics.BitmapFactory;, +, +        /**, +         * Options for loading bitmaps. Some of these fields will be overwritten, including inSampleSize, inBitmap,, +         * and maybe inMutable depending on how recycleBitmaps is set., +         *, +         * Config and dither for example can be set, +         */, +        public BitmapFactory.Options bitmapDecodeOptions = ImageResizer.getDefaultOptions();, +            options.bitmapDecodeOptions.inMutable = false;, +        this.resizer = new ImageResizer(bitmapCache, options.bitmapDecodeOptions);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +    private SizedBitmapCache bitmapCache = null;, +    private final BitmapFactory.Options defaultOptions;, +, +    public static BitmapFactory.Options getDefaultOptions() {, +       BitmapFactory.Options decodeBitmapOptions = new BitmapFactory.Options();, +       decodeBitmapOptions.inDither = false;, +       decodeBitmapOptions.inScaled = false;, +       decodeBitmapOptions.inPreferredConfig = Bitmap.Config.RGB_565;, +       decodeBitmapOptions.inSampleSize = 1;, +       if (Build.VERSION.SDK_INT >= 11)  {, +           decodeBitmapOptions.inMutable = true;, +       }, +       return decodeBitmapOptions;, +    }, +        this(null, null);, +    }, +, +    public ImageResizer(SizedBitmapCache bitmapCache) {, +        this(bitmapCache, null);, +    }, +, +    public ImageResizer(BitmapFactory.Options options) {, +        this(null, options);, +    public ImageResizer(SizedBitmapCache bitmapCache, BitmapFactory.Options defaultOptions){, +        if (defaultOptions == null) {, +            this.defaultOptions = getDefaultOptions();, +        } else {, +            this.defaultOptions = defaultOptions;, +        }, +    private BitmapFactory.Options getDefaultOptions(Bitmap recycle) {, +        BitmapFactory.Options result = new BitmapFactory.Options();, +        copyOptions(defaultOptions, result);, +        result.inBitmap = recycle;, +        return result;, +    }, +, +    private static void copyOptions(BitmapFactory.Options from, BitmapFactory.Options to) {, +        to.inDensity = from.inDensity;, +        to.inDither = from.inDither;, +        to.inInputShareable = from.inInputShareable;, +        to.inMutable = from.inMutable;, +        to.inPreferQualityOverSpeed = from.inPreferQualityOverSpeed;, +        to.inPreferredConfig = from.inPreferredConfig;, +        to.inPurgeable = from.inPurgeable;, +        to.inSampleSize = from.inSampleSize;, +        to.inScaled = from.inScaled;, +        to.inScreenDensity = from.inScreenDensity;, +        to.inTargetDensity = from.inTargetDensity;, +, +    }, +]