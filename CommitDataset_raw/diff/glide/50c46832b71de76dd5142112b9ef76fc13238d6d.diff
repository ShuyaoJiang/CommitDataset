[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +        this.diskCacheStrategy = other.diskCacheStrategy;, +        this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +        this.diskCacheStrategy = other.diskCacheStrategy;, +        this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, +        register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +        this.diskCacheStrategy = other.diskCacheStrategy;, +        this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, +        register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.signature.ApplicationVersionSignature;, +import com.bumptech.glide.signature.MediaStoreSignature;, +import com.bumptech.glide.signature.StringSignature;, +        Key signature = new MediaStoreSignature(mimeType, dateModified, orientation);, +        return (DrawableTypeRequest<Uri>) loadFromMediaStore(uri), +                .signature(signature);, +     * @see com.bumptech.glide.signature.ApplicationVersionSignature, +     * @see com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key), +        return (DrawableTypeRequest<Integer>) loadGeneric(resourceId), +                .signature(ApplicationVersionSignature.obtain(context));, +     * @deprecated Use {@link #load(byte[])} along with, +     * {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}} instead., +     *, +     * <p>, +     *     Note - This method does not cache results in either the disk cache or the memory cache., +     * </p>, +     *, +    @Deprecated, +        return (DrawableTypeRequest<byte[]>) loadGeneric(model), +                .signature(new StringSignature(id)), +                .diskCacheStrategy(DiskCacheStrategy.NONE), +                .skipMemoryCache(true /*skipMemoryCache*/);, +        return (DrawableTypeRequest<byte[]>) loadGeneric(model), +                .signature(new StringSignature(UUID.randomUUID().toString())), +                .diskCacheStrategy(DiskCacheStrategy.NONE), +                .skipMemoryCache(true /*skipMemoryCache*/);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +        this.diskCacheStrategy = other.diskCacheStrategy;, +        this.isCacheable = other.isCacheable;, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;, +        register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import com.bumptech.glide.signature.ApplicationVersionSignature;, +import com.bumptech.glide.signature.MediaStoreSignature;, +import com.bumptech.glide.signature.StringSignature;, +        Key signature = new MediaStoreSignature(mimeType, dateModified, orientation);, +        return (DrawableTypeRequest<Uri>) loadFromMediaStore(uri), +                .signature(signature);, +     * @see com.bumptech.glide.signature.ApplicationVersionSignature, +     * @see com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key), +        return (DrawableTypeRequest<Integer>) loadGeneric(resourceId), +                .signature(ApplicationVersionSignature.obtain(context));, +     * @deprecated Use {@link #load(byte[])} along with, +     * {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}} instead., +     *, +     * <p>, +     *     Note - This method does not cache results in either the disk cache or the memory cache., +     * </p>, +     *, +    @Deprecated, +        return (DrawableTypeRequest<byte[]>) loadGeneric(model), +                .signature(new StringSignature(id)), +                .diskCacheStrategy(DiskCacheStrategy.NONE), +                .skipMemoryCache(true /*skipMemoryCache*/);, +        return (DrawableTypeRequest<byte[]>) loadGeneric(model), +                .signature(new StringSignature(UUID.randomUUID().toString())), +                .diskCacheStrategy(DiskCacheStrategy.NONE), +                .skipMemoryCache(true /*skipMemoryCache*/);, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/StreamByteArrayLoader.java, +import android.content.Context;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +    private final String id;, +        this("");, +    /**, +     * @deprecated Use {@link com.bumptech.glide.GenericRequestBuilder#signature(com.bumptech.glide.load.Key)}, +     * and the empty constructor instead., +     */, +    @Deprecated, +, +    /**, +     * Factory for {@link com.bumptech.glide.load.model.stream.StreamByteArrayLoader}., +     */, +    public static class Factory implements ModelLoaderFactory<byte[], InputStream> {, +, +        @Override, +        public ModelLoader<byte[], InputStream> build(Context context, GenericLoaderFactory factories) {, +            return new StreamByteArrayLoader();]