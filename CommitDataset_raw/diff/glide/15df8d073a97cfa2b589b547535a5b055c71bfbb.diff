[+++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +    private final Context context;, +    private final ModelLoader<ModelType, ImageResourceType> imageLoader;, +    private final ModelLoader<ModelType, VideoResourceType> videoLoader;, +    public GenericRequestBuilder(Context context, ModelType model,, +            ModelLoader<ModelType, ImageResourceType> imageLoader,, +            ModelLoader<ModelType, VideoResourceType> videoLoader) {, +        if (imageLoader == null && videoLoader == null) {, +            throw new NullPointerException("No ModelLoaders given or registered for model class=", +                    + model.getClass());, +        this.imageLoader = imageLoader;, +        this.videoLoader = videoLoader;, +                                imageLoader != null && imageDecoder != null ?, +                                        imageLoader, imageDecoder) : null,, +                                videoLoader != null && videoDecoder != null ?, +                                        videoLoader, videoDecoder) : null,, +                                getFinalTransformation())), +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +    private final Context context;, +    private final ModelLoader<ModelType, ImageResourceType> imageLoader;, +    private final ModelLoader<ModelType, VideoResourceType> videoLoader;, +    public GenericRequestBuilder(Context context, ModelType model,, +            ModelLoader<ModelType, ImageResourceType> imageLoader,, +            ModelLoader<ModelType, VideoResourceType> videoLoader) {, +        if (imageLoader == null && videoLoader == null) {, +            throw new NullPointerException("No ModelLoaders given or registered for model class=", +                    + model.getClass());, +        this.imageLoader = imageLoader;, +        this.videoLoader = videoLoader;, +                                imageLoader != null && imageDecoder != null ?, +                                        imageLoader, imageDecoder) : null,, +                                videoLoader != null && videoDecoder != null ?, +                                        videoLoader, videoDecoder) : null,, +                                getFinalTransformation())), +++ b/library/src/com/bumptech/glide/Glide.java, +     * Build a {@link ModelLoader} for the given model class using registered {@link ModelLoaderFactory}s., +     * @see  #buildModelLoader(Object, Class, Context), +     * @see  #buildStreamModelLoader(Class, Context), +     * @see  #buildFileDescriptorModelLoader(Class, Context), +     *, +     * @param modelClass The class to get a {@link ModelLoader} for., +     * @param resourceClass The resource class to get a {@link ModelLoader} for., +     * @param context Any context., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     * @return A new {@link ModelLoader} for the given model class., +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass, context);, +     * A convenience method to build a {@link ModelLoader} for a given model object using registered, +     * {@link ModelLoaderFactory}s., +     *, +     * @see #buildModelLoader(Class, Class, Context), +     *, +     * @param model A non null model object whose class we will get a {@link ModelLoader} for., +     * @param resourceClass The resource class to get a {@link ModelLoader} for., +     * @param context Any context., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     * @return A new {@link ModelLoader} for the given model and resource classes., +     * @throws NullPointerException if model is null., +     */, +    @SuppressWarnings("unchecked"), +    public static <T, Y> ModelLoader<T, Y> buildModelLoader(T model, Class<Y> resourceClass, Context context) {, +        if (model == null) {, +            throw new NullPointerException("You must pass in a non-null model (URL, file path, etc).");, +        }, +        return buildModelLoader((Class<T>) model.getClass(), resourceClass, context);, +    }, +, +    /**, +     * A method to build a {@link ModelLoader} for the given model that produces {@link InputStream}s using a registered, +     * factory., +     * A method to build a {@link ModelLoader} for the given model that produces {@link InputStream}s using a registered, +     * factory., +     *, +     * @see #buildModelLoader(Object, Class, Context), +     */, +    public static <T> ModelLoader<T, InputStream> buildStreamModelLoader(T model, Context context) {, +        return buildModelLoader(model, InputStream.class, context);, +    }, +, +    /**, +     * A method to build a {@link ModelLoader} for the given model class that produces, +     * A method to build a {@link ModelLoader} for the given model class that produces, +     * {@link ParcelFileDescriptor}s using a registered factory., +     *, +     * @see #buildModelLoader(Object, Class, android.content.Context), +     */, +    public static <T> ModelLoader<T, ParcelFileDescriptor> buildFileDescriptorModelLoader(T model, Context context) {, +        return buildModelLoader(model, ParcelFileDescriptor.class, context);, +    }, +, +    /**, +    private GenericLoaderFactory getLoaderFactory() {, +            return new ImageModelRequest<T>(context, modelLoader);, +            return new ImageModelRequest<byte[]>(context, modelLoader);, +            return new VideoModelRequest<T>(context, modelLoader);, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model, +         * into., +         * Use the {@link ModelLoaderFactory} currently registered for the given model type to load the image, +         * represented by the given model.]