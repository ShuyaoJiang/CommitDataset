[+++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, +    return "DataFetcherSet{modelLoaders=" +, +        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, +    return "DataFetcherSet{modelLoaders=" +, +        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private volatile DataFetcher<?> fetcher;, +  public void cancel() {, +    DataFetcher<?> local = fetcher;, +    if (local != null) {, +      local.cancel();, +    }, +  }, +, +  @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, +    return "DataFetcherSet{modelLoaders=" +, +        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private volatile DataFetcher<?> fetcher;, +  public void cancel() {, +    DataFetcher<?> local = fetcher;, +    if (local != null) {, +      local.cancel();, +    }, +  }, +, +  @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,, +        DataSource dataSource);, +, +  /**, +   * Attempts to cancel the currently running fetcher., +   *, +   * <p> This will be called on the main thread and should complete quickly. </p>, +   */, +  void cancel();, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, +    return "DataFetcherSet{modelLoaders=" +, +        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private volatile DataFetcher<?> fetcher;, +  public void cancel() {, +    DataFetcher<?> local = fetcher;, +    if (local != null) {, +      local.cancel();, +    }, +  }, +, +  @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,, +        DataSource dataSource);, +, +  /**, +   * Attempts to cancel the currently running fetcher., +   *, +   * <p> This will be called on the main thread and should complete quickly. </p>, +   */, +  void cancel();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private volatile DataFetcherGenerator generator;, +    DataFetcherGenerator local = generator;, +    if (local != null) {, +      local.cancel();, +    }, +  public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,, +++ b/library/src/main/java/com/bumptech/glide/load/data/LoadDataSet.java, +    return "DataFetcherSet{modelLoaders=" +, +        Arrays.toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + "}";, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  private volatile DataFetcher<?> fetcher;, +  public void cancel() {, +    DataFetcher<?> local = fetcher;, +    if (local != null) {, +      local.cancel();, +    }, +  }, +, +  @Override, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,, +        DataSource dataSource);, +, +  /**, +   * Attempts to cancel the currently running fetcher., +   *, +   * <p> This will be called on the main thread and should complete quickly. </p>, +   */, +  void cancel();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private volatile DataFetcherGenerator generator;, +    DataFetcherGenerator local = generator;, +    if (local != null) {, +      local.cancel();, +    }, +  public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java]