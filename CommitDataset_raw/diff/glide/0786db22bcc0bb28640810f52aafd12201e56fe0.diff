[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, +    private final DataRewinderRegistry dataRewinderRegistry;, +        dataRewinderRegistry = new DataRewinderRegistry();, +        dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +        return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, +                dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, +    private final DataRewinderRegistry dataRewinderRegistry;, +        dataRewinderRegistry = new DataRewinderRegistry();, +        dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +        return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, +                dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Synchronously fetch data from which a resource can be decoded. This will always be called on, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, +    private final DataRewinderRegistry dataRewinderRegistry;, +        dataRewinderRegistry = new DataRewinderRegistry();, +        dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +        return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, +                dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Synchronously fetch data from which a resource can be decoded. This will always be called on, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java, +package com.bumptech.glide.load.data;, +, +import java.io.IOException;, +, +public interface DataRewinder<T> {, +, +    interface Factory<T> {, +        DataRewinder<T> build(T data);, +        Class getDataClass();, +    }, +, +    T rewindAndGet() throws IOException;, +, +    void cleanup();, +}, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.data.DataRewinderRegistry;, +import com.bumptech.glide.load.data.InputStreamRewinder;, +    private final DataRewinderRegistry dataRewinderRegistry;, +        dataRewinderRegistry = new DataRewinderRegistry();, +        dataRewinderRegistry.register(new InputStreamRewinder.Factory());, +, +        return new RequestContext(loaderRegistry, encoderRegistry, decoderRegistry, resourceEncoderRegistry,, +                dataRewinderRegistry);, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Synchronously fetch data from which a resource can be decoded. This will always be called on, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java, +package com.bumptech.glide.load.data;, +, +import java.io.IOException;, +, +public interface DataRewinder<T> {, +, +    interface Factory<T> {, +        DataRewinder<T> build(T data);, +        Class getDataClass();, +    }, +, +    T rewindAndGet() throws IOException;, +, +    void cleanup();, +}, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java, +package com.bumptech.glide.load.data;, +, +import java.util.HashMap;, +import java.util.Map;, +, +public class DataRewinderRegistry {, +    private final Map<Class, DataRewinder.Factory> rewinders = new HashMap<Class, DataRewinder.Factory>();, +    private static final DataRewinder.Factory DEFAULT_FACTORY = new DataRewinder.Factory<Object>() {, +        @Override, +        public DataRewinder<Object> build(Object data) {, +            return new DefaultRewinder(data);, +        }, +, +        @Override, +        public Class getDataClass() {, +            throw new UnsupportedOperationException("Not implemented");, +        }, +    };, +, +    public synchronized void register(DataRewinder.Factory factory) {, +        rewinders.put(factory.getDataClass(), factory);, +    }, +, +    @SuppressWarnings("unchecked"), +    public synchronized <T> DataRewinder<T> build(T data) {]