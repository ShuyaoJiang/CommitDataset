[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}., +  @Deprecated, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}., +  @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}., +  @Deprecated, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}., +  @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;, +import static com.bumptech.glide.request.RequestOptions.skipMemoryCacheOf;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import java.io.File;, +, +  private static final RequestOptions DOWNLOAD_ONLY_OPTIONS =, +      diskCacheStrategyOf(DiskCacheStrategy.DATA).priority(Priority.LOW), +          .skipMemoryCache(true);, +, +   * Attempts always load the resource into the cache and return the {@link File} containing the, +   * cached source data., +   *, +   * <p>This method is designed to work for remote data that is or will be cached using {@link, +   * com.bumptech.glide.load.engine.DiskCacheStrategy#DATA}. As a result, specifying a, +   * {@link com.bumptech.glide.load.engine.DiskCacheStrategy} on this request is generally not, +   * recommended., +   *, +   * @return A new request builder for downloading content to cache and returning the cache File., +   */, +  public RequestBuilder<File> downloadOnly() {, +    return as(File.class).apply(DOWNLOAD_ONLY_OPTIONS);, +  }, +, +  /**, +   * Attempts to always load a {@link File} containing the resource, either using a file path, +   * obtained from the media store (for local images/videos), or using Glide's disk cache, +   * (for remote images/videos)., +   *, +   * <p>For remote content, prefer {@link #downloadOnly()}., +   *, +   * @return A new request builder for obtaining File paths to content., +   */, +  public RequestBuilder<File> asFile() {, +    return as(File.class).apply(skipMemoryCacheOf(true));, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}., +  @Deprecated, +   *, +   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}., +  @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;, +import static com.bumptech.glide.request.RequestOptions.skipMemoryCacheOf;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import java.io.File;, +, +  private static final RequestOptions DOWNLOAD_ONLY_OPTIONS =, +      diskCacheStrategyOf(DiskCacheStrategy.DATA).priority(Priority.LOW), +          .skipMemoryCache(true);, +, +   * Attempts always load the resource into the cache and return the {@link File} containing the, +   * cached source data., +   *, +   * <p>This method is designed to work for remote data that is or will be cached using {@link, +   * com.bumptech.glide.load.engine.DiskCacheStrategy#DATA}. As a result, specifying a, +   * {@link com.bumptech.glide.load.engine.DiskCacheStrategy} on this request is generally not, +   * recommended., +   *, +   * @return A new request builder for downloading content to cache and returning the cache File., +   */, +  public RequestBuilder<File> downloadOnly() {, +    return as(File.class).apply(DOWNLOAD_ONLY_OPTIONS);, +  }, +, +  /**, +   * Attempts to always load a {@link File} containing the resource, either using a file path, +   * obtained from the media store (for local images/videos), or using Glide's disk cache, +   * (for remote images/videos)., +   *, +   * <p>For remote content, prefer {@link #downloadOnly()}., +   *, +   * @return A new request builder for obtaining File paths to content., +   */, +  public RequestBuilder<File> asFile() {, +    return as(File.class).apply(skipMemoryCacheOf(true));, +  }, +, +  /**, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, +            .downloadOnly(), +            .into(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);]