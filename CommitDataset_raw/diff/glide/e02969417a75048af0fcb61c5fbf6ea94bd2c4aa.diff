[+++ b/.gitignore, +*.ipr, +*.iws, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, +          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, +          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, +          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468), +    System.gc();, +  public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() {, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, +          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468), +    System.gc();, +  public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() {, +++ b/library/build.gradle, +, +    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {, +       errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}", +    }, +++ b/.gitignore, +*.ipr, +*.iws, +++ b/build.gradle, +            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}", +++ b/checkstyle.xml, +          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />, +++ b/gradle.properties, +PMD_VERSION=5.8.1, +ERROR_PRONE_VERSION=2.1.4-SNAPSHOT, +ERROR_PRONE_PLUGIN_VERSION=0.0.13, +++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java, +    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468), +    System.gc();, +  public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() {, +++ b/library/build.gradle, +, +    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {, +       errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}", +    }, +++ b/library/pmd-ruleset.xml, +    <description>Check for flaws in Glide's codebase.</description>, +    <rule ref="rulesets/java/strings.xml"/>, +    <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">, +        <properties>, +            <property name="skipAnnotations" value="true" />, +        </properties>, +    <rule ref="rulesets/java/design.xml/AccessorMethodGeneration", +          message="Avoid autogenerated methods to access private fields and methods of inner / outer classes., +                   Use @Synthetic to flag members made more visible than necessary to prevent accessors.">, +        <properties>, +            <!-- Ignore references to `private static final * * = <literal>`, +                 Suppress via XPath: current node (access that generates the accessor) is ., +                 Check if there exists a FieldDeclaration (private static final), +                 which has a VariableInitializer with a Literal, +                 and the name (@Image) of the declaration is the same as the accessed member., +                 TODO calculated constants are false positive https://github.com/pmd/pmd/issues/808, +            -->, +            <property name="violationSuppressXPath" value="]