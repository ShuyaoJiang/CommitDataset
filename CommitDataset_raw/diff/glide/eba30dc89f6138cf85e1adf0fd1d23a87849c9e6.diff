[+++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +import android.provider.MediaStore;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.model.stream.MediaStoreStreamLoader;, +    /**, +     * Use the given generic model loader to load the given generic data class., +     * <p>, +     *     Note that in most cases you will also need to specify an {@link ResourceDecoder} and an, +     *     {@link ResourceEncoder} for the load to complete successfully., +     * </p>, +     * @param modelLoader The {@link ModelLoader} class to use to load the model., +     * @param dataClass The type of data the {@link ModelLoader} will load., +     * @param <A> The type of the model to be loaded., +     * @param <T> The type of the data to be loaded from the mode., +     * @return A {@link GenericModelRequest} to set options for the load and ultimately the target to load the model, +     * into., +     */, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the model, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the model, +     * Use {@link MediaStore.Images.Thumbnails} and {@link MediaStore.Video.Thumbnails} to retrieve pre-generated, +     * thumbnails for the given uri. Falls back to the registered {@link ModelLoaderFactory} registered for {@link Uri}s, +     * if the given uri is not a media store uri or if no pre-generated thumbnail exists for the given uri. In addition,, +     * mixes the given mimeType, dateModified, and orientation into the cache key to detect and invalidate thumbnails, +     * if content is changed locally., +     *, +     * @param uri The uri representing the media., +     * @param mimeType The mime type of the media store media. Ok to default to empty string "". See, +     *      {@link MediaStore.Images.ImageColumns#MIME_TYPE} or {@link MediaStore.Video.VideoColumns#MIME_TYPE}., +     * @param dateModified The date modified time of the media store media. Ok to default to 0. See, +     *      {@link MediaStore.Images.ImageColumns#DATE_MODIFIED} or {@link MediaStore.Video.VideoColumns#DATE_MODIFIED}., +     * @param orientation The orientation of the media store media. Ok to default to 0. See, +     *      {@link MediaStore.Images.ImageColumns#ORIENTATION}., +     * @return A new {@link DrawableRequestBuilder} to set options for the load and ultimately the target to load the, +     *      uri into., +     */, +    public DrawableTypeRequest<Uri> loadFromMediaStore(Uri uri, String mimeType, long dateModified, int orientation) {, +        ModelLoader<Uri, InputStream> genericStreamLoader = Glide.buildStreamModelLoader(uri, context);, +        ModelLoader<Uri, InputStream> mediaStoreLoader = new MediaStoreStreamLoader(context, genericStreamLoader,, +                mimeType, dateModified, orientation);, +        ModelLoader<Uri, ParcelFileDescriptor> fileDescriptorModelLoader = Glide.buildFileDescriptorModelLoader(uri,, +                context);, +        return new DrawableTypeRequest<Uri>(uri, mediaStoreLoader, fileDescriptorModelLoader, context, glide,, +                requestManager);, +    }, +, +    /**, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the model, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the model, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the image, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the model, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the image, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the image, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the image, +     * @return A {@link DrawableTypeRequest} to set options for the load and ultimately the target to load the image, +, +    /**, +     * A helper class for building requests with custom {@link ModelLoader}s that translate models to, +     * {@link InputStream} resources for loading images., +     *, +     * @param <T> The type of the model., +     */, +    public static class GenericModelRequest<A, T> {, +        private final Context context;, +        private final Glide glide;, +        private final ModelLoader<A, T> modelLoader;, +        private final Class<T> dataClass;, +        private RequestManager requestManager;, +, +        private GenericModelRequest(Context context, Glide glide, ModelLoader<A, T> modelLoader, Class<T> dataClass,, +                RequestManager requestManager) {, +            this.context = context;, +            this.glide = glide;, +            this.modelLoader = modelLoader;, +            this.dataClass = dataClass;, +            this.requestManager = requestManager;, +        }, +, +        public GenericTypeRequest<A, T> load(A model) {, +            return new GenericTypeRequest<A, T>(context, glide, model, modelLoader, dataClass, requestManager);, +        }, +, +        public static class GenericTypeRequest<A, T> {, +            private final Context context;, +            private final Glide glide;, +            private final A model;, +            private final ModelLoader<A, T> modelLoader;, +            private final Class<T> dataClass;, +            private RequestManager requestManager;, +, +            private GenericTypeRequest(Context context, Glide glide, A model, ModelLoader<A, T> modelLoader,, +                    Class<T> dataClass, RequestManager requestManager) {, +                this.context = context;, +                this.glide = glide;, +                this.model = model;, +                this.modelLoader = modelLoader;, +                this.dataClass = dataClass;, +                this.requestManager = requestManager;, +            }, +]