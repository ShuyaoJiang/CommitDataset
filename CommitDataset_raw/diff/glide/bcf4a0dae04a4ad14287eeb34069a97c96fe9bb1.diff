[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.bytes.BytesResource;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.data.DataFetcher;, +import static junit.framework.Assert.fail;, +        doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, +                    fail("Failed to get response from Volley in time");, +    @SuppressWarnings("unchecked"), +        Target<File> target = mock(Target.class);, +        doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, +, +        DataFetcher<File> dataFetcher = mock(DataFetcher.class);, +        when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, +                .thenReturn(dataFetcher);, +        DataFetcher<Z> failFetcher = mock(DataFetcher.class);, +        when(failFetcher.loadData(any(Priority.class))).thenThrow(new IOException("test"));, +        DataFetcher<InputStream> fetcher = mock(DataFetcher.class);, +            when(fetcher.loadData(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +    private static class CallCallback implements Answer<Void> {, +        private int width;, +        private int height;, +, +        public CallCallback() {, +            this(100, 100);, +        }, +, +        public CallCallback(int width, int height) {, +            this.width = width;, +            this.height = height;, +        }, +, +        @Override, +        public Void answer(InvocationOnMock invocation) throws Throwable {, +            Target.SizeReadyCallback cb = (Target.SizeReadyCallback) invocation.getArguments()[0];, +            cb.onSizeReady(width, height);, +            return null;, +        }, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.bytes.BytesResource;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.data.DataFetcher;, +import static junit.framework.Assert.fail;, +        doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, +                    fail("Failed to get response from Volley in time");, +    @SuppressWarnings("unchecked"), +        Target<File> target = mock(Target.class);, +        doAnswer(new CallCallback()).when(target).getSize(any(Target.SizeReadyCallback.class));, +, +        DataFetcher<File> dataFetcher = mock(DataFetcher.class);, +        when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, +                .thenReturn(dataFetcher);, +        DataFetcher<Z> failFetcher = mock(DataFetcher.class);, +        when(failFetcher.loadData(any(Priority.class))).thenThrow(new IOException("test"));, +        DataFetcher<InputStream> fetcher = mock(DataFetcher.class);, +            when(fetcher.loadData(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +    private static class CallCallback implements Answer<Void> {, +        private int width;, +        private int height;, +, +        public CallCallback() {, +            this(100, 100);, +        }, +, +        public CallCallback(int width, int height) {, +            this.width = width;, +            this.height = height;, +        }, +, +        @Override, +        public Void answer(InvocationOnMock invocation) throws Throwable {, +            Target.SizeReadyCallback cb = (Target.SizeReadyCallback) invocation.getArguments()[0];, +            cb.onSizeReady(width, height);, +            return null;, +        }, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/load/data/LocalUriFetcherTest.java, +package com.bumptech.glide.load.data;, +, +import android.content.ContentResolver;, +import android.content.Context;, +import android.net.Uri;, +import com.bumptech.glide.Priority;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import java.io.Closeable;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +, +import static org.mockito.Mockito.doThrow;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +]