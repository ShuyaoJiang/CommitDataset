[+++ b/src/com/bumptech/photos/view/ImagePresenter.java, +import android.graphics.Bitmap;, +    private Object pathToken;, +    private Object imageToken;, +, +        private ImageLoader<T> imageLoader;, +        public Builder<T> setImageLoader(ImageLoader<T> imageLoader) {, +    private final ImageLoader<T> imageLoader;, +            if (width == 0 || height == 0) {, +                if (!setLayoutListener) {, +                }, +                    fetchPath(model, loadCount);, +            fetchPath(model, loadCount);, +        if (!isImageSet()) {, +            resetPlaceHolder();, +        }, +        imageToken = null;, +        pathToken = null;, +    private void fetchPath(final T model, final int loadCount) {, +        pathToken = imageLoader.fetchPath(model, getWidth(), getHeight(), new ImageLoader.PathReadyCallback() {, +            @Override, +            public boolean onPathReady(String path) {, +                if (loadCount != currentCount) return false;, +, +                fetchImage(path, model, loadCount);, +                return true;, +            }, +, +            @Override, +            public void onError(Exception e) { }, +        });, +    }, +, +    private void fetchImage(String path, T model, final int loadCount) {, +         imageToken = imageLoader.fetchImage(path, model, width, height, new ImageLoader.ImageReadyCallback() {, +            @Override, +            public boolean onImageReady(Bitmap image) {, +                if (loadCount != currentCount || !canSetImage()) return false;, +, +                if (imageSetCallback != null), +                    imageSetCallback.onImageSet(imageView, false);, +                imageView.setImageBitmap(image);, +                isImageSet = true;, +                return true;, +            }, +, +            @Override, +            public void onError(Exception e) { }, +        });, +    }, +, +    private void getDimens() {, +++ b/src/com/bumptech/photos/view/ImagePresenter.java, +import android.graphics.Bitmap;, +    private Object pathToken;, +    private Object imageToken;, +, +        private ImageLoader<T> imageLoader;, +        public Builder<T> setImageLoader(ImageLoader<T> imageLoader) {, +    private final ImageLoader<T> imageLoader;, +            if (width == 0 || height == 0) {, +                if (!setLayoutListener) {, +                }, +                    fetchPath(model, loadCount);, +            fetchPath(model, loadCount);, +        if (!isImageSet()) {, +            resetPlaceHolder();, +        }, +        imageToken = null;, +        pathToken = null;, +    private void fetchPath(final T model, final int loadCount) {, +        pathToken = imageLoader.fetchPath(model, getWidth(), getHeight(), new ImageLoader.PathReadyCallback() {, +            @Override, +            public boolean onPathReady(String path) {, +                if (loadCount != currentCount) return false;, +, +                fetchImage(path, model, loadCount);, +                return true;, +            }, +, +            @Override, +            public void onError(Exception e) { }, +        });, +    }, +, +    private void fetchImage(String path, T model, final int loadCount) {, +         imageToken = imageLoader.fetchImage(path, model, width, height, new ImageLoader.ImageReadyCallback() {, +            @Override, +            public boolean onImageReady(Bitmap image) {, +                if (loadCount != currentCount || !canSetImage()) return false;, +, +                if (imageSetCallback != null), +                    imageSetCallback.onImageSet(imageView, false);, +                imageView.setImageBitmap(image);, +                isImageSet = true;, +                return true;, +            }, +, +            @Override, +            public void onError(Exception e) { }]