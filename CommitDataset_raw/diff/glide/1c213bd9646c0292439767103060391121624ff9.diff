[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    private final GenericLoaderFactory loaderFactory;, +        loaderFactory = new GenericLoaderFactory(context);, +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    private final GenericLoaderFactory loaderFactory;, +        loaderFactory = new GenericLoaderFactory(context);, +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +        this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    private final GenericLoaderFactory loaderFactory;, +        loaderFactory = new GenericLoaderFactory(context);, +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +        this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java, +    private final Context context;, +, +    public GenericLoaderFactory(Context context) {, +       this.context = context.getApplicationContext();, +    }, +, +     * @deprecated Use {@link #buildModelLoader(Class, Class)} instead., +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param context Unused, +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    @Deprecated, +    public synchronized <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass,, +            Context context) {, +        return buildModelLoader(modelClass, resourceClass);, +    }, +, +    /**, +     * Returns a {@link ModelLoader} for the given model and resource classes by either returning a cached, +     * {@link ModelLoader} or building a new a new {@link ModelLoader} using registered {@link ModelLoaderFactory}s., +     * Returns null if no {@link ModelLoaderFactory} is registered for the given classes., +     *, +    public synchronized <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    private final GenericLoaderFactory loaderFactory;, +        loaderFactory = new GenericLoaderFactory(context);, +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +        this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java, +    private final Context context;, +, +    public GenericLoaderFactory(Context context) {, +       this.context = context.getApplicationContext();, +    }, +, +     * @deprecated Use {@link #buildModelLoader(Class, Class)} instead., +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param context Unused, +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    @Deprecated, +    public synchronized <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass,, +            Context context) {, +        return buildModelLoader(modelClass, resourceClass);, +    }, +, +    /**, +     * Returns a {@link ModelLoader} for the given model and resource classes by either returning a cached, +     * {@link ModelLoader} or building a new a new {@link ModelLoader} using registered {@link ModelLoaderFactory}s., +     * Returns null if no {@link ModelLoaderFactory} is registered for the given classes., +     *, +    public synchronized <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/file_descriptor/FileDescriptorFileLoader.java, +            return new FileDescriptorFileLoader(factories.buildModelLoader(Uri.class, ParcelFileDescriptor.class));, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    private final GenericLoaderFactory loaderFactory;, +        loaderFactory = new GenericLoaderFactory(context);, +        return Glide.get(context).getLoaderFactory().buildModelLoader(modelClass, resourceClass);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +        this.context = context.getApplicationContext();, +++ b/library/src/main/java/com/bumptech/glide/load/model/GenericLoaderFactory.java, +    private final Context context;, +, +    public GenericLoaderFactory(Context context) {, +       this.context = context.getApplicationContext();, +    }, +, +     * @deprecated Use {@link #buildModelLoader(Class, Class)} instead., +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param context Unused, +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    @Deprecated, +    public synchronized <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass,, +            Context context) {, +        return buildModelLoader(modelClass, resourceClass);]