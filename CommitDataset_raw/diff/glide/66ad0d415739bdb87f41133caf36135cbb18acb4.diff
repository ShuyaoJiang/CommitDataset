[+++ b/samples/contacturi/build.gradle, +    annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/build.gradle, +    annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, +  // Intentionally empty., +}, +++ b/samples/contacturi/build.gradle, +    annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, +  // Intentionally empty., +}, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +    GlideRequests glideRequests = GlideApp.with(this);, +    glideRequests.load(contactUri).apply(originalSize).into(imageViewContact);, +    glideRequests.load(lookupUri).apply(originalSize).into(imageViewLookup);, +    glideRequests.load(photoUri).apply(originalSize).into(imageViewPhoto);, +      glideRequests.load(displayPhotoUri).apply(originalSize).into(imageViewDisplayPhoto);, +++ b/samples/contacturi/build.gradle, +    annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, +  // Intentionally empty., +}, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +    GlideRequests glideRequests = GlideApp.with(this);, +    glideRequests.load(contactUri).apply(originalSize).into(imageViewContact);, +    glideRequests.load(lookupUri).apply(originalSize).into(imageViewLookup);, +    glideRequests.load(photoUri).apply(originalSize).into(imageViewPhoto);, +      glideRequests.load(displayPhotoUri).apply(originalSize).into(imageViewDisplayPhoto);, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +  private GlideRequest<Drawable> fullRequest;, +  private GlideRequest<Drawable> thumbnailRequest;, +  private GlideRequest<Drawable> preloadRequest;, +    fullRequest = GlideApp.with(this), +        .centerCrop(), +        .transition(withNoTransition());, +    thumbnailRequest = GlideApp.with(this), +        .diskCacheStrategy(DiskCacheStrategy.DATA), +        .centerCrop(), +        .override(Api.SQUARE_THUMB_SIZE), +        .transition(withNoTransition());, +        thumbnail ? thumbnailRequest.clone().priority(Priority.HIGH) : fullRequest;, +        GlideApp.with(FlickrPhotoGrid.this).clear(photoViewHolder.imageView);, +++ b/samples/contacturi/build.gradle, +    annotationProcessor project(':annotation:compiler'), +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/ContactUriModule.java, +package com.bumptech.glide.samples.contacturi;, +, +import com.bumptech.glide.annotation.GlideModule;, +import com.bumptech.glide.module.AppGlideModule;, +, +/**, + * Ensures that Glide's generated API is created for the Contact Uri sample., + */, +@GlideModule, +public class ContactUriModule extends AppGlideModule {, +  // Intentionally empty., +}, +++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java, +    GlideRequests glideRequests = GlideApp.with(this);, +    glideRequests.load(contactUri).apply(originalSize).into(imageViewContact);, +    glideRequests.load(lookupUri).apply(originalSize).into(imageViewLookup);, +    glideRequests.load(photoUri).apply(originalSize).into(imageViewPhoto);, +      glideRequests.load(displayPhotoUri).apply(originalSize).into(imageViewDisplayPhoto);, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +  private GlideRequest<Drawable> fullRequest;, +  private GlideRequest<Drawable> thumbnailRequest;, +  private GlideRequest<Drawable> preloadRequest;, +    fullRequest = GlideApp.with(this), +        .centerCrop()]