[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java, +   * @param inBitmap   The Bitmap to resize., +  public static Bitmap centerCrop(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int width,, +    if (inBitmap.getWidth() == width && inBitmap.getHeight() == height) {, +      return inBitmap;, +    if (inBitmap.getWidth() * height > width * inBitmap.getHeight()) {, +      scale = (float) height / (float) inBitmap.getHeight();, +      dx = (width - inBitmap.getWidth() * scale) * 0.5f;, +      scale = (float) width / (float) inBitmap.getWidth();, +      dy = (height - inBitmap.getHeight() * scale) * 0.5f;, +    Bitmap result = pool.get(width, height, getSafeConfig(inBitmap));, +    TransformationUtils.setAlpha(inBitmap, result);, +    canvas.drawBitmap(inBitmap, m, DEFAULT_PAINT);, +   * @param inBitmap  The Bitmap to shrink., +  public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int width,, +    if (inBitmap.getWidth() == width && inBitmap.getHeight() == height) {, +      return inBitmap;, +    final float widthPercentage = width / (float) inBitmap.getWidth();, +    final float heightPercentage = height / (float) inBitmap.getHeight();, +    final int targetWidth = (int) (minPercentage * inBitmap.getWidth());, +    final int targetHeight = (int) (minPercentage * inBitmap.getHeight());, +    if (inBitmap.getWidth() == targetWidth && inBitmap.getHeight() == targetHeight) {, +      return inBitmap;, +    Bitmap.Config config = getSafeConfig(inBitmap);, +    TransformationUtils.setAlpha(inBitmap, toReuse);, +      Log.v(TAG, "toFit:   " + inBitmap.getWidth() + "x" + inBitmap.getHeight());, +    canvas.drawBitmap(inBitmap, matrix, DEFAULT_PAINT);, +   * @param inBitmap The {@link android.graphics.Bitmap} that will be transformed., +  public static void setAlpha(Bitmap inBitmap, Bitmap outBitmap) {, +    setAlphaIfAvailable(outBitmap, inBitmap.hasAlpha());, +   * @param inBitmap        The bitmap to rotate/flip., +  public static Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap,, +      return inBitmap;, +    final RectF newRect = new RectF(0, 0, inBitmap.getWidth(), inBitmap.getHeight());, +    Bitmap.Config config = getSafeConfig(inBitmap);, +    canvas.drawBitmap(inBitmap, matrix, DEFAULT_PAINT);, +   * @param inBitmap   The Bitmap to resize., +  public static Bitmap circleCrop(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap,, +      int destWidth, int destHeight) {, +    int srcWidth = inBitmap.getWidth();, +    int srcHeight = inBitmap.getHeight();, +    // Alpha is required for this transformation., +    Bitmap toTransform = getAlphaSafeBitmap(pool, inBitmap);, +, +    Bitmap result = pool.get(destWidth, destHeight, getSafeConfig(toTransform));, +    canvas.drawBitmap(toTransform, srcRect, destRect, CIRCLE_CROP_BITMAP_PAINT);, +    if (!toTransform.equals(inBitmap)) {, +      pool.put(toTransform);, +    }, +, +  private static Bitmap getAlphaSafeBitmap(@NonNull BitmapPool pool,, +      @NonNull Bitmap maybeAlphaSafe) {, +    if (Bitmap.Config.ARGB_8888.equals(maybeAlphaSafe.getConfig())) {, +      return maybeAlphaSafe;, +    }, +, +    Bitmap argbBitmap = pool.get(maybeAlphaSafe.getWidth(), maybeAlphaSafe.getHeight(),, +        Bitmap.Config.ARGB_8888);, +    new Canvas(argbBitmap).drawBitmap(maybeAlphaSafe, 0 /*left*/, 0 /*top*/, null /*pain*/);, +, +    // We now own this Bitmap. It's our responsibility to replace it in the pool outside this method, +    // when we're finished with it., +    return argbBitmap;, +  }, +, +   * @param inBitmap the source bitmap to use as a basis for the created bitmap., +   * @return a {@link Bitmap} similar to inBitmap but with rounded corners., +  public static Bitmap roundedCorners(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap,, +    Bitmap toTransform = getAlphaSafeBitmap(pool, inBitmap);, +    Bitmap result = pool.get(width, height, Bitmap.Config.ARGB_8888);, +    if (!toTransform.equals(inBitmap)) {]