[+++ b/library/src/com/bumptech/glide/Glide.java, + * A singleton to present a simple static interface for Glide {@link GenericRequest} and to create and manage an, +         *     public void onException(Exception e, ModelType model, Target target) {, +        register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());, +        register(File.class, InputStream.class, new StreamFileLoader.Factory());, +        register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, +        register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());, +        register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());, +        register(String.class, InputStream.class, new StreamStringLoader.Factory());, +        register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());, +        register(Uri.class, InputStream.class, new StreamUriLoader.Factory());, +            register(URL.class, InputStream.class, new VolleyUrlLoader.Factory());, +     * {@link ImageManager} with custom options for use with {@link GenericRequest} and/or as an, +     * Set the {@link ImageManager} to use with {@link GenericRequest}., +     * Set the {@link ImageManager} to use with {@link GenericRequest} Replaces the current, +     * models. Typically the {@link Glide#using(StreamModelLoader)} or {@link Glide#using(FileDescriptorModelLoader)}, +     * syntax is preferred because it directly links the model with the ModelLoader being used to load it., +     * @see #using(FileDescriptorModelLoader), +     * @see #using(StreamModelLoader), +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class the model loader will translate the model type into., +     * @param factory The factory to use., +     * @param <T> The type of the model., +     * @param <Y> the type of the resource., +    public <T, Y> void register(Class<T> modelClass, Class<Y> resourceClass, ModelLoaderFactory<T, Y> factory) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.register(modelClass, resourceClass, factory);, +     * {@link InputStream} resource for loading images., +     * @param modelLoader The model loader to use., +     * @return A new {@link ImageModelRequest}., +    public static <T> ImageModelRequest<T> using(final StreamModelLoader<T> modelLoader) {, +        return new ImageModelRequest<T>(modelLoaderToFactory(modelLoader));, +    /**, +     * Set the {@link ModelLoader} to use for a new load where the model loader translates from a model to an, +     * {@link ParcelFileDescriptor} resource for loading video thumbnails., +     *, +     * @param modelLoader The model loader to use., +     * @param <T> The type of the model., +     * @return A new {@link VideoModelRequest}., +     */, +    public static <T> VideoModelRequest<T> using(final FileDescriptorModelLoader<T> modelLoader) {, +        return new VideoModelRequest<T>(modelLoaderToFactory(modelLoader));, +     * @see #using(StreamModelLoader), +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +    public static Request<String> load(String string) {, +        return new Request<String>(string);, +     * @see #using(StreamModelLoader), +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +    public static Request<Uri> load(Uri uri) {, +        return new Request<Uri>(uri);, +     * @see #using(StreamModelLoader), +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +    public static Request<URL> load(URL url) {, +        return new Request<URL>(url);, +     * @see #using(StreamModelLoader), +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +    public static Request<File> load(File file) {, +        return new Request<File>(file);, +     * @see #using(StreamModelLoader), +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +    public static Request<Integer> load(Integer resourceId) {, +        return new Request<Integer>(resourceId);, +     * @param model The model to load., +     * @param <T> The type of the model to load., +     * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the image into., +     * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type., +    @SuppressWarnings("unused"), +    public static <T> Request<T> loadFromImage(T model) {, +        return new ImageModelRequest<T>(GLIDE.getFactory(model, InputStream.class)).load(model);, +    }, +, +    /**, +     * Use the {@link ModelLoaderFactory} currently registered for the given model type for, +     * {@link ParcelFileDescriptor}s to load a thumbnail for the video represented by the given model., +     *, +     * @param model The model to load., +     * @param <T> The type of the model to load., +     * @return A {@link Request} to set options for the load an ultimately the target to load the thumbnail into., +     * @throws IllegalArgumentException If no such {@link ModelLoaderFactory} is registered for the given model type., +     */, +    @SuppressWarnings("unused"), +    public static <T> Request<T> loadFromVideo(T model) {, +        return new VideoModelRequest<T>(GLIDE.getFactory(model, ParcelFileDescriptor.class)).loadFromVideo(model);, +    /**, +     * A helper class for building requests with custom {@link ModelLoader}s that translate models to, +     * {@link ParcelFileDescriptor} resources for loading video thumbnails., +     *, +     * @param <T> The type of the model., +     */, +    public static class VideoModelRequest<T> {, +        private VideoModelRequest(ModelLoaderFactory<T, ParcelFileDescriptor> factory) {, +        public Request<T> loadFromVideo(T model) {, +            return new Request<T>(model, null, factory);, +     * {@link InputStream} resources for loading images., +    public static class ImageModelRequest<T> {, +        private ImageModelRequest(ModelLoaderFactory<T, InputStream> factory) {, +        public Request<T> load(T model) {, +            return new Request<T>(model, factory, null);, +     * An request for the user to provide an {@link Context} to start an image load., +    public static class ContextRequest {]