[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = GlideExecutor.newSourceExecutor();, +      diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = GlideExecutor.newSourceExecutor();, +      diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +import android.os.StrictMode;, +import android.os.StrictMode.ThreadPolicy;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +public final class GlideExecutor extends ThreadPoolExecutor {, +, +  /**, +   * The default thread name prefix for executors used to load/decode/transform data not found in, +   * cache., +   */, +  public static final String DEFAULT_SOURCE_EXECUTOR_NAME = "source";, +  /**, +   * The default thread name prefix for executors used to load/decode/transform data found in, +   * Glide's cache., +   */, +  public static final String DEFAULT_DISK_CACHE_EXECUTOR_NAME = "disk-cache";, +  /**, +   * The default thread count for executors used to load/decode/transform data found in Glide's, +   * cache., +   */, +  public static final int DEFAULT_DISK_CACHE_EXECUTOR_THREADS = 1;, +  private final boolean runAllOnMainThread;, +   * Returns a new fixed thread pool with the default thread count returned from, +   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_DISK_CACHE_EXECUTOR_NAME} thread name, +   * prefix, and the, +   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy#DEFAULT}, +   * uncaught throwable strategy., +   * <p>Disk cache executors do not allow network operations on their threads., +  public static GlideExecutor newDiskCacheExecutor() {, +    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,, +        DEFAULT_DISK_CACHE_EXECUTOR_NAME, UncaughtThrowableStrategy.DEFAULT);, +   * Returns a new fixed thread pool with the given thread count, thread name prefix,, +   * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}., +   * <p>Disk cache executors do not allow network operations on their threads., +   * @param threadCount The number of threads., +  public static GlideExecutor newDiskCacheExecutor(int threadCount, String name,, +    return new GlideExecutor(threadCount, name, uncaughtThrowableStrategy,, +        true /*preventNetworkOperations*/, false /*runAllOnMainThread*/);, +  /**, +   * Returns a new fixed thread pool with the default thread count returned from, +   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_SOURCE_EXECUTOR_NAME} thread name, +   * prefix, and the, +   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy#DEFAULT}, +   * uncaught throwable strategy., +   *, +   * <p>Source executors allow network operations on their threads., +   */, +  public static GlideExecutor newSourceExecutor() {, +    return newSourceExecutor(calculateBestThreadCount(), DEFAULT_SOURCE_EXECUTOR_NAME,, +        UncaughtThrowableStrategy.DEFAULT);, +  }, +, +  /**, +   * Returns a new fixed thread pool with the given thread count, thread name prefix,, +   * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}., +   *, +   * <p>Source executors allow network operations on their threads., +   *, +   * @param threadCount The number of threads., +   * @param name The prefix for each thread name., +   * @param uncaughtThrowableStrategy The {@link, +   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to, +   *                                  handle uncaught exceptions., +   */, +  public static GlideExecutor newSourceExecutor(int threadCount, String name,, +      UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +    return new GlideExecutor(threadCount, name, uncaughtThrowableStrategy,, +        false /*preventNetworkOperations*/, false /*runAllOnMainThread*/);, +  }, +, +  // Visible for testing., +  GlideExecutor(int poolSize, String name,, +      UncaughtThrowableStrategy uncaughtThrowableStrategy, boolean preventNetworkOperations,, +      boolean runAllOnMainThread) {, +        poolSize /*corePoolSize*/,, +        poolSize /*maximumPoolSize*/,, +        new DefaultThreadFactory(name, uncaughtThrowableStrategy, preventNetworkOperations));, +    this.runAllOnMainThread = runAllOnMainThread;, +  }, +, +  @Override, +  public void execute(Runnable command) {, +    if (runAllOnMainThread) {, +      command.run();, +    } else {, +      super.execute(command);, +    }, +  }, +, +  @NonNull, +  @Override, +  public Future<?> submit(Runnable task) {]