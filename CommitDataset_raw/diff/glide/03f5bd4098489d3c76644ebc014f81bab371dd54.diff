[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +, +   * {@link Encoder} that is registered first will be used., +    encoderRegistry.append(dataClass, encoder);, +    return this;, +  }, +, +  /**, +   * Prepends the given {@link Encoder} into the list of available {@link Encoder}s, +   * so that it is attempted before all later and default {@link Encoder}s for the given, +   * data class., +   *, +   * <p>This method allows you to replace the default {@link Encoder} because it ensures, +   * the registered {@link Encoder} will run first. If multiple {@link Encoder}s are registered for, +   * the same type or super type, the {@link Encoder} that is registered first will be used., +   */, +  public <Data> Registry prepend(Class<Data> dataClass, Encoder<Data> encoder) {, +    encoderRegistry.prepend(dataClass, encoder);, +   * {@link ResourceEncoder} that is registered first will be used., +    resourceEncoderRegistry.append(resourceClass, encoder);, +    return this;, +  }, +, +  /**, +   * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a, +   * non-default data type that can be rewind to allow for efficient reads of file headers., +   *, +   * Prepends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s, +   * so that it is attempted before all later and default {@link ResourceEncoder}s for the given, +   * data type., +   *, +   * <p>This method allows you to replace the default {@link ResourceEncoder} because it ensures, +   * the registered {@link ResourceEncoder} will run first. If multiple {@link ResourceEncoder}s are, +   * registered for the same type or super type, the {@link ResourceEncoder} that is registered, +   * first will be used., +   */, +  public <TResource> Registry prepend(Class<TResource> resourceClass,, +                                       ResourceEncoder<TResource> encoder) {, +    resourceEncoderRegistry.prepend(resourceClass, encoder);, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +, +   * {@link Encoder} that is registered first will be used., +    encoderRegistry.append(dataClass, encoder);, +    return this;, +  }, +, +  /**, +   * Prepends the given {@link Encoder} into the list of available {@link Encoder}s, +   * so that it is attempted before all later and default {@link Encoder}s for the given, +   * data class., +   *, +   * <p>This method allows you to replace the default {@link Encoder} because it ensures, +   * the registered {@link Encoder} will run first. If multiple {@link Encoder}s are registered for, +   * the same type or super type, the {@link Encoder} that is registered first will be used., +   */, +  public <Data> Registry prepend(Class<Data> dataClass, Encoder<Data> encoder) {, +    encoderRegistry.prepend(dataClass, encoder);, +   * {@link ResourceEncoder} that is registered first will be used., +    resourceEncoderRegistry.append(resourceClass, encoder);, +    return this;, +  }, +, +  /**, +   * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a, +   * non-default data type that can be rewind to allow for efficient reads of file headers., +   *, +   * Prepends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s, +   * so that it is attempted before all later and default {@link ResourceEncoder}s for the given, +   * data type., +   *, +   * <p>This method allows you to replace the default {@link ResourceEncoder} because it ensures, +   * the registered {@link ResourceEncoder} will run first. If multiple {@link ResourceEncoder}s are, +   * registered for the same type or super type, the {@link ResourceEncoder} that is registered, +   * first will be used., +   */, +  public <TResource> Registry prepend(Class<TResource> resourceClass,, +                                       ResourceEncoder<TResource> encoder) {, +    resourceEncoderRegistry.prepend(resourceClass, encoder);, +++ b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java, + * Contains an ordered list of {@link Encoder}s capable of encoding arbitrary data types., +  public synchronized <T> void append(Class<T> dataClass, Encoder<T> encoder) {, +  public synchronized <T> void prepend(Class<T> dataClass, Encoder<T> encoder) {, +    encoders.add(0, new Entry<>(dataClass, encoder));, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +, +   * {@link Encoder} that is registered first will be used., +    encoderRegistry.append(dataClass, encoder);, +    return this;, +  }, +, +  /**, +   * Prepends the given {@link Encoder} into the list of available {@link Encoder}s, +   * so that it is attempted before all later and default {@link Encoder}s for the given, +   * data class., +   *, +   * <p>This method allows you to replace the default {@link Encoder} because it ensures, +   * the registered {@link Encoder} will run first. If multiple {@link Encoder}s are registered for, +   * the same type or super type, the {@link Encoder} that is registered first will be used.]