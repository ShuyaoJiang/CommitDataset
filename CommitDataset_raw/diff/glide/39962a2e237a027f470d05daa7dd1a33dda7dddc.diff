[+++ b/library/robolectric/src/com/bumptech/glide/resize/ResourceRunnerTest.java, +    public void testSourceRunnerIsSubmittedIfCacheDecoderThrows() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("Test"));, +, +        harness.runner.run();, +, +        verify(harness.service).submit(eq(harness.sourceRunner));, +    }, +, +    @Test, +    public void testDiskCacheEntryIsDeletedIfCacheDecoderThrows() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("Test"));, +, +        harness.runner.run();, +, +        verify(harness.diskCache).delete(eq(ID));, +    }, +, +    @Test, +    public void testDiskCacheEntryIsDeletedIfDiskCacheContainsIdAndCacheDecoderReturnsNull() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenReturn(null);, +, +        harness.runner.run();, +, +        verify(harness.diskCache).delete(eq(ID));, +    }, +, +    @Test, +++ b/library/robolectric/src/com/bumptech/glide/resize/ResourceRunnerTest.java, +    public void testSourceRunnerIsSubmittedIfCacheDecoderThrows() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("Test"));, +, +        harness.runner.run();, +, +        verify(harness.service).submit(eq(harness.sourceRunner));, +    }, +, +    @Test, +    public void testDiskCacheEntryIsDeletedIfCacheDecoderThrows() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("Test"));, +, +        harness.runner.run();, +, +        verify(harness.diskCache).delete(eq(ID));, +    }, +, +    @Test, +    public void testDiskCacheEntryIsDeletedIfDiskCacheContainsIdAndCacheDecoderReturnsNull() throws IOException {, +        when(harness.diskCache.get(eq(ID))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenReturn(null);, +, +        harness.runner.run();, +, +        verify(harness.diskCache).delete(eq(ID));, +    }, +, +    @Test, +++ b/library/src/com/bumptech/glide/resize/ResourceRunner.java, +import android.util.Log;, +import java.io.IOException;, +    private static final String TAG = "ResourceRunner";, +            try {, +            } catch (IOException e) {, +                if (Log.isLoggable(TAG, Log.DEBUG)) {, +                    Log.d(TAG, "Exception decoding image from cache", e);, +                }, +            }, +            if (result == null) {, +                if (Log.isLoggable(TAG, Log.DEBUG)) {, +                    Log.d(TAG, "Failed to decode image from cache");, +                }, +                diskCache.delete(id);, +            }]