[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.view.View;, +import com.bumptech.glide.util.Preconditions;, +    Preconditions.checkNotNull(, +        "You cannot start a load on a not yet attached View or a  Fragment where getActivity() ", +            + "returns null (which usually occurs when getActivity() is called before the Fragment ", +            + "is attached or after the Fragment is destroyed).");, +  /**, +   * Begin a load with Glide that will be tied to the lifecycle of the {@link Fragment},, +   * {@link android.app.Fragment}, or {@link Activity} that contains the View., +   *, +   * <p>A {@link Fragment} or {@link android.app.Fragment} is assumed to contain a View if the View, +   * is a child of the View returned by the {@link Fragment#getView()}} method., +   *, +   * <p>This method will not work if the View is not attached. Prefer the Activity and Fragment, +   * variants unless you're loading in a View subclass., +   *, +   * <p>This method may be inefficient for large hierarchies. Consider memoizing the result after, +   * the View is attached., +   *, +   * <p>When used in Applications that use the non-support {@link android.app.Fragment} classes,, +   * calling this method will produce noisy logs from {@link android.app.FragmentManager}. Consider, +   * avoiding entirely or using the {@link Fragment}s from the support library instead., +   *, +   * @param view The view to search for a containing Fragment or Activity from., +   * @return A RequestManager that can be used to start a load., +   */, +  public static RequestManager with(View view) {, +    return getRetriever(view.getContext()).get(view);, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.view.View;, +import com.bumptech.glide.util.Preconditions;, +    Preconditions.checkNotNull(, +        "You cannot start a load on a not yet attached View or a  Fragment where getActivity() ", +            + "returns null (which usually occurs when getActivity() is called before the Fragment ", +            + "is attached or after the Fragment is destroyed).");, +  /**, +   * Begin a load with Glide that will be tied to the lifecycle of the {@link Fragment},, +   * {@link android.app.Fragment}, or {@link Activity} that contains the View., +   *, +   * <p>A {@link Fragment} or {@link android.app.Fragment} is assumed to contain a View if the View, +   * is a child of the View returned by the {@link Fragment#getView()}} method., +   *, +   * <p>This method will not work if the View is not attached. Prefer the Activity and Fragment, +   * variants unless you're loading in a View subclass., +   *, +   * <p>This method may be inefficient for large hierarchies. Consider memoizing the result after, +   * the View is attached., +   *, +   * <p>When used in Applications that use the non-support {@link android.app.Fragment} classes,, +   * calling this method will produce noisy logs from {@link android.app.FragmentManager}. Consider, +   * avoiding entirely or using the {@link Fragment}s from the support library instead., +   *, +   * @param view The view to search for a containing Fragment or Activity from., +   * @return A RequestManager that can be used to start a load., +   */, +  public static RequestManager with(View view) {, +    return getRetriever(view.getContext()).get(view);, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java, +import android.os.Build.VERSION;, +import android.os.Build.VERSION_CODES;, +import android.os.Bundle;, +import android.support.v4.util.ArrayMap;, +import android.view.View;, +import com.bumptech.glide.util.Preconditions;, +import java.util.List;, +  // Hacks based on the implementation of FragmentManagerImpl in the non-support libraries that, +  // allow us to iterate over and retrieve all active Fragments in a FragmentManager., +  private static final String FRAGMENT_INDEX_KEY = "key";, +  private static final String FRAGMENT_MANAGER_GET_FRAGMENT_KEY = "i";, +, +  // Objects used to find Fragments and Activities containing views., +  private final ArrayMap<View, Fragment> tempViewToSupportFragment = new ArrayMap<>();, +  private final ArrayMap<View, android.app.Fragment> tempViewToFragment = new ArrayMap<>();, +  private final Bundle tempBundle = new Bundle();, +, +      return supportFragmentGet(activity, fm, null /*parentHint*/);, +    Preconditions.checkNotNull(fragment.getActivity(),, +          "You cannot start a load on a fragment before it is attached or after it is destroyed");, +      return fragmentGet(activity, fm, null /*parentHint*/);, +    }, +  }, +, +  public RequestManager get(View view) {, +    if (Util.isOnBackgroundThread()) {, +      return get(view.getContext().getApplicationContext());, +    }, +, +    Preconditions.checkNotNull(view);, +    Preconditions.checkNotNull(view.getContext(),, +        "Unable to obtain a request manager for a view without a Context");, +    Activity activity = findActivity(view.getContext());, +    // The view might be somewhere else, like a service., +    if (activity == null) {, +      return get(view.getContext().getApplicationContext());, +    }]