[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +            new EngineResource<>(, +                ref.resource,, +                /*isMemoryCacheable=*/ true,, +                /*isRecyclable=*/ false,, +                ref.key,, +                listener);, +          referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, +      isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +            new EngineResource<>(, +                ref.resource,, +                /*isMemoryCacheable=*/ true,, +                /*isRecyclable=*/ false,, +                ref.key,, +                listener);, +          referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, +      isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, +              diskCacheExecutor,, +              sourceExecutor,, +              sourceUnlimitedExecutor,, +              animationExecutor,, +              /*engineJobListener=*/ this,, +              /*resourceListener=*/ this);, +      result = new EngineResource<>(, +          cached, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true, key, /*listener=*/ this);, +      if (resource.isMemoryCacheable()) {, +    if (resource.isMemoryCacheable()) {, +    @Synthetic final EngineJobListener engineJobListener;, +    @Synthetic final ResourceListener resourceListener;, +                    engineJobListener,, +                    resourceListener,, +        EngineJobListener engineJobListener,, +        ResourceListener resourceListener) {, +      this.engineJobListener = engineJobListener;, +      this.resourceListener = resourceListener;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +            new EngineResource<>(, +                ref.resource,, +                /*isMemoryCacheable=*/ true,, +                /*isRecyclable=*/ false,, +                ref.key,, +                listener);, +          referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, +      isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, +              diskCacheExecutor,, +              sourceExecutor,, +              sourceUnlimitedExecutor,, +              animationExecutor,, +              /*engineJobListener=*/ this,, +              /*resourceListener=*/ this);, +      result = new EngineResource<>(, +          cached, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true, key, /*listener=*/ this);, +      if (resource.isMemoryCacheable()) {, +    if (resource.isMemoryCacheable()) {, +    @Synthetic final EngineJobListener engineJobListener;, +    @Synthetic final ResourceListener resourceListener;, +                    engineJobListener,, +                    resourceListener,, +        EngineJobListener engineJobListener,, +        ResourceListener resourceListener) {, +      this.engineJobListener = engineJobListener;, +      this.resourceListener = resourceListener;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, +  private final ResourceListener resourceListener;, +  private final EngineJobListener engineJobListener;, +      EngineJobListener engineJobListener,, +      ResourceListener resourceListener,, +        engineJobListener,, +        resourceListener,, +      EngineJobListener engineJobListener,, +      ResourceListener resourceListener,, +    this.engineJobListener = engineJobListener;, +    this.resourceListener = resourceListener;, +    engineJobListener.onEngineJobCancelled(this, key);, +      engineResource = engineResourceFactory.build(resource, isCacheable, key, resourceListener);, +    engineJobListener.onEngineJobComplete(this, localKey, localResource);, +    engineJobListener.onEngineJobComplete(this, localKey, /*resource=*/ null);, +    public <R> EngineResource<R> build(, +        Resource<R> resource, boolean isMemoryCacheable, Key key, ResourceListener listener) {, +      return new EngineResource<>(, +          resource, isMemoryCacheable, /*isRecyclable=*/ true, key, listener);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java, +            new EngineResource<>(, +                ref.resource,, +                /*isMemoryCacheable=*/ true,, +                /*isRecyclable=*/ false,, +                ref.key,, +                listener);, +          referent.isMemoryCacheable() && isActiveResourceRetentionAllowed, +      isCacheable = referent.isMemoryCacheable();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.load.engine.EngineResource.ResourceListener;, +              diskCacheExecutor,, +              sourceExecutor,]