[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private final ReleaseManager releaseManager = new ReleaseManager();, +   *, +   * @param isRemovedFromQueue {@code true} if we've been removed from the queue and {@link #run}, +   *                           is neither in progress nor will ever be called again., +  void release(boolean isRemovedFromQueue) {, +    if (releaseManager.release(isRemovedFromQueue)) {, +  /**, +   * Called when we've finished encoding (either becasue the encode process is complete, or because, +   * we don't have anything to encode)., +   */, +  /**, +   * Called when the load has failed due to a an error or a series of errors., +   */, +  private void onLoadFailed() {, +    if (releaseManager.onFailed()) {, +      releaseInternal();, +    }, +  }, +, +    onLoadFailed();, +  /**, +   * Responsible for indicating when it is safe for the job to be cleared and returned to the pool., +   */, +    private boolean isFailed;, +    synchronized boolean release(boolean isRemovedFromQueue) {, +      return isComplete(isRemovedFromQueue);, +      return isComplete(false /*isRemovedFromQueue*/);, +    }, +, +    synchronized boolean onFailed() {, +      isFailed = true;, +      return isComplete(false /*isRemovedFromQueue*/);, +      isFailed = false;, +    private boolean isComplete(boolean isRemovedFromQueue) {, +      return (isFailed || isRemovedFromQueue || isEncodeComplete) && isReleased;, +  /**, +   * Allows transformed resources to be encoded after the transcoded result is already delivered, +   * to requestors., +   */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +  private final ReleaseManager releaseManager = new ReleaseManager();, +   *, +   * @param isRemovedFromQueue {@code true} if we've been removed from the queue and {@link #run}, +   *                           is neither in progress nor will ever be called again., +  void release(boolean isRemovedFromQueue) {, +    if (releaseManager.release(isRemovedFromQueue)) {, +  /**, +   * Called when we've finished encoding (either becasue the encode process is complete, or because, +   * we don't have anything to encode)., +   */, +  /**, +   * Called when the load has failed due to a an error or a series of errors., +   */, +  private void onLoadFailed() {, +    if (releaseManager.onFailed()) {, +      releaseInternal();, +    }, +  }, +, +    onLoadFailed();, +  /**, +   * Responsible for indicating when it is safe for the job to be cleared and returned to the pool., +   */, +    private boolean isFailed;, +    synchronized boolean release(boolean isRemovedFromQueue) {, +      return isComplete(isRemovedFromQueue);, +      return isComplete(false /*isRemovedFromQueue*/);, +    }, +, +    synchronized boolean onFailed() {, +      isFailed = true;, +      return isComplete(false /*isRemovedFromQueue*/);, +      isFailed = false;, +    private boolean isComplete(boolean isRemovedFromQueue) {, +      return (isFailed || isRemovedFromQueue || isEncodeComplete) && isReleased;, +  /**, +   * Allows transformed resources to be encoded after the transcoded result is already delivered, +   * to requestors., +   */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +      release(true /*isRemovedFromQueue*/);, +      release(false /*isRemovedFromQueue*/);, +    release(false /*isRemovedFromQueue*/);, +    release(false /*isRemovedFromQueue*/);, +  private void release(boolean isRemovedFromQueue) {, +    decodeJob.release(isRemovedFromQueue);, +      release(false /*isRemovedFromQueue*/);, +    release(false /*isRemovedFromQueue*/);]