[+++ b/library/src/main/java/com/bumptech/glide/util/ContentLengthInputStream.java, +    int value = super.read();, +    checkReadSoFarOrThrow(value >= 0 ? 1 : -1);, +    return value;, +++ b/library/src/main/java/com/bumptech/glide/util/ContentLengthInputStream.java, +    int value = super.read();, +    checkReadSoFarOrThrow(value >= 0 ? 1 : -1);, +    return value;, +++ b/library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java, +import java.io.ByteArrayInputStream;, +    assertThat(is.available()).isEqualTo(contentLength - 1);, +, +  @Test, +  public void testRead_readWithZeroes_doesNotThrow() throws IOException {, +    ByteArrayInputStream inner = new ByteArrayInputStream(new byte[] {0, 0, 0});, +    InputStream is = ContentLengthInputStream.obtain(inner, 3);, +, +    assertThat(is.read()).isEqualTo(0);, +    assertThat(is.read()).isEqualTo(0);, +    assertThat(is.read()).isEqualTo(0);, +    assertThat(is.read()).isEqualTo(-1);, +  }, +, +  @Test, +  public void testRead_readWithHighValues_doesNotThrow() throws IOException {, +    ByteArrayInputStream inner =, +        new ByteArrayInputStream(new byte[] {(byte) 0xF0, (byte) 0xA0, (byte) 0xFF});, +    InputStream is = ContentLengthInputStream.obtain(inner, 3);, +, +    assertThat(is.read()).isEqualTo(0xF0);, +    assertThat(is.read()).isEqualTo(0xA0);, +    assertThat(is.read()).isEqualTo(0xFF);, +    assertThat(is.read()).isEqualTo(-1);, +  }]