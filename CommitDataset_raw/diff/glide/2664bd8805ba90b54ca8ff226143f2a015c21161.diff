[+++ b/library/library.iml, +        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/library.iml, +        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    public void testDefaultBitmapPoolSize() {, +//        assertThat(bitmapPoolSize).isIn(Range.open());, +        float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, +        float totalScreenMb = totalScreenBytes / (1024 * 1024);, +        float memoryClassMb = totalScreenMb / harness.sizeMultiplier;, +        return (int) Math.ceil(memoryClassMb);, +            return new MemorySizeCalculator(Robolectric.application, activityManager, screenDimensions);, +++ b/library/library.iml, +        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    public void testDefaultBitmapPoolSize() {, +//        assertThat(bitmapPoolSize).isIn(Range.open());, +        float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, +        float totalScreenMb = totalScreenBytes / (1024 * 1024);, +        float memoryClassMb = totalScreenMb / harness.sizeMultiplier;, +        return (int) Math.ceil(memoryClassMb);, +            return new MemorySizeCalculator(Robolectric.application, activityManager, screenDimensions);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +    private static final String TAG = "Glide";, +     * <p>, +     *     Calls to this method are ignored on KitKat and Lollipop. See #301., +     * </p>, +     *, +        if (DecodeFormat.REQUIRE_ARGB_8888 && decodeFormat != DecodeFormat.ALWAYS_ARGB_8888) {, +            this.decodeFormat = DecodeFormat.ALWAYS_ARGB_8888;, +            if (Log.isLoggable(TAG, Log.WARN)) {, +                Log.w(TAG, "Unsafe to use RGB_565 on KitKat or Lollipop, ignoring setDecodeFormat");, +            }, +        } else {, +        }, +++ b/library/library.iml, +        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    public void testDefaultBitmapPoolSize() {, +//        assertThat(bitmapPoolSize).isIn(Range.open());, +        float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, +        float totalScreenMb = totalScreenBytes / (1024 * 1024);, +        float memoryClassMb = totalScreenMb / harness.sizeMultiplier;, +        return (int) Math.ceil(memoryClassMb);, +            return new MemorySizeCalculator(Robolectric.application, activityManager, screenDimensions);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +    private static final String TAG = "Glide";, +     * <p>, +     *     Calls to this method are ignored on KitKat and Lollipop. See #301., +     * </p>, +     *, +        if (DecodeFormat.REQUIRE_ARGB_8888 && decodeFormat != DecodeFormat.ALWAYS_ARGB_8888) {, +            this.decodeFormat = DecodeFormat.ALWAYS_ARGB_8888;, +            if (Log.isLoggable(TAG, Log.WARN)) {, +                Log.w(TAG, "Unsafe to use RGB_565 on KitKat or Lollipop, ignoring setDecodeFormat");, +            }, +        } else {, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +, +    /** There is a rendering issue in KitKat and L (or at least L MR1) when reusing mixed format bitmaps. See #301. */, +    public static final boolean REQUIRE_ARGB_8888 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;, +, +    public static final DecodeFormat DEFAULT = REQUIRE_ARGB_8888 ? ALWAYS_ARGB_8888 : PREFER_RGB_565;, +++ b/library/library.iml, +        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    public void testDefaultBitmapPoolSize() {, +//        assertThat(bitmapPoolSize).isIn(Range.open());, +        float totalScreenBytes = harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);, +        float totalScreenMb = totalScreenBytes / (1024 * 1024);, +        float memoryClassMb = totalScreenMb / harness.sizeMultiplier;, +        return (int) Math.ceil(memoryClassMb);, +            return new MemorySizeCalculator(Robolectric.application, activityManager, screenDimensions);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +    private static final String TAG = "Glide";, +     * <p>, +     *     Calls to this method are ignored on KitKat and Lollipop. See #301., +     * </p>, +     *, +        if (DecodeFormat.REQUIRE_ARGB_8888 && decodeFormat != DecodeFormat.ALWAYS_ARGB_8888) {, +            this.decodeFormat = DecodeFormat.ALWAYS_ARGB_8888;, +            if (Log.isLoggable(TAG, Log.WARN)) {, +                Log.w(TAG, "Unsafe to use RGB_565 on KitKat or Lollipop, ignoring setDecodeFormat");, +            }, +        } else {, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +, +    /** There is a rendering issue in KitKat and L (or at least L MR1) when reusing mixed format bitmaps. See #301. */, +    public static final boolean REQUIRE_ARGB_8888 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;, +, +    public static final DecodeFormat DEFAULT = REQUIRE_ARGB_8888 ? ALWAYS_ARGB_8888 : PREFER_RGB_565;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +import android.text.format.Formatter;, +    // Visible for testing., +    static final int BITMAP_POOL_TARGET_SCREENS = 4;]