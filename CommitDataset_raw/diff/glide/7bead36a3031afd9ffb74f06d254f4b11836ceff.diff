[+++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.listener).onEngineJobCancelled(eq(harness.key));, +        }).when(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(harness.key));, +        Key key = mock(Key.class);, +        EngineJob <Object> job = new EngineJob<Object>(key, memoryCache, mainHandler, referenceCounter, listener);, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.listener).onEngineJobCancelled(eq(harness.key));, +        }).when(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(harness.key));, +        Key key = mock(Key.class);, +        EngineJob <Object> job = new EngineJob<Object>(key, memoryCache, mainHandler, referenceCounter, listener);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import static org.mockito.Matchers.anyString;, +    private static final String ID = "asdf";, +    public void testKeyFactoryIsGivenNecessaryArguments() {, +        harness.doLoad();, +, +        verify(harness.keyFactory).buildKey(eq(ID), eq(harness.width), eq(harness.height), eq(harness.cacheDecoder),, +                eq(harness.decoder), eq(harness.transformation), eq(harness.encoder));, +    }, +, +    @Test, +, +        Key cacheKey = mock(Key.class);, +        KeyFactory keyFactory = mock(KeyFactory.class);, +        Map<Key, ResourceRunner> runners = new HashMap<Key, ResourceRunner>();, +            when(keyFactory.buildKey(anyString(), anyInt(), anyInt(), any(ResourceDecoder.class),, +                    any(ResourceDecoder.class), any(Transformation.class), any(ResourceEncoder.class))), +                    .thenReturn(cacheKey);, +            engine = new Engine(factory, cache, runners, resourceReferenceCounter, keyFactory);, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.listener).onEngineJobCancelled(eq(harness.key));, +        }).when(harness.memoryCache).put(eq(harness.key), eq(harness.resource));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(harness.key));, +        Key key = mock(Key.class);, +        EngineJob <Object> job = new EngineJob<Object>(key, memoryCache, mainHandler, referenceCounter, listener);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import static org.mockito.Matchers.anyString;, +    private static final String ID = "asdf";, +    public void testKeyFactoryIsGivenNecessaryArguments() {, +        harness.doLoad();, +, +        verify(harness.keyFactory).buildKey(eq(ID), eq(harness.width), eq(harness.height), eq(harness.cacheDecoder),, +                eq(harness.decoder), eq(harness.transformation), eq(harness.encoder));, +    }, +, +    @Test, +, +        Key cacheKey = mock(Key.class);, +        KeyFactory keyFactory = mock(KeyFactory.class);, +        Map<Key, ResourceRunner> runners = new HashMap<Key, ResourceRunner>();, +            when(keyFactory.buildKey(anyString(), anyInt(), anyInt(), any(ResourceDecoder.class),, +                    any(ResourceDecoder.class), any(Transformation.class), any(ResourceEncoder.class))), +                    .thenReturn(cacheKey);, +            engine = new Engine(factory, cache, runners, resourceReferenceCounter, keyFactory);, +++ b/library/robolectric/src/com/bumptech/glide/resize/ResourceRunnerTest.java, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        verify(harness.diskCache).delete(eq(harness.key));, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        verify(harness.diskCache).delete(eq(harness.key));, +        verify(harness.diskCache).get(eq(harness.key));, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(result);, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(is);, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(null);, +        verify(harness.diskCache, atLeastOnce()).get(eq(harness.key));, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(null);, +        when(harness.diskCache.get(eq(harness.key))).thenReturn(new ByteArrayInputStream(new byte[0]));, +        verify(harness.diskCache, never()).get(any(Key.class));, +        Key key = mock(Key.class);, +        ResourceRunner<Object> runner = new ResourceRunner(key, width, height, diskCache, decoder,, +                sourceRunner, service, bgHandler, engineJob);, +            when(key.toString()).thenReturn(ID);, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineJobTest.java, +        verify(harness.listener).onEngineJobComplete(eq(harness.key));, +        verify(harness.memoryCache).put(eq(harness.key), eq(harness.resource));]