[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        RequestManager requestManager = RequestManagerRetriever.get(context);, +        return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        RequestManager requestManager = RequestManagerRetriever.get(context);, +        return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +interface ConnectivityMonitor {, +, +    public interface ConnectivityListener {, +        public void onConnectivityChanged(boolean isConnected);, +    }, +, +    public void register();, +, +    public void unregister();, +}, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        RequestManager requestManager = RequestManagerRetriever.get(context);, +        return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +interface ConnectivityMonitor {, +, +    public interface ConnectivityListener {, +        public void onConnectivityChanged(boolean isConnected);, +    }, +, +    public void register();, +, +    public void unregister();, +}, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitorFactory.java, +package com.bumptech.glide.manager;, +, +import android.content.Context;, +import android.content.pm.PackageManager;, +, +class ConnectivityMonitorFactory {, +    public ConnectivityMonitor build(Context context, ConnectivityMonitor.ConnectivityListener listener) {, +        int res = context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE");, +        boolean hasPermission = res == PackageManager.PERMISSION_GRANTED;, +        if (hasPermission) {, +            return new DefaultConnectivityMonitor(context, listener);, +        } else {, +            return new NullConnectivityMonitor();, +        }, +    }, +}, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        RequestManager requestManager = RequestManagerRetriever.get(context);, +        return new ModelRequest(context, Glide.get(context), requestManager);, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +interface ConnectivityMonitor {, +, +    public interface ConnectivityListener {, +        public void onConnectivityChanged(boolean isConnected);, +    }, +, +    public void register();, +, +    public void unregister();, +}, +++ b/library/src/main/java/com/bumptech/glide/manager/ConnectivityMonitorFactory.java, +package com.bumptech.glide.manager;, +, +import android.content.Context;, +import android.content.pm.PackageManager;, +, +class ConnectivityMonitorFactory {, +    public ConnectivityMonitor build(Context context, ConnectivityMonitor.ConnectivityListener listener) {, +        int res = context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE");, +        boolean hasPermission = res == PackageManager.PERMISSION_GRANTED;, +        if (hasPermission) {, +            return new DefaultConnectivityMonitor(context, listener);, +        } else {, +            return new NullConnectivityMonitor();, +        }, +    }, +}, +++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java, +package com.bumptech.glide.manager;, +, +import android.content.BroadcastReceiver;, +import android.content.Context;, +import android.content.Intent;, +import android.content.IntentFilter;, +import android.net.ConnectivityManager;, +import android.net.NetworkInfo;, +, +class DefaultConnectivityMonitor implements ConnectivityMonitor {, +    private final Context context;, +    private final ConnectivityListener listener;, +, +    private boolean isConnected;]