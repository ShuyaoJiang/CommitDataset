[+++ b/library/src/com/bumptech/glide/Glide.java, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + * {@link ImageLoader} and {@link com.android.volley.RequestQueue}. This class provides most of the functionality of, + * {@link ImagePresenter} with a simpler but less efficient interface. For more complicated cases it may be worth, + * considering using {@link ImagePresenter} and {@link com.bumptech.glide.presenter.ImagePresenter.Builder} directly., +     * @param context A context to use for Volley, +     * Only certain models are supported by default. See, +     * {@link Glide.Request#with(com.bumptech.glide.loader.model.ModelLoader)} for models with default a, +     * {@link ModelLoader}., +     * </p>, +     *, +     * <p>, +    @SuppressWarnings("unused") //public api, +         * <p>, +         *     Note - This method is required only if you are using a model for which there is no default, +         *     {@link ModelLoader}. You can also optionally use this method to override the default {@link ModelLoader} for, +         *     a model for which there is a default. The defaults are as follows:, +         * <ul>, +         *     <li>{@link String} - {@link StringLoader}. String must be a file path, +         *          (<code>/data/data/com.bumptech/glide/...</code>), a url (<code>http://www.google.com</code>), or a, +         *          uri. </li>, +         *     <li>{@link File} - {@link FileLoader}</li>, +         *     <li>{@link Integer} - {@link DrawableLoader}. Integer must be a resource id in your package</li>, +         *     <li>{@link Uri} - {@link UriLoader}. Uri must be a scheme handled by, +         *     {@link android.content.ContentResolver#openInputStream(android.net.Uri)}, http, or https</li>, +         * </ul>, +         * </p>, +         *, +         * <p>, +         *     Note - If you have the ability to fetch different sized images for a given model, you should supply a, +         *     {@link ModelLoader} here to do so. Fetching a smaller image means less bandwidth, battery, and memory, +         *     usage as well as faster image loads. To simply build a url to download an image using the width and, +         *     the height of the view, consider passing in a subclass of, +         *     {@link com.bumptech.glide.loader.model.VolleyModelLoader}., +         * </p>, +++ b/library/src/com/bumptech/glide/Glide.java, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + * {@link ImageLoader} and {@link com.android.volley.RequestQueue}. This class provides most of the functionality of, + * {@link ImagePresenter} with a simpler but less efficient interface. For more complicated cases it may be worth, + * considering using {@link ImagePresenter} and {@link com.bumptech.glide.presenter.ImagePresenter.Builder} directly., +     * @param context A context to use for Volley, +     * Only certain models are supported by default. See, +     * {@link Glide.Request#with(com.bumptech.glide.loader.model.ModelLoader)} for models with default a, +     * {@link ModelLoader}., +     * </p>, +     *, +     * <p>, +    @SuppressWarnings("unused") //public api, +         * <p>, +         *     Note - This method is required only if you are using a model for which there is no default, +         *     {@link ModelLoader}. You can also optionally use this method to override the default {@link ModelLoader} for, +         *     a model for which there is a default. The defaults are as follows:, +         * <ul>, +         *     <li>{@link String} - {@link StringLoader}. String must be a file path, +         *          (<code>/data/data/com.bumptech/glide/...</code>), a url (<code>http://www.google.com</code>), or a, +         *          uri. </li>, +         *     <li>{@link File} - {@link FileLoader}</li>, +         *     <li>{@link Integer} - {@link DrawableLoader}. Integer must be a resource id in your package</li>, +         *     <li>{@link Uri} - {@link UriLoader}. Uri must be a scheme handled by, +         *     {@link android.content.ContentResolver#openInputStream(android.net.Uri)}, http, or https</li>, +         * </ul>, +         * </p>, +         *, +         * <p>, +         *     Note - If you have the ability to fetch different sized images for a given model, you should supply a, +         *     {@link ModelLoader} here to do so. Fetching a smaller image means less bandwidth, battery, and memory, +         *     usage as well as faster image loads. To simply build a url to download an image using the width and, +         *     the height of the view, consider passing in a subclass of, +         *     {@link com.bumptech.glide.loader.model.VolleyModelLoader}., +         * </p>, +++ b/library/src/com/bumptech/glide/loader/image/BaseImageLoader.java, +    @SuppressWarnings("unused"), +++ b/library/src/com/bumptech/glide/Glide.java, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, + * {@link ImageLoader} and {@link com.android.volley.RequestQueue}. This class provides most of the functionality of, + * {@link ImagePresenter} with a simpler but less efficient interface. For more complicated cases it may be worth, + * considering using {@link ImagePresenter} and {@link com.bumptech.glide.presenter.ImagePresenter.Builder} directly., +     * @param context A context to use for Volley, +     * Only certain models are supported by default. See, +     * {@link Glide.Request#with(com.bumptech.glide.loader.model.ModelLoader)} for models with default a, +     * {@link ModelLoader}., +     * </p>, +     *, +     * <p>, +    @SuppressWarnings("unused") //public api, +         * <p>, +         *     Note - This method is required only if you are using a model for which there is no default, +         *     {@link ModelLoader}. You can also optionally use this method to override the default {@link ModelLoader} for, +         *     a model for which there is a default. The defaults are as follows:, +         * <ul>, +         *     <li>{@link String} - {@link StringLoader}. String must be a file path, +         *          (<code>/data/data/com.bumptech/glide/...</code>), a url (<code>http://www.google.com</code>), or a, +         *          uri. </li>, +         *     <li>{@link File} - {@link FileLoader}</li>, +         *     <li>{@link Integer} - {@link DrawableLoader}. Integer must be a resource id in your package</li>, +         *     <li>{@link Uri} - {@link UriLoader}. Uri must be a scheme handled by, +         *     {@link android.content.ContentResolver#openInputStream(android.net.Uri)}, http, or https</li>, +         * </ul>, +         * </p>, +         *]