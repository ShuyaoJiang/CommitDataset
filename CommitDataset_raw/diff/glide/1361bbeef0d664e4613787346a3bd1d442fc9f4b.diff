[+++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +            return (ModelLoader<T>) new StringLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +            return (ModelLoader<T>) new StringLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +++ b/library/src/com/bumptech/glide/loader/model/StringLoader.java, +import android.webkit.URLUtil;, +import java.net.URL;, +    public StringLoader(Context context, ModelLoader<URL> urlLoader) {, +        uriLoader = new UriLoader(context, urlLoader);, +        final Uri uri;, +        if (!URLUtil.isValidUrl(model)) {, +            uri = Uri.fromFile(new File(model));, +            uri = Uri.parse(model);, +        return uriLoader.buildStreamOpener(uri, width, height);, +++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +            return (ModelLoader<T>) new StringLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +++ b/library/src/com/bumptech/glide/loader/model/StringLoader.java, +import android.webkit.URLUtil;, +import java.net.URL;, +    public StringLoader(Context context, ModelLoader<URL> urlLoader) {, +        uriLoader = new UriLoader(context, urlLoader);, +        final Uri uri;, +        if (!URLUtil.isValidUrl(model)) {, +            uri = Uri.fromFile(new File(model));, +            uri = Uri.parse(model);, +        return uriLoader.buildStreamOpener(uri, width, height);, +++ b/library/src/com/bumptech/glide/loader/model/UriLoader.java, +, +import java.net.MalformedURLException;, +import java.net.URL;, +    private final ModelLoader<URL> urlLoader;, +    public UriLoader(Context context, ModelLoader<URL> urlLoader) {, +        this.urlLoader = urlLoader;, +            try {, +                result = urlLoader.getStreamOpener(new URL(model.toString()), width, height);, +            } catch (MalformedURLException e) {, +                e.printStackTrace();, +            }, +    @Override, +    public void clear() {, +        super.clear();, +        urlLoader.clear();, +    }, +, +++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UriLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +            return (ModelLoader<T>) new StringLoader(context, new UrlLoader(GLIDE.getRequestQueue(context)));, +++ b/library/src/com/bumptech/glide/loader/model/StringLoader.java, +import android.webkit.URLUtil;, +import java.net.URL;, +    public StringLoader(Context context, ModelLoader<URL> urlLoader) {, +        uriLoader = new UriLoader(context, urlLoader);, +        final Uri uri;, +        if (!URLUtil.isValidUrl(model)) {, +            uri = Uri.fromFile(new File(model));, +            uri = Uri.parse(model);, +        return uriLoader.buildStreamOpener(uri, width, height);, +++ b/library/src/com/bumptech/glide/loader/model/UriLoader.java, +, +import java.net.MalformedURLException;, +import java.net.URL;, +    private final ModelLoader<URL> urlLoader;, +    public UriLoader(Context context, ModelLoader<URL> urlLoader) {, +        this.urlLoader = urlLoader;, +            try {, +                result = urlLoader.getStreamOpener(new URL(model.toString()), width, height);, +            } catch (MalformedURLException e) {, +                e.printStackTrace();, +            }, +    @Override, +    public void clear() {, +        super.clear();, +        urlLoader.clear();, +    }, +, +++ /dev/null]