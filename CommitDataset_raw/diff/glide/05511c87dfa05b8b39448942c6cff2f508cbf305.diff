[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.os.HandlerThread;, +import android.os.SystemClock;, +    private final Handler bgHandler;, +    public ImageManager(Context context, Options options) {, +        this(context, new Handler(), options);, +    public ImageManager(Context context, Handler mainHandler, Options options) {, +        this(context, getPhotoCacheDir(context), mainHandler, options);, +    public ImageManager(Context context, File diskCacheDir, Handler mainHandler, Options options) {, +        HandlerThread bgThread = new HandlerThread("image_manager_bg");, +        bgThread.start();, +        bgHandler = new Handler(bgThread.getLooper());, +, +    public Object getImage(final String path, final LoadedCallback cb){, +    public Object getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    public void cancelTask(Object token) {, +        if (token != null), +            bgHandler.removeCallbacksAndMessages(token);, +, +, +    private Object runJob(String key,final LoadedCallback cb, final ImageManagerJob job) {, +        final Object token = cb;, +        if (!returnFromCache(key, cb)) {, +            bgHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +        }, +        return token;, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.os.HandlerThread;, +import android.os.SystemClock;, +    private final Handler bgHandler;, +    public ImageManager(Context context, Options options) {, +        this(context, new Handler(), options);, +    public ImageManager(Context context, Handler mainHandler, Options options) {, +        this(context, getPhotoCacheDir(context), mainHandler, options);, +    public ImageManager(Context context, File diskCacheDir, Handler mainHandler, Options options) {, +        HandlerThread bgThread = new HandlerThread("image_manager_bg");, +        bgThread.start();, +        bgHandler = new Handler(bgThread.getLooper());, +, +    public Object getImage(final String path, final LoadedCallback cb){, +    public Object getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    public void cancelTask(Object token) {, +        if (token != null), +            bgHandler.removeCallbacksAndMessages(token);, +, +, +    private Object runJob(String key,final LoadedCallback cb, final ImageManagerJob job) {, +        final Object token = cb;, +        if (!returnFromCache(key, cb)) {, +            bgHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +        }, +        return token;, +++ b/library/src/com/bumptech/photos/resize/loader/Approximate.java, +    protected Object doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.os.HandlerThread;, +import android.os.SystemClock;, +    private final Handler bgHandler;, +    public ImageManager(Context context, Options options) {, +        this(context, new Handler(), options);, +    public ImageManager(Context context, Handler mainHandler, Options options) {, +        this(context, getPhotoCacheDir(context), mainHandler, options);, +    public ImageManager(Context context, File diskCacheDir, Handler mainHandler, Options options) {, +        HandlerThread bgThread = new HandlerThread("image_manager_bg");, +        bgThread.start();, +        bgHandler = new Handler(bgThread.getLooper());, +, +    public Object getImage(final String path, final LoadedCallback cb){, +    public Object getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Object fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    public void cancelTask(Object token) {, +        if (token != null), +            bgHandler.removeCallbacksAndMessages(token);, +, +, +    private Object runJob(String key,final LoadedCallback cb, final ImageManagerJob job) {, +        final Object token = cb;, +        if (!returnFromCache(key, cb)) {, +            bgHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +        }, +        return token;, +++ b/library/src/com/bumptech/photos/resize/loader/Approximate.java, +    protected Object doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/loader/AsIs.java, +    protected Object doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import android.os.HandlerThread;, +import android.os.SystemClock;, +    private final Handler bgHandler;, +    public ImageManager(Context context, Options options) {, +        this(context, new Handler(), options);, +    public ImageManager(Context context, Handler mainHandler, Options options) {]