[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import java.io.File;, +import java.util.HashMap;, +import java.util.Map;, +, +      Map<Class<?>, List<? extends Class<?>>> dataClassToResourceClasses = new HashMap<>();, +      Map<Class<?>, List<Class<Transcode>>> resourceClassToTranscodeClasses = new HashMap<>();, +, +, +        dataClassToResourceClasses.put(dataClass, registeredResourceClasses);, +, +, +          List<Class<Transcode>> registeredTranscodeClasses =, +              transcoderRegistry.getTranscodeClasses(registeredResourceClass, transcodeClass);, +, +          resourceClassToTranscodeClasses.put(registeredResourceClass, registeredTranscodeClasses);, +, +, +      // Throw the exception before populating the cache in the hopes that a subsequent attempt will, +      // succeed and only one request will randomly fail. This is really debugging logic that should, +      // go away when we find the actual cause for b/73882030., +      if (result.isEmpty() && !File.class.equals(transcodeClass)) {, +        if (dataClasses.isEmpty()) {, +          throw new IllegalStateException("Failed to find any data classes for: " + modelClass);, +        }, +, +        throw new IllegalStateException(, +            "Failed to find any resource or transcode classes for model: " + modelClass, +                + ", data to resource classes: " + dataClassToResourceClasses, +                + ", resource to transcode classes: " + resourceClassToTranscodeClasses);, +      }, +, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import java.io.File;, +import java.util.HashMap;, +import java.util.Map;, +, +      Map<Class<?>, List<? extends Class<?>>> dataClassToResourceClasses = new HashMap<>();, +      Map<Class<?>, List<Class<Transcode>>> resourceClassToTranscodeClasses = new HashMap<>();, +, +, +        dataClassToResourceClasses.put(dataClass, registeredResourceClasses);, +, +, +          List<Class<Transcode>> registeredTranscodeClasses =, +              transcoderRegistry.getTranscodeClasses(registeredResourceClass, transcodeClass);, +, +          resourceClassToTranscodeClasses.put(registeredResourceClass, registeredTranscodeClasses);, +, +, +      // Throw the exception before populating the cache in the hopes that a subsequent attempt will, +      // succeed and only one request will randomly fail. This is really debugging logic that should, +      // go away when we find the actual cause for b/73882030., +      if (result.isEmpty() && !File.class.equals(transcodeClass)) {, +        if (dataClasses.isEmpty()) {, +          throw new IllegalStateException("Failed to find any data classes for: " + modelClass);, +        }, +, +        throw new IllegalStateException(, +            "Failed to find any resource or transcode classes for model: " + modelClass, +                + ", data to resource classes: " + dataClassToResourceClasses, +                + ", resource to transcode classes: " + resourceClassToTranscodeClasses);, +      }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, +      throw new IllegalStateException(, +         "Failed to find any load path from " + helper.getModelClass() + " to ", +             + helper.getTranscodeClass());]