[+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/GlideDrawable.java, +    /** A constant indicating that an animated drawable should loop continuously. */, +    public static final int LOOP_FOREVER = -1;, +    /**, +     * A constant indicating that an animated drawable should loop for its default number of times. For animated GIFs,, +     * this constant indicates the GIF should use the netscape loop count if present., +     */, +    public static final int LOOP_INTRINSIC = 0;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/GlideDrawable.java, +    /** A constant indicating that an animated drawable should loop continuously. */, +    public static final int LOOP_FOREVER = -1;, +    /**, +     * A constant indicating that an animated drawable should loop for its default number of times. For animated GIFs,, +     * this constant indicates the GIF should use the netscape loop count if present., +     */, +    public static final int LOOP_INTRINSIC = 0;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +public class GifDrawable extends GlideDrawable implements GifFrameManager.FrameCallback {, +    /** The current frame to draw, or null if no frame has been loaded yet. */, +    /** True if the drawable is currently animating. */, +    /** True if the drawable should animate while visible. */, +    /** True if the drawable's resources have been recycled. */, +    /** The number of times we've looped over all the frames in the gif. */, +    private int loopCount;, +    /** The number of times to loop through the gif animation. */, +    private int maxLoopCount = LOOP_FOREVER;, +    private void resetLoopCount() {, +        loopCount = 0;, +    }, +, +        resetLoopCount();, +    public void onFrameRead(Bitmap frame, int frameIndex) {, +        if (frameIndex == decoder.getFrameCount() - 1) {, +            loopCount++;, +        }, +, +        if (maxLoopCount != LOOP_FOREVER && loopCount >= maxLoopCount) {, +            stop();, +        } else {, +    }, +    @Override, +    public boolean isAnimated() {, +        return true;, +    }, +, +    @Override, +    public void setLoopCount(int loopCount) {, +        if (loopCount <= 0 && loopCount != LOOP_FOREVER && loopCount != LOOP_INTRINSIC) {, +            throw new IllegalArgumentException("Loop count must be greater than 0, or equal to ", +                    + "GlideDrawable.LOOP_FOREVER, or equal to GlideDrawable.LOOP_INTRINSIC");, +        }, +, +        if (loopCount == LOOP_INTRINSIC) {, +            maxLoopCount = decoder.getLoopCount();, +        } else {, +            maxLoopCount = loopCount;, +        }, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/GlideDrawable.java, +    /** A constant indicating that an animated drawable should loop continuously. */, +    public static final int LOOP_FOREVER = -1;, +    /**, +     * A constant indicating that an animated drawable should loop for its default number of times. For animated GIFs,, +     * this constant indicates the GIF should use the netscape loop count if present., +     */, +    public static final int LOOP_INTRINSIC = 0;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +public class GifDrawable extends GlideDrawable implements GifFrameManager.FrameCallback {, +    /** The current frame to draw, or null if no frame has been loaded yet. */, +    /** True if the drawable is currently animating. */, +    /** True if the drawable should animate while visible. */, +    /** True if the drawable's resources have been recycled. */, +    /** The number of times we've looped over all the frames in the gif. */, +    private int loopCount;, +    /** The number of times to loop through the gif animation. */, +    private int maxLoopCount = LOOP_FOREVER;, +    private void resetLoopCount() {, +        loopCount = 0;, +    }, +, +        resetLoopCount();, +    public void onFrameRead(Bitmap frame, int frameIndex) {, +        if (frameIndex == decoder.getFrameCount() - 1) {, +            loopCount++;, +        }, +, +        if (maxLoopCount != LOOP_FOREVER && loopCount >= maxLoopCount) {, +            stop();, +        } else {, +    }, +    @Override, +    public boolean isAnimated() {, +        return true;, +    }, +, +    @Override, +    public void setLoopCount(int loopCount) {]