[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateAnnotatedNonNull(executableElement);, +    validateNewGlideTypeAnnotations(executableElement);, +  private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {, +    validateAnnotatedNonNull(executableElement);, +  }, +, +  private void validateAnnotatedNonNull(ExecutableElement executableElement) {, +    Set<String> annotationNames =, +        FluentIterable.from(executableElement.getAnnotationMirrors()), +            .transform(new Function<AnnotationMirror, String>() {, +              @Override, +              public String apply(AnnotationMirror input) {, +                return input.getAnnotationType().asElement().toString();, +              }, +            }), +            .toSet();, +    if (!annotationNames.contains("android.support.annotation.NonNull")) {, +      processingEnvironment.getMessager().printMessage(, +          Kind.WARNING,, +          executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), +              + " is missing the @NonNull annotation,", +              + " please add it to ensure that your extension methods are always returning non-null", +              + " values");, +    }, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateAnnotatedNonNull(executableElement);, +    validateNewGlideTypeAnnotations(executableElement);, +  private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {, +    validateAnnotatedNonNull(executableElement);, +  }, +, +  private void validateAnnotatedNonNull(ExecutableElement executableElement) {, +    Set<String> annotationNames =, +        FluentIterable.from(executableElement.getAnnotationMirrors()), +            .transform(new Function<AnnotationMirror, String>() {, +              @Override, +              public String apply(AnnotationMirror input) {, +                return input.getAnnotationType().asElement().toString();, +              }, +            }), +            .toSet();, +    if (!annotationNames.contains("android.support.annotation.NonNull")) {, +      processingEnvironment.getMessager().printMessage(, +          Kind.WARNING,, +          executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), +              + " is missing the @NonNull annotation,", +              + " please add it to ensure that your extension methods are always returning non-null", +              + " values");, +    }, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final ClassName NON_NULL_CLASS_NAME =, +      ClassName.get("android.support.annotation", "NonNull");, +        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build()), +        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateAnnotatedNonNull(executableElement);, +    validateNewGlideTypeAnnotations(executableElement);, +  private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {, +    validateAnnotatedNonNull(executableElement);, +  }, +, +  private void validateAnnotatedNonNull(ExecutableElement executableElement) {, +    Set<String> annotationNames =, +        FluentIterable.from(executableElement.getAnnotationMirrors()), +            .transform(new Function<AnnotationMirror, String>() {, +              @Override, +              public String apply(AnnotationMirror input) {, +                return input.getAnnotationType().asElement().toString();, +              }, +            }), +            .toSet();, +    if (!annotationNames.contains("android.support.annotation.NonNull")) {, +      processingEnvironment.getMessager().printMessage(, +          Kind.WARNING,, +          executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName(), +              + " is missing the @NonNull annotation,", +              + " please add it to ensure that your extension methods are always returning non-null", +              + " values");, +    }, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final ClassName NON_NULL_CLASS_NAME =, +      ClassName.get("android.support.annotation", "NonNull");, +        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build()), +        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build()), +++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java, +                    "import android.support.annotation.NonNull;",, +                    "  @NonNull",, +, +  @Test, +  public void compilation_withAnnotatedStaticMethod_returningRequestBuilder_missingNonNull_warns() {, +    Compilation compilation =, +        javac(), +            .withProcessors(new GlideAnnotationProcessor())]