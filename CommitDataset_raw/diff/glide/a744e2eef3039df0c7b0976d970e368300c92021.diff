[+++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +import java.util.concurrent.Future;, +    private Future current;, +        clear();, +        current = flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +, +    @Override, +    public void clear() {, +        super.clear();, +        if (current != null) {, +            current.cancel(false);, +            current = null;, +        }, +    }, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +import java.util.concurrent.Future;, +    private Future current;, +        clear();, +        current = flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +, +    @Override, +    public void clear() {, +        super.clear();, +        if (current != null) {, +            current.cancel(false);, +            current = null;, +        }, +    }, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import java.util.concurrent.Future;, +    public Future downloadPhoto(Photo photo, File cacheDir, final PhotoCallback cb) {, +        Future result = null;, +            result = downloader.download(getPhotoUrl(photo, sizeKey), out, new Downloader.DiskCallback() {, +        return result;, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPathLoader.java, +import java.util.concurrent.Future;, +    private Future current;, +        clear();, +        current = flickrApi.downloadPhoto(model, cacheDir, new Api.PhotoCallback() {, +, +    @Override, +    public void clear() {, +        super.clear();, +        if (current != null) {, +            current.cancel(false);, +            current = null;, +        }, +    }, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import java.util.concurrent.Future;, +    public Future downloadPhoto(Photo photo, File cacheDir, final PhotoCallback cb) {, +        Future result = null;, +            result = downloader.download(getPhotoUrl(photo, sizeKey), out, new Downloader.DiskCallback() {, +        return result;, +++ b/samples/flickr/src/com/bumptech/flickr/api/Downloader.java, +import java.util.concurrent.Future;, +    private Future post(Runnable runnable) {, +        return executor.submit(runnable);, +    public Future download(String url, File out, DiskCallback cb) {, +        return post(new DiskDownloadWorker(url, out, cb));]