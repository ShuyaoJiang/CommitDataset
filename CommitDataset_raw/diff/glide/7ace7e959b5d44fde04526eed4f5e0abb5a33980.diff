[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +         if (modelClass == null) {, +            if (Log.isLoggable(TAG, Log.DEBUG)) {, +                Log.d(TAG, "Unable to load null model, setting placeholder only");, +            }, +            return null;, +        }, +        return buildModelLoader(model != null ? (Class<T>) model.getClass() : null, resourceClass, context);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +         if (modelClass == null) {, +            if (Log.isLoggable(TAG, Log.DEBUG)) {, +                Log.d(TAG, "Unable to load null model, setting placeholder only");, +            }, +            return null;, +        }, +        return buildModelLoader(model != null ? (Class<T>) model.getClass() : null, resourceClass, context);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +     * Returns a request builder to load the given {@link java.lang.String}., +     * @see #fromString(), +     * @see #load(Object), +     *, +     * @param string A file path, or a uri or url handled by {@link com.bumptech.glide.load.model.UriLoader}., +     */, +    public DrawableTypeRequest<String> load(String string) {, +        return (DrawableTypeRequest<String>) fromString().load(string);, +    }, +, +    /**, +     * Returns a request builder that loads data from {@link String}s using an empty signature., +     *, +     * @see #from(Class), +     * @see #load(String), +    public DrawableTypeRequest<String> fromString() {, +        return loadGeneric(String.class);, +     * Returns a request builder to load the given {@link Uri}., +     *, +     * @see #fromUri(), +     * @see #load(Object), +     *, +     * @param uri The Uri representing the image. Must be of a type handled by, +     * {@link com.bumptech.glide.load.model.UriLoader}., +     */, +    public DrawableTypeRequest<Uri> load(Uri uri) {, +        return (DrawableTypeRequest<Uri>) fromUri().load(uri);, +    }, +, +    /**, +     * Returns a request builder to load data from {@link android.net.Uri}s using no signature., +     * @see #from(Class), +    public DrawableTypeRequest<Uri> fromUri() {, +        return loadGeneric(Uri.class);, +        return (DrawableTypeRequest<Uri>) loadFromMediaStore(uri).signature(signature);, +    }, +, +    /**, +     * Returns a request builder to load the given media store {@link android.net.Uri}., +     *, +     * @see #fromMediaStore(), +     * @see #load(Object), +     *, +     * @param uri The uri representing the media., +     */, +    public DrawableTypeRequest<Uri> loadFromMediaStore(Uri uri) {, +        return (DrawableTypeRequest<Uri>) fromMediaStore().load(uri);, +     * {@link android.provider.MediaStore.Video.Thumbnails} to retrieve pre-generated thumbnails for, +     * {@link android.net.Uri}s., +     * @see #from(Class), +    public DrawableTypeRequest<Uri> fromMediaStore() {, +        ModelLoader<Uri, InputStream> genericStreamLoader = Glide.buildStreamModelLoader(Uri.class, context);, +        ModelLoader<Uri, ParcelFileDescriptor> fileDescriptorModelLoader =, +                Glide.buildFileDescriptorModelLoader(Uri.class, context);, +        return optionsApplier.apply(new DrawableTypeRequest<Uri>(Uri.class, mediaStoreLoader,, +                fileDescriptorModelLoader, context, glide, requestTracker, lifecycle, optionsApplier));, +    }, +, +    /**, +     * Returns a request builder to load the given {@link File}., +     *, +     * @see #fromFile(), +     * @see #load(Object), +     *, +     * @param file The File containing the image, +     */, +    public DrawableTypeRequest<File> load(File file) {, +        return (DrawableTypeRequest<File>) fromFile().load(file);, +     * {@link com.bumptech.glide.load.model.stream.StreamFileLoader} to load images from {@link File}s., +     * @see #from(Class), +    public DrawableTypeRequest<File> fromFile() {, +        return loadGeneric(File.class);, +    }, +, +    /**, +     * Returns a request builder to load the given resource id., +     *, +     * @see #fromResource(), +     * @see #load(Object), +     *]