[+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java, +import com.bumptech.glide.request.target.SizeReadyCallback;, +public class RequestFutureTarget<T, R> implements FutureTarget<R>, Runnable {, +    private static final Waiter DEFAULT_WAITER = new DefaultWaiter();, +, +    private final Waiter waiter;, +        this(mainHandler, width, height, true, DEFAULT_WAITER);, +    RequestFutureTarget(Handler mainHandler, int width, int height, boolean assertBackgroundThread, Waiter waiter) {, +        this.waiter = waiter;, +            waiter.notifyAll(this);, +    public void onLoadCleared(Drawable placeholder) {, +    public void onLoadStarted(Drawable placeholder) {, +    /**, +     * A callback that should never be invoked directly., +     */, +    @Override, +    public synchronized void onLoadFailed(Exception e, Drawable errorDrawable) {, +         // We might get a null exception., +        exceptionReceived = true;, +        this.exception = e;, +        waiter.notifyAll(this);, +    }, +, +    /**, +     * A callback that should never be invoked directly., +     */, +    @Override, +    public synchronized void onResourceReady(R resource, GlideAnimation<R> glideAnimation) {, +        // We might get a null result., +        resultReceived = true;, +        this.resource = resource;, +        waiter.notifyAll(this);, +    }, +, +            waiter.waitForTimeout(this, 0);, +            waiter.waitForTimeout(this, timeoutMillis);, +, +    interface Waiter {, +        public void waitForTimeout(Object toWaitOn, long timeoutMillis) throws InterruptedException;, +, +        public void notifyAll(Object toNotify);, +    }, +, +    private static class DefaultWaiter implements Waiter {, +, +        @Override, +        public void waitForTimeout(Object toWaitOn, long timeoutMillis) throws InterruptedException {, +            toWaitOn.wait(timeoutMillis);, +        }, +, +        @Override, +        public void notifyAll(Object toNotify) {, +            toNotify.notifyAll();, +        }, +    }, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java, +import com.bumptech.glide.request.target.SizeReadyCallback;, +public class RequestFutureTarget<T, R> implements FutureTarget<R>, Runnable {, +    private static final Waiter DEFAULT_WAITER = new DefaultWaiter();, +, +    private final Waiter waiter;, +        this(mainHandler, width, height, true, DEFAULT_WAITER);, +    RequestFutureTarget(Handler mainHandler, int width, int height, boolean assertBackgroundThread, Waiter waiter) {, +        this.waiter = waiter;, +            waiter.notifyAll(this);, +    public void onLoadCleared(Drawable placeholder) {, +    public void onLoadStarted(Drawable placeholder) {, +    /**, +     * A callback that should never be invoked directly., +     */, +    @Override, +    public synchronized void onLoadFailed(Exception e, Drawable errorDrawable) {, +         // We might get a null exception., +        exceptionReceived = true;, +        this.exception = e;, +        waiter.notifyAll(this);, +    }, +, +    /**, +     * A callback that should never be invoked directly., +     */, +    @Override, +    public synchronized void onResourceReady(R resource, GlideAnimation<R> glideAnimation) {, +        // We might get a null result., +        resultReceived = true;, +        this.resource = resource;, +        waiter.notifyAll(this);, +    }, +, +            waiter.waitForTimeout(this, 0);, +            waiter.waitForTimeout(this, timeoutMillis);, +, +    interface Waiter {, +        public void waitForTimeout(Object toWaitOn, long timeoutMillis) throws InterruptedException;, +, +        public void notifyAll(Object toNotify);, +    }, +, +    private static class DefaultWaiter implements Waiter {, +]