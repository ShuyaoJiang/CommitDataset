[+++ b/library/lint.xml, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.os.Build;, + * A strategy for reusing bitmaps that relies on {@link Bitmap#reconfigure(int, int, Bitmap.Config)}., + * Requires {@link Build.VERSION_CODES#KITKAT KitKat} (API {@value Build.VERSION_CODES#KITKAT}) or higher., +@TargetApi(Build.VERSION_CODES.KITKAT), +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.os.Build;, + * A strategy for reusing bitmaps that relies on {@link Bitmap#reconfigure(int, int, Bitmap.Config)}., + * Requires {@link Build.VERSION_CODES#KITKAT KitKat} (API {@value Build.VERSION_CODES#KITKAT}) or higher., +@TargetApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java, +import android.annotation.SuppressLint;, +, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.os.Build;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +import android.annotation.SuppressLint;, +    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1), +            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java, +import android.os.Build;, + * A strategy for reusing bitmaps that relies on {@link Bitmap#reconfigure(int, int, Bitmap.Config)}., + * Requires {@link Build.VERSION_CODES#KITKAT KitKat} (API {@value Build.VERSION_CODES#KITKAT}) or higher., +@TargetApi(Build.VERSION_CODES.KITKAT), +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java, +import android.annotation.SuppressLint;, +, +    @SuppressLint("InlinedApi"), +        if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {, +        } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +    @TargetApi(Build.VERSION_CODES.KITKAT), +        return sdkInt < Build.VERSION_CODES.HONEYCOMB, +                || (sdkInt >= Build.VERSION_CODES.KITKAT && activityManager.isLowRamDevice());, +++ b/library/lint.xml, +++ b/library/src/main/java/com/bumptech/glide/Glide.java]