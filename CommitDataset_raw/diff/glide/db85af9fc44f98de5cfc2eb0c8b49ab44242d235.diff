[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/GlideDrawableImageViewTargetTest.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.drawable.BitmapDrawable;, +import android.graphics.drawable.Drawable;, +import android.widget.ImageView;, +, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class GlideDrawableImageViewTargetTest {, +, +    @Test, +    public void testSetsDrawableOnViewInSetResource() {, +        ImageView view = new ImageView(Robolectric.application);, +        GlideDrawableImageViewTarget target = new GlideDrawableImageViewTarget(view);, +        GlideDrawable expected = new MockAnimatedDrawable();, +, +        target.setResource(expected);, +, +        assertEquals(expected, view.getDrawable());, +    }, +, +    @Test, +    public void testWrapsDrawableInSquaringDrawableIfDrawableAndViewAreSquare() {, +        ImageView mockView = mock(ImageView.class);, +        when(mockView.getWidth()).thenReturn(100);, +        when(mockView.getHeight()).thenReturn(100);, +        GlideDrawableImageViewTarget target = new GlideDrawableImageViewTarget(mockView);, +        GlideDrawable drawable = new MockAnimatedDrawable() {, +            @Override, +            public int getIntrinsicHeight() {, +                return 100;, +            }, +, +            @Override, +            public int getIntrinsicWidth() {, +                return 100;, +            }, +        };, +, +, +        target.onResourceReady(drawable, null);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Drawable drawable = (Drawable) invocation.getArguments()[0];, +                assertTrue(drawable instanceof SquaringDrawable);, +                return null;, +            }, +        }).when(mockView).setImageDrawable(any(Drawable.class));, +        verify(mockView).setImageDrawable(any(BitmapDrawable.class));, +    }, +, +    @Test, +    public void testDoesNotWrapInSquaringDrawableIfDrawableIsAnimated() {, +        ImageView mockView = mock(ImageView.class);, +        when(mockView.getWidth()).thenReturn(100);, +        when(mockView.getHeight()).thenReturn(100);, +        GlideDrawableImageViewTarget target = new GlideDrawableImageViewTarget(mockView);, +        GlideDrawable drawable = new MockAnimatedDrawable() {, +            @Override, +            public int getIntrinsicHeight() {, +                return 100;, +            }, +, +            @Override, +            public int getIntrinsicWidth() {, +                return 100;, +            }, +        };, +         target.onResourceReady(drawable, null);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Drawable drawable = (Drawable) invocation.getArguments()[0];, +                assertFalse(drawable instanceof SquaringDrawable);, +                return null;]