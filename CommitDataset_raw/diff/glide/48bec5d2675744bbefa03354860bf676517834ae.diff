[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final Handler mainHandler = new Handler();, +    private final ExecutorService executor;, +        this(context, Executors.newFixedThreadPool(Math.max(1, Runtime.getRuntime().availableProcessors())), options);, +     * @param resizeService An executor service that will be used to resize photos, +     * @param options The specified option, +    public ImageManager(Context context, ExecutorService resizeService, Options options) {, +        this(context, getPhotoCacheDir(context), resizeService, options);, +     * @param resizeService An executor service that will be used to resize photos, +    public ImageManager(Context context, File diskCacheDir, ExecutorService resizeService, Options options) {, +        HandlerThread bgThread = new HandlerThread("bg_thread");, +        executor = resizeService;, +        final Bitmap bitmap = b;, +        final int hashCode = b.hashCode();, +        synchronized (bitmapReferenceCounter) {, +            Integer currentCount = bitmapReferenceCounter.get(hashCode);, +                bitmapReferenceCounter.remove(hashCode);, +                bitmapCache.put(bitmap);, +        final int hashCode = b.hashCode();, +        synchronized (bitmapReferenceCounter) {, +            Integer currentCount = bitmapReferenceCounter.get(hashCode);, +            bitmapReferenceCounter.put(hashCode, currentCount + 1);, +        }, +        final Bitmap bitmap = b;, +        final int hash = b.hashCode();, +        synchronized (bitmapReferenceCounter) {, +            Integer currentCount = bitmapReferenceCounter.get(hash) - 1;, +                bitmapReferenceCounter.remove(hash);, +                bitmapCache.put(bitmap);, +                bitmapReferenceCounter.put(hash, currentCount);, +            }, +        if (token != null) {, +            ImageManagerJob job = (ImageManagerJob) token;, +            job.cancel();, +        }, +    public void shutdown() {, +        executor.shutdown();, +        bgHandler.getLooper().quit();, +    }, +        final Object token = job;, +            job.execute();, +        private Future future = null;, +        private volatile boolean cancelled = false;, +        public void execute() {, +            bgHandler.post(this);, +        }, +, +        public void cancel() {, +            if (cancelled) return;, +            cancelled = true;, +, +            if (bgHandler != null) {, +                bgHandler.removeCallbacks(this);, +            }, +            if (future != null) {, +                future.cancel(false);, +            }, +        }, +, +            if (cancelled) return;, +, +                    result = resizer.loadAsIs(path);, +                if (cancelled) return;, +                    future = executor.submit(new Runnable() {, +                        @Override, +                        public void run() {, +                            Bitmap result = resizeIfNotFound();, +                            finishResize(result, isInDiskCache);, +                        }, +                    });, +            } else {, +                finishResize(result, isInDiskCache);, +            }, +        private void finishResize(Bitmap result, boolean isInDiskCache) {, +                putInMemoryCache(key, finalResult);, +, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final Handler mainHandler = new Handler();, +    private final ExecutorService executor;, +        this(context, Executors.newFixedThreadPool(Math.max(1, Runtime.getRuntime().availableProcessors())), options);, +     * @param resizeService An executor service that will be used to resize photos, +     * @param options The specified option, +    public ImageManager(Context context, ExecutorService resizeService, Options options) {, +        this(context, getPhotoCacheDir(context), resizeService, options);, +     * @param resizeService An executor service that will be used to resize photos, +    public ImageManager(Context context, File diskCacheDir, ExecutorService resizeService, Options options) {, +        HandlerThread bgThread = new HandlerThread("bg_thread");, +        executor = resizeService;, +        final Bitmap bitmap = b;, +        final int hashCode = b.hashCode();, +        synchronized (bitmapReferenceCounter) {, +            Integer currentCount = bitmapReferenceCounter.get(hashCode);, +                bitmapReferenceCounter.remove(hashCode);, +                bitmapCache.put(bitmap);]