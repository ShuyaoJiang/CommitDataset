[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.data.bytes.BytesResource;, +import com.bumptech.glide.load.data.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import static org.mockito.Matchers.anyObject;, +        Glide.with(getContext()).loadFromImage(url).into(target);, +        verify(target).onResourceReady(any(Resource.class));, +        verify(target).setRequest((Request) notNull());, +, +    public void testAsBitmapOption() {, +        Uri uri = Uri.parse("content://something/else");, +        mockUri(uri);, +, +        Glide.with(getContext()).load(uri).asBitmap().into(target);, +, +        verify(target).onResourceReady(any(Bitmap.class));, +    }, +, +    @Test, +    public void testTranscodeOption() {, +        Uri uri = Uri.parse("content://something/else");, +        mockUri(uri);, +        final byte[] bytes = new byte[0];, +, +        Glide.with(getContext()).load(uri).transcode(byte[].class, new ResourceTranscoder<Bitmap, byte[]>() {, +            @Override, +            public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {, +                return new BytesResource(bytes);, +            }, +, +            @Override, +            public String getId() {, +                return "bytes";, +            }, +        }).into(target);, +, +        verify(target).onResourceReady(eq(bytes));, +    }, +, +    @Test, +    public void testToBytesOption() {, +        Uri uri = Uri.parse("content://something/else");, +        mockUri(uri);, +, +        Glide.with(getContext()).load(uri).toBytes().into(target);, +, +        verify(target).onResourceReady(any(byte[].class));, +    }, +, +    @Test, +        verify(target).onResourceReady(anyObject());, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.data.bytes.BytesResource;, +import com.bumptech.glide.load.data.transcode.ResourceTranscoder;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import static org.mockito.Matchers.anyObject;, +        Glide.with(getContext()).loadFromImage(url).into(target);, +        verify(target).onResourceReady(any(Resource.class));, +        verify(target).setRequest((Request) notNull());, +, +    public void testAsBitmapOption() {, +        Uri uri = Uri.parse("content://something/else");, +        mockUri(uri);, +, +        Glide.with(getContext()).load(uri).asBitmap().into(target);, +, +        verify(target).onResourceReady(any(Bitmap.class));, +    }, +, +    @Test, +    public void testTranscodeOption() {, +        Uri uri = Uri.parse("content://something/else");, +        mockUri(uri);, +        final byte[] bytes = new byte[0];, +, +        Glide.with(getContext()).load(uri).transcode(byte[].class, new ResourceTranscoder<Bitmap, byte[]>() {, +            @Override, +            public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {, +                return new BytesResource(bytes);, +            }, +, +            @Override, +            public String getId() {, +                return "bytes";, +            }, +        }).into(target);, +, +        verify(target).onResourceReady(eq(bytes));, +    }, +]