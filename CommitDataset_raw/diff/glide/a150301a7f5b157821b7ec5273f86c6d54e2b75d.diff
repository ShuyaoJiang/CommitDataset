[+++ b/library/build.gradle, +    api "com.android.support:animated-vector-drawable:${ANDROID_SUPPORT_VERSION}", +++ b/library/build.gradle, +    api "com.android.support:animated-vector-drawable:${ANDROID_SUPPORT_VERSION}", +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +import android.support.graphics.drawable.Animatable2Compat;, +import java.util.ArrayList;, +import java.util.List;, +    Animatable, Animatable2Compat {, +   * Callbacks to notify loop completion of a gif, where the loop count is explicitly specified., +   */, +  private List<AnimationCallback> animationCallbacks;, +, +  /**, +      notifyAnimationEndToListeners();, +  private void notifyAnimationEndToListeners() {, +    if (animationCallbacks != null) {, +      for (int i = 0, size = animationCallbacks.size(); i < size; i++) {, +        animationCallbacks.get(i).onAnimationEnd(this);, +      }, +    }, +  }, +, +  /**, +   * Register callback to listen to GifDrawable animation end event after specific loop count, +   * set by {@link GifDrawable#setLoopCount(int)}., +   *, +   * Note: This will only be called if the Gif stop because it reaches the loop count. Unregister, +   * this in onLoadCleared to avoid potential memory leak., +   * @see GifDrawable#unregisterAnimationCallback(AnimationCallback)., +   *, +   * @param animationCallback Animation callback {@link Animatable2Compat.AnimationCallback}., +   */, +  @Override, +  public void registerAnimationCallback(@NonNull AnimationCallback animationCallback) {, +    if (animationCallback == null) {, +      return;, +    }, +    if (animationCallbacks == null) {, +      animationCallbacks = new ArrayList<>();, +    }, +    animationCallbacks.add(animationCallback);, +  }, +, +  @Override, +  public boolean unregisterAnimationCallback(@NonNull AnimationCallback animationCallback) {, +    if (animationCallbacks == null || animationCallback == null) {, +      return false;, +    }, +    return animationCallbacks.remove(animationCallback);, +  }, +, +  @Override, +  public void clearAnimationCallbacks() {, +    if (animationCallbacks != null) {, +      animationCallbacks.clear();, +    }, +  }, +]