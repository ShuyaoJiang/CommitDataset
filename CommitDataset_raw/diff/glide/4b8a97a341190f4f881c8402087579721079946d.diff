[+++ b/build.gradle, +// Generate javadocs and sources containing batched documentation and sources for all subprojects., +    // Get the variant from each subproject that matches our current variant name., +    // Collect the source files from all android and java subprojects, +    def sourceFiles = childEquivalentChildVariants.collect { it.javaCompile.source } +, +                      javaProjects.collect { it.sourceSets.main.allJava }, +, +    task("${variant.name}SourceJar", type: Jar) {, +      classifier = 'sources', +      from sourceFiles, +    }, +, +    def cleanJavadocTask = task("clean${variant.name.capitalize()}Javadoc", type: Delete) {, +        delete destinationDirPath, +    }, +    clean.dependsOn(cleanJavadocTask), +, +    def javadocTask = task("${variant.name}Javadoc", type: Javadoc) {, +        classifier = 'javadoc', +, +        source = sourceFiles, +, +, +    def javadocJarTask = task("${variant.name}JavadocJar", type: Jar) {, +      classifier = 'javadoc', +      from javadocTask.destinationDir, +    }, +    javadocJarTask.dependsOn(javadocTask), +jar {, +    if (!project.getPlugins().hasPlugin('android')) {, +        jar.dependsOn(project.build), +    }, +    archives releaseJavadocJar, +    archives releaseSourceJar, +, +apply from: "$rootProject.projectDir/scripts/upload.gradle", +++ b/build.gradle, +// Generate javadocs and sources containing batched documentation and sources for all subprojects., +    // Get the variant from each subproject that matches our current variant name., +    // Collect the source files from all android and java subprojects, +    def sourceFiles = childEquivalentChildVariants.collect { it.javaCompile.source } +, +                      javaProjects.collect { it.sourceSets.main.allJava }, +, +    task("${variant.name}SourceJar", type: Jar) {, +      classifier = 'sources', +      from sourceFiles, +    }, +, +    def cleanJavadocTask = task("clean${variant.name.capitalize()}Javadoc", type: Delete) {, +        delete destinationDirPath, +    }, +    clean.dependsOn(cleanJavadocTask), +, +    def javadocTask = task("${variant.name}Javadoc", type: Javadoc) {, +        classifier = 'javadoc', +, +        source = sourceFiles, +, +, +    def javadocJarTask = task("${variant.name}JavadocJar", type: Jar) {, +      classifier = 'javadoc', +      from javadocTask.destinationDir, +    }, +    javadocJarTask.dependsOn(javadocTask), +jar {, +    if (!project.getPlugins().hasPlugin('android')) {, +        jar.dependsOn(project.build), +    }, +    archives releaseJavadocJar, +    archives releaseSourceJar, +, +apply from: "$rootProject.projectDir/scripts/upload.gradle", +++ b/gradle.properties, +VERSION_MINOR=3, +POM_NAME=Glide Library, +POM_ARTIFACT_ID=library, +POM_PACKAGING=jar, +, +++ b/build.gradle, +// Generate javadocs and sources containing batched documentation and sources for all subprojects., +    // Get the variant from each subproject that matches our current variant name., +    // Collect the source files from all android and java subprojects, +    def sourceFiles = childEquivalentChildVariants.collect { it.javaCompile.source } +, +                      javaProjects.collect { it.sourceSets.main.allJava }, +, +    task("${variant.name}SourceJar", type: Jar) {, +      classifier = 'sources', +      from sourceFiles, +    }, +, +    def cleanJavadocTask = task("clean${variant.name.capitalize()}Javadoc", type: Delete) {, +        delete destinationDirPath, +    }, +    clean.dependsOn(cleanJavadocTask), +, +    def javadocTask = task("${variant.name}Javadoc", type: Javadoc) {, +        classifier = 'javadoc', +, +        source = sourceFiles, +]