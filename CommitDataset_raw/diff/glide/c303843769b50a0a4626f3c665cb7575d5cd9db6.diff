[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +    protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +    protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java, +      String stringURL = getUrl(model, width, height, options);, +      result = new GlideUrl(stringURL, getHeaders(model, width, height, options));, +    List<String> alternateUrls = getAlternateUrls(model, width, height, options);, +  protected abstract String getUrl(Model model, int width, int height, Map<String, Object> options);, +  protected List<String> getAlternateUrls(Model model, int width, int height,, +      Map<String, Object> options) {, +  protected Headers getHeaders(Model model, int width, int height, Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +    protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java, +      String stringURL = getUrl(model, width, height, options);, +      result = new GlideUrl(stringURL, getHeaders(model, width, height, options));, +    List<String> alternateUrls = getAlternateUrls(model, width, height, options);, +  protected abstract String getUrl(Model model, int width, int height, Map<String, Object> options);, +  protected List<String> getAlternateUrls(Model model, int width, int height,, +      Map<String, Object> options) {, +  protected Headers getHeaders(Model model, int width, int height, Map<String, Object> options) {, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java, +import java.util.Map;, +  protected String getUrl(Photo model, int width, int height, Map<String, Object> options) {, +  protected List<String> getAlternateUrls(Photo photo, int width, int height,, +      Map<String, Object> options) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +    protected String getUrl(Object model, int width, int height, Map<String, Object> options) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java, +      String stringURL = getUrl(model, width, height, options);, +      result = new GlideUrl(stringURL, getHeaders(model, width, height, options));, +    List<String> alternateUrls = getAlternateUrls(model, width, height, options);, +  protected abstract String getUrl(Model model, int width, int height, Map<String, Object> options);, +  protected List<String> getAlternateUrls(Model model, int width, int height,, +      Map<String, Object> options) {, +  protected Headers getHeaders(Model model, int width, int height, Map<String, Object> options) {, +++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java, +import java.util.Map;, +  protected String getUrl(Photo model, int width, int height, Map<String, Object> options) {, +  protected List<String> getAlternateUrls(Photo photo, int width, int height,, +      Map<String, Object> options) {, +++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java, +import java.util.Map;, +  protected String getUrl(Api.GifResult model, int width, int height, Map<String, Object> options) {]