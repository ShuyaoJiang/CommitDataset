[+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(bitmapProvider);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(bitmapProvider);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(provider, header, data, sampleSize);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(bitmapProvider);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(provider, header, data, sampleSize);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + * Shared interface for GIF decoders., +public interface GifDecoder {, +  int getWidth();, +  int getHeight();, +  ByteBuffer getData();, +  int getStatus();, +  void advance();, +  int getDelay(int n);, +  int getNextDelay();, +  int getFrameCount();, +  int getCurrentFrameIndex();, +  void resetFrameIndex();, +  int getLoopCount();, +  int getByteSize();, +  Bitmap getNextFrame();, +  int read(InputStream is, int contentLength);, +  void clear();, +  void setData(GifHeader header, byte[] data);, +  void setData(GifHeader header, ByteBuffer buffer);, +  void setData(GifHeader header, ByteBuffer buffer, int sampleSize);, +  int read(byte[] data);, +++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(bitmapProvider);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +import com.bumptech.glide.gifdecoder.StandardGifDecoder;, +      return new StandardGifDecoder(provider, header, data, sampleSize);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, + * Shared interface for GIF decoders., +public interface GifDecoder {, +  int getWidth();, +  int getHeight();, +  ByteBuffer getData();, +  int getStatus();, +  void advance();, +  int getDelay(int n);, +  int getNextDelay();, +  int getFrameCount();, +  int getCurrentFrameIndex();, +  void resetFrameIndex();, +  int getLoopCount();, +  int getByteSize();, +  Bitmap getNextFrame();, +  int read(InputStream is, int contentLength);, +  void clear();, +  void setData(GifHeader header, byte[] data);, +  void setData(GifHeader header, ByteBuffer buffer);, +  void setData(GifHeader header, ByteBuffer buffer, int sampleSize);, +  int read(byte[] data);, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, +package com.bumptech.glide.gifdecoder;, +, +/**, + * Copyright (c) 2013 Xcellent Creations, Inc., + *, + * Permission is hereby granted, free of charge, to any person obtaining, + * a copy of this software and associated documentation files (the, + * "Software"), to deal in the Software without restriction, including, + * without limitation the rights to use, copy, modify, merge, publish,, + * distribute, sublicense, and/or sell copies of the Software, and to, + * permit persons to whom the Software is furnished to do so, subject to, + * the following conditions:, + *, + * The above copyright notice and this permission notice shall be, + * included in all copies or substantial portions of the Software., + *, + * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,, + * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF, + * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND, + * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE, + * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION, + * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION, + * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE., + */, +, +import android.annotation.TargetApi;, +import android.graphics.Bitmap;, +import android.os.Build;, +import android.support.annotation.Nullable;, +import android.util.Log;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;]