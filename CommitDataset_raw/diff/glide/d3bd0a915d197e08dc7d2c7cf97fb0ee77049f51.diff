[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +    public void testGenericLoader() throws Exception {, +        File expected = new File("test");, +, +        GlideUrl glideUrl =  mock(GlideUrl.class);, +        ResourceFetcher<File> resourceFetcher = mock(ResourceFetcher.class);, +        when(resourceFetcher.loadResource(any(Priority.class))).thenReturn(expected);, +        ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, +        when(modelLoader.getId(eq(glideUrl))).thenReturn("id");, +        when(modelLoader.getResourceFetcher(eq(glideUrl), anyInt(), anyInt())), +                .thenReturn(resourceFetcher);, +, +        Resource<File> expectedResource = mock(Resource.class);, +        when(expectedResource.get()).thenReturn(expected);, +        ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, +        when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, +        when(sourceDecoder.getId()).thenReturn("sourceDecoderId");, +        ResourceDecoder<InputStream, File> cacheDecoder = mock(ResourceDecoder.class);, +        when(cacheDecoder.getId()).thenReturn("cacheDecoderId");, +        ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, +        when(encoder.getId()).thenReturn("encoderId");, +, +        Glide.with(getContext()), +                .using(modelLoader, File.class), +                .load(glideUrl), +                .as(File.class), +                .imageDecoder(sourceDecoder), +                .cacheDecoder(cacheDecoder), +                .encoder(encoder), +                .into(target);, +, +        verify(target).onResourceReady(eq(expected));, +    }, +, +    @Test, +        ResourceTranscoder<Bitmap, byte[]> transcoder = mock(ResourceTranscoder.class);, +        when(transcoder.getId()).thenReturn("bytes");, +        when(transcoder.transcode(any(Resource.class))).thenReturn(new BytesResource(bytes));, +        Glide.with(getContext()), +                .load(uri), +                .transcode(transcoder, byte[].class), +                .into(target);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +    public void testGenericLoader() throws Exception {, +        File expected = new File("test");, +, +        GlideUrl glideUrl =  mock(GlideUrl.class);, +        ResourceFetcher<File> resourceFetcher = mock(ResourceFetcher.class);, +        when(resourceFetcher.loadResource(any(Priority.class))).thenReturn(expected);, +        ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, +        when(modelLoader.getId(eq(glideUrl))).thenReturn("id");, +        when(modelLoader.getResourceFetcher(eq(glideUrl), anyInt(), anyInt())), +                .thenReturn(resourceFetcher);, +, +        Resource<File> expectedResource = mock(Resource.class);, +        when(expectedResource.get()).thenReturn(expected);, +        ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, +        when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, +        when(sourceDecoder.getId()).thenReturn("sourceDecoderId");, +        ResourceDecoder<InputStream, File> cacheDecoder = mock(ResourceDecoder.class);, +        when(cacheDecoder.getId()).thenReturn("cacheDecoderId");, +        ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, +        when(encoder.getId()).thenReturn("encoderId");, +, +        Glide.with(getContext()), +                .using(modelLoader, File.class), +                .load(glideUrl), +                .as(File.class), +                .imageDecoder(sourceDecoder), +                .cacheDecoder(cacheDecoder), +                .encoder(encoder), +                .into(target);, +, +        verify(target).onResourceReady(eq(expected));, +    }, +, +    @Test, +        ResourceTranscoder<Bitmap, byte[]> transcoder = mock(ResourceTranscoder.class);, +        when(transcoder.getId()).thenReturn("bytes");, +        when(transcoder.transcode(any(Resource.class))).thenReturn(new BytesResource(bytes));, +        Glide.with(getContext()), +                .load(uri), +                .transcode(transcoder, byte[].class), +                .into(target);, +++ b/library/robolectric/src/com/bumptech/glide/provider/ChildLoadProviderTest.java, +    public void testReturnsParentTranscoderIfNoneIsSet() {, +    @Test, +    public void testReturnsChildTranscoderIfSet() {, +        harness.provider.setTranscoder(harness.transcoder);, +, +        assertEquals(harness.transcoder, harness.provider.getTranscoder());, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;]