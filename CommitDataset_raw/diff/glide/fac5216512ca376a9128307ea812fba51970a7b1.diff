[+++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +        RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, tempBytes[0]);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +        RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, tempBytes[0]);, +++ b/library/src/com/bumptech/photos/resize/RecyclableBufferedInputStream.java, +package com.bumptech.photos.resize;, +, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one or more, + *  contributor license agreements.  See the NOTICE file distributed with, + *  this work for additional information regarding copyright ownership., + *  The ASF licenses this file to You under the Apache License, Version 2.0, + *  (the &quot;License&quot;); you may not use this file except in compliance with, + *  the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +, +import java.io.FilterInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * Wraps an existing {@link InputStream} and &lt;em&gt;buffers&lt;/em&gt; the input., + * Expensive interaction with the underlying input stream is minimized, since, + * most (smaller) requests can be satisfied by accessing the buffer alone. The, + * drawback is that some extra space is required to hold the buffer and that, + * copying takes place when filling that buffer, but this is usually outweighed, + * by the performance benefits., + *, + * &lt;p/&gt;A typical application pattern for the class looks like this:&lt;p/&gt;, + *, + * &lt;pre&gt;, + * BufferedInputStream buf = new BufferedInputStream(new FileInputStream(&amp;quot;file.java&amp;quot;));, + * &lt;/pre&gt;, + *, + */, +public class RecyclableBufferedInputStream extends FilterInputStream {, +    /**, +     * The buffer containing the current bytes read from the target InputStream., +     */, +    protected volatile byte[] buf;, +, +    /**, +     * The total number of bytes inside the byte array {@code buf}., +     */, +    protected int count;, +, +    /**, +     * The current limit, which when passed, invalidates the current mark., +     */, +    protected int marklimit;, +, +    /**, +     * The currently marked position. -1 indicates no mark has been set or the, +     * mark has been invalidated., +     */, +    protected int markpos = -1;, +, +    /**, +     * The current position within the byte array {@code buf}., +     */, +    protected int pos;, +, +    /**, +     * Constructs a new {@code BufferedInputStream}, providing {@code in} with a buffer, +     * of 8192 bytes., +     *, +     * &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; passing a null source creates a closed, +     * {@code BufferedInputStream}. All read operations on such a stream will, +     * fail with an IOException., +     *, +     * @param in the {@code InputStream} the buffer reads from., +     */, +    public RecyclableBufferedInputStream(InputStream in) {, +        this(in, 8192);, +    }, +, +    /**, +     * Constructs a new {@code BufferedInputStream}, providing {@code in} with {@code size} bytes, +     * of buffer., +     *, +     * &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; passing a null source creates a closed, +     * {@code BufferedInputStream}. All read operations on such a stream will, +     * fail with an IOException., +     *, +     * @param in the {@code InputStream} the buffer reads from., +     * @param size the size of buffer in bytes., +     * @throws IllegalArgumentException if {@code size &lt;= 0}., +     */, +    public RecyclableBufferedInputStream(InputStream in, int size) {, +        this(in, new byte[size]);, +    }]