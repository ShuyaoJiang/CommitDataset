[+++ b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DataSource;, +import java.io.FileInputStream;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +  private final FileOpener<Data> fileOpener;, +  public FileLoader(FileOpener<Data> fileOpener) {, +    this.fileOpener = fileOpener;, +    return new FileFetcher<>(model, fileOpener);, +   * Allows opening a specific type of data from a {@link java.io.File}., +   * @param <Data> The type of data that can be opened., +  public interface FileOpener<Data> {, +    Data open(File file) throws FileNotFoundException;, +    void close(Data data) throws IOException;, +    Class<Data> getDataClass();, +  }, +  private static class FileFetcher<Data> implements DataFetcher<Data> {, +    private final File file;, +    private final FileOpener<Data> opener;, +    private Data data;, +, +    public FileFetcher(File file, FileOpener<Data> opener) {, +      this.file = file;, +      this.opener = opener;, +    public Data loadData(Priority priority) throws IOException {, +      data = opener.open(file);, +      return data;, +    }, +, +    @Override, +    public void cleanup() {, +      if (data != null) {, +        try {, +          opener.close(data);, +        } catch (IOException e) {, +          // Ignored., +        }, +      }, +    }, +, +    @Override, +    public String getId() {, +      return file.getPath();, +    }, +, +    @Override, +    public void cancel() {, +, +    @Override, +    public Class<Data> getDataClass() {, +      return opener.getDataClass();, +    }, +, +    @Override, +    public DataSource getDataSource() {, +      return DataSource.LOCAL;, +    }, +  }, +, +  /**, +   * Base factory for loading data from {@link java.io.File files}., +   * @param <Data> The type of data that will be loaded for a given {@link java.io.File}., +   */, +  public static class Factory<Data> implements ModelLoaderFactory<File, Data> {, +    private final FileOpener<Data> opener;, +, +    public Factory(FileOpener<Data> opener) {, +      this.opener = opener;, +    }, +, +    @Override, +    public final ModelLoader<File, Data> build(Context context,, +        MultiModelLoaderFactory multiFactory) {, +      return new FileLoader<>(opener);, +    }, +, +    @Override, +    public final void teardown() {, +      // Do nothing., +    }, +  }, +, +  /**, +   * Factory for loading {@link InputStream}s from {@link File}s., +   */, +  public static class StreamFactory extends Factory<InputStream> {, +    public StreamFactory() {, +      super(new FileOpener<InputStream>() {, +        @Override, +        public InputStream open(File file) throws FileNotFoundException {, +          return new FileInputStream(file);, +        }, +, +        @Override, +        public void close(InputStream inputStream) throws IOException {, +          inputStream.close();, +        }, +, +        @Override]