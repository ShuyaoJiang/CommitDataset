[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.LogTime;, +        long startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Decoded transformed from cache", startTime);, +        }, +        startTime = LogTime.getLogTime();, +        Resource<Z> result = transcode(transformed);, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Transcoded transformed from cache", startTime);, +        }, +        return result;, +        long startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Decoded source from cache", startTime);, +        }, +        long startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Transformed resource from source", startTime);, +        }, +, +, +        startTime = LogTime.getLogTime();, +        Resource<Z> result = transcode(transformed);, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Transcoded transformed from source", startTime);, +        }, +        return result;, +        long startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Wrote transformed from source to cache", startTime);, +        }, +            long startTime = LogTime.getLogTime();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                logWithTimeAndKey("Fetched data", startTime);, +            }, +            long startTime = LogTime.getLogTime();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                logWithTimeAndKey("Decoded from source", startTime);, +            }, +        long startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logWithTimeAndKey("Wrote source to cache", startTime);, +        }, +, +        startTime = LogTime.getLogTime();, +        Resource<T> result = loadFromCache(resultKey.getOriginalKey());, +        if (Log.isLoggable(TAG, Log.VERBOSE) && result != null) {, +            logWithTimeAndKey("Decoded source from cache", startTime);, +        }, +        return result;, +, +    private void logWithTimeAndKey(String message, long startTime) {, +        Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + resultKey);, +    }]