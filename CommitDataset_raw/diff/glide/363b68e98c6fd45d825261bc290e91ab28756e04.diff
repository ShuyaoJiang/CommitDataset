[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, +    request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, +    request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +    doAnswer(new Util.CallDataReady(null)), +        .when(failFetcher), +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, +    request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +    doAnswer(new Util.CallDataReady(null)), +        .when(failFetcher), +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java, +import static org.mockito.Matchers.isNull;, +  public void testFailsOnRedirectLoops() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  public void testFailsIfRedirectLocationIsNotPresent() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  public void testFailsIfRedirectLocationIsPresentAndEmpty() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIsNegativeOne() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsAfterTooManyRedirects() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIs500() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIs400() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, +    request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +    doAnswer(new Util.CallDataReady(null)), +        .when(failFetcher), +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java, +import static org.mockito.Matchers.isNull;, +  public void testFailsOnRedirectLoops() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  public void testFailsIfRedirectLocationIsNotPresent() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  public void testFailsIfRedirectLocationIsPresentAndEmpty() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIsNegativeOne() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsAfterTooManyRedirects() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIs500() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +  public void testFailsIfStatusCodeIs400() throws Exception {, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +  @Test, +, +    verify(callback).onDataReady(isNull(InputStream.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/tests/Util.java, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {, +    request = requestFactory.create(url.toString(), callback, glideToVolleyPriority(priority));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +    doAnswer(new Util.CallDataReady(null)), +        .when(failFetcher)]