[+++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.hamcrest.Matchers.empty;, +import static org.junit.Assert.assertThat;, +        assertThat(strategy.bitmaps, empty());, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.hamcrest.Matchers.empty;, +import static org.junit.Assert.assertThat;, +        assertThat(strategy.bitmaps, empty());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(resultPriorities, hasSize(numPrioritiesToTest));, +        final Integer[] executionOrder = new Integer[numItemsToTest];, +            executionOrder[i] = i;, +        assertThat(executedOrder, contains(executionOrder));, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.hamcrest.Matchers.empty;, +import static org.junit.Assert.assertThat;, +        assertThat(strategy.bitmaps, empty());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(resultPriorities, hasSize(numPrioritiesToTest));, +        final Integer[] executionOrder = new Integer[numItemsToTest];, +            executionOrder[i] = i;, +        assertThat(executedOrder, contains(executionOrder));, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java, +import android.content.BroadcastReceiver;, +import java.util.List;, +, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(getConnectivityReceivers(), hasSize(1));, +        assertThat(getConnectivityReceivers(), hasSize(1));, +        assertThat(getConnectivityReceivers(), empty());, +        assertThat(getConnectivityReceivers(), empty());, +    private List<BroadcastReceiver> getConnectivityReceivers() {, +        return Robolectric.getShadowApplication().getReceiversForIntent(connectivity);, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.hamcrest.Matchers.empty;, +import static org.junit.Assert.assertThat;, +        assertThat(strategy.bitmaps, empty());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(resultPriorities, hasSize(numPrioritiesToTest));, +        final Integer[] executionOrder = new Integer[numItemsToTest];, +            executionOrder[i] = i;, +        assertThat(executedOrder, contains(executionOrder));, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java, +import android.content.BroadcastReceiver;, +import java.util.List;, +, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(getConnectivityReceivers(), hasSize(1));, +        assertThat(getConnectivityReceivers(), hasSize(1));, +        assertThat(getConnectivityReceivers(), empty());, +        assertThat(getConnectivityReceivers(), empty());, +    private List<BroadcastReceiver> getConnectivityReceivers() {, +        return Robolectric.getShadowApplication().getReceiversForIntent(connectivity);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/GlideDrawableImageViewTargetTest.java, +import static org.hamcrest.Matchers.not;, +                assertThat(drawable, not(instanceOf(SquaringDrawable.class)));, +                assertThat(drawable, not(instanceOf(SquaringDrawable.class)));, +                assertThat(drawable, not(instanceOf(SquaringDrawable.class)));, +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +        assertThat(loadedObjects, containsInAnyOrder(objects.toArray()));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.hamcrest.Matchers.empty;, +import static org.junit.Assert.assertThat;, +        assertThat(strategy.bitmaps, empty());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertThat;, +        assertThat(resultPriorities, hasSize(numPrioritiesToTest));, +        final Integer[] executionOrder = new Integer[numItemsToTest];, +            executionOrder[i] = i;]