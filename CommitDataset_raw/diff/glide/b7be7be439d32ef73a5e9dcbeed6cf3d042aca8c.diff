[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, +            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, +                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, +            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, +                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +            engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, +            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, +                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +            engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;, +    private DiskCache.Factory diskCacheFactory;, +     * @deprecated Creating a disk cache directory on the main thread causes strict mode violations, use, +     * {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead. Scheduled to be removed, +     * in Glide 4.0., +    @Deprecated, +    public GlideBuilder setDiskCache(final DiskCache diskCache) {, +        return setDiskCache(new DiskCache.Factory() {, +            @Override, +            public DiskCache build() {, +                return diskCache;, +            }, +        });, +    }, +, +    /**, +     * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache.Factory} implementation to use to construct, +     * the {@link com.bumptech.glide.load.engine.cache.DiskCache} to use to store, +     * {@link com.bumptech.glide.load.engine.Resource} data on disk., +     *, +     * @param diskCacheFactory The disk cche factory to use., +     * @return This builder., +     */, +    public GlideBuilder setDiskCache(DiskCache.Factory diskCacheFactory) {, +        this.diskCacheFactory = diskCacheFactory;, +        if (diskCacheFactory == null) {, +            diskCacheFactory = new InternalCacheDiskCacheFactory(context, Glide.DEFAULT_DISK_CACHE_SIZE);, +            engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, +            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, +                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +            engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;, +    private DiskCache.Factory diskCacheFactory;, +     * @deprecated Creating a disk cache directory on the main thread causes strict mode violations, use, +     * {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead. Scheduled to be removed, +     * in Glide 4.0., +    @Deprecated, +    public GlideBuilder setDiskCache(final DiskCache diskCache) {, +        return setDiskCache(new DiskCache.Factory() {, +            @Override, +            public DiskCache build() {, +                return diskCache;, +            }, +        });, +    }, +, +    /**, +     * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache.Factory} implementation to use to construct, +     * the {@link com.bumptech.glide.load.engine.cache.DiskCache} to use to store, +     * {@link com.bumptech.glide.load.engine.Resource} data on disk., +     *, +     * @param diskCacheFactory The disk cche factory to use., +     * @return This builder., +     */, +    public GlideBuilder setDiskCache(DiskCache.Factory diskCacheFactory) {, +        this.diskCacheFactory = diskCacheFactory;, +        if (diskCacheFactory == null) {, +            diskCacheFactory = new InternalCacheDiskCacheFactory(context, Glide.DEFAULT_DISK_CACHE_SIZE);, +            engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    private final DiskCacheProvider diskCacheProvider;, +            DiskCacheProvider diskCacheProvider, DiskCacheStrategy diskCacheStrategy, Priority priority) {, +        this(resultKey, width, height, fetcher, loadProvider, transformation, transcoder, diskCacheProvider,, +                diskCacheStrategy, priority, DEFAULT_FILE_OPENER);, +            DiskCacheProvider diskCacheProvider, DiskCacheStrategy diskCacheStrategy, Priority priority, FileOpener, +            fileOpener) {, +        this.diskCacheProvider = diskCacheProvider;, +        diskCacheProvider.getDiskCache().put(resultKey, writer);, +        diskCacheProvider.getDiskCache().put(resultKey.getOriginalKey(), writer);, +        File cacheFile = diskCacheProvider.getDiskCache().get(key);, +                diskCacheProvider.getDiskCache().delete(key);, +    interface DiskCacheProvider {, +        DiskCache getDiskCache();, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);, +            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);, +                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);]