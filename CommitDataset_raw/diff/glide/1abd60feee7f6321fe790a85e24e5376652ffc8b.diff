[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.load.engine.DecodeOptions.through;, +import android.content.pm.ApplicationInfo;, +import android.os.Bundle;, +import com.bumptech.glide.module.GlideModule;, +import org.robolectric.res.builder.RobolectricPackageManager;, +, +        RobolectricPackageManager pm = (RobolectricPackageManager) Robolectric.application.getPackageManager();, +        ApplicationInfo info = pm.getApplicationInfo(Robolectric.application.getPackageName(), 0);, +        info.metaData = new Bundle();, +        info.metaData.putString(SetupModule.class.getName(), "GlideModule");, +, +//        ShadowPackageManager spm = Robolectric.shadowOf_(Robolectric.application.getPackageManager());, +//        spm.addGlideModule(SetupModule.class);, +        requestManager, +                .as(byte[].class), +                .decode(through(Robolectric.application, Bitmap.class)), +                .load(uri), +                .into(target);, +                .as(byte[].class), +                .decode(through(Robolectric.application, GifDrawable.class)), +                .as(byte[].class), +                .decode(through(Robolectric.application, Bitmap.class)), +        when(failFetcher.getDataClass()).thenReturn(failResource);, +        when(failLoader.handles(any(failModel))).thenReturn(true);, +        when(fetcher.getDataClass()).thenReturn(InputStream.class);, +        when(modelLoader.handles(any(modelClass))).thenReturn(true);, +    public static class SetupModule implements GlideModule {, +, +        @Override, +        public void applyOptions(Context context, GlideBuilder builder) {, +            // Run all tasks on the main thread so they complete synchronously., +            ExecutorService service = mock(ExecutorService.class);, +            when(service.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>() {, +                @Override, +                public Future<?> answer(InvocationOnMock invocation) throws Throwable {, +                    Runnable runnable = (Runnable) invocation.getArguments()[0];, +                    runnable.run();, +                    return mock(Future.class);, +                }, +            });, +            builder, +                .setMemoryCache(mock(MemoryCache.class)), +                .setDiskCache(mock(DiskCache.class)), +                .setResizeService(service), +                .setDiskCacheService(service);, +        }, +, +        @Override, +        public void registerComponents(Context context, Glide glide) {, +            DataFetcher<InputStream> mockStreamFetcher = mock(DataFetcher.class);, +            when(mockStreamFetcher.getId()).thenReturn("fakeId");, +            when(mockStreamFetcher.getDataClass()).thenReturn(InputStream.class);, +            try {, +                when(mockStreamFetcher.loadData(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +            } catch (Exception e) {, +                throw new RuntimeException(e);, +            }, +            ModelLoader<GlideUrl, InputStream> mockUrlLoader = mock(ModelLoader.class);, +            when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, +            when(mockUrlLoader.handles(any(GlideUrl.class))).thenReturn(true);, +            ModelLoaderFactory<GlideUrl, InputStream> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);, +            when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +                    .thenReturn(mockUrlLoader);, +, +            glide.prepend(GlideUrl.class, InputStream.class, mockUrlLoaderFactory);, +        }, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.load.engine.DecodeOptions.through;, +import android.content.pm.ApplicationInfo;, +import android.os.Bundle;, +import com.bumptech.glide.module.GlideModule;, +import org.robolectric.res.builder.RobolectricPackageManager;, +, +        RobolectricPackageManager pm = (RobolectricPackageManager) Robolectric.application.getPackageManager();, +        ApplicationInfo info = pm.getApplicationInfo(Robolectric.application.getPackageName(), 0);, +        info.metaData = new Bundle();, +        info.metaData.putString(SetupModule.class.getName(), "GlideModule");, +, +//        ShadowPackageManager spm = Robolectric.shadowOf_(Robolectric.application.getPackageManager());, +//        spm.addGlideModule(SetupModule.class);, +        requestManager, +                .as(byte[].class), +                .decode(through(Robolectric.application, Bitmap.class)), +                .load(uri), +                .into(target);, +                .as(byte[].class), +                .decode(through(Robolectric.application, GifDrawable.class)), +                .as(byte[].class), +                .decode(through(Robolectric.application, Bitmap.class)), +        when(failFetcher.getDataClass()).thenReturn(failResource);, +        when(failLoader.handles(any(failModel))).thenReturn(true);, +        when(fetcher.getDataClass()).thenReturn(InputStream.class);, +        when(modelLoader.handles(any(modelClass))).thenReturn(true);, +    public static class SetupModule implements GlideModule {, +, +        @Override, +        public void applyOptions(Context context, GlideBuilder builder) {]