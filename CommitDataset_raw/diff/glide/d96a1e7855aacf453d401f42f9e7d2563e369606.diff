[+++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), +    destinationDir = packagingFolder, +    archiveName = 'compiled.jar', +                zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), +    destinationDir = packagingFolder, +    archiveName = 'compiled.jar', +                zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},, + * {@code com.bumptech.glide.RequestManager}, and, + * {@code com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), +    destinationDir = packagingFolder, +    archiveName = 'compiled.jar', +                zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},, + * {@code com.bumptech.glide.RequestManager}, and, + * {@code com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <p>This processor discovers all {@code AppGlideModule} and, + * {@code LibraryGlideModule} implementations that are, + *   <li>For {@code LibraryGlideModule}s - A GlideIndexer class in a, + *      {@code LibraryGlideModule} classes., + *   <li>For {@code AppGlideModule}s - A single, + *      {@code AppGlideModule} implementation, + *     ({@code com.bumptech.glide.GeneratedAppGlideModule}) that calls all, + *     {@code LibraryGlideModule}s and the, + *     original {@code AppGlideModule} in the correct order when Glide is, + *     <li>A {@code com.bumptech.glide.request.RequestOptions} implementation that contains, + *       <li>A {@code com.bumptech.glide.RequestManager} implementation containing a generated, + *       <li>A {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *       implementation that produces the generated {@code com.bumptech.glide.RequestManager}s., + *       <li>A {@code com.bumptech.glide.Glide} look-alike that implements all static methods in, + *       the {@code com.bumptech.glide.Glide} singleton and returns the generated, + *       {@code com.bumptech.glide.RequestManager} implementation when appropriate., + * <p>{@code AppGlideModule} implementations must only be included in, + * {@code AppGlideModule} implementation per, + * Application. The {@code AppGlideModule} class is, + * {@code com.bumptech.glide.GeneratedAppGlideModule} impl can be created., +    *   <li>Find all {@code AppGlideModule}s and save them to an instance variable (throw if > 1)., +    *   <li>Find all {@code LibraryGlideModule}s, +    *   <li>For each {@code LibraryGlideModule},, +    *       write an {@code Indexer} with an Annotation with the class name., +    *   <li>If we wrote any {@code Indexer}s, return and wait for the next round., +    *   <li>If we didn't write any {@code Indexer}s and there is a {@code AppGlideModule},, +    *       write the {@code GeneratedAppGlideModule}., +    *       Once the {@code GeneratedAppGlideModule} is written, we expect to be finished., +    *       Any further generation of related classes will result in errors., +++ b/annotation/compiler/build.gradle, +def packagingFolder = file("${buildDir}/intermediates"), +def repackagedJar = file("${packagingFolder}/repackaged.jar"), +def proguardedJar = file("${packagingFolder}/proguarded.jar"), +    destinationDir = packagingFolder, +    archiveName = 'compiled.jar', +                zipfileset(src: tasks.compiledJar.archivePath), +// Create the standard jar artifact based on our compiled, repackaged and proguarded jar., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},, + * {@code com.bumptech.glide.RequestManager}, and, + * {@code com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + * <p>This processor discovers all {@code AppGlideModule} and, + * {@code LibraryGlideModule} implementations that are, + *   <li>For {@code LibraryGlideModule}s - A GlideIndexer class in a, + *      {@code LibraryGlideModule} classes., + *   <li>For {@code AppGlideModule}s - A single, + *      {@code AppGlideModule} implementation, + *     ({@code com.bumptech.glide.GeneratedAppGlideModule}) that calls all, + *     {@code LibraryGlideModule}s and the, + *     original {@code AppGlideModule} in the correct order when Glide is, + *     <li>A {@code com.bumptech.glide.request.RequestOptions} implementation that contains, + *       <li>A {@code com.bumptech.glide.RequestManager} implementation containing a generated, + *       <li>A {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *       implementation that produces the generated {@code com.bumptech.glide.RequestManager}s., + *       <li>A {@code com.bumptech.glide.Glide} look-alike that implements all static methods in, + *       the {@code com.bumptech.glide.Glide} singleton and returns the generated, + *       {@code com.bumptech.glide.RequestManager} implementation when appropriate., + * <p>{@code AppGlideModule} implementations must only be included in, + * {@code AppGlideModule} implementation per, + * Application. The {@code AppGlideModule} class is, + * {@code com.bumptech.glide.GeneratedAppGlideModule} impl can be created., +    *   <li>Find all {@code AppGlideModule}s and save them to an instance variable (throw if > 1)., +    *   <li>Find all {@code LibraryGlideModule}s, +    *   <li>For each {@code LibraryGlideModule},, +    *       write an {@code Indexer} with an Annotation with the class name., +    *   <li>If we wrote any {@code Indexer}s, return and wait for the next round.]