[+++ b/library/tests/src/com/bumptech/glide/ListPreloaderTest.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.test.AndroidTestCase;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.util.Log;, +, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +public class ListPreloaderTest extends AndroidTestCase {, +, +    static {, +        Log.DEBUG = true;, +    }, +, +    @Override, +    protected void setUp() throws Exception {, +        super.setUp();, +    }, +, +    public void testGetItemsIsCalledIncreasing() {, +        final AtomicBoolean called = new AtomicBoolean(false);, +        ListPreloaderAdapter preloader = new ListPreloaderAdapter(getContext(), 10) {, +            @Override, +            protected List<Object> getItems(int start, int end) {, +                called.set(true);, +                assertEquals(11, start);, +                assertEquals(21, end);, +                return super.getItems(start, end);, +            }, +        };, +        preloader.onScroll(null, 1, 10, 30);, +        assertTrue(called.get());, +    }, +, +    public void testGetItemsIsCalledDecreasing() {, +        final AtomicBoolean called = new AtomicBoolean(false);, +        ListPreloaderAdapter preloader = new ListPreloaderAdapter(getContext(), 10) {, +            @Override, +            protected List<Object> getItems(int start, int end) {, +                // Ignore the preload caused from us starting at the end, +                if (start == 30) {, +                    return Collections.EMPTY_LIST;, +                }, +                called.set(true);, +                assertEquals(19, start);, +                assertEquals(29, end);, +                return super.getItems(start, end);, +            }, +        };, +        preloader.onScroll(null, 30, 10, 30);, +        preloader.onScroll(null, 29, 10, 30);, +        assertTrue(called.get());, +    }, +, +    public void testGetItemsIsNeverCalledWithEndGreaterThanTotalItems() {, +        final AtomicBoolean called = new AtomicBoolean(false);, +        ListPreloaderAdapter preloader = new ListPreloaderAdapter(getContext(), 10) {, +            @Override, +            protected List<Object> getItems(int start, int end) {, +                called.set(true);, +                assertEquals(26, start);, +                assertEquals(30, end);, +                return super.getItems(start, end);, +            }, +        };, +        preloader.onScroll(null, 16, 10, 30);, +        assertTrue(called.get());, +    }, +, +    public void testGetItemsIsNeverCalledWithStartLessThanZero() {, +        final AtomicBoolean called = new AtomicBoolean(false);, +        ListPreloaderAdapter preloader = new ListPreloaderAdapter(getContext(), 10) {, +            @Override, +            protected List<Object> getItems(int start, int end) {, +                if (start == 17) {, +                    return Collections.EMPTY_LIST;, +                }, +                called.set(true);, +                assertEquals(0, start);, +                assertEquals(6, end);, +                return super.getItems(start, end);, +            }, +        };, +        preloader.onScroll(null, 7, 10, 30);, +        preloader.onScroll(null, 6, 10, 30);, +        assertTrue(called.get());, +    }, +, +    public void testDontPreloadItemsRepeatedlyWhileIncreasing() {]