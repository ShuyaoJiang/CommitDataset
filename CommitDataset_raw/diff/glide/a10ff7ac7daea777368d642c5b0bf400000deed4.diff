[+++ b/library/src/com/bumptech/glide/Glide.java, +        private int errorId = -1;, +         * Sets a resource to display while an image is loading, +         * Sets a resource to display if a load fails, +         *, +         * @param resourceId The id of the resource to use as a placeholder, +         * @return This request, +         */, +        public Request<T> error(int resourceId) {, +            this.errorId = resourceId;, +, +            return this;, +        }, +, +        /**, +, +            if (errorId != -1) {, +                builder.setErrorResource(errorId);, +            }, +, +            public final int errorId;, +                errorId = request.errorId;, +                        placeholderId == other.placeholderId &&, +                        errorId == other.errorId;, +++ b/library/src/com/bumptech/glide/Glide.java, +        private int errorId = -1;, +         * Sets a resource to display while an image is loading, +         * Sets a resource to display if a load fails, +         *, +         * @param resourceId The id of the resource to use as a placeholder, +         * @return This request, +         */, +        public Request<T> error(int resourceId) {, +            this.errorId = resourceId;, +, +            return this;, +        }, +, +        /**, +, +            if (errorId != -1) {, +                builder.setErrorResource(errorId);, +            }, +, +            public final int errorId;, +                errorId = request.errorId;, +                        placeholderId == other.placeholderId &&, +                        errorId == other.errorId;, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +import android.content.res.Resources;, +    private final Drawable errorDrawable;, +, +        private int errorResourceId;, +        private Drawable errorDrawable;, +         * Optional - Sets a resource that will be displayed whenever a load fails. Only call either this method, +         * or {@link #setErrorDrawable(android.graphics.drawable.Drawable)}, not both., +         *, +         * @param resourceId The id of the resource to show, +         * @return This Builder object, +         */, +        public Builder<T> setErrorResource(int resourceId) {, +            if (resourceId != 0 && errorDrawable != null) {, +                throw new IllegalArgumentException("Can't set both an error drawable and an error resource");, +            }, +, +            this.errorResourceId = resourceId;, +            return this;, +        }, +, +        /**, +         * Optional - Sets a drawable that will be displayed whenever a load fails. Only call either this or, +         * {@link #setErrorResource(int)}, not both., +         *, +         * @param drawable The drawable to show, +         * @return This Builder object, +         */, +        public Builder<T> setErrorDrawable(Drawable drawable) {, +            if (errorResourceId != -1 && drawable != null) {, +                throw new IllegalArgumentException("Can't set both an error drawable and an error resource");, +            }, +, +            this.errorDrawable = drawable;, +            return this;, +        }, +, +        /**, +, +        final Resources res = imageView.getResources();, +            this.placeholderDrawable = res.getDrawable(builder.placeholderResourceId);, +        if (builder.errorResourceId != 0){, +            this.errorDrawable = res.getDrawable(builder.errorResourceId);, +        } else {, +            this.errorDrawable = builder.errorDrawable;, +        }, +, +                final boolean relevant = loadCount == currentCount;, +                    exceptionHandler.onException(e, model, relevant);, +                }, +                if (relevant && canSetPlaceholder()) {, +                    imageView.setImageDrawable(errorDrawable);]