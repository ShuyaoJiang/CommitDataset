[+++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        public void onLoadStarted(Drawable placeholder) {, +, +        }, +, +        @Override, +        public void onLoadFailed(Exception e, Drawable errorDrawable) {, +, +        }, +, +        @Override, +        public void onLoadCleared(Drawable placeholder) {, +, +        }, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        public void onLoadStarted(Drawable placeholder) {, +, +        }, +, +        @Override, +        public void onLoadFailed(Exception e, Drawable errorDrawable) {, +, +        }, +, +        @Override, +        public void onLoadCleared(Drawable placeholder) {, +, +        }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, +import com.bumptech.glide.request.target.SizeReadyCallback;, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        public void onLoadStarted(Drawable placeholder) {, +, +        }, +, +        @Override, +        public void onLoadFailed(Exception e, Drawable errorDrawable) {, +, +        }, +, +        @Override, +        public void onLoadCleared(Drawable placeholder) {, +, +        }, +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +, +import com.bumptech.glide.request.target.SizeReadyCallback;, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +import com.bumptech.glide.request.target.SizeReadyCallback;, +public final class GenericRequest<A, T, Z, R> implements Request, SizeReadyCallback,, +            if (canNotifyStatusChanged()) {, +                target.onLoadStarted(getPlaceholderDrawable());, +            }, +        // Resource must be released before canNotifyStatusChanged is called., +        if (canNotifyStatusChanged()) {, +            target.onLoadCleared(getPlaceholderDrawable());, +        }, +    private void setErrorPlaceholder(Exception e) {, +        if (!canNotifyStatusChanged()) {, +        if (error == null) {, +            error = getPlaceholderDrawable();, +        target.onLoadFailed(e, error);, +    private boolean canSetResource() {, +    private boolean canNotifyStatusChanged() {, +        return requestCoordinator == null || requestCoordinator.canNotifyStatusChanged(this);, +    private boolean isFirstReadyResource() {, +        if (!canSetResource()) {, +                isFirstReadyResource())) {, +            GlideAnimation<R> animation = animationFactory.build(loadedFromMemoryCache, isFirstReadyResource());, +        if (requestListener == null || !requestListener.onException(e, model, target, isFirstReadyResource())) {, +            setErrorPlaceholder(e);, +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * impractical to return that size from {@link Target#getSize(com.bumptech.glide.request.target.SizeReadyCallback)}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        public void onLoadStarted(Drawable placeholder) {, +, +        }, +, +        @Override, +        public void onLoadFailed(Exception e, Drawable errorDrawable) {, +, +        }, +, +        @Override, +        public void onLoadCleared(Drawable placeholder) {]