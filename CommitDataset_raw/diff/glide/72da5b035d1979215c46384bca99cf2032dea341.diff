[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  TypeSpec generate(, +      String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, +        .addMethods(, +            generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), +      final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, +              return overrideGlideWithMethod(, +                  generatedCodePackageName, generatedRequestManager, input);, +      String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, +        ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  TypeSpec generate(, +      String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, +        .addMethods(, +            generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), +      final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, +              return overrideGlideWithMethod(, +                  generatedCodePackageName, generatedRequestManager, input);, +      String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, +        ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final String REQUEST_BUILDER_PACKAGE_NAME = "com.bumptech.glide";, +  private ClassName generatedRequestBuilderClassName;, +  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;, +  TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedOptions) {, +    generatedRequestBuilderClassName =, +        ClassName.get(generatedCodePackageName, GENERATED_REQUEST_BUILDER_SIMPLE_NAME);, +    generatedRequestBuilderOfTranscodeType =, +        ParameterizedTypeName.get(generatedRequestBuilderClassName, transcodeTypeName);, +, +          ClassName.get(generatedCodePackageName, generatedOptions.name);, +                .addMember("value", "$S", "deprecation"), +    ClassName glide = ClassName.get("com.bumptech.glide", "Glide");, +            .addParameter(glide, "glide"), +            .addStatement("super($N, $N ,$N)", "glide", "requestManager", "transcodeClass"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  TypeSpec generate(, +      String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, +        .addMethods(, +            generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), +      final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, +              return overrideGlideWithMethod(, +                  generatedCodePackageName, generatedRequestManager, input);, +      String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, +        ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final String REQUEST_BUILDER_PACKAGE_NAME = "com.bumptech.glide";, +  private ClassName generatedRequestBuilderClassName;, +  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;, +  TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedOptions) {, +    generatedRequestBuilderClassName =, +        ClassName.get(generatedCodePackageName, GENERATED_REQUEST_BUILDER_SIMPLE_NAME);, +    generatedRequestBuilderOfTranscodeType =, +        ParameterizedTypeName.get(generatedRequestBuilderClassName, transcodeTypeName);, +, +          ClassName.get(generatedCodePackageName, generatedOptions.name);, +                .addMember("value", "$S", "deprecation"), +    ClassName glide = ClassName.get("com.bumptech.glide", "Glide");, +            .addParameter(glide, "glide"), +            .addStatement("super($N, $N ,$N)", "glide", "requestManager", "transcodeClass"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestManagerSpec) {, +                    ClassName.get(generatedCodePackageName, generatedRequestManagerSpec.name)), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  TypeSpec generate(, +      String generatedCodePackageName, String glideName, TypeSpec generatedRequestManager) {, +        .addMethods(, +            generateOverridesForGlideMethods(generatedCodePackageName, generatedRequestManager)), +      final String generatedCodePackageName, final TypeSpec generatedRequestManager) {, +              return overrideGlideWithMethod(, +                  generatedCodePackageName, generatedRequestManager, input);, +      String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {, +        ClassName.get(packageName, generatedRequestManager.name);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private static final String REQUEST_BUILDER_PACKAGE_NAME = "com.bumptech.glide";, +  private ClassName generatedRequestBuilderClassName;, +  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;, +  TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedOptions) {, +    generatedRequestBuilderClassName =, +        ClassName.get(generatedCodePackageName, GENERATED_REQUEST_BUILDER_SIMPLE_NAME);, +    generatedRequestBuilderOfTranscodeType =, +        ParameterizedTypeName.get(generatedRequestBuilderClassName, transcodeTypeName);, +, +          ClassName.get(generatedCodePackageName, generatedOptions.name);, +                .addMember("value", "$S", "deprecation"), +    ClassName glide = ClassName.get("com.bumptech.glide", "Glide");, +            .addParameter(glide, "glide"), +            .addStatement("super($N, $N ,$N)", "glide", "requestManager", "transcodeClass"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestManagerSpec) {, +                    ClassName.get(generatedCodePackageName, generatedRequestManagerSpec.name)), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +      String generatedCodePackageName, @Nullable TypeSpec requestOptions, TypeSpec requestBuilder,, +      Set<String> glideExtensions) {, +    generatedRequestBuilderClassName = ClassName.get(generatedCodePackageName, requestBuilder.name);, +         .addMethod(generateAsMethod(generatedCodePackageName, requestBuilder)), +                 Collections.singletonList(, +                     generateOverrideSetRequestOptions(generatedCodePackageName, requestOptions))), +        .addModifiers(Modifier.PUBLIC), +  private MethodSpec generateAsMethod(String generatedCodePackageName, TypeSpec requestBuilder) {]