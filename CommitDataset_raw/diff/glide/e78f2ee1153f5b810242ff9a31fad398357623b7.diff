[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, +  private final GlideExtensionValidator extensionValidator;, +  ExtensionProcessor(, +      ProcessingEnvironment processingEnvironment,, +      ProcessorUtil processorUtil,, +      IndexerGenerator indexerGenerator) {, +    extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, +      extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, +  private final GlideExtensionValidator extensionValidator;, +  ExtensionProcessor(, +      ProcessingEnvironment processingEnvironment,, +      ProcessorUtil processorUtil,, +      IndexerGenerator indexerGenerator) {, +    extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, +      extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    extensionProcessor =, +        new ExtensionProcessor(processingEnvironment, processorUtil, indexerGenerator);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java, +import javax.annotation.processing.ProcessingEnvironment;, +  private final GlideExtensionValidator extensionValidator;, +  ExtensionProcessor(, +      ProcessingEnvironment processingEnvironment,, +      ProcessorUtil processorUtil,, +      IndexerGenerator indexerGenerator) {, +    extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);, +      extensionValidator.validateExtension(typeElement);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +    extensionProcessor =, +        new ExtensionProcessor(processingEnvironment, processorUtil, indexerGenerator);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import java.util.ArrayList;, +import java.util.List;, +import javax.annotation.processing.ProcessingEnvironment;, +  private final ProcessingEnvironment processingEnvironment;, +  private final ProcessorUtil processorUtil;, +  GlideExtensionValidator(, +      ProcessingEnvironment processingEnvironment, ProcessorUtil processorUtil) {, +    this.processingEnvironment = processingEnvironment;, +    this.processorUtil = processorUtil;, +  }, +, +  void validateExtension(TypeElement typeElement) {, +          validateGlideOption(executableElement);, +  private void validateGlideOption(ExecutableElement executableElement) {, +    if (isVoid(executableElement)) {, +      validateDeprecatedGlideOption(executableElement);, +    } else {, +      validateNewGlideOption(executableElement);, +    }, +  }, +, +  private void validateNewGlideOption(ExecutableElement executableElement) {, +    validateGlideOptionParameters(executableElement);, +    TypeMirror returnType = executableElement.getReturnType();, +    if (!isRequestOptions(returnType)) {, +      throw new IllegalArgumentException("@GlideOption methods should return a RequestOptions", +          + " object, but given: " + returnType + ". If you're using old style @GlideOption", +          + " methods, your method may have a void return type, but doing so is deprecated and", +          + " support will be removed in a future version");, +    }, +    validateGlideOptionOverride(executableElement);, +  }, +, +  private void validateDeprecatedGlideOption(ExecutableElement executableElement) {, +    validateGlideOptionParameters(executableElement);, +    validateGlideOptionOverride(executableElement);, +  }, +, +  private static void validateGlideOptionParameters(ExecutableElement executableElement) {, +    if (!isRequestOptions(expected)) {, +  private static boolean isRequestOptions(TypeMirror typeMirror) {, +    return typeMirror.toString().equals("com.bumptech.glide.request.RequestOptions");, +  }, +, +  private void validateGlideOptionOverride(ExecutableElement element) {, +    int overrideType = processorUtil.getOverrideType(element);, +    boolean isOverridingRequestOptionsMethod = isMethodInRequestOptions(element);, +    if (isOverridingRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {, +      throw new IllegalArgumentException("Accidentally attempting to override a method in", +          + " RequestOptions. Add an 'override' value in the @GlideOption annotation", +          + " if this is intentional. Offending method: ", +          + element.getEnclosingElement() + "#" + element);, +    } else if (!isOverridingRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {, +      throw new IllegalArgumentException("Requested to override an existing method in", +          + " RequestOptions, but no such method was found. Offending method: ", +          + element.getEnclosingElement() + "#" + element);, +    }, +  }, +, +  private boolean isMethodInRequestOptions(ExecutableElement toFind) {, +    // toFind is a method in a GlideExtension whose first argument is a BaseRequestOptions<?> type., +    // Since we're comparing against methods in BaseRequestOptions itself, we need to drop that, +    // first type., +    TypeElement requestOptionsType =, +        processingEnvironment, +            .getElementUtils()]