[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparentIfDecoderHasTransparency() {, +    public void testReturnsFrameCountFromDecoder() {, +        int expected = 4;, +        when(gifDecoder.getFrameCount()).thenReturn(expected);, +, +        assertEquals(expected, drawable.getFrameCount());, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparentIfDecoderHasTransparency() {, +    public void testReturnsFrameCountFromDecoder() {, +        int expected = 4;, +        when(gifDecoder.getFrameCount()).thenReturn(expected);, +, +        assertEquals(expected, drawable.getFrameCount());, +    }, +, +    @Test, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparentIfDecoderHasTransparency() {, +    public void testReturnsFrameCountFromDecoder() {, +        int expected = 4;, +        when(gifDecoder.getFrameCount()).thenReturn(expected);, +, +        assertEquals(expected, drawable.getFrameCount());, +    }, +, +    @Test, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +        Resource<GifDrawable> expected = mockGifResource();, +        Resource<GifDrawable> expected = mockGifResource();, +    public void testReturnsBitmapWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        Resource<Bitmap> expected = mock(Resource.class);, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenReturn(expected);, +, +        Resource<GifBitmapWrapper> result = decoder.decode(source, 100, 100);, +, +        assertEquals(expected, result.get().getBitmapResource());, +    }, +, +    @Test, +    public void testRecyclesGifResourceWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        Resource<Bitmap> expected = mock(Resource.class);, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenReturn(expected);, +, +        decoder.decode(source, 100, 100);, +, +        verify(gifResource).recycle();, +    }, +, +    @Test, +, +    @SuppressWarnings("unchecked"), +    private static Resource<GifDrawable> mockGifResource() {, +        GifDrawable drawable = mock(GifDrawable.class);, +        // Something > 1., +        when(drawable.getFrameCount()).thenReturn(4);, +        Resource<GifDrawable> resource = mock(Resource.class);, +        when(resource.get()).thenReturn(drawable);, +        return resource;, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparentIfDecoderHasTransparency() {, +    public void testReturnsFrameCountFromDecoder() {, +        int expected = 4;, +        when(gifDecoder.getFrameCount()).thenReturn(expected);, +, +        assertEquals(expected, drawable.getFrameCount());, +    }, +, +    @Test, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +        Resource<GifDrawable> expected = mockGifResource();, +        Resource<GifDrawable> expected = mockGifResource();, +    public void testReturnsBitmapWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        Resource<Bitmap> expected = mock(Resource.class);, +        when(bitmapDecoder.decode(any(ImageVideoWrapper.class), anyInt(), anyInt())).thenReturn(expected);]