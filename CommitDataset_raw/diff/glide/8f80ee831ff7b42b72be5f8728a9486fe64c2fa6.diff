[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java, +import com.bumptech.glide.load.resource.UnitTransformation;, +import java.io.IOException;, +import static org.mockito.Mockito.never;, +    public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() throws IOException {, +        when(gifDrawable.getFrameTransformation()).thenReturn(UnitTransformation.<Bitmap>get());, +        byte[] expected = "expected".getBytes();, +        when(gifDrawable.getData()).thenReturn(expected);, +, +        OutputStream os = mock(OutputStream.class);, +, +        encoder.encode(resource, os);, +, +        verify(os).write(eq(expected));, +, +        verify(gifEncoder, never()).start(any(OutputStream.class));, +        verify(parser, never()).setData(any(byte[].class));, +        verify(parser, never()).parseHeader();, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceEncoderTest.java, +import com.bumptech.glide.load.resource.UnitTransformation;, +import java.io.IOException;, +import static org.mockito.Mockito.never;, +    public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() throws IOException {, +        when(gifDrawable.getFrameTransformation()).thenReturn(UnitTransformation.<Bitmap>get());, +        byte[] expected = "expected".getBytes();, +        when(gifDrawable.getData()).thenReturn(expected);, +, +        OutputStream os = mock(OutputStream.class);, +, +        encoder.encode(resource, os);, +, +        verify(os).write(eq(expected));, +, +        verify(gifEncoder, never()).start(any(OutputStream.class));, +        verify(parser, never()).setData(any(byte[].class));, +        verify(parser, never()).parseHeader();, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceEncoder.java, +import com.bumptech.glide.load.resource.UnitTransformation;, +import java.io.IOException;, +        Transformation<Bitmap> transformation = drawable.getFrameTransformation();, +        if (transformation instanceof UnitTransformation) {, +            return writeDataDirect(drawable.getData(), os);, +        }, +, +    private boolean writeDataDirect(byte[] data, OutputStream os) {, +        boolean success = true;, +        try {, +            os.write(data);, +        } catch (IOException e) {, +            if (Log.isLoggable(TAG, Log.DEBUG)) {, +                Log.d(TAG, "Failed to write data to output stream in GifResourceEncoder", e);, +            }, +            success = false;, +        }, +        return success;, +    }, +]