[+++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UrlLoader(GLIDE.getRequestQueue(context));, +++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UrlLoader(GLIDE.getRequestQueue(context));, +++ b/library/src/com/bumptech/glide/loader/model/UrlLoader.java, +import com.android.volley.RequestQueue;, +import com.bumptech.glide.loader.stream.VolleyStreamLoader;, +    private final RequestQueue requestQueue;, +, +    public UrlLoader(RequestQueue requestQueue) {, +        this.requestQueue = requestQueue;, +    @Override, +    public StreamLoader getStreamOpener(URL model, int width, int height) {, +        return new VolleyStreamLoader(requestQueue, model.toString());, +    }, +, +    //this may need to be overridden if multiple urls can be used to retrieve the same image, +++ b/library/src/com/bumptech/glide/Glide.java, +            return (ModelLoader<T>) new UrlLoader(GLIDE.getRequestQueue(context));, +++ b/library/src/com/bumptech/glide/loader/model/UrlLoader.java, +import com.android.volley.RequestQueue;, +import com.bumptech.glide.loader.stream.VolleyStreamLoader;, +    private final RequestQueue requestQueue;, +, +    public UrlLoader(RequestQueue requestQueue) {, +        this.requestQueue = requestQueue;, +    @Override, +    public StreamLoader getStreamOpener(URL model, int width, int height) {, +        return new VolleyStreamLoader(requestQueue, model.toString());, +    }, +, +    //this may need to be overridden if multiple urls can be used to retrieve the same image, +++ /dev/null]