[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import com.bumptech.glide.GlideBuilder;, +import java.lang.Deprecated;, +  @Deprecated, +   * @see Glide#init(Context, GlideBuilder), +   */, +  @VisibleForTesting, +  @SuppressLint("VisibleForTests"), +  public static void init(Context context, GlideBuilder builder) {, +    Glide.init(context, builder);, +  }, +, +  /**, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java, +import com.bumptech.glide.GlideBuilder;, +import java.lang.Deprecated;, +  @Deprecated, +   * @see Glide#init(Context, GlideBuilder), +   */, +  @VisibleForTesting, +  @SuppressLint("VisibleForTests"), +  public static void init(Context context, GlideBuilder builder) {, +    Glide.init(context, builder);, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  /**, +   * @deprecated Use {@link #init(Context, GlideBuilder)} to get a singleton compatible with, +   * Glide's generated API., +   *, +   * <p>This method will be removed in a future version of Glide., +   */, +  @Deprecated, +  public static synchronized void init(Context context, GlideBuilder builder) {, +    initializeGlide(context, builder);, +  }, +, +  @VisibleForTesting, +    initializeGlide(context, new GlideBuilder());, +  }, +  @SuppressWarnings("deprecation"), +  private static void initializeGlide(Context context, GlideBuilder builder) {, +    Context applicationContext = context.getApplicationContext();, +    builder.setRequestManagerFactory(factory);, +    applicationContext.registerComponentCallbacks(glide);]