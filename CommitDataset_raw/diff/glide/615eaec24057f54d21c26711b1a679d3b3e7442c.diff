[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +        callback.onLoadFailed(e);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +        callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +      callback.onLoadFailed(volleyError);, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +        callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +      callback.onLoadFailed(volleyError);, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Matchers.isA;, +import com.android.volley.VolleyError;, +    doAnswer(new CountDown()).when(callback).onDataReady(any(InputStream.class));, +    doAnswer(new CountDown()).when(callback).onLoadFailed(any(Exception.class));, +  public void testCallsLoadFailedIfRedirectLocationIsEmpty() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIsNegativeOne() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedAfterTooManyRedirects() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs500() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs400() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  private class CountDown implements Answer<Void> {, +, +    @Override, +    public Void answer(InvocationOnMock invocation) throws Throwable {, +      waitForResponseLatch.countDown();, +      return null;, +    }, +  }, +, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +        callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +      callback.onLoadFailed(volleyError);, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Matchers.isA;, +import com.android.volley.VolleyError;, +    doAnswer(new CountDown()).when(callback).onDataReady(any(InputStream.class));, +    doAnswer(new CountDown()).when(callback).onLoadFailed(any(Exception.class));, +  public void testCallsLoadFailedIfRedirectLocationIsEmpty() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIsNegativeOne() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedAfterTooManyRedirects() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs500() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs400() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  private class CountDown implements Answer<Void> {, +, +    @Override, +    public Void answer(InvocationOnMock invocation) throws Throwable {, +      waitForResponseLatch.countDown();, +      return null;, +    }, +  }, +, +++ b/library/findbugs-exclude.xml, +    <Match>, +       <Class name="com.bumptech.glide.load.engine.GlideException$IndentedPrintStream" />, +       <Bug pattern="DM_DEFAULT_ENCODING" />, +    </Match>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +        callback.onLoadFailed(e);, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +      callback.onLoadFailed(volleyError);, +++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Matchers.isA;, +import com.android.volley.VolleyError;, +    doAnswer(new CountDown()).when(callback).onDataReady(any(InputStream.class));, +    doAnswer(new CountDown()).when(callback).onLoadFailed(any(Exception.class));, +  public void testCallsLoadFailedIfRedirectLocationIsEmpty() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIsNegativeOne() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedAfterTooManyRedirects() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs500() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  public void testCallsLoadFailedIfStatusCodeIs400() throws Exception {, +    verify(callback).onLoadFailed(isA(VolleyError.class));, +  private class CountDown implements Answer<Void> {, +, +    @Override, +    public Void answer(InvocationOnMock invocation) throws Throwable {, +      waitForResponseLatch.countDown();, +      return null;, +    }, +  }, +, +++ b/library/findbugs-exclude.xml, +    <Match>, +       <Class name="com.bumptech.glide.load.engine.GlideException$IndentedPrintStream" />, +       <Bug pattern="DM_DEFAULT_ENCODING" />, +    </Match>]