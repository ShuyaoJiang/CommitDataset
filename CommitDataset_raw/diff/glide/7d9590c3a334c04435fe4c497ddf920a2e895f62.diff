[+++ b/.idea/codeStyleSettings.xml, +          <option name="KEEP_LINE_BREAKS" value="false" />, +          <option name="METHOD_PARAMETERS_WRAP" value="1" />, +          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, +          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +          <option name="WRAP_LONG_LINES" value="true" />, +++ b/.idea/codeStyleSettings.xml, +          <option name="KEEP_LINE_BREAKS" value="false" />, +          <option name="METHOD_PARAMETERS_WRAP" value="1" />, +          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, +          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +          <option name="WRAP_LONG_LINES" value="true" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, +        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +        when(failLoader.getDataFetcher(any(failModel), anyInt(), anyInt())).thenReturn(failFetcher);, +        when(modelLoader.getDataFetcher(any(modelClass), anyInt(), anyInt())), +++ b/.idea/codeStyleSettings.xml, +          <option name="KEEP_LINE_BREAKS" value="false" />, +          <option name="METHOD_PARAMETERS_WRAP" value="1" />, +          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, +          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +          <option name="WRAP_LONG_LINES" value="true" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, +        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +        when(failLoader.getDataFetcher(any(failModel), anyInt(), anyInt())).thenReturn(failFetcher);, +        when(modelLoader.getDataFetcher(any(modelClass), anyInt(), anyInt())), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/ImageVideoModelLoaderTest.java, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +                .getDataFetcher(any(Uri.class), anyInt(), anyInt())), +                .getDataFetcher(any(Uri.class), anyInt(), anyInt())), +                .getDataFetcher(new Object(), 100, 100), +        assertNotNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        assertNotNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        when(harness.fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        String firstId = harness.getLoader().getDataFetcher(first, 1, 2).getId();, +        String secondId = harness.getLoader().getDataFetcher(second, 1, 2).getId();, +            when(streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(streamFetcher);, +            when(fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())), +++ b/.idea/codeStyleSettings.xml, +          <option name="KEEP_LINE_BREAKS" value="false" />, +          <option name="METHOD_PARAMETERS_WRAP" value="1" />, +          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, +          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +          <option name="WRAP_LONG_LINES" value="true" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, +        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +        when(failLoader.getDataFetcher(any(failModel), anyInt(), anyInt())).thenReturn(failFetcher);, +        when(modelLoader.getDataFetcher(any(modelClass), anyInt(), anyInt())), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/ImageVideoModelLoaderTest.java, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +        String id = harness.getLoader().getDataFetcher(model, 1, 2).getId();, +                .getDataFetcher(any(Uri.class), anyInt(), anyInt())), +                .getDataFetcher(any(Uri.class), anyInt(), anyInt())), +                .getDataFetcher(new Object(), 100, 100), +        assertNotNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        assertNotNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        when(harness.fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        when(harness.streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(null);, +        assertNull(harness.getLoader().getDataFetcher(new Object(), 100, 100));, +        String firstId = harness.getLoader().getDataFetcher(first, 1, 2).getId();, +        String secondId = harness.getLoader().getDataFetcher(second, 1, 2).getId();, +            when(streamModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())).thenReturn(streamFetcher);, +            when(fileDescriptorModelLoader.getDataFetcher(anyObject(), anyInt(), anyInt())), +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java, +        assertNull(urlLoader.getDataFetcher(new Object(), 100, 100));, +        assertNull(urlLoader.getDataFetcher(new Object(), 100, 100));, +        when(wrapped.getDataFetcher(eq(expectedUrl), eq(width), eq(height))).thenReturn(expectedFetcher);, +        assertEquals(expectedFetcher, urlLoader.getDataFetcher(model, width, height));, +        when(wrapped.getDataFetcher(any(GlideUrl.class), eq(width), eq(height))).thenAnswer(, +        assertEquals(expected, urlLoader.getDataFetcher(new Object(), width, height));, +        urlLoader.getDataFetcher(model, width, height);, +        when(wrapped.getDataFetcher(any(GlideUrl.class), eq(width), eq(height))).thenReturn(expected);, +        assertEquals(expected, urlLoader.getDataFetcher(new Object(), width, height));, +++ b/.idea/codeStyleSettings.xml, +          <option name="KEEP_LINE_BREAKS" value="false" />, +          <option name="METHOD_PARAMETERS_WRAP" value="1" />, +          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />, +          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />, +          <option name="WRAP_LONG_LINES" value="true" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(mockUrlLoader.getDataFetcher(any(GlideUrl.class), anyInt(), anyInt())).thenReturn(mockStreamFetcher);, +        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +        when(failLoader.getDataFetcher(any(failModel), anyInt(), anyInt())).thenReturn(failFetcher);, +        when(modelLoader.getDataFetcher(any(modelClass), anyInt(), anyInt()))]