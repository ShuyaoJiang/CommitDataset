[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +        EngineJob job = harness.getJob();, +        job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +        EngineJob job = harness.getJob();, +        job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +    public void testRunnerIsNotRemovedFromRunnersIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        assertEquals(harness.runner, harness.runners.get(harness.cacheKey));, +    }, +, +    @Test, +    public void testRunnerIsNotCancelledIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        verify(harness.runner, never()).cancel();, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +        EngineJob job = harness.getJob();, +        job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +    public void testRunnerIsNotRemovedFromRunnersIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        assertEquals(harness.runner, harness.runners.get(harness.cacheKey));, +    }, +, +    @Test, +    public void testRunnerIsNotCancelledIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        verify(harness.runner, never()).cancel();, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    public void onEngineJobCancelled(EngineJob engineJob, Key key) {, +        ResourceRunner runner = runners.get(key);, +        if (runner.getJob() == engineJob) {, +            runners.remove(key);, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +        EngineJob job = harness.getJob();, +        job.cancel();, +        verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));, +        verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +        harness.engine.onEngineJobCancelled(harness.job, harness.cacheKey);, +    public void testRunnerIsNotRemovedFromRunnersIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        assertEquals(harness.runner, harness.runners.get(harness.cacheKey));, +    }, +, +    @Test, +    public void testRunnerIsNotCancelledIfOldJobIsCancelled() {, +        harness.doLoad();, +, +        harness.engine.onEngineJobCancelled(mock(EngineJob.class), harness.cacheKey);, +, +        verify(harness.runner, never()).cancel();, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    public void onEngineJobCancelled(EngineJob engineJob, Key key) {, +        ResourceRunner runner = runners.get(key);, +        if (runner.getJob() == engineJob) {, +            runners.remove(key);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java]