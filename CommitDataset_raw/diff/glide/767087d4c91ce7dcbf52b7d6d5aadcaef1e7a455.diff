[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import java.io.FileNotFoundException;, +    public void setUp() throws FileNotFoundException {, +        DecodeJob.FileOpener fileOpener = mock(DecodeJob.FileOpener.class);, +        public Harness() throws FileNotFoundException {, +        public Harness(DiskCacheStrategy diskCacheStrategy) throws FileNotFoundException {, +            when(fileOpener.open(any(File.class))).thenReturn(mock(OutputStream.class));, +                    transcoder, diskCache, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import java.io.FileNotFoundException;, +    public void setUp() throws FileNotFoundException {, +        DecodeJob.FileOpener fileOpener = mock(DecodeJob.FileOpener.class);, +        public Harness() throws FileNotFoundException {, +        public Harness(DiskCacheStrategy diskCacheStrategy) throws FileNotFoundException {, +            when(fileOpener.open(any(File.class))).thenReturn(mock(OutputStream.class));, +                    transcoder, diskCache, diskCacheStrategy, priority, fileOpener);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    private static final FileOpener DEFAULT_FILE_OPENER = new FileOpener();, +    private final FileOpener fileOpener;, +, +        this(resultKey, width, height, fetcher, loadProvider, transformation, transcoder, diskCache, diskCacheStrategy,, +                priority, DEFAULT_FILE_OPENER);, +    }, +, +    // Visible for testing., +    DecodeJob(EngineKey resultKey, int width, int height, DataFetcher<A> fetcher,, +            DataLoadProvider<A, T> loadProvider, Transformation<T> transformation, ResourceTranscoder<T, Z> transcoder,, +            DiskCache diskCache, DiskCacheStrategy diskCacheStrategy, Priority priority, FileOpener fileOpener) {, +        this.fileOpener = fileOpener;, +    private void logWithTimeAndKey(String message, long startTime) {, +        Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + resultKey);, +    }, +    class SourceWriter<DataType> implements DiskCache.Writer {, +        private final Encoder<DataType> encoder;, +        private final DataType data;, +, +        public SourceWriter(Encoder<DataType> encoder, DataType data) {, +                os = fileOpener.open(file);, +    static class FileOpener {, +        public OutputStream open(File file) throws FileNotFoundException {, +            return new BufferedOutputStream(new FileOutputStream(file));, +        }]