[+++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, +         *     public void onException(Exception e, ModelType model, Target target) {, +        register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());, +        register(File.class, InputStream.class, new StreamFileLoader.Factory());, +        register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, +        register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());, +        register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());, +        register(String.class, InputStream.class, new StreamStringLoader.Factory());, +        register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());, +        register(Uri.class, InputStream.class, new StreamUriLoader.Factory());, +            register(URL.class, InputStream.class, new VolleyUrlLoader.Factory());, +     * {@link ImageManager} with custom options for use with {@link Request} and/or as an, +     * Set the {@link ImageManager} to use with {@link Request}., +     * Set the {@link ImageManager} to use with {@link Request} Replaces the current, +     * models. Typically the {@link ModelRequest#using(StreamModelLoader)} or, +     * {@link ModelRequest#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * with the ModelLoader being used to load it., +     *     used for any other model class, {@link ModelLoaderFactory#teardown()}, +     * @see ModelRequest#using(FileDescriptorModelLoader), +     * @see ModelRequest#using(StreamModelLoader), +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class the model loader will translate the model type into., +     * @param factory The factory to use., +     * @param <T> The type of the model., +     * @param <Y> the type of the resource., +    public <T, Y> void register(Class<T> modelClass, Class<Y> resourceClass, ModelLoaderFactory<T, Y> factory) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.register(modelClass, resourceClass, factory);, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {, +        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);, +    }, +, +     * @param modelClass The class to get a {@link ModelLoader} for, +    public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass, Context context) {, +        return GLIDE.loaderFactory.buildModelLoader(modelClass, resourceClass, context);, +     * A convenience method to build a {@link ModelLoader} for the given model that produces {@link InputStream}s using, +     * a registered factory., +     * @see #buildModelLoader(Class, Class, android.content.Context), +    public static <T> ModelLoader<T, InputStream> buildStreamModelLoader(Class<T> modelClass, Context context) {, +        return buildModelLoader(modelClass, InputStream.class, context);, +     * A convenience method to build a {@link ModelLoader} for the given model class that produces, +     * {@link ParcelFileDescriptor}s using a registered factory., +     * @see #buildModelLoader(Class, Class, android.content.Context), +    public static <T> ModelLoader<T, ParcelFileDescriptor> buildFileDescriptorModelLoader(Class<T> modelClass,, +            Context context) {, +        return buildModelLoader(modelClass, ParcelFileDescriptor.class, context);, +    /**, +     * Cancel any pending loads Glide may have for the target and free any resources (such as {@link Bitmap}s) that may, +     * have been loaded for the target so they may be reused., +     *, +     * @param target The Target to cancel loads for., +     */, +    public static void clear(Target target) {, +        ImagePresenter imagePresenter = target.getImagePresenter();, +        if (imagePresenter != null) {, +            imagePresenter.clear();, +        }, +    /**, +     * Cancel any pending loads Glide may have for the view and free any resources that may have been loaded for the, +     * view., +     *, +     * <p>, +     *     Note that this will only work if {@link View#setTag(Object)} is not called on this view outside of Glide., +     * </p>]