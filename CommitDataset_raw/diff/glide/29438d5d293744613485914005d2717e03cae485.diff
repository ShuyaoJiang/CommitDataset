[+++ b/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java, +import static org.mockito.Mockito.mock;, +, +    public void testThrowsOnGetSizeIfGivenWidthIsLessThanZero() {, +        getTarget(-1, 1).getSize(mock(SizeReadyCallback.class));, +    }, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenWidthIsEqualToZero() {, +        getTarget(0, 1).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenHeightIsLessThanZero() {, +        getTarget(1, -1).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenHeightIsEqualToZero() {, +        getTarget(1, 0).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test, +    public void testCanBeConstructedWithoutDimensions() {, +        getTarget();, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfConstructedWithoutDimensions() {, +        getTarget().getSize(mock(SizeReadyCallback.class));, +    }, +, +    private SimpleTarget<Object> getTarget() {, +        return new SimpleTarget<Object>() {, +            public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {, +                // Do nothing., +    private SimpleTarget<Object> getTarget(int width, int height) {, +        return new SimpleTarget<Object>(width, height) {, +            public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {, +                // Do nothing., +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java, +import static org.mockito.Mockito.mock;, +, +    public void testThrowsOnGetSizeIfGivenWidthIsLessThanZero() {, +        getTarget(-1, 1).getSize(mock(SizeReadyCallback.class));, +    }, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenWidthIsEqualToZero() {, +        getTarget(0, 1).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenHeightIsLessThanZero() {, +        getTarget(1, -1).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfGivenHeightIsEqualToZero() {, +        getTarget(1, 0).getSize(mock(SizeReadyCallback.class));, +    }, +, +    @Test, +    public void testCanBeConstructedWithoutDimensions() {, +        getTarget();, +    }, +, +    @Test(expected = IllegalArgumentException.class), +    public void testThrowsOnGetSizeIfConstructedWithoutDimensions() {, +        getTarget().getSize(mock(SizeReadyCallback.class));, +    }, +, +    private SimpleTarget<Object> getTarget() {, +        return new SimpleTarget<Object>() {, +            public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {, +                // Do nothing., +    private SimpleTarget<Object> getTarget(int width, int height) {, +        return new SimpleTarget<Object>(width, height) {, +            public void onResourceReady(Object resource, GlideAnimation<? super Object> glideAnimation) {, +                // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java, +     * Constructor for the target that assumes you will have called, +     * {@link com.bumptech.glide.GenericRequestBuilder#override(int, int)} on the request builder this target is given, +     * to., +     *, +     * <p>, +     *     Requests that load into this target will throw an {@link java.lang.IllegalArgumentException} if, +     *     {@link com.bumptech.glide.GenericRequestBuilder#override(int, int)} was not called on the request builder., +     * </p>, +     */, +    public SimpleTarget() {, +        this(-1, -1);, +    }, +, +    /**, +        if (width <= 0 || height <= 0) {, +            throw new IllegalArgumentException("Width and height must both be > 0, but given width: " + width + " and", +                    + " height: " + height + ", either provide dimensions in the constructor or call override()");, +        }]