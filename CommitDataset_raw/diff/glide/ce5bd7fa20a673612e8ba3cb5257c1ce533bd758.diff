[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +        if (transformation == null) {, +            throw new NullPointerException("Transformation must not be null");, +        }, +, +            encoder = new BitmapEncoder();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +        if (transformation == null) {, +            throw new NullPointerException("Transformation must not be null");, +        }, +, +            encoder = new BitmapEncoder();, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +            if (transformation == null) {, +                throw new NullPointerException("Transformation must not be null, try .transform(UnitTransformation", +                        + ".get())");, +            }, +        Object received = resource != null ? resource.get() : null;, +        if (resource == null || !transcodeClass.isAssignableFrom(received.getClass())) {, +                    + received));, +        R result = (R) received;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +        if (transformation == null) {, +            throw new NullPointerException("Transformation must not be null");, +        }, +, +            encoder = new BitmapEncoder();, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +            if (transformation == null) {, +                throw new NullPointerException("Transformation must not be null, try .transform(UnitTransformation", +                        + ".get())");, +            }, +        Object received = resource != null ? resource.get() : null;, +        if (resource == null || !transcodeClass.isAssignableFrom(received.getClass())) {, +                    + received));, +        R result = (R) received;, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +package com.bumptech.glide.load.resource.gif;, +, +import com.bumptech.glide.gifdecoder.GifDecoder;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.mockito.Mockito.mock;, +, +@RunWith(RobolectricTestRunner.class), +public class GifFrameManagerTest {, +, +    @Test(expected = NullPointerException.class), +    public void testThrowsIfTransformationIsNull() {, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +    }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +        if (transformation == null) {, +            throw new NullPointerException("Transformation must not be null");, +        }, +, +            encoder = new BitmapEncoder();, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +            if (transformation == null) {, +                throw new NullPointerException("Transformation must not be null, try .transform(UnitTransformation", +                        + ".get())");, +            }, +        Object received = resource != null ? resource.get() : null;, +        if (resource == null || !transcodeClass.isAssignableFrom(received.getClass())) {, +                    + received));, +        R result = (R) received;, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +package com.bumptech.glide.load.resource.gif;, +, +import com.bumptech.glide.gifdecoder.GifDecoder;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.mockito.Mockito.mock;, +, +@RunWith(RobolectricTestRunner.class), +public class GifFrameManagerTest {, +, +    @Test(expected = NullPointerException.class), +    public void testThrowsIfTransformationIsNull() {, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +    }, +}, +++ b/library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java, +        Transformation transformation = mock(Transformation.class);, +                    transformation,, +    @Test(expected = NullPointerException.class)]