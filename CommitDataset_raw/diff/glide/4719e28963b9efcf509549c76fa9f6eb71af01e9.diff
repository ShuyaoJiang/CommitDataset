[+++ b/src/com/bumptech/photos/PhotoManager.java, +     * Loads the image for the given id assuming its width and height are exactly those given, +     * @param path - the path to the image, +     * @param width - the width of the image on disk, +     * @param height - the height of the image on disk, +     * @param cb - the callback called when the load completes, +     * @return A token tracking this request, +     */, +    public Object getImageExact(final String path, int width, int height, final LoadedCallback cb) {, +        final Object token = cb;, +        final String key = getKey(path, width, height, ResizeType.AS_IS);, +        if (!returnFromCache(key, cb)) {, +            final Runnable task = resizer.loadAsIs(path, width, height, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +        }, +        return token;, +    }, +, +    /**, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +++ b/src/com/bumptech/photos/PhotoManager.java, +     * Loads the image for the given id assuming its width and height are exactly those given, +     * @param path - the path to the image, +     * @param width - the width of the image on disk, +     * @param height - the height of the image on disk, +     * @param cb - the callback called when the load completes, +     * @return A token tracking this request, +     */, +    public Object getImageExact(final String path, int width, int height, final LoadedCallback cb) {, +        final Object token = cb;, +        final String key = getKey(path, width, height, ResizeType.AS_IS);, +        if (!returnFromCache(key, cb)) {, +            final Runnable task = resizer.loadAsIs(path, width, height, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +        }, +        return token;, +    }, +, +    /**, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +++ b/src/com/bumptech/photos/resize/ResizeJobGenerator.java, +    public Runnable loadAsIs(final String path, final int width, final int height, LoadedCallback cb) {, +        return new StreamResizeRunnable(cb) {, +            @Override, +            public Bitmap getRecycledBitmap() {, +                return bitmapCache.get(width, height);, +            }, +, +            @Override, +            public Bitmap resize(Bitmap recycled) {, +                return Utils.load(path, recycled);, +            }, +        };, +    }, +, +    }, +++ b/src/com/bumptech/photos/PhotoManager.java, +     * Loads the image for the given id assuming its width and height are exactly those given, +     * @param path - the path to the image, +     * @param width - the width of the image on disk, +     * @param height - the height of the image on disk, +     * @param cb - the callback called when the load completes, +     * @return A token tracking this request, +     */, +    public Object getImageExact(final String path, int width, int height, final LoadedCallback cb) {, +        final Object token = cb;, +        final String key = getKey(path, width, height, ResizeType.AS_IS);, +        if (!returnFromCache(key, cb)) {, +            final Runnable task = resizer.loadAsIs(path, width, height, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +        }, +        return token;, +    }, +, +    /**, +    public Object getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +++ b/src/com/bumptech/photos/resize/ResizeJobGenerator.java, +    public Runnable loadAsIs(final String path, final int width, final int height, LoadedCallback cb) {, +        return new StreamResizeRunnable(cb) {, +            @Override, +            public Bitmap getRecycledBitmap() {, +                return bitmapCache.get(width, height);, +            }, +, +            @Override, +            public Bitmap resize(Bitmap recycled) {, +                return Utils.load(path, recycled);, +            }, +        };, +    }, +, +    }, +++ b/src/com/bumptech/photos/view/loader/Approximate.java, +        return photoManager.getImageApproximate(path, width, height, cb);, +++ b/src/com/bumptech/photos/PhotoManager.java, +     * Loads the image for the given id assuming its width and height are exactly those given, +     * @param path - the path to the image, +     * @param width - the width of the image on disk, +     * @param height - the height of the image on disk, +     * @param cb - the callback called when the load completes]