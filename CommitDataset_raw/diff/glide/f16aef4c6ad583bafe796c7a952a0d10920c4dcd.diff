[+++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/library/build.gradle, +        classpath = files(), +            classpath += classPathForQuality(), +        classpath = files(), +        classpath += files("${project.buildDir}/intermediates/classes/debug/"), +        doFirst {, +            classpath += classPathForQuality(), +        }, +, +        //TODO enable this once new Gradle containing this flag is out, +        //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432, +        //incrementalAnalysis = true, +def classPathForQuality() {, +    return files(, +            android.bootClasspath,, +            project.configurations.compile,, +            project.android.libraryVariants.collect { it.javaCompile.classpath }, +    ), +}, +, +++ b/gradle.properties, +PMD_VERSION=6.0.0, +++ b/library/build.gradle, +        classpath = files(), +            classpath += classPathForQuality(), +        classpath = files(), +        classpath += files("${project.buildDir}/intermediates/classes/debug/"), +        doFirst {, +            classpath += classPathForQuality(), +        }, +, +        //TODO enable this once new Gradle containing this flag is out, +        //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432, +        //incrementalAnalysis = true, +def classPathForQuality() {, +    return files(, +            android.bootClasspath,, +            project.configurations.compile,, +            project.android.libraryVariants.collect { it.javaCompile.classpath }, +    ), +}, +, +++ b/library/pmd-ruleset.xml, +    <rule ref="category/java/errorprone.xml">, +        <!-- Not using beans. -->, +        <exclude name="BeanMembersShouldSerialize" />, +        <!-- wat -->, +        <exclude name="AvoidFieldNameMatchingTypeName" />, +        <!-- This is identifying trivial cases that are clearly correct. -->, +        <exclude name="DataflowAnomalyAnalysis" />, +        <!-- Used regularly for object pooling. -->, +        <exclude name="NullAssignment" />, +        <!-- This can make the code easier to read and avoid duplicated logic in some cases. -->, +        <exclude name="AssignmentInOperand" />, +        <!-- I don't think this is confusing. -->, +        <exclude name="AvoidFieldNameMatchingMethodName" />, +        <!-- There are enough cases where this makes sense (typically related to logic around the number of items in a collection) that a blanket ban doesn't seem like a good idea. -->, +        <exclude name="AvoidLiteralsInIfCondition" />, +        <!-- It's clear that this is bad, but we have a number of cases where it makes sense and a blanket ban is irritating. -->, +        <exclude name="AvoidCatchingThrowable" />, +    <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">, +    <rule ref="category/java/codestyle.xml">, +      <!-- Abstract classes don't need to have Abstract in the name -->, +      <exclude name="AbstractNaming" />, +      <!-- Who cares? -->, +      <exclude name="AtLeastOneConstructor" />, +      <!-- Don't need to annotate package private methods. -->, +      <exclude name="DefaultPackage" />, +      <exclude name="CommentDefaultAccessModifier" />, +      <!-- Optionally implemented default empty methods are fine. -->, +      <!-- Why make generics less clear by using shorter names? -->, +      <exclude name="GenericsNaming" />, +      <!-- No need to enforce final if it's not necessary. -->, +      <exclude name="MethodArgumentCouldBeFinal" />, +      <exclude name="LocalVariableCouldBeFinal" />, +      <!-- This isn't always the easiest way to read a method. -->, +      <exclude name="OnlyOneReturn" />, +      <!-- Obfuscated code is best code? -->, +      <exclude name="LongVariable" />, +      <!-- This is not always true. -->, +      <exclude name="ShortClassName" />, +      <!-- A good idea but we have tons of violations. FIXME. -->, +      <exclude name="ShortMethodName" />, +      <exclude name="ShortVariable" />, +      <!-- We don't use in and out to mean modified or not modified by the method, it's useful to match framework methods. -->, +      <exclude name="AvoidPrefixingMethodParameters" />, +      <!-- No idea what this is supposed to accomplish. -->, +      <exclude name="AvoidFinalLocalVariable" />, +      <!-- These are often useful for clarity and explicitly suggested by Google's code style. -->, +      <exclude name="UselessParentheses" />, +      <!-- Theoretically this might be reasonable but the number of imports probably varies from class to class and this doesn't seem worth the overhead to maintain. -->, +      <exclude name="TooManyStaticImports" />, +      <!-- Lots of existing violations, not clear that the overhead is worthwhile though there are some cases where we definitely need to call super. FIXME. -->, +      <exclude name="CallSuperInConstructor" />, +      <!-- This is a reasonable idea, but in practice often the != null case is the expected case and it makes sense for it to come first. -->, +      <exclude name="ConfusingTernary" />]