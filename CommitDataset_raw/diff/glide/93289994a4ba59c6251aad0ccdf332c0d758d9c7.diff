[+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import java.util.ArrayList;, +import java.util.List;, +  @Nullable private List<RequestListener<TranscodeType>> requestListeners;, +   * <p>Subsequent calls to this method will replace previously set listeners. To set multiple, +   * listeners, use {@link #addListener} instead., +   *, +    this.requestListeners = null;, +    return addListener(requestListener);, +  }, +  /**, +   * Adds a {@link RequestListener}. If called multiple times, all passed, +   * {@link RequestListener listeners} will be called in order., +   *, +   * @param requestListener The request listener to use. If {@code null}, this method is a noop., +   * @return This request builder., +   */, +  @NonNull, +  @CheckResult, +  public RequestBuilder<TranscodeType> addListener(, +      @Nullable RequestListener<TranscodeType> requestListener) {, +    if (requestListener != null) {, +      if (this.requestListeners == null) {, +        this.requestListeners = new ArrayList<>();, +      }, +      this.requestListeners.add(requestListener);, +    }, +        requestListeners,, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import java.util.ArrayList;, +import java.util.List;, +  @Nullable private List<RequestListener<TranscodeType>> requestListeners;, +   * <p>Subsequent calls to this method will replace previously set listeners. To set multiple, +   * listeners, use {@link #addListener} instead., +   *, +    this.requestListeners = null;, +    return addListener(requestListener);, +  }, +  /**, +   * Adds a {@link RequestListener}. If called multiple times, all passed, +   * {@link RequestListener listeners} will be called in order., +   *, +   * @param requestListener The request listener to use. If {@code null}, this method is a noop., +   * @return This request builder., +   */, +  @NonNull, +  @CheckResult, +  public RequestBuilder<TranscodeType> addListener(, +      @Nullable RequestListener<TranscodeType> requestListener) {, +    if (requestListener != null) {, +      if (this.requestListeners == null) {, +        this.requestListeners = new ArrayList<>();, +      }, +      this.requestListeners.add(requestListener);, +    }, +        requestListeners,, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +import java.util.List;, +  @Nullable private List<RequestListener<R>> requestListeners;, +      @Nullable List<RequestListener<R>> requestListeners,, +        requestListeners,, +      @Nullable List<RequestListener<R>> requestListeners,, +    this.requestListeners = requestListeners;, +    requestListeners = null;, +      boolean anyListenerHandledUpdatingTarget = false;, +      if (requestListeners != null) {, +        for (RequestListener<R> listener : requestListeners) {, +          anyListenerHandledUpdatingTarget |=, +              listener.onResourceReady(result, model, target, dataSource, isFirstResource);, +        }, +      }, +      anyListenerHandledUpdatingTarget |=, +          targetListener != null, +              && targetListener.onResourceReady(result, model, target, dataSource, isFirstResource);, +, +      if (!anyListenerHandledUpdatingTarget) {, +      boolean anyListenerHandledUpdatingTarget = false;, +      if (requestListeners != null) {, +        for (RequestListener<R> listener : requestListeners) {, +          anyListenerHandledUpdatingTarget |=, +              listener.onLoadFailed(e, model, target, isFirstReadyResource());, +        }, +      }, +      anyListenerHandledUpdatingTarget |=, +          targetListener != null, +              && targetListener.onLoadFailed(e, model, target, isFirstReadyResource());, +, +      if (!anyListenerHandledUpdatingTarget) {, +          // compare them using equals(). We can however, at least assert that the same amount of, +          // request listeners are present in both requests, +          && listenerCountEquals(this, that);, +  private static boolean listenerCountEquals(SingleRequest<?> first, SingleRequest<?> second) {, +    int firstListenerCount = first.requestListeners == null ? 0 : first.requestListeners.size();, +    int secondListenerCount = second.requestListeners == null ? 0 : second.requestListeners.size();, +    return firstListenerCount == secondListenerCount;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import java.util.ArrayList;, +import java.util.List;]