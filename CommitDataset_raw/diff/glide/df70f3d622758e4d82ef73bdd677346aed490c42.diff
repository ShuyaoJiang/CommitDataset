[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +  private static final int TRANSFORMATION = 1 << 11;, +  private static final int RESOURCE_CLASS = 1 << 12;, +  private static final int FALLBACK = 1 << 13;, +  private static final int FALLBACK_ID = 1 << 14;, +  private static final int THEME = 1 << 15;, +  public final CHILD diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {, +  public final CHILD priority(@NonNull Priority priority) {, +  public final CHILD placeholder(@Nullable Drawable drawable) {, +  public final CHILD error(@Nullable Drawable drawable) {, +  public final CHILD signature(@NonNull Key signature) {, +  public final <T> CHILD set(@NonNull Option<T> option, @NonNull T value) {, +    Preconditions.checkNotNull(option);, +    Preconditions.checkNotNull(value);, +  public final CHILD decode(@NonNull Class<?> resourceClass) {, +  public CHILD encodeFormat(@NonNull Bitmap.CompressFormat format) {, +    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));, +  public CHILD encodeQuality(int quality) {, +  /**, +   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using, +   * {@link Downsampler}., +   *, +   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be, +   * decoded using a decoder that cannot control the format, +   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to, +   * ignore the requested format if it can't display the image (ie RGB_565 is requested, but the, +   * image has alpha)., +   */, +  public CHILD format(@NonNull DecodeFormat format) {, +   *, +   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the, +   *                        Android framework implementation return a representative frame., +  public CHILD frame(long frameTimeMicros) {, +    return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);, +  /**, +   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using, +   * {@link Downsampler}., +   */, +  public CHILD downsample(@NonNull DownsampleStrategy strategy) {, +    return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));, +  public CHILD transform(Context context, @NonNull Transformation<Bitmap> transformation) {, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +  private static final int TRANSFORMATION = 1 << 11;, +  private static final int RESOURCE_CLASS = 1 << 12;, +  private static final int FALLBACK = 1 << 13;, +  private static final int FALLBACK_ID = 1 << 14;, +  private static final int THEME = 1 << 15;, +  public final CHILD diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {, +  public final CHILD priority(@NonNull Priority priority) {, +  public final CHILD placeholder(@Nullable Drawable drawable) {, +  public final CHILD error(@Nullable Drawable drawable) {, +  public final CHILD signature(@NonNull Key signature) {, +  public final <T> CHILD set(@NonNull Option<T> option, @NonNull T value) {, +    Preconditions.checkNotNull(option);, +    Preconditions.checkNotNull(value);, +  public final CHILD decode(@NonNull Class<?> resourceClass) {, +  public CHILD encodeFormat(@NonNull Bitmap.CompressFormat format) {, +    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));, +  public CHILD encodeQuality(int quality) {, +  /**, +   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using, +   * {@link Downsampler}., +   *, +   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be, +   * decoded using a decoder that cannot control the format, +   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to, +   * ignore the requested format if it can't display the image (ie RGB_565 is requested, but the, +   * image has alpha)., +   */, +  public CHILD format(@NonNull DecodeFormat format) {, +   *, +   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the, +   *                        Android framework implementation return a representative frame., +  public CHILD frame(long frameTimeMicros) {, +    return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);, +  /**, +   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using, +   * {@link Downsampler}., +   */, +  public CHILD downsample(@NonNull DownsampleStrategy strategy) {, +    return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));, +  public CHILD transform(Context context, @NonNull Transformation<Bitmap> transformation) {, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +@SuppressWarnings({"PMD.UseUtilityClass", "unused"}), +  /**, +   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set., +   */, +  /**, +   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set., +   */, +  public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {, +  /**, +   * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set., +   */]