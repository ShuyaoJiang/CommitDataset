[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import android.graphics.Bitmap.Config;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +    byte[] data = asPng(toCompress);, +    byte[] data = asJpeg(toCompress);, +    byte[] data = asWebp(toCompress);, +, +  @Test, +  public void load_withSmallerWideGamutInPool_decodesBitmap() {, +    BitmapPool bitmapPool = Glide.get(context).getBitmapPool();, +    Bitmap toPut = Bitmap.createBitmap(300, 298, Config.RGBA_F16);, +    bitmapPool.put(toPut);, +    // Add a second Bitmap to account for the InputStream decode., +    bitmapPool.put(Bitmap.createBitmap(toPut));, +, +    Bitmap wideGamut = Bitmap.createBitmap(300, 300, Config.RGBA_F16);, +    byte[] data = asPng(wideGamut);, +    Bitmap bitmap =, +        concurrency.get(, +            Glide.with(context), +                .asBitmap(), +                .load(data), +                .submit());, +    assertThat(bitmap).isNotNull();, +  }, +, +  private static byte[] asJpeg(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.JPEG);, +  }, +, +  private static byte[] asPng(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.PNG);, +  }, +, +  private static byte[] asWebp(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.WEBP);, +  }, +, +  private static byte[] toByteArray(Bitmap bitmap, CompressFormat format) {, +    ByteArrayOutputStream os = new ByteArrayOutputStream();, +    assertThat(bitmap.compress(format, 100, os)).isTrue();, +    return os.toByteArray();, +  }, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import android.graphics.Bitmap.Config;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +    byte[] data = asPng(toCompress);, +    byte[] data = asJpeg(toCompress);, +    byte[] data = asWebp(toCompress);, +, +  @Test, +  public void load_withSmallerWideGamutInPool_decodesBitmap() {, +    BitmapPool bitmapPool = Glide.get(context).getBitmapPool();, +    Bitmap toPut = Bitmap.createBitmap(300, 298, Config.RGBA_F16);, +    bitmapPool.put(toPut);, +    // Add a second Bitmap to account for the InputStream decode., +    bitmapPool.put(Bitmap.createBitmap(toPut));, +, +    Bitmap wideGamut = Bitmap.createBitmap(300, 300, Config.RGBA_F16);, +    byte[] data = asPng(wideGamut);, +    Bitmap bitmap =, +        concurrency.get(, +            Glide.with(context), +                .asBitmap(), +                .load(data), +                .submit());, +    assertThat(bitmap).isNotNull();, +  }, +, +  private static byte[] asJpeg(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.JPEG);, +  }, +, +  private static byte[] asPng(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.PNG);, +  }, +, +  private static byte[] asWebp(Bitmap bitmap) {, +    return toByteArray(bitmap, CompressFormat.WEBP);, +  }, +, +  private static byte[] toByteArray(Bitmap bitmap, CompressFormat format) {, +    ByteArrayOutputStream os = new ByteArrayOutputStream();, +    assertThat(bitmap.compress(format, 100, os)).isTrue();, +    return os.toByteArray();, +  }, +++ b/library/src/main/java/com/bumptech/glide/util/Util.java, +      case RGBA_F16:, +        bytesPerPixel = 8;, +        break;, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java, +import android.graphics.Bitmap.Config;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +    byte[] data = asPng(toCompress);, +    byte[] data = asJpeg(toCompress);, +    byte[] data = asWebp(toCompress);, +, +  @Test, +  public void load_withSmallerWideGamutInPool_decodesBitmap() {, +    BitmapPool bitmapPool = Glide.get(context).getBitmapPool();]