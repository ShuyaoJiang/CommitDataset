[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +//    @SuppressWarnings("unchecked"), +//    @Test, +//    public void testGenericLoader() throws Exception {, +//        File expected = new File("test");, +//, +//        Target<File> target = mock(Target.class);, +//        doAnswer(new CallCallback()).when(target).getSize(any(SizeReadyCallback.class));, +//, +//        GlideUrl glideUrl =  mock(GlideUrl.class);, +//        DataFetcher<File> dataFetcher = mock(DataFetcher.class);, +//        when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, +//        when(dataFetcher.getId()).thenReturn("id");, +//        ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, +//        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +//                .thenReturn(dataFetcher);, +//, +//        Resource<File> expectedResource = mock(Resource.class);, +//        when(expectedResource.get()).thenReturn(expected);, +//        ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, +//        when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, +//        ResourceDecoder<File, File> cacheDecoder = mock(ResourceDecoder.class);, +//        ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, +//        Encoder<File> sourceEncoder = mock(Encoder.class);, +//, +//, +//        verify(target).onResourceReady(eq(expected), any(GlideAnimation.class));, +//    }, +                .asDrawable(), +                .listener(new RequestListener<Drawable>() {, +                    public boolean onResourceReady(Drawable resource, Object model, Target target,, +                .thumbnail(requestManager.asDrawable(), +                .apply(placeholderOf(placeholder).error(error)), +//    @Test, +//    public void testNullModelWithModelLoaderDoesNotThrow() {, +//        String nullString = null;, +//        Drawable drawable = new ColorDrawable(Color.RED);, +//        StreamModelLoader<String> modelLoader = mock(StreamModelLoader.class);, +//, +//        verify(target).onLoadFailed(any(Exception.class), eq(drawable));, +//    }, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +//    @SuppressWarnings("unchecked"), +//    @Test, +//    public void testGenericLoader() throws Exception {, +//        File expected = new File("test");, +//, +//        Target<File> target = mock(Target.class);, +//        doAnswer(new CallCallback()).when(target).getSize(any(SizeReadyCallback.class));, +//, +//        GlideUrl glideUrl =  mock(GlideUrl.class);, +//        DataFetcher<File> dataFetcher = mock(DataFetcher.class);, +//        when(dataFetcher.loadData(any(Priority.class))).thenReturn(expected);, +//        when(dataFetcher.getId()).thenReturn("id");, +//        ModelLoader<GlideUrl, File> modelLoader = mock(ModelLoader.class);, +//        when(modelLoader.getDataFetcher(eq(glideUrl), anyInt(), anyInt())), +//                .thenReturn(dataFetcher);, +//, +//        Resource<File> expectedResource = mock(Resource.class);, +//        when(expectedResource.get()).thenReturn(expected);, +//        ResourceDecoder<File, File> sourceDecoder = mock(ResourceDecoder.class);, +//        when(sourceDecoder.decode(eq(expected), anyInt(), anyInt())).thenReturn(expectedResource);, +//        ResourceDecoder<File, File> cacheDecoder = mock(ResourceDecoder.class);, +//        ResourceEncoder<File> encoder = mock(ResourceEncoder.class);, +//        Encoder<File> sourceEncoder = mock(Encoder.class);, +//, +//, +//        verify(target).onResourceReady(eq(expected), any(GlideAnimation.class));, +//    }, +                .asDrawable(), +                .listener(new RequestListener<Drawable>() {, +                    public boolean onResourceReady(Drawable resource, Object model, Target target,, +                .thumbnail(requestManager.asDrawable(), +                .apply(placeholderOf(placeholder).error(error)), +//    @Test, +//    public void testNullModelWithModelLoaderDoesNotThrow() {, +//        String nullString = null;, +//        Drawable drawable = new ColorDrawable(Color.RED);, +//        StreamModelLoader<String> modelLoader = mock(StreamModelLoader.class);, +//, +//        verify(target).onLoadFailed(any(Exception.class), eq(drawable));, +//    }, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java, +import com.bumptech.glide.request.GlideContext;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +    @Mock GlideContext glideContext;, +    @Mock RequestTracker requestTracker;, +    @Mock Lifecycle lifecycle;, +        MockitoAnnotations.initMocks(this);, +        new RequestBuilder(null, Object.class, Object.class, requestTracker, lifecycle);, +        when(glideContext.buildImageViewTarget(any(ImageView.class), any(Class.class))).thenReturn(mock(Target.class));, +        return new RequestBuilder(glideContext, Object.class, Object.class, requestTracker, lifecycle), +                .load((Object) null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +//    @SuppressWarnings("unchecked"), +//    @Test, +//    public void testGenericLoader() throws Exception {, +//        File expected = new File("test");, +//]