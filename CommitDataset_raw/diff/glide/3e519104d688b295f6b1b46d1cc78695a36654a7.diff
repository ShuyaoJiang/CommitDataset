[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;, +import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;, +        transcoderRegistry.register(Bitmap.class, GlideBitmapDrawable.class,, +                new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool));, +                        new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool)));, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +     * @see com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable;, +import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;, +        transcoderRegistry.register(Bitmap.class, GlideBitmapDrawable.class,, +                new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool));, +                        new GlideBitmapDrawableTranscoder(context.getResources(), bitmapPool)));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawable.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.Paint;, +import android.graphics.PixelFormat;, +import android.graphics.Rect;, +import android.graphics.drawable.Drawable;, +import android.util.DisplayMetrics;, +import android.view.Gravity;, +, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +, +/**, + * A static {@link com.bumptech.glide.load.resource.drawable.GlideDrawable} for displaying a single image., + */, +public class GlideBitmapDrawable extends GlideDrawable {, +    private final Rect destRect = new Rect();, +    private int width;, +    private int height;, +    private boolean applyGravity;, +    private BitmapState state;, +, +    public GlideBitmapDrawable(Resources res, Bitmap bitmap) {, +        this(res, new BitmapState(bitmap));, +    }, +, +    GlideBitmapDrawable(Resources res, BitmapState state) {, +        this.state = state;, +        final int targetDensity;, +        if (res != null) {, +            final int density = res.getDisplayMetrics().densityDpi;, +            targetDensity = density == 0 ? DisplayMetrics.DENSITY_DEFAULT : density;, +            state.targetDensity = targetDensity;, +        } else {, +            targetDensity = state.targetDensity;, +        }, +        width = state.bitmap.getScaledWidth(targetDensity);, +        height = state.bitmap.getScaledHeight(targetDensity);, +    }, +, +    @Override, +    public int getIntrinsicWidth() {, +        return width;, +    }, +, +    @Override, +    public int getIntrinsicHeight() {, +        return height;, +    }, +, +    @Override, +    public boolean isAnimated() {, +        return false;, +    }, +, +    @Override, +    public void setLoopCount(int loopCount) {, +        // Do nothing., +    }, +, +    @Override, +    public void start() {, +        // Do nothing., +    }, +, +    @Override, +    public void stop() {, +        // Do nothing., +    }, +, +    @Override, +    public boolean isRunning() {, +        return false;, +    }, +, +    @Override, +    protected void onBoundsChange(Rect bounds) {, +        super.onBoundsChange(bounds);]