[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +        "com.bumptech.glide.request.RequestOptions")) {, +          + " RequestOptions object as their first and only parameter, found multiple for: ", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +        "com.bumptech.glide.request.RequestOptions")) {, +          + " RequestOptions object as their first and only parameter, found multiple for: ", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +    // With this we get @see RequestOptions#methodName()., +    // @see RequestOptions<CHILD>#methodName()., +   * in {@literal RequestOptions<T>} for example)., +  List<ExecutableElement> findStaticMethodsReturning(TypeElement clazz, TypeElement returnType) {, +    return FluentIterable.from(clazz.getEnclosedElements()), +        .filter(new FilterPublicMethods(returnType, MethodType.STATIC)), +        .transform(new ToMethod()), +        .toList();, +  }, +, +  private static final class ToMethod implements Function<Element, ExecutableElement> {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +        "com.bumptech.glide.request.RequestOptions")) {, +          + " RequestOptions object as their first and only parameter, found multiple for: ", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +    // With this we get @see RequestOptions#methodName()., +    // @see RequestOptions<CHILD>#methodName()., +   * in {@literal RequestOptions<T>} for example)., +  List<ExecutableElement> findStaticMethodsReturning(TypeElement clazz, TypeElement returnType) {, +    return FluentIterable.from(clazz.getEnclosedElements()), +        .filter(new FilterPublicMethods(returnType, MethodType.STATIC)), +        .transform(new ToMethod()), +        .toList();, +  }, +, +  private static final class ToMethod implements Function<Element, ExecutableElement> {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + * the base class, all methods from {@link com.bumptech.glide.request.RequestOptions} and all, + *    * {@literal @see} RequestOptions#sizeMultiplier(float), +  private static final String REQUEST_OPTIONS_PACKAGE_NAME = "com.bumptech.glide.request";, +  private static final String REQUEST_OPTIONS_SIMPLE_NAME = "RequestOptions";, +  private static final String REQUEST_OPTIONS_QUALIFIED_NAME =, +      REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;, +  /** A set of method names to avoid overriding from RequestOptions. */, +  private final TypeElement requestOptionsType;, +    requestOptionsType = processingEnv.getElementUtils().getTypeElement(, +        REQUEST_OPTIONS_QUALIFIED_NAME);, +              RequestBuilderGenerator.REQUEST_OPTIONS_SIMPLE_NAME);, +        .addJavadoc("{@link $T} and all generated options from\n", requestOptionsType), +        .addJavadoc("@see $T\n", requestOptionsType), +    return, +        !EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS.contains(requestOptionMethod.name), +        && requestOptionMethod.hasModifier(Modifier.PUBLIC), +        .addTypeVariables(requestOptionMethod.typeVariables), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, + * {@link com.bumptech.glide.request.RequestOptions} classes., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +        "com.bumptech.glide.request.RequestOptions")) {, +          + " RequestOptions object as their first and only parameter, found multiple for: ", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +    // With this we get @see RequestOptions#methodName()., +    // @see RequestOptions<CHILD>#methodName()., +   * in {@literal RequestOptions<T>} for example)., +  List<ExecutableElement> findStaticMethodsReturning(TypeElement clazz, TypeElement returnType) {, +    return FluentIterable.from(clazz.getEnclosedElements()), +        .filter(new FilterPublicMethods(returnType, MethodType.STATIC)), +        .transform(new ToMethod()), +        .toList();, +  }, +, +  private static final class ToMethod implements Function<Element, ExecutableElement> {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, + * the base class, all methods from {@link com.bumptech.glide.request.RequestOptions} and all, + *    * {@literal @see} RequestOptions#sizeMultiplier(float), +  private static final String REQUEST_OPTIONS_PACKAGE_NAME = "com.bumptech.glide.request";, +  private static final String REQUEST_OPTIONS_SIMPLE_NAME = "RequestOptions";, +  private static final String REQUEST_OPTIONS_QUALIFIED_NAME =, +      REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;, +  /** A set of method names to avoid overriding from RequestOptions. */, +  private final TypeElement requestOptionsType;, +    requestOptionsType = processingEnv.getElementUtils().getTypeElement(, +        REQUEST_OPTIONS_QUALIFIED_NAME);, +              RequestBuilderGenerator.REQUEST_OPTIONS_SIMPLE_NAME);]