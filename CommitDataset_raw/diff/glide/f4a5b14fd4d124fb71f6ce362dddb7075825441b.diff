[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java, +import static org.mockito.Matchers.anyInt;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +  @Mock BitmapPool bitmapPool;, +  @Mock GifHeaderParser parser;, +  @Mock GifDecoder gifDecoder;, +  @Mock ByteBufferGifDecoder.GifHeaderParserPool parserPool;, +  @Mock ByteBufferGifDecoder.GifDecoderFactory decoderFactory;, +, +, +    MockitoAnnotations.initMocks(this);, +    when(decoderFactory.build(any(GifDecoder.BitmapProvider.class),, +        any(GifHeader.class), any(ByteBuffer.class), anyInt())), +        .thenReturn(gifDecoder);, +        new LruByteArrayPool(), parserPool, decoderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java, +import static org.mockito.Matchers.anyInt;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +  @Mock BitmapPool bitmapPool;, +  @Mock GifHeaderParser parser;, +  @Mock GifDecoder gifDecoder;, +  @Mock ByteBufferGifDecoder.GifHeaderParserPool parserPool;, +  @Mock ByteBufferGifDecoder.GifDecoderFactory decoderFactory;, +, +, +    MockitoAnnotations.initMocks(this);, +    when(decoderFactory.build(any(GifDecoder.BitmapProvider.class),, +        any(GifHeader.class), any(ByteBuffer.class), anyInt())), +        .thenReturn(gifDecoder);, +        new LruByteArrayPool(), parserPool, decoderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        new GifDrawable(RuntimeEnvironment.application, mock(GifDecoder.class), bitmapPool,, +            transformation, 100, 100, firstFrame);, +    new GifDrawable(RuntimeEnvironment.application, mock(GifDecoder.class), bitmapPool,, +        transformation, 100, 100, null);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java, +import static org.mockito.Matchers.anyInt;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +  @Mock BitmapPool bitmapPool;, +  @Mock GifHeaderParser parser;, +  @Mock GifDecoder gifDecoder;, +  @Mock ByteBufferGifDecoder.GifHeaderParserPool parserPool;, +  @Mock ByteBufferGifDecoder.GifDecoderFactory decoderFactory;, +, +, +    MockitoAnnotations.initMocks(this);, +    when(decoderFactory.build(any(GifDecoder.BitmapProvider.class),, +        any(GifHeader.class), any(ByteBuffer.class), anyInt())), +        .thenReturn(gifDecoder);, +        new LruByteArrayPool(), parserPool, decoderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        new GifDrawable(RuntimeEnvironment.application, mock(GifDecoder.class), bitmapPool,, +            transformation, 100, 100, firstFrame);, +    new GifDrawable(RuntimeEnvironment.application, mock(GifDecoder.class), bitmapPool,, +        transformation, 100, 100, null);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java, +  private static final String TAG = "BufferGifDecoder";, +  private static final GifDecoderFactory GIF_DECODER_FACTORY = new GifDecoderFactory();, +  private final GifDecoderFactory gifDecoderFactory;, +    this(context, bitmapPool, byteArrayPool, PARSER_POOL, GIF_DECODER_FACTORY);, +      GifHeaderParserPool parserPool, GifDecoderFactory gifDecoderFactory) {, +    this.gifDecoderFactory = gifDecoderFactory;, +      return decode(source, width, height, parser);, +      GifHeaderParser parser) {, +, +    int sampleSize = getSampleSize(header, width, height);, +    GifDecoder gifDecoder = gifDecoderFactory.build(provider, header, byteBuffer, sampleSize);, +    gifDecoder.advance();, +    Bitmap firstFrame = gifDecoder.getNextFrame();, +        new GifDrawable(context, gifDecoder, bitmapPool, unitTransformation, width, height,, +            firstFrame);, +  private static int getSampleSize(GifHeader gifHeader, int targetWidth, int targetHeight) {, +    int exactSampleSize = Math.min(gifHeader.getHeight() / targetHeight,, +        gifHeader.getWidth() / targetWidth);, +    int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize);, +    // Although functionally equivalent to 0 for BitmapFactory, 1 is a safer default for our code, +    // than 0., +    int sampleSize = Math.max(1, powerOfTwoSampleSize);, +    if (Log.isLoggable(TAG, Log.VERBOSE)) {, +      Log.v(TAG, "Downsampling gif", +          + ", sampleSize: " + sampleSize, +          + ", target dimens: [" + targetWidth + "x" + targetHeight, +          + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight());, +    }, +    return sampleSize;, +  static class GifDecoderFactory {, +    public GifDecoder build(GifDecoder.BitmapProvider provider, GifHeader header,, +        ByteBuffer data, int sampleSize) {, +      return new GifDecoder(provider, header, data, sampleSize);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java, +import static org.mockito.Matchers.anyInt;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +  @Mock BitmapPool bitmapPool;, +  @Mock GifHeaderParser parser;, +  @Mock GifDecoder gifDecoder;, +  @Mock ByteBufferGifDecoder.GifHeaderParserPool parserPool;]