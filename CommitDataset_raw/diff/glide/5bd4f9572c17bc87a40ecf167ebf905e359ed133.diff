[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import java.util.concurrent.ExecutionException;, +    @Test, +    public void testNotifiesJobOfFailureIfCacheLoaderThrows() {, +        final Exception exception = new IOException("test");, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())).thenAnswer(, +                new Answer<Object>() {, +                    @Override, +                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                        throw exception;, +                    }, +                });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +    @Test, +    public void testNotifiesJobOfFailureIfTransformationThrows() {, +        final Exception exception = new RuntimeException("test");, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                throw exception;, +            }, +        });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +    @Test, +    public void testNotifiesJobOfFailureIfTranscoderThrows() {, +        final Exception exception = new RuntimeException("test");, +        when(harness.transcoder.transcode(any(Resource.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                throw exception;, +            }, +        });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +    @Test, +    public void testNotifiesJobOfFailureIfExecutorThrows() {, +        final Exception exception = new ExecutionException(new RuntimeException("test"));, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())).thenReturn(null);, +        when(harness.resizeService.submit(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                throw exception;, +            }, +        });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import java.util.concurrent.ExecutionException;, +    @Test, +    public void testNotifiesJobOfFailureIfCacheLoaderThrows() {, +        final Exception exception = new IOException("test");, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())).thenAnswer(, +                new Answer<Object>() {, +                    @Override, +                    public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                        throw exception;, +                    }, +                });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +    @Test, +    public void testNotifiesJobOfFailureIfTransformationThrows() {, +        final Exception exception = new RuntimeException("test");, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                throw exception;, +            }, +        });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));, +    }, +, +    @Test, +    public void testNotifiesJobOfFailureIfTranscoderThrows() {, +        final Exception exception = new RuntimeException("test");, +        when(harness.transcoder.transcode(any(Resource.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                throw exception;, +            }, +        });, +        harness.runner.run();, +        verify(harness.engineJob).onException(eq(exception));]