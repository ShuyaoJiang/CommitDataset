[+++ b/src/com/bumptech/photos/imagemanager/ImageResizer.java, +import android.media.ExifInterface;, +        return result == null ? null : orientImage(path, result);, +        int orientation = getOrientation(path);, +                result = rotateImage(result, orientation);, +        /**, +     * Returns a matrix with rotation set based on Exif orientation tag., +     * If the orientation is undefined or 0 null is returned., +     *, +     * @param pathToOriginal Path to original image file that may have exif data., +     * @return  A rotation in degrees based on exif orientation, +     */, +    public static int getOrientation(String pathToOriginal) {, +        int degreesToRotate = 0;, +        try{, +            ExifInterface exif = new ExifInterface(pathToOriginal);, +            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);, +            if (orientation == ExifInterface.ORIENTATION_ROTATE_90){, +                degreesToRotate = 90;, +            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_180){, +                degreesToRotate = 180;, +            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_270){, +                degreesToRotate = 270;, +            }, +        } catch (IOException e){, +            Log.w("IOException for image with filePath=" + pathToOriginal);, +        } catch (Exception e) {, +            Log.w("Exception when trying to get image orientation matrix");, +            e.printStackTrace();, +        }, +        return degreesToRotate;, +    }, +, +    /**, +     * This is an expensive operation that copies the image in place with the pixels rotated., +     * If possible rather use getOrientationMatrix, and set that as the imageMatrix on an ImageView., +     *, +     * @param pathToOriginal Path to original image file that may have exif data., +     * @param imageToOrient Image Bitmap to orient., +     * @return The oriented bitmap. May be the imageToOrient without modification, or a new Bitmap., +     */, +    public static Bitmap orientImage(String pathToOriginal, Bitmap imageToOrient){, +        int degreesToRotate = getOrientation(pathToOriginal);, +        return rotateImage(imageToOrient, degreesToRotate);, +    }, +, +    /**, +     * This is an expensive operation that copies the image in place with the pixels rotated., +     * If possible rather use getOrientationMatrix, and set that as the imageMatrix on an ImageView., +     *, +     * @param imageToOrient Image Bitmap to orient., +     * @param degreesToRotate number of degrees to rotate the image by. If zero the original image is returned unmodified., +     * @return The oriented bitmap. May be the imageToOrient without modification, or a new Bitmap., +     */, +    public static Bitmap rotateImage(Bitmap imageToOrient, int degreesToRotate) {, +        try{, +            if(degreesToRotate != 0) {, +                Matrix matrix = new Matrix();, +                matrix.setRotate(degreesToRotate);, +                imageToOrient = Bitmap.createBitmap(, +                        imageToOrient,, +                        0,, +                        0,, +                        imageToOrient.getWidth(),, +                        imageToOrient.getHeight(),, +                        matrix,, +                        true);, +            }, +        } catch (Exception e) {, +            Log.w("Exception when trying to orient image");, +            e.printStackTrace();, +        }, +        return imageToOrient;, +    }, +, +++ b/src/com/bumptech/photos/imagemanager/ImageResizer.java, +import android.media.ExifInterface;, +        return result == null ? null : orientImage(path, result);, +        int orientation = getOrientation(path);, +                result = rotateImage(result, orientation);, +        /**, +     * Returns a matrix with rotation set based on Exif orientation tag., +     * If the orientation is undefined or 0 null is returned., +     *, +     * @param pathToOriginal Path to original image file that may have exif data., +     * @return  A rotation in degrees based on exif orientation, +     */, +    public static int getOrientation(String pathToOriginal) {, +        int degreesToRotate = 0;, +        try{, +            ExifInterface exif = new ExifInterface(pathToOriginal);, +            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);, +            if (orientation == ExifInterface.ORIENTATION_ROTATE_90){, +                degreesToRotate = 90;, +            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_180){, +                degreesToRotate = 180;, +            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_270){, +                degreesToRotate = 270;, +            }, +        } catch (IOException e){]