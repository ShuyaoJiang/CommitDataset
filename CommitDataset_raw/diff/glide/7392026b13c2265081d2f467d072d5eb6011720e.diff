[+++ b/checkstyle_suppressions.xml, +    <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/checkstyle_suppressions.xml, +    <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, +    @Test, +    public void testClone() throws IOException {, +        GlideDrawable firstResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> firstResource = mock(Resource.class);, +        when(firstResource.get()).thenReturn(firstResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +        when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +        when(firstTranscoder.getId()).thenReturn("transcoder1");, +, +        GlideDrawable secondResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> secondResource = mock(Resource.class);, +        when(secondResource.get()).thenReturn(secondResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +        when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +        when(secondTranscoder.getId()).thenReturn("transcoder2");, +, +        DrawableRequestBuilder<String> firstRequest = requestManager.from(String.class).transcoder(firstTranscoder), +                .override(100, 100);, +        DrawableRequestBuilder<String> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +, +        Target firstTarget = mock(Target.class);, +        Target secondTarget = mock(Target.class);, +, +        String fakeUri = mockUri("content://fakeUri");, +, +        firstRequest.load(fakeUri).into(firstTarget);, +        verify(firstTarget).onResourceReady(eq(firstResult), any(GlideAnimation.class));, +, +        secondRequest.load(fakeUri).into(secondTarget);, +        verify(secondTarget).onResourceReady(eq(secondResult), any(GlideAnimation.class));, +    }, +, +++ b/checkstyle_suppressions.xml, +    <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, +    @Test, +    public void testClone() throws IOException {, +        GlideDrawable firstResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> firstResource = mock(Resource.class);, +        when(firstResource.get()).thenReturn(firstResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +        when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +        when(firstTranscoder.getId()).thenReturn("transcoder1");, +, +        GlideDrawable secondResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> secondResource = mock(Resource.class);, +        when(secondResource.get()).thenReturn(secondResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +        when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +        when(secondTranscoder.getId()).thenReturn("transcoder2");, +, +        DrawableRequestBuilder<String> firstRequest = requestManager.from(String.class).transcoder(firstTranscoder), +                .override(100, 100);, +        DrawableRequestBuilder<String> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +, +        Target firstTarget = mock(Target.class);, +        Target secondTarget = mock(Target.class);, +, +        String fakeUri = mockUri("content://fakeUri");, +, +        firstRequest.load(fakeUri).into(firstTarget);, +        verify(firstTarget).onResourceReady(eq(firstResult), any(GlideAnimation.class));, +, +        secondRequest.load(fakeUri).into(secondTarget);, +        verify(secondTarget).onResourceReady(eq(secondResult), any(GlideAnimation.class));, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> clone() {, +        return (BitmapRequestBuilder<ModelType, TranscodeType>) super.clone();, +    }, +, +++ b/checkstyle_suppressions.xml, +    <suppress files=".*RequestBuilder.java|ChildLoadProvider.java" checks="NoClone" />, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper;, +    @Test, +    public void testClone() throws IOException {, +        GlideDrawable firstResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> firstResource = mock(Resource.class);, +        when(firstResource.get()).thenReturn(firstResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> firstTranscoder = mock(ResourceTranscoder.class);, +        when(firstTranscoder.transcode(any(Resource.class))).thenReturn(firstResource);, +        when(firstTranscoder.getId()).thenReturn("transcoder1");, +, +        GlideDrawable secondResult = mock(GlideDrawable.class);, +        Resource<GlideDrawable> secondResource = mock(Resource.class);, +        when(secondResource.get()).thenReturn(secondResult);, +        ResourceTranscoder<GifBitmapWrapper, GlideDrawable> secondTranscoder = mock(ResourceTranscoder.class);, +        when(secondTranscoder.transcode(any(Resource.class))).thenReturn(secondResource);, +        when(secondTranscoder.getId()).thenReturn("transcoder2");]