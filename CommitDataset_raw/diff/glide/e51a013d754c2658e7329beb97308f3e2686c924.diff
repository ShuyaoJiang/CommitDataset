[+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java, +                MockGlideExecutor.newMainThreadExecutor(),, +                MockGlideExecutor.newMainThreadExecutor(),, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();, +    final GlideExecutor animationService = MockGlideExecutor.newMainThreadExecutor();, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java, +                MockGlideExecutor.newMainThreadExecutor(),, +                MockGlideExecutor.newMainThreadExecutor(),, +++ b/library/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java, +import android.support.annotation.NonNull;, +  // Public API., +  @SuppressWarnings("WeakerAccess"), +    @NonNull, +    public <T> Future<T> submit(@NonNull Runnable task, @NonNull T result) {, +    @NonNull, +    public <T> Future<T> submit(@NonNull Callable<T> task) {, +      return getUninterruptibly(super.submit(task));, +    }, +, +    @NonNull, +    @Override, +    public Future<?> submit(@NonNull Runnable task) {, +    public void execute(@NonNull final Runnable command) {]