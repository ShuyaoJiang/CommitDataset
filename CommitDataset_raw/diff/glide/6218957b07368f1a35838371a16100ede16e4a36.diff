[+++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +      when(requestContext.getModel()).thenReturn(model);, +      when(requestContext.getTranscodeClass()).thenReturn(List.class);, +      when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);, +      when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);, +      when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);, +      when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);, +      when(requestContext.getSizeMultiplier()).thenReturn(1f);, +, +          .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +      when(requestContext.getModel()).thenReturn(model);, +      when(requestContext.getTranscodeClass()).thenReturn(List.class);, +      when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);, +      when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);, +      when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);, +      when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);, +      when(requestContext.getSizeMultiplier()).thenReturn(1f);, +, +          .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  private final GlideContext context;, +  private final Class<TranscodeType> transcodeClass;, +  private final RequestTracker requestTracker;, +  private final Lifecycle lifecycle;, +    model = other.model;, +    isModelSet = other.isModelSet;, +    requestOptions = other.requestOptions;, +    requestOptions.lock();, +  private Priority getThumbnailPriority(Priority current) {, +    switch (current) {, +    return buildRequestRecursive(target, null, transitionOptions, requestOptions.getPriority(),, +        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight());, +      ThumbnailRequestCoordinator parentCoordinator,, +      TransitionOptions<?, ? super TranscodeType> transitionOptions,, +      Priority priority, int overrideWidth, int overrideHeight) {, +, +      TransitionOptions<?, ? super TranscodeType> thumbTransitionOptions =, +          thumbnailBuilder.transitionOptions;, +      if (DEFAULT_ANIMATION_OPTIONS.equals(thumbTransitionOptions)) {, +        thumbTransitionOptions = transitionOptions;, +      Priority thumbPriority = thumbnailBuilder.requestOptions.isPrioritySet(), +          ? thumbnailBuilder.requestOptions.getPriority() : getThumbnailPriority(priority);, +      int thumbOverrideWidth = thumbnailBuilder.requestOptions.getOverrideWidth();, +      int thumbOverrideHeight = thumbnailBuilder.requestOptions.getOverrideHeight();, +      if (Util.isValidDimensions(overrideWidth, overrideHeight), +          && !thumbnailBuilder.requestOptions.isValidOverride()) {, +        thumbOverrideWidth = requestOptions.getOverrideWidth();, +        thumbOverrideHeight = requestOptions.getOverrideHeight();, +      Request fullRequest = obtainRequest(target, requestOptions, coordinator,, +          transitionOptions, priority, overrideWidth, overrideHeight);, +      Request thumbRequest = thumbnailBuilder.buildRequestRecursive(target, coordinator,, +          thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight);, +      Request fullRequest = obtainRequest(target, requestOptions, coordinator, transitionOptions,, +          priority, overrideWidth, overrideHeight);, +      BaseRequestOptions<?> thumbnailOptions = requestOptions.clone(), +          .sizeMultiplier(thumbSizeMultiplier);, +, +      Request thumbnailRequest = obtainRequest(target, thumbnailOptions, coordinator,, +          transitionOptions, getThumbnailPriority(priority), overrideWidth, overrideHeight);, +, +      return obtainRequest(target, requestOptions, parentCoordinator, transitionOptions, priority,, +          overrideWidth, overrideHeight);, +  private Request obtainRequest(Target<TranscodeType> target,, +      BaseRequestOptions<?> requestOptions, RequestCoordinator requestCoordinator,, +      TransitionOptions<?, ? super TranscodeType> transitionOptions, Priority priority,, +      int overrideWidth, int overrideHeight) {, +    requestOptions.lock();, +, +        new RequestContext<>(context, model, transcodeClass, requestOptions, priority,, +            overrideWidth, overrideHeight);, +    return SingleRequest.obtain(requestContext, target, requestListener, requestCoordinator,, +        context.getEngine(), transitionOptions.getTransitionFactory());, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +      when(requestContext.getModel()).thenReturn(model);, +      when(requestContext.getTranscodeClass()).thenReturn(List.class);, +      when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);, +      when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);, +      when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);, +      when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);, +      when(requestContext.getSizeMultiplier()).thenReturn(1f);, +, +          .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  private final GlideContext context;, +  private final Class<TranscodeType> transcodeClass;, +  private final RequestTracker requestTracker;, +  private final Lifecycle lifecycle;, +    model = other.model;, +    isModelSet = other.isModelSet;, +    requestOptions = other.requestOptions;, +    requestOptions.lock();, +  private Priority getThumbnailPriority(Priority current) {, +    switch (current) {, +    return buildRequestRecursive(target, null, transitionOptions, requestOptions.getPriority(),, +        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight());, +      ThumbnailRequestCoordinator parentCoordinator,, +      TransitionOptions<?, ? super TranscodeType> transitionOptions,, +      Priority priority, int overrideWidth, int overrideHeight) {, +]