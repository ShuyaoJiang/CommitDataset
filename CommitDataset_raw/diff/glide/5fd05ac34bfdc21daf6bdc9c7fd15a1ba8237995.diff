[+++ b/library/src/com/bumptech/glide/resize/ImageResizer.java, +    private abstract class ImageDownsampler {, +        public Bitmap load(InputStream is, int width, int height) {, +            byte[] bytes = getTempBytes();, +            RecyclableBufferedInputStream bis = new RecyclableBufferedInputStream(is, bytes);, +            final int[] inDimens = getDimens(bis, width, height);, +, +            // inSampleSize prefers multiples of 2, but we prefer to prioritize memory savings, +            final int sampleSize = getSampleSize(inDimens[0], inDimens[1], width, height);, +, +            final BitmapFactory.Options decodeBitmapOptions = getOptions();, +            decodeBitmapOptions.inSampleSize = sampleSize;, +, +            Bitmap result = decodeStream(bis, decodeBitmapOptions);, +            releaseTempBytes(bytes);, +            return result;, +        }, +, +        protected abstract int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight);, +, +        protected int[] getDimens(RecyclableBufferedInputStream bis, int inWidth, int inHeight) {, +            return getDimensions(bis);, +        }, +    }, +, +    private final ImageDownsampler atLeastDownsampler = new ImageDownsampler() {, +, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            // inSampleSize prefers multiples of 2, but we prefer to prioritize memory savings, +            return Math.min(inHeight / outHeight, inWidth / outWidth);, +        }, +    };, +, +    private final ImageDownsampler atMostDownsampler = new ImageDownsampler() {, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return Math.max(inHeight / outHeight, inWidth / outWidth);, +        }, +    };, +, +    private final ImageDownsampler asIsDownsampler = new ImageDownsampler() {, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return 0;, +        }, +    };, +, +    private final ImageDownsampler fixedAsIsDownsampler = new ImageDownsampler() {, +        @Override, +        protected int getSampleSize(int inWidth, int inHeight, int outWidth, int outHeight) {, +            return 0;, +        }, +, +        @Override, +        protected int[] getDimens(RecyclableBufferedInputStream bis, int inWidth, int inHeight) {, +            return new int[] { inWidth, inHeight };, +, +        }, +    };, +        return atLeastDownsampler.load(is, width, height);, +        return atMostDownsampler.load(is, width, height);, +        return asIsDownsampler.load(is, 0, 0);, +        return fixedAsIsDownsampler.load(is, width, height);]