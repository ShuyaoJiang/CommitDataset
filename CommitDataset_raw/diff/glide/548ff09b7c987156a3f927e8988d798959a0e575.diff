[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final GifHeaderParserPool PARSER_POOL = new DefaultGifHeaderParserPool();, +    private final Context context;, +    private final BitmapPool bitmapPool;, +    private GifHeaderParserPool parserPool;, +        this(context, bitmapPool, PARSER_POOL);, +    GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParserPool parserPool) {, +        this.parserPool = parserPool;, +        final GifHeaderParser parser = parserPool.obtain(data);, +        try {, +            return decode(data, width, height, parser);, +        } finally {, +            parserPool.release(parser);, +        }, +    }, +    private GifDataResource decode(byte[] data, int width, int height, GifHeaderParser parser) {, +        final GifHeader header = parser.parseHeader();, +, +    interface GifHeaderParserPool {, +        public GifHeaderParser obtain(byte[] data);, +        public void release(GifHeaderParser parser);, +    }, +, +    private static class DefaultGifHeaderParserPool implements GifHeaderParserPool {, +        private static final Queue<GifHeaderParser> POOL = new ArrayDeque<GifHeaderParser>();, +, +        @Override, +        public GifHeaderParser obtain(byte[] data) {, +            GifHeaderParser result;, +            synchronized (POOL) {, +                result = POOL.poll();, +            }, +            if (result == null) {, +                result = new GifHeaderParser();, +            }, +, +            return result.setData(data);, +        }, +, +        @Override, +        public void release(GifHeaderParser parser) {, +            synchronized (POOL) {, +                POOL.offer(parser);, +            }, +        }, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final GifHeaderParserPool PARSER_POOL = new DefaultGifHeaderParserPool();, +    private final Context context;, +    private final BitmapPool bitmapPool;, +    private GifHeaderParserPool parserPool;, +        this(context, bitmapPool, PARSER_POOL);, +    GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParserPool parserPool) {, +        this.parserPool = parserPool;, +        final GifHeaderParser parser = parserPool.obtain(data);, +        try {, +            return decode(data, width, height, parser);, +        } finally {, +            parserPool.release(parser);, +        }, +    }, +    private GifDataResource decode(byte[] data, int width, int height, GifHeaderParser parser) {, +        final GifHeader header = parser.parseHeader();, +, +    interface GifHeaderParserPool {, +        public GifHeaderParser obtain(byte[] data);, +        public void release(GifHeaderParser parser);, +    }, +, +    private static class DefaultGifHeaderParserPool implements GifHeaderParserPool {, +        private static final Queue<GifHeaderParser> POOL = new ArrayDeque<GifHeaderParser>();, +, +        @Override, +        public GifHeaderParser obtain(byte[] data) {, +            GifHeaderParser result;, +            synchronized (POOL) {, +                result = POOL.poll();, +            }, +            if (result == null) {, +                result = new GifHeaderParser();, +            }, +, +            return result.setData(data);, +        }, +, +        @Override, +        public void release(GifHeaderParser parser) {, +            synchronized (POOL) {, +                POOL.offer(parser);, +            }, +        }, +    }, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import org.mockito.invocation.InvocationOnMock;]