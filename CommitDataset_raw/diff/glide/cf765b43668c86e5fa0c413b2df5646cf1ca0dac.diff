[+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +import android.support.annotation.Nullable;, +, +  @Nullable, +  public ErrorRequestCoordinator(@Nullable RequestCoordinator coordinator) {, +    primary.clear();, +      coordinator.onRequestFailed(this);, +++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java, +import android.support.annotation.Nullable;, +, +  @Nullable, +  public ErrorRequestCoordinator(@Nullable RequestCoordinator coordinator) {, +    primary.clear();, +      coordinator.onRequestFailed(this);, +++ b/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java, +package com.bumptech.glide.request;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +@RunWith(JUnit4.class), +public class ErrorRequestCoordinatorTest {, +, +  @Mock private Request primary;, +  @Mock private Request error;, +  @Mock private RequestCoordinator parent;, +  private ErrorRequestCoordinator coordinator;, +, +  @Before, +  public void setUp() {, +    MockitoAnnotations.initMocks(this);, +    coordinator = new ErrorRequestCoordinator(/*coordinator=*/ null);, +    coordinator.setRequests(primary, error);, +  }, +, +  @Test, +  public void begin_startsPrimary() {, +    coordinator.begin();, +    verify(primary).begin();, +  }, +, +  @Test, +  public void begin_whenPrimaryIsAlreadyRunning_doesNotStartPrimaryAgain() {, +    when(primary.isRunning()).thenReturn(true);, +    coordinator.begin();, +    verify(primary, never()).begin();, +  }, +, +  @Test, +  public void pause_whenPrimaryHasNotFailed_pausesPrimary() {, +    coordinator.pause();, +    verify(primary).pause();, +  }, +, +  @Test, +  public void pause_whenPrimaryHasFailed_doesNotPausePrimary() {, +    when(primary.isFailed()).thenReturn(true);, +    coordinator.pause();, +    verify(primary, never()).pause();, +  }, +, +  @Test, +  public void pause_whenErrorIsRunning_pausesError() {, +    when(error.isRunning()).thenReturn(true);, +    coordinator.pause();, +    verify(error).pause();, +  }, +, +  @Test, +  public void pause_whenErrorIsNotRunning_doesNotPauseError() {, +    coordinator.pause();, +    verify(error, never()).pause();, +  }, +, +  @Test, +  public void clear_whenPrimaryHasNotFailed_clearsPrimary() {, +    coordinator.clear();, +    verify(primary).clear();, +  }, +, +  @Test, +  public void clear_whenPrimaryHasNotFailed_doesNotClearError() {, +    coordinator.clear();, +    verify(error, never()).clear();, +  }, +, +  @Test, +  public void clear_whenPrimaryHasFailed_clearsError() {, +    when(primary.isFailed()).thenReturn(true);, +    coordinator.clear();]