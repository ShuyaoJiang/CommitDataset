[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + * A class for creating a request to load a {@link Drawable}., +     * Loads and displays the {@link Drawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link Drawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link Drawable}. There are no guarantees about the order in which the requests will, +     * actually finish. However, if the thumb request completes after the full request, the thumb {@link Drawable}, +     *     you want an animation to occur when either the full {@link Drawable} loads or the thumbnail loads,, +     * Transform {@link Drawable}s using the given, +     * Transform {@link Drawable}s using {@link com.bumptech.glide.load.resource.bitmap.CenterCrop}., +     * Transform {@link Drawable}s using {@link com.bumptech.glide.load.resource.bitmap.FitCenter}., +     * Transform {@link Drawable}s using the given {@link android.graphics.Bitmap} transformations. Replaces any, +//            ResourceTranscoder<GifBitmapWrapper, Drawable> transcoder) {, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + * A class for creating a request to load a {@link Drawable}., +     * Loads and displays the {@link Drawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link Drawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link Drawable}. There are no guarantees about the order in which the requests will, +     * actually finish. However, if the thumb request completes after the full request, the thumb {@link Drawable}, +     *     you want an animation to occur when either the full {@link Drawable} loads or the thumbnail loads,, +     * Transform {@link Drawable}s using the given, +     * Transform {@link Drawable}s using {@link com.bumptech.glide.load.resource.bitmap.CenterCrop}., +     * Transform {@link Drawable}s using {@link com.bumptech.glide.load.resource.bitmap.FitCenter}., +     * Transform {@link Drawable}s using the given {@link android.graphics.Bitmap} transformations. Replaces any, +//            ResourceTranscoder<GifBitmapWrapper, Drawable> transcoder) {, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +                .listener(new RequestListener<String, GifDrawable>() {, +                    public boolean onResourceReady(GifDrawable resource, String model, Target target,, +        GifDrawable firstResult = mock(GifDrawable.class);, +        Resource<GifDrawable> firstResource = mock(Resource.class);, +        GifDrawable secondResult = mock(GifDrawable.class);, +        Resource<GifDrawable> secondResource = mock(Resource.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable.setLoopCount(GifDrawable.LOOP_INTRINSIC);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, + * A class for creating a request to load a {@link Drawable}., +     * Loads and displays the {@link Drawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link Drawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link Drawable}. There are no guarantees about the order in which the requests will]