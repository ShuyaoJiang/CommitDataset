[+++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java, +import static org.hamcrest.MatcherAssert.assertThat;, +    @Test, +    public void testDoesNotNotifyCallbackTwiceIfAddedTwice() {, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        shadowObserver.fireOnPreDrawListeners();, +, +        verify(cb, times(1)).onSizeReady(anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDoesNotAddMultipleListenersIfMultipleCallbacksAreAdded() {, +        SizeReadyCallback cb1 = mock(SizeReadyCallback.class);, +        SizeReadyCallback cb2 = mock(SizeReadyCallback.class);, +        target.getSize(cb1);, +        target.getSize(cb2);, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        assertThat(shadowObserver.getPreDrawListeners(), hasSize(1));, +    }, +, +    @Test, +    public void testDoesAddSecondListenerIfFirstListenerIsRemovedBeforeSecondRequest() {, +        SizeReadyCallback cb1 = mock(SizeReadyCallback.class);, +        target.getSize(cb1);, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        shadowObserver.fireOnPreDrawListeners();, +, +        assertThat(shadowObserver.getPreDrawListeners(), hasSize(0));, +, +        SizeReadyCallback cb2 = mock(SizeReadyCallback.class);, +        view.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));, +        target.getSize(cb2);, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +        shadowObserver.fireOnPreDrawListeners();, +, +        verify(cb2).onSizeReady(anyInt(), anyInt());, +++ b/library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java, +import static org.hamcrest.MatcherAssert.assertThat;, +    @Test, +    public void testDoesNotNotifyCallbackTwiceIfAddedTwice() {, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        shadowObserver.fireOnPreDrawListeners();, +, +        verify(cb, times(1)).onSizeReady(anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDoesNotAddMultipleListenersIfMultipleCallbacksAreAdded() {, +        SizeReadyCallback cb1 = mock(SizeReadyCallback.class);, +        SizeReadyCallback cb2 = mock(SizeReadyCallback.class);, +        target.getSize(cb1);, +        target.getSize(cb2);, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        assertThat(shadowObserver.getPreDrawListeners(), hasSize(1));, +    }, +, +    @Test, +    public void testDoesAddSecondListenerIfFirstListenerIsRemovedBeforeSecondRequest() {, +        SizeReadyCallback cb1 = mock(SizeReadyCallback.class);, +        target.getSize(cb1);, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +, +        PreDrawShadowViewTreeObserver shadowObserver = Robolectric.shadowOf_(view.getViewTreeObserver());, +        shadowObserver.fireOnPreDrawListeners();, +, +        assertThat(shadowObserver.getPreDrawListeners(), hasSize(0));, +, +        SizeReadyCallback cb2 = mock(SizeReadyCallback.class);, +        view.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));, +        target.getSize(cb2);, +, +        view.setLayoutParams(new LayoutParams(100, 100));, +        shadowObserver.fireOnPreDrawListeners();, +, +        verify(cb2).onSizeReady(anyInt(), anyInt());, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +                layoutListener = null;, +                // We want to notify callbacks in the order they were added and we only expect one or two callbacks to, +                // be added a time, so a List is a reasonable choice., +                if (!cbs.contains(cb)) {, +                }, +                if (layoutListener == null) {, +        }]