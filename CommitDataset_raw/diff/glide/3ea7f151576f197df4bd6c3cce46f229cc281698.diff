[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    @Test, +    public void testPassesArgb888ToStrategyAsConfigForRequestsWithNullConfigsOnGet() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.get(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +, +    @Test, +    public void testPassesArgb8888ToStrategyAsConfigForRequestsWithNullConfigsOnGetDirty() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.getDirty(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    @Test, +    public void testPassesArgb888ToStrategyAsConfigForRequestsWithNullConfigsOnGet() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.get(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +, +    @Test, +    public void testPassesArgb8888ToStrategyAsConfigForRequestsWithNullConfigsOnGetDirty() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.getDirty(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java, +import org.robolectric.Robolectric;, +import static org.mockito.Matchers.isNull;, +    public void testAsksBitmapPoolForArgb8888IfInConfigIsNull() {, +        Robolectric.shadowOf(harness.bitmap).setConfig(null);, +, +        harness.centerCrop.transform(harness.resource, 10, 10);, +, +        verify(harness.pool).get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888));, +        verify(harness.pool, never()).get(anyInt(), anyInt(), (Bitmap.Config) isNull());, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    @Test, +    public void testPassesArgb888ToStrategyAsConfigForRequestsWithNullConfigsOnGet() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.get(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +, +    @Test, +    public void testPassesArgb8888ToStrategyAsConfigForRequestsWithNullConfigsOnGetDirty() {, +        LruPoolStrategy strategy = mock(LruPoolStrategy.class);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy);, +, +        Bitmap expected = createMutableBitmap();, +        when(strategy.get(anyInt(), anyInt(), eq(Bitmap.Config.ARGB_8888))).thenReturn(expected);, +        Bitmap result = pool.getDirty(100, 100, null);, +, +        assertEquals(expected, result);, +    }, +]