[+++ b/src/com/bumptech/photos/PhotoManager.java, +import android.os.SystemClock;, +        this.resizer = new PhotoStreamResizer(mainHandler);, +            final Runnable task = resizer.loadAsIs(path, recycled, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb, false) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            final Runnable task;, +            postJob(task, token);, +        public abstract Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback cb);, +                    Runnable putToDiskCache = diskCache.put(key, resized);, +                    postJob(putToDiskCache, token);, +    private void postJob(Runnable job, Object token) {, +        backgroundHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +    }, +, +    }, +++ b/src/com/bumptech/photos/PhotoManager.java, +import android.os.SystemClock;, +        this.resizer = new PhotoStreamResizer(mainHandler);, +            final Runnable task = resizer.loadAsIs(path, recycled, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb, false) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            final Runnable task;, +            postJob(task, token);, +        public abstract Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback cb);, +                    Runnable putToDiskCache = diskCache.put(key, resized);, +                    postJob(putToDiskCache, token);, +    private void postJob(Runnable job, Object token) {, +        backgroundHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +    }, +, +    }, +++ b/src/com/bumptech/photos/resize/PhotoStreamResizer.java, +                    return Utils.centerCrop(streamed, width, height);, +++ b/src/com/bumptech/photos/PhotoManager.java, +import android.os.SystemClock;, +        this.resizer = new PhotoStreamResizer(mainHandler);, +            final Runnable task = resizer.loadAsIs(path, recycled, getResizeCb(key, token, cb, false, false));, +            postJob(task, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb, false) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            Runnable checkDiskCache = diskCache.get(key, new DiskCacheCallback(key, token, recycled, cb) {, +                public Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback resizeCallback) {, +            postJob(checkDiskCache, token);, +            final Runnable task;, +            postJob(task, token);, +        public abstract Runnable resizeIfNotFound(PhotoStreamResizer.ResizeCallback cb);, +                    Runnable putToDiskCache = diskCache.put(key, resized);, +                    postJob(putToDiskCache, token);, +    private void postJob(Runnable job, Object token) {, +        backgroundHandler.postAtTime(job, token, SystemClock.uptimeMillis());, +    }, +, +    }, +++ b/src/com/bumptech/photos/resize/PhotoStreamResizer.java, +                    return Utils.centerCrop(streamed, width, height);, +++ b/src/com/bumptech/photos/resize/Utils.java, +import android.graphics.Canvas;, +import android.graphics.Matrix;, +import android.graphics.Paint;, +import com.bumptech.photos.util.Photo;, +    public static Bitmap centerCrop(Bitmap toCrop, int width, int height) {, +        if (toCrop.getWidth() == width && toCrop.getHeight() == height) {, +            return toCrop;, +        }, +        //from ImageView/Bitmap.createScaledBitmap, +        //https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/widget/ImageView.java, +        //https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/graphics/java/android/graphics/Bitmap.java, +        final float scale;, +        float dx = 0, dy = 0;, +        Matrix m = new Matrix();, +        if (toCrop.getWidth() * height > width * toCrop.getHeight()) {, +            scale = (float) height / (float) toCrop.getHeight();, +            dx = (width - toCrop.getWidth() * scale) * 0.5f;, +        } else {, +            scale = (float) width / (float) toCrop.getWidth();, +            dy = (height - toCrop.getHeight() * scale) * 0.5f;, +        }, +, +        m.setScale(scale, scale);]