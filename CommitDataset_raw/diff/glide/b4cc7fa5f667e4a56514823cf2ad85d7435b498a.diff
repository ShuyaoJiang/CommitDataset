[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, +    public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, +    public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        order.verify(gifDecoder).setData(eq(gifHeader), eq(data));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, +    public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        order.verify(gifDecoder).setData(eq(gifHeader), eq(data));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +                logWithTimeAndKey("Loaded resource from cache", startTime, key);, +                    logWithTimeAndKey("Loaded resource from active resources", startTime, key);, +                logWithTimeAndKey("Added to existing load", startTime, key);, +            logWithTimeAndKey("Started new load", startTime, key);, +    private static void logWithTimeAndKey(String log, long startTime, Key key) {, +        Log.v(TAG, log + " in " + LogTime.getElapsedMillis(startTime) + "ms, key: " + key);, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, +    public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        order.verify(gifDecoder).setData(eq(gifHeader), eq(data));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +                logWithTimeAndKey("Loaded resource from cache", startTime, key);, +                    logWithTimeAndKey("Loaded resource from active resources", startTime, key);, +                logWithTimeAndKey("Added to existing load", startTime, key);, +            logWithTimeAndKey("Started new load", startTime, key);, +    private static void logWithTimeAndKey(String log, long startTime, Key key) {, +        Log.v(TAG, log + " in " + LogTime.getElapsedMillis(startTime) + "ms, key: " + key);, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +, +    @Override, +    public void release(Bitmap bitmap) {, +        if (!bitmapPool.put(bitmap)) {, +            bitmap.recycle();, +        }, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +        drawable = new GifDrawable(Robolectric.application, provider, bitmapPool, transformation, 100, 100,  gifHeader,, +                new byte[0], firstFrame);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameManagerTest.java, +        new GifFrameManager(Robolectric.application, mock(GifDecoder.class), null, 100, 100);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameModelLoaderTest.java, +    public void testFetcherIdIncludesFrameIndex() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        order.verify(gifDecoder).setData(eq(gifHeader), eq(data));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +                logWithTimeAndKey("Loaded resource from cache", startTime, key);, +                    logWithTimeAndKey("Loaded resource from active resources", startTime, key);, +                logWithTimeAndKey("Added to existing load", startTime, key);, +            logWithTimeAndKey("Started new load", startTime, key);, +    private static void logWithTimeAndKey(String log, long startTime, Key key) {, +        Log.v(TAG, log + " in " + LogTime.getElapsedMillis(startTime) + "ms, key: " + key);, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +, +    @Override, +    public void release(Bitmap bitmap) {, +        if (!bitmapPool.put(bitmap)) {, +            bitmap.recycle();, +        }, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +            Transformation<Bitmap> frameTransformation, int targetFrameWidth, int targetFrameHeight,, +        this(new GifState(gifHeader, data, context, frameTransformation, targetFrameWidth, targetFrameHeight,, +        decoder.setData(state.gifHeader, state.data);, +                state.targetHeight);, +        public GifState(GifHeader header, byte[] data, Context context,]