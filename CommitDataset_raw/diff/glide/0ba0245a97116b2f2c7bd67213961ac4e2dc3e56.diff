[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.image.ImageLoader;, +import com.bumptech.glide.loader.image.ImageManagerLoader;, +import com.bumptech.glide.presenter.target.Target;, +import com.bumptech.glide.resize.BitmapRequestBuilder;, +import com.bumptech.glide.resize.Request;, +import com.bumptech.glide.resize.ThumbnailRequestCoordinator;, + * A singleton to present a simple static interface for Glide {@link RequestBuilder} and to create and manage an, +        public abstract void onImageReady(T model, Target target, boolean isFromMemoryCache, boolean isAnyImageSet);, +    public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass,, +            Context context) {, +     * A {@link RequestBuilder} builder that returns a request for a model that represents an image., +         * Use the {@link ModelLoaderFactory} currently registered for {@link String} to load the image represented by, +         * the given {@link String}. Defaults to {@link StreamStringLoader.Factory} and {@link StreamStringLoader} to, +         * load the given model., +         * @param string The string representing the image. Must be either a path, or a uri handled by, +         *      {@link StreamUriLoader}, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model into, +        public RequestBuilder<String> load(String string) {, +            return new RequestBuilder<String>(context, string);, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model into, +        public RequestBuilder<Uri> load(Uri uri) {, +            return new RequestBuilder<Uri>(context, uri);, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model into, +        public RequestBuilder<File> load(File file) {, +            return new RequestBuilder<File>(context, file);, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model into, +        public RequestBuilder<Integer> load(Integer resourceId) {, +            return new RequestBuilder<Integer>(context, resourceId);, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the image into., +        public <T> RequestBuilder<T> loadFromImage(T model) {, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the model into, +        public RequestBuilder<URL> loadFromImage(URL url) {, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the image into., +        public RequestBuilder<byte[]> loadFromImage(byte[] model, final String id) {, +         * @return A {@link RequestBuilder} to set options for the load and ultimately the target to load the image into., +        public RequestBuilder<byte[]> loadFromImage(byte[] model) {, +         * @return A {@link RequestBuilder} to set options for the load an ultimately the target to load the thumbnail into., +        public <T> RequestBuilder<T> loadFromVideo(T model) {, +        public RequestBuilder<T> loadFromVideo(T model) {, +            return new RequestBuilder<T>(context, model, null, factory);, +        public RequestBuilder<T> load(T model) {, +            return new RequestBuilder<T>(context, model, factory, null);, +    public static class RequestBuilder<ModelType> extends, +            GenericRequestBuilder<ModelType, InputStream, ParcelFileDescriptor> {, +        private RequestBuilder(Context context, ModelType model) {, +        private RequestBuilder(Context context, ModelType model,, +         * @return This RequestBuilder, +        public RequestBuilder<ModelType> approximate() {, +         * @return This RequestBuilder, +        public RequestBuilder<ModelType> asIs() {, +         * @return This RequestBuilder, +        public RequestBuilder<ModelType> downsample(Downsampler downsampler) {, +        public RequestBuilder<ModelType> thumbnail(float sizeMultiplier) {, +        public RequestBuilder<ModelType> thumbnail(RequestBuilder<ModelType> thumbnailRequest) {, +         public RequestBuilder<ModelType> sizeMultiplier(float sizeMultiplier) {, +        public RequestBuilder<ModelType> imageDecoder(BitmapDecoder<InputStream> decoder) {, +        public RequestBuilder<ModelType> videoDecoder(BitmapDecoder<ParcelFileDescriptor> decoder) {, +        public RequestBuilder<ModelType> centerCrop() {, +        public RequestBuilder<ModelType> fitCenter() {, +        public RequestBuilder<ModelType> transform(Transformation transformation) {, +        public RequestBuilder<ModelType> transform(, +        public RequestBuilder<ModelType> animate(int animationId) {, +        public RequestBuilder<ModelType> placeholder(int resourceId) {, +        public RequestBuilder<ModelType> error(int resourceId) {, +        public RequestBuilder<ModelType> listener(RequestListener<ModelType> requestListener) {, +    private static class GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> {, +        private ArrayList<TransformationLoader<ModelType>> transformationLoaders =, +                new ArrayList<TransformationLoader<ModelType>>();, +, +        private int animationId;, +        private int placeholderId;, +        private int errorId;, +        private GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnailRequestBuilder;, +        private Float sizeMultiplier = 1f;, +        private GenericRequestBuilder(Context context, ModelType model,, +                ModelLoaderFactory<ModelType, ImageResourceType> imageFactory,, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnail(, +                GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnailRequest) {, +            this.thumbnailRequestBuilder = thumbnailRequest;, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnail(float sizeMultiplier) {, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> sizeMultiplier(, +                float sizeMultiplier) {, +         * @return This RequestBuilder., +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> imageDecoder(, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> videoDecoder(, +         * @return This RequestBuilder, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> centerCrop() {, +         * @return This RequestBuilder, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> fitCenter() {, +         * @return This RequestBuilder, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> transform(, +         * @return This RequestBuilder, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> transform(, +         * @return This RequestBuilder, +        public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> animate(int animationId) {]