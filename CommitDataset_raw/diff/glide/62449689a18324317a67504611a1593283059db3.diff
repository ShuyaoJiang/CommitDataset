[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void clearMemory() {, +        memoryCache.clearMemory();, +        bitmapPool.clearMemory();, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void clearMemory() {, +        memoryCache.clearMemory();, +        bitmapPool.clearMemory();, +    }, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void clearMemory();, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void clearMemory() {, +        memoryCache.clearMemory();, +        bitmapPool.clearMemory();, +    }, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void clearMemory();, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +    @Override, +    public void clearMemory() { }, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void clearMemory() {, +        memoryCache.clearMemory();, +        bitmapPool.clearMemory();, +    }, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void clearMemory();, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +    @Override, +    public void clearMemory() { }, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +        trimToSize(maxSize);, +    @Override, +    public void clearMemory() {, +        trimToSize(0);, +    }, +, +    private void trimToSize(int size) {, +        while (currentSize > size) {, +            final Bitmap removed = pool.removeLast();, +            currentSize -= getSize(removed);, +            removed.recycle();, +        }, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void clearMemory() {, +        memoryCache.clearMemory();, +        bitmapPool.clearMemory();, +    }, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void clearMemory();, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +    @Override, +    public void clearMemory() { }, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +        trimToSize(maxSize);, +    @Override, +    public void clearMemory() {, +        trimToSize(0);, +    }, +, +    private void trimToSize(int size) {, +        while (currentSize > size) {, +            final Bitmap removed = pool.removeLast();, +            currentSize -= getSize(removed);, +            removed.recycle();, +        }, +    }, +, +++ b/library/tests/src/com/bumptech/glide/ImageManagerTest.java, +package com.bumptech.glide;, +, +import android.graphics.Bitmap;, +import android.test.AndroidTestCase;, +import com.bumptech.glide.resize.ImageManager;, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.resize.cache.MemoryCache;, +import com.bumptech.glide.resize.cache.MemoryCacheAdapter;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +public class ImageManagerTest extends AndroidTestCase {, +, +    public void testClearMemory() {, +        final AtomicInteger clearsCalled = new AtomicInteger();, +        // The pool's clear method must be called after the cache's so that the bitmaps from the cache do not just, +        // refill the pool, +        BitmapPool bitmapPool = new BitmapPoolAdapter() {, +            @Override, +            public void clearMemory() {, +                assertEquals(2, clearsCalled.incrementAndGet());]