[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipMemoryCache(boolean skip) {, +        super.skipMemoryCache(skip);, +        return this;, +    }, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipDiskCache(boolean skip) {, +        super.skipDiskCache(skip);, +        return this;, +    }, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipCache(boolean skip) {, +        super.skipCache(skip);, +        return this;, +    }, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipMemoryCache(boolean skip) {, +        super.skipMemoryCache(skip);, +        return this;, +    }, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipDiskCache(boolean skip) {, +        super.skipDiskCache(skip);, +        return this;, +    }, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> skipCache(boolean skip) {, +        super.skipCache(skip);, +        return this;, +    }, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.SkipCache;, +    private boolean isCacheable = true;, +    private ResourceEncoder<ResourceType> preSkipEncoder;, +        preSkipEncoder = loadProvider != null ? loadProvider.getEncoder() : null;, +        preSkipEncoder = encoder;, +     * @param requestListener The request listener to use., +     * @return This RequestBuilder., +     * Allows the loaded resource to skip the memory cache., +     *, +     * <p>, +     *     Note - this is not a guarantee. If a request is already pending for this resource and that request is not, +     *     also skipping the memory cache, the resource will be cached in memory., +     * </p>, +     *, +     * @param skip True to allow the resource to skip the memory cache., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> skipMemoryCache(boolean skip) {, +        this.isCacheable = !skip;, +, +        return this;, +    }, +, +    /**, +     * Allows the loaded resource to skip the disk cache., +     *, +     * <p>, +     *     Note - this is not a guarantee. If a request is already pending for this resource and that request is not, +     *     also skipping the disk cache, the resource will be cached on disk., +     * </p>, +     *, +     * @param skip True to allow the resource to skip the disk cache., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> skipDiskCache(boolean skip) {, +        if (skip) {, +            preSkipEncoder = loadProvider.getEncoder();, +            final SkipCache<ResourceType> skipCache = SkipCache.get();, +            return encoder(skipCache);, +        } else {, +            return encoder(preSkipEncoder);, +        }, +    }, +, +    /**, +     * Allows the resource to skip both the memory and the disk cache., +     *, +     * @see #skipDiskCache(boolean), +     * @see #skipMemoryCache(boolean), +     *, +     * @param skip True to allow the resource to skip both the memory and the disk cache., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> skipCache(boolean skip) {, +        skipMemoryCache(skip);, +        skipDiskCache(skip);, +, +        return this;, +    }, +, +    /**]