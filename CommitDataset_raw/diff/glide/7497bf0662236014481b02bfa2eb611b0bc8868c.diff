[+++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.5.2', +  <version>3.5.2</version>, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.5.2', +  <version>3.5.2</version>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, +    Request.Builder requestBuilder = new Request.Builder(), +            .url(url.toStringUrl());, +    for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, +      requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, +    }, +    Request request = requestBuilder.build();, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.5.2', +  <version>3.5.2</version>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, +    Request.Builder requestBuilder = new Request.Builder(), +            .url(url.toStringUrl());, +    for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, +      requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, +    }, +    Request request = requestBuilder.build();, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import com.bumptech.glide.load.model.Headers;, +import java.util.HashMap;, +import java.util.Map;, +@Config(manifest = Config.NONE, emulateSdk = 18,, +    shadows = VolleyStreamFetcherServerTest.FakeSystemClock.class), +  @Test, +  public void testAppliesHeadersInGlideUrl() throws Exception {, +    mockWebServer.enqueue(new MockResponse().setResponseCode(200));, +    String headerField = "field";, +    String headerValue = "value";, +    Map<String, String> headersMap = new HashMap<String, String>();, +    headersMap.put(headerField, headerValue);, +    Headers headers = mock(Headers.class);, +    when(headers.getHeaders()).thenReturn(headersMap);, +, +    getFetcher(headers).loadData(Priority.HIGH, callback);, +    waitForResponseLatch.await();, +, +    assertThat(mockWebServer.takeRequest().getHeader(headerField)).isEqualTo(headerValue);, +  }, +, +    return getFetcher(Headers.NONE);, +  }, +, +  private DataFetcher<InputStream> getFetcher(Headers headers) {, +    return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString(), headers));, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.5.2', +  <version>3.5.2</version>, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.util.Map;, +    Request.Builder requestBuilder = new Request.Builder(), +            .url(url.toStringUrl());, +    for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {, +      requestBuilder.addHeader(headerEntry.getKey(), headerEntry.getValue());, +    }, +    Request request = requestBuilder.build();, +++ b/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +import com.bumptech.glide.load.model.Headers;, +import java.util.HashMap;, +import java.util.Map;, +@Config(manifest = Config.NONE, emulateSdk = 18,, +    shadows = VolleyStreamFetcherServerTest.FakeSystemClock.class), +  @Test, +  public void testAppliesHeadersInGlideUrl() throws Exception {, +    mockWebServer.enqueue(new MockResponse().setResponseCode(200));, +    String headerField = "field";, +    String headerValue = "value";, +    Map<String, String> headersMap = new HashMap<String, String>();, +    headersMap.put(headerField, headerValue);, +    Headers headers = mock(Headers.class);, +    when(headers.getHeaders()).thenReturn(headersMap);, +, +    getFetcher(headers).loadData(Priority.HIGH, callback);, +    waitForResponseLatch.await();, +, +    assertThat(mockWebServer.takeRequest().getHeader(headerField)).isEqualTo(headerValue);, +  }, +, +    return getFetcher(Headers.NONE);, +  }, +, +  private DataFetcher<InputStream> getFetcher(Headers headers) {, +    return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString(), headers));, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyRequestFactory.java, +import java.util.Map;, +    Request<byte[]> create(String url, DataCallback<? super InputStream> future, Priority priority,, +        Map<String, String> headers);, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.5.2']