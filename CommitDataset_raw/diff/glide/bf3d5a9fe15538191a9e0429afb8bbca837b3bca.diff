[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +    assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, +  }, +, +  @Test, +  public void testCanSetCustomMemoryCacheSize() {, +    harness.memoryCacheScreens = 9.5f;, +    Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +, +    assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +    float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +    assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, +  }, +, +  @Test, +  public void testCanSetCustomBitmapPoolSize() {, +    harness.bitmapPoolScreens = 2f;, +    Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +    float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, +    assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, +    float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;, +    float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;, +    float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;, +      return new MemorySizeCalculator.Builder(RuntimeEnvironment.application), +          .setMemoryCacheScreens(memoryCacheScreens), +          .setBitmapPoolScreens(bitmapPoolScreens), +          .setMaxSizeMultiplier(sizeMultiplier), +          .setActivityManager(activityManager), +          .setScreenDimensions(screenDimensions), +          .build();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +    assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, +  }, +, +  @Test, +  public void testCanSetCustomMemoryCacheSize() {, +    harness.memoryCacheScreens = 9.5f;, +    Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +, +    assertThat(memoryCacheSize).isEqualTo(harness.getScreenSize() * harness.memoryCacheScreens);, +    float memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +    float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +    assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, +  }, +, +  @Test, +  public void testCanSetCustomBitmapPoolSize() {, +    harness.bitmapPoolScreens = 2f;, +    Shadows.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +    float bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, +    assertThat(bitmapPoolSize).isEqualTo(harness.getScreenSize() * harness.bitmapPoolScreens);, +    float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;, +    float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;, +    float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;, +      return new MemorySizeCalculator.Builder(RuntimeEnvironment.application), +          .setMemoryCacheScreens(memoryCacheScreens), +          .setBitmapPoolScreens(bitmapPoolScreens), +          .setMaxSizeMultiplier(sizeMultiplier), +          .setActivityManager(activityManager), +          .setScreenDimensions(screenDimensions), +          .build();, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private MemorySizeCalculator memorySizeCalculator;, +  /**, +   * Sets the {@link MemorySizeCalculator} to use to calculate maximum sizes for default, +   * {@link MemoryCache MemoryCaches} and/or default {@link BitmapPool BitmapPools}., +   *, +   * @see #setMemorySizeCalculator(MemorySizeCalculator), +   *, +   * @param builder The builder to use (will not be modified)., +   * @return This builder., +   */, +  public GlideBuilder setMemorySizeCalculator(MemorySizeCalculator.Builder builder) {, +    return setMemorySizeCalculator(builder.build());, +  }, +, +  /**, +   * Sets the {@link MemorySizeCalculator} to use to calculate maximum sizes for default, +   * {@link MemoryCache MemoryCaches} and/or default {@link BitmapPool BitmapPools}., +   *, +   * <p>The given {@link MemorySizeCalculator} will not affect custom pools or caches provided, +   * via {@link #setBitmapPool(BitmapPool)} or {@link #setMemoryCache(MemoryCache)}., +   *, +   * @param calculator The calculator to use., +   * @return This builder., +   */, +  public GlideBuilder setMemorySizeCalculator(MemorySizeCalculator calculator) {, +    this.memorySizeCalculator = calculator;, +    return this;]