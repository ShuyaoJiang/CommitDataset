[+++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool target;, +    public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool target;, +    public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool bitmapCache;, +            bitmapCache = new BitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool target;, +    public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool bitmapCache;, +            bitmapCache = new BitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool bitmapPool;, +    public ImageResizer(BitmapPool bitmapPool) {, +        this(bitmapPool, null);, +     * @param bitmapPool The cache to try to recycle {@link android.graphics.Bitmap}s from, +    public ImageResizer(BitmapPool bitmapPool, BitmapFactory.Options defaultOptions){, +        this.bitmapPool = bitmapPool;, +, +        if (bitmapPool != null) {, +            result = bitmapPool.get(width, height);, +++ b/library/src/com/bumptech/photos/resize/BitmapTracker.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool target;, +    public BitmapTracker(BitmapPool target, int bitmapsPerSize) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool bitmapCache;, +            bitmapCache = new BitmapPool(options.maxPerSize);, +++ b/library/src/com/bumptech/photos/resize/ImageResizer.java, +import com.bumptech.photos.resize.cache.BitmapPool;, +    private final BitmapPool bitmapPool;, +    public ImageResizer(BitmapPool bitmapPool) {, +        this(bitmapPool, null);, +     * @param bitmapPool The cache to try to recycle {@link android.graphics.Bitmap}s from, +    public ImageResizer(BitmapPool bitmapPool, BitmapFactory.Options defaultOptions){, +        this.bitmapPool = bitmapPool;, +, +        if (bitmapPool != null) {, +            result = bitmapPool.get(width, height);, +++ b/library/src/com/bumptech/photos/resize/cache/BitmapPool.java, +/*, + * Copyright (c) 2012. Bump Technologies Inc. All Rights Reserved., + */, +, +package com.bumptech.photos.resize.cache;, +, +import android.graphics.Bitmap;, +import com.bumptech.photos.util.Log;, +, +import java.util.ArrayDeque;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Queue;, +, +/**, + * A cache of Bitmaps made available by size used to manage recycled bitmaps, + */, +public class BitmapPool {, +    private static final int DEFAULT_MAX_PER_SIZE = 20;, +    private Map<String, Queue<Bitmap>> availableBitmaps = new HashMap<String, Queue<Bitmap>>();, +    private final int maxPerSize;, +, +    public BitmapPool(int maxPerSize) {, +        this.maxPerSize = maxPerSize == 0 ? DEFAULT_MAX_PER_SIZE : maxPerSize;, +    }, +, +    public synchronized void put(Bitmap bitmap) {, +        final String sizeKey = getSizeKey(bitmap.getWidth(), bitmap.getHeight());, +        Queue<Bitmap> available = availableBitmaps.get(sizeKey);, +        if (available == null) {, +            available = new ArrayDeque<Bitmap>();, +            availableBitmaps.put(sizeKey, available);, +        }, +, +        if (available.size() < maxPerSize) {, +            available.offer(bitmap);, +        }, +    }, +, +    public synchronized Bitmap get(int width, int height) {, +        final String sizeKey = getSizeKey(width, height);, +        final Queue<Bitmap> available = availableBitmaps.get(sizeKey);, +, +        if (available == null) {, +            Log.d("SBC: missing bitmap for key= " + sizeKey);, +            return null;, +        } else {, +            //Log.d("SBC:  get key=" + sizeKey + " available=" + (available.size() - 1));, +            return available.poll();]