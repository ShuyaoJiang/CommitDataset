[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, +                parserPool, decoderPool);, +, +    @Test, +    public void testSetsPreferredConfigOnDecoderBeforeDecoding() {, +        when(gifHeader.getNumFrames()).thenReturn(1);, +        when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, +        when(gifDecoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +, +        decoder = new GifResourceDecoder(Robolectric.application, mock(BitmapPool.class), DecodeFormat.ALWAYS_ARGB_8888,, +                parserPool, decoderPool);, +, +        decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100);, +, +        InOrder order = inOrder(gifDecoder);, +        order.verify(gifDecoder).setPreferredConfig(eq(Bitmap.Config.ARGB_8888));, +        order.verify(gifDecoder).getNextFrame();, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, +                parserPool, decoderPool);, +, +    @Test, +    public void testSetsPreferredConfigOnDecoderBeforeDecoding() {, +        when(gifHeader.getNumFrames()).thenReturn(1);, +        when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, +        when(gifDecoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +, +        decoder = new GifResourceDecoder(Robolectric.application, mock(BitmapPool.class), DecodeFormat.ALWAYS_ARGB_8888,, +                parserPool, decoderPool);, +, +        decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100);, +, +        InOrder order = inOrder(gifDecoder);, +        order.verify(gifDecoder).setPreferredConfig(eq(Bitmap.Config.ARGB_8888));, +        order.verify(gifDecoder).getNextFrame();, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    private DecodeFormat decodeFormat;, +        this.decodeFormat =  other.glide.getDecodeFormat();, +        imageDecoder = new StreamBitmapDecoder(bitmapPool, decodeFormat);, +        videoDecoder = new FileDescriptorBitmapDecoder(bitmapPool, decodeFormat);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, +                parserPool, decoderPool);, +, +    @Test, +    public void testSetsPreferredConfigOnDecoderBeforeDecoding() {, +        when(gifHeader.getNumFrames()).thenReturn(1);, +        when(gifHeader.getStatus()).thenReturn(GifDecoder.STATUS_OK);, +        when(gifDecoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));, +, +        decoder = new GifResourceDecoder(Robolectric.application, mock(BitmapPool.class), DecodeFormat.ALWAYS_ARGB_8888,, +                parserPool, decoderPool);, +, +        decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100);, +, +        InOrder order = inOrder(gifDecoder);, +        order.verify(gifDecoder).setPreferredConfig(eq(Bitmap.Config.ARGB_8888));, +        order.verify(gifDecoder).getNextFrame();, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    private DecodeFormat decodeFormat;, +        this.decodeFormat =  other.glide.getDecodeFormat();, +        imageDecoder = new StreamBitmapDecoder(bitmapPool, decodeFormat);, +        videoDecoder = new FileDescriptorBitmapDecoder(bitmapPool, decodeFormat);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.DecodeFormat;, +    private final DecodeFormat decodeFormat;, +    Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, Context context, DecodeFormat decodeFormat) {, +        this.decodeFormat = decodeFormat;, +        StreamBitmapDataLoadProvider streamBitmapLoadProvider =, +                new StreamBitmapDataLoadProvider(bitmapPool, decodeFormat);, +        dataLoadProviderRegistry.register(InputStream.class, Bitmap.class, streamBitmapLoadProvider);, +        FileDescriptorBitmapDataLoadProvider fileDescriptorLoadProvider =, +                new FileDescriptorBitmapDataLoadProvider(bitmapPool, decodeFormat);, +        dataLoadProviderRegistry.register(ParcelFileDescriptor.class, Bitmap.class, fileDescriptorLoadProvider);, +, +        ImageVideoDataLoadProvider imageVideoDataLoadProvider =, +                new ImageVideoDataLoadProvider(streamBitmapLoadProvider, fileDescriptorLoadProvider);, +        GifDrawableLoadProvider gifDrawableLoadProvider =, +                new GifDrawableLoadProvider(context, bitmapPool, decodeFormat);, +    DecodeFormat getDecodeFormat() {, +        return decodeFormat;, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.load.DecodeFormat;, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, DecodeFormat.PREFER_RGB_565,, +                parserPool, decoderPool);, +, +    @Test, +    public void testSetsPreferredConfigOnDecoderBeforeDecoding() {]