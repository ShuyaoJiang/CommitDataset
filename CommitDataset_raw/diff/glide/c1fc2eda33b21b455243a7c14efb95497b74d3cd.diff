[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.doThrow;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Arrays;, +, +@RunWith(JUnit4.class), +public class RecyclableBufferedInputStreamTest {, +, +    private static final int DATA_SIZE = 30;, +    private static final int BUFFER_SIZE = 10;, +, +    private RecyclableBufferedInputStream stream;, +    private byte[] data;, +, +    @Before, +    public void setUp() {, +        data = new byte[DATA_SIZE];, +        for (int i = 0; i < DATA_SIZE; i++) {, +            data[i] = (byte) i;, +        }, +        InputStream wrapped = new ByteArrayInputStream(data);, +        stream = new RecyclableBufferedInputStream(wrapped, new byte[BUFFER_SIZE]);, +    }, +, +    @Test, +    public void testReturnsTrueForMarkSupported() {, +        assertTrue(stream.markSupported());, +    }, +, +    @Test, +    public void testCanReadIndividualBytes() throws IOException {, +        for (int i = 0; i < data.length; i++) {, +            assertEquals(i, stream.read());, +        }, +        assertEquals(-1, stream.read());, +    }, +, +    @Test, +    public void testCanReadBytesInBulkLargerThanBufferSize() throws IOException {, +        byte[] buffer = new byte[DATA_SIZE];, +        assertEquals(DATA_SIZE, stream.read(buffer, 0, DATA_SIZE));, +        for (int i = 0; i < DATA_SIZE; i++) {, +            assertEquals(i, buffer[i]);, +        }, +    }, +, +    @Test, +    public void testCanReadBytesInBulkSmallerThanBufferSize() throws IOException {, +        int toRead = BUFFER_SIZE / 2;, +        byte[] buffer = new byte[toRead];, +        assertEquals(toRead, stream.read(buffer, 0, toRead));, +        for (int i = 0; i < toRead; i++) {, +            assertEquals(i, buffer[i]);, +        }, +    }, +, +    @Test, +    public void testReadingZeroBytesIntoBufferReadsZeroBytes() throws IOException {, +        // Make sure the next value is not 0., +        stream.read();, +        byte[] buffer = new byte[BUFFER_SIZE];, +        assertEquals(0, stream.read(buffer, 0, 0));, +, +        for (int i = 0; i < BUFFER_SIZE; i++) {, +            assertEquals(0, buffer[i]);, +        }, +    }, +, +    @Test, +    public void testCanReadIntoBufferLargerThanDataSize() throws IOException {, +        int toRead = DATA_SIZE * 2;, +        byte[] buffer = new byte[toRead];, +        assertEquals(DATA_SIZE, stream.read(buffer, 0, toRead));, +        for (int i = 0; i < DATA_SIZE; i++) {, +            assertEquals(i, buffer[i]);, +        }, +        for (int i = DATA_SIZE; i < toRead; i++) {, +            assertEquals(0, buffer[i]);, +        }, +    }, +, +    @Test, +    public void testCanReadBytesInBulkWithLimit() throws IOException {, +        int toRead = BUFFER_SIZE / 2;, +        byte[] buffer = new byte[BUFFER_SIZE];]