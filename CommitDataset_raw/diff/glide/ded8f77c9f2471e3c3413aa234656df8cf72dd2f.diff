[+++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +  /** Matches the behavior of {@link MediaMetadataRetriever#getFrameAtTime(long)}. */, +  @VisibleForTesting, +  static final int DEFAULT_FRAME_OPTION = MediaMetadataRetriever.OPTION_CLOSEST_SYNC;, +, +      /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,, +  public boolean handles(@NonNull T data, @NonNull Options options) {, +  public Resource<Bitmap> decode(, +      @NonNull T resource, int outWidth, int outHeight, @NonNull Options options), +      throws IOException {, +    if (frameOption == null) {, +      frameOption = DEFAULT_FRAME_OPTION;, +    }, +      result =, +          decodeFrame(mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight);, +, +  @TargetApi(Build.VERSION_CODES.O_MR1), +  @Nullable, +  private static Bitmap decodeFrame(, +      MediaMetadataRetriever mediaMetadataRetriever,, +      long frameTimeMicros,, +      int frameOption,, +      int outWidth,, +      int outHeight) {, +     if (Build.VERSION.SDK_INT >= VERSION_CODES.O_MR1) {, +       return mediaMetadataRetriever.getScaledFrameAtTime(, +           frameTimeMicros, frameOption, outWidth, outHeight);, +    } else {, +      return mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);, +    }, +  }, +, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +  /** Matches the behavior of {@link MediaMetadataRetriever#getFrameAtTime(long)}. */, +  @VisibleForTesting, +  static final int DEFAULT_FRAME_OPTION = MediaMetadataRetriever.OPTION_CLOSEST_SYNC;, +, +      /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,, +  public boolean handles(@NonNull T data, @NonNull Options options) {, +  public Resource<Bitmap> decode(, +      @NonNull T resource, int outWidth, int outHeight, @NonNull Options options), +      throws IOException {, +    if (frameOption == null) {, +      frameOption = DEFAULT_FRAME_OPTION;, +    }, +      result =, +          decodeFrame(mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight);, +, +  @TargetApi(Build.VERSION_CODES.O_MR1), +  @Nullable, +  private static Bitmap decodeFrame(, +      MediaMetadataRetriever mediaMetadataRetriever,, +      long frameTimeMicros,, +      int frameOption,, +      int outWidth,, +      int outHeight) {, +     if (Build.VERSION.SDK_INT >= VERSION_CODES.O_MR1) {, +       return mediaMetadataRetriever.getScaledFrameAtTime(, +           frameTimeMicros, frameOption, outWidth, outHeight);, +    } else {, +      return mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);, +    }, +  }, +, +++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +    @Override, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=3.6.1, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +  /** Matches the behavior of {@link MediaMetadataRetriever#getFrameAtTime(long)}. */, +  @VisibleForTesting, +  static final int DEFAULT_FRAME_OPTION = MediaMetadataRetriever.OPTION_CLOSEST_SYNC;, +, +      /*defaultValue=*/ MediaMetadataRetriever.OPTION_CLOSEST_SYNC,, +  public boolean handles(@NonNull T data, @NonNull Options options) {, +  public Resource<Bitmap> decode(, +      @NonNull T resource, int outWidth, int outHeight, @NonNull Options options), +      throws IOException {, +    if (frameOption == null) {]