[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        new ResourceDrawableDecoder(context);, +            Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), +        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        new ResourceDrawableDecoder(context);, +            Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), +        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than, +   * not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than to pass, +   * {@link Bitmap}s into Glide using this method . If you have a custom way to obtain, +   * {@link Bitmap}s that is not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        new ResourceDrawableDecoder(context);, +            Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), +        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than, +   * not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than to pass, +   * {@link Bitmap}s into Glide using this method . If you have a custom way to obtain, +   * {@link Bitmap}s that is not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/UnitBitmapDecoder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, +/**, + * Passes through a (hopefully) non-owned {@link Bitmap} as a {@link Bitmap} based {@link Resource}, + * so that the given {@link Bitmap} is not recycled., + */, +  private static final BitmapPoolAdapter BITMAP_POOL = new BitmapPoolAdapter();, +    return new BitmapResource(source, BITMAP_POOL);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        new ResourceDrawableDecoder(context);, +            Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), +        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than, +   * not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than to pass, +   * {@link Bitmap}s into Glide using this method . If you have a custom way to obtain, +   * {@link Bitmap}s that is not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/UnitBitmapDecoder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, +/**, + * Passes through a (hopefully) non-owned {@link Bitmap} as a {@link Bitmap} based {@link Resource}, + * so that the given {@link Bitmap} is not recycled., + */, +  private static final BitmapPoolAdapter BITMAP_POOL = new BitmapPoolAdapter();, +    return new BitmapResource(source, BITMAP_POOL);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +        new ResourceDrawableDecoder(context);, +            Registry.BUCKET_BITMAP, Bitmap.class, Bitmap.class, new UnitBitmapDecoder()), +        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder()), +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than, +   * not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +   * <p>It's almost always better to allow Glide to load {@link Bitmap}s than to pass, +   * {@link Bitmap}s into Glide using this method . If you have a custom way to obtain, +   * {@link Bitmap}s that is not supported by Glide by default, consider registering a custom, +   * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method., +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/UnitBitmapDecoder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, +/**, + * Passes through a (hopefully) non-owned {@link Bitmap} as a {@link Bitmap} based {@link Resource}, + * so that the given {@link Bitmap} is not recycled., + */, +  private static final BitmapPoolAdapter BITMAP_POOL = new BitmapPoolAdapter();, +    return new BitmapResource(source, BITMAP_POOL);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/NonOwnedDrawableResource.java, +package com.bumptech.glide.load.resource.drawable;, +, +import android.graphics.drawable.Drawable;, +import com.bumptech.glide.load.engine.Resource;, +, +/**, + * Handles generic {@link Drawable} types where we may be uncertain of their size or type and, + * where we don't know that it's safe for us to recycle or re-use the Drawable., + */, +final class NonOwnedDrawableResource extends DrawableResource<Drawable> {, +, +  @SuppressWarnings("unchecked"), +  public static Resource<Drawable> newInstance(Drawable drawable) {, +    return new NonOwnedDrawableResource(drawable);, +  }, +, +  private NonOwnedDrawableResource(Drawable drawable) {, +    super(drawable);, +  }, +, +  @SuppressWarnings("unchecked")]