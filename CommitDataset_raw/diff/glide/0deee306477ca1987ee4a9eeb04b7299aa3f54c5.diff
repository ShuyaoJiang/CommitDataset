[+++ b/build.gradle, +++ b/build.gradle, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadResourcesWithDownsamplerTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assume.assumeTrue;, +, +import android.content.ContentResolver;, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.BitmapFactory;, +import android.graphics.ColorSpace;, +import android.net.Uri;, +import android.os.Build;, +import android.support.annotation.DrawableRes;, +import android.support.annotation.NonNull;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.DecodeFormat;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import com.bumptech.glide.signature.ObjectKey;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.ByteArrayOutputStream;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Locale;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +/**, + * On API 26, decoding a variety of different images can cause {@link BitmapFactory} with, + * {@link BitmapFactory.Options#inJustDecodeBounds} set to {@code true} to set, + * {@link BitmapFactory.Options#outConfig} to null instead of a valid value, even though the image, + * can be decoded successfully. Glide can mask these failures by decoding some image sources, + * (notably including resource ids) using other data types and decoders., + *, + * <p>This test ensures that we've worked around the framework issue by loading a variety of images, + * and image types without the normal fallback behavior., + */, +@RunWith(AndroidJUnit4.class), +public class LoadResourcesWithDownsamplerTest {, +  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, +  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, +  private final Context context = InstrumentationRegistry.getTargetContext();, +, +  @Test, +  public void loadJpegResource_withNoOtherLoaders_decodesResource() {, +    Glide.get(context).getRegistry(), +        .prepend(, +            Object.class,, +            InputStream.class,, +            new FakeModelLoader<>(ResourceIds.raw.canonical));, +, +    Bitmap bitmap =, +        concurrency.get(, +            Glide.with(context), +                .asBitmap(), +                .load(new Object()), +                .submit());, +    assertThat(bitmap).isNotNull();, +  }, +, +  @Test, +  public void loadWideGamutJpegResource_withNoOtherLoaders_decodesWideGamutBitmap() {, +    assumeTrue(, +        "Wide gamut is only available on O+", Build.VERSION.SDK_INT >= Build.VERSION_CODES.O);, +    Glide.get(context).getRegistry(), +        .prepend(, +            Object.class,, +            InputStream.class,, +            new FakeModelLoader<>(ResourceIds.raw.webkit_logo_p3));, +, +    Bitmap bitmap =, +        concurrency.get(, +            Glide.with(context), +                .asBitmap(), +                .load(new Object()), +                .submit());, +    assertThat(bitmap).isNotNull();, +    assertThat(bitmap.getConfig()).isEqualTo(Bitmap.Config.RGBA_F16);, +    assertThat(bitmap.getColorSpace()), +        .isEqualTo(ColorSpace.get(ColorSpace.Named.LINEAR_EXTENDED_SRGB));, +  }, +, +  @Test, +  public void loadOpaquePngResource_withNoOtherLoaders_decodesResource() {, +    Glide.get(context).getRegistry(), +        .prepend(]