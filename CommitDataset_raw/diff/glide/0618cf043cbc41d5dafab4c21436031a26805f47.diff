[+++ b/README.md, +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases)., +    compile 'com.github.bumptech.glide:glide:3.3.+', +  <version>3.3.1</version>, +Checkout the [GitHub wiki](https://github.com/bumptech/glide/wiki) for pages on a variety of topics, and see the [javadocs](http://bumptech.github.io/glide/javadocs/latest/index.html)., +Volley is now an optional dependency that can be included via a utility library. To use Volley to fetch media over http/https:, +    compile 'com.github.bumptech.glide:volley-integration:1.0.+', +    <version>1.0.1</version>, +In addition to Volley, Glide also includes support for fetching media using OkHttp. To use OkHttp to fetch media over http/https:, +    compile 'com.github.bumptech.glide:okhttp-integration:1.0.+', +    <version>1.0.1</version>, +Version 3.x is a stable public release used in multiple open source projects at Google including in the Android Camera app and in the 2014 Google IO app. Comments/bugs/questions/pull requests welcome!, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK or add a `local.properties` file in the root project with a `sdk.dir=...` line., +Follow the steps in the 'Build' section to setup the project and then edit the files however you wish. Intellij's [IDEA 14 early access build](http://confluence.jetbrains.com/display/IDEADEV/IDEA+14+EAP) cleanly imports both Glide's source and tests and is the recommended way to work with Glide. Earlier versions of intellij do not import the gradle project cleanly. Although Android Studio imports the source cleanly, it is not possible to run or debug the tests without manually modifying the tests' classpath., +4. Select settings.gradle., +To report a specific problem or feature request, [open a new issue on Github](https://github.com/bumptech/glide/issues/new). For questions, suggestions, or anything else, join or email [Glide's discussion group](https://groups.google.com/forum/#!forum/glidelibrary), +Before submitting pull requests, contributors must sign Google's [individual contribution license agreement](https://developers.google.com/open-source/cla/individual)., +* The Android team and Jake Wharton for the [disk cache implementation](https://github.com/JakeWharton/DiskLruCache) Glide's disk cache is based on., +* Dave Smith for the [gif decoder gist](https://gist.github.com/devunwired/4479231) Glide's gif decoder is based on., +* Chris Banes for his [gradle-mvn-push](https://github.com/chrisbanes/gradle-mvn-push) script., +* Corey Hall for Glide's [amazing logo](static/glide_logo.png)., +++ b/README.md, +You can download a jar from GitHub's [release page](https://github.com/bumptech/glide/releases)., +    compile 'com.github.bumptech.glide:glide:3.3.+', +  <version>3.3.1</version>, +Checkout the [GitHub wiki](https://github.com/bumptech/glide/wiki) for pages on a variety of topics, and see the [javadocs](http://bumptech.github.io/glide/javadocs/latest/index.html)., +Volley is now an optional dependency that can be included via a utility library. To use Volley to fetch media over http/https:, +    compile 'com.github.bumptech.glide:volley-integration:1.0.+', +    <version>1.0.1</version>, +In addition to Volley, Glide also includes support for fetching media using OkHttp. To use OkHttp to fetch media over http/https:, +    compile 'com.github.bumptech.glide:okhttp-integration:1.0.+', +    <version>1.0.1</version>, +Version 3.x is a stable public release used in multiple open source projects at Google including in the Android Camera app and in the 2014 Google IO app. Comments/bugs/questions/pull requests welcome!, +Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment variable is pointing at the SDK or add a `local.properties` file in the root project with a `sdk.dir=...` line., +Follow the steps in the 'Build' section to setup the project and then edit the files however you wish. Intellij's [IDEA 14 early access build](http://confluence.jetbrains.com/display/IDEADEV/IDEA+14+EAP) cleanly imports both Glide's source and tests and is the recommended way to work with Glide. Earlier versions of intellij do not import the gradle project cleanly. Although Android Studio imports the source cleanly, it is not possible to run or debug the tests without manually modifying the tests' classpath., +4. Select settings.gradle., +To report a specific problem or feature request, [open a new issue on Github](https://github.com/bumptech/glide/issues/new). For questions, suggestions, or anything else, join or email [Glide's discussion group](https://groups.google.com/forum/#!forum/glidelibrary), +Before submitting pull requests, contributors must sign Google's [individual contribution license agreement](https://developers.google.com/open-source/cla/individual)., +* The Android team and Jake Wharton for the [disk cache implementation](https://github.com/JakeWharton/DiskLruCache) Glide's disk cache is based on., +* Dave Smith for the [gif decoder gist](https://gist.github.com/devunwired/4479231) Glide's gif decoder is based on., +* Chris Banes for his [gradle-mvn-push](https://github.com/chrisbanes/gradle-mvn-push) script., +* Corey Hall for Glide's [amazing logo](static/glide_logo.png)., +++ b/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java, +import static org.mockito.Mockito.atLeastOnce;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import com.bumptech.glide.request.target.SizeReadyCallback;, +import com.bumptech.glide.request.target.Target;, +, +import org.junit.Before;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.mockito.verification.VerificationMode;, +import java.util.Arrays;, +    @Mock, +    private BitmapRequestBuilder request;, +, +    @Before, +    public void setUp() throws Exception {, +        MockitoAnnotations.initMocks(this);, +    }, +, +        final AtomicInteger calledCount = new AtomicInteger();, +, +            public List<Object> getPreloadItems(int position) {, +                final int count = calledCount.getAndIncrement();, +                assertEquals(11 + count, position);, +                return super.getPreloadItems(position);, +        assertEquals(10, calledCount.get());, +            objects.add(new Integer(i));, +            public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {, +            public List<Object> getPreloadItems(int position) {, +                return objects.subList(position - 11, position + 1 - 11);, +        preloader.onScroll(null, 1, 10, 20);, +        final AtomicInteger calledCount = new AtomicInteger();, +            public List<Object> getPreloadItems(int position) {, +                if (position >= 40) {, +                final int count = calledCount.getAndIncrement();, +                assertEquals(28 - count, position);, +                return super.getPreloadItems(position);, +            public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {, +            public List<Object> getPreloadItems(int position) {, +                if (position == 40) {, +                    return null;, +                return objects.subList(position, position + 1);, +        preloader.onScroll(null, 30, 10, 10);, +        preloader.onScroll(null, 29, 10, 10);, +        final AtomicInteger calledCount = new AtomicInteger();, +            public List<Object> getPreloadItems(int position) {, +                final int count = calledCount.getAndIncrement();, +                assertEquals(26 + count, position);, +                return super.getPreloadItems(position);, +        final AtomicInteger calledCount = new AtomicInteger();, +            public List<Object> getPreloadItems(int position) {, +                if (position >= 17) {, +                final int count = calledCount.getAndIncrement();, +                assertEquals(5 - count, position);, +                return super.getPreloadItems(position);, +            public List<Object> getPreloadItems(int position) {]