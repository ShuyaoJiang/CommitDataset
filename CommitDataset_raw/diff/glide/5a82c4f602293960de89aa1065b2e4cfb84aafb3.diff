[+++ b/samples/flickr/src/com/bumptech/flickr/FlickPathLoader.java, +        flickrApi.downloadPhoto(model, width, height, cacheDir, new Api.PhotoCallback() {, +++ b/samples/flickr/src/com/bumptech/flickr/FlickPathLoader.java, +        flickrApi.downloadPhoto(model, width, height, cacheDir, new Api.PhotoCallback() {, +++ b/samples/flickr/src/com/bumptech/flickr/api/Api.java, +import java.util.HashMap;, +import java.util.Map;, +    private static final String PHOTO_URL = "http://farm%s.staticflickr.com/%s/%s_%s_%s.jpg";, +    private static final Map<Integer, String> EDGE_TO_SIZE_KEY = new HashMap<Integer, String>() {{, +        put(75, "s");, +        put(100, "t");, +        put(150, "q");, +        put(240, "m");, +        put(320, "n");, +        put(500, "-");, +        put(640, "z");, +        put(1024, "b");, +        put(Integer.MAX_VALUE, "o");, +    }};, +, +    private static String getSizeKey(int width, int height) {, +        final int largestEdge = width > height ? width : height;, +, +        final String result = EDGE_TO_SIZE_KEY.get(Integer.MAX_VALUE);, +        for (int edge : EDGE_TO_SIZE_KEY.keySet()) {, +            if (largestEdge <= edge) {, +                return EDGE_TO_SIZE_KEY.get(edge);, +            }, +        }, +        return result;, +    }, +, +    private static String getPhotoUrl(Photo photo, int width, int height) {, +        String sizeKey = getSizeKey(width, height);, +        return String.format(PHOTO_URL, photo.farm, photo.server, photo.id, photo.secret, sizeKey);, +    public void downloadPhoto(Photo photo, int width, int height, File cacheDir, final PhotoCallback cb) {, +        File out = new File(cacheDir.getPath() + File.separator + photo.id + photo.secret + width + height);, +            downloader.download(getPhotoUrl(photo, width, height), out, new Downloader.DiskCallback() {]