[+++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.PNG_A;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.JPEG;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.PNG;, +, +import java.util.EnumSet;, +import java.util.Set;, +, +    private static final Set<ImageType> TYPES_THAT_USE_POOL = EnumSet.of(JPEG, PNG_A, PNG);, +            // cannot reuse bitmaps when decoding images that are not PNG or JPG., +            // look at : https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ, +            if (shouldUsePool(bis)) {, +        }, +    private boolean shouldUsePool(RecyclableBufferedInputStream bis) {, +        bis.mark(1024);, +        try {, +            final ImageType type = new ImageHeaderParser(bis).getType();, +            return TYPES_THAT_USE_POOL.contains(type);, +        } catch (IOException e) {, +            e.printStackTrace();, +        } finally {, +            try {, +                bis.reset();, +            } catch (IOException e) {, +                e.printStackTrace();, +            }, +        }, +        return false;, +    }, +, +++ b/library/src/com/bumptech/glide/resize/load/Downsampler.java, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.PNG_A;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.JPEG;, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.PNG;, +, +import java.util.EnumSet;, +import java.util.Set;, +, +    private static final Set<ImageType> TYPES_THAT_USE_POOL = EnumSet.of(JPEG, PNG_A, PNG);, +            // cannot reuse bitmaps when decoding images that are not PNG or JPG., +            // look at : https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ, +            if (shouldUsePool(bis)) {, +        }, +    private boolean shouldUsePool(RecyclableBufferedInputStream bis) {, +        bis.mark(1024);, +        try {, +            final ImageType type = new ImageHeaderParser(bis).getType();, +            return TYPES_THAT_USE_POOL.contains(type);, +        } catch (IOException e) {, +            e.printStackTrace();, +        } finally {, +            try {, +                bis.reset();, +            } catch (IOException e) {, +                e.printStackTrace();, +            }, +        }, +        return false;, +    }, +, +++ b/library/src/com/bumptech/glide/resize/load/ImageHeaderParser.java, +import static com.bumptech.glide.resize.load.ImageHeaderParser.ImageType.*;, +, +, +    public static enum ImageType {, +        /** GIF type */, +        GIF(true),, +        /** JPG type */, +        JPEG(false),, +        /** PNG type with alpha */, +        PNG_A(true),, +        /** PNG type without alpha */, +        PNG(false),, +        /** Unrecognized type */, +        UNKNOWN(false);, +        private final boolean hasAlpha;, +, +        ImageType(boolean hasAlpha) {, +            this.hasAlpha = hasAlpha;, +        }, +, +        public boolean hasAlpha() {, +            return hasAlpha;, +        }, +    }, +, +        return getType().hasAlpha();, +    }, +, +    public ImageType getType() throws IOException {, +            return JPEG;, +            return alpha >= 3 ? PNG_A : PNG;, +            return GIF;, +        return UNKNOWN;]