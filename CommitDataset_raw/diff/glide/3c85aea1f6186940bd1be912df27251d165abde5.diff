[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.HashMap;, +    private HashMap<String, Object> options;, +        options = new HashMap<String, Object>();, +        cacheLoader.load(key, decoder, width, height, options);, +        verify(decoder).decode(eq(result), eq(width), eq(height), eq(options));, +        when(decoder.decode(eq(file), eq(width), eq(height), eq(options))).thenReturn(expected);, +        assertEquals(expected, cacheLoader.load(key, decoder, width, height, options));, +        assertNull(cacheLoader.load(key, decoder, 100, 100, options));, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new IOException("Test"));, +        cacheLoader.load(key, decoder, 100, 100, options);, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        cacheLoader.load(key, decoder, 100, 101, options);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.HashMap;, +    private HashMap<String, Object> options;, +        options = new HashMap<String, Object>();, +        cacheLoader.load(key, decoder, width, height, options);, +        verify(decoder).decode(eq(result), eq(width), eq(height), eq(options));, +        when(decoder.decode(eq(file), eq(width), eq(height), eq(options))).thenReturn(expected);, +        assertEquals(expected, cacheLoader.load(key, decoder, width, height, options));, +        assertNull(cacheLoader.load(key, decoder, 100, 100, options));, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new IOException("Test"));, +        cacheLoader.load(key, decoder, 100, 100, options);, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        cacheLoader.load(key, decoder, 100, 101, options);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.Collections;, +import java.util.Map;, +        when(harness.cacheDecoder.decode(eq(cacheFile), eq(harness.width), eq(harness.height), eq(harness.options))), +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +        verify(harness.cacheDecoder).decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class));, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new RuntimeException("test"));, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(eq(file), eq(harness.width), eq(harness.height), eq(harness.options))), +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new RuntimeException("test"));, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new RuntimeException("test"));, +        when(harness.sourceDecoder.decode(eq(data), eq(harness.width), eq(harness.height),, +                anyMapOf(String.class, Object.class))), +        when(harness.cacheDecoder.decode(eq(cachedSource), eq(harness.width), eq(harness.height),, +                anyMapOf(String.class, Object.class))), +        when(harness.sourceDecoder.decode(anyObject(), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new IOException("test"));, +            when(harness.sourceDecoder.decode(any(Object.class), anyInt(), anyInt(),, +                    anyMapOf(String.class, Object.class))).thenReturn(null);, +            when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(),, +                    anyMapOf(String.class, Object.class))).thenReturn(null);, +        RequestContext<Object> requestContext = mock(RequestContext.class);, +        Map<String, Object> options = Collections.emptyMap();, +        public DecodeJob<Object> getJob() {, +            return new DecodeJob<Object>(requestContext, key, width, height, diskCacheProvider, fileOpener);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/CacheLoaderTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.HashMap;, +    private HashMap<String, Object> options;, +        options = new HashMap<String, Object>();, +        cacheLoader.load(key, decoder, width, height, options);, +        verify(decoder).decode(eq(result), eq(width), eq(height), eq(options));, +        when(decoder.decode(eq(file), eq(width), eq(height), eq(options))).thenReturn(expected);, +        assertEquals(expected, cacheLoader.load(key, decoder, width, height, options));, +        assertNull(cacheLoader.load(key, decoder, 100, 100, options));, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new IOException("Test"));, +        cacheLoader.load(key, decoder, 100, 100, options);, +        when(decoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        cacheLoader.load(key, decoder, 100, 101, options);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import static org.mockito.Matchers.anyMapOf;, +import java.util.Collections;, +import java.util.Map;, +        when(harness.cacheDecoder.decode(eq(cacheFile), eq(harness.width), eq(harness.height), eq(harness.options))), +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +        verify(harness.cacheDecoder).decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class));, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenThrow(new RuntimeException("test"));, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);, +        when(harness.cacheDecoder.decode(eq(file), eq(harness.width), eq(harness.height), eq(harness.options))), +        when(harness.cacheDecoder.decode(any(File.class), anyInt(), anyInt(), anyMapOf(String.class, Object.class))), +                .thenReturn(null);]