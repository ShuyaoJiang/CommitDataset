[+++ b/Makefile, +++ b/Makefile, +++ b/library/AndroidManifest.xml, +          android:versionCode="4", +          android:versionName="3.0.0" >, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/Makefile, +++ b/library/AndroidManifest.xml, +          android:versionCode="4", +          android:versionName="3.0.0" >, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/Makefile, +++ b/library/AndroidManifest.xml, +          android:versionCode="4", +          android:versionName="3.0.0" >, +  <uses-sdk android:minSdkVersion="10" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.os.ParcelFileDescriptor;, +import android.view.View;, +import com.android.volley.RequestQueue;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorFileLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorModelLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorStringLoader;, +import com.bumptech.glide.loader.bitmap.model.file_descriptor.FileDescriptorUriLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamByteArrayLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamFileLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamModelLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamStringLoader;, +import com.bumptech.glide.loader.bitmap.model.stream.StreamUriLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.ViewTarget;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import java.io.InputStream;, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, +    private static Glide GLIDE;, +    private final RequestQueue requestQueue;, +         *     public void onException(Exception e, ModelType model, Target target) {, +    public static Glide get(Context context) {, +        if (GLIDE == null) {, +            GLIDE = new GlideBuilder(context).createGlide();, +        }, +, +    public static boolean isSetup() {, +        return GLIDE != null;, +    public static void setup(GlideBuilder builder) {, +        if (GLIDE != null) {, +            throw new IllegalArgumentException("Glide is already setup, check with isSetup() first");, +        GLIDE = builder.createGlide();, +    Glide(ImageManager imageManager, RequestQueue requestQueue) {, +        this.imageManager = imageManager;, +        this.requestQueue = requestQueue;, +        register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());, +        register(File.class, InputStream.class, new StreamFileLoader.Factory());, +        register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());, +        register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());, +        register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());, +        register(String.class, InputStream.class, new StreamStringLoader.Factory());, +        register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());, +        register(Uri.class, InputStream.class, new StreamUriLoader.Factory());, +        register(URL.class, InputStream.class, new VolleyUrlLoader.Factory(requestQueue));, +     * Returns the {@link ImageManager} Glide is using to load images., +    public ImageManager getImageManager() {, +     * Returns the {@link RequestQueue} Glide is using to fetch images over http/https., +    public RequestQueue getRequestQueue() {, +        return requestQueue;, +     * models. Typically the {@link ModelRequest#using(StreamModelLoader)} or, +     * {@link ModelRequest#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * with the ModelLoader being used to load it., +     *     used for any other model class, {@link ModelLoaderFactory#teardown()}, +     * @see ModelRequest#using(FileDescriptorModelLoader), +     * @see ModelRequest#using(StreamModelLoader), +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class the model loader will translate the model type into., +     * @param factory The factory to use., +     * @param <T> The type of the model., +     * @param <Y> the type of the resource., +    public <T, Y> void register(Class<T> modelClass, Class<Y> resourceClass, ModelLoaderFactory<T, Y> factory) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.register(modelClass, resourceClass, factory);, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {, +        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);]