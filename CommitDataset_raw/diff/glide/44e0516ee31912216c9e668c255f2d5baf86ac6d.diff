[+++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +        protected BitmapRequestBuilder getRequestBuilder(Object item) {, +            return mock(BitmapRequestBuilder.class);, +++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +        protected BitmapRequestBuilder getRequestBuilder(Object item) {, +            return mock(BitmapRequestBuilder.class);, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/ListPreloaderTest.java, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +                return mock(BitmapRequestBuilder.class);, +            protected BitmapRequestBuilder getRequestBuilder(Object item) {, +        protected BitmapRequestBuilder getRequestBuilder(Object item) {, +            return mock(BitmapRequestBuilder.class);, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/request/GenericRequestTest.java, +package com.bumptech.glide.request;, +, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Color;, +import android.graphics.drawable.ColorDrawable;, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.engine.Engine;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.bitmap.GenericRequest;, +import com.bumptech.glide.request.target.Target;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class GenericRequestTest {, +    private RequestHarness harness;, +, +    @SuppressWarnings("unchecked"), +    private static class RequestHarness {, +        Engine engine = mock(Engine.class);, +        Object model = new Object();, +        Target target = mock(Target.class);, +        Context context = Robolectric.application;, +        Resource<Object> resource = mock(Resource.class);, +        RequestCoordinator requestCoordinator = null;, +        Priority priority = Priority.NORMAL;, +        int placeholderResourceId = 0;, +        Drawable placeholderDrawable = null;, +        int errorResourceId = 0;, +        Drawable errorDrawable = null;, +        LoadProvider<Object, Object, Object> loadProvider = mock(LoadProvider.class);, +, +        public RequestHarness() {, +            ModelLoader<Object, Object> modelLoader = mock(ModelLoader.class);, +            when(loadProvider.getModelLoader()).thenReturn(modelLoader);, +        }, +, +        public GenericRequest<Object, Object, Object> getRequest() {, +            return new GenericRequest<Object, Object, Object>(loadProvider, model, context, priority, target, 1f,, +                    placeholderDrawable, placeholderResourceId, errorDrawable, errorResourceId, null, 0, null,, +                    requestCoordinator, engine, mock(Transformation.class));, +        }, +    }, +, +    @Before, +    public void setUp() {, +        harness = new RequestHarness();]