[+++ b/build.gradle, +, +            android.variantFilter { variant ->, +                if(variant.buildType.name == 'release') {, +                    variant.setIgnore(true), +                }, +            }, +        def dir = projectDir.absolutePath, +++ b/build.gradle, +, +            android.variantFilter { variant ->, +                if(variant.buildType.name == 'release') {, +                    variant.setIgnore(true), +                }, +            }, +        def dir = projectDir.absolutePath, +++ b/glide/build.gradle, +def getAndroidProjectsForJar() {, +    getAndroidLibraryVariantsForJar('debug'), +['debug'].each { variantName ->, +                                project.file('build/intermediates/classes/debug'), +            getAndroidProjectsForJar().collect { LibraryVariant variant ->, +        debugJavadoc.dependsOn(project.tasks.compileDebugSources), +        jar.dependsOn(project.tasks.compileDebugSources), +        debugJavadoc.dependsOn(project.tasks.compileJava), +    archives debugJavadocJar {, +    archives debugSourceJar {, +++ b/build.gradle, +, +            android.variantFilter { variant ->, +                if(variant.buildType.name == 'release') {, +                    variant.setIgnore(true), +                }, +            }, +        def dir = projectDir.absolutePath, +++ b/glide/build.gradle, +def getAndroidProjectsForJar() {, +    getAndroidLibraryVariantsForJar('debug'), +['debug'].each { variantName ->, +                                project.file('build/intermediates/classes/debug'), +            getAndroidProjectsForJar().collect { LibraryVariant variant ->, +        debugJavadoc.dependsOn(project.tasks.compileDebugSources), +        jar.dependsOn(project.tasks.compileDebugSources), +        debugJavadoc.dependsOn(project.tasks.compileJava), +    archives debugJavadocJar {, +    archives debugSourceJar {, +++ b/scripts/travis_unit.sh, +  --parallel, +++ b/build.gradle, +, +            android.variantFilter { variant ->, +                if(variant.buildType.name == 'release') {, +                    variant.setIgnore(true), +                }, +            }, +        def dir = projectDir.absolutePath, +++ b/glide/build.gradle, +def getAndroidProjectsForJar() {, +    getAndroidLibraryVariantsForJar('debug'), +['debug'].each { variantName ->, +                                project.file('build/intermediates/classes/debug'), +            getAndroidProjectsForJar().collect { LibraryVariant variant ->, +        debugJavadoc.dependsOn(project.tasks.compileDebugSources), +        jar.dependsOn(project.tasks.compileDebugSources), +        debugJavadoc.dependsOn(project.tasks.compileJava), +    archives debugJavadocJar {, +    archives debugSourceJar {, +++ b/scripts/travis_unit.sh, +  --parallel, +++ b/scripts/upload.gradle, +        def variants = project.android.libraryVariants.findAll {, +            it.buildType.name.equalsIgnoreCase('debug'), +        task androidJavadocs(type: Javadoc, dependsOn: assembleDebug) {, +            source = variants.collect { it.javaCompile.source }, +                    project.file("build/intermediates/classes/debug"), +                classpath += files(variants.collect { it.javaCompile.classpath.files }), +        task androidLibraryJar(type: Jar, dependsOn: compileDebugJavaWithJavac /* == variant.javaCompile */) {, +            from compileDebugJavaWithJavac.destinationDir]