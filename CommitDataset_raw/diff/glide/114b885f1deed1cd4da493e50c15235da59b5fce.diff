[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      @NonNull List<RequestListener<Object>> defaultRequestListeners,, +      boolean isLoggingRequestOriginsEnabled) {, +            isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      @NonNull List<RequestListener<Object>> defaultRequestListeners,, +      boolean isLoggingRequestOriginsEnabled) {, +            isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private boolean isLoggingRequestOriginsEnabled;, +  /**, +   * Set to {@code true} to make Glide populate, +   * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., +   *, +   * <p>The exception set by this method is not printed by {@link GlideException} and can only be, +   * viewed via a {@link RequestListener} that reads the field via, +   * {@link GlideException#getOrigin()}., +   *, +   * <p>This is an experimental API that may be removed in the future., +   */, +  public GlideBuilder setLogRequestOrigins(boolean isEnabled) {, +    isLoggingRequestOriginsEnabled = isEnabled;, +    return this;, +  }, +, +        defaultRequestListeners,, +        isLoggingRequestOriginsEnabled);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      @NonNull List<RequestListener<Object>> defaultRequestListeners,, +      boolean isLoggingRequestOriginsEnabled) {, +            isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private boolean isLoggingRequestOriginsEnabled;, +  /**, +   * Set to {@code true} to make Glide populate, +   * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., +   *, +   * <p>The exception set by this method is not printed by {@link GlideException} and can only be, +   * viewed via a {@link RequestListener} that reads the field via, +   * {@link GlideException#getOrigin()}., +   *, +   * <p>This is an experimental API that may be removed in the future., +   */, +  public GlideBuilder setLogRequestOrigins(boolean isEnabled) {, +    isLoggingRequestOriginsEnabled = isEnabled;, +    return this;, +  }, +, +        defaultRequestListeners,, +        isLoggingRequestOriginsEnabled);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private boolean isLoggingRequestOriginsEnabled;, +      boolean isLoggingRequestOriginsEnabled,, +    this.isLoggingRequestOriginsEnabled = isLoggingRequestOriginsEnabled;, +, +  /**, +   * Returns {@code true} if Glide should populate, +   * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., +   *, +   * <p>This is an experimental API that may be removed in the future., +   */, +  public boolean isLoggingRequestOriginsEnabled() {, +    return isLoggingRequestOriginsEnabled;, +  }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      @NonNull List<RequestListener<Object>> defaultRequestListeners,, +      boolean isLoggingRequestOriginsEnabled) {, +            isLoggingRequestOriginsEnabled,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  private boolean isLoggingRequestOriginsEnabled;, +  /**, +   * Set to {@code true} to make Glide populate, +   * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., +   *, +   * <p>The exception set by this method is not printed by {@link GlideException} and can only be, +   * viewed via a {@link RequestListener} that reads the field via, +   * {@link GlideException#getOrigin()}., +   *, +   * <p>This is an experimental API that may be removed in the future., +   */, +  public GlideBuilder setLogRequestOrigins(boolean isEnabled) {, +    isLoggingRequestOriginsEnabled = isEnabled;, +    return this;, +  }, +, +        defaultRequestListeners,, +        isLoggingRequestOriginsEnabled);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private boolean isLoggingRequestOriginsEnabled;, +      boolean isLoggingRequestOriginsEnabled,, +    this.isLoggingRequestOriginsEnabled = isLoggingRequestOriginsEnabled;, +, +  /**, +   * Returns {@code true} if Glide should populate, +   * {@link com.bumptech.glide.load.engine.GlideException#setOrigin(Exception)} for failed requests., +   *, +   * <p>This is an experimental API that may be removed in the future., +   */, +  public boolean isLoggingRequestOriginsEnabled() {, +    return isLoggingRequestOriginsEnabled;]