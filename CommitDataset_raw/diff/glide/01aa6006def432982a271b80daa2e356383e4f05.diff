[+++ b/library/src/com/bumptech/glide/ListPreloader.java, +            final int numItems = items.size();, +            for (int i = 0; i < numItems; i++) {, +            for (int i = items.size() - 1; i >= 0; i--) {, +++ b/library/src/com/bumptech/glide/ListPreloader.java, +            final int numItems = items.size();, +            for (int i = 0; i < numItems; i++) {, +            for (int i = items.size() - 1; i >= 0; i--) {, +++ b/library/tests/src/com/bumptech/glide/ListPreloaderTest.java, +import static org.mockito.Mockito.mock;, +, +    public void testGetItemsIsCalledInOrderIncreasing() {, +        final int toPreload = 10;, +        final List<Object> objects = new ArrayList<Object>();, +        for (int i = 0; i < toPreload; i++) {, +            objects.add(new Object());, +        }, +, +        ListPreloader preloader = new ListPreloader(toPreload) {, +            int expectedPosition;, +            @Override, +            protected int[] getDimensions(Object item) {, +                return new int[] { 10, 10 };, +            }, +, +            @Override, +            protected List getItems(int start, int end) {, +                return objects;, +            }, +, +            @Override, +            protected RequestBuilder getRequestBuilder(Object item) {, +                assertEquals(objects.get(expectedPosition), item);, +                expectedPosition++;, +                return mock(RequestBuilder.class);, +            }, +        };, +, +        preloader.onScroll(null, 1, 10, 30);, +    }, +, +                if (start == 40) {, +        preloader.onScroll(null, 30, 10, 40);, +        preloader.onScroll(null, 29, 10, 40);, +    public void testGetItemsIsCalledInOrderDecreasing() {, +        final int toPreload = 10;, +        final List<Object> objects = new ArrayList<Object>();, +        for (int i = 0; i < toPreload; i++) {, +            objects.add(new Object());, +        }, +, +        ListPreloader preloader = new ListPreloader(toPreload) {, +            int expectedPosition = toPreload - 1;, +            @Override, +            protected int[] getDimensions(Object item) {, +                return new int[] { 10, 10 };, +            }, +, +            @Override, +            protected List getItems(int start, int end) {, +                if (start == 40) {, +                    return  Collections.EMPTY_LIST;, +                }, +                return objects;, +            }, +, +            @Override, +            protected RequestBuilder getRequestBuilder(Object item) {, +                assertEquals(objects.get(expectedPosition), item);, +                expectedPosition--;, +                return mock(RequestBuilder.class);, +            }, +        };, +, +        preloader.onScroll(null, 30, 10, 40);, +        preloader.onScroll(null, 29, 10, 40);, +    }, +]