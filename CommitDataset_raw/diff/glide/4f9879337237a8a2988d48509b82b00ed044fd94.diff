[+++ b/library/src/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Log;, +     * Constructor for the preloader., +     * Returns the dimensions of the view in the list where the images will be displayed., +    protected abstract int[] getDimensions(T item);, +     * Returns a list of all models that need to be loaded for the list to display adapter items start - end. A list of, +     * any size can be returned so there can be multiple models per adapter position., +     * Returns a glide request for a given item. Must exactly match the request used to load the image in the list. The, +            // Increasing, +                preloadItem(items, i);, +            // Decreasing, +                preloadItem(items, i);, +    private void preloadItem(List<T> items, int position) {, +        final int[] dimensions = getDimensions(item);, +        if (dimensions != null) {, +            getRequest(item).into(preloadTargetQueue.next(dimensions[0], dimensions[1])).with(context);, +++ b/library/src/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Log;, +     * Constructor for the preloader., +     * Returns the dimensions of the view in the list where the images will be displayed., +    protected abstract int[] getDimensions(T item);, +     * Returns a list of all models that need to be loaded for the list to display adapter items start - end. A list of, +     * any size can be returned so there can be multiple models per adapter position., +     * Returns a glide request for a given item. Must exactly match the request used to load the image in the list. The, +            // Increasing, +                preloadItem(items, i);, +            // Decreasing, +                preloadItem(items, i);, +    private void preloadItem(List<T> items, int position) {, +        final int[] dimensions = getDimensions(item);, +        if (dimensions != null) {, +            getRequest(item).into(preloadTargetQueue.next(dimensions[0], dimensions[1])).with(context);, +++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +        protected int[] getDimensions(Photo item) {, +++ b/library/src/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.util.Log;, +     * Constructor for the preloader., +     * Returns the dimensions of the view in the list where the images will be displayed., +    protected abstract int[] getDimensions(T item);, +     * Returns a list of all models that need to be loaded for the list to display adapter items start - end. A list of, +     * any size can be returned so there can be multiple models per adapter position., +     * Returns a glide request for a given item. Must exactly match the request used to load the image in the list. The, +            // Increasing, +                preloadItem(items, i);, +            // Decreasing, +                preloadItem(items, i);, +    private void preloadItem(List<T> items, int position) {, +        final int[] dimensions = getDimensions(item);, +        if (dimensions != null) {, +            getRequest(item).into(preloadTargetQueue.next(dimensions[0], dimensions[1])).with(context);, +++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java, +        protected int[] getDimensions(Photo item) {, +++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoList.java, +        protected int[] getDimensions(Photo item) {]