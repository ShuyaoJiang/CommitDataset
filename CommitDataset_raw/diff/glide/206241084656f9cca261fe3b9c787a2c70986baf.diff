[+++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +    private ImageManager.ImageManagerJob loadToken;, +            loadToken.cancel();, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +    private ImageManager.ImageManagerJob loadToken;, +            loadToken.cancel();, +++ b/library/src/com/bumptech/glide/loader/model/ModelLoader.java, +     * <p>, +     *     Note - If the {@link StringLoader} in any way retains a reference a context, either directly or as an, +     *     anonymous inner class, that context may be leaked. The leak will only be an issue if this load can run for a, +     *     long time or indefinitely (because of a particularly slow or paused/failed download for example)., +     * </p>, +     *, +++ b/library/src/com/bumptech/glide/loader/image/ImageManagerLoader.java, +    private ImageManager.ImageManagerJob loadToken;, +            loadToken.cancel();, +++ b/library/src/com/bumptech/glide/loader/model/ModelLoader.java, +     * <p>, +     *     Note - If the {@link StringLoader} in any way retains a reference a context, either directly or as an, +     *     anonymous inner class, that context may be leaked. The leak will only be an issue if this load can run for a, +     *     long time or indefinitely (because of a particularly slow or paused/failed download for example)., +     * </p>, +     *, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +import com.bumptech.glide.resize.bitmap_recycle.SerialBitmapReferenceCounter;, +import java.lang.ref.WeakReference;, +    /**, +     * Load an image, +     *, +     * @param id A unique id for this image (it may include the width and height but is not required to), +     * @param streamLoader An object that can fetch the image for the given id, width, and height if it is not cached, +     * @param transformation A transformation to apply to the image, +     * @param downsampler A downsampler to load the image from disk, +     * @param width The desired width of the final image, +     * @param height The desired height of the final image, +     * @param cb A callback to call when the image is ready, +     * @return An {@link ImageManagerJob} that must be retained while the job is still relevant and that can be used, +     *          to cancel a job if the image is no longer needed, +     */, +    public ImageManagerJob getImage(String id, StreamLoader streamLoader, Transformation transformation, Downsampler downsampler, int width, int height, LoadedCallback cb) {, +            ImageManagerRunner runner = new ImageManagerRunner(key, streamLoader, transformation, downsampler, width, height, cb);, +            runner.execute();, +            job = new ImageManagerJob(runner, streamLoader, transformation, downsampler, cb);, +    /**, +     * A class for tracking a particular job in the {@link ImageManager}. Cancel does not guarantee that the, +     * job will not finish, but rather is a best effort attempt., +     */, +    public static class ImageManagerJob {, +        private final ImageManagerRunner runner;, +        private StreamLoader sl;, +        private Downsampler downsampler;, +        private LoadedCallback cb;, +        public ImageManagerJob(ImageManagerRunner runner, StreamLoader sl, Transformation t, Downsampler d, LoadedCallback cb) {, +            this.runner = runner;, +            this.sl = sl;, +            this.transformation = t;, +            this.downsampler = d;, +        }, +, +        /**, +         * Try to cancel the job. Does not guarantee that the job will not finish., +         */, +        public void cancel() {, +            runner.cancel();, +            sl = null;, +            transformation = null;, +            downsampler = null;, +            cb = null;, +        }, +    }, +, +    private class ImageManagerRunner implements Runnable {, +        public final String key;, +        public final int width;, +        public final int height;, +        private final WeakReference<StreamLoader> slRef;, +        private final WeakReference<Transformation> tRef;, +        private final WeakReference<Downsampler> dRef;, +        private final WeakReference<LoadedCallback> cbRef;, +, +        private volatile Future<?> future;, +        private volatile boolean cancelled = false;, +, +        public ImageManagerRunner(String key, StreamLoader sl, Transformation t, Downsampler d, int width, int height, LoadedCallback cb) {, +            this.key = key;, +            this.width = width;, +, +            slRef = new WeakReference<StreamLoader>(sl);, +            tRef = new WeakReference<Transformation>(t);, +            dRef = new WeakReference<Downsampler>(d);, +            cbRef = new WeakReference<LoadedCallback>(cb);, +        }, +, +        private void execute() {, +, +, +            final Future current = future;, +            if (current != null) {, +                current.cancel(false);, +]