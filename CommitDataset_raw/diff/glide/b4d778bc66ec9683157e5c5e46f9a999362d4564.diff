[+++ b/library/findbugs-exclude.xml, +    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, +    <Match>, +      <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, +      <Bug pattern="EI_EXPOSE_REP" />, +    </Match>, +, +++ b/library/findbugs-exclude.xml, +    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, +    <Match>, +      <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, +      <Bug pattern="EI_EXPOSE_REP" />, +    </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +            context,, +            arrayPool,, +            registry,, +            imageViewTargetFactory,, +            defaultRequestOptions,, +            defaultTransitionOptions,, +            engine,, +            logLevel);, +++ b/library/findbugs-exclude.xml, +    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, +    <Match>, +      <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, +      <Bug pattern="EI_EXPOSE_REP" />, +    </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +            context,, +            arrayPool,, +            registry,, +            imageViewTargetFactory,, +            defaultRequestOptions,, +            defaultTransitionOptions,, +            engine,, +            logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +  private final ArrayPool arrayPool;, +  public GlideContext(, +      Context context,, +      ArrayPool arrayPool,, +      Registry registry,, +      ImageViewTargetFactory imageViewTargetFactory,, +      RequestOptions defaultRequestOptions,, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, +      Engine engine,, +    this.arrayPool = arrayPool;, +, +  public ArrayPool getArrayPool() {, +    return arrayPool;, +  }, +++ b/library/findbugs-exclude.xml, +    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, +    <Match>, +      <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />, +      <Bug pattern="EI_EXPOSE_REP" />, +    </Match>, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +            context,, +            arrayPool,, +            registry,, +            imageViewTargetFactory,, +            defaultRequestOptions,, +            defaultTransitionOptions,, +            engine,, +            logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +  private final ArrayPool arrayPool;, +  public GlideContext(, +      Context context,, +      ArrayPool arrayPool,, +      Registry registry,, +      ImageViewTargetFactory imageViewTargetFactory,, +      RequestOptions defaultRequestOptions,, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, +      Engine engine,, +    this.arrayPool = arrayPool;, +, +  public ArrayPool getArrayPool() {, +    return arrayPool;, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java, +    int size = parsers.size();, +    for (int i = 0; i < size; i++) {, +      ImageHeaderParser parser = parsers.get(i);, +    int size = parsers.size();, +    for (int i = 0; i < size; i++) {, +      ImageHeaderParser parser = parsers.get(i);, +    int size = parsers.size();, +    for (int i = 0; i < size; i++) {, +      ImageHeaderParser parser = parsers.get(i);, +++ b/library/findbugs-exclude.xml, +    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->, +    <Match>]