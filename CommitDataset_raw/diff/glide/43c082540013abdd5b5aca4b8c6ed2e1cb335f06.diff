[+++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        verify(requestTracker).runRequest(any(Request.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        verify(requestTracker).runRequest(any(Request.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private RequestManager requestManager;, +        Lifecycle lifecycle = mock(Lifecycle.class);, +        requestManager = new RequestManager(getContext(), lifecycle);, +        requestManager.resumeRequests();, +        requestManager, +        requestManager.load(file).into(target);, +        requestManager.load(file).into(imageView);, +        requestManager.load(url).into(target);, +        requestManager.load(url).into(imageView);, +        requestManager.load(uri).asBitmap().into(target);, +        requestManager, +        requestManager.load(uri).asBitmap().toBytes().into(target);, +        requestManager.load(uri).into(target);, +        requestManager.load(uri).into(imageView);, +        requestManager, +        requestManager.load(string).into(imageView);, +        requestManager.load(integer).into(target);, +        requestManager.load(integer).into(imageView);, +        requestManager.load(bytes).into(target);, +        requestManager.load(bytes).into(imageView);, +        requestManager.load(bytes, id).into(target);, +        requestManager.load(bytes, id).into(imageView);, +        requestManager.load(unregistered).into(target);, +        requestManager, +        requestManager.load(0.5f).into(target);, +        requestManager, +        requestManager, +        requestManager, +        requestManager, +        requestManager.load((Double) null).into(target);, +        requestManager.load((Float) null).into(target);, +        requestManager.load((Double) null).into(target);, +        requestManager, +        requestManager, +        requestManager, +        requestManager.load(data).into(target);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        verify(requestTracker).runRequest(any(Request.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.manager.Lifecycle;, +    private RequestManager requestManager;, +        Lifecycle lifecycle = mock(Lifecycle.class);, +        requestManager = new RequestManager(getContext(), lifecycle);, +        requestManager.resumeRequests();, +        requestManager, +        requestManager.load(file).into(target);, +        requestManager.load(file).into(imageView);, +        requestManager.load(url).into(target);, +        requestManager.load(url).into(imageView);, +        requestManager.load(uri).asBitmap().into(target);, +        requestManager, +        requestManager.load(uri).asBitmap().toBytes().into(target);, +        requestManager.load(uri).into(target);, +        requestManager.load(uri).into(imageView);, +        requestManager, +        requestManager.load(string).into(imageView);, +        requestManager.load(integer).into(target);, +        requestManager.load(integer).into(imageView);, +        requestManager.load(bytes).into(target);, +        requestManager.load(bytes).into(imageView);, +        requestManager.load(bytes, id).into(target);, +        requestManager.load(bytes, id).into(imageView);, +        requestManager.load(unregistered).into(target);, +        requestManager, +        requestManager.load(0.5f).into(target);, +        requestManager, +        requestManager, +        requestManager, +        requestManager, +        requestManager.load((Double) null).into(target);, +        requestManager.load((Float) null).into(target);, +        requestManager.load((Double) null).into(target);, +        requestManager, +        requestManager, +        requestManager, +        requestManager.load(data).into(target);, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java, +        when(request.isComplete()).thenReturn(true);, +    public void testStartsRequestOnRun() {, +        Request request = mock(Request.class);, +        tracker.runRequest(request);, +, +        verify(request).begin();, +    }, +, +    @Test, +    public void testDoesNotStartRequestOnRunIfPaused() {, +        Request request = mock(Request.class);, +        tracker.pauseRequests();, +        tracker.runRequest(request);, +, +        verify(request, never()).begin();, +    }, +]