[+++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +        public Builder<T> setImagePresenterCoordinator(ImagePresenterCoordinator coordinator) {, +    public interface ImagePresenterCoordinator {, +        public boolean canSetImage(ImagePresenter presenter);, +        public boolean canSetPlaceholder(ImagePresenter presenter);, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +        public Builder<T> setImagePresenterCoordinator(ImagePresenterCoordinator coordinator) {, +    public interface ImagePresenterCoordinator {, +        public boolean canSetImage(ImagePresenter presenter);, +        public boolean canSetPlaceholder(ImagePresenter presenter);, +++ b/library/src/com/bumptech/glide/presenter/ThumbImagePresenter.java, +@SuppressWarnings("unused"), +public class ThumbImagePresenter<A, B> implements ImagePresenter.ImagePresenterCoordinator {, +     * @param <A> The type of the model that the full {@link ImagePresenter} requires, +     * @param <B> The type of the model that the thumb {@link ImagePresenter} requires, +    public static class Builder<A, B> {, +        private ImagePresenter.Builder<A> fullPresenterBuilder;, +        private ImagePresenter.Builder<B> thumbPresenterBuilder;, +        public ThumbImagePresenter<A, B> build(){, +            return new ThumbImagePresenter<A, B>(this);, +        public Builder<A, B> setFullPresenterBuilder(ImagePresenter.Builder<A> builder) {, +        public Builder<A, B> setThumbPresenterBuilder(ImagePresenter.Builder<B> builder) {, +        public Builder<A, B> setImageView(ImageView imageView) {, +        public Builder<A, B> setPlaceholderDrawable(Drawable drawable) {, +        public Builder<A, B> setPlaceholderResource(int resourceId) {, +    private final ImagePresenter<A> fullPresenter;, +    private final ImagePresenter<B> thumbPresenter;, +    private ThumbImagePresenter(Builder<A, B> builder) {, +    public void setModels(A fullModel, B thumbModel) {]