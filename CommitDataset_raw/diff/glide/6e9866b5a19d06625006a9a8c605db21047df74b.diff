[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsBytesTest.java, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadVideoResourceTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import android.content.ContentResolver;, +import android.content.Context;, +import android.content.res.Resources;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.net.Uri;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import java.io.IOException;, +import java.util.concurrent.TimeUnit;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.MockitoAnnotations;, +, +/**, + * Tests that Glide is able to load videos stored in resources and loaded as, + * {@link android.content.res.AssetFileDescriptor}s., + */, +@RunWith(AndroidJUnit4.class), +public class LoadVideoResourceTest {, +  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();, +  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();, +, +  private Context context;, +, +  @Before, +  public void setUp() throws IOException {, +    MockitoAnnotations.initMocks(this);, +    context = InstrumentationRegistry.getTargetContext();, +  }, +, +  @Test, +  public void loadVideoResourceId_fromInt_decodesFrame() {, +    Drawable frame =, +        concurrency.get(, +            Glide.with(context), +                .load(ResourceIds.raw.video), +                .submit());, +, +    assertThat(frame).isNotNull();, +  }, +, +  @Test, +  public void loadVideoResourceId_fromInt_withFrameTime_decodesFrame() {, +    Drawable frame =, +        concurrency.get(, +            GlideApp.with(context), +                .load(ResourceIds.raw.video), +                .frame(TimeUnit.SECONDS.toMicros(1)), +                .submit());, +, +    assertThat(frame).isNotNull();, +  }, +, +  // Testing boxed integer., +  @SuppressWarnings("UnnecessaryBoxing"), +  @Test, +  public void loadVideoResourceId_fromInteger_decodesFrame() {, +    Drawable frame =, +        concurrency.get(, +            Glide.with(context), +                .load(new Integer(ResourceIds.raw.video)), +                .submit());, +, +    assertThat(frame).isNotNull();, +  }, +, +  // Testing boxed integer., +  @SuppressWarnings("UnnecessaryBoxing"), +  @Test, +  public void loadVideoResourceId_fromInteger_withFrameTime_decodesFrame() {, +    Drawable frame =, +        concurrency.get(, +            GlideApp.with(context), +                .load(new Integer(ResourceIds.raw.video)), +                .frame(TimeUnit.SECONDS.toMicros(1)), +                .submit());, +, +    assertThat(frame).isNotNull();, +  }, +, +  @Test, +  public void loadVideoResourceId_asBitmap_decodesFrame() {, +    Bitmap frame =, +        concurrency.get(, +            Glide.with(context), +                .asBitmap()]