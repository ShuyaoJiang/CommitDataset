[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.resize.cache.DiskCache;, +import com.bumptech.glide.resize.cache.MemoryCache;, +import com.bumptech.glide.resize.load.MultiTransformation;, +import com.bumptech.glide.resize.request.BitmapRequestBuilder;, +import com.bumptech.glide.resize.request.Request;, +import com.bumptech.glide.resize.request.ThumbnailRequestCoordinator;, +import com.bumptech.glide.resize.target.ImageViewTarget;, +import com.bumptech.glide.resize.target.Target;, +import com.bumptech.glide.resize.target.ViewTarget;, +import java.util.List;, + * A singleton to present a simple static interface for building requests with {@link RequestBuilder} and maintaining, + * an {@link ImageManager} and it's {@link BitmapPool}, {@link DiskCache} and {@link MemoryCache}., +    /**, +     * Returns false if the {@link Glide} singleton has not yet been created and can therefore be setup using, +     * {@link #setup(GlideBuilder)}., +     *, +     * @see #setup(GlideBuilder), +     */, +    /**, +     * Creates the {@link Glide} singleton using the given builder. Can be used to set options like cache sizes and, +     * locations., +     *, +     * @see #isSetup(), +     *, +     * @param builder The builder., +     * @throws IllegalArgumentException if the Glide singleton has already been created., +     */, +        Request request = target.getRequest();, +        if (request!= null) {, +            request.clear();, +        private final List<Transformation> transformations = new ArrayList<Transformation>();, +         * Transform images using {@link Transformation#CENTER_CROP}., +            return transform(Transformation.CENTER_CROP);, +         * Transform images using {@link Transformation#FIT_CENTER}., +            return transform(Transformation.FIT_CENTER);, +, +         * Transform images with the given {@link Transformation}. Appends this transformation onto any existing, +         * @param transformation the transformation to apply., +                Transformation transformation) {, +            transformations.add(transformation);, +            final Transformation transformation = getFinalTransformation();, +                                    transformation)), +        private Transformation getFinalTransformation() {, +            switch (transformations.size()) {, +                    return Transformation.NONE;, +                    return transformations.get(0);, +                    return new MultiTransformation(transformations);, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.resize.cache.DiskCache;, +import com.bumptech.glide.resize.cache.MemoryCache;, +import com.bumptech.glide.resize.load.MultiTransformation;, +import com.bumptech.glide.resize.request.BitmapRequestBuilder;, +import com.bumptech.glide.resize.request.Request;, +import com.bumptech.glide.resize.request.ThumbnailRequestCoordinator;, +import com.bumptech.glide.resize.target.ImageViewTarget;, +import com.bumptech.glide.resize.target.Target;, +import com.bumptech.glide.resize.target.ViewTarget;, +import java.util.List;, + * A singleton to present a simple static interface for building requests with {@link RequestBuilder} and maintaining, + * an {@link ImageManager} and it's {@link BitmapPool}, {@link DiskCache} and {@link MemoryCache}., +    /**, +     * Returns false if the {@link Glide} singleton has not yet been created and can therefore be setup using, +     * {@link #setup(GlideBuilder)}., +     *, +     * @see #setup(GlideBuilder), +     */, +    /**, +     * Creates the {@link Glide} singleton using the given builder. Can be used to set options like cache sizes and, +     * locations., +     *, +     * @see #isSetup(), +     *, +     * @param builder The builder., +     * @throws IllegalArgumentException if the Glide singleton has already been created., +     */, +        Request request = target.getRequest();, +        if (request!= null) {, +            request.clear();, +        private final List<Transformation> transformations = new ArrayList<Transformation>();, +         * Transform images using {@link Transformation#CENTER_CROP}., +            return transform(Transformation.CENTER_CROP);, +         * Transform images using {@link Transformation#FIT_CENTER}., +            return transform(Transformation.FIT_CENTER);, +, +         * Transform images with the given {@link Transformation}. Appends this transformation onto any existing, +         * @param transformation the transformation to apply., +                Transformation transformation) {, +            transformations.add(transformation);, +            final Transformation transformation = getFinalTransformation();, +                                    transformation)), +        private Transformation getFinalTransformation() {, +            switch (transformations.size()) {, +                    return Transformation.NONE;, +                    return transformations.get(0);, +                    return new MultiTransformation(transformations);, +++ b/library/src/com/bumptech/glide/ListPreloader.java, +import com.bumptech.glide.resize.target.BaseTarget;]