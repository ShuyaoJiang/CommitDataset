[+++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.loader.bitmap.BitmapLoadFactory;, +import com.bumptech.glide.resize.load.BitmapLoad;, +        if (model != null && imageLoader == null && videoLoader == null) {, +        if (request != null) {, +        }, +, +                .setBitmapLoadFactory(getLoadFactory()), +    private BitmapLoadFactory<ModelType> getLoadFactory() {, +        if (model == null) {, +            return new BitmapLoadFactory<ModelType>() {, +                @Override, +                public BitmapLoad getLoadTask(Object model, int width, int height) {, +                    return null;, +                }, +            };, +        }, +, +        final ResourceBitmapLoadFactory<ModelType, ImageResourceType> imageFactory;, +        if (imageLoader != null && imageDecoder != null) {, +            imageFactory = new ResourceBitmapLoadFactory<ModelType, ImageResourceType>(imageLoader, imageDecoder,, +                    decodeFormat);, +        } else {, +            imageFactory = null;, +        }, +, +        final ResourceBitmapLoadFactory<ModelType, VideoResourceType> videoFactory;, +        if (videoLoader != null && videoDecoder != null) {, +            videoFactory = new ResourceBitmapLoadFactory<ModelType, VideoResourceType>(videoLoader, videoDecoder,, +                    decodeFormat);, +        } else {, +            videoFactory = null;, +        }, +        return new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(imageFactory,, +                videoFactory, getFinalTransformation());, +    }, +, +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.loader.bitmap.BitmapLoadFactory;, +import com.bumptech.glide.resize.load.BitmapLoad;, +        if (model != null && imageLoader == null && videoLoader == null) {, +        if (request != null) {, +        }, +, +                .setBitmapLoadFactory(getLoadFactory()), +    private BitmapLoadFactory<ModelType> getLoadFactory() {, +        if (model == null) {, +            return new BitmapLoadFactory<ModelType>() {, +                @Override, +                public BitmapLoad getLoadTask(Object model, int width, int height) {, +                    return null;, +                }, +            };, +        }, +, +        final ResourceBitmapLoadFactory<ModelType, ImageResourceType> imageFactory;, +        if (imageLoader != null && imageDecoder != null) {, +            imageFactory = new ResourceBitmapLoadFactory<ModelType, ImageResourceType>(imageLoader, imageDecoder,, +                    decodeFormat);, +        } else {, +            imageFactory = null;, +        }, +, +        final ResourceBitmapLoadFactory<ModelType, VideoResourceType> videoFactory;, +        if (videoLoader != null && videoDecoder != null) {, +            videoFactory = new ResourceBitmapLoadFactory<ModelType, VideoResourceType>(videoLoader, videoDecoder,, +                    decodeFormat);, +        } else {, +            videoFactory = null;, +        }, +        return new ImageVideoBitmapLoadFactory<ModelType, ImageResourceType, VideoResourceType>(imageFactory,, +                videoFactory, getFinalTransformation());, +    }, +, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.util.Log;, +    private static final String TAG = "Glide";, +     * @return A new {@link ModelLoader} for the given model and resource classes, or null if model is null., +            if (Log.isLoggable(TAG, Log.DEBUG)) {, +                Log.d(TAG, "Unable to load null model, setting placeholder only");, +            }, +            return null;, +++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.loader.bitmap.BitmapLoadFactory;, +import com.bumptech.glide.resize.load.BitmapLoad;, +        if (model != null && imageLoader == null && videoLoader == null) {, +        if (request != null) {, +        }, +, +                .setBitmapLoadFactory(getLoadFactory()), +    private BitmapLoadFactory<ModelType> getLoadFactory() {, +        if (model == null) {, +            return new BitmapLoadFactory<ModelType>() {, +                @Override, +                public BitmapLoad getLoadTask(Object model, int width, int height) {, +                    return null;, +                }, +            };, +        }, +]