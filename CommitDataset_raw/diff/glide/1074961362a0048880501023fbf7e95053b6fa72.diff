[+++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    // We just need the encoder and resource type to match, which this will enforce., +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    // We just need the encoder and resource type to match, which this will enforce., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +   * The maximum number of times larger an int array may be to be than a requested size to eligible, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    // We just need the encoder and resource type to match, which this will enforce., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +   * The maximum number of times larger an int array may be to be than a requested size to eligible, +++ b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java, +   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise., +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    // We just need the encoder and resource type to match, which this will enforce., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +   * The maximum number of times larger an int array may be to be than a requested size to eligible, +++ b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java, +   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise., +++ b/library/src/main/java/com/bumptech/glide/module/GlideModule.java, + *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    // We just need the encoder and resource type to match, which this will enforce., +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java, +   * The maximum number of times larger an int array may be to be than a requested size to eligible, +++ b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java, +   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise., +++ b/library/src/main/java/com/bumptech/glide/module/GlideModule.java, + *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +  private Drawable loadDrawable(int resourceId) {, +    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());, +++ b/CONTRIBUTING.md, + * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons, +++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java, +   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and, +++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java, +   * the concrete data type returned by the AssetManager., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java, +     * @param dataSource The data source we were loading from., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java]