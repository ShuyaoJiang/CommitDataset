[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +    public void testReturnsNullIfParsedHeaderHasFormatError() {, +        GifHeader header = mock(GifHeader.class);, +        when(parser.parseHeader()).thenReturn(header);, +        when(header.getStatus()).thenReturn(GifDecoder.STATUS_FORMAT_ERROR);, +, +        assertNull(decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100));, +    }, +, +    @Test, +    public void testReturnsNullIfParsedHeaderHasOpenError() {, +        GifHeader header = mock(GifHeader.class);, +        when(parser.parseHeader()).thenReturn(header);, +        when(header.getStatus()).thenReturn(GifDecoder.STATUS_OPEN_ERROR);, +, +        assertNull(decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100));, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +    public void testReturnsNullIfParsedHeaderHasFormatError() {, +        GifHeader header = mock(GifHeader.class);, +        when(parser.parseHeader()).thenReturn(header);, +        when(header.getStatus()).thenReturn(GifDecoder.STATUS_FORMAT_ERROR);, +, +        assertNull(decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100));, +    }, +, +    @Test, +    public void testReturnsNullIfParsedHeaderHasOpenError() {, +        GifHeader header = mock(GifHeader.class);, +        when(parser.parseHeader()).thenReturn(header);, +        when(header.getStatus()).thenReturn(GifDecoder.STATUS_OPEN_ERROR);, +, +        assertNull(decoder.decode(new ByteArrayInputStream(new byte[0]), 100, 100));, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +        if (header.getNumFrames() <= 0 || header.getStatus() != GifDecoder.STATUS_OK) {]