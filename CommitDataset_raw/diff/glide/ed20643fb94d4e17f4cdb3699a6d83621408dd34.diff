[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/FieldUniqueIdGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +/**, + * Generates unique field ids for classes generated by Glide's annotation processor., + */, +final class FieldUniqueIdGenerator {, +  private static int nextStaticFieldUniqueId;, +, +  private FieldUniqueIdGenerator() {, +    // Utility class., +  }, +, +  static int next() {, +    return nextStaticFieldUniqueId++;, +  }, +}, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/FieldUniqueIdGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +/**, + * Generates unique field ids for classes generated by Glide's annotation processor., + */, +final class FieldUniqueIdGenerator {, +  private static int nextStaticFieldUniqueId;, +, +  private FieldUniqueIdGenerator() {, +    // Utility class., +  }, +, +  static int next() {, +    return nextStaticFieldUniqueId++;, +  }, +}, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    if (!isBaseRequestOptions(returnType)) {, +      throw new IllegalArgumentException("@GlideOption methods should return a", +          + " BaseRequestOptions<?> object, but " + getQualifiedMethodName(executableElement), +          + " returns " + returnType + ". If you're using old style @GlideOption methods, your", +          + " method may have a void return type, but doing so is deprecated and support will be", +          + " removed in a future version");, +          + "BaseRequestOptions<?> object as their first parameter, but ", +    if (!isBaseRequestOptions(expected)) {, +          + " BaseRequestOptions<?> object as their first parameter, but the first parameter in ", +  private static boolean isBaseRequestOptions(TypeMirror typeMirror) {, +    return typeMirror.toString().equals("com.bumptech.glide.request.BaseRequestOptions<?>");, +    boolean isOverridingBaseRequestOptionsMethod = isMethodInBaseRequestOptions(element);, +    if (isOverridingBaseRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {, +          + " BaseRequestOptions. Add an 'override' value in the @GlideOption annotation", +    } else if (!isOverridingBaseRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {, +          + " BaseRequestOptions, but no such method was found. Offending method: ", +  private boolean isMethodInBaseRequestOptions(ExecutableElement toFind) {, +            .getTypeElement(RequestOptionsGenerator.BASE_REQUEST_OPTIONS_QUALIFIED_NAME);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(generatedCodePackageName, indexedClassNames.extensions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/FieldUniqueIdGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +/**, + * Generates unique field ids for classes generated by Glide's annotation processor., + */, +final class FieldUniqueIdGenerator {, +  private static int nextStaticFieldUniqueId;, +, +  private FieldUniqueIdGenerator() {, +    // Utility class., +  }, +, +  static int next() {, +    return nextStaticFieldUniqueId++;, +  }, +}, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    if (!isBaseRequestOptions(returnType)) {, +      throw new IllegalArgumentException("@GlideOption methods should return a", +          + " BaseRequestOptions<?> object, but " + getQualifiedMethodName(executableElement), +          + " returns " + returnType + ". If you're using old style @GlideOption methods, your", +          + " method may have a void return type, but doing so is deprecated and support will be", +          + " removed in a future version");, +          + "BaseRequestOptions<?> object as their first parameter, but ", +    if (!isBaseRequestOptions(expected)) {, +          + " BaseRequestOptions<?> object as their first parameter, but the first parameter in ", +  private static boolean isBaseRequestOptions(TypeMirror typeMirror) {, +    return typeMirror.toString().equals("com.bumptech.glide.request.BaseRequestOptions<?>");, +    boolean isOverridingBaseRequestOptionsMethod = isMethodInBaseRequestOptions(element);, +    if (isOverridingBaseRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {, +          + " BaseRequestOptions. Add an 'override' value in the @GlideOption annotation", +    } else if (!isOverridingBaseRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {, +          + " BaseRequestOptions, but no such method was found. Offending method: ", +  private boolean isMethodInBaseRequestOptions(ExecutableElement toFind) {, +            .getTypeElement(RequestOptionsGenerator.BASE_REQUEST_OPTIONS_QUALIFIED_NAME);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +  private final RequestOptionsOverrideGenerator requestOptionsOverrideGenerator;, +  private ClassName generatedRequestBuilderClassName;]