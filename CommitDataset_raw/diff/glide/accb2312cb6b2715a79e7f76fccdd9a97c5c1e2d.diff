[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import static org.mockito.Mockito.doAnswer;, +    @Test, +    public void testNotifiesNewCallbackOfResourceIfCallbackIsAddedDuringOnResourceReady() {, +        final EngineJob job = harness.getJob();, +        final ResourceCallback existingCallback = mock(ResourceCallback.class);, +        final ResourceCallback newCallback = mock(ResourceCallback.class);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                job.addCallback(newCallback);, +                return null;, +            }, +        }).when(existingCallback).onResourceReady(any(Resource.class));, +, +        job.addCallback(existingCallback);, +        job.onResourceReady(harness.resource);, +, +        verify(newCallback).onResourceReady(eq(harness.engineResource));, +    }, +, +    @Test, +    public void testNotifiesNewCallbackOfExceptionIfCallbackIsAddedDuringOnException() {, +        final EngineJob job = harness.getJob();, +        final ResourceCallback existingCallback = mock(ResourceCallback.class);, +        final ResourceCallback newCallback = mock(ResourceCallback.class);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                job.addCallback(newCallback);, +                return null;, +            }, +        }).when(existingCallback).onException(any(Exception.class));, +, +        Exception expected = new RuntimeException();, +        job.addCallback(existingCallback);, +        job.onException(expected);, +, +        verify(newCallback).onException(eq(expected));, +    }, +, +    @Test, +    public void testRemovingCallbackDuringOnResourceReadyIsIgnoredIfCallbackHasAlreadyBeenCalled() {, +        final EngineJob job = harness.getJob();, +        final ResourceCallback cb = mock(ResourceCallback.class);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                job.removeCallback(cb);, +                return null;, +            }, +        }).when(cb).onResourceReady(any(Resource.class));, +, +        job.addCallback(cb);, +        job.onResourceReady(harness.resource);, +, +        verify(cb, times(1)).onResourceReady(any(Resource.class));, +    }, +, +    @Test, +    public void testRemovingCallbackDuringOnExceptionIsIgnoredIfCallbackHasAlreadyBeenCalled() {, +        final EngineJob job = harness.getJob();, +        final ResourceCallback cb = mock(ResourceCallback.class);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                job.removeCallback(cb);, +                return null;, +            }, +        }).when(cb).onException(any(Exception.class));, +, +        job.addCallback(cb);, +        job.onException(new RuntimeException());, +, +        verify(cb, times(1)).onException(any(Exception.class));, +    }, +, +    @Test, +    public void testRemovingCallbackDuringOnResourceReadyPreventsCallbackFromBeingCalledIfNotYetCalled() {, +        final EngineJob job = harness.getJob();, +        final ResourceCallback called = mock(ResourceCallback.class);, +        final ResourceCallback notYetCalled = mock(ResourceCallback.class);, +, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                job.removeCallback(notYetCalled);, +                return null;, +            }, +        }).when(called).onResourceReady(any(Resource.class));, +, +        job.addCallback(called);, +        job.addCallback(notYetCalled);, +]