[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java, +          throw new RuntimeException(e.getCause());, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java, +          throw new RuntimeException(e.getCause());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java, +  private String detailMessage;, +    this.detailMessage = detailMessage;, +, +, +  // PMD doesn't seem to notice that we're allocating the builder with the suggested size., +  @SuppressWarnings("PMD.InsufficientStringBufferDeclaration"), +    StringBuilder result = new StringBuilder(71), +        .append(detailMessage), +        .append(dataClass != null ? ", " + dataClass : ""), +        .append(dataSource != null ? ", " + dataSource : ""), +        .append(key != null ? ", " + key : "");, +, +    List<Throwable> rootCauses = getRootCauses();, +    if (rootCauses.isEmpty()) {, +      return result.toString();, +    } else if (rootCauses.size() == 1) {, +      result.append("\nThere was 1 cause:");, +    } else {, +      result.append("\nThere were ").append(rootCauses.size()).append(" causes:");, +    }, +    for (Throwable cause : rootCauses) {, +      result.append('\n'), +          .append(cause.getClass().getName()).append('(').append(cause.getMessage()).append(')');, +    }, +    result.append("\n call GlideException#logRootCauses(String) for more detail");, +    return result.toString();, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java, +          throw new RuntimeException(e.getCause());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java, +  private String detailMessage;, +    this.detailMessage = detailMessage;, +, +, +  // PMD doesn't seem to notice that we're allocating the builder with the suggested size., +  @SuppressWarnings("PMD.InsufficientStringBufferDeclaration"), +    StringBuilder result = new StringBuilder(71), +        .append(detailMessage), +        .append(dataClass != null ? ", " + dataClass : ""), +        .append(dataSource != null ? ", " + dataSource : ""), +        .append(key != null ? ", " + key : "");, +, +    List<Throwable> rootCauses = getRootCauses();, +    if (rootCauses.isEmpty()) {, +      return result.toString();, +    } else if (rootCauses.size() == 1) {, +      result.append("\nThere was 1 cause:");, +    } else {, +      result.append("\nThere were ").append(rootCauses.size()).append(" causes:");, +    }, +    for (Throwable cause : rootCauses) {, +      result.append('\n'), +          .append(cause.getClass().getName()).append('(').append(cause.getMessage()).append(')');, +    }, +    result.append("\n call GlideException#logRootCauses(String) for more detail");, +    return result.toString();, +++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java, +      throw new ExecutionException(exception);]