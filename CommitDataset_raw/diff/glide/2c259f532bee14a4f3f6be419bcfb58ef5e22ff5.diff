[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +        // We can't tell, so default to transparent to be safe., +        return PixelFormat.TRANSPARENT;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +        // We can't tell, so default to transparent to be safe., +        return PixelFormat.TRANSPARENT;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.util.Util;, +        this.totalFrameSize = Util.getBitmapByteSize(frameWidth, frameHeight, Bitmap.Config.ARGB_8888);, +                .diskCacheStrategy(DiskCacheStrategy.NONE), +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +        // We can't tell, so default to transparent to be safe., +        return PixelFormat.TRANSPARENT;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.util.Util;, +        this.totalFrameSize = Util.getBitmapByteSize(frameWidth, frameHeight, Bitmap.Config.ARGB_8888);, +                .diskCacheStrategy(DiskCacheStrategy.NONE), +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +, +        // We can't tell if a gif has transparency to decode a partial frame on top of a previous frame, or if the final, +        // frame will actually have transparent pixels, so we must always use a format that supports transparency., +        if (config == Bitmap.Config.RGB_565 || config == Bitmap.Config.ARGB_4444) {, +            return Bitmap.Config.ARGB_4444;, +        setAlpha(result);, +, +    @TargetApi(12), +    private static void setAlpha(Bitmap bitmap) {, +        if (Build.VERSION.SDK_INT >= 12) {, +            bitmap.setHasAlpha(true);, +        }, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +        // We can't tell, so default to transparent to be safe., +        return PixelFormat.TRANSPARENT;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.util.Util;, +        this.totalFrameSize = Util.getBitmapByteSize(frameWidth, frameHeight, Bitmap.Config.ARGB_8888);, +                .diskCacheStrategy(DiskCacheStrategy.NONE), +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +, +        // We can't tell if a gif has transparency to decode a partial frame on top of a previous frame, or if the final, +        // frame will actually have transparent pixels, so we must always use a format that supports transparency., +        if (config == Bitmap.Config.RGB_565 || config == Bitmap.Config.ARGB_4444) {, +            return Bitmap.Config.ARGB_4444;, +        setAlpha(result);, +, +    @TargetApi(12), +    private static void setAlpha(Bitmap bitmap) {, +        if (Build.VERSION.SDK_INT >= 12) {, +            bitmap.setHasAlpha(true);, +        }, +    }, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeader.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    public void testGetOpacityReturnsTransparent() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java, +        return bitmapPool.getDirty(width, height, config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +        // We can't tell, so default to transparent to be safe., +        return PixelFormat.TRANSPARENT;, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameManager.java, +import com.bumptech.glide.util.Util;, +        this.totalFrameSize = Util.getBitmapByteSize(frameWidth, frameHeight, Bitmap.Config.ARGB_8888);, +                .diskCacheStrategy(DiskCacheStrategy.NONE), +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +import android.annotation.TargetApi;, +import android.os.Build;, +, +        // We can't tell if a gif has transparency to decode a partial frame on top of a previous frame, or if the final, +        // frame will actually have transparent pixels, so we must always use a format that supports transparency., +        if (config == Bitmap.Config.RGB_565 || config == Bitmap.Config.ARGB_4444) {, +            return Bitmap.Config.ARGB_4444;, +        setAlpha(result);, +]