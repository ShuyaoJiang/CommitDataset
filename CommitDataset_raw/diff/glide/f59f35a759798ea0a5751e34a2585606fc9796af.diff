[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy  strategy) {, +        super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy  strategy) {, +        super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, +    public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, +        super.diskCacheStrategy(strategy);, +        return this;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy  strategy) {, +        super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, +    public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, +        super.diskCacheStrategy(strategy);, +        return this;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;, +     * Sets the {@link com.bumptech.glide.load.engine.DiskCacheStrategy} to use for this load. Defaults to, +     * {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT}., +     *     For most applications {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT} is ideal., +     *     Applications that use the same image multiple times in multiple sizes and are willing to trade off some, +     *     speed and disk space in return for lower bandwidth usage may want to consider using, +     *     {@link com.bumptech.glide.load.engine.DiskCacheStrategy#SOURCE} or, +     *     {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT}. Any download only operations should, +     *     typically use {@link com.bumptech.glide.load.engine.DiskCacheStrategy#SOURCE}., +     * @param strategy The strategy to use., +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType>  diskCacheStrategy(, +            DiskCacheStrategy strategy) {, +        this.diskCacheStrategy = strategy;, +, +        return this;, +                diskCacheStrategy);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy  strategy) {, +        super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, +    public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, +        super.diskCacheStrategy(strategy);, +        return this;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;, +     * Sets the {@link com.bumptech.glide.load.engine.DiskCacheStrategy} to use for this load. Defaults to, +     * {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT}., +     *     For most applications {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT} is ideal., +     *     Applications that use the same image multiple times in multiple sizes and are willing to trade off some, +     *     speed and disk space in return for lower bandwidth usage may want to consider using, +     *     {@link com.bumptech.glide.load.engine.DiskCacheStrategy#SOURCE} or, +     *     {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT}. Any download only operations should, +     *     typically use {@link com.bumptech.glide.load.engine.DiskCacheStrategy#SOURCE}., +     * @param strategy The strategy to use., +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType>  diskCacheStrategy(, +            DiskCacheStrategy strategy) {, +        this.diskCacheStrategy = strategy;, +, +        return this;, +                diskCacheStrategy);, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +                .diskCacheStrategy(DiskCacheStrategy.SOURCE), +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public BitmapRequestBuilder<ModelType, TranscodeType> diskCacheStrategy(DiskCacheStrategy  strategy) {, +        super.diskCacheStrategy(strategy);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, Drawable> requestListener) {, +    public DrawableRequestBuilder<ModelType> diskCacheStrategy(DiskCacheStrategy strategy) {, +        super.diskCacheStrategy(strategy);, +        return this;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +    private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.RESULT;, +     * Sets the {@link com.bumptech.glide.load.engine.DiskCacheStrategy} to use for this load. Defaults to, +     * {@link com.bumptech.glide.load.engine.DiskCacheStrategy#RESULT}.]