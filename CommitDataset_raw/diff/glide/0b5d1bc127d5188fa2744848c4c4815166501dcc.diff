[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java, +import com.bumptech.glide.util.Util;, +    return TransformationUtils.roundedCorners(pool, toTransform, roundingRadius);, +    if (o instanceof RoundedCorners) {, +      RoundedCorners other = (RoundedCorners) o;, +      return roundingRadius == other.roundingRadius;, +    }, +    return false;, +    return Util.hashCode(ID.hashCode(),, +        Util.hashCode(roundingRadius));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java, +import com.bumptech.glide.util.Util;, +    return TransformationUtils.roundedCorners(pool, toTransform, roundingRadius);, +    if (o instanceof RoundedCorners) {, +      RoundedCorners other = (RoundedCorners) o;, +      return roundingRadius == other.roundingRadius;, +    }, +    return false;, +    return Util.hashCode(ID.hashCode(),, +        Util.hashCode(roundingRadius));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java, +import com.bumptech.glide.load.Transformation;, +   *, +   * @deprecated Width and height are unused and ignored. Use, +   * {@link #roundedCorners(BitmapPool, Bitmap, int)} instead., +  @Deprecated, +  public static Bitmap roundedCorners(, +      @NonNull BitmapPool pool,, +      @NonNull Bitmap inBitmap,, +      @SuppressWarnings("unused") int width,, +      @SuppressWarnings("unused") int height,, +      int roundingRadius) {, +    return roundedCorners(pool, inBitmap, roundingRadius);, +  }, +, +  /**, +   * Creates a bitmap from a source bitmap and rounds the corners., +   *, +   * <p>This method does <em>NOT</em> resize the given {@link Bitmap}, it only rounds it's corners., +   * To both resize and round the corners of an image, consider, +   * {@link com.bumptech.glide.request.RequestOptions#transforms(Transformation[])} and/or, +   * {@link com.bumptech.glide.load.MultiTransformation}., +   *, +   * @param inBitmap the source bitmap to use as a basis for the created bitmap., +   * @param roundingRadius the corner radius to be applied (in device-specific pixels)., +   * @return a {@link Bitmap} similar to inBitmap but with rounded corners., +   * @throws IllegalArgumentException if roundingRadius, width or height is 0 or less., +   */, +  public static Bitmap roundedCorners(, +      @NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int roundingRadius) {, +    Bitmap result =, +        pool.get(toTransform.getWidth(), toTransform.getHeight(), Bitmap.Config.ARGB_8888);]