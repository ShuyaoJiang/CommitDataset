[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, +  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, +  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, +    Comparable<DecodeJob<?>>,, +    Poolable {, +  private final StateVerifier stateVerifier = StateVerifier.newInstance();, +    isCallbackNotified = false;, +    if (isCallbackNotified) {, +      throw new IllegalStateException("Already notified");, +    }, +    isCallbackNotified = true;, +  @Override, +  public StateVerifier getVerifier() {, +    return stateVerifier;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, +  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, +    Comparable<DecodeJob<?>>,, +    Poolable {, +  private final StateVerifier stateVerifier = StateVerifier.newInstance();, +    isCallbackNotified = false;, +    if (isCallbackNotified) {, +      throw new IllegalStateException("Already notified");, +    }, +    isCallbackNotified = true;, +  @Override, +  public StateVerifier getVerifier() {, +    return stateVerifier;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, +import android.support.v4.util.Pools.Pool;, +  private final Pool<List<Exception>> listPool;, +      ResourceTranscoder<ResourceType, Transcode> transcoder, Pool<List<Exception>> listPool) {, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, +  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, +    Comparable<DecodeJob<?>>,, +    Poolable {, +  private final StateVerifier stateVerifier = StateVerifier.newInstance();, +    isCallbackNotified = false;, +    if (isCallbackNotified) {, +      throw new IllegalStateException("Already notified");, +    }, +    isCallbackNotified = true;, +  @Override, +  public StateVerifier getVerifier() {, +    return stateVerifier;, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java, +import android.support.v4.util.Pools.Pool;, +  private final Pool<List<Exception>> listPool;, +      ResourceTranscoder<ResourceType, Transcode> transcoder, Pool<List<Exception>> listPool) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import com.bumptech.glide.util.pool.FactoryPools;, +    private final Pools.Pool<DecodeJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,, +        new FactoryPools.Factory<DecodeJob<?>>() {, +          @Override, +          public DecodeJob<?> create() {, +            return new DecodeJob<Object>(diskCacheProvider, pool);, +          }, +        });, +    private final Pools.Pool<EngineJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,, +        new FactoryPools.Factory<EngineJob<?>>() {, +          @Override, +          public EngineJob<?> create() {, +            return new EngineJob<Object>(diskCacheExecutor, sourceExecutor, listener, pool);, +          }, +        });, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.v4.util.Pools.Pool;, +import com.bumptech.glide.util.pool.FactoryPools;, +  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +import com.bumptech.glide.util.pool.FactoryPools.Poolable;, +import com.bumptech.glide.util.pool.StateVerifier;, +    Comparable<DecodeJob<?>>,, +    Poolable {, +  private final StateVerifier stateVerifier = StateVerifier.newInstance();, +    isCallbackNotified = false;, +    if (isCallbackNotified) {]