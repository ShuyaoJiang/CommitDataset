[+++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                if (isCurrent && Log.isLoggable(TAG, Log.ERROR)) {, +++ b/library/src/com/bumptech/glide/presenter/ImagePresenter.java, +                if (isCurrent && Log.isLoggable(TAG, Log.ERROR)) {, +++ b/library/src/com/bumptech/glide/volley/VolleyRequestFuture.java, +/*, + * Copyright (C) 2011 The Android Open Source Project, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.bumptech.glide.volley;, +, +import com.android.volley.Request;, +import com.android.volley.Response;, +import com.android.volley.VolleyError;, +, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +, +/**, + * TODO: contribute cancel modifications to volley and remove this class., + *, + * A Future that represents a Volley request., + *, + * Used by providing as your response and error listeners. For example:, + * <pre>, + * RequestFuture&lt;JSONObject&gt; future = RequestFuture.newFuture();, + * MyRequest request = new MyRequest(URL, future, future);, + *, + * // If you want to be able to cancel the request:, + * future.setRequest(requestQueue.add(request));, + *, + * // Otherwise:, + * requestQueue.add(request);, + *, + * try {, + *   JSONObject response = future.get();, + *   // do something with response, + * } catch (InterruptedException e) {, + *   // handle the error, + * } catch (ExecutionException e) {, + *   // handle the error, + * }, + * </pre>, + *, + * @param <T> The type of parsed response this future expects., + */, +public class VolleyRequestFuture<T> implements Future<T>, Response.Listener<T>,, +       Response.ErrorListener {, +    private Request<?> mRequest;, +    private boolean mResultReceived = false;, +    private T mResult;, +    private VolleyError mException;, +    private boolean mIsCancelled = false;, +, +    public static <E> VolleyRequestFuture<E> newFuture() {, +        return new VolleyRequestFuture<E>();, +    }, +, +    private VolleyRequestFuture() {}, +, +    public synchronized void setRequest(Request<?> request) {, +        mRequest = request;, +        if (mIsCancelled && mRequest != null) {, +            mRequest.cancel();, +        }, +    }, +, +    @Override, +    public synchronized boolean cancel(boolean mayInterruptIfRunning) {, +        if (isDone()) {, +            return false;, +        }, +        mIsCancelled = true;, +        if (mRequest != null) {, +            mRequest.cancel();, +        }, +        notifyAll();, +, +        return true;, +    }, +, +    @Override, +    public T get() throws InterruptedException, ExecutionException {, +        try {, +            return doGet(null);]