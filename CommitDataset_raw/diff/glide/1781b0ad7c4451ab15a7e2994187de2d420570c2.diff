[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, +        .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, +        .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java, +  public static boolean isMediaStoreUri(Uri uri) {, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.model.MediaStoreFileLoader;, +        .append(Uri.class, File.class, new MediaStoreFileLoader.Factory()), +++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java, +  public static boolean isMediaStoreUri(Uri uri) {, +++ b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java, +package com.bumptech.glide.load.model;, +, +import android.content.Context;, +import android.database.Cursor;, +import android.net.Uri;, +import android.provider.MediaStore;, +import android.text.TextUtils;, +, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.data.mediastore.MediaStoreUtil;, +import com.bumptech.glide.signature.ObjectKey;, +, +import java.io.File;, +, +/**, + * Loads the file path for {@link MediaStore} owned {@link Uri uris}., + */, +public final class MediaStoreFileLoader implements ModelLoader<Uri, File>  {, +, +  private final Context context;, +, +  MediaStoreFileLoader(Context context) {, +    this.context = context;, +  }, +, +  @Override, +  public LoadData<File> buildLoadData(Uri uri, int width, int height, Options options) {, +    return new LoadData<>(new ObjectKey(uri), new FilePathFetcher(context, uri));, +  }, +, +  @Override, +  public boolean handles(Uri uri) {, +    return MediaStoreUtil.isMediaStoreUri(uri);, +  }, +, +  private static class FilePathFetcher implements DataFetcher<File> {, +    private static final String[] PROJECTION = new String[] {, +        MediaStore.MediaColumns.DATA,, +    };, +, +    private final Context context;, +    private final Uri uri;, +, +    FilePathFetcher(Context context, Uri uri) {, +      this.context = context;, +      this.uri = uri;, +    }, +, +    @Override, +    public void loadData(Priority priority, DataCallback<? super File> callback) {, +      Cursor cursor = context.getContentResolver().query(uri, PROJECTION, null /*selection*/,, +          null /*selectionArgs*/, null /*sortOrder*/);, +, +      String filePath = null;, +      if (cursor != null) {, +        try {, +          if (cursor.moveToFirst()) {, +            filePath = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA));, +          }, +        } finally {, +          cursor.close();, +        }, +      }, +, +      if (TextUtils.isEmpty(filePath)) {, +        callback.onDataReady(null);, +      } else {, +        callback.onDataReady(new File(filePath));, +      }, +    }, +, +    @Override, +    public void cleanup() {, +      // Do nothing., +    }, +, +    @Override, +    public void cancel() {, +      // Do nothing., +    }, +, +    @Override, +    public Class<File> getDataClass() {]