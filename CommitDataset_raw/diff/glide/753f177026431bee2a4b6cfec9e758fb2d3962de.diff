[+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java, +import android.graphics.drawable.Drawable;, +import android.view.View;, + * Target<Bitmap> target =, + *     Glide.with(fragment), + *       .load("http://somefakeurl.com/fakeImage.jpeg"), + *       .apply(fitCenterTransform()), + * // At some later point, clear the Target to release the resources, prevent load queues from, + * // blowing out proportion, and to improve load times for future requests:, + * Glide.with(fragment).clear(target);, + * <p><em>Warning!</em> this class is extremely prone to mis-use. Use SimpleTarget only as a last, + * resort. {@link ViewTarget} or a subclass of {@link ViewTarget} is almost always a better choice., + *, + * <p><em>Don't forget to clear instances of this class!</em>. If you must use this class, keep in, + * mind that unlike {@link ViewTarget} it is not safe to load into new instances of this class, + * repeatedly if every instance updates the same underlying {@link View} or caller. If you need to, + * load into the same {@link View} or caller repeatedly using this class, always retain a reference, + * to the previous instance and either call {@link com.bumptech.glide.RequestManager#clear(Target)}, + * on the old instance before starting a new load or you must re-use the old instance for the new, + * load. Glide's {@link com.bumptech.glide.RequestBuilder#into(Target)} method returns the, + * {@link Target} instance you provided to make retaining a reference to the {@link Target} as easy, + * as possible. That said, you must wait until you're completely finished with the resource before, + * calling {@link com.bumptech.glide.RequestManager#clear(Target)} and you should always null out, + * references to any loaded resources in {@link Target#onLoadCleared(Drawable)}., + *, + * <p>Always try to provide a size when using this class. Use, + * {@link SimpleTarget#SimpleTarget(int, int)} whenever possible with values that are <em>not</em>, + * {@link Target#SIZE_ORIGINAL}. Using {@link Target#SIZE_ORIGINAL} is unsafe if you're loading, + * large images or are running your application on older or memory constrained devices because it, + * can cause Glide to load very large images into memory. In some cases those images may throw, + * {@link OutOfMemoryError} and in others they may exceed the texture limit for the device, which, + * will prevent them from being rendered. Providing a valid size allows Glide to downsample large, + * images, which can avoid issues with texture size or memory limitations. You don't have to worry, + * about providing a size in most cases if you use {@link ViewTarget} so prefer {@link ViewTarget}, + * over this class whenver possible., + *, + * @see <a href="http://bumptech.github.io/glide/doc/targets.html">Glide's Target docs page</a>, + *]