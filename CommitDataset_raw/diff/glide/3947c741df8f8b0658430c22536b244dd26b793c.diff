[+++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, +    @Test, +    public void testDelegatesIsPausedToRequestTracker() {, +        when(requestTracker.isPaused()).thenReturn(true);, +        assertTrue(manager.isPaused());, +        when(requestTracker.isPaused()).thenReturn(false);, +        assertFalse(manager.isPaused());, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, +    @Test, +    public void testDelegatesIsPausedToRequestTracker() {, +        when(requestTracker.isPaused()).thenReturn(true);, +        assertTrue(manager.isPaused());, +        when(requestTracker.isPaused()).thenReturn(false);, +        assertFalse(manager.isPaused());, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java, +    private ActivityFragmentLifecycle lifecycle;, +        lifecycle = new ActivityFragmentLifecycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, +    @Test, +    public void testDelegatesIsPausedToRequestTracker() {, +        when(requestTracker.isPaused()).thenReturn(true);, +        assertTrue(manager.isPaused());, +        when(requestTracker.isPaused()).thenReturn(false);, +        assertFalse(manager.isPaused());, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java, +    private ActivityFragmentLifecycle lifecycle;, +        lifecycle = new ActivityFragmentLifecycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java, +        public ActivityFragmentLifecycle getHarnessLifecycle();, +        public ActivityFragmentLifecycle getFragmentLifecycle();, +        private final ActivityFragmentLifecycle lifecycle = mock(ActivityFragmentLifecycle.class);, +        public ActivityFragmentLifecycle getHarnessLifecycle() {, +        public ActivityFragmentLifecycle getFragmentLifecycle() {, +        private final ActivityFragmentLifecycle lifecycle = mock(ActivityFragmentLifecycle.class);, +        public ActivityFragmentLifecycle getHarnessLifecycle() {, +        public ActivityFragmentLifecycle getFragmentLifecycle() {, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, +    @Test, +    public void testDelegatesIsPausedToRequestTracker() {, +        when(requestTracker.isPaused()).thenReturn(true);, +        assertTrue(manager.isPaused());, +        when(requestTracker.isPaused()).thenReturn(false);, +        assertFalse(manager.isPaused());, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java, +    private ActivityFragmentLifecycle lifecycle;, +        lifecycle = new ActivityFragmentLifecycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java, +        public ActivityFragmentLifecycle getHarnessLifecycle();, +        public ActivityFragmentLifecycle getFragmentLifecycle();, +        private final ActivityFragmentLifecycle lifecycle = mock(ActivityFragmentLifecycle.class);, +        public ActivityFragmentLifecycle getHarnessLifecycle() {, +        public ActivityFragmentLifecycle getFragmentLifecycle() {, +        private final ActivityFragmentLifecycle lifecycle = mock(ActivityFragmentLifecycle.class);, +        public ActivityFragmentLifecycle getHarnessLifecycle() {, +        public ActivityFragmentLifecycle getFragmentLifecycle() {, +++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java, +import static org.junit.Assert.assertFalse;, +        // Clear out static state., +        RequestManagerRetriever.reset();, +, +    public void testApplicationRequestManagerIsNotPausedWhenRetrieved() {, +        RequestManager manager = RequestManagerRetriever.get(Robolectric.application);, +        assertFalse(manager.isPaused());, +    }, +, +    @Test, +    public void testApplicationRequestManagerIsNotReResumedAfterFirstRetrieval() {, +        RequestManager manager = RequestManagerRetriever.get(Robolectric.application);, +        manager.pauseRequests();, +        manager = RequestManagerRetriever.get(Robolectric.application);, +        assertTrue(manager.isPaused());, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import static junit.framework.Assert.assertFalse;, +import static junit.framework.Assert.assertTrue;, +, +    @Test, +    public void testDelegatesIsPausedToRequestTracker() {, +        when(requestTracker.isPaused()).thenReturn(true);, +        assertTrue(manager.isPaused());, +        when(requestTracker.isPaused()).thenReturn(false);, +        assertFalse(manager.isPaused());]