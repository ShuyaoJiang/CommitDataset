[+++ b/library/libs/disklrucache-2.0.2.jar, +++ b/library/libs/disklrucache-2.0.2.jar, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.DiskLruCacheWrapper;, +import java.io.IOException;, +import java.io.OutputStream;, +        DiskCache result;, +            try {, +                result = DiskLruCacheWrapper.get(diskCacheDir, options.maxDiskCacheSize);, +            } catch (IOException e) {, +                e.printStackTrace();, +                result = new DiskCacheAdapter();, +            }, +            final String stringKey = String.valueOf(key);, +                result = diskCache.get(stringKey, new DiskCache.Reader() {, +                    @Override, +                    public Bitmap read(InputStream is1, InputStream is2) {, +                        Bitmap result = resizer.loadAsIs(is1, is2);, +                        if (result == null) {, +                            diskCache.delete(stringKey);, +                        }, +                        return result;, +                    }, +                });, +                    diskCache.put(String.valueOf(key), new DiskCache.Writer() {, +                        @Override, +                        public void write(OutputStream os) {, +                            result.compress(diskCacheFormat, 100, os);, +                        }, +                    });, +++ b/library/libs/disklrucache-2.0.2.jar, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.DiskLruCacheWrapper;, +import java.io.IOException;, +import java.io.OutputStream;, +        DiskCache result;, +            try {, +                result = DiskLruCacheWrapper.get(diskCacheDir, options.maxDiskCacheSize);, +            } catch (IOException e) {, +                e.printStackTrace();, +                result = new DiskCacheAdapter();, +            }, +            final String stringKey = String.valueOf(key);, +                result = diskCache.get(stringKey, new DiskCache.Reader() {, +                    @Override, +                    public Bitmap read(InputStream is1, InputStream is2) {, +                        Bitmap result = resizer.loadAsIs(is1, is2);, +                        if (result == null) {, +                            diskCache.delete(stringKey);, +                        }, +                        return result;, +                    }, +                });, +                    diskCache.put(String.valueOf(key), new DiskCache.Writer() {, +                        @Override, +                        public void write(OutputStream os) {, +                            result.compress(diskCacheFormat, 100, os);, +                        }, +                    });, +++ b/library/src/com/bumptech/photos/resize/cache/DiskCache.java, +import java.io.InputStream;, +import java.io.OutputStream;, +, +    public interface Writer {, +        public void write(OutputStream os);, +    }, +, +    public interface Reader {, +        public Bitmap read(InputStream is1, InputStream is2);, +    }, +, +    public Bitmap get(String key, Reader reader);, +    public void put(String key, Writer writer);, +++ b/library/libs/disklrucache-2.0.2.jar, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.resize.cache.DiskLruCacheWrapper;, +import java.io.IOException;, +import java.io.OutputStream;, +        DiskCache result;, +            try {, +                result = DiskLruCacheWrapper.get(diskCacheDir, options.maxDiskCacheSize);, +            } catch (IOException e) {, +                e.printStackTrace();, +                result = new DiskCacheAdapter();, +            }, +            final String stringKey = String.valueOf(key);, +                result = diskCache.get(stringKey, new DiskCache.Reader() {, +                    @Override, +                    public Bitmap read(InputStream is1, InputStream is2) {, +                        Bitmap result = resizer.loadAsIs(is1, is2);, +                        if (result == null) {, +                            diskCache.delete(stringKey);, +                        }, +                        return result;, +                    }, +                });, +                    diskCache.put(String.valueOf(key), new DiskCache.Writer() {, +                        @Override, +                        public void write(OutputStream os) {, +                            result.compress(diskCacheFormat, 100, os);]