[+++ b/library/src/com/bumptech/glide/Glide.java, +     * with the ModelLoader being used to load it. Any factory replaced by the given factory will have its, +     * {@link ModelLoaderFactory#teardown()}} method called., +     * Removes any {@link ModelLoaderFactory} registered for the given model and resource classes if one exists. If a, +     * {@link ModelLoaderFactory} is removed, its {@link ModelLoaderFactory#teardown()}} method will be called., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    public <T, Y> void unregister(Class<T> modelClass, Class<Y> resourceClass) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.unregister(modelClass, resourceClass);, +        if (removed != null) {, +            removed.teardown();, +        }, +    }, +, +    /**, +++ b/library/src/com/bumptech/glide/Glide.java, +     * with the ModelLoader being used to load it. Any factory replaced by the given factory will have its, +     * {@link ModelLoaderFactory#teardown()}} method called., +     * Removes any {@link ModelLoaderFactory} registered for the given model and resource classes if one exists. If a, +     * {@link ModelLoaderFactory} is removed, its {@link ModelLoaderFactory#teardown()}} method will be called., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    public <T, Y> void unregister(Class<T> modelClass, Class<Y> resourceClass) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.unregister(modelClass, resourceClass);, +        if (removed != null) {, +            removed.teardown();, +        }, +    }, +, +    /**, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/GenericLoaderFactory.java, +    /**, +     * Removes and returns the registered {@link ModelLoaderFactory} for the given model and resource classes. Returns, +     * null if no such factory is registered. Clears all cached model loaders., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param <T> The type of the model the class., +     * @param <Y> The type of the resource class., +     */, +    @SuppressWarnings("unchecked"), +    public <T, Y> ModelLoaderFactory<T, Y> unregister(Class<T> modelClass, Class<Y> resourceClass) {, +        cachedModelLoaders.clear();, +, +        ModelLoaderFactory<T, Y> result = null;, +        Map<Class, ModelLoaderFactory> resourceToFactories = modelClassToResourceFactories.get(modelClass);, +        if (resourceToFactories != null) {, +            result = resourceToFactories.remove(resourceClass);, +        }, +        return result;, +    }, +, +    /**, +     * Registers the given {@link ModelLoaderFactory} for the given model and resource classes and returns the previous, +     * factory registered for the given model and resource classes or null if no such factory existed. Clears all cached, +     * model loaders., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param factory The factory to register., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +        cachedModelLoaders.clear();, +, +    /**, +     * Returns a {@link ModelLoader} for the given model and resource classes by either returning a cached, +     * {@link ModelLoader} or building a new a new {@link ModelLoader} using registered {@link ModelLoaderFactory}s., +     * Returns null if no {@link ModelLoaderFactory} is registered for the given classes., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +++ b/library/src/com/bumptech/glide/Glide.java, +     * with the ModelLoader being used to load it. Any factory replaced by the given factory will have its, +     * {@link ModelLoaderFactory#teardown()}} method called., +     * Removes any {@link ModelLoaderFactory} registered for the given model and resource classes if one exists. If a, +     * {@link ModelLoaderFactory} is removed, its {@link ModelLoaderFactory#teardown()}} method will be called., +     *, +     * @param modelClass The model class., +     * @param resourceClass The resource class., +     * @param <T> The type of the model., +     * @param <Y> The type of the resource., +     */, +    public <T, Y> void unregister(Class<T> modelClass, Class<Y> resourceClass) {, +        ModelLoaderFactory<T, Y> removed = loaderFactory.unregister(modelClass, resourceClass);, +        if (removed != null) {, +            removed.teardown();, +        }, +    }]