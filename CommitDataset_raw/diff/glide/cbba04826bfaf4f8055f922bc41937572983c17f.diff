[+++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, +    public GifTypeRequest<A> asGif() {, +        return new GifTypeRequest<A>(context, model, streamModelLoader, glide);, +    }, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +, +    public GifTypeRequest<A> asGif() {, +        return new GifTypeRequest<A>(context, model, streamModelLoader, glide);, +    }, +++ b/library/src/main/java/com/bumptech/glide/GifRequestBuilder.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.graphics.drawable.Drawable;, +import android.view.animation.Animation;, +import com.bumptech.glide.load.ResourceDecoder;, +import com.bumptech.glide.load.ResourceEncoder;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.resource.bitmap.CenterCrop;, +import com.bumptech.glide.load.resource.bitmap.FitCenter;, +import com.bumptech.glide.load.resource.gif.GifData;, +import com.bumptech.glide.load.resource.gif.GifDataTransformation;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.provider.LoadProvider;, +import com.bumptech.glide.request.RequestListener;, +, +import java.io.InputStream;, +, +public class GifRequestBuilder<ModelType, TranscodeType>, +        extends GenericRequestBuilder<ModelType, InputStream, GifData, TranscodeType> {, +    private Glide glide;, +, +    GifRequestBuilder(Context context, ModelType model,, +            LoadProvider<ModelType, InputStream, GifData, TranscodeType> loadProvider,, +            Class<TranscodeType> transcodeClass, Glide glide) {, +        super(context, model, loadProvider, transcodeClass, glide);, +        this.glide = glide;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> thumbnail(, +            GenericRequestBuilder<ModelType, InputStream, GifData, TranscodeType> thumbnailRequest) {, +        super.thumbnail(thumbnailRequest);, +        return this;, +    }, +, +    public GifRequestBuilder<ModelType, TranscodeType> thumbnail(, +            GifRequestBuilder<ModelType, TranscodeType> thumbnailRequest) {, +        super.thumbnail(thumbnailRequest);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> thumbnail(float sizeMultiplier) {, +        super.thumbnail(sizeMultiplier);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> sizeMultiplier(float sizeMultiplier) {, +        super.sizeMultiplier(sizeMultiplier);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> decoder(, +            ResourceDecoder<InputStream, GifData> decoder) {, +        super.decoder(decoder);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> cacheDecoder(, +            ResourceDecoder<InputStream, GifData> cacheDecoder) {, +        super.cacheDecoder(cacheDecoder);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> encoder(, +            ResourceEncoder<GifData> encoder) {, +        super.encoder(encoder);, +        return this;, +    }, +, +    @Override, +    public GifRequestBuilder<ModelType, TranscodeType> priority(Priority priority) {, +        super.priority(priority);, +        return this;, +    }, +, +    public GifRequestBuilder<ModelType, TranscodeType> fitCenter() {, +        return transformBitmap(new FitCenter(glide.getBitmapPool()));, +    }, +, +    public GifRequestBuilder<ModelType, TranscodeType> centerCrop() {, +        return transformBitmap(new CenterCrop(glide.getBitmapPool()));, +    }]