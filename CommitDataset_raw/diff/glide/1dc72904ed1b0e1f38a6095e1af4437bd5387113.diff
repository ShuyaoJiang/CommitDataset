[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +      return Math.min(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +      return widthPercentage < heightPercentage ? sourceWidth : sourceHeight;, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +      float widthPercentage = requestedWidth / (float) sourceWidth;, +      float heightPercentage = requestedHeight / (float) sourceHeight;, +      int targetDimen = widthPercentage < heightPercentage ? requestedWidth : requestedHeight;, +      return targetDimen * sampleSize;, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +      return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        return sourceHeight;, +      } else {, +        return sourceWidth;, +      }, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +, +      final int targetDimen;, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        targetDimen = requestedHeight;, +      } else {, +        targetDimen = requestedWidth;, +      }, +      return targetDimen * sampleSize;, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +      return Math.max(sourceHeight / requestedHeight, sourceWidth / requestedWidth);, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return 0;, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +      return 0;, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +      return 1;, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return 0;, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +      return 0;, +   * Determine the amount of downsampling to use for a load given the dimensions of the image, +   * to be downsampled and the dimensions of the view/target the image will be displayed in., +   * @param sourceWidth   The width in pixels of the image to be downsampled., +   * @param sourceHeight  The height in pixels of the image to be downsampled., +   * @param requestedWidth  The width in pixels of the view/target the image will be displayed in., +   * @param requestedHeight The height in pixels of the view/target the image will be displayed in., +   * @return An integer to pass in to {@link android.graphics.BitmapFactory#decodeStream(, +   * java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory.Options)}., +   * @see android.graphics.BitmapFactory.Options#inSampleSize, +   */, +  public abstract int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +      int requestedHeight);, +, +  /**, +   * Returns an integer value for {@link android.graphics.BitmapFactory.Options#inDensity} that can, +   * be used, along with {@link #getTargetDensity(int, int, int, int, int)} to scale the image, +   * natively, or {@code 0} to additional avoid scaling., +  public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +      int requestedHeight) {, +    return 0;, +  }, +, +  /**, +   * Returns an integer value for {@link android.graphics.BitmapFactory.Options#inTargetDensity}, +   * that can be used, along with {@link #getDensity(int, int, int, int)}} to scale the image, +   * natively, or {@code 0} to additional avoid scaling., +   *]