[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private int overrideHeight = -1;, +    private int overrideWidth = -1;, +     * Overrides the {@link Target}'s width and height with the given values. This is useful almost exclusively for, +     * thumbnails, and should only be used when you both need a very specific sized image and when it is impossible or, +     * impractical to return that size from {@link Target#getSize(Target.SizeReadyCallback)}., +     *, +     * @param width The width to use to load the resource., +     * @param height The height to use to load the resource., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> override(int width, int height) {, +        if (width <= 0) {, +            throw new IllegalArgumentException("Width must be >= 0");, +        }, +        if (height <= 0) {, +            throw new IllegalArgumentException("Height must be >= 0");, +        }, +        this.overrideWidth = width;, +        this.overrideHeight = height;, +, +        return this;, +    }, +, +    /**, +                animationFactory,, +                overrideWidth,, +                overrideHeight);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private int overrideHeight = -1;, +    private int overrideWidth = -1;, +     * Overrides the {@link Target}'s width and height with the given values. This is useful almost exclusively for, +     * thumbnails, and should only be used when you both need a very specific sized image and when it is impossible or, +     * impractical to return that size from {@link Target#getSize(Target.SizeReadyCallback)}., +     *, +     * @param width The width to use to load the resource., +     * @param height The height to use to load the resource., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> override(int width, int height) {, +        if (width <= 0) {, +            throw new IllegalArgumentException("Width must be >= 0");, +        }, +        if (height <= 0) {, +            throw new IllegalArgumentException("Height must be >= 0");, +        }, +        this.overrideWidth = width;, +        this.overrideHeight = height;, +, +        return this;, +    }, +, +    /**, +                animationFactory,, +                overrideWidth,, +                overrideHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    private final KeyFactory keyFactory;, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private int overrideHeight = -1;, +    private int overrideWidth = -1;, +     * Overrides the {@link Target}'s width and height with the given values. This is useful almost exclusively for, +     * thumbnails, and should only be used when you both need a very specific sized image and when it is impossible or, +     * impractical to return that size from {@link Target#getSize(Target.SizeReadyCallback)}., +     *, +     * @param width The width to use to load the resource., +     * @param height The height to use to load the resource., +     * @return This RequestBuilder., +     */, +    public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> override(int width, int height) {, +        if (width <= 0) {, +            throw new IllegalArgumentException("Width must be >= 0");, +        }, +        if (height <= 0) {, +            throw new IllegalArgumentException("Height must be >= 0");, +        }, +        this.overrideWidth = width;, +        this.overrideHeight = height;, +, +        return this;, +    }, +, +    /**, +                animationFactory,, +                overrideWidth,, +                overrideHeight);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +    private final KeyFactory keyFactory;, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +    private final int overrideWidth;, +    private final int overrideHeight;, +            GlideAnimationFactory<R> animationFactory,, +            int overrideWidth,, +            int overrideHeight) {, +        this.overrideWidth = overrideWidth;, +        this.overrideHeight = overrideHeight;, +        if (overrideWidth > 0 && overrideHeight > 0) {, +            onSizeReady(overrideWidth, overrideHeight);, +        } else {, +        }]