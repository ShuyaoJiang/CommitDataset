[+++ b/library/src/com/bumptech/glide/Glide.java, +     * models. Typically the {@link ModelRequest#using(StreamModelLoader)} or, +     * {@link ModelRequest#using(FileDescriptorModelLoader)} syntax is preferred because it directly links the model, +     * with the ModelLoader being used to load it., +     * @see ModelRequest#using(FileDescriptorModelLoader), +     * @see ModelRequest#using(StreamModelLoader), +     * Begin a load with Glide by passing in a context., +     *, +     * @param context Any context, will not be retained., +     * @return A model request to pass in the object representing the image to be loaded., +     */, +    public static ModelRequest with(Context context) {, +        return new ModelRequest(context);, +    }, +, +    /**, +     * A {@link Request} builder that returns a request for a model that represents an image., +     */, +    public static class ModelRequest {, +        private final Context context;, +, +        private ModelRequest(Context context) {, +            this.context = context;, +        }, +, +        /**, +         * Set the {@link ModelLoader} to use for for a new load where the model loader translates from a model to an, +         * {@link InputStream} resource for loading images., +         *, +         * @param modelLoader The model loader to use., +         * @param <T> The type of the model., +         * @return A new {@link ImageModelRequest}., +         */, +        public <T> ImageModelRequest<T> using(final StreamModelLoader<T> modelLoader) {, +            return new ImageModelRequest<T>(context, modelLoaderToFactory(modelLoader));, +        }, +, +        /**, +         * Set the {@link ModelLoader} to use for a new load where the model loader translates from a model to an, +         * {@link ParcelFileDescriptor} resource for loading video thumbnails., +         *, +         * @param modelLoader The model loader to use., +         * @param <T> The type of the model., +         * @return A new {@link VideoModelRequest}., +         */, +        public <T> VideoModelRequest<T> using(final FileDescriptorModelLoader<T> modelLoader) {, +            return new VideoModelRequest<T>(context, modelLoaderToFactory(modelLoader));, +, +        }, +, +        /**, +         * Use the {@link ModelLoaderFactory} currently registered for {@link String} to load the image represented by the, +         * given {@link String}. Defaults to {@link StreamStringLoader.Factory} and {@link StreamStringLoader} to load the given model., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param string The string representing the image. Must be either a path, or a uri handled by {@link StreamUriLoader}, +         * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<String> load(String string) {, +            return new Request<String>(context, string);, +        }, +, +        /**, +         * Use the {@link ModelLoaderFactory} currently registered for {@link Uri} to load the image at the given uri., +         * Defaults to {@link StreamUriLoader.Factory} and {@link StreamUriLoader}., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param uri The uri representing the image. Must be a uri handled by {@link StreamUriLoader}, +         * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<Uri> load(Uri uri) {, +            return new Request<Uri>(context, uri);, +        }, +, +        /**, +         * Use the {@link ModelLoaderFactory} currently registered for {@link URL} to load the image represented by the, +         * given {@link URL}. Defaults to {@link VolleyUrlLoader.Factory} and {@link VolleyUrlLoader} to load the given, +         * model., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param url The URL representing the image., +         * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<URL> load(URL url) {, +            return new Request<URL>(context, url);, +        }, +, +        /**, +         * Use the {@link ModelLoaderFactory} currently registered for {@link File} to load the image represented by the, +         * given {@link File}. Defaults to {@link StreamFileLoader.Factory} and {@link StreamFileLoader} to load the given model., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param file The File containing the image, +         * @return A {@link GenericRequest} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<File> load(File file) {]