[+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +import android.os.SystemClock;, +        long start = SystemClock.currentThreadTimeMillis();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "loaded from disk cache in " + (SystemClock.currentThreadTimeMillis() - start));, +        }, +                    Log.d(TAG, "Failed to decode image from cache or not present in cache");, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +import android.os.SystemClock;, +        long start = SystemClock.currentThreadTimeMillis();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "loaded from disk cache in " + (SystemClock.currentThreadTimeMillis() - start));, +        }, +                    Log.d(TAG, "Failed to decode image from cache or not present in cache");, +++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceResourceRunner.java, +import android.os.SystemClock;, +import android.util.Log;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    private static final String TAG = "SourceRunner";, +            long start = SystemClock.currentThreadTimeMillis();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "Decoded from source in " + (SystemClock.currentThreadTimeMillis() - start));, +                start = SystemClock.currentThreadTimeMillis();, +            }, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "transformed in " + (SystemClock.currentThreadTimeMillis() - start));, +            }, +                start = SystemClock.currentThreadTimeMillis();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.d(TAG, "transcoded in " + (SystemClock.currentThreadTimeMillis() - start));, +                }, +        long start = SystemClock.currentThreadTimeMillis();, +        boolean success = encoder.encode(result, os);, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "wrote to disk cache in " + (SystemClock.currentThreadTimeMillis() - start));, +        }, +        return success;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +import android.os.SystemClock;, +        long start = SystemClock.currentThreadTimeMillis();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "loaded from disk cache in " + (SystemClock.currentThreadTimeMillis() - start));, +        }, +                    Log.d(TAG, "Failed to decode image from cache or not present in cache");, +++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceResourceRunner.java, +import android.os.SystemClock;, +import android.util.Log;, +import com.bumptech.glide.load.data.DataFetcher;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    private static final String TAG = "SourceRunner";, +            long start = SystemClock.currentThreadTimeMillis();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "Decoded from source in " + (SystemClock.currentThreadTimeMillis() - start));, +                start = SystemClock.currentThreadTimeMillis();, +            }, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "transformed in " + (SystemClock.currentThreadTimeMillis() - start));, +            }, +                start = SystemClock.currentThreadTimeMillis();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.d(TAG, "transcoded in " + (SystemClock.currentThreadTimeMillis() - start));, +                }, +        long start = SystemClock.currentThreadTimeMillis();, +        boolean success = encoder.encode(result, os);, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "wrote to disk cache in " + (SystemClock.currentThreadTimeMillis() - start));, +        }, +        return success;, +++ b/library/src/test/java/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class)]