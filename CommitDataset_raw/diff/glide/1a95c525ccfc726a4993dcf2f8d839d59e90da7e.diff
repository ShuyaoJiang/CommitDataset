[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +    stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +    stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  /**, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * and retrieved as needed., +   *, +   * @param byteArrayPool The pool to use., +   * @return This builder., +   */, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +    stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  /**, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * and retrieved as needed., +   *, +   * @param byteArrayPool The pool to use., +   * @return This builder., +   */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  // PMD is wrong here, this File must be an instance variable because it may be used across, +  // multiple calls to startNext., +  @SuppressWarnings("PMD.SingularField"), +  private File cacheFile;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +    stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  /**, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * and retrieved as needed., +   *, +   * @param byteArrayPool The pool to use., +   * @return This builder., +   */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  // PMD is wrong here, this File must be an instance variable because it may be used across, +  // multiple calls to startNext., +  @SuppressWarnings("PMD.SingularField"), +  private File cacheFile;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java, +  // PMD is wrong here, this File must be an instance variable because it may be used across, +  // multiple calls to startNext., +  @SuppressWarnings("PMD.SingularField"), +  private File cacheFile;, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java, +    when(byteArrayPool.get(anyInt())), +        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +    stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +  /**, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * and retrieved as needed., +   *, +   * @param byteArrayPool The pool to use., +   * @return This builder., +   */, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java, +  // PMD is wrong here, this File must be an instance variable because it may be used across, +  // multiple calls to startNext., +  @SuppressWarnings("PMD.SingularField"), +  private File cacheFile;]