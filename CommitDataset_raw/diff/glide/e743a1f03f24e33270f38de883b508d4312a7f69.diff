[+++ b/library/src/main/java/com/bumptech/glide/Resource.java, +import com.bumptech.glide.load.Key;, +    private ResourceListener listener;, +    private Key key;, +    private boolean isCacheable;, +, +    public interface ResourceListener {, +        public void onResourceReleased(Key key, Resource resource);, +    }, +    public void setResourceListener(Key key, ResourceListener listener) {, +        this.key = key;, +        this.listener = listener;, +    }, +, +    public void setCacheable(boolean isCacheable) {, +        this.isCacheable = isCacheable;, +    }, +, +    public boolean isCacheable() {, +        return isCacheable;, +    }, +, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +            listener.onResourceReleased(key, this);, +++ b/library/src/main/java/com/bumptech/glide/Resource.java, +import com.bumptech.glide.load.Key;, +    private ResourceListener listener;, +    private Key key;, +    private boolean isCacheable;, +, +    public interface ResourceListener {, +        public void onResourceReleased(Key key, Resource resource);, +    }, +    public void setResourceListener(Key key, ResourceListener listener) {, +        this.key = key;, +        this.listener = listener;, +    }, +, +    public void setCacheable(boolean isCacheable) {, +        this.isCacheable = isCacheable;, +    }, +, +    public boolean isCacheable() {, +        return isCacheable;, +    }, +, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +            listener.onResourceReleased(key, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    public DefaultResourceRunnerFactory(DiskCache diskCache, Handler mainHandler,, +        EngineJob engineJob = new EngineJob(key, mainHandler, isMemoryCacheable, listener);, +++ b/library/src/main/java/com/bumptech/glide/Resource.java, +import com.bumptech.glide.load.Key;, +    private ResourceListener listener;, +    private Key key;, +    private boolean isCacheable;, +, +    public interface ResourceListener {, +        public void onResourceReleased(Key key, Resource resource);, +    }, +    public void setResourceListener(Key key, ResourceListener listener) {, +        this.key = key;, +        this.listener = listener;, +    }, +, +    public void setCacheable(boolean isCacheable) {, +        this.isCacheable = isCacheable;, +    }, +, +    public boolean isCacheable() {, +        return isCacheable;, +    }, +, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +        if (!Looper.getMainLooper().equals(Looper.myLooper())) {, +            listener.onResourceReleased(key, this);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DefaultResourceRunnerFactory.java, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +    public DefaultResourceRunnerFactory(DiskCache diskCache, Handler mainHandler,, +        EngineJob engineJob = new EngineJob(key, mainHandler, isMemoryCacheable, listener);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.os.MessageQueue;, +import java.lang.ref.ReferenceQueue;, +import java.lang.ref.WeakReference;, +public class Engine implements EngineJobListener, MemoryCache.ResourceRemovedListener, Resource.ResourceListener {, +    private final Map<Key, WeakReference<Resource>> activeResources;, +    private final ReferenceQueue<Resource> resourceReferenceQueue;, +        this(null, memoryCache, diskCache, resizeService, diskCacheService, null, null, null);, +            ExecutorService diskCacheService, Map<Key, ResourceRunner> runners, KeyFactory keyFactory,, +            Map<Key, WeakReference<Resource>> activeResources) {, +        if (activeResources == null) {, +            activeResources = new HashMap<Key, WeakReference<Resource>>();, +        }, +        this.activeResources = activeResources;, +]