[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java, +    public void testFitCenterHandlesBitmapsWithNullConfigs() {, +      Bitmap toFit = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toFit).setConfig(null);, +      Bitmap transformed = TransformationUtils.fitCenter(toFit, mock(BitmapPool.class), 50, 50);, +      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());, +    }, +, +    @Test, +    public void testCenterCropHandlesBitmapsWithNullConfigs() {, +      Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toTransform).setConfig(null);, +, +      Bitmap transformed = TransformationUtils.centerCrop(null /*recycled*/, toTransform, 50, 50);, +, +      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());, +    }, +, +    @Test, +    public void testRotateImageExifHandlesBitmapsWithNullConfigs() {, +      Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toRotate).setConfig(null);, +      BitmapPool bitmapPool = mock(BitmapPool.class);, +      Bitmap rotated = TransformationUtils.rotateImageExif(toRotate, bitmapPool,, +          ExifInterface.ORIENTATION_ROTATE_180);, +      assertEquals(Bitmap.Config.ARGB_8888, rotated.getConfig());, +    }, +, +    @Test, +        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, +          // Robolectric doesn't match the framework behavior with null configs, so we have to do, +          // so here., +          if (config == null) {, +            throw new NullPointerException("config must not be null");, +          }, +          return ShadowBitmap.createBitmap(width, height, config);, +        }, +, +        @Implementation, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java, +    public void testFitCenterHandlesBitmapsWithNullConfigs() {, +      Bitmap toFit = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toFit).setConfig(null);, +      Bitmap transformed = TransformationUtils.fitCenter(toFit, mock(BitmapPool.class), 50, 50);, +      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());, +    }, +, +    @Test, +    public void testCenterCropHandlesBitmapsWithNullConfigs() {, +      Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toTransform).setConfig(null);, +, +      Bitmap transformed = TransformationUtils.centerCrop(null /*recycled*/, toTransform, 50, 50);, +, +      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());, +    }, +, +    @Test, +    public void testRotateImageExifHandlesBitmapsWithNullConfigs() {, +      Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);, +      Robolectric.shadowOf(toRotate).setConfig(null);, +      BitmapPool bitmapPool = mock(BitmapPool.class);, +      Bitmap rotated = TransformationUtils.rotateImageExif(toRotate, bitmapPool,, +          ExifInterface.ORIENTATION_ROTATE_180);, +      assertEquals(Bitmap.Config.ARGB_8888, rotated.getConfig());, +    }, +, +    @Test, +        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {, +          // Robolectric doesn't match the framework behavior with null configs, so we have to do, +          // so here., +          if (config == null) {, +            throw new NullPointerException("config must not be null");, +          }, +          return ShadowBitmap.createBitmap(width, height, config);, +        }, +, +        @Implementation, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java, +            result = Bitmap.createBitmap(width, height, getSafeConfig(toCrop));, +        Bitmap.Config config = getSafeConfig(toFit);, +        Bitmap.Config config = getSafeConfig(toOrient);, +        Bitmap result = pool.get(newWidth, newHeight, config);, +            result = Bitmap.createBitmap(newWidth, newHeight, config);, +    private static Bitmap.Config getSafeConfig(Bitmap bitmap) {, +      return bitmap.getConfig() != null ? bitmap.getConfig() : Bitmap.Config.ARGB_8888;, +    }, +]