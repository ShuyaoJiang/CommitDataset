[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.util.Log;, +import com.bumptech.glide.loader.model.VolleyUrlLoader;, +    private GenericLoaderFactory loaderFactory = new GenericLoaderFactory();, +    protected Glide() {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +    }, +, +     * Use the given factory to build a {@link ModelLoader} for models of the given class., +     *     Note - If a factory already exists for the given class, it will be replaced. If that factory is not being, +     *     used for any other model class, {@link com.bumptech.glide.loader.model.ModelLoaderFactory#teardown()}, +     *     will be called., +     * </p>, +     *, +     * @param clazz The class, +     * @param factory The factory to use, +     * @param <T> The type of the model, +     */, +    public <T> void register(Class<T> clazz, ModelLoaderFactory<T> factory) {, +        ModelLoaderFactory<T> removed = loaderFactory.register(clazz, factory);, +        if (removed != null) {, +            removed.teardown();, +        }, +    }, +, +    /**, +     * Build a {@link ModelLoader} for the given model class using a registered factory., +     *, +     * @param clazz The class to get a {@link ModelLoader} for, +     * @param context Any context, +     * @param <T> The type of the model, +     * @return A new {@link ModelLoader} for the given model class, +     * @throws IllegalArgumentException if no factory exists for the given class, +     */, +    public <T> ModelLoader<T> buildModelLoader(Class<T> clazz, Context context) {, +        return loaderFactory.buildModelLoader(clazz, context);, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T> ModelLoaderFactory<T> getFactory(T model) {, +        return loaderFactory.getFactory((Class<T>) model.getClass());, +    }, +, +    /**, +     * Set the {@link ModelLoaderFactory} and therefore the model type to use for a new load., +     *, +     * <p>, +     *     Note - You can use this method to set a {@link ModelLoaderFactory} for models that don't have a default, +     *     {@link ModelLoader}/{@link ModelLoaderFactory}. You can also optionally use this method to override the, +     *     default {@link ModelLoader} for a model for which there is a default. If you would like to permanently, +     *     use this factory for all model loads of the this factory's type, see, +     *     {@link #register(Class, com.bumptech.glide.loader.model.ModelLoaderFactory)}., +     *     supply a custom {@link ModelLoaderFactory} here to do so, even if a default exists. Fetching a smaller image, +     *     download an image using the width and the height of the target, consider passing in a factory for a subclass, +     *     of {@link com.bumptech.glide.loader.model.UriLoader}, +     *, +     * @param factory The {@link ModelLoaderFactory} to use to load an image from a given model, +     * @param <T> The type of the model to load using this factory, +    public static <T> ModelRequest<T> using(ModelLoaderFactory<T> factory) {, +        return new ModelRequest<T>(factory);, +     * Set the {@link ModelLoader} and therefore the model type to use for a new load., +     * @see #using(com.bumptech.glide.loader.model.ModelLoaderFactory), +     *, +     * @param modelLoader The model loader to use, +     * @param <T> The type of the model to load using this loader, +     * @return A {@link ModelRequest} to set the specific model to load, +     */, +    public static <T> ModelRequest<T> using(final ModelLoader<T> modelLoader) {, +        return new ModelRequest<T>(new ModelLoaderFactory<T>() {, +            @Override, +            public ModelLoader<T> build(Context context, GenericLoaderFactory factories) {, +                return modelLoader;, +            }, +, +, +            @Override @SuppressWarnings("unchecked"), +            public Class<? extends ModelLoader<T>> loaderClass() {, +                return (Class<ModelLoader<T>>) modelLoader.getClass();, +            }, +, +            @Override, +            public void teardown() { }, +        });, +    }, +, +    /**, +     * Use the {@link ModelLoaderFactory} currently registered for {@link String} to load the image represented by the, +     * given {@link String}. Defaults to {@link StringLoader.Factory} and {@link StringLoader} to load the given model., +     *, +     * @see #using(ModelLoaderFactory), +     * @see ModelRequest#load(String), +     * Use the {@link ModelLoaderFactory} currently registered for {@link Uri} to load the image at the given uri., +     * Defaults to {@link UriLoader.Factory} and {@link UriLoader}., +     * @see #using(ModelLoaderFactory)]