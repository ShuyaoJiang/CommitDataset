[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +  private DrawableCrossFadeTransition resourceTransition;, +  protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, +    return dataSource == DataSource.MEMORY_CACHE, +        ? NoTransition.<Drawable>get() : getResourceTransition();, +  private Transition<Drawable> getResourceTransition() {, +      if (resourceTransition == null) {, +        resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);, +      return resourceTransition;, +     * @param durationMillis The duration of the cross fade animation in milliseconds., +      return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +  private DrawableCrossFadeTransition resourceTransition;, +  protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, +    return dataSource == DataSource.MEMORY_CACHE, +        ? NoTransition.<Drawable>get() : getResourceTransition();, +  private Transition<Drawable> getResourceTransition() {, +      if (resourceTransition == null) {, +        resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);, +      return resourceTransition;, +     * @param durationMillis The duration of the cross fade animation in milliseconds., +      return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java, +import android.graphics.Color;, +import android.graphics.drawable.ColorDrawable;, +  public DrawableCrossFadeTransition(int duration,, +    if (previous == null) {, +      previous = new ColorDrawable(Color.TRANSPARENT);, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +  private DrawableCrossFadeTransition resourceTransition;, +  protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, +    return dataSource == DataSource.MEMORY_CACHE, +        ? NoTransition.<Drawable>get() : getResourceTransition();, +  private Transition<Drawable> getResourceTransition() {, +      if (resourceTransition == null) {, +        resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);, +      return resourceTransition;, +     * @param durationMillis The duration of the cross fade animation in milliseconds., +      return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java, +import android.graphics.Color;, +import android.graphics.drawable.ColorDrawable;, +  public DrawableCrossFadeTransition(int duration,, +    if (previous == null) {, +      previous = new ColorDrawable(Color.TRANSPARENT);, +    }, +++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java, +    factory = new DrawableCrossFadeFactory(100 /*duration*/, false /*isCrossFadeEnabled*/);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +  private DrawableCrossFadeTransition resourceTransition;, +  protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {, +    return dataSource == DataSource.MEMORY_CACHE, +        ? NoTransition.<Drawable>get() : getResourceTransition();, +  private Transition<Drawable> getResourceTransition() {, +      if (resourceTransition == null) {, +        resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);, +      return resourceTransition;, +     * @param durationMillis The duration of the cross fade animation in milliseconds., +      return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java, +import android.graphics.Color;, +import android.graphics.drawable.ColorDrawable;, +  public DrawableCrossFadeTransition(int duration,, +    if (previous == null) {, +      previous = new ColorDrawable(Color.TRANSPARENT);, +    }, +++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java, +    factory = new DrawableCrossFadeFactory(100 /*duration*/, false /*isCrossFadeEnabled*/);, +++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java, +  public void transition_withNonNullPreviousDrawable_setsTransitionDrawable() {, +  public void transition_withNullPreviousDrawable_setsTransitionDrawable() {, +    harness.animation.transition(harness.current, harness.adapter);, +, +    verify(harness.adapter).setDrawable(any(TransitionDrawable.class));, +  }, +, +  @Test, +  public void transition_withNoCurrentDrawable_returnsTrue() {, +    assertTrue(harness.animation.transition(harness.current, harness.adapter));, +  }, +, +  @Test, +  public void transition_withCurrentDrawable_returnsTrue() {, +        new DrawableCrossFadeTransition(duration, true /*isCrossFadeEnabled*/);]