[+++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import static org.hamcrest.Matchers.endsWith;, +    public void testHandlesRelativeRedirects() throws Exception {, +        String expected = "fakedata";, +        mockWebServer.enqueue(new MockResponse(), +            .setResponseCode(301), +            .setHeader("Location", "/redirect"));, +        mockWebServer.enqueue(new MockResponse(), +            .setResponseCode(200), +            .setBody(expected));, +        InputStream is = getFetcher().loadData(Priority.NORMAL);, +        assertThat(isToString(is), equalTo(expected));, +, +        mockWebServer.takeRequest();, +        RecordedRequest second = mockWebServer.takeRequest();, +        assertThat(second.getPath(), endsWith("/redirect"));, +    }, +, +    @Test, +    public void testThrowsIfRedirectLocationIsNotPresent() throws Exception {, +        } catch (IOException e) {, +            // Expected., +        }, +    }, +, +    @Test, +    public void testThrowsIfRedirectLocationIsPresentAndEmpty() throws Exception {, +        mockWebServer.enqueue(new MockResponse(), +                .setResponseCode(301).setHeader("Location", ""));, +, +        try {, +            getFetcher().loadData(Priority.NORMAL);, +            fail("Didn't get expected IOException");, +        } catch (IOException e) {, +            // Expected., +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import static org.hamcrest.Matchers.endsWith;, +    public void testHandlesRelativeRedirects() throws Exception {, +        String expected = "fakedata";, +        mockWebServer.enqueue(new MockResponse(), +            .setResponseCode(301), +            .setHeader("Location", "/redirect"));, +        mockWebServer.enqueue(new MockResponse(), +            .setResponseCode(200), +            .setBody(expected));, +        InputStream is = getFetcher().loadData(Priority.NORMAL);, +        assertThat(isToString(is), equalTo(expected));, +, +        mockWebServer.takeRequest();, +        RecordedRequest second = mockWebServer.takeRequest();, +        assertThat(second.getPath(), endsWith("/redirect"));, +    }, +, +    @Test, +    public void testThrowsIfRedirectLocationIsNotPresent() throws Exception {, +        } catch (IOException e) {, +            // Expected., +        }, +    }, +, +    @Test, +    public void testThrowsIfRedirectLocationIsPresentAndEmpty() throws Exception {, +        mockWebServer.enqueue(new MockResponse(), +                .setResponseCode(301).setHeader("Location", ""));, +, +        try {, +            getFetcher().loadData(Priority.NORMAL);, +            fail("Didn't get expected IOException");, +        } catch (IOException e) {, +            // Expected., +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +import android.text.TextUtils;, +            if (TextUtils.isEmpty(redirectUrlString)) {, +                throw new IOException("Received empty or null redirect url");, +            }, +            URL redirectUrl = new URL(url, redirectUrlString);]