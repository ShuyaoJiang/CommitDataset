[+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +  public static final DownsampleStrategy CENTER_INSIDE = new DownsampleStrategy() {, +   * Downsamples, maintaining the original aspect ratio , so that one of the image's dimensions is, +   * exactly equal to the requested size and the other dimension is greater than or equal to, +   * the requested size., +   */, +  public static final DownsampleStrategy CENTER_OUTSIDE = new DownsampleStrategy() {, +    @Override, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        return sourceHeight;, +      } else {, +        return sourceWidth;, +      }, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +, +      final int targetDimen;, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        targetDimen = requestedHeight;, +      } else {, +        targetDimen = requestedWidth;, +      }, +      return targetDimen * sampleSize;, +    }, +  };, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java, +  public static final DownsampleStrategy CENTER_INSIDE = new DownsampleStrategy() {, +   * Downsamples, maintaining the original aspect ratio , so that one of the image's dimensions is, +   * exactly equal to the requested size and the other dimension is greater than or equal to, +   * the requested size., +   */, +  public static final DownsampleStrategy CENTER_OUTSIDE = new DownsampleStrategy() {, +    @Override, +    public int getSampleSize(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      return AT_LEAST.getSampleSize(sourceWidth, sourceHeight, requestedWidth, requestedHeight);, +    }, +, +    @Override, +    public int getDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight) {, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        return sourceHeight;, +      } else {, +        return sourceWidth;, +      }, +    }, +, +    @Override, +    public int getTargetDensity(int sourceWidth, int sourceHeight, int requestedWidth,, +        int requestedHeight, int sampleSize) {, +, +      final int targetDimen;, +      if (sourceWidth * requestedHeight > sourceHeight * requestedHeight) {, +        targetDimen = requestedHeight;, +      } else {, +        targetDimen = requestedWidth;, +      }, +      return targetDimen * sampleSize;, +    }, +  };, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +    downsample(DownsampleStrategy.CENTER_OUTSIDE);, +    downsample(DownsampleStrategy.CENTER_OUTSIDE);, +    downsample(DownsampleStrategy.CENTER_INSIDE);, +    downsample(DownsampleStrategy.CENTER_INSIDE);]