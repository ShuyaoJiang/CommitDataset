[+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +    cbs.add(cb, callbackExecutor);, +      callbackExecutor.execute(new CallResourceReady(cb));, +      callbackExecutor.execute(new CallLoadFailed(cb));, +      Preconditions.checkArgument(!isCancelled, "Cannot add callbacks to a cancelled EngineJob");, +      boolean isFinishedRunning = hasResource || hasLoadFailed;, +      if (isFinishedRunning && pendingCallbacks.get() == 0) {, +        release();, +    listener.onEngineJobCancelled(this, key);, +      entry.executor.execute(new CallResourceReady(entry.cb));, +    stateVerifier.throwIfRecycled();, +      entry.executor.execute(new CallLoadFailed(entry.cb));, +  private class CallLoadFailed implements Runnable {, +, +    private final ResourceCallback cb;, +, +    CallLoadFailed(ResourceCallback cb) {, +      this.cb = cb;, +    }, +, +    @Override, +    public void run() {, +      synchronized (EngineJob.this) {, +        if (cbs.contains(cb)) {, +          callCallbackOnLoadFailed(cb);, +        }, +, +        decrementPendingCallbacks();, +      }, +    }, +  }, +, +  private class CallResourceReady implements Runnable {, +, +    private final ResourceCallback cb;, +, +    CallResourceReady(ResourceCallback cb) {, +      this.cb = cb;, +    }, +, +    @Override, +    public void run() {, +      synchronized (EngineJob.this) {, +        if (cbs.contains(cb)) {, +          // Acquire for this particular callback., +          engineResource.acquire();, +          callCallbackOnResourceReady(cb);, +          removeCallback(cb);, +        }, +        decrementPendingCallbacks();, +      }, +    }, +  }, +]