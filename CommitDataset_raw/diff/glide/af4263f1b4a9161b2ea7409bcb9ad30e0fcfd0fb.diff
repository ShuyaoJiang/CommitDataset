[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, +    registry = new Registry();, +    registry.register(new DefaultImageHeaderParser());, +, +    Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, +        resources.getDisplayMetrics(), bitmapPool, arrayPool);, +        new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, +    registry.register(ByteBuffer.class, new ByteBufferEncoder()), +            new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, +    registry = new Registry();, +    registry.register(new DefaultImageHeaderParser());, +, +    Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, +        resources.getDisplayMetrics(), bitmapPool, arrayPool);, +        new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, +    registry.register(ByteBuffer.class, new ByteBufferEncoder()), +            new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.provider.ImageHeaderParserRegistry;, +  private final ImageHeaderParserRegistry imageHeaderParserRegistry;, +    this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();, +  public Registry register(ImageHeaderParser parser) {, +    imageHeaderParserRegistry.add(parser);, +    return this;, +  }, +, +  public List<ImageHeaderParser> getImageHeaderParsers() {, +    List<ImageHeaderParser> result = imageHeaderParserRegistry.getParsers();, +    if (result.isEmpty()) {, +      throw new NoImageHeaderParserException();, +    }, +    return result;, +  }, +, +, +  /**, +   * Thrown when no {@link ImageHeaderParser} is registered., +   */, +  public static final class NoImageHeaderParserException extends MissingComponentException {, +    public NoImageHeaderParserException() {, +      super("Failed to find image header parser.");, +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;, +    registry = new Registry();, +    registry.register(new DefaultImageHeaderParser());, +, +    Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),, +        resources.getDisplayMetrics(), bitmapPool, arrayPool);, +        new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);, +, +    registry.register(ByteBuffer.class, new ByteBufferEncoder()), +            new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool)), +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.provider.ImageHeaderParserRegistry;, +  private final ImageHeaderParserRegistry imageHeaderParserRegistry;, +    this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();, +  public Registry register(ImageHeaderParser parser) {, +    imageHeaderParserRegistry.add(parser);, +    return this;, +  }, +, +  public List<ImageHeaderParser> getImageHeaderParsers() {, +    List<ImageHeaderParser> result = imageHeaderParserRegistry.getParsers();, +    if (result.isEmpty()) {, +      throw new NoImageHeaderParserException();, +    }, +    return result;, +  }, +, +, +  /**, +   * Thrown when no {@link ImageHeaderParser} is registered., +   */, +  public static final class NoImageHeaderParserException extends MissingComponentException {, +    public NoImageHeaderParserException() {, +      super("Failed to find image header parser.");, +    }, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParser.java, +package com.bumptech.glide.load;, +, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import java.io.IOException;, +import java.io.InputStream;, +import java.nio.ByteBuffer;, +, +/**, + * Interface for the ImageHeaderParser., + */, +public interface ImageHeaderParser {, +  /**]