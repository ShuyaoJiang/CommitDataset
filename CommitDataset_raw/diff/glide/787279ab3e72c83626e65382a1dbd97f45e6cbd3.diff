[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawableTest.java, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.LightingColorFilter;, +import android.graphics.Paint;, +import android.graphics.Rect;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.isNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +    @Test, +    public void testRetainsSameBoundsAcrossMutation() {, +        Rect bounds = new Rect(0, 0, 100, 100);, +        drawable.setBounds(bounds);, +        drawable.onBoundsChange(bounds);, +        Canvas canvas = mock(Canvas.class);, +        drawable.draw(canvas);, +, +        Drawable mutated = drawable.mutate();, +        mutated.draw(canvas);, +, +        assertThat(mutated.getBounds(), equalTo(bounds));, +        verify(canvas, times(2)).drawBitmap(eq(bitmap), isNull(Rect.class), eq(bounds), any(Paint.class));, +    }, +, +    @Test, +    public void testMutatedDrawableUsesNewPaint() {, +        drawable.setAlpha(1);, +        Drawable newDrawable = drawable.getConstantState().newDrawable();, +        Drawable mutated = drawable.mutate();, +        mutated.setAlpha(100);, +, +        Canvas canvas = mock(Canvas.class);, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Paint paint = (Paint) invocation.getArguments()[3];, +                assertThat(paint.getAlpha(), equalTo(1));, +                return null;, +            }, +        }).when(canvas).drawBitmap(any(Bitmap.class), any(Rect.class), any(Rect.class), any(Paint.class));, +        newDrawable.draw(canvas);, +        verify(canvas).drawBitmap(eq(bitmap), any(Rect.class), any(Rect.class), any(Paint.class));, +    }, +, +    @Test, +    public void testMutatedDrawableUsesNewColorFilter() {, +        final ColorFilter originalColorFilter = new LightingColorFilter(1, 1);, +        drawable.setColorFilter(originalColorFilter);, +        Drawable newDrawable = drawable.getConstantState().newDrawable();, +        Drawable mutated = drawable.mutate();, +        ColorFilter newColorFilter = new LightingColorFilter(2, 2);, +        mutated.setColorFilter(newColorFilter);, +, +        Canvas canvas = mock(Canvas.class);, +        doAnswer(new Answer() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Paint paint = (Paint) invocation.getArguments()[3];, +                assertThat(paint.getColorFilter(), equalTo(originalColorFilter));, +                return null;, +            }, +        }).when(canvas).drawBitmap(any(Bitmap.class), any(Rect.class), any(Rect.class), any(Paint.class));, +        newDrawable.draw(canvas);, +        verify(canvas).drawBitmap(eq(bitmap), any(Rect.class), any(Rect.class), any(Paint.class));, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/GlideBitmapDrawableTest.java, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.LightingColorFilter;, +import android.graphics.Paint;, +import android.graphics.Rect;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import static org.hamcrest.Matchers.equalTo;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.isNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +    @Test, +    public void testRetainsSameBoundsAcrossMutation() {, +        Rect bounds = new Rect(0, 0, 100, 100);, +        drawable.setBounds(bounds);, +        drawable.onBoundsChange(bounds);, +        Canvas canvas = mock(Canvas.class);, +        drawable.draw(canvas);, +, +        Drawable mutated = drawable.mutate();, +        mutated.draw(canvas);]