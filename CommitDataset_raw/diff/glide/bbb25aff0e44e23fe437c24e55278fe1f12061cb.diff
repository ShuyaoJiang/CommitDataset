[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +    ClassName context = ClassName.get("android.content", "Context");, +            .addParameter(context, "context"), +            .addStatement(, +                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +    ClassName context = ClassName.get("android.content", "Context");, +            .addParameter(context, "context"), +            .addStatement(, +                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +                .addParameter(CONTEXT_CLASS_NAME, "context"), +                    "return new $T(glide, lifecycle, treeNode, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +    ClassName context = ClassName.get("android.content", "Context");, +            .addParameter(context, "context"), +            .addStatement(, +                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +                .addParameter(CONTEXT_CLASS_NAME, "context"), +                    "return new $T(glide, lifecycle, treeNode, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +        .addParameter(CONTEXT_CLASS_NAME, "context"), +        .addStatement("super(glide, lifecycle, treeNode, context)"), +        .addStatement("return new $T<>(glide, this, resourceClass, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +    ClassName context = ClassName.get("android.content", "Context");, +            .addParameter(context, "context"), +            .addStatement(, +                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +                .addParameter(CONTEXT_CLASS_NAME, "context"), +                    "return new $T(glide, lifecycle, treeNode, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +        .addParameter(CONTEXT_CLASS_NAME, "context"), +        .addStatement("super(glide, lifecycle, treeNode, context)"), +        .addStatement("return new $T<>(glide, this, resourceClass, context)",, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.content.Context;, +  private final Context context;, +  private final GlideContext glideContext;, +      Class<TranscodeType> transcodeClass, Context context) {, +    this.context = context;, +    this.glideContext = glide.getGlideContext();, +    this(other.glide, other.requestManager, transcodeClass, other.context);, +    return into(glideContext.buildImageViewTarget(view, transcodeClass), requestOptions);, +        new RequestFutureTarget<>(glideContext.getMainHandler(), width, height);, +      glideContext.getMainHandler().post(new Runnable() {, +        glideContext,, +        glideContext.getEngine(),, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +    ClassName context = ClassName.get("android.content", "Context");, +            .addParameter(context, "context"), +            .addStatement(, +                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context"), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +                .addParameter(CONTEXT_CLASS_NAME, "context"), +                    "return new $T(glide, lifecycle, treeNode, context)",, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +  private static final ClassName CONTEXT_CLASS_NAME =, +      ClassName.get("android.content", "Context");, +        .addParameter(CONTEXT_CLASS_NAME, "context"), +        .addStatement("super(glide, lifecycle, treeNode, context)"), +        .addStatement("return new $T<>(glide, this, resourceClass, context)",, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.content.Context;, +  private final Context context;, +  private final GlideContext glideContext;, +      Class<TranscodeType> transcodeClass, Context context) {, +    this.context = context;, +    this.glideContext = glide.getGlideContext();, +    this(other.glide, other.requestManager, transcodeClass, other.context);, +    return into(glideContext.buildImageViewTarget(view, transcodeClass), requestOptions);, +        new RequestFutureTarget<>(glideContext.getMainHandler(), width, height);, +      glideContext.getMainHandler().post(new Runnable() {, +        glideContext,, +        glideContext.getEngine(),, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +  protected final Context context;, +  public RequestManager(, +      Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode, Context context) {, +    this(, +        glide,, +        lifecycle,, +        treeNode,, +        new RequestTracker(),, +        glide.getConnectivityMonitorFactory(),, +        context);]