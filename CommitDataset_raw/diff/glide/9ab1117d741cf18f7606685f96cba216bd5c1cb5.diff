[+++ b/library/src/com/bumptech/glide/Glide.java, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, +     * {@link ImageManager} with custom options for use with {@link Request} and/or as an, +     * Set the {@link ImageManager} to use with {@link Request}., +     * Set the {@link ImageManager} to use with {@link Request} Replaces the current, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the image into., +         * Use the {@link ModelLoaderFactory} currently registered for {@link URL} to load the image represented by the, +         * given {@link URL}. Defaults to {@link VolleyUrlLoader.Factory} and {@link VolleyUrlLoader} to load the given, +         * model., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param url The URL representing the image., +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<URL> loadFromImage(URL url) {, +            return new ImageModelRequest<URL>(context, GLIDE.getFactory(url, InputStream.class)).load(url);, +        }, +, +        /**, +         * Use a new {@link StreamByteArrayLoader} to load an image from the given model., +         *, +         * @see #loadFromImage(byte[]), +         *, +         * @param model The data to load., +         * @param id A unique id that identifies the image represented by the model suitable for use as a cache key, +         *           (url, filepath etc). If there is no suitable id, use {@link #loadFromImage(byte[])} instaed., +         * @return A {@link Request} to set options for the load and ultimately the target to load the image into., +         */, +        public Request<byte[]> loadFromImage(byte[] model, final String id) {, +            return new ImageModelRequest<byte[]>(context, modelLoaderToFactory(new StreamByteArrayLoader() {, +                @Override, +                public String getId(byte[] model) {, +                    return id;, +                }, +            })).load(model);, +        }, +, +        /**, +         * Use a new {@link StreamByteArrayLoader} to load an image from the given model. Suitable when there is no, +         * simple id that represents the given data., +         *, +         * @param model the data to load., +         * @return A {@link Request} to set options for the load and ultimately the target to load the image into., +         */, +        public Request<byte[]> loadFromImage(byte[] model) {, +            return loadFromImage(model, UUID.randomUUID(), +                    .toString());, +        }, +, +        /**, +++ b/library/src/com/bumptech/glide/Glide.java, +import java.util.UUID;, + * A singleton to present a simple static interface for Glide {@link Request} and to create and manage an, +     * {@link ImageManager} with custom options for use with {@link Request} and/or as an, +     * Set the {@link ImageManager} to use with {@link Request}., +     * Set the {@link ImageManager} to use with {@link Request} Replaces the current, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         * @return A {@link Request} to set options for the load and ultimately the target to load the image into., +         * Use the {@link ModelLoaderFactory} currently registered for {@link URL} to load the image represented by the, +         * given {@link URL}. Defaults to {@link VolleyUrlLoader.Factory} and {@link VolleyUrlLoader} to load the given, +         * model., +         *, +         * @see #using(StreamModelLoader), +         *, +         * @param url The URL representing the image., +         * @return A {@link Request} to set options for the load and ultimately the target to load the model into, +         */, +        public Request<URL> loadFromImage(URL url) {, +            return new ImageModelRequest<URL>(context, GLIDE.getFactory(url, InputStream.class)).load(url);, +        }, +, +        /**, +         * Use a new {@link StreamByteArrayLoader} to load an image from the given model., +         *, +         * @see #loadFromImage(byte[]), +         *, +         * @param model The data to load., +         * @param id A unique id that identifies the image represented by the model suitable for use as a cache key, +         *           (url, filepath etc). If there is no suitable id, use {@link #loadFromImage(byte[])} instaed., +         * @return A {@link Request} to set options for the load and ultimately the target to load the image into., +         */, +        public Request<byte[]> loadFromImage(byte[] model, final String id) {, +            return new ImageModelRequest<byte[]>(context, modelLoaderToFactory(new StreamByteArrayLoader() {, +                @Override, +                public String getId(byte[] model) {, +                    return id;, +                }, +            })).load(model);, +        }, +, +        /**]