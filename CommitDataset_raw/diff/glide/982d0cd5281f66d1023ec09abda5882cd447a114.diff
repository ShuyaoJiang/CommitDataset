[+++ b/Makefile, +, +glide-minus-volley:, +	cd library && ant clean && ant glide-minus-volley, +, +++ b/Makefile, +, +glide-minus-volley:, +	cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/Makefile, +, +glide-minus-volley:, +	cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +    <target name="glide-minus-volley" depends="-compile">, +        <jar destfile="bin/glide-minus-volley-${mymanifest.manifest.android:versionName}.jar", +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +            <zipgroupfileset dir="libs" includes="disklrucache*.jar" />, +        </jar>, +    </target>, +++ b/Makefile, +, +glide-minus-volley:, +	cd library && ant clean && ant glide-minus-volley, +, +++ b/library/AndroidManifest.xml, +  <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19" />, +++ b/library/custom_rules.xml, +    <target name="glide-minus-volley" depends="-compile">, +        <jar destfile="bin/glide-minus-volley-${mymanifest.manifest.android:versionName}.jar", +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +            <zipgroupfileset dir="libs" includes="disklrucache*.jar" />, +        </jar>, +    </target>, +++ b/library/src/com/bumptech/glide/Glide.java, +import android.util.Log;, +import android.view.ViewGroup;, +import com.bumptech.glide.loader.model.FileLoader;, +import com.bumptech.glide.loader.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.model.ModelLoader;, +import com.bumptech.glide.loader.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.model.ResourceLoader;, +import com.bumptech.glide.loader.model.StringLoader;, +import com.bumptech.glide.loader.model.UriLoader;, +import com.bumptech.glide.loader.stream.StreamLoader;, +import com.bumptech.glide.loader.transformation.CenterCrop;, +import com.bumptech.glide.loader.transformation.FitCenter;, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import com.bumptech.glide.loader.transformation.TransformationLoader;, +import com.bumptech.glide.presenter.target.Target;, +, +import java.util.Map;, +import java.util.WeakHashMap;, + * A singleton to present a simple static interface for Glide {@link Glide.Request} and to create and manage an, +    private static final String TAG = "Glide";, +    private static final Glide GLIDE = new Glide();, +    private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, +, +         *     public void onException(Exception e, T model, Target target) {, +    public static Glide get() {, +    protected Glide() {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +        try {, +            Class.forName("com.bumptech.glide.volley.VolleyUrlLoader$Factory");, +            loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, +        } catch (ClassNotFoundException e) {, +            if (Log.isLoggable(TAG, Log.DEBUG)) {, +                Log.d(TAG, "Volley not found, missing url loader");, +            }, +            loaderFactory.register(URL.class, new ModelLoaderFactory<URL>() {, +                ModelLoader<URL> errorUrlLoader = new ModelLoader<URL>() {, +                    @Override, +                    public StreamLoader getStreamLoader(URL model, int width, int height) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    @Override, +                    public String getId(URL model) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    }, +                };, +, +                @Override, +                public ModelLoader<URL> build(Context context, GenericLoaderFactory factories) {, +                    return errorUrlLoader;, +                @Override @SuppressWarnings("unchecked"), +                public Class<? extends ModelLoader<URL>> loaderClass() {, +                    return (Class<ModelLoader<URL>>) errorUrlLoader.getClass();, +                @Override, +                public void teardown() {]