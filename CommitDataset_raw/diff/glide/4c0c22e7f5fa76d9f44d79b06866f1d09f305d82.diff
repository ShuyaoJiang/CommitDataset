[+++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java, +import android.view.animation.Animation;, +    private ViewAnimation<Object> viewAnimation;, +    private ViewAnimation.AnimationFactory animationFactory;, +        animationFactory = mock(ViewAnimation.AnimationFactory.class);, +        viewAnimation = new ViewAnimation<Object>(animationFactory);, +        Animation animation = mock(Animation.class);, +        when(animationFactory.build()).thenReturn(animation);, +        verify(view).clearAnimation();, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java, +import android.view.animation.Animation;, +    private ViewAnimation<Object> viewAnimation;, +    private ViewAnimation.AnimationFactory animationFactory;, +        animationFactory = mock(ViewAnimation.AnimationFactory.class);, +        viewAnimation = new ViewAnimation<Object>(animationFactory);, +        Animation animation = mock(Animation.class);, +        when(animationFactory.build()).thenReturn(animation);, +        verify(view).clearAnimation();, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    @Deprecated, +    @SuppressWarnings("deprecation"), +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java, +import android.view.animation.Animation;, +    private ViewAnimation<Object> viewAnimation;, +    private ViewAnimation.AnimationFactory animationFactory;, +        animationFactory = mock(ViewAnimation.AnimationFactory.class);, +        viewAnimation = new ViewAnimation<Object>(animationFactory);, +        Animation animation = mock(Animation.class);, +        when(animationFactory.build()).thenReturn(animation);, +        verify(view).clearAnimation();, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    @Deprecated, +    @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +     * @deprecated If this builder is used for multiple loads, using this method will result in multiple view's being, +     * asked to start an animation using a single {@link android.view.animation.Animation} object which results in, +     * views animating repeatedly. Use {@link #crossFade(int, int)}} instead, or be sure to call this method once, +     * per call to {@link com.bumptech.glide.GenericRequestBuilder#load(Object)} to avoid re-using animation objects., +    @Deprecated, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java, +import android.view.animation.Animation;, +    private ViewAnimation<Object> viewAnimation;, +    private ViewAnimation.AnimationFactory animationFactory;, +        animationFactory = mock(ViewAnimation.AnimationFactory.class);, +        viewAnimation = new ViewAnimation<Object>(animationFactory);, +        Animation animation = mock(Animation.class);, +        when(animationFactory.build()).thenReturn(animation);, +        verify(view).clearAnimation();, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    @Deprecated, +    @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +     * @deprecated If this builder is used for multiple loads, using this method will result in multiple view's being, +     * asked to start an animation using a single {@link android.view.animation.Animation} object which results in, +     * views animating repeatedly. Use {@link #crossFade(int, int)}} instead, or be sure to call this method once, +     * per call to {@link com.bumptech.glide.GenericRequestBuilder#load(Object)} to avoid re-using animation objects., +    @Deprecated, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +    @Deprecated, +    @Deprecated, +    @SuppressWarnings("deprecation"), +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimationTest.java, +import static org.mockito.Matchers.eq;, +        verify(harness.defaultAnimation).animate(eq(harness.current), eq(harness.adapter));, +        GlideAnimation<Drawable> defaultAnimation = mock(GlideAnimation.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/animation/ViewAnimationTest.java, +import android.view.animation.Animation;, +    private ViewAnimation<Object> viewAnimation;, +    private ViewAnimation.AnimationFactory animationFactory;, +        animationFactory = mock(ViewAnimation.AnimationFactory.class);, +        viewAnimation = new ViewAnimation<Object>(animationFactory);, +        Animation animation = mock(Animation.class);, +        when(animationFactory.build()).thenReturn(animation);, +        verify(view).clearAnimation();, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    @Deprecated, +    @SuppressWarnings("deprecation"), +++ b/library/src/main/java/com/bumptech/glide/DrawableOptions.java, +     * @deprecated If this builder is used for multiple loads, using this method will result in multiple view's being, +     * asked to start an animation using a single {@link android.view.animation.Animation} object which results in]