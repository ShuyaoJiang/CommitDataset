[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.content.res.AssetFileDescriptor;, +import android.media.MediaMetadataRetriever;, +import android.os.ParcelFileDescriptor;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import org.robolectric.annotation.Config;, +import org.robolectric.annotation.Implementation;, +import org.robolectric.annotation.Implements;, +import org.robolectric.shadows.ShadowContentResolver;, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +@Config(shadows = { GlideTest.ShadowFileDescriptorContentResolver.class, GlideTest.ShadowMediaMetadataRetriever.class }), +, +    @Test, +    public void testFileDefaultLoaderWithInputStream() throws Exception {, +        registerFailFactory(File.class, ParcelFileDescriptor.class);, +        runTestFileDefaultLoader();, +    }, +, +    @Test, +    public void testFileDefaultLoaderWithFileDescriptor() throws Exception {, +        registerFailFactory(File.class, InputStream.class);, +        runTestFileDefaultLoader();, +    }, +, +        runTestFileDefaultLoader();, +    }, +, +    private void runTestFileDefaultLoader() {, +    public void runTestUrlDefaultLoader() throws MalformedURLException {, +    public void testUriDefaultLoaderWithInputStream() throws Exception {, +        registerFailFactory(Uri.class, ParcelFileDescriptor.class);, +        runTestUriDefaultLoader();, +    }, +, +    @Test, +    public void testUriDefaultLoaderWithFileDescriptor() throws Exception {, +        registerFailFactory(Uri.class, InputStream.class);, +        runTestUriDefaultLoader();, +    }, +, +    @Test, +        runTestUriDefaultLoader();, +    }, +, +    private void runTestUriDefaultLoader() {, +    public void testStringDefaultLoaderWithUrl() {, +        runTestStringDefaultLoader("http://www.google.com");, +    }, +    @Test, +    public void testFileStringDefaultLoaderWithInputStream() throws Exception {, +        registerFailFactory(String.class, ParcelFileDescriptor.class);, +        runTestFileStringDefaultLoader();, +    }, +, +    @Test, +    public void testFileStringDefaultLoaderWithFileDescriptor() throws Exception {, +        registerFailFactory(String.class, ParcelFileDescriptor.class);, +        runTestFileStringDefaultLoader();, +    }, +, +    @Test, +    public void testFileStringDefaultLoader() {, +        runTestFileStringDefaultLoader();, +    }, +, +    private void runTestFileStringDefaultLoader() {, +        String path = "/some/random/path";, +        mockUri(Uri.fromFile(new File(path)));, +        runTestStringDefaultLoader(path);, +    }, +, +    @Test, +    public void testUriStringDefaultLoaderWithInputStream() throws Exception {, +        registerFailFactory(String.class, ParcelFileDescriptor.class);, +        runTestUriStringDefaultLoader();, +    }, +, +    @Test, +    public void testUriStringDefaultLoaerWithFileDescriptor() throws Exception {, +        registerFailFactory(String.class, InputStream.class);, +        runTestUriStringDefaultLoader();, +    }, +, +    @Test, +    public void testUriStringDefaultLoader() {, +        runTestUriStringDefaultLoader();, +    }, +, +    private void runTestUriStringDefaultLoader() {, +        String stringUri = "content://some/random/uri";, +        mockUri(Uri.parse(stringUri));, +        runTestStringDefaultLoader(stringUri);, +    }, +, +    private void runTestStringDefaultLoader(String string) {, +    public void testIntegerDefaultLoaderWithInputStream() throws Exception {, +        registerFailFactory(Integer.class, ParcelFileDescriptor.class);, +        runTestIntegerDefaultLoader();]