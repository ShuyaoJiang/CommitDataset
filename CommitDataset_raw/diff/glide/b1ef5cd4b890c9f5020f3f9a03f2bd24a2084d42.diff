[+++ b/library/res/values/ids.xml, +  <item type="id" name="glide_metadata" />, +++ b/library/res/values/ids.xml, +  <item type="id" name="glide_metadata" />, +++ b/library/src/com/bumptech/glide/Glide.java, +     * for use with {@link Glide.Request} and/or as an easily accessible singleton, +     * Set the {@link RequestQueue} to use with {@link Glide.Request}. Replaces the current, +     * {@link ImageManager} with custom options for use with {@link com.bumptech.glide.Glide.Request} and/or as an, +     * easily accessible singleton., +     * Set the {@link ImageManager} to use with {@link Glide.Request} Replaces the current, +     * Set the {@link ModelLoader} for this view., +     *     Note - You can use this method to set a {@link ModelLoader} for models that don't have a default, +     *     {@link ModelLoader}. You can also optionally use this method to override the default {@link ModelLoader}, +     *     for a model for which there is a default., +     *     Note - If you have the ability to fetch different sized images for a given model, it is most efficient to, +     *     supply a custom {@link ModelLoader} here to do so, even if a default exists. Fetching a smaller image, +     *     means less bandwidth, battery, and memory usage as well as faster image loads. To simply build a url to, +     *     download an image using the width and the height of the view, consider passing in a subclass of, +     *     {@link com.bumptech.glide.loader.model.VolleyModelLoader}., +     * @param modelLoader The {@link ModelRequest} to use to load an image from a given model, +     * @return A {@link ModelRequest} to set the specific model to load, +    public static <T> ModelRequest<T> using(ModelLoader<T> modelLoader) {, +        return new ModelRequest<T>(modelLoader);, +    /**, +     * Use {@link StringLoader} to load the given model, +     *, +     * @see #using(com.bumptech.glide.loader.model.ModelLoader), +     *, +     * @param string The string representing the image. Must be either a path, or a uri handled by {@link UriLoader}, +     * @return A {@link Request} to set options for the load and ultimately the view to load the model into, +     */, +    public static Request<String> load(String string) {, +        return new Request<String>(string);, +    /**, +     * Use {@link UriLoader} to load the given model, +     *, +     * @see #using(com.bumptech.glide.loader.model.ModelLoader), +     *, +     * @param uri The uri representing the image. Must be a uri handled by {@link UriLoader}, +     * @return A {@link Request} to set options for the load and ultimately the view to load the model into, +     */, +    public static Request<Uri> load(Uri uri) {, +        return new Request<Uri>(uri);, +    }, +, +    /**, +     * Use {@link UrlLoader} to load the given model, +     *, +     * @see #using(com.bumptech.glide.loader.model.ModelLoader), +     *, +     * @param url The URL representing the image., +     * @return A {@link Request} to set options for the load and ultimately the view to load the model into, +     */, +    public static Request<URL> load(URL url) {, +        return new Request<URL>(url);, +    }, +, +    /**, +     * Use {@link FileLoader} to load the given model, +     *, +     * @see #using(com.bumptech.glide.loader.model.ModelLoader), +     *, +     * @param file The File containing the image, +     * @return A {@link Request} to set options for the load and ultimately the view to load the model into, +     */, +    public static Request<File> load(File file) {, +        return new Request<File>(file);, +    }, +, +    /**, +     * Use {@link DrawableLoader} to load the given model, +     *, +     * @see #using(com.bumptech.glide.loader.model.ModelLoader), +     *, +     * @param resourceId the id of the resource containing the image, +     * @return A {@link Request} to set options for the load and ultimately the view to load the model into, +     */, +    public static Request<Integer> load(Integer resourceId) {, +        return new Request<Integer>(resourceId);, +    }, +, +    private interface ModelLoaderFactory<T> {, +        public ModelLoader<T> build(Context context);, +        public Class<? extends ModelLoader<T>> loaderClass();, +    }, +, +    private static final ModelLoaderFactory<String> stringLoaderFactory = new ModelLoaderFactory<String>() {, +, +        @Override, +        public ModelLoader<String> build(Context context) {, +            return new StringLoader(context);, +        }, +, +        @Override, +        public Class<? extends ModelLoader<String>> loaderClass() {, +            return StringLoader.class;, +        }, +    };, +, +    private static final ModelLoaderFactory<Uri> uriLoaderFactory = new ModelLoaderFactory<Uri>() {]