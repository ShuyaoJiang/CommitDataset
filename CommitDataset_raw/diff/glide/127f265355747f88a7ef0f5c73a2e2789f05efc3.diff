[+++ b/library/robolectric/src/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +package com.bumptech.glide.load.engine.cache;, +, +import android.app.ActivityManager;, +import android.content.Context;, +import android.os.Build;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class MemorySizeCalculatorTest {, +    private MemorySizeHarness harness;, +    private int initialSdkVersion;, +, +    @Before, +    public void setUp() {, +        initialSdkVersion = Build.VERSION.SDK_INT;, +        harness = new MemorySizeHarness();, +    }, +, +    @After, +    public void tearDown() {, +        setSdkVersionInt(initialSdkVersion);, +    }, +, +    private void setSdkVersionInt(int version) {, +        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", version);, +    }, +, +    @Test, +    public void testDefaultMemoryCacheSizeIsTwiceScreenSize() {, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +        int memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +, +        assertEquals(harness.getScreenSize() * harness.memoryCacheScreens , memoryCacheSize);, +    }, +, +    @Test, +    public void testDefaultMemoryCacheSizeIsLimitedByMemoryClass() {, +        final int memoryClassBytes = Math.round(harness.getScreenSize() * harness.memoryCacheScreens, +                * harness.sizeMultiplier);, +, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(memoryClassBytes / (1024 * 1024));, +, +        int memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +, +        assertTrue(memoryCacheSize <= Math.round(memoryClassBytes * harness.sizeMultiplier));, +    }, +, +    @Test, +    public void testDefaultBitmapPoolSizeIsThreeTimesScreenSize() {, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass());, +, +        int bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, +        assertEquals(harness.getScreenSize() * harness.bitmapPoolScreens, bitmapPoolSize);, +    }, +, +    @Test, +    public void testDefaultBitmapPoolSizeIsLimitedByMemoryClass() {, +        final int memoryClassBytes = Math.round(harness.getScreenSize() * harness.bitmapPoolScreens, +                * harness.sizeMultiplier);, +, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(memoryClassBytes / (1024 * 1024));, +, +        int bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, +        assertTrue(bitmapPoolSize <= Math.round(memoryClassBytes * harness.sizeMultiplier));, +    }, +, +    @Test, +    public void testCumulativePoolAndMemoryCacheSizeAreLimitedByMemoryClass() {, +        final int memoryClassBytes = Math.round(harness.getScreenSize(), +                * (harness.bitmapPoolScreens + harness.memoryCacheScreens) * harness.sizeMultiplier);, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(memoryClassBytes / (1024 * 1024));, +, +        int memoryCacheSize = harness.getCalculator().getMemoryCacheSize();, +        int bitmapPoolSize = harness.getCalculator().getBitmapPoolSize();, +, +        assertTrue("Expected " + (memoryCacheSize + bitmapPoolSize) + " to be less than " +, +                Math.round(memoryClassBytes * harness.sizeMultiplier) + ", memoryCacheSize: " + memoryCacheSize, +                + " bitmapPoolSize: " + bitmapPoolSize + " memoryClass: " + memoryCacheSize, +                + " sizeMultiplier: " + harness.sizeMultiplier,, +                memoryCacheSize + bitmapPoolSize <= Math.round(memoryClassBytes * harness.sizeMultiplier));, +    }, +, +    @Test, +    public void testCumulativePoolAndMemoryCacheSizesAreSmallerOnLowMemoryDevices() {, +        Robolectric.shadowOf(harness.activityManager).setMemoryClass(getLargeEnoughMemoryClass() / 2);, +        final int normalMemoryCacheSize = harness.getCalculator().getMemoryCacheSize();]