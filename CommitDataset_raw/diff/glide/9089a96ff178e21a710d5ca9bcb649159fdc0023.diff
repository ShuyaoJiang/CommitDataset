[+++ b/build.gradle, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {, +        harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.resource, never()).acquire();, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +    public void testCacheIsCheckedIfMemoryCacheable() {, +    public void testCacheIsNotCheckedIfNotMemoryCacheable() {, +        when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +        when(harness.resource.isCacheable()).thenReturn(true);, +    public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {, +        when(harness.resource.isCacheable()).thenReturn(false);, +        harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);, +        assertThat(harness.activeResources).doesNotContainKey(harness.cacheKey);, +    }, +, +    @Test, +        boolean isMemoryCacheable = true;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/build.gradle, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {, +        harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.resource, never()).acquire();, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +    public void testCacheIsCheckedIfMemoryCacheable() {, +    public void testCacheIsNotCheckedIfNotMemoryCacheable() {, +        when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +        when(harness.resource.isCacheable()).thenReturn(true);, +    public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {, +        when(harness.resource.isCacheable()).thenReturn(false);, +        harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);, +        assertThat(harness.activeResources).doesNotContainKey(harness.cacheKey);, +    }, +, +    @Test, +        boolean isMemoryCacheable = true;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.doThrow;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.Arrays;, +, +@RunWith(JUnit4.class), +public class RecyclableBufferedInputStreamTest {, +, +    private static final int DATA_SIZE = 30;]