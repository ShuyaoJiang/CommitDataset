[+++ b/.idea/codeStyleSettings.xml, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = new GlideExecutor("source");, +      diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = new GlideExecutor("source");, +      diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  private static final BaseRequestOptions DOWNLOAD_ONLY_OPTIONS =, +  public RequestBuilder<TranscodeType> apply(BaseRequestOptions requestOptions) {, +      TransitionOptions<?, ? super TranscodeType> transitionOptions) {, +  public <Y extends Target<TranscodeType>> Y into(Y target) {, +    if (target == null) {, +      throw new IllegalArgumentException("You must pass in a non null Target");, +    }, +    if (view == null) {, +      throw new IllegalArgumentException("You must pass in a non null View");, +    }, +        case CENTER_INSIDE:, +          requestOptions.optionalCenterInside(context);, +          break;, +    return getDownloadOnlyRequest().into(width, height);, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = new GlideExecutor("source");, +      diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  private static final BaseRequestOptions DOWNLOAD_ONLY_OPTIONS =, +  public RequestBuilder<TranscodeType> apply(BaseRequestOptions requestOptions) {, +      TransitionOptions<?, ? super TranscodeType> transitionOptions) {, +  public <Y extends Target<TranscodeType>> Y into(Y target) {, +    if (target == null) {, +      throw new IllegalArgumentException("You must pass in a non null Target");, +    }, +    if (view == null) {, +      throw new IllegalArgumentException("You must pass in a non null View");, +    }, +        case CENTER_INSIDE:, +          requestOptions.optionalCenterInside(context);, +          break;, +    return getDownloadOnlyRequest().into(width, height);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +    final int sdkInt = Build.VERSION.SDK_INT;, +    return sdkInt < Build.VERSION_CODES.HONEYCOMB, +        || (sdkInt >= Build.VERSION_CODES.KITKAT && activityManager.isLowRamDevice());, +++ b/.idea/codeStyleSettings.xml, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      sourceExecutor = new GlideExecutor("source");, +      diskCacheExecutor = new GlideExecutor("disk-cache", 1);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  private static final BaseRequestOptions DOWNLOAD_ONLY_OPTIONS =, +  public RequestBuilder<TranscodeType> apply(BaseRequestOptions requestOptions) {, +      TransitionOptions<?, ? super TranscodeType> transitionOptions) {, +  public <Y extends Target<TranscodeType>> Y into(Y target) {, +    if (target == null) {, +      throw new IllegalArgumentException("You must pass in a non null Target");, +    }, +    if (view == null) {, +      throw new IllegalArgumentException("You must pass in a non null View");, +    }, +        case CENTER_INSIDE:, +          requestOptions.optionalCenterInside(context);, +          break;, +    return getDownloadOnlyRequest().into(width, height);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +    final int sdkInt = Build.VERSION.SDK_INT;, +    return sdkInt < Build.VERSION_CODES.HONEYCOMB, +        || (sdkInt >= Build.VERSION_CODES.KITKAT && activityManager.isLowRamDevice());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java, +  private static final String DEFAULT_NAME = "fifo-pool";, +   * Constructor to build a fixed thread pool with an automatically determined number of threads., +   * @see #calculateBestThreadCount(), +  public GlideExecutor() {, +    this(calculateBestThreadCount());, +   * Constructor to build a fixed thread pool with the given pool size., +   * @param poolSize The number of threads., +   */, +  public GlideExecutor(int poolSize) {, +    this(poolSize, new DefaultThreadFactory());, +  }, +, +  /**, +   * Constructor to build a fixed thread pool with the given pool size., +   * @param poolSize The number of threads., +   * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected, +   *                                  throwables thrown by Futures run by the pool., +   */, +  public GlideExecutor(int poolSize,, +      UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +    this(poolSize, new DefaultThreadFactory(uncaughtThrowableStrategy));, +  }, +, +  /**, +   * Constructor to build a fixed thread pool with the given name and an automatically determined, +   * number of threads., +   *, +   * @see #calculateBestThreadCount(), +   */]