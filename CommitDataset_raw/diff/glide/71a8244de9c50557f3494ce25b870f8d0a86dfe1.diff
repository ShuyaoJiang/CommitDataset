[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, +        verify(requestBuilder).decode(any(DecodeOptions.class));, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, +        verify(requestBuilder).decode(any(DecodeOptions.class));, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, +        verify(requestBuilder).decode(any(DecodeOptions.class));, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.load.engine.BaseDecodeOptions;, +import com.bumptech.glide.load.engine.DecodeOptions;, +    private BaseDecodeOptions<?> decodeOptions;, +        decodeOptions = new DecodeOptions(context);, +    public RequestBuilder<ResourceType, TranscodeType> decode(DecodeOptions options) {, +        this.decodeOptions.apply(Preconditions.checkNotNull(options));, +            result.decodeOptions = decodeOptions.clone();, +        if (!decodeOptions.isTransformationSet() && view.getScaleType() != null) {, +                    decodeOptions.centerCrop();, +                    decodeOptions.fitCenter();, +                        transcodeClass, decodeOptions, transcoder, requestOptions);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, +        verify(requestBuilder).decode(any(DecodeOptions.class));, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.load.engine.BaseDecodeOptions;, +import com.bumptech.glide.load.engine.DecodeOptions;, +    private BaseDecodeOptions<?> decodeOptions;, +        decodeOptions = new DecodeOptions(context);, +    public RequestBuilder<ResourceType, TranscodeType> decode(DecodeOptions options) {, +        this.decodeOptions.apply(Preconditions.checkNotNull(options));, +            result.decodeOptions = decodeOptions.clone();, +        if (!decodeOptions.isTransformationSet() && view.getScaleType() != null) {, +                    decodeOptions.centerCrop();, +                    decodeOptions.fitCenter();, +                        transcodeClass, decodeOptions, transcoder, requestOptions);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +                .animate(new BitmapAnimationOptions());, +                .animate(new DrawableAnimationOptions());, +                .animate(new DrawableAnimationOptions());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;, +import org.robolectric.Robolectric;, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, handler, requestBuilder);, +        verify(requestBuilder).decode(any(DecodeOptions.class));, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +        loader = new GifFrameLoader(Robolectric.application, callback, gifDecoder, null /*handler*/, requestBuilder);, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import com.bumptech.glide.load.engine.BaseDecodeOptions;, +import com.bumptech.glide.load.engine.DecodeOptions;, +    private BaseDecodeOptions<?> decodeOptions;, +        decodeOptions = new DecodeOptions(context);, +    public RequestBuilder<ResourceType, TranscodeType> decode(DecodeOptions options) {, +        this.decodeOptions.apply(Preconditions.checkNotNull(options));, +            result.decodeOptions = decodeOptions.clone();, +        if (!decodeOptions.isTransformationSet() && view.getScaleType() != null) {, +                    decodeOptions.centerCrop();, +                    decodeOptions.fitCenter();, +                        transcodeClass, decodeOptions, transcoder, requestOptions);, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +                .animate(new BitmapAnimationOptions());, +                .animate(new DrawableAnimationOptions());, +                .animate(new DrawableAnimationOptions());, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +            return new EngineKey(id, signature, width, height, resourceClass, transcodeClass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java, +import com.bumptech.glide.load.engine.DecodeOptions;]