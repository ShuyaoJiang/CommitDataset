[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java, +package com.bumptech.glide.load.resource.bitmap;, +, +import static android.graphics.Bitmap.CompressFormat.JPEG;, +import static android.graphics.Bitmap.CompressFormat.PNG;, +import static android.graphics.Bitmap.CompressFormat.WEBP;, +import static android.os.Build.VERSION_CODES.KITKAT;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Api.apis;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Api.atAndAbove;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Api.below;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Api.onAllApisAndAllFormatsExpect;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Formats.Builder.allFormats;, +import static com.bumptech.glide.load.resource.bitmap.DownsamplerEmulatorTest.Formats.Builder.formats;, +import static org.junit.Assert.fail;, +, +import android.graphics.Bitmap;, +import android.graphics.Bitmap.CompressFormat;, +import android.graphics.Bitmap.Config;, +import android.os.Build;, +import android.os.Build.VERSION_CODES;, +import android.support.annotation.Nullable;, +import android.support.test.runner.AndroidJUnit4;, +import android.util.DisplayMetrics;, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +/**, + * Runs tests to make sure that DownsampleStrategy provides the output we expect., + *, + * WEBP at and above N rounds. Webp below N floors. PNG always floors. JPEG always rounds., + */, +@RunWith(AndroidJUnit4.class), +@SuppressWarnings("VisibleForTests"), +public class DownsamplerEmulatorTest {, +, +  @Test, +  public void calculateScaling_withAtMost() throws IOException {, +    new Tester(DownsampleStrategy.AT_MOST), +        .setTargetDimensions(100, 100), +        .givenSquareImageWithDimensionOf(100, onAllApisAndAllFormatsExpect(100, 100)), +        .givenSquareImageWithDimensionOf(200, onAllApisAndAllFormatsExpect(100, 100)), +        .givenSquareImageWithDimensionOf(400, onAllApisAndAllFormatsExpect(100, 100)), +        .givenSquareImageWithDimensionOf(300, onAllApisAndAllFormatsExpect(75, 75)), +        .givenImageWithDimensionsOf(799, 100,, +            atAndAbove(VERSION_CODES.N), +                .with(, +                    formats(JPEG, WEBP), +                        .expect(100, 13),, +                    formats(PNG), +                        .expect(99, 12)),, +            below(VERSION_CODES.N), +                .with(, +                    formats(JPEG), +                        .expect(100, 13),, +                    formats(PNG, WEBP), +                        .expect(99, 12))), +        .givenImageWithDimensionsOf(800, 100,, +            atAndAbove(VERSION_CODES.N), +                .with(, +                    formats(JPEG, WEBP), +                        .expect(100, 13),, +                    formats(PNG), +                        .expect(100, 12)),, +            below(VERSION_CODES.N), +                .with(, +                    formats(JPEG), +                        .expect(100, 13),, +                    formats(PNG, WEBP), +                        .expect(100, 12))), +        .givenImageWithDimensionsOf(801, 100, onAllApisAndAllFormatsExpect(50, 6)), +        .givenImageWithDimensionsOf(100, 800,, +            atAndAbove(VERSION_CODES.N), +                .with(, +                    formats(JPEG, WEBP), +                        .expect(13, 100),, +                    formats(PNG), +                        .expect(12, 100)),, +            below(VERSION_CODES.N), +                .with(, +                    formats(JPEG), +                        .expect(13, 100),, +                    formats(PNG, WEBP), +                        .expect(12, 100))), +        .givenImageWithDimensionsOf(87, 78, onAllApisAndAllFormatsExpect(87, 78)), +        // This set of examples demonstrate that webp uses round on N+ and floor < N., +        .setTargetDimensions(13, 13), +        .givenSquareImageWithDimensionOf(99,]