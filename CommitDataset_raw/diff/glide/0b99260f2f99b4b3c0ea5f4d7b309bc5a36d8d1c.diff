[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.util.Map;, +      RequestOptions defaultRequestOptions,, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {, +            context, registry, imageViewTargetFactory, defaultRequestOptions,, +            defaultTransitionOptions, engine, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.util.Map;, +      RequestOptions defaultRequestOptions,, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {, +            context, registry, imageViewTargetFactory, defaultRequestOptions,, +            defaultTransitionOptions, engine, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.support.annotation.NonNull;, +import android.support.v4.util.ArrayMap;, +import java.util.Map;, +  private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();, +   * Sets the default {@link TransitionOptions} to use when starting a request that will load a, +   * resource with the given {@link Class}., +   *, +   * <p>It's preferable but not required for the requested resource class to match the resource, +   * class applied here as long as the resource class applied here is assignable from the requested, +   * resource class. For example you can set a default transition for, +   * {@link android.graphics.drawable.Drawable} and that default transition will be used if you, +   * subsequently start requests for specific {@link android.graphics.drawable.Drawable} types like, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} or, +   * {@link android.graphics.drawable.BitmapDrawable}. Specific types are always preferred so if you, +   * register a default transition for both {@link android.graphics.drawable.Drawable} and, +   * {@link android.graphics.drawable.BitmapDrawable} and then start a request for, +   * {@link android.graphics.drawable.BitmapDrawable}s, the transition you registered for, +   * {@link android.graphics.drawable.BitmapDrawable}s will be used., +   */, +  public <T> GlideBuilder setDefaultTransitionOptions(, +      @NonNull Class<T> clazz, @Nullable TransitionOptions<?, T> options) {, +    defaultTransitionOptions.put(clazz, options);, +    return this;, +  }, +, +  /**, +        defaultRequestOptions.lock(),, +        defaultTransitionOptions);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.util.Map;, +      RequestOptions defaultRequestOptions,, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {, +            context, registry, imageViewTargetFactory, defaultRequestOptions,, +            defaultTransitionOptions, engine, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.support.annotation.NonNull;, +import android.support.v4.util.ArrayMap;, +import java.util.Map;, +  private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();, +   * Sets the default {@link TransitionOptions} to use when starting a request that will load a, +   * resource with the given {@link Class}., +   *, +   * <p>It's preferable but not required for the requested resource class to match the resource, +   * class applied here as long as the resource class applied here is assignable from the requested, +   * resource class. For example you can set a default transition for, +   * {@link android.graphics.drawable.Drawable} and that default transition will be used if you, +   * subsequently start requests for specific {@link android.graphics.drawable.Drawable} types like, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} or, +   * {@link android.graphics.drawable.BitmapDrawable}. Specific types are always preferred so if you, +   * register a default transition for both {@link android.graphics.drawable.Drawable} and, +   * {@link android.graphics.drawable.BitmapDrawable} and then start a request for, +   * {@link android.graphics.drawable.BitmapDrawable}s, the transition you registered for, +   * {@link android.graphics.drawable.BitmapDrawable}s will be used., +   */, +  public <T> GlideBuilder setDefaultTransitionOptions(, +      @NonNull Class<T> clazz, @Nullable TransitionOptions<?, T> options) {, +    defaultTransitionOptions.put(clazz, options);, +    return this;, +  }, +, +  /**, +        defaultRequestOptions.lock(),, +        defaultTransitionOptions);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +import android.support.annotation.NonNull;, +import android.support.annotation.VisibleForTesting;, +import java.util.Map;, +import java.util.Map.Entry;, +  @VisibleForTesting, +  static final TransitionOptions<?, ?> DEFAULT_TRANSITION_OPTIONS =, +      new GenericTransitionOptions<Object>();, +  private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions;, +      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions, Engine engine,, +      int logLevel) {, +    this.defaultTransitionOptions = defaultTransitionOptions;, +  @SuppressWarnings("unchecked"), +  @NonNull, +  public <T> TransitionOptions<?, T> getDefaultTransitionOptions(Class<T> transcodeClass) {, +    TransitionOptions<?, ?> result = defaultTransitionOptions.get(transcodeClass);, +    if (result == null) {, +      for (Entry<Class<?>, TransitionOptions<?, ?>> value : defaultTransitionOptions.entrySet()) {, +        if (value.getKey().isAssignableFrom(transcodeClass)) {, +          result = value.getValue();, +        }, +      }, +    }, +    if (result == null) {]