[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import java.util.Collections;, +import java.util.Set;, +    private static final Set<Bitmap.Config> ALLOWED_CONFIGS = Collections.singleton(Bitmap.Config.ARGB_8888);, +        pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +        pool = new LruBitmapPool(3, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +    @Test, +    public void testBitmapsWithDisallowedConfigsAreIgnored() {, +        pool = new LruBitmapPool(100, strategy, Collections.singleton(Bitmap.Config.ARGB_4444));, +, +        Bitmap bitmap = createMutableBitmap(Bitmap.Config.RGB_565);, +        pool.put(bitmap);, +, +        assertEquals(0, strategy.numPuts);, +    }, +, +    @Test, +    public void testBitmapsWithAllowedNullConfigsAreAllowed() {, +        pool = new LruBitmapPool(100, strategy, Collections.<Bitmap.Config>singleton(null));, +, +        Bitmap bitmap = createMutableBitmap();, +        Robolectric.shadowOf(bitmap).setConfig(null);, +, +        pool.put(bitmap);, +, +        assertEquals(1, strategy.numPuts);, +    }, +, +        return createMutableBitmap(Bitmap.Config.ARGB_8888);, +    }, +, +    private Bitmap createMutableBitmap(Bitmap.Config config) {, +        Bitmap bitmap = ShadowBitmap.createBitmap(100, 100, config);, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import java.util.Collections;, +import java.util.Set;, +    private static final Set<Bitmap.Config> ALLOWED_CONFIGS = Collections.singleton(Bitmap.Config.ARGB_8888);, +        pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +        pool = new LruBitmapPool(3, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +    @Test, +    public void testBitmapsWithDisallowedConfigsAreIgnored() {, +        pool = new LruBitmapPool(100, strategy, Collections.singleton(Bitmap.Config.ARGB_4444));, +, +        Bitmap bitmap = createMutableBitmap(Bitmap.Config.RGB_565);, +        pool.put(bitmap);, +, +        assertEquals(0, strategy.numPuts);, +    }, +, +    @Test, +    public void testBitmapsWithAllowedNullConfigsAreAllowed() {, +        pool = new LruBitmapPool(100, strategy, Collections.<Bitmap.Config>singleton(null));, +, +        Bitmap bitmap = createMutableBitmap();, +        Robolectric.shadowOf(bitmap).setConfig(null);, +, +        pool.put(bitmap);, +, +        assertEquals(1, strategy.numPuts);, +    }, +, +        return createMutableBitmap(Bitmap.Config.ARGB_8888);, +    }, +, +    private Bitmap createMutableBitmap(Bitmap.Config config) {, +        Bitmap bitmap = ShadowBitmap.createBitmap(100, 100, config);, +, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.graphics.Bitmap;, +import java.util.Collections;, +                int size = calculator.getBitmapPoolSize();, +                if (DecodeFormat.REQUIRE_ARGB_8888) {, +                    bitmapPool = new LruBitmapPool(size, Collections.singleton(Bitmap.Config.ARGB_8888));, +                } else {, +                    bitmapPool = new LruBitmapPool(size);, +                }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java, +import java.util.Collections;, +import java.util.Set;, +    private static final Set<Bitmap.Config> ALLOWED_CONFIGS = Collections.singleton(Bitmap.Config.ARGB_8888);, +        pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +        pool = new LruBitmapPool(3, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(100, strategy, ALLOWED_CONFIGS);, +        LruBitmapPool pool = new LruBitmapPool(MAX_SIZE, strategy, ALLOWED_CONFIGS);, +    @Test, +    public void testBitmapsWithDisallowedConfigsAreIgnored() {, +        pool = new LruBitmapPool(100, strategy, Collections.singleton(Bitmap.Config.ARGB_4444));, +, +        Bitmap bitmap = createMutableBitmap(Bitmap.Config.RGB_565);, +        pool.put(bitmap);, +, +        assertEquals(0, strategy.numPuts);]