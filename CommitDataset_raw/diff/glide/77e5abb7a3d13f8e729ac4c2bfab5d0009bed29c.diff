[+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java, +  private boolean isAutoCloneEnabled;, +    if (isAutoCloneEnabled) {, +      return clone().sizeMultiplier(sizeMultiplier);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().diskCacheStrategy(strategy);, +    }, +    if (isAutoCloneEnabled) {, +      return clone().priority(priority);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().placeholder(drawable);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().placeholder(resourceId);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().fallback(drawable);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().fallback(resourceId);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().error(drawable);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().error(resourceId);, +    }, +    if (isAutoCloneEnabled) {, +      return clone().theme(theme);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().skipMemoryCache(true);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().override(width, height);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().signature(signature);, +    }, +, +      result.isAutoCloneEnabled = false;, +    if (isAutoCloneEnabled) {, +      return clone().set(option, value);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().decode(resourceClass);, +    }, +, +    return optionalTransform(context, DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop(context));, +    return transform(context, DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop(context));, +    return optionalTransform(context, DownsampleStrategy.CENTER_INSIDE, new FitCenter(context));, +    return transform(context, DownsampleStrategy.CENTER_INSIDE, new FitCenter(context));, +    return optionalTransform(context, DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop(context));, +    return transform(context, DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop(context));, +  }, +, +  final CHILD optionalTransform(Context context, DownsampleStrategy downsampleStrategy,, +      Transformation<Bitmap> transformation) {, +    if (isAutoCloneEnabled) {, +      return clone().optionalTransform(context, downsampleStrategy, transformation);, +    }, +, +    downsample(downsampleStrategy);, +    return optionalTransform(context, transformation);, +  }, +, +  final CHILD transform(Context context, DownsampleStrategy downsampleStrategy,, +      Transformation<Bitmap> transformation) {, +    if (isAutoCloneEnabled) {, +      return clone().transform(context, downsampleStrategy, transformation);, +    }, +, +    downsample(downsampleStrategy);, +    return transform(context, transformation);, +    if (isAutoCloneEnabled) {, +      return clone().transform(context, transformation);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().optionalTransform(context, transformation);, +    }, +, +    if (isAutoCloneEnabled) {, +      return clone().optionalTransform(resourceClass, transformation);, +    }, +, +    if (isAutoCloneEnabled) {]