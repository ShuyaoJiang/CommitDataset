[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            Glide glide, RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapRequestBuilder<A, R>(context, model,, +                transcodeClass, glide, requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            Glide glide, RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapRequestBuilder<A, R>(context, model,, +                transcodeClass, glide, requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapTypeRequest<A>(context, model, streamModelLoader,, +                fileDescriptorModelLoader, glide, requestTracker, optionsApplier));, +        return optionsApplier.apply(model, new GifTypeRequest<A>(context, model, streamModelLoader, glide,, +                requestTracker, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            Glide glide, RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapRequestBuilder<A, R>(context, model,, +                transcodeClass, glide, requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapTypeRequest<A>(context, model, streamModelLoader,, +                fileDescriptorModelLoader, glide, requestTracker, optionsApplier));, +        return optionsApplier.apply(model, new GifTypeRequest<A>(context, model, streamModelLoader, glide,, +                requestTracker, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, +    private final RequestManager.OptionsApplier optionsApplier;, +            Class<T> dataClass, Class<Z> resourceClass, RequestTracker requestTracker,, +            RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new GenericRequestBuilder<A, T, Z, R>(context, model,, +                build(glide, modelLoader, dataClass, resourceClass, transcoder), transcodeClass, glide,, +                requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            Glide glide, RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapRequestBuilder<A, R>(context, model,, +                transcodeClass, glide, requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapTypeRequest<A>(context, model, streamModelLoader,, +                fileDescriptorModelLoader, glide, requestTracker, optionsApplier));, +        return optionsApplier.apply(model, new GifTypeRequest<A>(context, model, streamModelLoader, glide,, +                requestTracker, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, +    private final RequestManager.OptionsApplier optionsApplier;, +            Class<T> dataClass, Class<Z> resourceClass, RequestTracker requestTracker,, +            RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new GenericRequestBuilder<A, T, Z, R>(context, model,, +                build(glide, modelLoader, dataClass, resourceClass, transcoder), transcodeClass, glide,, +                requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/GifTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier){, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new GifRequestBuilder<A, R>(context, model,, +                requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            Glide glide, RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapRequestBuilder<A, R>(context, model,, +                transcodeClass, glide, requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new BitmapTypeRequest<A>(context, model, streamModelLoader,, +                fileDescriptorModelLoader, glide, requestTracker, optionsApplier));, +        return optionsApplier.apply(model, new GifTypeRequest<A>(context, model, streamModelLoader, glide,, +                requestTracker, optionsApplier));, +++ b/library/src/main/java/com/bumptech/glide/GenericTranscodeRequest.java, +    private final RequestManager.OptionsApplier optionsApplier;, +            Class<T> dataClass, Class<Z> resourceClass, RequestTracker requestTracker,, +            RequestManager.OptionsApplier optionsApplier) {, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new GenericRequestBuilder<A, T, Z, R>(context, model,, +                build(glide, modelLoader, dataClass, resourceClass, transcoder), transcodeClass, glide,, +                requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/GifTypeRequest.java, +    private RequestManager.OptionsApplier optionsApplier;, +            RequestTracker requestTracker, RequestManager.OptionsApplier optionsApplier){, +        this.optionsApplier = optionsApplier;, +        return optionsApplier.apply(model, new GifRequestBuilder<A, R>(context, model,, +                requestTracker));, +++ b/library/src/main/java/com/bumptech/glide/RequestManager.java, +    private final OptionsApplier optionsApplier;]