[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, +   * @param e               The maybe {@code null} exception containing information about why the, +   *                        request failed., +  boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, +   * @param e               The maybe {@code null} exception containing information about why the, +   *                        request failed., +  boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, +   * @param e               The maybe {@code null} exception containing information about why the, +   *                        request failed., +  boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.GlideException;, +      public boolean onLoadFailed(GlideException e, Object model, Target target,, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, +   * @param e               The maybe {@code null} exception containing information about why the, +   *                        request failed., +  boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.GlideException;, +      public boolean onLoadFailed(GlideException e, Object model, Target target,, +++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +import static org.mockito.Matchers.isA;, +    Map<Class<?>, Transformation<?>>  transformations = new HashMap<>();, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());, +    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());, +    verify(harness.target, never()).onResourceReady(any(List.class), anyTransition());, +    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean())), +    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean())), +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), anyBoolean(),, +        .onResourceReady(any(List.class), eq(harness.model), isAListTarget(), anyBoolean(),, +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), eq(true),, +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), eq(false),, +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), anyBoolean(),, +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), anyBoolean(),, +        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),, +            anyBoolean(), eq(false));, +    Transition<List> transition = mockTransition();, +    verify(harness.target, times(2)).onResourceReady(eq(harness.result), anyTransition());, +  @SuppressWarnings("unchecked"), +  private static <T> Transition<T> mockTransition() {, +    return mock(Transition.class);, +  }, +, +  @SuppressWarnings("unchecked"), +  private static Target<List> isAListTarget() {, +    return isA(Target.class);, +  }, +, +  private static GlideException isAGlideException() {, +    return isA(GlideException.class);, +  }, +, +  @SuppressWarnings("unchecked"), +  private static <T> Transition<T> anyTransition() {, +    return any(Transition.class);, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.load.engine.GlideException;, +   * @param e               The maybe {@code null} exception containing information about why the, +   *                        request failed., +  boolean onLoadFailed(GlideException e, Object model, Target<R> target, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,, +++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.GlideException;, +      public boolean onLoadFailed(GlideException e, Object model, Target target,, +++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +import static org.mockito.Matchers.isA;, +    Map<Class<?>, Transformation<?>>  transformations = new HashMap<>();, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(harness.target), anyBoolean());, +    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());, +    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());, +    verify(harness.target, never()).onResourceReady(any(List.class), anyTransition());, +    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),]