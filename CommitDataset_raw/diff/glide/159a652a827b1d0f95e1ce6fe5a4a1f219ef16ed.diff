[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final ExecutorService executor;, +        this(context, Executors.newSingleThreadExecutor(), options);, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Handler mainHandler, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, File diskCacheDir, ExecutorService executor, Handler mainHandler, Options options) {, +    public Future getImage(final String path, final LoadedCallback cb){, +    public Future getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Future getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    private Future runJob(String key,final LoadedCallback cb, ImageManagerJob job) {, +        Future result = null;, +            result = executor.submit(job);, +        return result;, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final ExecutorService executor;, +        this(context, Executors.newSingleThreadExecutor(), options);, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Handler mainHandler, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, File diskCacheDir, ExecutorService executor, Handler mainHandler, Options options) {, +    public Future getImage(final String path, final LoadedCallback cb){, +    public Future getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Future getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    private Future runJob(String key,final LoadedCallback cb, ImageManagerJob job) {, +        Future result = null;, +            result = executor.submit(job);, +        return result;, +++ b/library/src/com/bumptech/photos/resize/loader/Approximate.java, +import com.bumptech.photos.resize.LoadedCallback;, +, +import java.util.concurrent.Future;, +    protected Future doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final ExecutorService executor;, +        this(context, Executors.newSingleThreadExecutor(), options);, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Handler mainHandler, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, File diskCacheDir, ExecutorService executor, Handler mainHandler, Options options) {, +    public Future getImage(final String path, final LoadedCallback cb){, +    public Future getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Future getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    private Future runJob(String key,final LoadedCallback cb, ImageManagerJob job) {, +        Future result = null;, +            result = executor.submit(job);, +        return result;, +++ b/library/src/com/bumptech/photos/resize/loader/Approximate.java, +import com.bumptech.photos.resize.LoadedCallback;, +, +import java.util.concurrent.Future;, +    protected Future doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/loader/AsIs.java, +import com.bumptech.photos.resize.LoadedCallback;, +, +import java.util.concurrent.Future;, +    protected Future doFetchImage(String path, int width, int height, final ImageReadyCallback cb) {, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +    private final ExecutorService executor;, +        this(context, Executors.newSingleThreadExecutor(), options);, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, ExecutorService executor, Handler mainHandler, Options options) {, +     * @param executor The ExecutorService used to perform resize operations and image loads. Must not execute Runnables on the, +    public ImageManager(Context context, File diskCacheDir, ExecutorService executor, Handler mainHandler, Options options) {, +    public Future getImage(final String path, final LoadedCallback cb){, +    public Future getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +    public Future getImageApproximate(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future centerCrop(final String path, final int width, final int height, final LoadedCallback cb){, +    public Future fitCenter(final String path, final int width, final int height, final LoadedCallback cb){, +    private Future runJob(String key,final LoadedCallback cb, ImageManagerJob job) {, +        Future result = null;, +            result = executor.submit(job);, +        return result;, +++ b/library/src/com/bumptech/photos/resize/loader/Approximate.java]