[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, +    Transformation<Object> transformation = mock(Transformation.class);, +, +    public Harness() {, +      doAnswer(new Util.WriteDigest("transformation")).when(transformation), +          .updateDiskCacheKey(any(MessageDigest.class));, +    }, +      return new EngineKey(id, signature, width, height,, +          Collections.<Class<?>, Transformation<?>>singletonMap(Object.class, transformation),, +          resourceClass, transcodeClass);, +  public void testDiffersIfTransformationsDiffer() throws NoSuchAlgorithmException {, +    EngineKey first = harness.build();, +    Transformation<Object> other = mock(Transformation.class);, +    doAnswer(new Util.WriteDigest("other")).when(other), +        .updateDiskCacheKey(any(MessageDigest.class));, +    harness.transformation = other;, +    EngineKey second = harness.build();, +    KeyAssertions.assertDifferent(first, second, false /*checkDiskCacheKey*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, +    Transformation<Object> transformation = mock(Transformation.class);, +, +    public Harness() {, +      doAnswer(new Util.WriteDigest("transformation")).when(transformation), +          .updateDiskCacheKey(any(MessageDigest.class));, +    }, +      return new EngineKey(id, signature, width, height,, +          Collections.<Class<?>, Transformation<?>>singletonMap(Object.class, transformation),, +          resourceClass, transcodeClass);, +  public void testDiffersIfTransformationsDiffer() throws NoSuchAlgorithmException {, +    EngineKey first = harness.build();, +    Transformation<Object> other = mock(Transformation.class);, +    doAnswer(new Util.WriteDigest("other")).when(other), +        .updateDiskCacheKey(any(MessageDigest.class));, +    harness.transformation = other;, +    EngineKey second = harness.build();, +    KeyAssertions.assertDifferent(first, second, false /*checkDiskCacheKey*/);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, +import com.bumptech.glide.load.Transformation;, +import java.util.Map;, +  private final Map<Class<?>, Transformation<?>> transformations;, +  public EngineKey(Object model, Key signature, int width, int height,, +      Map<Class<?>, Transformation<?>> transformations, Class<?> resourceClass,, +    this.transformations = Preconditions.checkNotNull(transformations);, +          && transformations.equals(other.transformations), +      hashCode = 31 * hashCode + transformations.hashCode();, +        + ", transformations=" + transformations, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, +    Transformation<Object> transformation = mock(Transformation.class);, +, +    public Harness() {, +      doAnswer(new Util.WriteDigest("transformation")).when(transformation), +          .updateDiskCacheKey(any(MessageDigest.class));, +    }, +      return new EngineKey(id, signature, width, height,, +          Collections.<Class<?>, Transformation<?>>singletonMap(Object.class, transformation),, +          resourceClass, transcodeClass);, +  public void testDiffersIfTransformationsDiffer() throws NoSuchAlgorithmException {, +    EngineKey first = harness.build();, +    Transformation<Object> other = mock(Transformation.class);, +    doAnswer(new Util.WriteDigest("other")).when(other), +        .updateDiskCacheKey(any(MessageDigest.class));, +    harness.transformation = other;, +    EngineKey second = harness.build();, +    KeyAssertions.assertDifferent(first, second, false /*checkDiskCacheKey*/);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java, +import com.bumptech.glide.load.Transformation;, +import java.util.Map;, +  private final Map<Class<?>, Transformation<?>> transformations;, +  public EngineKey(Object model, Key signature, int width, int height,, +      Map<Class<?>, Transformation<?>> transformations, Class<?> resourceClass,, +    this.transformations = Preconditions.checkNotNull(transformations);, +          && transformations.equals(other.transformations), +      hashCode = 31 * hashCode + transformations.hashCode();, +        + ", transformations=" + transformations, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java, +        requestContext.getTransformations(), requestContext.getResourceClass(),, +        requestContext.getTranscodeClass());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java, +import com.bumptech.glide.tests.Util;, +import java.util.Collections;, +    Transformation<Object> transformation = mock(Transformation.class);, +, +    public Harness() {, +      doAnswer(new Util.WriteDigest("transformation")).when(transformation), +          .updateDiskCacheKey(any(MessageDigest.class));, +    }, +      return new EngineKey(id, signature, width, height,, +          Collections.<Class<?>, Transformation<?>>singletonMap(Object.class, transformation),, +          resourceClass, transcodeClass);, +  public void testDiffersIfTransformationsDiffer() throws NoSuchAlgorithmException {, +    EngineKey first = harness.build();, +    Transformation<Object> other = mock(Transformation.class);, +    doAnswer(new Util.WriteDigest("other")).when(other), +        .updateDiskCacheKey(any(MessageDigest.class));]