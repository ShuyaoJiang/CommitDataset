[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.os.Message;, +    private final Handler mainHandler;, +, +        mainHandler = new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());, +    public void onResourceRemoved(final Resource resource) {, +        recycleResource(resource);, +            recycleResource(resource);, +        }, +    }, +, +    private void recycleResource(Resource resource) {, +        // If a resource has sub-resources, releasing a sub resource can cause it's parent to be synchronously, +        // evicted which leads to a recycle loop when the parent the releases it's children. Posting breaks this loops., +        mainHandler.obtainMessage(ResourceRecyclerCallback.RECYCLE_RESOURCE, resource).sendToTarget();, +    }, +, +    private static class ResourceRecyclerCallback implements Handler.Callback {, +        public static final int RECYCLE_RESOURCE = 1;, +, +        @Override, +        public boolean handleMessage(Message message) {, +            if (message.what == RECYCLE_RESOURCE) {, +                Resource resource = (Resource) message.obj;, +                return true;, +            }, +            return false;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.os.Message;, +    private final Handler mainHandler;, +, +        mainHandler = new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());, +    public void onResourceRemoved(final Resource resource) {, +        recycleResource(resource);, +            recycleResource(resource);, +        }, +    }, +, +    private void recycleResource(Resource resource) {, +        // If a resource has sub-resources, releasing a sub resource can cause it's parent to be synchronously, +        // evicted which leads to a recycle loop when the parent the releases it's children. Posting breaks this loops., +        mainHandler.obtainMessage(ResourceRecyclerCallback.RECYCLE_RESOURCE, resource).sendToTarget();, +    }, +, +    private static class ResourceRecyclerCallback implements Handler.Callback {, +        public static final int RECYCLE_RESOURCE = 1;, +, +        @Override, +        public boolean handleMessage(Message message) {, +            if (message.what == RECYCLE_RESOURCE) {, +                Resource resource = (Resource) message.obj;, +                return true;, +            }, +            return false;, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java, +import android.os.Looper;, +, +import org.robolectric.Robolectric;, +import org.robolectric.shadows.ShadowLooper;, +        ShadowLooper shadowLooper = Robolectric.shadowOf(Looper.getMainLooper());, +        shadowLooper.pause();, +        verify(harness.resource, never()).recycle();, +        shadowLooper.runOneTask();, +        ShadowLooper shadowLooper = Robolectric.shadowOf(Looper.getMainLooper());, +        shadowLooper.pause();, +        // We expect the release to be posted, +        verify(harness.resource, never()).recycle();, +        shadowLooper.runOneTask();]