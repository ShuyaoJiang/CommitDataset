[+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +@SuppressWarnings("unchecked"), +, +  @Mock private Target target;, +  @Mock private DiskCache.Factory diskCacheFactory;, +  @Mock private DiskCache diskCache;, +  @Mock private MemoryCache memoryCache;, +  @Mock private Handler bgHandler;, +  @Mock private Lifecycle lifecycle;, +  @Mock private RequestManagerTreeNode treeNode;, +  @Mock private BitmapPool bitmapPool;, +, +  private Context context;, +    MockitoAnnotations.initMocks(this);, +    context = RuntimeEnvironment.application;, +     // Run all tasks on the main thread so they complete synchronously., +    GlideExecutor executor = MockGlideExecutor.newMainThreadExecutor();, +    when(diskCacheFactory.build()).thenReturn(diskCache);, +    Glide.init(, +        context,, +        new GlideBuilder(), +            .setMemoryCache(memoryCache), +            .setDiskCache(diskCacheFactory), +            .setResizeExecutor(executor), +            .setDiskCacheExecutor(executor));, +    Registry registry = Glide.get(context).getRegistry();, +    registerMockModelLoader(, +        GlideUrl.class, InputStream.class, new ByteArrayInputStream(new byte[0]), registry);, +    registerMockModelLoader(, +        File.class, InputStream.class, new ByteArrayInputStream(new byte[0]), registry);, +    registerMockModelLoader(, +        File.class, ParcelFileDescriptor.class, mock(ParcelFileDescriptor.class), registry);, +    registerMockModelLoader(File.class, ByteBuffer.class, ByteBuffer.allocate(10), registry);, +    imageView = new ImageView(context);, +    requestManager = new RequestManager(Glide.get(context), lifecycle, treeNode, context);, +        new GlideBuilder(), +            .setBitmapPool(bitmapPool), +            .setMemoryCache(memoryCache), +            .build(context);, +        new GlideBuilder(), +            .setBitmapPool(bitmapPool), +            .setMemoryCache(memoryCache), +            .build(context);, +        new GlideBuilder(), +            .setBitmapPool(bitmapPool), +            .setMemoryCache(memoryCache), +            .build(context);, +        new GlideBuilder(), +            .setBitmapPool(bitmapPool), +            .setMemoryCache(memoryCache), +            .build(context);, +        new GlideBuilder(), +            .setBitmapPool(bitmapPool), +            .setMemoryCache(memoryCache), +            .build(context);, +    InputStream testGifData = openGif();, +    InputStream testGifData = openGif();, +    Glide.get(context).getRegistry().prepend(failModel, failResource, failFactory);, +  private void mockUri(Uri uri) {, +    mockUri(uri, null);, +    ContentResolver contentResolver = context.getContentResolver();, +    ShadowFileDescriptorContentResolver shadowContentResolver = Shadow.extract(contentResolver);, +    Glide.get(context).getRegistry(), +  private InputStream openGif() throws IOException {, +    return TestResourceUtil.openResource(getClass(), "test.gif");, +    CallSizeReady() {, +    CallSizeReady(int width, int height) {, +    void registerInputStream(Uri uri, InputStream inputStream) {, +    void registerAssetFileDescriptor(Uri uri, AssetFileDescriptor assetFileDescriptor) {]