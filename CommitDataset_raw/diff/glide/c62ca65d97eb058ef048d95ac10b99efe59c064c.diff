[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("Test"));, +, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("test"));, +        when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, +        Exception exception = new RejectedExecutionException("test");, +        when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("Test"));, +, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("test"));, +        when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, +        Exception exception = new RejectedExecutionException("test");, +        when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import static org.junit.Assert.fail;, +        when(parser.parseHeader()).thenThrow(new RuntimeException("Test"));, +            fail("Expected exception is not thrown.");, +        } catch (RuntimeException e) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("Test"));, +, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("test"));, +        when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, +        Exception exception = new RejectedExecutionException("test");, +        when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import static org.junit.Assert.fail;, +        when(parser.parseHeader()).thenThrow(new RuntimeException("Test"));, +            fail("Expected exception is not thrown.");, +        } catch (RuntimeException e) {, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    public InputStream loadData(Priority priority) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("Test"));, +, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("test"));, +        when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, +        Exception exception = new RejectedExecutionException("test");, +        when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import static org.junit.Assert.fail;, +        when(parser.parseHeader()).thenThrow(new RuntimeException("Test"));, +            fail("Expected exception is not thrown.");, +        } catch (RuntimeException e) {, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    public InputStream loadData(Priority priority) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +    private Resource<R> runWrapped() {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;, +        when(harness.cacheLoader.load(any(Key.class), any(ResourceDecoder.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("Test"));, +, +        when(harness.tranformation.transform(any(Resource.class), anyInt(), anyInt())), +                .thenThrow(new RuntimeException("test"));, +        when(harness.transcoder.transcode(any(Resource.class))).thenThrow(new RuntimeException("test"));, +        Exception exception = new RejectedExecutionException("test");, +        when(harness.resizeService.submit(any(Runnable.class))).thenThrow(exception);, +, +, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +import static org.junit.Assert.fail;, +        when(parser.parseHeader()).thenThrow(new RuntimeException("Test"));, +            fail("Expected exception is not thrown.");, +        } catch (RuntimeException e) {, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    public InputStream loadData(Priority priority) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +    private Resource<R> runWrapped() {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullDecoder.java, +    public Resource<Z> decode(T source, int width, int height) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import java.util.concurrent.RejectedExecutionException;, +import static org.junit.Assert.assertEquals;]