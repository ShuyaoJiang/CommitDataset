[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, +        decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class), parser,, +                streamFactory);, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(firstFrame, result.get().getBitmapResource().get());, +    public void testDoesNotCallBitmapDecoderWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        decoder.decode(source, 100, 100);, +, +        verify(bitmapDecoder, never()).decode(any(ImageVideoWrapper.class), anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDoesNotRecycleGifResourceWhenGifTypeButGifHasSingleFrame() throws IOException {, +        verify(gifResource, never()).recycle();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, +        decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class), parser,, +                streamFactory);, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(firstFrame, result.get().getBitmapResource().get());, +    public void testDoesNotCallBitmapDecoderWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        decoder.decode(source, 100, 100);, +, +        verify(bitmapDecoder, never()).decode(any(ImageVideoWrapper.class), anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDoesNotRecycleGifResourceWhenGifTypeButGifHasSingleFrame() throws IOException {, +        verify(gifResource, never()).recycle();, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new ImageVideoGifDrawableLoadProvider(imageVideoDataLoadProvider, gifDrawableLoadProvider, bitmapPool));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, +        decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class), parser,, +                streamFactory);, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(firstFrame, result.get().getBitmapResource().get());, +    public void testDoesNotCallBitmapDecoderWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        decoder.decode(source, 100, 100);, +, +        verify(bitmapDecoder, never()).decode(any(ImageVideoWrapper.class), anyInt(), anyInt());, +    }, +, +    @Test, +    public void testDoesNotRecycleGifResourceWhenGifTypeButGifHasSingleFrame() throws IOException {, +        verify(gifResource, never()).recycle();, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new ImageVideoGifDrawableLoadProvider(imageVideoDataLoadProvider, gifDrawableLoadProvider, bitmapPool));, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java, + *         if (toTransform.getWidth() == outWidth && toTransform.getHeight() == outHeight) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapperResourceDecoderTest.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import static org.mockito.Mockito.never;, +        decoder = new GifBitmapWrapperResourceDecoder(bitmapDecoder, gifDecoder, mock(BitmapPool.class), parser,, +                streamFactory);, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +        assertEquals(firstFrame, result.get().getBitmapResource().get());, +    public void testDoesNotCallBitmapDecoderWhenGifTypeButGifHasSingleFrame() throws IOException {, +        Bitmap firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +        Resource<GifDrawable> gifResource = mockGifResource();, +        when(gifResource.get().getFrameCount()).thenReturn(1);, +        when(gifResource.get().getFirstFrame()).thenReturn(firstFrame);, +, +        when(parser.parse(eq(bis))).thenReturn(ImageHeaderParser.ImageType.GIF);, +        when(gifDecoder.decode(any(InputStream.class), anyInt(), anyInt())).thenReturn(gifResource);, +, +        decoder.decode(source, 100, 100);, +]