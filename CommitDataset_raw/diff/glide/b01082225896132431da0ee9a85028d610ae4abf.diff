[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        request = new DrawableTypeRequest<String>(String.class, mock(ModelLoader.class),, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        request = new DrawableTypeRequest<String>(String.class, mock(ModelLoader.class),, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, Object.class, mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, Object.class, null, Object.class, mock(Glide.class),, +                mock(Lifecycle.class)).load(null);, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        request = new DrawableTypeRequest<String>(String.class, mock(ModelLoader.class),, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, Object.class, mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, Object.class, null, Object.class, mock(Glide.class),, +                mock(Lifecycle.class)).load(null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +                Glide.get(Robolectric.application), String.class, mock(ModelLoader.class), Object.class,, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        request = new DrawableTypeRequest<String>(String.class, mock(ModelLoader.class),, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, Object.class, mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, Object.class, null, Object.class, mock(Glide.class),, +                mock(Lifecycle.class)).load(null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +                Glide.get(Robolectric.application), String.class, mock(ModelLoader.class), Object.class,, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, String.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, Object.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        request = new DrawableTypeRequest<String>(String.class, mock(ModelLoader.class),, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericRequestBuilderTest.java, +        new GenericRequestBuilder(null, Object.class, mock(LoadProvider.class), Object.class, mock(Glide.class),, +        new GenericRequestBuilder(Robolectric.application, Object.class, null, Object.class, mock(Glide.class),, +                mock(Lifecycle.class)).load(null);, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +                Glide.get(Robolectric.application), String.class, mock(ModelLoader.class), Object.class,, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +        when(optionsApplier.apply(any(GenericRequestBuilder.class))).thenAnswer(arg(0));, +        GenericRequestBuilder original = new GenericRequestBuilder(Robolectric.application, String.class,, +        verify(optionsApplier).apply(eq(builder));, +        verify(optionsApplier).apply(eq(builder));, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java]