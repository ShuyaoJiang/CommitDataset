[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, +    public BitmapRequestBuilder<ModelType, TranscodeType> cacheDecoder(ResourceDecoder<File, Bitmap> cacheDecoder) {, +     * Transform images using the given {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., +     *, +     * @see #centerCrop(), +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @param transformations The transformations to apply in order., +     * @return This request builder., +     */, +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(BitmapTransformation... transformations) {, +        super.transform(transformations);, +        return this;, +    }, +, +    /**, +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, +    public BitmapRequestBuilder<ModelType, TranscodeType> cacheDecoder(ResourceDecoder<File, Bitmap> cacheDecoder) {, +     * Transform images using the given {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., +     *, +     * @see #centerCrop(), +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @param transformations The transformations to apply in order., +     * @return This request builder., +     */, +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(BitmapTransformation... transformations) {, +        super.transform(transformations);, +        return this;, +    }, +, +    /**, +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, +    public DrawableRequestBuilder<ModelType> sizeMultiplier(float sizeMultiplier) {, +    public DrawableRequestBuilder<ModelType> decoder(ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> decoder) {, +    public DrawableRequestBuilder<ModelType> cacheDecoder(ResourceDecoder<File, GifBitmapWrapper> cacheDecoder) {, +    public DrawableRequestBuilder<ModelType> encoder(ResourceEncoder<GifBitmapWrapper> encoder) {, +     * Transform {@link android.graphics.drawable.Drawable}s using the given, +     * {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., +     *, +     * <p>, +     *     Note - Bitmap transformations will apply individually to each frame of animated GIF images and also to, +     *     individual {@link Bitmap}s., +     * </p>, +     *, +     * @see #centerCrop(), +     * @see #fitCenter(), +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @param transformations The transformations to apply in order., +     * @return This request builder., +     */, +    public DrawableRequestBuilder<ModelType> transform(BitmapTransformation... transformations) {, +        return bitmapTransform(transformations);, +    }, +, +    /**, +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, +    public BitmapRequestBuilder<ModelType, TranscodeType> cacheDecoder(ResourceDecoder<File, Bitmap> cacheDecoder) {, +     * Transform images using the given {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., +     *, +     * @see #centerCrop(), +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @param transformations The transformations to apply in order., +     * @return This request builder., +     */, +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(BitmapTransformation... transformations) {, +        super.transform(transformations);, +        return this;, +    }, +, +    /**, +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +     * @see #transform(com.bumptech.glide.load.resource.bitmap.BitmapTransformation...), +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;, +    public DrawableRequestBuilder<ModelType> sizeMultiplier(float sizeMultiplier) {, +    public DrawableRequestBuilder<ModelType> decoder(ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> decoder) {, +    public DrawableRequestBuilder<ModelType> cacheDecoder(ResourceDecoder<File, GifBitmapWrapper> cacheDecoder) {, +    public DrawableRequestBuilder<ModelType> encoder(ResourceEncoder<GifBitmapWrapper> encoder) {, +     * Transform {@link android.graphics.drawable.Drawable}s using the given, +     * {@link com.bumptech.glide.load.resource.bitmap.BitmapTransformation}s., +     *, +     * <p>]