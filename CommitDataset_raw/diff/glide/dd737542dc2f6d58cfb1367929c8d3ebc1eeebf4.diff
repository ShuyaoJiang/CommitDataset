[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java, +package com.bumptech.glide.load.engine.prefill;, +, +import android.graphics.Bitmap;, +import android.os.Handler;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.engine.Resource;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.bitmap.BitmapResource;, +import com.bumptech.glide.util.Util;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.InOrder;, +import org.mockito.invocation.InvocationOnMock;, +import org.mockito.stubbing.Answer;, +import org.robolectric.RobolectricTestRunner;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertNotEquals;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.atLeastOnce;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class BitmapPreFillRunnerTest {, +    private BitmapPreFillRunner.Clock clock;, +    private BitmapPool pool;, +    private MemoryCache cache;, +    private List<Bitmap> addedBitmaps = new ArrayList<Bitmap>();, +    private Handler mainHandler;, +, +    @Before, +    public void setUp() {, +        clock = mock(BitmapPreFillRunner.Clock.class);, +, +        pool = mock(BitmapPool.class);, +        when(pool.put(any(Bitmap.class))).thenAnswer(new AddBitmapPoolAnswer(addedBitmaps));, +        cache = mock(MemoryCache.class);, +        when(cache.put(any(Key.class), any(Resource.class))).thenAnswer(new AddBitmapCacheAnswer(addedBitmaps));, +        mainHandler = mock(Handler.class);, +    }, +, +    private BitmapPreFillRunner getHandler(Map<PreFillType, Integer> allocationOrder) {, +        return new BitmapPreFillRunner(pool, cache, new PreFillQueue(allocationOrder), clock, mainHandler);, +    }, +, +    @Test, +    public void testAllocatesABitmapPerSizeInAllocationOrder() {, +        PreFillType size = new PreFillType.Builder(100), +                .setConfig(Bitmap.Config.ARGB_8888), +                .build();, +        final int toAdd = 3;, +        Map<PreFillType, Integer> allocationOrder = new HashMap<PreFillType, Integer>();, +        allocationOrder.put(size, toAdd);, +        BitmapPreFillRunner handler = getHandler(allocationOrder);, +        handler.run();, +, +        Bitmap expected = Bitmap.createBitmap(size.getWidth(), size.getHeight(), size.getConfig());, +        assertThat(addedBitmaps, contains(expected, expected, expected));, +    }, +, +    @Test, +    public void testAllocatesBitmapsInOrderGivenByAllocationOrder() {, +        PreFillType smallWidth = new PreFillType.Builder(50, 100), +                .setConfig(Bitmap.Config.ARGB_8888), +                .build();, +        PreFillType smallHeight = new PreFillType.Builder(100, 50), +                .setConfig(Bitmap.Config.RGB_565), +                .build();, +, +        PreFillType[] expectedOrder = new PreFillType[] {, +                smallWidth,, +                smallHeight,, +                smallWidth,, +                smallHeight,, +        };, +, +        HashMap<PreFillType, Integer> allocationOrder = new HashMap<PreFillType, Integer>();, +        allocationOrder.put(smallWidth, 2);, +        allocationOrder.put(smallHeight, 2);, +        BitmapPreFillRunner handler = getHandler(allocationOrder);]