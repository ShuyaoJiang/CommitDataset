[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java, +import static com.bumptech.glide.request.RequestOptions.bitmapTransform;, +import static com.bumptech.glide.request.RequestOptions.centerCropTransform;, +import com.bumptech.glide.load.resource.bitmap.RoundedCorners;, +    Glide.get(context).clearDiskCache();, +  public void load_withBitmapResourceId_asDrawable_withTransformation_producesNonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Drawable drawable = Glide.with(context), +        .load(android.R.drawable.star_big_off), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +    assertThat(drawable).isNotNull();, +  }, +, +  @Test, +  public void load_withBitmapAliasResourceId_asDrawable_withTransformation_producesNonNullDrawable(), +      throws ExecutionException, InterruptedException {, +    Drawable drawable = Glide.with(context), +        .load(ResourceIds.drawable.bitmap_alias), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +    assertThat(drawable).isNotNull();, +  }, +, +  @Test, +  public void load_withShapeDrawableResourceId_asDrawable_withTransformation_sizeOriginal_fails(), +      throws ExecutionException, InterruptedException {, +    expectedException.expect(ExecutionException.class);, +    Glide.with(context), +        .load(ResourceIds.drawable.shape_drawable), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +  }, +, +  @Test, +  public void load_withShapeDrawableResourceId_asDrawable_withTransformation_validSize_succeeds(), +      throws ExecutionException, InterruptedException {, +    Drawable drawable = Glide.with(context), +        .load(ResourceIds.drawable.shape_drawable), +        .apply(bitmapTransform(new RoundedCorners(10))), +        .submit(100, 200), +        .get();, +    assertThat(drawable).isNotNull();, +    assertThat(drawable.getIntrinsicWidth()).isEqualTo(100);, +    assertThat(drawable.getIntrinsicHeight()).isEqualTo(200);, +  }, +, +  @Test, +  public void load_withShapeDrawableResourceId_asBitmap_withValidSizeAndTransform_nonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.shape_drawable), +        .apply(centerCropTransform()), +        .submit(100, 200), +        .get();, +    assertThat(bitmap).isNotNull();, +    assertThat(bitmap.getWidth()).isEqualTo(100);, +    assertThat(bitmap.getHeight()).isEqualTo(200);, +  }, +, +  @Test, +  public void load_withStateListDrawableResourceId_asDrawable_withTransformation_nonNullDrawable(), +      throws ExecutionException, InterruptedException {, +    Drawable drawable = Glide.with(context), +        .load(ResourceIds.drawable.state_list_drawable), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +    assertThat(drawable).isNotNull();, +  }, +, +  @Test, +  public void load_withStateListDrawableResourceId_asBitmap_withTransformation_nonNullBitmap(), +      throws ExecutionException, InterruptedException {, +    Bitmap bitmap = Glide.with(context), +        .asBitmap(), +        .load(ResourceIds.drawable.state_list_drawable), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +    assertThat(bitmap).isNotNull();, +  }, +, +  @Test, +  public void load_withVectorDrawableResourceId_asDrawable_withTransformation_nonNullDrawable(), +      throws ExecutionException, InterruptedException {, +    Drawable drawable = Glide.with(context), +        .load(ResourceIds.drawable.vector_drawable), +        .apply(centerCropTransform()), +        .submit(), +        .get();, +    assertThat(drawable).isNotNull();, +  }, +, +  @Test, +  public void load_withVectorDrawableResourceId_asBitmap_withTransformation_producesNonNullBitmap()]