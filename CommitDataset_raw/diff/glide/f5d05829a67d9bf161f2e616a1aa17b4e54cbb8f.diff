[+++ b/build.gradle, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +++ b/build.gradle, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +++ b/build.gradle, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testCacheIsChecked() {, +, +, +        boolean isMemoryCacheable;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/build.gradle, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testCacheIsChecked() {, +, +, +        boolean isMemoryCacheable;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ /dev/null, +++ b/build.gradle, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +        // TODO: remove this when robolectric 2.4 is released., +        maven {, +            url 'https://oss.sonatype.org/content/repositories/snapshots', +        }, +++ b/gradle.properties, +ROBOLECTRIC_VERSION=2.4-SNAPSHOT, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testCacheIsChecked() {, +, +, +        boolean isMemoryCacheable;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    private GifFrameManager frameManager = mock(GifFrameManager.class);, +    private Drawable.Callback cb = mock(Drawable.Callback.class);, +        drawable = new GifDrawable(gifDecoder, frameManager, firstFrame, bitmapPool);, +        drawable = new GifDrawable(gifDecoder, frameManager, firstFrame, bitmapPool);, +        drawable.onFrameRead(0);, +        when(frameManager.getCurrentFrame()).thenReturn(null);, +        drawable = new GifDrawable(gifDecoder, frameManager, null, bitmapPool);, +        when(frameManager.getCurrentFrame()).thenReturn(currentFrame);, +        verify(frameManager).getNextFrame(eq(drawable));, +        verify(frameManager).getNextFrame(eq(drawable));, +        verify(frameManager, never()).getNextFrame(any(GifFrameManager.FrameCallback.class));, +        verify(frameManager, never()).getNextFrame(any(GifFrameManager.FrameCallback.class));, +        verify(frameManager, times(1)).getNextFrame(eq(drawable));, +    public void testStartsLoadingNextFrameWhenCurrentFinishes() {, +        drawable.setIsRunning(true);, +        drawable.onFrameRead(0);, +, +        verify(frameManager).getNextFrame(eq(drawable));, +    }, +, +    @Test, +        drawable.onFrameRead(0);, +    public void testDoesNotStartLoadingNextFrameWhenCurrentFinishesIfNotRunning() {, +        drawable.setIsRunning(false);, +        drawable.onFrameRead(0);, +]