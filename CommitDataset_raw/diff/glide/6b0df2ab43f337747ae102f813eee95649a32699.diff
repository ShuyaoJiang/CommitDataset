[+++ b/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java, +import android.annotation.TargetApi;, +import android.content.res.Resources;, +import android.graphics.Canvas;, +import android.graphics.ColorFilter;, +import android.graphics.Matrix;, +import android.graphics.PorterDuff;, +import android.graphics.Rect;, +import android.graphics.RectF;, +import android.os.Build;, +, +import com.bumptech.glide.util.Preconditions;, +public class FixedSizeDrawable extends Drawable {, +  private final Matrix matrix;, +  private final RectF wrappedRect;, +  private final RectF bounds;, +  private Drawable wrapped;, +  private State state;, +  private boolean mutated;, +, +  public FixedSizeDrawable(Drawable wrapped, int width, int height) {, +    this(new State(wrapped.getConstantState(), width, height), wrapped);, +  }, +, +  FixedSizeDrawable(State state, Drawable wrapped) {, +    this.state = Preconditions.checkNotNull(state);, +    this.wrapped = Preconditions.checkNotNull(wrapped);, +, +    // We will do our own scaling., +    wrapped.setBounds(0, 0, wrapped.getIntrinsicWidth(), wrapped.getIntrinsicHeight());, +, +    matrix = new Matrix();, +    wrappedRect = new RectF(0, 0, wrapped.getIntrinsicWidth(), wrapped.getIntrinsicHeight());, +    bounds = new RectF();, +  }, +, +  @Override, +  public void setBounds(int left, int top, int right, int bottom) {, +    super.setBounds(left, top, right, bottom);, +    bounds.set(left, top, right, bottom);, +    updateMatrix();, +  }, +, +  @Override, +  public void setBounds(Rect bounds) {, +    super.setBounds(bounds);, +    this.bounds.set(bounds);, +    updateMatrix();, +  }, +, +  private void updateMatrix() {, +    matrix.setRectToRect(wrappedRect, this.bounds, Matrix.ScaleToFit.CENTER);, +  }, +, +  @Override, +  public void setChangingConfigurations(int configs) {, +    wrapped.setChangingConfigurations(configs);, +  }, +, +  @Override, +  public int getChangingConfigurations() {, +    return wrapped.getChangingConfigurations();, +  }, +, +  @Override, +  public void setDither(boolean dither) {, +    wrapped.setDither(dither);, +  }, +, +  @Override, +  public void setFilterBitmap(boolean filter) {, +    wrapped.setFilterBitmap(filter);, +  }, +, +  @TargetApi(Build.VERSION_CODES.HONEYCOMB), +  @Override, +  public Callback getCallback() {, +    return wrapped.getCallback();, +  }, +, +  @TargetApi(Build.VERSION_CODES.KITKAT), +  @Override, +  public int getAlpha() {, +    return wrapped.getAlpha();, +  }, +, +  @Override, +  public void setColorFilter(int color, PorterDuff.Mode mode) {, +    wrapped.setColorFilter(color, mode);, +  }, +, +  @Override, +  public void clearColorFilter() {, +    wrapped.clearColorFilter();, +  }, +, +  @Override, +  public Drawable getCurrent() {, +    return wrapped.getCurrent();, +  }]