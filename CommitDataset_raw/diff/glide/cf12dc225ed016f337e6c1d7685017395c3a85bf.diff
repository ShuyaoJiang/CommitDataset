[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import org.robolectric.RobolectricTestRunner;, +  public void testReturnsSizeFromDrawable() {, +    when(drawable.getSize()).thenReturn(size);, +    assertEquals(size, resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import org.robolectric.RobolectricTestRunner;, +  public void testReturnsSizeFromDrawable() {, +    when(drawable.getSize()).thenReturn(size);, +    assertEquals(size, resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +  @Mock private Drawable.Callback cb;, +  @Mock private BitmapPool bitmapPool;, +  @Mock private GifFrameLoader frameLoader;, +  @Mock private Paint paint;, +  @Mock private Transformation<Bitmap> transformation;, +    MockitoAnnotations.initMocks(this);, +    drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, +    when(frameLoader.getWidth()).thenReturn(frameWidth);, +    when(frameLoader.getHeight()).thenReturn(frameHeight);, +    when(frameLoader.getCurrentFrame()).thenReturn(firstFrame);, +    drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, +    verify(frameLoader).subscribe(eq(drawable));, +    verify(frameLoader).subscribe(eq(drawable));, +    verify(frameLoader, never()).subscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(1);, +    verify(frameLoader, never()).subscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(1);, +    verify(frameLoader, times(1)).subscribe(eq(drawable));, +    verify(frameLoader).unsubscribe(eq(drawable));, +  public void testUnsubscribesWhenCurrentFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {, +    verify(frameLoader).unsubscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(expected);, +  public void testReturnsSizeFromFrameLoader() {, +    int size = 1243;, +    when(frameLoader.getSize()).thenReturn(size);, +, +    assertThat(drawable.getSize()).isEqualTo(size);, +  }, +, +  @Test, +        new GifDrawable(RuntimeEnvironment.application, provider, bitmapPool,, +            ByteBuffer.allocate(10), transformation, 100, 100, gifHeader, firstFrame);, +  public void testReturnsFrameWidthAndHeightForIntrinsicDimensions() {, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    when(frameLoader.getFrameCount()).thenReturn(2);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    when(frameLoader.getLoopCount()).thenReturn(loopCount);, +    when(frameLoader.getFrameCount()).thenReturn(frameCount);, +    verify(frameLoader).setFrameTransformation(eq(transformation), eq(bitmap));, +  public void testThrowsIfConstructedWithNullFirstFrame() {, +        bitmapPool, ByteBuffer.allocate(10), transformation, 100, 100,, +        mock(GifHeader.class), null);, +    Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);, +    drawable.setFrameTransformation(newTransformation, bitmap);, +    verify(frameLoader).setFrameTransformation(eq(newTransformation), eq(bitmap));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java, +import org.robolectric.RobolectricTestRunner;, +  public void testReturnsSizeFromDrawable() {, +    when(drawable.getSize()).thenReturn(size);, +    assertEquals(size, resource.getSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +import static com.google.common.truth.Truth.assertThat;, +import org.robolectric.RobolectricTestRunner;, +, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +  @Mock private Drawable.Callback cb;, +  @Mock private BitmapPool bitmapPool;, +  @Mock private GifFrameLoader frameLoader;, +  @Mock private Paint paint;, +  @Mock private Transformation<Bitmap> transformation;, +    MockitoAnnotations.initMocks(this);, +    drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, +    when(frameLoader.getWidth()).thenReturn(frameWidth);, +    when(frameLoader.getHeight()).thenReturn(frameHeight);, +    when(frameLoader.getCurrentFrame()).thenReturn(firstFrame);, +    drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);, +    verify(frameLoader).subscribe(eq(drawable));, +    verify(frameLoader).subscribe(eq(drawable));, +    verify(frameLoader, never()).subscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(1);, +    verify(frameLoader, never()).subscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(1);, +    verify(frameLoader, times(1)).subscribe(eq(drawable));, +    verify(frameLoader).unsubscribe(eq(drawable));, +  public void testUnsubscribesWhenCurrentFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {, +    verify(frameLoader).unsubscribe(eq(drawable));, +    when(frameLoader.getFrameCount()).thenReturn(expected);, +  public void testReturnsSizeFromFrameLoader() {]