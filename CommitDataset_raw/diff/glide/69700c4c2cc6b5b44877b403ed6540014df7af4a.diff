[+++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +import android.support.annotation.NonNull;, +import com.bumptech.glide.signature.ObjectKey;, +import com.google.common.base.Equivalence;, +import com.google.common.testing.EquivalenceTester;, +  // Varargs, +  @SuppressWarnings("unchecked"), +    EquivalenceTester<SingleRequestBuilder> tester = EquivalenceTester, +        .of(new Equivalence<SingleRequestBuilder>() {, +          @Override, +          protected boolean doEquivalent(, +              @NonNull SingleRequestBuilder a, @NonNull SingleRequestBuilder b) {, +            return a.build().isEquivalentTo(b.build()) && b.build().isEquivalentTo(a.build());, +          @Override, +          protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {, +            return 0;, +          }, +        });, +    tester, +        .addEquivalenceGroup(, +            new SingleRequestBuilder(),, +            new SingleRequestBuilder(),, +            // Non-null request listeners are treated as equivalent, even if they're not equal., +            new SingleRequestBuilder().setRequestListener(mock(RequestListener.class))), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setRequestListener(null),, +            new SingleRequestBuilder().setRequestListener(null)), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setOverrideHeight(500),, +            new SingleRequestBuilder().setOverrideHeight(500)), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setOverrideWidth(500),, +            new SingleRequestBuilder().setOverrideWidth(500)), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setModel(12345),, +            new SingleRequestBuilder().setModel(12345)), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setModel(null),, +            new SingleRequestBuilder().setModel(null)), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY)),, +            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY))), +        .addEquivalenceGroup(, +            new SingleRequestBuilder().setPriority(Priority.LOW),, +            new SingleRequestBuilder().setPriority(Priority.LOW)), +        .test();, +  }, +  static final class SingleRequestBuilder {, +    private Key signature = new ObjectKey(12345);]