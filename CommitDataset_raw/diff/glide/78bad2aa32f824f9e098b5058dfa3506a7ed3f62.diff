[+++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +        final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +        final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    private final String id;, +    public ByteArrayFetcher(byte[] bytes, String id) {, +        this.id = id;, +    public String getId() {, +        return id;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +        final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    private final String id;, +    public ByteArrayFetcher(byte[] bytes, String id) {, +        this.id = id;, +    public String getId() {, +        return id;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Returns a string uniquely identifying the data that this fetcher will fetch including the specific size., +     *, +     * <p>, +     *     A hash of the bytes of the data that will be fetched is the ideal id but since that is in many cases, +     *     impractical and not performant, urls, file paths, and uris are normally sufficient., +     * </p>, +     */, +    public String getId();, +, +    /**, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +        final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    private final String id;, +    public ByteArrayFetcher(byte[] bytes, String id) {, +        this.id = id;, +    public String getId() {, +        return id;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Returns a string uniquely identifying the data that this fetcher will fetch including the specific size., +     *, +     * <p>, +     *     A hash of the bytes of the data that will be fetched is the ideal id but since that is in many cases, +     *     impractical and not performant, urls, file paths, and uris are normally sufficient., +     * </p>, +     */, +    public String getId();, +, +    /**, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, +    @Override, +    public String getId() {, +        return uri.toString();, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/ModelRequest.java, +        final StreamByteArrayLoader loader = new StreamByteArrayLoader(id);, +++ b/library/src/main/java/com/bumptech/glide/load/data/ByteArrayFetcher.java, +    private final String id;, +    public ByteArrayFetcher(byte[] bytes, String id) {, +        this.id = id;, +    public String getId() {, +        return id;, +    }, +, +    @Override, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java, +     * Returns a string uniquely identifying the data that this fetcher will fetch including the specific size., +     *, +     * <p>, +     *     A hash of the bytes of the data that will be fetched is the ideal id but since that is in many cases, +     *     impractical and not performant, urls, file paths, and uris are normally sufficient., +     * </p>, +     */, +    public String getId();, +, +    /**, +++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java, +    @Override, +    public String getId() {, +        return uri.toString();, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/load/data/MediaStoreThumbFetcher.java, +    private final long dateModified;, +    private final int orientation;, +    private String mimeType;, +            int width, int height, String mimeType, long dateModified, int orientation) {, +        this(context, mediaStoreUri, defaultFetcher, width, height, mimeType, dateModified, orientation,, +                DEFAULT_FACTORY);, +            int height, String mimeType, long dateModified, int orientation, ThumbnailStreamOpenerFactory factory) {, +        this.mimeType = mimeType;]