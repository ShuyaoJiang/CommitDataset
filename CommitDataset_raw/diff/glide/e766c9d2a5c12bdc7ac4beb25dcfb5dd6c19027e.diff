[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java, +package com.bumptech.glide.annotation.compiler;, +, +import com.bumptech.glide.annotation.Excludes;, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeSpec.Builder;, +import com.squareup.javapoet.WildcardTypeName;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +, +/**, + * Generates a new implementation of a AppGlideModule that calls all included ChildGlideModules and, + * the original AppGlideModule., + *, + * <p>The generated class will always call the AppGlideModule last to give it priority over choices, + * made or classes registered in ChildGlideModules., + *, + * <p>Android logging is included to allow developers to see exactly which modules are included at, + * runtime., + *, + * <p>The generated class looks something like this:, + * <pre>, + * <code>, + *  final class GeneratedAppGlideModuleImpl extends com.bumptech.glide.GeneratedAppGlideModule {, + *    private final com.bumptech.glide.samples.giphy.GiphyGlideModule appGlideModule;, + *, + *    GeneratedAppGlideModule() {, + *      appGlideModule = new com.bumptech.glide.samples.giphy.GiphyGlideModule();, + *      if (android.util.Log.isLoggable("Glide", android.util.Log.DEBUG)) {, + *        android.util.Log.d("Glide", "Discovered AppGlideModule from annotation:", + *            + " com.bumptech.glide.samples.giphy.GiphyGlideModule");, + *        android.util.Log.d("Glide", "Discovered ChildGlideModule from annotation:", + *            + "com.bumptech.glide.integration.okhttp3.OkHttpChildGlideModule");, + *      }, + *    }, + *, + *    {@literal @java.lang.Override}, + *    public void applyOptions(android.content.Context context,, + *        com.bumptech.glide.GlideBuilder builder) {, + *      appGlideModule.applyOptions(context, builder);, + *    }, + *, + *    {@literal @java.lang.Override}, + *    public void registerComponents(android.content.Context context,, + *        com.bumptech.glide.Registry registry) {, + *      new com.bumptech.glide.integration.okhttp3.OkHttpChildGlideModule(), + *          .registerComponents(context, registry);, + *      appGlideModule.registerComponents(context, registry);, + *    }, + *, + *    {@literal @java.lang.Override}, + *    public boolean isManifestParsingEnabled() {, + *      return appGlideModule.isManifestParsingEnabled();, + *    }, + *, + *    {@literal @java.lang.Override}, + *    public java.util.Set<java.lang.Class<?>> getExcludedModuleClasses() {, + *      return appGlideModule.getExcludedModuleClasses();, + *    }, + *  }, + * </code>, + * </pre>, + */, +final class AppModuleGenerator {, +  static final String GENERATED_ROOT_MODULE_PACKAGE_NAME = "com.bumptech.glide";, +  private static final String GLIDE_LOG_TAG = "Glide";, +  private static final String GENERATED_APP_MODULE_IMPL_SIMPLE_NAME =, +      "GeneratedAppGlideModuleImpl";, +  private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedAppGlideModule";, +  private final ProcessorUtil processorUtil;, +, +  AppModuleGenerator(ProcessorUtil processorUtil) {, +    this.processorUtil = processorUtil;, +  }, +, +  TypeSpec generate(TypeElement appGlideModule, Set<String> childGlideModuleClassNames) {, +    ClassName appGlideModuleClassName = ClassName.get(appGlideModule);, +    Set<String> excludedGlideModuleClassNames =, +        getExcludedGlideModuleClassNames(appGlideModule);, +, +    MethodSpec constructor =, +        generateConstructor(, +            appGlideModuleClassName, childGlideModuleClassNames, excludedGlideModuleClassNames);, +, +    MethodSpec registerComponents =, +        generateRegisterComponents(childGlideModuleClassNames, excludedGlideModuleClassNames);, +, +    MethodSpec getExcludedModuleClasses =, +        generateGetExcludedModuleClasses(excludedGlideModuleClassNames);, +, +    MethodSpec applyOptions =, +        MethodSpec.methodBuilder("applyOptions")]