[+++ b/library/src/com/bumptech/glide/Glide.java, + * {@link ImageLoader} and {@link ModelLoaderFactory}s. This class provides most of the functionality of, +    private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();, +    private final WeakHashMap<ImageView, WeakReference<ImageViewTarget>> imageViewToTarget =, +            new WeakHashMap<ImageView, WeakReference<ImageViewTarget>>();, +, +    private ImageManager imageManager = null;, +     * Set the {@link ImageManager} to use with {@link Glide.Request}., +     *, +     * <p>, +     *     Note - The factory must not be an anonymous inner class of an Activity or another object that cannot be, +     *     retained statically., +     * </p>, +     *, +    private ImageViewTarget getImageViewTarget(ImageView imageView) {, +        final WeakReference<ImageViewTarget> ref = imageViewToTarget.get(imageView);, +        return ref != null ? ref.get() : null;, +    }, +, +    private ImageViewTarget getImageViewTargetOrSet(ImageView imageView) {, +        ImageViewTarget result = getImageViewTarget(imageView);, +        if (result == null) {, +            result = new ImageViewTarget(imageView);, +            imageViewToTarget.put(imageView, new WeakReference<ImageViewTarget>(result));, +        }, +        return result;, +    }, +, +         * Start loading the image into the view., +         *, +         * <p>, +         *     Note - This method will call {@link ImageView#setTag(Object)} and may silently overwrite any tag that, +         *     might already be set on the view., +         * </p>, +         * @param imageView The view that will display the image, +        /**, +         * Set the target the image will be loaded into., +         *, +         * <p>, +         *     Note - This method does not actually start loading the view. You must first pass in a {@link Context} to, +         *     returned Request via {@link ContextRequest#with(android.content.Context)}., +         * </p>, +         *, +         * @param target The target to load te image for, +         * @return A {@link ContextRequest} that can start the load, +         */, +    /**, +     * An request for the user to provide an {@link Context} to start an image load, +     */, +        /**, +         * Start loading the image using the given context. The context will not be referenced statically so any, +         * context is acceptable., +         *, +         * @param context The context to use to help load the image, +         */, +++ b/library/src/com/bumptech/glide/Glide.java, + * {@link ImageLoader} and {@link ModelLoaderFactory}s. This class provides most of the functionality of, +    private final GenericLoaderFactory loaderFactory = new GenericLoaderFactory();, +    private final WeakHashMap<ImageView, WeakReference<ImageViewTarget>> imageViewToTarget =, +            new WeakHashMap<ImageView, WeakReference<ImageViewTarget>>();, +, +    private ImageManager imageManager = null;, +     * Set the {@link ImageManager} to use with {@link Glide.Request}., +     *, +     * <p>, +     *     Note - The factory must not be an anonymous inner class of an Activity or another object that cannot be, +     *     retained statically., +     * </p>, +     *, +    private ImageViewTarget getImageViewTarget(ImageView imageView) {, +        final WeakReference<ImageViewTarget> ref = imageViewToTarget.get(imageView);, +        return ref != null ? ref.get() : null;, +    }, +, +    private ImageViewTarget getImageViewTargetOrSet(ImageView imageView) {, +        ImageViewTarget result = getImageViewTarget(imageView);, +        if (result == null) {, +            result = new ImageViewTarget(imageView);, +            imageViewToTarget.put(imageView, new WeakReference<ImageViewTarget>(result));, +        }, +        return result;, +    }, +, +         * Start loading the image into the view., +         *, +         * <p>, +         *     Note - This method will call {@link ImageView#setTag(Object)} and may silently overwrite any tag that, +         *     might already be set on the view., +         * </p>, +         * @param imageView The view that will display the image, +        /**, +         * Set the target the image will be loaded into., +         *, +         * <p>, +         *     Note - This method does not actually start loading the view. You must first pass in a {@link Context} to, +         *     returned Request via {@link ContextRequest#with(android.content.Context)}., +         * </p>, +         *, +         * @param target The target to load te image for, +         * @return A {@link ContextRequest} that can start the load]