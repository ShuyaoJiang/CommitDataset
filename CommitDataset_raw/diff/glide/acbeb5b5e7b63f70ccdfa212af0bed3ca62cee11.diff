[+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, +        return request == full && !isAnyRequestComplete();, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, +        return request == full && !isAnyRequestComplete();, +++ b/library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java, +    public void testCallsEngineWithOverrideWidthAndHeightIfSet() {, +    @Test, +    public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {, +        harness.errorDrawable = new ColorDrawable(Color.RED);, +        GenericRequest<Object, Object, Object, Object> request = harness.getRequest();, +        when(harness.requestCoordinator.canSetPlaceholder(any(Request.class))).thenReturn(false);, +        request.onException(new IOException("Test"));, +, +        verify(harness.target, never()).setPlaceholder(any(Drawable.class));, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java, +        return request == full && !isAnyRequestComplete();, +++ b/library/src/test/java/com/bumptech/glide/request/GenericRequestTest.java, +    public void testCallsEngineWithOverrideWidthAndHeightIfSet() {, +    @Test, +    public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {, +        harness.errorDrawable = new ColorDrawable(Color.RED);, +        GenericRequest<Object, Object, Object, Object> request = harness.getRequest();, +        when(harness.requestCoordinator.canSetPlaceholder(any(Request.class))).thenReturn(false);, +        request.onException(new IOException("Test"));, +, +        verify(harness.target, never()).setPlaceholder(any(Drawable.class));, +    }, +, +++ b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java, +, +    @Test, +    public void testDoesNotAllowThumbToSetPlaceholder() {, +        assertFalse(coordinator.canSetPlaceholder(thumb));, +    }, +, +    @Test, +    public void testAllowsFullToSetPlaceholder() {, +        assertTrue(coordinator.canSetPlaceholder(full));, +    }, +, +    @Test, +    public void testDoesNotAllowFullToSetPlaceholderIfThumbComplete() {, +        when(thumb.isComplete()).thenReturn(true);, +        assertFalse(coordinator.canSetPlaceholder(full));, +    }]