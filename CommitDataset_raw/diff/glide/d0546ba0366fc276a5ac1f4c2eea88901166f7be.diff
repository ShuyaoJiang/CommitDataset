[+++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +            previous.recycle();, +        return GenericRequest.obtain(, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +            previous.recycle();, +        return GenericRequest.obtain(, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +import java.util.ArrayDeque;, +import java.util.Queue;, +    private static final String TAG = "GenericRequest";, +    private int placeholderResourceId;, +    private int errorResourceId;, +    private Context context;, +    private Transformation<Z> transformation;, +    private LoadProvider<A, T, Z, R> loadProvider;, +    private RequestCoordinator requestCoordinator;, +    private A model;, +    private Class<R> transcodeClass;, +    private boolean isMemoryCacheable;, +    private Priority priority;, +    private Target<R> target;, +    private RequestListener<A, R> requestListener;, +    private float sizeMultiplier;, +    private Engine engine;, +    private GlideAnimationFactory<R> animationFactory;, +    private int overrideWidth;, +    private int overrideHeight;, +    private String tag = String.valueOf(hashCode());, +    private static final Queue<GenericRequest> queue = new ArrayDeque<GenericRequest>();, +, +    @SuppressWarnings("unchecked"), +    public static <A, T, Z, R> GenericRequest<A, T, Z, R> obtain(, +            LoadProvider<A, T, Z, R> loadProvider,, +            A model,, +            Context context,, +            Priority priority,, +            Target<R> target,, +            float sizeMultiplier,, +            Drawable placeholderDrawable,, +            int placeholderResourceId,, +            Drawable errorDrawable,, +            int errorResourceId,, +            RequestListener<A, R> requestListener,, +            RequestCoordinator requestCoordinator,, +            Engine engine,, +            Transformation<Z> transformation,, +            Class<R> transcodeClass,, +            boolean isMemoryCacheable,, +            GlideAnimationFactory<R> animationFactory,, +            int overrideWidth,, +            int overrideHeight) {, +        GenericRequest request = queue.poll();, +        if (request == null) {, +            request = new GenericRequest();, +        }, +        request.init(loadProvider,, +                model,, +                context,, +                priority,, +                target,, +                sizeMultiplier,, +                placeholderDrawable,, +                placeholderResourceId,, +                errorDrawable,, +                errorResourceId,, +                requestListener,, +                requestCoordinator,, +                engine,, +                transformation,, +                transcodeClass,, +                isMemoryCacheable,, +                animationFactory,, +                overrideWidth,, +                overrideHeight);, +        return request;, +    }, +, +    private GenericRequest() {, +, +    }, +, +    @Override, +    public void recycle() {, +        loadProvider = null;, +        model = null;, +        context = null;, +        target = null;, +        placeholderDrawable = null;, +        errorDrawable = null;, +        requestListener = null;, +        requestCoordinator = null;, +        engine = null;, +        transformation = null;, +        animationFactory = null;, +        isCancelled = false;, +        isError = false;, +        loadedFromMemoryCache = false;, +        loadStatus = null;, +        isRunning = false;, +        queue.offer(this);]