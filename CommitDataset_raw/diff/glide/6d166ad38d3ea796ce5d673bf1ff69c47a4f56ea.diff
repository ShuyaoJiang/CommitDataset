[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import com.bumptech.glide.load.Options;, + * Manages component registration to extend or replace Glide's default loading, decoding, and, + * encoding logic., +  /**, +   * Registers the given {@link Encoder} for the given data class (InputStream, FileDescriptor etc)., +   *, +   * <p>The {@link Encoder} will be used both for the exact data class and any subtypes. For, +   * example, registering an {@link Encoder} for {@link java.io.InputStream} will result in the, +   * {@link Encoder} being used for, +   * {@link android.content.res.AssetFileDescriptor.AutoCloseInputStream},, +   * {@link java.io.FileInputStream} and any other subclass., +   *, +   * <p>If multiple {@link Encoder}s are registered for the same type or super type, the, +   * {@link Encoder} that is registered first will be used. As a result, it's not currently possible, +   * to replace Glide's default {@link Encoder}s., +   */, +  /**, +   * Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s, +   * allowing it to be used if all earlier and default {@link ResourceDecoder}s for the given types, +   * fail (or if none are present)., +   *, +   * <p>If you're attempting to replace an existing {@link ResourceDecoder} or would like to ensure, +   * that your {@link ResourceDecoder} gets the chance to run before an existing, +   * {@link ResourceDecoder}, use {@link #prepend(Class, Class, ResourceDecoder)}. This method is, +   * best for new types of resources and data or as a way to add an additional fallback decoder, +   * for an existing type of data., +   *, +   * @see #prepend(Class, Class, ResourceDecoder), +   *, +   * @param dataClass The data that will be decoded from, +   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc)., +   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc)., +   * @param decoder The {@link ResourceDecoder} to register., +   */, +  public <Data, TResource> Registry append(, +      Class<Data> dataClass,, +      Class<TResource> resourceClass,, +  /**, +   * Prepends the given {@link ResourceDecoder} into the list of available {@link ResourceDecoder}s, +   * so that it is attempted before all later and default {@link ResourceDecoder}s for the given, +   * types., +   *, +   * <p>This method allows you to replace the default {@link ResourceDecoder} because it ensures, +   * the registered {@link ResourceDecoder} will run first. You can use the, +   * {@link ResourceDecoder#handles(Object, Options)} to fall back to the default, +   * {@link ResourceDecoder}s if you only want to change the default functionality for certain, +   * types of data., +   *, +   * @see #append(Class, Class, ResourceDecoder), +   *, +   * @param dataClass The data that will be decoded from, +   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc)., +   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc)., +   * @param decoder The {@link ResourceDecoder} to register., +   */, +  public <Data, TResource> Registry prepend(, +      Class<Data> dataClass,, +      Class<TResource> resourceClass,, +  /**, +   * Registers the given {@link ResourceEncoder} for the given resource class, +   * ({@link android.graphics.Bitmap}, {@link com.bumptech.glide.load.resource.gif.GifDrawable}, +   * etc)., +   *, +   * <p>The {@link ResourceEncoder} will be used both for the exact resource class and any subtypes., +   * For example, registering an {@link ResourceEncoder} for, +   * {@link android.graphics.drawable.Drawable} (not recommended) will result in the, +   * {@link ResourceEncoder} being used for {@link android.graphics.drawable.BitmapDrawable} and, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} and any other subclass., +   *, +   * <p>If multiple {@link ResourceEncoder}s are registered for the same type or super type, the, +   * {@link ResourceEncoder} that is registered first will be used. As a result, it's not currently, +   * possible to replace Glide's default {@link ResourceEncoder}s., +   */, +  /**, +   * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a, +   * non-default data type that can be rewind to allow for efficient reads of file headers., +   */, +  /**, +   * Registers the given {@link ResourceTranscoder} to convert from the given resource {@link Class}, +   * to the given transcode {@link Class}., +   *, +   * @param resourceClass The class that will be transcoded from (e.g., +   * {@link android.graphics.Bitmap})., +   * @param transcodeClass The class that will be transcoded to (e.g., +   * {@link android.graphics.drawable.BitmapDrawable})., +   * @param transcoder The {@link ResourceTranscoder} to register., +   */, +  /**, +   * Registers a new {@link ImageHeaderParser} that can obtain some basic metadata from an image, +   * header (orientation, type etc)., +   */, +   * Appends a new {@link ModelLoaderFactory} onto the end of the existing set so that the, +   * constructed {@link ModelLoader} will be tried after all default and previously registered, +   * {@link ModelLoader}s for the given model and data classes., +   * <p>If you're attempting to replace an existing {@link ModelLoader}, use, +   * {@link #prepend(Class, Class, ModelLoaderFactory)}. This method is best for new types of models, +   * and/or data or as a way to add an additional fallback loader for an existing type of]