[+++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +    private static final String CACHE_PATH_KEY = "cache_path";, +    private static final String IMAGE_SIZE_KEY = "image_size";, +, +    public static FlickrPhotoGrid newInstance(File cacheDir, int size) {, +        FlickrPhotoGrid photoGrid = new FlickrPhotoGrid();, +        Bundle args = new Bundle();, +        args.putString(CACHE_PATH_KEY, cacheDir.getAbsolutePath());, +        args.putInt(IMAGE_SIZE_KEY, size);, +        photoGrid.setArguments(args);, +        return photoGrid;, +        Bundle args = getArguments();, +        cacheDir = new File(args.getString(CACHE_PATH_KEY));, +        photoSize = args.getInt(IMAGE_SIZE_KEY);, +, +                        .setModelStreamLoader(new FlickrStreamLoader(Api.get(getActivity()), cacheDir)), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +    private static final String CACHE_PATH_KEY = "cache_path";, +    private static final String IMAGE_SIZE_KEY = "image_size";, +, +    public static FlickrPhotoGrid newInstance(File cacheDir, int size) {, +        FlickrPhotoGrid photoGrid = new FlickrPhotoGrid();, +        Bundle args = new Bundle();, +        args.putString(CACHE_PATH_KEY, cacheDir.getAbsolutePath());, +        args.putInt(IMAGE_SIZE_KEY, size);, +        photoGrid.setArguments(args);, +        return photoGrid;, +        Bundle args = getArguments();, +        cacheDir = new File(args.getString(CACHE_PATH_KEY));, +        photoSize = args.getInt(IMAGE_SIZE_KEY);, +, +                        .setModelStreamLoader(new FlickrStreamLoader(Api.get(getActivity()), cacheDir)), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +    public static FlickrPhotoList newInstance() {, +        return new FlickrPhotoList();, +    }, +, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoGrid.java, +    private static final String CACHE_PATH_KEY = "cache_path";, +    private static final String IMAGE_SIZE_KEY = "image_size";, +, +    public static FlickrPhotoGrid newInstance(File cacheDir, int size) {, +        FlickrPhotoGrid photoGrid = new FlickrPhotoGrid();, +        Bundle args = new Bundle();, +        args.putString(CACHE_PATH_KEY, cacheDir.getAbsolutePath());, +        args.putInt(IMAGE_SIZE_KEY, size);, +        photoGrid.setArguments(args);, +        return photoGrid;, +        Bundle args = getArguments();, +        cacheDir = new File(args.getString(CACHE_PATH_KEY));, +        photoSize = args.getInt(IMAGE_SIZE_KEY);, +, +                        .setModelStreamLoader(new FlickrStreamLoader(Api.get(getActivity()), cacheDir)), +++ b/samples/flickr/src/com/bumptech/flickr/FlickrPhotoList.java, +    public static FlickrPhotoList newInstance() {, +        return new FlickrPhotoList();, +    }, +, +++ b/samples/flickr/src/com/bumptech/flickr/FlickrSearchActivity.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +    private Set<PhotoViewer> photoViewers = new HashSet<PhotoViewer>();, +    private File cacheDir;, +    private List<Photo> currentPhotos = new ArrayList<Photo>();, +, +    private enum Page {, +        SMALL,, +        MEDIUM,, +        LIST, +    }, +, +    private static final Map<Page, Integer> PAGE_TO_TITLE = new HashMap<Page, Integer>() {{, +        put(Page.SMALL, R.string.small);, +        put(Page.MEDIUM, R.string.medium);, +        put(Page.LIST, R.string.list);, +    }};, +, +    @Override, +    public void onAttachFragment(Fragment fragment) {, +        super.onAttachFragment(fragment);, +        if (!(fragment instanceof PhotoViewer)) {, +            throw new IllegalStateException("Fragment class " + fragment.getClass() + " does not implement PhotoViewer");, +        } else {, +            PhotoViewer photoViewer = (PhotoViewer) fragment;, +            photoViewer.onPhotosUpdated(currentPhotos);, +            photoViewers.add(photoViewer);, +        }, +    }, +        cacheDir = ImageManager.getPhotoCacheDir(this, cacheName);, +, +        for (Page page : Page.values()) {, +            final int textId = PAGE_TO_TITLE.get(page);, +            actionBar.addTab(actionBar.newTab().setText(textId).setTabListener(new TabListener(pager)));, +        }, +        pager.setAdapter(new FlickrPagerAdapter(getSupportFragmentManager()));, +        Api.get(this).search(searchString, new Api.SearchCallback() {, +, +                currentPhotos = photos;]