[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + *     {@link GlideType}:, + *       {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + *     {@link GlideType}:, + *       {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;, +import com.bumptech.glide.annotation.GlideType;, +        if (executableElement.getAnnotation(GlideOption.class) != null) {, +        } else if (executableElement.getAnnotation(GlideType.class) != null) {, +    validateStaticVoid(executableElement, GlideOption.class);, +      throw new IllegalArgumentException("@GlideOption methods must take a ", +      throw new IllegalArgumentException("@GlideOption methods must take a", +    validateStaticVoid(executableElement, GlideType.class);, +      throw new IllegalArgumentException("@GlideType methods must take a", +      throw new IllegalArgumentException("@GlideType methods must take a", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + *     {@link GlideType}:, + *       {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;, +import com.bumptech.glide.annotation.GlideType;, +        if (executableElement.getAnnotation(GlideOption.class) != null) {, +        } else if (executableElement.getAnnotation(GlideType.class) != null) {, +    validateStaticVoid(executableElement, GlideOption.class);, +      throw new IllegalArgumentException("@GlideOption methods must take a ", +      throw new IllegalArgumentException("@GlideOption methods must take a", +    validateStaticVoid(executableElement, GlideType.class);, +      throw new IllegalArgumentException("@GlideType methods must take a", +      throw new IllegalArgumentException("@GlideType methods must take a", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import com.bumptech.glide.annotation.GlideOption;, + * non-override {@link GlideOption} annotated methods in {@link GlideExtension} annotated, +        .addJavadoc("{@link $T} in annotated methods in\n", GlideOption.class), +   * {@link GlideOption} in, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + *     {@link GlideType}:, + *       {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;, +import com.bumptech.glide.annotation.GlideType;, +        if (executableElement.getAnnotation(GlideOption.class) != null) {, +        } else if (executableElement.getAnnotation(GlideType.class) != null) {, +    validateStaticVoid(executableElement, GlideOption.class);, +      throw new IllegalArgumentException("@GlideOption methods must take a ", +      throw new IllegalArgumentException("@GlideOption methods must take a", +    validateStaticVoid(executableElement, GlideType.class);, +      throw new IllegalArgumentException("@GlideType methods must take a", +      throw new IllegalArgumentException("@GlideType methods must take a", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import com.bumptech.glide.annotation.GlideOption;, + * non-override {@link GlideOption} annotated methods in {@link GlideExtension} annotated, +        .addJavadoc("{@link $T} in annotated methods in\n", GlideOption.class), +   * {@link GlideOption} in, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import com.bumptech.glide.annotation.GlideType;, + * methods from {@link GlideExtension}s and {@link GlideType}., +             GlideExtension.class, GlideType.class), +        processorUtil.findAnnotatedElementsInClasses(glideExtensions, GlideType.class);, +        GlideType.class).iterator().next();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, +import com.bumptech.glide.annotation.GlideType;, + *     {@link GlideType}:, + *       {@link GlideType}., +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.GlideOption;, +import com.bumptech.glide.annotation.GlideType;, +        if (executableElement.getAnnotation(GlideOption.class) != null) {, +        } else if (executableElement.getAnnotation(GlideType.class) != null) {, +    validateStaticVoid(executableElement, GlideOption.class);, +      throw new IllegalArgumentException("@GlideOption methods must take a ", +      throw new IllegalArgumentException("@GlideOption methods must take a", +    validateStaticVoid(executableElement, GlideType.class);, +      throw new IllegalArgumentException("@GlideType methods must take a", +      throw new IllegalArgumentException("@GlideType methods must take a", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import com.bumptech.glide.annotation.GlideOption;, + * non-override {@link GlideOption} annotated methods in {@link GlideExtension} annotated, +        .addJavadoc("{@link $T} in annotated methods in\n", GlideOption.class), +   * {@link GlideOption} in, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +import com.bumptech.glide.annotation.GlideType;, + * methods from {@link GlideExtension}s and {@link GlideType}., +             GlideExtension.class, GlideType.class), +        processorUtil.findAnnotatedElementsInClasses(glideExtensions, GlideType.class);, +        GlideType.class).iterator().next();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_EXTEND;, +import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_NONE;, +import com.bumptech.glide.annotation.GlideOption;, + * of all methods annotated with {@link GlideOption} in classes annotated with, +            glideExtensionClassNames, GlideOption.class);, +          + " BaseRequestOptions. Add an 'override' value in the @GlideOption annotation", +    GlideOption glideOption =, +        element.getAnnotation(GlideOption.class);]