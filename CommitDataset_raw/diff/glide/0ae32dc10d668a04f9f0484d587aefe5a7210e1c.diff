[+++ b/library/src/com/bumptech/glide/Glide.java, +import android.graphics.Bitmap;, +import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.BaseUrlLoader;, +import com.bumptech.glide.loader.bitmap.model.ResourceLoader;, +import com.bumptech.glide.loader.bitmap.model.FileLoader;, +import com.bumptech.glide.loader.bitmap.model.GenericLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.loader.bitmap.model.StringLoader;, +import com.bumptech.glide.loader.bitmap.model.UriLoader;, +import com.bumptech.glide.loader.bitmap.resource.ResourceFetcher;, +import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;, +import com.bumptech.glide.loader.bitmap.transformation.FitCenter;, +import com.bumptech.glide.loader.bitmap.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.bitmap.transformation.None;, +import com.bumptech.glide.loader.bitmap.transformation.TransformationLoader;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import java.io.InputStream;, +        loaderFactory.register(File.class, InputStream.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, InputStream.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, InputStream.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, InputStream.class, new UriLoader.Factory());, +            loaderFactory.register(URL.class, InputStream.class, new VolleyUrlLoader.Factory());, +            loaderFactory.register(URL.class, InputStream.class, new ModelLoaderFactory<URL, InputStream>() {, +                ModelLoader<URL, InputStream> errorUrlLoader = new ModelLoader<URL, InputStream>() {, +, +                    public ResourceFetcher<InputStream> getResourceFetcher(URL model, int width, int height) {, +                public ModelLoader<URL, InputStream> build(Context context, GenericLoaderFactory factories) {, +                public Class<? extends ModelLoader<URL, InputStream>> loaderClass() {, +                    return (Class<ModelLoader<URL, InputStream>>) errorUrlLoader.getClass();, +     * models. Typically the {@link Glide#using(ModelLoader)} syntax is preferred, +     *     used for any other model class, {@link ModelLoaderFactory#teardown()}, +    public <T> void register(Class<T> clazz, ModelLoaderFactory<T, InputStream> factory) {, +        ModelLoaderFactory<T, InputStream> removed = loaderFactory.register(clazz, InputStream.class, factory);, +     * @param modelClass The class to get a {@link ModelLoader} for, +    public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> modelClass, Class<Y> resourceClass, Context context) {, +        return GLIDE.loaderFactory.buildModelLoader(modelClass, resourceClass, context);, +    private <T, Y> ModelLoaderFactory<T, Y> getFactory(T model, Class<Y> resourceClass) {, +        return loaderFactory.getFactory((Class<T>) model.getClass(), resourceClass);, +     *     {@link #register(Class, ModelLoaderFactory)}., +     *     of {@link BaseUrlLoader}, +    public static <T, Y> ModelRequest<T, Y> using(ModelLoaderFactory<T, Y> factory) {, +        return new ModelRequest<T, Y>(factory);, +     * @see #using(ModelLoaderFactory), +     * @param <Y> the type of resource the model loader can translate from a given model., +    public static <T, Y> ModelRequest<T, Y> usingGeneric(final ModelLoader<T, Y> modelLoader) {, +        return new ModelRequest<T, Y>(new ModelLoaderFactory<T, Y>() {, +, +            public ModelLoader<T, Y> build(Context context, GenericLoaderFactory factories) {, +            @SuppressWarnings("unchecked"), +            @Override, +            public Class<? extends ModelLoader<T, Y>> loaderClass() {, +                return (Class<ModelLoader<T, Y>>) modelLoader.getClass();, +     * Set the {@link ModelLoader} to use for for a new load where the model loader translates from a model to an, +     * {@link InputStream} resource., +     *, +     * @param modelLoader The model loader to use., +     * @param <T> The type of the model., +     * @return A new {@link StreamModelRequest}., +     */, +    public static <T> StreamModelRequest<T> using(final ModelLoader<T, InputStream> modelLoader) {, +        return new StreamModelRequest<T>(new ModelLoaderFactory<T, InputStream>() {, +            @Override, +            public ModelLoader<T, InputStream> build(Context context, GenericLoaderFactory factories) {, +                return modelLoader;, +            }, +, +            @SuppressWarnings("unchecked"), +            @Override, +            public Class<? extends ModelLoader<T, InputStream>> loaderClass() {, +                return (Class<ModelLoader<T, InputStream>>) modelLoader.getClass();, +            }, +, +            @Override, +            public void teardown() { }, +        });, +, +    }, +, +    /**, +    public static StreamRequest<String> load(String string) {, +        return new StreamRequest<String>(string);, +    public static StreamRequest<Uri> load(Uri uri) {, +        return new StreamRequest<Uri>(uri);, +    public static StreamRequest<URL> load(URL url) {, +        return new StreamRequest<URL>(url);, +    public static StreamRequest<File> load(File file) {, +        return new StreamRequest<File>(file);, +    public static StreamRequest<Integer> load(Integer resourceId) {, +        return new StreamRequest<Integer>(resourceId);, +    public static <T> StreamRequest<T> load(T model) {, +        return new StreamRequest<T>(model);, +     * A helper class for building requests with custom {@link ModelLoader}s that translate models to, +     * {@link InputStream} resources., +     *, +     * @param <T> The type of the model., +     */, +    public static class StreamModelRequest<T> {, +        private final ModelLoaderFactory<T, InputStream> factory;]