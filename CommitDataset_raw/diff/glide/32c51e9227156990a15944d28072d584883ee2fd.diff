[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void trimMemory(int level) {, +        memoryCache.trimMemory(level);, +        bitmapPool.trimMemory(level);, +    }, +, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void trimMemory(int level) {, +        memoryCache.trimMemory(level);, +        bitmapPool.trimMemory(level);, +    }, +, +++ b/library/tests/src/com/bumptech/glide/ImageManagerTest.java, +import android.content.ComponentCallbacks2;, +, +    public void testTrimMemory() {, +        final AtomicInteger trimsCalled = new AtomicInteger();, +        BitmapPool pool = new BitmapPoolAdapter() {, +            @Override, +            public void trimMemory(int level) {, +                super.trimMemory(level);, +                assertEquals(2, trimsCalled.incrementAndGet());, +            }, +        };, +, +        MemoryCache cache = new MemoryCacheAdapter() {, +            @Override, +            public void trimMemory(int level) {, +                super.trimMemory(level);, +                assertEquals(1, trimsCalled.incrementAndGet());, +            }, +        };, +, +        ImageManager im = new ImageManager.Builder(getContext()), +                .setBitmapPool(pool), +                .setMemoryCache(cache), +                .build();, +, +, +        im.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);, +        assertEquals(2, trimsCalled.get());, +    }, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public void trimMemory(int level) {, +        memoryCache.trimMemory(level);, +        bitmapPool.trimMemory(level);, +    }, +, +++ b/library/tests/src/com/bumptech/glide/ImageManagerTest.java, +import android.content.ComponentCallbacks2;, +, +    public void testTrimMemory() {, +        final AtomicInteger trimsCalled = new AtomicInteger();, +        BitmapPool pool = new BitmapPoolAdapter() {, +            @Override, +            public void trimMemory(int level) {, +                super.trimMemory(level);, +                assertEquals(2, trimsCalled.incrementAndGet());, +            }, +        };, +, +        MemoryCache cache = new MemoryCacheAdapter() {, +            @Override, +            public void trimMemory(int level) {, +                super.trimMemory(level);, +                assertEquals(1, trimsCalled.incrementAndGet());, +            }, +        };, +, +        ImageManager im = new ImageManager.Builder(getContext()), +                .setBitmapPool(pool), +                .setMemoryCache(cache), +                .build();, +, +, +        im.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);, +        assertEquals(2, trimsCalled.get());, +    }, +++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java, +    @Override, +    public void onTrimMemory(int level) {, +        super.onTrimMemory(level);, +        Glide.get().getImageManager(this).trimMemory(level);, +    }, +, +    @Override, +    public void onLowMemory() {, +        super.onLowMemory();, +        Glide.get().getImageManager(this).clearMemory();, +    }, +]