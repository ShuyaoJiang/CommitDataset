[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, +    public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, +            GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, +        GlideContext glideContext = mock(GlideContext.class);, +        public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, +                GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, +                GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, +                GlideContext.NoSourceEncoderAvailableException {, +            when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, +            when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, +            when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, +            return new DecodeJob<Object, Object>(Object.class, key, width, height, dataFetcherSet, glideContext,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, +    public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, +            GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, +        GlideContext glideContext = mock(GlideContext.class);, +        public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, +                GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, +                GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, +                GlideContext.NoSourceEncoderAvailableException {, +            when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, +            when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, +            when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, +            return new DecodeJob<Object, Object>(Object.class, key, width, height, dataFetcherSet, glideContext,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isMemoryCacheable*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, +    public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, +            GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, +        GlideContext glideContext = mock(GlideContext.class);, +        public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, +                GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, +                GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, +                GlideContext.NoSourceEncoderAvailableException {, +            when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, +            when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, +            when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, +            return new DecodeJob<Object, Object>(Object.class, key, width, height, dataFetcherSet, glideContext,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isMemoryCacheable*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +        GlideContext glideContext = mock(GlideContext.class);, +            when(glideContext.getDataFetchers(eq(model), anyInt(), anyInt())).thenReturn(dataFetcherSet);, +            return SingleRequest.obtain(model, List.class, List.class, glideContext, requestOptions, 1f, priority,, +                eq(harness.dataFetcherSet), eq(harness.glideContext), any(Transformation.class),, +                any(DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                        (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                eq(harness.overrideHeight), any(DataFetcherSet.class), any(GlideContext.class),, +                        (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                any(DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import com.bumptech.glide.request.GlideContext;, +    public void setUp() throws IOException, GlideContext.NoResultEncoderAvailableException,, +            GlideContext.NoSourceEncoderAvailableException, GlideContext.NoDecoderAvailableException {, +        GlideContext glideContext = mock(GlideContext.class);, +        public Harness() throws IOException, GlideContext.NoDecoderAvailableException,, +                GlideContext.NoResultEncoderAvailableException, GlideContext.NoSourceEncoderAvailableException {, +                GlideContext.NoDecoderAvailableException, GlideContext.NoResultEncoderAvailableException,, +                GlideContext.NoSourceEncoderAvailableException {, +            when(glideContext.getDecoder(any(DataRewinder.class), eq(Object.class))).thenReturn(cacheDecoder);, +            when(glideContext.getResultEncoder(any(Resource.class))).thenReturn(resultEncoder);, +            when(glideContext.getSourceEncoder(anyObject())).thenReturn(sourceEncoder);, +            return new DecodeJob<Object, Object>(Object.class, key, width, height, dataFetcherSet, glideContext,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +        engineResource = new EngineResource<Object>(resource, true /*isMemoryCacheable*/);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +        GlideContext glideContext = mock(GlideContext.class);, +            when(glideContext.getDataFetchers(eq(model), anyInt(), anyInt())).thenReturn(dataFetcherSet);, +            return SingleRequest.obtain(model, List.class, List.class, glideContext, requestOptions, 1f, priority,, +                eq(harness.dataFetcherSet), eq(harness.glideContext), any(Transformation.class),, +                any(DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                        (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                eq(harness.overrideHeight), any(DataFetcherSet.class), any(GlideContext.class),, +                        (DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +                any(DataFetcherSet.class), any(GlideContext.class), any(Transformation.class),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import android.content.ComponentCallbacks2;, +import android.content.res.Configuration;, +import com.bumptech.glide.request.GlideContext;, +@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +public class Glide implements ComponentCallbacks2 {, +    private final GlideContext glideContext;, +    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +, +        glideContext = new GlideContext(context, loaderRegistry, encoderRegistry, decoderRegistry,, +                resourceEncoderRegistry, dataRewinderRegistry, transcoderRegistry, imageViewTargetFactory, engine,, +                this);, +    GlideContext getGlideContext() {, +        return glideContext;, +    @Override, +    public void onTrimMemory(int level) {, +        trimMemory(level);, +    }, +, +    @Override]