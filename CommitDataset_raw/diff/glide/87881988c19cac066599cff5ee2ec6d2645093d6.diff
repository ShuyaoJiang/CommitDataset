[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(, +            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(, +            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(, +            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateGlideOptionAnnotations(executableElement);, +  private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, +    validateGlideTypeAnnotations(executableElement);, +  private void validateGlideTypeAnnotations(ExecutableElement executableElement) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(, +            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateGlideOptionAnnotations(executableElement);, +  private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, +    validateGlideTypeAnnotations(executableElement);, +  private void validateGlideTypeAnnotations(ExecutableElement executableElement) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java, +        requestBuilderGenerator.generate(, +            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);, +++ /dev/null, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +    validateGlideOptionAnnotations(executableElement);, +  private void validateGlideOptionAnnotations(ExecutableElement executableElement) {, +    validateGlideTypeAnnotations(executableElement);, +  private void validateGlideTypeAnnotations(ExecutableElement executableElement) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import com.google.common.base.Predicate;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import javax.annotation.Nullable;, +  private ClassName requestOptionsClassName;, +  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;, +  TypeSpec generate(, +      String generatedCodePackageName,, +      Set<String> glideExtensionClassNames,, +      @Nullable TypeSpec generatedOptions) {, +    if (generatedOptions != null) {, +      requestOptionsClassName =, +          ClassName.get(generatedCodePackageName, generatedOptions.name);, +    } else {, +      requestOptionsClassName =, +          ClassName.get(, +              RequestOptionsGenerator.REQUEST_OPTIONS_PACKAGE_NAME,, +              RequestOptionsGenerator.BASE_REQUEST_OPTIONS_SIMPLE_NAME);, +    }, +, +    generatedRequestBuilderOfTranscodeType =, +            generateGeneratedRequestOptionsEquivalents(, +                requestOptionsExtensionMethods, generatedOptions)), +  /**, +   * Generates methods with equivalent names and arguments to methods annotated with, +   * {@link GlideOption} in, +   * {@link com.bumptech.glide.annotation.GlideExtension}s that return our generated, +   * {@code com.bumptech.glide.RequestBuilder} subclass., +   */, +  private List<MethodSpec> generateGeneratedRequestOptionsEquivalents(, +      final List<MethodSpec> requestOptionsExtensionMethods,, +      @Nullable final TypeSpec generatedOptions) {, +    if (generatedOptions == null) {, +      return Collections.emptyList();, +    }, +    return FluentIterable, +        .from(generatedOptions.methodSpecs), +        .filter(new Predicate<MethodSpec>() {, +          @Override, +          public boolean apply(MethodSpec input) {, +            return isUsefulGeneratedRequestOption(requestOptionsExtensionMethods, input);, +          }, +        }), +        .transform(new Function<MethodSpec, MethodSpec>() {, +          @Override, +          public MethodSpec apply(MethodSpec input) {, +            return generateGeneratedRequestOptionEquivalent(input);, +          }, +        }), +        .toList();, +  }, +, +, +  /**, +   * Returns {@code true} if the given {@link MethodSpec} is a useful method to have in our, +   * {@code com.bumptech.glide.RequestBuilder} subclass., +   *, +   * <p>Only newly generated methods will be included in the generated, +   * {@code com.bumptech.glide.request.BaseRequestBuilder} subclass, so we only have to filter out, +   * methods that override other methods to avoid duplicates., +   */, +  private boolean isUsefulGeneratedRequestOption(]