[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    /** 250 MB of cache. */, +        dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, +            // Do nothing., +            // Do nothing., +        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, +            // Do nothing., +        }, +            // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    /** 250 MB of cache. */, +        dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, +            // Do nothing., +            // Do nothing., +        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, +            // Do nothing., +        }, +            // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +    public void onScrollStateChanged(AbsListView absListView, int scrollState) {, +        // Do nothing., +    }, +     * Returns a list of all models that need to be loaded for the list to display adapter items {@code start - end}., +     * A list of any size can be returned so there can be multiple models per adapter position., +     * @param start The smallest adapter position. Will be {@code >= 0 && < adapter.getCount() && <= end}, +     * @param end The largest adapter position. Will be {@code >= 0 && < adapter.getCount && >= start}, +     * @return A non null list of all models for adapter positions between {@code start} and {@code end}., +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    /** 250 MB of cache. */, +        dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, +            // Do nothing., +            // Do nothing., +        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, +            // Do nothing., +        }, +            // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +    public void onScrollStateChanged(AbsListView absListView, int scrollState) {, +        // Do nothing., +    }, +     * Returns a list of all models that need to be loaded for the list to display adapter items {@code start - end}., +     * A list of any size can be returned so there can be multiple models per adapter position., +     * @param start The smallest adapter position. Will be {@code >= 0 && < adapter.getCount() && <= end}, +     * @param end The largest adapter position. Will be {@code >= 0 && < adapter.getCount && >= start}, +     * @return A non null list of all models for adapter positions between {@code start} and {@code end}., +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, + * An interface for writing data to some persistent data store (i.e. a local File cache)., +    /**, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    /** 250 MB of cache. */, +        dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, +            // Do nothing., +            // Do nothing., +        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, +            // Do nothing., +        }, +            // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +    public void onScrollStateChanged(AbsListView absListView, int scrollState) {, +        // Do nothing., +    }, +     * Returns a list of all models that need to be loaded for the list to display adapter items {@code start - end}., +     * A list of any size can be returned so there can be multiple models per adapter position., +     * @param start The smallest adapter position. Will be {@code >= 0 && < adapter.getCount() && <= end}, +     * @param end The largest adapter position. Will be {@code >= 0 && < adapter.getCount && >= start}, +     * @return A non null list of all models for adapter positions between {@code start} and {@code end}., +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, + * An interface for writing data to some persistent data store (i.e. a local File cache)., +    /**, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, + * An interface for writing data from a resource to some persistent data store (i.e. a local File cache)., +    // specializing the generic arguments, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +    /** 250 MB of cache. */, +        dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());, +            // Do nothing., +            // Do nothing., +        public void onResourceReady(Object resource, GlideAnimation<Object> glideAnimation) {, +            // Do nothing., +        }, +            // Do nothing., +++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java, +    public void onScrollStateChanged(AbsListView absListView, int scrollState) {, +        // Do nothing., +    }, +     * Returns a list of all models that need to be loaded for the list to display adapter items {@code start - end}., +     * A list of any size can be returned so there can be multiple models per adapter position., +     * @param start The smallest adapter position. Will be {@code >= 0 && < adapter.getCount() && <= end}, +     * @param end The largest adapter position. Will be {@code >= 0 && < adapter.getCount && >= start}, +     * @return A non null list of all models for adapter positions between {@code start} and {@code end}., +++ b/library/src/main/java/com/bumptech/glide/load/Encoder.java, + * An interface for writing data to some persistent data store (i.e. a local File cache)., +    /**, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceEncoder.java, + * An interface for writing data from a resource to some persistent data store (i.e. a local File cache)., +    // specializing the generic arguments, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Resource.java, +     *     appropriate to return a new instance for each call. For example,, +     *     {@link android.graphics.drawable.Drawable Drawable}s should only be used by a single, +     *     {@link android.view.View View} at a time so each call to this method for Resources that wrap]