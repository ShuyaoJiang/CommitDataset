[+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +  public HttpUrlFetcher(GlideUrl glideUrl, int timeout) {, +    this(glideUrl, timeout, DEFAULT_CONNECTION_FACTORY);, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +  public HttpUrlFetcher(GlideUrl glideUrl, int timeout) {, +    this(glideUrl, timeout, DEFAULT_CONNECTION_FACTORY);, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java, +import com.bumptech.glide.load.Option;, +  /**, +   * An integer option that is used to determine the maximum connect and read timeout durations (in, +   * milliseconds) for network connections., +   *, +   * <p>Defaults to 2500ms., +   */, +  public static final Option<Integer> TIMEOUT = Option.memory(, +      "com.bumptech.glide.load.model.stream.HttpGlideUrlLoader.Timeout", 2500);, +, +    int timeout = options.get(TIMEOUT);, +    return new LoadData<>(url, new HttpUrlFetcher(url, timeout));, +++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java, +  public HttpUrlFetcher(GlideUrl glideUrl, int timeout) {, +    this(glideUrl, timeout, DEFAULT_CONNECTION_FACTORY);, +++ b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java, +import com.bumptech.glide.load.Option;, +  /**, +   * An integer option that is used to determine the maximum connect and read timeout durations (in, +   * milliseconds) for network connections., +   *, +   * <p>Defaults to 2500ms., +   */, +  public static final Option<Integer> TIMEOUT = Option.memory(, +      "com.bumptech.glide.load.model.stream.HttpGlideUrlLoader.Timeout", 2500);, +, +    int timeout = options.get(TIMEOUT);, +    return new LoadData<>(url, new HttpUrlFetcher(url, timeout));, +++ b/library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE)]