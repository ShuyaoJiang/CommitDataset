[+++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +    @Test, +    public void testStartsLoadImmediatelyWhenGivenOverrideWithSizeOriginal() {, +        harness.overrideWidth = Target.SIZE_ORIGINAL;, +        harness.overrideHeight = Target.SIZE_ORIGINAL;, +        GenericRequest<Number, Object, Object, List> request = harness.getRequest();, +        request.begin();, +, +        verify(harness.engine).load(any(Key.class), eq(Target.SIZE_ORIGINAL), eq(Target.SIZE_ORIGINAL),, +                any(DataFetcher.class), any(DataLoadProvider.class), any(Transformation.class),, +                any(ResourceTranscoder.class), any(Priority.class), anyBoolean(), any(DiskCacheStrategy.class),, +                any(ResourceCallback.class));, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +    @Test, +    public void testStartsLoadImmediatelyWhenGivenOverrideWithSizeOriginal() {, +        harness.overrideWidth = Target.SIZE_ORIGINAL;, +        harness.overrideHeight = Target.SIZE_ORIGINAL;, +        GenericRequest<Number, Object, Object, List> request = harness.getRequest();, +        request.begin();, +, +        verify(harness.engine).load(any(Key.class), eq(Target.SIZE_ORIGINAL), eq(Target.SIZE_ORIGINAL),, +                any(DataFetcher.class), any(DataLoadProvider.class), any(Transformation.class),, +                any(ResourceTranscoder.class), any(Priority.class), anyBoolean(), any(DiskCacheStrategy.class),, +                any(ResourceCallback.class));, +    }, +, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +        if (Util.isValidDimensions(overrideWidth, overrideHeight)) {]