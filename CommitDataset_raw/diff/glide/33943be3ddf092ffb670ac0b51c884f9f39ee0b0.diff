[+++ /dev/null, +++ /dev/null, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.Target;, +import java.util.Map;, +import java.util.WeakHashMap;, +    private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, +        private ModelRequest(ModelLoader<T> modelLoader) {, +        private Context context;, +        private Target target;, +, +        private Request(T model) {, +        private Request(T model, ModelLoader<T> modelLoader) {, +            //make an effort to support wrap content layout params. This will still blow, +            //up if transformation doesn't handle wrap content, but its a start, +            final ViewGroup.LayoutParams layoutParams = imageView.getLayoutParams();, +            if (layoutParams != null &&, +                    (layoutParams.width == ViewGroup.LayoutParams.WRAP_CONTENT ||, +                    layoutParams.height == ViewGroup.LayoutParams.WRAP_CONTENT)) {, +                downsampler = Downsampler.NONE;, +            }, +, +            finish(imageView.getContext(), new ImageViewTarget(imageView));, +        }, +, +        public ContextRequest into(Target target) {, +            return new ContextRequest(this, target);, +        }, +, +        private void finish(Context context, Target target) {, +            this.context = context;, +            this.target = target;, +, +            ImagePresenter<T> imagePresenter = getImagePresenter(target);, +        @SuppressWarnings("unchecked"), +        private ImagePresenter<T> getImagePresenter(Target target) {, +            Metadata previous = GLIDE.metadataTracker.get(target);, +            ImagePresenter<T> result = target.getImagePresenter();, +                result = buildImagePresenter(target);, +                target.setImagePresenter(result);, +                GLIDE.metadataTracker.put(target, current);, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                    .setTarget(target, context), +                final Animation animation = AnimationUtils.loadAnimation(context, animationId);, +                    public void onImageReady(Target target, boolean fromCache) {, +                            target.startAnimation(animation);, +    public static class ContextRequest {, +        private final Request request;, +        private final Target target;, +        private ContextRequest(Request request, Target target) {, +            this.request = request;, +            this.target = target;, +        public void with(Context context) {, +            request.finish(context, target);, +        }, +, +++ /dev/null, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.target.ImageViewTarget;, +import com.bumptech.glide.presenter.target.Target;, +import java.util.Map;, +import java.util.WeakHashMap;, +    private final Map<Target, Metadata> metadataTracker = new WeakHashMap<Target, Metadata>();, +        private ModelRequest(ModelLoader<T> modelLoader) {, +        private Context context;, +        private Target target;, +, +        private Request(T model) {, +        private Request(T model, ModelLoader<T> modelLoader) {, +            //make an effort to support wrap content layout params. This will still blow, +            //up if transformation doesn't handle wrap content, but its a start, +            final ViewGroup.LayoutParams layoutParams = imageView.getLayoutParams();, +            if (layoutParams != null &&, +                    (layoutParams.width == ViewGroup.LayoutParams.WRAP_CONTENT ||, +                    layoutParams.height == ViewGroup.LayoutParams.WRAP_CONTENT)) {, +                downsampler = Downsampler.NONE;, +            }, +, +            finish(imageView.getContext(), new ImageViewTarget(imageView));, +        }, +, +        public ContextRequest into(Target target) {, +            return new ContextRequest(this, target);, +        }, +, +        private void finish(Context context, Target target) {, +            this.context = context;, +            this.target = target;, +, +            ImagePresenter<T> imagePresenter = getImagePresenter(target);, +        @SuppressWarnings("unchecked"), +        private ImagePresenter<T> getImagePresenter(Target target) {, +            Metadata previous = GLIDE.metadataTracker.get(target);, +            ImagePresenter<T> result = target.getImagePresenter();, +                result = buildImagePresenter(target);, +                target.setImagePresenter(result);, +                GLIDE.metadataTracker.put(target, current);, +        private ImagePresenter<T> buildImagePresenter(Target target) {, +                    .setTarget(target, context)]