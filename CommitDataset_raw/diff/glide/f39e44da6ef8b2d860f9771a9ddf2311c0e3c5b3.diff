[+++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import com.bumptech.glide.Registry.NoModelLoaderAvailableException;, +, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +  @Mock ModelLoaderFactory<String, String> firstFactory;, +  @Mock ModelLoader<String, String> firstModelLoader;, +  @Mock MultiModelLoaderFactory.Factory multiModelLoaderFactory;, +  @Mock ModelLoaderFactory<String, String> secondFactory;, +  @Mock ModelLoader<String, String> secondModelLoader;, +, +  public @Rule ExpectedException exception = ExpectedException.none();, +    when(firstFactory.build(anyContext(), eq(multiFactory))).thenReturn(firstModelLoader);, +    when(secondFactory.build(anyContext(), eq(multiFactory))).thenReturn(secondModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +    multiFactory.prepend(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.prepend(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +    multiFactory.replace(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.replace(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +        multiFactory.replace(String.class, String.class, firstFactory);, +    multiFactory.replace(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(removed).containsExactly(firstFactory, other);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(otherLoader, firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(otherLoader, firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).doesNotContain(firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(otherLoader, firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +, +    exception.expect(NoModelLoaderAvailableException.class);, +    multiFactory.build(String.class, Integer.class);, +    multiFactory.append(String.class, String.class, firstFactory);, +, +    exception.expect(NoModelLoaderAvailableException.class);, +    multiFactory.build(Integer.class, String.class);, +    appendFactoryFor(String.class, Object.class);, +    exception.expect(NoModelLoaderAvailableException.class);, +    multiFactory.build(Object.class, Object.class);, +    appendFactoryFor(Object.class, String.class);, +    exception.expect(NoModelLoaderAvailableException.class);, +    multiFactory.build(Object.class, Object.class);, +    ModelLoader<Object, Object> firstSuperClass = appendFactoryFor(Object.class, Object.class);, +    ModelLoader<Object, Object> secondSuperClass = appendFactoryFor(Object.class, Object.class);, +    assertThat(modelLoaders).containsExactly(firstSuperClass, secondSuperClass);, +    ModelLoader<Object, Object> firstSuperClass = appendFactoryFor(Object.class, Object.class);, +    ModelLoader<Object, Object> secondSuperClass = appendFactoryFor(Object.class, Object.class);, +    assertThat(modelLoaders).containsExactly(firstSuperClass, secondSuperClass);, +    ModelLoader<Object, Object> firstSuperclass = appendFactoryFor(Object.class, Object.class);, +    ModelLoader<Object, Object> secondSuperclass = appendFactoryFor(Object.class, Object.class);, +    assertThat(modelLoaders).containsExactly(firstSuperclass, secondSuperclass);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java, +import org.robolectric.RobolectricTestRunner;, +, +import com.bumptech.glide.Registry.NoModelLoaderAvailableException;, +, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +  @Mock ModelLoaderFactory<String, String> firstFactory;, +  @Mock ModelLoader<String, String> firstModelLoader;, +  @Mock MultiModelLoaderFactory.Factory multiModelLoaderFactory;, +  @Mock ModelLoaderFactory<String, String> secondFactory;, +  @Mock ModelLoader<String, String> secondModelLoader;, +, +  public @Rule ExpectedException exception = ExpectedException.none();, +    when(firstFactory.build(anyContext(), eq(multiFactory))).thenReturn(firstModelLoader);, +    when(secondFactory.build(anyContext(), eq(multiFactory))).thenReturn(secondModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.append(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +    multiFactory.prepend(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.prepend(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +    multiFactory.replace(String.class, String.class, firstFactory);, +    assertThat(modelLoaders).containsExactly(firstModelLoader);, +    multiFactory.replace(String.class, String.class, firstFactory);, +    ModelLoader<String, String> modelLoader = multiFactory.build(String.class, String.class);, +    assertThat(modelLoader).isEqualTo(firstModelLoader);, +        multiFactory.replace(String.class, String.class, firstFactory);, +    multiFactory.replace(String.class, String.class, firstFactory);]