[+++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, +    apply plugin: "net.ltgt.errorprone", +}, +, +++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, +    apply plugin: "net.ltgt.errorprone", +}, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.lang.reflect.InvocationTargetException;, +      result = clazz.getDeclaredConstructor().newInstance();, +    } catch (InstantiationException e) {, +      throwIncorrectGlideModule(e);, +      throwIncorrectGlideModule(e);, +    } catch (NoSuchMethodException e) {, +      throwIncorrectGlideModule(e);, +    } catch (InvocationTargetException e) {, +      throwIncorrectGlideModule(e);, +  private static void throwIncorrectGlideModule(Exception e) {, +    throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly.", +        + " If you've manually implemented this class, remove your implementation. The Annotation", +        + " processor will generate a correct implementation.", e);, +  }, +, +++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, +    apply plugin: "net.ltgt.errorprone", +}, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.lang.reflect.InvocationTargetException;, +      result = clazz.getDeclaredConstructor().newInstance();, +    } catch (InstantiationException e) {, +      throwIncorrectGlideModule(e);, +      throwIncorrectGlideModule(e);, +    } catch (NoSuchMethodException e) {, +      throwIncorrectGlideModule(e);, +    } catch (InvocationTargetException e) {, +      throwIncorrectGlideModule(e);, +  private static void throwIncorrectGlideModule(Exception e) {, +    throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly.", +        + " If you've manually implemented this class, remove your implementation. The Annotation", +        + " processor will generate a correct implementation.", e);, +  }, +, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +  // We're checking to see if we need to clone our options object because we want to make sure the, +  // original is never modified, so we need reference equality., +  @SuppressWarnings("ReferenceEquality"), +++ b/build.gradle, +        maven {, +            url "https://plugins.gradle.org/m2/", +        }, +        classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}", +++ b/gradle.properties, +ERROR_PRONE_VERSION=0.0.13, +++ b/library/build.gradle, +if (!hasProperty('DISABLE_ERROR_PRONE')) {, +    apply plugin: "net.ltgt.errorprone", +}, +, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import java.lang.reflect.InvocationTargetException;, +      result = clazz.getDeclaredConstructor().newInstance();, +    } catch (InstantiationException e) {]