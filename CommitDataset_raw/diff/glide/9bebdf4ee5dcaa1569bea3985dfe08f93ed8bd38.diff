[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +        Priority priority = Priority.LOW;, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation,, +                    encoder, priority, listener);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +        Priority priority = Priority.LOW;, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation,, +                    encoder, priority, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +                any(ResourceEncoder.class), any(Priority.class), any(EngineJobListener.class));, +        Priority priority = Priority.NORMAL;, +                    eq(transformation), eq(encoder), eq(priority), eq(engine))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, priority,, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +        Priority priority = Priority.LOW;, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation,, +                    encoder, priority, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +                any(ResourceEncoder.class), any(Priority.class), any(EngineJobListener.class));, +        Priority priority = Priority.NORMAL;, +                    eq(transformation), eq(encoder), eq(priority), eq(engine))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, priority,, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import com.bumptech.glide.request.ResourceCallback;, +        verify(harness.fetcher).loadResource(eq(harness.priority));, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(fetched);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenThrow(expected);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(new Object());, +        verify(harness.fetcher, never()).loadResource(any(Priority.class));, +    public void testPriorityMatchesPriority() {, +        harness.priority = Priority.LOW;, +        assertEquals(harness.priority.ordinal(), harness.runner.getPriority());, +        Priority priority = Priority.LOW;, +                height, fetcher, decoder, transformation, encoder, diskCache, priority, cb);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +        when(failFetcher.loadResource(any(Priority.class))).thenThrow(new IOException("test"));, +            when(fetcher.loadResource(any(Priority.class))).thenReturn(new ByteArrayInputStream(new byte[0]));, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +        Priority priority = Priority.LOW;, +            return factory.build(mock(Key.class), width, height, cacheDecoder, fetcher, decoder, transformation,, +                    encoder, priority, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.request.ResourceCallback;, +                any(ResourceEncoder.class), any(Priority.class), any(EngineJobListener.class));, +        Priority priority = Priority.NORMAL;, +                    eq(transformation), eq(encoder), eq(priority), eq(engine))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, priority,, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import com.bumptech.glide.request.ResourceCallback;, +        verify(harness.fetcher).loadResource(eq(harness.priority));, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(fetched);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(is);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenThrow(expected);, +        when(harness.fetcher.loadResource(eq(harness.priority))).thenReturn(new Object());, +        verify(harness.fetcher, never()).loadResource(any(Priority.class));, +    public void testPriorityMatchesPriority() {, +        harness.priority = Priority.LOW;, +        assertEquals(harness.priority.ordinal(), harness.runner.getPriority());]