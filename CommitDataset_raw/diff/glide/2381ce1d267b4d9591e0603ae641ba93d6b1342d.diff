[+++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public Object getImage(String id, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +        if (shutdown) return null;, +        final String key = getKey(id, downsampler, transformation, width, height);, +        ImageManagerJob job = null;, +        if (!returnFromCache(key, cb)) {, +            job = new ImageManagerJob();, +            job.execute(key, streamLoader, width, height, downsampler, transformation, cb);, +        return job;, +    private class ImageManagerJob implements Runnable {, +        private StreamLoader streamLoader;, +        private Transformation transformation;, +        private Downsampler downsampler;, +        private int width;, +        private int height;, +        public void execute(String key, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +            this.width = width;, +            this.height = height;, +            this.streamLoader = streamLoader;, +            this.downsampler = downsampler;, +            this.transformation = transformation;, +            Bitmap result = getFromDiskCache(key);, +                    //in almost every case exception will be because of race after calling shutdown. Not much we can do, +                    //either way, +                if (!isInDiskCache) {, +        private Bitmap resizeIfNotFound(InputStream is) throws IOException {, +            return resizer.load(is, width, height, downsampler, transformation);, +        }, +    private static String getKey(String id, Downsampler downsampler, Transformation transformation, int width, int height) {, +        return String.valueOf(Util.hash(id.hashCode(), downsampler.getId().hashCode(),, +                transformation.getId().hashCode(), width, height));, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public Object getImage(String id, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +        if (shutdown) return null;, +        final String key = getKey(id, downsampler, transformation, width, height);, +        ImageManagerJob job = null;, +        if (!returnFromCache(key, cb)) {, +            job = new ImageManagerJob();, +            job.execute(key, streamLoader, width, height, downsampler, transformation, cb);, +        return job;, +    private class ImageManagerJob implements Runnable {, +        private StreamLoader streamLoader;, +        private Transformation transformation;, +        private Downsampler downsampler;, +        private int width;, +        private int height;, +        public void execute(String key, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +            this.width = width;, +            this.height = height;, +            this.streamLoader = streamLoader;, +            this.downsampler = downsampler;, +            this.transformation = transformation;, +            Bitmap result = getFromDiskCache(key);, +                    //in almost every case exception will be because of race after calling shutdown. Not much we can do, +                    //either way, +                if (!isInDiskCache) {, +        private Bitmap resizeIfNotFound(InputStream is) throws IOException {, +            return resizer.load(is, width, height, downsampler, transformation);, +        }, +    private static String getKey(String id, Downsampler downsampler, Transformation transformation, int width, int height) {, +        return String.valueOf(Util.hash(id.hashCode(), downsampler.getId().hashCode(),, +                transformation.getId().hashCode(), width, height));, +++ b/library/src/com/bumptech/glide/resize/loader/Approximate.java, +import com.bumptech.glide.resize.Downsampler;, +import com.bumptech.glide.resize.Transformation;, +        super(context, Downsampler.AT_LEAST, Transformation.NONE);, +        super(imageManager, Downsampler.AT_LEAST, Transformation.NONE);, +++ b/library/src/com/bumptech/glide/resize/ImageManager.java, +    public Object getImage(String id, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +        if (shutdown) return null;, +        final String key = getKey(id, downsampler, transformation, width, height);, +        ImageManagerJob job = null;, +        if (!returnFromCache(key, cb)) {, +            job = new ImageManagerJob();, +            job.execute(key, streamLoader, width, height, downsampler, transformation, cb);, +        return job;, +    private class ImageManagerJob implements Runnable {, +        private StreamLoader streamLoader;, +        private Transformation transformation;, +        private Downsampler downsampler;, +        private int width;, +        private int height;, +        public void execute(String key, StreamLoader streamLoader, int width, int height, Downsampler downsampler, Transformation transformation, LoadedCallback cb) {, +            this.width = width;, +            this.height = height;, +            this.streamLoader = streamLoader;, +            this.downsampler = downsampler;, +            this.transformation = transformation;, +            Bitmap result = getFromDiskCache(key);, +                    //in almost every case exception will be because of race after calling shutdown. Not much we can do, +                    //either way, +                if (!isInDiskCache) {, +        private Bitmap resizeIfNotFound(InputStream is) throws IOException {, +            return resizer.load(is, width, height, downsampler, transformation);, +        }, +    private static String getKey(String id, Downsampler downsampler, Transformation transformation, int width, int height) {, +        return String.valueOf(Util.hash(id.hashCode(), downsampler.getId().hashCode(),, +                transformation.getId().hashCode(), width, height));, +++ b/library/src/com/bumptech/glide/resize/loader/Approximate.java, +import com.bumptech.glide.resize.Downsampler;]