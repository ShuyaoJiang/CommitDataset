[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +   * Returns true if this job will attempt to decode a resource from the disk cache, and false if it, +   * will always decode from source., +   */, +  boolean willDecodeFromCache() {, +    Stage firstStage = getNextStage(Stage.INITIALIZE);, +    return firstStage == Stage.RESOURCE_CACHE || firstStage == Stage.DATA_CACHE;, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +   * Returns true if this job will attempt to decode a resource from the disk cache, and false if it, +   * will always decode from source., +   */, +  boolean willDecodeFromCache() {, +    Stage firstStage = getNextStage(Stage.INITIALIZE);, +    return firstStage == Stage.RESOURCE_CACHE || firstStage == Stage.DATA_CACHE;, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +    GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : sourceExecutor;, +    executor.execute(decodeJob);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +   * Returns true if this job will attempt to decode a resource from the disk cache, and false if it, +   * will always decode from source., +   */, +  boolean willDecodeFromCache() {, +    Stage firstStage = getNextStage(Stage.INITIALIZE);, +    return firstStage == Stage.RESOURCE_CACHE || firstStage == Stage.DATA_CACHE;, +  }, +, +  /**, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +    GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : sourceExecutor;, +    executor.execute(decodeJob);, +++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java, +  public void testSubmitsDecodeJobToDiskCacheServiceWhenDecodingFromCacheOnStart() {, +    when(harness.decodeJob.willDecodeFromCache()).thenReturn(true);, +  @Test, +  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart() {, +    EngineJob<Object> job = harness.getJob();, +    when(harness.decodeJob.willDecodeFromCache()).thenReturn(false);, +    job.start(harness.decodeJob);, +, +    verify(harness.sourceService).execute(eq(harness.decodeJob));, +  }, +]