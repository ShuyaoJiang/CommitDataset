[+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +import com.bumptech.glide.load.engine.executor.MockGlideExecutor;, +  public void setUp() {, +    Glide.init(context, new GlideBuilder().setMemoryCache(new LruResourceCache(CACHE_SIZE_BYTES)));, +  public void submit_withPreviousRequestClearedFromMemory_completesFromDataDiskCache() {, +    // Clearing the future here can race with clearing the EngineResource held on to by EngineJob, +    // while it's notifying callbacks. Forcing all executors to use the same thread avoids the race, +    // by making our clear and EngineJob's clear run on the same thread., +    GlideExecutor mainThreadExecutor = MockGlideExecutor.newMainThreadExecutor();, +    Glide.init(, +        context,, +        new GlideBuilder(), +            .setSourceExecutor(mainThreadExecutor), +            .setDiskCacheExecutor(mainThreadExecutor), +            .setAnimationExecutor(mainThreadExecutor));, +, +  public void submit_withPreviousButNoLongerReferencedIdenticalRequest_completesFromMemoryCache() {, +  public void submit_withPreviousButNoLongerReferencedIdenticalRequest_doesNotRecycleBitmap() {, +  public void clearDiskCache_doesNotPreventFutureLoads() {, +    // Clearing the future here can race with clearing the EngineResource held on to by EngineJob, +    // while it's notifying callbacks. Forcing all executors to use the same thread avoids the race, +    // by making our clear and EngineJob's clear run on the same thread., +    GlideExecutor mainThreadExecutor = MockGlideExecutor.newMainThreadExecutor();, +    Glide.init(, +        context,, +        new GlideBuilder(), +            .setSourceExecutor(mainThreadExecutor), +            .setDiskCacheExecutor(mainThreadExecutor), +            .setAnimationExecutor(mainThreadExecutor));, +, +    // Load the request once., +    FutureTarget<Drawable> future =, +        GlideApp.with(context), +    // Clear the result from all of our caches., +    // Load the request a second time into the disk cache., +    future =, +        GlideApp.with(context), +    // Clear the second request from everywhere but the disk cache., +    // Load the request a third time., +    // Assert that the third request comes from the disk cache (which was populated by the second, +    // request)., +    assertThrows(, +        RuntimeException.class,, +        new ThrowingRunnable() {, +          public void run() {, +  private void clearMemoryCacheOnMainThread() {, +++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java, +  public synchronized GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {, +  public synchronized GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +import com.bumptech.glide.load.engine.executor.MockGlideExecutor;, +  public void setUp() {, +    Glide.init(context, new GlideBuilder().setMemoryCache(new LruResourceCache(CACHE_SIZE_BYTES)));, +  public void submit_withPreviousRequestClearedFromMemory_completesFromDataDiskCache() {, +    // Clearing the future here can race with clearing the EngineResource held on to by EngineJob, +    // while it's notifying callbacks. Forcing all executors to use the same thread avoids the race, +    // by making our clear and EngineJob's clear run on the same thread., +    GlideExecutor mainThreadExecutor = MockGlideExecutor.newMainThreadExecutor();, +    Glide.init(, +        context,, +        new GlideBuilder(), +            .setSourceExecutor(mainThreadExecutor), +            .setDiskCacheExecutor(mainThreadExecutor), +            .setAnimationExecutor(mainThreadExecutor));, +, +  public void submit_withPreviousButNoLongerReferencedIdenticalRequest_completesFromMemoryCache() {, +  public void submit_withPreviousButNoLongerReferencedIdenticalRequest_doesNotRecycleBitmap() {, +  public void clearDiskCache_doesNotPreventFutureLoads() {, +    // Clearing the future here can race with clearing the EngineResource held on to by EngineJob, +    // while it's notifying callbacks. Forcing all executors to use the same thread avoids the race, +    // by making our clear and EngineJob's clear run on the same thread., +    GlideExecutor mainThreadExecutor = MockGlideExecutor.newMainThreadExecutor();, +    Glide.init(]