[+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +    private boolean isViewStateAndSizeValid(int currentWidth, int currentHeight) {, +      LayoutParams params = view.getLayoutParams();, +, +      int paramWidth;, +      int paramHeight;, +      if (params == null) {, +        paramWidth = 0;, +        paramHeight = 0;, +      } else {, +        paramWidth = params.width;, +        paramHeight = params.height;, +      }, +      return isDimensionValid(paramWidth, currentWidth), +          && isDimensionValid(paramHeight, currentHeight);, +    private boolean isDimensionValid(int layoutParam, int dimen) {, +      // If the layout parameter is a fixed size and the padding adjusted parameter (dimen in this, +      // case) is valid, we can trust that the size won't change due to a layout pass., +      if (layoutParam > 0 && dimen > 0) {, +      // SIZE_ORIGINAL is not dependent on a layout pass., +      if (dimen == Target.SIZE_ORIGINAL) {, +        return true;, +      }, +, +      // TODO: Is this correct? The view's parent could change size after a layout., +      // We're making an assumption that MATCH_PARENT won't change after it has been set once, so, +      // future layout passes typically won't change it. This probably will break in some cases., +      if (layoutParam == LayoutParams.MATCH_PARENT && dimen > 0) {, +        return true;, +      }, +, +      // We can trust a non-zero dimension if no layout pass is pending, otherwise we're going to, +      // have to wait for a layout pass., +      return dimen > 0 && !view.isLayoutRequested();, +      } else if (adjustedViewSize > 0) {, +        return adjustedViewSize;, +++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java, +    private boolean isViewStateAndSizeValid(int currentWidth, int currentHeight) {, +      LayoutParams params = view.getLayoutParams();, +, +      int paramWidth;, +      int paramHeight;, +      if (params == null) {, +        paramWidth = 0;, +        paramHeight = 0;, +      } else {, +        paramWidth = params.width;, +        paramHeight = params.height;, +      }, +      return isDimensionValid(paramWidth, currentWidth), +          && isDimensionValid(paramHeight, currentHeight);, +    private boolean isDimensionValid(int layoutParam, int dimen) {, +      // If the layout parameter is a fixed size and the padding adjusted parameter (dimen in this, +      // case) is valid, we can trust that the size won't change due to a layout pass., +      if (layoutParam > 0 && dimen > 0) {, +      // SIZE_ORIGINAL is not dependent on a layout pass., +      if (dimen == Target.SIZE_ORIGINAL) {, +        return true;, +      }, +, +      // TODO: Is this correct? The view's parent could change size after a layout., +      // We're making an assumption that MATCH_PARENT won't change after it has been set once, so, +      // future layout passes typically won't change it. This probably will break in some cases., +      if (layoutParam == LayoutParams.MATCH_PARENT && dimen > 0) {, +        return true;, +      }, +, +      // We can trust a non-zero dimension if no layout pass is pending, otherwise we're going to, +      // have to wait for a layout pass., +      return dimen > 0 && !view.isLayoutRequested();, +      } else if (adjustedViewSize > 0) {, +        return adjustedViewSize;, +++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java, +  public void getSize_withValidDimens_noLayoutRequested_callsSizeReady() {, +        .setHeight(dimens);, +  public void getSize_withValidDimens_layoutRequested_doesNotCallSizeReady() {, +    int dimens = 333;, +    shadowView, +        .setWidth(dimens), +        .setHeight(dimens);, +    view.requestLayout();, +, +    target.getSize(cb);, +, +    verify(cb, never()).onSizeReady(anyInt(), anyInt());, +  }, +, +  @Test, +  public void getSize_withFixedLayoutParams_callsSizeReady() {, +    view.requestLayout();, +  public void getSize_withFixedWidthSetHeight_noLayoutRequested_callsSizeReady() {, +    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);, +    shadowView.setHeight(200);, +    view.setLayoutParams(layoutParams);, +, +    target.getSize(cb);, +, +    verify(cb).onSizeReady(eq(400), eq(200));, +  }, +]