[+++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.util.Util;, +                    public void onPhotoRemoved(Integer key, Bitmap bitmap) {, +        final int key = getKey(path, 0, 0, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.APPROXIMATE);, +        final int key = getKey(path, width, height, ResizeType.CENTER_CROP);, +        final int key = getKey(path, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(int key,final LoadedCallback cb, final ImageManagerJob job) {, +    private boolean returnFromCache(int key, LoadedCallback cb) {, +        boolean found = inCache != null;, +        if (found) {, +        private final int key;, +        public ImageManagerJob(int key, LoadedCallback cb) {, +        public ImageManagerJob(int key, LoadedCallback cb, boolean useDiskCache) {, +    private InputStream getFromDiskCache(int key) {, +    private void putInDiskCache(int key, Bitmap value) {, +    private Bitmap getFromMemoryCache(int key) {, +    private void putInMemoryCache(int key, Bitmap bitmap) {, +    private static int getKey(String path, int width, int height, ResizeType type){, +        return Util.hash(path.hashCode(), width, height, type.hashCode());, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.util.Util;, +                    public void onPhotoRemoved(Integer key, Bitmap bitmap) {, +        final int key = getKey(path, 0, 0, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.APPROXIMATE);, +        final int key = getKey(path, width, height, ResizeType.CENTER_CROP);, +        final int key = getKey(path, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(int key,final LoadedCallback cb, final ImageManagerJob job) {, +    private boolean returnFromCache(int key, LoadedCallback cb) {, +        boolean found = inCache != null;, +        if (found) {, +        private final int key;, +        public ImageManagerJob(int key, LoadedCallback cb) {, +        public ImageManagerJob(int key, LoadedCallback cb, boolean useDiskCache) {, +    private InputStream getFromDiskCache(int key) {, +    private void putInDiskCache(int key, Bitmap value) {, +    private Bitmap getFromMemoryCache(int key) {, +    private void putInMemoryCache(int key, Bitmap bitmap) {, +    private static int getKey(String path, int width, int height, ResizeType type){, +        return Util.hash(path.hashCode(), width, height, type.hashCode());, +++ b/library/src/com/bumptech/photos/resize/cache/LruPhotoCache.java, +        public void onPhotoRemoved(Integer key, Bitmap bitmap);, +    private class PhotoCache extends LruCache<Integer, Bitmap> {, +        protected int sizeOf(Integer key, Bitmap value) {, +        protected void entryRemoved(boolean evicted, Integer key, Bitmap oldValue, Bitmap newValue) {, +    public void put(int key, Bitmap bitmap) {, +    public Bitmap get(int key) {, +    public void remove(int key){, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.util.Util;, +                    public void onPhotoRemoved(Integer key, Bitmap bitmap) {, +        final int key = getKey(path, 0, 0, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.APPROXIMATE);, +        final int key = getKey(path, width, height, ResizeType.CENTER_CROP);, +        final int key = getKey(path, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(int key,final LoadedCallback cb, final ImageManagerJob job) {, +    private boolean returnFromCache(int key, LoadedCallback cb) {, +        boolean found = inCache != null;, +        if (found) {, +        private final int key;, +        public ImageManagerJob(int key, LoadedCallback cb) {, +        public ImageManagerJob(int key, LoadedCallback cb, boolean useDiskCache) {, +    private InputStream getFromDiskCache(int key) {, +    private void putInDiskCache(int key, Bitmap value) {, +    private Bitmap getFromMemoryCache(int key) {, +    private void putInMemoryCache(int key, Bitmap bitmap) {, +    private static int getKey(String path, int width, int height, ResizeType type){, +        return Util.hash(path.hashCode(), width, height, type.hashCode());, +++ b/library/src/com/bumptech/photos/resize/cache/LruPhotoCache.java, +        public void onPhotoRemoved(Integer key, Bitmap bitmap);, +    private class PhotoCache extends LruCache<Integer, Bitmap> {, +        protected int sizeOf(Integer key, Bitmap value) {, +        protected void entryRemoved(boolean evicted, Integer key, Bitmap oldValue, Bitmap newValue) {, +    public void put(int key, Bitmap bitmap) {, +    public Bitmap get(int key) {, +    public void remove(int key){, +++ b/library/src/com/bumptech/photos/resize/cache/PhotoDiskCache.java, +    public void put(final int key, final Bitmap bitmap) {, +        final String safeKey = sha1Hash(String.valueOf(key));, +    public InputStream get(final int key) {, +        final String safeKey = sha1Hash(String.valueOf(key));, +++ b/library/src/com/bumptech/photos/resize/ImageManager.java, +import com.bumptech.photos.util.Util;, +                    public void onPhotoRemoved(Integer key, Bitmap bitmap) {, +        final int key = getKey(path, 0, 0, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.AS_IS);, +        final int key = getKey(path, width, height, ResizeType.APPROXIMATE);, +        final int key = getKey(path, width, height, ResizeType.CENTER_CROP);, +        final int key = getKey(path, width, height, ResizeType.FIT_CENTER);, +    private Object runJob(int key,final LoadedCallback cb, final ImageManagerJob job) {, +    private boolean returnFromCache(int key, LoadedCallback cb) {, +        boolean found = inCache != null;, +        if (found) {, +        private final int key;, +        public ImageManagerJob(int key, LoadedCallback cb) {, +        public ImageManagerJob(int key, LoadedCallback cb, boolean useDiskCache) {, +    private InputStream getFromDiskCache(int key) {]