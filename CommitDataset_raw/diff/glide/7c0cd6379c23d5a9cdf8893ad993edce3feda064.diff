[+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java, +import android.support.annotation.Nullable;, +  private int workBufferSize;, +  private int workBufferPosition;, +  @Nullable, +  private Boolean isFirstFrameTransparent;, +    if (block == null) {, +      block = bitmapProvider.obtainByteArray(255);, +    }, +    if (workBuffer == null) {, +      workBuffer = bitmapProvider.obtainByteArray(WORK_BUFFER_SIZE);, +    }, +, +    isFirstFrameTransparent = null;, +    if (currentFrame.interlace || sampleSize != 1) {, +      copyCopyIntoScratchRobust(currentFrame);, +    } else {, +      copyIntoScratchFast(currentFrame);, +    }, +, +    // Copy pixels into previous image, +    if (savePrevious && (currentFrame.dispose == DISPOSAL_UNSPECIFIED, +        || currentFrame.dispose == DISPOSAL_NONE)) {, +      if (previousImage == null) {, +        previousImage = getNextBitmap();, +      }, +      previousImage.setPixels(dest, 0, downsampledWidth, 0, 0, downsampledWidth,, +          downsampledHeight);, +    }, +, +    // Set pixels for current image., +    Bitmap result = getNextBitmap();, +    result.setPixels(dest, 0, downsampledWidth, 0, 0, downsampledWidth, downsampledHeight);, +    return result;, +  }, +, +  private void copyIntoScratchFast(GifFrame currentFrame) {, +    int[] dest = mainScratch;, +    int downsampledIH = currentFrame.ih;, +    int downsampledIY = currentFrame.iy;, +    int downsampledIW = currentFrame.iw;, +    int downsampledIX = currentFrame.ix;, +    // Copy each source line to the appropriate place in the destination., +    boolean isFirstFrame = framePointer == 0;, +    int width = this.downsampledWidth;, +    byte[] mainPixels = this.mainPixels;, +    int[] act = this.act;, +    @Nullable Boolean isFirstFrameTransparent = this.isFirstFrameTransparent;, +    for (int i = 0; i < downsampledIH; i++) {, +      int line = i + downsampledIY;, +      int k = line * width;, +      // Start of line in dest., +      int dx = k + downsampledIX;, +      // End of dest line., +      int dlim = dx + downsampledIW;, +      if (k + width < dlim) {, +        // Past dest edge., +        dlim = k + width;, +      }, +      // Start of line in source., +      int sx = i * currentFrame.iw;, +      int averageColor;, +      if (isFirstFrameTransparent == null && isFirstFrame) {, +        while (dx < dlim) {, +          int currentColorIndex = ((int) mainPixels[sx]) & MASK_INT_LOWEST_BYTE;, +          averageColor = act[currentColorIndex];, +          if (averageColor != COLOR_TRANSPARENT_BLACK) {, +            dest[dx] = averageColor;, +          } else if (isFirstFrameTransparent == null) {, +            isFirstFrameTransparent = true;, +          }, +          ++sx;, +          ++dx;, +        }, +      } else {, +        while (dx < dlim) {, +          int currentColorIndex = ((int) mainPixels[sx]) & MASK_INT_LOWEST_BYTE;, +          averageColor = act[currentColorIndex];, +          if (averageColor != COLOR_TRANSPARENT_BLACK) {, +            dest[dx] = averageColor;, +          }, +          ++sx;, +          ++dx;, +        }, +      }, +    }, +, +    this.isFirstFrameTransparent = isFirstFrameTransparent == null, +        ? false : isFirstFrameTransparent;, +  }, +, +  private void copyCopyIntoScratchRobust(GifFrame currentFrame) {, +    int[] dest = mainScratch;, +    @Nullable, +    Boolean isFirstFrameTransparent = this.isFirstFrameTransparent;, +      boolean isNotDownsampling = sampleSize == 1;, +        if (isNotDownsampling) {, +          int averageColor;, +          while (dx < dlim) {, +            int currentColorIndex = ((int) mainPixels[sx]) & MASK_INT_LOWEST_BYTE;]