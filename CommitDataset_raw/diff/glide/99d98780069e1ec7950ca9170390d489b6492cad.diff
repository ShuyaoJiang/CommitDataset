[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *   <li>{@link com.bumptech.glide.annotation.GlideExtension}s -, + *   <ul>, + *     <li>A {@link com.bumptech.glide.request.BaseRequestOptions} implementation that contains, + *     static versions of all builder methods in the base class and both static and instance, + *     versions of methods in all {@link com.bumptech.glide.annotation.GlideExtension}s., + *     <li>If one or more methods in one or more, + *     {@link com.bumptech.glide.annotation.GlideExtension} annotated classes are annotated with, + *     {@link com.bumptech.glide.annotation.ExtendsRequestManager}:, + *     <ul>, + *       <li>A {@link com.bumptech.glide.RequestManager} implementation containing a generated, + *       method for each method annotated with, + *       {@link com.bumptech.glide.annotation.ExtendsRequestManager}., + *       <li>A {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *       implementation that produces the generated {@link com.bumptech.glide.RequestManager}s., + *       <li>A {@link com.bumptech.glide.Glide} look-alike that implements all static methods in, + *       the {@link com.bumptech.glide.Glide} singleton and returns the generated, + *       {@link com.bumptech.glide.RequestManager} implementation when appropriate., + *     </ul>, + *   </ul>, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *   <li>{@link com.bumptech.glide.annotation.GlideExtension}s -, + *   <ul>, + *     <li>A {@link com.bumptech.glide.request.BaseRequestOptions} implementation that contains, + *     static versions of all builder methods in the base class and both static and instance, + *     versions of methods in all {@link com.bumptech.glide.annotation.GlideExtension}s., + *     <li>If one or more methods in one or more, + *     {@link com.bumptech.glide.annotation.GlideExtension} annotated classes are annotated with, + *     {@link com.bumptech.glide.annotation.ExtendsRequestManager}:, + *     <ul>, + *       <li>A {@link com.bumptech.glide.RequestManager} implementation containing a generated, + *       method for each method annotated with, + *       {@link com.bumptech.glide.annotation.ExtendsRequestManager}., + *       <li>A {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *       implementation that produces the generated {@link com.bumptech.glide.RequestManager}s., + *       <li>A {@link com.bumptech.glide.Glide} look-alike that implements all static methods in, + *       the {@link com.bumptech.glide.Glide} singleton and returns the generated, + *       {@link com.bumptech.glide.RequestManager} implementation when appropriate., + *     </ul>, + *   </ul>, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.ExtendsRequestManager;, +        } else if (executableElement.getAnnotation(ExtendsRequestManager.class) != null) {, +          validateExtendsRequestManager(executableElement);, +  private static void validateExtendsRequestManager(ExecutableElement executableElement) {, +    validateStaticVoid(executableElement, ExtendsRequestManager.class);, +    if (executableElement.getParameters().size() != 1) {, +      throw new IllegalArgumentException("@ExtendsRequestManager methods must take a", +          + " BaseRequestOptions object as their first and only parameter, found multiple for: ", +      + executableElement.getEnclosingElement() + "#" + executableElement);, +    }, +, +    VariableElement first = executableElement.getParameters().get(0);, +    TypeMirror expected = first.asType();, +    if (!expected.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +      throw new IllegalArgumentException("@ExtendsRequestManager methods must take a", +          + " RequestBuilder object as their first parameter, but given: " + expected);, +    }, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java, + *   <li>{@link com.bumptech.glide.annotation.GlideExtension}s -, + *   <ul>, + *     <li>A {@link com.bumptech.glide.request.BaseRequestOptions} implementation that contains, + *     static versions of all builder methods in the base class and both static and instance, + *     versions of methods in all {@link com.bumptech.glide.annotation.GlideExtension}s., + *     <li>If one or more methods in one or more, + *     {@link com.bumptech.glide.annotation.GlideExtension} annotated classes are annotated with, + *     {@link com.bumptech.glide.annotation.ExtendsRequestManager}:, + *     <ul>, + *       <li>A {@link com.bumptech.glide.RequestManager} implementation containing a generated, + *       method for each method annotated with, + *       {@link com.bumptech.glide.annotation.ExtendsRequestManager}., + *       <li>A {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}, + *       implementation that produces the generated {@link com.bumptech.glide.RequestManager}s., + *       <li>A {@link com.bumptech.glide.Glide} look-alike that implements all static methods in, + *       the {@link com.bumptech.glide.Glide} singleton and returns the generated, + *       {@link com.bumptech.glide.RequestManager} implementation when appropriate., + *     </ul>, + *   </ul>, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java, +import com.bumptech.glide.annotation.ExtendsRequestManager;, +        } else if (executableElement.getAnnotation(ExtendsRequestManager.class) != null) {, +          validateExtendsRequestManager(executableElement);, +  private static void validateExtendsRequestManager(ExecutableElement executableElement) {, +    validateStaticVoid(executableElement, ExtendsRequestManager.class);, +    if (executableElement.getParameters().size() != 1) {, +      throw new IllegalArgumentException("@ExtendsRequestManager methods must take a", +          + " BaseRequestOptions object as their first and only parameter, found multiple for: ", +      + executableElement.getEnclosingElement() + "#" + executableElement);, +    }, +, +    VariableElement first = executableElement.getParameters().get(0);, +    TypeMirror expected = first.asType();, +    if (!expected.toString().startsWith("com.bumptech.glide.RequestBuilder")) {, +      throw new IllegalArgumentException("@ExtendsRequestManager methods must take a", +          + " RequestBuilder object as their first parameter, but given: " + expected);, +    }, +  }, +]