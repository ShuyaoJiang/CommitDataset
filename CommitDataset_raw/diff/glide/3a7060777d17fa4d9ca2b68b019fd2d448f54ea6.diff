[+++ b/library/src/main/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +    package="com.bumptech.glide">, +    <uses-sdk android:minSdkVersion="14" />, +++ b/library/src/main/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +    package="com.bumptech.glide">, +    <uses-sdk android:minSdkVersion="14" />, +++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, + * {@link com.bumptech.glide.load.engine.Resource} loaded into it using {@link, + * com.bumptech.glide.RequestManager#clear(Target)}., + * {@link com.bumptech.glide.request.target.ViewTarget} or {@link, + * com.bumptech.glide.request.target.ImageViewTarget} are preferable., + * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if, + *     in the background, + *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a a fully, + *     implemented {@link Target} for any specialized use-cases. Using BaseView is unsafe if the, + *     user does not implement {@link #onLoadCleared}, resulting in recycled bitmaps being, + *     referenced from the UI and hard to root-cause crashes., +@Deprecated, +++ b/library/src/main/AndroidManifest.xml, +<manifest xmlns:android="http://schemas.android.com/apk/res/android", +    package="com.bumptech.glide">, +    <uses-sdk android:minSdkVersion="14" />, +++ b/library/src/main/java/com/bumptech/glide/request/target/BaseTarget.java, + * {@link com.bumptech.glide.load.engine.Resource} loaded into it using {@link, + * com.bumptech.glide.RequestManager#clear(Target)}., + * {@link com.bumptech.glide.request.target.ViewTarget} or {@link, + * com.bumptech.glide.request.target.ImageViewTarget} are preferable., + * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if, + *     in the background, + *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a a fully, + *     implemented {@link Target} for any specialized use-cases. Using BaseView is unsafe if the, + *     user does not implement {@link #onLoadCleared}, resulting in recycled bitmaps being, + *     referenced from the UI and hard to root-cause crashes., +@Deprecated, +++ b/library/src/main/java/com/bumptech/glide/request/target/CustomViewTarget.java, +package com.bumptech.glide.request.target;, +, +import android.content.Context;, +import android.graphics.Point;, +import android.graphics.drawable.Drawable;, +import android.support.annotation.IdRes;, +import android.support.annotation.NonNull;, +import android.support.annotation.Nullable;, +import android.support.annotation.VisibleForTesting;, +import android.util.Log;, +import android.view.Display;, +import android.view.View;, +import android.view.View.OnAttachStateChangeListener;, +import android.view.ViewGroup.LayoutParams;, +import android.view.ViewTreeObserver;, +import android.view.WindowManager;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.transition.Transition;, +import com.bumptech.glide.util.Preconditions;, +import com.bumptech.glide.util.Synthetic;, +import java.lang.ref.WeakReference;, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * A base {@link Target} for loading {@link android.graphics.Bitmap}s into {@link View}s that, + * provides default implementations for most methods and can determine the size of views using a, + * {@link android.view.ViewTreeObserver.OnDrawListener}., + *, + * @param <T> The specific subclass of view wrapped by this target., + * @param <Z> The resource type this target will receive., + */, +public abstract class CustomViewTarget<T extends View, Z> implements Target<Z> {, +  private static final String TAG = "CustomViewTarget";, +  @IdRes private static final int VIEW_TAG_ID =, +      com.bumptech.glide.R.id.glide_custom_view_target_tag;, +, +  private final SizeDeterminer sizeDeterminer;, +, +  protected final T view;, +  @Nullable private OnAttachStateChangeListener attachStateListener;, +  private boolean isClearedByUs;, +  private boolean isAttachStateListenerAdded;, +  @IdRes private int overrideTag = 0;, +, +  /** Constructor that defaults {@code waitForLayout} to {@code false}. */, +  public CustomViewTarget(@NonNull T view) {, +    this.view = Preconditions.checkNotNull(view);, +    sizeDeterminer = new SizeDeterminer(view);, +  }, +, +  /**, +   * A required callback invoked when the resource is no longer valid and must be freed., +   *, +   * <p>You must ensure that any current Drawable received in {@link #onResourceReady(Z,, +   * Transition)} is no longer used before redrawing the container (usually a View) or changing its, +   * visibility. <b>Not doing so will result in crashes in your app.</b>, +   *, +   * @param placeholder The placeholder drawable to optionally show, or null., +   */, +  protected abstract void onResourceCleared(@Nullable Drawable placeholder);, +, +  /**]