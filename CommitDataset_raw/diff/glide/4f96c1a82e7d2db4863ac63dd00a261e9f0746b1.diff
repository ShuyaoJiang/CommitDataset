[+++ b/library/src/main/java/com/bumptech/glide/load/resource/NullCacheDecoder.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class NullCacheDecoder<Z> implements ResourceDecoder<InputStream, Z> {, +    private static final NullCacheDecoder NULL_DECODER = new NullCacheDecoder();, +, +    @SuppressWarnings("unchecked"), +    public static <Z> NullCacheDecoder<Z> get() {, +        return NULL_DECODER;, +    }, +, +    @Override, +    public Resource<Z> decode(InputStream source, int width, int height) throws IOException {, +        return null;, +    }, +, +    @Override, +    public String getId() {, +        return "";, +    }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullCacheDecoder.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class NullCacheDecoder<Z> implements ResourceDecoder<InputStream, Z> {, +    private static final NullCacheDecoder NULL_DECODER = new NullCacheDecoder();, +, +    @SuppressWarnings("unchecked"), +    public static <Z> NullCacheDecoder<Z> get() {, +        return NULL_DECODER;, +    }, +, +    @Override, +    public Resource<Z> decode(InputStream source, int width, int height) throws IOException {, +        return null;, +    }, +, +    @Override, +    public String getId() {, +        return "";, +    }, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifData.java, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.resource.gif.decoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.decoder.GifHeader;, +, +import java.util.ArrayList;, +import java.util.List;, +    private final BitmapPool bitmapPool;, +    private final GifHeader header;, +    private final byte[] data;, +    private String gifId;, +    private final List<GifDrawable> drawables = new ArrayList<GifDrawable>();, +    private Transformation<Bitmap> frameTransformation;, +    public GifData(Context context, BitmapPool bitmapPool, String gifId, GifHeader header, byte[] data) {, +        this.bitmapPool = bitmapPool;, +        this.header = header;, +        this.data = data;, +        this.gifId = gifId;, +    @SuppressWarnings("unchecked"), +        return frameTransformation != null ? frameTransformation : Transformation.NONE;, +    }, +, +    public void setFrameTransformation(Transformation<Bitmap> transformation) {, +        this.frameTransformation = transformation;, +        return data.length;, +        return data;, +        GifDecoder gifDecoder = new GifDecoder(bitmapPool);, +        gifDecoder.setData(gifId, header, data);, +        GifFrameManager frameManager = new GifFrameManager(context, getFrameTransformation());, +        GifDrawable result = new GifDrawable(gifDecoder, frameManager);, +        drawables.add(result);, +        return result;, +        for (GifDrawable drawable : drawables) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/NullCacheDecoder.java, +package com.bumptech.glide.load.resource;, +, +import com.bumptech.glide.Resource;, +import com.bumptech.glide.load.ResourceDecoder;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +public class NullCacheDecoder<Z> implements ResourceDecoder<InputStream, Z> {, +    private static final NullCacheDecoder NULL_DECODER = new NullCacheDecoder();, +, +    @SuppressWarnings("unchecked")]