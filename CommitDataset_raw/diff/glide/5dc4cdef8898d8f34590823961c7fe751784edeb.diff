[+++ b/library/build.gradle, +, +++ b/library/build.gradle, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.EngineResource;, +        verify(target).onResourceReady(any(EngineResource.class), any(GlideAnimation.class));, +++ b/library/build.gradle, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.EngineResource;, +        verify(target).onResourceReady(any(EngineResource.class), any(GlideAnimation.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import static org.mockito.Mockito.when;, +        verify(harness.cb).onResourceReady(eq(harness.engineResource));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key), eq(harness.engineResource));, +            verify(cb).onResourceReady(eq(harness.engineResource));, +        verify(harness.engineResource).acquire(eq(harness.numCbs));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key), (EngineResource) isNull());, +        verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, +        verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, +        verify(harness.engineResource, times(2)).acquire(eq(1));, +        verify(harness.engineResource, times(2)).acquire(eq(1));, +        EngineResource<Object> engineResource = mock(EngineResource.class);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +        EngineJob job;, +            when(factory.build(eq(resource))).thenReturn(engineResource);, +            job = new EngineJob(key, mainHandler, isCacheable, listener, factory);, +        EngineResource<Object> engineResource = mock(EngineResource.class);, +            EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource))).thenReturn(engineResource);, +            EngineJob result = new EngineJob(key, mainHandler, isCacheable, listener, factory);, +++ b/library/build.gradle, +, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.engine.EngineResource;, +        verify(target).onResourceReady(any(EngineResource.class), any(GlideAnimation.class));, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java, +import static org.mockito.Mockito.when;, +        verify(harness.cb).onResourceReady(eq(harness.engineResource));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key), eq(harness.engineResource));, +            verify(cb).onResourceReady(eq(harness.engineResource));, +        verify(harness.engineResource).acquire(eq(harness.numCbs));, +        verify(harness.listener).onEngineJobComplete(eq(harness.key), (EngineResource) isNull());, +        verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, +        verify(harness.engineResource).setCacheable(eq(harness.isCacheable));, +        verify(harness.engineResource, times(2)).acquire(eq(1));, +        verify(harness.engineResource, times(2)).acquire(eq(1));, +        EngineResource<Object> engineResource = mock(EngineResource.class);, +        EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +        EngineJob job;, +            when(factory.build(eq(resource))).thenReturn(engineResource);, +            job = new EngineJob(key, mainHandler, isCacheable, listener, factory);, +        EngineResource<Object> engineResource = mock(EngineResource.class);, +            EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);, +            when(factory.build(eq(resource))).thenReturn(engineResource);, +            EngineJob result = new EngineJob(key, mainHandler, isCacheable, listener, factory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java, +package com.bumptech.glide.load.engine;, +, +import com.bumptech.glide.load.Key;, +import junit.framework.Assert;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +@RunWith(RobolectricTestRunner.class), +public class EngineResourceTest {, +    private EngineResource<Object> engineResource;, +    private EngineResource.ResourceListener listener;, +    private Key cacheKey = mock(Key.class);, +    private Resource<Object> resource;, +, +    @SuppressWarnings("unchecked"), +    @Before, +    public void setUp() {, +        resource = mock(Resource.class);, +        engineResource = new EngineResource<Object>(resource);, +        listener = mock(EngineResource.ResourceListener.class);, +        engineResource.setResourceListener(cacheKey, listener);, +    }, +, +    @Test, +    public void testCanAcquireAndRelease() {, +        engineResource.acquire(1);, +        engineResource.release();, +, +        verify(listener).onResourceReleased(cacheKey, engineResource);, +    }, +, +    @Test]