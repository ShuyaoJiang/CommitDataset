[+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.util.Log;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.util.LogTime;, +    private static final String TAG = "Engine";, +        long startTime = LogTime.getLogTime();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "loaded resource from cache in " + LogTime.getElapsedMillis(startTime));, +            }, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "added to existing load in " + LogTime.getElapsedMillis(startTime));, +            }, +        long start = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "queued new load in " + LogTime.getElapsedMillis(start));, +            Log.v(TAG, "finished load in engine in " + LogTime.getElapsedMillis(startTime));, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.util.Log;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.util.LogTime;, +    private static final String TAG = "Engine";, +        long startTime = LogTime.getLogTime();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "loaded resource from cache in " + LogTime.getElapsedMillis(startTime));, +            }, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "added to existing load in " + LogTime.getElapsedMillis(startTime));, +            }, +        long start = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "queued new load in " + LogTime.getElapsedMillis(start));, +            Log.v(TAG, "finished load in engine in " + LogTime.getElapsedMillis(startTime));, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.util.Log;, +import com.bumptech.glide.util.LogTime;, +    private static final String TAG = "EngineJob";, +        final long start = LogTime.getLogTime();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "Posted to main thread in onResourceReady in " + LogTime.getElapsedMillis(start), +                            + " cancelled: " + isCancelled);, +                }, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "Finished resource ready in " + LogTime.getElapsedMillis(start));, +                }, +        final long start = LogTime.getLogTime();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "posted to main thread in onException in " + LogTime.getElapsedMillis(start), +                            + " cancelled: " + isCancelled);, +                }, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "finished onException in " + LogTime.getElapsedMillis(start));, +                }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +import android.util.Log;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;, +import com.bumptech.glide.util.LogTime;, +    private static final String TAG = "Engine";, +        long startTime = LogTime.getLogTime();, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "loaded resource from cache in " + LogTime.getElapsedMillis(startTime));, +            }, +            if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                Log.v(TAG, "added to existing load in " + LogTime.getElapsedMillis(startTime));, +            }, +        long start = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            Log.v(TAG, "queued new load in " + LogTime.getElapsedMillis(start));, +            Log.v(TAG, "finished load in engine in " + LogTime.getElapsedMillis(startTime));, +        }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java, +import android.util.Log;, +import com.bumptech.glide.util.LogTime;, +    private static final String TAG = "EngineJob";, +        final long start = LogTime.getLogTime();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "Posted to main thread in onResourceReady in " + LogTime.getElapsedMillis(start), +                            + " cancelled: " + isCancelled);, +                }, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "Finished resource ready in " + LogTime.getElapsedMillis(start));, +                }, +        final long start = LogTime.getLogTime();, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "posted to main thread in onException in " + LogTime.getElapsedMillis(start), +                            + " cancelled: " + isCancelled);, +                }, +                if (Log.isLoggable(TAG, Log.VERBOSE)) {, +                    Log.v(TAG, "finished onException in " + LogTime.getElapsedMillis(start));, +                }, +++ b/library/src/main/java/com/bumptech/glide/request/GenericRequest.java, +import com.bumptech.glide.util.LogTime;, +    private long startTime;, +        startTime = LogTime.getLogTime();, +        if (Log.isLoggable(TAG, Log.VERBOSE)) {, +            logV("finished run method in " + LogTime.getElapsedMillis(startTime));]