[+++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java, +import static com.google.common.truth.Truth.assertThat;, +  private SingleRequestBuilder builder;, +    builder = new SingleRequestBuilder();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    verify(builder.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),, +        eq(builder.target), anyBoolean());, +    SingleRequest<List> request = builder.build();, +    when(builder.resource.get()).thenReturn(null);, +    request.onResourceReady(builder.resource, DataSource.REMOTE);, +    verify(builder.engine).release(eq(builder.resource));, +    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(builder.target), anyBoolean());, +    SingleRequest<List> request = builder.build();, +    when(((Resource) (builder.resource)).get()), +    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);, +    verify(builder.engine).release(eq(builder.resource));, +    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),, +        eq(builder.target), anyBoolean());, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    request.onResourceReady(builder.resource, DataSource.LOCAL);, +    SingleRequest<List> request = builder.build();, +    request.onResourceReady(builder.resource, DataSource.REMOTE);, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    verify(builder.target, times(1)).onLoadCleared(any(Drawable.class));, +    SingleRequest<List> request = builder, +        .setRequestCoordinator(requestCoordinator), +        .build();, +    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    verify(builder.engine, times(1)), +            eq(builder.glideContext),, +            eq(builder.model),, +            eq(builder.signature),, +            eq(builder.transformations),, +    SingleRequest<List> request = builder.build();, +    when(builder.engine, +            eq(builder.glideContext),, +            eq(builder.model),, +            eq(builder.signature),, +            eq(builder.transformations),, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    request.onResourceReady(builder.resource, DataSource.REMOTE);, +    verify(builder.engine).release(eq(builder.resource));, +    SingleRequest<List> request = builder, +        .setPlaceholderDrawable(expected), +        .setTarget(target), +        .build();, +    assertThat(target.currentPlaceholder).isEqualTo(expected);, +    SingleRequest<List> request = builder, +        .setErrorDrawable(expected), +        .setTarget(target), +        .build();, +    assertThat(target.currentPlaceholder).isEqualTo(expected);, +    SingleRequest<List> request = builder, +        .setErrorDrawable(placeholder), +        .setTarget(target), +        .setModel(null), +        .build();, +    assertThat(target.currentPlaceholder).isEqualTo(placeholder);, +    SingleRequest<List> request = builder, +        .setPlaceholderDrawable(placeholder), +        .setErrorDrawable(errorPlaceholder), +        .setTarget(target), +        .setModel(null), +        .build();, +    assertThat(target.currentPlaceholder).isEqualTo(errorPlaceholder);, +    SingleRequest<List> request = builder, +        .setPlaceholderDrawable(placeholder), +        .setErrorDrawable(errorPlaceholder), +        .setFallbackDrawable(fallback), +        .setTarget(target), +        .setModel(null), +        .build();, +, +    assertThat(target.currentPlaceholder).isEqualTo(fallback);, +    assertFalse(builder.build().isRunning());, +    Request request = builder.build();, +    SingleRequest<List> request = builder.build();, +    request.onResourceReady(builder.resource, DataSource.REMOTE);, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder.build();, +    SingleRequest<List> request = builder, +        .setRequestListener(null), +        .build();, +    request.onResourceReady(builder.resource, DataSource.LOCAL);, +    verify(builder.target).onResourceReady(eq(builder.result), anyTransition());, +    SingleRequest<List> request = builder.build();, +    when(builder.requestListener, +        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),]