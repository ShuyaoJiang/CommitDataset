[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private ByteArrayPool byteArrayPool;, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * @param byteArrayPool The pool to use., +  public GlideBuilder setByteArrayPool(ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +    if (byteArrayPool == null) {, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, logLevel,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private ByteArrayPool byteArrayPool;, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * @param byteArrayPool The pool to use., +  public GlideBuilder setByteArrayPool(ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +    if (byteArrayPool == null) {, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, logLevel,, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private ByteArrayPool byteArrayPool;, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * @param byteArrayPool The pool to use., +  public GlideBuilder setByteArrayPool(ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +    if (byteArrayPool == null) {, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, logLevel,, +++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;, +import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;, +  private ByteArrayPool byteArrayPool;, +   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored, +   * @param byteArrayPool The pool to use., +  public GlideBuilder setByteArrayPool(ByteArrayPool byteArrayPool) {, +    this.byteArrayPool = byteArrayPool;, +    if (byteArrayPool == null) {, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, logLevel,, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,, +      Context context, int logLevel, RequestOptions defaultRequestOptions) {, +    this.byteArrayPool = byteArrayPool;, +    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,, +        byteArrayPool);, +    byteArrayPool.clearMemory();, +    byteArrayPool.trimMemory(level);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;]