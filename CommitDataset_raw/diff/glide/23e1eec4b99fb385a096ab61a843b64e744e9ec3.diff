[+++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, +  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE) {, +      return getFirstResourceTransition(dataSource);, +      return getSecondResourceTransition(dataSource);, +  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, true /*isFirstResource*/);, +  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, false /*isFirstResource*/);, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, +  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE) {, +      return getFirstResourceTransition(dataSource);, +      return getSecondResourceTransition(dataSource);, +  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, true /*isFirstResource*/);, +  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, false /*isFirstResource*/);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java, +import com.bumptech.glide.load.DataSource;, +, +    public Transition<R> build(DataSource dataSource, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, +  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE) {, +      return getFirstResourceTransition(dataSource);, +      return getSecondResourceTransition(dataSource);, +  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, true /*isFirstResource*/);, +  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, false /*isFirstResource*/);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java, +import com.bumptech.glide.load.DataSource;, +, +    public Transition<R> build(DataSource dataSource, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java, +import com.bumptech.glide.load.DataSource;, +, +   * @param dataSource      The {@link com.bumptech.glide.load.DataSource} the resource was loaded, +   *                        from., +  Transition<R> build(DataSource dataSource, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, +  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE) {, +      return getFirstResourceTransition(dataSource);, +      return getSecondResourceTransition(dataSource);, +  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, true /*isFirstResource*/);, +  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {, +              viewAnimationFactory.build(dataSource, false /*isFirstResource*/);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java, +import com.bumptech.glide.load.DataSource;, +, +    public Transition<R> build(DataSource dataSource, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java, +import com.bumptech.glide.load.DataSource;, +, +   * @param dataSource      The {@link com.bumptech.glide.load.DataSource} the resource was loaded, +   *                        from., +  Transition<R> build(DataSource dataSource, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/ViewAnimationFactory.java, +import com.bumptech.glide.load.DataSource;, +, +   * @param dataSource {@inheritDoc}, +  public Transition<R> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE || !isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java, +++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java, +          animationFactory.build(dataSource, isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java, +import com.bumptech.glide.load.DataSource;, +, +  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {, +    if (dataSource == DataSource.MEMORY_CACHE) {, +      return getFirstResourceTransition(dataSource);, +      return getSecondResourceTransition(dataSource);]