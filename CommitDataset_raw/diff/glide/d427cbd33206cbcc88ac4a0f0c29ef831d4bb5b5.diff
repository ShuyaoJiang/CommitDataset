[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.annotation.Nullable;, +  @Nullable, +    if (loadPathCache.isEmptyLoadPath(result)) {, +      return null;, +    } else if (result == null) {, +++ b/library/src/main/java/com/bumptech/glide/Registry.java, +import android.support.annotation.Nullable;, +  @Nullable, +    if (loadPathCache.isEmptyLoadPath(result)) {, +      return null;, +    } else if (result == null) {, +++ b/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java, +import com.bumptech.glide.load.engine.DecodePath;, +import com.bumptech.glide.load.resource.transcode.UnitTranscoder;, +import java.util.Collections;, +  private static final LoadPath<?, ?, ?> NO_PATHS_SIGNAL =, +      new LoadPath<>(, +          Object.class,, +          Object.class,, +          Object.class,, +          Collections.singletonList(, +              new DecodePath<>(, +                  Object.class,, +                  Object.class,, +                  Object.class,, +                  Collections.emptyList(),, +                  new UnitTranscoder<>(),, +                  /*listPool=*/ null)),, +          /*listPool=*/ null);, +, +  /**, +   * Returns {@code} true if the given {@link LoadPath} is the signal object returned from, +   * {@link #get(Class, Class, Class)} that indicates that we've previously found that there are, +   * no available paths to load the requested resources and {@code false} otherwise., +   */, +  public boolean isEmptyLoadPath(@Nullable LoadPath<?, ?, ?> path) {, +    return NO_PATHS_SIGNAL.equals(path);, +  /**, +   * May return {@link #NO_PATHS_SIGNAL} to indicate that we've previously found that there are 0, +   * available load paths for the requested types. Callers must check using, +   * {@link #isEmptyLoadPath(LoadPath)} before using any load path returned by this method., +   */, +  public void put(, +      Class<?> dataClass, Class<?> resourceClass,, +      Class<?> transcodeClass,, +      @Nullable LoadPath<?, ?, ?> loadPath) {, +      cache.put(, +          new MultiClassKey(dataClass, resourceClass, transcodeClass),, +          loadPath != null ? loadPath : NO_PATHS_SIGNAL);]