[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +  /**, +   * Returns the current frame index in the range 0..{@link #getFrameCount()} - 1, or -1 if no frame, +   * is displayed., +   */, +  public int getFrameIndex() {, +    return state.frameLoader.getCurrentIndex();, +  }, +, +  public void onFrameReady() {, +    if (getFrameIndex() == getFrameCount() - 1) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +  /**, +   * Returns the current frame index in the range 0..{@link #getFrameCount()} - 1, or -1 if no frame, +   * is displayed., +   */, +  public int getFrameIndex() {, +    return state.frameLoader.getCurrentIndex();, +  }, +, +  public void onFrameReady() {, +    if (getFrameIndex() == getFrameCount() - 1) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    void onFrameReady();, +  int getCurrentIndex() {, +    return current != null ? current.index : -1;, +  }, +, +        cb.onFrameReady();, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +  /**, +   * Returns the current frame index in the range 0..{@link #getFrameCount()} - 1, or -1 if no frame, +   * is displayed., +   */, +  public int getFrameIndex() {, +    return state.frameLoader.getCurrentIndex();, +  }, +, +  public void onFrameReady() {, +    if (getFrameIndex() == getFrameCount() - 1) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java, +    void onFrameReady();, +  int getCurrentIndex() {, +    return current != null ? current.index : -1;, +  }, +, +        cb.onFrameReady();, +++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java, +    when(frameLoader.getCurrentIndex()).thenReturn(0);, +    drawable.onFrameReady();, +    drawable.onFrameReady();, +    drawable.onFrameReady();, +    drawable.onFrameReady();, +    drawable.onFrameReady();, +  public void testReturnsDefaultFrameIndex() {, +    final int expected = -1;, +, +    when(frameLoader.getCurrentIndex()).thenReturn(expected);, +, +    assertEquals(expected, drawable.getFrameIndex());, +  }, +, +  @Test, +  public void testReturnsNonDefaultFrameIndex() {, +    final int expected = 100;, +, +    when(frameLoader.getCurrentIndex()).thenReturn(expected);, +, +    assertEquals(expected, drawable.getFrameIndex());, +  }, +, +  @Test, +    drawable.onFrameReady();, +    when(frameLoader.getCurrentIndex()).thenReturn(1);, +    drawable.onFrameReady();, +    when(frameLoader.getCurrentIndex()).thenReturn(0);, +    drawable.onFrameReady();, +    when(frameLoader.getCurrentIndex()).thenReturn(1);, +    drawable.onFrameReady();, +    drawable.onFrameReady();, +        when(frameLoader.getCurrentIndex()).thenReturn(frame);, +        drawable.onFrameReady();]