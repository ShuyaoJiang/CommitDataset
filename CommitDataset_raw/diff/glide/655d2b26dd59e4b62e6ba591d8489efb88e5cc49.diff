[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.Transformation;, +    harness.isMemoryCacheable = false;, +    harness.isMemoryCacheable = false;, +        .buildKey(eq(harness.model), eq(harness.signature), eq(harness.width), eq(harness.height),, +            eq(harness.transformations), eq(Object.class), eq(Object.class), eq(harness.options));, +    Object model = new Object();, +    Key signature = mock(Key.class);, +    Map<Class<?>, Transformation<?>> transformations = new HashMap<>();, +    Options options = new Options();, +    GlideContext glideContext = mock(GlideContext.class);, +    boolean isMemoryCacheable = true;, +      when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),, +          eq(Object.class), eq(Object.class), eq(options))).thenReturn(cacheKey);, +      return engine.load(glideContext,, +          model,, +          signature,, +          width,, +          height,, +          Object.class,, +          Object.class,, +          Priority.HIGH,, +          DiskCacheStrategy.ALL,, +          transformations,, +          false /*isTransformationRequired*/,, +          options,, +          isMemoryCacheable,, +          cb);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.Transformation;, +    harness.isMemoryCacheable = false;, +    harness.isMemoryCacheable = false;, +        .buildKey(eq(harness.model), eq(harness.signature), eq(harness.width), eq(harness.height),, +            eq(harness.transformations), eq(Object.class), eq(Object.class), eq(harness.options));, +    Object model = new Object();, +    Key signature = mock(Key.class);, +    Map<Class<?>, Transformation<?>> transformations = new HashMap<>();, +    Options options = new Options();, +    GlideContext glideContext = mock(GlideContext.class);, +    boolean isMemoryCacheable = true;, +      when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),, +          eq(Object.class), eq(Object.class), eq(options))).thenReturn(cacheKey);, +      return engine.load(glideContext,, +          model,, +          signature,, +          width,, +          height,, +          Object.class,, +          Object.class,, +          Priority.HIGH,, +          DiskCacheStrategy.ALL,, +          transformations,, +          false /*isTransformationRequired*/,, +          options,, +          isMemoryCacheable,, +          cb);, +++ b/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java, +import com.bumptech.glide.GlideContext;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.Key;, +import com.bumptech.glide.load.Options;, +import com.bumptech.glide.load.Transformation;, +import com.bumptech.glide.load.engine.DiskCacheStrategy;, +import java.util.HashMap;, +import java.util.Map;, +    GlideContext glideContext = mock(GlideContext.class);, +    Key signature = mock(Key.class);, +    Priority priority = Priority.HIGH;, +, +    Map<Class<?>, Transformation<?>>  transformations = new HashMap<Class<?>, Transformation<?>>();, +       RequestOptions requestOptions = new RequestOptions(), +        .error(errorDrawable), +        .placeholder(placeholderDrawable), +        .fallback(fallbackDrawable), +        .override(overrideWidth, overrideHeight), +        .priority(priority), +        .signature(signature);, +          .obtain(glideContext, model, List.class, requestOptions, overrideWidth, overrideHeight,, +              priority, target, requestListener, requestCoordinator, engine, factory);, +        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), eq(100), eq(100),, +            eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),, +            eq(harness.transformations), anyBoolean(), any(Options.class),, +            anyBoolean(), any(ResourceCallback.class));, +       .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(), anyInt(),, +          eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),, +          eq(harness.transformations), anyBoolean(), any(Options.class),, +          anyBoolean(), any(ResourceCallback.class))), +        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),, +            anyInt(), eq(Object.class), eq(List.class), any(Priority.class),, +            any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),, +            any(Options.class), anyBoolean(), any(ResourceCallback.class))), +        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),, +            anyInt(), eq(Object.class), eq(List.class), any(Priority.class),, +            any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),]