[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.collect.Lists;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterSpec;, +    return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, +        methodSimpleName, Lists.transform(methodParameters,, +            new Function<VariableElement, Object>() {, +              @Override, +              public Object apply(VariableElement input) {, +                return getJavadocSafeName(input);, +              }, +            }));, +  }, +, +  CodeBlock generateSeeMethodJavadoc(, +      TypeName nameOfClassContainingMethod, MethodSpec methodSpec) {, +    return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, +        methodSpec.name, Lists.transform(methodSpec.parameters,, +            new Function<ParameterSpec, Object>() {, +              @Override, +              public Object apply(ParameterSpec input) {, +                return input.name;, +              }, +            }));, +  }, +, +  private CodeBlock generateSeeMethodJavadocInternal(, +      TypeName nameOfClassContainingMethod, String methodName,, +      List<Object> safeParameterNames) {, +    javadocArgs.add(methodName);, +    for (Object param : safeParameterNames) {, +      javadocArgs.add(param);, +, +  List<ExecutableElement> findInstanceMethodsReturning(TypeElement clazz, TypeMirror returnType) {, +    return FluentIterable.from(clazz.getEnclosedElements()), +        .filter(new FilterPublicMethods(returnType, MethodType.INSTANCE)), +        .transform(new ToMethod()), +        .toList();, +  }, +, +        .filter(new FilterPublicMethods((TypeMirror) null /*returnType*/, MethodType.STATIC)), +    @Nullable, +    private final TypeMirror returnType;, +    private final MethodType methodType;, +    FilterPublicMethods(@Nullable TypeMirror returnType, MethodType methodType)  {, +    FilterPublicMethods(@Nullable TypeElement returnType, MethodType methodType)  {, +      this(returnType != null ? returnType.asType() : null, methodType);, +    }, +, +    return isReturnValueTypeMatching(method, expectedReturnType.asType());, +  }, +, +  private boolean isReturnValueTypeMatching(, +      ExecutableElement method, TypeMirror expectedReturnType) {, +        method.getReturnType(), expectedReturnType);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.collect.Lists;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterSpec;, +    return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, +        methodSimpleName, Lists.transform(methodParameters,, +            new Function<VariableElement, Object>() {, +              @Override, +              public Object apply(VariableElement input) {, +                return getJavadocSafeName(input);, +              }, +            }));, +  }, +, +  CodeBlock generateSeeMethodJavadoc(, +      TypeName nameOfClassContainingMethod, MethodSpec methodSpec) {, +    return generateSeeMethodJavadocInternal(nameOfClassContainingMethod,, +        methodSpec.name, Lists.transform(methodSpec.parameters,, +            new Function<ParameterSpec, Object>() {, +              @Override, +              public Object apply(ParameterSpec input) {, +                return input.name;, +              }, +            }));, +  }, +, +  private CodeBlock generateSeeMethodJavadocInternal(, +      TypeName nameOfClassContainingMethod, String methodName,, +      List<Object> safeParameterNames) {, +    javadocArgs.add(methodName);, +    for (Object param : safeParameterNames) {, +      javadocArgs.add(param);, +, +  List<ExecutableElement> findInstanceMethodsReturning(TypeElement clazz, TypeMirror returnType) {, +    return FluentIterable.from(clazz.getEnclosedElements()), +        .filter(new FilterPublicMethods(returnType, MethodType.INSTANCE)), +        .transform(new ToMethod()), +        .toList();, +  }, +, +        .filter(new FilterPublicMethods((TypeMirror) null /*returnType*/, MethodType.STATIC)), +    @Nullable, +    private final TypeMirror returnType;, +    private final MethodType methodType;, +    FilterPublicMethods(@Nullable TypeMirror returnType, MethodType methodType)  {]