[+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, +            anyDrawable(),, +            anyDrawable(),, +            anyDrawable(),, +    verify(requestListener), +        .onResourceReady(, +            anyDrawable(),, +            any(),, +            anyTarget(),, +            eq(DataSource.MEMORY_CACHE),, +            anyBoolean());, +    verify(requestListener), +        .onResourceReady(, +            anyDrawable(),, +            any(),, +            anyTarget(),, +            eq(DataSource.DATA_DISK_CACHE),, +            anyBoolean());, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, +            anyDrawable(),, +            anyDrawable(),, +            anyDrawable(),, +    verify(requestListener), +        .onResourceReady(, +            anyDrawable(),, +            any(),, +            anyTarget(),, +            eq(DataSource.MEMORY_CACHE),, +            anyBoolean());, +    verify(requestListener), +        .onResourceReady(, +            anyDrawable(),, +            any(),, +            anyTarget(),, +            eq(DataSource.DATA_DISK_CACHE),, +            anyBoolean());, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestTest.java, +package com.bumptech.glide;, +, +import static com.bumptech.glide.test.Matchers.anyDrawable;, +import static com.bumptech.glide.test.Matchers.anyTarget;, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.ArgumentMatchers.anyBoolean;, +import static org.mockito.ArgumentMatchers.eq;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;, +import android.support.test.runner.AndroidJUnit4;, +import android.widget.ImageView;, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.executor.GlideExecutor;, +import com.bumptech.glide.request.RequestListener;, +import com.bumptech.glide.test.ConcurrencyHelper;, +import com.bumptech.glide.test.GlideApp;, +import com.bumptech.glide.test.ResourceIds;, +import com.bumptech.glide.test.TearDownGlide;, +import com.bumptech.glide.test.WaitModelLoader;, +import com.bumptech.glide.test.WaitModelLoader.WaitModel;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +, +/**, + * Tests the behaviors of Requests of all types., + */, +@RunWith(AndroidJUnit4.class), +public class RequestTest {, +  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();, +  @Mock private RequestListener<Drawable> requestListener;, +  private ConcurrencyHelper concurrency = new ConcurrencyHelper();, +  private Context context;, +  private ImageView imageView;, +, +  @Before, +  public void setUp() {, +    MockitoAnnotations.initMocks(this);, +    context = InstrumentationRegistry.getTargetContext();, +    imageView = new ImageView(context);, +    imageView.measure(100, 100);, +    imageView.layout(0, 0, 100, 100);, +, +    // Some emulators only have a single resize thread, so waiting on a latch will block them, +    // forever., +    Glide.init(context,, +        new GlideBuilder().setResizeExecutor(GlideExecutor.newUnlimitedSourceExecutor()));, +  }, +, +  @Test, +  public void clear_withSingleRequest_nullsOutDrawableInView() {]