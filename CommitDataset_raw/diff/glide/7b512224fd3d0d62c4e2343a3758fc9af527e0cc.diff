[+++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.6.1', +    <version>3.6.1</version>, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.6.1', +    <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +    GifFrame previousFrame = null;, +    // clear all pixels when meet first frame, +    if (previousFrame == null) {, +      Arrays.fill(dest, 0);, +    }, +, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.6.1', +    <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +    GifFrame previousFrame = null;, +    // clear all pixels when meet first frame, +    if (previousFrame == null) {, +      Arrays.fill(dest, 0);, +    }, +, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalBackground(), +      throws IOException {, +    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_background.gif");, +    GifHeaderParser headerParser = new GifHeaderParser();, +    headerParser.setData(data);, +    GifHeader header = headerParser.parseHeader();, +    GifDecoder decoder = new GifDecoder(provider);, +    decoder.setData(header, data);, +    decoder.advance();, +    Bitmap firstFrame = decoder.getNextFrame();, +    decoder.advance();, +    decoder.getNextFrame();, +    decoder.advance();, +    Bitmap firstFrameTwice = decoder.getNextFrame();, +    assertTrue(Arrays.equals((((CustomShadowBitmap) shadowOf(firstFrame))).getPixels(),, +        (((CustomShadowBitmap) shadowOf(firstFrameTwice))).getPixels()));, +  }, +, +  @Test, +  @Config(shadows = {CustomShadowBitmap.class}), +  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalNone() throws IOException {, +    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_none.gif");, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.6.1', +    <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +    GifFrame previousFrame = null;, +    // clear all pixels when meet first frame, +    if (previousFrame == null) {, +      Arrays.fill(dest, 0);, +    }, +, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalBackground(), +      throws IOException {, +    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_background.gif");, +    GifHeaderParser headerParser = new GifHeaderParser();, +    headerParser.setData(data);, +    GifHeader header = headerParser.parseHeader();, +    GifDecoder decoder = new GifDecoder(provider);, +    decoder.setData(header, data);, +    decoder.advance();, +    Bitmap firstFrame = decoder.getNextFrame();, +    decoder.advance();, +    decoder.getNextFrame();, +    decoder.advance();, +    Bitmap firstFrameTwice = decoder.getNextFrame();, +    assertTrue(Arrays.equals((((CustomShadowBitmap) shadowOf(firstFrame))).getPixels(),, +        (((CustomShadowBitmap) shadowOf(firstFrameTwice))).getPixels()));, +  }, +, +  @Test, +  @Config(shadows = {CustomShadowBitmap.class}), +  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalNone() throws IOException {, +    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_none.gif");, +++ b/third_party/gif_decoder/src/test/resources/transparent_disposal_background.gif, +++ b/README.md, +    compile 'com.github.bumptech.glide:glide:3.6.1', +    <version>3.6.1</version>, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +    GifFrame previousFrame = null;, +    // clear all pixels when meet first frame, +    if (previousFrame == null) {, +      Arrays.fill(dest, 0);, +    }, +, +++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java, +  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalBackground(), +      throws IOException {, +    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_background.gif");, +    GifHeaderParser headerParser = new GifHeaderParser();, +    headerParser.setData(data);, +    GifHeader header = headerParser.parseHeader();, +    GifDecoder decoder = new GifDecoder(provider);, +    decoder.setData(header, data);, +    decoder.advance();]