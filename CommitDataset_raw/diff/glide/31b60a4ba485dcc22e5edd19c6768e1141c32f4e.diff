[+++ /dev/null, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation<Object> transformation = mock(Transformation.class);, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    listener, cb);, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation<Object> transformation = mock(Transformation.class);, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation transformation = mock(Transformation.class);, +            when(factory.build(eq(ID), eq(width), eq(height), eq(cacheDecoder), eq(fetcher), eq(decoder),, +                    eq(transformation), eq(encoder), eq(metadata), eq(engine), eq(cb))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    cb);, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation<Object> transformation = mock(Transformation.class);, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation transformation = mock(Transformation.class);, +            when(factory.build(eq(ID), eq(width), eq(height), eq(cacheDecoder), eq(fetcher), eq(decoder),, +                    eq(transformation), eq(encoder), eq(metadata), eq(engine), eq(cb))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import com.bumptech.glide.resize.load.Transformation;, +, +, +        harness.runner.run();, +        harness.runner.write(expected);, +, +        verify(harness.encoder).encode(eq(harness.result), eq(expected));, +, +    @Test, +    public void testResourceIsTransformedBeforeBeingWrittenToCache() throws Exception {, +        InputStream is = new ByteArrayInputStream(new byte[0]);, +        when(harness.fetcher.loadResource(eq(harness.metadata))).thenReturn(is);, +        when(harness.decoder.decode(eq(is), eq(harness.width), eq(harness.height))).thenReturn(harness.result);, +        Resource transformed = mock(Resource.class);, +        when(harness.transformation.transform(eq(harness.result), eq(harness.width), eq(harness.height))), +                .thenReturn(transformed);, +, +        OutputStream expected = new ByteArrayOutputStream();, +        harness.runner.run();, +        harness.runner.write(expected);, +, +        verify(harness.encoder).encode(eq(transformed), eq(expected));, +    }, +, +    @Test, +    public void testDecodedResourceIsRecycledIfTransformedResourceIsDifferent() throws Exception {, +        InputStream is = new ByteArrayInputStream(new byte[0]);, +        when(harness.fetcher.loadResource(eq(harness.metadata))).thenReturn(is);, +        when(harness.decoder.decode(eq(is), eq(harness.width), eq(harness.height))).thenReturn(harness.result);, +        Resource transformed = mock(Resource.class);, +        when(harness.transformation.transform(eq(harness.result), eq(harness.width), eq(harness.height))), +                .thenReturn(transformed);, +        verify(harness.result).recycle();, +    }, +, +    @Test, +    public void testDecodedResourceIsNotRecycledIfResourceIsNotTransformed() throws Exception {, +        InputStream is = new ByteArrayInputStream(new byte[0]);, +        when(harness.fetcher.loadResource(eq(harness.metadata))).thenReturn(is);, +        when(harness.decoder.decode(eq(is), eq(harness.width), eq(harness.height))).thenReturn(harness.result);, +, +        harness.runner.run();, +, +        verify(harness.result, never()).recycle();, +        Transformation<Object> transformation = mock(Transformation.class);, +                fetcher, decoder, transformation, encoder, diskCache, metadata, cb);, +, +        public SourceResourceHarness() {, +            when(transformation.transform(eq(result), eq(width), eq(height))).thenReturn(result);, +        }, +++ /dev/null, +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation<Object> transformation = mock(Transformation.class);, +            return factory.build(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    listener, cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/EngineTest.java, +import com.bumptech.glide.resize.load.Transformation;, +        Transformation transformation = mock(Transformation.class);, +            when(factory.build(eq(ID), eq(width), eq(height), eq(cacheDecoder), eq(fetcher), eq(decoder),, +                    eq(transformation), eq(encoder), eq(metadata), eq(engine), eq(cb))).thenReturn(runner);, +            return engine.load(ID, width, height, cacheDecoder, fetcher, decoder, transformation, encoder, metadata,, +                    cb);, +++ b/library/robolectric/src/com/bumptech/glide/resize/SourceResourceRunnerTest.java, +import com.bumptech.glide.resize.load.Transformation;, +]