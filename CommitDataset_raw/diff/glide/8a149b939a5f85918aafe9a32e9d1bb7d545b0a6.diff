[+++ b/library/src/main/java/com/bumptech/glide/Registry.java, +   *, +   * @deprecated Use the equivalent {@link #append(Class, Class, ModelLoaderFactory)} method, +   * instead., +  @Deprecated, +    return append(dataClass, encoder);, +  }, +, +  /**, +   * Appends the given {@link Encoder} onto the list of available {@link Encoder}s so that it is, +   * attempted after all earlier and default {@link Encoder}s for the given data class., +   *, +   * <p>The {@link Encoder} will be used both for the exact data class and any subtypes. For, +   * example, registering an {@link Encoder} for {@link java.io.InputStream} will result in the, +   * {@link Encoder} being used for, +   * {@link android.content.res.AssetFileDescriptor.AutoCloseInputStream},, +   * {@link java.io.FileInputStream} and any other subclass., +   *, +   * <p>If multiple {@link Encoder}s are registered for the same type or super type, the, +   * {@link Encoder} that is registered first will be used., +   *, +   * @see #prepend(Class, Encoder), +   */, +  public <Data> Registry append(Class<Data> dataClass, Encoder<Data> encoder) {, +   *, +   * @see #append(Class, Encoder), +   * Appends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s, +   * so that it is attempted after all earlier and default {@link ResourceEncoder}s for the given, +   * data type., +   *, +   * @deprecated Use the equivalent {@link #append(Class, ResourceEncoder)} method instead., +  @Deprecated, +  public <TResource> Registry register(, +      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {, +    return append(resourceClass, encoder);, +  }, +, +  /**, +   * Appends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s, +   * so that it is attempted after all earlier and default {@link ResourceEncoder}s for the given, +   * data type., +   *, +   * <p>The {@link ResourceEncoder} will be used both for the exact resource class and any subtypes., +   * For example, registering an {@link ResourceEncoder} for, +   * {@link android.graphics.drawable.Drawable} (not recommended) will result in the, +   * {@link ResourceEncoder} being used for {@link android.graphics.drawable.BitmapDrawable} and, +   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} and any other subclass., +   *, +   * <p>If multiple {@link ResourceEncoder}s are registered for the same type or super type, the, +   * {@link ResourceEncoder} that is registered first will be used., +   *, +   * @see #prepend(Class, ResourceEncoder), +   */, +  public <TResource> Registry append(, +      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {, +   *, +   * @see #append(Class, ResourceEncoder), +  public <TResource> Registry prepend(, +      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {]