[+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java, +import com.bumptech.glide.RequestBuilder;, +   * <p>It is not safe to reload this or a different model in this callback. If you need to do so, +   * use {@link com.bumptech.glide.RequestBuilder#error(RequestBuilder)} instead., +   *, +   * <p>Although you can't start an entirely new load, it is safe to change what is displayed in the, +   * {@link Target} at this point, as long as you return {@code true} from the method to prevent, +   * {@link Target#onLoadFailed(Drawable)} from being called., +   *, +   * For example:, +   * public boolean onLoadFailed(Exception e, T model, Target target, boolean isFirstResource) {, +   *     return true; // Prevent onLoadFailed from being called on the Target., +   * @return {@code true} to prevent {@link Target#onLoadFailed(Drawable)} from being called on, +   * {@code target}, typically because the listener wants to update the {@code target} or the object, +   * the {@code target} wraps itself or {@code false} to allow {@link Target#onLoadFailed(Drawable)}, +   * to be called on {@code target}., +  boolean onLoadFailed(, +      @Nullable GlideException e, Object model, Target<R> target, boolean isFirstResource);, +   *, +   * @return {@code true} to prevent {@link Target#onLoadFailed(Drawable)} from being called on, +   * {@code target}, typically because the listener wants to update the {@code target} or the object, +   * the {@code target} wraps itself or {@code false} to allow {@link Target#onLoadFailed(Drawable)}, +   * to be called on {@code target}., +  boolean onResourceReady(, +      R resource, Object model, Target<R> target, DataSource dataSource, boolean isFirstResource);]