[+++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import java.io.IOException;, +    public void testFetcherIsCleanedUp() {, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +    public void testFetcherIsCleanedUpIfDecodeThrows() throws Exception {, +        when(harness.fetcher.loadResource(any(Priority.class))).thenReturn(new Object());, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("test"));, +, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import java.io.IOException;, +    public void testFetcherIsCleanedUp() {, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +    public void testFetcherIsCleanedUpIfDecodeThrows() throws Exception {, +        when(harness.fetcher.loadResource(any(Priority.class))).thenReturn(new Object());, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("test"));, +, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +++ b/library/src/com/bumptech/glide/load/engine/SourceResourceRunner.java, +            final Resource<Z> decoded = decode();, +, +    private Resource<Z> decode() throws Exception {, +        T toDecode = fetcher.loadResource(priority);, +        try {, +            if (toDecode != null) {, +                return decoder.decode(toDecode, width, height);, +            }, +        } finally {, +            fetcher.cleanup();, +        }, +, +        return null;, +    }, +, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import java.io.IOException;, +    public void testFetcherIsCleanedUp() {, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +    public void testFetcherIsCleanedUpIfDecodeThrows() throws Exception {, +        when(harness.fetcher.loadResource(any(Priority.class))).thenReturn(new Object());, +        when(harness.decoder.decode(anyObject(), anyInt(), anyInt())).thenThrow(new IOException("test"));, +, +        harness.runner.run();, +, +        verify(harness.fetcher).cleanup();, +    }, +, +    @Test, +++ b/library/src/com/bumptech/glide/load/engine/SourceResourceRunner.java, +            final Resource<Z> decoded = decode();, +, +    private Resource<Z> decode() throws Exception {, +        T toDecode = fetcher.loadResource(priority);, +        try {, +            if (toDecode != null) {, +                return decoder.decode(toDecode, width, height);, +            }, +        } finally {, +            fetcher.cleanup();, +        }, +, +        return null;, +    }, +, +++ b/library/src/com/bumptech/glide/load/resource/ByteArrayFetcher.java, +    public void cleanup() {, +        // Do nothing., +    }, +, +    @Override, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +import java.io.IOException;, +    public void testFetcherIsCleanedUp() {, +        harness.runner.run();, +]