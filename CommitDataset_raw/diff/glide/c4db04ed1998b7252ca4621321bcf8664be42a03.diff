[+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      engine =, +          new Engine(, +              memoryCache,, +              diskCacheFactory,, +              diskCacheExecutor,, +              sourceExecutor,, +              GlideExecutor.newUnlimitedSourceExecutor(),, +              GlideExecutor.newAnimationExecutor());, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      engine =, +          new Engine(, +              memoryCache,, +              diskCacheFactory,, +              diskCacheExecutor,, +              sourceExecutor,, +              GlideExecutor.newUnlimitedSourceExecutor(),, +              GlideExecutor.newAnimationExecutor());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +      GlideExecutor sourceUnlimitedExecutor,, +      GlideExecutor animationExecutor) {, +    this(, +        memoryCache,, +        diskCacheFactory,, +        diskCacheExecutor,, +        sourceExecutor,, +        sourceUnlimitedExecutor,, +        animationExecutor,, +        /*jobs=*/ null,, +        /*keyFactory=*/ null,, +        /*activeResources=*/ null,, +        /*engineJobFactory=*/ null,, +        /*decodeJobFactory=*/ null,, +        /*resourceRecycler=*/ null);, +      GlideExecutor animationExecutor,, +      engineJobFactory =, +          new EngineJobFactory(, +              diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor, animationExecutor, this);, +      boolean useAnimationPool,, +        useUnlimitedSourceExecutorPool, useAnimationPool);, +    @Synthetic final GlideExecutor animationExecutor;, +            return new EngineJob<Object>(, +                diskCacheExecutor,, +                sourceExecutor,, +                sourceUnlimitedExecutor,, +                animationExecutor,, +                listener,, +                pool);, +    EngineJobFactory(, +        GlideExecutor diskCacheExecutor,, +        GlideExecutor sourceExecutor,, +        GlideExecutor sourceUnlimitedExecutor,, +        GlideExecutor animationExecutor,, +        EngineJobListener listener) {, +      this.animationExecutor = animationExecutor;, +        boolean useUnlimitedSourceGeneratorPool, boolean isAnimation) {, +      return result.init(key, isMemoryCacheable, useUnlimitedSourceGeneratorPool, isAnimation);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      engine =, +          new Engine(, +              memoryCache,, +              diskCacheFactory,, +              diskCacheExecutor,, +              sourceExecutor,, +              GlideExecutor.newUnlimitedSourceExecutor(),, +              GlideExecutor.newAnimationExecutor());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +      GlideExecutor sourceUnlimitedExecutor,, +      GlideExecutor animationExecutor) {, +    this(, +        memoryCache,, +        diskCacheFactory,, +        diskCacheExecutor,, +        sourceExecutor,, +        sourceUnlimitedExecutor,, +        animationExecutor,, +        /*jobs=*/ null,, +        /*keyFactory=*/ null,, +        /*activeResources=*/ null,, +        /*engineJobFactory=*/ null,, +        /*decodeJobFactory=*/ null,, +        /*resourceRecycler=*/ null);, +      GlideExecutor animationExecutor,, +      engineJobFactory =, +          new EngineJobFactory(, +              diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor, animationExecutor, this);, +      boolean useAnimationPool,, +        useUnlimitedSourceExecutorPool, useAnimationPool);, +    @Synthetic final GlideExecutor animationExecutor;, +            return new EngineJob<Object>(, +                diskCacheExecutor,, +                sourceExecutor,, +                sourceUnlimitedExecutor,, +                animationExecutor,, +                listener,, +                pool);, +    EngineJobFactory(, +        GlideExecutor diskCacheExecutor,, +        GlideExecutor sourceExecutor,, +        GlideExecutor sourceUnlimitedExecutor,]