[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.engine.EngineBuilder;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.target.Target;, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.engine.EngineBuilder;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.target.Target;, +++ b/library/robolectric/src/com/bumptech/glide/MetadataTest.java, +package com.bumptech.glide;, +, +import com.bumptech.glide.Metadata;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DecodeFormat;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class MetadataTest {, +, +    @Test(expected = NullPointerException.class), +    public void testNullPriorityThrows() {, +        new Metadata(null, DecodeFormat.ALWAYS_ARGB_8888);, +    }, +, +    @Test(expected = NullPointerException.class), +    public void testNullDecodeFormatThrows() {, +        new Metadata(Priority.IMMEDIATE, null);, +    }, +, +    @Test, +    public void testCanGetPriority() {, +        assertEquals(Priority.IMMEDIATE, new Metadata(Priority.IMMEDIATE, DecodeFormat.ALWAYS_ARGB_8888).getPriority());, +    }, +, +    @Test, +    public void testCanGetDecodeFormat() {, +        assertEquals(DecodeFormat.ALWAYS_ARGB_8888,, +                new Metadata(Priority.LOW, DecodeFormat.ALWAYS_ARGB_8888).getDecodeFormat());, +    }, +, +    @Test, +    public void testMetadataWithSameArgsAreEqual() {, +        assertEquals(new Metadata(Priority.LOW, DecodeFormat.PREFER_RGB_565),, +                new Metadata(Priority.LOW, DecodeFormat.PREFER_RGB_565));, +    }, +, +}, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.resource.ResourceFetcher;, +import com.bumptech.glide.load.model.GlideUrl;, +import com.bumptech.glide.load.model.GenericLoaderFactory;, +import com.bumptech.glide.load.model.ModelLoader;, +import com.bumptech.glide.load.model.ModelLoaderFactory;, +import com.bumptech.glide.load.model.stream.StreamModelLoader;, +import com.bumptech.glide.load.engine.EngineBuilder;, +import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;, +import com.bumptech.glide.load.engine.cache.DiskCache;, +import com.bumptech.glide.load.engine.cache.MemoryCache;, +import com.bumptech.glide.request.Request;, +import com.bumptech.glide.request.target.Target;, +++ b/library/robolectric/src/com/bumptech/glide/MetadataTest.java, +package com.bumptech.glide;, +, +import com.bumptech.glide.Metadata;, +import com.bumptech.glide.Priority;, +import com.bumptech.glide.load.DecodeFormat;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +, +public class MetadataTest {, +, +    @Test(expected = NullPointerException.class), +    public void testNullPriorityThrows() {, +        new Metadata(null, DecodeFormat.ALWAYS_ARGB_8888);, +    }, +, +    @Test(expected = NullPointerException.class), +    public void testNullDecodeFormatThrows() {, +        new Metadata(Priority.IMMEDIATE, null);, +    }]