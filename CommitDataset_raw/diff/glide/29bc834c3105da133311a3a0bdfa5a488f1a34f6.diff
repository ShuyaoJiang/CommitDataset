[+++ b/library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java, +        public GlideAnimation<T> build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java, +        public GlideAnimation<T> build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/GlideAnimationFactory.java, +/**, + * A factory class that can produce different {@link com.bumptech.glide.request.animation.GlideAnimation}s based on the, + * state of the request., + * @param <R> The type of resource that needs to be animated into the target., + */, +    /**, +     * Returns a new {@link com.bumptech.glide.request.animation.GlideAnimation}., +     *, +     * @param isFromMemoryCache True if this will be an animation for a resource that was loaded from the memory cache., +     * @param isFirstResource True if this is the first resource to be loaded into the target., +     */, +    public GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java, +        public GlideAnimation<T> build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/GlideAnimationFactory.java, +/**, + * A factory class that can produce different {@link com.bumptech.glide.request.animation.GlideAnimation}s based on the, + * state of the request., + * @param <R> The type of resource that needs to be animated into the target., + */, +    /**, +     * Returns a new {@link com.bumptech.glide.request.animation.GlideAnimation}., +     *, +     * @param isFromMemoryCache True if this will be an animation for a resource that was loaded from the memory cache., +     * @param isFirstResource True if this is the first resource to be loaded into the target., +     */, +    public GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/animation/NoAnimation.java, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java, +        public GlideAnimation<T> build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/GlideAnimationFactory.java, +/**, + * A factory class that can produce different {@link com.bumptech.glide.request.animation.GlideAnimation}s based on the, + * state of the request., + * @param <R> The type of resource that needs to be animated into the target., + */, +    /**, +     * Returns a new {@link com.bumptech.glide.request.animation.GlideAnimation}., +     *, +     * @param isFromMemoryCache True if this will be an animation for a resource that was loaded from the memory cache., +     * @param isFirstResource True if this is the first resource to be loaded into the target., +     */, +    public GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/animation/NoAnimation.java, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/ViewAnimation.java, +         * @param isFirstResource {@inheritDoc}, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +            if (isFromMemoryCache || !isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/DrawableCrossFadeViewAnimation.java, +        public GlideAnimation<T> build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/GlideAnimationFactory.java, +/**, + * A factory class that can produce different {@link com.bumptech.glide.request.animation.GlideAnimation}s based on the, + * state of the request., + * @param <R> The type of resource that needs to be animated into the target., + */, +    /**, +     * Returns a new {@link com.bumptech.glide.request.animation.GlideAnimation}., +     *, +     * @param isFromMemoryCache True if this will be an animation for a resource that was loaded from the memory cache., +     * @param isFirstResource True if this is the first resource to be loaded into the target., +     */, +    public GlideAnimation<R> build(boolean isFromMemoryCache, boolean isFirstResource);, +++ b/library/src/main/java/com/bumptech/glide/request/animation/NoAnimation.java, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/ViewAnimation.java, +         * @param isFirstResource {@inheritDoc}, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +            if (isFromMemoryCache || !isFirstResource) {, +++ b/library/src/main/java/com/bumptech/glide/request/animation/ViewPropertyAnimation.java, +        public GlideAnimation build(boolean isFromMemoryCache, boolean isFirstResource) {, +            if (isFromMemoryCache || !isFirstResource) {]