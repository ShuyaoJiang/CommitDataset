[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, +    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, +    // order produced by the Set additions above.), +    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, +    Collections.sort(suppressionsList);, +    for (String suppression : suppressionsList) {, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, +    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, +    // order produced by the Set additions above.), +    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, +    Collections.sort(suppressionsList);, +    for (String suppression : suppressionsList) {, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +JUNIT_VERSION=4.13-SNAPSHOT, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, +    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, +    // order produced by the Set additions above.), +    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, +    Collections.sort(suppressionsList);, +    for (String suppression : suppressionsList) {, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +JUNIT_VERSION=4.13-SNAPSHOT, +++ b/instrumentation/build.gradle, +    androidTestImplementation "junit:junit:${JUNIT_VERSION}", +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, +    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, +    // order produced by the Set additions above.), +    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, +    Collections.sort(suppressionsList);, +    for (String suppression : suppressionsList) {, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +JUNIT_VERSION=4.13-SNAPSHOT, +++ b/instrumentation/build.gradle, +    androidTestImplementation "junit:junit:${JUNIT_VERSION}", +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.junit.Assert.assertThrows;, +import static org.junit.Assert.fail;, +import com.bumptech.glide.request.target.Target;, +import java.util.concurrent.Future;, +import org.junit.function.ThrowingRunnable;, +        Target<Drawable> target =, +    FutureTarget<Drawable> loadFromSourceFuture = GlideApp.with(context), +      fail("Expected only from cache Future to time out");, +, +    assertThat(concurrency.get(loadFromSourceFuture)).isNotNull();, +    final Future<Drawable> firstQueuedFuture = GlideApp.with(context), +    // The first request only from cache should fail because the item is not in cache., +    assertThrows(RuntimeException.class, new ThrowingRunnable() {, +      @Override, +      public void run() throws Throwable {, +        concurrency.get(firstQueuedFuture);, +      }, +    });, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import java.util.ArrayList;, +    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the, +    // order produced by the Set additions above.), +    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);, +    Collections.sort(suppressionsList);, +    for (String suppression : suppressionsList) {, +++ b/gradle.properties, +ANDROID_SUPPORT_VERSION=27.0.2, +JUNIT_VERSION=4.13-SNAPSHOT, +++ b/instrumentation/build.gradle, +    androidTestImplementation "junit:junit:${JUNIT_VERSION}", +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java, +import static org.junit.Assert.assertThrows;, +import static org.junit.Assert.fail;, +import com.bumptech.glide.request.target.Target;, +import java.util.concurrent.Future;, +import org.junit.function.ThrowingRunnable;, +        Target<Drawable> target =, +    FutureTarget<Drawable> loadFromSourceFuture = GlideApp.with(context), +      fail("Expected only from cache Future to time out");, +, +    assertThat(concurrency.get(loadFromSourceFuture)).isNotNull();, +    final Future<Drawable> firstQueuedFuture = GlideApp.with(context), +    // The first request only from cache should fail because the item is not in cache., +    assertThrows(RuntimeException.class, new ThrowingRunnable() {, +      @Override, +      public void run() throws Throwable {, +        concurrency.get(firstQueuedFuture);, +      }, +    });, +++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ExternallyClearedDiskCacheTest.java, +package com.bumptech.glide;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +, +import android.content.Context;, +import android.graphics.drawable.Drawable;, +import android.support.test.InstrumentationRegistry;]