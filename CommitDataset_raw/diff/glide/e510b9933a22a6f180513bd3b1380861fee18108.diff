[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +        // TODO: fixme., +//        requestManager, +//                .using(modelLoader, File.class), +//                .load(glideUrl), +//                .as(File.class), +//                .decoder(sourceDecoder), +//                .cacheDecoder(cacheDecoder), +//                .encoder(encoder), +//                .sourceEncoder(sourceEncoder), +//                .into(target);, +        requestManager.asDrawable().load(file).into(target);, +        requestManager.asDrawable().load(file).into(imageView);, +        requestManager.asDrawable().load(url).into(target);, +        requestManager.asDrawable().load(url).into(imageView);, +        requestManager.asBitmap().load(uri).into(target);, +                .to(byte[].class), +                .load(uri), +                .transcoder(transcoder), +        requestManager.asBitmap().to(byte[].class).load(uri).into(target);, +        requestManager.asDrawable().load(uri).into(target);, +        requestManager.asDrawable().load(uri).into(imageView);, +                .asGif(), +                .listener(new RequestListener<GifDrawable>() {, +                    public boolean onException(Exception e, Object model, Target target, boolean isFirstResource) {, +                    public boolean onResourceReady(GifDrawable resource, Object model, Target target,, +                            boolean isFromMemoryCache, boolean isFirstResource) {, +        requestManager.asDrawable().load(string).into(imageView);, +        requestManager.asDrawable().load(integer).into(target);, +        requestManager.asDrawable().load(integer).into(imageView);, +        requestManager.asDrawable().load(bytes).into(target);, +        requestManager.asDrawable().load(bytes).into(imageView);, +        requestManager.asDrawable().load(unregistered).into(target);, +        // TODO: fixme., +//        requestManager, +//                .using(mockLoader), +//                .load(unregistered), +//                .into(target);, +        requestManager.asDrawable().load(0.5f).into(target);, +                .load(fakeUri), +                .to(byte[].class), +                .load(fakeUri), +                .to(byte[].class), +                .load(fakeUri), +                .load(fakeUri), +                .transcoder(new ResourceTranscoder<Bitmap, Bitmap>() {, +                }), +                .asDrawable(), +                        .asDrawable(), +                .asDrawable(), +                        .asDrawable(), +                                .asDrawable(), +                                        .asDrawable(), +                .asDrawable(), +                        .asDrawable(), +        requestManager.asDrawable().load((Double) null).into(target);, +        requestManager.asDrawable().load((Float) null).into(target);, +        requestManager.asDrawable().load((Double) null).into(target);, +                .asDrawable(), +                .apply(placeholderOf(drawable)), +                .asDrawable(), +                .apply(placeholderOf(placeholder), +                    .error(error)), +        // TODO: fixme., +//        requestManager, +//                .using(modelLoader), +//                .load(nullString), +//                .placeholder(drawable), +//                .into(target);, +        requestManager.asDrawable().load(data).into(target);, +//        RequestBuilder<Drawable, Drawable> firstRequest = requestManager.from(String.class).transcoder, +//                (firstTranscoder), +//                .override(100, 100);, +//        RequestBuilder<Drawable, Drawable> secondRequest = firstRequest.clone().transcoder(secondTranscoder);, +//, +//        firstRequest.load(fakeUri).into(firstTarget);, +//        verify(firstTarget).onResourceReady(eq(firstResult), any(GlideAnimation.class));, +//, +//        secondRequest.load(fakeUri).into(secondTarget);, +//        verify(secondTarget).onResourceReady(eq(secondResult), any(GlideAnimation.class));, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +        // TODO: fixme., +//        requestManager, +//                .using(modelLoader, File.class), +//                .load(glideUrl), +//                .as(File.class), +//                .decoder(sourceDecoder), +//                .cacheDecoder(cacheDecoder), +//                .encoder(encoder), +//                .sourceEncoder(sourceEncoder), +//                .into(target);, +        requestManager.asDrawable().load(file).into(target);, +        requestManager.asDrawable().load(file).into(imageView);, +        requestManager.asDrawable().load(url).into(target);, +        requestManager.asDrawable().load(url).into(imageView);]