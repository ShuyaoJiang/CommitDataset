[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.request.RequestListener;, +      @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, +      @NonNull List<RequestListener<Object>> defaultRequestListeners) {, +    List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();, +    Downsampler downsampler =, +        new Downsampler(, +            imageHeaderParsers,, +            resources.getDisplayMetrics(),, +            bitmapPool,, +            arrayPool);, +        new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);, +            new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool)), +            defaultRequestListeners,, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.request.RequestListener;, +      @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, +      @NonNull List<RequestListener<Object>> defaultRequestListeners) {, +    List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();, +    Downsampler downsampler =, +        new Downsampler(, +            imageHeaderParsers,, +            resources.getDisplayMetrics(),, +            bitmapPool,, +            arrayPool);, +        new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);, +            new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool)), +            defaultRequestListeners,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.GlideException;, +import com.bumptech.glide.request.RequestListener;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +  @Nullable, +  private List<RequestListener<Object>> defaultRequestListeners;, +  /**, +   * Adds a global {@link RequestListener} that will be added to every request started with Glide., +   *, +   * <p>Multiple {@link RequestListener}s can be added here, in {@link RequestManager} scopes or, +   * to individual {@link RequestBuilder}s. {@link RequestListener}s are called in the order they're, +   * added. Even if an earlier {@link RequestListener} returns {@code true} from, +   * {@link RequestListener#onLoadFailed(GlideException, Object, Target, boolean)} or, +   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}, it will, +   * not prevent subsequent {@link RequestListener}s from being called., +   *, +   * <p>Because Glide requests can be started for any number of individual resource types, any, +   * listener added here has to accept any generic resource type in, +   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}. If you, +   * must base the behavior of the listener on the resource type, you will need to use, +   * {@code instanceof} to do so. It's not safe to cast resource types without first checking, +   * with {@code instanceof}., +   */, +  @NonNull, +  public GlideBuilder addGlobalRequestListener(@NonNull RequestListener<Object> listener) {, +    if (defaultRequestListeners == null) {, +      defaultRequestListeners = new ArrayList<>();, +    }, +    defaultRequestListeners.add(listener);, +    return this;, +  }, +, +    if (defaultRequestListeners == null) {, +      defaultRequestListeners = Collections.emptyList();, +    } else {, +      defaultRequestListeners = Collections.unmodifiableList(defaultRequestListeners);, +    }, +, +        defaultTransitionOptions,, +        defaultRequestListeners);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.ImageHeaderParser;, +import com.bumptech.glide.request.RequestListener;, +      @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,, +      @NonNull List<RequestListener<Object>> defaultRequestListeners) {, +    List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();, +    Downsampler downsampler =, +        new Downsampler(, +            imageHeaderParsers,, +            resources.getDisplayMetrics(),, +            bitmapPool,, +            arrayPool);, +        new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);, +            new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool)), +            defaultRequestListeners,, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import com.bumptech.glide.load.DataSource;, +import com.bumptech.glide.load.engine.GlideException;, +import com.bumptech.glide.request.RequestListener;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +  @Nullable, +  private List<RequestListener<Object>> defaultRequestListeners;, +  /**, +   * Adds a global {@link RequestListener} that will be added to every request started with Glide., +   *]