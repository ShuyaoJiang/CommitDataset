[+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java, +    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {, +        decoder = new GifResourceDecoder(context, bitmapPool);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java, +    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {, +        decoder = new GifResourceDecoder(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +        this(context, bitmapPool, PARSER_POOL, DECODER_POOL);, +    GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParserPool parserPool,, +            GifDecoderPool decoderPool) {, +++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifResourceDecoderTest.java, +        decoder = new GifResourceDecoder(Robolectric.application, bitmapPool, parserPool, decoderPool);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +                new GifDrawableLoadProvider(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableLoadProvider.java, +    public GifDrawableLoadProvider(Context context, BitmapPool bitmapPool) {, +        decoder = new GifResourceDecoder(context, bitmapPool);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifResourceDecoder.java, +        this(context, bitmapPool, PARSER_POOL, DECODER_POOL);, +    GifResourceDecoder(Context context, BitmapPool bitmapPool, GifHeaderParserPool parserPool,, +            GifDecoderPool decoderPool) {, +++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java, +    // We can't tell if a gif has transparency to decode a partial frame on top of a previous frame, or if the final, +    // frame will actually have transparent pixels, so we must always use a format that supports transparency. We can't, +    // use ARGB_4444 because of framework issues drawing onto ARGB_4444 Bitmaps using Canvas., +    private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;, +, +        Bitmap result = bitmapProvider.obtain(header.width, header.height, BITMAP_CONFIG);, +            result = Bitmap.createBitmap(header.width, header.height, BITMAP_CONFIG);]