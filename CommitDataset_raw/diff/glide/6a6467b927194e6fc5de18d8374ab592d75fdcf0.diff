[+++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +        when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(getContext()).prepend(GlideUrl.class, InputStream.class, mockUrlLoaderFactory);, +        when(failFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))).thenReturn(failLoader);, +        Glide.get(getContext()).prepend(failModel, failResource, failFactory);, +        when(modelLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(Robolectric.application).prepend(modelClass, InputStream.class, modelLoaderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +        when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(getContext()).prepend(GlideUrl.class, InputStream.class, mockUrlLoaderFactory);, +        when(failFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))).thenReturn(failLoader);, +        Glide.get(getContext()).prepend(failModel, failResource, failFactory);, +        when(modelLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(Robolectric.application).prepend(modelClass, InputStream.class, modelLoaderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/resource/ByteArrayFetcherTest.java, +import static com.google.common.truth.Truth.assertThat;, +        ByteArrayFetcher fetcher = new ByteArrayFetcher(bytes);, +    public void testReturnsEmptyId() {, +        ByteArrayFetcher fetcher = new ByteArrayFetcher(new byte[0]);, +        assertThat(fetcher.getId()).isEmpty();, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +        when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(getContext()).prepend(GlideUrl.class, InputStream.class, mockUrlLoaderFactory);, +        when(failFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))).thenReturn(failLoader);, +        Glide.get(getContext()).prepend(failModel, failResource, failFactory);, +        when(modelLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class))), +        Glide.get(Robolectric.application).prepend(modelClass, InputStream.class, modelLoaderFactory);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/resource/ByteArrayFetcherTest.java, +import static com.google.common.truth.Truth.assertThat;, +        ByteArrayFetcher fetcher = new ByteArrayFetcher(bytes);, +    public void testReturnsEmptyId() {, +        ByteArrayFetcher fetcher = new ByteArrayFetcher(new byte[0]);, +        assertThat(fetcher.getId()).isEmpty();, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.doAnswer;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.never;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +, +        DataFetcherSet<?> dataFetcherSet = mock(DataFetcherSet.class);, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +import com.bumptech.glide.load.model.MultiModelLoaderFactory;, +import static com.bumptech.glide.request.RequestOptions.placeholderOf;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyInt;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Matchers.eq;, +import static org.mockito.Matchers.notNull;, +import static org.mockito.Mockito.doAnswer;]