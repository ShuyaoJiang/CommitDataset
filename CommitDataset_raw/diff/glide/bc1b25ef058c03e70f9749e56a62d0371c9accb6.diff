[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      builder = builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    if (methodToOverride.isVarArgs()) {, +      builder = builder, +          .addModifiers(Modifier.FINAL), +          .addAnnotation(SafeVarargs.class);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +      builder = builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    if (methodToOverride.isVarArgs()) {, +      builder = builder, +          .addModifiers(Modifier.FINAL), +          .addAnnotation(SafeVarargs.class);, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +   * <p>Recursive calls to thumbnail are supported., +   *, +   * <p>Overrides any previous calls to {@link #thumbnail(RequestBuilder)},, +   * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder[])}., +   *, +   * @see #thumbnail(float), +   * @see #thumbnail(RequestBuilder[]), +   *, +   * Recursively applies {@link #thumbnail(RequestBuilder)} so that the {@link RequestBuilder}s are, +   * loaded as thumbnails in the given priority order., +   *, +   * <p>{@link #thumbnail(RequestBuilder)} is applied in the order given so that the, +   * {@link RequestBuilder} at position 0 has the {@link RequestBuilder} at position 1 applied, +   * as using its thumbnail method, the {@link RequestBuilder} at position 1 has the, +   * {@link RequestBuilder} at position 2 applied using its thumbnail method and so on., +   *, +   * <p>Calling this method with an {@code null} array of {@link RequestBuilder} thumbnails or, +   * an empty array of {@link RequestBuilder} thumbnails is equivalent to calling, +   * {@link #thumbnail(RequestBuilder)} with {@code null}., +   *, +   * <p>Any individual {@link RequestBuilder} in the array of thumbnails provided here may be, +   * {@code null}. {@code null} {@link RequestBuilder}s are ignored and excluded from the recursive, +   * chain., +   *, +   * <p>The {@link RequestBuilder} objects provided here may be mutated and have any previous, +   * calls to their {@link #thumbnail(RequestBuilder[])} or {@link #thumbnail(RequestBuilder)}, +   * methods overridden., +   *, +   * <p>Overrides any previous calls to {@link #thumbnail(RequestBuilder)},, +   * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder[])}., +   *, +   * @see #thumbnail(float), +   * @see #thumbnail(RequestBuilder), +   *, +   * @return This request builder., +   */, +  @SuppressWarnings({"CheckResult", "unchecked"}), +  @CheckResult, +  public RequestBuilder<TranscodeType> thumbnail(, +      @Nullable RequestBuilder<TranscodeType> /*@Nullable*/ ... thumbnails) {, +    if (thumbnails == null || thumbnails.length == 0) {, +      return thumbnail((RequestBuilder<TranscodeType>) null);, +    }, +, +    RequestBuilder<TranscodeType> previous = null;, +, +    // Start with the lowest priority thumbnail so that we can safely handle mutations if, +    // autoClone() is enabled by assigning the result of calling thumbnail() during the iteration., +    // Starting with the highest priority thumbnail would prevent us from assigning the result of, +    // thumbnail because the mutated request wouldn't be used in the next iteration., +    for (int i = thumbnails.length - 1; i >= 0; i--) {, +      RequestBuilder<TranscodeType> current = thumbnails[i];, +      // Ignore null thumbnails., +      if (current == null) {, +        continue;, +      }, +, +      if (previous == null) {, +        // If we don't yet have our first non-null request, set it and continue., +        previous = current;, +      } else {, +        // Otherwise make our next lowest priority request the thumbnail of our current request., +        previous = current.thumbnail(previous);, +      }, +    }, +    return thumbnail(previous);, +  }, +, +  /**, +   * {@link android.widget.ImageView.ScaleType}., +   * copied for the thumbnail load., +   * <p>Recursive calls to thumbnail are supported., +   *, +   * <p>Overrides any previous calls to {@link #thumbnail(RequestBuilder[])},, +   * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder)}., +   *, +   * @see #thumbnail(RequestBuilder), +   * @see #thumbnail(RequestBuilder[])]