[+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java, +import android.util.Log;, +, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +    private static final String TAG = "PriorityExecutor";, +    private final AtomicInteger ordering = new AtomicInteger();, +    private final UncaughtThrowableStrategy uncaughtThrowableStrategy;, +, +    /**, +     * A strategy for handling unexpected and uncaught throwables thrown by futures run on the pool., +     */, +    public enum UncaughtThrowableStrategy {, +        /** Silently catches and ignores the uncaught throwables. */, +        IGNORE,, +        /** Logs the uncaught throwables using {@link #TAG} and {@link Log}. */, +        LOG {, +            @Override, +            protected void handle(Throwable t) {, +                if (Log.isLoggable(TAG, Log.ERROR)) {, +                    Log.e(TAG, "Request threw uncaught throwable", t);, +                }, +            }, +        },, +        /** Rethrows the uncaught throwables to crash the app. */, +        THROW {, +            @Override, +            protected void handle(Throwable t) {, +                super.handle(t);, +                throw new RuntimeException(t);, +            }, +        };, +, +        protected void handle(Throwable t) {, +            // Ignore., +        }, +    }, +        this(poolSize, UncaughtThrowableStrategy.LOG);, +    }, +, +    /**, +     * Constructor to build a fixed thread pool with the given pool size using, +     * {@link com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.DefaultThreadFactory}., +     *, +     * @param poolSize The number of threads., +     * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected throwables, +     *                                  thrown by Futures run by the pool., +     */, +    public FifoPriorityThreadPoolExecutor(int poolSize, UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +        this(poolSize, poolSize, 0, TimeUnit.MILLISECONDS, new DefaultThreadFactory(),, +            uncaughtThrowableStrategy);, +            ThreadFactory threadFactory, UncaughtThrowableStrategy uncaughtThrowableStrategy) {, +        this.uncaughtThrowableStrategy = uncaughtThrowableStrategy;, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {, +        super.afterExecute(r, t);, +        if (t == null && r instanceof Future<?>) {, +            Future<?> future = (Future<?>) r;, +            if (future.isDone() && !future.isCancelled()) {, +                try {, +                    future.get();, +                } catch (InterruptedException e) {, +                    uncaughtThrowableStrategy.handle(e);, +                } catch (ExecutionException e) {, +                    uncaughtThrowableStrategy.handle(e);, +                }, +            }, +        }, +    }, +]