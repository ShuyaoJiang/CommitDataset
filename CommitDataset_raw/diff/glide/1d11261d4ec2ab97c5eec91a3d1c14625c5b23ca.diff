[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.Presenter;, +import com.bumptech.glide.presenter.ThumbImagePresenter;, +import com.bumptech.glide.resize.Metadata;, +import com.bumptech.glide.resize.Priority;, +        Presenter presenter = target.getPresenter();, +        if (presenter != null) {, +            presenter.clear();, +        public Request<ModelType> thumbnail(float sizeMultiplier) {, +            super.thumbnail(sizeMultiplier);, +            return this;, +        }, +, +        private Float thumbSizeMultiplier;, +        public GenericRequest thumbnail(float sizeMultiplier) {, +            if (sizeMultiplier < 0f || sizeMultiplier > 1f) {, +                throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");, +            }, +            this.thumbSizeMultiplier = sizeMultiplier;, +            return this;, +        }, +, +            Presenter<ModelType> presenter = buildImagePresenter(target);, +            presenter.setModel(model);, +            return target;, +        private <Y extends Target> ImagePresenter.Builder<ModelType, Y> buildImagePresenter(, +                ModelLoader<ModelType, ImageResourceType> imageModelLoader,, +                ModelLoader<ModelType, VideoResourceType> videoModelLoader, final Y target) {, +            return builder;, +        }, +, +, +        private <Y extends Target> Presenter<ModelType> buildImagePresenter(final Y target) {, +, +            ModelLoader<ModelType, ImageResourceType> imageModelLoader = null;, +            if (imageModelLoaderFactory != null) {, +                imageModelLoader = imageModelLoaderFactory.build(context, Glide.get(context).loaderFactory);, +            }, +            ModelLoader<ModelType, VideoResourceType> videoModelLoader = null;, +            if (videoModelLoaderFactory != null) {, +                videoModelLoader = videoModelLoaderFactory.build(context, Glide.get(context).loaderFactory);, +            }, +, +            ImagePresenter.Builder<ModelType, Y> fullBuilder, +                    = buildImagePresenter(imageModelLoader, videoModelLoader, target);, +, +            final Presenter<ModelType> result;, +            if (thumbSizeMultiplier != null) {, +                ImagePresenter.Builder<ModelType, Y> thumbBuilder = buildImagePresenter(imageModelLoader,, +                        videoModelLoader, target);, +                result = new ThumbImagePresenter.Builder<ModelType, Y>(), +                        .setFullPresenterBuilder(fullBuilder), +                        .setThumbPresenterBuilder(thumbBuilder, +                                .setSizeMultiplier(thumbSizeMultiplier), +                                .setMetadata(new Metadata(Priority.HIGH))), +                        .setTarget(target, context), +                        .build();, +            } else {, +                result = fullBuilder.build();, +            }, +            return result;, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.presenter.Presenter;, +import com.bumptech.glide.presenter.ThumbImagePresenter;, +import com.bumptech.glide.resize.Metadata;, +import com.bumptech.glide.resize.Priority;, +        Presenter presenter = target.getPresenter();, +        if (presenter != null) {, +            presenter.clear();, +        public Request<ModelType> thumbnail(float sizeMultiplier) {, +            super.thumbnail(sizeMultiplier);, +            return this;, +        }, +, +        private Float thumbSizeMultiplier;, +        public GenericRequest thumbnail(float sizeMultiplier) {, +            if (sizeMultiplier < 0f || sizeMultiplier > 1f) {, +                throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");, +            }, +            this.thumbSizeMultiplier = sizeMultiplier;, +            return this;, +        }, +, +            Presenter<ModelType> presenter = buildImagePresenter(target);, +            presenter.setModel(model);, +            return target;, +        private <Y extends Target> ImagePresenter.Builder<ModelType, Y> buildImagePresenter(, +                ModelLoader<ModelType, ImageResourceType> imageModelLoader,, +                ModelLoader<ModelType, VideoResourceType> videoModelLoader, final Y target) {, +            return builder;, +        }, +, +, +        private <Y extends Target> Presenter<ModelType> buildImagePresenter(final Y target) {, +, +            ModelLoader<ModelType, ImageResourceType> imageModelLoader = null;, +            if (imageModelLoaderFactory != null) {, +                imageModelLoader = imageModelLoaderFactory.build(context, Glide.get(context).loaderFactory);, +            }, +            ModelLoader<ModelType, VideoResourceType> videoModelLoader = null;]