[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +   * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +   * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      // ResourceType in DecodeCallback below is required for compilation to work with gradle., +      return path.load(, +          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +   * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      // ResourceType in DecodeCallback below is required for compilation to work with gradle., +      return path.load(, +          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  @TargetApi(Build.VERSION_CODES.O), +  private static void assertNotHardwareConfig(Bitmap.Config config) {, +    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {, +      return;, +    }, +, +, +  @Nullable, +  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {, +    assertNotHardwareConfig(config);, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +   * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      // ResourceType in DecodeCallback below is required for compilation to work with gradle., +      return path.load(, +          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  @TargetApi(Build.VERSION_CODES.O), +  private static void assertNotHardwareConfig(Bitmap.Config config) {, +    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {, +      return;, +    }, +, +, +  @Nullable, +  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {, +    assertNotHardwareConfig(config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +    boolean isHardwareConfigAllowed =, +      options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +   * android.graphics.Bitmap.Config#HARDWARE} on Android O+., +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      // ResourceType in DecodeCallback below is required for compilation to work with gradle., +      return path.load(, +          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  @TargetApi(Build.VERSION_CODES.O), +  private static void assertNotHardwareConfig(Bitmap.Config config) {, +    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {, +      return;, +    }, +, +, +  @Nullable, +  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {, +    assertNotHardwareConfig(config);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +    boolean isHardwareConfigAllowed =, +      options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +import android.annotation.TargetApi;, +  @TargetApi(Build.VERSION_CODES.O)]