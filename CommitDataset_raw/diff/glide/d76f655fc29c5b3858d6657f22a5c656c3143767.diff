[+++ b/library/res/values/ids.xml, +<?xml version="1.0" encoding="utf-8"?>, +<resources>, +  <item type="id" name="image_presenter_id" />, +</resources>, +++ b/library/res/values/ids.xml, +<?xml version="1.0" encoding="utf-8"?>, +<resources>, +  <item type="id" name="image_presenter_id" />, +</resources>, +++ b/library/src/com/bumptech/glide/Glide.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.view.animation.Animation;, +import android.view.animation.AnimationUtils;, +import android.widget.ImageView;, +import com.bumptech.glide.loader.image.ImageLoader;, +import com.bumptech.glide.loader.model.FileStreamLoader;, +import com.bumptech.glide.loader.model.ModelStreamLoader;, +import com.bumptech.glide.loader.model.UrlStreamLoader;, +import com.bumptech.glide.presenter.ImagePresenter;, +import com.bumptech.glide.presenter.ImageSetCallback;, +import com.bumptech.glide.resize.ImageManager;, +import com.bumptech.glide.resize.loader.Approximate;, +import com.bumptech.glide.resize.loader.CenterCrop;, +import com.bumptech.glide.resize.loader.FitCenter;, +, +import java.io.File;, +import java.net.URL;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * Static helper methods/classes to present a simple unified interface for using glide. Allows 90%, + * of the functionality of the library. The trade off is some extra unused object allocation, and a few unavailable, + * methods. For many users this should be enough to make effective use of the library. For others it can serve as a, + * starting point and example. This class is not thread safe., + */, +public class Glide {, +    private static final Glide GLIDE = new Glide();, +    private static final Map<Class, ModelStreamLoader> classToModelStream = new HashMap<Class, ModelStreamLoader>() {{, +        put(File.class, new FileStreamLoader());, +        put(URL.class, new UrlStreamLoader());, +    }};, +, +    private ImageManager imageManager;, +, +    public static Glide get() {, +        return GLIDE;, +    }, +, +    protected Glide() { }, +, +    /**, +     * Return the current {@link ImageManager} or create and return a new one if one is not currently set., +     *, +     * @see #setImageManager(com.bumptech.glide.resize.ImageManager.Builder), +     * @see #isImageManagerSet(), +     *, +     * @param context Any {@link Context}. This will not be retained passed this call, +     * @return The current ImageManager, +     */, +    public ImageManager getImageManager(Context context) {, +        if (!isImageManagerSet()) {, +            setImageManager(new ImageManager.Builder(context));, +        }, +        return imageManager;, +    }, +, +    /**, +     * Use to check whether or not an {@link ImageManager} has been set yet. Can be used in, +     * {@link android.app.Activity#onCreate(android.os.Bundle)} along with, +     * {@link #setImageManager(com.bumptech.glide.resize.ImageManager.Builder)} to set an {@link ImageManager} with, +     * custom options for use with {@link Glide#load(Object)} and/or as an easily accessible singleton., +     *, +     * @return true iff an {@link ImageManager} is currently set, +     */, +    public boolean isImageManagerSet() {, +        return imageManager != null;, +    }, +, +    /**, +     * @see #setImageManager(com.bumptech.glide.resize.ImageManager), +     *, +     * @param builder The builder that will be used to construct a new ImageManager, +     */, +    public void setImageManager(ImageManager.Builder builder) {, +        setImageManager(builder.build());, +    }, +, +    /**, +     * Set the {@link ImageManager} to use with {@link Glide#load(Object)}. Replaces the current {@link ImageManager}, +     * if one has already been set., +     *, +     * @see #isImageManagerSet(), +     *, +     * @param imageManager The ImageManager to use, +     */, +    public void setImageManager(ImageManager imageManager) {]