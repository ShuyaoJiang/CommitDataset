[+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.io.IOException;, +    private InputStream stream;, +        stream = client.newCall(request), +                .execute(), +                .body(), +                .byteStream();, +        return stream;, +        if (stream == null) {, +            return;, +        }, +        try {, +            stream.close();, +        } catch (IOException e) {, +            // Ignored, +        }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.io.IOException;, +    private InputStream stream;, +        stream = client.newCall(request), +                .execute(), +                .body(), +                .byteStream();, +        return stream;, +        if (stream == null) {, +            return;, +        }, +        try {, +            stream.close();, +        } catch (IOException e) {, +            // Ignored, +        }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +    private InputStream stream;, +        HttpUrlFetcher.HttpUrlConnectionFactory connectionFactory = mock(HttpUrlFetcher.HttpUrlConnectionFactory.class);, +        when(connectionFactory.build(eq(url))).thenReturn(urlConnection);, +, +        fetcher = new HttpUrlFetcher(glideUrl, connectionFactory);, +        stream = mock(InputStream.class);, +        when(urlConnection.getInputStream()).thenReturn(stream);, +, +    @Test, +    public void testClosesStreamInCleanupIfNotNull() throws Exception {, +        fetcher.loadData(Priority.HIGH);, +        fetcher.cleanup();, +, +        verify(stream).close();, +    }, +, +    @Test, +    public void testClosesStreamBeforeDisconnectingConnection() throws Exception {, +        fetcher.loadData(Priority.NORMAL);, +        fetcher.cleanup();, +, +        InOrder order = inOrder(stream, urlConnection);, +        order.verify(stream).close();, +        order.verify(urlConnection).disconnect();, +    }, +++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java, +import java.io.IOException;, +    private InputStream stream;, +        stream = client.newCall(request), +                .execute(), +                .body(), +                .byteStream();, +        return stream;, +        if (stream == null) {, +            return;, +        }, +        try {, +            stream.close();, +        } catch (IOException e) {, +            // Ignored, +        }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java, +import org.mockito.InOrder;, +import static org.mockito.Mockito.inOrder;, +    private InputStream stream;, +        HttpUrlFetcher.HttpUrlConnectionFactory connectionFactory = mock(HttpUrlFetcher.HttpUrlConnectionFactory.class);, +        when(connectionFactory.build(eq(url))).thenReturn(urlConnection);, +, +        fetcher = new HttpUrlFetcher(glideUrl, connectionFactory);, +        stream = mock(InputStream.class);, +        when(urlConnection.getInputStream()).thenReturn(stream);, +, +    @Test, +    public void testClosesStreamInCleanupIfNotNull() throws Exception {, +        fetcher.loadData(Priority.HIGH);, +        fetcher.cleanup();, +, +        verify(stream).close();, +    }, +, +    @Test, +    public void testClosesStreamBeforeDisconnectingConnection() throws Exception {, +        fetcher.loadData(Priority.NORMAL);, +        fetcher.cleanup();, +]