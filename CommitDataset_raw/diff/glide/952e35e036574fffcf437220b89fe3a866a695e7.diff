[+++ /dev/null, +++ /dev/null, +++ b/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java, +package com.bumptech.glide.load.model;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +import com.google.common.testing.EqualsTester;, +, +import com.bumptech.glide.load.model.LazyHeaders.Builder;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +import org.robolectric.annotation.Config;, +, +import java.util.Map;, +, +@RunWith(RobolectricTestRunner.class), +@Config(manifest = Config.NONE, emulateSdk = 18), +public class LazyHeadersTest {, +, +    @Test, +    public void testIncludesEagerHeaders() {, +        Map<String, String> headers = new Builder(), +            .addHeader("key", "value"), +            .build(), +            .getHeaders();, +        assertThat(headers).containsEntry("key", "value");, +        assertThat(headers).hasSize(1);, +    }, +, +    @Test, +    public void testIncludesLazyHeaders() {, +        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);, +        when(factory.buildHeader()).thenReturn("value");, +        Map<String, String> headers = new Builder(), +            .addHeader("key", factory), +            .build(), +            .getHeaders();, +, +        assertThat(headers).hasSize(1);, +        assertThat(headers).containsEntry("key", "value");, +    }, +, +    @Test, +    public void testMultipleEagerValuesAreSeparatedByCommas() {, +        Map<String, String> headers = new Builder(), +            .addHeader("key", "first"), +            .addHeader("key", "second"), +            .build(), +            .getHeaders();, +, +        assertThat(headers).hasSize(1);, +        assertThat(headers).containsEntry("key", "first,second");, +    }, +, +    @Test, +    public void testMultipleLazyValuesAreSeparatedByCommas() {, +        LazyHeaderFactory first = mock(LazyHeaderFactory.class);, +        when(first.buildHeader()).thenReturn("first");, +        LazyHeaderFactory second = mock(LazyHeaderFactory.class);, +        when(second.buildHeader()).thenReturn("second");, +, +        Map<String, String> headers = new Builder(), +            .addHeader("key", first), +            .addHeader("key", second), +            .build(), +            .getHeaders();, +        assertThat(headers).hasSize(1);, +        assertThat(headers).containsEntry("key", "first,second");, +    }, +, +    @Test, +    public void testMixedEagerAndLazyValuesAreIncluded() {, +        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);, +        when(factory.buildHeader()).thenReturn("first");, +        Map<String, String> headers = new Builder(), +            .addHeader("key", factory), +            .addHeader("key", "second"), +            .build(), +            .getHeaders();, +, +        assertThat(headers).hasSize(1);, +        assertThat(headers).containsEntry("key", "first,second");, +, +        headers = new Builder(), +            .addHeader("key", "second"), +            .addHeader("key", factory), +            .build(), +            .getHeaders();, +, +        assertThat(headers).hasSize(1);, +        assertThat(headers).containsEntry("key", "second,first");, +    }, +, +    @Test, +    public void testCanAddMultipleKeys() {]