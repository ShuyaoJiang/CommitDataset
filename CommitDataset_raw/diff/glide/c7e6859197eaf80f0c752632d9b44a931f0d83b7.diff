[+++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Boolean>() {, +            public Boolean answer(InvocationOnMock invocation) throws Throwable {, +        when(service.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>() {, +            public Future<?> answer(InvocationOnMock invocation) throws Throwable {, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GenericTranscodeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GifTypeRequestTest.java, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/GlideTest.java, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Boolean>() {, +            public Boolean answer(InvocationOnMock invocation) throws Throwable {, +        when(service.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>() {, +            public Future<?> answer(InvocationOnMock invocation) throws Throwable {, +++ b/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java, +import com.bumptech.glide.manager.ConnectivityMonitor.ConnectivityListener;, +    private ConnectivityListener connectivityListener;, +                .thenAnswer(new Answer<ConnectivityMonitor>() {, +                    public ConnectivityMonitor answer(InvocationOnMock invocation) throws Throwable {, +                        connectivityListener = (ConnectivityListener) invocation.getArguments()[1];, +++ b/library/src/androidTest/java/com/bumptech/glide/BitmapTypeRequestTest.java, +, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));, +++ b/library/src/androidTest/java/com/bumptech/glide/DrawableTypeRequestTest.java, +, +import static com.bumptech.glide.tests.Util.arg;, +        when(optionsApplier.apply(anyObject(), any(GenericRequestBuilder.class))).thenAnswer(arg(1));]