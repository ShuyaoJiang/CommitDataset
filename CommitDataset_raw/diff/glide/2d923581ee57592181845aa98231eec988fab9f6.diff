[+++ b/library/custom_rules.xml, +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +++ b/library/custom_rules.xml, +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.volley.VolleyUrlLoader;, +    protected Glide() {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +        try {, +            Class.forName("com.bumptech.glide.volley.VolleyUrlLoader$Factory");, +            loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, +        } catch (ClassNotFoundException e) {, +            Log.d("Volley not found, missing url loader");, +            loaderFactory.register(URL.class, new ModelLoaderFactory<URL>() {, +                ModelLoader<URL> errorUrlLoader = new ModelLoader<URL>() {, +                    @Override, +                    public StreamLoader getStreamLoader(URL model, int width, int height) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    @Override, +                    public String getId(URL model) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    }, +                };, +, +                @Override, +                public ModelLoader<URL> build(Context context, GenericLoaderFactory factories) {, +                    return errorUrlLoader;, +                @Override @SuppressWarnings("unchecked"), +                public Class<? extends ModelLoader<URL>> loaderClass() {, +                    return (Class<ModelLoader<URL>>) errorUrlLoader.getClass();, +                @Override, +                public void teardown() {, +                }, +            });, +        }, +    }, +, +, +     *     of {@link com.bumptech.glide.loader.model.UrlModelLoader}, +++ b/library/custom_rules.xml, +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.volley.VolleyUrlLoader;, +    protected Glide() {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +        try {, +            Class.forName("com.bumptech.glide.volley.VolleyUrlLoader$Factory");, +            loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, +        } catch (ClassNotFoundException e) {, +            Log.d("Volley not found, missing url loader");, +            loaderFactory.register(URL.class, new ModelLoaderFactory<URL>() {, +                ModelLoader<URL> errorUrlLoader = new ModelLoader<URL>() {, +                    @Override, +                    public StreamLoader getStreamLoader(URL model, int width, int height) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    @Override, +                    public String getId(URL model) {, +                        throw new IllegalArgumentException("No ModelLoaderFactory for urls registered with Glide");, +                    }, +                };, +, +                @Override, +                public ModelLoader<URL> build(Context context, GenericLoaderFactory factories) {, +                    return errorUrlLoader;, +                @Override @SuppressWarnings("unchecked"), +                public Class<? extends ModelLoader<URL>> loaderClass() {, +                    return (Class<ModelLoader<URL>>) errorUrlLoader.getClass();, +                @Override, +                public void teardown() {, +                }, +            });, +        }, +    }, +, +, +     *     of {@link com.bumptech.glide.loader.model.UrlModelLoader}, +++ /dev/null, +++ b/library/custom_rules.xml, +            basedir="bin/classes", +            excludes="com/bumptech/glide/volley/">, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.volley.VolleyUrlLoader;, +    protected Glide() {, +        loaderFactory.register(File.class, new FileLoader.Factory());, +        loaderFactory.register(Integer.class, new ResourceLoader.Factory());, +        loaderFactory.register(String.class, new StringLoader.Factory());, +        loaderFactory.register(Uri.class, new UriLoader.Factory());, +        try {, +            Class.forName("com.bumptech.glide.volley.VolleyUrlLoader$Factory");, +            loaderFactory.register(URL.class, new VolleyUrlLoader.Factory());, +        } catch (ClassNotFoundException e) {]