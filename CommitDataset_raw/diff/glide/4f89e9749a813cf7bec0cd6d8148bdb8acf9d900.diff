[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +        verify(harness.transcoder).transcode(eq(harness.decoded));, +        verify(harness.transcoder, never()).transcode(eq(harness.decoded));, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        verify(harness.decoded, never()).recycle();, +            return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +        verify(harness.transcoder).transcode(eq(harness.decoded));, +        verify(harness.transcoder, never()).transcode(eq(harness.decoded));, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        verify(harness.decoded, never()).recycle();, +            return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +        verify(harness.transcoder).transcode(eq(harness.decoded));, +        verify(harness.transcoder, never()).transcode(eq(harness.decoded));, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        verify(harness.decoded, never()).recycle();, +            return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +            ResourceDecoder<File, Z> cacheDecoder, ResourceTranscoder<Z, R> transcoder,, +            SourceResourceRunner<?, Z, R> sourceRunner, ExecutorService diskCacheService,, +            DiskCacheStrategy diskCacheStrategy, ExecutorService resizeService, EngineJob job, Priority priority) {, +            transcoded = transcoder.transcode(fromCache);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +        verify(harness.transcoder).transcode(eq(harness.decoded));, +        verify(harness.transcoder, never()).transcode(eq(harness.decoded));, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        verify(harness.decoded, never()).recycle();, +            return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +            ResourceDecoder<File, Z> cacheDecoder, ResourceTranscoder<Z, R> transcoder,, +            SourceResourceRunner<?, Z, R> sourceRunner, ExecutorService diskCacheService,, +            DiskCacheStrategy diskCacheStrategy, ExecutorService resizeService, EngineJob job, Priority priority) {, +            transcoded = transcoder.transcode(fromCache);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunnerFactory.java, +        return new ResourceRunner<Z, R>(key, width, height, cacheLoader, cacheDecoder, transcoder, sourceRunner,, +                diskCacheService, diskCacheStrategy, service, engineJob, priority);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +        verify(harness.transcoder).transcode(eq(harness.decoded));, +        verify(harness.transcoder, never()).transcode(eq(harness.decoded));, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        when(harness.transcoder.transcode(eq(harness.decoded))).thenReturn(harness.transcoded);, +        verify(harness.decoded, never()).recycle();, +            return new ResourceRunner(key, width, height, cacheLoader, decoder, transcoder,, +++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunner.java, +            ResourceDecoder<File, Z> cacheDecoder, ResourceTranscoder<Z, R> transcoder,, +            SourceResourceRunner<?, Z, R> sourceRunner, ExecutorService diskCacheService,, +            DiskCacheStrategy diskCacheStrategy, ExecutorService resizeService, EngineJob job, Priority priority) {, +            transcoded = transcoder.transcode(fromCache);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRunnerFactory.java, +        return new ResourceRunner<Z, R>(key, width, height, cacheLoader, cacheDecoder, transcoder, sourceRunner,, +                diskCacheService, diskCacheStrategy, service, engineJob, priority);, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java]