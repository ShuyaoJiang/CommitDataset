[+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      return path.load(rewinder, options, width, height,, +          new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      return path.load(rewinder, options, width, height,, +          new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      return path.load(rewinder, options, width, height,, +          new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +          downsampleStrategy, decodeFormat, requestedWidth, requestedHeight,, +          fixBitmapToRequestedDimensions, callbacks);, +      DecodeFormat decodeFormat, int requestedWidth, int requestedHeight,, +      boolean fixBitmapToRequestedDimensions, DecodeCallbacks callbacks) throws IOException {, +, +    calculateConfig(is, decodeFormat, options, targetWidth, targetHeight);, +        targetWidth, targetHeight, optionsWithScaling, format)) {, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      return path.load(rewinder, options, width, height,, +          new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +          downsampleStrategy, decodeFormat, requestedWidth, requestedHeight,, +          fixBitmapToRequestedDimensions, callbacks);, +      DecodeFormat decodeFormat, int requestedWidth, int requestedHeight,, +      boolean fixBitmapToRequestedDimensions, DecodeCallbacks callbacks) throws IOException {, +, +    calculateConfig(is, decodeFormat, options, targetWidth, targetHeight);, +        targetWidth, targetHeight, optionsWithScaling, format)) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +  /**, +   * The minimum size that will trigger downsampling in {@link BitmapFactory}., +   *, +   * <p>From {@link android.graphics.BitmapFactory.Options#inSampleSize}., +   */, +  private static final int MINIMUM_SAMPLE_SIZE = 2;, +, +      DecodeFormat decodeFormat) {, +    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O, +    boolean result = !optionsWithScaling.inScaled, +        && optionsWithScaling.inSampleSize < MINIMUM_SAMPLE_SIZE, +        && targetWidth >= MIN_HARDWARE_DIMENSION, +++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java, +  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +      return path.load(rewinder, options, width, height,, +          new DecodeCallback<ResourceType>(dataSource));, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java, +          downsampleStrategy, decodeFormat, requestedWidth, requestedHeight,, +          fixBitmapToRequestedDimensions, callbacks);, +      DecodeFormat decodeFormat, int requestedWidth, int requestedHeight,, +      boolean fixBitmapToRequestedDimensions, DecodeCallbacks callbacks) throws IOException {, +, +    calculateConfig(is, decodeFormat, options, targetWidth, targetHeight);, +        targetWidth, targetHeight, optionsWithScaling, format)) {, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java, +  /**, +   * The minimum size that will trigger downsampling in {@link BitmapFactory}., +   *, +   * <p>From {@link android.graphics.BitmapFactory.Options#inSampleSize}., +   */, +  private static final int MINIMUM_SAMPLE_SIZE = 2;, +, +      DecodeFormat decodeFormat) {, +    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O, +    boolean result = !optionsWithScaling.inScaled, +        && optionsWithScaling.inSampleSize < MINIMUM_SAMPLE_SIZE, +        && targetWidth >= MIN_HARDWARE_DIMENSION, +++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java, +   * Applies {@link com.bumptech.glide.load.resource.bitmap.FitCenter} to all default types, and, +   * ignores unknown types., +   * <p>This will override previous calls to {@link #dontTransform()}., +    return optionalTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());, +   * Applies {@link FitCenter} to all default types and, +   * throws an exception if asked to transform an unknown type., +   * <p>This will override previous calls to {@link #dontTransform()}., +    return transform(DownsampleStrategy.FIT_CENTER, new FitCenter());, +   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types, and, +   * ignores unknown types.]