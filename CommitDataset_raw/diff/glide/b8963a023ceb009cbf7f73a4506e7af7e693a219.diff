[+++ b/library/src/com/bumptech/glide/GenericRequestBuilder.java, +package com.bumptech.glide;, +, +import android.content.Context;, +import android.graphics.Bitmap;, +import android.view.View;, +import android.widget.ImageView;, +import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.ResourceBitmapLoadFactory;, +import com.bumptech.glide.loader.bitmap.model.ModelLoader;, +import com.bumptech.glide.loader.bitmap.model.ModelLoaderFactory;, +import com.bumptech.glide.resize.Priority;, +import com.bumptech.glide.resize.load.BitmapDecoder;, +import com.bumptech.glide.resize.load.Downsampler;, +import com.bumptech.glide.resize.load.MultiTransformation;, +import com.bumptech.glide.resize.load.Transformation;, +import com.bumptech.glide.resize.load.VideoBitmapDecoder;, +import com.bumptech.glide.resize.request.BitmapRequestBuilder;, +import com.bumptech.glide.resize.request.Request;, +import com.bumptech.glide.resize.request.ThumbnailRequestCoordinator;, +import com.bumptech.glide.resize.target.ImageViewTarget;, +import com.bumptech.glide.resize.target.Target;, +, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * A generic class that can handle loading a bitmap either from an image or as a thumbnail from a video given, + * models loaders to translate a model into generic resources for either an image or a video and decoders that can, + * decode those resources into bitmaps., + *, + * @param <ModelType> The type of model representing the image or video., + * @param <ImageResourceType> The resource type that the image {@link ModelLoader} will provide that can be decoded, + *                           by the image {@link BitmapDecoder}., + * @param <VideoResourceType> The resource type that the video {@link ModelLoader} will provide that can be decoded, + *                           by the video {@link BitmapDecoder}., + */, +public class GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> {, +    private Context context;, +    private ModelLoaderFactory<ModelType, ImageResourceType> imageModelLoaderFactory;, +    private final List<Transformation> transformations = new ArrayList<Transformation>();, +    private final ModelLoaderFactory<ModelType, VideoResourceType> videoModelLoaderFactory;, +    private final ModelType model;, +, +    private int animationId;, +    private int placeholderId;, +    private int errorId;, +    private RequestListener<ModelType> requestListener;, +    private BitmapDecoder<ImageResourceType> imageDecoder;, +    private BitmapDecoder<VideoResourceType> videoDecoder;, +    private Float thumbSizeMultiplier;, +    private GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnailRequestBuilder;, +    private Float sizeMultiplier = 1f;, +, +    GenericRequestBuilder(Context context, ModelType model,, +            ModelLoaderFactory<ModelType, ImageResourceType> imageFactory,, +            ModelLoaderFactory<ModelType, VideoResourceType> videoFactory) {, +        if (context == null) {, +            throw new NullPointerException("Context can't be null");, +        }, +        this.context = context;, +, +        if (model == null ) {, +            throw new NullPointerException("Model can't be null");, +        }, +        this.model = model;, +, +        if (imageFactory == null && videoFactory == null) {, +            throw new NullPointerException("No ModelLoaderFactorys registered for either image or video type,", +                    + " class=" + model.getClass());, +        }, +        this.imageModelLoaderFactory = imageFactory;, +        this.videoModelLoaderFactory = videoFactory;, +    }, +, +    /**, +     * Loads and displays the image retrieved by the given thumbnail request if it finishes before this request., +     * Best used for loading thumbnail images that are smaller and will be loaded more quickly than the fullsize, +     * image. There are no guarantees about the order in which the requests will actually finish. However, if the, +     * thumb request completes after the full request, the thumb image will never replace the full image., +     *, +     * @see #thumbnail(float), +     *, +     * <p>, +     *     Note - Any options on the main request will not be passed on to the thumbnail request. For example, if, +     *     you want an animation to occur when either the full image loads or the thumbnail loads, you need to call, +     *     {@link #animate(int)} on both the thumb and the full request. For a simpler thumbnail option, see, +     *     {@link #thumbnail(float)}., +     * </p>, +     *, +     * <p>, +     *     Only the thumbnail call on the main request will be obeyed., +     * </p>, +     *, +     * @param thumbnailRequest The request to use to load the thumbnail., +     * @return This builder object., +     */, +    public GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnail(, +            GenericRequestBuilder<ModelType, ImageResourceType, VideoResourceType> thumbnailRequest) {, +        this.thumbnailRequestBuilder = thumbnailRequest;]