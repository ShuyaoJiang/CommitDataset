[+++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.os.Handler;, +        Handler bgHandler = mock(Handler.class);, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Runnable runnable = (Runnable) invocation.getArguments()[0];, +                runnable.run();, +                return true;, +            }, +        });, +, +                        .setBackgroundHandler(bgHandler), +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.os.Handler;, +        Handler bgHandler = mock(Handler.class);, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Runnable runnable = (Runnable) invocation.getArguments()[0];, +                runnable.run();, +                return true;, +            }, +        });, +, +                        .setBackgroundHandler(bgHandler), +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        Handler bgHandler = mock(Handler.class);, +                mainHandler, service, bgHandler);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.os.Handler;, +        Handler bgHandler = mock(Handler.class);, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Runnable runnable = (Runnable) invocation.getArguments()[0];, +                runnable.run();, +                return true;, +            }, +        });, +, +                        .setBackgroundHandler(bgHandler), +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        Handler bgHandler = mock(Handler.class);, +                mainHandler, service, bgHandler);, +++ b/library/robolectric/src/com/bumptech/glide/resize/ResourceRunnerTest.java, +import android.os.Handler;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +    public void testPostedToBackgroundHandlerWhenQueued() {, +        verify(harness.bgHandler).post(eq(harness.runner));, +    public void testRemovedFromBackgroundHandlerWhenCancelled() {, +        verify(harness.bgHandler).removeCallbacks(eq(harness.runner));, +        Handler bgHandler = mock(Handler.class);, +                bgHandler, engineJob);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.os.Handler;, +        Handler bgHandler = mock(Handler.class);, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Runnable runnable = (Runnable) invocation.getArguments()[0];, +                runnable.run();, +                return true;, +            }, +        });, +, +                        .setBackgroundHandler(bgHandler), +++ b/library/robolectric/src/com/bumptech/glide/resize/DefaultResourceRunnerFactoryTest.java, +        Handler bgHandler = mock(Handler.class);, +                mainHandler, service, bgHandler);, +++ b/library/robolectric/src/com/bumptech/glide/resize/ResourceRunnerTest.java, +import android.os.Handler;, +import org.junit.runner.RunWith;, +import org.robolectric.RobolectricTestRunner;, +@RunWith(RobolectricTestRunner.class), +    public void testPostedToBackgroundHandlerWhenQueued() {, +        verify(harness.bgHandler).post(eq(harness.runner));, +    public void testRemovedFromBackgroundHandlerWhenCancelled() {, +        verify(harness.bgHandler).removeCallbacks(eq(harness.runner));, +        Handler bgHandler = mock(Handler.class);, +                bgHandler, engineJob);, +++ b/library/src/com/bumptech/glide/resize/DefaultResourceRunnerFactory.java, +    private final Handler bgHandler;, +            DiskCache diskCache, Handler mainHandler, ExecutorService service, Handler bgHandler) {, +        this.bgHandler = bgHandler;, +        return new ResourceRunner<Z>(id, width, height, diskCache, cacheDecoder, sourceRunner, service, bgHandler,, +                engineJob);, +++ b/library/robolectric/src/com/bumptech/glide/GlideTest.java, +import android.os.Handler;, +        Handler bgHandler = mock(Handler.class);, +        when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocation) throws Throwable {, +                Runnable runnable = (Runnable) invocation.getArguments()[0];, +                runnable.run();, +                return true;, +            }, +        });]