[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.base.Joiner;, +  static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {, +    return CodeBlock.builder(), +        .add("return ($T) super.$N(", toReturn, method.getSimpleName()), +        .add(, +            FluentIterable.from(method.getParameters()), +                .transform(new Function<VariableElement, String>() {, +                  @Nullable, +                  @Override, +                  public String apply(VariableElement input) {, +                    return input.getSimpleName().toString();, +                  }, +                }), +                .join(Joiner.on(","))), +        .add(");\n"), +        .build();, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +import com.google.common.base.Joiner;, +  static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {, +    return CodeBlock.builder(), +        .add("return ($T) super.$N(", toReturn, method.getSimpleName()), +        .add(, +            FluentIterable.from(method.getParameters()), +                .transform(new Function<VariableElement, String>() {, +                  @Nullable, +                  @Override, +                  public String apply(VariableElement input) {, +                    return input.getSimpleName().toString();, +                  }, +                }), +                .join(Joiner.on(","))), +        .add(");\n"), +        .build();, +  }, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java, +         .addMethods(generateExtensionRequestManagerMethods(glideExtensions)), +         .addMethods(generateRequestManagerRequestManagerMethodOverrides(generatedCodePackageName)), +         .addMethods(generateRequestManagerRequestBuilderMethodOverrides()), +  /** Generates the list of overrides of methods that return {@code RequestManager}. */, +  private List<MethodSpec> generateRequestManagerRequestManagerMethodOverrides(, +      final String generatedPackageName) {, +    return FluentIterable.from(, +        processorUtil.findInstanceMethodsReturning(requestManagerType, requestManagerType)), +        .transform(new Function<ExecutableElement, MethodSpec>() {, +          @Nullable, +          @Override, +          public MethodSpec apply(@Nullable ExecutableElement input) {, +            return generateRequestManagerRequestManagerMethodOverride(generatedPackageName, input);, +          }, +        }), +        .toList();, +  }, +, +  private MethodSpec generateRequestManagerRequestManagerMethodOverride(, +      String generatedPackageName, ExecutableElement method) {, +    ClassName generatedRequestManagerName =, +        ClassName.get(generatedPackageName, GENERATED_REQUEST_MANAGER_SIMPLE_NAME);, +    return ProcessorUtil.overriding(method), +        .returns(generatedRequestManagerName), +        .addCode(ProcessorUtil.generateCastingSuperCall(generatedRequestManagerName, method)), +        .build();, +  }, +, +  /** Generates the list of overrides of methods that return {@code RequestBuilder}. */, +  private List<MethodSpec> generateRequestManagerRequestBuilderMethodOverrides() {, +            return generateRequestManagerRequestBuilderMethodOverride(input);, +  private MethodSpec generateRequestManagerRequestBuilderMethodOverride(, +      ExecutableElement methodToOverride) {, +        .addCode(, +            ProcessorUtil.generateCastingSuperCall(, +                generatedRequestBuilderOfType, methodToOverride));, +  private List<MethodSpec> generateExtensionRequestManagerMethods(, +   * The {@code RequestOptions} subclass should always be our]