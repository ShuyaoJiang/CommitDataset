[+++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void trimMemory(int level);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void trimMemory(int level);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    @Override, +    public void trimMemory(int level) { }, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void trimMemory(int level);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    @Override, +    public void trimMemory(int level) { }, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;, +, +    @Override, +    public void trimMemory(int level) {, +        if (level >= TRIM_MEMORY_MODERATE) {, +            clearMemory();, +        } else if (level >= TRIM_MEMORY_BACKGROUND) {, +            trimToSize(currentSize / 2);, +        }, +    }, +, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java, +    public void trimMemory(int level);, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java, +, +    @Override, +    public void trimMemory(int level) { }, +++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;, +import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;, +, +    @Override, +    public void trimMemory(int level) {, +        if (level >= TRIM_MEMORY_MODERATE) {, +            clearMemory();, +        } else if (level >= TRIM_MEMORY_BACKGROUND) {, +            trimToSize(currentSize / 2);, +        }, +    }, +, +++ b/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java, +import android.content.ComponentCallbacks2;, +    public void testTrimMemoryCompleteClearsPool() {, +        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE, false);, +    }, +, +    public void testTrimMemoryModerateClearsPool() {, +        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_MODERATE, false);, +    }, +, +    public void testTrimMemoryBackgroundRemovesHalf() {, +        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND, true);, +    }, +, +    private void doTestTrimMemory(int level, boolean half) {, +        List<Bitmap> bitmaps = fillPool();, +        Bitmap first = bitmaps.get(0);, +        assertTrue(bitmaps.size() >= 2);, +, +        Bitmap fromPool = getEquivalentFromPool(first);, +        assertNotNull(fromPool);, +        pool.put(fromPool);, +        pool.trimMemory(level);, +        if (half) {, +            for (int i = 0; i < bitmaps.size() / 2; i++) {, +                assertNotNull(getEquivalentFromPool(first));, +            }, +        }, +        assertNull(getEquivalentFromPool(first));, +    }, +, +    public void testTrimMemoryCallsRecycleOnRemovedBitmaps() {, +        List<Bitmap> bitmaps = fillPool();, +        pool.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);, +        for (Bitmap bitmap : bitmaps) {, +            assertTrue(bitmap.isRecycled());, +        }, +    }, +]