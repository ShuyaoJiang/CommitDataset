[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineRunnableTest.java, +, +    @Test, +    public void testDoesNotNotifyManagerOfSuccessIfCancelled() throws Exception {, +        runnable.run();, +        when(job.decodeFromSource()).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                runnable.cancel();, +                return mock(Resource.class);, +            }, +        });, +        runnable.run();, +, +        verify(manager, never()).onResourceReady(any(Resource.class));, +    }, +, +    @Test, +    public void testRecyclesResourceIfAvailableWhenCancelled() throws Exception {, +        final Resource resource = mock(Resource.class);, +        runnable.run();, +        when(job.decodeFromSource()).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                runnable.cancel();, +                return resource;, +            }, +        });, +        runnable.run();, +, +        verify(resource).recycle();, +    }, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineRunnableTest.java, +, +    @Test, +    public void testDoesNotNotifyManagerOfSuccessIfCancelled() throws Exception {, +        runnable.run();, +        when(job.decodeFromSource()).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                runnable.cancel();, +                return mock(Resource.class);, +            }, +        });, +        runnable.run();, +, +        verify(manager, never()).onResourceReady(any(Resource.class));, +    }, +, +    @Test, +    public void testRecyclesResourceIfAvailableWhenCancelled() throws Exception {, +        final Resource resource = mock(Resource.class);, +        runnable.run();, +        when(job.decodeFromSource()).thenAnswer(new Answer<Object>() {, +            @Override, +            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {, +                runnable.cancel();, +                return resource;, +            }, +        });, +        runnable.run();, +, +        verify(resource).recycle();, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineRunnable.java, +            if (resource != null) {, +                resource.recycle();, +            }]