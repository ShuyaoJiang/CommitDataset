[+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    private final String stringUrl;, +    private String safeStringUrl;, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (safeUrl == null) {, +        }, +        if (TextUtils.isEmpty(safeStringUrl)) {, +            String unsafeStringUrl = stringUrl;, +            if (TextUtils.isEmpty(unsafeStringUrl)) {, +                unsafeStringUrl = url.toString();, +            safeStringUrl = Uri.encode(unsafeStringUrl, ALLOWED_URI_CHARS);, +        }, +        return safeStringUrl;, +        for (Map.Entry<String, String> entry : headerMap.entrySet()) {, +            stringBuilder.append('\n'), +                .append(entry.getKey()), +                .append(entry.getValue());, +        if (o instanceof GlideUrl) {, +          GlideUrl other = (GlideUrl) o;, +          return getSafeStringUrl().equals(other.getSafeStringUrl()), +              && headers.equals(other.headers);, +        int hashCode = getSafeStringUrl().hashCode();, +        hashCode = 31 * hashCode + headers.hashCode();, +        return hashCode;, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    private final String stringUrl;, +    private String safeStringUrl;, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (safeUrl == null) {, +        }, +        if (TextUtils.isEmpty(safeStringUrl)) {, +            String unsafeStringUrl = stringUrl;, +            if (TextUtils.isEmpty(unsafeStringUrl)) {, +                unsafeStringUrl = url.toString();, +            safeStringUrl = Uri.encode(unsafeStringUrl, ALLOWED_URI_CHARS);, +        }, +        return safeStringUrl;, +        for (Map.Entry<String, String> entry : headerMap.entrySet()) {, +            stringBuilder.append('\n'), +                .append(entry.getKey()), +                .append(entry.getValue());, +        if (o instanceof GlideUrl) {, +          GlideUrl other = (GlideUrl) o;, +          return getSafeStringUrl().equals(other.getSafeStringUrl()), +              && headers.equals(other.headers);, +        int hashCode = getSafeStringUrl().hashCode();, +        hashCode = 31 * hashCode + headers.hashCode();, +        return hashCode;, +++ b/library/src/main/java/com/bumptech/glide/load/model/Headers.java, +import android.text.TextUtils;, +, +public final class Headers {, +    Headers(Map<String, Set<String>> headers) {, +                    this.combinedHeaders = generateCombinedHeaders();, +    private Map<String, String> generateCombinedHeaders() {, +        Map<String, String> combinedHeaders = new HashMap<String, String>();, +        for (Map.Entry<String, Set<String>> entry : headers.entrySet()) {, +            combinedHeaders.put(entry.getKey(), TextUtils.join(",", entry.getValue()));, +        }, +        return Collections.unmodifiableMap(combinedHeaders);, +    }, +, +    public static final class Builder {, +        private final Map<String, Set<String>> headers = new HashMap<String, Set<String>>();, +                Set<String> values = new HashSet<String>();, +, +    @Override, +    public boolean equals(Object o) {, +        if (o instanceof Headers) {, +            Headers other = (Headers) o;, +            return headers.equals(other.headers);, +        }, +        return false;, +    }, +, +    @Override, +    public int hashCode() {, +        return headers.hashCode();, +    }, +++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java, +    private final String stringUrl;, +    private String safeStringUrl;, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (headers == null) {, +            throw new IllegalArgumentException("Headers must not be null");, +        }, +        if (safeUrl == null) {, +        }]