[+++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, +        this.transcoder = transcoder;, +        return this;, +                transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, +        this.transcoder = transcoder;, +        return this;, +                transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;, +import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;, +        /** Gifs */, +        decoderRegistry.prepend(new GifResourceDecoder(context, bitmapPool), InputStream.class, GifDrawable.class);, +        decoderRegistry.prepend(new FileToStreamDecoder<GifDrawable>(new GifResourceDecoder(context, bitmapPool)),, +                File.class, GifDrawable.class);, +        /** Gif Frames */, +        register(GifDecoder.class, GifDecoder.class, new GifFrameModelLoader.Factory());, +        decoderRegistry.append(new GifFrameResourceDecoder(bitmapPool), GifDecoder.class, Bitmap.class);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, +        this.transcoder = transcoder;, +        return this;, +                transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;, +import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;, +        /** Gifs */, +        decoderRegistry.prepend(new GifResourceDecoder(context, bitmapPool), InputStream.class, GifDrawable.class);, +        decoderRegistry.prepend(new FileToStreamDecoder<GifDrawable>(new GifResourceDecoder(context, bitmapPool)),, +                File.class, GifDrawable.class);, +        /** Gif Frames */, +        register(GifDecoder.class, GifDecoder.class, new GifFrameModelLoader.Factory());, +        decoderRegistry.append(new GifFrameResourceDecoder(bitmapPool), GifDecoder.class, Bitmap.class);, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +    boolean handles(T source) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, +        this.transcoder = transcoder;, +        return this;, +                transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;, +import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;, +        /** Gifs */, +        decoderRegistry.prepend(new GifResourceDecoder(context, bitmapPool), InputStream.class, GifDrawable.class);, +        decoderRegistry.prepend(new FileToStreamDecoder<GifDrawable>(new GifResourceDecoder(context, bitmapPool)),, +                File.class, GifDrawable.class);, +        /** Gif Frames */, +        register(GifDecoder.class, GifDecoder.class, new GifFrameModelLoader.Factory());, +        decoderRegistry.append(new GifFrameResourceDecoder(bitmapPool), GifDecoder.class, Bitmap.class);, +++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java, +    boolean handles(T source) throws IOException;, +++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java, +        DataRewinder.Factory result = rewinders.get(data.getClass());, +        if (result == null) {, +            for (DataRewinder.Factory<?> registeredFactory : rewinders.values()) {, +                if (registeredFactory.getDataClass().isAssignableFrom(data.getClass())) {, +                    result = registeredFactory;, +                    break;, +            }, +        }, +, +        if (result == null) {, +            result = DEFAULT_FACTORY;, +        }, +        return result.build(data);, +++ b/library/src/main/java/com/bumptech/glide/BitmapTypeRequest.java, +        return optionsApplier.apply(new BitmapRequestBuilder<ModelType, R>(transcodeClass, this)), +                .transcoder(transcoder);, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private ResourceTranscoder<ResourceType, TranscodeType> transcoder;, +        this.transcoder = transcoder;, +        return this;, +                transcoder != null ? transcoder : glide.buildTranscoder(resourceClass, transcodeClass),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.gifdecoder.GifDecoder;, +import com.bumptech.glide.load.resource.gif.GifFrameModelLoader;, +import com.bumptech.glide.load.resource.gif.GifFrameResourceDecoder;, +        /** Gifs */, +        decoderRegistry.prepend(new GifResourceDecoder(context, bitmapPool), InputStream.class, GifDrawable.class);]