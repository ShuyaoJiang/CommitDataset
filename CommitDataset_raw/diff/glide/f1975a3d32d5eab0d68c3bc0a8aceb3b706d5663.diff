[+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +    Preconditions.checkArgument(!isRecycled, "You cannot start a recycled Drawable. Ensure that", +        + "you clear any references to the Drawable when clearing the corresponding request.");, +    Preconditions.checkArgument(!isRecycled, "Cannot change the visibility of a recycled resource.", +        + " Ensure that you unset the Drawable from your View before changing the View's", +        + " visibility.");, +++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java, +    Preconditions.checkArgument(!isRecycled, "You cannot start a recycled Drawable. Ensure that", +        + "you clear any references to the Drawable when clearing the corresponding request.");, +    Preconditions.checkArgument(!isRecycled, "Cannot change the visibility of a recycled resource.", +        + " Ensure that you unset the Drawable from your View before changing the View's", +        + " visibility.");, +++ b/library/src/main/java/com/bumptech/glide/request/target/Target.java, +   * before the load starts (when the model object is null)., +   * restart may cause a call here., +   *, +   * <p>You must ensure that any current Drawable received in {@link #onResourceReady(Object,, +   * Transition)} is no longer displayed before redrawing the container (usually a View) or, +   * changing its visibility., +   * } if the model object is null., +   *, +   * <p>You must ensure that any current Drawable received in {@link #onResourceReady(Object,, +   * Transition)} is no longer displayed before redrawing the container (usually a View) or, +   * changing its visibility., +   * <p>You must ensure that any current Drawable received in {@link #onResourceReady(Object,, +   * Transition)} is no longer displayed before redrawing the container (usually a View) or, +   * changing its visibility., +   *]