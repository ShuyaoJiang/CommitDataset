[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import org.robolectric.shadows.ShadowActivityManager;, +    // Keep the bitmap pool size constant, even though normally it would change., +    harness.byteArrayPoolSizeBytes *= 2;, +  @Test, +  public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {, +    ShadowActivityManager activityManager = Shadows.shadowOf(harness.activityManager);, +    activityManager.setMemoryClass(getLargeEnoughMemoryClass());, +, +    Util.setSdkVersionInt(10);, +, +    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();, +    assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);, +  }, +, +    float totalBytes = totalScreenBytes + harness.byteArrayPoolSizeBytes;, +    float totalMb = totalBytes / (1024 * 1024);, +    float memoryClassMb = totalMb / harness.sizeMultiplier;, +    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;, +          .setByteArrayPoolSize(byteArrayPoolSizeBytes), +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import org.robolectric.shadows.ShadowActivityManager;, +    // Keep the bitmap pool size constant, even though normally it would change., +    harness.byteArrayPoolSizeBytes *= 2;, +  @Test, +  public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {, +    ShadowActivityManager activityManager = Shadows.shadowOf(harness.activityManager);, +    activityManager.setMemoryClass(getLargeEnoughMemoryClass());, +, +    Util.setSdkVersionInt(10);, +, +    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();, +    assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);, +  }, +, +    float totalBytes = totalScreenBytes + harness.byteArrayPoolSizeBytes;, +    float totalMb = totalBytes / (1024 * 1024);, +    float memoryClassMb = totalMb / harness.sizeMultiplier;, +    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;, +          .setByteArrayPoolSize(byteArrayPoolSizeBytes), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java, +import org.robolectric.shadows.ShadowActivityManager;, +    // Keep the bitmap pool size constant, even though normally it would change., +    harness.byteArrayPoolSizeBytes *= 2;, +  @Test, +  public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {, +    ShadowActivityManager activityManager = Shadows.shadowOf(harness.activityManager);, +    activityManager.setMemoryClass(getLargeEnoughMemoryClass());, +, +    Util.setSdkVersionInt(10);, +, +    int byteArrayPoolSize = harness.getCalculator().getByteArrayPoolSize();, +    assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);, +  }, +, +    float totalBytes = totalScreenBytes + harness.byteArrayPoolSizeBytes;, +    float totalMb = totalBytes / (1024 * 1024);, +    float memoryClassMb = totalMb / harness.sizeMultiplier;, +    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.BYTE_ARRAY_POOL_SIZE_BYTES;, +          .setByteArrayPoolSize(byteArrayPoolSizeBytes), +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +      byteArrayPool = new LruByteArrayPool(memorySizeCalculator.getByteArrayPoolSize());, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java, +  static final int LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR = 2;, +  private final int byteArrayPoolSize;, +      int targetByteArrayPoolSize, float maxSizeMultiplier, float lowMemoryMaxSizeMultiplier) {, +    byteArrayPoolSize = isLowMemoryDevice(activityManager), +        ? targetByteArrayPoolSize / LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR : targetByteArrayPoolSize;, +    int availableSize = maxSize - byteArrayPoolSize;, +    if (targetMemoryCacheSize + targetPoolSize <= availableSize) {, +      float part = availableSize / (bitmapPoolScreens + memoryCacheScreens);, +          + ", byte array size: " + toMb(byteArrayPoolSize), +  /**, +   * Returns the recommended byte array pool size for the device it is run on in bytes., +   */, +  public int getByteArrayPoolSize() {, +    return byteArrayPoolSize;, +  }, +, +    return sdkInt < Build.VERSION_CODES.HONEYCOMB, +        || (sdkInt >= Build.VERSION_CODES.KITKAT && activityManager.isLowRamDevice());, +    // 4MB., +    static final int BYTE_ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;, +    private int byteArrayPoolSizeBytes = BYTE_ARRAY_POOL_SIZE_BYTES;, +    /**, +     * Sets the size in bytes of the {@link, +     * com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool} to use to store temporary, +     * arrays while decoding data and returns this builder., +     *, +     * <p>This number will be halved on low memory devices that return {@code true} from, +     * {@link ActivityManager#isLowRamDevice()}., +     */, +    public Builder setByteArrayPoolSize(int byteArrayPoolSizeBytes) {, +      this.byteArrayPoolSizeBytes = byteArrayPoolSizeBytes;, +      return this;, +    }, +, +          memoryCacheScreens, bitmapPoolScreens, byteArrayPoolSizeBytes, maxSizeMultiplier,]