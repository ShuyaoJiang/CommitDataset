[+++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import java.util.ArrayList;, +        private ArrayList<TransformationLoader<T>> transformationLoaders = new ArrayList<TransformationLoader<T>>();, +         * Load images at a size near the size of the target using {@link Downsampler#AT_LEAST}., +         * @see #downsample(com.bumptech.glide.resize.load.Downsampler), +            return downsample(Downsampler.AT_LEAST);, +         * Load images at their original size using {@link Downsampler#NONE}., +         *, +         * @see #downsample(com.bumptech.glide.resize.load.Downsampler), +            return downsample(Downsampler.NONE);, +        }, +, +        /**, +         * Load images using the given {@link Downsampler}. Replaces any existing downsampler. Defaults to, +         * {@link Downsampler#AT_LEAST}, +         *, +         * @param downsampler The downsampler, +         * @return This Request, +         */, +        public Request<T> downsample(Downsampler downsampler) {, +            this.downsampler = downsampler;, +         * Transform images using {@link com.bumptech.glide.loader.transformation.CenterCrop}., +         *, +         * @see #transform(com.bumptech.glide.loader.transformation.TransformationLoader), +         *, +         * @return This Request, +         */, +        public Request<T> centerCrop() {, +            return transform(new CenterCrop<T>());, +        }, +, +        /**, +         * Transform images using {@link com.bumptech.glide.loader.transformation.FitCenter}., +         *, +         * @see #transform(com.bumptech.glide.loader.transformation.TransformationLoader), +         *, +         * @return This Request, +         */, +        public Request<T> fitCenter() {, +            return transform(new FitCenter<T>());, +        }, +, +        /**, +         * Set an arbitrary transformation to apply after an image has been loaded into memory., +         *, +         * @see #transform(com.bumptech.glide.loader.transformation.TransformationLoader), +            return transform(new TransformationLoader<T>() {, +                @Override, +                public Transformation getTransformation(T model) {, +                    return transformation;, +                @Override, +                public String getId() {, +                    return transformation.getId();, +                }, +            });, +        }, +, +        /**, +         * Transform images with the given {@link TransformationLoader}. Appends this transformation onto any existing, +         * transformations, +         *, +         * @param transformationLoader The loader to obtaian a transformation for a given model, +         * @return This Request, +         */, +            transformationLoaders.add(transformationLoader);, +            TransformationLoader<T> transformationLoader = getFinalTransformationLoader();, +            switch (transformationLoaders.size()) {, +                case 0:, +                    return new None<T>();, +                case 1:, +                    return transformationLoaders.get(0);, +                default:, +                    return new MultiTransformationLoader<T>(transformationLoaders);, +            switch (transformationLoaders.size()) {, +                case 0:, +                    return Transformation.NONE.getId();, +                case 1:, +                    return transformationLoaders.get(0).getId();, +                default:, +                    StringBuilder sb = new StringBuilder();, +                    for (TransformationLoader transformationLoader : transformationLoaders) {, +                        sb.append(transformationLoader.getId());, +                    }, +                    return sb.toString();, +++ b/library/src/com/bumptech/glide/Glide.java, +import com.bumptech.glide.loader.transformation.MultiTransformationLoader;, +import com.bumptech.glide.loader.transformation.None;, +import java.util.ArrayList;, +        private ArrayList<TransformationLoader<T>> transformationLoaders = new ArrayList<TransformationLoader<T>>();, +         * Load images at a size near the size of the target using {@link Downsampler#AT_LEAST}., +         * @see #downsample(com.bumptech.glide.resize.load.Downsampler), +            return downsample(Downsampler.AT_LEAST);, +         * Load images at their original size using {@link Downsampler#NONE}., +         *, +         * @see #downsample(com.bumptech.glide.resize.load.Downsampler), +            return downsample(Downsampler.NONE);, +        }, +]