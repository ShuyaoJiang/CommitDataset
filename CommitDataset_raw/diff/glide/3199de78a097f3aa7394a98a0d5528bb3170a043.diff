[+++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    public final Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb) {, +        doFetchModelStreams(model, width, height, new InternalModelStreamReadyCallback(cb, model));, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    protected abstract void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb);, +    protected class InternalModelStreamReadyCallback implements ModelStreamReadyCallback {, +        private final WeakReference<ModelStreamReadyCallback> cbRef;, +        public InternalModelStreamReadyCallback(ModelStreamReadyCallback cb, T model) {, +            this.cbRef = new WeakReference<ModelStreamReadyCallback>(cb);, +        public boolean onStreamReady(String id, StreamOpener streamOpener) {, +            ModelStreamReadyCallback cb = cbRef.get();, +                result = cb.onStreamReady(id, streamOpener);, +            ModelStreamReadyCallback cb = cbRef.get();, +++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    public final Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb) {, +        doFetchModelStreams(model, width, height, new InternalModelStreamReadyCallback(cb, model));, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    protected abstract void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb);, +    protected class InternalModelStreamReadyCallback implements ModelStreamReadyCallback {, +        private final WeakReference<ModelStreamReadyCallback> cbRef;, +        public InternalModelStreamReadyCallback(ModelStreamReadyCallback cb, T model) {, +            this.cbRef = new WeakReference<ModelStreamReadyCallback>(cb);, +        public boolean onStreamReady(String id, StreamOpener streamOpener) {, +            ModelStreamReadyCallback cb = cbRef.get();, +                result = cb.onStreamReady(id, streamOpener);, +            ModelStreamReadyCallback cb = cbRef.get();, +++ b/library/src/com/bumptech/glide/loader/model/DirectModelStreamLoader.java, +    protected void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb) {, +        cb.onStreamReady(getId(model), getStreamOpener(model, width, height));, +++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    public final Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb) {, +        doFetchModelStreams(model, width, height, new InternalModelStreamReadyCallback(cb, model));, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    protected abstract void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb);, +    protected class InternalModelStreamReadyCallback implements ModelStreamReadyCallback {, +        private final WeakReference<ModelStreamReadyCallback> cbRef;, +        public InternalModelStreamReadyCallback(ModelStreamReadyCallback cb, T model) {, +            this.cbRef = new WeakReference<ModelStreamReadyCallback>(cb);, +        public boolean onStreamReady(String id, StreamOpener streamOpener) {, +            ModelStreamReadyCallback cb = cbRef.get();, +                result = cb.onStreamReady(id, streamOpener);, +            ModelStreamReadyCallback cb = cbRef.get();, +++ b/library/src/com/bumptech/glide/loader/model/DirectModelStreamLoader.java, +    protected void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb) {, +        cb.onStreamReady(getId(model), getStreamOpener(model, width, height));, +++ b/library/src/com/bumptech/glide/loader/model/ModelStreamLoader.java, +    public interface ModelStreamReadyCallback {, +        public boolean onStreamReady(String id, StreamOpener streamOpener);, +    public Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb);, +++ b/library/src/com/bumptech/glide/loader/model/BaseModelStreamLoader.java, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    public final Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb) {, +        doFetchModelStreams(model, width, height, new InternalModelStreamReadyCallback(cb, model));, +     * @see ModelStreamLoader#fetchModelStream(Object, int, int, com.bumptech.glide.loader.model.ModelStreamLoader.ModelStreamReadyCallback), +    protected abstract void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb);, +    protected class InternalModelStreamReadyCallback implements ModelStreamReadyCallback {, +        private final WeakReference<ModelStreamReadyCallback> cbRef;, +        public InternalModelStreamReadyCallback(ModelStreamReadyCallback cb, T model) {, +            this.cbRef = new WeakReference<ModelStreamReadyCallback>(cb);, +        public boolean onStreamReady(String id, StreamOpener streamOpener) {, +            ModelStreamReadyCallback cb = cbRef.get();, +                result = cb.onStreamReady(id, streamOpener);, +            ModelStreamReadyCallback cb = cbRef.get();, +++ b/library/src/com/bumptech/glide/loader/model/DirectModelStreamLoader.java, +    protected void doFetchModelStreams(T model, int width, int height, ModelStreamReadyCallback cb) {, +        cb.onStreamReady(getId(model), getStreamOpener(model, width, height));, +++ b/library/src/com/bumptech/glide/loader/model/ModelStreamLoader.java, +    public interface ModelStreamReadyCallback {, +        public boolean onStreamReady(String id, StreamOpener streamOpener);, +    public Object fetchModelStream(T model, int width, int height, ModelStreamReadyCallback cb);, +++ b/library/src/com/bumptech/glide/loader/opener/FileInputStreamOpener.java, +package com.bumptech.glide.loader.opener;, +, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + * Created with IntelliJ IDEA., + * User: sam, + * Date: 7/10/13, + * Time: 11:11 PM, + * To change this template use File | Settings | File Templates., + */, +public class FileInputStreamOpener implements StreamOpener {, +    private final File file;, +, +    public FileInputStreamOpener(String path) {, +        this(new File(path));, +    }, +, +    public FileInputStreamOpener(File file) {, +        this.file = file;, +    }, +, +    @Override]