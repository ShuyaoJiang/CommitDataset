[+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {, +        harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.resource, never()).acquire();, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +    public void testCacheIsCheckedIfMemoryCacheable() {, +    public void testCacheIsNotCheckedIfNotMemoryCacheable() {, +        when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +        when(harness.resource.isCacheable()).thenReturn(true);, +    public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {, +        when(harness.resource.isCacheable()).thenReturn(false);, +        harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);, +        assertThat(harness.activeResources).doesNotContainKey(harness.cacheKey);, +    }, +, +    @Test, +        boolean isMemoryCacheable = true;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java, +    public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {, +        harness.activeResources.put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.resource, never()).acquire();, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +    public void testCacheIsCheckedIfMemoryCacheable() {, +    public void testCacheIsNotCheckedIfNotMemoryCacheable() {, +        when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);, +, +        harness.isMemoryCacheable = false;, +        harness.doLoad();, +, +        verify(harness.job).start(any(EngineRunnable.class));, +    }, +, +    @Test, +        when(harness.resource.isCacheable()).thenReturn(true);, +    public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {, +        when(harness.resource.isCacheable()).thenReturn(false);, +        harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);, +        assertThat(harness.activeResources).doesNotContainKey(harness.cacheKey);, +    }, +, +    @Test, +        boolean isMemoryCacheable = true;, +            when(engineJobFactory.build(eq(cacheKey), eq(isMemoryCacheable))).thenReturn(job);, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java, +        if (isMemoryCacheable) {, +        }, +, +            if (resource.isCacheable()) {, +        }]