[+++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, + * A class for creating a request to load a {@link GlideDrawable}., +        extends GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable>, +            LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> loadProvider, Glide glide,, +        super(context, model, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);, +     * Loads and displays the {@link GlideDrawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link GlideDrawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link GlideDrawable}. There are no guarantees about the order in which the requests will, +     * actually finish. However, if the thumb request completes after the full request, the thumb {@link GlideDrawable}, +     * will never replace the full image., +     *     you want an animation to occur when either the full {@link GlideDrawable} loads or the thumbnail loads,, +            GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> thumbnailRequest) {, +     * Transform {@link GlideDrawable}s using the given, +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.CenterCrop}., +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.FitCenter}., +     * Transform {@link GlideDrawable}s using the given {@link android.graphics.Bitmap} transformations. Replaces any, +     * previous transformations., +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<GifBitmapWrapper, GlideDrawable> transcoder) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>());, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(animation, duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(context, animationId,, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, GlideDrawable> requestListener) {, +    public Target<GlideDrawable> into(ImageView view) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, + * A class for creating a request to load a {@link GlideDrawable}., +        extends GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable>, +            LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> loadProvider, Glide glide,, +        super(context, model, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);, +     * Loads and displays the {@link GlideDrawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link GlideDrawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link GlideDrawable}. There are no guarantees about the order in which the requests will, +     * actually finish. However, if the thumb request completes after the full request, the thumb {@link GlideDrawable}, +     * will never replace the full image., +     *     you want an animation to occur when either the full {@link GlideDrawable} loads or the thumbnail loads,, +            GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> thumbnailRequest) {, +     * Transform {@link GlideDrawable}s using the given, +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.CenterCrop}., +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.FitCenter}., +     * Transform {@link GlideDrawable}s using the given {@link android.graphics.Bitmap} transformations. Replaces any, +     * previous transformations., +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<GifBitmapWrapper, GlideDrawable> transcoder) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>());, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(animation, duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(context, animationId,, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, GlideDrawable> requestListener) {, +    public Target<GlideDrawable> into(ImageView view) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +                        GlideDrawable.class, null),, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, + * A class for creating a request to load a {@link GlideDrawable}., +        extends GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable>, +            LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> loadProvider, Glide glide,, +        super(context, model, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);, +     * Loads and displays the {@link GlideDrawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link GlideDrawable}s that are smaller and will be loaded more quickly, +     * than the fullsize {@link GlideDrawable}. There are no guarantees about the order in which the requests will, +     * actually finish. However, if the thumb request completes after the full request, the thumb {@link GlideDrawable}, +     * will never replace the full image., +     *     you want an animation to occur when either the full {@link GlideDrawable} loads or the thumbnail loads,, +            GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> thumbnailRequest) {, +     * Transform {@link GlideDrawable}s using the given, +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.CenterCrop}., +     * Transform {@link GlideDrawable}s using {@link com.bumptech.glide.load.resource.bitmap.FitCenter}., +     * Transform {@link GlideDrawable}s using the given {@link android.graphics.Bitmap} transformations. Replaces any, +     * previous transformations., +    public DrawableRequestBuilder<ModelType> transcoder(, +            ResourceTranscoder<GifBitmapWrapper, GlideDrawable> transcoder) {, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>());, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(animation, duration));, +        super.animate(new DrawableCrossFadeViewAnimation.DrawableCrossFadeFactory<GlideDrawable>(context, animationId,, +    public DrawableRequestBuilder<ModelType> listener(RequestListener<ModelType, GlideDrawable> requestListener) {, +    public Target<GlideDrawable> into(ImageView view) {, +++ b/library/src/main/java/com/bumptech/glide/DrawableTypeRequest.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +                        GlideDrawable.class, null),, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;, +        transcoderRegistry.register(GifBitmapWrapper.class, GlideDrawable.class,, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +import com.bumptech.glide.load.resource.drawable.GlideDrawable;, +import com.bumptech.glide.request.animation.DrawableCrossFadeViewAnimation;, + * A class for creating a request to load a {@link GlideDrawable}., +        extends GenericRequestBuilder<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable>, +            LoadProvider<ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable> loadProvider, Glide glide,, +        super(context, model, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);, +     * Loads and displays the {@link GlideDrawable} retrieved by the given thumbnail request if it finishes before this, +     * request. Best used for loading thumbnail {@link GlideDrawable}s that are smaller and will be loaded more quickly]