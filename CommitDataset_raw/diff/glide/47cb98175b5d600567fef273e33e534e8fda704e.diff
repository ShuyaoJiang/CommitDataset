[+++ b/src/com/bumptech/photos/cache/PhotoDiskCache.java, +    public void put(final String key, final Bitmap bitmap) {, +    public InputStream get(final String key) {, +        InputStream result = null;, +            DiskLruCache.Snapshot snapshot = cache.get(safeKey);, +            if (snapshot != null) {, +                result = snapshot.getInputStream(VALUE_COUNT - 1);, +                Log.d("DLRU: snapshot not found key=" + key);, +        return result;, +++ b/src/com/bumptech/photos/cache/PhotoDiskCache.java, +    public void put(final String key, final Bitmap bitmap) {, +    public InputStream get(final String key) {, +        InputStream result = null;, +            DiskLruCache.Snapshot snapshot = cache.get(safeKey);, +            if (snapshot != null) {, +                result = snapshot.getInputStream(VALUE_COUNT - 1);, +                Log.d("DLRU: snapshot not found key=" + key);, +        return result;, +++ b/src/com/bumptech/photos/imagemanager/ImageManager.java, +        return runJob(key, cb, new ImageManagerJob(key, cb, false) {, +            @Override, +            protected Bitmap resizeIfNotFound() {, +                return resizer.loadAsIs(path);, +        });, +    public Object getImageExact(final String path, final int width, final int height, final LoadedCallback cb) {, +        return runJob(key, cb, new ImageManagerJob(key, cb, false) {, +            @Override, +            protected Bitmap resizeIfNotFound() {, +                return resizer.loadAsIs(path, width, height);, +        });, +        return runJob(key, cb, new ImageManagerJob(key, cb) {, +            protected Bitmap resizeIfNotFound() {, +                return resizer.loadApproximate(path, width, height);, +        return runJob(key, cb, new ImageManagerJob(key, cb) {, +            protected Bitmap resizeIfNotFound() {, +                return resizer.resizeCenterCrop(path, width, height);, +        return runJob(key, cb, new ImageManagerJob(key, cb) {, +            protected Bitmap resizeIfNotFound() {, +                return resizer.fitInSpace(path, width, height);, +    }, +, +    private Object runJob(String key,final LoadedCallback cb, ImageManagerJob job) {, +        final Object token = cb;, +        if (!returnFromCache(key, cb)) {, +            executor.execute(job);, +        Bitmap inCache = getFromMemoryCache(key);, +    private abstract class ImageManagerJob implements Runnable {, +        private final LoadedCallback cb;, +        private final boolean useDiskCache;, +        public ImageManagerJob(String key, LoadedCallback cb) {, +            this(key, cb, true);, +        }, +, +        public ImageManagerJob(String key, LoadedCallback cb, boolean useDiskCache) {, +            this.useDiskCache = useDiskCache;, +        public void run() {, +            InputStream is1 = getFromDiskCache(key);, +            InputStream is2 = null;, +            if (is1 != null) {, +                is2 = getFromDiskCache(key);, +            }, +, +            final boolean isInDiskCache = is1 != null && is2 != null;, +            Bitmap result = null;, +            try {, +                if (isInDiskCache && useDiskCache) {, +                    result = resizer.loadAsIs(is1, is2);, +                    result = resizeIfNotFound();, +            } catch (Exception e) {, +, +            if (result != null) {, +                final Bitmap finalResult = result;, +                mainHandler.post(new Runnable() {, +                    @Override, +                    public void run() {, +                        acquireBitmap(finalResult);, +                        putInMemoryCache(key, finalResult);, +                        cb.onLoadCompleted(finalResult);, +                    }, +                });, +                //this is time consuming so do it after posting the result, +                if (!isInDiskCache && useDiskCache) {, +                    putInDiskCache(key, result);, +                }, +            }, +        protected abstract Bitmap resizeIfNotFound();, +    private InputStream getFromDiskCache(String key) {, +        InputStream result = null;, +        if (diskCache != null) {, +            result = diskCache.get(key);, +        }, +        return result;, +    }, +, +    private void putInDiskCache(String key, Bitmap value) {, +        if (diskCache != null) {, +            diskCache.put(key, value);, +        }, +    }, +]