[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), +            .build());, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    return builder.build();, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // @CheckResult isn't applicable for RequestBuilder because there is no, +                        // autoClone() in RequestBuilder., +                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);, +        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), +            .build());, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    return builder.build();, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // @CheckResult isn't applicable for RequestBuilder because there is no, +                        // autoClone() in RequestBuilder., +                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);, +        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      result.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), +            .build());, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    return builder.build();, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // @CheckResult isn't applicable for RequestBuilder because there is no, +                        // autoClone() in RequestBuilder., +                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);, +        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build()), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      result.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());, +, +++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java, +import android.support.annotation.CheckResult;, +  @CheckResult, +  @CheckResult, +  @CheckResult, +  @CheckResult, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import javax.lang.model.element.AnnotationMirror;, +  private static final ClassName CHECK_RESULT_CLASS_NAME =, +      ClassName.get("android.support.annotation", "CheckResult");, +    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride), +            .build());, +, +    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {, +      builder.addAnnotation(AnnotationSpec.get(mirror));, +    }, +, +    return builder.build();, +                        && !input.type.equals(TypeName.get(SafeVarargs.class)), +                        // @CheckResult isn't applicable for RequestBuilder because there is no, +                        // autoClone() in RequestBuilder.]