[+++ b/library/tests/src/com/bumptech/glide/ImagePresenterTest.java, +import android.graphics.Bitmap;, +import android.view.animation.Animation;, +import com.bumptech.glide.presenter.ImageReadyCallback;, +import com.bumptech.glide.presenter.target.Target;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +    private MockTarget target;, +        target = new MockTarget();, +    public void testMustProvideATarget() {, +        Exception exception = null;, +        try {, +            new ImagePresenter.Builder<Object>(), +                    .setModelLoader(new MockObjectLoader()), +                    .setImageLoader(new MockImageLoader()), +                    .build();, +        } catch (Exception e) {, +            exception = e;, +        }, +        assertNotNull(exception);, +    }, +, +    public void testMustProvideAModelLoader() {, +        Exception exception = null;, +        try {, +            new ImagePresenter.Builder<Object>(), +                    .setTarget(target, getContext()), +                    .setImageLoader(new MockImageLoader()), +                    .build();, +        } catch (Exception e) {, +            exception = e;, +        }, +        assertNotNull(exception);, +    }, +, +    public void testMustProvideAnImageLoader() {, +        Exception exception = null;, +        try {, +            new ImagePresenter.Builder<Object>(), +                    .setTarget(target, getContext()), +                    .setModelLoader(new MockObjectLoader()), +                    .build();, +        } catch (Exception e) {, +            exception = e;, +        }, +        assertNotNull(exception);, +    }, +, +    public void testPlaceholderIsSetWithNullModel() {, +        Drawable placeholder = new ColorDrawable(Color.RED);, +        ImagePresenter<Object> imagePresenter = new ImagePresenter.Builder<Object>(), +                .setTarget(target, getContext()), +                .setModelLoader(new MockObjectLoader()), +                .setImageLoader(new ImageManagerLoader(getContext())), +                .setPlaceholderDrawable(placeholder), +                .build();, +        imagePresenter.setModel(null);, +        assertEquals(placeholder, target.getPlaceholder());, +    }, +, +    public void testPlaceholderIsSetWithNullId() {, +        Drawable placeholder = new ColorDrawable(Color.RED);, +        final Bitmap result = Bitmap.createBitmap(1, 1, Bitmap.Config.ALPHA_8);, +        ImagePresenter<Object> imagePresenter = new ImagePresenter.Builder<Object>(), +                .setTarget(target, getContext()), +                .setModelLoader(new MockObjectLoader() {, +                    @Override, +                    public String getId(Object model) {, +                        return null;, +                    }, +                }), +                .setImageLoader(new MockImageLoader().onCallback(new MockImageLoader.CallbackAction() {, +                    @Override, +                    public void onCallbackReceived(ImageLoader.ImageReadyCallback cb) {, +                        cb.onImageReady(result);, +                    }, +                })), +                .setPlaceholderDrawable(placeholder), +                .build();, +, +        imagePresenter.setModel(new Object());, +        assertEquals(placeholder, target.getPlaceholder());, +    }, +, +    public void testPlaceholderIsSetWithNullStreamLoader() {, +        Drawable placeholder = new ColorDrawable(Color.RED);, +        final Bitmap result = Bitmap.createBitmap(1, 1, Bitmap.Config.ALPHA_8);, +        ImagePresenter<Object> imagePresenter = new ImagePresenter.Builder<Object>(), +                .setTarget(target, getContext()), +                .setModelLoader(new MockObjectLoader() {, +                    @Override, +                    public StreamLoader getStreamLoader(Object model, int width, int height) {, +                        return null;, +                    }, +                }), +                .setImageLoader(new MockImageLoader().onCallback(new MockImageLoader.CallbackAction() {, +                    @Override]