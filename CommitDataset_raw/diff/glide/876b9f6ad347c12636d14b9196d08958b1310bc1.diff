[+++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @see #centerCrop(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     *, +     * @see #fitCenter(), +     * @see #centerCrop(), +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(Transformation<Bitmap>... transformations) {, +        super.transform(transformations);, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @see #centerCrop(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     *, +     * @see #fitCenter(), +     * @see #centerCrop(), +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(Transformation<Bitmap>... transformations) {, +        super.transform(transformations);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +     * @see #fitCenter(), +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @see #centerCrop(), +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * Transform {@link android.graphics.drawable.Drawable}s using the given {@link android.graphics.Bitmap}, +     * transformations. Replaces any previous transformations., +     *, +     * @see #fitCenter(), +     * @see #centerCrop(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +    public DrawableRequestBuilder<ModelType> bitmapTransform(Transformation<Bitmap>... bitmapTransformations) {, +        GifBitmapWrapperTransformation[] transformations =, +                new GifBitmapWrapperTransformation[bitmapTransformations.length];, +        for (int i = 0; i < bitmapTransformations.length; i++) {, +            transformations[i] = new GifBitmapWrapperTransformation(bitmapTransformations[i]);, +        }, +        return transform(transformations);, +     *, +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #centerCrop(), +     * @see #fitCenter(), +    public DrawableRequestBuilder<ModelType> transform(Transformation<GifBitmapWrapper>... transformation) {, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +     * @see #fitCenter(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @see #centerCrop(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     *, +     * @see #fitCenter(), +     * @see #centerCrop(), +    public BitmapRequestBuilder<ModelType, TranscodeType> transform(Transformation<Bitmap>... transformations) {, +        super.transform(transformations);, +++ b/library/src/main/java/com/bumptech/glide/DrawableRequestBuilder.java, +     * @see #fitCenter(), +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * @see #centerCrop(), +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +     *, +     * Transform {@link android.graphics.drawable.Drawable}s using the given {@link android.graphics.Bitmap}, +     * transformations. Replaces any previous transformations., +     *, +     * @see #fitCenter(), +     * @see #centerCrop(), +     * @see #transform(com.bumptech.glide.load.Transformation[]), +    public DrawableRequestBuilder<ModelType> bitmapTransform(Transformation<Bitmap>... bitmapTransformations) {, +        GifBitmapWrapperTransformation[] transformations =, +                new GifBitmapWrapperTransformation[bitmapTransformations.length];, +        for (int i = 0; i < bitmapTransformations.length; i++) {, +            transformations[i] = new GifBitmapWrapperTransformation(bitmapTransformations[i]);, +        }, +        return transform(transformations);, +     *, +     * @see #bitmapTransform(com.bumptech.glide.load.Transformation[]), +     * @see #centerCrop(), +     * @see #fitCenter(), +    public DrawableRequestBuilder<ModelType> transform(Transformation<GifBitmapWrapper>... transformation) {, +++ b/library/src/main/java/com/bumptech/glide/GenericRequestBuilder.java, +    private Transformation<ResourceType> transformation = UnitTransformation.get();, +     * Transform resources with the given {@link Transformation}s. Replaces any existing transformation or, +     * transformations., +     * @param transformations the transformations to apply in order., +            Transformation<ResourceType>... transformations) {, +        if (transformations.length == 1) {, +            transformation = transformations[0];, +            transformation = new MultiTransformation<ResourceType>(transformations);, +                transformation,]