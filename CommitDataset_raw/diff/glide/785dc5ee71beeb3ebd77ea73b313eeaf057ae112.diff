[+++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job;, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job;, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +        EngineJob engineJob = mock(EngineJob.class);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job;, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +        EngineJob engineJob = mock(EngineJob.class);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job;, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +        EngineJob engineJob = mock(EngineJob.class);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +++ b/library/robolectric/src/com/bumptech/glide/request/GenericRequestTest.java, +                    requestCoordinator, engine, mock(Transformation.class), Object.class);, +    public void testCanHandleNullResources() {, +        GenericRequest request = harness.getRequest();, +, +        request.onResourceReady(null);, +, +        assertTrue(request.isFailed());, +    }, +, +    @Test, +        when(harness.resource.get()).thenReturn(new Object());, +                Request request = (Request) invocation.getArguments()[0];, +        }).when(requestCoordinator).canSetImage(any(Request.class));, +        when(harness.resource.get()).thenReturn(new Object());, +        when(harness.resource.get()).thenReturn(new Object());, +    private static class MockTarget implements Target {, +        public void onResourceReady(Object resource) {, +        public void setRequest(Request request) {, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineJobTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job = new EngineJob(key, memoryCache, mainHandler, listener);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/EngineTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +        EngineJob job;, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/ResourceRunnerTest.java, +import com.bumptech.glide.load.ResourceDecoder;, +        EngineJob engineJob = mock(EngineJob.class);, +++ b/library/robolectric/src/com/bumptech/glide/load/engine/SourceResourceRunnerTest.java, +        ResourceCallback cb = mock(ResourceCallback.class);, +++ b/library/robolectric/src/com/bumptech/glide/request/GenericRequestTest.java, +                    requestCoordinator, engine, mock(Transformation.class), Object.class);, +    public void testCanHandleNullResources() {, +        GenericRequest request = harness.getRequest();, +, +        request.onResourceReady(null);, +, +        assertTrue(request.isFailed());, +    }, +, +    @Test, +        when(harness.resource.get()).thenReturn(new Object());, +                Request request = (Request) invocation.getArguments()[0];, +        }).when(requestCoordinator).canSetImage(any(Request.class));, +        when(harness.resource.get()).thenReturn(new Object());, +        when(harness.resource.get()).thenReturn(new Object());, +    private static class MockTarget implements Target {, +        public void onResourceReady(Object resource) {, +        public void setRequest(Request request) {, +++ b/library/robolectric/src/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java, +package com.bumptech.glide.request.target;, +, +import android.graphics.Bitmap;, +import android.widget.ImageView;, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.robolectric.Robolectric;, +import org.robolectric.RobolectricTestRunner;, +]