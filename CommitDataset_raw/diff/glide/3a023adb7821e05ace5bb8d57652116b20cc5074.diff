[+++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      Context context, DecodeFormat decodeFormat, int logLevel) {, +    glideContext = new GlideContext(context, registry, imageViewTargetFactory, options, engine,, +        this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      Context context, DecodeFormat decodeFormat, int logLevel) {, +    glideContext = new GlideContext(context, registry, imageViewTargetFactory, options, engine,, +        this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +public final class GlideBuilder {, +  private int logLevel = Log.INFO;, +  GlideBuilder(Context context) {, +  /**, +   * Sets a log level constant from those in {@link Log} to indicate the desired log verbosity., +   *, +   * <p>The level must be one of {@link Log#VERBOSE}, {@link Log#DEBUG}, {@link Log#INFO},, +   * {@link Log#WARN}, or {@link Log#ERROR}., +   *, +   * <p>{@link Log#VERBOSE} means one or more lines will be logged per request, including, +   * timing logs and failures. {@link Log#DEBUG} means at most one line will be logged, +   * per successful request, including timing logs, although many lines may be logged for, +   * failures including multiple complete stack traces. {@link Log#INFO} means, +   * failed loads will be logged including multiple complete stack traces, but successful loads, +   * will not be logged at all. {@link Log#WARN} means only summaries of failed loads will be, +   * logged. {@link Log#ERROR} means only exceptional cases will be logged., +   *, +   * <p>All logs will be logged using the 'Glide' tag., +   *, +   * <p>Many other debugging logs are available in individual classes. The log level supplied here, +   * only controls a small set of informative and well formatted logs. Users wishing to debug, +   * certain aspects of the library can look for individual <code>TAG</code> variables at the tops, +   * of classes and use <code>adb shell setprop log.tag.TAG</code> to enable or disable any relevant, +   * tags., +   *, +   * @param logLevel The log level to use from {@link Log}., +   * @return This builder., +   */, +  public GlideBuilder setLogLevel(int logLevel) {, +    if (logLevel < Log.VERBOSE || logLevel > Log.ERROR) {, +      throw new IllegalArgumentException("Log level must be one of Log.VERBOSE, Log.DEBUG,", +          + " Log.INFO, Log.WARN, or Log.ERROR");, +    }, +    this.logLevel = logLevel;, +    return this;, +  }, +, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, decodeFormat,, +        logLevel);, +++ b/library/src/main/java/com/bumptech/glide/Glide.java, +      Context context, DecodeFormat decodeFormat, int logLevel) {, +    glideContext = new GlideContext(context, registry, imageViewTargetFactory, options, engine,, +        this, logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java, +import android.util.Log;, +public final class GlideBuilder {, +  private int logLevel = Log.INFO;, +  GlideBuilder(Context context) {, +  /**, +   * Sets a log level constant from those in {@link Log} to indicate the desired log verbosity., +   *, +   * <p>The level must be one of {@link Log#VERBOSE}, {@link Log#DEBUG}, {@link Log#INFO},, +   * {@link Log#WARN}, or {@link Log#ERROR}., +   *, +   * <p>{@link Log#VERBOSE} means one or more lines will be logged per request, including, +   * timing logs and failures. {@link Log#DEBUG} means at most one line will be logged, +   * per successful request, including timing logs, although many lines may be logged for, +   * failures including multiple complete stack traces. {@link Log#INFO} means, +   * failed loads will be logged including multiple complete stack traces, but successful loads, +   * will not be logged at all. {@link Log#WARN} means only summaries of failed loads will be, +   * logged. {@link Log#ERROR} means only exceptional cases will be logged., +   *, +   * <p>All logs will be logged using the 'Glide' tag., +   *, +   * <p>Many other debugging logs are available in individual classes. The log level supplied here, +   * only controls a small set of informative and well formatted logs. Users wishing to debug, +   * certain aspects of the library can look for individual <code>TAG</code> variables at the tops, +   * of classes and use <code>adb shell setprop log.tag.TAG</code> to enable or disable any relevant, +   * tags., +   *, +   * @param logLevel The log level to use from {@link Log}., +   * @return This builder., +   */, +  public GlideBuilder setLogLevel(int logLevel) {, +    if (logLevel < Log.VERBOSE || logLevel > Log.ERROR) {, +      throw new IllegalArgumentException("Log level must be one of Log.VERBOSE, Log.DEBUG,", +          + " Log.INFO, Log.WARN, or Log.ERROR");, +    }, +    this.logLevel = logLevel;, +    return this;, +  }, +, +    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, decodeFormat,, +        logLevel);, +++ b/library/src/main/java/com/bumptech/glide/GlideContext.java, +  private final int logLevel;, +      ComponentCallbacks2 componentCallbacks, int logLevel) {, +    this.logLevel = logLevel;, +  public int getLogLevel() {, +    return logLevel;]