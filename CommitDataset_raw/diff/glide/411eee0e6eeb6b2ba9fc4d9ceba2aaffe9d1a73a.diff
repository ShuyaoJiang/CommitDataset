[+++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +     * @param model The model representing the image this loader failed to load, +     * @param path The path to the image this loader failed to load, +     * @return True iff this image loader has handled the exception and the cb should not be notified., +    protected boolean onImageLoadFailed(Exception e, T model, String path) {, +        return false;, +    }, +        public void onException(Exception e) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, model, path)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +     * @param model The model representing the image this loader failed to load, +     * @param path The path to the image this loader failed to load, +     * @return True iff this image loader has handled the exception and the cb should not be notified., +    protected boolean onImageLoadFailed(Exception e, T model, String path) {, +        return false;, +    }, +        public void onException(Exception e) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, model, path)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +     * @param model The model representing the image this loader failed to load, +     * @param path The path to the image this loader failed to load, +     * @return True iff this image loader has handled the exception and the cb should not be notified., +    protected boolean onImageLoadFailed(Exception e, T model, String path) {, +        return false;, +    }, +        public void onException(Exception e) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, model, path)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/loader/path/BasePathLoader.java, +     * @param model The model representing the image this loader failed to fetch a path for, +     * @return True iff this path loader has handled the exception and the cb should not be notified., +    protected boolean onPathFetchFailed(Exception e, T model) {, +        return false;, +    }, +        public final void onException(Exception e) {, +                if (!BasePathLoader.this.onPathFetchFailed(e, model)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +     * @param model The model representing the image this loader failed to load, +     * @param path The path to the image this loader failed to load, +     * @return True iff this image loader has handled the exception and the cb should not be notified., +    protected boolean onImageLoadFailed(Exception e, T model, String path) {, +        return false;, +    }, +        public void onException(Exception e) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, model, path)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/loader/path/BasePathLoader.java, +     * @param model The model representing the image this loader failed to fetch a path for, +     * @return True iff this path loader has handled the exception and the cb should not be notified., +    protected boolean onPathFetchFailed(Exception e, T model) {, +        return false;, +    }, +        public final void onException(Exception e) {, +                if (!BasePathLoader.this.onPathFetchFailed(e, model)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/path/PathLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/loader/image/BaseImageLoader.java, +     * @param model The model representing the image this loader failed to load, +     * @param path The path to the image this loader failed to load, +     * @return True iff this image loader has handled the exception and the cb should not be notified., +    protected boolean onImageLoadFailed(Exception e, T model, String path) {, +        return false;, +    }, +        public void onException(Exception e) {, +                if (!BaseImageLoader.this.onImageLoadFailed(e, model, path)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/image/ImageLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/loader/path/BasePathLoader.java, +     * @param model The model representing the image this loader failed to fetch a path for, +     * @return True iff this path loader has handled the exception and the cb should not be notified., +    protected boolean onPathFetchFailed(Exception e, T model) {, +        return false;, +    }, +        public final void onException(Exception e) {, +                if (!BasePathLoader.this.onPathFetchFailed(e, model)) {, +                    cb.onException(e);, +                }, +++ b/library/src/com/bumptech/photos/loader/path/PathLoader.java, +        public void onException(Exception e);, +++ b/library/src/com/bumptech/photos/presenter/ImagePresenter.java, +        private ExceptionHandler<T> exceptionHandler;, +        /**]