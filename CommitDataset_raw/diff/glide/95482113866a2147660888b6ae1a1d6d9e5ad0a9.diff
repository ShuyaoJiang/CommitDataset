[+++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +        Drawable fallbackDrawable = null;, +        int fallbackResourceId = 0;, +                    fallbackDrawable,, +                    fallbackResourceId,, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +        verify(harness.engine, times(1)).load(eq(harness.signature), eq(100), eq(100),, +            any(DataFetcher.class), any(DataLoadProvider.class), any(Transformation.class),, +            any(ResourceTranscoder.class), any(Priority.class), anyBoolean(),, +            any(DiskCacheStrategy.class), any(ResourceCallback.class));, +    public void testPlaceholderDrawableSetOnNullModelWithNoErrorDrawable() {, +    public void testErrorDrawableSetOnNullModelWithErrorDrawable() {, +    public void testFallbackDrawableSetOnNullModelWithErrorAndFallbackDrawables() {, +        Drawable placeholder = new ColorDrawable(Color.RED);, +        Drawable errorPlaceholder = new ColorDrawable(Color.GREEN);, +        Drawable fallback = new ColorDrawable(Color.BLUE);, +, +        MockTarget target = new MockTarget();, +, +        harness.placeholderDrawable = placeholder;, +        harness.errorDrawable = errorPlaceholder;, +        harness.fallbackDrawable = fallback;, +        harness.target = target;, +        harness.model = null;, +        GenericRequest request = harness.getRequest();, +, +        request.begin();, +, +        assertEquals(fallback, target.currentPlaceholder);, +    }, +, +    @Test, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +        Drawable fallbackDrawable = null;, +        int fallbackResourceId = 0;, +                    fallbackDrawable,, +                    fallbackResourceId,, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +        verify(harness.engine, times(1)).load(eq(harness.signature), eq(100), eq(100),, +            any(DataFetcher.class), any(DataLoadProvider.class), any(Transformation.class),, +            any(ResourceTranscoder.class), any(Priority.class), anyBoolean(),, +            any(DiskCacheStrategy.class), any(ResourceCallback.class));, +    public void testPlaceholderDrawableSetOnNullModelWithNoErrorDrawable() {, +    public void testErrorDrawableSetOnNullModelWithErrorDrawable() {, +    public void testFallbackDrawableSetOnNullModelWithErrorAndFallbackDrawables() {, +        Drawable placeholder = new ColorDrawable(Color.RED);, +        Drawable errorPlaceholder = new ColorDrawable(Color.GREEN);, +        Drawable fallback = new ColorDrawable(Color.BLUE);, +, +        MockTarget target = new MockTarget();, +, +        harness.placeholderDrawable = placeholder;, +        harness.errorDrawable = errorPlaceholder;, +        harness.fallbackDrawable = fallback;, +        harness.target = target;, +        harness.model = null;, +        GenericRequest request = harness.getRequest();, +, +        request.begin();, +, +        assertEquals(fallback, target.currentPlaceholder);, +    }, +, +    @Test, +++ b/library/src/main/java/com/bumptech/glide/BitmapRequestBuilder.java, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> fallback(Drawable drawable) {, +        super.fallback(drawable);, +        return this;, +    }, +, +    @Override, +    public BitmapRequestBuilder<ModelType, TranscodeType> fallback(int resourceId) {, +        super.fallback(resourceId);, +        return this;, +    }, +, +++ b/library/src/androidTest/java/com/bumptech/glide/request/GenericRequestTest.java, +        Drawable fallbackDrawable = null;, +        int fallbackResourceId = 0;, +                    fallbackDrawable,, +                    fallbackResourceId,, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +                .onException(any(Exception.class), any(Number.class), eq(harness.target),, +                    anyBoolean());, +        verify(harness.engine, times(1)).load(eq(harness.signature), eq(100), eq(100),, +            any(DataFetcher.class), any(DataLoadProvider.class), any(Transformation.class),, +            any(ResourceTranscoder.class), any(Priority.class), anyBoolean(),, +            any(DiskCacheStrategy.class), any(ResourceCallback.class));, +    public void testPlaceholderDrawableSetOnNullModelWithNoErrorDrawable() {, +    public void testErrorDrawableSetOnNullModelWithErrorDrawable() {, +    public void testFallbackDrawableSetOnNullModelWithErrorAndFallbackDrawables() {, +        Drawable placeholder = new ColorDrawable(Color.RED);]