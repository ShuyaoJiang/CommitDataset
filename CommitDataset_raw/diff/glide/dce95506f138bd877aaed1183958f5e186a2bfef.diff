[+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    if (resource instanceof Initializable) {, +      ((Initializable) resource).initialize();, +    }, +, +  private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, +    private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    if (resource instanceof Initializable) {, +      ((Initializable) resource).initialize();, +    }, +, +  private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, +    private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Initializable.java, +package com.bumptech.glide.load.engine;, +, +/**, + * A callback allowing a resource to do some optimization on a background thread before being, + * returned to the ui., + */, +public interface Initializable {, +, +  /**, +   * Called on a background thread so the {@link Resource} can do some eager initialization, +   */, +  void initialize();, +, +}, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    if (resource instanceof Initializable) {, +      ((Initializable) resource).initialize();, +    }, +, +  private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, +    private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Initializable.java, +package com.bumptech.glide.load.engine;, +, +/**, + * A callback allowing a resource to do some optimization on a background thread before being, + * returned to the ui., + */, +public interface Initializable {, +, +  /**, +   * Called on a background thread so the {@link Resource} can do some eager initialization, +   */, +  void initialize();, +, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, +import com.bumptech.glide.load.engine.Initializable;, +public class BitmapDrawableResource extends DrawableResource<BitmapDrawable>, +    implements Initializable {, +, +  @Override, +  public void initialize() {, +    drawable.getBitmap().prepareToDraw();, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java, +    if (resource instanceof Initializable) {, +      ((Initializable) resource).initialize();, +    }, +, +  private class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {, +    private DecodeCallback(DataSource dataSource) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/Initializable.java, +package com.bumptech.glide.load.engine;, +, +/**, + * A callback allowing a resource to do some optimization on a background thread before being, + * returned to the ui., + */, +public interface Initializable {, +, +  /**, +   * Called on a background thread so the {@link Resource} can do some eager initialization, +   */, +  void initialize();, +, +}, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResource.java, +import com.bumptech.glide.load.engine.Initializable;, +public class BitmapDrawableResource extends DrawableResource<BitmapDrawable>, +    implements Initializable {, +, +  @Override, +  public void initialize() {, +    drawable.getBitmap().prepareToDraw();, +  }, +++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java, +import com.bumptech.glide.load.engine.Initializable;, +public class BitmapResource implements Resource<Bitmap>,, +    Initializable {, +, +  @Override, +  public void initialize() {, +    bitmap.prepareToDraw();, +  }]