[+++ b/library/src/com/bumptech/glide/loader/bitmap/model/GenericLoaderFactory.java, +    private Map<Class, Map<Class, ModelLoader>> cachedModelLoaders =, +            new HashMap<Class, Map<Class, ModelLoader>>();, +, +        cachedModelLoaders.clear();, +, +        ModelLoader<T, Y> result = getCachedLoader(modelClass, resourceClass);, +        if (result != null) {, +            return result;, +        }, +, +        if (factory != null) {, +            result = factory.build(context, this);, +            cacheModelLoader(modelClass, resourceClass, result);, +        }, +        return result;, +    }, +, +    private <T, Y> void cacheModelLoader(Class<T> modelClass, Class<Y> resourceClass, ModelLoader<T, Y> modelLoader) {, +        Map<Class, ModelLoader> resourceToLoaders = cachedModelLoaders.get(modelClass);, +        if (resourceToLoaders == null) {, +            resourceToLoaders = new HashMap<Class, ModelLoader>();, +            cachedModelLoaders.put(modelClass, resourceToLoaders);, +        }, +        resourceToLoaders.put(resourceClass, modelLoader);, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoader<T, Y> getCachedLoader(Class<T> modelClass, Class<Y> resourceClass) {, +        Map<Class, ModelLoader> resourceToLoaders = cachedModelLoaders.get(modelClass);, +        ModelLoader result = null;, +        if (resourceToLoaders != null) {, +            result = resourceToLoaders.get(resourceClass);, +        }, +, +        if (result == null) {, +            for (Class registeredModelClass : cachedModelLoaders.keySet()) {, +                if (registeredModelClass.isAssignableFrom(modelClass)) {, +                    Map<Class,  ModelLoader> currentResourceToLoaders = cachedModelLoaders.get(registeredModelClass);, +                    if (currentResourceToLoaders != null) {, +                        result = currentResourceToLoaders.get(resourceClass);, +                        if (result != null) {, +                            break;, +                        }, +                    }, +                }, +            }, +        }, +, +        return result;, +++ b/library/src/com/bumptech/glide/loader/bitmap/model/GenericLoaderFactory.java, +    private Map<Class, Map<Class, ModelLoader>> cachedModelLoaders =, +            new HashMap<Class, Map<Class, ModelLoader>>();, +, +        cachedModelLoaders.clear();, +, +        ModelLoader<T, Y> result = getCachedLoader(modelClass, resourceClass);, +        if (result != null) {, +            return result;, +        }, +, +        if (factory != null) {, +            result = factory.build(context, this);, +            cacheModelLoader(modelClass, resourceClass, result);, +        }, +        return result;, +    }, +, +    private <T, Y> void cacheModelLoader(Class<T> modelClass, Class<Y> resourceClass, ModelLoader<T, Y> modelLoader) {, +        Map<Class, ModelLoader> resourceToLoaders = cachedModelLoaders.get(modelClass);, +        if (resourceToLoaders == null) {, +            resourceToLoaders = new HashMap<Class, ModelLoader>();, +            cachedModelLoaders.put(modelClass, resourceToLoaders);, +        }, +        resourceToLoaders.put(resourceClass, modelLoader);, +    }, +, +    @SuppressWarnings("unchecked"), +    private <T, Y> ModelLoader<T, Y> getCachedLoader(Class<T> modelClass, Class<Y> resourceClass) {, +        Map<Class, ModelLoader> resourceToLoaders = cachedModelLoaders.get(modelClass);, +        ModelLoader result = null;, +        if (resourceToLoaders != null) {, +            result = resourceToLoaders.get(resourceClass);, +        }, +, +        if (result == null) {, +            for (Class registeredModelClass : cachedModelLoaders.keySet()) {, +                if (registeredModelClass.isAssignableFrom(modelClass)) {, +                    Map<Class,  ModelLoader> currentResourceToLoaders = cachedModelLoaders.get(registeredModelClass);, +                    if (currentResourceToLoaders != null) {, +                        result = currentResourceToLoaders.get(resourceClass);, +                        if (result != null) {, +                            break;, +                        }, +                    }, +                }, +            }, +        }, +, +        return result;]