[+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  private final long initialMaxSize;, +  private long maxSize;, +  private long currentSize;, +  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, +  public LruBitmapPool(long maxSize) {, +  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {, +  public long getMaxSize() {, +  private synchronized void trimToSize(long size) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  private final long initialMaxSize;, +  private long maxSize;, +  private long currentSize;, +  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, +  public LruBitmapPool(long maxSize) {, +  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {, +  public long getMaxSize() {, +  private synchronized void trimToSize(long size) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java, + * DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, long)} constructor variant., +  private final long diskCacheSize;, +  public DiskLruCacheFactory(final String diskCacheFolder, long diskCacheSize) {, +                             long diskCacheSize) {, +  public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, long diskCacheSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  private final long initialMaxSize;, +  private long maxSize;, +  private long currentSize;, +  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, +  public LruBitmapPool(long maxSize) {, +  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {, +  public long getMaxSize() {, +  private synchronized void trimToSize(long size) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java, + * DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, long)} constructor variant., +  private final long diskCacheSize;, +  public DiskLruCacheFactory(final String diskCacheFolder, long diskCacheSize) {, +                             long diskCacheSize) {, +  public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, long diskCacheSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + * @see #get(java.io.File, long), +  private final long maxSize;, +  public static synchronized DiskCache get(File directory, long maxSize) {, +  protected DiskLruCacheWrapper(File directory, long maxSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  private final long initialMaxSize;, +  private long maxSize;, +  private long currentSize;, +  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, +  public LruBitmapPool(long maxSize) {, +  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {, +  public long getMaxSize() {, +  private synchronized void trimToSize(long size) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java, + * DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, long)} constructor variant., +  private final long diskCacheSize;, +  public DiskLruCacheFactory(final String diskCacheFolder, long diskCacheSize) {, +                             long diskCacheSize) {, +  public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, long diskCacheSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java, + * @see #get(java.io.File, long), +  private final long maxSize;, +  public static synchronized DiskCache get(File directory, long maxSize) {, +  protected DiskLruCacheWrapper(File directory, long maxSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java, +  public ExternalPreferredCacheDiskCacheFactory(Context context, long diskCacheSize) {, +                                                final long diskCacheSize) {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java, +  long getMaxSize();, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java, +  public long getMaxSize() {, +++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java, +  private final long initialMaxSize;, +  private long maxSize;, +  private long currentSize;, +  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {, +  public LruBitmapPool(long maxSize) {, +  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {]