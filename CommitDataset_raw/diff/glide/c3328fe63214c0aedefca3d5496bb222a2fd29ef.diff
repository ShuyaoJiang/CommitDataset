[+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, +      "androidx.annotation.VisibleForTesting";, +, +    Elements elements = processingEnv.getElementUtils();, +    TypeElement visibleForTestingTypeElement = elements, +        .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, +    if (visibleForTestingTypeElement == null) {, +      // Fall back to looking for the Support library version., +      visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, +    }, +    String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, +      "androidx.annotation.VisibleForTesting";, +, +    Elements elements = processingEnv.getElementUtils();, +    TypeElement visibleForTestingTypeElement = elements, +        .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, +    if (visibleForTestingTypeElement == null) {, +      // Fall back to looking for the Support library version., +      visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, +    }, +    String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +  private static final ClassName ANDROIDX_NONNULL_ANNOTATION =, +      ClassName.get("androidx.annotation", "NonNull");, +  private static final ClassName CHECK_RESULT_ANNOTATION =, +      ClassName.get("android.support.annotation", "CheckResult");, +  private static final ClassName ANDROIDX_CHECK_RESULT_ANNOTATION =, +      ClassName.get("androidx.annotation", "CheckResult");, +    try {, +      Class.forName(ANDROIDX_NONNULL_ANNOTATION.reflectionName());, +      return ANDROIDX_NONNULL_ANNOTATION;, +    } catch (ClassNotFoundException e) {, +  }, +, +  static ClassName checkResult() {, +    try {, +      Class.forName(ANDROIDX_CHECK_RESULT_ANNOTATION.reflectionName());, +      return ANDROIDX_CHECK_RESULT_ANNOTATION;, +    } catch (ClassNotFoundException e) {, +      return CHECK_RESULT_ANNOTATION;, +    }, +  }, +    return Arrays.asList(NONNULL_ANNOTATION, JETBRAINS_NOTNULL_ANNOTATION,, +        ANDROIDX_NONNULL_ANNOTATION);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, +      "androidx.annotation.VisibleForTesting";, +, +    Elements elements = processingEnv.getElementUtils();, +    TypeElement visibleForTestingTypeElement = elements, +        .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, +    if (visibleForTestingTypeElement == null) {, +      // Fall back to looking for the Support library version., +      visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, +    }, +    String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +  private static final ClassName ANDROIDX_NONNULL_ANNOTATION =, +      ClassName.get("androidx.annotation", "NonNull");, +  private static final ClassName CHECK_RESULT_ANNOTATION =, +      ClassName.get("android.support.annotation", "CheckResult");, +  private static final ClassName ANDROIDX_CHECK_RESULT_ANNOTATION =, +      ClassName.get("androidx.annotation", "CheckResult");, +    try {, +      Class.forName(ANDROIDX_NONNULL_ANNOTATION.reflectionName());, +      return ANDROIDX_NONNULL_ANNOTATION;, +    } catch (ClassNotFoundException e) {, +  }, +, +  static ClassName checkResult() {, +    try {, +      Class.forName(ANDROIDX_CHECK_RESULT_ANNOTATION.reflectionName());, +      return ANDROIDX_CHECK_RESULT_ANNOTATION;, +    } catch (ClassNotFoundException e) {, +      return CHECK_RESULT_ANNOTATION;, +    }, +  }, +    return Arrays.asList(NONNULL_ANNOTATION, JETBRAINS_NOTNULL_ANNOTATION,, +        ANDROIDX_NONNULL_ANNOTATION);, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java, +import static com.bumptech.glide.annotation.compiler.ProcessorUtil.checkResult;, +  private static final AnnotationSpec CHECK_RESULT = AnnotationSpec.builder(checkResult()).build();, +        .addAnnotation(CHECK_RESULT), +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java, +  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =, +      "androidx.annotation.VisibleForTesting";, +, +    Elements elements = processingEnv.getElementUtils();, +    TypeElement visibleForTestingTypeElement = elements, +        .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);, +    if (visibleForTestingTypeElement == null) {, +      // Fall back to looking for the Support library version., +      visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);, +    }, +    String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();, +++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java, +  private static final ClassName ANDROIDX_NONNULL_ANNOTATION =]