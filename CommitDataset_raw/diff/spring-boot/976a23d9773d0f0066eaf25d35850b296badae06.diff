[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +		if (cacheDuration != null) {, +			messageSource.setCacheMillis(cacheDuration.toMillis());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +		if (cacheDuration != null) {, +			messageSource.setCacheMillis(cacheDuration.toMillis());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +import java.time.temporal.ChronoUnit;, +, +import org.springframework.boot.convert.DurationUnit;, +	 * forever. If a duration suffix is not specified, seconds will be used., +	@DurationUnit(ChronoUnit.SECONDS), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +		if (cacheDuration != null) {, +			messageSource.setCacheMillis(cacheDuration.toMillis());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +import java.time.temporal.ChronoUnit;, +, +import org.springframework.boot.convert.DurationUnit;, +	 * forever. If a duration suffix is not specified, seconds will be used., +	@DurationUnit(ChronoUnit.SECONDS), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +	public void testCacheDurationNoUnit() {, +		this.contextRunner, +				.withPropertyValues("spring.messages.basename:test/messages",, +						"spring.messages.cache-duration=10"), +				.run(assertCache(10 * 1000));, +	}, +, +	@Test, +	public void testCacheDurationWithUnit() {, +		this.contextRunner, +				.withPropertyValues("spring.messages.basename:test/messages",, +						"spring.messages.cache-duration=1m"), +				.run(assertCache(60 * 1000));, +	}, +, +	private ContextConsumer<AssertableApplicationContext> assertCache(long expected) {, +		return (context) -> {, +			assertThat(assertThat(context).hasSingleBean(MessageSource.class));, +			assertThat(new DirectFieldAccessor(context.getBean(MessageSource.class)), +					.getPropertyValue("cacheMillis")).isEqualTo(expected);, +		};, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +		if (cacheDuration != null) {, +			messageSource.setCacheMillis(cacheDuration.toMillis());, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +import java.time.temporal.ChronoUnit;, +, +import org.springframework.boot.convert.DurationUnit;, +	 * forever. If a duration suffix is not specified, seconds will be used., +	@DurationUnit(ChronoUnit.SECONDS), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +	public void testCacheDurationNoUnit() {, +		this.contextRunner, +				.withPropertyValues("spring.messages.basename:test/messages",, +						"spring.messages.cache-duration=10"), +				.run(assertCache(10 * 1000));, +	}, +, +	@Test, +	public void testCacheDurationWithUnit() {, +		this.contextRunner, +				.withPropertyValues("spring.messages.basename:test/messages",, +						"spring.messages.cache-duration=1m"), +				.run(assertCache(60 * 1000));, +	}, +, +	private ContextConsumer<AssertableApplicationContext> assertCache(long expected) {, +		return (context) -> {, +			assertThat(assertThat(context).hasSingleBean(MessageSource.class));, +			assertThat(new DirectFieldAccessor(context.getBean(MessageSource.class)), +					.getPropertyValue("cacheMillis")).isEqualTo(expected);, +		};, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.messages.cache-duration= # Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.]