[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/security/AuthorizationAuditListener.java, + * Copyright 2012-2016 the original author or authors., +		if (event.getAuthentication().getDetails() != null) {, +			data.put("details", event.getAuthentication().getDetails());, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/security/AuthorizationAuditListener.java, + * Copyright 2012-2016 the original author or authors., +		if (event.getAuthentication().getDetails() != null) {, +			data.put("details", event.getAuthentication().getDetails());, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthorizationAuditListenerTests.java, + * Copyright 2012-2016 the original author or authors., +import org.mockito.ArgumentCaptor;, +import org.springframework.boot.actuate.audit.listener.AuditApplicationEvent;, +import org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import static org.assertj.core.api.Assertions.assertThat;, +	public void testAuthenticationCredentialsNotFound() {, +		this.listener.onApplicationEvent(new AuthenticationCredentialsNotFoundEvent(this,, +				Arrays.<ConfigAttribute>asList(new SecurityConfig("USER")),, +				new AuthenticationCredentialsNotFoundException("Bad user")));, +		verify(this.publisher).publishEvent((ApplicationEvent) anyObject());, +	}, +, +	@Test, +	public void testAuthorizationFailure() {, +	@Test, +	public void testDetailsAreIncludedInAuditEvent() throws Exception {, +		Object details = new Object();, +		UsernamePasswordAuthenticationToken authentication =, +				new UsernamePasswordAuthenticationToken("user", "password");, +		authentication.setDetails(details);, +		this.listener.onApplicationEvent(new AuthorizationFailureEvent(this,, +				Arrays.<ConfigAttribute>asList(new SecurityConfig("USER")),, +				authentication, new AccessDeniedException("Bad user")));, +		ArgumentCaptor<AuditApplicationEvent> auditApplicationEvent = ArgumentCaptor, +				.forClass(AuditApplicationEvent.class);, +		verify(this.publisher).publishEvent(auditApplicationEvent.capture());, +		assertThat(auditApplicationEvent.getValue().getAuditEvent().getData()), +				.containsEntry("details", details);, +	}, +]