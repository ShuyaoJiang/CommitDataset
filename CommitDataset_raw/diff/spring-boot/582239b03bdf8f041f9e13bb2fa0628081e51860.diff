[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-application-arguments]], +=== Accessing application arguments, +If you need to access the application arguments that were passed to, +`SpringApplication.run(...)` you can inject a, +`org.springframework.boot.ApplicationArguments` bean. The `ApplicationArguments` interface, +provides access to both the raw `String[]` arguments as well as parsed `option` and, +`non-option` arguments:, +, +[source,java,indent=0], +----, +	import org.springframework.boot.*, +	import org.springframework.beans.factory.annotation.*, +	import org.springframework.stereotype.*, +, +	@Component, +	public class MyBean {, +, +		@Autowired, +		public MyBean(ApplicationArguments args) {, +			boolean debug = args.containsOption("debug");, +			List<String> files = args.getNonOptionArgs();, +			// if run with "--debug logfile.txt" debug=true, files=["logfile.txt"], +		}, +, +	}, +----, +, +TIP: Spring Boot will also register a `CommandLinePropertySource` with the Spring, +`Environment`. This allows you to also inject single application arguments using the, +`@Value` annotation., +, +, +, +=== Using the ApplicationRunner or CommandLineRunner, +If you need to run some specific code once the `SpringApplication` has started, you can, +implement the `ApplicationRunner` or `CommandLineRunner` interfaces. Both interfaces work, +in the same way and offer a single `run` method which will be called just before, +`SpringApplication.run(...)` completes., +, +The `CommandLineRunner` interfaces provides access to application arguments as a simple, +string array, whereas the `ApplicationRunner` uses the `ApplicationArguments` interface, +discussed above., +`org.springframework.core.annotation.Order` annotation if several `CommandLineRunner` or, +`ApplicationRunner` beans are defined that must be called in a specific order., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-application-arguments]], +=== Accessing application arguments, +If you need to access the application arguments that were passed to, +`SpringApplication.run(...)` you can inject a, +`org.springframework.boot.ApplicationArguments` bean. The `ApplicationArguments` interface, +provides access to both the raw `String[]` arguments as well as parsed `option` and, +`non-option` arguments:, +, +[source,java,indent=0], +----, +	import org.springframework.boot.*, +	import org.springframework.beans.factory.annotation.*, +	import org.springframework.stereotype.*, +, +	@Component, +	public class MyBean {, +, +		@Autowired, +		public MyBean(ApplicationArguments args) {, +			boolean debug = args.containsOption("debug");, +			List<String> files = args.getNonOptionArgs();, +			// if run with "--debug logfile.txt" debug=true, files=["logfile.txt"], +		}, +, +	}, +----, +, +TIP: Spring Boot will also register a `CommandLinePropertySource` with the Spring, +`Environment`. This allows you to also inject single application arguments using the, +`@Value` annotation., +, +, +, +=== Using the ApplicationRunner or CommandLineRunner, +If you need to run some specific code once the `SpringApplication` has started, you can, +implement the `ApplicationRunner` or `CommandLineRunner` interfaces. Both interfaces work, +in the same way and offer a single `run` method which will be called just before, +`SpringApplication.run(...)` completes., +, +The `CommandLineRunner` interfaces provides access to application arguments as a simple, +string array, whereas the `ApplicationRunner` uses the `ApplicationArguments` interface, +discussed above., +`org.springframework.core.annotation.Order` annotation if several `CommandLineRunner` or, +`ApplicationRunner` beans are defined that must be called in a specific order., +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationArguments.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]