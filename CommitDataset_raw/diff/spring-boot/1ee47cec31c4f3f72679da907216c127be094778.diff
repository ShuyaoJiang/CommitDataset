[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.Arrays;, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +			String[] locations = resolveLocations(this.properties.getLocations().toArray(new String[0]), flyway.getDataSource());, +			checkLocationExists(locations);, +			flyway.setLocations(locations);, +		private static String[] resolveLocations(String[] locations, DataSource dataSource) {, +			if (usesVendorLocation(locations)) {, +				try {, +					String url = (String) JdbcUtils, +							.extractDatabaseMetaData(dataSource, "getURL");, +					DatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);, +					if (vendor != DatabaseDriver.UNKNOWN) {, +						for (int i = 0; i < locations.length; i++) {, +							locations[i] = locations[i].replace(VENDOR_PLACEHOLDER,, +									vendor.getId());, +						}, +					}, +				}, +				catch (MetaDataAccessException ex) {, +					throw new IllegalStateException(ex);, +				}, +			}, +			return locations;, +		}, +, +		private static boolean usesVendorLocation(String... locations) {, +			for (String location : locations) {, +				if (location.contains(VENDOR_PLACEHOLDER)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		private void checkLocationExists(String... locations) {, +			if (this.properties.isCheckLocation()) {, +				Assert.state(locations.length != 0,, +						"Migration script locations not configured");, +				boolean exists = hasAtLeastOneLocation(locations);, +				Assert.state(exists,, +						() -> "Cannot find migrations location in: " + Arrays.asList(locations), +								+ " (please add migrations or check your Flyway configuration)");, +			}, +		}, +, +		private boolean hasAtLeastOneLocation(String... locations) {, +			for (String location : locations) {, +				if (this.resourceLoader.getResource(location).exists()) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +			locations = FlywayConfiguration.resolveLocations(locations,, +					getDataSource());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import java.util.Arrays;, +		private static final String VENDOR_PLACEHOLDER = "{vendor}";, +, +			String[] locations = resolveLocations(this.properties.getLocations().toArray(new String[0]), flyway.getDataSource());, +			checkLocationExists(locations);, +			flyway.setLocations(locations);, +		private static String[] resolveLocations(String[] locations, DataSource dataSource) {, +			if (usesVendorLocation(locations)) {, +				try {, +					String url = (String) JdbcUtils, +							.extractDatabaseMetaData(dataSource, "getURL");, +					DatabaseDriver vendor = DatabaseDriver.fromJdbcUrl(url);, +					if (vendor != DatabaseDriver.UNKNOWN) {, +						for (int i = 0; i < locations.length; i++) {, +							locations[i] = locations[i].replace(VENDOR_PLACEHOLDER,, +									vendor.getId());, +						}, +					}, +				}, +				catch (MetaDataAccessException ex) {, +					throw new IllegalStateException(ex);, +				}, +			}, +			return locations;, +		}, +, +		private static boolean usesVendorLocation(String... locations) {, +			for (String location : locations) {, +				if (location.contains(VENDOR_PLACEHOLDER)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		private void checkLocationExists(String... locations) {, +			if (this.properties.isCheckLocation()) {, +				Assert.state(locations.length != 0,, +						"Migration script locations not configured");, +				boolean exists = hasAtLeastOneLocation(locations);, +				Assert.state(exists,]