[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.event.ApplicationPreparedEvent;, + * @author Andy Wilkinson, +		if (event instanceof ApplicationPreparedEvent) {, +			Restarter.getInstance(), +					.prepare(((ApplicationPreparedEvent) event).getApplicationContext());, +		}, +			if (event instanceof ApplicationFailedEvent) {, +				Restarter.getInstance().prepare(null);, +			}, +			Restarter.initialize(args, false, initializer, restartOnInitialize);, +++ /dev/null, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.event.ApplicationPreparedEvent;, + * @author Andy Wilkinson, +		if (event instanceof ApplicationPreparedEvent) {, +			Restarter.getInstance(), +					.prepare(((ApplicationPreparedEvent) event).getApplicationContext());, +		}, +			if (event instanceof ApplicationFailedEvent) {, +				Restarter.getInstance().prepare(null);, +			}, +			Restarter.initialize(args, false, initializer, restartOnInitialize);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, + * @author Andy Wilkinson, +	private final Lock stopLock = new ReentrantLock();, +, +	private volatile ConfigurableApplicationContext rootContext;, +			RestartInitializer initializer) {, +			if (this.rootContext != null) {, +				this.rootContext.close();, +				this.rootContext = null;, +			}, +	synchronized boolean isFinished() {, +	void prepare(ConfigurableApplicationContext applicationContext) {, +		if (applicationContext != null && applicationContext.getParent() != null) {, +			return;, +		}, +		this.rootContext = applicationContext;, +	}, +, +			RestartInitializer initializer, boolean restartOnInitialize) {, +						forceReferenceCleanup, initializer);, +++ /dev/null, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.event.ApplicationPreparedEvent;, + * @author Andy Wilkinson, +		if (event instanceof ApplicationPreparedEvent) {, +			Restarter.getInstance(), +					.prepare(((ApplicationPreparedEvent) event).getApplicationContext());, +		}, +			if (event instanceof ApplicationFailedEvent) {, +				Restarter.getInstance().prepare(null);, +			}, +			Restarter.initialize(args, false, initializer, restartOnInitialize);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, + * @author Andy Wilkinson, +	private final Lock stopLock = new ReentrantLock();, +, +	private volatile ConfigurableApplicationContext rootContext;, +			RestartInitializer initializer) {, +			if (this.rootContext != null) {, +				this.rootContext.close();, +				this.rootContext = null;, +			}, +	synchronized boolean isFinished() {, +	void prepare(ConfigurableApplicationContext applicationContext) {, +		if (applicationContext != null && applicationContext.getParent() != null) {, +			return;, +		}, +		this.rootContext = applicationContext;, +	}, +, +			RestartInitializer initializer, boolean restartOnInitialize) {, +						forceReferenceCleanup, initializer);, +++ b/spring-boot-devtools/src/main/resources/META-INF/spring.factories, +++ /dev/null, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.context.event.ApplicationPreparedEvent;, + * @author Andy Wilkinson, +		if (event instanceof ApplicationPreparedEvent) {, +			Restarter.getInstance(), +					.prepare(((ApplicationPreparedEvent) event).getApplicationContext());, +		}, +			if (event instanceof ApplicationFailedEvent) {, +				Restarter.getInstance().prepare(null);, +			}, +			Restarter.initialize(args, false, initializer, restartOnInitialize);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, + * Copyright 2012-2016 the original author or authors.]