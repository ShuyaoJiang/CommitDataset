[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.boot.autoconfigure.domain.EntityScanPackages;, +import org.springframework.data.cassandra.config.CassandraEntityClassScanner;, +	private final BeanFactory beanFactory;, +, +	public CassandraDataAutoConfiguration(BeanFactory beanFactory,, +			CassandraProperties properties, Cluster cluster) {, +		this.beanFactory = beanFactory;, +	public CassandraMappingContext cassandraMapping() throws ClassNotFoundException {, +		BasicCassandraMappingContext context = new BasicCassandraMappingContext();, +		List<String> packages = EntityScanPackages.get(this.beanFactory), +				.getPackageNames();, +		if (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {, +			packages = AutoConfigurationPackages.get(this.beanFactory);, +		}, +		if (!packages.isEmpty()) {, +			context.setInitialEntitySet(CassandraEntityClassScanner.scan(packages));, +		}, +		return context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.boot.autoconfigure.domain.EntityScanPackages;, +import org.springframework.data.cassandra.config.CassandraEntityClassScanner;, +	private final BeanFactory beanFactory;, +, +	public CassandraDataAutoConfiguration(BeanFactory beanFactory,, +			CassandraProperties properties, Cluster cluster) {, +		this.beanFactory = beanFactory;, +	public CassandraMappingContext cassandraMapping() throws ClassNotFoundException {, +		BasicCassandraMappingContext context = new BasicCassandraMappingContext();, +		List<String> packages = EntityScanPackages.get(this.beanFactory), +				.getPackageNames();, +		if (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {, +			packages = AutoConfigurationPackages.get(this.beanFactory);, +		}, +		if (!packages.isEmpty()) {, +			context.setInitialEntitySet(CassandraEntityClassScanner.scan(packages));, +		}, +		return context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java, +import java.util.Set;, +, +import org.springframework.boot.autoconfigure.domain.EntityScanner;, +import org.springframework.context.ApplicationContext;, +import org.springframework.data.annotation.Persistent;, +import org.springframework.data.couchbase.core.mapping.Document;, +	private final ApplicationContext applicationContext;, +, +	SpringBootCouchbaseDataConfiguration(ApplicationContext applicationContext,, +			CouchbaseDataProperties properties,, +		this.applicationContext = applicationContext;, +	protected Set<Class<?>> getInitialEntitySet() throws ClassNotFoundException {, +		return new EntityScanner(this.applicationContext).scan(Document.class,, +				Persistent.class);, +	}, +, +	@Override, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.boot.autoconfigure.domain.EntityScanPackages;, +import org.springframework.data.cassandra.config.CassandraEntityClassScanner;, +	private final BeanFactory beanFactory;, +, +	public CassandraDataAutoConfiguration(BeanFactory beanFactory,, +			CassandraProperties properties, Cluster cluster) {, +		this.beanFactory = beanFactory;, +	public CassandraMappingContext cassandraMapping() throws ClassNotFoundException {, +		BasicCassandraMappingContext context = new BasicCassandraMappingContext();, +		List<String> packages = EntityScanPackages.get(this.beanFactory), +				.getPackageNames();, +		if (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {, +			packages = AutoConfigurationPackages.get(this.beanFactory);, +		}, +		if (!packages.isEmpty()) {, +			context.setInitialEntitySet(CassandraEntityClassScanner.scan(packages));, +		}, +		return context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java, +import java.util.Set;, +, +import org.springframework.boot.autoconfigure.domain.EntityScanner;, +import org.springframework.context.ApplicationContext;, +import org.springframework.data.annotation.Persistent;, +import org.springframework.data.couchbase.core.mapping.Document;, +	private final ApplicationContext applicationContext;, +, +	SpringBootCouchbaseDataConfiguration(ApplicationContext applicationContext,, +			CouchbaseDataProperties properties,, +		this.applicationContext = applicationContext;, +	protected Set<Class<?>> getInitialEntitySet() throws ClassNotFoundException {]