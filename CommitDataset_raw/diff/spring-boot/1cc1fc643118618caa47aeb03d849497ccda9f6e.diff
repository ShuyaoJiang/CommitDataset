[+++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(body.get("message")).isEqualTo("Hello Daniel");, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(body.get("message")).isEqualTo("Hello Daniel");, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/test/java/sample/actuator/noweb/SampleActuatorNoWebApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.endpoint).isNotNull();, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(body.get("message")).isEqualTo("Hello Daniel");, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/test/java/sample/actuator/noweb/SampleActuatorNoWebApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.endpoint).isNotNull();, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/sample/actuator/ui/SampleActuatorUiApplicationPortTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(body.get("message")).isEqualTo("Hello Daniel");, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/test/java/sample/actuator/noweb/SampleActuatorNoWebApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.endpoint).isNotNull();, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/sample/actuator/ui/SampleActuatorUiApplicationPortTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/sample/actuator/ui/SampleActuatorUiApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("<title>Hello");, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("body");, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);, +		assertThat(entity.getBody()).contains("<html>").contains("<body>"), +				.contains("Please contact the operator with the above information");, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(body.get("message")).isEqualTo("Hello Daniel");, +++ b/spring-boot-samples/spring-boot-sample-actuator-noweb/src/test/java/sample/actuator/noweb/SampleActuatorNoWebApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.endpoint).isNotNull();, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/sample/actuator/ui/SampleActuatorUiApplicationPortTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}");, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/sample/actuator/ui/SampleActuatorUiApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("<title>Hello");, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("body");, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);, +		assertThat(entity.getBody()).contains("<html>").contains("<body>"), +				.contains("Please contact the operator with the above information");, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/EndpointsPropertiesSampleActuatorApplicationTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);, +		assertThat(body.get("error")).isEqualTo("None");, +		assertThat(body.get("status")).isEqualTo(999);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("\"status\":\"UP\"");, +		assertThat(entity.getBody()).contains("\"hello\":\"world\"");, +++ b/spring-boot-samples/spring-boot-sample-activemq/src/test/java/sample/activemq/SampleActiveMqTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.outputCapture.toString().contains("Test message")).isTrue();, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/test/java/sample/actuator/log4j2/SampleActuatorApplicationTests.java]