[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +			if (isCrashReport && this.logger.isInfoEnabled(), +					&& !this.logger.isDebugEnabled()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +			if (isCrashReport && this.logger.isInfoEnabled(), +					&& !this.logger.isDebugEnabled()) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializerTests.java, +		setupLogging(true, true);, +	}, +	private void setupLogging(boolean debug, boolean info) {, +		given(this.log.isDebugEnabled()).willReturn(debug);, +		given(this.log.isInfoEnabled()).willReturn(info);, +	public void logsDebugOnError() {, +		assertThat(this.infoLog.size(), equalTo(0));, +	}, +, +	@Test, +	public void logsInfoOnErrorIfDebugDisabled() {, +		setupLogging(false, true);, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		this.initializer.initialize(context);, +		context.register(ErrorConfig.class);, +		try {, +			context.refresh();, +			fail("Did not error");, +		}, +		catch (Exception ex) {, +			this.initializer.onApplicationEvent(new SpringApplicationErrorEvent(, +					new SpringApplication(), context, new String[] {}, ex));, +		}, +, +		assertThat(this.debugLog.size(), equalTo(0));]