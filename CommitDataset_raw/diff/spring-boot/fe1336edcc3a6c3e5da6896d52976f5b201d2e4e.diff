[+++ b/docs/howto.md, +## Use Tomcat 8, +, +Tomcat 8 works with Spring Boot, but the default is to use Tomcat 7, +(so we can support Java 1.6 out of the box). You should only need to, +change the classpath to use Tomcat 8 for it to work. The, +[websocket sample](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-samples/spring-boot-sample-websocket/pom.xml), +shows you how to do that in Maven., +, +++ b/docs/howto.md, +## Use Tomcat 8, +, +Tomcat 8 works with Spring Boot, but the default is to use Tomcat 7, +(so we can support Java 1.6 out of the box). You should only need to, +change the classpath to use Tomcat 8 for it to work. The, +[websocket sample](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-samples/spring-boot-sample-websocket/pom.xml), +shows you how to do that in Maven., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import javax.sql.DataSource;, +, +import org.springframework.batch.core.configuration.ListableJobLocator;, +import org.springframework.batch.core.converter.JobParametersConverter;, +import org.springframework.batch.core.explore.JobExplorer;, +import org.springframework.batch.core.explore.support.JobExplorerFactoryBean;, +import org.springframework.batch.core.launch.JobOperator;, +import org.springframework.batch.core.launch.support.SimpleJobOperator;, +import org.springframework.batch.core.repository.JobRepository;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jdbc.core.JdbcOperations;, +@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class }), +	@Autowired(required = false), +	private JobParametersConverter jobParametersConverter;, +, +	@ConditionalOnMissingBean, +	@ConditionalOnMissingBean, +	@ConditionalOnMissingBean, +	@Bean, +	@ConditionalOnMissingBean, +	public JobExplorer jobExplorer(DataSource dataSource) throws Exception {, +		JobExplorerFactoryBean factory = new JobExplorerFactoryBean();, +		factory.setDataSource(dataSource);, +		factory.afterPropertiesSet();, +		return (JobExplorer) factory.getObject();, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public JobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher,, +			ListableJobLocator jobRegistry, JobRepository jobRepository) throws Exception {, +		SimpleJobOperator factory = new SimpleJobOperator();, +		factory.setJobExplorer(jobExplorer);, +		factory.setJobLauncher(jobLauncher);, +		factory.setJobRegistry(jobRegistry);, +		factory.setJobRepository(jobRepository);, +		if (this.jobParametersConverter != null) {, +			factory.setJobParametersConverter(this.jobParametersConverter);, +		}, +		return factory;, +	}, +, +++ b/docs/howto.md, +## Use Tomcat 8, +, +Tomcat 8 works with Spring Boot, but the default is to use Tomcat 7, +(so we can support Java 1.6 out of the box). You should only need to, +change the classpath to use Tomcat 8 for it to work. The, +[websocket sample](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-samples/spring-boot-sample-websocket/pom.xml), +shows you how to do that in Maven., +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import javax.sql.DataSource;, +, +import org.springframework.batch.core.configuration.ListableJobLocator;, +import org.springframework.batch.core.converter.JobParametersConverter;, +import org.springframework.batch.core.explore.JobExplorer;, +import org.springframework.batch.core.explore.support.JobExplorerFactoryBean;, +import org.springframework.batch.core.launch.JobOperator;, +import org.springframework.batch.core.launch.support.SimpleJobOperator;, +import org.springframework.batch.core.repository.JobRepository;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jdbc.core.JdbcOperations;, +@ConditionalOnClass({ JobLauncher.class, DataSource.class, JdbcOperations.class }), +	@Autowired(required = false), +	private JobParametersConverter jobParametersConverter;, +, +	@ConditionalOnMissingBean, +	@ConditionalOnMissingBean, +	@ConditionalOnMissingBean, +	@Bean, +	@ConditionalOnMissingBean, +	public JobExplorer jobExplorer(DataSource dataSource) throws Exception {, +		JobExplorerFactoryBean factory = new JobExplorerFactoryBean();, +		factory.setDataSource(dataSource);, +		factory.afterPropertiesSet();, +		return (JobExplorer) factory.getObject();, +	}, +, +	@Bean, +	@ConditionalOnMissingBean]