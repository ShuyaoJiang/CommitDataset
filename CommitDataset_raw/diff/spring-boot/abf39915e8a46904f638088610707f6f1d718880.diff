[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		return (context) -> assertThat(context).getBeans(HealthIndicator.class).hasSize(1), +				.hasValueSatisfying(, +						new Condition<>((indicator) -> indicator.getClass().equals(type),, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		return (context) -> assertThat(context).getBeans(HealthIndicator.class).hasSize(1), +				.hasValueSatisfying(, +						new Condition<>((indicator) -> indicator.getClass().equals(type),, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder(), +						.codecs((codecs) -> this.codecCustomizers, +								.forEach((customizer) -> customizer.customize(codecs))), +				.build());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		return (context) -> assertThat(context).getBeans(HealthIndicator.class).hasSize(1), +				.hasValueSatisfying(, +						new Condition<>((indicator) -> indicator.getClass().equals(type),, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder(), +						.codecs((codecs) -> this.codecCustomizers, +								.forEach((customizer) -> customizer.customize(codecs))), +				.build());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run(, +				(context) -> assertThat(context).doesNotHaveBean(CacheManager.class));, +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).containsOnly("custom1"));, +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).containsOnly("custom1"));, +				.run((context) -> assertThat(context), +						.doesNotHaveBean(CacheManager.class));, +				.withPropertyValues("spring.cache.type=foobar"), +				.run((context) -> assertThat(context).getFailure(), +						.isInstanceOf(BeanCreationException.class).hasMessageContaining(, +								"Failed to bind properties under 'spring.cache.type'"));, +				.withPropertyValues("spring.cache.type=simple"), +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).isEmpty());, +				.withPropertyValues("spring.cache.type=generic"), +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining("No cache manager could be auto-configured"), +						.hasMessageContaining("GENERIC"));, +				.withPropertyValues("spring.cache.type=jcache"), +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining("No cache manager could be auto-configured"), +						.hasMessageContaining("JCACHE"));, +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining(wrongCachingProviderClassName));, +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining(configLocation));, +				.run((context) -> assertThat(, +						getCacheManager(context, SpringEmbeddedCacheManager.class), +								.getCacheNames()).containsOnly("foo", "bar"));, +				.run((context) -> assertThat(, +						getCacheManager(context, JCacheCacheManager.class), +								.getCacheNames()).containsOnly("foo", "bar"));, +					.run((context) ->, +							.getCacheNames()).containsOnly("foo", "custom1"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +		return (context) -> assertThat(context).getBeans(HealthIndicator.class).hasSize(1), +				.hasValueSatisfying(, +						new Condition<>((indicator) -> indicator.getClass().equals(type),, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/WebClientCodecCustomizer.java, +				.exchangeStrategies(ExchangeStrategies.builder(), +						.codecs((codecs) -> this.codecCustomizers, +								.forEach((customizer) -> customizer.customize(codecs))), +				.build());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run(, +				(context) -> assertThat(context).doesNotHaveBean(CacheManager.class));, +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).containsOnly("custom1"));, +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).containsOnly("custom1"));, +				.run((context) -> assertThat(context), +						.doesNotHaveBean(CacheManager.class));, +				.withPropertyValues("spring.cache.type=foobar"), +				.run((context) -> assertThat(context).getFailure(), +						.isInstanceOf(BeanCreationException.class).hasMessageContaining(, +								"Failed to bind properties under 'spring.cache.type'"));, +				.withPropertyValues("spring.cache.type=simple"), +				.run((context) -> assertThat(, +						getCacheManager(context, ConcurrentMapCacheManager.class), +								.getCacheNames()).isEmpty());, +				.withPropertyValues("spring.cache.type=generic"), +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining("No cache manager could be auto-configured"), +						.hasMessageContaining("GENERIC"));, +				.withPropertyValues("spring.cache.type=jcache"), +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining("No cache manager could be auto-configured"), +						.hasMessageContaining("JCACHE"));, +				.run((context) -> assertThat(context).getFailure(), +						.hasMessageContaining(wrongCachingProviderClassName));, +				.run((context) -> assertThat(context).getFailure()]