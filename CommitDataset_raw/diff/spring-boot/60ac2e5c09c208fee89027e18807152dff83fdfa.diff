[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java, +		try (InputStream inputStream = this.jarFile.getInputStream(entry);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java, +		try (InputStream inputStream = this.jarFile.getInputStream(entry);, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java, +		try (InputStream inputStream = this.jarFile.getInputStream(entry);, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessData.java, + * Copyright 2012-2018 the original author or authors., +	InputStream getInputStream() throws IOException;, +	 * Reads all the data and returns it as a byte array., +	 * @return the data, +	 * @throws IOException if the data cannot be read, +	 */, +	byte[] read() throws IOException;, +, +	/**, +	 * Reads the {@code length} bytes of data starting at the given {@code offset}., +	 * @param offset the offset from which data should be read, +	 * @param length the number of bytes to be read, +	 * @return the data, +	 * @throws IOException if the data cannot be read, +	 */, +	byte[] read(long offset, long length) throws IOException;, +, +	/**, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java, +		try (InputStream inputStream = this.jarFile.getInputStream(entry);, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessData.java, + * Copyright 2012-2018 the original author or authors., +	InputStream getInputStream() throws IOException;, +	 * Reads all the data and returns it as a byte array., +	 * @return the data, +	 * @throws IOException if the data cannot be read, +	 */, +	byte[] read() throws IOException;, +, +	/**, +	 * Reads the {@code length} bytes of data starting at the given {@code offset}., +	 * @param offset the offset from which data should be read, +	 * @param length the number of bytes to be read, +	 * @return the data, +	 * @throws IOException if the data cannot be read, +	 */, +	byte[] read(long offset, long length) throws IOException;, +, +	/**, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessDataFile.java, +import java.io.FileNotFoundException;, + * @author Andy Wilkinson, +	private final RandomAccessFile randomAccessFile;, +		try {, +			this.randomAccessFile = new RandomAccessFile(file, "r");, +		}, +		catch (FileNotFoundException ex) {, +	 * @param randomAccessFile the random access file from which data is read, +	private RandomAccessDataFile(File file, RandomAccessFile randomAccessFile,, +			long offset, long length) {, +		this.randomAccessFile = randomAccessFile;, +	public InputStream getInputStream() throws IOException {, +		return new DataInputStream(this.randomAccessFile);, +		return new RandomAccessDataFile(this.file, this.randomAccessFile,, +				this.offset + offset, length);, +	}, +, +	@Override, +	public byte[] read() throws IOException {, +		return read(0, this.length);, +	}, +, +	@Override, +	public byte[] read(long offset, long length) throws IOException {, +		byte[] bytes = new byte[(int) length];, +		synchronized (this.randomAccessFile) {, +			this.randomAccessFile.seek(this.offset + offset);, +			this.randomAccessFile.read(bytes, 0, (int) length);, +		}, +		return bytes;, +, +		DataInputStream(RandomAccessFile file) throws IOException {, +			this.file = file;, +			synchronized (this.file) {, +				this.file.seek(RandomAccessDataFile.this.offset + this.position);, +					int rtn = this.file.read();, +					return (int) moveOn(this.file.read(b, off, cappedLen));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/archive/JarFileArchive.java, +		try (InputStream inputStream = this.jarFile.getInputStream(entry);, +++ /dev/null, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/data/RandomAccessData.java, + * Copyright 2012-2018 the original author or authors., +	InputStream getInputStream() throws IOException;, +	 * Reads all the data and returns it as a byte array., +	 * @return the data, +	 * @throws IOException if the data cannot be read, +	 */, +	byte[] read() throws IOException;, +, +	/**]