[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/RedisHealthIndicator.java, +import org.springframework.data.redis.connection.ClusterInfo;, +import org.springframework.data.redis.connection.RedisClusterConnection;, + * @author Richard Santana, +	private static final String VERSION = "version";, +	private static final String REDIS_VERSION = "redis_version";, +			if (connection instanceof RedisClusterConnection) {, +				redisClusterInfo(builder,, +						((RedisClusterConnection) connection).clusterGetClusterInfo());, +			}, +			else {, +				defaultRedisInfo(builder, VERSION, info.getProperty(REDIS_VERSION));, +			}, +	private void redisClusterInfo(Health.Builder builder, ClusterInfo clusterInfo) {, +		defaultRedisInfo(builder, "cluster_size", clusterInfo.getClusterSize());, +		defaultRedisInfo(builder, "slots_up", clusterInfo.getSlotsOk());, +		defaultRedisInfo(builder, "slots_fail", clusterInfo.getSlotsFail());, +	}, +, +	private void defaultRedisInfo(Health.Builder builder, String key, Object value) {, +		builder.up().withDetail(key, value);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/RedisHealthIndicator.java, +import org.springframework.data.redis.connection.ClusterInfo;, +import org.springframework.data.redis.connection.RedisClusterConnection;, + * @author Richard Santana, +	private static final String VERSION = "version";, +	private static final String REDIS_VERSION = "redis_version";, +			if (connection instanceof RedisClusterConnection) {, +				redisClusterInfo(builder,, +						((RedisClusterConnection) connection).clusterGetClusterInfo());, +			}, +			else {, +				defaultRedisInfo(builder, VERSION, info.getProperty(REDIS_VERSION));, +			}, +	private void redisClusterInfo(Health.Builder builder, ClusterInfo clusterInfo) {, +		defaultRedisInfo(builder, "cluster_size", clusterInfo.getClusterSize());, +		defaultRedisInfo(builder, "slots_up", clusterInfo.getSlotsOk());, +		defaultRedisInfo(builder, "slots_fail", clusterInfo.getSlotsFail());, +	}, +, +	private void defaultRedisInfo(Health.Builder builder, String key, Object value) {, +		builder.up().withDetail(key, value);, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/RedisHealthIndicatorTests.java, +import java.util.Arrays;, +import java.util.List;, +import org.mockito.Mockito;, +import org.springframework.data.redis.connection.ClusterInfo;, +import org.springframework.data.redis.connection.RedisClusterConnection;, +import org.springframework.data.redis.connection.RedisClusterNode;, + * @author Richard Santana, +	@Test, +	public void redisClusterIsUp() throws Exception {, +		Properties clusterProperties = new Properties();, +		clusterProperties.setProperty("cluster_size", "4");, +		clusterProperties.setProperty("cluster_slots_ok", "4");, +		clusterProperties.setProperty("cluster_slots_fail", "0");, +		List<RedisClusterNode> redisMasterNodes = Arrays.asList(, +				new RedisClusterNode("127.0.0.1", 7001),, +				new RedisClusterNode("127.0.0.2", 7001));, +		RedisClusterConnection redisConnection = mock(RedisClusterConnection.class);, +		given(redisConnection.clusterGetNodes()).willReturn(redisMasterNodes);, +		given(redisConnection.clusterGetClusterInfo()), +				.willReturn(new ClusterInfo(clusterProperties));, +		RedisConnectionFactory redisConnectionFactory = mock(, +				RedisConnectionFactory.class);, +		given(redisConnectionFactory.getConnection()).willReturn(redisConnection);, +		RedisHealthIndicator healthIndicator = new RedisHealthIndicator(, +				redisConnectionFactory);, +		Health health = healthIndicator.health();, +		assertThat(health.getStatus()).isEqualTo(Status.UP);, +		assertThat(health.getDetails().get("cluster_size")).isEqualTo(4L);, +		assertThat(health.getDetails().get("slots_up")).isEqualTo(4L);, +		assertThat(health.getDetails().get("slots_fail")).isEqualTo(0L);, +		verify(redisConnectionFactory, Mockito.atLeastOnce()).getConnection();, +	}, +]