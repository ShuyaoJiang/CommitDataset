[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact");, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo");, +		assertThat(buildInfo.get("foo")).isEqualTo("bar");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact");, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo");, +		assertThat(buildInfo.get("foo")).isEqualTo("bar");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# INFO CONTRIBUTORS ({sc-spring-boot-actuator}/autoconfigure/InfoContributorProperties.{sc-ext}[InfoContributorProperties]), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact");, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo");, +		assertThat(buildInfo.get("foo")).isEqualTo("bar");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# INFO CONTRIBUTORS ({sc-spring-boot-actuator}/autoconfigure/InfoContributorProperties.{sc-ext}[InfoContributorProperties]), +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +		int height = properties.getProperty("height", Integer.class, 0);, +		BufferedImage image = readImage(width, height);, +	private BufferedImage readImage(int width, int height) throws IOException {, +			return resizeImage(image, width, height);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact");, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo");, +		assertThat(buildInfo.get("foo")).isEqualTo("bar");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# INFO CONTRIBUTORS ({sc-spring-boot-actuator}/autoconfigure/InfoContributorProperties.{sc-ext}[InfoContributorProperties]), +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +		int height = properties.getProperty("height", Integer.class, 0);, +		BufferedImage image = readImage(width, height);, +	private BufferedImage readImage(int width, int height) throws IOException {, +			return resizeImage(image, width, height);, +++ b/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java, +	public void printBannerWhenHasMarginPropertyShouldPrintSizedMargin() throws Exception {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact");, +		Map<String, Object> buildInfo = (Map<String, Object>) build;, +		assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo");, +		assertThat(buildInfo.get("foo")).isEqualTo("bar");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# INFO CONTRIBUTORS ({sc-spring-boot-actuator}/autoconfigure/InfoContributorProperties.{sc-ext}[InfoContributorProperties]), +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +		int height = properties.getProperty("height", Integer.class, 0);, +		BufferedImage image = readImage(width, height);, +	private BufferedImage readImage(int width, int height) throws IOException {, +			return resizeImage(image, width, height);, +++ b/spring-boot/src/test/java/org/springframework/boot/ImageBannerTests.java, +	public void printBannerWhenHasMarginPropertyShouldPrintSizedMargin() throws Exception {, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +			return (resource == null ? new ClassPathResource("doesnotexist") : resource);]