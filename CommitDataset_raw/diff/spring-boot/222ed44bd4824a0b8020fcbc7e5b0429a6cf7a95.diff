[+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.EndpointExposure;, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.EndpointExposure;, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +import org.springframework.boot.actuate.endpoint.DefaultEnablement;, +import org.springframework.boot.actuate.endpoint.EndpointExposure;, +	 * @param defaultEnablement the {@link DefaultEnablement} of the endpoint, +			DefaultEnablement defaultEnablement) {, +		return getEndpointEnablement(endpointId, defaultEnablement, null);, +	 * @param defaultEnablement the {@link DefaultEnablement} of the endpoint, +			DefaultEnablement defaultEnablement, EndpointExposure exposure) {, +		if (defaultEnablement != DefaultEnablement.NEUTRAL) {, +			return getDefaultEndpointEnablement(endpointId,, +					(defaultEnablement == DefaultEnablement.ENABLED), exposure);, +		return getGlobalEndpointEnablement(endpointId, defaultEnablement, exposure);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure) {, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement, exposure);, +		String message = determineGlobalDefaultMessage(endpointId, enablement, exposure,, +				defaultEnablement);, +		return new EndpointEnablement(enablement, message);, +	}, +, +	private boolean determineGlobalDefaultEnablement(DefaultEnablement defaultEnablement,, +			EndpointExposure exposure) {, +		if (defaultEnablement == DefaultEnablement.NEUTRAL) {, +			return exposure == null || exposure.isEnabledByDefault();, +		}, +		return (defaultEnablement == DefaultEnablement.ENABLED);, +	}, +, +	private String determineGlobalDefaultMessage(String endpointId, boolean enablement,, +			EndpointExposure exposure, DefaultEnablement defaultEnablement) {, +		StringBuilder message = new StringBuilder();, +		message.append(String.format("endpoint '%s' ", endpointId));, +		if (exposure != null) {, +			message.append(String.format("(%s) ", exposure.name().toLowerCase()));, +		}, +		message.append(String.format("is %s ", (enablement ? "enabled" : "disabled")));, +		if (defaultEnablement == DefaultEnablement.NEUTRAL) {, +			if (exposure != null) {, +				message.append(String.format("(default for %s endpoints)",, +						exposure.name().toLowerCase()));, +			}, +			else {, +				message.append("(default)");, +			}, +		}, +		else {, +			message.append("by default");, +		}, +		return message.toString();, +, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.EndpointExposure;, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProvider.java, +import org.springframework.boot.actuate.endpoint.DefaultEnablement;, +import org.springframework.boot.actuate.endpoint.EndpointExposure;, +	 * @param defaultEnablement the {@link DefaultEnablement} of the endpoint, +			DefaultEnablement defaultEnablement) {, +		return getEndpointEnablement(endpointId, defaultEnablement, null);, +	 * @param defaultEnablement the {@link DefaultEnablement} of the endpoint, +			DefaultEnablement defaultEnablement, EndpointExposure exposure) {, +		if (defaultEnablement != DefaultEnablement.NEUTRAL) {, +			return getDefaultEndpointEnablement(endpointId,, +					(defaultEnablement == DefaultEnablement.ENABLED), exposure);, +		return getGlobalEndpointEnablement(endpointId, defaultEnablement, exposure);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure) {, +		boolean enablement = determineGlobalDefaultEnablement(defaultEnablement, exposure);, +		String message = determineGlobalDefaultMessage(endpointId, enablement, exposure,, +				defaultEnablement);, +		return new EndpointEnablement(enablement, message);, +	}, +, +	private boolean determineGlobalDefaultEnablement(DefaultEnablement defaultEnablement,, +			EndpointExposure exposure) {, +		if (defaultEnablement == DefaultEnablement.NEUTRAL) {, +			return exposure == null || exposure.isEnabledByDefault();, +		}, +		return (defaultEnablement == DefaultEnablement.ENABLED);, +	}, +, +	private String determineGlobalDefaultMessage(String endpointId, boolean enablement,, +			EndpointExposure exposure, DefaultEnablement defaultEnablement) {, +		StringBuilder message = new StringBuilder();, +		message.append(String.format("endpoint '%s' ", endpointId));, +		if (exposure != null) {, +			message.append(String.format("(%s) ", exposure.name().toLowerCase()));, +		}, +		message.append(String.format("is %s ", (enablement ? "enabled" : "disabled")));, +		if (defaultEnablement == DefaultEnablement.NEUTRAL) {, +			if (exposure != null) {, +				message.append(String.format("(default for %s endpoints)",, +						exposure.name().toLowerCase()));, +			}, +			else {, +				message.append("(default)");, +			}, +		}, +		else {]