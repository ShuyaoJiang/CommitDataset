[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +import org.flywaydb.core.Flyway;, + * Configuration properties for Flyway database migrations. These are only the properties, + * that Spring needs to validate and enable the migrations. If you want to control the, + * location or format of the scripts you can use the same prefix ("flyway") to inject, + * properties into the {@link Flyway} instance., +@ConfigurationProperties(prefix = "flyway", ignoreUnknownFields = true), +	private List<String> locations = Arrays.asList("db/migration");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +import org.flywaydb.core.Flyway;, + * Configuration properties for Flyway database migrations. These are only the properties, + * that Spring needs to validate and enable the migrations. If you want to control the, + * location or format of the scripts you can use the same prefix ("flyway") to inject, + * properties into the {@link Flyway} instance., +@ConfigurationProperties(prefix = "flyway", ignoreUnknownFields = true), +	private List<String> locations = Arrays.asList("db/migration");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		assertEquals("[classpath:db/migration]", Arrays.asList(flyway.getLocations()), +				"flyway.locations:classpath:db/changelog,classpath:db/migration");, +		assertEquals("[classpath:db/changelog, classpath:db/migration]",, +				Arrays.asList(flyway.getLocations()).toString());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +import org.flywaydb.core.Flyway;, + * Configuration properties for Flyway database migrations. These are only the properties, + * that Spring needs to validate and enable the migrations. If you want to control the, + * location or format of the scripts you can use the same prefix ("flyway") to inject, + * properties into the {@link Flyway} instance., +@ConfigurationProperties(prefix = "flyway", ignoreUnknownFields = true), +	private List<String> locations = Arrays.asList("db/migration");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		assertEquals("[classpath:db/migration]", Arrays.asList(flyway.getLocations()), +				"flyway.locations:classpath:db/changelog,classpath:db/migration");, +		assertEquals("[classpath:db/changelog, classpath:db/migration]",, +				Arrays.asList(flyway.getLocations()).toString());, +++ b/spring-boot-autoconfigure/src/test/resources/db/migration/V1__init.sql, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +import org.flywaydb.core.Flyway;, + * Configuration properties for Flyway database migrations. These are only the properties, + * that Spring needs to validate and enable the migrations. If you want to control the, + * location or format of the scripts you can use the same prefix ("flyway") to inject, + * properties into the {@link Flyway} instance., +@ConfigurationProperties(prefix = "flyway", ignoreUnknownFields = true), +	private List<String> locations = Arrays.asList("db/migration");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		assertEquals("[classpath:db/migration]", Arrays.asList(flyway.getLocations()), +				"flyway.locations:classpath:db/changelog,classpath:db/migration");, +		assertEquals("[classpath:db/changelog, classpath:db/migration]",, +				Arrays.asList(flyway.getLocations()).toString());, +++ b/spring-boot-autoconfigure/src/test/resources/db/migration/V1__init.sql, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +import org.flywaydb.core.Flyway;, + * Configuration properties for Flyway database migrations. These are only the properties, + * that Spring needs to validate and enable the migrations. If you want to control the, + * location or format of the scripts you can use the same prefix ("flyway") to inject, + * properties into the {@link Flyway} instance., +@ConfigurationProperties(prefix = "flyway", ignoreUnknownFields = true), +	private List<String> locations = Arrays.asList("db/migration");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		assertEquals("[classpath:db/migration]", Arrays.asList(flyway.getLocations()), +				"flyway.locations:classpath:db/changelog,classpath:db/migration");, +		assertEquals("[classpath:db/changelog, classpath:db/migration]",, +				Arrays.asList(flyway.getLocations()).toString());, +++ b/spring-boot-autoconfigure/src/test/resources/db/migration/V1__init.sql, +++ /dev/null, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +default they live in a folder `classpath:db/migration` but you can, +modify that using `flyway.locations` (a list). See the Flyway class from, +flyway-core for details of available settings like schemas etc. In, +addition Spring Boot provides a small set of properties in, +that can be used to disable the migrations, or switch off the location checking., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.context.properties.ConfigurationProperties;, +		@Bean(initMethod = "migrate"), +		@ConfigurationProperties(prefix = "flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java]