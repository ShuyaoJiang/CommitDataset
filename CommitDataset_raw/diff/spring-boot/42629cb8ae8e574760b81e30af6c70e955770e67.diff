[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;, +				RabbitProperties properties,, +				ObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {, +			map.from(connectionNameStrategy::getIfUnique).whenNonNull(), +					.to(factory::setConnectionNameStrategy);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;, +				RabbitProperties properties,, +				ObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {, +			map.from(connectionNameStrategy::getIfUnique).whenNonNull(), +					.to(factory::setConnectionNameStrategy);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import java.util.concurrent.atomic.AtomicInteger;, +import com.rabbitmq.client.Connection;, +import org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;, +import static org.mockito.ArgumentMatchers.anyString;, +import static org.mockito.ArgumentMatchers.eq;, +import static org.mockito.ArgumentMatchers.isNull;, +import static org.mockito.BDDMockito.given;, +	public void testConnectionFactoryWithCustomConnectionNameStrategy() {, +		this.contextRunner, +				.withUserConfiguration(ConnectionNameStrategyConfiguration.class), +				.run((context) -> {, +					CachingConnectionFactory connectionFactory = context, +							.getBean(CachingConnectionFactory.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(connectionFactory);, +					Address[] addresses = (Address[]) dfa.getPropertyValue("addresses");, +					assertThat(addresses).hasSize(1);, +					com.rabbitmq.client.ConnectionFactory rcf = mock(com.rabbitmq.client.ConnectionFactory.class);, +					given(rcf.newConnection(isNull(), eq(addresses), anyString())), +							.willReturn(mock(Connection.class));, +					dfa.setPropertyValue("rabbitConnectionFactory", rcf);, +					connectionFactory.createConnection();, +					verify(rcf).newConnection(isNull(), eq(addresses), eq("test#0"));, +					connectionFactory.resetConnection();, +					connectionFactory.createConnection();, +					verify(rcf).newConnection(isNull(), eq(addresses), eq("test#1"));, +				});, +	}, +, +	@Test, +	protected static class ConnectionNameStrategyConfiguration {, +, +		private final AtomicInteger counter = new AtomicInteger();, +, +		@Bean, +		public ConnectionNameStrategy myConnectionNameStrategy() {, +			return c -> "test#" + this.counter.getAndIncrement();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +import org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;, +				RabbitProperties properties,, +				ObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {, +			map.from(connectionNameStrategy::getIfUnique).whenNonNull(), +					.to(factory::setConnectionNameStrategy);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java, +import java.util.concurrent.atomic.AtomicInteger;, +import com.rabbitmq.client.Connection;, +import org.springframework.amqp.rabbit.connection.ConnectionNameStrategy;, +import static org.mockito.ArgumentMatchers.anyString;, +import static org.mockito.ArgumentMatchers.eq;, +import static org.mockito.ArgumentMatchers.isNull;, +import static org.mockito.BDDMockito.given;, +	public void testConnectionFactoryWithCustomConnectionNameStrategy() {, +		this.contextRunner, +				.withUserConfiguration(ConnectionNameStrategyConfiguration.class), +				.run((context) -> {, +					CachingConnectionFactory connectionFactory = context, +							.getBean(CachingConnectionFactory.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(connectionFactory);, +					Address[] addresses = (Address[]) dfa.getPropertyValue("addresses");, +					assertThat(addresses).hasSize(1);, +					com.rabbitmq.client.ConnectionFactory rcf = mock(com.rabbitmq.client.ConnectionFactory.class);, +					given(rcf.newConnection(isNull(), eq(addresses), anyString())), +							.willReturn(mock(Connection.class));, +					dfa.setPropertyValue("rabbitConnectionFactory", rcf);, +					connectionFactory.createConnection();, +					verify(rcf).newConnection(isNull(), eq(addresses), eq("test#0"));, +					connectionFactory.resetConnection();, +					connectionFactory.createConnection();, +					verify(rcf).newConnection(isNull(), eq(addresses), eq("test#1"));, +				});, +	}, +, +	@Test, +	protected static class ConnectionNameStrategyConfiguration {, +, +		private final AtomicInteger counter = new AtomicInteger();, +, +		@Bean, +		public ConnectionNameStrategy myConnectionNameStrategy() {, +			return c -> "test#" + this.counter.getAndIncrement();, +		}, +, +	}]