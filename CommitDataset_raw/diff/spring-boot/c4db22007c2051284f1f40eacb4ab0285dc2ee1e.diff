[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().as(Duration::toMillis), +				.to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().as(Duration::getSeconds), +				.as(Number::intValue).to(container::setMonitorInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().as(Duration::toMillis), +				.to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().as(Duration::getSeconds), +				.as(Number::intValue).to(container::setMonitorInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import java.time.temporal.ChronoUnit;, +import org.springframework.boot.context.properties.bind.convert.DefaultDurationUnit;, +		 * Prefix for the listener's consumer client.id property., +		 */, +		private String clientId;, +, +		/**, +		 * Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive., +		 */, +		private Float noPollThreshold;, +, +		/**, +		 * Time between publishing idle consumer events (no data received)., +		private Duration idleEventInterval;, +		 * Time between checks for non-responsive consumers. If a duration suffix is not, +		 * specified, seconds will be used., +		@DefaultDurationUnit(ChronoUnit.SECONDS), +		private Duration monitorInterval;, +		 * Whether to log the container configuration during initialization (INFO level)., +		public String getClientId() {, +			return this.clientId;, +		}, +, +		public void setClientId(String clientId) {, +			this.clientId = clientId;, +		}, +, +		public Float getNoPollThreshold() {, +			return this.noPollThreshold;, +		}, +, +		public void setNoPollThreshold(Float noPollThreshold) {, +			this.noPollThreshold = noPollThreshold;, +		}, +, +		public Duration getIdleEventInterval() {, +		public void setIdleEventInterval(Duration idleEventInterval) {, +		public Duration getMonitorInterval() {, +		public void setMonitorInterval(Duration monitorInterval) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +		map.from(properties::getClientId).whenNonNull().to(container::setClientId);, +		map.from(properties::getIdleEventInterval).whenNonNull().as(Duration::toMillis), +				.to(container::setIdleEventInterval);, +		map.from(properties::getMonitorInterval).whenNonNull().as(Duration::getSeconds), +				.as(Number::intValue).to(container::setMonitorInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import java.time.temporal.ChronoUnit;, +import org.springframework.boot.context.properties.bind.convert.DefaultDurationUnit;, +		 * Prefix for the listener's consumer client.id property., +		 */, +		private String clientId;, +, +		/**, +		 * Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive., +		 */, +		private Float noPollThreshold;, +, +		/**, +		 * Time between publishing idle consumer events (no data received)., +		private Duration idleEventInterval;, +		 * Time between checks for non-responsive consumers. If a duration suffix is not, +		 * specified, seconds will be used., +		@DefaultDurationUnit(ChronoUnit.SECONDS), +		private Duration monitorInterval;, +		 * Whether to log the container configuration during initialization (INFO level)., +		public String getClientId() {, +			return this.clientId;, +		}, +, +		public void setClientId(String clientId) {, +			this.clientId = clientId;, +		}, +, +		public Float getNoPollThreshold() {, +			return this.noPollThreshold;, +		}, +, +		public void setNoPollThreshold(Float noPollThreshold) {, +			this.noPollThreshold = noPollThreshold;, +		}, +, +		public Duration getIdleEventInterval() {, +		public void setIdleEventInterval(Duration idleEventInterval) {, +		public Duration getMonitorInterval() {, +		public void setMonitorInterval(Duration monitorInterval) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +						"spring.kafka.listener.client-id=client",]