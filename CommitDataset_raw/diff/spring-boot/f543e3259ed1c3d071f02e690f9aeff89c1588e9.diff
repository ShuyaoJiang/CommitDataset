[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java, +import org.springframework.boot.test.TestRestTemplate;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import static org.junit.Assert.assertEquals;, + * @author Rob Winch, +	// gh-3447, +	@Test, +	public void testHiddenHttpMethodFilterOrderedFirst(), +			throws Exception {, +		this.context = SpringApplication.run(DenyPostRequestConfig.class,, +				"--server.port=0");, +		int port = Integer.parseInt(this.context.getEnvironment().getProperty("local.server.port"));, +		TestRestTemplate rest = new TestRestTemplate();, +, +		// not overriding causes forbidden, +		MultiValueMap<String, String> form = new LinkedMultiValueMap<String, String>();, +, +		ResponseEntity<Object> result = rest.postForEntity("http://localhost:" + port + "/", form, Object.class);, +		assertEquals(HttpStatus.FORBIDDEN, result.getStatusCode());, +, +, +		// override method with GET, +		form = new LinkedMultiValueMap<String, String>();, +		form.add("_method", "GET");, +, +		result = rest.postForEntity("http://localhost:" + port + "/", form, Object.class);, +		assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());, +	}, +, +	@MinimalWebConfiguration, +	@Import(SecurityAutoConfiguration.class), +	protected static class DenyPostRequestConfig extends WebSecurityConfigurerAdapter {, +, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http, +				.authorizeRequests(), +					.antMatchers(HttpMethod.POST, "/**").denyAll();, +		}, +	}]