[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, +	/**, +	 * If X-Forwarded-* headers should be applied to the HttpRequest., +	 */, +	private boolean useForwardHeaders;, +, +	private final Jetty jetty = new Jetty();, +, +			getTomcat().customizeTomcat(this,, +					(TomcatEmbeddedServletContainerFactory) container);, +		if (container instanceof JettyEmbeddedServletContainerFactory) {, +			getJetty().customizeJetty(this,, +					(JettyEmbeddedServletContainerFactory) container);, +		}, +, +			getUndertow().customizeUndertow(this,, +	public boolean isUseForwardHeaders() {, +		return this.useForwardHeaders;, +	}, +, +	public void setUseForwardHeaders(boolean useForwardHeaders) {, +		this.useForwardHeaders = useForwardHeaders;, +	}, +, +	private Jetty getJetty() {, +		return this.jetty;, +	}, +, +		private String protocolHeader;, +		private String portHeader = "X-Forwarded-Port";, +		 * Name of the http header from which the remote ip is extracted.., +		private String remoteIpHeader;, +		void customizeTomcat(ServerProperties serverProperties,, +				TomcatEmbeddedServletContainerFactory factory) {, +			customizeRemoteIpValve(serverProperties, factory);, +		private void customizeRemoteIpValve(ServerProperties properties,, +				TomcatEmbeddedServletContainerFactory factory) {, +			String remoteIpHeader = getRemoteIpHeader();, +			// For back compatibility the valve is also enabled if protocol-header is set, +			if (StringUtils.hasText(protocolHeader), +					|| StringUtils.hasText(remoteIpHeader), +					|| properties.isUseForwardHeaders()) {, +				valve.setProtocolHeader(StringUtils.hasLength(protocolHeader) ? protocolHeader, +						: "X-Forwarded-Proto");, +				if (StringUtils.hasLength(remoteIpHeader)) {, +				}, +	private static class Jetty {, +, +		void customizeJetty(ServerProperties serverProperties,, +				JettyEmbeddedServletContainerFactory factory) {, +			factory.setUseForwardHeaders(serverProperties.isUseForwardHeaders());, +		}, +, +	}, +, +		void customizeUndertow(ServerProperties serverProperties,, +				UndertowEmbeddedServletContainerFactory factory) {, +			factory.setUseForwardHeaders(serverProperties.isUseForwardHeaders());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, +	/**, +	 * If X-Forwarded-* headers should be applied to the HttpRequest., +	 */, +	private boolean useForwardHeaders;, +, +	private final Jetty jetty = new Jetty();, +, +			getTomcat().customizeTomcat(this,, +					(TomcatEmbeddedServletContainerFactory) container);, +		if (container instanceof JettyEmbeddedServletContainerFactory) {, +			getJetty().customizeJetty(this,, +					(JettyEmbeddedServletContainerFactory) container);, +		}, +, +			getUndertow().customizeUndertow(this,, +	public boolean isUseForwardHeaders() {, +		return this.useForwardHeaders;, +	}, +, +	public void setUseForwardHeaders(boolean useForwardHeaders) {, +		this.useForwardHeaders = useForwardHeaders;, +	}, +, +	private Jetty getJetty() {, +		return this.jetty;, +	}, +, +		private String protocolHeader;, +		private String portHeader = "X-Forwarded-Port";, +		 * Name of the http header from which the remote ip is extracted.., +		private String remoteIpHeader;, +		void customizeTomcat(ServerProperties serverProperties,, +				TomcatEmbeddedServletContainerFactory factory) {, +			customizeRemoteIpValve(serverProperties, factory);, +		private void customizeRemoteIpValve(ServerProperties properties,, +				TomcatEmbeddedServletContainerFactory factory) {, +			String remoteIpHeader = getRemoteIpHeader();, +			// For back compatibility the valve is also enabled if protocol-header is set, +			if (StringUtils.hasText(protocolHeader)]