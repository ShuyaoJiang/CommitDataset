[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzer.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.diagnostics.analyzer;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.diagnostics.FailureAnalysis;, +import org.springframework.boot.diagnostics.analyzer.AbstractInjectionFailureAnalyzer;, +import org.springframework.context.annotation.Bean;, +import org.springframework.core.type.MethodMetadata;, +import org.springframework.core.type.classreading.CachingMetadataReaderFactory;, +import org.springframework.core.type.classreading.MetadataReader;, +import org.springframework.core.type.classreading.MetadataReaderFactory;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * An {@link AbstractInjectionFailureAnalyzer} that performs analysis of failures caused, + * by a {@link NoSuchBeanDefinitionException}., + *, + * @author Stephane Nicoll, + * @author Phillip Webb, + */, +class NoSuchBeanDefinitionFailureAnalyzer, +		extends AbstractInjectionFailureAnalyzer<NoSuchBeanDefinitionException>, +		implements BeanFactoryAware {, +, +	private ConfigurableListableBeanFactory beanFactory;, +, +	private MetadataReaderFactory metadataReaderFactory;, +, +	private ConditionEvaluationReport report;, +, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		Assert.isInstanceOf(ConfigurableListableBeanFactory.class, beanFactory);, +		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;, +		this.metadataReaderFactory = new CachingMetadataReaderFactory(, +				this.beanFactory.getBeanClassLoader());, +		// Get early as won't be accessible once context has failed to start, +		this.report = ConditionEvaluationReport.get(this.beanFactory);, +	}, +, +	@Override, +	protected FailureAnalysis analyze(Throwable rootFailure,, +			NoSuchBeanDefinitionException cause, String description) {, +		if (cause.getNumberOfBeansFound() != 0) {, +			return null;, +		}, +		List<AutoConfigurationResult> autoConfigurationResults = getAutoConfigurationResults(, +				cause);, +		StringBuilder message = new StringBuilder();, +		message.append(String.format("%s required %s that could not be found.%n",, +				description == null ? "A component" : description,, +				getBeanDescription(cause)));, +		if (!autoConfigurationResults.isEmpty()) {, +			for (AutoConfigurationResult provider : autoConfigurationResults) {, +				message.append(String.format("\t- %s%n", provider));, +			}, +		}, +		String action = String.format("Consider %s %s in your configuration.",, +				(!autoConfigurationResults.isEmpty(), +						? "revisiting the conditions above or defining" : "defining"),, +				getBeanDescription(cause));, +		return new FailureAnalysis(message.toString(), action, cause);, +	}, +, +	private String getBeanDescription(NoSuchBeanDefinitionException cause) {, +		if (cause.getBeanType() != null) {, +			return "a bean of type '" + cause.getBeanType().getName() + "'";, +		}]