[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.context.support.GenericApplicationContext;, +		SpringApplicationErrorHandler, ApplicationListener<ContextRefreshedEvent> {, +	private final Log logger = LogFactory.getLog(getClass());, +	private ConfigurableApplicationContext applicationContext;, +, +	private AutoConfigurationReport report;, +		this.applicationContext = applicationContext;, +		if (applicationContext instanceof GenericApplicationContext) {, +			// Get the report early in case the context fails to load, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		logAutoConfigurationReport(true);, +		if (this.report == null) {, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.context.support.GenericApplicationContext;, +		SpringApplicationErrorHandler, ApplicationListener<ContextRefreshedEvent> {, +	private final Log logger = LogFactory.getLog(getClass());, +	private ConfigurableApplicationContext applicationContext;, +, +	private AutoConfigurationReport report;, +		this.applicationContext = applicationContext;, +		if (applicationContext instanceof GenericApplicationContext) {, +			// Get the report early in case the context fails to load, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		logAutoConfigurationReport(true);, +		if (this.report == null) {, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializerTests.java, +import org.springframework.context.event.ContextRefreshedEvent;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;, +import static org.junit.Assert.assertNotNull;, +		this.initializer.onApplicationEvent(new ContextRefreshedEvent(context));, +		this.initializer.onApplicationEvent(new ContextRefreshedEvent(context));, +	@Test, +	public void canBeUsedInApplicationContext() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(Config.class);, +		new AutoConfigurationReportLoggingInitializer().initialize(context);, +		context.refresh();, +		assertNotNull(context.getBean(AutoConfigurationReport.class));, +	}, +, +	@Test, +	public void canBeUsedInNonGenericApplicationContext() throws Exception {, +		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();, +		context.setServletContext(new MockServletContext());, +		context.register(Config.class);, +		new AutoConfigurationReportLoggingInitializer().initialize(context);, +		context.refresh();, +		assertNotNull(context.getBean(AutoConfigurationReport.class));, +	}, +, +			if (AutoConfigurationReportLoggingInitializer.class.getName().equals(name)) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java, +import org.springframework.context.support.GenericApplicationContext;, +		SpringApplicationErrorHandler, ApplicationListener<ContextRefreshedEvent> {, +	private final Log logger = LogFactory.getLog(getClass());, +	private ConfigurableApplicationContext applicationContext;, +, +	private AutoConfigurationReport report;, +		this.applicationContext = applicationContext;, +		if (applicationContext instanceof GenericApplicationContext) {, +			// Get the report early in case the context fails to load, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		logAutoConfigurationReport(true);, +		if (this.report == null) {, +			this.report = AutoConfigurationReport.get(this.applicationContext, +					.getBeanFactory());, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializerTests.java, +import org.springframework.context.event.ContextRefreshedEvent;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;, +import static org.junit.Assert.assertNotNull;, +		this.initializer.onApplicationEvent(new ContextRefreshedEvent(context));, +		this.initializer.onApplicationEvent(new ContextRefreshedEvent(context));, +	@Test, +	public void canBeUsedInApplicationContext() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(Config.class);, +		new AutoConfigurationReportLoggingInitializer().initialize(context);, +		context.refresh();, +		assertNotNull(context.getBean(AutoConfigurationReport.class));, +	}, +, +	@Test, +	public void canBeUsedInNonGenericApplicationContext() throws Exception {, +		AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();]