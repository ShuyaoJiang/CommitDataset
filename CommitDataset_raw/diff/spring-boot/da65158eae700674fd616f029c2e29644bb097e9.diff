[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaProperties.java, +	private boolean enabled;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaProperties.java, +	private boolean enabled;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationIntegrationTests.java, +@TestPropertySource(properties = { "management.jolokia.enabled=true",, +		"management.security.enabled=false" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaProperties.java, +	private boolean enabled;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationIntegrationTests.java, +@TestPropertySource(properties = { "management.jolokia.enabled=true",, +		"management.security.enabled=false" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationTests.java, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true"), +				.run((context) -> {, +	public void jolokiaIsDisabledByDefault() {, +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.path=/lokia").run(, +				isDefinedOnPath("/application/lokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.context-path=/admin").run(, +				isDefinedOnPath("/admin/jolokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.config.debug=true").run((context) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaProperties.java, +	private boolean enabled;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationIntegrationTests.java, +@TestPropertySource(properties = { "management.jolokia.enabled=true",, +		"management.security.enabled=false" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationTests.java, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true"), +				.run((context) -> {, +	public void jolokiaIsDisabledByDefault() {, +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.path=/lokia").run(, +				isDefinedOnPath("/application/lokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.context-path=/admin").run(, +				isDefinedOnPath("/admin/jolokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.config.debug=true").run((context) -> {, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	management.jolokia.enabled=false # Enable Jolokia., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfiguration.java, +@ConditionalOnProperty(value = "management.jolokia.enabled", havingValue = "true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaProperties.java, +	private boolean enabled;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationIntegrationTests.java, +@TestPropertySource(properties = { "management.jolokia.enabled=true",, +		"management.security.enabled=false" }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/jolokia/JolokiaManagementContextConfigurationTests.java, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true"), +				.run((context) -> {, +	public void jolokiaIsDisabledByDefault() {, +		this.contextRunner.run((context) -> assertThat(context), +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.path=/lokia").run(, +				isDefinedOnPath("/application/lokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.context-path=/admin").run(, +				isDefinedOnPath("/admin/jolokia/*"));, +		this.contextRunner.withPropertyValues("management.jolokia.enabled=true",, +				"management.jolokia.config.debug=true").run((context) -> {, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	management.jolokia.enabled=false # Enable Jolokia., +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/main/resources/application.properties, +management.jolokia.enabled=true]