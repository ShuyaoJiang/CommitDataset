[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import java.nio.channels.SocketChannel;, +import com.mongodb.connection.netty.NettyStreamFactoryFactory;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +	public MongoReactiveAutoConfiguration(ObjectProvider<MongoClientSettings> settings) {, +	public MongoClient reactiveStreamsMongoClient(MongoProperties properties,, +			Environment environment,, +			ObjectProvider<List<MongoClientSettingsBuilderCustomizer>> builderCustomizers) {, +		ReactiveMongoClientFactory factory = new ReactiveMongoClientFactory(properties,, +				environment, builderCustomizers.getIfAvailable());, +		this.mongo = factory.createMongoClient(this.settings);, +	@Configuration, +	@ConditionalOnClass(SocketChannel.class), +	static class NettyDriverConfiguration {, +, +		@Bean, +		@Order(Ordered.HIGHEST_PRECEDENCE), +		public MongoClientSettingsBuilderCustomizer nettyDriverCustomizer(, +				ObjectProvider<MongoClientSettings> settings) {, +			return (builder) -> {, +				if (!isStreamFactoryFactoryDefined(settings.getIfAvailable())) {, +					builder.streamFactoryFactory(, +							NettyStreamFactoryFactory.builder().build());, +				}, +			};, +		}, +, +		private boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {, +			return settings != null && settings.getStreamFactoryFactory() != null;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import java.nio.channels.SocketChannel;, +import com.mongodb.connection.netty.NettyStreamFactoryFactory;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +	public MongoReactiveAutoConfiguration(ObjectProvider<MongoClientSettings> settings) {, +	public MongoClient reactiveStreamsMongoClient(MongoProperties properties,, +			Environment environment,, +			ObjectProvider<List<MongoClientSettingsBuilderCustomizer>> builderCustomizers) {, +		ReactiveMongoClientFactory factory = new ReactiveMongoClientFactory(properties,, +				environment, builderCustomizers.getIfAvailable());, +		this.mongo = factory.createMongoClient(this.settings);, +	@Configuration, +	@ConditionalOnClass(SocketChannel.class), +	static class NettyDriverConfiguration {, +, +		@Bean, +		@Order(Ordered.HIGHEST_PRECEDENCE), +		public MongoClientSettingsBuilderCustomizer nettyDriverCustomizer(, +				ObjectProvider<MongoClientSettings> settings) {, +			return (builder) -> {, +				if (!isStreamFactoryFactoryDefined(settings.getIfAvailable())) {, +					builder.streamFactoryFactory(, +							NettyStreamFactoryFactory.builder().build());, +				}, +			};, +		}, +, +		private boolean isStreamFactoryFactoryDefined(MongoClientSettings settings) {, +			return settings != null && settings.getStreamFactoryFactory() != null;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory;, +import com.mongodb.connection.netty.NettyStreamFactoryFactory;, +	public void nettyStreamFactoryFactoryIsConfiguredAutomatically() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(MongoClient.class);, +			assertThat(context.getBean(MongoClient.class).getSettings(), +					.getStreamFactoryFactory()), +					.isInstanceOf(NettyStreamFactoryFactory.class);, +		});, +	}, +, +	@Test, +			assertThat(client.getSettings().getStreamFactoryFactory()), +					.isEqualTo(SimpleCustomizerConfig.streamFactoryFactory);, +		private static final StreamFactoryFactory streamFactoryFactory =, +				new AsynchronousSocketChannelStreamFactoryFactory();, +, +					.applicationName("overridden-name"), +					.streamFactoryFactory(streamFactoryFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import java.nio.channels.SocketChannel;, +import com.mongodb.connection.netty.NettyStreamFactoryFactory;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +	public MongoReactiveAutoConfiguration(ObjectProvider<MongoClientSettings> settings) {, +	public MongoClient reactiveStreamsMongoClient(MongoProperties properties,, +			Environment environment,]