[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastJpaDependencyAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +					HibernateJpaAutoConfiguration.class,, +					HazelcastJpaDependencyAutoConfiguration.class)), +			.withPropertyValues("spring.datasource.generate-unique-name=true",, +					"spring.datasource.initialize=false");, +		this.contextRunner.withUserConfiguration(, +				HazelcastConfiguration.class).run((context) -> {, +			assertThat(postProcessors(context)), +			assertThat(entityManagerFactoryDependencies(context)).contains(, +					"hazelcastInstance");, +		});, +		this.contextRunner.withUserConfiguration(, +				HazelcastCustomNameConfiguration.class).run((context) -> {, +			assertThat(entityManagerFactoryDependencies(context)), +			assertThat(postProcessors(context)), +		});, +		this.contextRunner.run((context) -> {, +			assertThat(entityManagerFactoryDependencies(context)), +			assertThat(postProcessors(context)), +		});, +		new ApplicationContextRunner().withUserConfiguration(HazelcastConfiguration.class), +				.withConfiguration(AutoConfigurations.of(, +						HazelcastJpaDependencyAutoConfiguration.class)), +				.run((context) -> assertThat(postProcessors(context)).doesNotContainKey(, +						"hazelcastInstanceJpaDependencyPostProcessor"));, +	private Map<String, EntityManagerFactoryDependsOnPostProcessor> postProcessors(, +			AssertableApplicationContext context) {, +		return context.getBeansOfType(EntityManagerFactoryDependsOnPostProcessor.class);, +	private List<String> entityManagerFactoryDependencies(, +			AssertableApplicationContext context) {, +		String[] dependsOn = ((BeanDefinitionRegistry) context.getSourceApplicationContext()), +				.getBeanDefinition("entityManagerFactory").getDependsOn();]