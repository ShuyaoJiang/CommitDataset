[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} to integrate with an ActiveMQ, + * broker. Validates that the classpath contain the necessary classes before starting an, + * embedded broker., + * @since 1.1.0, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String brokerUrl = ActiveMQProperties.determineBrokerUrl(context, +					.getEnvironment());, +			String brokerType = this.embedded ? "Embedded" : "Network";, +			return brokerType + " ActiveMQ broker " + detected + " - brokerUrl '", +					+ brokerUrl + "'";, +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} to integrate with an ActiveMQ, + * broker. Validates that the classpath contain the necessary classes before starting an, + * embedded broker., + * @since 1.1.0, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String brokerUrl = ActiveMQProperties.determineBrokerUrl(context, +					.getEnvironment());, +			String brokerType = this.embedded ? "Embedded" : "Network";, +			return brokerType + " ActiveMQ broker " + detected + " - brokerUrl '", +					+ brokerUrl + "'";, +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQConnectionFactoryConfiguration.java, + * @since 1.1.0, +	private ActiveMQProperties properties;, +		return this.properties.createConnectionFactory();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} to integrate with an ActiveMQ, + * broker. Validates that the classpath contain the necessary classes before starting an, + * embedded broker., + * @since 1.1.0, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String brokerUrl = ActiveMQProperties.determineBrokerUrl(context, +					.getEnvironment());, +			String brokerType = this.embedded ? "Embedded" : "Network";, +			return brokerType + " ActiveMQ broker " + detected + " - brokerUrl '", +					+ brokerUrl + "'";, +, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQConnectionFactoryConfiguration.java, + * @since 1.1.0, +	private ActiveMQProperties properties;, +		return this.properties.createConnectionFactory();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/ActiveMQProperties.java, +import javax.jms.ConnectionFactory;, +, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.util.StringUtils;, +	private String brokerUrl;, +	private boolean pooled;, +		return this.brokerUrl;, +	 * Specify if the default broker url should be in memory. Ignored if an explicit, +	 * broker has been specified., +	/**, +	 * Return a new {@link ConnectionFactory} from these properties., +	 */, +	public ConnectionFactory createConnectionFactory() {, +		ConnectionFactory connectionFactory = createActiveMQConnectionFactory();, +		if (isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		}, +		return connectionFactory;, +	}, +, +	private ConnectionFactory createActiveMQConnectionFactory() {, +		String brokerUrl = determineBrokerUrl();, +		if (StringUtils.hasLength(this.user) && StringUtils.hasLength(this.password)) {, +			return new ActiveMQConnectionFactory(this.user, this.password, brokerUrl);, +		}, +		return new ActiveMQConnectionFactory(brokerUrl);, +	}, +, +	String determineBrokerUrl() {, +		return determineBrokerUrl(this.brokerUrl, this.inMemory);, +	}, +	 * Determine the broker url to use for the specified {@link Environment}. If no broker, +	 * url is specified through configuration, a default broker is provided, that is, +	 * {@value #DEFAULT_EMBEDDED_BROKER_URL} if the {@code inMemory} flag is {@code null}, +	 * or {@code true}, {@value #DEFAULT_NETWORK_BROKER_URL} otherwise., +	 * @param environment the environment to extract configuration from, +	 * @return the broker url to use, +	public static String determineBrokerUrl(Environment environment) {, +		PropertyResolver resolver = new RelaxedPropertyResolver(environment,, +				"spring.activemq.");, +		String brokerUrl = resolver.getProperty("brokerUrl");, +		Boolean inMemory = resolver.getProperty("inMemory", Boolean.class);, +		return determineBrokerUrl(brokerUrl, inMemory);]