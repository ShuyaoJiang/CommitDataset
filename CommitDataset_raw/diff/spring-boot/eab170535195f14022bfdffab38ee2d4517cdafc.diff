[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import java.util.Collections;, +import java.util.List;, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +import org.springframework.boot.autoconfigure.condition.ConditionMessage.Builder;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.context.properties.bind.Bindable;, +import org.springframework.boot.context.properties.bind.Binder;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(EmbeddedLdapAutoConfiguration.EmbeddedLdapCondition.class), +	/**, +	 * {@link SpringBootCondition} to determine when to apply embedded LDAP, +	 * auto-configuration., +	 */, +	static class EmbeddedLdapCondition extends SpringBootCondition {, +, +		private static final Bindable<List<String>> STRING_LIST = Bindable, +				.listOf(String.class);, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			Builder message = ConditionMessage.forCondition("Embedded LDAP");, +			Environment environment = context.getEnvironment();, +			if (environment != null) {, +				if (!Binder.get(environment), +						.bind("spring.ldap.embedded.base-dn", STRING_LIST), +						.orElseGet(Collections::emptyList).isEmpty()) {, +					return ConditionOutcome, +							.match(message.because("Found base-dn property"));, +				}, +			}, +			return ConditionOutcome.noMatch(message.because("No base-dn property found"));, +		}, +, +	}, +]