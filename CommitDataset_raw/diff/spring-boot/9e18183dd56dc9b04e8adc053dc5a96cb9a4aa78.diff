[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +import org.springframework.util.StringUtils;, +		private boolean defaultPassword = true;, +			if (password.startsWith("${") && password.endsWith("}"), +					|| !StringUtils.hasLength(password)) {, +				return;, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/properties/SecurityProperties.java, +import org.springframework.util.StringUtils;, +		private boolean defaultPassword = true;, +			if (password.startsWith("${") && password.endsWith("}"), +					|| !StringUtils.hasLength(password)) {, +				return;, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/SecurityPropertiesTests.java, +import static org.junit.Assert.assertTrue;, +	@Test, +	public void testDefaultPasswordAutogeneratedIfUnresolovedPlaceholder() {, +		SecurityProperties security = new SecurityProperties();, +		RelaxedDataBinder binder = new RelaxedDataBinder(security, "security");, +		binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.user.password", "${ADMIN_PASSWORD}")));, +		assertFalse(binder.getBindingResult().hasErrors());, +		assertTrue(security.getUser().isDefaultPassword());, +	}, +, +	@Test, +	public void testDefaultPasswordAutogeneratedIfEmpty() {, +		SecurityProperties security = new SecurityProperties();, +		RelaxedDataBinder binder = new RelaxedDataBinder(security, "security");, +		binder.bind(new MutablePropertyValues(Collections.singletonMap(, +				"security.user.password", "")));, +		assertFalse(binder.getBindingResult().hasErrors());, +		assertTrue(security.getUser().isDefaultPassword());, +	}, +]