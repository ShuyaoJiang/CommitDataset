[+++ b/spring-boot-cli-grape/src/main/java/org/springframework/boot/cli/compiler/AetherGrapeEngine.java, +		String grapeRootProperty = System.getProperty("grape.root");, +		File root;, +		if (grapeRootProperty != null && grapeRootProperty.trim().length() > 0) {, +			root = new File(grapeRootProperty);, +, +		}, +		else {, +			root = new File(System.getProperty("user.home"), ".m2");, +		}, +, +		LocalRepository localRepo = new LocalRepository(new File(root, "repository"));, +, +++ b/spring-boot-cli-grape/src/main/java/org/springframework/boot/cli/compiler/AetherGrapeEngine.java, +		String grapeRootProperty = System.getProperty("grape.root");, +		File root;, +		if (grapeRootProperty != null && grapeRootProperty.trim().length() > 0) {, +			root = new File(grapeRootProperty);, +, +		}, +		else {, +			root = new File(System.getProperty("user.home"), ".m2");, +		}, +, +		LocalRepository localRepo = new LocalRepository(new File(root, "repository"));, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +					"Accumulate the dependencies in a local folder (./repository)");, +++ b/spring-boot-cli-grape/src/main/java/org/springframework/boot/cli/compiler/AetherGrapeEngine.java, +		String grapeRootProperty = System.getProperty("grape.root");, +		File root;, +		if (grapeRootProperty != null && grapeRootProperty.trim().length() > 0) {, +			root = new File(grapeRootProperty);, +, +		}, +		else {, +			root = new File(System.getProperty("user.home"), ".m2");, +		}, +, +		LocalRepository localRepo = new LocalRepository(new File(root, "repository"));, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java, +					"Accumulate the dependencies in a local folder (./repository)");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/TestCommand.java, +		return ((TestOptionHandler) this.getHandler()).results;, +			TestGroovyCompilerConfiguration configuration = new TestGroovyCompilerConfiguration();, +			GroovyCompiler compiler = new GroovyCompiler(configuration);, +, +			Object[] sources = compiler.sources(fileOptions.getFilesArray());, +			sources = compiler.sources(files.toArray(new File[files.size()]));]