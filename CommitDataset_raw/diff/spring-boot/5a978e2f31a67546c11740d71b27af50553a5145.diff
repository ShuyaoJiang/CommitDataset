[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java, +import java.util.HashSet;, +import java.util.Hashtable;, +import java.util.Set;, +import java.util.concurrent.locks.ReentrantLock;, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.context.SmartLifecycle;, +import org.springframework.jmx.support.JmxUtils;, +public class EndpointMBeanExporter implements SmartLifecycle, ApplicationContextAware {, +	private Set<Endpoint<?>> registeredEndpoints = new HashSet<Endpoint<?>>();, +, +	private volatile boolean autoStartup = true;, +, +	private volatile int phase = 0;, +, +	private volatile boolean running = false;, +, +	private final ReentrantLock lifecycleLock = new ReentrantLock();, +, +	private ApplicationContext applicationContext;, +, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext), +			throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +	protected void doStart() {, +			MBeanExporter mbeanExporter = this.applicationContext, +					.getBean(MBeanExporter.class);, +			locateAndRegisterEndpoints(mbeanExporter);, +	protected void locateAndRegisterEndpoints(MBeanExporter mbeanExporter) {, +		Assert.notNull(mbeanExporter, "MBeanExporter should not be null");, +		Map<String, Endpoint> endpoints = this.applicationContext, +			if (!this.registeredEndpoints.contains(endpointEntry.getValue())) {, +				this.registeredEndpoints.add(endpointEntry.getValue());, +			}, +		// We have to be super careful to not create name clashes as multiple Boot, +		// applications can potentially run in the same VM or MBeanServer. Therefore, +		// append the object identity to the ObjectName., +		Hashtable<String, String> properties = new Hashtable<String, String>();, +		properties.put("bean", beanKey);, +		return JmxUtils.appendIdentityToObjectName(, +				ObjectNameManager.getInstance(this.domainName, properties), endpoint);, +	// SmartLifeCycle implementation, +, +	public final int getPhase() {, +		return this.phase;, +	}, +, +	public final boolean isAutoStartup() {, +		return this.autoStartup;, +	}, +, +	public final boolean isRunning() {, +		this.lifecycleLock.lock();, +		try {, +			return this.running;, +		}, +		finally {, +			this.lifecycleLock.unlock();, +		}, +	}, +, +	public final void start() {, +		this.lifecycleLock.lock();, +		try {, +			if (!this.running) {, +				this.doStart();, +				this.running = true;, +			}, +		}, +		finally {, +			this.lifecycleLock.unlock();, +		}, +	}, +, +	public final void stop() {, +		this.lifecycleLock.lock();, +		try {, +			if (this.running) {, +				this.running = false;, +			}, +		}, +		finally {, +			this.lifecycleLock.unlock();, +		}, +	}, +, +	public final void stop(Runnable callback) {, +		this.lifecycleLock.lock();, +		try {, +			this.stop();, +			callback.run();, +		}, +		finally {, +			this.lifecycleLock.unlock();, +		}]