[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java, +				.tags(this.tagProvider.getTags(urlTemplate.get(), request, response)), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java, +				.tags(this.tagProvider.getTags(urlTemplate.get(), request, response)), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java, + * Copyright 2012-2018 the original author or authors., +		return Tag.of("uri", ensureLeadingSlash(stripUri(request.getURI().toString())));, +		return Tag.of("uri", ensureLeadingSlash(stripUri(uri)));, +	private static String ensureLeadingSlash(String url) {, +		return (url == null || url.startsWith("/") ? url : "/" + url);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java, +				.tags(this.tagProvider.getTags(urlTemplate.get(), request, response)), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/RestTemplateExchangeTags.java, + * Copyright 2012-2018 the original author or authors., +		return Tag.of("uri", ensureLeadingSlash(stripUri(request.getURI().toString())));, +		return Tag.of("uri", ensureLeadingSlash(stripUri(uri)));, +	private static String ensureLeadingSlash(String url) {, +		return (url == null || url.startsWith("/") ? url : "/" + url);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/client/MetricsRestTemplateCustomizerTests.java, +import java.net.URI;, +import java.net.URISyntaxException;, +	@Test, +	public void interceptRestTemplateWithUri() throws URISyntaxException {, +		this.mockServer, +				.expect(MockRestRequestMatchers.requestTo("http://localhost/test/123")), +				.andExpect(MockRestRequestMatchers.method(HttpMethod.GET)), +				.andRespond(MockRestResponseCreators.withSuccess("OK",, +						MediaType.APPLICATION_JSON));, +		String result = this.restTemplate, +				.getForObject(new URI("http://localhost/test/123"), String.class);, +		assertThat(result).isEqualTo("OK");, +		this.registry.get("http.client.requests").tags("uri", "/test/123").timer();, +		this.mockServer.verify();, +	}, +]