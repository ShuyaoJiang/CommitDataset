[+++ b/spring-boot-autoconfigure/pom.xml, +		<dependency>, +			<groupId>org.jboss.narayana.jta</groupId>, +			<artifactId>jta</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jboss.narayana.jts</groupId>, +			<artifactId>narayana-jts-integration</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +		<dependency>, +			<groupId>org.jboss.narayana.jta</groupId>, +			<artifactId>jta</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jboss.narayana.jts</groupId>, +			<artifactId>narayana-jts-integration</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java, +		AtomikosJtaConfiguration.class, NarayanaJtaConfiguration.class }), +++ b/spring-boot-autoconfigure/pom.xml, +		<dependency>, +			<groupId>org.jboss.narayana.jta</groupId>, +			<artifactId>jta</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.jboss.narayana.jts</groupId>, +			<artifactId>narayana-jts-integration</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/JtaAutoConfiguration.java, +		AtomikosJtaConfiguration.class, NarayanaJtaConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.transaction.jta;, +, +import javax.jms.Message;, +import javax.transaction.TransactionManager;, +import javax.transaction.UserTransaction;, +, +import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.jta.XAConnectionFactoryWrapper;, +import org.springframework.boot.jta.XADataSourceWrapper;, +import org.springframework.boot.jta.narayana.NarayanaBeanFactoryPostProcessor;, +import org.springframework.boot.jta.narayana.NarayanaConfigurationBean;, +import org.springframework.boot.jta.narayana.NarayanaProperties;, +import org.springframework.boot.jta.narayana.NarayanaRecoveryManagerBean;, +import org.springframework.boot.jta.narayana.NarayanaXAConnectionFactoryWrapper;, +import org.springframework.boot.jta.narayana.NarayanaXADataSourceWrapper;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.DependsOn;, +import org.springframework.transaction.PlatformTransactionManager;, +import org.springframework.transaction.jta.JtaTransactionManager;, +, +/**, + * JTA Configuration for <a href="http://narayana.io/">Narayana</a>., + *, + * @author <a href="mailto:gytis@redhat.com">Gytis Trikleris</a>, + */, +@Configuration, +@ConditionalOnClass({ JtaTransactionManager.class, com.arjuna.ats.jta.UserTransaction.class }), +@ConditionalOnMissingBean(PlatformTransactionManager.class), +public class NarayanaJtaConfiguration {, +, +	@Autowired, +	private JtaProperties jtaProperties;, +, +	@Bean, +	@ConditionalOnMissingBean, +	public NarayanaProperties narayanaProperties() {, +		return new NarayanaProperties();, +	}, +, +	@Bean, +	@ConditionalOnMissingBean]