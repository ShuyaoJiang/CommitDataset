[+++ b/spring-boot-cli/pom.xml, +		<jline.version>2.11</jline.version>, +			<groupId>jline</groupId>, +			<artifactId>jline</artifactId>, +			<version>${jline.version}</version>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/pom.xml, +		<jline.version>2.11</jline.version>, +			<groupId>jline</groupId>, +			<artifactId>jline</artifactId>, +			<version>${jline.version}</version>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +		String commandName = "shell";, +		if (args.length > 0) {, +			commandName = args[0];, +		String[] commandArguments = args.length > 1 ? Arrays.copyOfRange(args, 1,, +				args.length) : new String[0];, +++ b/spring-boot-cli/pom.xml, +		<jline.version>2.11</jline.version>, +			<groupId>jline</groupId>, +			<artifactId>jline</artifactId>, +			<version>${jline.version}</version>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +		String commandName = "shell";, +		if (args.length > 0) {, +			commandName = args[0];, +		String[] commandArguments = args.length > 1 ? Arrays.copyOfRange(args, 1,, +				args.length) : new String[0];, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandCompleter.java, +package org.springframework.boot.cli.command;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.ServiceLoader;, +, +import jline.console.ConsoleReader;, +import jline.console.completer.ArgumentCompleter;, +import jline.console.completer.Completer;, +import jline.console.completer.NullCompleter;, +import jline.console.completer.StringsCompleter;, +, +import org.springframework.boot.cli.Command;, +import org.springframework.boot.cli.CommandFactory;, +import org.springframework.boot.cli.Log;, +import org.springframework.boot.cli.OptionHelp;, +import org.springframework.boot.cli.SpringCli;, +import org.springframework.util.StringUtils;, +, +/**, + * @author Jon Brisbin, + */, +public class CommandCompleter extends StringsCompleter {, +, +	private final Map<String, Completer> optionCompleters = new HashMap<String, Completer>();, +	private       List<Command>          commands         = new ArrayList<Command>();, +	private ConsoleReader console;, +	private String        lastBuffer;, +, +	public CommandCompleter(ConsoleReader console, SpringCli cli) {, +		this.console = console;, +, +		for(CommandFactory fac : ServiceLoader.load(CommandFactory.class, getClass().getClassLoader())) {, +			commands.addAll(fac.getCommands(cli));, +		}, +, +		List<String> names = new ArrayList<String>();, +		for(Command c : commands) {, +			names.add(c.getName());, +			List<String> opts = new ArrayList<String>();, +			for(OptionHelp optHelp : c.getOptionsHelp()) {, +				opts.addAll(optHelp.getOptions());, +			}, +			optionCompleters.put(c.getName(), new ArgumentCompleter(, +					new StringsCompleter(c.getName()),, +					new StringsCompleter(opts),, +					new NullCompleter(), +			));, +		}, +		getStrings().addAll(names);, +	}, +, +	@Override, +	public int complete(String buffer, int cursor, List<CharSequence> candidates) {, +		int i = super.complete(buffer, cursor, candidates);, +		if(buffer.indexOf(' ') < 1) {, +			return i;, +		}, +		String name = buffer.substring(0, buffer.indexOf(' '));, +		if("".equals(name.trim())) {, +			return i;, +		}, +		for(Command c : commands) {]