[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasDescendants = getContext().streamSources().anyMatch((source) -> source, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +				if (property != null && !hasDescendants) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.boot.context.properties.source.ConfigurationPropertyState;, +		boolean hasDescendants = getContext().streamSources().anyMatch((source) -> source, +				.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT);, +				if (property != null && !hasDescendants) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +	public void bindToMapWithCustomConverterAndChildElements() {, +		// gh-11892, +		DefaultConversionService conversionService = new DefaultConversionService();, +		conversionService.addConverter(new MapConverter());, +		Binder binder = new Binder(this.sources, null, conversionService);, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo", "boom");, +		source.put("foo.a", "a");, +		source.put("foo.b", "b");, +		this.sources.add(source);, +		Map<String, String> map = binder.bind("foo", STRING_STRING_MAP).get();, +		assertThat(map.get("a")).isEqualTo("a");, +		assertThat(map.get("b")).isEqualTo("b");, +	}, +, +	@Test]