[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/reacting.adoc, +8. Configures any `KotlinCompile` tasks to use the `-java-parameters` compiler argument., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/reacting.adoc, +8. Configures any `KotlinCompile` tasks to use the `-java-parameters` compiler argument., +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/KotlinPluginAction.java, +import org.jetbrains.kotlin.gradle.tasks.KotlinCompile;, +		enableJavaParametersOption(project);, +	}, +, +	private void enableJavaParametersOption(Project project) {, +		project.getTasks().withType(KotlinCompile.class, (compile) -> {, +			compile.getKotlinOptions().setJavaParameters(true);, +		});, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/reacting.adoc, +8. Configures any `KotlinCompile` tasks to use the `-java-parameters` compiler argument., +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/KotlinPluginAction.java, +import org.jetbrains.kotlin.gradle.tasks.KotlinCompile;, +		enableJavaParametersOption(project);, +	}, +, +	private void enableJavaParametersOption(Project project) {, +		project.getTasks().withType(KotlinCompile.class, (compile) -> {, +			compile.getKotlinOptions().setJavaParameters(true);, +		});, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java, +	@Test, +	public void kotlinCompileTasksUseJavaParametersFlagByDefault() {, +		assertThat(this.gradleBuild.build("kotlinCompileTasksJavaParameters").getOutput()), +				.contains("compileKotlin java parameters: true"), +				.contains("compileTestKotlin java parameters: true");, +	}, +, +	@Test, +	public void kotlinCompileTasksCanOverrideDefaultJavaParametersFlag() {, +		assertThat(this.gradleBuild.build("kotlinCompileTasksJavaParameters").getOutput()), +				.contains("compileKotlin java parameters: false"), +				.contains("compileTestKotlin java parameters: false");, +	}, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: To allow the input to be mapped to the operation method's parameters, java code, +implementing an endpoint should be compiled with `-parameters`, and kotlin code should, +be compiled with `-java-parameters`. This will happen automatically if you are using, +Spring Boot's Gradle plugin or if you are using Maven and `spring-boot-starter-parent`., +++ b/spring-boot-project/spring-boot-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-starters/spring-boot-starter-parent/pom.xml, +						<javaParameters>true</javaParameters>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/asciidoc/reacting.adoc, +8. Configures any `KotlinCompile` tasks to use the `-java-parameters` compiler argument., +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/KotlinPluginAction.java, +import org.jetbrains.kotlin.gradle.tasks.KotlinCompile;, +		enableJavaParametersOption(project);]