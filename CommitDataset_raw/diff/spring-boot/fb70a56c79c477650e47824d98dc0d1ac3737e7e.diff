[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +	String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +	String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +	private static final String[] NO_IMPORTS = {};, +, +		if (!isEnabled(metadata)) {, +			return NO_IMPORTS;, +		}, +	protected boolean isEnabled(AnnotationMetadata metadata) {, +		if (getClass().equals(EnableAutoConfigurationImportSelector.class)) {, +			return this.environment.getProperty(, +					EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class,, +					true);, +		}, +		return true;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +	String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +	private static final String[] NO_IMPORTS = {};, +, +		if (!isEnabled(metadata)) {, +			return NO_IMPORTS;, +		}, +	protected boolean isEnabled(AnnotationMetadata metadata) {, +		if (getClass().equals(EnableAutoConfigurationImportSelector.class)) {, +			return this.environment.getProperty(, +					EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class,, +					true);, +		}, +		return true;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +	@Test, +	public void propertyOverrideSetToTrue() throws Exception {, +		configureExclusions(new String[0], new String[0], new String[0]);, +		this.environment.setProperty(EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, "true");, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports).isNotEmpty();, +	}, +, +	@Test, +	public void propertyOverrideSetToFalse() throws Exception {, +		configureExclusions(new String[0], new String[0], new String[0]);, +		this.environment.setProperty(EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, "false");, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports).isEmpty();, +	}, +, +		String annotationName = EnableAutoConfiguration.class.getName();, +		given(this.annotationMetadata.isAnnotated(annotationName)).willReturn(true);, +		given(this.annotationMetadata.getAnnotationAttributes(annotationName, true))]