[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsAutoConfiguration.java, +import org.springframework.ws.config.annotation.EnableWs;, + * @author Stephane Nicoll, +	private final WsProperties properties;, +		WsProperties.Servlet servletProperties = this.properties.getServlet();, +		registration.setLoadOnStartup(servletProperties.getLoadOnStartup());, +		for (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {, +	@EnableWs, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsAutoConfiguration.java, +import org.springframework.ws.config.annotation.EnableWs;, + * @author Stephane Nicoll, +	private final WsProperties properties;, +		WsProperties.Servlet servletProperties = this.properties.getServlet();, +		registration.setLoadOnStartup(servletProperties.getLoadOnStartup());, +		for (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {, +	@EnableWs, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsProperties.java, + * @author Stephane Nicoll, +	public Servlet getServlet() {, +		return this.servlet;, +	}, +, +, +	public static class Servlet {, +, +		/**, +		 * Servlet init parameters to pass to Spring Web Services., +		 */, +		private Map<String, String> init = new HashMap<String, String>();, +, +		/**, +		 * Load on startup priority of the Spring Web Services servlet., +		 */, +		private int loadOnStartup = -1;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsAutoConfiguration.java, +import org.springframework.ws.config.annotation.EnableWs;, + * @author Stephane Nicoll, +	private final WsProperties properties;, +		WsProperties.Servlet servletProperties = this.properties.getServlet();, +		registration.setLoadOnStartup(servletProperties.getLoadOnStartup());, +		for (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {, +	@EnableWs, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsProperties.java, + * @author Stephane Nicoll, +	public Servlet getServlet() {, +		return this.servlet;, +	}, +, +, +	public static class Servlet {, +, +		/**, +		 * Servlet init parameters to pass to Spring Web Services., +		 */, +		private Map<String, String> init = new HashMap<String, String>();, +, +		/**, +		 * Load on startup priority of the Spring Web Services servlet., +		 */, +		private int loadOnStartup = -1;, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ws/WsAutoConfigurationTests.java, + * @author Stephane Nicoll, +	private AnnotationConfigWebApplicationContext context;, +		load(WsAutoConfiguration.class);, +		load(WsAutoConfiguration.class, "spring.ws.path=invalid");, +		load(WsAutoConfiguration.class, "spring.ws.path=/valid/");, +		load(WsAutoConfiguration.class, "spring.ws.path=/valid");, +		load(WsAutoConfiguration.class, "spring.ws.servlet.load-on-startup=1");, +		load(WsAutoConfiguration.class, "spring.ws.servlet.init.key1=value1",, +				"spring.ws.servlet.init.key2=value2");, +	private void load(Class<?> config, String... environment) {, +		AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();, +		ctx.setServletContext(new MockServletContext());, +		EnvironmentTestUtils.addEnvironment(ctx, environment);, +		ctx.register(config);, +		ctx.refresh();, +		this.context = ctx;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsAutoConfiguration.java, +import org.springframework.ws.config.annotation.EnableWs;, + * @author Stephane Nicoll, +	private final WsProperties properties;, +		WsProperties.Servlet servletProperties = this.properties.getServlet();, +		registration.setLoadOnStartup(servletProperties.getLoadOnStartup());, +		for (Map.Entry<String, String> entry : servletProperties.getInit().entrySet()) {, +	@EnableWs, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ws/WsProperties.java, + * @author Stephane Nicoll, +	public Servlet getServlet() {, +		return this.servlet;, +	}, +, +, +	public static class Servlet {, +, +		/**, +		 * Servlet init parameters to pass to Spring Web Services., +		 */, +		private Map<String, String> init = new HashMap<String, String>();]