[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +, +	public Log4J2LoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		super(classLoader, fileOutput, consoleOutput);, +	}, +	, +	@Override, +	protected String[] getLogFileName(boolean fileOutput, boolean consoleOutput) {, +		if (fileOutput && consoleOutput) {, +			return new String[] { "log4j2-file-console.json", "log4j2-file-console.jsn", "log4j2-file-console.xml" };, +		}, +		else if (fileOutput) {, +			return new String[] { "log4j2-file.json", "log4j2-file.jsn", "log4j2-file.xml" };, +		}, +		else if (consoleOutput) {, +			return new String[] { "log4j2-console.json", "log4j2-console.jsn", "log4j2-console.xml" };, +		}, +		else {, +			return new String[] { "log4j2.json", "log4j2.jsn", "log4j2.xml" };, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +, +	public Log4J2LoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		super(classLoader, fileOutput, consoleOutput);, +	}, +	, +	@Override, +	protected String[] getLogFileName(boolean fileOutput, boolean consoleOutput) {, +		if (fileOutput && consoleOutput) {, +			return new String[] { "log4j2-file-console.json", "log4j2-file-console.jsn", "log4j2-file-console.xml" };, +		}, +		else if (fileOutput) {, +			return new String[] { "log4j2-file.json", "log4j2-file.jsn", "log4j2-file.xml" };, +		}, +		else if (consoleOutput) {, +			return new String[] { "log4j2-console.json", "log4j2-console.jsn", "log4j2-console.xml" };, +		}, +		else {, +			return new String[] { "log4j2.json", "log4j2.jsn", "log4j2.xml" };, +		}, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/basic-log4j2.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<Configuration status="WARN">, +    <Properties>, +        <Property name="PID">????</Property>, +        <Property name="LOG_PATTERN">[%d{yyyy-MM-dd HH:mm:ss.SSS}] boot%X{context} - ${sys:PID} %5p [%t] --- %c{1}: %m%n</Property>, +    </Properties>, +    <Appenders>, +        <Console name="Console" target="SYSTEM_OUT" follow="true">, +            <PatternLayout pattern="${LOG_PATTERN}"/>, +        </Console>, +    </Appenders>, +    <Loggers>, +        <Logger name="org.hibernate.validator.internal.util.Version" level="warn" />, +        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />, +        <Logger name="org.crsh.plugin" level="WARN" />, +        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />, +        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />, +        <Logger name="org.apache.catalina.util.LifecycleBase" level="error" />, +        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />, +, +        <Root level="info">, +            <AppenderRef ref="Console"/>, +        </Root>, +    </Loggers>, +</Configuration>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +, +	public Log4J2LoggingSystem(ClassLoader classLoader, boolean fileOutput, boolean consoleOutput) {, +		super(classLoader, fileOutput, consoleOutput);, +	}, +	, +	@Override, +	protected String[] getLogFileName(boolean fileOutput, boolean consoleOutput) {, +		if (fileOutput && consoleOutput) {, +			return new String[] { "log4j2-file-console.json", "log4j2-file-console.jsn", "log4j2-file-console.xml" };, +		}, +		else if (fileOutput) {, +			return new String[] { "log4j2-file.json", "log4j2-file.jsn", "log4j2-file.xml" };, +		}, +		else if (consoleOutput) {, +			return new String[] { "log4j2-console.json", "log4j2-console.jsn", "log4j2-console.xml" };, +		}, +		else {, +			return new String[] { "log4j2.json", "log4j2.jsn", "log4j2.xml" };, +		}, +++ b/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/basic-log4j2.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<Configuration status="WARN">, +    <Properties>, +        <Property name="PID">????</Property>, +        <Property name="LOG_PATTERN">[%d{yyyy-MM-dd HH:mm:ss.SSS}] boot%X{context} - ${sys:PID} %5p [%t] --- %c{1}: %m%n</Property>, +    </Properties>, +    <Appenders>, +        <Console name="Console" target="SYSTEM_OUT" follow="true">, +            <PatternLayout pattern="${LOG_PATTERN}"/>, +        </Console>, +    </Appenders>, +    <Loggers>, +        <Logger name="org.hibernate.validator.internal.util.Version" level="warn" />]