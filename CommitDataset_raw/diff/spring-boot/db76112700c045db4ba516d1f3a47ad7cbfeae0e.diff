[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/main/java/sample/groovytemplates/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/main/java/sample/groovytemplates/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/main/java/sample/groovytemplates/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-tools/spring-boot-maven-plugin/src/site/apt/examples/exclude-dependency.apt.vm, +  dependencies that are defined in the project. A Spring Boot project should consider, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/main/java/sample/groovytemplates/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-tools/spring-boot-maven-plugin/src/site/apt/examples/exclude-dependency.apt.vm, +  dependencies that are defined in the project. A Spring Boot project should consider, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java, +	 * Returns an analysis of the given {@code rootFailure}, or {@code null} if no analysis, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, +	 * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, +		 * Reset the connection when a "JMSException" occurs., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.context.getBean(JdbcOperations.class), +				.queryForList("select * from SPRING_SESSION");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING SESSION ({sc-spring-boot-autoconfigure}/session/SessionProperties.{sc-ext}[SessionProperties], {sc-spring-boot-autoconfigure}/session/JdbcSessionProperties.{sc-ext}[JdbcSessionProperties], {sc-spring-boot-autoconfigure}/session/RedisSessionProperties.{sc-ext}[RedisSessionProperties]), +	spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a "JMSException" occurs., +++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/main/java/sample/groovytemplates/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/Message.java, +	@NotEmpty(message = "Text is required."), +++ b/spring-boot-tools/spring-boot-maven-plugin/src/site/apt/examples/exclude-dependency.apt.vm, +  dependencies that are defined in the project. A Spring Boot project should consider, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/AbstractFailureAnalyzer.java]