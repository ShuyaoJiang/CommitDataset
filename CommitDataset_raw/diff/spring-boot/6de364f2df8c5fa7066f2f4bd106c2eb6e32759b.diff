[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryConfiguration;, +@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,, +	@Configuration, +	@ConditionalOnMissingBean(SessionRepository.class), +	@Import(SessionConfigurationImportSelector.class), +	static class SessionRepositoryConfiguration {, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java, +import org.springframework.boot.autoconfigure.session.SessionAutoConfiguration.SessionRepositoryConfiguration;, +@Import({ SessionRepositoryConfiguration.class, SessionRepositoryValidator.class,, +	@Configuration, +	@ConditionalOnMissingBean(SessionRepository.class), +	@Import(SessionConfigurationImportSelector.class), +	static class SessionRepositoryConfiguration {, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java, +import org.springframework.session.config.annotation.web.http.EnableSpringHttpSession;, +	@Test, +	public void filterOrderCanBeCustomizedWithCustomStore() {, +		this.contextRunner.withUserConfiguration(SessionRepositoryConfiguration.class), +				.withPropertyValues("spring.session.servlet.filter-order=123"), +				.run((context) -> {, +					FilterRegistrationBean<?> registration = context, +							.getBean(FilterRegistrationBean.class);, +					assertThat(registration.getOrder()).isEqualTo(123);, +				});, +	}, +, +	@EnableSpringHttpSession]