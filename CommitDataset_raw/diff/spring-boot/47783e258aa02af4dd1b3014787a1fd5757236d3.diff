[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java, +	public void testRedisUrlConfiguration() throws Exception {, +		load("spring.redis.host:foo",, +				"spring.redis.url:redis://user:password@example:33");, +		JedisConnectionFactory cf = this.context.getBean(JedisConnectionFactory.class);, +		assertThat(cf.getHostName()).isEqualTo("example");, +		assertThat(cf.getPort()).isEqualTo(33);, +		assertThat(cf.getPassword()).isEqualTo("password");, +		assertThat(cf.isUseSsl()).isFalse();, +	}, +, +	@Test, +				"spring.redis.port:1000", "spring.redis.ssl:false",, +				"spring.redis.url:rediss://user:password@example:33");, +		load("spring.redis.host:foo", "spring.redis.jedis.pool.min-idle:1",, +				"spring.redis.jedis.pool.max-idle:4",, +				"spring.redis.jedis.pool.max-active:16",, +				"spring.redis.jedis.pool.max-wait:2000");, +		assertThat(cf.getPoolConfig().getMinIdle()).isEqualTo(1);, +		assertThat(cf.getPoolConfig().getMaxIdle()).isEqualTo(4);, +		assertThat(cf.getPoolConfig().getMaxTotal()).isEqualTo(16);, +		assertThat(cf.getPoolConfig().getMaxWaitMillis()), +				.isEqualTo(2000);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java, +	public void testRedisUrlConfiguration() throws Exception {, +		load("spring.redis.host:foo",, +				"spring.redis.url:redis://user:password@example:33");, +		JedisConnectionFactory cf = this.context.getBean(JedisConnectionFactory.class);, +		assertThat(cf.getHostName()).isEqualTo("example");, +		assertThat(cf.getPort()).isEqualTo(33);, +		assertThat(cf.getPassword()).isEqualTo("password");, +		assertThat(cf.isUseSsl()).isFalse();, +	}, +, +	@Test, +				"spring.redis.port:1000", "spring.redis.ssl:false",, +				"spring.redis.url:rediss://user:password@example:33");, +		load("spring.redis.host:foo", "spring.redis.jedis.pool.min-idle:1",, +				"spring.redis.jedis.pool.max-idle:4",, +				"spring.redis.jedis.pool.max-active:16",, +				"spring.redis.jedis.pool.max-wait:2000");, +		assertThat(cf.getPoolConfig().getMinIdle()).isEqualTo(1);, +		assertThat(cf.getPoolConfig().getMaxIdle()).isEqualTo(4);, +		assertThat(cf.getPoolConfig().getMaxTotal()).isEqualTo(16);, +		assertThat(cf.getPoolConfig().getMaxWaitMillis()), +				.isEqualTo(2000);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +	public void testRedisUrlConfiguration() throws Exception {, +		load("spring.redis.host:foo",, +				"spring.redis.url:redis://user:password@example:33");, +		LettuceConnectionFactory cf = this.context.getBean(LettuceConnectionFactory.class);, +		assertThat(cf.getHostName()).isEqualTo("example");, +		assertThat(cf.getPort()).isEqualTo(33);, +		assertThat(cf.getPassword()).isEqualTo("password");, +		assertThat(cf.isUseSsl()).isFalse();, +	}, +, +	@Test, +				"spring.redis.port:1000", "spring.redis.ssl:false",, +				"spring.redis.url:rediss://user:password@example:33");, +		load("spring.redis.host:foo", "spring.redis.lettuce.pool.min-idle:1",, +				"spring.redis.lettuce.pool.max-idle:4",, +				"spring.redis.lettuce.pool.max-active:16",, +				"spring.redis.lettuce.pool.max-wait:2000");, +		assertThat(getDefaultLettucePool(cf).getPoolConfig().getMinIdle()).isEqualTo(1);, +		assertThat(getDefaultLettucePool(cf).getPoolConfig().getMaxIdle()).isEqualTo(4);, +		assertThat(getDefaultLettucePool(cf).getPoolConfig().getMaxTotal()).isEqualTo(16);, +		assertThat(getDefaultLettucePool(cf).getPoolConfig().getMaxWaitMillis()), +				.isEqualTo(2000);]