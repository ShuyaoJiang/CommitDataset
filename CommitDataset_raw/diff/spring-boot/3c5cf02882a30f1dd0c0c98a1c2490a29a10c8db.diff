[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +import java.util.ArrayList;, +import java.util.Iterator;, +	private final HttpClientOption[] httpClientOptions;, +, +		this.httpClientOptions = httpClientOptions;, +	 * Creates a new {@code TestRestTemplate} with the same configuration as this one,, +	 * except that it will send basic authorization headers using the given, +	 * {@code username} and {@code password}., +	 * @param username the username, +	 * @param password the password, +	 * @return the new template, +	 * @since 1.4.1, +	 */, +	public TestRestTemplate withBasicAuth(String username, String password) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setErrorHandler(getRestTemplate().getErrorHandler());, +		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters());, +		restTemplate.setInterceptors(, +				removeBasicAuthInterceptorIfPresent(getRestTemplate().getInterceptors()));, +		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory());, +		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler());, +		return new TestRestTemplate(restTemplate, username, password,, +				this.httpClientOptions);, +	}, +, +	private List<ClientHttpRequestInterceptor> removeBasicAuthInterceptorIfPresent(, +			List<ClientHttpRequestInterceptor> interceptors) {, +		List<ClientHttpRequestInterceptor> updatedInterceptors = new ArrayList<ClientHttpRequestInterceptor>(, +				interceptors);, +		Iterator<ClientHttpRequestInterceptor> iterator = updatedInterceptors.iterator();, +		while (iterator.hasNext()) {, +			if (iterator.next() instanceof BasicAuthorizationInterceptor) {, +				iterator.remove();, +			}, +		}, +		return interceptors;, +	}, +, +	/**, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +import java.util.ArrayList;, +import java.util.Iterator;, +	private final HttpClientOption[] httpClientOptions;, +, +		this.httpClientOptions = httpClientOptions;, +	 * Creates a new {@code TestRestTemplate} with the same configuration as this one,, +	 * except that it will send basic authorization headers using the given, +	 * {@code username} and {@code password}., +	 * @param username the username, +	 * @param password the password, +	 * @return the new template, +	 * @since 1.4.1, +	 */, +	public TestRestTemplate withBasicAuth(String username, String password) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setErrorHandler(getRestTemplate().getErrorHandler());, +		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters());, +		restTemplate.setInterceptors(, +				removeBasicAuthInterceptorIfPresent(getRestTemplate().getInterceptors()));, +		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory());, +		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler());, +		return new TestRestTemplate(restTemplate, username, password,, +				this.httpClientOptions);, +	}, +, +	private List<ClientHttpRequestInterceptor> removeBasicAuthInterceptorIfPresent(, +			List<ClientHttpRequestInterceptor> interceptors) {, +		List<ClientHttpRequestInterceptor> updatedInterceptors = new ArrayList<ClientHttpRequestInterceptor>(, +				interceptors);, +		Iterator<ClientHttpRequestInterceptor> iterator = updatedInterceptors.iterator();, +		while (iterator.hasNext()) {, +			if (iterator.next() instanceof BasicAuthorizationInterceptor) {, +				iterator.remove();, +			}, +		}, +		return interceptors;, +	}, +, +	/**, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java, +import java.util.List;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.support.BasicAuthorizationInterceptor;, +import org.springframework.test.util.ReflectionTestUtils;, +, +	@Test, +	public void withBasicAuthAddsBasicAuthInterceptorWhenNotAlreadyPresent() {, +		TestRestTemplate originalTemplate = new TestRestTemplate();, +		TestRestTemplate basicAuthTemplate = originalTemplate.withBasicAuth("user",, +				"password");, +		assertThat(basicAuthTemplate.getRestTemplate().getMessageConverters()), +				.containsExactlyElementsOf(, +						originalTemplate.getRestTemplate().getMessageConverters());, +		assertThat(basicAuthTemplate.getRestTemplate().getRequestFactory()), +				.isInstanceOf(InterceptingClientHttpRequestFactory.class);, +		assertThat(ReflectionTestUtils.getField(, +				basicAuthTemplate.getRestTemplate().getRequestFactory(),, +				"requestFactory")), +						.isInstanceOf(CustomHttpComponentsClientHttpRequestFactory.class);]