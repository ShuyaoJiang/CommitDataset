[+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +				.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),, +						entry.getValue().health().compose(this.timeoutCompose))), +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +				.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),, +						entry.getValue().health().compose(this.timeoutCompose))), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/StaticResourceRequest.java, +	 * {@link StaticResourceRequestMatcher#excluding(Location, Location...) excluding}, +	 * method can be used to remove specific locations if required. For example:, +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +				.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),, +						entry.getValue().health().compose(this.timeoutCompose))), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/StaticResourceRequest.java, +	 * {@link StaticResourceRequestMatcher#excluding(Location, Location...) excluding}, +	 * method can be used to remove specific locations if required. For example:, +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +			AssertableWebApplicationContext context, Class<T> type) {, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +				.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),, +						entry.getValue().health().compose(this.timeoutCompose))), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/StaticResourceRequest.java, +	 * {@link StaticResourceRequestMatcher#excluding(Location, Location...) excluding}, +	 * method can be used to remove specific locations if required. For example:, +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +			AssertableWebApplicationContext context, Class<T> type) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, +		this.contextRunner, +				.withPropertyValues("spring.session.store-type=hazelcast",, +						"spring.session.hazelcast.map-name=foo:bar:biz"), +				.run((context) -> {, +		this.contextRunner, +				.withPropertyValues("spring.session.store-type=hazelcast",, +						"spring.session.hazelcast.flush-mode=immediate"), +				.run((context) -> {, +					HazelcastSessionRepository repository = validateSessionRepository(, +							context, HazelcastSessionRepository.class);, +++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/ManagementContextFactory.java, +@FunctionalInterface, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java, +				.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),, +						entry.getValue().health().compose(this.timeoutCompose))), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/StaticResourceRequest.java, +	 * {@link StaticResourceRequestMatcher#excluding(Location, Location...) excluding}, +	 * method can be used to remove specific locations if required. For example:, +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +		 * Return a new {@link StaticResourceRequestMatcher} based on this one but, +		 * excluding the specified locations., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +			AssertableWebApplicationContext context, Class<T> type) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, +		this.contextRunner, +				.withPropertyValues("spring.session.store-type=hazelcast",, +						"spring.session.hazelcast.map-name=foo:bar:biz"), +				.run((context) -> {, +		this.contextRunner, +				.withPropertyValues("spring.session.store-type=hazelcast",, +						"spring.session.hazelcast.flush-mode=immediate"), +				.run((context) -> {, +					HazelcastSessionRepository repository = validateSessionRepository(, +							context, HazelcastSessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +		this.contextRunner, +				.withConfiguration(, +						AutoConfigurations.of(JdbcTemplateAutoConfiguration.class)), +					JdbcOperationsSessionRepository repository = validateSessionRepository(, +							context, JdbcOperationsSessionRepository.class);, +					assertThat(new DirectFieldAccessor(repository), +							.getPropertyValue("tableName")).isEqualTo("SPRING_SESSION");, +					assertThat(context.getBean(JdbcSessionProperties.class), +							.getInitializeSchema()), +		this.contextRunner.withPropertyValues("spring.session.store-type=jdbc",, +					JdbcOperationsSessionRepository repository = validateSessionRepository(, +							context, JdbcOperationsSessionRepository.class);, +					assertThat(new DirectFieldAccessor(repository), +							.getPropertyValue("tableName")).isEqualTo("SPRING_SESSION");, +					assertThat(context.getBean(JdbcSessionProperties.class), +							.getInitializeSchema())]