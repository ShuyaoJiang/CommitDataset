[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +		contextRunner.run((context) -> {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +		contextRunner.run((context) -> {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryMvcWebEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.FORBIDDEN));, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.OK));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +		contextRunner.run((context) -> {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryMvcWebEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.FORBIDDEN));, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.OK));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpointTests.java, +		WebEndpointOperation operation = new WebEndpointOperation(OperationType.READ,, +				(arguments) -> "Invoked", true, requestPredicate, "test");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +		contextRunner.run((context) -> {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryMvcWebEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.FORBIDDEN));, +		load(TestEndpointConfiguration.class,, +				(client) -> client.get().uri("/cfApplication/test"), +						.accept(MediaType.APPLICATION_JSON), +						.expectStatus().isEqualTo(HttpStatus.OK));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpointTests.java, +		WebEndpointOperation operation = new WebEndpointOperation(OperationType.READ,, +				(arguments) -> "Invoked", true, requestPredicate, "test");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java, +	private static final AtomicBoolean preinitializationStarted = new AtomicBoolean(, +			false);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundrySecurityService.java, +		Map<String, String> tokenKeys = new HashMap<>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryWebEndpointServletHandlerMapping.java, +				.filter((e) -> e.getKey().equals("self"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +		builder.up().withDetail("nodes",, +				result.queryResults().iterator().next().get("nodes"));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +		this.contextRunner.run((context) -> {, +		contextRunner.run((context) -> {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/cloudfoundry/CloudFoundryMvcWebEndpointIntegrationTests.java]