[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +"<<using-spring-boot.adoc#using-boot>>" sections so that you have a good grounding of the, +basics., +that is started from a `main()` method. In many situations, you can delegate to the, +static `SpringApplication.run` method, as shown in the following example:, +For instance, if you are running your application by using `java -jar`, you can enable, +the `debug` property as follows:, +application is created, you can add a `META-INF/spring.factories` file to your project, +and reference your listener(s) by using the, +`org.springframework.context.ApplicationListener` key, as shown in the following example:, +compare the injected context with the context of the event. The context can be injected, +by implementing `ApplicationContextAware` or, if the listener is a bean, by using, +`@Autowired`., +`AnnotationConfigServletWebServerApplicationContext` is used, depending on whether you, +are developing a web application or not., +The algorithm used to determine a '`web environment`' is fairly simplistic (it is based, +on the presence of a few classes). You can use, +`setWebEnvironment(boolean webEnvironment)` if you need to override the default., +It is also possible to take complete control of the `ApplicationContext` type that is, +used by calling `setApplicationContextClass(...)`., +`org.springframework.boot.ApplicationArguments` bean. The `ApplicationArguments`, +interface provides access to both the raw `String[]` arguments as well as parsed `option`, +and `non-option` arguments, as shown in the following example:, +You can additionally implement the `org.springframework.core.Ordered` interface or use, +the `org.springframework.core.annotation.Order` annotation if several `CommandLineRunner` or, +callbacks (such as the `DisposableBean` interface or the `@PreDestroy` annotation) can be, +used., +interface if they wish to return a specific exit code when `SpringApplication.exit()` is, +called. This exit code can then be passed to `System.exit()` to return it as a status, +values can be injected directly into your beans by using the `@Value` annotation,, +accessed through Spring's `Environment` abstraction or, +If you do not like `application.properties` as the configuration file name, you can, +switch to another file name by specifying a `spring.config.name` environment property., +You can also refer to an explicit location by using the `spring.config.location`, +environment property (a comma-separated list of directory locations or file paths). The, +following example shows how to specify a different file name:, +If `spring.config.location` contains directories (as opposed to files), they should end, +in `/` (and, at runtime, be appended with the names generated from `spring.config.name`, +`classpath:/,classpath:/config/,file:./,file:./config/`. The resulting search order is, +the following:, +When custom config locations are configured using `spring.config.location`, they replace, +Alternatively, when custom config locations are configured by using, +The `YamlPropertiesFactoryBean` loads YAML as `Properties` and the `YamlMapFactoryBean`, +loads YAML as a `Map`., +YAML lists are represented as property keys with `[index]` dereferencers. For example,, +consider the following YAML:, +negated by using the `!` character. If both negated and non-negated profiles are, +specified for a single document, at least one non-negated profile must match, and no, +negated profiles may match., +data is hierarchical in nature. Spring Boot provides an alternative method of working, +with properties that lets strongly typed beans govern and validate the configuration of, +your application, as shown in the following example:, +* `foo.security.username`, with a nested "security" object whose name is determined by, +the name of the property. In particular, the return type is not used at all there and, +could have been `SecurityProperties`., +* Maps, as long as they are initialized, need a getter but not necessarily a setter,, +since they can be mutated by the binder., +To work with `@ConfigurationProperties` beans, you can just inject them in the same way, +as any other bean, as shown in the following example:, +useful include dash-separated environment properties (for example, `context-path` binds, +to `contextPath`), and capitalized environment properties (for example, `PORT` binds to, +NOTE: The `prefix` value for the annotation must be in kebab case (lowercase and, +separated by `-`, such as `kebab-case`)., +binds to the `@ConfigurationProperties` beans. If you need custom type conversion, you, +can provide a `ConversionService` bean (with bean named `conversionService`) or custom, +field as `@Valid` to trigger its validation. The following example builds on the, +preceding `FooProperties` example:, +instantiate the `@Configuration` class. Doing so avoids any problems that may be caused, +by early instantiation. There is a, +In the normal Spring way, you can use a `spring.profiles.active` `Environment` property, +to specify which profiles are active. You can specify the property in any of the usual, +ways. For example, you could include it in your `application.properties`:, +The `spring.profiles.active` property follows the same ordering rules as other, +properties: The highest `PropertySource` wins. This means that you can specify active, +profiles in `application.properties` and then *replace* them by using the command line, +switch., +For example, when an application with the following properties is run by using the, +switch, `--spring.profiles.active=prod`, the `proddb` and `prodmq` profiles are also, +activated:, +By default, if you use the '`Starters`', Logback is used for logging. Appropriate Logback, +routing is also included to ensure that dependent libraries that use Java Util Logging,, +Commons Logging, Log4J, or SLF4J all work correctly., +default, `ERROR`-level, `WARN`-level, and `INFO`-level messages are logged. You can also, +converter colors the output according to the log level, as shown in the following, +example:, +`logging.file` or `logging.path` property (for example, in your, +`application.properties`)., +The various logging systems can be activated by including the appropriate libraries on, +the classpath and can be further customized by providing a suitable configuration file in, +the root of the classpath or in a location specified by the Spring `Environment` property, +NOTE: Since logging is initialized *before* the `ApplicationContext` is created, it is, +not possible to control logging from `@PropertySources` in Spring `@Configuration` files., +the syntax of the underlying framework. Notably, if you use Logback, you should use `:`, +as the delimiter between a property name and its default value and not use `:-`., +The `<springProfile>` tag lets you optionally include or exclude sections of, +configuration based on the active Spring profiles. Profile sections are supported, +anywhere within the `<configuration>` element. Use the `name` attribute to specify which, +profile accepts the configuration. Multiple profiles can be specified using a, +comma-separated list. The following listing shows three sample profiles:, +`value`, you specify the `source` of the property (from the `Environment`). If you need]