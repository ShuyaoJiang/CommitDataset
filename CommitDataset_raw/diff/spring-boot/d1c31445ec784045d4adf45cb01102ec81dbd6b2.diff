[+++ b/spring-boot-loader-tools/pom.xml, +		<!-- Provided -->, +		<dependency>, +			<groupId>${project.groupId}</groupId>, +			<artifactId>spring-boot-loader</artifactId>, +			<version>${project.version}</version>, +			<scope>provided</scope>, +		</dependency>, +++ b/spring-boot-loader-tools/pom.xml, +		<!-- Provided -->, +		<dependency>, +			<groupId>${project.groupId}</groupId>, +			<artifactId>spring-boot-loader</artifactId>, +			<version>${project.version}</version>, +			<scope>provided</scope>, +		</dependency>, +++ b/spring-boot-loader-tools/src/main/java/org/springframework/boot/launcher/tools/JarWriter.java, +import java.io.ByteArrayInputStream;, +import java.io.FilterInputStream;, +import java.util.Arrays;, +			ZipHeaderPeekInputStream inputStream = new ZipHeaderPeekInputStream(, +					jarFile.getInputStream(entry));, +			try {, +				if (inputStream.hasZipHeader() && entry.getMethod() != ZipEntry.STORED) {, +					new CrcAndSize(inputStream).setupStoredEntry(entry);, +					inputStream.close();, +					inputStream = new ZipHeaderPeekInputStream(, +							jarFile.getInputStream(entry));, +				}, +				EntryWriter entryWriter = new InputStreamEntryWriter(inputStream, true);, +			finally {, +				inputStream.close();, +			}, +		}, +		new CrcAndSize(file).setupStoredEntry(entry);, +	/**, +	 * {@link InputStream} that can peek ahead at zip header bytes., +	 */, +	private static class ZipHeaderPeekInputStream extends FilterInputStream {, +, +		private static final byte[] ZIP_HEADER = new byte[] { 0x50, 0x4b, 0x03, 0x04 };, +, +		private byte[] header;, +, +		private ByteArrayInputStream headerStream;, +, +		protected ZipHeaderPeekInputStream(InputStream in) throws IOException {, +			super(in);, +			this.header = new byte[4];, +			int len = in.read(this.header);, +			this.headerStream = new ByteArrayInputStream(this.header, 0, len);, +		}, +, +		@Override, +		public int read() throws IOException {, +			int read = (this.headerStream == null ? -1 : this.headerStream.read());, +			if (read != -1) {, +				this.headerStream = null;, +				return read;, +			}, +			return super.read();, +		}, +, +		@Override, +		public int read(byte[] b) throws IOException {, +			return read(b, 0, b.length);, +		}, +, +		@Override, +		public int read(byte[] b, int off, int len) throws IOException {, +			int read = (this.headerStream == null ? -1 : this.headerStream.read(b, off,, +					len));, +			if (read != -1) {, +				this.headerStream = null;, +				return read;, +			}, +			return super.read(b, off, len);, +		}, +, +		public boolean hasZipHeader() {, +			return Arrays.equals(this.header, ZIP_HEADER);, +		}, +	}, +, +	/**, +	 * Data holder for CRC and Size, +	 */, +	private static class CrcAndSize {, +, +		private final CRC32 crc = new CRC32();, +, +		private long size;, +, +		public CrcAndSize(File file) throws IOException {, +			FileInputStream inputStream = new FileInputStream(file);, +			try {, +				load(inputStream);, +			}, +			finally {, +				inputStream.close();]