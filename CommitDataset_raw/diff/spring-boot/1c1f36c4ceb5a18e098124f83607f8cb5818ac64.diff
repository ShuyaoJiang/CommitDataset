[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			registry.addResourceHandler("/webjars/**").addResourceLocations(, +					"classpath:/META-INF/resources/webjars/");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +			registry.addResourceHandler("/webjars/**").addResourceLocations(, +					"classpath:/META-INF/resources/webjars/");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import java.lang.reflect.Field;, +import java.util.LinkedHashMap;, +import java.util.List;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;, +import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +	@Test, +	@SuppressWarnings("unchecked"), +	public void resourceHandlerMapping() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(Config.class, WebMvcAutoConfiguration.class);, +		this.context.refresh();, +		SimpleUrlHandlerMapping mapping = (SimpleUrlHandlerMapping) this.context, +				.getBean("resourceHandlerMapping");, +		Field locationsField = ReflectionUtils.findField(, +				ResourceHttpRequestHandler.class, "locations");, +		locationsField.setAccessible(true);, +		Map<String, List<Resource>> mappingLocations = new LinkedHashMap<String, List<Resource>>();, +		for (Map.Entry<String, Object> entry : mapping.getHandlerMap().entrySet()) {, +			ResourceHttpRequestHandler handler = (ResourceHttpRequestHandler) entry, +					.getValue();, +			mappingLocations.put(entry.getKey(),, +					(List<Resource>) locationsField.get(handler));, +		}, +		assertThat(mappingLocations.get("/**").size(), equalTo(5));, +		assertThat(mappingLocations.get("/webjars/**").size(), equalTo(1));, +		assertThat(mappingLocations.get("/webjars/**").get(0),, +				equalTo((Resource) new ClassPathResource("/META-INF/resources/webjars/")));, +	}, +]