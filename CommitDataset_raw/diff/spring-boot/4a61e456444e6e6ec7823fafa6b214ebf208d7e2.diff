[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			String contextPath = environment.getProperty("management.context-path");, +			if ("".equals(contextPath) || "/".equals(contextPath)) {, +				throw new IllegalStateException("A management context path of '", +						+ contextPath + "' requires the management server to be ", +						+ "listening on a separate port");, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			String contextPath = environment.getProperty("management.context-path");, +			if ("".equals(contextPath) || "/".equals(contextPath)) {, +				throw new IllegalStateException("A management context path of '", +						+ contextPath + "' requires the management server to be ", +						+ "listening on a separate port");, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +				.of("management.security.enabled=false", "server.servlet.context-path=",, +		assertContent("/application/endpoint", ports.get().server, "endpointoutput");, +		assertThat(hasHeader("/application/endpoint", ports.get().server,, +				"X-Application-Context")).isFalse();, +		assertContent("/application/endpoint", ports.get().management, "endpointoutput");, +		assertContent("/error", ports.get().management, startsWith("{"));, +		ApplicationContext managementContext = this.applicationContext, +				.getBean(ManagementContextResolver.class).getApplicationContext();, +		List<?> interceptors = (List<?>) ReflectionTestUtils.getField(, +				managementContext.getBean(EndpointHandlerMapping.class), "interceptors");, +		assertThat(interceptors).hasSize(2);, +	}, +, +	@Test, +	public void onDifferentPortAndRootContext() throws Exception {, +		TestPropertyValues.of("management.port=" + ports.get().management,, +				"management.context-path=/").applyTo(this.applicationContext);, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				DifferentPortConfig.class, BaseConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);, +		this.applicationContext.refresh();, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertContent("/endpoint", ports.get().server, null);, +		assertContent("/controller", ports.get().management, null);, +		assertContent("/application/endpoint", ports.get().management, "endpointoutput");, +		assertContent("/application/endpoint", ports.get().management, "endpointoutput");, +		assertHttpsContent("/application/endpoint", ports.get().management,, +				"endpointoutput");, +	public void rootManagementContextPathUsingSamePortFails() throws Exception {, +		TestPropertyValues.of("management.context-path=/"), +				.applyTo(this.applicationContext);, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class,, +				ErrorMvcAutoConfiguration.class);, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage("A management context path of '/' requires the", +				+ " management server to be listening on a separate port");, +		this.applicationContext.refresh();, +	}, +, +	@Test, +		assertContent("/application/endpoint", ports.get().management, "endpointoutput");]