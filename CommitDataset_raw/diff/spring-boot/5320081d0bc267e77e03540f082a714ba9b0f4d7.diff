[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +@AutoConfigureAfter(CodecsAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/AutoConfigureWebTestClient.java, + * Annotation that can be applied to a test class to enable a {@link WebTestClient}., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +@AutoConfigureAfter(CodecsAutoConfiguration.class), +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfigurationTests.java, +import java.util.Collections;, +import org.junit.After;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.PropertySource;, +	private AnnotationConfigApplicationContext context;, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +		load(CodecConfiguration.class);, +		WebTestClient webTestClient = this.context.getBean(WebTestClient.class);, +		CodecCustomizer codecCustomizer = this.context.getBean(CodecCustomizer.class);, +		assertThat(webTestClient).isNotNull();, +		verify(codecCustomizer).customize(any(CodecConfigurer.class));, +		PropertySource<?> propertySource = new MapPropertySource("test", Collections, +				.singletonMap("spring.test.webtestclient.timeout", (Object) "PT15M"));, +		load(propertySource, BaseConfiguration.class);, +		WebTestClient webTestClient = this.context.getBean(WebTestClient.class);, +		Object duration = ReflectionTestUtils.getField(webTestClient, "timeout");, +	}, +, +	private void load(Class<?>... config) {, +		load(null, config);, +	}, +, +	private void load(PropertySource<?> propertySource, Class<?>... config) {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		if (propertySource != null) {, +			context.getEnvironment().getPropertySources().addFirst(propertySource);, +		}, +		context.register(config);, +		context.register(WebTestClientAutoConfiguration.class);, +		context.refresh();, +		this.context = context;]