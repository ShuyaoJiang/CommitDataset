[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.bind.RelaxedPropertyResolver;, +			config = new RelaxedPropertyResolver(environment, "endpoints.logfile."), +					.getProperty("external-file");, +			if (StringUtils.hasText(config)) {, +				return ConditionOutcome, +						.match("Found endpoints.logfile.external-file: " + config);, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.bind.RelaxedPropertyResolver;, +			config = new RelaxedPropertyResolver(environment, "endpoints.logfile."), +					.getProperty("external-file");, +			if (StringUtils.hasText(config)) {, +				return ConditionOutcome, +						.match("Found endpoints.logfile.external-file: " + config);, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import java.io.File;, +	/**, +	 * External Logfile to be accessed. Can be used if the logfile is written by output, +	 * redirect and not by the logging-system itself., +	 */, +	private File externalFile;, +, +	public File getExternalFile() {, +		return this.externalFile;, +	}, +, +	public void setExternalFile(File externalFile) {, +		this.externalFile = externalFile;, +	}, +, +		if (resource != null && !resource.exists()) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Log file '" + resource + "' does not exist");, +			}, +			resource = null;, +		}, +		if (this.externalFile != null) {, +			return new FileSystemResource(this.externalFile);, +		}, +		return new FileSystemResource(logFile.toString());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.boot.bind.RelaxedPropertyResolver;, +			config = new RelaxedPropertyResolver(environment, "endpoints.logfile."), +					.getProperty("external-file");, +			if (StringUtils.hasText(config)) {, +				return ConditionOutcome, +						.match("Found endpoints.logfile.external-file: " + config);, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java, +import java.io.File;, +	/**, +	 * External Logfile to be accessed. Can be used if the logfile is written by output, +	 * redirect and not by the logging-system itself., +	 */, +	private File externalFile;, +, +	public File getExternalFile() {, +		return this.externalFile;, +	}, +, +	public void setExternalFile(File externalFile) {, +		this.externalFile = externalFile;, +	}, +, +		if (resource != null && !resource.exists()) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Log file '" + resource + "' does not exist");, +			}, +			resource = null;, +		}, +		if (this.externalFile != null) {, +			return new FileSystemResource(this.externalFile);, +		}, +		return new FileSystemResource(logFile.toString());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java, +	@Test, +	public void invokeGetsContentExternalFile() throws Exception {, +		this.mvc.setExternalFile(this.logFile);, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockHttpServletRequest request = new MockHttpServletRequest(HttpMethod.GET.name(),, +				"/logfile");, +		this.mvc.invoke(request, response);, +		assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());, +		assertThat("--TEST--").isEqualTo(response.getContentAsString());, +	}, +]