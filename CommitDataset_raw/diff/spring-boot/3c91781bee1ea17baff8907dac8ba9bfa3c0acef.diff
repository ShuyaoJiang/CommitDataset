[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import org.springframework.util.StringUtils;, +		 * Patterns that should be excluded from triggering a full restart., +		 * Additional patterns that should be excluded from triggering a full restart., +		 */, +		private String additionalExclude;, +, +		/**, +		public String[] getAllExclude() {, +			List<String> allExclude = new ArrayList<String>();, +			if (StringUtils.hasText(this.exclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.exclude));, +			}, +			if (StringUtils.hasText(this.additionalExclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.additionalExclude));, +			}, +			return allExclude.toArray(new String[allExclude.size()]);, +		}, +, +		public String getAdditionalExclude() {, +			return this.additionalExclude;, +		}, +, +		public void setAdditionalExclude(String additionalExclude) {, +			this.additionalExclude = additionalExclude;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import org.springframework.util.StringUtils;, +		 * Patterns that should be excluded from triggering a full restart., +		 * Additional patterns that should be excluded from triggering a full restart., +		 */, +		private String additionalExclude;, +, +		/**, +		public String[] getAllExclude() {, +			List<String> allExclude = new ArrayList<String>();, +			if (StringUtils.hasText(this.exclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.exclude));, +			}, +			if (StringUtils.hasText(this.additionalExclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.additionalExclude));, +			}, +			return allExclude.toArray(new String[allExclude.size()]);, +		}, +, +		public String getAdditionalExclude() {, +			return this.additionalExclude;, +		}, +, +		public void setAdditionalExclude(String additionalExclude) {, +			this.additionalExclude = additionalExclude;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +					.getAllExclude());, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import org.springframework.util.StringUtils;, +		 * Patterns that should be excluded from triggering a full restart., +		 * Additional patterns that should be excluded from triggering a full restart., +		 */, +		private String additionalExclude;, +, +		/**, +		public String[] getAllExclude() {, +			List<String> allExclude = new ArrayList<String>();, +			if (StringUtils.hasText(this.exclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.exclude));, +			}, +			if (StringUtils.hasText(this.additionalExclude)) {, +				allExclude.addAll(StringUtils.commaDelimitedListToSet(this.additionalExclude));, +			}, +			return allExclude.toArray(new String[allExclude.size()]);, +		}, +, +		public String getAdditionalExclude() {, +			return this.additionalExclude;, +		}, +, +		public void setAdditionalExclude(String additionalExclude) {, +			this.additionalExclude = additionalExclude;, +		}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +					.getAllExclude());, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/classpath/PatternClassPathRestartStrategy.java, +	public PatternClassPathRestartStrategy(String[] excludePatterns) {, +		this.excludePatterns = excludePatterns;, +	}, +, +		this(StringUtils.commaDelimitedListToStringArray(excludePatterns));, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java, +import org.springframework.util.StringUtils;, +		 * Patterns that should be excluded from triggering a full restart., +		 * Additional patterns that should be excluded from triggering a full restart., +		 */, +		private String additionalExclude;, +, +		/**, +		public String[] getAllExclude() {]