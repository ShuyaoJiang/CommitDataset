[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, +import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;, +		this.filter.setErrorAttributes(new DefaultErrorAttributes());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, +import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;, +		this.filter.setErrorAttributes(new DefaultErrorAttributes());, +++ /dev/null, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, +import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;, +		this.filter.setErrorAttributes(new DefaultErrorAttributes());, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web;, +, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.util.Date;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +import org.springframework.http.HttpStatus;, +import org.springframework.validation.BindingResult;, +import org.springframework.validation.ObjectError;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.servlet.HandlerExceptionResolver;, +import org.springframework.web.servlet.ModelAndView;, +, +/**, + * Default implementation of {@link ErrorAttributes}. Provides the following attributes, + * when possible:, + * <ul>, + * <li>timestamp - The time that the errors were extracted</li>, + * <li>status - The status code</li>, + * <li>error - The error reason</li>, + * <li>exception - The class name of the root exception</li>, + * <li>message - The exception message</li>, + * <li>errors - Any {@link ObjectError}s from a {@link BindingResult} exception, + * <li>trace - The exception stack trace</li>, + * <li>path - The URL path when the exception was raised</li>, + * </ul>, + * , + * @author Phillip Webb, + * @author Dave Syer, + * @since 1.1.0, + * @see ErrorAttributes, + */, +@Order(Ordered.HIGHEST_PRECEDENCE), +public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver,, +		Ordered {, +, +	private static final String ERROR_ATTRIBUTE = DefaultErrorAttributes.class.getName(), +			+ ".ERROR";, +, +	@Override, +	public int getOrder() {, +		return Ordered.HIGHEST_PRECEDENCE;, +	}, +, +	@Override, +	public ModelAndView resolveException(HttpServletRequest request,, +			HttpServletResponse response, Object handler, Exception ex) {, +		storeErrorAttributes(request, ex);, +		return null;, +	}, +, +	private void storeErrorAttributes(HttpServletRequest request, Exception ex) {, +		request.setAttribute(ERROR_ATTRIBUTE, ex);, +	}, +, +	@Override, +	public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,, +			boolean includeStackTrace) {, +		Map<String, Object> errorAttributes = new LinkedHashMap<String, Object>();, +		errorAttributes.put("timestamp", new Date());, +		addStatus(errorAttributes, requestAttributes);, +		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);, +		addPath(errorAttributes, requestAttributes);, +		return errorAttributes;]