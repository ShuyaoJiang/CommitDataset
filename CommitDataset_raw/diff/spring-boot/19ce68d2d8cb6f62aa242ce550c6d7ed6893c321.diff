[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +import java.util.Arrays;, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<PathPattern>(, +					Arrays.asList(getPathPatternParser().parse("")));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +import java.util.Arrays;, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<PathPattern>(, +					Arrays.asList(getPathPatternParser().parse("")));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMapping.java, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<>(Collections.singletonList(""));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +import java.util.Arrays;, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<PathPattern>(, +					Arrays.asList(getPathPatternParser().parse("")));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMapping.java, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<>(Collections.singletonList(""));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingTests.java, +	public void mappingWithNoPath() throws Exception {, +		ExposableControllerEndpoint pathless = pathlessEndpoint();, +		ControllerEndpointHandlerMapping mapping = createMapping("actuator", pathless);, +		assertThat(getHandler(mapping, HttpMethod.GET, "/actuator/pathless")), +				.isEqualTo(handlerOf(pathless.getController(), "get"));, +		assertThat(getHandler(mapping, HttpMethod.GET, "/pathless")).isNull();, +		assertThat(getHandler(mapping, HttpMethod.GET, "/")).isNull();, +	}, +, +	@Test, +	private ExposableControllerEndpoint pathlessEndpoint() {, +		return mockEndpoint("pathless", new PathlessControllerEndpoint());, +	}, +, +	@ControllerEndpoint(id = "pathless"), +	private static class PathlessControllerEndpoint {, +, +		@GetMapping, +		public String get() {, +			return "test";, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMapping.java, +import java.util.Arrays;, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<PathPattern>(, +					Arrays.asList(getPathPatternParser().parse("")));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMapping.java, +import java.util.HashSet;, +		if (patterns.isEmpty()) {, +			patterns = new HashSet<>(Collections.singletonList(""));, +		}, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/reactive/ControllerEndpointHandlerMappingTests.java, +	public void mappingWithNoPath() throws Exception {, +		ExposableControllerEndpoint pathless = pathlessEndpoint();, +		ControllerEndpointHandlerMapping mapping = createMapping("actuator", pathless);, +		assertThat(getHandler(mapping, HttpMethod.GET, "/actuator/pathless")), +				.isEqualTo(handlerOf(pathless.getController(), "get"));, +		assertThat(getHandler(mapping, HttpMethod.GET, "/pathless")).isNull();, +		assertThat(getHandler(mapping, HttpMethod.GET, "/")).isNull();, +	}, +, +	@Test, +	private ExposableControllerEndpoint pathlessEndpoint() {, +		return mockEndpoint("pathless", new PathlessControllerEndpoint());, +	}, +, +	@ControllerEndpoint(id = "pathless"), +	private static class PathlessControllerEndpoint {, +, +		@GetMapping, +		public String get() {, +			return "test";, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/servlet/ControllerEndpointHandlerMappingTests.java, +	@Test, +	public void mappingWithNoPath() throws Exception {, +		ExposableControllerEndpoint pathless = pathlessEndpoint();, +		ControllerEndpointHandlerMapping mapping = createMapping("actuator", pathless);, +		assertThat(mapping.getHandler(request("GET", "/actuator/pathless")).getHandler()), +				.isEqualTo(handlerOf(pathless.getController(), "get"));]