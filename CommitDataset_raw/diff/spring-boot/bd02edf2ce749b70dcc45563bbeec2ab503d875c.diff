[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Import;, +@EnableConfigurationProperties(JpaProperties.class), +@Import(JpaHibernateConfiguration.class), +public class HibernateJpaAutoConfiguration {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Import;, +@EnableConfigurationProperties(JpaProperties.class), +@Import(JpaHibernateConfiguration.class), +public class HibernateJpaAutoConfiguration {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaHibernateConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.orm.jpa;, +, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +, +import javax.sql.DataSource;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +import org.springframework.boot.jdbc.SchemaManagementProvider;, +import org.springframework.boot.orm.jpa.hibernate.SpringJtaPlatform;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.jndi.JndiLocatorDelegate;, +import org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;, +import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;, +import org.springframework.transaction.jta.JtaTransactionManager;, +import org.springframework.util.ClassUtils;, +, +/**, + * {@link JpaBaseConfiguration} implementation for Hibernate., + *, + * @author Phillip Webb, + * @author Josh Long, + * @author Manuel Doninger, + * @author Andy Wilkinson, + * @author Stephane Nicoll, + * @since 2.0.0, + */, +@Configuration, +@ConditionalOnSingleCandidate(DataSource.class), +public class JpaHibernateConfiguration extends JpaBaseConfiguration {, +, +	private static final Log logger = LogFactory, +			.getLog(JpaHibernateConfiguration.class);, +, +	private static final String JTA_PLATFORM = "hibernate.transaction.jta.platform";, +, +	/**, +	 * {@code NoJtaPlatform} implementations for various Hibernate versions., +	 */, +	private static final String[] NO_JTA_PLATFORM_CLASSES = {, +			"org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform",, +			"org.hibernate.service.jta.platform.internal.NoJtaPlatform" };, +, +	/**, +	 * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate, +	 * versions., +	 */, +	private static final String[] WEBSPHERE_JTA_PLATFORM_CLASSES = {, +			"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform",, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform", };, +, +	private final HibernateDefaultDdlAutoProvider defaultDdlAutoProvider;, +, +	public JpaHibernateConfiguration(DataSource dataSource,, +			JpaProperties jpaProperties,, +			ObjectProvider<JtaTransactionManager> jtaTransactionManager,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers,, +			ObjectProvider<List<SchemaManagementProvider>> providers) {, +		super(dataSource, jpaProperties, jtaTransactionManager,, +				transactionManagerCustomizers);, +		this.defaultDdlAutoProvider = new HibernateDefaultDdlAutoProvider(, +				providers.getIfAvailable(Collections::emptyList));, +	}, +]