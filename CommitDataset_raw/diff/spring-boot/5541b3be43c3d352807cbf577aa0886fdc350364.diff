[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	@Conditional(OnManagementMvcCondition.class), +	private static class OnManagementMvcCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			RelaxedPropertyResolver management = new RelaxedPropertyResolver(, +					context.getEnvironment(), "management.");, +			RelaxedPropertyResolver server = new RelaxedPropertyResolver(, +					context.getEnvironment(), "server.");, +			Integer managementPort = management.getProperty("port", Integer.class);, +			if (managementPort == null) {, +				ManagementServerProperties managementServerProperties = getBeanCarefully(, +						context, ManagementServerProperties.class);, +				if (managementServerProperties != null) {, +					managementPort = managementServerProperties.getPort();, +				}, +			}, +			if (managementPort != null && managementPort < 0) {, +				return new ConditionOutcome(false, "The mangagement port is disabled");, +			}, +			if (!(context.getResourceLoader() instanceof WebApplicationContext)) {, +				// Current context is not a webapp, +				return new ConditionOutcome(false, "The context is not a webapp");, +			}, +			Integer serverPort = server.getProperty("port", Integer.class);, +			if (serverPort == null) {, +				ServerProperties serverProperties = getBeanCarefully(context,, +						ServerProperties.class);, +				if (serverProperties != null) {, +					serverPort = serverProperties.getPort();, +				}, +			}, +			if ((managementPort == null), +					|| (serverPort == null && managementPort.equals(8080)), +					|| (managementPort != 0 && managementPort.equals(serverPort))) {, +				return ConditionOutcome.match("The main context is the management context");, +			}, +			return ConditionOutcome.noMatch("The main context is not the management context");, +		}, +, +		private <T> T getBeanCarefully(ConditionContext context, Class<T> type) {, +			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(, +					context.getBeanFactory(), type, false, false);, +			if (names.length == 1) {, +				BeanDefinition original = findBeanDefinition(context.getBeanFactory(),, +						names[0]);, +				if (original instanceof RootBeanDefinition) {, +					DefaultListableBeanFactory temp = new DefaultListableBeanFactory();, +					temp.setParentBeanFactory(context.getBeanFactory());, +					temp.registerBeanDefinition("bean",, +							((RootBeanDefinition) original).cloneBeanDefinition());, +					return temp.getBean(type);, +				}, +				return BeanFactoryUtils.beanOfType(context.getBeanFactory(), type, false,, +						false);, +			}, +			;, +			return null;, +		}, +, +		private BeanDefinition findBeanDefinition(, +				ConfigurableListableBeanFactory beanFactory, String name) {, +			BeanDefinition original = null;, +			while (beanFactory != null && original == null) {, +				if (beanFactory.containsLocalBean(name)) {, +					original = beanFactory.getBeanDefinition(name);, +				}, +				else {, +					BeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();, +					if (parentBeanFactory instanceof ConfigurableListableBeanFactory) {, +						beanFactory = (ConfigurableListableBeanFactory) parentBeanFactory;, +					}, +					else {, +						beanFactory = null;, +					}, +				}, +			}, +			return original;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;]