[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.web.bind.MethodArgumentNotValidException;, + * @author Stephane Nicoll, +		BindingResult result = extractBindingResult(error);, +		if (result == null) {, +	private BindingResult extractBindingResult(Throwable error) {, +		if (error instanceof BindingResult) {, +			return (BindingResult) error;, +		}, +		if (error instanceof MethodArgumentNotValidException) {, +			return ((MethodArgumentNotValidException) error).getBindingResult();, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.web.bind.MethodArgumentNotValidException;, + * @author Stephane Nicoll, +		BindingResult result = extractBindingResult(error);, +		if (result == null) {, +	private BindingResult extractBindingResult(Throwable error) {, +		if (error instanceof BindingResult) {, +			return (BindingResult) error;, +		}, +		if (error instanceof MethodArgumentNotValidException) {, +			return ((MethodArgumentNotValidException) error).getBindingResult();, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +import javax.validation.Valid;, +import javax.validation.constraints.NotNull;, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestMethod;, +	@Test, +	@SuppressWarnings("rawtypes"), +	public void testRequestBodyValidationForMachineClient() throws Exception {, +		load();, +		RequestEntity request = RequestEntity.post(URI.create(createUrl("/bodyValidation"))), +				.contentType(MediaType.APPLICATION_JSON).body("{}");, +		ResponseEntity<Map> entity = new TestRestTemplate().exchange(request, Map.class);, +		String resp = entity.getBody().toString();, +		assertThat(resp, containsString("Error count: 1"));, +		assertThat(resp, containsString("errors=[{"));, +		assertThat(resp, containsString("codes=["));, +		assertThat(resp, containsString("org.springframework.web.bind.MethodArgumentNotValidException"));, +	}, +, +			@RequestMapping(path = "/bodyValidation", method = RequestMethod.POST, produces = "application/json"), +			public String bodyValidation(@Valid @RequestBody DummyBody body) {, +				return body.content;, +			}, +, +			private static class DummyBody {, +, +				@NotNull, +				private String content;, +, +				public String getContent() {, +					return this.content;, +				}, +, +				public void setContent(String content) {, +					this.content = content;, +				}, +			}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.web.bind.MethodArgumentNotValidException;, + * @author Stephane Nicoll, +		BindingResult result = extractBindingResult(error);, +		if (result == null) {, +	private BindingResult extractBindingResult(Throwable error) {, +		if (error instanceof BindingResult) {, +			return (BindingResult) error;, +		}, +		if (error instanceof MethodArgumentNotValidException) {, +			return ((MethodArgumentNotValidException) error).getBindingResult();, +		}, +		return null;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +import javax.validation.Valid;, +import javax.validation.constraints.NotNull;, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestMethod;, +	@Test, +	@SuppressWarnings("rawtypes"), +	public void testRequestBodyValidationForMachineClient() throws Exception {, +		load();, +		RequestEntity request = RequestEntity.post(URI.create(createUrl("/bodyValidation"))), +				.contentType(MediaType.APPLICATION_JSON).body("{}");, +		ResponseEntity<Map> entity = new TestRestTemplate().exchange(request, Map.class);, +		String resp = entity.getBody().toString();, +		assertThat(resp, containsString("Error count: 1"));]