[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilter.java, +import org.springframework.util.ClassUtils;, +	private static final String[] OPTIONAL_INCLUDES = {, +			"org.springframework.security.config.web.server.ServerHttpSecurity" };, +, +		for (String optionalInclude : OPTIONAL_INCLUDES) {, +			try {, +				includes.add(ClassUtils.forName(optionalInclude, null));, +			}, +			catch (Exception ex) {, +			}, +		}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilter.java, +import org.springframework.util.ClassUtils;, +	private static final String[] OPTIONAL_INCLUDES = {, +			"org.springframework.security.config.web.server.ServerHttpSecurity" };, +, +		for (String optionalInclude : OPTIONAL_INCLUDES) {, +			try {, +				includes.add(ClassUtils.forName(optionalInclude, null));, +			}, +			catch (Exception ex) {, +			}, +		}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +import org.springframework.test.web.reactive.server.MockServerConfigurer;, +@Import(WebTestClientSecurityConfiguration.class), +			List<WebTestClientBuilderCustomizer> customizers,, +			List<MockServerConfigurer> configurers) {, +		WebTestClient.MockServerSpec<?> mockServerSpec = WebTestClient, +				.bindToApplicationContext(applicationContext);, +		for (MockServerConfigurer configurer : configurers) {, +			mockServerSpec.apply(configurer);, +		}, +		WebTestClient.Builder builder = mockServerSpec.configureClient();, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilter.java, +import org.springframework.util.ClassUtils;, +	private static final String[] OPTIONAL_INCLUDES = {, +			"org.springframework.security.config.web.server.ServerHttpSecurity" };, +, +		for (String optionalInclude : OPTIONAL_INCLUDES) {, +			try {, +				includes.add(ClassUtils.forName(optionalInclude, null));, +			}, +			catch (Exception ex) {, +			}, +		}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +import org.springframework.test.web.reactive.server.MockServerConfigurer;, +@Import(WebTestClientSecurityConfiguration.class), +			List<WebTestClientBuilderCustomizer> customizers,, +			List<MockServerConfigurer> configurers) {, +		WebTestClient.MockServerSpec<?> mockServerSpec = WebTestClient, +				.bindToApplicationContext(applicationContext);, +		for (MockServerConfigurer configurer : configurers) {, +			mockServerSpec.apply(configurer);, +		}, +		WebTestClient.Builder builder = mockServerSpec.configureClient();, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.test.autoconfigure.web.reactive;, +, +/** Configuration for Spring Security's {@link org.springframework.test.web.reactive.server.WebTestClient} integration., +*, + * @author Madhura Bhave, + */, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers;, +import org.springframework.test.web.reactive.server.MockServerConfigurer;, +, +@Configuration, +@ConditionalOnClass(SecurityMockServerConfigurers.class), +class WebTestClientSecurityConfiguration {, +, +	@Bean, +	public MockServerConfigurer get() {, +		return SecurityMockServerConfigurers.springSecurity();, +	}, +, +}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebFluxTypeExcludeFilter.java]