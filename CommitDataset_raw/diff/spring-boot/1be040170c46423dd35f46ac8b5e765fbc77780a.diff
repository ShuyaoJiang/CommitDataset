[+++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +		child.defaultArgs(this.defaultArgs.toArray(new String[this.defaultArgs.size()])), +				.environment(this.environment);, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +		child.defaultArgs(this.defaultArgs.toArray(new String[this.defaultArgs.size()])), +				.environment(this.environment);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();, +			PropertySource<?> source = load(environment, resourceLoader, candidate, null);, +			if (source != null) {, +				sources.add(source);, +			}, +				PropertySource<?> source = load(environment, resourceLoader, candidate,, +						profile);, +				if (source != null) {, +					environment.getPropertySources().addLast(source);, +		// Originals go at the end so they don't override the specific profiles, +		for (PropertySource<?> source : sources) {, +			environment.getPropertySources().addLast(source);, +		}, +	}, +, +	private PropertySource<?> load(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader, String location, String profile) {, +			return null;, +		return propertySource;, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +		child.defaultArgs(this.defaultArgs.toArray(new String[this.defaultArgs.size()])), +				.environment(this.environment);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();, +			PropertySource<?> source = load(environment, resourceLoader, candidate, null);, +			if (source != null) {, +				sources.add(source);, +			}, +				PropertySource<?> source = load(environment, resourceLoader, candidate,, +						profile);, +				if (source != null) {, +					environment.getPropertySources().addLast(source);, +		// Originals go at the end so they don't override the specific profiles, +		for (PropertySource<?> source : sources) {, +			environment.getPropertySources().addLast(source);, +		}, +	}, +, +	private PropertySource<?> load(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader, String location, String profile) {, +			return null;, +		return propertySource;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +		child.defaultArgs(this.defaultArgs.toArray(new String[this.defaultArgs.size()])), +				.environment(this.environment);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +		List<PropertySource<?>> sources = new ArrayList<PropertySource<?>>();, +			PropertySource<?> source = load(environment, resourceLoader, candidate, null);, +			if (source != null) {, +				sources.add(source);, +			}, +				PropertySource<?> source = load(environment, resourceLoader, candidate,, +						profile);, +				if (source != null) {, +					environment.getPropertySources().addLast(source);, +		// Originals go at the end so they don't override the specific profiles, +		for (PropertySource<?> source : sources) {, +			environment.getPropertySources().addLast(source);, +		}, +	}, +, +	private PropertySource<?> load(ConfigurableEnvironment environment,, +			ResourceLoader resourceLoader, String location, String profile) {, +			return null;, +		return propertySource;, +++ /dev/null, +++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.builder;, +, +import org.junit.After;, +import org.junit.Test;, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Configuration;]