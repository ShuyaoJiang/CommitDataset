[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull(), +				.to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull(), +				.to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize), +				.when(JettyCustomizer::isPositive).to(maxHttpHeaderSize ->, +				customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize), +				.when(JettyCustomizer::isPositive), +		propertyMapper.from(jettyProperties::getAccesslog), +				.when(ServerProperties.Jetty.Accesslog::isEnabled), +	private static boolean isPositive(Integer value) {, +		return value > 0;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull(), +				.to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull(), +				.to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize), +				.when(JettyCustomizer::isPositive).to(maxHttpHeaderSize ->, +				customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize), +				.when(JettyCustomizer::isPositive), +		propertyMapper.from(jettyProperties::getAccesslog), +				.when(ServerProperties.Jetty.Accesslog::isEnabled), +	private static boolean isPositive(Integer value) {, +		return value > 0;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/tomcat/TomcatCustomizer.java, + * @author Stephane Nicoll, +		propertyMapper.from(tomcatProperties::getBasedir).whenNonNull(), +				.to(factory::setBaseDirectory);, +				.as(Duration::getSeconds).as(Long::intValue), +				.to(factory::setBackgroundProcessorDelay);, +		propertyMapper.from(tomcatProperties::getMaxThreads), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(tomcatProperties::getMinSpareThreads), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(() -> determineMaxHttpHeaderSize(serverProperties, tomcatProperties)), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(tomcatProperties::getMaxHttpPostSize), +				.when(maxHttpPostSize -> maxHttpPostSize != 0), +		propertyMapper.from(tomcatProperties::getAccesslog), +				.when(ServerProperties.Tomcat.Accesslog::isEnabled), +		propertyMapper.from(tomcatProperties::getUriEncoding).whenNonNull(), +				.to(factory::setUriEncoding);, +		propertyMapper.from(tomcatProperties::getMaxConnections), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(tomcatProperties::getAcceptCount), +				.when(TomcatCustomizer::isPositive), +	private static boolean isPositive(int value) {, +		return value > 0;, +	}, +, +	private static int determineMaxHttpHeaderSize(ServerProperties serverProperties,, +			ServerProperties.Tomcat tomcatProperties) {, +		return serverProperties.getMaxHttpHeaderSize() > 0, +				? serverProperties.getMaxHttpHeaderSize(), +				: tomcatProperties.getMaxHttpHeaderSize();, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull(), +				.to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull(), +				.to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize), +				.when(JettyCustomizer::isPositive).to(maxHttpHeaderSize ->, +				customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize), +				.when(JettyCustomizer::isPositive), +		propertyMapper.from(jettyProperties::getAccesslog), +				.when(ServerProperties.Jetty.Accesslog::isEnabled), +	private static boolean isPositive(Integer value) {, +		return value > 0;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/tomcat/TomcatCustomizer.java, + * @author Stephane Nicoll, +		propertyMapper.from(tomcatProperties::getBasedir).whenNonNull(), +				.to(factory::setBaseDirectory);, +				.as(Duration::getSeconds).as(Long::intValue), +				.to(factory::setBackgroundProcessorDelay);, +		propertyMapper.from(tomcatProperties::getMaxThreads), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(tomcatProperties::getMinSpareThreads), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(() -> determineMaxHttpHeaderSize(serverProperties, tomcatProperties)), +				.when(TomcatCustomizer::isPositive), +		propertyMapper.from(tomcatProperties::getMaxHttpPostSize), +				.when(maxHttpPostSize -> maxHttpPostSize != 0), +		propertyMapper.from(tomcatProperties::getAccesslog), +				.when(ServerProperties.Tomcat.Accesslog::isEnabled), +		propertyMapper.from(tomcatProperties::getUriEncoding).whenNonNull(), +				.to(factory::setUriEncoding);, +		propertyMapper.from(tomcatProperties::getMaxConnections)]