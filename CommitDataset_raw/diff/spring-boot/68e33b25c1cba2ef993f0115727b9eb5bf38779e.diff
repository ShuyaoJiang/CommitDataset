[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.liquibase</groupId>, +			<artifactId>liquibase-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.liquibase</groupId>, +			<artifactId>liquibase-core</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.liquibase;, +, +import javax.annotation.PostConstruct;, +import javax.sql.DataSource;, +, +import liquibase.integration.spring.SpringLiquibase;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.util.Assert;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for Liquibase., + * , + * @author Marcel Overdijk, + */, +@Configuration, +@ConditionalOnClass(SpringLiquibase.class), +@AutoConfigureAfter(DataSourceAutoConfiguration.class), +public class LiquibaseAutoConfiguration {, +, +	@Configuration, +	@ConditionalOnMissingBean(SpringLiquibase.class), +	@EnableConfigurationProperties(LiquibaseProperties.class), +	public static class LiquibaseConfiguration {, +, +		@Autowired, +		private LiquibaseProperties properties = new LiquibaseProperties();, +, +		@Autowired, +		private ResourceLoader resourceLoader = new DefaultResourceLoader();, +, +		@Autowired, +		private DataSource dataSource;, +, +		@PostConstruct, +		public void checkChangelogExists() {, +			if (this.properties.isCheckChangeLogLocation()) {, +				Resource resource = this.resourceLoader.getResource(this.properties.getChangeLog());, +				Assert.state(resource.exists(), "Cannot find changelog location: ", +						+ resource + " (please add changelog or check your Liquibase configuration)");, +			}, +		}, +, +		@Bean, +		public SpringLiquibase liquibase() {, +			SpringLiquibase liquibase = new SpringLiquibase();, +			liquibase.setChangeLog(this.properties.getChangeLog());, +			liquibase.setContexts(this.properties.getContexts());, +	        liquibase.setDataSource(dataSource);, +	        liquibase.setDefaultSchema(this.properties.getDefaultSchema());, +	        liquibase.setDropFirst(this.properties.isDropFirst());, +	        liquibase.setShouldRun(this.properties.isShouldRun());, +			return liquibase;, +		}, +	}, +}, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.liquibase</groupId>, +			<artifactId>liquibase-core</artifactId>, +			<optional>true</optional>]