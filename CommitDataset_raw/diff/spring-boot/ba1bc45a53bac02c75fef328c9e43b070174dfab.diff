[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraAutoConfiguration.java, +		CassandraProperties.Pool pool = this.properties.getPool();, +		options.setIdleTimeoutSeconds(pool.getIdleTimeout());, +		options.setPoolTimeoutMillis(pool.getPoolTimeout());, +		options.setHeartbeatIntervalSeconds(pool.getHeartbeatInterval());, +		options.setMaxQueueSize(pool.getMaxQueueSize());, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraAutoConfiguration.java, +		CassandraProperties.Pool pool = this.properties.getPool();, +		options.setIdleTimeoutSeconds(pool.getIdleTimeout());, +		options.setPoolTimeoutMillis(pool.getPoolTimeout());, +		options.setHeartbeatIntervalSeconds(pool.getHeartbeatInterval());, +		options.setMaxQueueSize(pool.getMaxQueueSize());, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2017 the original author or authors., + * @author Stephane Nicoll, +	/**, +	 * Pool configuration., +	 */, +	private final Pool pool = new Pool();, +, +	public Pool getPool() {, +		return this.pool;, +	}, +, +	/**, +	 * Pool properties., +	 */, +	public static class Pool {, +, +		/**, +		 * Idle timeout (in seconds) before an idle connection is removed., +		 */, +		private int idleTimeout = 120;, +, +		/**, +		 * Pool timeout (in milliseconds) when trying to acquire a connection from a, +		 * host's pool., +		 */, +		private int poolTimeout = 5000;, +, +		/**, +		 * Heartbeat interval (in seconds) after which a message is sent on an idle, +		 * connection to make sure it's still alive., +		 */, +		private int heartbeatInterval = 30;, +, +		/**, +		 * Maximum number of requests that get enqueued if no connection is available., +		 */, +		private int maxQueueSize = 256;, +, +		public int getIdleTimeout() {, +			return this.idleTimeout;, +		}, +, +		public void setIdleTimeout(int idleTimeout) {, +			this.idleTimeout = idleTimeout;, +		}, +, +		public int getPoolTimeout() {, +			return this.poolTimeout;, +		}, +, +		public void setPoolTimeout(int poolTimeout) {, +			this.poolTimeout = poolTimeout;, +		}, +, +		public int getHeartbeatInterval() {, +			return this.heartbeatInterval;, +		}, +, +		public void setHeartbeatInterval(int heartbeatInterval) {, +			this.heartbeatInterval = heartbeatInterval;, +		}, +, +		public int getMaxQueueSize() {, +			return this.maxQueueSize;, +		}, +, +		public void setMaxQueueSize(int maxQueueSize) {, +			this.maxQueueSize = maxQueueSize;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraAutoConfiguration.java, +		CassandraProperties.Pool pool = this.properties.getPool();, +		options.setIdleTimeoutSeconds(pool.getIdleTimeout());, +		options.setPoolTimeoutMillis(pool.getPoolTimeout());, +		options.setHeartbeatIntervalSeconds(pool.getHeartbeatInterval());, +		options.setMaxQueueSize(pool.getMaxQueueSize());, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/CassandraProperties.java, + * Copyright 2012-2017 the original author or authors., + * @author Stephane Nicoll, +	/**, +	 * Pool configuration., +	 */]