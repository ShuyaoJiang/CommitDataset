[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger logger = LoggerFactory.getLogger(RedisSessionConfiguration.class);, +, +		private SessionProperties sessionProperties;, +, +			this.sessionProperties = sessionProperties;, +			Integer timeout = this.sessionProperties.getTimeout();, +			SessionProperties.Redis redis = this.sessionProperties.getRedis();, +		@PostConstruct, +		public void validate() {, +			if (this.sessionProperties.getStoreType() == null) {, +				logger.warn("Spring Session store type is mandatory: set " +, +						"'spring.session.store-type=redis' in your configuration");, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger logger = LoggerFactory.getLogger(RedisSessionConfiguration.class);, +, +		private SessionProperties sessionProperties;, +, +			this.sessionProperties = sessionProperties;, +			Integer timeout = this.sessionProperties.getTimeout();, +			SessionProperties.Redis redis = this.sessionProperties.getRedis();, +		@PostConstruct, +		public void validate() {, +			if (this.sessionProperties.getStoreType() == null) {, +				logger.warn("Spring Session store type is mandatory: set " +, +						"'spring.session.store-type=redis' in your configuration");, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +import org.springframework.util.ClassUtils;, +	private static final boolean redisPresent = ClassUtils.isPresent(, +			"org.springframework.data.redis.core.RedisTemplate", SessionCondition.class.getClassLoader());, +, +		if (!resolver.containsProperty("store-type")) {, +			if (sessionStoreType == StoreType.REDIS && redisPresent) {, +				return ConditionOutcome.match("Session store type default to redis (deprecated)");, +			}, +			else {, +				return ConditionOutcome.noMatch("Session store type not set");, +			}, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger logger = LoggerFactory.getLogger(RedisSessionConfiguration.class);, +, +		private SessionProperties sessionProperties;, +, +			this.sessionProperties = sessionProperties;, +			Integer timeout = this.sessionProperties.getTimeout();, +			SessionProperties.Redis redis = this.sessionProperties.getRedis();, +		@PostConstruct, +		public void validate() {, +			if (this.sessionProperties.getStoreType() == null) {, +				logger.warn("Spring Session store type is mandatory: set " +, +						"'spring.session.store-type=redis' in your configuration");, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionCondition.java, +import org.springframework.util.ClassUtils;, +	private static final boolean redisPresent = ClassUtils.isPresent(, +			"org.springframework.data.redis.core.RedisTemplate", SessionCondition.class.getClassLoader());, +, +		if (!resolver.containsProperty("store-type")) {, +			if (sessionStoreType == StoreType.REDIS && redisPresent) {, +				return ConditionOutcome.match("Session store type default to redis (deprecated)");, +			}, +			else {, +				return ConditionOutcome.noMatch("Session store type not set");, +			}, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +		mappings.put(StoreType.MONGO, MongoSessionConfiguration.class);, +		mappings.put(StoreType.JDBC, JdbcSessionConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java, +import javax.annotation.PostConstruct;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger logger = LoggerFactory.getLogger(RedisSessionConfiguration.class);, +]