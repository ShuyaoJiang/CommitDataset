[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +		return (ClassUtils.isPresent(, +				"org.springframework.security.config.http.SessionCreationPolicy", null) ? new Security(), +				: null);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +		return (ClassUtils.isPresent(, +				"org.springframework.security.config.http.SessionCreationPolicy", null) ? new Security(), +				: null);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/security/AuthenticationAuditListener.java, +import org.springframework.util.ClassUtils;, +	private WebAuditListener webListener = maybeCreateWebListener();, +, +	private static WebAuditListener maybeCreateWebListener() {, +		if (ClassUtils, +				.isPresent(, +						"org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent",, +						null)) {, +			return new WebAuditListener();, +		}, +		return null;, +	}, +, +		else if (this.webListener != null && this.webListener.accepts(event)) {, +			this.webListener.process(this, event);, +	private static class WebAuditListener {, +, +		public void process(AuthenticationAuditListener listener,, +				AbstractAuthenticationEvent input) {, +			if (listener != null) {, +				AuthenticationSwitchUserEvent event = (AuthenticationSwitchUserEvent) input;, +				Map<String, Object> data = new HashMap<String, Object>();, +				if (event.getAuthentication().getDetails() != null) {, +					data.put("details", event.getAuthentication().getDetails());, +				}, +				data.put("target", event.getTargetUser().getUsername());, +				listener.publish(new AuditEvent(event.getAuthentication().getName(),, +						"AUTHENTICATION_SWITCH", data));, +			}, +, +		}, +, +		public boolean accepts(AbstractAuthenticationEvent event) {, +			return event instanceof AuthenticationSwitchUserEvent;, +		}, +, +	}, +]