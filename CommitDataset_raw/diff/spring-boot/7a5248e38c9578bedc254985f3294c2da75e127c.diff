[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class }), +	@Conditional(DataSourceAutoConfiguration.EmbeddedDataSourceCondition.class), +, +	@Conditional(DataSourceAutoConfiguration.NonEmbeddedDataSourceCondition.class), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	 * {@link Condition} to test is a supported non-embedded {@link DataSource} type is, +	 * available., +	static class NonEmbeddedDataSourceCondition extends SpringBootCondition {, +			if (getDataSourceClassLoader(context) != null) {, +				return ConditionOutcome.match("supported DataSource class found");, +			return (dataSourceClass == null ? null : dataSourceClass.getClassLoader());, +	 * {@link Condition} to detect when an embedded {@link DataSource} type can be used., +	static class EmbeddedDataSourceCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +	 * {@link Condition} to detect when a {@link DataSource} is available (either because, +	 * the user provided one or because one will be auto-configured), +	static class DataSourceAvailableCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +		private final SpringBootCondition embeddedCondition = new EmbeddedDataSourceCondition();, +			if (hasBean(context, DataSource.class)) {, +				return ConditionOutcome, +						.match("existing bean configured database detected");, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class }), +	@Conditional(DataSourceAutoConfiguration.EmbeddedDataSourceCondition.class), +, +	@Conditional(DataSourceAutoConfiguration.NonEmbeddedDataSourceCondition.class), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	 * {@link Condition} to test is a supported non-embedded {@link DataSource} type is, +	 * available., +	static class NonEmbeddedDataSourceCondition extends SpringBootCondition {, +			if (getDataSourceClassLoader(context) != null) {, +				return ConditionOutcome.match("supported DataSource class found");, +			return (dataSourceClass == null ? null : dataSourceClass.getClassLoader());, +	 * {@link Condition} to detect when an embedded {@link DataSource} type can be used., +	static class EmbeddedDataSourceCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +	 * {@link Condition} to detect when a {@link DataSource} is available (either because, +	 * the user provided one or because one will be auto-configured), +	static class DataSourceAvailableCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +		private final SpringBootCondition embeddedCondition = new EmbeddedDataSourceCondition();, +			if (hasBean(context, DataSource.class)) {, +				return ConditionOutcome, +						.match("existing bean configured database detected");, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +	@SuppressWarnings("unchecked"), +			try {, +				return (Class<? extends DataSource>) ClassUtils.forName(name,, +						this.classLoader);, +			}, +			catch (Exception ex) {, +				// Swallow and continue, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class }), +	@Conditional(DataSourceAutoConfiguration.EmbeddedDataSourceCondition.class), +, +	@Conditional(DataSourceAutoConfiguration.NonEmbeddedDataSourceCondition.class), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	 * {@link Condition} to test is a supported non-embedded {@link DataSource} type is, +	 * available., +	static class NonEmbeddedDataSourceCondition extends SpringBootCondition {, +			if (getDataSourceClassLoader(context) != null) {, +				return ConditionOutcome.match("supported DataSource class found");, +			return (dataSourceClass == null ? null : dataSourceClass.getClassLoader());, +	 * {@link Condition} to detect when an embedded {@link DataSource} type can be used., +	static class EmbeddedDataSourceCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +	 * {@link Condition} to detect when a {@link DataSource} is available (either because, +	 * the user provided one or because one will be auto-configured), +	static class DataSourceAvailableCondition extends SpringBootCondition {, +		private final SpringBootCondition nonEmbedded = new NonEmbeddedDataSourceCondition();, +		private final SpringBootCondition embeddedCondition = new EmbeddedDataSourceCondition();, +			if (hasBean(context, DataSource.class)) {, +				return ConditionOutcome, +						.match("existing bean configured database detected");, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +	@SuppressWarnings("unchecked"), +			try {, +				return (Class<? extends DataSource>) ClassUtils.forName(name,, +						this.classLoader);, +			}, +			catch (Exception ex) {, +				// Swallow and continue, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class }), +	@Conditional(DataSourceAutoConfiguration.EmbeddedDataSourceCondition.class), +, +	@Conditional(DataSourceAutoConfiguration.NonEmbeddedDataSourceCondition.class), +	@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class), +	 * {@link Condition} to test is a supported non-embedded {@link DataSource} type is, +	 * available., +	static class NonEmbeddedDataSourceCondition extends SpringBootCondition {, +			if (getDataSourceClassLoader(context) != null) {]