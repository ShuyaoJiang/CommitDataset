[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MongoAutoConfiguration.class,, +		MongoDataAutoConfiguration.class, RedisAutoConfiguration.class,, +		RabbitAutoConfiguration.class }), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +/*, + * Copyright 2013-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.endpoint;, +, +import java.util.Map;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +public class ConfigurationPropertiesReportEndpointSerializationTests {, +, +	private AnnotationConfigApplicationContext context;, +, +	@Before, +	public void setup() {, +		this.context = new AnnotationConfigApplicationContext();, +	}, +, +	@After, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +	public void testNaming() throws Exception {, +		this.context.register(Config.class);, +		EnvironmentTestUtils.addEnvironment(this.context, "foo.name:foo");, +		this.context.refresh();, +		ConfigurationPropertiesReportEndpoint report = this.context, +				.getBean(ConfigurationPropertiesReportEndpoint.class);, +		Map<String, Object> properties = report.invoke();, +		Map<String, Object> nestedProperties = (Map<String, Object>) properties, +				.get("foo");, +		assertNotNull(nestedProperties);, +		assertEquals("foo", nestedProperties.get("prefix"));, +		Map<String, Object> map = (Map<String, Object>) nestedProperties, +				.get("properties");, +		assertNotNull(map);, +		assertEquals(1, map.size());, +		assertEquals("foo", map.get("name"));, +	}, +, +	@Configuration, +	@EnableConfigurationProperties, +	public static class Config {, +, +		@Bean, +		public ConfigurationPropertiesReportEndpoint endpoint(, +				ConfigurationBeanFactoryMetaData beanFactoryMetaData) {, +			ConfigurationPropertiesReportEndpoint endpoint = new ConfigurationPropertiesReportEndpoint();, +			endpoint.setConfigurationBeanFactoryMetaData(beanFactoryMetaData);, +			return endpoint;, +		}, +, +		@Bean, +		@ConfigurationProperties(prefix = "foo"), +		public Foo foo() {, +			return new Foo();, +		}, +, +	}, +, +	public static class Foo {]