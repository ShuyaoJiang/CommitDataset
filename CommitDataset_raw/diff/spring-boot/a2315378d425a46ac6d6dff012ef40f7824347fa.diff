[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +					throw new IllegalStateException("Invalid mongo configuration, ", +							+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +					throw new IllegalStateException("Invalid mongo configuration, ", +							+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +					throw new IllegalStateException("Invalid mongo configuration, ", +							+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Author.java, +@Generated(value = { "http://www.jooq.org",, +		"jOOQ version:3.8.2" }, comments = "This class is generated by jOOQ"), +	public final TableField<Record, Integer> ID = createField("ID",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +	public final TableField<Record, String> FIRST_NAME = createField("FIRST_NAME",, +			org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");, +	public final TableField<Record, String> LAST_NAME = createField("LAST_NAME",, +			org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");, +	public final TableField<Record, Date> DATE_OF_BIRTH = createField("DATE_OF_BIRTH",, +			org.jooq.impl.SQLDataType.DATE, this, "");, +	public final TableField<Record, Integer> YEAR_OF_BIRTH = createField("YEAR_OF_BIRTH",, +			org.jooq.impl.SQLDataType.INTEGER, this, "");, +	public final TableField<Record, Byte> DISTINGUISHED = createField("DISTINGUISHED",, +			org.jooq.impl.SQLDataType.TINYINT, this, "");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +					throw new IllegalStateException("Invalid mongo configuration, ", +							+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +		this.thrown.expectMessage("Invalid mongo configuration, ", +				+ "either uri or host/port/credentials must be specified");, +++ b/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Author.java, +@Generated(value = { "http://www.jooq.org",, +		"jOOQ version:3.8.2" }, comments = "This class is generated by jOOQ"), +	public final TableField<Record, Integer> ID = createField("ID",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +	public final TableField<Record, String> FIRST_NAME = createField("FIRST_NAME",, +			org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");, +	public final TableField<Record, String> LAST_NAME = createField("LAST_NAME",, +			org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");, +	public final TableField<Record, Date> DATE_OF_BIRTH = createField("DATE_OF_BIRTH",, +			org.jooq.impl.SQLDataType.DATE, this, "");, +	public final TableField<Record, Integer> YEAR_OF_BIRTH = createField("YEAR_OF_BIRTH",, +			org.jooq.impl.SQLDataType.INTEGER, this, "");, +	public final TableField<Record, Byte> DISTINGUISHED = createField("DISTINGUISHED",, +			org.jooq.impl.SQLDataType.TINYINT, this, "");, +++ b/spring-boot-samples/spring-boot-sample-jooq/gensrc/main/java/sample/jooq/domain/Book.java, +@Generated(value = { "http://www.jooq.org",, +		"jOOQ version:3.8.2" }, comments = "This class is generated by jOOQ"), +	public final TableField<Record, Integer> ID = createField("ID",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +	public final TableField<Record, Integer> AUTHOR_ID = createField("AUTHOR_ID",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +	public final TableField<Record, String> TITLE = createField("TITLE",, +			org.jooq.impl.SQLDataType.VARCHAR.length(400).nullable(false), this, "");, +	public final TableField<Record, Integer> PUBLISHED_IN = createField("PUBLISHED_IN",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +	public final TableField<Record, Integer> LANGUAGE_ID = createField("LANGUAGE_ID",, +			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");, +		return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_BOOK_AUTHOR,, +				Keys.FK_BOOK_LANGUAGE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +		@DeprecatedConfigurationProperty(reason = "Caffeine will supersede the Guava support in Spring Boot 2.0", replacement = "spring.cache.caffeine.spec"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheType.java, +	@Deprecated GUAVA,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +					throw new IllegalStateException("Invalid mongo configuration, "]