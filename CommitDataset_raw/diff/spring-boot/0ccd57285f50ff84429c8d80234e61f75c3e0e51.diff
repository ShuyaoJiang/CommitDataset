[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.boot.system.JavaVersion;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.boot.system.JavaVersion;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +import org.springframework.boot.system.JavaVersion;, +		boolean match = isWithin(runningVersion, range, version);, +	/**, +	 * Determines if the {@code runningVersion} is within the specified range of versions., +	 * @param runningVersion the current version., +	 * @param range the range, +	 * @param version the bounds of the range, +	 * @return if this version is within the specified range, +	 */, +	private boolean isWithin(JavaVersion runningVersion, Range range, JavaVersion version) {, +		int i = runningVersion.compareTo(version);, +		if (range == Range.EQUAL_OR_NEWER) {, +			return i >= 0;, +		}, +		else if (range == Range.OLDER_THAN) {, +			return i < 0;, +		}, +		throw new IllegalStateException("Unknown range " + range);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.boot.system.JavaVersion;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +import org.springframework.boot.system.JavaVersion;, +		boolean match = isWithin(runningVersion, range, version);, +	/**, +	 * Determines if the {@code runningVersion} is within the specified range of versions., +	 * @param runningVersion the current version., +	 * @param range the range, +	 * @param version the bounds of the range, +	 * @return if this version is within the specified range, +	 */, +	private boolean isWithin(JavaVersion runningVersion, Range range, JavaVersion version) {, +		int i = runningVersion.compareTo(version);, +		if (range == Range.EQUAL_OR_NEWER) {, +			return i >= 0;, +		}, +		else if (range == Range.OLDER_THAN) {, +			return i < 0;, +		}, +		throw new IllegalStateException("Unknown range " + range);, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +import org.springframework.boot.system.JavaVersion;, +				.loadClass(JavaVersion.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.springframework.boot.system.JavaVersion;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnJavaCondition.java, +import org.springframework.boot.system.JavaVersion;, +		boolean match = isWithin(runningVersion, range, version);, +	/**, +	 * Determines if the {@code runningVersion} is within the specified range of versions., +	 * @param runningVersion the current version., +	 * @param range the range, +	 * @param version the bounds of the range, +	 * @return if this version is within the specified range, +	 */, +	private boolean isWithin(JavaVersion runningVersion, Range range, JavaVersion version) {, +		int i = runningVersion.compareTo(version);, +		if (range == Range.EQUAL_OR_NEWER) {, +			return i >= 0;, +		}, +		else if (range == Range.OLDER_THAN) {, +			return i < 0;, +		}, +		throw new IllegalStateException("Unknown range " + range);, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +import org.springframework.boot.system.JavaVersion;, +				.loadClass(JavaVersion.class.getName());, +++ b/spring-boot/src/main/java/org/springframework/boot/system/JavaVersion.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.system;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +]