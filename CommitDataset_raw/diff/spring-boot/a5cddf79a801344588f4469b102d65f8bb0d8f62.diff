[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, +			fileHeader.load(bytes, dataOffset, null, 0, null);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, +			fileHeader.load(bytes, dataOffset, null, 0, null);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, + * Copyright 2012-2016 the original author or authors., +			return JarURLConnection.get(url, this.jarFile);, +			return JarURLConnection.get(url, getRootJarFileFromUrl(url));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, +			fileHeader.load(bytes, dataOffset, null, 0, null);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, + * Copyright 2012-2016 the original author or authors., +			return JarURLConnection.get(url, this.jarFile);, +			return JarURLConnection.get(url, getRootJarFileFromUrl(url));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header) {, +		super(header.getName().toString());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, +			fileHeader.load(bytes, dataOffset, null, 0, null);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, + * Copyright 2012-2016 the original author or authors., +			return JarURLConnection.get(url, this.jarFile);, +			return JarURLConnection.get(url, getRootJarFileFromUrl(url));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header) {, +		super(header.getName().toString());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	public boolean containsEntry(String name) {, +		return this.entries.containsEntry(name);, +	}, +, +		return this.rootFile.getFile() + this.pathFromRoot;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryFileHeader.java, +			int variableOffset, JarEntryFilter filter) throws IOException {, +		if (filter != null) {, +			this.name = filter.apply(this.name);, +		}, +			int offset, JarEntryFilter filter) throws IOException {, +		fileHeader.load(bytes, 0, data, offset, filter);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java, +			fileHeader.load(bytes, dataOffset, null, 0, null);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, + * Copyright 2012-2016 the original author or authors., +			return JarURLConnection.get(url, this.jarFile);, +			return JarURLConnection.get(url, getRootJarFileFromUrl(url));, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarEntry.java, +	JarEntry(JarFile jarFile, CentralDirectoryFileHeader header) {, +		super(header.getName().toString());, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	public boolean containsEntry(String name) {, +		return this.entries.containsEntry(name);, +	}, +, +		return this.rootFile.getFile() + this.pathFromRoot;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java, +	private final Map<Integer, FileHeader> entriesCache = Collections, +			.synchronizedMap(new LinkedHashMap<Integer, FileHeader>(16, 0.75f, true) {, +				protected boolean removeEldestEntry(, +						Map.Entry<Integer, FileHeader> eldest) {, +	public boolean containsEntry(String name) {, +		return getEntry(name, FileHeader.class, true) != null;, +	}, +, +			FileHeader cached = this.entriesCache.get(index);, +			FileHeader entry = (cached != null ? cached]