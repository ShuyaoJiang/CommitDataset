[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ContextLoader.java, +	 * Add the specified auto-configurations at the beginning (in that order) so that it, +	 * is applied before any other existing auto-configurations, but after any, +	 * user configuration. If {@code A} and {@code B} are specified, {@code A} will, +	 * be processed, then {@code B} and finally the rest of the existing, +	 * auto-configuration., +	 * @param autoConfigurations the auto-configuration to add, +	public ContextLoader autoConfigFirst(Class<?>... autoConfigurations) {, +		this.autoConfigurations.addAll(0, Arrays.asList(autoConfigurations));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ContextLoader.java, +	 * Add the specified auto-configurations at the beginning (in that order) so that it, +	 * is applied before any other existing auto-configurations, but after any, +	 * user configuration. If {@code A} and {@code B} are specified, {@code A} will, +	 * be processed, then {@code B} and finally the rest of the existing, +	 * auto-configuration., +	 * @param autoConfigurations the auto-configuration to add, +	public ContextLoader autoConfigFirst(Class<?>... autoConfigurations) {, +		this.autoConfigurations.addAll(0, Arrays.asList(autoConfigurations));, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/rule/ContextLoaderTests.java, +	public void autoConfigureFirstWithSeveralConfigsIsAppliedProperly() {, +		this.contextLoader.autoConfig(ConfigA.class, ConfigB.class), +				.autoConfigFirst(AutoConfigA.class, AutoConfigB.class), +				.load(context -> {, +					assertThat(context.getBean("a")).isEqualTo("a");, +					assertThat(context.getBean("b")).isEqualTo(1);, +				});, +	}, +, +	@Test]