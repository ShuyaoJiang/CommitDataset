[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/DefaultCounterService.java, +		if (metricName.startsWith("counter.") || metricName.startsWith("meter.")) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/DefaultCounterService.java, +		if (metricName.startsWith("counter.") || metricName.startsWith("meter.")) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/writer/DefaultCounterServiceTests.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +, +	public void incrementWithExistingCounter() {, +		this.service.increment("counter.foo");, +		verify(this.repository).increment(this.captor.capture());, +		assertEquals("counter.foo", this.captor.getValue().getName());, +		assertEquals(1L, this.captor.getValue().getValue());, +	}, +, +	@Test, +	public void incrementWithExistingNearlyCounter() {, +		this.service.increment("counter-foo");, +		verify(this.repository).increment(this.captor.capture());, +		assertEquals("counter.counter-foo", this.captor.getValue().getName());, +		assertEquals(1L, this.captor.getValue().getValue());, +	}, +, +	@Test]