[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,, +			DataSourceJmxConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,, +			DataSourceJmxConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import javax.annotation.PostConstruct;, +, +import com.zaxxer.hikari.HikariDataSource;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.jmx.export.MBeanExporter;, +, +/**, + * Configures DataSource related MBeans., + *, + * @author Stephane Nicoll, + */, +@Configuration, +@ConditionalOnProperty(prefix = "spring.jmx", name = "enabled", havingValue = "true", matchIfMissing = true), +class DataSourceJmxConfiguration {, +, +	@Configuration, +	@ConditionalOnClass(HikariDataSource.class), +	@ConditionalOnSingleCandidate(HikariDataSource.class), +	static class Hikari {, +, +		private final HikariDataSource dataSource;, +, +		private final ObjectProvider<MBeanExporter> mBeanExporter;, +, +		Hikari(HikariDataSource dataSource,, +				ObjectProvider<MBeanExporter> mBeanExporter) {, +			this.dataSource = dataSource;, +			this.mBeanExporter = mBeanExporter;, +		}, +, +		@PostConstruct, +		public void validateMBeans() {, +			MBeanExporter exporter = this.mBeanExporter.getIfUnique();, +			if (exporter != null && this.dataSource.isRegisterMbeans()) {, +				exporter.addExcludedBean("dataSource");, +			}, +		}, +, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,, +			DataSourceJmxConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import javax.annotation.PostConstruct;, +, +import com.zaxxer.hikari.HikariDataSource;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;]