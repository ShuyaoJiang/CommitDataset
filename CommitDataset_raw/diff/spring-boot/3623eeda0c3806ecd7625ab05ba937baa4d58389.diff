[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			liquibase.setRollbackFile(this.properties.getRollbackFile());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			liquibase.setRollbackFile(this.properties.getRollbackFile());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +import java.io.File;, +	/**, +	 * The file to which rollback SQL will be written when an update is performed., +	 */, +	private File rollbackFile;, +, +	public File getRollbackFile() {, +		return this.rollbackFile;, +	}, +, +	public void setRollbackFile(File rollbackFile) {, +		this.rollbackFile = rollbackFile;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +			liquibase.setRollbackFile(this.properties.getRollbackFile());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +import java.io.File;, +	/**, +	 * The file to which rollback SQL will be written when an update is performed., +	 */, +	private File rollbackFile;, +, +	public File getRollbackFile() {, +		return this.rollbackFile;, +	}, +, +	public void setRollbackFile(File rollbackFile) {, +		this.rollbackFile = rollbackFile;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +import java.io.File;, +import org.junit.rules.TemporaryFolder;, +import org.springframework.util.FileCopyUtils;, +	@Rule, +	public TemporaryFolder temp = new TemporaryFolder();, +, +	@Test, +	public void testRollbackFile() throws Exception {, +		File file = this.temp.newFile("rollback-file.sql");, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"liquibase.rollbackFile:" + file.getAbsolutePath());, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				LiquibaseAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		SpringLiquibase liquibase = this.context.getBean(SpringLiquibase.class);, +		File actualFile = (File) ReflectionTestUtils.getField(liquibase, "rollbackFile");, +		assertThat(actualFile).isEqualTo(file).exists();, +		String content = new String(FileCopyUtils.copyToByteArray(file));, +		assertThat(content).contains("DROP TABLE PUBLIC.customer;");, +	}, +]