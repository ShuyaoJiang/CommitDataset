[+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java, +	private final Map<Class<?>, Class<?>> subtypes = new HashMap<Class<?>, Class<?>>();, +, +		Class<?> type = ex.getClass();, +		String errorPath = this.global;, +		if (this.exceptions.containsKey(type)) {, +			errorPath = this.exceptions.get(type);, +		}, +		else {, +			if (this.subtypes.containsKey(type)) {, +				errorPath = this.exceptions.get(this.subtypes.get(type));, +			}, +			else {, +				Class<?> subtype = type;, +				while (subtype != Object.class) {, +					subtype = subtype.getSuperclass();, +					if (this.exceptions.containsKey(subtype)) {, +						this.subtypes.put(subtype, type);, +						errorPath = this.exceptions.get(subtype);, +						break;, +					}, +				}, +			}, +		}, +		request.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java, +	private final Map<Class<?>, Class<?>> subtypes = new HashMap<Class<?>, Class<?>>();, +, +		Class<?> type = ex.getClass();, +		String errorPath = this.global;, +		if (this.exceptions.containsKey(type)) {, +			errorPath = this.exceptions.get(type);, +		}, +		else {, +			if (this.subtypes.containsKey(type)) {, +				errorPath = this.exceptions.get(this.subtypes.get(type));, +			}, +			else {, +				Class<?> subtype = type;, +				while (subtype != Object.class) {, +					subtype = subtype.getSuperclass();, +					if (this.exceptions.containsKey(subtype)) {, +						this.subtypes.put(subtype, type);, +						errorPath = this.exceptions.get(subtype);, +						break;, +					}, +				}, +			}, +		}, +		request.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());, +++ b/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorPageFilterTests.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.web;, +, +import java.io.IOException;, +, +import javax.servlet.RequestDispatcher;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletResponse;, +import javax.servlet.http.HttpServletResponseWrapper;, +, +import org.junit.Test;, +import org.springframework.boot.context.embedded.ErrorPage;, +import org.springframework.http.HttpStatus;, +import org.springframework.mock.web.MockFilterChain;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +, +/**, + * Tests for {@link ErrorPageFilter}., + * , + * @author Dave Syer, + */, +public class ErrorPageFilterTests {, +, +	private ErrorPageFilter filter = new ErrorPageFilter();, +, +	private MockHttpServletRequest request = new MockHttpServletRequest();, +, +	private MockHttpServletResponse response = new MockHttpServletResponse();]