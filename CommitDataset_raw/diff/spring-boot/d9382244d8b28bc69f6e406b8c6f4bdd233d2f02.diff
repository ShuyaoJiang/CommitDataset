[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, + * Copyright 2012-2016 the original author or authors., +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, + * @author Andy Wilkinson, +	static class JarEntryName {, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(length);, +			write(source, bos);, +			// AsciiBytes is what is used to store the JarEntries so make it symmetric, +			return new AsciiBytes(bos.toByteArray()).toString();, +		}, +, +		private void write(String source, ByteArrayOutputStream outputStream) {, +			int length = source.length();, +				if (c > 127) {, +					try {, +						String encoded = URLEncoder.encode(String.valueOf((char) c),, +								"UTF-8");, +						write(encoded, outputStream);, +					}, +					catch (UnsupportedEncodingException ex) {, +						throw new IllegalStateException(ex);, +					}, +				}, +				else {, +							throw new IllegalArgumentException(, +									"Invalid encoded sequence \"" + source.substring(i), +											+ "\"");, +			}, +			return this.name;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java, + * Copyright 2012-2016 the original author or authors., +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, + * @author Andy Wilkinson, +	static class JarEntryName {, +			ByteArrayOutputStream bos = new ByteArrayOutputStream(length);, +			write(source, bos);, +			// AsciiBytes is what is used to store the JarEntries so make it symmetric, +			return new AsciiBytes(bos.toByteArray()).toString();, +		}, +, +		private void write(String source, ByteArrayOutputStream outputStream) {, +			int length = source.length();, +				if (c > 127) {, +					try {, +						String encoded = URLEncoder.encode(String.valueOf((char) c),, +								"UTF-8");, +						write(encoded, outputStream);, +					}, +					catch (UnsupportedEncodingException ex) {, +						throw new IllegalStateException(ex);, +					}, +				}, +				else {, +							throw new IllegalArgumentException(, +									"Invalid encoded sequence \"" + source.substring(i), +											+ "\"");, +			}, +			return this.name;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarEntryNameTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.loader.jar;, +, +import java.io.UnsupportedEncodingException;, +, +import org.junit.Test;, +, +import org.springframework.boot.loader.jar.JarURLConnection.JarEntryName;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link JarEntryName}., + *, + * @author Andy Wilkinson, + */, +public class JarEntryNameTests {, +, +	@Test, +	public void basicName() {, +		assertThat(new JarEntryName("a/b/C.class").toString()).isEqualTo("a/b/C.class");, +	}, +, +	@Test]