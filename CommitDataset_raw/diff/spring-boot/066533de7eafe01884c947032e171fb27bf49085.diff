[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * @author Eddú Meléndez, +			String staticPathPattern = this.mvcProperties.getStaticPathPattern();, +			if (!registry.hasMappingForPattern(staticPathPattern)) {, +				registerResourceChain(registry.addResourceHandler(staticPathPattern), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * @author Eddú Meléndez, +			String staticPathPattern = this.mvcProperties.getStaticPathPattern();, +			if (!registry.hasMappingForPattern(staticPathPattern)) {, +				registerResourceChain(registry.addResourceHandler(staticPathPattern), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Path that pattern used for static resources., +	 */, +	private String staticPathPattern = "/**";, +, +	public String getStaticPathPattern() {, +		return this.staticPathPattern;, +	}, +, +	public void setStaticPathPattern(String staticPathPattern) {, +		this.staticPathPattern = staticPathPattern;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * @author Eddú Meléndez, +			String staticPathPattern = this.mvcProperties.getStaticPathPattern();, +			if (!registry.hasMappingForPattern(staticPathPattern)) {, +				registerResourceChain(registry.addResourceHandler(staticPathPattern), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Path that pattern used for static resources., +	 */, +	private String staticPathPattern = "/**";, +, +	public String getStaticPathPattern() {, +		return this.staticPathPattern;, +	}, +, +	public void setStaticPathPattern(String staticPathPattern) {, +		this.staticPathPattern = staticPathPattern;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, + * @author Eddú Meléndez, +	public void customResourceHandlerMapping() throws Exception {, +		load("spring.mvc.static-path-pattern:/static/**");, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +		assertThat(mappingLocations.get("/static/**").size(), equalTo(5));, +		assertThat(getResourceResolvers("/static/**").size(), equalTo(1));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, + * @author Eddú Meléndez, +			String staticPathPattern = this.mvcProperties.getStaticPathPattern();, +			if (!registry.hasMappingForPattern(staticPathPattern)) {, +				registerResourceChain(registry.addResourceHandler(staticPathPattern), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcProperties.java, + * @author Eddú Meléndez, +	/**, +	 * Path that pattern used for static resources., +	 */, +	private String staticPathPattern = "/**";, +, +	public String getStaticPathPattern() {, +		return this.staticPathPattern;, +	}, +, +	public void setStaticPathPattern(String staticPathPattern) {, +		this.staticPathPattern = staticPathPattern;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, + * @author Eddú Meléndez, +	public void customResourceHandlerMapping() throws Exception {, +		load("spring.mvc.static-path-pattern:/static/**");, +		Map<String, List<Resource>> mappingLocations = getResourceMappingLocations();, +		assertThat(mappingLocations.get("/static/**").size(), equalTo(5));, +		assertThat(getResourceResolvers("/static/**").size(), equalTo(1));, +	}, +, +	@Test, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.mvc.static-path-pattern=/** # Path that pattern used for static resources.]