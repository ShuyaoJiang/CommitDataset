[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +			return createEnvironment(this.properties);, +		/**, +		 * Create a {@link CouchbaseEnvironment} based on the specified settings., +		 * @param properties the couchbase properties to use, +		 * @return a {@link CouchbaseEnvironment}, +		 */, +		protected CouchbaseEnvironment createEnvironment(CouchbaseProperties properties) {, +			CouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();, +			CouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();, +			DefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment.builder(), +					.connectTimeout(timeouts.getConnect()), +					.kvEndpoints(endpoints.getKeyValue()), +					.kvTimeout(timeouts.getKeyValue()), +					.queryEndpoints(endpoints.getQuery()), +					.queryTimeout(timeouts.getQuery()), +					.viewEndpoints(endpoints.getView()), +					.viewTimeout(timeouts.getView());, +			CouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();, +			if (ssl.getEnabled()) {, +				builder.sslEnabled(true);, +				if (ssl.getKeyStore() != null) {, +					builder.sslKeystoreFile(ssl.getKeyStore());, +				}, +				if (ssl.getKeyStorePassword() != null) {, +					builder.sslKeystorePassword(ssl.getKeyStorePassword());, +				}, +			}, +			return builder.build();, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +			return createEnvironment(this.properties);, +		/**, +		 * Create a {@link CouchbaseEnvironment} based on the specified settings., +		 * @param properties the couchbase properties to use, +		 * @return a {@link CouchbaseEnvironment}, +		 */, +		protected CouchbaseEnvironment createEnvironment(CouchbaseProperties properties) {, +			CouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints();, +			CouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts();, +			DefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment.builder(), +					.connectTimeout(timeouts.getConnect()), +					.kvEndpoints(endpoints.getKeyValue()), +					.kvTimeout(timeouts.getKeyValue()), +					.queryEndpoints(endpoints.getQuery()), +					.queryTimeout(timeouts.getQuery()), +					.viewEndpoints(endpoints.getView()), +					.viewTimeout(timeouts.getView());, +			CouchbaseProperties.Ssl ssl = properties.getEnv().getSsl();, +			if (ssl.getEnabled()) {, +				builder.sslEnabled(true);, +				if (ssl.getKeyStore() != null) {, +					builder.sslKeystoreFile(ssl.getKeyStore());, +				}, +				if (ssl.getKeyStorePassword() != null) {, +					builder.sslKeystorePassword(ssl.getKeyStorePassword());, +				}, +			}, +			return builder.build();, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +import org.springframework.util.StringUtils;, +	private final Env env = new Env();, +, +	public Env getEnv() {, +		return this.env;, +	}, +, +, +	public static class Bucket {, +	public static class Env {, +, +		@NestedConfigurationProperty, +		private final Endpoints endpoints = new Endpoints();, +, +		@NestedConfigurationProperty, +		private final Ssl ssl = new Ssl();, +, +		@NestedConfigurationProperty, +		private final Timeouts timeouts = new Timeouts();, +, +		public Endpoints getEndpoints() {, +			return this.endpoints;, +		}, +, +		public Ssl getSsl() {, +			return this.ssl;, +		}, +, +		public Timeouts getTimeouts() {, +			return this.timeouts;, +		}, +, +	}, +, +	public static class Endpoints {, +]