[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(InfluxDbConfiguration.class).withConfiguration(, +					AutoConfigurations.of(InfluxDbHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("management.health.influxdb.enabled:false"), +				.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(InfluxDbConfiguration.class).withConfiguration(, +					AutoConfigurations.of(InfluxDbHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("management.health.influxdb.enabled:false"), +				.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(Neo4jConfiguration.class).withConfiguration(, +					AutoConfigurations.of(Neo4jHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withUserConfiguration(CustomIndicatorConfiguration.class), +				.run((context) -> {, +, +, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(InfluxDbConfiguration.class).withConfiguration(, +					AutoConfigurations.of(InfluxDbHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("management.health.influxdb.enabled:false"), +				.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(Neo4jConfiguration.class).withConfiguration(, +					AutoConfigurations.of(Neo4jHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withUserConfiguration(CustomIndicatorConfiguration.class), +				.run((context) -> {, +, +, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.java, +		Select select = QueryBuilder.select("release_version").from("system", "local");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(InfluxDbConfiguration.class).withConfiguration(, +					AutoConfigurations.of(InfluxDbHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("management.health.influxdb.enabled:false"), +				.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(Neo4jConfiguration.class).withConfiguration(, +					AutoConfigurations.of(Neo4jHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withUserConfiguration(CustomIndicatorConfiguration.class), +				.run((context) -> {, +, +, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.java, +		Select select = QueryBuilder.select("release_version").from("system", "local");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java, +import com.couchbase.client.java.cluster.ClusterInfo;, +	private CouchbaseOperations operations;, +		this.operations = couchbaseOperations;, +		ClusterInfo cluster = this.operations.getCouchbaseClusterInfo();, +		BucketInfo bucket = this.operations.getCouchbaseBucket().bucketManager().info();, +		String versions = StringUtils, +				.collectionToCommaDelimitedString(cluster.getAllVersions());, +		String nodes = StringUtils.collectionToCommaDelimitedString(bucket.nodeList());, +		builder.up().withDetail("versions", versions).withDetail("nodes", nodes);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfiguration.java, +public class InfluxDbHealthIndicatorAutoConfiguration, +		extends CompositeHealthIndicatorConfiguration<InfluxDbHealthIndicator, InfluxDB> {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/influx/InfluxDbHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(InfluxDbConfiguration.class).withConfiguration(, +					AutoConfigurations.of(InfluxDbHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withPropertyValues("management.health.influxdb.enabled:false"), +				.run((context) -> assertThat(context), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +			.withUserConfiguration(Neo4jConfiguration.class).withConfiguration(, +					AutoConfigurations.of(Neo4jHealthIndicatorAutoConfiguration.class,, +		this.contextRunner.withUserConfiguration(CustomIndicatorConfiguration.class), +				.run((context) -> {, +, +, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.java, +		Select select = QueryBuilder.select("release_version").from("system", "local");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java, +import com.couchbase.client.java.cluster.ClusterInfo;, +	private CouchbaseOperations operations;, +		this.operations = couchbaseOperations;, +		ClusterInfo cluster = this.operations.getCouchbaseClusterInfo();, +		BucketInfo bucket = this.operations.getCouchbaseBucket().bucketManager().info();, +		String versions = StringUtils, +				.collectionToCommaDelimitedString(cluster.getAllVersions());, +		String nodes = StringUtils.collectionToCommaDelimitedString(bucket.nodeList());]