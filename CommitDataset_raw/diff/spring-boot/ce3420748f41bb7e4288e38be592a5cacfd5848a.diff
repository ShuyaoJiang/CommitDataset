[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +		restTemplate.getInterceptors().addAll(this.interceptors);, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +		restTemplate.getInterceptors().addAll(this.interceptors);, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java, +import org.springframework.http.client.InterceptingClientHttpRequestFactory;, +	@Test, +	public void customizerShouldBeAppliedInTheEnd() {, +, +		ClientHttpRequestInterceptor interceptor = this.interceptor;, +		HttpMessageConverter<Object> messageConverter = this.messageConverter;, +		ResponseErrorHandler errorHandler = mock(ResponseErrorHandler.class);, +, +		this.builder.interceptors(interceptor).messageConverters(messageConverter), +				.rootUri("http://localhost:8080").errorHandler(errorHandler), +				.basicAuthorization("spring", "boot"), +				.requestFactory(HttpComponentsClientHttpRequestFactory.class), +				.customizers((restTemplate) -> {, +					ClientHttpRequestFactory requestFactory = restTemplate, +							.getRequestFactory();, +					assertThat(restTemplate.getInterceptors()).hasSize(2), +							.contains(interceptor).anyMatch(, +									(ic) -> ic instanceof BasicAuthorizationInterceptor);, +					assertThat(restTemplate.getMessageConverters()), +							.contains(messageConverter);, +					assertThat(restTemplate.getUriTemplateHandler()), +							.isInstanceOf(RootUriTemplateHandler.class);, +					assertThat(restTemplate.getErrorHandler()).isEqualTo(errorHandler);, +					assertThat(requestFactory), +							.isInstanceOf(InterceptingClientHttpRequestFactory.class);, +					assertThat(ReflectionTestUtils.getField(requestFactory,, +							"requestFactory")).isInstanceOf(, +									HttpComponentsClientHttpRequestFactory.class);, +, +				}).build();, +, +	}, +]