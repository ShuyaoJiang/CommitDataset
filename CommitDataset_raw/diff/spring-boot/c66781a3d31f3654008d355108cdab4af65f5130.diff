[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +			return copyIfPossible(existingCollection);, +	private Collection<Object> copyIfPossible(Collection<Object> collection) {, +		try {, +			return createNewCollection(collection);, +		}, +		catch (Exception ex) {, +			return collection;, +		}, +	}, +, +	private Collection<Object> createNewCollection(Collection<Object> collection) {, +		Collection<Object> result = CollectionFactory, +				.createCollection(collection.getClass(), collection.size());, +		result.addAll(collection);, +		return result;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +			return copyIfPossible(existingCollection);, +	private Collection<Object> copyIfPossible(Collection<Object> collection) {, +		try {, +			return createNewCollection(collection);, +		}, +		catch (Exception ex) {, +			return collection;, +		}, +	}, +, +	private Collection<Object> createNewCollection(Collection<Object> collection) {, +		Collection<Object> result = CollectionFactory, +				.createCollection(collection.getClass(), collection.size());, +		result.addAll(collection);, +		return result;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		return copyIfPossible(existingMap);, +	}, +, +	private Map<Object, Object> copyIfPossible(Map<Object, Object> map) {, +		try {, +			Map<Object, Object> result = CollectionFactory.createMap(map.getClass(),, +					map.size());, +			result.putAll(map);, +			return result;, +		}, +		catch (Exception ex) {, +			return map;, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +			return copyIfPossible(existingCollection);, +	private Collection<Object> copyIfPossible(Collection<Object> collection) {, +		try {, +			return createNewCollection(collection);, +		}, +		catch (Exception ex) {, +			return collection;, +		}, +	}, +, +	private Collection<Object> createNewCollection(Collection<Object> collection) {, +		Collection<Object> result = CollectionFactory, +				.createCollection(collection.getClass(), collection.size());, +		result.addAll(collection);, +		return result;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +		return copyIfPossible(existingMap);, +	}, +, +	private Map<Object, Object> copyIfPossible(Map<Object, Object> map) {, +		try {, +			Map<Object, Object> result = CollectionFactory.createMap(map.getClass(),, +					map.size());, +			result.putAll(map);, +			return result;, +		}, +		catch (Exception ex) {, +			return map;, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java, +		ExampleCustomNoDefaultConstructorBean result = this.binder, +				.bind("foo", ExampleCustomNoDefaultConstructorBean.class).get();, +		assertThat(result.getItems()).hasSize(4);, +		assertThat(result.getItems()).containsExactly("a", "b", "c", "c");, +	}, +, +	@Test, +	public void bindToCollectionWithDefaultConstructor() {, +		// gh-12322, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.items", "a,b,c,c");, +		this.sources.add(source);, +		ExampleCustomWithDefaultConstructorBean result = this.binder, +				.bind("foo", ExampleCustomWithDefaultConstructorBean.class).get();, +	public static class ExampleCustomNoDefaultConstructorBean {, +		private MyCustomNoDefaultConstructorList items = new MyCustomNoDefaultConstructorList(, +				Collections.singletonList("foo"));, +		public MyCustomNoDefaultConstructorList getItems() {, +		public void setItems(MyCustomNoDefaultConstructorList items) {, +	}, +, +	public static class MyCustomNoDefaultConstructorList extends ArrayList<String> {, +]