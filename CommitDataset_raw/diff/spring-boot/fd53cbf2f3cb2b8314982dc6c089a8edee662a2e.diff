[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		}, +, +		/**, +		 * Additional configuration to ensure that {@link EntityManagerFactory} beans, +		 * depend-on the {@code flywayInitializer} bean., +		 */, +		@Configuration, +		@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class), +		@ConditionalOnBean(AbstractEntityManagerFactoryBean.class), +		protected class FlywayInitializerJpaDependencyConfiguration extends, +				EntityManagerFactoryDependsOnPostProcessor {, +, +			public FlywayInitializerJpaDependencyConfiguration() {, +				super("flywayInitializer");, +			}, +	 * depend-on the {@code flyway} bean., +			super("flyway");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		}, +, +		/**, +		 * Additional configuration to ensure that {@link EntityManagerFactory} beans, +		 * depend-on the {@code flywayInitializer} bean., +		 */, +		@Configuration, +		@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class), +		@ConditionalOnBean(AbstractEntityManagerFactoryBean.class), +		protected class FlywayInitializerJpaDependencyConfiguration extends, +				EntityManagerFactoryDependsOnPostProcessor {, +, +			public FlywayInitializerJpaDependencyConfiguration() {, +				super("flywayInitializer");, +			}, +	 * depend-on the {@code flyway} bean., +			super("flyway");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +import java.util.Collections;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;, +import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;, +import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;, + * @author Andy Wilkinson, +	}, +	@Test, +	public void customFlywayWithJpa() throws Exception {, +		registerAndRefresh(CustomFlywayWithJpaConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, FlywayAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +	@Configuration, +	protected static class CustomFlywayWithJpaConfiguration {, +, +		@Autowired, +		private DataSource dataSource;, +, +		@Bean, +		public Flyway flyway() {, +			return new Flyway();, +		}, +, +		@Bean, +		public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {, +			return new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(),, +					Collections.emptyMap(), null).dataSource(this.dataSource).build();, +		}, +, +	}, +]