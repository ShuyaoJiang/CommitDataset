[+++ b/spring-boot-actuator/pom.xml, +		<java.version>1.8</java.version>, +			<groupId>org.aspectj</groupId>, +			<artifactId>aspectjrt</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-core</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<java.version>1.8</java.version>, +			<groupId>org.aspectj</groupId>, +			<artifactId>aspectjrt</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-core</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +import org.springframework.boot.actuate.metrics.buffer.BufferCounterService;, +import org.springframework.boot.actuate.metrics.buffer.BufferGaugeService;, +import org.springframework.boot.actuate.metrics.buffer.BufferMetricReader;, +import org.springframework.boot.actuate.metrics.buffer.CounterBuffers;, +import org.springframework.boot.actuate.metrics.buffer.GaugeBuffers;, +import org.springframework.boot.actuate.metrics.export.MetricCopyExporter;, +import org.springframework.boot.actuate.metrics.reader.MetricReader;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.JavaVersion;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnJava.Range;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.scheduling.annotation.EnableScheduling;, +import org.springframework.scheduling.annotation.Scheduled;, +@EnableConfigurationProperties(MetricsProperties.class), +	@Configuration, +	@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN), +	@ConditionalOnMissingBean(MetricRepository.class), +	static class LegacyMetricServicesConfiguration {, +, +	}, +, +	@ConditionalOnJava(value = JavaVersion.EIGHT), +	static class FastMetricServicesConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public CounterBuffers counterBuffers() {, +			return new CounterBuffers();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public GaugeBuffers gaugeBuffers() {, +			return new GaugeBuffers();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public BufferMetricReader metricReader(CounterBuffers counters,, +				GaugeBuffers gauges) {, +			return new BufferMetricReader(counters, gauges);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public CounterService counterService(CounterBuffers writer) {, +			return new BufferCounterService(writer);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public GaugeService gaugeService(GaugeBuffers writer) {, +			return new BufferGaugeService(writer);, +		}, +	}, +, +	@Configuration, +	@ConditionalOnJava(value = JavaVersion.EIGHT, range = Range.OLDER_THAN), +	@ConditionalOnMissingBean(MetricRepository.class), +	static class LegacyMetricRepositoryConfiguration {, +	@EnableScheduling, +	@ConditionalOnProperty(value = "spring.metrics.export.enabled", matchIfMissing = true), +	static class DefaultMetricsExporterConfiguration {, +		@Autowired(required = false), +		private List<MetricWriter> writers;, +		@ConditionalOnBean(MetricWriter.class), +		public MetricCopyExporter messageChannelMetricExporter(MetricReader reader) {, +			return new MetricCopyExporter(reader, new CompositeMetricWriter(this.writers)) {, +				@Scheduled(fixedDelayString = "${spring.metrics.export.delayMillis:5000}"), +				@Override, +				public void export() {, +					super.export();, +			};]