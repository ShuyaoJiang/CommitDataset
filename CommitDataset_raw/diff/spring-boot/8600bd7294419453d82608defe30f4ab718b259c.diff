[+++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +				: ClientRegistration.withRegistrationId(registrationId));, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +				: ClientRegistration.withRegistrationId(registrationId));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;, +import org.springframework.security.core.userdetails.ReactiveUserDetailsService;, + * {@link ReactiveUserDetailsService} with a default user and generated password. This, + * backs-off completely if there is a bean of type {@link ReactiveUserDetailsService} or, +		ReactiveUserDetailsService.class }), +	public MapReactiveUserDetailsService reactiveUserDetailsService() {, +		return new MapReactiveUserDetailsService(user);, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +				: ClientRegistration.withRegistrationId(registrationId));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;, +import org.springframework.security.core.userdetails.ReactiveUserDetailsService;, + * {@link ReactiveUserDetailsService} with a default user and generated password. This, + * backs-off completely if there is a bean of type {@link ReactiveUserDetailsService} or, +		ReactiveUserDetailsService.class }), +	public MapReactiveUserDetailsService reactiveUserDetailsService() {, +		return new MapReactiveUserDetailsService(user);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/jpa/JpaUserDetailsTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +				: ClientRegistration.withRegistrationId(registrationId));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;, +import org.springframework.security.core.userdetails.ReactiveUserDetailsService;, + * {@link ReactiveUserDetailsService} with a default user and generated password. This, + * backs-off completely if there is a bean of type {@link ReactiveUserDetailsService} or, +		ReactiveUserDetailsService.class }), +	public MapReactiveUserDetailsService reactiveUserDetailsService() {, +		return new MapReactiveUserDetailsService(user);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/jpa/JpaUserDetailsTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getScopes()).containsExactly("scope");, +		assertThat(adapted.getScopes()).containsExactly("openid", "profile", "email",, +		assertThat(adapted.getScopes()).containsExactly("scope");, +		assertThat(adapted.getScopes()).containsExactly("openid", "profile", "email",, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;, +		EnableWebSecurity.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/WebSecurityEnablerConfiguration.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java, +				: ClientRegistration.withRegistrationId(registrationId));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveAuthenticationManagerConfiguration.java, +import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;, +import org.springframework.security.core.userdetails.ReactiveUserDetailsService;, + * {@link ReactiveUserDetailsService} with a default user and generated password. This, + * backs-off completely if there is a bean of type {@link ReactiveUserDetailsService} or, +		ReactiveUserDetailsService.class }), +	public MapReactiveUserDetailsService reactiveUserDetailsService() {, +		return new MapReactiveUserDetailsService(user);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/jpa/JpaUserDetailsTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getScopes()).containsExactly("scope");, +		assertThat(adapted.getScopes()).containsExactly("openid", "profile", "email",, +		assertThat(adapted.getScopes()).containsExactly("scope");]