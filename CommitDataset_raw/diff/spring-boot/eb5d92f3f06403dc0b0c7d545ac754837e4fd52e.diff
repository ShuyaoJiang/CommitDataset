[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * have access to them). You can also exclude them via the, + * {@code spring.autoconfigure.exclude} property. Auto-configuration is always applied, + * after user-defined beans have been registered., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * have access to them). You can also exclude them via the, + * {@code spring.autoconfigure.exclude} property. Auto-configuration is always applied, + * after user-defined beans have been registered., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import java.util.Collections;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +		BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +	private Environment environment;, +, +			excluded.addAll(getExcludeAutoConfigurationsProperty());, +	private List<String> getExcludeAutoConfigurationsProperty() {, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(this.environment,, +				"spring.autoconfigure.");, +		String[] value = resolver.getProperty("exclude", String[].class);, +		if (value != null) {, +			return Arrays.asList(value);, +		}, +		return Collections.emptyList();, +	}, +, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * have access to them). You can also exclude them via the, + * {@code spring.autoconfigure.exclude} property. Auto-configuration is always applied, + * after user-defined beans have been registered., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import java.util.Collections;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +		BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +	private Environment environment;, +, +			excluded.addAll(getExcludeAutoConfigurationsProperty());, +	private List<String> getExcludeAutoConfigurationsProperty() {, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(this.environment,, +				"spring.autoconfigure.");, +		String[] value = resolver.getProperty("exclude", String[].class);, +		if (value != null) {, +			return Arrays.asList(value);, +		}, +		return Collections.emptyList();, +	}, +, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.autoconfigure.exclude",, +    "type": "java.lang.Class[]",, +    "description": "Auto-configuration classes to exclude.", +  },, +  {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, + * have access to them). You can also exclude them via the, + * {@code spring.autoconfigure.exclude} property. Auto-configuration is always applied, + * after user-defined beans have been registered., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import java.util.Collections;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +		BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +	private Environment environment;, +, +			excluded.addAll(getExcludeAutoConfigurationsProperty());, +	private List<String> getExcludeAutoConfigurationsProperty() {, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(this.environment,, +				"spring.autoconfigure.");, +		String[] value = resolver.getProperty("exclude", String[].class);, +		if (value != null) {, +			return Arrays.asList(value);, +		}, +		return Collections.emptyList();, +	}, +, +	@Override, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.autoconfigure.exclude",, +    "type": "java.lang.Class[]",, +    "description": "Auto-configuration classes to exclude.", +  },, +  {]