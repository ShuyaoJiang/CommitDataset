[+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, +			if (read <= 0) {, +				return readRemainder(b, off, len);, +			}, +				int remainderRead = readRemainder(b, off + read, len - read);, +				if (remainderRead > 0) {, +					read += remainderRead;, +				}, +		private int readRemainder(byte[] b, int off, int len) throws IOException {, +			int read = super.read(b, off, len);, +			if (read > 0) {, +				this.position += read;, +			}, +			return read;, +		}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, +			if (read <= 0) {, +				return readRemainder(b, off, len);, +			}, +				int remainderRead = readRemainder(b, off + read, len - read);, +				if (remainderRead > 0) {, +					read += remainderRead;, +				}, +		private int readRemainder(byte[] b, int off, int len) throws IOException {, +			int read = super.read(b, off, len);, +			if (read > 0) {, +				this.position += read;, +			}, +			return read;, +		}, +, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/ZipHeaderPeekInputStreamTests.java, +	@Test, +	public void readMoreThanEntireStreamWhenStreamLengthIsLessThanZipHeaderLength(), +			throws IOException {, +		ZipHeaderPeekInputStream in = null;, +		try {, +			in = new ZipHeaderPeekInputStream(, +					new ByteArrayInputStream(new byte[] { 10 }));, +			byte[] bytes = new byte[8];, +			assertThat(in.read(bytes)).isEqualTo(1);, +			assertThat(bytes).containsExactly(10, 0, 0, 0, 0, 0, 0, 0);, +		}, +		finally {, +			if (in != null) {, +				in.close();, +			}, +		}, +	}, +, +	@Test, +	public void readMoreThanEntireStreamWhenStreamLengthIsSameAsHeaderLength(), +			throws IOException {, +		ZipHeaderPeekInputStream in = null;, +		try {, +			in = new ZipHeaderPeekInputStream(, +					new ByteArrayInputStream(new byte[] { 1, 2, 3, 4 }));, +			byte[] bytes = new byte[8];, +			assertThat(in.read(bytes)).isEqualTo(4);, +			assertThat(bytes).containsExactly(1, 2, 3, 4, 0, 0, 0, 0);, +		}, +		finally {, +			if (in != null) {, +				in.close();, +			}, +		}, +	}, +, +	@Test, +	public void readMoreThanEntireStreamWhenStreamLengthIsZero() throws IOException {, +		ZipHeaderPeekInputStream in = null;, +		try {, +			in = new ZipHeaderPeekInputStream(new ByteArrayInputStream(new byte[0]));, +			byte[] bytes = new byte[8];, +			assertThat(in.read(bytes)).isEqualTo(-1);, +			assertThat(bytes).containsExactly(0, 0, 0, 0, 0, 0, 0, 0);, +		}, +		finally {, +			if (in != null) {, +				in.close();, +			}, +		}, +	}, +]