[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebApplicationContext.java, +import org.springframework.beans.factory.support.BeanNameGenerator;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, +import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;, +import org.springframework.context.annotation.ImportResource;, +import org.springframework.context.annotation.ScopeMetadataResolver;, +import org.springframework.lang.Nullable;, + * @author Stephane Nicoll, +	/**, +	 * Create a new AnnotationConfigReactiveWebApplicationContext that needs to be, +	 * populated through {@link #register} calls and then manually {@linkplain #refresh, +	 * refreshed}., +	 */, +	public AnnotationConfigReactiveWebApplicationContext() {, +	}, +, +	/**, +	 * Create a new AnnotationConfigApplicationContext with the given, +	 * DefaultListableBeanFactory., +	 * @param beanFactory the DefaultListableBeanFactory instance to use for this context, +	 * @since 2.2.0, +	 */, +	public AnnotationConfigReactiveWebApplicationContext(, +			DefaultListableBeanFactory beanFactory) {, +		super(beanFactory);, +	}, +, +	/**, +	 * Create a new AnnotationConfigApplicationContext, deriving bean definitions from the, +	 * given annotated classes and automatically refreshing the context., +	 * @param annotatedClasses one or more annotated classes, e.g., +	 * {@link Configuration @Configuration} classes, +	 * @since 2.2.0, +	 */, +	public AnnotationConfigReactiveWebApplicationContext(Class<?>... annotatedClasses) {, +		super(annotatedClasses);, +	}, +, +	/**, +	 * Create a new AnnotationConfigApplicationContext, scanning for bean definitions in, +	 * the given packages and automatically refreshing the context., +	 * @param basePackages the packages to check for annotated classes, +	 * @since 2.2.0, +	 */, +	public AnnotationConfigReactiveWebApplicationContext(String... basePackages) {, +		super(basePackages);, +	}, +, +	/**, +	 * Return the custom {@link BeanNameGenerator} for use with, +	 * {@link AnnotatedBeanDefinitionReader} and/or, +	 * {@link ClassPathBeanDefinitionScanner}, if any., +	 * @return the bean name generator, +	 * @deprecated since 2.2.0 since this class no longer extends, +	 * {@code AbstractRefreshableConfigApplicationContext}, +	 */, +	@Deprecated, +	protected final BeanNameGenerator getBeanNameGenerator() {, +		throw new UnsupportedOperationException();, +	}, +, +	/**, +	 * Return the custom {@link ScopeMetadataResolver} for use with, +	 * {@link AnnotatedBeanDefinitionReader} and/or, +	 * {@link ClassPathBeanDefinitionScanner}, if any., +	 * @return the scope metadata resolver, +	 * @deprecated since 2.2.0 since this class no longer extends, +	 * {@code AbstractRefreshableConfigApplicationContext}, +	 */, +	@Deprecated, +	protected ScopeMetadataResolver getScopeMetadataResolver() {, +		throw new UnsupportedOperationException();, +	}, +, +	/**, +	 * Register a {@link org.springframework.beans.factory.config.BeanDefinition} for any, +	 * classes specified by {@link #register(Class...)} and scan any packages specified by, +	 * {@link #scan(String...)}., +	 * <p>, +	 * For any values specified by {@link #setConfigLocation(String)} or, +	 * {@link #setConfigLocations(String[])}, attempt first to load each location as a, +	 * class, registering a {@code BeanDefinition} if class loading is successful, and if, +	 * class loading fails (i.e. a {@code ClassNotFoundException} is raised), assume the, +	 * value is a package and attempt to scan it for annotated classes., +	 * <p>, +	 * Enables the default set of annotation configuration post processors, such that, +	 * {@code @Autowired}, {@code @Required}, and associated annotations can be used., +	 * <p>, +	 * Configuration class bean definitions are registered with generated bean definition, +	 * names unless the {@code value} attribute is provided to the stereotype annotation., +	 * @param beanFactory the bean factory to load bean definitions into, +	 * @see #register(Class...), +	 * @see #scan(String...), +	 * @see #setConfigLocation(String), +	 * @see #setConfigLocations(String[]), +	 * @see AnnotatedBeanDefinitionReader, +	 * @see ClassPathBeanDefinitionScanner, +	 * @deprecated since 2.2.0 since this class no longer extends, +	 * {@code AbstractRefreshableConfigApplicationContext}]