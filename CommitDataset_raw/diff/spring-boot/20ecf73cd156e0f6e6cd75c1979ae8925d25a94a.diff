[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import java.time.Duration;, +import java.util.Map;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager.ShutdownOperation;, + * @author David J. M. Karlsen, +		/**, +		 * The fallback job name. We use 'spring' since there's a history of Prometheus, +		 * spring integration defaulting to that name from when Prometheus integration, +		 * didn't exist in Spring itself., +		 */, +		private static final String FALLBACK_JOB = "spring";, +, +		@ConditionalOnMissingBean, +		public PrometheusPushGatewayManager prometheusPushGatewayManager(, +				CollectorRegistry collectorRegistry,, +			PrometheusProperties.Pushgateway properties = prometheusProperties, +					.getPushgateway();, +			PushGateway pushGateway = new PushGateway(properties.getBaseUrl());, +			Duration pushRate = properties.getPushRate();, +			String job = getJob(properties, environment);, +			Map<String, String> groupingKey = properties.getGroupingKey();, +			ShutdownOperation shutdownOperation = properties.getShutdownOperation();, +			return new PrometheusPushGatewayManager(pushGateway, collectorRegistry,, +					pushRate, job, groupingKey, shutdownOperation);, +		private String getJob(PrometheusProperties.Pushgateway properties,, +				Environment environment) {, +			String job = properties.getJob();, +			job = (job != null) ? job, +					: environment.getProperty("spring.application.name");, +			job = (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import java.time.Duration;, +import java.util.Map;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager.ShutdownOperation;, + * @author David J. M. Karlsen, +		/**, +		 * The fallback job name. We use 'spring' since there's a history of Prometheus, +		 * spring integration defaulting to that name from when Prometheus integration, +		 * didn't exist in Spring itself., +		 */, +		private static final String FALLBACK_JOB = "spring";, +, +		@ConditionalOnMissingBean, +		public PrometheusPushGatewayManager prometheusPushGatewayManager(, +				CollectorRegistry collectorRegistry,, +			PrometheusProperties.Pushgateway properties = prometheusProperties, +					.getPushgateway();, +			PushGateway pushGateway = new PushGateway(properties.getBaseUrl());, +			Duration pushRate = properties.getPushRate();, +			String job = getJob(properties, environment);, +			Map<String, String> groupingKey = properties.getGroupingKey();, +			ShutdownOperation shutdownOperation = properties.getShutdownOperation();, +			return new PrometheusPushGatewayManager(pushGateway, collectorRegistry,, +					pushRate, job, groupingKey, shutdownOperation);, +		private String getJob(PrometheusProperties.Pushgateway properties,, +				Environment environment) {, +			String job = properties.getJob();, +			job = (job != null) ? job, +					: environment.getProperty("spring.application.name");, +			job = (job != null) ? job : FALLBACK_JOB;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusProperties.java, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager.ShutdownOperation;, +	private Pushgateway pushgateway = new Pushgateway();, +	public Pushgateway getPushgateway() {, +	public void setPushgateway(Pushgateway pushgateway) {, +	public static class Pushgateway {, +		 * Base URL for the Pushgateway., +		 * Frequency with which to push metrics., +		 * Job identifier for this application instance., +		private String job;, +		 * Grouping key for the pushed metrics., +		private Map<String, String> groupingKey = new HashMap<>();, +		 * Operation that should be performed on shutdown., +		private ShutdownOperation shutdownOperation = ShutdownOperation.NONE;, +		public String getJob() {, +			return this.job;, +		public void setJob(String job) {, +			this.job = job;, +		public Map<String, String> getGroupingKey() {, +			return this.groupingKey;, +		public void setGroupingKey(Map<String, String> groupingKey) {, +			this.groupingKey = groupingKey;, +		public ShutdownOperation getShutdownOperation() {, +			return this.shutdownOperation;, +		public void setShutdownOperation(ShutdownOperation shutdownOperation) {, +			this.shutdownOperation = shutdownOperation;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/prometheus/PrometheusMetricsExportAutoConfiguration.java, +import java.time.Duration;, +import java.util.Map;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager;, +import org.springframework.boot.actuate.metrics.export.prometheus.PrometheusPushGatewayManager.ShutdownOperation;, + * @author David J. M. Karlsen, +		/**, +		 * The fallback job name. We use 'spring' since there's a history of Prometheus, +		 * spring integration defaulting to that name from when Prometheus integration, +		 * didn't exist in Spring itself., +		 */, +		private static final String FALLBACK_JOB = "spring";]