[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			if (config.determineHost() != null) {, +				factory.setHost(config.determineHost());, +			factory.setPort(config.determinePort());, +			factory.setHost(config.determineHost());, +			if (config.determineUsername() != null) {, +				factory.setUsername(config.determineUsername());, +			if (config.determinePassword() != null) {, +				factory.setPassword(config.determinePassword());, +			if (config.determineVirtualHost() != null) {, +				factory.setVirtualHost(config.determineVirtualHost());, +			connectionFactory.setAddresses(config.determineAddresses());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, +			if (config.determineHost() != null) {, +				factory.setHost(config.determineHost());, +			factory.setPort(config.determinePort());, +			factory.setHost(config.determineHost());, +			if (config.determineUsername() != null) {, +				factory.setUsername(config.determineUsername());, +			if (config.determinePassword() != null) {, +				factory.setPassword(config.determinePassword());, +			if (config.determineVirtualHost() != null) {, +				factory.setVirtualHost(config.determineVirtualHost());, +			connectionFactory.setAddresses(config.determineAddresses());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.util.CollectionUtils;, +	private List<Address> parsedAddresses;, +, +, +	/**, +	 * Returns the host from the first address, or the configured host if no addresses, +	 * have been set., +	 * @return the host, +	 * @see #setAddresses(String), +	 * @see #getHost(), +	 */, +	public String determineHost() {, +		if (CollectionUtils.isEmpty(this.parsedAddresses)) {, +			return getHost();, +		return this.parsedAddresses.get(0).host;, +	/**, +	 * Returns the port from the first address, or the configured port if no addresses, +	 * have been set., +	 * @return the port, +	 * @see #setAddresses(String), +	 * @see #getPort(), +	 */, +	public int determinePort() {, +		if (CollectionUtils.isEmpty(this.parsedAddresses)) {, +			return getPort();, +		Address address = this.parsedAddresses.get(0);, +		return address.port;, +	public String getAddresses() {, +		return this.addresses;, +	}, +, +	/**, +	 * Returns the comma-separated addresses or a single address ({@code host:port}), +	 * created from the configured host and port if no addresses have been set., +	 * @return the addresses, +	 */, +	public String determineAddresses() {, +		if (CollectionUtils.isEmpty(this.parsedAddresses)) {, +			return this.host + ":" + this.port;, +		}, +		List<String> addressStrings = new ArrayList<String>();, +		for (Address parsedAddress : this.parsedAddresses) {, +			addressStrings.add(parsedAddress.host + ":" + parsedAddress.port);, +		}, +		return StringUtils.collectionToCommaDelimitedString(addressStrings);, +	}, +, +	public void setAddresses(String addresses) {, +		this.addresses = addresses;, +		this.parsedAddresses = parseAddresses(addresses);, +	}, +, +	private List<Address> parseAddresses(String addresses) {, +		List<Address> parsedAddresses = new ArrayList<Address>();, +		for (String address : StringUtils.commaDelimitedListToStringArray(addresses)) {, +			parsedAddresses.add(new Address(address));, +		}, +		return parsedAddresses;, +	}, +, +	/**, +	 * If addresses have been set and the first address has a username it is returned., +	 * Otherwise returns the result of calling {@code getUsername()}., +	 * @return the username, +	 * @see #setAddresses(String), +	 * @see #getUsername(), +	 */, +	public String determineUsername() {, +		if (CollectionUtils.isEmpty(this.parsedAddresses)) {, +			return this.username;, +		}, +		Address address = this.parsedAddresses.get(0);, +		return address.username == null ? this.username : address.username;]