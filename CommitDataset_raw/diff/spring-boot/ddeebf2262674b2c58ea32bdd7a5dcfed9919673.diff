[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import java.util.Collections;, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +	public static class DataSourcesHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders = Collections, +				.emptyList();, +			DataSourcePoolMetadataProvider metadataProvider = new DataSourcePoolMetadataProviders(, +					this.metadataProviders);, +			if (this.dataSources.size() == 1) {, +				DataSource dataSource = this.dataSources.values().iterator().next();, +				return createDataSourceHealthIndicator(metadataProvider, dataSource);, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, DataSource> entry : this.dataSources.entrySet()) {, +				String name = entry.getKey();, +				DataSource dataSource = entry.getValue();, +				composite.addHealthIndicator(name,, +						createDataSourceHealthIndicator(metadataProvider, dataSource));, +			}, +			return composite;, +		private DataSourceHealthIndicator createDataSourceHealthIndicator(, +				DataSourcePoolMetadataProvider provider, DataSource dataSource) {, +			String validationQuery = null;, +			DataSourcePoolMetadata poolMetadata = provider, +					.getDataSourcePoolMetadata(dataSource);, +			if (poolMetadata != null) {, +				validationQuery = poolMetadata.getValidationQuery();, +			return new DataSourceHealthIndicator(dataSource, validationQuery);, +	public static class MongoHealthIndicatorConfiguration {]