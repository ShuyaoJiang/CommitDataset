[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/BeanTypeRegistry.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +import org.springframework.core.ResolvableType;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * A registry of the bean types that are contained in a {@link ListableBeanFactory}., + * Provides similar functionality to, + * {@link ListableBeanFactory#getBeanNamesForType(Class, boolean, boolean)} but is, + * optimized for use by {@link OnBeanCondition} based on the following assumptions:, + * <ul>, + * <li>Bean definitions will not change type.</li>, + * <li>Beans definitions will not be removed.</li>, + * <li>Beans will not be created in parallel.</li>, + * </ul>, + *, + * @author Phillip Webb, + * @since 1.2.0, + */, +abstract class BeanTypeRegistry {, +, +	public static long check;, +, +	static final String FACTORY_BEAN_OBJECT_TYPE = "factoryBeanObjectType";, +, +	/**, +	 * Return the names of beans matching the given type (including subclasses), judging, +	 * from either bean definitions or the value of {@code getObjectType} in the case of, +	 * FactoryBeans. Will include singletons but not cause early bean initialization., +	 * @param type the class or interface to match (must not be {@code null}), +	 * @return the names of beans (or objects created by FactoryBeans) matching the given, +	 * object type (including subclasses), or an empty set if none, +	 */, +	public abstract Set<String> getNamesForType(Class<?> type);, +, +	/**, +	 * Attempt to guess the type that a {@link FactoryBean} will return based on the, +	 * generics in its method signature., +	 * @param beanFactory the source bean factory, +	 * @param definition the bean definition, +	 * @param name the name of the bean, +	 * @return the generic type of the {@link FactoryBean} or {@code null}, +	 */, +	protected final Class<?> getFactoryBeanGeneric(, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition,, +			String name) {, +		try {, +			return doGetFactoryBeanGeneric(beanFactory, definition, name);, +		}, +		catch (Exception ex) {, +			return null;, +		}, +	}, +, +	private Class<?> doGetFactoryBeanGeneric(ConfigurableListableBeanFactory beanFactory,, +			BeanDefinition definition, String name) throws Exception,, +			ClassNotFoundException, LinkageError {, +		if (StringUtils.hasLength(definition.getFactoryBeanName()), +				&& StringUtils.hasLength(definition.getFactoryMethodName())) {, +			return getConfigurationClassFactoryBeanGeneric(beanFactory, definition, name);, +		}, +		if (StringUtils.hasLength(definition.getBeanClassName())) {, +			return getDirectFactoryBeanGeneric(beanFactory, definition, name);]