[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +		String prefix = ((String) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("prefix")).trim();, +		if (!"".equals(prefix) && !prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +		String prefix = ((String) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("prefix")).trim();, +		if (!"".equals(prefix) && !prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java, +	public void prefixWithoutPeriod() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),, +				"spring.property=value1");, +		this.context, +				.register(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("foo"));, +	}, +, +	@Test, +	@ConditionalOnProperty(prefix = "spring", value = "property"), +	protected static class RelaxedPropertiesRequiredConfigurationWithShortPrefix {, +, +		@Bean, +		public String foo() {, +			return "foo";, +		}, +, +	}, +, +	@Configuration]