[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;, +import org.springframework.web.context.WebApplicationContext;, +	public DefaultWebMvcTagsProvider webMvcTagsProvider() {, +	public WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry,, +			MetricsProperties properties, WebMvcTagsProvider tagsProvider,, +			WebApplicationContext context) {, +		Server serverProperties = properties.getWeb().getServer();, +		return new WebMvcMetricsFilter(context, registry, tagsProvider,, +				serverProperties.getRequestsMetricName(),, +				serverProperties.isAutoTimeRequests());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;, +import org.springframework.web.context.WebApplicationContext;, +	public DefaultWebMvcTagsProvider webMvcTagsProvider() {, +	public WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry,, +			MetricsProperties properties, WebMvcTagsProvider tagsProvider,, +			WebApplicationContext context) {, +		Server serverProperties = properties.getWeb().getServer();, +		return new WebMvcMetricsFilter(context, registry, tagsProvider,, +				serverProperties.getRequestsMetricName(),, +				serverProperties.isAutoTimeRequests());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/DefaultWebMvcTagsProvider.java, + * Copyright 2012-2018 the original author or authors., +import io.micrometer.core.instrument.Tags;, +	public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Throwable exception) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, response),, +				WebMvcTags.exception(exception), WebMvcTags.status(response));, +	public Iterable<Tag> getLongRequestTags(HttpServletRequest request, Object handler) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;, +import org.springframework.web.context.WebApplicationContext;, +	public DefaultWebMvcTagsProvider webMvcTagsProvider() {, +	public WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry,, +			MetricsProperties properties, WebMvcTagsProvider tagsProvider,, +			WebApplicationContext context) {, +		Server serverProperties = properties.getWeb().getServer();, +		return new WebMvcMetricsFilter(context, registry, tagsProvider,, +				serverProperties.getRequestsMetricName(),, +				serverProperties.isAutoTimeRequests());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/DefaultWebMvcTagsProvider.java, + * Copyright 2012-2018 the original author or authors., +import io.micrometer.core.instrument.Tags;, +	public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Throwable exception) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, response),, +				WebMvcTags.exception(exception), WebMvcTags.status(response));, +	public Iterable<Tag> getLongRequestTags(HttpServletRequest request, Object handler) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, null));, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/servlet/WebMvcMetricsConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Web.Server;, +import org.springframework.web.context.WebApplicationContext;, +	public DefaultWebMvcTagsProvider webMvcTagsProvider() {, +	public WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry,, +			MetricsProperties properties, WebMvcTagsProvider tagsProvider,, +			WebApplicationContext context) {, +		Server serverProperties = properties.getWeb().getServer();, +		return new WebMvcMetricsFilter(context, registry, tagsProvider,, +				serverProperties.getRequestsMetricName(),, +				serverProperties.isAutoTimeRequests());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/DefaultWebMvcTagsProvider.java, + * Copyright 2012-2018 the original author or authors., +import io.micrometer.core.instrument.Tags;, +	public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Throwable exception) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, response),, +				WebMvcTags.exception(exception), WebMvcTags.status(response));, +	public Iterable<Tag> getLongRequestTags(HttpServletRequest request, Object handler) {, +		return Tags.of(WebMvcTags.method(request), WebMvcTags.uri(request, null));, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java, +import java.lang.reflect.AnnotatedElement;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.function.Supplier;, +import io.micrometer.core.annotation.Timed;, +import io.micrometer.core.instrument.LongTaskTimer;, +import io.micrometer.core.instrument.MeterRegistry;, +import io.micrometer.core.instrument.Tag;, +import io.micrometer.core.instrument.Timer;, +import io.micrometer.core.instrument.Timer.Builder;, +import io.micrometer.core.instrument.Timer.Sample;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.web.method.HandlerMethod;, +import org.springframework.web.servlet.DispatcherServlet;, + * @author Phillip Webb, +	private final MeterRegistry registry;, +	private final WebMvcTagsProvider tagsProvider;, +	private final String metricName;, +, +	private final boolean autoTimeRequests;, +, +	private volatile HandlerMappingIntrospector introspector;, +]