[+++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzer.java, +import org.springframework.boot.context.properties.bind.BindException;, +import org.springframework.boot.context.properties.bind.UnboundConfigurationPropertiesException;, +import org.springframework.boot.context.properties.bind.validation.BindValidationException;, +import org.springframework.boot.context.properties.bind.validation.ValidationErrors;, +import org.springframework.boot.context.properties.source.ConfigurationProperty;, +import org.springframework.boot.origin.Origin;, +import org.springframework.util.StringUtils;, +		if (cause.getCause() instanceof BindValidationException) {, +			return analyzeBindValidationException(cause,, +					(BindValidationException) cause.getCause());, +		}, +		else if (cause.getCause() instanceof UnboundConfigurationPropertiesException) {, +			return analyzeUnboundConfigurationPropertiesException(cause,, +					(UnboundConfigurationPropertiesException) cause.getCause());, +		}, +		return analyzeGenericBindException(cause);, +	}, +, +	private FailureAnalysis analyzeBindValidationException(BindException cause,, +			BindValidationException validationException) {, +		ValidationErrors errors = validationException.getValidationErrors();, +		if (!errors.hasErrors()) {, +		for (ObjectError error : errors) {, +				appendFieldError(description, (FieldError) error);, +		return getFailureAnalysis(description, cause);, +	}, +, +	private void appendFieldError(StringBuilder description, FieldError error) {, +		Origin origin = Origin.from(error);, +		description.append(String.format("%n    Property: %s",, +				error.getObjectName() + "." + error.getField()));, +		description.append(String.format("%n    Value: %s", error.getRejectedValue()));, +		if (origin != null) {, +			description.append(String.format("%n    Origin: %s", origin));, +		}, +	}, +, +	private FailureAnalysis analyzeUnboundConfigurationPropertiesException(, +			BindException cause, UnboundConfigurationPropertiesException exception) {, +		StringBuilder description = new StringBuilder(, +				String.format("Binding to target %s failed:%n", cause.getTarget()));, +		for (ConfigurationProperty property : exception.getUnboundProperties()) {, +			buildDescription(description, property);, +			description.append(String.format("%n    Reason: %s", exception.getMessage()));, +		}, +		return getFailureAnalysis(description, cause);, +	}, +, +	private FailureAnalysis analyzeGenericBindException(BindException cause) {, +		StringBuilder description = new StringBuilder(, +				String.format("Binding to target %s failed:%n", cause.getTarget()));, +		ConfigurationProperty property = cause.getProperty();, +		buildDescription(description, property);, +		description.append(String.format("%n    Reason: %s", getMessage(cause)));, +		return getFailureAnalysis(description, cause);, +	}, +, +	private void buildDescription(StringBuilder description,, +			ConfigurationProperty property) {, +		if (property != null) {, +			description.append(String.format("%n    Property: %s", property.getName()));, +			description.append(String.format("%n    Value: %s", property.getValue()));, +			description.append(String.format("%n    Origin: %s", property.getOrigin()));, +		}, +	}, +, +	private String getMessage(BindException cause) {, +		if (cause.getCause() != null, +				&& StringUtils.hasText(cause.getCause().getMessage())) {, +			return cause.getCause().getMessage();, +		}, +		return cause.getMessage();, +	}, +, +	private FailureAnalysis getFailureAnalysis(Object description, BindException cause) {, +++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzer.java, +import org.springframework.boot.context.properties.bind.BindException;, +import org.springframework.boot.context.properties.bind.UnboundConfigurationPropertiesException;, +import org.springframework.boot.context.properties.bind.validation.BindValidationException;, +import org.springframework.boot.context.properties.bind.validation.ValidationErrors;, +import org.springframework.boot.context.properties.source.ConfigurationProperty;, +import org.springframework.boot.origin.Origin;, +import org.springframework.util.StringUtils;, +		if (cause.getCause() instanceof BindValidationException) {, +			return analyzeBindValidationException(cause,, +					(BindValidationException) cause.getCause());, +		}, +		else if (cause.getCause() instanceof UnboundConfigurationPropertiesException) {, +			return analyzeUnboundConfigurationPropertiesException(cause,, +					(UnboundConfigurationPropertiesException) cause.getCause());, +		}, +		return analyzeGenericBindException(cause);, +	}, +, +	private FailureAnalysis analyzeBindValidationException(BindException cause,, +			BindValidationException validationException) {, +		ValidationErrors errors = validationException.getValidationErrors();, +		if (!errors.hasErrors()) {, +		for (ObjectError error : errors) {]