[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.TreeMap;, +import java.util.stream.Stream;, +, +import javax.servlet.ServletException;, +, +import org.apache.catalina.Wrapper;, +import org.apache.catalina.core.StandardWrapper;, +import org.springframework.boot.web.server.WebServerException;, +			getLoadOnStartupWrappers(findChildren()).forEach(this::load);, +	private Stream<Wrapper> getLoadOnStartupWrappers(Container[] children) {, +		Map<Integer, List<Wrapper>> grouped = new TreeMap<>();, +		for (Container child : children) {, +			Wrapper wrapper = (Wrapper) child;, +			int order = wrapper.getLoadOnStartup();, +			if (order >= 0) {, +				grouped.computeIfAbsent(order, ArrayList::new);, +				grouped.get(order).add(wrapper);, +			}, +		}, +		return grouped.values().stream().flatMap(List::stream);, +	}, +, +	private void load(Wrapper wrapper) {, +		try {, +			wrapper.load();, +		}, +		catch (ServletException ex) {, +			String message = sm.getString("standardContext.loadOnStartup.loadException",, +					getName(), wrapper.getName());, +			if (getComputedFailCtxIfServletStartFails()) {, +				throw new WebServerException(message, ex);, +			}, +			getLogger().error(message, StandardWrapper.getRootCause(ex));, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.TreeMap;, +import java.util.stream.Stream;, +, +import javax.servlet.ServletException;, +, +import org.apache.catalina.Wrapper;, +import org.apache.catalina.core.StandardWrapper;, +import org.springframework.boot.web.server.WebServerException;, +			getLoadOnStartupWrappers(findChildren()).forEach(this::load);, +	private Stream<Wrapper> getLoadOnStartupWrappers(Container[] children) {, +		Map<Integer, List<Wrapper>> grouped = new TreeMap<>();, +		for (Container child : children) {, +			Wrapper wrapper = (Wrapper) child;, +			int order = wrapper.getLoadOnStartup();, +			if (order >= 0) {, +				grouped.computeIfAbsent(order, ArrayList::new);, +				grouped.get(order).add(wrapper);, +			}, +		}, +		return grouped.values().stream().flatMap(List::stream);, +	}, +, +	private void load(Wrapper wrapper) {, +		try {, +			wrapper.load();, +		}, +		catch (ServletException ex) {, +			String message = sm.getString("standardContext.loadOnStartup.loadException",, +					getName(), wrapper.getName());, +			if (getComputedFailCtxIfServletStartFails()) {, +				throw new WebServerException(message, ex);, +			}, +			getLogger().error(message, StandardWrapper.getRootCause(ex));, +		}, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java, +			TomcatEmbeddedContext embeddedContext = (TomcatEmbeddedContext) context;, +			embeddedContext.setStarter(starter);, +			embeddedContext.setFailCtxIfServletStartFails(true);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatEmbeddedContext.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.TreeMap;, +import java.util.stream.Stream;, +, +import javax.servlet.ServletException;, +, +import org.apache.catalina.Wrapper;, +import org.apache.catalina.core.StandardWrapper;, +import org.springframework.boot.web.server.WebServerException;, +			getLoadOnStartupWrappers(findChildren()).forEach(this::load);, +	private Stream<Wrapper> getLoadOnStartupWrappers(Container[] children) {, +		Map<Integer, List<Wrapper>> grouped = new TreeMap<>();, +		for (Container child : children) {]