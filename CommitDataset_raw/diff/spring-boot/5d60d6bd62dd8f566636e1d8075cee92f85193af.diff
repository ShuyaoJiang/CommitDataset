[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/client/RestTemplateAutoConfigurationTests.java, + * Copyright 2012-2019 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(, +					AutoConfigurations.of(RestTemplateAutoConfiguration.class));, +		this.contextRunner, +				.withConfiguration(AutoConfigurations, +						.of(HttpMessageConvertersAutoConfiguration.class)), +				.withUserConfiguration(RestTemplateConfig.class).run((context) -> {, +					assertThat(context).hasSingleBean(RestTemplate.class);, +					RestTemplate restTemplate = context.getBean(RestTemplate.class);, +					List<HttpMessageConverter<?>> converters = context, +				});, +		this.contextRunner.withUserConfiguration(RestTemplateConfig.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(RestTemplate.class);, +					RestTemplate restTemplate = context.getBean(RestTemplate.class);, +				});, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +		this.contextRunner, +				.withConfiguration(AutoConfigurations, +						.of(HttpMessageConvertersAutoConfiguration.class)), +				.withUserConfiguration(CustomHttpMessageConverter.class,, +						RestTemplateConfig.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(RestTemplate.class);, +					RestTemplate restTemplate = context.getBean(RestTemplate.class);, +					assertThat(restTemplate.getMessageConverters()), +							.extracting(HttpMessageConverter::getClass), +							.contains((Class) CustomHttpMessageConverter.class);, +				});, +		this.contextRunner.withUserConfiguration(RestTemplateConfig.class,, +				CustomRestTemplateBuilderConfig.class).run((context) -> {, +					assertThat(context).hasSingleBean(RestTemplate.class);, +					RestTemplate restTemplate = context.getBean(RestTemplate.class);, +				});, +		this.contextRunner.withUserConfiguration(RestTemplateConfig.class,, +				RestTemplateCustomizerConfig.class).run((context) -> {, +					assertThat(context).hasSingleBean(RestTemplate.class);, +					RestTemplate restTemplate = context.getBean(RestTemplate.class);, +					RestTemplateCustomizer customizer = context, +				});, +		this.contextRunner.withUserConfiguration(DirtyRestTemplateConfig.class), +				.run((context) -> assertThat(context).hasNotFailed());]