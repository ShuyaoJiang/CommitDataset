[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunction.java, +	private static final String METRICS_WEBCLIENT_START_TIME = MetricsWebClientFilterFunction.class, +			.getName() + ".START_TIME";, +, +		return exchangeFunction.exchange(clientRequest).doOnEach((signal) -> {, +			if (!signal.isOnComplete()) {, +				Long startTime = signal.getContext().get(METRICS_WEBCLIENT_START_TIME);, +				ClientResponse clientResponse = signal.get();, +				Throwable throwable = signal.getThrowable();, +				Iterable<Tag> tags = this.tagProvider.tags(clientRequest, clientResponse,, +						throwable);, +			}, +		}).subscriberContext((context) -> context.put(METRICS_WEBCLIENT_START_TIME,, +				System.nanoTime()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunction.java, +	private static final String METRICS_WEBCLIENT_START_TIME = MetricsWebClientFilterFunction.class, +			.getName() + ".START_TIME";, +, +		return exchangeFunction.exchange(clientRequest).doOnEach((signal) -> {, +			if (!signal.isOnComplete()) {, +				Long startTime = signal.getContext().get(METRICS_WEBCLIENT_START_TIME);, +				ClientResponse clientResponse = signal.get();, +				Throwable throwable = signal.getThrowable();, +				Iterable<Tag> tags = this.tagProvider.tags(clientRequest, clientResponse,, +						throwable);, +			}, +		}).subscriberContext((context) -> context.put(METRICS_WEBCLIENT_START_TIME,, +				System.nanoTime()));, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java, +import java.time.Duration;, +import java.util.concurrent.TimeUnit;, +	@Test, +	public void filterWhenExceptionAndRetryShouldNotCumulateRecordTime() {, +		ClientRequest request = ClientRequest.create(HttpMethod.GET,, +				URI.create("http://example.com/projects/spring-boot")).build();, +		ExchangeFunction exchange = (r) -> Mono.error(new IllegalArgumentException()), +				.delaySubscription(Duration.ofMillis(300)).cast(ClientResponse.class);, +		this.filterFunction.filter(request, exchange).retry(1), +				.onErrorResume(IllegalArgumentException.class, (t) -> Mono.empty()), +				.block();, +		assertThat(this.registry, +				.get("http.client.requests").tags("method", "GET", "uri",, +						"/projects/spring-boot", "status", "CLIENT_ERROR"), +				.timer().count()).isEqualTo(2);, +		assertThat(this.registry.get("http.client.requests"), +				.tags("method", "GET", "uri", "/projects/spring-boot", "status",, +						"CLIENT_ERROR"), +				.timer().max(TimeUnit.MILLISECONDS)).isLessThan(600);, +	}, +]