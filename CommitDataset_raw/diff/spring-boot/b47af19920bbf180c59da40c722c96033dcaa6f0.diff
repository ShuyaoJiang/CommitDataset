[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.boot.devtools.filewatch.FileSystemWatcher;, +		private final FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();, +, +			return new ClassPathFileSystemWatcher(this.fileSystemWatcher,, +					classPathRestartStrategy(), urls);, +				this.fileSystemWatcher.stop();, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.boot.devtools.filewatch.FileSystemWatcher;, +		private final FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();, +, +			return new ClassPathFileSystemWatcher(this.fileSystemWatcher,, +					classPathRestartStrategy(), urls);, +				this.fileSystemWatcher.stop();, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/classpath/ClassPathFileSystemWatcher.java, +	public ClassPathFileSystemWatcher(FileSystemWatcher fileSystemWatcher,, +		this.fileSystemWatcher = fileSystemWatcher;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java, +import org.springframework.boot.devtools.filewatch.FileSystemWatcher;, +		private final FileSystemWatcher fileSystemWatcher = new FileSystemWatcher();, +, +			return new ClassPathFileSystemWatcher(this.fileSystemWatcher,, +					classPathRestartStrategy(), urls);, +				this.fileSystemWatcher.stop();, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/classpath/ClassPathFileSystemWatcher.java, +	public ClassPathFileSystemWatcher(FileSystemWatcher fileSystemWatcher,, +		this.fileSystemWatcher = fileSystemWatcher;, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java, +			if (Thread.currentThread() != thread) {, +			}, +]