[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		String[] baseDn = this.embeddedProperties.getBaseDn().toArray(new String[0]);, +		InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(baseDn);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		String[] baseDn = this.embeddedProperties.getBaseDn().toArray(new String[0]);, +		InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(baseDn);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, + * Copyright 2012-2018 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.boot.context.properties.bind.convert.Delimiter;, +	@Delimiter(Delimiter.NONE), +	private List<String> baseDn = new ArrayList<>();, +	public List<String> getBaseDn() {, +	public void setBaseDn(List<String> baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		String[] baseDn = this.embeddedProperties.getBaseDn().toArray(new String[0]);, +		InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(baseDn);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, + * Copyright 2012-2018 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.boot.context.properties.bind.convert.Delimiter;, +	@Delimiter(Delimiter.NONE), +	private List<String> baseDn = new ArrayList<>();, +	public List<String> getBaseDn() {, +	public void setBaseDn(List<String> baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues("spring.ldap.embedded.port:1234",, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +		TestPropertyValues.of("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org",, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +						"spring.ldap.embedded.base-dn:dc=spring,dc=org"), +		this.contextRunner.withPropertyValues(, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		String[] baseDn = this.embeddedProperties.getBaseDn().toArray(new String[0]);, +		InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(baseDn);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapProperties.java, + * Copyright 2012-2018 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.boot.context.properties.bind.convert.Delimiter;, +	@Delimiter(Delimiter.NONE), +	private List<String> baseDn = new ArrayList<>();, +	public List<String> getBaseDn() {, +	public void setBaseDn(List<String> baseDn) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfigurationTests.java, +		this.contextRunner.withPropertyValues("spring.ldap.embedded.port:1234",, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +		TestPropertyValues.of("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org",, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +						"spring.ldap.embedded.base-dn:dc=spring,dc=org"), +		this.contextRunner.withPropertyValues(, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[NOTE], +====, +It is possible to define multiple base-dn values, however, since distinguished names, +usually contain commas, they must be defined using the correct notation., +, +In yaml files, you can use the yaml list notation:, +, +[source,yaml,indent=0], +----, +	spring.ldap.embedded.base-dn:, +	  - dc=spring,dc=io, +	  - dc=pivotal,dc=io, +----, +, +in properties files, you must include the index as part of the property name:, +, +[source,properties,indent=0], +----, +	spring.ldap.embedded.base-dn[0]=dc=spring,dc=io, +	spring.ldap.embedded.base-dn[1]=dc=pivotal,dc=io, +----, +, +====, +]