[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java, +, +import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects, + * the existence of a {@link MultipartConfigElement} in the app context and then adds, + * critical beans while also autowiring it into the Jetty/Tomcat embedded containers., +	@ConditionalOnBean(MultipartConfigElement.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java, +, +import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects, + * the existence of a {@link MultipartConfigElement} in the app context and then adds, + * critical beans while also autowiring it into the Jetty/Tomcat embedded containers., +	@ConditionalOnBean(MultipartConfigElement.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +			ServletRegistrationBean registration = new ServletRegistrationBean(servlet,, +					url);, +			registration.setName(name);, +			registration.setMultipartConfig(getMultipartConfig());, +			initializers.add(registration);, +	private MultipartConfigElement getMultipartConfig() {, +		List<Entry<String, MultipartConfigElement>> beans = getOrderedBeansOfType(MultipartConfigElement.class);, +		if (beans.isEmpty()) {, +			return null;, +		}, +		return beans.get(0).getValue();, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java, +, +import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects, + * the existence of a {@link MultipartConfigElement} in the app context and then adds, + * critical beans while also autowiring it into the Jetty/Tomcat embedded containers., +	@ConditionalOnBean(MultipartConfigElement.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +			ServletRegistrationBean registration = new ServletRegistrationBean(servlet,, +					url);, +			registration.setName(name);, +			registration.setMultipartConfig(getMultipartConfig());, +			initializers.add(registration);, +	private MultipartConfigElement getMultipartConfig() {, +		List<Entry<String, MultipartConfigElement>> beans = getOrderedBeansOfType(MultipartConfigElement.class);, +		if (beans.isEmpty()) {, +			return null;, +		}, +		return beans.get(0).getValue();, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/ServletRegistrationBean.java, +	private MultipartConfigElement multipartConfig;, +	 * {@link Servlet} and URL mappings., +	 * Set the the {@link MultipartConfigElement multi-part configuration}., +	 * @param multipartConfig the muti-part configuration to set or {@code null}, +	 */, +	public void setMultipartConfig(MultipartConfigElement multipartConfig) {, +		this.multipartConfig = multipartConfig;, +	}, +, +	/**, +	 * Returns the {@link MultipartConfigElement multi-part configuration} to be applied, +	 * or {@code null}., +	 */, +	public MultipartConfigElement getMultipartConfig() {, +		return this.multipartConfig;, +	}, +, +	/**, +		if (this.multipartConfig != null) {, +			registration.setMultipartConfig(this.multipartConfig);, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/MultipartAutoConfiguration.java, +, +import org.springframework.bootstrap.context.annotation.EnableAutoConfiguration;, + * {@link EnableAutoConfiguration Auto-configuration} for multi-part uploads. It detects, + * the existence of a {@link MultipartConfigElement} in the app context and then adds, + * critical beans while also autowiring it into the Jetty/Tomcat embedded containers., +	@ConditionalOnBean(MultipartConfigElement.class), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +			ServletRegistrationBean registration = new ServletRegistrationBean(servlet,, +					url);, +			registration.setName(name);, +			registration.setMultipartConfig(getMultipartConfig());, +			initializers.add(registration);, +	private MultipartConfigElement getMultipartConfig() {, +		List<Entry<String, MultipartConfigElement>> beans = getOrderedBeansOfType(MultipartConfigElement.class);, +		if (beans.isEmpty()) {, +			return null;, +		}, +		return beans.get(0).getValue();, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/ServletRegistrationBean.java, +	private MultipartConfigElement multipartConfig;, +	 * {@link Servlet} and URL mappings., +	 * Set the the {@link MultipartConfigElement multi-part configuration}., +	 * @param multipartConfig the muti-part configuration to set or {@code null}, +	 */, +	public void setMultipartConfig(MultipartConfigElement multipartConfig) {, +		this.multipartConfig = multipartConfig;, +	}]