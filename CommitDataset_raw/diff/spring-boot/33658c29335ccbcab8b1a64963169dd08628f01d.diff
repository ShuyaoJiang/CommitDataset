[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +import java.util.LinkedHashMap;, +, +			orderedClassNames.add(autoConfigurationClass.getClassName());, +, +, +		// Create a look up table of actual autoconfigs, +		Map<AutoConfigurationClass, AutoConfigurationClass> tosort = new LinkedHashMap<AutoConfigurationClass, AutoConfigurationClass>();, +		for (AutoConfigurationClass current : autoConfigurationClasses) {, +			tosort.put(current, current);, +		}, +		addAftersFromBefores(tosort);, +, +, +, +	private void addAftersFromBefores(, +			Map<AutoConfigurationClass, AutoConfigurationClass> map) throws IOException {, +		// Pick up any befores and add them to the corresponding after, +		for (AutoConfigurationClass current : map.keySet()) {, +			for (AutoConfigurationClass before : current.getBefore()) {, +				if (map.containsKey(before)) {, +					map.get(before).getAfter().add(current);, +				}, +			}, +		}, +	}, +, +	private void doSortByAfterAnnotation(, +			Map<AutoConfigurationClass, AutoConfigurationClass> tosort,, +			current = tosort.remove(tosort.keySet().iterator().next());, +			if (!sorted.contains(after) && tosort.containsKey(after)) {, +				doSortByAfterAnnotation(tosort, sorted, processing, tosort.get(after));, +		private int order;, +		private List<AutoConfigurationClass> before;, +, +		private Map<String, Object> beforeAnnotation;, +, +			this.order = (orderedAnnotation == null ? 0 : (Integer) orderedAnnotation, +					.get("value"));, +			// Read @AutoConfigureBefore annotation, +			this.beforeAnnotation = metadata.getAnnotationAttributes(, +					AutoConfigureBefore.class.getName(), true);, +		public String getClassName() {, +			return this.className;, +		}, +, +					this.after = new ArrayList<AutoConfigurationClass>();, +		public List<AutoConfigurationClass> getBefore() throws IOException {, +			if (this.before == null) {, +				if (this.beforeAnnotation == null) {, +					this.before = Collections.emptyList();, +				}, +				else {, +					this.before = new ArrayList<AutoConfigurationClass>();, +					for (String beforeClass : (String[]) this.beforeAnnotation, +							.get("value")) {, +						this.before.add(new AutoConfigurationClass(beforeClass));, +					}, +				}, +			}, +			return this.before;, +		}, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, +import java.util.LinkedHashMap;, +, +			orderedClassNames.add(autoConfigurationClass.getClassName());, +, +, +		// Create a look up table of actual autoconfigs, +		Map<AutoConfigurationClass, AutoConfigurationClass> tosort = new LinkedHashMap<AutoConfigurationClass, AutoConfigurationClass>();, +		for (AutoConfigurationClass current : autoConfigurationClasses) {, +			tosort.put(current, current);, +		}, +		addAftersFromBefores(tosort);, +, +, +, +	private void addAftersFromBefores(, +			Map<AutoConfigurationClass, AutoConfigurationClass> map) throws IOException {, +		// Pick up any befores and add them to the corresponding after, +		for (AutoConfigurationClass current : map.keySet()) {, +			for (AutoConfigurationClass before : current.getBefore()) {, +				if (map.containsKey(before)) {, +					map.get(before).getAfter().add(current);, +				}, +			}, +		}, +	}, +, +	private void doSortByAfterAnnotation(, +			Map<AutoConfigurationClass, AutoConfigurationClass> tosort,, +			current = tosort.remove(tosort.keySet().iterator().next());, +			if (!sorted.contains(after) && tosort.containsKey(after)) {, +				doSortByAfterAnnotation(tosort, sorted, processing, tosort.get(after));, +		private int order;, +		private List<AutoConfigurationClass> before;, +, +		private Map<String, Object> beforeAnnotation;]