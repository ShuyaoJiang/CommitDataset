[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +import java.beans.PropertyDescriptor;, +import java.util.HashSet;, +import java.util.Set;, +		Set<String> names = new HashSet<String>();, +		if (this.target != null) {, +			PropertyDescriptor[] descriptors = BeanUtils, +					.getPropertyDescriptors(this.target.getClass());, +			for (PropertyDescriptor descriptor : descriptors) {, +				String name = descriptor.getName();, +				if (!name.equals("class")) {, +					names.add(name);, +					names.add(name + ".*");, +					names.add(name + "_*");, +				}, +			}, +		}, +, +				this.properties) : new PropertySourcesPropertyValues(, +				this.propertySources, names));, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +import java.beans.PropertyDescriptor;, +import java.util.HashSet;, +import java.util.Set;, +		Set<String> names = new HashSet<String>();, +		if (this.target != null) {, +			PropertyDescriptor[] descriptors = BeanUtils, +					.getPropertyDescriptors(this.target.getClass());, +			for (PropertyDescriptor descriptor : descriptors) {, +				String name = descriptor.getName();, +				if (!name.equals("class")) {, +					names.add(name);, +					names.add(name + ".*");, +					names.add(name + "_*");, +				}, +			}, +		}, +, +				this.properties) : new PropertySourcesPropertyValues(, +				this.propertySources, names));, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +import org.springframework.util.PatternMatchUtils;, +	private Collection<String> NON_ENUMERABLES = Arrays.asList(, +			StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +			StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);;, +, +		this(propertySources, null);, +	}, +, +	/**, +	 * Create a new PropertyValues from the given PropertySources, +	 * @param propertySources a PropertySources instance, +	 * @param systemPropertyNames property names to include from system properties and, +	 * environment variables, +	 */, +	public PropertySourcesPropertyValues(PropertySources propertySources,, +			Collection<String> systemPropertyNames) {, +		String[] includes = systemPropertyNames == null ? new String[0], +				: systemPropertyNames.toArray(new String[0]);, +			if (source instanceof EnumerablePropertySource) {, +						if (this.NON_ENUMERABLES.contains(source.getName()), +								&& !PatternMatchUtils.simpleMatch(includes, propertyName)) {, +							continue;, +						}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +import java.beans.PropertyDescriptor;, +import java.util.HashSet;, +import java.util.Set;, +		Set<String> names = new HashSet<String>();, +		if (this.target != null) {, +			PropertyDescriptor[] descriptors = BeanUtils, +					.getPropertyDescriptors(this.target.getClass());, +			for (PropertyDescriptor descriptor : descriptors) {, +				String name = descriptor.getName();, +				if (!name.equals("class")) {, +					names.add(name);, +					names.add(name + ".*");, +					names.add(name + "_*");, +				}, +			}, +		}, +, +				this.properties) : new PropertySourcesPropertyValues(, +				this.propertySources, names));, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +import org.springframework.util.PatternMatchUtils;, +	private Collection<String> NON_ENUMERABLES = Arrays.asList(, +			StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +			StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME);;, +, +		this(propertySources, null);, +	}, +, +	/**, +	 * Create a new PropertyValues from the given PropertySources, +	 * @param propertySources a PropertySources instance, +	 * @param systemPropertyNames property names to include from system properties and, +	 * environment variables, +	 */, +	public PropertySourcesPropertyValues(PropertySources propertySources,]