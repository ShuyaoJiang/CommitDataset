[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, +			HikariDataSource dataSource = createDataSource(properties,, +					HikariDataSource.class);, +			if (properties.getName() != null) {, +				dataSource.setPoolName(properties.getName());, +			}, +			return dataSource;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, +			HikariDataSource dataSource = createDataSource(properties,, +					HikariDataSource.class);, +			if (properties.getName() != null) {, +				dataSource.setPoolName(properties.getName());, +			}, +			return dataSource;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +				"spring.datasource.name=" + poolName,, +				"spring.datasource.name=" + poolName,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration.java, +			HikariDataSource dataSource = createDataSource(properties,, +					HikariDataSource.class);, +			if (properties.getName() != null) {, +				dataSource.setPoolName(properties.getName());, +			}, +			return dataSource;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +				"spring.datasource.name=" + poolName,, +				"spring.datasource.name=" + poolName,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/HikariDataSourceConfigurationTests.java, + * @author Stephane Nicoll, +	private AnnotationConfigApplicationContext context;, +	public void close() {, +		if (this.context != null) {, +			this.context.close();, +		}, +		load();, +		assertThat(this.context.getBeansOfType(DataSource.class)).hasSize(1);, +		assertThat(this.context.getBeansOfType(HikariDataSource.class)).hasSize(1);, +		load("spring.datasource.hikari.jdbc-url=jdbc:foo//bar/spam",, +				"spring.datasource.hikari.max-lifetime=1234");, +		load("spring.datasource.hikari.data-source-properties.dataSourceClassName=org.h2.JDBCDataSource");, +		load();, +	@Test, +	public void nameIsAliasedToPoolName() {, +		load("spring.datasource.name=myDS");, +		HikariDataSource ds = this.context.getBean(HikariDataSource.class);, +		assertThat(ds.getPoolName()).isEqualTo("myDS");, +	}, +, +	@Test, +	public void poolNameTakesPrecedenceOverName() {, +		load("spring.datasource.name=myDS",, +				"spring.datasource.hikari.pool-name=myHikariDS");, +		HikariDataSource ds = this.context.getBean(HikariDataSource.class);, +		assertThat(ds.getPoolName()).isEqualTo("myHikariDS");, +	}, +, +	private void load(String... environment) {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		TestPropertyValues.of(environment), +				.and("spring.datasource.initialize", "false"), +				.and("spring.datasource.type", HikariDataSource.class.getName()), +				.applyTo(ctx);, +		ctx.register(DataSourceAutoConfiguration.class);, +		ctx.refresh();, +		this.context = ctx;]