[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	private ObjectProvider<MessageConverter> messageConverter;, +, +	@Autowired, +		configurer.setMessageConverter(this.messageConverter.getIfUnique());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	private ObjectProvider<MessageConverter> messageConverter;, +, +	@Autowired, +		configurer.setMessageConverter(this.messageConverter.getIfUnique());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	@Autowired, +	private ObjectProvider<MessageConverter> messageConverter;, +, +		RabbitTemplate rabbitTemplate = new RabbitTemplate(this.connectionFactory);, +		MessageConverter messageConverter = this.messageConverter.getIfUnique();, +		if (messageConverter != null) {, +			rabbitTemplate.setMessageConverter(messageConverter);, +		}, +		return rabbitTemplate;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	private ObjectProvider<MessageConverter> messageConverter;, +, +	@Autowired, +		configurer.setMessageConverter(this.messageConverter.getIfUnique());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	@Autowired, +	private ObjectProvider<MessageConverter> messageConverter;, +, +		RabbitTemplate rabbitTemplate = new RabbitTemplate(this.connectionFactory);, +		MessageConverter messageConverter = this.messageConverter.getIfUnique();, +		if (messageConverter != null) {, +			rabbitTemplate.setMessageConverter(messageConverter);, +		}, +		return rabbitTemplate;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/SimpleRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.amqp.support.converter.MessageConverter;, +	private MessageConverter messageConverter;, +, +	 * Set the {@link MessageConverter} to use or {@code null} if the out-of-the-box, +	 * converter should be used., +	 * @param messageConverter the {@link MessageConverter}, +	 */, +	void setMessageConverter(MessageConverter messageConverter) {, +		this.messageConverter = messageConverter;, +	}, +, +	/**, +		if (this.messageConverter != null) {, +			factory.setMessageConverter(this.messageConverter);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	private ObjectProvider<MessageConverter> messageConverter;, +, +	@Autowired, +		configurer.setMessageConverter(this.messageConverter.getIfUnique());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.amqp.support.converter.MessageConverter;, +import org.springframework.beans.factory.ObjectProvider;, +	@Autowired, +	private ObjectProvider<MessageConverter> messageConverter;, +, +		RabbitTemplate rabbitTemplate = new RabbitTemplate(this.connectionFactory);, +		MessageConverter messageConverter = this.messageConverter.getIfUnique();, +		if (messageConverter != null) {, +			rabbitTemplate.setMessageConverter(messageConverter);, +		}, +		return rabbitTemplate;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/SimpleRabbitListenerContainerFactoryConfigurer.java, +import org.springframework.amqp.support.converter.MessageConverter;, +	private MessageConverter messageConverter;, +, +	 * Set the {@link MessageConverter} to use or {@code null} if the out-of-the-box, +	 * converter should be used., +	 * @param messageConverter the {@link MessageConverter}, +	 */, +	void setMessageConverter(MessageConverter messageConverter) {, +		this.messageConverter = messageConverter;, +	}, +, +	/**, +		if (this.messageConverter != null) {, +			factory.setMessageConverter(this.messageConverter);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java]