[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java, +		 * Create a {@link RedisClusterConfiguration} if necessary., +		 * @return {@literal null} if no cluster settings are set., +				config.setMaxRedirects(config.getMaxRedirects());, +			List<RedisNode> nodes = new ArrayList<RedisNode>();, +			for (String node : StringUtils.commaDelimitedListToStringArray(sentinel.getNodes())) {, +					nodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +			return nodes;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java, +		 * Create a {@link RedisClusterConfiguration} if necessary., +		 * @return {@literal null} if no cluster settings are set., +				config.setMaxRedirects(config.getMaxRedirects());, +			List<RedisNode> nodes = new ArrayList<RedisNode>();, +			for (String node : StringUtils.commaDelimitedListToStringArray(sentinel.getNodes())) {, +					nodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +			return nodes;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		return this.cluster;, +, +		 * Comma-separated list of "host:port" pairs to bootstrap from. This represents, +		 * an "initial" list of cluster nodes and is required to have at least one entry., +		 * Maximum number of redirects to follow when executing commands across the, +		 * cluster., +			return this.nodes;, +			return this.maxRedirects;, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java, +		 * Create a {@link RedisClusterConfiguration} if necessary., +		 * @return {@literal null} if no cluster settings are set., +				config.setMaxRedirects(config.getMaxRedirects());, +			List<RedisNode> nodes = new ArrayList<RedisNode>();, +			for (String node : StringUtils.commaDelimitedListToStringArray(sentinel.getNodes())) {, +					nodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +			return nodes;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		return this.cluster;, +, +		 * Comma-separated list of "host:port" pairs to bootstrap from. This represents, +		 * an "initial" list of cluster nodes and is required to have at least one entry., +		 * Maximum number of redirects to follow when executing commands across the, +		 * cluster., +			return this.nodes;, +			return this.maxRedirects;, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java, +		 * Create a {@link RedisClusterConfiguration} if necessary., +		 * @return {@literal null} if no cluster settings are set., +				config.setMaxRedirects(config.getMaxRedirects());, +			List<RedisNode> nodes = new ArrayList<RedisNode>();, +			for (String node : StringUtils.commaDelimitedListToStringArray(sentinel.getNodes())) {, +					nodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1])));, +			return nodes;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		return this.cluster;, +, +		 * Comma-separated list of "host:port" pairs to bootstrap from. This represents, +		 * an "initial" list of cluster nodes and is required to have at least one entry., +		 * Maximum number of redirects to follow when executing commands across the, +		 * cluster., +			return this.nodes;, +			return this.maxRedirects;, +, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster., +	spring.redis.cluster.nodes= # Comma-separated list of "host:port" pairs to bootstrap from.]