[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +	private static final Pattern CAMEL_CASE_PATTERN = Pattern.compile("([^A-Z-])([A-Z])");, +, +		Matcher matcher = CAMEL_CASE_PATTERN.matcher(name);, +		StringBuffer result = new StringBuffer();, +		while (matcher.find()) {, +			String first = matcher.group(1);, +			String second = matcher.group(2);, +			String target;, +			if (first.equals("_")) { // not a word for the binder, +				target = first + second;, +			} else {, +				target = first + "-" + second;, +			matcher.appendReplacement(result,target);, +		matcher.appendTail(result);, +		String value = result.toString();, +		return value.toLowerCase();, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadata.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +	private static final Pattern CAMEL_CASE_PATTERN = Pattern.compile("([^A-Z-])([A-Z])");, +, +		Matcher matcher = CAMEL_CASE_PATTERN.matcher(name);, +		StringBuffer result = new StringBuffer();, +		while (matcher.find()) {, +			String first = matcher.group(1);, +			String second = matcher.group(2);, +			String target;, +			if (first.equals("_")) { // not a word for the binder, +				target = first + second;, +			} else {, +				target = first + "-" + second;, +			matcher.appendReplacement(result,target);, +		matcher.appendTail(result);, +		String value = result.toString();, +		return value.toLowerCase();, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/ConfigurationMetadataTests.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor.metadata;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.MatcherAssert.assertThat;, +, +/**, + * Tests for {@link ConfigurationMetadata}., + *, + * @author Stephane Nicoll, + */, +public class ConfigurationMetadataTests {, +, +	@Test, +	public void toDashedCaseCamelCase() {, +		assertThat(ConfigurationMetadata.toDashedCase("simpleCamelCase"), is("simple-camel-case"));, +	}, +, +	@Test, +	public void toDashedCaseWordsUnderScore() {, +		assertThat(ConfigurationMetadata.toDashedCase("Word_With_underscore"), is("word_with_underscore"));, +	}, +, +	@Test, +	public void toDashedCaseWordsSeveralUnderScores() {, +		assertThat(ConfigurationMetadata.toDashedCase("Word___With__underscore"), is("word___with__underscore"));, +	}, +, +	@Test, +	public void toDashedCaseLowerCaseUnderscore() {, +		assertThat(ConfigurationMetadata.toDashedCase("lower_underscore"), is("lower_underscore"));, +	}, +, +	@Test, +	public void toDashedCaseUpperUnderscore() {, +		assertThat(ConfigurationMetadata.toDashedCase("UPPER_UNDERSCORE"), is("upper_underscore"));, +	}, +, +	@Test, +	public void toDashedCaseMultipleUnderscores() {, +		assertThat(ConfigurationMetadata.toDashedCase("super___crazy"), is("super___crazy"));, +	}, +, +	@Test]