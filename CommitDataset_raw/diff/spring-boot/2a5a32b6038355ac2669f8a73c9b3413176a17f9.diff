[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.h2database</groupId>, +			<artifactId>h2</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>slf4j-jdk14</artifactId>, +			<scope>test</scope>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-test</artifactId>, +		<dependency>, +			<groupId>org.yaml</groupId>, +			<artifactId>snakeyaml</artifactId>, +		</dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.h2database</groupId>, +			<artifactId>h2</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.slf4j</groupId>, +			<artifactId>slf4j-jdk14</artifactId>, +			<scope>test</scope>, +			<groupId>org.springframework.security</groupId>, +			<artifactId>spring-security-test</artifactId>, +		<dependency>, +			<groupId>org.yaml</groupId>, +			<artifactId>snakeyaml</artifactId>, +		</dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsoleAutoConfiguration.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.h2;, +, +import org.h2.server.web.WebServlet;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode;, +import org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +import org.springframework.boot.context.embedded.ServletRegistrationBean;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.annotation.Order;, +import org.springframework.security.config.annotation.ObjectPostProcessor;, +import org.springframework.security.config.annotation.web.builders.HttpSecurity;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for H2's web console, + *, + * @author Andy Wilkinson, + * @since 1.3.0, + */, +@Configuration, +@ConditionalOnWebApplication, +@ConditionalOnClass(WebServlet.class), +@ConditionalOnProperty(prefix = "spring.h2.console", name = "enabled", havingValue = "true", matchIfMissing = false), +@EnableConfigurationProperties(H2ConsoleProperties.class), +@AutoConfigureAfter(SecurityAutoConfiguration.class), +public class H2ConsoleAutoConfiguration {, +, +	@Autowired, +	private H2ConsoleProperties properties;, +, +	@Bean, +	public ServletRegistrationBean h2Console() {, +		return new ServletRegistrationBean(new WebServlet(), this.properties.getPath(), +				.endsWith("/") ? this.properties.getPath() + "*", +				: this.properties.getPath() + "/*");, +	}, +, +	@Configuration, +	@ConditionalOnClass(WebSecurityConfigurerAdapter.class), +	@ConditionalOnBean(ObjectPostProcessor.class), +	@ConditionalOnProperty(prefix = "security.basic", name = "enabled", matchIfMissing = true), +	static class H2ConsoleSecurityConfiguration {, +, +		@Bean]