[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateAvailabilityProviders.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.template;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.support.SpringFactoriesLoader;, +import org.springframework.util.Assert;, +, +/**, + * Collection of {@link TemplateAvailabilityProvider} beans that can be used to check, + * which (if any) templating engine supports a given view. Caches responses unless the, + * {@code spring.template.provider.cache} property is set to {@code false}., + *, + * @author Phillip Webb, + * @since 1.4.0, + */, +public class TemplateAvailabilityProviders {, +, +	private final List<TemplateAvailabilityProvider> providers;, +, +	private static final int CACHE_LIMIT = 1024;, +, +	private static final TemplateAvailabilityProvider NONE = new NoTemplateAvailabilityProvider();, +, +	/**, +	 * resolved template views, returning already cached instances without a global lock., +	 */, +	private final Map<String, TemplateAvailabilityProvider> resolved = new ConcurrentHashMap<String, TemplateAvailabilityProvider>(, +			CACHE_LIMIT);, +, +	/**, +	 * Map from view name resolve template view, synchronized when accessed., +	 */, +	@SuppressWarnings("serial"), +	private final Map<String, TemplateAvailabilityProvider> cache = new LinkedHashMap<String, TemplateAvailabilityProvider>(, +			CACHE_LIMIT, 0.75f, true) {, +, +		@Override, +		protected boolean removeEldestEntry(, +				Map.Entry<String, TemplateAvailabilityProvider> eldest) {, +			if (size() > CACHE_LIMIT) {, +				TemplateAvailabilityProviders.this.resolved.remove(eldest.getKey());, +				return true;, +			}, +			return false;, +		}, +, +	};, +, +	/**, +	 * Create a new {@link TemplateAvailabilityProviders} instance., +	 * @param applicationContext the source application context, +	 */, +	public TemplateAvailabilityProviders(ApplicationContext applicationContext) {, +		this(applicationContext == null ? null : applicationContext.getClassLoader());, +	}, +, +	/**, +	 * Create a new {@link TemplateAvailabilityProviders} instance., +	 * @param classLoader the source class loader, +	 */, +	public TemplateAvailabilityProviders(ClassLoader classLoader) {, +		Assert.notNull(classLoader, "ClassLoader must not be null");, +		this.providers = SpringFactoriesLoader, +				.loadFactories(TemplateAvailabilityProvider.class, classLoader);, +	}, +, +	/**, +	 * Create a new {@link TemplateAvailabilityProviders} instance., +	 * @param providers the underlying providers, +	 */, +	protected TemplateAvailabilityProviders(, +			Collection<? extends TemplateAvailabilityProvider> providers) {, +		Assert.notNull(providers, "Providers must not be null");, +		this.providers = new ArrayList<TemplateAvailabilityProvider>(providers);]