[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		try {, +		catch (UnsupportedOperationException ex) {, +			return createNewCollection(additional);, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +	private Collection<Object> createNewCollection(Collection<Object> additional) {, +		try {, +			Collection<Object> merged = additional.getClass().newInstance();, +			merged.addAll(additional);, +			return merged;, +		}, +		catch (Exception e) {, +			throw new IllegalStateException("Adding bound values to collection failed.");, +		}, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +		try {, +		catch (UnsupportedOperationException ex) {, +			return createNewCollection(additional);, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +	private Collection<Object> createNewCollection(Collection<Object> additional) {, +		try {, +			Collection<Object> merged = additional.getClass().newInstance();, +			merged.addAll(additional);, +			return merged;, +		}, +		catch (Exception e) {, +			throw new IllegalStateException("Adding bound values to collection failed.");, +		}, +	}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java, +import java.util.Collections;, +, +	@Test, +	public void bindToImmutableCollectionShouldReturnPopulatedCollection() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.values", "a,b,c");, +		this.sources.add(source);, +		Set<String> result = this.binder.bind("foo.values",, +				STRING_SET.withExistingValue(Collections.emptySet())).get();, +		assertThat(result).hasSize(3);, +	}, +]