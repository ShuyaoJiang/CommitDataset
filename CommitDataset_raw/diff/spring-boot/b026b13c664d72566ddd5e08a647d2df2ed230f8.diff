[+++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.amqp</groupId>, +			<artifactId>spring-rabbit</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.amqp</groupId>, +			<artifactId>spring-rabbit</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.amqp.rabbit.core.RabbitTemplate;, +import org.springframework.boot.actuate.health.RabbitHealthIndicator;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +		RedisAutoConfiguration.class, RabbitAutoConfiguration.class }), +	@Configuration, +	@ConditionalOnBean(RabbitTemplate.class), +	public static class RabbitHealthIndicatorConfiguration {, +, +		@Autowired, +		private Map<String, RabbitTemplate> rabbitTemplates;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "rabbitHealthIndicator"), +		public HealthIndicator<?> redisHealthIndicator() {, +			if (this.rabbitTemplates.size() == 1) {, +				return new RabbitHealthIndicator(this.rabbitTemplates.values().iterator(), +						.next());, +			}, +, +			CompositeHealthIndicator composite = new CompositeHealthIndicator();, +			for (Map.Entry<String, RabbitTemplate> entry : this.rabbitTemplates, +					.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new RabbitHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	}, +, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.amqp</groupId>, +			<artifactId>spring-rabbit</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.amqp.rabbit.core.RabbitTemplate;, +import org.springframework.boot.actuate.health.RabbitHealthIndicator;, +import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;, +		RedisAutoConfiguration.class, RabbitAutoConfiguration.class }), +	@Configuration, +	@ConditionalOnBean(RabbitTemplate.class), +	public static class RabbitHealthIndicatorConfiguration {, +, +		@Autowired, +		private Map<String, RabbitTemplate> rabbitTemplates;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "rabbitHealthIndicator"), +		public HealthIndicator<?> redisHealthIndicator() {, +			if (this.rabbitTemplates.size() == 1) {, +				return new RabbitHealthIndicator(this.rabbitTemplates.values().iterator(), +						.next());, +			}, +, +			CompositeHealthIndicator composite = new CompositeHealthIndicator();, +			for (Map.Entry<String, RabbitTemplate> entry : this.rabbitTemplates, +					.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new RabbitHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/RabbitHealthIndicator.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.health;, +, +import java.util.HashMap;, +import java.util.Map;, +]