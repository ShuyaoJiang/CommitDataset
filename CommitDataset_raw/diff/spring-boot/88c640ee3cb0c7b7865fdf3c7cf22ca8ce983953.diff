[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +				if (startRef > 0) {, +					nodes.addAll(splitPath(current.substring(0, startRef)));, +				current = current.substring(endRef + 1);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +				if (startRef > 0) {, +					nodes.addAll(splitPath(current.substring(0, startRef)));, +				current = current.substring(endRef + 1);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/BindingPreparationTests.java, +	public void testListOfBeansWithList() throws Exception {, +		TargetWithNestedListOfBeansWithList target = new TargetWithNestedListOfBeansWithList();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(target);, +		wrapper.setAutoGrowNestedPaths(true);, +		RelaxedDataBinder binder = new RelaxedDataBinder(target);, +		binder.normalizePath(wrapper, "nested[0].list[1]");, +		assertNotNull(wrapper.getPropertyValue("nested"));, +		assertNotNull(wrapper.getPropertyValue("nested[0].list[1]"));, +	}, +, +	@Test, +	public void testListOfBeansWithListAndNoPeriod() throws Exception {, +		TargetWithNestedListOfBeansWithList target = new TargetWithNestedListOfBeansWithList();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(target);, +		wrapper.setAutoGrowNestedPaths(true);, +		RelaxedDataBinder binder = new RelaxedDataBinder(target);, +		binder.normalizePath(wrapper, "nested[0]list[1]");, +		assertNotNull(wrapper.getPropertyValue("nested"));, +		assertNotNull(wrapper.getPropertyValue("nested[0].list[1]"));, +	}, +, +	@Test, +	public static class TargetWithNestedListOfBeansWithList {, +		private List<TargetWithList> nested;, +, +		public List<TargetWithList> getNested() {, +			return this.nested;, +		}, +, +		public void setNested(List<TargetWithList> nested) {, +			this.nested = nested;, +		}, +	}, +, +	public static class TargetWithList {, +		private List<VanillaTarget> list;, +, +		public List<VanillaTarget> getList() {, +			return this.list;, +		}, +, +		public void setList(List<VanillaTarget> list) {, +			this.list = list;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +				if (startRef > 0) {, +					nodes.addAll(splitPath(current.substring(0, startRef)));, +				current = current.substring(endRef + 1);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/BindingPreparationTests.java, +	public void testListOfBeansWithList() throws Exception {, +		TargetWithNestedListOfBeansWithList target = new TargetWithNestedListOfBeansWithList();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(target);, +		wrapper.setAutoGrowNestedPaths(true);, +		RelaxedDataBinder binder = new RelaxedDataBinder(target);, +		binder.normalizePath(wrapper, "nested[0].list[1]");, +		assertNotNull(wrapper.getPropertyValue("nested"));, +		assertNotNull(wrapper.getPropertyValue("nested[0].list[1]"));, +	}, +, +	@Test, +	public void testListOfBeansWithListAndNoPeriod() throws Exception {, +		TargetWithNestedListOfBeansWithList target = new TargetWithNestedListOfBeansWithList();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(target);, +		wrapper.setAutoGrowNestedPaths(true);, +		RelaxedDataBinder binder = new RelaxedDataBinder(target);, +		binder.normalizePath(wrapper, "nested[0]list[1]");, +		assertNotNull(wrapper.getPropertyValue("nested"));, +		assertNotNull(wrapper.getPropertyValue("nested[0].list[1]"));, +	}, +, +	@Test, +	public static class TargetWithNestedListOfBeansWithList {, +		private List<TargetWithList> nested;, +, +		public List<TargetWithList> getNested() {, +			return this.nested;, +		}, +, +		public void setNested(List<TargetWithList> nested) {, +			this.nested = nested;, +		}, +	}, +, +	public static class TargetWithList {, +		private List<VanillaTarget> list;, +, +		public List<VanillaTarget> getList() {, +			return this.list;]