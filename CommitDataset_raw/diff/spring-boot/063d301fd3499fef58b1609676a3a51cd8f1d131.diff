[+++ b/.settings-template.xml, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/loggers/org.springframework.boot"), +				.perform(post("/loggers/org.springframework.boot"), +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		final Map<String, Object> model = new LinkedHashMap<String, Object>();, +		final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/loggers/org.springframework.boot"), +				.perform(post("/loggers/org.springframework.boot"), +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		final Map<String, Object> model = new LinkedHashMap<String, Object>();, +		final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/health"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN)), +				.perform(get("/logfile").accept(MediaType.TEXT_PLAIN), +				.perform(get("/loggers/org.springframework.boot"), +				.perform(post("/loggers/org.springframework.boot"), +						.contentType(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON), +				.perform(get("/auditevents").param("after", "2016-11-01T10:00:00+0000"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/auditevents").param("principal", "admin"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		final Map<String, Object> model = new LinkedHashMap<String, Object>();, +		final List<EndpointDoc> endpoints = new ArrayList<EndpointDoc>();, +						.perform(get(endpointPath), +								.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +		List<? extends MvcEndpoint> endpoints = new ArrayList<MvcEndpoint>(, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HealthEndpointDocumentation.java, +				.perform(get("/health"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/HypermediaEndpointDocumentation.java, +				.perform(get("/beans"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +				.perform(get("/metrics"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +						.value("http://localhost:8080/metrics")), +				.perform(get("/actuator"), +						.accept(ActuatorMediaTypes.APPLICATION_ACTUATOR_V1_JSON)), +++ b/.settings-template.xml, +++ b/pom.xml, +	<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/pom.xml, +		<version>1.5.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			.<String>unmodifiableSet(new HashSet<String>(, +		this.mockMvc.perform(get("/logfile").accept(MediaType.TEXT_PLAIN))]