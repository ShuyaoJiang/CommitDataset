[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +		MutablePropertyValues properties = new MutablePropertyValues(this.properties);, +		new RelaxedDataBinder(result).withAlias("url", "jdbcUrl").bind(properties);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +		MutablePropertyValues properties = new MutablePropertyValues(this.properties);, +		new RelaxedDataBinder(result).withAlias("url", "jdbcUrl").bind(properties);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Collections;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private MultiValueMap<String, String> nameAliases = new LinkedMultiValueMap<String, String>();, +, +	/**, +	 * Set name aliases., +	 * @param aliases a map of property name to aliases, +	 */, +	public void setNameAliases(Map<String, List<String>> aliases) {, +		this.nameAliases = new LinkedMultiValueMap<String, String>(aliases);, +	}, +, +	/**, +	 * Add aliases to the {@link DataBinder}., +	 * @param name the property name to alias, +	 * @param alias aliases for the property names, +	 * @return this instance, +	 */, +	public RelaxedDataBinder withAlias(String name, String... alias) {, +		for (String value : alias) {, +			this.nameAliases.add(name, value);, +		}, +		return this;, +	}, +, +		Iterable<String> names = getNameAndAliases(name);, +		for (String nameOrAlias : names) {, +			for (String candidate : new RelaxedNames(nameOrAlias)) {, +		}, +	private Iterable<String> getNameAndAliases(String name) {, +		List<String> aliases = this.nameAliases.get(name);, +		if (aliases == null) {, +			return Collections.singleton(name);, +		}, +		List<String> nameAndAliases = new ArrayList<String>(aliases.size() + 1);, +		nameAndAliases.add(name);, +		nameAndAliases.addAll(aliases);, +		return nameAndAliases;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +		MutablePropertyValues properties = new MutablePropertyValues(this.properties);, +		new RelaxedDataBinder(result).withAlias("url", "jdbcUrl").bind(properties);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Collections;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private MultiValueMap<String, String> nameAliases = new LinkedMultiValueMap<String, String>();, +, +	/**, +	 * Set name aliases., +	 * @param aliases a map of property name to aliases, +	 */, +	public void setNameAliases(Map<String, List<String>> aliases) {, +		this.nameAliases = new LinkedMultiValueMap<String, String>(aliases);, +	}, +, +	/**, +	 * Add aliases to the {@link DataBinder}., +	 * @param name the property name to alias, +	 * @param alias aliases for the property names, +	 * @return this instance, +	 */, +	public RelaxedDataBinder withAlias(String name, String... alias) {, +		for (String value : alias) {, +			this.nameAliases.add(name, value);, +		}, +		return this;, +	}, +, +		Iterable<String> names = getNameAndAliases(name);, +		for (String nameOrAlias : names) {, +			for (String candidate : new RelaxedNames(nameOrAlias)) {, +		}, +	private Iterable<String> getNameAndAliases(String name) {, +		List<String> aliases = this.nameAliases.get(name);, +		if (aliases == null) {, +			return Collections.singleton(name);, +		}, +		List<String> nameAndAliases = new ArrayList<String>(aliases.size() + 1);, +		nameAndAliases.add(name);, +		nameAndAliases.addAll(aliases);, +		return nameAndAliases;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +import static org.hamcrest.Matchers.nullValue;, +	@Test, +	public void testBindWithoutAlais() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		MutablePropertyValues properties = new MutablePropertyValues();, +		properties.add("flub", "a");]