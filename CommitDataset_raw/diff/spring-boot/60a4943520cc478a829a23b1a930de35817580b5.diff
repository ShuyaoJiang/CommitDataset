[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Primary, +		public MetricCopyExporter metricWritersMetricExporter(MetricReader reader) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Primary, +		public MetricCopyExporter metricWritersMetricExporter(MetricReader reader) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(AbstractMetricExporter.class);, +, +		catch (Exception e) {, +			logger.warn("Could not write to MetricWriter: " + e.getClass() + ": ", +					+ e.getMessage());, +		}, +			try {, +				flush();, +			}, +			catch (Exception e) {, +				logger.warn("Could not flush MetricWriter: " + e.getClass() + ": ", +						+ e.getMessage());, +			}, +	public void flush() {, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Primary, +		public MetricCopyExporter metricWritersMetricExporter(MetricReader reader) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(AbstractMetricExporter.class);, +, +		catch (Exception e) {, +			logger.warn("Could not write to MetricWriter: " + e.getClass() + ": ", +					+ e.getMessage());, +		}, +			try {, +				flush();, +			}, +			catch (Exception e) {, +				logger.warn("Could not flush MetricWriter: " + e.getClass() + ": ", +						+ e.getMessage());, +			}, +	public void flush() {, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporter.java, +import org.springframework.boot.actuate.metrics.writer.WriterUtils;, +	@Override, +	public void flush() {, +		WriterUtils.flush(this.writer);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java, +		@Primary, +		public MetricCopyExporter metricWritersMetricExporter(MetricReader reader) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/AbstractMetricExporter.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(AbstractMetricExporter.class);, +, +		catch (Exception e) {, +			logger.warn("Could not write to MetricWriter: " + e.getClass() + ": ", +					+ e.getMessage());, +		}, +			try {, +				flush();, +			}, +			catch (Exception e) {, +				logger.warn("Could not flush MetricWriter: " + e.getClass() + ": ", +						+ e.getMessage());, +			}, +	public void flush() {, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricCopyExporter.java, +import org.springframework.boot.actuate.metrics.writer.WriterUtils;, +	@Override, +	public void flush() {, +		WriterUtils.flush(this.writer);, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/opentsdb/DefaultOpenTsdbNamingStrategy.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +]