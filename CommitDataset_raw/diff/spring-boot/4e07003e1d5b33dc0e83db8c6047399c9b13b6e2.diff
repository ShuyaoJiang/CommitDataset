[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +			builder.heartbeatConnectTimeout(options.getHeartbeatConnectTimeout());, +			builder.heartbeatFrequency(options.getHeartbeatFrequency());, +			builder.heartbeatSocketTimeout(options.getHeartbeatSocketTimeout());, +			builder.localThreshold(options.getLocalThreshold());, +			builder.minConnectionsPerHost(options.getMinConnectionsPerHost());, +			builder.minHeartbeatFrequency(options.getMinHeartbeatFrequency());, +			builder.maxConnectionIdleTime(options.getMaxConnectionIdleTime());, +			builder.maxConnectionLifeTime(options.getMaxConnectionLifeTime());, +			builder.requiredReplicaSetName(options.getRequiredReplicaSetName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +			builder.heartbeatConnectTimeout(options.getHeartbeatConnectTimeout());, +			builder.heartbeatFrequency(options.getHeartbeatFrequency());, +			builder.heartbeatSocketTimeout(options.getHeartbeatSocketTimeout());, +			builder.localThreshold(options.getLocalThreshold());, +			builder.minConnectionsPerHost(options.getMinConnectionsPerHost());, +			builder.minHeartbeatFrequency(options.getMinHeartbeatFrequency());, +			builder.maxConnectionIdleTime(options.getMaxConnectionIdleTime());, +			builder.maxConnectionLifeTime(options.getMaxConnectionLifeTime());, +			builder.requiredReplicaSetName(options.getRequiredReplicaSetName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java, + * Copyright 2012-2016 the original author or authors., +import com.mongodb.MongoClientOptions;, +	@Test, +	public void allMongoClientOptionsCanBeSet() throws UnknownHostException {, +		MongoClientOptions mco = MongoClientOptions.builder(), +				.alwaysUseMBeans(true), +				.connectionsPerHost(101), +				.connectTimeout(10001), +				.cursorFinalizerEnabled(false), +				.description("test"), +				.maxWaitTime(120001), +				.socketKeepAlive(true), +				.socketTimeout(1000), +				.threadsAllowedToBlockForConnectionMultiplier(6), +				.minConnectionsPerHost(0), +				.maxConnectionIdleTime(60000), +				.maxConnectionLifeTime(60000), +				.heartbeatFrequency(10001), +				.minHeartbeatFrequency(501), +				.heartbeatConnectTimeout(20001), +				.heartbeatSocketTimeout(20001), +				.localThreshold(20), +				.requiredReplicaSetName("testReplicaSetName"), +				.build();, +, +		MongoProperties properties = new MongoProperties();, +		MongoClient client = properties.createMongoClient(mco, null);, +		MongoClientOptions wrappedMco = client.getMongoClientOptions();, +, +		assertThat(wrappedMco.isAlwaysUseMBeans(), equalTo(mco.isAlwaysUseMBeans()));, +		assertThat(wrappedMco.getConnectionsPerHost(), equalTo(mco.getConnectionsPerHost()));, +		assertThat(wrappedMco.getConnectTimeout(), equalTo(mco.getConnectTimeout()));, +		assertThat(wrappedMco.isCursorFinalizerEnabled(), equalTo(mco.isCursorFinalizerEnabled()));, +		assertThat(wrappedMco.getDescription(), equalTo(mco.getDescription()));, +		assertThat(wrappedMco.getMaxWaitTime(), equalTo(mco.getMaxWaitTime()));, +		assertThat(wrappedMco.getSocketTimeout(), equalTo(mco.getSocketTimeout()));, +		assertThat(wrappedMco.isSocketKeepAlive(), equalTo(mco.isSocketKeepAlive()));, +		assertThat(wrappedMco.getThreadsAllowedToBlockForConnectionMultiplier(), equalTo(, +				mco.getThreadsAllowedToBlockForConnectionMultiplier()));, +		assertThat(wrappedMco.getMinConnectionsPerHost(), equalTo(mco.getMinConnectionsPerHost()));, +		assertThat(wrappedMco.getMaxConnectionIdleTime(), equalTo(mco.getMaxConnectionIdleTime()));, +		assertThat(wrappedMco.getMaxConnectionLifeTime(), equalTo(mco.getMaxConnectionLifeTime()));, +		assertThat(wrappedMco.getHeartbeatFrequency(), equalTo(mco.getHeartbeatFrequency()));, +		assertThat(wrappedMco.getMinHeartbeatFrequency(), equalTo(mco.getMinHeartbeatFrequency()));, +		assertThat(wrappedMco.getHeartbeatConnectTimeout(), equalTo(mco.getHeartbeatConnectTimeout()));, +		assertThat(wrappedMco.getHeartbeatSocketTimeout(), equalTo(mco.getHeartbeatSocketTimeout()));, +		assertThat(wrappedMco.getLocalThreshold(), equalTo(mco.getLocalThreshold()));, +		assertThat(wrappedMco.getRequiredReplicaSetName(), equalTo(mco.getRequiredReplicaSetName()));, +	}, +]