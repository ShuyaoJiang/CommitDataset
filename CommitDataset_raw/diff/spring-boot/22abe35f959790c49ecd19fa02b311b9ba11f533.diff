[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +import org.springframework.context.support.AbstractResourceBasedMessageSource;, +import org.springframework.context.support.ReloadableResourceBundleMessageSource;, +		AbstractResourceBasedMessageSource messageSource = (properties.isReloadable(), +				? new ReloadableResourceBundleMessageSource(), +				: new ResourceBundleMessageSource());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +import org.springframework.context.support.AbstractResourceBasedMessageSource;, +import org.springframework.context.support.ReloadableResourceBundleMessageSource;, +		AbstractResourceBasedMessageSource messageSource = (properties.isReloadable(), +				? new ReloadableResourceBundleMessageSource(), +				: new ResourceBundleMessageSource());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	/**, +	 * Whether to use a "ReloadableResourceBundleMessageSource" rather than the default, +	 * "ResourceBundleMessageSource". Recommended during development only., +	 */, +	private boolean reloadable = false;, +, +	public boolean isReloadable() {, +		return this.reloadable;, +	}, +, +	public void setReloadable(boolean reloadable) {, +		this.reloadable = reloadable;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +import org.springframework.context.support.AbstractResourceBasedMessageSource;, +import org.springframework.context.support.ReloadableResourceBundleMessageSource;, +		AbstractResourceBasedMessageSource messageSource = (properties.isReloadable(), +				? new ReloadableResourceBundleMessageSource(), +				: new ResourceBundleMessageSource());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	/**, +	 * Whether to use a "ReloadableResourceBundleMessageSource" rather than the default, +	 * "ResourceBundleMessageSource". Recommended during development only., +	 */, +	private boolean reloadable = false;, +, +	public boolean isReloadable() {, +		return this.reloadable;, +	}, +, +	public void setReloadable(boolean reloadable) {, +		this.reloadable = reloadable;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +			Assert.isTrue(!path.contains("*"), "Path must not contain wildcards");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java, +import org.springframework.context.support.AbstractResourceBasedMessageSource;, +import org.springframework.context.support.ReloadableResourceBundleMessageSource;, +		AbstractResourceBasedMessageSource messageSource = (properties.isReloadable(), +				? new ReloadableResourceBundleMessageSource(), +				: new ResourceBundleMessageSource());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	/**, +	 * Whether to use a "ReloadableResourceBundleMessageSource" rather than the default, +	 * "ResourceBundleMessageSource". Recommended during development only., +	 */, +	private boolean reloadable = false;, +, +	public boolean isReloadable() {, +		return this.reloadable;, +	}, +, +	public void setReloadable(boolean reloadable) {, +		this.reloadable = reloadable;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, +			Assert.isTrue(!path.contains("*"), "Path must not contain wildcards");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfigurationTests.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.support.DelegatingMessageSource;, +import org.springframework.context.support.ReloadableResourceBundleMessageSource;, +import org.springframework.context.support.ResourceBundleMessageSource;, +	@Test, +	public void testDefaultReloadableValueMessageSource() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages"), +				.run((context) -> assertThat(getDeclaredMessageSource(context)), +						.isInstanceOf(ResourceBundleMessageSource.class));, +	}, +, +	@Test, +	public void testNotReloadableMessageSource() {, +		this.contextRunner, +				.withPropertyValues("spring.messages.basename:test/messages",, +						"spring.messages.reloadable:false"), +				.run((context) -> assertThat(getDeclaredMessageSource(context)), +						.isInstanceOf(ResourceBundleMessageSource.class));, +	}, +, +	@Test, +	public void testReloadableMessageSource() {, +		this.contextRunner.withPropertyValues("spring.messages.basename:test/messages",, +				"spring.messages.reloadable:true").run((context) -> {, +					assertThat(getDeclaredMessageSource(context)), +							.isInstanceOf(ReloadableResourceBundleMessageSource.class);]