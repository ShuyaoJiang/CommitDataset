[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;, +import org.springframework.util.StringUtils;, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also includes, +	 * the links endpoint which is present at the base path of the actuator endpoints. The, +		return new EndpointServerWebExchangeMatcher(true);, +		return new EndpointServerWebExchangeMatcher(endpoints, false);, +		return new EndpointServerWebExchangeMatcher(endpoints, false);, +	}, +, +	/**, +	 * Returns a matcher that matches only on the links endpoint. It can be used when security configuration, +	 * for the links endpoint is different from the other {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can be used in combination with this, +	 * to remove the links endpoint from {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}., +	 * For example: <pre class="code">, +	 * EndpointRequest.toLinks(), +	 * </pre>, +	 * @return the configured {@link ServerWebExchangeMatcher}, +	 */, +	public static LinksServerWebExchangeMatcher toLinks() {, +		return new LinksServerWebExchangeMatcher();, +		private boolean includeLinks;, +, +		private EndpointServerWebExchangeMatcher(boolean includeLinks) {, +			this(Collections.emptyList(), Collections.emptyList(), includeLinks);, +		private EndpointServerWebExchangeMatcher(Class<?>[] endpoints, boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(), includeLinks);, +		private EndpointServerWebExchangeMatcher(String[] endpoints, boolean includeLinks) {, +			this(Arrays.asList((Object[]) endpoints), Collections.emptyList(), includeLinks);, +				List<Object> excludes, boolean includeLinks) {, +			this.includeLinks = includeLinks;, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes, this.includeLinks);, +			return new EndpointServerWebExchangeMatcher(this.includes, excludes, this.includeLinks);, +		}, +, +		public EndpointServerWebExchangeMatcher excludingLinks() {, +			return new EndpointServerWebExchangeMatcher(this.includes, this.excludes, false);, +			List<ServerWebExchangeMatcher> delegateMatchers = getDelegateMatchers(paths);, +			if (this.includeLinks && StringUtils.hasText(pathMappedEndpoints.getBasePath())) {, +				delegateMatchers.add(new PathPatternParserServerWebExchangeMatcher(pathMappedEndpoints.getBasePath()));, +			}, +			return new OrServerWebExchangeMatcher(delegateMatchers);, +	/**, +	 * The The {@link ServerWebExchangeMatcher} used to match against the links endpoint., +	 */, +	public static final class LinksServerWebExchangeMatcher, +			extends ApplicationContextServerWebExchangeMatcher<WebEndpointProperties> {, +, +		private ServerWebExchangeMatcher delegate;, +, +		private LinksServerWebExchangeMatcher() {, +			super(WebEndpointProperties.class);, +		}, +, +		@Override, +		protected void initialized(Supplier<WebEndpointProperties> propertiesSupplier) {, +			WebEndpointProperties webEndpointProperties = propertiesSupplier.get();, +			if (StringUtils.hasText(webEndpointProperties.getBasePath())) {, +				this.delegate = new PathPatternParserServerWebExchangeMatcher(, +						webEndpointProperties.getBasePath());, +			}, +			else {, +				this.delegate = EMPTY_MATCHER;, +			}, +		}, +, +		@Override, +		protected Mono<MatchResult> matches(ServerWebExchange exchange,, +				Supplier<WebEndpointProperties> context) {, +			return this.delegate.matches(exchange);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/reactive/EndpointRequest.java, +import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;, +import org.springframework.util.StringUtils;, +	 * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also includes, +	 * the links endpoint which is present at the base path of the actuator endpoints. The, +		return new EndpointServerWebExchangeMatcher(true);, +		return new EndpointServerWebExchangeMatcher(endpoints, false);, +		return new EndpointServerWebExchangeMatcher(endpoints, false);, +	}, +, +	/**, +	 * Returns a matcher that matches only on the links endpoint. It can be used when security configuration, +	 * for the links endpoint is different from the other {@link Endpoint actuator endpoints}. The, +	 * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can be used in combination with this, +	 * to remove the links endpoint from {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}., +	 * For example: <pre class="code">, +	 * EndpointRequest.toLinks(), +	 * </pre>, +	 * @return the configured {@link ServerWebExchangeMatcher}, +	 */, +	public static LinksServerWebExchangeMatcher toLinks() {, +		return new LinksServerWebExchangeMatcher();, +		private boolean includeLinks;, +, +		private EndpointServerWebExchangeMatcher(boolean includeLinks) {]