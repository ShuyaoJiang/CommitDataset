[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat;, +			DateTimeSerializer.class, JacksonJodaDateFormat.class }), +			JacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat();, +		private JacksonJodaDateFormat getJacksonJodaDateFormat() {, +				return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +					return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat;, +			DateTimeSerializer.class, JacksonJodaDateFormat.class }), +			JacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat();, +		private JacksonJodaDateFormat getJacksonJodaDateFormat() {, +				return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +					return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +import java.text.DateFormat;, +import com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy;, +import com.fasterxml.jackson.databind.util.StdDateFormat;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.nullValue;, +		assertThat(mapper.getDateFormat(), is(instanceOf(StdDateFormat.class)));, +		DateFormat dateFormat = mapper.getDateFormat();, +		assertThat(dateFormat, is(instanceOf(SimpleDateFormat.class)));, +		assertThat(((SimpleDateFormat) dateFormat).toPattern(),, +				is(equalTo("yyyyMMddHHmmss")));, +		assertThat(mapper.getDateFormat(), is(instanceOf(MyDateFormat.class)));, +		assertThat(mapper.getPropertyNamingStrategy(), is(nullValue()));, +	public void customPropertyNamingStrategyField() throws Exception {, +		assertThat(mapper.getPropertyNamingStrategy(),, +				is(instanceOf(LowerCaseWithUnderscoresStrategy.class)));, +		assertThat(mapper.getPropertyNamingStrategy(),, +				is(instanceOf(LowerCaseWithUnderscoresStrategy.class)));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat;, +			DateTimeSerializer.class, JacksonJodaDateFormat.class }), +			JacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat();, +		private JacksonJodaDateFormat getJacksonJodaDateFormat() {, +				return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +					return new JacksonJodaDateFormat(DateTimeFormat.forPattern(, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java, +import java.text.DateFormat;, +import com.fasterxml.jackson.databind.PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy;, +import com.fasterxml.jackson.databind.util.StdDateFormat;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.nullValue;, +		assertThat(mapper.getDateFormat(), is(instanceOf(StdDateFormat.class)));, +		DateFormat dateFormat = mapper.getDateFormat();, +		assertThat(dateFormat, is(instanceOf(SimpleDateFormat.class)));, +		assertThat(((SimpleDateFormat) dateFormat).toPattern(),, +				is(equalTo("yyyyMMddHHmmss")));, +		assertThat(mapper.getDateFormat(), is(instanceOf(MyDateFormat.class)));, +		assertThat(mapper.getPropertyNamingStrategy(), is(nullValue()));, +	public void customPropertyNamingStrategyField() throws Exception {, +		assertThat(mapper.getPropertyNamingStrategy(),, +				is(instanceOf(LowerCaseWithUnderscoresStrategy.class)));, +		assertThat(mapper.getPropertyNamingStrategy(),, +				is(instanceOf(LowerCaseWithUnderscoresStrategy.class)));, +++ b/spring-boot-dependencies/pom.xml, +		<jackson.version>2.5.1</jackson.version>]