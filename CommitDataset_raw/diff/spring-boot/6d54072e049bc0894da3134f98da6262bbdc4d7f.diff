[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +		public void addFormatters(FormatterRegistry registry) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +		public void addFormatters(FormatterRegistry registry) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		protected static void customizeUndertow(ServerProperties serverProperties,, +		public static void customizeJetty(ServerProperties serverProperties,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +		public void addFormatters(FormatterRegistry registry) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		protected static void customizeUndertow(ServerProperties serverProperties,, +		public static void customizeJetty(ServerProperties serverProperties,, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +	private void setRootViewName(String viewName) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +		public void addFormatters(FormatterRegistry registry) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		protected static void customizeUndertow(ServerProperties serverProperties,, +		public static void customizeJetty(ServerProperties serverProperties,, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +	private void setRootViewName(String viewName) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +	public Neo4jProperties load(boolean embeddedAvailable, String... environment) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridProperties.java, +	public void setApiKey(String apiKey) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +		public void addFormatters(FormatterRegistry registry) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +		protected static void customizeUndertow(ServerProperties serverProperties,, +		public static void customizeJetty(ServerProperties serverProperties,, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WelcomePageHandlerMapping.java, +	private void setRootViewName(String viewName) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +	public Neo4jProperties load(boolean embeddedAvailable, String... environment) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +		public void checkDestination(String name, final boolean pubSub,, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/AuthorizationExceptionMatcher.java, +	public static Matcher<?> withReason(Reason reason) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ThreadedOutcomesResolver(OutcomesResolver outcomesResolver) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceProperties.java, +	public void setUseCodeAsDefaultMessage(boolean useCodeAsDefaultMessage) {]