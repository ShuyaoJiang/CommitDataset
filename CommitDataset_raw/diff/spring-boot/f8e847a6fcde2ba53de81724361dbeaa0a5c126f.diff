[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.Registrar;, +@Import(Registrar.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.Registrar;, +@Import(Registrar.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +		// NOTE the event can happen more than once and, +		// the event datasource is not used here, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor.Registrar;, +@Import(Registrar.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializer.java, +		// NOTE the event can happen more than once and, +		// the event datasource is not used here, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerPostProcessor.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import javax.sql.DataSource;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.GenericBeanDefinition;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +, +/**, + * {@link BeanPostProcessor} used to fire {@link DataSourceInitializedEvent}s. Should only, + * be registered via the inner {@link Registrar} class., + * , + * @author Dave Syer, + * @since 1.1.0, + */, +class DataSourceInitializerPostProcessor implements BeanPostProcessor {, +, +	@Autowired, +	private BeanFactory beanFactory;, +, +	@Override, +	public Object postProcessBeforeInitialization(Object bean, String beanName), +			throws BeansException {, +		return bean;, +	}, +, +	@Override, +	public Object postProcessAfterInitialization(Object bean, String beanName), +			throws BeansException {, +		if (bean instanceof DataSource) {, +			// force initialization of this bean as soon as we see a DataSource, +			this.beanFactory.getBean(DataSourceInitializer.class);, +		}, +		return bean;, +	}, +, +	/**, +	 * {@link ImportBeanDefinitionRegistrar} to register the, +	 * {@link DataSourceInitializerPostProcessor} without causing early bean instantiation, +	 * issues., +	 */, +	static class Registrar implements ImportBeanDefinitionRegistrar {, +, +		private static final String BEAN_NAME = "dataSourceInitializerPostProcessor";, +, +		@Override, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				BeanDefinitionRegistry registry) {, +			if (!registry.containsBeanDefinition(BEAN_NAME)) {, +				GenericBeanDefinition beanDefinition = new GenericBeanDefinition();, +				beanDefinition.setBeanClass(DataSourceInitializerPostProcessor.class);, +				beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +				// We don't need this one to be post processed otherwise it can cause a, +				// cascade of bean instantiation that we would rather avoid., +				beanDefinition.setSynthetic(true);, +				registry.registerBeanDefinition(BEAN_NAME, beanDefinition);, +			}, +		}, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java]