[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		Set<String> profiles = new LinkedHashSet<String>();, +		environment.getActiveProfiles(); // ensure they are initialized, +		// But these ones should go first (last wins in a property key clash), +			profiles.add(profile);, +		profiles.addAll(Arrays.asList(environment.getActiveProfiles()));, +		environment.setActiveProfiles(profiles.toArray(new String[profiles.size()]));, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		Set<String> profiles = new LinkedHashSet<String>();, +		environment.getActiveProfiles(); // ensure they are initialized, +		// But these ones should go first (last wins in a property key clash), +			profiles.add(profile);, +		profiles.addAll(Arrays.asList(environment.getActiveProfiles()));, +		environment.setActiveProfiles(profiles.toArray(new String[profiles.size()]));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			this.profiles = Collections.asLifoQueue(new LinkedList<String>());, +, +			// Any pre-existing active profiles take precedence over those added in, +			// config files (unless latter are prefixed with "+")., +			addActiveProfiles(StringUtils.arrayToCommaDelimitedString(this.environment, +					.getActiveProfiles()));, +, +			this.profiles.add(null);, +				// A profile name prefixed with "+" is always added even if it is, +				// activated in a config file (without the "+" it can be disabled, +				// by an explicit Environment property set before the file was, +				// processed)., +					prependProfile(this.environment, profile);, +		private void prependProfile(ConfigurableEnvironment environment, String profile) {, +			Set<String> profiles = new LinkedHashSet<String>();, +			environment.getActiveProfiles(); // ensure they are initialized, +			// But this one should go first (last wins in a property key clash), +			profiles.add(profile);, +			profiles.addAll(Arrays.asList(environment.getActiveProfiles()));, +			environment.setActiveProfiles(profiles.toArray(new String[profiles.size()]));, +		}, +, +			return asResolvedSet(value, fallback, true);, +		}, +, +		private Set<String> asResolvedSet(String value, String fallback, boolean reverse) {, +			if (reverse) {, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		Set<String> profiles = new LinkedHashSet<String>();, +		environment.getActiveProfiles(); // ensure they are initialized, +		// But these ones should go first (last wins in a property key clash), +			profiles.add(profile);, +		profiles.addAll(Arrays.asList(environment.getActiveProfiles()));, +		environment.setActiveProfiles(profiles.toArray(new String[profiles.size()]));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			this.profiles = Collections.asLifoQueue(new LinkedList<String>());, +, +			// Any pre-existing active profiles take precedence over those added in, +			// config files (unless latter are prefixed with "+")., +			addActiveProfiles(StringUtils.arrayToCommaDelimitedString(this.environment, +					.getActiveProfiles()));, +, +			this.profiles.add(null);, +				// A profile name prefixed with "+" is always added even if it is, +				// activated in a config file (without the "+" it can be disabled, +				// by an explicit Environment property set before the file was, +				// processed)., +					prependProfile(this.environment, profile);, +		private void prependProfile(ConfigurableEnvironment environment, String profile) {, +			Set<String> profiles = new LinkedHashSet<String>();, +			environment.getActiveProfiles(); // ensure they are initialized, +			// But this one should go first (last wins in a property key clash), +			profiles.add(profile);, +			profiles.addAll(Arrays.asList(environment.getActiveProfiles()));, +			environment.setActiveProfiles(profiles.toArray(new String[profiles.size()]));, +		}, +, +			return asResolvedSet(value, fallback, true);, +		}, +, +		private Set<String> asResolvedSet(String value, String fallback, boolean reverse) {, +			if (reverse) {, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/ReproTests.java, + * @author Dave Syer, +	public void activeProfilesWithYamlAndCommandLine() throws Exception {, +		// gh-322, gh-342, +	}, +, +	@Test, +	public void activeProfilesWithYamlOnly() throws Exception {, +		// gh-322, gh-342, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebEnvironment(false);, +		String configName = "--spring.config.name=activeprofilerepro";, +	}, +, +	@Test, +	public void orderActiveProfilesWithYamlOnly() throws Exception {, +		// gh-322, gh-342, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebEnvironment(false);, +		String configName = "--spring.config.name=activeprofilerepro-ordered";, +		assertVersionProperty(application.run(configName), "B", "A", "B");]