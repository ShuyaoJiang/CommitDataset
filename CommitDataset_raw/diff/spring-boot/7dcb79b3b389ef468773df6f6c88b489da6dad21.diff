[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +			Product specific = Product.forProduct(product);, +			if (specific != null) {, +				query = specific.getQuery();, +			}, +	protected static enum Product {, +, +		HSQLDB("HSQL Database Engine",, +				"SELECT COUNT(*) FROM INFORMATION_SCHEMA.SYSTEM_USERS"),, +, +		ORACLE("Oracle", "SELECT 'Hello' from DUAL"),, +, +		DERBY("Apache Derby", "SELECT 1 FROM SYSIBM.SYSDUMMY1"),, +, +		DB2("DB2", "SELECT 1 FROM SYSIBM.SYSDUMMY1") {, +, +			@Override, +			protected boolean matchesProduct(String product) {, +				return super.matchesProduct(product), +						|| product.toLowerCase().startsWith("db2/");, +			}, +, +		},, +, +		INFORMIX("Informix Dynamic Server", "select count(*) from systables");, +, +		private final String product;, +, +		private final String query;, +, +		private Product(String product, String query) {, +			this.product = product;, +			this.query = query;, +		}, +, +		protected boolean matchesProduct(String product) {, +			return this.product.equalsIgnoreCase(product);, +		}, +, +		public String getQuery() {, +			return this.query;, +		}, +, +		public static Product forProduct(String product) {, +			for (Product candidate : values()) {, +				if (candidate.matchesProduct(product)) {, +					return candidate;, +				}, +			}, +			return null;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +			Product specific = Product.forProduct(product);, +			if (specific != null) {, +				query = specific.getQuery();, +			}, +	protected static enum Product {, +, +		HSQLDB("HSQL Database Engine",, +				"SELECT COUNT(*) FROM INFORMATION_SCHEMA.SYSTEM_USERS"),, +, +		ORACLE("Oracle", "SELECT 'Hello' from DUAL"),, +, +		DERBY("Apache Derby", "SELECT 1 FROM SYSIBM.SYSDUMMY1"),, +, +		DB2("DB2", "SELECT 1 FROM SYSIBM.SYSDUMMY1") {, +, +			@Override, +			protected boolean matchesProduct(String product) {, +				return super.matchesProduct(product), +						|| product.toLowerCase().startsWith("db2/");, +			}, +, +		},, +, +		INFORMIX("Informix Dynamic Server", "select count(*) from systables");, +, +		private final String product;, +, +		private final String query;, +, +		private Product(String product, String query) {, +			this.product = product;, +			this.query = query;, +		}, +, +		protected boolean matchesProduct(String product) {, +			return this.product.equalsIgnoreCase(product);, +		}, +, +		public String getQuery() {, +			return this.query;, +		}, +, +		public static Product forProduct(String product) {, +			for (Product candidate : values()) {, +				if (candidate.matchesProduct(product)) {]