[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java, +import org.gradle.api.GradleException;, +import org.gradle.util.GradleVersion;, +		verifyGradleVersion();, +		createExtension(project);, +		Configuration bootArchives = createBootArchivesConfiguration(project);, +		registerPluginActions(project, bootArchives);, +		unregisterUnresolvedDependenciesAnalyzer(project);, +	}, +, +	private void verifyGradleVersion() {, +		if (GradleVersion.current().compareTo(GradleVersion.version("3.4")) < 0) {, +			throw new GradleException("Spring Boot plugin requires Gradle 3.4 or later.", +					+ " The current version is " + GradleVersion.current());, +		}, +	}, +, +	private void createExtension(Project project) {, +	}, +, +	private Configuration createBootArchivesConfiguration(Project project) {, +		return bootArchives;, +	}, +, +	private void registerPluginActions(Project project, Configuration bootArchives) {, +	}, +, +	private void unregisterUnresolvedDependenciesAnalyzer(Project project) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java, +import org.gradle.api.GradleException;, +import org.gradle.util.GradleVersion;, +		verifyGradleVersion();, +		createExtension(project);, +		Configuration bootArchives = createBootArchivesConfiguration(project);, +		registerPluginActions(project, bootArchives);, +		unregisterUnresolvedDependenciesAnalyzer(project);, +	}, +, +	private void verifyGradleVersion() {, +		if (GradleVersion.current().compareTo(GradleVersion.version("3.4")) < 0) {, +			throw new GradleException("Spring Boot plugin requires Gradle 3.4 or later.", +					+ " The current version is " + GradleVersion.current());, +		}, +	}, +, +	private void createExtension(Project project) {, +	}, +, +	private Configuration createBootArchivesConfiguration(Project project) {, +		return bootArchives;, +	}, +, +	private void registerPluginActions(Project project, Configuration bootArchives) {, +	}, +, +	private void unregisterUnresolvedDependenciesAnalyzer(Project project) {, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/SpringBootPluginIntegrationTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.gradle.plugin;, +, +import org.gradle.testkit.runner.BuildResult;, +import org.junit.Rule;, +import org.junit.Test;, +, +import org.springframework.boot.gradle.testkit.GradleBuild;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Integration tests for {@link SpringBootPlugin}., + *, + * @author Andy Wilkinson, + */, +public class SpringBootPluginIntegrationTests {, +, +	@Rule, +	public final GradleBuild gradleBuild = new GradleBuild();, +, +	@Test, +	public void failFastWithVersionOfGradleLowerThanRequired() {, +		BuildResult result = this.gradleBuild.gradleVersion("3.3").buildAndFail();, +		assertThat(result.getOutput()).contains("Spring Boot plugin requires Gradle 3.4", +				+ " or later. The current version is Gradle 3.3");, +	}, +]