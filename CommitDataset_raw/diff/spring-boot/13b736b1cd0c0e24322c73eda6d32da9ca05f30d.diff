[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +			builder.backOffOptions(retryConfig.getInitialInterval().toMillis(),, +					retryConfig.getMultiplier(), retryConfig.getMaxInterval().toMillis());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +			builder.backOffOptions(retryConfig.getInitialInterval().toMillis(),, +					retryConfig.getMultiplier(), retryConfig.getMaxInterval().toMillis());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +			map.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReceiveTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReplyTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getInitialInterval).whenNonNull().as(Duration::toMillis), +			map.from(properties::getMaxInterval).whenNonNull().as(Duration::toMillis), +					.to(backOffPolicy::setMaxInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +			builder.backOffOptions(retryConfig.getInitialInterval().toMillis(),, +					retryConfig.getMultiplier(), retryConfig.getMaxInterval().toMillis());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +			map.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReceiveTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReplyTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getInitialInterval).whenNonNull().as(Duration::toMillis), +			map.from(properties::getMaxInterval).whenNonNull().as(Duration::toMillis), +					.to(backOffPolicy::setMaxInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +			 * Duration to wait to obtain a channel if the cache size has been reached. If, +			 * 0, always create a new channel., +			private Duration checkoutTimeout;, +			public Duration getCheckoutTimeout() {, +			public void setCheckoutTimeout(Duration checkoutTimeout) {, +		private Duration receiveTimeout;, +		private Duration replyTimeout;, +		public Duration getReceiveTimeout() {, +		public void setReceiveTimeout(Duration receiveTimeout) {, +		public Duration getReplyTimeout() {, +		public void setReplyTimeout(Duration replyTimeout) {, +		 * Duration between the first and second attempt to deliver a message., +		private Duration initialInterval = Duration.ofMillis(1000);, +		 * Maximum duration between attempts., +		private Duration maxInterval = Duration.ofMillis(10000);, +		public Duration getInitialInterval() {, +		public void setInitialInterval(Duration initialInterval) {, +		public void setMaxInterval(Duration maxInterval) {, +			this.maxInterval = maxInterval;, +		}, +, +		public Duration getMaxInterval() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java, + * Copyright 2012-2018 the original author or authors., +			builder.backOffOptions(retryConfig.getInitialInterval().toMillis(),, +					retryConfig.getMultiplier(), retryConfig.getMaxInterval().toMillis());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +			map.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReceiveTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getReplyTimeout).whenNonNull().as(Duration::toMillis), +			map.from(properties::getInitialInterval).whenNonNull().as(Duration::toMillis), +			map.from(properties::getMaxInterval).whenNonNull().as(Duration::toMillis), +					.to(backOffPolicy::setMaxInterval);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +			 * Duration to wait to obtain a channel if the cache size has been reached. If, +			 * 0, always create a new channel., +			private Duration checkoutTimeout;, +			public Duration getCheckoutTimeout() {, +			public void setCheckoutTimeout(Duration checkoutTimeout) {, +		private Duration receiveTimeout;, +		private Duration replyTimeout;, +		public Duration getReceiveTimeout() {, +		public void setReceiveTimeout(Duration receiveTimeout) {, +		public Duration getReplyTimeout() {, +		public void setReplyTimeout(Duration replyTimeout) {, +		 * Duration between the first and second attempt to deliver a message., +		private Duration initialInterval = Duration.ofMillis(1000);, +		 * Maximum duration between attempts., +		private Duration maxInterval = Duration.ofMillis(10000);, +		public Duration getInitialInterval() {, +		public void setInitialInterval(Duration initialInterval) {, +		public void setMaxInterval(Duration maxInterval) {, +			this.maxInterval = maxInterval;, +		}, +, +		public Duration getMaxInterval() {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.rabbitmq.listener.direct.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message., +	spring.rabbitmq.listener.direct.retry.max-interval=10000ms # Maximum duration between attempts., +	spring.rabbitmq.listener.simple.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message., +	spring.rabbitmq.listener.simple.retry.max-interval=10000ms #  Maximum duration between attempts., +	spring.rabbitmq.template.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message., +	spring.rabbitmq.template.retry.max-interval=10000ms # Maximum duration between attempts.]