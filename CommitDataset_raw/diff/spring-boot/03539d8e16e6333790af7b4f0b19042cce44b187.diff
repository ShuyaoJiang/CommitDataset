[+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-disable-fork/verify.groovy, +assertTrue file.text.contains("Fork mode disabled, ignoring JVM argument(s) [-Dproperty1=value1 -Dproperty2 -Dfoo=bar]"), +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-disable-fork/verify.groovy, +assertTrue file.text.contains("Fork mode disabled, ignoring JVM argument(s) [-Dproperty1=value1 -Dproperty2 -Dfoo=bar]"), +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/pom.xml, +								<property3>${project.artifactId}</property3>, +								<foo>should-be-ignored</foo>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-disable-fork/verify.groovy, +assertTrue file.text.contains("Fork mode disabled, ignoring JVM argument(s) [-Dproperty1=value1 -Dproperty2 -Dfoo=bar]"), +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/pom.xml, +								<property3>${project.artifactId}</property3>, +								<foo>should-be-ignored</foo>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/src/main/java/org/test/SampleApplication.java, + * Copyright 2012-2018 the original author or authors., +			throw new IllegalStateException("property2 system property mismatch (got [" + property2 + "]");, +		String property3 = System.getProperty("property3");, +		if (!"run-jvmargs".equals(property3)) {, +			throw new IllegalStateException("property3 system property mismatch (got [" + property3 + "]");, +		}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-disable-fork/verify.groovy, +assertTrue file.text.contains("Fork mode disabled, ignoring JVM argument(s) [-Dproperty1=value1 -Dproperty2 -Dfoo=bar]"), +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/pom.xml, +								<property3>${project.artifactId}</property3>, +								<foo>should-be-ignored</foo>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/src/main/java/org/test/SampleApplication.java, + * Copyright 2012-2018 the original author or authors., +			throw new IllegalStateException("property2 system property mismatch (got [" + property2 + "]");, +		String property3 = System.getProperty("property3");, +		if (!"run-jvmargs".equals(property3)) {, +			throw new IllegalStateException("property3 system property mismatch (got [" + property3 + "]");, +		}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * List of JVM system properties to pass to the process. NOTE: the use of system, +	 * properties means that processes will be started by forking a new JVM., +	 * @since 2.1.0, +	 */, +	@Parameter, +	private Map<String, String> systemPropertyVariables;, +, +	/**, +				(this.systemPropertyVariables != null, +						&& !this.systemPropertyVariables.isEmpty());, +			RunArguments runArguments = resolveJvmArguments();, +			getLog().warn("Fork mode disabled, ignoring JVM argument(s) [", +					+ Arrays.stream(runArguments.asArray()).collect(, +							Collectors.joining(" ")) + "]");, +			stringBuilder.append(this.systemPropertyVariables, +					.collect(Collectors.joining(" ")));, +		}, +		if (this.jvmArguments != null) {, +			stringBuilder.append(" ").append(this.jvmArguments);, +	 * Format System properties., +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-disable-fork/verify.groovy, +assertTrue file.text.contains("Fork mode disabled, ignoring JVM argument(s) [-Dproperty1=value1 -Dproperty2 -Dfoo=bar]"), +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/pom.xml, +								<property3>${project.artifactId}</property3>, +								<foo>should-be-ignored</foo>, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/run-jvm-system-props/src/main/java/org/test/SampleApplication.java, + * Copyright 2012-2018 the original author or authors., +			throw new IllegalStateException("property2 system property mismatch (got [" + property2 + "]");, +		String property3 = System.getProperty("property3");, +		if (!"run-jvmargs".equals(property3)) {, +			throw new IllegalStateException("property3 system property mismatch (got [" + property3 + "]");, +		}, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/AbstractRunMojo.java, +	 * List of JVM system properties to pass to the process. NOTE: the use of system, +	 * properties means that processes will be started by forking a new JVM., +	 * @since 2.1.0, +	 */, +	@Parameter, +	private Map<String, String> systemPropertyVariables;, +, +	/**, +				(this.systemPropertyVariables != null, +						&& !this.systemPropertyVariables.isEmpty());, +			RunArguments runArguments = resolveJvmArguments();, +			getLog().warn("Fork mode disabled, ignoring JVM argument(s) [", +					+ Arrays.stream(runArguments.asArray()).collect(, +							Collectors.joining(" ")) + "]");, +			stringBuilder.append(this.systemPropertyVariables, +					.collect(Collectors.joining(" ")));, +		}, +		if (this.jvmArguments != null) {, +			stringBuilder.append(" ").append(this.jvmArguments);, +	 * Format System properties., +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/site/apt/examples/run-system-properties.apt.vm, + -----, + Using System Properties, + -----, + Stephane Nicoll, + -----, + 2018-04-24, + -----, +, +  System properties can be specified using the <<<systemPropertyVariables>>> attribute., +  The following sets <<<property1>>> to <<<test>>> and <<<property2>>> to 42:, +, +---]