[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandCompleter.java, + * JLine {@link Completer} for Spring Boot {@link Command}s., + * , + * @author Phillip Webb, +, +, +	public CommandCompleter(ConsoleReader consoleReader, SpringCli cli) {, +		this.console = consoleReader;, +		for (Command command : this.commands) {, +			names.add(command.getName());, +			List<String> options = new ArrayList<String>();, +			for (OptionHelp optionHelp : command.getOptionsHelp()) {, +				options.addAll(optionHelp.getOptions());, +			StringsCompleter commandCompleter = new StringsCompleter(command.getName());, +			StringsCompleter optionsCompleter = new StringsCompleter(options);, +			this.optionCompleters.put(command.getName(), new ArgumentCompleter(, +					commandCompleter, optionsCompleter, new NullCompleter()));, +		int completionIndex = super.complete(buffer, cursor, candidates);, +		int spaceIndex = buffer.indexOf(' ');, +		String commandName = (spaceIndex == -1) ? "" : buffer.substring(0, spaceIndex);, +		if (!"".equals(commandName.trim())) {, +			for (Command command : this.commands) {, +				if (command.getName().equals(commandName)) {, +					if (cursor == buffer.length() && buffer.endsWith(" ")) {, +						printUsage(command);, +						break;, +					Completer completer = this.optionCompleters.get(command.getName());, +					if (completer != null) {, +						completionIndex = completer.complete(buffer, cursor, candidates);, +						break;, +			}, +		}, +		return completionIndex;, +	}, +, +	private void printUsage(Command command) {, +			int maxOptionsLength = 0;, +			List<OptionHelpLine> optionHelpLines = new ArrayList<OptionHelpLine>();, +			for (OptionHelp optionHelp : command.getOptionsHelp()) {, +				OptionHelpLine optionHelpLine = new OptionHelpLine(optionHelp);, +				optionHelpLines.add(optionHelpLine);, +				maxOptionsLength = Math.max(maxOptionsLength, optionHelpLine.getOptions(), +						.length());, +			}, +, +			this.console.println(command.getName() + " " + command.getUsageHelp());, +			for (OptionHelpLine optionHelpLine : optionHelpLines) {, +				this.console.println(String.format("\t%" + maxOptionsLength + "s: %s",, +						optionHelpLine.getOptions(), optionHelpLine.getUsage()));, +, +	private static class OptionHelpLine {, +, +		private final String options;, +, +		private final String usage;, +, +		public OptionHelpLine(OptionHelp optionHelp) {, +			StringBuffer options = new StringBuffer();, +			for (String option : optionHelp.getOptions()) {, +				options.append(options.length() == 0 ? "" : ", ");, +				options.append(option);, +			this.options = options.toString();, +			this.usage = optionHelp.getUsageHelp();, +		public String getOptions() {, +			return this.options;, +		public String getUsage() {, +			return this.usage;, +		}, +	}, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandCompleter.java, + * JLine {@link Completer} for Spring Boot {@link Command}s., + * , + * @author Phillip Webb, +, +, +	public CommandCompleter(ConsoleReader consoleReader, SpringCli cli) {, +		this.console = consoleReader;, +		for (Command command : this.commands) {, +			names.add(command.getName());, +			List<String> options = new ArrayList<String>();, +			for (OptionHelp optionHelp : command.getOptionsHelp()) {, +				options.addAll(optionHelp.getOptions());, +			StringsCompleter commandCompleter = new StringsCompleter(command.getName());, +			StringsCompleter optionsCompleter = new StringsCompleter(options);, +			this.optionCompleters.put(command.getName(), new ArgumentCompleter(, +					commandCompleter, optionsCompleter, new NullCompleter()));, +		int completionIndex = super.complete(buffer, cursor, candidates);, +		int spaceIndex = buffer.indexOf(' ');, +		String commandName = (spaceIndex == -1) ? "" : buffer.substring(0, spaceIndex);, +		if (!"".equals(commandName.trim())) {, +			for (Command command : this.commands) {, +				if (command.getName().equals(commandName)) {, +					if (cursor == buffer.length() && buffer.endsWith(" ")) {, +						printUsage(command);, +						break;, +					Completer completer = this.optionCompleters.get(command.getName());, +					if (completer != null) {, +						completionIndex = completer.complete(buffer, cursor, candidates);, +						break;, +			}]