[+++ b/spring-boot-actuator/pom.xml, +			<exclusions>, +				<!-- the version of solr here is incompatible with jackson-xml because of an old woodstox -->, +				<exclusion>, +					<artifactId>wstx-asl</artifactId>, +					<groupId>org.codehaus.woodstox</groupId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-actuator/pom.xml, +			<exclusions>, +				<!-- the version of solr here is incompatible with jackson-xml because of an old woodstox -->, +				<exclusion>, +					<artifactId>wstx-asl</artifactId>, +					<groupId>org.codehaus.woodstox</groupId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;, +	ManagementServerPropertiesAutoConfiguration.class, RepositoryRestMvcAutoConfiguration.class,, +++ b/spring-boot-actuator/pom.xml, +			<exclusions>, +				<!-- the version of solr here is incompatible with jackson-xml because of an old woodstox -->, +				<exclusion>, +					<artifactId>wstx-asl</artifactId>, +					<groupId>org.codehaus.woodstox</groupId>, +				</exclusion>, +			</exclusions>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration;, +	ManagementServerPropertiesAutoConfiguration.class, RepositoryRestMvcAutoConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;, +, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.core.type.MethodMetadata;, +import org.springframework.util.ClassUtils;, +		@Autowired, +		private ListableBeanFactory beanFactory;, +, +		@Autowired, +		private ManagementServerProperties management;, +, +		@Conditional(NotSpringDataRestHomePageCondition.class), +			String defaultPath = getDefaultPath(resources);, +		private String getDefaultPath(ResourceProperties resources) {, +			return resources.getWelcomePage() != null ? "/links" : "";, +		}, +, +		private static class NotSpringDataRestHomePageCondition extends, +		SpringBootCondition {, +, +			@Override, +			public ConditionOutcome getMatchOutcome(ConditionContext context,, +					AnnotatedTypeMetadata metadata) {, +				if (!ClassUtils, +						.isPresent(, +								"org.springframework.data.rest.core.config.RepositoryRestConfiguration",, +								null)) {, +					return ConditionOutcome.match("Spring Data REST is not present");, +				}, +				Class<?> type = ClassUtils, +						.resolveClassName(, +								"org.springframework.data.rest.core.config.RepositoryRestConfiguration",, +								null);, +				ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +				if (beanFactory.getBeanNamesForType(type, true, false).length == 0) {, +					return ConditionOutcome.match("Spring Data REST is not configured");, +				}, +				Environment environment = context.getEnvironment();, +				String path = getProperty(environment, "management.", "contextPath");, +				if (path == null, +						&& hasCustomBeanDefinition(beanFactory,, +								ManagementServerProperties.class,, +								ManagementServerPropertiesAutoConfiguration.class)) {, +					ManagementServerProperties bean = beanFactory, +							.getBean(ManagementServerProperties.class);, +					path = bean.getContextPath();, +				}, +				if (isHome(path)) {, +					path = getProperty(environment, "endpoints.links.", "path");, +					if (isHome(path)) {, +						return ConditionOutcome, +								.noMatch("Management context path is home and so is links path");, +					}, +					else {, +						return ConditionOutcome, +								.match("Management context path is home but links path is not: '", +										+ path + "'");, +					}, +				}, +				else {, +					// N.B. we don't cover the case where the user has Spring Data REST, +					// but changes *its* home page - you'd have to instantiate the, +					// RepositoryRestConfiguration and look at it's basePath for that., +					return ConditionOutcome]