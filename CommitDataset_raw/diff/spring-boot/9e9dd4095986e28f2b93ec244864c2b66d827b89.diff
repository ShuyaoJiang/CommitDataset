[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/DefaultWebFluxTagsProvider.java, +				WebFluxTags.exception(exception), WebFluxTags.status(exchange),, +				WebFluxTags.outcome(exchange));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/DefaultWebFluxTagsProvider.java, +				WebFluxTags.exception(exception), WebFluxTags.status(exchange),, +				WebFluxTags.outcome(exchange));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, + * @author Michael McFadyen, +	private static final Tag OUTCOME_UNKNOWN = Tag.of("outcome", "UNKNOWN");, +, +	private static final Tag OUTCOME_SUCCESS = Tag.of("outcome", "SUCCESS");, +, +	private static final Tag OUTCOME_CLIENT_ERROR = Tag.of("outcome", "CLIENT_ERROR");, +, +	private static final Tag OUTCOME_SERVER_ERROR = Tag.of("outcome", "SERVER_ERROR");, +, +	/**, +	 * Creates a {@code outcome} tag based on the response status of the given, +	 * {@code exchange}., +	 * @param exchange the exchange, +	 * @return the "outcome" tag derived from the response status, +	 */, +	public static Tag outcome(ServerWebExchange exchange) {, +		if (exchange != null && exchange.getResponse().getStatusCode() != null) {, +			HttpStatus status = exchange.getResponse().getStatusCode();, +			if (status.is1xxInformational() || status.is2xxSuccessful(), +					|| status.is3xxRedirection()) {, +				return OUTCOME_SUCCESS;, +			}, +			else if (status.is4xxClientError()) {, +				return OUTCOME_CLIENT_ERROR;, +			}, +			else {, +				return OUTCOME_SERVER_ERROR;, +			}, +		}, +		else {, +			return OUTCOME_UNKNOWN;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/DefaultWebFluxTagsProvider.java, +				WebFluxTags.exception(exception), WebFluxTags.status(exchange),, +				WebFluxTags.outcome(exchange));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, + * @author Michael McFadyen, +	private static final Tag OUTCOME_UNKNOWN = Tag.of("outcome", "UNKNOWN");, +, +	private static final Tag OUTCOME_SUCCESS = Tag.of("outcome", "SUCCESS");, +, +	private static final Tag OUTCOME_CLIENT_ERROR = Tag.of("outcome", "CLIENT_ERROR");, +, +	private static final Tag OUTCOME_SERVER_ERROR = Tag.of("outcome", "SERVER_ERROR");, +, +	/**, +	 * Creates a {@code outcome} tag based on the response status of the given, +	 * {@code exchange}., +	 * @param exchange the exchange, +	 * @return the "outcome" tag derived from the response status, +	 */, +	public static Tag outcome(ServerWebExchange exchange) {, +		if (exchange != null && exchange.getResponse().getStatusCode() != null) {, +			HttpStatus status = exchange.getResponse().getStatusCode();, +			if (status.is1xxInformational() || status.is2xxSuccessful(), +					|| status.is3xxRedirection()) {, +				return OUTCOME_SUCCESS;, +			}, +			else if (status.is4xxClientError()) {, +				return OUTCOME_CLIENT_ERROR;, +			}, +			else {, +				return OUTCOME_SERVER_ERROR;, +			}, +		}, +		else {, +			return OUTCOME_UNKNOWN;, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/DefaultWebMvcTagsProvider.java, +				WebMvcTags.exception(exception), WebMvcTags.status(response),, +				WebMvcTags.outcome(response));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/DefaultWebFluxTagsProvider.java, +				WebFluxTags.exception(exception), WebFluxTags.status(exchange),, +				WebFluxTags.outcome(exchange));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, + * @author Michael McFadyen, +	private static final Tag OUTCOME_UNKNOWN = Tag.of("outcome", "UNKNOWN");, +, +	private static final Tag OUTCOME_SUCCESS = Tag.of("outcome", "SUCCESS");, +, +	private static final Tag OUTCOME_CLIENT_ERROR = Tag.of("outcome", "CLIENT_ERROR");, +, +	private static final Tag OUTCOME_SERVER_ERROR = Tag.of("outcome", "SERVER_ERROR");, +, +	/**, +	 * Creates a {@code outcome} tag based on the response status of the given, +	 * {@code exchange}., +	 * @param exchange the exchange, +	 * @return the "outcome" tag derived from the response status]