[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +@Target({ ElementType.TYPE, ElementType.METHOD }), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndi.java, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +@Target({ ElementType.TYPE, ElementType.METHOD }), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJndiTests.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import java.util.HashMap;, +import java.util.Hashtable;, +import java.util.Map;, +import javax.naming.Context;, +import javax.naming.InitialContext;, +import javax.naming.NamingException;, +import javax.naming.spi.InitialContextFactory;, +, +import org.hamcrest.Matcher;, +import org.junit.After;, +import org.junit.Test;, +, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.iterableWithSize;, +import static org.junit.Assert.assertThat;, +, +/**, + * Tests for {@link ConditionalOnJndi}, + *, + * @author Stephane Nicoll, + */, +public class ConditionalOnJndiTests {, +, +	private String initialContextFactory;, +, +	private ConfigurableApplicationContext context;, +, +	@After, +	public void close() {, +		TestableInitialContextFactory.clearAll();, +		if (this.initialContextFactory != null) {, +			System.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory);, +		}, +		else {, +			System.clearProperty(Context.INITIAL_CONTEXT_FACTORY);, +		}, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +	@Test, +	public void jndiNotAvailable() {, +		load(JndiAvailableConfiguration.class);, +		assertPresent(false);, +	}, +, +	@Test, +	public void jndiAvailable() {, +		setupJndi();, +		load(JndiAvailableConfiguration.class);, +		assertPresent(true);, +	}, +, +	@Test, +	public void jndiLocationNotBound() {, +		setupJndi();]