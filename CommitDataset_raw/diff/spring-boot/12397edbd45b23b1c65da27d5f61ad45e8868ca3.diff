[+++ b/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationIntegrationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.test.web.reactive.server.WebTestClient;, +	@Autowired, +	private WebTestClient webClient;, +		this.webClient, +				.expectBody(String.class).value().isEqualTo("Hello World");, +++ b/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationIntegrationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.test.web.reactive.server.WebTestClient;, +	@Autowired, +	private WebTestClient webClient;, +		this.webClient, +				.expectBody(String.class).value().isEqualTo("Hello World");, +++ b/spring-boot-test/pom.xml, +			<groupId>io.projectreactor.ipc</groupId>, +			<artifactId>reactor-netty</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationIntegrationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.test.web.reactive.server.WebTestClient;, +	@Autowired, +	private WebTestClient webClient;, +		this.webClient, +				.expectBody(String.class).value().isEqualTo("Hello World");, +++ b/spring-boot-test/pom.xml, +			<groupId>io.projectreactor.ipc</groupId>, +			<artifactId>reactor-netty</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/WebTestClientContextCustomizer.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.web.reactive;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.boot.context.embedded.AbstractConfigurableReactiveWebServer;, +import org.springframework.boot.test.context.SpringBootTest;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.test.context.ContextCustomizer;, +import org.springframework.test.context.MergedContextConfiguration;, +import org.springframework.test.web.reactive.server.WebTestClient;, +, +/**, + * {@link ContextCustomizer} for {@link WebTestClient}., + *, + * @author Stephane Nicoll, + */, +class WebTestClientContextCustomizer implements ContextCustomizer {, +, +	@Override, +	public void customizeContext(ConfigurableApplicationContext context,, +			MergedContextConfiguration mergedConfig) {, +		SpringBootTest annotation = AnnotatedElementUtils.getMergedAnnotation(, +				mergedConfig.getTestClass(), SpringBootTest.class);, +		if (annotation.webEnvironment().isEmbedded()) {, +			registerWebTestClient(context);, +		}, +	}, +, +	private void registerWebTestClient(ConfigurableApplicationContext context) {, +		ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +		if (beanFactory instanceof BeanDefinitionRegistry) {, +			registerWebTestClient(context, (BeanDefinitionRegistry) context);, +		}, +, +	}, +, +	private void registerWebTestClient(ConfigurableApplicationContext context,, +			BeanDefinitionRegistry registry) {, +		registry.registerBeanDefinition(WebTestClient.class.getName(),, +				new RootBeanDefinition(WebTestClientFactory.class));, +	}, +, +	@Override]