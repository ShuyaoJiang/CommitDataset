[+++ b/spring-boot-devtools/pom.xml, +			<artifactId>spring-boot</artifactId>, +			<type>test-jar</type>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +		<dependency>, +			<groupId>org.apache.tomcat</groupId>, +			<artifactId>tomcat-jdbc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-devtools/pom.xml, +			<artifactId>spring-boot</artifactId>, +			<type>test-jar</type>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +		<dependency>, +			<groupId>org.apache.tomcat</groupId>, +			<artifactId>tomcat-jdbc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.ConfigurationCondition;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	static class DevToolsDataSourceCondition extends SpringBootCondition, +			implements ConfigurationCondition {, +		@Override, +		public ConfigurationPhase getConfigurationPhase() {, +			return ConfigurationPhase.REGISTER_BEAN;, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String[] dataSourceBeanNames = context.getBeanFactory(), +					.getBeanNamesForType(DataSource.class);, +			if (dataSourceBeanNames.length != 1) {, +				return ConditionOutcome, +						.noMatch("A single DataSource bean was not found in the context");, +			if (context.getBeanFactory(), +					.getBeanNamesForType(DataSourceProperties.class).length != 1) {, +				return ConditionOutcome.noMatch(, +						"A single DataSourceProperties bean was not found in the context");, +			}, +			BeanDefinition dataSourceDefinition = context.getRegistry(), +					.getBeanDefinition(dataSourceBeanNames[0]);, +			if (dataSourceDefinition instanceof AnnotatedBeanDefinition, +					&& ((AnnotatedBeanDefinition) dataSourceDefinition), +							.getFactoryMethodMetadata().getDeclaringClassName(), +							.startsWith(DataSourceAutoConfiguration.class.getPackage(), +									.getName() + ".DataSourceConfiguration$")) {, +				return ConditionOutcome.match("Found auto-configured DataSource");, +			}, +			return ConditionOutcome.noMatch("DataSource was not auto-configured");, +++ b/spring-boot-devtools/pom.xml, +			<artifactId>spring-boot</artifactId>, +			<type>test-jar</type>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.boot</groupId>, +		<dependency>, +			<groupId>org.apache.tomcat</groupId>, +			<artifactId>tomcat-jdbc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.ConfigurationCondition;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	static class DevToolsDataSourceCondition extends SpringBootCondition, +			implements ConfigurationCondition {, +		@Override, +		public ConfigurationPhase getConfigurationPhase() {, +			return ConfigurationPhase.REGISTER_BEAN;, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String[] dataSourceBeanNames = context.getBeanFactory(), +					.getBeanNamesForType(DataSource.class);, +			if (dataSourceBeanNames.length != 1) {, +				return ConditionOutcome, +						.noMatch("A single DataSource bean was not found in the context");, +			if (context.getBeanFactory(), +					.getBeanNamesForType(DataSourceProperties.class).length != 1) {, +				return ConditionOutcome.noMatch(, +						"A single DataSourceProperties bean was not found in the context");, +			}, +			BeanDefinition dataSourceDefinition = context.getRegistry(), +					.getBeanDefinition(dataSourceBeanNames[0]);]