[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.EnumerablePropertySource;, +	static class ConfigurationPropertySources extends, +			EnumerablePropertySource<Collection<PropertySource<?>>> {, +		private final String[] names;, +, +			super(NAME, sources);, +			List<String> names = new ArrayList<String>();, +			for (PropertySource<?> source : sources) {, +				if (source instanceof EnumerablePropertySource) {, +					names.addAll(Arrays.asList(((EnumerablePropertySource<?>) source), +							.getPropertyNames()));, +				}, +			}, +			this.names = names.toArray(new String[names.size()]);, +		@Override, +		public String[] getPropertyNames() {, +			return this.names;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.EnumerablePropertySource;, +	static class ConfigurationPropertySources extends, +			EnumerablePropertySource<Collection<PropertySource<?>>> {, +		private final String[] names;, +, +			super(NAME, sources);, +			List<String> names = new ArrayList<String>();, +			for (PropertySource<?> source : sources) {, +				if (source instanceof EnumerablePropertySource) {, +					names.addAll(Arrays.asList(((EnumerablePropertySource<?>) source), +							.getPropertyNames()));, +				}, +			}, +			this.names = names.toArray(new String[names.size()]);, +		@Override, +		public String[] getPropertyNames() {, +			return this.names;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +	@Test, +	public void bindsToSpringApplication() throws Exception {, +		// gh-346, +		this.initializer.setSearchNames("bindtoapplication");, +		this.initializer.onApplicationEvent(this.event);, +		SpringApplication application = this.event.getSpringApplication();, +		Field field = ReflectionUtils.findField(SpringApplication.class, "showBanner");, +		field.setAccessible(true);, +		assertThat((Boolean) field.get(application), equalTo(false));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.core.env.EnumerablePropertySource;, +	static class ConfigurationPropertySources extends, +			EnumerablePropertySource<Collection<PropertySource<?>>> {, +		private final String[] names;, +, +			super(NAME, sources);, +			List<String> names = new ArrayList<String>();, +			for (PropertySource<?> source : sources) {, +				if (source instanceof EnumerablePropertySource) {, +					names.addAll(Arrays.asList(((EnumerablePropertySource<?>) source), +							.getPropertyNames()));, +				}, +			}, +			this.names = names.toArray(new String[names.size()]);, +		@Override, +		public String[] getPropertyNames() {, +			return this.names;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.lang.reflect.Field;, +import org.springframework.util.ReflectionUtils;, +	@Test, +	public void bindsToSpringApplication() throws Exception {, +		// gh-346, +		this.initializer.setSearchNames("bindtoapplication");, +		this.initializer.onApplicationEvent(this.event);, +		SpringApplication application = this.event.getSpringApplication();, +		Field field = ReflectionUtils.findField(SpringApplication.class, "showBanner");, +		field.setAccessible(true);, +		assertThat((Boolean) field.get(application), equalTo(false));, +	}, +, +++ b/spring-boot/src/test/resources/bindtoapplication.properties, +spring.main.show_banner=false]