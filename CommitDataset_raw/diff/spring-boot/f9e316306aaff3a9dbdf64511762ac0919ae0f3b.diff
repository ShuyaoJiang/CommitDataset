[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true), +		@ConfigurationProperties(prefix = "spring.flyway"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true), +		@ConfigurationProperties(prefix = "spring.flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +@ConfigurationProperties(prefix = "spring.flyway", ignoreUnknownFields = true), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true), +		@ConfigurationProperties(prefix = "spring.flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +@ConfigurationProperties(prefix = "spring.flyway", ignoreUnknownFields = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		TestPropertyValues.of("spring.flyway.url:jdbc:hsqldb:mem:flywaytest", "spring.flyway.user:sa"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration"), +				.of("spring.flyway.locations[0]:classpath:db/changelog",, +						"spring.flyway.locations[1]:classpath:db/migration"), +		TestPropertyValues.of("spring.flyway.schemas:public").applyTo(this.context);, +		TestPropertyValues.of("spring.flyway.locations:file:no-such-dir").applyTo(this.context);, +				.of("spring.flyway.locations:classpath:db/missing1,classpath:db/migration2",, +						"spring.flyway.check-location:true"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration",, +						"spring.flyway.check-location:true"), +		TestPropertyValues.of("spring.flyway.baseline-version=0").applyTo(this.context);, +				.<String, Object>singletonMap("spring.flyway.baseline-version", 1);, +				.of("spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true), +		@ConfigurationProperties(prefix = "spring.flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +@ConfigurationProperties(prefix = "spring.flyway", ignoreUnknownFields = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		TestPropertyValues.of("spring.flyway.url:jdbc:hsqldb:mem:flywaytest", "spring.flyway.user:sa"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration"), +				.of("spring.flyway.locations[0]:classpath:db/changelog",, +						"spring.flyway.locations[1]:classpath:db/migration"), +		TestPropertyValues.of("spring.flyway.schemas:public").applyTo(this.context);, +		TestPropertyValues.of("spring.flyway.locations:file:no-such-dir").applyTo(this.context);, +				.of("spring.flyway.locations:classpath:db/missing1,classpath:db/migration2",, +						"spring.flyway.check-location:true"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration",, +						"spring.flyway.check-location:true"), +		TestPropertyValues.of("spring.flyway.baseline-version=0").applyTo(this.context);, +				.<String, Object>singletonMap("spring.flyway.baseline-version", 1);, +				.of("spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +				"spring.flyway.locations:classpath:db/city",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +		builder.properties("spring.flyway.enabled=false", "liquibase.enabled=false");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.flyway", name = "enabled", matchIfMissing = true), +		@ConfigurationProperties(prefix = "spring.flyway"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, +@ConfigurationProperties(prefix = "spring.flyway", ignoreUnknownFields = true), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +		TestPropertyValues.of("spring.flyway.url:jdbc:hsqldb:mem:flywaytest", "spring.flyway.user:sa"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration"), +				.of("spring.flyway.locations[0]:classpath:db/changelog",, +						"spring.flyway.locations[1]:classpath:db/migration"), +		TestPropertyValues.of("spring.flyway.schemas:public").applyTo(this.context);, +		TestPropertyValues.of("spring.flyway.locations:file:no-such-dir").applyTo(this.context);, +				.of("spring.flyway.locations:classpath:db/missing1,classpath:db/migration2",, +						"spring.flyway.check-location:true"), +				.of("spring.flyway.locations:classpath:db/changelog,classpath:db/migration",, +						"spring.flyway.check-location:true"), +		TestPropertyValues.of("spring.flyway.baseline-version=0").applyTo(this.context);, +				.<String, Object>singletonMap("spring.flyway.baseline-version", 1);, +				.of("spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +				"spring.flyway.locations:classpath:db/city",, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.flyway.allow-mixed-migrations= #, +	spring.flyway.baseline-description= #, +	spring.flyway.baseline-on-migrate= #, +	spring.flyway.baseline-version=1 # version to start migration, +	spring.flyway.check-location=false # Check that migration scripts location exists., +	spring.flyway.clean-disabled= #, +	spring.flyway.clean-on-validation-error= #, +	spring.flyway.enabled=true # Enable flyway., +	spring.flyway.encoding= #, +	spring.flyway.ignore-failed-future-migration= #, +	spring.flyway.ignore-future-migrations= #, +	spring.flyway.ignore-missing-migrations= #]