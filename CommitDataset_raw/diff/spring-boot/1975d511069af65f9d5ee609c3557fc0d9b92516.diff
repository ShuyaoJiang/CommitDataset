[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +import java.security.Principal;, +			Principal principal = data.getSecurityContext().getUserPrincipal();, +			if (principal != null) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +import java.security.Principal;, +			Principal principal = data.getSecurityContext().getUserPrincipal();, +			if (principal != null) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +import java.security.Principal;, +	private static final class ReactiveWebOperationAdapter, +			implements ReactiveWebOperation {, +, +		private static final Principal NO_PRINCIPAL = new Principal() {, +, +			@Override, +			public String getName() {, +				throw new UnsupportedOperationException();, +			}, +, +		};, +		private ReactiveWebOperationAdapter(OperationInvoker invoker) {, +			return exchange.getPrincipal().defaultIfEmpty(NO_PRINCIPAL), +					.flatMap((principal) -> {, +						Map<String, Object> arguments = getArguments(exchange, principal,, +								body);, +					});, +				Principal principal, Map<String, String> body) {, +			if (principal != null && principal != NO_PRINCIPAL) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +import java.security.Principal;, +			Principal principal = data.getSecurityContext().getUserPrincipal();, +			if (principal != null) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +import java.security.Principal;, +	private static final class ReactiveWebOperationAdapter, +			implements ReactiveWebOperation {, +, +		private static final Principal NO_PRINCIPAL = new Principal() {, +, +			@Override, +			public String getName() {, +				throw new UnsupportedOperationException();, +			}, +, +		};, +		private ReactiveWebOperationAdapter(OperationInvoker invoker) {, +			return exchange.getPrincipal().defaultIfEmpty(NO_PRINCIPAL), +					.flatMap((principal) -> {, +						Map<String, Object> arguments = getArguments(exchange, principal,, +								body);, +					});, +				Principal principal, Map<String, String> body) {, +			if (principal != null && principal != NO_PRINCIPAL) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/AbstractWebMvcEndpointHandlerMapping.java, +import java.security.Principal;, +			Principal principal = request.getUserPrincipal();, +			if (principal != null) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +import java.security.Principal;, +			Principal principal = data.getSecurityContext().getUserPrincipal();, +			if (principal != null) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java, +import java.security.Principal;, +	private static final class ReactiveWebOperationAdapter, +			implements ReactiveWebOperation {, +, +		private static final Principal NO_PRINCIPAL = new Principal() {, +, +			@Override, +			public String getName() {, +				throw new UnsupportedOperationException();, +			}, +, +		};, +		private ReactiveWebOperationAdapter(OperationInvoker invoker) {, +			return exchange.getPrincipal().defaultIfEmpty(NO_PRINCIPAL), +					.flatMap((principal) -> {, +						Map<String, Object> arguments = getArguments(exchange, principal,, +								body);, +					});, +				Principal principal, Map<String, String> body) {, +			if (principal != null && principal != NO_PRINCIPAL) {, +				arguments.put("principal", principal);, +			}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/servlet/AbstractWebMvcEndpointHandlerMapping.java]