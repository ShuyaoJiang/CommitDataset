[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +					this.contextResolver, EndpointPaths.SENSITIVE)).authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +					this.contextResolver, EndpointPaths.SENSITIVE)).authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +	private final boolean secure;, +, +	public MvcEndpointSecurityInterceptor(boolean secure, List<String> roles) {, +		this.secure = secure;, +		if (CorsUtils.isPreFlightRequest(request) || !this.secure) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +					this.contextResolver, EndpointPaths.SENSITIVE)).authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +	private final boolean secure;, +, +	public MvcEndpointSecurityInterceptor(boolean secure, List<String> roles) {, +		this.secure = secure;, +		if (CorsUtils.isPreFlightRequest(request) || !this.secure) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfigurationTests.java, +import java.util.List;, +, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +	public void endpointHandlerMapping() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.security.enabled=false",, +				"management.security.roles=my-role,your-role");, +		this.context.refresh();, +		Object secure = ReflectionTestUtils.getField(securityInterceptor, "secure");, +		List<String> roles = getRoles(securityInterceptor);, +		assertThat(secure).isEqualTo(false);, +		assertThat(roles).containsExactly("my-role", "your-role");, +	}, +, +	@SuppressWarnings("unchecked"), +	private List<String> getRoles(MvcEndpointSecurityInterceptor securityInterceptor) {, +		return (List<String>) ReflectionTestUtils.getField(securityInterceptor, "roles");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +					this.contextResolver, EndpointPaths.SENSITIVE)).authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +	private final boolean secure;, +, +	public MvcEndpointSecurityInterceptor(boolean secure, List<String> roles) {, +		this.secure = secure;, +		if (CorsUtils.isPreFlightRequest(request) || !this.secure) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfigurationTests.java, +import java.util.List;, +, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +	public void endpointHandlerMapping() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.security.enabled=false",, +				"management.security.roles=my-role,your-role");, +		this.context.refresh();, +		Object secure = ReflectionTestUtils.getField(securityInterceptor, "secure");, +		List<String> roles = getRoles(securityInterceptor);, +		assertThat(secure).isEqualTo(false);, +		assertThat(roles).containsExactly("my-role", "your-role");, +	}, +, +	@SuppressWarnings("unchecked"), +	private List<String> getRoles(MvcEndpointSecurityInterceptor securityInterceptor) {, +		return (List<String>) ReflectionTestUtils.getField(securityInterceptor, "roles");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfigurationTests.java, +import java.util.Collections;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpointSecurityInterceptor;, +			mapping.setSecurityInterceptor(new MvcEndpointSecurityInterceptor(false,, +					Collections.<String>emptyList()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +				this.managementServerProperties.getSecurity().isEnabled(),, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +					this.contextResolver, EndpointPaths.SENSITIVE)).authenticated();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointSecurityInterceptor.java, +	private final boolean secure;, +, +	public MvcEndpointSecurityInterceptor(boolean secure, List<String> roles) {, +		this.secure = secure;, +		if (CorsUtils.isPreFlightRequest(request) || !this.secure) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfigurationTests.java, +import java.util.List;, +, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +	public void endpointHandlerMapping() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.security.enabled=false",, +				"management.security.roles=my-role,your-role");, +		this.context.refresh();, +		Object secure = ReflectionTestUtils.getField(securityInterceptor, "secure");, +		List<String> roles = getRoles(securityInterceptor);, +		assertThat(secure).isEqualTo(false);, +		assertThat(roles).containsExactly("my-role", "your-role");]