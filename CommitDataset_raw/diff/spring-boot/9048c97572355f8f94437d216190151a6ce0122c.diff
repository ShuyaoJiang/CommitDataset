[+++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(MockitoApi.get().getAnswer(this.answer));, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(MockitoApi.get().getAnswer(this.answer));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +				MockCreationSettings settings = MockitoApi.get().getMockSettings(mock);, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(MockitoApi.get().getAnswer(this.answer));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +				MockCreationSettings settings = MockitoApi.get().getMockSettings(mock);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import org.mockito.internal.progress.MockingProgress;, +		private final MockingProgress progress = MockitoApi.get().mockingProgress();, +, +				VerificationMode mode = this.progress.pullVerificationMode();, +				VerificationMode mode = this.progress.pullVerificationMode();, +							mode = MockitoApi.get().createMockAwareVerificationMode(, +			ArgumentMatcherStorage storage = this.progress.getArgumentMatcherStorage();, +			MockitoApi.get().mockingProgress().verificationStarted(mode);, +			MockitoApi.get().reportMatchers(storage, matchers);, +++ b/spring-boot-dependencies/pom.xml, +<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +		settings.defaultAnswer(MockitoApi.get().getAnswer(this.answer));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java, +				MockCreationSettings settings = MockitoApi.get().getMockSettings(mock);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoAopProxyTargetInterceptor.java, +import org.mockito.internal.progress.MockingProgress;, +		private final MockingProgress progress = MockitoApi.get().mockingProgress();, +, +				VerificationMode mode = this.progress.pullVerificationMode();, +				VerificationMode mode = this.progress.pullVerificationMode();, +							mode = MockitoApi.get().createMockAwareVerificationMode(, +			ArgumentMatcherStorage storage = this.progress.getArgumentMatcherStorage();, +			MockitoApi.get().mockingProgress().verificationStarted(mode);, +			MockitoApi.get().reportMatchers(storage, matchers);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoApi.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.mock.mockito;, +, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Method;, +import java.util.Collections;, +import java.util.List;, +, +import org.hamcrest.Matcher;, +import org.mockito.Answers;, +import org.mockito.internal.matchers.LocalizedMatcher;, +import org.mockito.internal.progress.ArgumentMatcherStorage;, +import org.mockito.internal.progress.MockingProgress;, +import org.mockito.internal.progress.ThreadSafeMockingProgress;, +import org.mockito.internal.util.MockUtil;, +import org.mockito.internal.verification.MockAwareVerificationMode;, +import org.mockito.mock.MockCreationSettings;, +import org.mockito.stubbing.Answer;, +import org.mockito.verification.VerificationMode;, +, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * A facade for Mockito APIs that have changed between Mockito 1 and Mockito 2., + *, + * @author Andy Wilkinson, + * @author Stephane Nicoll, + * @author Phillip Webb, + */, +abstract class MockitoApi {, +, +	private static final MockitoApi api = createApi();, +, +	/**, +	 * Return mock settings for the given mock object., +	 * @param mock the mock object, +	 * @return the mock creation settings]