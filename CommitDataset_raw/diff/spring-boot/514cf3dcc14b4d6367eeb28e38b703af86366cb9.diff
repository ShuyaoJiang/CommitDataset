[+++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityConfiguration.java, +import org.springframework.bootstrap.actuate.properties.EndpointsProperties;, +import org.springframework.security.web.AuthenticationEntryPoint;, +import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;, +		private EndpointsProperties endpoints;, +, +		@Autowired, +			if (this.security.getBasic().isEnabled()) {, +				http.authenticationEntryPoint(entryPoint()), +						.antMatcher(this.security.getBasic().getPath()).httpBasic(), +						.authenticationEntryPoint(entryPoint()).and().anonymous(), +						.disable();, +				http.authorizeUrls().antMatchers("/**"), +						.hasRole(this.security.getBasic().getRole());, +			}, +			// No cookies for service endpoints by default, +			http.sessionManagement().sessionCreationPolicy(this.security.getSessions());, +		}, +, +		private AuthenticationEntryPoint entryPoint() {, +			BasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();, +			entryPoint.setRealmName(this.security.getBasic().getRealm());, +			return entryPoint;, +			builder.ignoring().antMatchers(this.endpoints.getHealth().getPath(),, +					this.endpoints.getInfo().getPath(),, +					this.endpoints.getError().getPath());, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityConfiguration.java, +import org.springframework.bootstrap.actuate.properties.EndpointsProperties;, +import org.springframework.security.web.AuthenticationEntryPoint;, +import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;, +		private EndpointsProperties endpoints;, +, +		@Autowired, +			if (this.security.getBasic().isEnabled()) {, +				http.authenticationEntryPoint(entryPoint()), +						.antMatcher(this.security.getBasic().getPath()).httpBasic(), +						.authenticationEntryPoint(entryPoint()).and().anonymous(), +						.disable();, +				http.authorizeUrls().antMatchers("/**"), +						.hasRole(this.security.getBasic().getRole());, +			}, +			// No cookies for service endpoints by default, +			http.sessionManagement().sessionCreationPolicy(this.security.getSessions());, +		}, +, +		private AuthenticationEntryPoint entryPoint() {, +			BasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();, +			entryPoint.setRealmName(this.security.getBasic().getRealm());, +			return entryPoint;, +			builder.ignoring().antMatchers(this.endpoints.getHealth().getPath(),, +					this.endpoints.getInfo().getPath(),, +					this.endpoints.getError().getPath());, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/properties/SecurityProperties.java, +import org.springframework.security.config.annotation.web.SessionCreationPolicy;, + * Properties for the security aspects of an application., +	private Basic basic = new Basic();, +, +	private SessionCreationPolicy sessions = SessionCreationPolicy.stateless;, +, +	public SessionCreationPolicy getSessions() {, +		return this.sessions;, +	}, +, +	public void setSessions(SessionCreationPolicy sessions) {, +		this.sessions = sessions;, +	}, +, +	public Basic getBasic() {, +		return this.basic;, +	}, +, +	public void setBasic(Basic basic) {, +		this.basic = basic;, +	}, +, +		return this.requireSsl;, +, +	public static class Basic {, +, +		private boolean enabled = true;, +, +		private String realm = "Spring";, +, +		private String path = "/**";, +, +		private String role = "USER";, +, +		public boolean isEnabled() {, +			return this.enabled;, +		}, +, +		public void setEnabled(boolean enabled) {, +			this.enabled = enabled;, +		}, +, +		public String getRealm() {, +			return this.realm;, +		}, +, +		public void setRealm(String realm) {]