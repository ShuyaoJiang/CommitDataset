[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DataSourceInitializedPublisher.java, +		if (bean instanceof LocalContainerEntityManagerFactoryBean) {, +			LocalContainerEntityManagerFactoryBean factory = (LocalContainerEntityManagerFactoryBean) bean;, +			if (factory.getBootstrapExecutor() == null) {, +				publishEventIfRequired(factory.getNativeEntityManagerFactory());, +			}, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DataSourceInitializedPublisher.java, +		if (bean instanceof LocalContainerEntityManagerFactoryBean) {, +			LocalContainerEntityManagerFactoryBean factory = (LocalContainerEntityManagerFactoryBean) bean;, +			if (factory.getBootstrapExecutor() == null) {, +				publishEventIfRequired(factory.getNativeEntityManagerFactory());, +			}, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import java.util.ArrayList;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceSchemaCreatedEvent;, +import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfigurationTests.JpaUsingApplicationListenerConfiguration.EventCapturingApplicationListener;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;, +	@Test, +	public void withSyncBootstrappingAnApplicationListenerThatUsesJpaDoesNotTriggerABeanCurrentlyInCreationException() {, +		contextRunner(), +				.withUserConfiguration(JpaUsingApplicationListenerConfiguration.class), +				.withPropertyValues("spring.datasource.initialization-mode=never"), +				.run((context) -> {, +					assertThat(context).hasNotFailed();, +					assertThat(context, +							.getBean(EventCapturingApplicationListener.class).events, +									.stream(), +									.filter(DataSourceSchemaCreatedEvent.class::isInstance)), +											.hasSize(1);, +				});, +	}, +, +	@Test, +	public void withAsyncBootstrappingAnApplicationListenerThatUsesJpaDoesNotTriggerABeanCurrentlyInCreationException() {, +		contextRunner(), +				.withUserConfiguration(AsyncBootstrappingConfiguration.class,, +						JpaUsingApplicationListenerConfiguration.class), +				.withPropertyValues("spring.datasource.initialization-mode=never"), +				.run((context) -> {, +					assertThat(context).hasNotFailed();, +					EventCapturingApplicationListener listener = context, +							.getBean(EventCapturingApplicationListener.class);, +					long end = System.currentTimeMillis() + 30000;, +					while ((System.currentTimeMillis() < end), +							&& !dataSourceSchemaCreatedEventReceived(listener)) {, +						Thread.sleep(100);, +					}, +					assertThat(listener.events.stream(), +							.filter(DataSourceSchemaCreatedEvent.class::isInstance)), +									.hasSize(1);, +				});, +	}, +, +	private boolean dataSourceSchemaCreatedEventReceived(, +			EventCapturingApplicationListener listener) {, +		for (ApplicationEvent event : listener.events) {, +			if (event instanceof DataSourceSchemaCreatedEvent) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	@org.springframework.context.annotation.Configuration, +	static class JpaUsingApplicationListenerConfiguration {, +, +		@Bean, +		public EventCapturingApplicationListener jpaUsingApplicationListener(, +				EntityManagerFactory emf) {, +			return new EventCapturingApplicationListener();, +		}, +, +		static class EventCapturingApplicationListener, +				implements ApplicationListener<ApplicationEvent> {, +, +			private final List<ApplicationEvent> events = new ArrayList<>();, +, +			@Override, +			public void onApplicationEvent(ApplicationEvent event) {, +				this.events.add(event);, +			}, +, +		}, +, +	}, +, +	@Configuration, +	static class AsyncBootstrappingConfiguration {, +, +		@Bean, +		ThreadPoolTaskExecutor ThreadPoolTaskExecutor() {, +			return new ThreadPoolTaskExecutor();, +		}, +, +		@Bean, +		public EntityManagerFactoryBuilderCustomizer asyncBoostrappingCustomizer(]