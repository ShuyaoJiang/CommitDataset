[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +import java.util.Locale;, +import java.util.MissingResourceException;, +import java.util.ResourceBundle;, +, +import org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(ResourceBundleCondition.class), +@EnableConfigurationProperties, +@ConfigurationProperties(prefix = "spring.messages"), +public class MessageSourceAutoConfiguration {, +	private String basename = "messages";, +	private String encoding = "utf-8";, +, +	private int cacheSeconds = -1;, +		if (StringUtils.hasText(this.basename)) {, +					.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(this.basename)));, +		messageSource.setDefaultEncoding(this.encoding);, +		messageSource.setCacheSeconds(this.cacheSeconds);, +	public String getBasename() {, +		return this.basename;, +	}, +, +	public void setBasename(String basename) {, +		this.basename = basename;, +	}, +, +	public String getEncoding() {, +		return this.encoding;, +	}, +, +	public void setEncoding(String encoding) {, +		this.encoding = encoding;, +	}, +, +	public int getCacheSeconds() {, +		return this.cacheSeconds;, +	}, +, +	public void setCacheSeconds(int cacheSeconds) {, +		this.cacheSeconds = cacheSeconds;, +	}, +, +	protected static class ResourceBundleCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String basename = context.getEnvironment().getProperty(, +					"spring.messages.basename", "messages");, +			if (!StringUtils.hasText(basename)) {, +				return ConditionOutcome.noMatch("Empty spring.messages.basename");, +			}, +			for (String name : commaDelimitedListToStringArray(trimAllWhitespace(basename))) {, +				try {, +					ResourceBundle.getBundle(name, Locale.getDefault(),, +							context.getClassLoader());, +				}, +				catch (MissingResourceException e) {, +					return ConditionOutcome, +							.noMatch("Bundle found for spring.messages.basename: " + name);, +				}, +			}, +			return ConditionOutcome.match("Bundle found for spring.messages.basename: ", +					+ basename);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +import java.util.Locale;, +import java.util.MissingResourceException;, +import java.util.ResourceBundle;, +, +import org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration.ResourceBundleCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +@Conditional(ResourceBundleCondition.class), +@EnableConfigurationProperties, +@ConfigurationProperties(prefix = "spring.messages"), +public class MessageSourceAutoConfiguration {, +	private String basename = "messages";, +	private String encoding = "utf-8";, +, +	private int cacheSeconds = -1;, +		if (StringUtils.hasText(this.basename)) {, +					.setBasenames(commaDelimitedListToStringArray(trimAllWhitespace(this.basename)));, +		messageSource.setDefaultEncoding(this.encoding);, +		messageSource.setCacheSeconds(this.cacheSeconds);]