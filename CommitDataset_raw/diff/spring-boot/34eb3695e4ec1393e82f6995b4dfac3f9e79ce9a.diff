[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Minimum amount of worker threads., +		 */, +		private int minSpareThreads = 0; //Number of minimum spare threads in protocol handler, +, +		/**, +		public int getMinSpareThreads() {, +			return minSpareThreads;, +		}, +, +		public void setMinSpareThreads(int minSpareThreads) {, +			this.minSpareThreads = minSpareThreads;, +		}, +, +			if (this.minSpareThreads > 0) {, +				customizeMinThreads(factory);, +			}, +		private void customizeMinThreads(TomcatEmbeddedServletContainerFactory factory) {, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +, +					ProtocolHandler handler = connector.getProtocolHandler();, +					if (handler instanceof AbstractProtocol) {, +						AbstractProtocol protocol = (AbstractProtocol) handler;, +						protocol.setMinSpareThreads(Tomcat.this.minSpareThreads);, +					}, +, +				}, +			});, +		}, +, +		@SuppressWarnings("rawtypes"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Minimum amount of worker threads., +		 */, +		private int minSpareThreads = 0; //Number of minimum spare threads in protocol handler, +, +		/**, +		public int getMinSpareThreads() {, +			return minSpareThreads;, +		}, +, +		public void setMinSpareThreads(int minSpareThreads) {, +			this.minSpareThreads = minSpareThreads;, +		}, +, +			if (this.minSpareThreads > 0) {, +				customizeMinThreads(factory);, +			}, +		private void customizeMinThreads(TomcatEmbeddedServletContainerFactory factory) {, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +, +					ProtocolHandler handler = connector.getProtocolHandler();, +					if (handler instanceof AbstractProtocol) {, +						AbstractProtocol protocol = (AbstractProtocol) handler;, +						protocol.setMinSpareThreads(Tomcat.this.minSpareThreads);, +					}, +, +				}, +			});, +		}, +, +		@SuppressWarnings("rawtypes"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +	public void testCustomizeTomcatMinSpareThreads() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.tomcat.min-spare-threads", "10");, +		bindProperties(map);, +		assertThat(this.properties.getTomcat().getMinSpareThreads()).isEqualTo(10);, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Minimum amount of worker threads., +		 */, +		private int minSpareThreads = 0; //Number of minimum spare threads in protocol handler, +, +		/**, +		public int getMinSpareThreads() {, +			return minSpareThreads;, +		}, +, +		public void setMinSpareThreads(int minSpareThreads) {, +			this.minSpareThreads = minSpareThreads;, +		}, +, +			if (this.minSpareThreads > 0) {, +				customizeMinThreads(factory);, +			}, +		private void customizeMinThreads(TomcatEmbeddedServletContainerFactory factory) {, +			factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +				@Override, +				public void customize(Connector connector) {, +, +					ProtocolHandler handler = connector.getProtocolHandler();, +					if (handler instanceof AbstractProtocol) {, +						AbstractProtocol protocol = (AbstractProtocol) handler;]