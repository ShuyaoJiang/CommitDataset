[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +import java.lang.annotation.Annotation;, +	 * The annotation type decorating a bean that should be checked. The condition matches, +	 * when each class specified is missing from beans in the {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<? extends Annotation>[] annotation() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +import java.lang.annotation.Annotation;, +	 * The annotation type decorating a bean that should be checked. The condition matches, +	 * when each class specified is missing from beans in the {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<? extends Annotation>[] annotation() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +import java.lang.annotation.Annotation;, +	 * The annotation type decorating a bean that should be checked. The condition matches, +	 * when each class specified is missing from all beans in the, +	 * {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<? extends Annotation>[] annotation() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBean.java, +import java.lang.annotation.Annotation;, +	 * The annotation type decorating a bean that should be checked. The condition matches, +	 * when each class specified is missing from beans in the {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<? extends Annotation>[] annotation() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBean.java, +import java.lang.annotation.Annotation;, +	 * The annotation type decorating a bean that should be checked. The condition matches, +	 * when each class specified is missing from all beans in the, +	 * {@link ApplicationContext}., +	 * @return the class types of beans to check, +	 */, +	Class<? extends Annotation>[] annotation() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +import java.lang.annotation.Annotation;, +import java.util.Map;, +import org.springframework.util.StringUtils;, +		for (String annotation : beans.getAnnotations()) {, +			beanNames.addAll(Arrays.asList(getBeanNamesForAnnotation(beanFactory,, +					annotation, context.getClassLoader(), considerHierarchy)));, +		}, +, +	private String[] getBeanNamesForAnnotation(, +			ConfigurableListableBeanFactory beanFactory, String type,, +			ClassLoader classLoader, boolean considerHierarchy) throws LinkageError {, +		String[] result = NO_BEANS;, +		try {, +			@SuppressWarnings("unchecked"), +			Class<? extends Annotation> typeClass = (Class<? extends Annotation>) ClassUtils, +					.forName(type, classLoader);, +			Map<String, Object> annotated = beanFactory.getBeansWithAnnotation(typeClass);, +			result = annotated.keySet().toArray(new String[annotated.size()]);, +			if (considerHierarchy) {, +				if (beanFactory.getParentBeanFactory() instanceof ConfigurableListableBeanFactory) {, +					String[] parentResult = getBeanNamesForAnnotation(, +							(ConfigurableListableBeanFactory) beanFactory, +									.getParentBeanFactory(),, +							type, classLoader, true);, +					List<String> resultList = new ArrayList<String>();, +					resultList.addAll(Arrays.asList(result));, +					for (String beanName : parentResult) {, +						if (!resultList.contains(beanName), +								&& !beanFactory.containsLocalBean(beanName)) {, +							resultList.add(beanName);, +						}, +					}, +					result = StringUtils.toStringArray(resultList);, +				}, +			}, +			return result;, +		}, +		catch (ClassNotFoundException ex) {, +			return NO_BEANS;, +		}, +	}, +, +		private List<String> annotations = new ArrayList<String>();, +			collect(attributes, "annotation", this.annotations);, +			Assert.isTrue(, +					!this.types.isEmpty() || !this.names.isEmpty(), +							|| !this.annotations.isEmpty(),, +					"@", +							+ " annotations must specify at least one bean (type, name or annotation)");, +		public List<String> getAnnotations() {, +			return this.annotations;, +		}]