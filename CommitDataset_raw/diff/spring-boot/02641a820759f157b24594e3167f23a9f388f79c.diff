[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	public String[] selectImports(AnnotationMetadata annotationMetadata) {, +		if (!isEnabled(annotationMetadata)) {, +			AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader, +					.loadMetadata(this.beanClassLoader);, +			AnnotationAttributes attributes = getAttributes(annotationMetadata);, +			List<String> configurations = getCandidateConfigurations(annotationMetadata,, +			configurations = sort(configurations, autoConfigurationMetadata);, +			Set<String> exclusions = getExclusions(annotationMetadata, attributes);, +	private List<String> sort(List<String> configurations,, +			AutoConfigurationMetadata autoConfigurationMetadata) throws IOException {, +		configurations = new AutoConfigurationSorter(getMetadataReaderFactory(),, +				autoConfigurationMetadata).getInPriorityOrder(configurations);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +	public String[] selectImports(AnnotationMetadata annotationMetadata) {, +		if (!isEnabled(annotationMetadata)) {, +			AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader, +					.loadMetadata(this.beanClassLoader);, +			AnnotationAttributes attributes = getAttributes(annotationMetadata);, +			List<String> configurations = getCandidateConfigurations(annotationMetadata,, +			configurations = sort(configurations, autoConfigurationMetadata);, +			Set<String> exclusions = getExclusions(annotationMetadata, attributes);, +	private List<String> sort(List<String> configurations,, +			AutoConfigurationMetadata autoConfigurationMetadata) throws IOException {, +		configurations = new AutoConfigurationSorter(getMetadataReaderFactory(),, +				autoConfigurationMetadata).getInPriorityOrder(configurations);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java, + * Copyright 2012-2017 the original author or authors., + * reading {@link AutoConfigureOrder}, {@link AutoConfigureBefore} and, + * {@link AutoConfigureAfter} annotations (without loading classes)., +	private final AutoConfigurationMetadata autoConfigurationMetadata;, +, +	AutoConfigurationSorter(MetadataReaderFactory metadataReaderFactory,, +			AutoConfigurationMetadata autoConfigurationMetadata) {, +		this.autoConfigurationMetadata = autoConfigurationMetadata;, +	public List<String> getInPriorityOrder(Collection<String> classNames) {, +				this.metadataReaderFactory, this.autoConfigurationMetadata, classNames);, +, +, +				AutoConfigurationMetadata autoConfigurationMetadata,, +				Collection<String> classNames) {, +				this.classes.put(className, new AutoConfigurationClass(className,, +						metadataReaderFactory, autoConfigurationMetadata));, +		private final String className;, +		private final MetadataReaderFactory metadataReaderFactory;, +		private final AutoConfigurationMetadata autoConfigurationMetadata;, +, +		private AnnotationMetadata annotationMetadata;, +, +		private final Set<String> before;, +, +		private final Set<String> after;, +, +		AutoConfigurationClass(String className,, +				MetadataReaderFactory metadataReaderFactory,, +				AutoConfigurationMetadata autoConfigurationMetadata) {, +			this.className = className;, +			this.metadataReaderFactory = metadataReaderFactory;, +			this.autoConfigurationMetadata = autoConfigurationMetadata;, +			this.before = readBefore();, +			this.after = readAfter();, +			return this.before;, +			return this.after;, +		}, +, +		private int getOrder() {, +			if (this.autoConfigurationMetadata.wasProcessed(this.className)) {, +				return this.autoConfigurationMetadata.getInteger(this.className,, +						"AutoConfigureOrder", Ordered.LOWEST_PRECEDENCE);, +			}, +			Map<String, Object> attributes = getAnnotationMetadata(), +					.getAnnotationAttributes(AutoConfigureOrder.class.getName());, +			return (attributes == null ? Ordered.LOWEST_PRECEDENCE, +					: (Integer) attributes.get("value"));, +		}, +, +		private Set<String> readBefore() {, +			if (this.autoConfigurationMetadata.wasProcessed(this.className)) {, +				return this.autoConfigurationMetadata.getSet(this.className,, +						"AutoConfigureBefore", Collections.<String>emptySet());, +			}, +			return getAnnotationValue(AutoConfigureBefore.class);, +		}, +, +		private Set<String> readAfter() {, +			if (this.autoConfigurationMetadata.wasProcessed(this.className)) {, +				return this.autoConfigurationMetadata.getSet(this.className,, +						"AutoConfigureAfter", Collections.<String>emptySet());, +			}, +			Map<String, Object> attributes = getAnnotationMetadata(), +		private AnnotationMetadata getAnnotationMetadata() {, +			if (this.annotationMetadata == null) {, +				try {, +					MetadataReader metadataReader = this.metadataReaderFactory, +							.getMetadataReader(this.className);, +					this.annotationMetadata = metadataReader.getAnnotationMetadata();, +				}, +				catch (IOException ex) {, +					throw new IllegalStateException(, +							"Unable to read meta-data for class " + this.className, ex);]