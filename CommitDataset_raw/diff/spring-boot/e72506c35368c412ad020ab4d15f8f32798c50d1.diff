[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;, +import org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory;, +import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;, +import org.springframework.boot.web.server.WebServerFactoryCustomizer;, +	private volatile Context context;, +, +		return new TomcatMetrics(this.context == null ? null : this.context.getManager(),, +	@Bean, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	public WebServerFactoryCustomizer<TomcatServletWebServerFactory> contextCapturingServletTomcatCustomizer() {, +		return (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);, +	@Bean, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	public WebServerFactoryCustomizer<TomcatReactiveWebServerFactory> contextCapturingReactiveTomcatCustomizer() {, +		return (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);, +, +	private void setContext(Context context) {, +		this.context = context;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication.Type;, +import org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory;, +import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;, +import org.springframework.boot.web.server.WebServerFactoryCustomizer;, +	private volatile Context context;, +, +		return new TomcatMetrics(this.context == null ? null : this.context.getManager(),, +	@Bean, +	@ConditionalOnWebApplication(type = Type.SERVLET), +	public WebServerFactoryCustomizer<TomcatServletWebServerFactory> contextCapturingServletTomcatCustomizer() {, +		return (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);, +	@Bean, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	public WebServerFactoryCustomizer<TomcatReactiveWebServerFactory> contextCapturingReactiveTomcatCustomizer() {, +		return (tomcatFactory) -> tomcatFactory.addContextCustomizers(this::setContext);, +, +	private void setContext(Context context) {, +		this.context = context;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/tomcat/TomcatMetricsAutoConfigurationTests.java, +import io.micrometer.core.instrument.binder.MeterBinder;, +import org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;, +import org.springframework.boot.web.servlet.ServletContextInitializer;, +import org.springframework.context.ApplicationContext;, +						.withConfiguration(AutoConfigurations.of(, +								TomcatMetricsAutoConfiguration.class,, +								ServletWebServerFactoryAutoConfiguration.class)), +	public void sessionMetricsAreAvailableWhenEarlyMeterBinderInitializationOccurs() {, +		new WebApplicationContextRunner(, +				AnnotationConfigServletWebServerApplicationContext::new), +						.withConfiguration(AutoConfigurations.of(, +								TomcatMetricsAutoConfiguration.class,, +								ServletWebServerFactoryAutoConfiguration.class)), +						.withUserConfiguration(ServletWebServerConfiguration.class,, +								EarlyMeterBinderInitializationConfiguration.class), +						.run((context) -> {, +							assertThat(context).hasSingleBean(TomcatMetrics.class);, +							SimpleMeterRegistry registry = new SimpleMeterRegistry();, +							context.getBean(TomcatMetrics.class).bindTo(registry);, +							assertThat(, +									registry.find("tomcat.sessions.active.max").meter()), +											.isNotNull();, +							assertThat(registry.find("tomcat.threads.current").meter()), +									.isNotNull();, +						});, +	}, +, +	@Test, +						.withConfiguration(AutoConfigurations.of(, +								TomcatMetricsAutoConfiguration.class,, +								ReactiveWebServerAutoConfiguration.class)), +	@Configuration, +	static class EarlyMeterBinderInitializationConfiguration {, +, +		@Bean, +		public ServletContextInitializer earlyInitializer(ApplicationContext context) {, +			return (servletContext) -> context.getBeansOfType(MeterBinder.class);, +		}, +, +	}, +]