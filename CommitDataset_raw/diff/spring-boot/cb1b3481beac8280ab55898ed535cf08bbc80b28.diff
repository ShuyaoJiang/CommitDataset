[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;, +import org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;, +	}, +, +	@Configuration, +	@ConditionalOnClass(Servlet.class), +	@ConditionalOnNotWebApplication, +	public static class FreeMarkerConfiguration implements EnvironmentAware {, +, +		private RelaxedPropertyResolver environment;, +, +		@Override, +		public void setEnvironment(Environment environment) {, +			this.environment = new RelaxedPropertyResolver(environment,, +					"spring.freemarker.");, +		}, +, +		@ConditionalOnMissingBean, +		public FreeMarkerConfigurationFactoryBean freeMarkerConfigurer() {, +			FreeMarkerConfigurationFactoryBean freeMarkerConfigurer = new FreeMarkerConfigurationFactoryBean();, +, +		@ConditionalOnBean(FreeMarkerConfig.class), +		@ConditionalOnMissingBean, +		public freemarker.template.Configuration freemarkerConfiguration(, +				FreeMarkerConfig configurer) {, +			return configurer.getConfiguration();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();, +			freeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(, +					"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));, +			freeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(, +					"templateEncoding", "UTF-8"));, +			Map<String, Object> settingsMap = this.environment, +					.getSubProperties("settings.");, +			Properties settings = new Properties();, +			settings.putAll(settingsMap);, +			freeMarkerConfigurer.setFreemarkerSettings(settings);, +			return freeMarkerConfigurer;, +		}, +, +		@Bean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;, +import org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerConfig;, +	}, +, +	@Configuration, +	@ConditionalOnClass(Servlet.class), +	@ConditionalOnNotWebApplication, +	public static class FreeMarkerConfiguration implements EnvironmentAware {, +, +		private RelaxedPropertyResolver environment;, +, +		@Override, +		public void setEnvironment(Environment environment) {, +			this.environment = new RelaxedPropertyResolver(environment,, +					"spring.freemarker.");, +		}, +, +		@ConditionalOnMissingBean, +		public FreeMarkerConfigurationFactoryBean freeMarkerConfigurer() {, +			FreeMarkerConfigurationFactoryBean freeMarkerConfigurer = new FreeMarkerConfigurationFactoryBean();, +, +		@ConditionalOnBean(FreeMarkerConfig.class), +		@ConditionalOnMissingBean, +		public freemarker.template.Configuration freemarkerConfiguration(, +				FreeMarkerConfig configurer) {, +			return configurer.getConfiguration();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();, +			freeMarkerConfigurer.setTemplateLoaderPath(this.environment.getProperty(, +					"templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));, +			freeMarkerConfigurer.setDefaultEncoding(this.environment.getProperty(, +					"templateEncoding", "UTF-8"));, +			Map<String, Object> settingsMap = this.environment, +					.getSubProperties("settings.");, +			Properties settings = new Properties();, +			settings.putAll(settingsMap);, +			freeMarkerConfigurer.setFreemarkerSettings(settings);, +			return freeMarkerConfigurer;, +		}, +, +		@Bean, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import java.io.StringWriter;, +	@Test, +	public void renderTemplate() throws Exception {]