[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import javax.sql.XADataSource;, +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +			if (hasBean(context, DataSource.class), +					|| hasBean(context, XADataSource.class)) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import javax.sql.XADataSource;, +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +			if (hasBean(context, DataSource.class), +					|| hasBean(context, XADataSource.class)) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +			String url = this.properties.get("url");, +			String driverClass = DatabaseDriver.fromJdbcUrl(url).getDriverClassName();, +			this.properties.put("driverClassName", driverClass);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import javax.sql.XADataSource;, +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +			if (hasBean(context, DataSource.class), +					|| hasBean(context, XADataSource.class)) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +			String url = this.properties.get("url");, +			String driverClass = DatabaseDriver.fromJdbcUrl(url).getDriverClassName();, +			this.properties.put("driverClassName", driverClass);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +	private Xa xa = new Xa();, +			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName();, +							+ "database please put a supported one on the classpath.");, +	public Xa getXa() {, +		return this.xa;, +	}, +, +	public void setXa(Xa xa) {, +		this.xa = xa;, +	}, +, +	/**, +	 * XA Specific datasource settings., +	 */, +	public static class Xa {, +, +		private String dataSourceClassName;, +, +		private Map<String, String> properties = new LinkedHashMap<String, String>();, +, +		public String getDataSourceClassName() {, +			return this.dataSourceClassName;, +		}, +, +		public void setDataSourceClassName(String dataSourceClassName) {, +			this.dataSourceClassName = dataSourceClassName;, +		}, +, +		public Map<String, String> getProperties() {, +			return this.properties;, +		}, +, +		public void setProperties(Map<String, String> properties) {, +			this.properties = properties;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import javax.sql.XADataSource;, +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +	@ConditionalOnMissingBean({ DataSource.class, XADataSource.class }), +			if (hasBean(context, DataSource.class), +					|| hasBean(context, XADataSource.class)) {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java, +			String url = this.properties.get("url");, +			String driverClass = DatabaseDriver.fromJdbcUrl(url).getDriverClassName();, +			this.properties.put("driverClassName", driverClass);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +	private Xa xa = new Xa();, +			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName();, +							+ "database please put a supported one on the classpath.");, +	public Xa getXa() {, +		return this.xa;, +	}, +, +	public void setXa(Xa xa) {, +		this.xa = xa;, +	}, +, +	/**, +	 * XA Specific datasource settings., +	 */]