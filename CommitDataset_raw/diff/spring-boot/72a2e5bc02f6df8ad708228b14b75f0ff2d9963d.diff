[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +import org.gradle.api.logging.Logger;, + * @author Dave Syer, +				project.getTasks().withType(Jar.class,, +						new RegisterInputsOutputsAction(task));, +	/**, +	 * Register task input/outputs when classifiers are used, +	 */, +	private static class RegisterInputsOutputsAction implements Action<Jar> {, +		private final RepackageTask task;, +		private final Project project;, +, +		public RegisterInputsOutputsAction(RepackageTask task) {, +			this.project = task.getProject();, +		public void execute(Jar jarTask) {, +			if ("".equals(jarTask.getClassifier())) {, +				if (classifier == null) {, +					SpringBootPluginExtension extension = this.project.getExtensions(), +							.getByType(SpringBootPluginExtension.class);, +					this.task.setClassifier(classifier);, +					setupInputOutputs(jarTask, classifier);, +		}, +, +		private void setupInputOutputs(Jar jarTask, String classifier) {, +			Logger logger = this.project.getLogger();, +			logger.debug("Using classifier: " + classifier + " for task ", +					+ task.getName());, +			File inputFile = jarTask.getArchivePath();, +			String outputName = inputFile.getName();, +			outputName = StringUtils.stripFilenameExtension(outputName) + "-", +					+ classifier + "." + StringUtils.getFilenameExtension(outputName);, +			File outputFile = new File(inputFile.getParentFile(), outputName);, +			this.task.getInputs().file(jarTask);, +			this.task.getInputs().file(this.task.getDependencies());, +			this.task.getOutputs().file(outputFile);, +			this.task.setOutputFile(outputFile);, +		}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java, +import org.gradle.api.logging.Logger;, + * @author Dave Syer, +				project.getTasks().withType(Jar.class,, +						new RegisterInputsOutputsAction(task));, +	/**, +	 * Register task input/outputs when classifiers are used, +	 */, +	private static class RegisterInputsOutputsAction implements Action<Jar> {, +		private final RepackageTask task;, +		private final Project project;, +, +		public RegisterInputsOutputsAction(RepackageTask task) {, +			this.project = task.getProject();, +		public void execute(Jar jarTask) {, +			if ("".equals(jarTask.getClassifier())) {, +				if (classifier == null) {, +					SpringBootPluginExtension extension = this.project.getExtensions(), +							.getByType(SpringBootPluginExtension.class);, +					this.task.setClassifier(classifier);, +					setupInputOutputs(jarTask, classifier);, +		}, +, +		private void setupInputOutputs(Jar jarTask, String classifier) {, +			Logger logger = this.project.getLogger();, +			logger.debug("Using classifier: " + classifier + " for task ", +					+ task.getName());, +			File inputFile = jarTask.getArchivePath();, +			String outputName = inputFile.getName();, +			outputName = StringUtils.stripFilenameExtension(outputName) + "-", +					+ classifier + "." + StringUtils.getFilenameExtension(outputName);, +			File outputFile = new File(inputFile.getParentFile(), outputName);, +			this.task.getInputs().file(jarTask);, +			this.task.getInputs().file(this.task.getDependencies());, +			this.task.getOutputs().file(outputFile);, +			this.task.setOutputFile(outputFile);, +		}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java, +import org.gradle.api.tasks.TaskContainer;, +		} catch (IOException ex) {, +			throw new IllegalStateException("Cannot retrieve dependencies", ex);, +	/**, +	 * Action to repackage JARs., +	 */, +		public void execute(Jar jarTask) {, +			if (!RepackageTask.this.enabled) {, +			Object withJarTask = RepackageTask.this.withJarTask;, +			if (isTaskMatch(jarTask, withJarTask)) {, +						"Jar task not repackaged (didn't match withJarTask): " + jarTask);, +			if ("".equals(jarTask.getClassifier()), +				File file = jarTask.getArchivePath();, +					repackage(file);, +				}, +			}, +		}, +, +		private boolean isTaskMatch(Jar task, Object compare) {, +			if (compare == null) {, +				return false;, +			}, +			TaskContainer tasks = getProject().getTasks();, +			return task.equals(compare) || task.equals(tasks.findByName(task.toString()));, +		}]