[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConfiguration.java, +	static {, +		Map<EmbeddedDatabaseType, String> drivers = new LinkedHashMap<EmbeddedDatabaseType, String>();, +		drivers.put(EmbeddedDatabaseType.H2, "org.h2.Driver");, +		drivers.put(EmbeddedDatabaseType.DERBY, "org.apache.derby.jdbc.EmbeddedDriver");, +		drivers.put(EmbeddedDatabaseType.HSQL, "org.hsqldb.jdbcDriver");, +		EMBEDDED_DATABASE_DRIVER_CLASSES = drivers;, +	}, +, +	static {, +		Map<EmbeddedDatabaseType, String> urls = new LinkedHashMap<EmbeddedDatabaseType, String>();, +		urls.put(EmbeddedDatabaseType.H2, "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1");, +		urls.put(EmbeddedDatabaseType.DERBY, "jdbc:derby:memory:testdb;create=true");, +		urls.put(EmbeddedDatabaseType.HSQL, "jdbc:hsqldb:mem:testdb");, +		EMBEDDED_DATABASE_URLS = urls;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/EmbeddedDatabaseConfiguration.java, +	static {, +		Map<EmbeddedDatabaseType, String> drivers = new LinkedHashMap<EmbeddedDatabaseType, String>();, +		drivers.put(EmbeddedDatabaseType.H2, "org.h2.Driver");, +		drivers.put(EmbeddedDatabaseType.DERBY, "org.apache.derby.jdbc.EmbeddedDriver");, +		drivers.put(EmbeddedDatabaseType.HSQL, "org.hsqldb.jdbcDriver");, +		EMBEDDED_DATABASE_DRIVER_CLASSES = drivers;, +	}, +, +	static {, +		Map<EmbeddedDatabaseType, String> urls = new LinkedHashMap<EmbeddedDatabaseType, String>();, +		urls.put(EmbeddedDatabaseType.H2, "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1");, +		urls.put(EmbeddedDatabaseType.DERBY, "jdbc:derby:memory:testdb;create=true");, +		urls.put(EmbeddedDatabaseType.HSQL, "jdbc:hsqldb:mem:testdb");, +		EMBEDDED_DATABASE_URLS = urls;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +	@Bean, +	@ConditionalOnMissingBean(HiddenHttpMethodFilter.class), +	public HiddenHttpMethodFilter hiddenHttpMethodFilter() {, +		return new HiddenHttpMethodFilter();, +	}, +, +		@Bean, +		@ConditionalOnBean(View.class), +		@ConditionalOnBean(View.class)]