[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java, +		willThrow(new JMSException("Could not start", "123")).given(connection).start();, +		given(connectionFactory.createConnection()).willReturn(connection);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java, +		willThrow(new JMSException("Could not start", "123")).given(connection).start();, +		given(connectionFactory.createConnection()).willReturn(connection);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, +		 * Create the required batch tables on startup if necessary. Enabled automatically, +		 * if no custom table prefix is set or if a custom schema is configured., +			boolean customSchema = !DEFAULT_SCHEMA_LOCATION, +					.equals(BatchProperties.this.getSchema());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java, +		willThrow(new JMSException("Could not start", "123")).given(connection).start();, +		given(connectionFactory.createConnection()).willReturn(connection);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, +		 * Create the required batch tables on startup if necessary. Enabled automatically, +		 * if no custom table prefix is set or if a custom schema is configured., +			boolean customSchema = !DEFAULT_SCHEMA_LOCATION, +					.equals(BatchProperties.this.getSchema());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +				boolean defaultTableName = DEFAULT_TABLE_NAME, +						.equals(Jdbc.this.getTableName());, +				boolean customSchema = !DEFAULT_SCHEMA_LOCATION, +						.equals(Jdbc.this.getSchema());]