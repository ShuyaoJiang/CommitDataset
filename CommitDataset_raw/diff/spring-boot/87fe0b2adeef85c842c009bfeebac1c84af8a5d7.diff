[+++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, + * Copyright 2012-2016 the original author or authors., +		Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF");, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, + * Copyright 2012-2016 the original author or authors., +		Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(jarFile.getEntry("BOOT-INF/lib/commons-logging-1.1.3.jar")), +				.isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/projectB.jar")).isNotNull();, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, + * Copyright 2012-2016 the original author or authors., +		Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(jarFile.getEntry("BOOT-INF/lib/commons-logging-1.1.3.jar")), +				.isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/projectB.jar")).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/RepackagingTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +			String name = "BOOT-INF/lib/spring-boot-devtools-" + BOOT_VERSION + ".jar";, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, + * Copyright 2012-2016 the original author or authors., +		Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(jarFile.getEntry("BOOT-INF/lib/commons-logging-1.1.3.jar")), +				.isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("BOOT-INF/lib/projectB.jar")).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/RepackagingTests.java, + * Copyright 2012-2016 the original author or authors., +		assertThat(jarFile.getEntry("BOOT-INF/lib/foo.jar")).isNotNull();, +			String name = "BOOT-INF/lib/spring-boot-devtools-" + BOOT_VERSION + ".jar";, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JarWriter.java, + * Copyright 2012-2016 the original author or authors., +		this.writeEntries(jarFile, new IdentityEntryTransformer());, +	}, +, +	void writeEntries(JarFile jarFile, EntryTransformer entryTransformer), +			throws IOException {, +				writeEntry(entryTransformer.transform(entry), entryWriter);, +	/**, +	 * An {@code EntryTransformer} enables the transformation of {@link JarEntry jar, +	 * entries} during the writing process., +	 */, +	interface EntryTransformer {, +, +		JarEntry transform(JarEntry jarEntry);, +	}, +, +	/**, +	 * An {@code EntryTransformer} that returns the entry unchanged., +	 */, +	private static final class IdentityEntryTransformer implements EntryTransformer {, +, +		@Override, +		public JarEntry transform(JarEntry jarEntry) {, +			return jarEntry;, +		}, +, +	}, +, +++ b/spring-boot-cli/pom.xml, +							<outputDirectory>${project.build.directory}/assembly/BOOT-INF/lib</outputDirectory>, +++ b/spring-boot-cli/src/main/assembly/jar-with-dependencies.xml, +			<outputDirectory>BOOT-INF/classes/</outputDirectory>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/archive/PackagedSpringApplicationLauncher.java, + * Copyright 2012-2016 the original author or authors., +		Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java]