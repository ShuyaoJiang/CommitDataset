[+++ b/docs/howto.md, +There is a really useful `AutoConfigurationReport` available in any, +Spring Boot `ApplicationContext`. You will see it automatically if a, +context fails to start, and also if you enable DEBUG logging for, +Spring Boot. If you use the Actuator there is also an endpoint, +`/autoconfig` that renders the report in JSON. Use that to debug the, +application and see what features have been added (and which not) by, +Spring Boot at runtime., +, +Many more questions can be answered by looking at the source code and, +Javadocs. Some rules of thumb:, +, +* Look for classes called `*AutoConfiguration` and read their sources,, +  in particular the `@Conditional*` annotations to find out what, +  features they enable and when. In those clases..., +  , +* Look for classes that are `@ConfigurationProperties`, +  (e.g. [`ServerProperties`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java?source=c)), +  and read from there the available external configuration, +  options. The `@ConfigurationProperties` has a `name` attribute which, +  acts as a prefix to external properties, thus `ServerProperties` has, +  `name="server"` and its configuration properties are `server.port`,, +  `server.address` etc., +  , +* Look for use of `RelaxedEnvironment` to pull configuration values, +  explicitly out of the `Environment`. It often is used with a prefix., +  , +* Look for `@Value` annotations that bind directly to the, +  `Environment`. This is less flexible than the `RelaxedEnvironment`, +  approach, but does allow some relaxed binding, specifically for OS, +  environment variables (so `CAPITALS_AND_UNDERSCORES` are synonyms, +  for `period.separated`)., +  , +* Look for `@ConditionalOnExpression` annotations that switch features, +  on and off in response to SpEL expressions, normally evaluated with, +  placeholders resolved from the `Environment`., +, +<span id="build.hierarchy"/>, +## Build an ApplicationContext Hierarchy (Adding a Parent or Root Context), +, +The, +[`SpringApplicationBuilder`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java), +has methods specifically designed for the purpose of building a, +hierarchy, e.g., +, +```java, +SpringApplicationBuilder application = new SpringApplicationBuilder();, +application.sources(Parent.class).child(Application.class).run(args);, +```, +, +There are some restrictions, e.g. the parent aplication context is, +*not* a `WebApplicationContext`.  Both parent and child are executed, +with the same `Environment` constructed in the usual way to include, +command line arguments.  Any `ServletContextAware` components all have, +to go in the child context, otherwise there is no way for Spring Boot, +to create the `ServletContext` in time., +, +## Convert an Existing Application to Spring Boot, +, +For a non-web application it should be easy (throw away the code that, +creates your `ApplicationContext` and replace it with calls to, +`SpringApplication` or `SpringApplicationBuilder`). Spring MVC web, +applications are generally amenable to first creating a deployable WAR, +application, and then migrating it later to an executable WAR and/or, +JAR.  Useful reading is in the, +[Getting Started Guide on Converting a JAR to a WAR](http://spring.io/guides/gs/convert-jar-to-war/)., +, +Create a deployable WAR by extending `SpringBootServletInitializer`, +(e.g. in a class called `Application`), and add the Spring Boot, +`@EnableAutoConfiguration` annotation. Example:, +, +```, +@Configuration, +@EnableAutoConfiguration, +@ComponentScan, +public class Application extends SpringBootServletInitializer {, +	, +	@Override, +	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {, +		return application.sources(Application.class);, +	}, +, +}, +```, +, +Remember that whatever you put in the "sources" is just a Spring, +`ApplicationContext` and normally anything that already works should, +work here. There might be some beans you can remove later and let, +Spring Boot provide its own defaults for them, but it should be, +possible to get something working first., +, +Static resources can be moved to `/public` (or `/static` or, +`/resources` or `/META-INFO/resources`) in the classpath root. Same, +for `messages.properties` (Spring Boot detects this automatically in, +the root of the classpath)., +, +Vanilla usage of Spring `DispatcherServlet` and Spring Security should, +require no further changes. If you have other features in your, +application, using other servlets or filters, for instance then you, +may need to add some configuration to your `Application` context,]