[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${flyway.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${flyway.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Configuration properties for Flyway database migrations., +	private boolean checkLocation = false;, +, +	private boolean enabled = true;, +, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${flyway.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Configuration properties for Flyway database migrations., +	private boolean checkLocation = false;, +, +	private boolean enabled = true;, +, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${liquibase.enabled:true}"), +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getChangeLog());, +						+ resource, +						+ " (please add changelog or check your Liquibase configuration)");, +			liquibase.setDataSource(this.dataSource);, +			liquibase.setShouldRun(this.properties.isEnabled());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${flyway.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Configuration properties for Flyway database migrations., +	private boolean checkLocation = false;, +, +	private boolean enabled = true;, +, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${liquibase.enabled:true}"), +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getChangeLog());, +						+ resource, +						+ " (please add changelog or check your Liquibase configuration)");, +			liquibase.setDataSource(this.dataSource);, +			liquibase.setShouldRun(this.properties.isEnabled());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseProperties.java, +	private boolean enabled = true;, +	public boolean isEnabled() {, +		return this.enabled;, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +@ConditionalOnBean(DataSource.class), +@ConditionalOnExpression("${flyway.enabled:true}"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java, + * Configuration properties for Flyway database migrations., +	private boolean checkLocation = false;, +, +	private boolean enabled = true;, +, +	public boolean isEnabled() {, +		return this.enabled;]