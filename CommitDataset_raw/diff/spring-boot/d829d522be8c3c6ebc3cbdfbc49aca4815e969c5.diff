[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.actuate.health.HealthAggregator;, +import org.springframework.boot.actuate.health.HealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.OrderedHealthAggregator;, + * @author Vedran Pavic, +	private final HealthAggregator healthAggregator;, +, +	private final HealthIndicatorRegistry healthIndicatorRegistry;, +, +	HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +			ObjectProvider<HealthIndicatorRegistry> healthIndicatorRegistry) {, +		this.healthAggregator = healthAggregator, +				.getIfAvailable(OrderedHealthAggregator::new);, +		this.healthIndicatorRegistry = healthIndicatorRegistry.getObject();, +	}, +, +	public HealthEndpoint healthEndpoint() {, +		return new HealthEndpoint(this.healthAggregator, this.healthIndicatorRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.actuate.health.HealthAggregator;, +import org.springframework.boot.actuate.health.HealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.OrderedHealthAggregator;, + * @author Vedran Pavic, +	private final HealthAggregator healthAggregator;, +, +	private final HealthIndicatorRegistry healthIndicatorRegistry;, +, +	HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +			ObjectProvider<HealthIndicatorRegistry> healthIndicatorRegistry) {, +		this.healthAggregator = healthAggregator, +				.getIfAvailable(OrderedHealthAggregator::new);, +		this.healthIndicatorRegistry = healthIndicatorRegistry.getObject();, +	}, +, +	public HealthEndpoint healthEndpoint() {, +		return new HealthEndpoint(this.healthAggregator, this.healthIndicatorRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration.java, +				HealthEndpoint healthEndpoint,, +			return new HealthEndpointWebExtension(healthEndpoint, responseMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.actuate.health.HealthAggregator;, +import org.springframework.boot.actuate.health.HealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.OrderedHealthAggregator;, + * @author Vedran Pavic, +	private final HealthAggregator healthAggregator;, +, +	private final HealthIndicatorRegistry healthIndicatorRegistry;, +, +	HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +			ObjectProvider<HealthIndicatorRegistry> healthIndicatorRegistry) {, +		this.healthAggregator = healthAggregator, +				.getIfAvailable(OrderedHealthAggregator::new);, +		this.healthIndicatorRegistry = healthIndicatorRegistry.getObject();, +	}, +, +	public HealthEndpoint healthEndpoint() {, +		return new HealthEndpoint(this.healthAggregator, this.healthIndicatorRegistry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration.java, +				HealthEndpoint healthEndpoint,, +			return new HealthEndpointWebExtension(healthEndpoint, responseMapper);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, +, +import org.springframework.boot.actuate.health.DefaultHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.HealthIndicatorRegistry;, +import org.springframework.context.ApplicationContext;, +import org.springframework.util.ClassUtils;, + * @author Vedran Pavic, +	@Bean, +	@ConditionalOnMissingBean(HealthIndicatorRegistry.class), +	public HealthIndicatorRegistry healthIndicatorRegistry(, +			ApplicationContext applicationContext) {, +		HealthIndicatorRegistry registry = new DefaultHealthIndicatorRegistry();, +		Map<String, HealthIndicator> indicators = new LinkedHashMap<>();, +		indicators.putAll(applicationContext.getBeansOfType(HealthIndicator.class));, +		if (ClassUtils.isPresent("reactor.core.publisher.Flux", null)) {, +			new ReactiveHealthIndicators().get(applicationContext), +					.forEach(indicators::putIfAbsent);, +		}, +		indicators.forEach(registry::register);, +		return registry;, +	}, +, +	private static class ReactiveHealthIndicators {, +, +		public Map<String, HealthIndicator> get(ApplicationContext applicationContext) {, +			Map<String, HealthIndicator> indicators = new LinkedHashMap<>();, +			applicationContext.getBeansOfType(ReactiveHealthIndicator.class), +					.forEach((name, indicator) -> indicators.put(name, adapt(indicator)));, +			return indicators;, +		}, +]