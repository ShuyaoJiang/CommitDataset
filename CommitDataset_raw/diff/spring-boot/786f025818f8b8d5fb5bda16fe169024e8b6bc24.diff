[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfiguration.java, +import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;, +import org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;, +import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;, +	public ElasticsearchTemplate elasticsearchTemplate(Client client,, +			ElasticsearchConverter converter) {, +		try {, +			return new ElasticsearchTemplate(client, converter);, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public ElasticsearchConverter elasticsearchConverter(, +			SimpleElasticsearchMappingContext mappingContext) {, +		return new MappingElasticsearchConverter(mappingContext);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public SimpleElasticsearchMappingContext mappingContext() {, +		return new SimpleElasticsearchMappingContext();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfiguration.java, +import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;, +import org.springframework.data.elasticsearch.core.convert.MappingElasticsearchConverter;, +import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;, +	public ElasticsearchTemplate elasticsearchTemplate(Client client,, +			ElasticsearchConverter converter) {, +		try {, +			return new ElasticsearchTemplate(client, converter);, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public ElasticsearchConverter elasticsearchConverter(, +			SimpleElasticsearchMappingContext mappingContext) {, +		return new MappingElasticsearchConverter(mappingContext);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public SimpleElasticsearchMappingContext mappingContext() {, +		return new SimpleElasticsearchMappingContext();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfigurationTests.java, +import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter;, +import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext;, + * @author Artur Konczak, +	@Test, +	public void mappingContextExists() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.data.elasticsearch.properties.path.data:target/data",, +				"spring.data.elasticsearch.properties.path.logs:target/logs");, +		this.context.register(PropertyPlaceholderAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class,, +				ElasticsearchDataAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(1, this.context, +				.getBeanNamesForType(SimpleElasticsearchMappingContext.class).length);, +	}, +, +	@Test, +	public void converterExists() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.data.elasticsearch.properties.path.data:target/data",, +				"spring.data.elasticsearch.properties.path.logs:target/logs");, +		this.context.register(PropertyPlaceholderAutoConfiguration.class,, +				ElasticsearchAutoConfiguration.class,, +				ElasticsearchDataAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(1,, +				this.context.getBeanNamesForType(ElasticsearchConverter.class).length);, +	}, +]