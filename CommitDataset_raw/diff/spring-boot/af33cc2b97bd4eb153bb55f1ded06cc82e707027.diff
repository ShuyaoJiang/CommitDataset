[+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +			return new JettyEmbeddedServletContainerFactory(0);, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +			return new JettyEmbeddedServletContainerFactory(0);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +import org.springframework.util.SocketUtils;, +import static org.hamcrest.Matchers.lessThan;, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("Hello World"));, +	public void emptyServerWhenPortIsMinusOne() throws Exception {, +		factory.setPort(-1);, +		assertThat(this.container.getPort(), lessThan(0)); // Jetty is -2, +		getResponse(getLocalUrl("/hello"));, +				.createAsyncRequest(new URI(getLocalUrl("/hello")), HttpMethod.GET), +				.executeAsync();, +				.createAsyncRequest(new URI(getLocalUrl("/hello")), HttpMethod.GET), +				.executeAsync();, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("[Hello World]"));, +		int specificPort = SocketUtils.findAvailableTcpPort(40000);, +		factory.setPort(specificPort);, +		assertThat(getResponse("http://localhost:" + specificPort + "/hello"),, +				equalTo("Hello World"));, +		assertEquals(specificPort, this.container.getPort());, +		assertThat(getResponse(getLocalUrl("/say/hello")), equalTo("Hello World"));, +		assertThat(getResponse(getLocalUrl("/test.txt")), equalTo("test"));, +		ClientHttpResponse response = getClientResponse(getLocalUrl("/test.xxcss"));, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("Hello World"));, +		assertThat(getResponse(getLocalUrl("/bang")), equalTo("Hello World"));, +	}, +, +	protected String getLocalUrl(String resourcePath) {, +		return "http://localhost:" + this.container.getPort() + resourcePath;, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +			return new JettyEmbeddedServletContainerFactory(0);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +import org.springframework.util.SocketUtils;, +import static org.hamcrest.Matchers.lessThan;, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("Hello World"));, +	public void emptyServerWhenPortIsMinusOne() throws Exception {, +		factory.setPort(-1);, +		assertThat(this.container.getPort(), lessThan(0)); // Jetty is -2, +		getResponse(getLocalUrl("/hello"));, +				.createAsyncRequest(new URI(getLocalUrl("/hello")), HttpMethod.GET), +				.executeAsync();, +				.createAsyncRequest(new URI(getLocalUrl("/hello")), HttpMethod.GET), +				.executeAsync();, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("[Hello World]"));, +		int specificPort = SocketUtils.findAvailableTcpPort(40000);, +		factory.setPort(specificPort);, +		assertThat(getResponse("http://localhost:" + specificPort + "/hello"),, +				equalTo("Hello World"));, +		assertEquals(specificPort, this.container.getPort());, +		assertThat(getResponse(getLocalUrl("/say/hello")), equalTo("Hello World"));, +		assertThat(getResponse(getLocalUrl("/test.txt")), equalTo("test"));, +		ClientHttpResponse response = getClientResponse(getLocalUrl("/test.xxcss"));, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("Hello World"));, +		assertThat(getResponse(getLocalUrl("/bang")), equalTo("Hello World"));, +	}, +, +	protected String getLocalUrl(String resourcePath) {, +		return "http://localhost:" + this.container.getPort() + resourcePath;, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/EmbeddedServletContainerMvcIntegrationTests.java, +import org.springframework.context.annotation.Import;, +, +				TomcatConfig.class);, +		doTest(this.context, "/hello");, +				JettyConfig.class);, +		doTest(this.context, "/hello");, +		doTest(this.context, "/example/spring/hello");, +	private void doTest(AnnotationConfigEmbeddedWebApplicationContext context,, +			String resourcePath) throws Exception {, +		ClientHttpRequest request = clientHttpRequestFactory.createRequest(new URI(, +				"http://localhost:" + context.getEmbeddedServletContainer().getPort(), +						+ resourcePath), HttpMethod.GET);, +	@Import(Config.class), +	public static class TomcatConfig {, +		@Bean, +		public EmbeddedServletContainerFactory containerFactory() {, +			return new TomcatEmbeddedServletContainerFactory(0);, +		}, +	}, +, +	@Configuration, +	@Import(Config.class), +	public static class JettyConfig {, +		@Bean, +		public EmbeddedServletContainerFactory containerFactory() {, +			return new JettyEmbeddedServletContainerFactory(0);, +		}, +	}, +, +	@Configuration, +			JettyEmbeddedServletContainerFactory factory = new JettyEmbeddedServletContainerFactory(, +					0);, +			factory.setContextPath(this.env.getProperty("context"));, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +			return new JettyEmbeddedServletContainerFactory(0);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +import org.springframework.util.SocketUtils;, +import static org.hamcrest.Matchers.lessThan;, +		assertThat(getResponse(getLocalUrl("/hello")), equalTo("Hello World"));]