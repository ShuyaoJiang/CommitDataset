[+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.time.Duration;, +				"cache.time-to-live", Duration.class.getName(), type, null,, +				"Maximum time that a response can be cached.", 0, null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.time.Duration;, +				"cache.time-to-live", Duration.class.getName(), type, null,, +				"Maximum time that a response can be cached.", 0, null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, +		private static final Map<Class<?>, Object> DEFAULT_TYPE_VALUES;, +			DEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);, +		private static final Map<String, Object> WELL_KNOWN_STATIC_FINALS;, +			WELL_KNOWN_STATIC_FINALS = Collections.unmodifiableMap(values);, +		}, +, +		private static final String DURATION_OF = "Duration.of";, +, +		private static final Map<String, String> DURATION_SUFFIX;, +, +		static {, +			Map<String, String> values = new HashMap<>();, +			values.put("Nanos", "ns");, +			values.put("Millis", "ms");, +			values.put("Seconds", "s");, +			values.put("Minutes", "m");, +			values.put("Hours", "h");, +			values.put("Days", "d");, +			DURATION_SUFFIX = Collections.unmodifiableMap(values);, +			Object defaultValue = DEFAULT_TYPE_VALUES.get(wrapperType);, +				return getFactoryValue(expression, factoryValue);, +				return WELL_KNOWN_STATIC_FINALS.get(expression.toString());, +		private Object getFactoryValue(ExpressionTree expression, Object factoryValue) {, +			Object instance = expression.getInstance();, +			if (instance != null && instance.toString().startsWith(DURATION_OF)) {, +				String type = instance.toString();, +				type = type.substring(DURATION_OF.length(), type.indexOf("("));, +				String suffix = DURATION_SUFFIX.get(type);, +				return (suffix == null ? null : factoryValue + suffix);, +			}, +			return factoryValue;, +		}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.time.Duration;, +				"cache.time-to-live", Duration.class.getName(), type, null,, +				"Maximum time that a response can be cached.", 0, null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, +		private static final Map<Class<?>, Object> DEFAULT_TYPE_VALUES;, +			DEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);, +		private static final Map<String, Object> WELL_KNOWN_STATIC_FINALS;, +			WELL_KNOWN_STATIC_FINALS = Collections.unmodifiableMap(values);, +		}, +, +		private static final String DURATION_OF = "Duration.of";, +, +		private static final Map<String, String> DURATION_SUFFIX;, +, +		static {, +			Map<String, String> values = new HashMap<>();, +			values.put("Nanos", "ns");, +			values.put("Millis", "ms");, +			values.put("Seconds", "s");, +			values.put("Minutes", "m");, +			values.put("Hours", "h");, +			values.put("Days", "d");, +			DURATION_SUFFIX = Collections.unmodifiableMap(values);, +			Object defaultValue = DEFAULT_TYPE_VALUES.get(wrapperType);, +				return getFactoryValue(expression, factoryValue);, +				return WELL_KNOWN_STATIC_FINALS.get(expression.toString());, +		private Object getFactoryValue(ExpressionTree expression, Object factoryValue) {, +			Object instance = expression.getInstance();, +			if (instance != null && instance.toString().startsWith(DURATION_OF)) {, +				String type = instance.toString();, +				type = type.substring(DURATION_OF.length(), type.indexOf("("));, +				String suffix = DURATION_SUFFIX.get(type);, +				return (suffix == null ? null : factoryValue + suffix);, +			}, +			return factoryValue;, +		}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import java.time.Duration;, +		assertThat(metadata).has(Metadata.withGroup("management.endpoint.simple"), +				.fromSource(SimpleEndpoint.class));, +		assertThat(metadata), +				.has(Metadata.withProperty("management.endpoint.customprops.name"), +				.ofType(Duration.class).withDefaultValue(0), +				.withDescription("Maximum time that a response can be cached.");, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +import java.time.Duration;, +				"cache.time-to-live", Duration.class.getName(), type, null,, +				"Maximum time that a response can be cached.", 0, null));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/fieldvalues/javac/JavaCompilerFieldValuesParser.java, +		private static final Map<Class<?>, Object> DEFAULT_TYPE_VALUES;, +			DEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);, +		private static final Map<String, Object> WELL_KNOWN_STATIC_FINALS;, +			WELL_KNOWN_STATIC_FINALS = Collections.unmodifiableMap(values);, +		}, +, +		private static final String DURATION_OF = "Duration.of";]