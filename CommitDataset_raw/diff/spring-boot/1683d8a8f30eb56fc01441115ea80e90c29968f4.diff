[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Listener;, +		Listener listenerConfig = config.getListener();, +		if (listenerConfig.getAckMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAckMode());, +		}, +		if (listenerConfig.getConcurrency() != null) {, +			factory.setConcurrentConsumers(listenerConfig.getConcurrency());, +		}, +		if (listenerConfig.getMaxConcurrency() != null) {, +			factory.setMaxConcurrentConsumers(listenerConfig.getMaxConcurrency());, +		}, +		if (listenerConfig.getPrefetch() != null) {, +			factory.setPrefetchCount(listenerConfig.getPrefetch());, +		}, +		if (listenerConfig.getTxSize() != null) {, +			factory.setTxSize(listenerConfig.getTxSize());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java, +import org.springframework.boot.autoconfigure.amqp.RabbitProperties.Listener;, +		Listener listenerConfig = config.getListener();, +		if (listenerConfig.getAckMode() != null) {, +			factory.setAcknowledgeMode(listenerConfig.getAckMode());, +		}, +		if (listenerConfig.getConcurrency() != null) {, +			factory.setConcurrentConsumers(listenerConfig.getConcurrency());, +		}, +		if (listenerConfig.getMaxConcurrency() != null) {, +			factory.setMaxConcurrentConsumers(listenerConfig.getMaxConcurrency());, +		}, +		if (listenerConfig.getPrefetch() != null) {, +			factory.setPrefetchCount(listenerConfig.getPrefetch());, +		}, +		if (listenerConfig.getTxSize() != null) {, +			factory.setTxSize(listenerConfig.getTxSize());, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +import org.springframework.amqp.core.AcknowledgeMode;, +	/**, +	 * Listener container configuration., +	 */, +	private final Listener listener = new Listener();, +, +	public Listener getListener() {, +		return listener;, +	}, +, +, +	public static class Listener {, +, +		/**, +		 * Acknowledge mode of container., +		 */, +		private AcknowledgeMode ackMode;, +, +		/**, +		 * Minimum number of consumers., +		 */, +		private Integer concurrency;, +, +		/**, +		 * Maximum number of consumers., +		 */, +		private Integer maxConcurrency;, +, +		/**, +		 * Message prefetch count., +		 */, +		private Integer prefetch;, +, +		/**, +		 * Number of messages in a transaction., +		 */, +		private Integer txSize;, +, +		public AcknowledgeMode getAckMode() {, +			return ackMode;, +		}, +, +		public void setAckMode(AcknowledgeMode ackMode) {, +			this.ackMode = ackMode;, +		}, +, +		public Integer getConcurrency() {, +			return concurrency;, +		}, +, +		public void setConcurrency(Integer concurrency) {, +			this.concurrency = concurrency;, +		}, +, +		public Integer getMaxConcurrency() {, +			return maxConcurrency;, +		}, +, +		public void setMaxConcurrency(Integer maxConcurrency) {, +			this.maxConcurrency = maxConcurrency;, +		}, +, +		public Integer getPrefetch() {]