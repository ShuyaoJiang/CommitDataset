[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +import java.lang.reflect.Field;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.InterceptingClientHttpRequestFactory;, +import org.springframework.util.ReflectionUtils;, +		if (restTemplate.getRequestFactory().getClass().getName(), +				.equals("org.springframework.http.client.HttpComponentsClientHttpRequestFactory")) {, +		restTemplate.setRequestFactory(getRequestFactory(getRestTemplate()));, +	private ClientHttpRequestFactory getRequestFactory(RestTemplate restTemplate) {, +		ClientHttpRequestFactory requestFactory = restTemplate.getRequestFactory();, +		if (InterceptingClientHttpRequestFactory.class.isAssignableFrom(requestFactory.getClass())) {, +			Field requestFactoryField = ReflectionUtils, +					.findField(RestTemplate.class, "requestFactory");, +			ReflectionUtils.makeAccessible(requestFactoryField);, +			requestFactory = (ClientHttpRequestFactory), +					ReflectionUtils.getField(requestFactoryField, getRestTemplate());, +		}, +		return requestFactory;, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +import java.lang.reflect.Field;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.InterceptingClientHttpRequestFactory;, +import org.springframework.util.ReflectionUtils;, +		if (restTemplate.getRequestFactory().getClass().getName(), +				.equals("org.springframework.http.client.HttpComponentsClientHttpRequestFactory")) {, +		restTemplate.setRequestFactory(getRequestFactory(getRestTemplate()));, +	private ClientHttpRequestFactory getRequestFactory(RestTemplate restTemplate) {, +		ClientHttpRequestFactory requestFactory = restTemplate.getRequestFactory();, +		if (InterceptingClientHttpRequestFactory.class.isAssignableFrom(requestFactory.getClass())) {, +			Field requestFactoryField = ReflectionUtils, +					.findField(RestTemplate.class, "requestFactory");, +			ReflectionUtils.makeAccessible(requestFactoryField);, +			requestFactory = (ClientHttpRequestFactory), +					ReflectionUtils.getField(requestFactoryField, getRestTemplate());, +		}, +		return requestFactory;, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java, +import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +	public void doNotReplaceCustomRequestFactory() {, +		RestTemplateBuilder builder = new RestTemplateBuilder(), +				.requestFactory(OkHttp3ClientHttpRequestFactory.class);, +		TestRestTemplate testRestTemplate = new TestRestTemplate(builder);, +		assertThat(testRestTemplate.getRestTemplate().getRequestFactory()), +				.isInstanceOf(OkHttp3ClientHttpRequestFactory.class);, +	}, +, +	@Test, +		given(delegate.getRequestFactory()).willReturn(new SimpleClientHttpRequestFactory());]