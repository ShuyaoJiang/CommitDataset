[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.util.Arrays;, +import java.util.Collections;, +	public URL findResource(String name) {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return urls[0];, +			}, +		}, +		return super.findResource(name);, +	}, +, +	@Override, +	public Enumeration<URL> findResources(String name) throws IOException {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return Collections.enumeration(Arrays.asList(urls));, +			}, +		}, +		return super.findResources(name);, +	}, +, +	@Override, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.util.Arrays;, +import java.util.Collections;, +	public URL findResource(String name) {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return urls[0];, +			}, +		}, +		return super.findResource(name);, +	}, +, +	@Override, +	public Enumeration<URL> findResources(String name) throws IOException {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return Collections.enumeration(Arrays.asList(urls));, +			}, +		}, +		return super.findResources(name);, +	}, +, +	@Override, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +			// Add the current archive at end (it will be reversed and end up taking, +			// precedence), +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.util.Arrays;, +import java.util.Collections;, +	public URL findResource(String name) {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return urls[0];, +			}, +		}, +		return super.findResource(name);, +	}, +, +	@Override, +	public Enumeration<URL> findResources(String name) throws IOException {, +		if (name.equals("")) {, +			URL[] urls = getURLs();, +			if (urls.length > 0) {, +				return Collections.enumeration(Arrays.asList(urls));, +			}, +		}, +		return super.findResources(name);, +	}, +, +	@Override, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +			// Add the current archive at end (it will be reversed and end up taking, +			// precedence), +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.loader;, +]