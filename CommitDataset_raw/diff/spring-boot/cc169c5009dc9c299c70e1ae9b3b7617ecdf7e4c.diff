[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		@Value("spring.metrics.${spring.application.name:application}.${random.value:0000}"), +		@Value("d.d.k.d"), +		private String aggregateKeyPattern = "";, +, +			export.getRedis().setAggregateKeyPattern(this.aggregateKeyPattern);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		@Value("spring.metrics.${spring.application.name:application}.${random.value:0000}"), +		@Value("d.d.k.d"), +		private String aggregateKeyPattern = "";, +, +			export.getRedis().setAggregateKeyPattern(this.aggregateKeyPattern);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReader.java, +	private String keyPattern = "d.d";, +	 * Pattern that tells the aggregator what to do with the keys from the source, +	 * repository. The keys in the source repository are assumed to be period separated,, +	 * and the pattern is in the same format, e.g. "d.d.k.d". The pattern segments are, +	 * matched against the source keys and a rule is applied:, +	 * <ul>, +	 * <li>"d" means "discard" this key segment (useful for global prefixes like system, +	 * identifiers, or aggregate keys a.k.a. physical identifiers)</li>, +	 * <li>"k" means "keep" it with no change (useful for logical identifiers like app, +	 * names)</li>, +	 * </ul>, +	 * Default is "d.d" (we assume there is a global prefix of length 2)., +	 *, +	 * @param keyPattern the keyPattern to set, +	public void setKeyPattern(String keyPattern) {, +		this.keyPattern = keyPattern;, +	 * Prefix to apply to all output metrics. A period will be appended if not present in the, +	 * provided value., +	 *, +	 * @param prefix the prefix to use (default "aggregator."), +		this.prefix = prefix.endsWith(".") ? prefix : (StringUtils.hasText(prefix) ? prefix + "." : "");, +		String[] patterns = StringUtils.delimitedListToStringArray(this.keyPattern, ".");, +		StringBuilder builder = new StringBuilder();, +		int index = 0;, +		for (index = 0; index < patterns.length; index++) {, +			if ("k".equals(patterns[index])) {, +				if (builder.length() > 0) {, +					builder.append(".");, +				builder.append(keys[index]);, +			}, +		}, +		for (; index < keys.length; index++) {, +			if (builder.length() > 0) {, +				builder.append(".");, +			}, +			builder.append(keys[index]);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java, +		@Value("spring.metrics.${spring.application.name:application}.${random.value:0000}"), +		@Value("d.d.k.d"), +		private String aggregateKeyPattern = "";, +, +			export.getRedis().setAggregateKeyPattern(this.aggregateKeyPattern);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReader.java, +	private String keyPattern = "d.d";, +	 * Pattern that tells the aggregator what to do with the keys from the source, +	 * repository. The keys in the source repository are assumed to be period separated,, +	 * and the pattern is in the same format, e.g. "d.d.k.d". The pattern segments are, +	 * matched against the source keys and a rule is applied:, +	 * <ul>, +	 * <li>"d" means "discard" this key segment (useful for global prefixes like system, +	 * identifiers, or aggregate keys a.k.a. physical identifiers)</li>, +	 * <li>"k" means "keep" it with no change (useful for logical identifiers like app, +	 * names)</li>, +	 * </ul>, +	 * Default is "d.d" (we assume there is a global prefix of length 2)., +	 *, +	 * @param keyPattern the keyPattern to set, +	public void setKeyPattern(String keyPattern) {, +		this.keyPattern = keyPattern;, +	 * Prefix to apply to all output metrics. A period will be appended if not present in the, +	 * provided value., +	 *, +	 * @param prefix the prefix to use (default "aggregator."), +		this.prefix = prefix.endsWith(".") ? prefix : (StringUtils.hasText(prefix) ? prefix + "." : "");, +		String[] patterns = StringUtils.delimitedListToStringArray(this.keyPattern, ".");, +		StringBuilder builder = new StringBuilder();, +		int index = 0;, +		for (index = 0; index < patterns.length; index++) {, +			if ("k".equals(patterns[index])) {, +				if (builder.length() > 0) {, +					builder.append(".");, +				builder.append(keys[index]);, +			}, +		}, +		for (; index < keys.length; index++) {, +			if (builder.length() > 0) {, +				builder.append(".");, +			}, +			builder.append(keys[index]);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java, +		 * all processes sharing the same repository, "a" is unique to this logical, +		 * process (this application) and "b" is unique to this physical process. If you, +		/**, +		 * Pattern that tells the aggregator what to do with the keys from the source, +		 * repository. The keys in the source repository are assumed to be period, +		 * separated, and the pattern is in the same format, e.g. "d.d.k.d". Here "d", +		 * means "discard" and "k" means "keep" the key segment in the corresponding]