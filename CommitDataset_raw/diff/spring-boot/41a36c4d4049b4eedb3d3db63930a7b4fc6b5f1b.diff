[+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/client/ExampleRestClient.java, +	public void testPostWithBody(String body) {, +		this.restTemplate.postForObject("/test", body, String.class);, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/client/ExampleRestClient.java, +	public void testPostWithBody(String body) {, +		this.restTemplate.postForObject("/test", body, String.class);, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/client/RestClientRestIntegrationTests.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;, +	@Test, +	public void mockServerCallWithContent() throws Exception {, +		this.server.expect(requestTo("/test")).andExpect(content().string("test")), +				.andRespond(withSuccess("1", MediaType.TEXT_HTML));, +		this.client.testPostWithBody("test");, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/client/ExampleRestClient.java, +	public void testPostWithBody(String body) {, +		this.restTemplate.postForObject("/test", body, String.class);, +	}, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/client/RestClientRestIntegrationTests.java, +import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;, +	@Test, +	public void mockServerCallWithContent() throws Exception {, +		this.server.expect(requestTo("/test")).andExpect(content().string("test")), +				.andRespond(withSuccess("1", MediaType.TEXT_HTML));, +		this.client.testPostWithBody("test");, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/RootUriRequestExpectationManager.java, +import org.springframework.mock.http.client.MockClientHttpRequest;, +			request = replaceURI(request, uri.substring(this.rootUri.length()));, +	private ClientHttpRequest replaceURI(ClientHttpRequest request,, +			String replacementUri) {, +		URI uri;, +		try {, +			uri = new URI(replacementUri);, +			if (request instanceof MockClientHttpRequest) {, +				((MockClientHttpRequest) request).setURI(uri);, +				return request;, +			}, +			return new ReplaceUriClientHttpRequest(uri, request);, +		}, +		catch (URISyntaxException ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +		ReplaceUriClientHttpRequest(URI uri, ClientHttpRequest request) {, +			this.uri = uri;]