[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilter.java, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		return asSet(binder.bind(name, Bindable.listOf(String.class)).map(this::cleanup), +	private List<String> cleanup(List<String> values) {, +		return values.stream().map(this::cleanup).collect(Collectors.toList());, +	}, +, +	private String cleanup(String value) {, +		return "*".equals(value) ? "*", +				: EndpointId.fromPropertyValue(value).toLowerCaseString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilter.java, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		return asSet(binder.bind(name, Bindable.listOf(String.class)).map(this::cleanup), +	private List<String> cleanup(List<String> values) {, +		return values.stream().map(this::cleanup).collect(Collectors.toList());, +	}, +, +	private String cleanup(String value) {, +		return "*".equals(value) ? "*", +				: EndpointId.fromPropertyValue(value).toLowerCaseString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	@Test, +	public void matchWhenMixedCaseShouldMatch() {, +		setupFilter("foo-bar", "");, +		assertThat(match(EndpointId.of("fooBar"))).isTrue();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilter.java, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		return asSet(binder.bind(name, Bindable.listOf(String.class)).map(this::cleanup), +	private List<String> cleanup(List<String> values) {, +		return values.stream().map(this::cleanup).collect(Collectors.toList());, +	}, +, +	private String cleanup(String value) {, +		return "*".equals(value) ? "*", +				: EndpointId.fromPropertyValue(value).toLowerCaseString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	@Test, +	public void matchWhenMixedCaseShouldMatch() {, +		setupFilter("foo-bar", "");, +		assertThat(match(EndpointId.of("fooBar"))).isTrue();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointId.java, +	/**, +	 * Factory method to create a new {@link EndpointId} from a property value. Is more, +	 * lenient that {@link #of(String)} to allow for common "relaxed" property variants., +	 * @param value the property value to convert, +	 * @return an {@link EndpointId} instance, +	 */, +	public static EndpointId fromPropertyValue(String value) {, +		return new EndpointId(value.replace("-", ""));, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilter.java, +import java.util.List;, +import org.springframework.boot.actuate.endpoint.EndpointId;, +		return asSet(binder.bind(name, Bindable.listOf(String.class)).map(this::cleanup), +	private List<String> cleanup(List<String> values) {, +		return values.stream().map(this::cleanup).collect(Collectors.toList());, +	}, +, +	private String cleanup(String value) {, +		return "*".equals(value) ? "*", +				: EndpointId.fromPropertyValue(value).toLowerCaseString();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ExposeExcludePropertyEndpointFilterTests.java, +	@Test, +	public void matchWhenMixedCaseShouldMatch() {, +		setupFilter("foo-bar", "");, +		assertThat(match(EndpointId.of("fooBar"))).isTrue();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointId.java, +	/**, +	 * Factory method to create a new {@link EndpointId} from a property value. Is more, +	 * lenient that {@link #of(String)} to allow for common "relaxed" property variants., +	 * @param value the property value to convert, +	 * @return an {@link EndpointId} instance, +	 */, +	public static EndpointId fromPropertyValue(String value) {, +		return new EndpointId(value.replace("-", ""));, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java, +	@Test, +	public void fromPropertyValueStripsDashes() {, +		EndpointId fromPropertyValue = EndpointId.fromPropertyValue("foo-bar");, +		assertThat(fromPropertyValue).isEqualTo(EndpointId.of("fooBar"));]