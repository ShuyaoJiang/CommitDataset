[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java, +		replaceValue(getNestedMap(content, "commit"), "time", getProperties().getDate("commit.time"));, +		replaceValue(getNestedMap(content, "build"), "time", getProperties().getDate("build.time"));, +	 * Replace the {@code value} for the specified key if the value is not {@code null}., +	 * @param key the property to replace, +	 * @param value the new value, +	protected void replaceValue(Map<String, Object> content, String key, Object value) {, +		if (content.containsKey(key) && value != null) {, +			content.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java, +		replaceValue(getNestedMap(content, "commit"), "time", getProperties().getDate("commit.time"));, +		replaceValue(getNestedMap(content, "build"), "time", getProperties().getDate("build.time"));, +	 * Replace the {@code value} for the specified key if the value is not {@code null}., +	 * @param key the property to replace, +	 * @param value the new value, +	protected void replaceValue(Map<String, Object> content, String key, Object value) {, +		if (content.containsKey(key) && value != null) {, +			content.put(key, value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1456995720000L);, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1457103850000L);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java, +		replaceValue(getNestedMap(content, "commit"), "time", getProperties().getDate("commit.time"));, +		replaceValue(getNestedMap(content, "build"), "time", getProperties().getDate("build.time"));, +	 * Replace the {@code value} for the specified key if the value is not {@code null}., +	 * @param key the property to replace, +	 * @param value the new value, +	protected void replaceValue(Map<String, Object> content, String key, Object value) {, +		if (content.containsKey(key) && value != null) {, +			content.put(key, value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1456995720000L);, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1457103850000L);, +++ b/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java, +	 * Return the timestamp of the commit or {@code null}., +	 * <p>, +	 * If the original value could not be parsed properly, it is still available with, +	 * the {@code commit.time} key., +	 * @see #get(String), +	public Date getCommitTime() {, +		return getDate("commit.time");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java, +		replaceValue(getNestedMap(content, "commit"), "time", getProperties().getDate("commit.time"));, +		replaceValue(getNestedMap(content, "build"), "time", getProperties().getDate("build.time"));, +	 * Replace the {@code value} for the specified key if the value is not {@code null}., +	 * @param key the property to replace, +	 * @param value the new value, +	protected void replaceValue(Map<String, Object> content, String key, Object value) {, +		if (content.containsKey(key) && value != null) {, +			content.put(key, value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1456995720000L);, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1457103850000L);, +++ b/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java, +	 * Return the timestamp of the commit or {@code null}., +	 * <p>, +	 * If the original value could not be parsed properly, it is still available with, +	 * the {@code commit.time} key., +	 * @see #get(String), +	public Date getCommitTime() {, +		return getDate("commit.time");, +++ b/spring-boot/src/main/java/org/springframework/boot/info/InfoProperties.java, +import java.util.Date;, +	/**, +	 * Return the value of the specified property as a {@link Date} or {@code null}, +	 * <p>, +	 * Return {@code null} if the value is not a valid {@link Long} representing an, +	 * epoch time., +	 * @param key the id of the property, +	 * @return the property value, +	 */, +	public Date getDate(String key) {, +		String s = get(key);, +		if (s != null) {, +			try {, +				long epoch = Long.parseLong(s);, +				return new Date(epoch);, +			}, +			catch (NumberFormatException e) {, +				// Not valid epoch time, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java, +		replaceValue(getNestedMap(content, "commit"), "time", getProperties().getDate("commit.time"));, +		replaceValue(getNestedMap(content, "build"), "time", getProperties().getDate("build.time"));, +	 * Replace the {@code value} for the specified key if the value is not {@code null}., +	 * @param key the property to replace, +	 * @param value the new value, +	protected void replaceValue(Map<String, Object> content, String key, Object value) {, +		if (content.containsKey(key) && value != null) {, +			content.put(key, value);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1456995720000L);, +		assertThat(gitProperties.getCommitTime().getTime()).isEqualTo(1457103850000L);, +++ b/spring-boot/src/main/java/org/springframework/boot/info/GitProperties.java, +	 * Return the timestamp of the commit or {@code null}., +	 * <p>]