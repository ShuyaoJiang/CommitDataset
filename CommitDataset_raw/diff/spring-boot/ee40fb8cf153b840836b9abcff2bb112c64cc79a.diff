[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.github.mxab.thymeleaf.extras</groupId>, +			<artifactId>thymeleaf-extras-data-attribute</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.github.mxab.thymeleaf.extras</groupId>, +			<artifactId>thymeleaf-extras-data-attribute</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;, +, +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getPrefix());, +			return this.checkTemplateLocation;, +			return this.prefix;, +			return this.suffix;, +			return this.mode;, +			return this.encoding;, +			return this.contentType;, +			return this.cache;, +			return this.excludedViewNames;, +			return this.viewNames;, +	@ConditionalOnClass(DataAttributeDialect.class), +	protected static class DataAttributeDialectConfiguration {, +, +		@Bean, +		public DataAttributeDialect dialect() {, +			return new DataAttributeDialect();, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass({ SpringSecurityDialect.class }), +	protected static class ThymeleafSecurityDialectConfiguration {, +, +		@Bean, +		public SpringSecurityDialect securityDialect() {, +			return new SpringSecurityDialect();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.github.mxab.thymeleaf.extras</groupId>, +			<artifactId>thymeleaf-extras-data-attribute</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import com.github.mxab.thymeleaf.extras.dataattribute.dialect.DataAttributeDialect;, +, +				Resource resource = this.resourceLoader.getResource(this.properties, +						.getPrefix());, +			return this.checkTemplateLocation;, +			return this.prefix;, +			return this.suffix;, +			return this.mode;, +			return this.encoding;, +			return this.contentType;, +			return this.cache;, +			return this.excludedViewNames;, +			return this.viewNames;, +	@ConditionalOnClass(DataAttributeDialect.class), +	protected static class DataAttributeDialectConfiguration {, +, +		@Bean, +		public DataAttributeDialect dialect() {, +			return new DataAttributeDialect();, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass({ SpringSecurityDialect.class }), +	protected static class ThymeleafSecurityDialectConfiguration {, +, +		@Bean, +		public SpringSecurityDialect securityDialect() {, +			return new SpringSecurityDialect();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java, +	@Test, +	public void useDataDialect() throws Exception {, +		this.context.register(ThymeleafAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		TemplateEngine engine = this.context.getBean(TemplateEngine.class);, +		Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar"));, +		String result = engine.process("data-dialect", attrs);, +		assertEquals("<html><body data-foo=\"bar\"></body></html>", result);]