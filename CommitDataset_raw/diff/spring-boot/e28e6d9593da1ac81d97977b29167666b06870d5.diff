[+++ b/docs/howto.md, +## Add a Servlet, Filter or ServletContextListener to an Application, +, +`Servlet`, `Filter`, `ServletContextListener` and the other listeners, +supported by the Servlet spec can be added to your application as, +`@Bean` definitions. Be very careful that they don't cause eager, +initialization of too many other beans because they have to be, +installed in th container very early in the application lifecycle, +(e.g. it's not a good idea to have them depend on your `DataSource` or, +JPA configuration). You can work around restrictions like that by, +initializing them lazily when first used instead of on initialization., +, +In the case of `Filters` and `Servlets` you can also add mappings and, +init parameters by adding a `FilterRegistrationBean` or, +`ServletRegistrationBean` instead of or as well as the underlying, +component., +, +## Terminate SSL in Tomcat, +, +Add a `EmbeddedServletContainerCustomizer` and in that add a, +`TomcatConnectorCustomizer` that sets up the connector to be secure:, +, +```java, +@Bean, +public EmbeddedServletContainerCustomizer containerCustomizer(){, +    return new EmbeddedServletContainerCustomizer() {, +        @Override, +        public void customize(ConfigurableEmbeddedServletContainerFactory factory) {, +            if(factory instanceof TomcatEmbeddedServletContainerFactory){, +                TomcatEmbeddedServletContainerFactory containerFactory = (TomcatEmbeddedServletContainerFactory) factory;, +                containerFactory.addConnectorCustomizers(new TomcatConnectorCustomizer() {, +                , +                    @Override, +                    public void customize(Connector connector) {, +, +                        connector.setPort(serverPort);, +                        connector.setSecure(true);, +                        connector.setScheme("https");, +                        connector.setAttribute("keyAlias", "tomcat");, +                        connector.setAttribute("keystorePass", "password");, +                        try {, +                            connector.setAttribute("keystoreFile", ResourceUtils.getFile("src/ssl/tomcat.keystore").getAbsolutePath());, +                        } catch (FileNotFoundException e) {, +                            throw new IllegalStateException("Cannot load keystore", e);, +                        }, +                        connector.setAttribute("clientAuth", "false");, +                        connector.setAttribute("sslProtocol", "TLS");, +                        connector.setAttribute("SSLEnabled", true);, +                , +                });, +            }, +        }, +    };, +}, +```, +, +## Customize "Whitelabel" Error Page, +, +The Actuator installs a "whitelabel" error page that you will see in, +browser client if you encounter a server error (machine clients, +consuming JSON and other media types should see a sensible response, +with the right error code). To switch it off you can set, +`error.whitelabel.enabled=false`, but normally in addition or, +alternatively to that you will want to add your own error page, +replacing the whitelabel one. If you are using Thymeleaf you can do, +this by adding an "error.html" template. In general what you need is a, +`View` that resolves with a name of "error", and/or a `@Controller`, +that handles the "/error" path. Unless you replaced some of the, +default configuration you should find a `BeanNameViewResolver` in your, +`ApplicationContext` so a `@Bean` with id "error" would be a simple, +way of doing that.  Look at `ErrorMvcAutoConfiguration` for more, +options., +, +## Configure a DataSource, +, +Spring Boot will create a `DataSource` for you if you have, +`spring-jdbc` and some other things on the classpath. Here's the, +algorithm for choosing a specific implementation., +, +* We prefer the Tomcat pooling `DataSource` for its performance and, +  concurrency, so if that is available we always choose it., +* If commons-dbcp is available we will use that, but we don't, +  recommend it in production., +* If neither of those is available but an embedded database is then we, +  create one of those for you (preference order is h2, then Apache, +  Derby, then hsqldb)., +  , +The pooling `DataSource` option is controlled by external, +configuration properties in `spring.datasource.*` for example:, +, +```properties, +spring.datasource.url: jdbc:mysql://localhost/test, +spring.datasource.username: root, +spring.datasource.password:, +spring.datasource.driverClassName: com.mysql.jdbc.Driver, +```, +, +The `@ConfigurationProperties` for `spring.datasource` are defined in, +`AbstractDataSourceConfiguration` (so see there for more options)., +]