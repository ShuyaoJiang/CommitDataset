[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/mappings.adoc, +[cols="4,1,2"], +[cols="4,1,2"], +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/mappings.adoc, +[cols="4,1,2"], +[cols="4,1,2"], +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointReactiveDocumentationTests.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.http.MediaType;, +import org.springframework.restdocs.payload.FieldDescriptor;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RestController;, +		List<FieldDescriptor> requestMappingConditions = Arrays.asList(, +				requestMappingConditionField(""), +						.description("Details of the request mapping conditions."), +						.optional(),, +				requestMappingConditionField(".consumes"), +						.description("Details of the consumes condition"),, +				requestMappingConditionField(".consumes.[].mediaType"), +						.description("Consumed media type."),, +				requestMappingConditionField(".consumes.[].negated"), +						.description("Whether the media type is negated."),, +				requestMappingConditionField(".headers"), +						.description("Details of the headers condition."),, +				requestMappingConditionField(".headers.[].name"), +						.description("Name of the header."),, +				requestMappingConditionField(".headers.[].value"), +						.description("Required value of the header, if any."),, +				requestMappingConditionField(".headers.[].negated"), +						.description("Whether the value is negated."),, +				requestMappingConditionField(".methods"), +						.description("HTTP methods that are handled."),, +				requestMappingConditionField(".params"), +						.description("Details of the params condition."),, +				requestMappingConditionField(".params.[].name"), +						.description("Name of the parameter."),, +				requestMappingConditionField(".params.[].value"), +						.description("Required value of the parameter, if any."),, +				requestMappingConditionField(".params.[].negated"), +						.description("Whether the value is negated."),, +				requestMappingConditionField(".patterns").description(, +						"Patterns identifying the paths handled by the mapping."),, +				requestMappingConditionField(".produces"), +						.description("Details of the produces condition."),, +				requestMappingConditionField(".produces.[].mediaType"), +						.description("Produced media type."),, +				requestMappingConditionField(".produces.[].negated"), +						.description("Whether the media type is negated."));, +		List<FieldDescriptor> handlerMethod = Arrays.asList(, +				fieldWithPath("*.[].details.handlerMethod").optional(), +						.type(JsonFieldType.OBJECT), +						.description("Details of the method, if any, ", +								+ "that will handle requests to this mapping."),, +				fieldWithPath("*.[].details.handlerMethod.className"), +						.type(JsonFieldType.STRING), +						.description("Fully qualified name of the class of the method."),, +				fieldWithPath("*.[].details.handlerMethod.name"), +						.type(JsonFieldType.STRING).description("Name of the method."),, +				fieldWithPath("*.[].details.handlerMethod.descriptor"), +						.type(JsonFieldType.STRING), +						.description("Descriptor of the method as specified in the Java ", +								+ "Language Specification."));, +		List<FieldDescriptor> handlerFunction = Arrays.asList(, +				fieldWithPath("*.[].details.handlerFunction").optional(), +						.type(JsonFieldType.OBJECT), +						.description("Details of the function, if any, that will handle ", +								+ "requests to this mapping."),, +				fieldWithPath("*.[].details.handlerFunction.className"), +						.type(JsonFieldType.STRING).description(, +								"Fully qualified name of the class of the function."));, +		List<FieldDescriptor> dispatcherHandlerFields = new ArrayList<>(Arrays.asList(, +				fieldWithPath("*"), +						.description("Dispatcher handler mappings, if any, keyed by ", +								+ "dispatcher handler bean name."),, +				fieldWithPath("*.[].details").optional().type(JsonFieldType.OBJECT), +						.description("Additional implementation-specific ", +								+ "details about the mapping. Optional."),, +				fieldWithPath("*.[].handler").description("Handler for the mapping."),, +				fieldWithPath("*.[].predicate"), +						.description("Predicate for the mapping.")));, +		dispatcherHandlerFields.addAll(requestMappingConditions);, +		dispatcherHandlerFields.addAll(handlerMethod);, +		dispatcherHandlerFields.addAll(handlerFunction);, +								dispatcherHandlerFields)));, +	}, +, +	private FieldDescriptor requestMappingConditionField(String path) {, +		return fieldWithPath("*.[].details.requestMappingConditions" + path);, +		@Bean, +		public ExampleController exampleController() {, +			return new ExampleController();, +		}, +, +	}, +, +	@RestController, +	private static class ExampleController {, +]