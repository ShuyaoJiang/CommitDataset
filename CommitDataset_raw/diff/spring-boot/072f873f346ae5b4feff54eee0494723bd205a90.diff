[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		return ClassUtils.isPresent("com.ibm.websphere.jtaextensions.", +				+ "ExtendedJTATransaction", getClass().getClassLoader());, +			if (!isUsingJndi()) {, +			// Assume that Hibernate will use JNDI, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());, +			}, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();, +			}, +			catch (Exception ex) {, +				// Continue searching, +			}, +		}, +		throw new IllegalStateException("Could not configure JTA platform");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		return ClassUtils.isPresent("com.ibm.websphere.jtaextensions.", +				+ "ExtendedJTATransaction", getClass().getClassLoader());, +			if (!isUsingJndi()) {, +			// Assume that Hibernate will use JNDI, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());, +			}, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();, +			}, +			catch (Exception ex) {, +				// Continue searching, +			}, +		}, +		throw new IllegalStateException("Could not configure JTA platform");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			StringHttpMessageConverter converter = new StringHttpMessageConverter(, +					this.encodingProperties.getCharset());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		return ClassUtils.isPresent("com.ibm.websphere.jtaextensions.", +				+ "ExtendedJTATransaction", getClass().getClassLoader());, +			if (!isUsingJndi()) {, +			// Assume that Hibernate will use JNDI, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());, +			}, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();, +			}, +			catch (Exception ex) {, +				// Continue searching, +			}, +		}, +		throw new IllegalStateException("Could not configure JTA platform");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +			StringHttpMessageConverter converter = new StringHttpMessageConverter(, +					this.encodingProperties.getCharset());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, + * Copyright 2012-2015 the original author or authors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +		return ClassUtils.isPresent("com.ibm.websphere.jtaextensions.", +				+ "ExtendedJTATransaction", getClass().getClassLoader());, +			if (!isUsingJndi()) {, +			// Assume that Hibernate will use JNDI, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());, +			}, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();, +			}, +			catch (Exception ex) {, +				// Continue searching, +			}]