[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			if (this.properties.getType() != null) {, +				factory.type(this.properties.getType());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			if (this.properties.getType() != null) {, +				factory.type(this.properties.getType());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import javax.sql.DataSource;, + * @author Stephane Nicoll, +	 * Fully qualified name of the connection pool implementation to use. By default,, +	 * it is auto-detected from the classpath., +	 */, +	private Class<? extends DataSource> type;, +, +	/**, +	public Class<? extends DataSource> getType() {, +		return type;, +	}, +, +	public void setType(Class<? extends DataSource> type) {, +		this.type = type;, +	}, +, +	public void setDriverClassName(String driverClassName) {, +		this.driverClassName = driverClassName;, +	}, +, +	public void setUrl(String url) {, +		this.url = url;, +	}, +, +	public void setUsername(String username) {, +		this.username = username;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			if (this.properties.getType() != null) {, +				factory.type(this.properties.getType());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import javax.sql.DataSource;, + * @author Stephane Nicoll, +	 * Fully qualified name of the connection pool implementation to use. By default,, +	 * it is auto-detected from the classpath., +	 */, +	private Class<? extends DataSource> type;, +, +	/**, +	public Class<? extends DataSource> getType() {, +		return type;, +	}, +, +	public void setType(Class<? extends DataSource> type) {, +		this.type = type;, +	}, +, +	public void setDriverClassName(String driverClassName) {, +		this.driverClassName = driverClassName;, +	}, +, +	public void setUrl(String url) {, +		this.url = url;, +	}, +, +	public void setUsername(String username) {, +		this.username = username;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import com.zaxxer.hikari.HikariDataSource;, +, + * @author Stephane Nicoll, +	public void explicitType() {, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.driverClassName:org.hsqldb.jdbcDriver",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb",, +				"spring.datasource.type:" + HikariDataSource.class.getName());, +		this.context.register(DataSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		DataSource bean = this.context.getBean(DataSource.class);, +		assertNotNull(bean);, +		assertEquals(HikariDataSource.class, bean.getClass());, +	}, +, +	@Test, +	@SuppressWarnings("unused") // see testExplicitDriverClassClearsUserName, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +			if (this.properties.getType() != null) {, +				factory.type(this.properties.getType());, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java, +import javax.sql.DataSource;, + * @author Stephane Nicoll, +	 * Fully qualified name of the connection pool implementation to use. By default,, +	 * it is auto-detected from the classpath., +	 */, +	private Class<? extends DataSource> type;]