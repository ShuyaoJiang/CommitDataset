[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java, +	public void customizerShouldBeAppliedInTheEnd() {, +		ResponseErrorHandler errorHandler = mock(ResponseErrorHandler.class);, +		ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();, +		this.builder.interceptors(this.interceptor), +				.messageConverters(this.messageConverter).rootUri("http://localhost:8080"), +				.errorHandler(errorHandler).basicAuthorization("spring", "boot"), +				.requestFactory(() -> requestFactory).customizers((restTemplate) -> {, +					assertThat(restTemplate.getInterceptors()).hasSize(2), +							.contains(this.interceptor).anyMatch(, +									(ic) -> ic instanceof BasicAuthorizationInterceptor);, +					assertThat(restTemplate.getMessageConverters()), +							.contains(this.messageConverter);, +					assertThat(restTemplate.getUriTemplateHandler()), +							.isInstanceOf(RootUriTemplateHandler.class);, +					assertThat(restTemplate.getErrorHandler()).isEqualTo(errorHandler);, +					ClientHttpRequestFactory actualRequestFactory = restTemplate, +							.getRequestFactory();, +					assertThat(actualRequestFactory), +							.isInstanceOf(InterceptingClientHttpRequestFactory.class);, +					assertThat(ReflectionTestUtils.getField(actualRequestFactory,, +							"requestFactory")).isSameAs(requestFactory);, +				}).build();, +, +	}, +, +	@Test]