[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(SecurityAutoConfiguration.class,, +					PropertyPlaceholderAutoConfiguration.class));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(AuthenticationManagerBuilder.class)).isNotNull();, +			assertThat(context.getBean(FilterChainProxy.class).getFilterChains()), +		});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(WebSecurity.class, SecurityFilterAutoConfiguration.class)), +				.run(context -> assertThat(context.getBean("securityFilterChainRegistration",, +						FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER - 100));, +		this.contextRunner.run(context -> {, +			assertThat(context.getBean(AuthenticationEventPublisher.class)), +		});, +		this.contextRunner.withUserConfiguration(AuthenticationEventPublisherConfiguration.class).run(context -> {, +			assertThat(context.getBean(AuthenticationEventPublisher.class)), +		});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run(context -> {, +			assertThat(context.getBean("securityFilterChainRegistration",, +		});, +		this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)), +				.withPropertyValues("spring.security.filter.order:12345"), +				.run(context -> {, +			assertThat(context.getBean("securityFilterChainRegistration",, +					DelegatingFilterProxyRegistrationBean.class).getOrder()).isEqualTo(, +					12345);, +		});, +		this.contextRunner.run(context -> {, +			UserDetailsService manager = context.getBean(UserDetailsService.class);, +		});, +		this.contextRunner.withUserConfiguration(TestAuthenticationManagerConfiguration.class).run(context -> {, +			AuthenticationManager manager = context.getBean(AuthenticationManager.class);, +			assertThat(manager).isEqualTo(context.getBean(, +		});, +		this.contextRunner.withUserConfiguration(TestUserDetailsServiceConfiguration.class).run(context -> {, +			UserDetailsService userDetailsService = context, +		});, +		this.contextRunner.withUserConfiguration(TestAuthenticationProviderConfiguration.class).run(context -> {, +			AuthenticationProvider provider = context, +		});, +		this.contextRunner.withPropertyValues("spring.datasource.url:jdbc:hsqldb:mem:testsecdb",, +				.withUserConfiguration(EntityConfiguration.class), +				.withConfiguration(AutoConfigurations.of(HibernateJpaAutoConfiguration.class, DataSourceAutoConfiguration.class)), +				.run(context -> assertThat(context.getBean(JpaTransactionManager.class)).isNotNull());, +		this.contextRunner.run(context ->, +				assertThat(context).getBean(SecurityEvaluationContextExtension.class).isNotNull());, +		this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)), +				.run(context -> {, +					DelegatingFilterProxyRegistrationBean bean = context.getBean(, +		});, +		this.contextRunner.withPropertyValues("spring.security.filter.dispatcher-types:INCLUDE,ERROR"), +				.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)), +				.run(context -> {, +					DelegatingFilterProxyRegistrationBean bean = context.getBean(, +				});]