[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiFunction;, +import java.util.function.Supplier;, +, +import javax.annotation.PostConstruct;, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +import org.springframework.http.CacheControl;, +import org.springframework.util.Assert;, + * @author Kristine Jetzke, +	 * Cache control headers. Either {@link #cachePeriod} or {@link #cacheControl} can be set., +	 */, +	@NestedConfigurationProperty, +	private CacheControlProperties cacheControl;, +, +	/**, +	public CacheControlProperties getCacheControl() {, +		return this.cacheControl;, +	}, +, +	public void setCacheControl(CacheControlProperties cacheControl) {, +		this.cacheControl = cacheControl;, +	}, +, +, +	public CacheControl createCacheControl() {, +		if (this.cachePeriod != null) {, +			return CacheControl.maxAge(this.cachePeriod.getSeconds(), TimeUnit.SECONDS);, +		}, +		if (this.cacheControl != null) {, +			return this.cacheControl.transformToHttpSpringCacheControl();, +		}, +		return null;, +	}, +, +	@PostConstruct, +	public void checkIncompatibleCacheOptions() {, +		Assert.state(this.cachePeriod == null || this.cacheControl == null,, +				"Only one of cache-period or cache-control may be set.");, +		if (this.cacheControl != null) {, +			if (this.cacheControl.getMaxAge() != null) {, +				Assert.state(!Boolean.TRUE.equals(this.cacheControl.getNoCache()), "no-cache may not be set if max-age is set.");, +				Assert.state(!Boolean.TRUE.equals(this.cacheControl.getNoStore()), "no-store may not be set if max-age is set.");, +			}, +			if (this.cacheControl.getNoCache() != null) {, +				Assert.state(this.cacheControl.getMaxAge() == null, "max-age may not be set if no-cache is set.");, +				Assert.state(!Boolean.TRUE.equals(this.cacheControl.getNoStore()), "no-store may not be set if no-cache is set.");, +			}, +			if (this.cacheControl.getNoStore() != null) {, +				Assert.state(this.cacheControl.getMaxAge() == null, "max-age may not be set if no-store is set.");, +				Assert.state(!Boolean.TRUE.equals(this.cacheControl.getNoCache()), "no-cache may not be set if no-store is set.");, +			}, +		}, +	}, +, +		 *, +		 * @return whether the resource chain is enabled or {@code null} if no specified settings are, +		 * present., +	/**, +	 * Configuration for the Cache Control header., +	 */, +, +	public static class CacheControlProperties {, +, +		private Long maxAge;, +, +		private Boolean noCache;, +, +		private Boolean noStore;, +, +		private Boolean mustRevalidate;, +, +		private Boolean noTransform;, +, +		private Boolean cachePublic;, +, +		private Boolean cachePrivate;, +, +		private Boolean proxyRevalidate;, +, +		private Long staleWhileRevalidate;, +, +		private Long staleIfError;, +, +		private Long sMaxAge;, +, +		public Long getMaxAge() {, +			return this.maxAge;, +		}, +, +		public void setMaxAge(Long maxAge) {, +			this.maxAge = maxAge;, +		}, +, +		public Boolean getNoCache() {, +			return this.noCache;, +		}, +, +		public void setNoCache(Boolean noCache) {, +			this.noCache = noCache;]