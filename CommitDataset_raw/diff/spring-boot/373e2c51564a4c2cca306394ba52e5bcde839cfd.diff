[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			// This resolver acts as a fallback resolver (e.g. like a, +			// InternalResourceViewResolver) so it needs to have low precedence, +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			// This resolver acts as a fallback resolver (e.g. like a, +			// InternalResourceViewResolver) so it needs to have low precedence, +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +		@ConditionalOnMissingBean(name = "viewResolver"), +		public ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +			// This resolver acts as a fallback resolver (e.g. like a, +			// InternalResourceViewResolver) so it needs to have low precedence, +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +		@ConditionalOnMissingBean(name = "viewResolver"), +		public ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +  You can switch off the auto-configured, +  `ContentNegotiatingViewResolver` by defining a bean named ``viewResolver''.]