[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationprocessor.metadata.Metadata;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationprocessor.metadata.Metadata;, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationprocessor.metadata.Metadata;, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationprocessor.metadata.Metadata;, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/Metadata.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor.metadata;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +, +import org.assertj.core.api.Condition;, +import org.hamcrest.collection.IsMapContaining;, +, +import org.springframework.boot.configurationprocessor.metadata.ItemMetadata.ItemType;, +import org.springframework.util.ObjectUtils;, +, +/**, + * AssertJ {@link Condition} to help test {@link ConfigurationMetadata}., + *, + * @author Phillip Webb, + * @author Stephane Nicoll, + */, +public final class Metadata {, +, +	private Metadata() {, +	}, +, +	public static MetadataItemCondition withGroup(String name) {, +		return new MetadataItemCondition(ItemType.GROUP, name);, +	}, +, +	public static MetadataItemCondition withGroup(String name, Class<?> type) {, +		return new MetadataItemCondition(ItemType.GROUP, name).ofType(type);, +	}, +, +	public static MetadataItemCondition withGroup(String name, String type) {, +		return new MetadataItemCondition(ItemType.GROUP, name).ofType(type);, +	}, +, +	public static MetadataItemCondition withProperty(String name) {, +		return new MetadataItemCondition(ItemType.PROPERTY, name);, +	}, +, +	public static MetadataItemCondition withProperty(String name, Class<?> type) {, +		return new MetadataItemCondition(ItemType.PROPERTY, name).ofType(type);, +	}, +, +	public static MetadataItemCondition withProperty(String name, String type) {, +		return new MetadataItemCondition(ItemType.PROPERTY, name).ofType(type);, +	}, +, +	public static MetadataHintCondition withHint(String name) {, +		return new MetadataHintCondition(name);, +	}, +, +	public static class MetadataItemCondition extends Condition<ConfigurationMetadata> {, +, +		private final ItemType itemType;, +, +		private final String name;, +, +		private final String type;, +, +		private final Class<?> sourceType;, +, +		private final String description;, +, +		private final Object defaultValue;, +, +		private final ItemDeprecation deprecation;, +, +		public MetadataItemCondition(ItemType itemType, String name) {, +			this(itemType, name, null, null, null, null, null);]