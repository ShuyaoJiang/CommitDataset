[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +			Elements.EMPTY);, +	private Elements elements;, +	private ConfigurationPropertyName(Elements elements) {, +		this.uniformElements = new CharSequence[elements.getSize()];, +		return this.elements.getSize() == 0;, +		return (size > 0 && isIndexed(size - 1));, +		return this.elements.getType(elementIndex).isIndexed();, +		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED;, +		CharSequence element = this.elements.get(elementIndex);, +		ElementType type = this.elements.getType(elementIndex);, +		if (type.isIndexed()) {, +			return element.toString();, +		}, +			if (type != ElementType.NON_UNIFORM) {, +				return element.toString();, +			return convertToOriginalForm(element).toString();, +		if (form == Form.DASHED) {, +			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {, +				return element.toString();, +			return convertToDashedElement(element).toString();, +		CharSequence uniformElement = this.uniformElements[elementIndex];, +		if (uniformElement == null) {, +			uniformElement = (type != ElementType.UNIFORM), +					? convertToUniformElement(element) : element;, +			this.uniformElements[elementIndex] = uniformElement.toString();, +		return uniformElement.toString();, +	}, +, +	private CharSequence convertToOriginalForm(CharSequence element) {, +		return convertElement(element, false, (ch, i) -> ch == '_', +				|| ElementsParser.isValidChar(Character.toLowerCase(ch), i));, +	}, +, +	private CharSequence convertToDashedElement(CharSequence element) {, +		return convertElement(element, true, ElementsParser::isValidChar);, +	}, +, +	private CharSequence convertToUniformElement(CharSequence element) {, +		return convertElement(element, true,, +				(ch, i) -> ElementsParser.isAlphaNumeric(ch));, +	}, +, +	private CharSequence convertElement(CharSequence element, boolean lowercase,, +			ElementCharPredicate filter) {, +		StringBuilder result = new StringBuilder(element.length());, +		for (int i = 0; i < element.length(); i++) {, +			char ch = lowercase ? Character.toLowerCase(element.charAt(i)), +					: element.charAt(i);, +			if (filter.test(ch, i)) {, +				result.append(ch);, +			}, +		}, +		return result;, +		return this.elements.getSize();, +		Elements additionalElements = of(elementValue).elements;, +		return new ConfigurationPropertyName(this.elements.append(additionalElements));, +		return new ConfigurationPropertyName(this.elements.chop(size));, +		for (int i = 0; i < this.elements.getSize(); i++) {, +			if (!elementEquals(this.elements, name.elements, i)) {, +			try {, +				ElementType type1 = (i1 < l1) ? n1.elements.getType(i1) : null;, +				ElementType type2 = (i2 < l2) ? n2.elements.getType(i2) : null;, +				int result = compare(e1, type1, e2, type2);, +			catch (ArrayIndexOutOfBoundsException ex) {, +				throw new RuntimeException(ex);, +			}, +		}, +	private int compare(String e1, ElementType type1, String e2, ElementType type2) {, +		int result = Boolean.compare(type2.isIndexed(), type1.isIndexed());, +		if (type1 == ElementType.NUMERICALLY_INDEXED, +				&& type2 == ElementType.NUMERICALLY_INDEXED) {, +		if (this.elements.canShortcutWithSource(ElementType.UNIFORM), +				&& other.elements.canShortcutWithSource(ElementType.UNIFORM)) {, +			return toString().equals(other.toString());, +		}, +		for (int i = 0; i < this.elements.getSize(); i++) {, +			if (!elementEquals(this.elements, other.elements, i)) {, +	private boolean elementEquals(Elements e1, Elements e2, int i) {, +		int l1 = e1.getLength(i);, +		int l2 = e2.getLength(i);, +		boolean indexed1 = e1.getType(i).isIndexed();, +		boolean indexed2 = e2.getType(i).isIndexed();, +		int i1 = 0;, +		int i2 = 0;, +		while (i1 < l1) {, +			if (i2 >= l2) {, +			char ch1 = indexed1 ? e1.charAt(i, i1), +					: Character.toLowerCase(e1.charAt(i, i1));, +			char ch2 = indexed2 ? e2.charAt(i, i2), +					: Character.toLowerCase(e2.charAt(i, i2));, +			if (!indexed1 && !ElementsParser.isAlphaNumeric(ch1)) {, +			else if (!indexed2 && !ElementsParser.isAlphaNumeric(ch2)) {, +		while (i2 < l2) {, +			char ch2 = e2.charAt(i, i2++);, +			if (indexed2 || !ElementsParser.isAlphaNumeric(ch2)) {, +		return 0;, +			this.string = buildToString();, +	private String buildToString() {, +		if (this.elements.canShortcutWithSource(ElementType.UNIFORM,]