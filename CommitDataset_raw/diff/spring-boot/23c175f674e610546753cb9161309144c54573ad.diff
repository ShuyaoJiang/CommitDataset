[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/BuildHandler.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor;, +, +import javax.annotation.processing.RoundEnvironment;, +, +import org.springframework.boot.configurationprocessor.metadata.ConfigurationMetadata;, +, +/**, + * A {@code BuildTracker} tracks a build in which configuration processing has been, + * performed and is responsible for managing the associated state including the resulting, + * metadata., + *, + * @author Andy Wilkinson, + */, +public interface BuildHandler {, +, +	void addGroup(String name, String type, String sourceType, String sourceMethod);, +, +	void addProperty(String prefix, String name, String type, String sourceType,, +			String sourceMethod, String description, Object defaultValue,, +			boolean deprecated);, +, +	void processing(RoundEnvironment environment);, +, +	ConfigurationMetadata produceMetadata();, +, +}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/BuildHandler.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.configurationprocessor;, +, +import javax.annotation.processing.RoundEnvironment;, +, +import org.springframework.boot.configurationprocessor.metadata.ConfigurationMetadata;, +, +/**, + * A {@code BuildTracker} tracks a build in which configuration processing has been, + * performed and is responsible for managing the associated state including the resulting, + * metadata., + *, + * @author Andy Wilkinson, + */, +public interface BuildHandler {, +, +	void addGroup(String name, String type, String sourceType, String sourceMethod);, +, +	void addProperty(String prefix, String name, String type, String sourceType,, +			String sourceMethod, String description, Object defaultValue,, +			boolean deprecated);, +, +	void processing(RoundEnvironment environment);, +, +	ConfigurationMetadata produceMetadata();, +, +}, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	private MetadataStore metadataStore;, +	private BuildHandler buildHandler;, +		this.metadataStore = new MetadataStore(env);, +		this.buildHandler = createBuildHandler(env, this.metadataStore);, +	private BuildHandler createBuildHandler(ProcessingEnvironment env,, +			MetadataStore metadataStore) {, +		ConfigurationMetadata existingMetadata = metadataStore.readMetadata();, +		if (existingMetadata != null) {, +			return new IncrementalBuildHandler(env, existingMetadata);, +		else {, +			return new StandardBuildHandler();, +		this.buildHandler.processing(roundEnv);, +			writeMetaData();]