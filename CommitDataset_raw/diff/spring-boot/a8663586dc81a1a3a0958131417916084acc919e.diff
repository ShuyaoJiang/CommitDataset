[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java, +import java.lang.reflect.Field;, +import org.gradle.process.ExecResult;, +import org.gradle.process.internal.DefaultJavaExecAction;, +import org.gradle.process.internal.ExecHandle;, +import org.springframework.boot.loader.tools.SignalUtils;, +import org.springframework.util.ReflectionUtils;, +		final File outputDir = (mainSourceSet == null ? null, +				: mainSourceSet.getOutput().getResourcesDir());, +		try {, +			executeReflectively();, +		} catch (Exception e) {, +			getLogger().info("Cannot execute action reflectively");, +	}, +, +    private ExecResult executeReflectively() throws Exception {, +		Field builder = ReflectionUtils.findField(JavaExec.class, "javaExecHandleBuilder");, +		builder.setAccessible(true);, +		DefaultJavaExecAction action = (DefaultJavaExecAction) builder.get(this);, +		setMain(getMain());, +        final ExecHandle execHandle = action.build();, +        ExecResult execResult = execHandle.start().waitForFinish();, +        if (!isIgnoreExitValue()) {, +            execResult.assertNormalExitValue();, +        }, +        SignalUtils.attachSignalHandler(new Runnable() {, +			@Override, +			public void run() {, +				getLogger().info("Aborting java sub-process");, +				execHandle.abort();, +			}, +		});, +        return execResult;, +    }]