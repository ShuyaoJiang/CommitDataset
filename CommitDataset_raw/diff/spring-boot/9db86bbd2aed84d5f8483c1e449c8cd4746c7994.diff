[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +		ConfigurationBeanFactoryMetaData beanFactoryMetaData = null;, +		if (context.getBeanNamesForType(ConfigurationBeanFactoryMetaData.class).length == 1) {, +			beanFactoryMetaData = context.getBean(ConfigurationBeanFactoryMetaData.class);, +			beans.putAll(beanFactoryMetaData, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName, bean);, +	 * @param beanFactoryMetaData, +	private String extractPrefix(ApplicationContext context,, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,, +			Object bean) {, +		if (beanFactoryMetaData != null) {, +			ConfigurationProperties override = beanFactoryMetaData.findFactoryAnnotation(, +					beanName, ConfigurationProperties.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +		ConfigurationBeanFactoryMetaData beanFactoryMetaData = null;, +		if (context.getBeanNamesForType(ConfigurationBeanFactoryMetaData.class).length == 1) {, +			beanFactoryMetaData = context.getBean(ConfigurationBeanFactoryMetaData.class);, +			beans.putAll(beanFactoryMetaData, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName, bean);, +	 * @param beanFactoryMetaData, +	private String extractPrefix(ApplicationContext context,, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,, +			Object bean) {, +		if (beanFactoryMetaData != null) {, +			ConfigurationProperties override = beanFactoryMetaData.findFactoryAnnotation(, +					beanName, ConfigurationProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointMethodAnnotationsTests.java, +		public ConfigurationPropertiesReportEndpoint endpoint() {, +			return new ConfigurationPropertiesReportEndpoint();, +		public ConfigurationPropertiesReportEndpoint endpoint() {, +			return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +		ConfigurationBeanFactoryMetaData beanFactoryMetaData = null;, +		if (context.getBeanNamesForType(ConfigurationBeanFactoryMetaData.class).length == 1) {, +			beanFactoryMetaData = context.getBean(ConfigurationBeanFactoryMetaData.class);, +			beans.putAll(beanFactoryMetaData, +			String prefix = extractPrefix(context, beanFactoryMetaData, beanName, bean);, +	 * @param beanFactoryMetaData, +	private String extractPrefix(ApplicationContext context,, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,, +			Object bean) {, +		if (beanFactoryMetaData != null) {, +			ConfigurationProperties override = beanFactoryMetaData.findFactoryAnnotation(, +					beanName, ConfigurationProperties.class);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointMethodAnnotationsTests.java, +		public ConfigurationPropertiesReportEndpoint endpoint() {, +			return new ConfigurationPropertiesReportEndpoint();, +		public ConfigurationPropertiesReportEndpoint endpoint() {, +			return new ConfigurationPropertiesReportEndpoint();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointParentTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData;, +	@Test, +	public void testInvokeWithFactory() throws Exception {, +		AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext();, +		parent.register(Parent.class);, +		parent.refresh();, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.setParent(parent);, +		this.context.register(Factory.class);, +		this.context.refresh();, +		ConfigurationPropertiesReportEndpoint endpoint = this.context, +				.getBean(ConfigurationPropertiesReportEndpoint.class);, +		Map<String, Object> result = endpoint.invoke();, +		assertTrue(result.containsKey("parent"));, +		assertEquals(3, result.size()); // the endpoint, the test props and the parent, +		// System.err.println(result);, +	}, +, +		public TestProperties someProperties() {, +	@Configuration, +	@EnableConfigurationProperties, +	public static class Factory {, +, +		@Autowired, +		private ConfigurationBeanFactoryMetaData beanFactoryMetaData;, +, +		@Bean, +		public ConfigurationPropertiesReportEndpoint endpoint() {, +			return new ConfigurationPropertiesReportEndpoint();, +		}, +, +		@Bean, +		@ConfigurationProperties(prefix = "other"), +		public OtherProperties otherProperties() {, +			return new OtherProperties();, +		}, +, +	}, +, +	public static class OtherProperties {, +	}]