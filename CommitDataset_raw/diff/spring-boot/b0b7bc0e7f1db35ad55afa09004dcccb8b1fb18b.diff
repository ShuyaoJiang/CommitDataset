[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +	@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}"), +	@ConditionalOnMissingBean(WebSecurityConfiguration.class), +	@EnableWebSecurity, +	protected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +	@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}"), +	@ConditionalOnMissingBean(WebSecurityConfiguration.class), +	@EnableWebSecurity, +	protected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(manager,, +				"parent");, +		this.context.register(TestConfiguration.class, SecurityAutoConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +	@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}"), +	@ConditionalOnMissingBean(WebSecurityConfiguration.class), +	@EnableWebSecurity, +	protected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(manager,, +				"parent");, +		this.context.register(TestConfiguration.class, SecurityAutoConfiguration.class,, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +	@EnableAutoConfiguration(exclude = { JolokiaAutoConfiguration.class,, +			EndpointMBeanExportAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +	@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}"), +	@ConditionalOnMissingBean(WebSecurityConfiguration.class), +	@EnableWebSecurity, +	protected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(manager,, +				"parent");, +		this.context.register(TestConfiguration.class, SecurityAutoConfiguration.class,, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +	@EnableAutoConfiguration(exclude = { JolokiaAutoConfiguration.class,, +			EndpointMBeanExportAutoConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +public class AuthenticationManagerConfiguration extends, +		GlobalAuthenticationConfigurerAdapter {, +	private static Log logger = LogFactory, +			.getLog(AuthenticationManagerConfiguration.class);, +	@Override, +	 * We must add {@link BootDefaultingAuthenticationConfigurerAdapter} in the init phase, +	 * of the last {@link GlobalAuthenticationConfigurerAdapter}. The reason is that the, +	 * typical flow is something like:, +	 * {@link AuthenticationManagerConfiguration#init(AuthenticationManagerBuilder)} adds, +	 * BootDefaultingAuthenticationConfigurerAdapter so it is after the, +	 * <li>We then can default an {@link AuthenticationProvider} if necessary. Note we can, +	 * only invoke the, +	 * method since all other methods add a {@link SecurityConfigurer} which is not, +	 * allowed in the configure stage. It is not allowed because we guarantee all init, +	 * methods are invoked before configure, which cannot be guaranteed at this point.</li>, +	private class BootDefaultingAuthenticationConfigurerAdapter extends, +			GlobalAuthenticationConfigurerAdapter {, +		public void configure(AuthenticationManagerBuilder auth) throws Exception {, +			AuthenticationManagerBuilder defaultAuth = new AuthenticationManagerBuilder(, +					AuthenticationManagerConfiguration.this.objectPostProcessor);, +			AuthenticationManager parent = defaultAuth.inMemoryAuthentication(), +					.withUser(user.getName()).password(user.getPassword()), +					.roles(roles.toArray(new String[roles.size()])).and().and().build();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +	@ConditionalOnExpression("${management.security.enabled:true} && !${security.basic.enabled:true}"), +	@ConditionalOnMissingBean(WebSecurityConfiguration.class), +	@EnableWebSecurity, +	protected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {, +	}, +, +	@Configuration, +	@ConditionalOnWebApplication, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(manager,, +				"parent");]