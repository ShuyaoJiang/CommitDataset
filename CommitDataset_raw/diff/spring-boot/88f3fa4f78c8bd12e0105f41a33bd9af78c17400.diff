[+++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:sc-spring-boot-test: {github-code}/spring-boot-test/src/main/java/org/springframework/boot/test, +:sc-spring-boot-test-autoconfigure: {github-code}/spring-boot-test/src/main/java/org/springframework/boot/test/autoconfigure, +:dc-spring-boot-test: {dc-root}/spring-boot-test/src/main/java/org/springframework/boot/test, +:dc-spring-boot-test-autoconfigure: {dc-root}/spring-boot-test/src/main/java/org/springframework/boot/test/autoconfigure, +++ b/spring-boot-docs/src/main/asciidoc/index.adoc, +:sc-spring-boot-test: {github-code}/spring-boot-test/src/main/java/org/springframework/boot/test, +:sc-spring-boot-test-autoconfigure: {github-code}/spring-boot-test/src/main/java/org/springframework/boot/test/autoconfigure, +:dc-spring-boot-test: {dc-root}/spring-boot-test/src/main/java/org/springframework/boot/test, +:dc-spring-boot-test-autoconfigure: {dc-root}/spring-boot-test/src/main/java/org/springframework/boot/test/autoconfigure, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring Boot provides a number of utilities and annotations to help when testing your, +application. Test support is provided by two modules; `spring-boot-test` contains core, +items, and `spring-boot-test-autoconfigure` supports auto-configuration for tests., +, +Most developers will just use the the `spring-boot-starter-test` '`Starter POM`' which, +imports both Spring Boot test modules as well has JUnit, AssertJ, Hamcrest and a number, +of other useful libraries., +* http://junit.org[JUnit] -- The de-facto standard for unit testing Java applications., +* {spring-reference}/#integration-testing.html[Spring Test] & Spring Boot Test -- utilties and integration test support for Spring Boot, +  applications., +* http://joel-costigliola.github.io/assertj/[AssertJ] - A fluent assertion library., +* http://hamcrest.org/JavaHamcrest/[Hamcrest] -- A library of matcher objects (also known, +  as constraints or predicates)., +* http://mockito.org/[Mockito] -- A Java mocking framework., +* https://github.com/skyscreamer/JSONassert[JSONassert] -- An assertion library for JSON., +* https://github.com/jayway/JsonPath[JsonPath] -- XPath for JSON., +, +A Spring Boot application is just a Spring `ApplicationContext`, so nothing very special, +Spring Boot provides three annotations which can be used as an alternative the standard, +`spring-test` `@ContextConfiguration` annotation when you need Spring Boot features. All, +three work by creating the `ApplicationContext` used in your tests via, +`SpringApplication`., +The specific annotation that you choose will depend on the type of test that you are writing:, +, +* `@SpringApplicationTest` -- Loads an `ApplicationContext` or `WebApplicationContext`, +  (depending on your classpath) using `SpringApplication` and provides a mock servlet environment. Embedded servlet containers are not started, +  when using this annotation., +* `@WebIntegrationTest` -- Loads an `EmbeddedWebApplicationContext` using, +  `SpringApplication` and provides a real servlet environment. Embedded servlet containers, +  are started and listening on a defined or random port., +* `@IntegrationTest` -- Loads an `ApplicationContext` using `SpringApplication` but does, +  not provides _any_ servlet environment (mock or otherwise)., +, +NOTE: In addition to `@SpringApplicationTest`, `@WebIntegrationTest` and, +`@IntegrationTest` a number of other annotations are also provided for testing more, +specific slices of an application. See below for details., +, +TIP: Don't forget to also add `@RunWith(SpringRunner.class)` to your test, otherwise, +the annotations will be ignored., +, +, +, +[[boot-features-testing-spring-boot-applications-detecting-config]], +==== Detecting configuration, +If you're familiar with the Spring Test Framework, you may be used to using, +`@ContextConfiguration(classes=...)` in order to specify which Spring `@Configuration`, +to load. Alternatively, you might have often used nested `@Configuration` classes within, +your test., +, +When testing Spring Boot applications this is often not required., +Spring Boot's `@*Test` annotations will search for your primary configuration automatically, +whenever you don't explicitly defined one., +, +The search algorithm works up from the package that contains the test until it finds a, +`@SpringBootApplication` or `@SpringBootConfiguration` annotated class. As long as you've, +<<using-boot-structuring-your-code, structure your code>> in a sensible way your main, +configuration is usually found., +, +NOTE: Spring's test framework will cache application contexts between tests. Therefore, as, +long as your tests share the same configuration (no matter how it's discovered), the, +potentially time consuming process of loading the context will only happen once., +, +, +, +[[boot-features-testing-spring-boot-applications-excluding-config]], +==== Excluding test configuration, +If your application uses component scanning, for example if you use, +`@SpringBootApplication` or `@ComponentScan`, you may find components or configurations, +created only for specific tests accidentally get picked up everywhere., +, +To help prevent this, Spring Boot provides `@TestComponent` and `@TestConfiguration`, +annotations that can be used on classes in `src/test/java` to indicate that they should, +not be picked up by scanning., +, +NOTE: `@TestComponent` and `@TestConfiguration` are only needed on top level classes. If, +you define `@Configuration` or `@Component` as inner-classes within a test, they will be, +automatically filtered., +, +NOTE: If you directly use `@ComponentScan` (i.e. not via `@SpringBootApplication`) you, +will need to register the `TypeExcludeFilter` with it. See, +{dc-spring-boot}/context/TypeExcludeFilter.{dc-ext}[the Javadoc] for details., +, +, +, +[[boot-features-testing-spring-boot-applications-using-springapplicationtest]], +==== Using @SpringApplicationTest, +Use the `@SpringApplicationTest` annotation to load a `ApplicationContext` or, +`WebApplicationContext` via `SpringApplication` and configure it with a mock, +servlet environment. Embedded servlet containers will not be started when using]