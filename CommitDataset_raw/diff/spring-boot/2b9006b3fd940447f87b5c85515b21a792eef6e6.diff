[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +	@Override, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +	@Override, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +	@Override, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +	@Override, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +	@Override, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +	@Override, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContextTests.java, + * Copyright 2012-2018 the original author or authors., +import static org.mockito.Mockito.mock;, +	public void multipleRegistersAndRefresh() {, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext();, +		this.context.register(WebServerConfiguration.class);, +		this.context.register(HttpHandlerConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBeansOfType(WebServerConfiguration.class)).hasSize(1);, +		assertThat(this.context.getBeansOfType(HttpHandlerConfiguration.class)), +				.hasSize(1);, +	}, +, +	@Test, +	@Configuration, +	public static class HttpHandlerConfiguration {, +, +		@Bean, +		public HttpHandler httpHandler() {, +			return mock(HttpHandler.class);, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +	@Override, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +	@Override, +		if (!this.annotatedClasses.isEmpty()) {, +			this.reader.register(this.annotatedClasses, +					.toArray(new Class<?>[this.annotatedClasses.size()]));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java, +import java.util.Arrays;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +	private final Set<Class<?>> annotatedClasses = new LinkedHashSet<>();, +		this.annotatedClasses.addAll(Arrays.asList(annotatedClasses));, +		if (!this.annotatedClasses.isEmpty()) {]