[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.atomikos</groupId>, +			<artifactId>transactions-jms</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>com.atomikos</groupId>, +			<artifactId>transactions-jms</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jta/JtaAutoConfigurationTests.java, + * Copyright 2012-2015 the original author or authors., +import javax.jms.ConnectionFactory;, +import javax.jms.TemporaryQueue;, +import javax.jms.XAConnection;, +import javax.jms.XAConnectionFactory;, +import javax.jms.XASession;, +import javax.sql.DataSource;, +import javax.sql.XADataSource;, +import javax.transaction.xa.XAResource;, +import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;, +import org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBean;, +import org.springframework.boot.jta.bitronix.PoolingDataSourceBean;, +import com.atomikos.jms.AtomikosConnectionFactoryBean;, +import static org.mockito.Mockito.when;, +	@Test, +	public void atomikosConnectionFactoryPoolConfiguration() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.atomikos.connectionfactory.minPoolSize:5",, +				"spring.jta.atomikos.connectionfactory.maxPoolSize:10");, +		this.context.register(JtaPropertiesConfiguration.class,, +				AtomikosJtaConfiguration.class, PoolConfiguration.class);, +		this.context.refresh();, +		AtomikosConnectionFactoryBean connectionFactory = this.context, +				.getBean(AtomikosConnectionFactoryBean.class);, +		assertThat(connectionFactory.getMinPoolSize(), is(equalTo(5)));, +		assertThat(connectionFactory.getMaxPoolSize(), is(equalTo(10)));, +	}, +, +	@Test, +	public void bitronixConnectionFactoryPoolConfiguration() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.bitronix.connectionfactory.minPoolSize:5",, +				"spring.jta.bitronix.connectionfactory.maxPoolSize:10");, +		this.context.register(JtaPropertiesConfiguration.class,, +				BitronixJtaConfiguration.class, PoolConfiguration.class);, +		this.context.refresh();, +		PoolingConnectionFactoryBean connectionFactory = this.context, +				.getBean(PoolingConnectionFactoryBean.class);, +		assertThat(connectionFactory.getMinPoolSize(), is(equalTo(5)));, +		assertThat(connectionFactory.getMaxPoolSize(), is(equalTo(10)));, +	}, +, +	@Test, +	public void atomikosDataSourcePoolConfiguration() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.atomikos.datasource.minPoolSize:5",, +				"spring.jta.atomikos.datasource.maxPoolSize:10");, +		this.context.register(JtaPropertiesConfiguration.class,, +				AtomikosJtaConfiguration.class, PoolConfiguration.class);, +		this.context.refresh();, +		AtomikosDataSourceBean dataSource = this.context, +				.getBean(AtomikosDataSourceBean.class);, +		assertThat(dataSource.getMinPoolSize(), is(equalTo(5)));, +		assertThat(dataSource.getMaxPoolSize(), is(equalTo(10)));, +	}, +, +	@Test, +	public void bitronixDataSourcePoolConfiguration() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jta.bitronix.datasource.minPoolSize:5",, +				"spring.jta.bitronix.datasource.maxPoolSize:10");, +		this.context.register(JtaPropertiesConfiguration.class,, +				BitronixJtaConfiguration.class, PoolConfiguration.class);, +		this.context.refresh();, +		PoolingDataSourceBean dataSource = this.context, +				.getBean(PoolingDataSourceBean.class);, +		assertThat(dataSource.getMinPoolSize(), is(equalTo(5)));, +		assertThat(dataSource.getMaxPoolSize(), is(equalTo(10)));, +	}, +, +	@Configuration, +	public static class PoolConfiguration {, +, +		@Bean, +		public ConnectionFactory pooledConnectionFactory(, +				XAConnectionFactoryWrapper wrapper) throws Exception {, +			XAConnectionFactory connectionFactory = mock(XAConnectionFactory.class);, +			XAConnection connection = mock(XAConnection.class);, +			XASession session = mock(XASession.class);, +			TemporaryQueue queue = mock(TemporaryQueue.class);, +			XAResource resource = mock(XAResource.class);, +			when(connectionFactory.createXAConnection()).thenReturn(connection);, +			when(connection.createXASession()).thenReturn(session);]