[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +		public void init() {, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +		public void init() {, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +	public void initialize() {, +		try {, +		catch (Exception ex) {, +			throw new IllegalStateException("Unable to initialize Spring Batch", ex);, +		}, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +		public void init() {, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +	public void initialize() {, +		try {, +		catch (Exception ex) {, +			throw new IllegalStateException("Unable to initialize Spring Batch", ex);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.jdbc.support.MetaDataAccessException;, +	protected void initialize() {, +			String platform = getDatabaseType();, +	private String getDatabaseType() {, +		try {, +			return DatabaseType.fromMetaData(this.dataSource).toString().toLowerCase();, +		}, +		catch (MetaDataAccessException ex) {, +			throw new IllegalStateException("Unable to detect database type", ex);, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +		public void init() {, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +	public void initialize() {, +		try {, +		catch (Exception ex) {, +			throw new IllegalStateException("Unable to initialize Spring Batch", ex);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.jdbc.support.MetaDataAccessException;, +	protected void initialize() {, +			String platform = getDatabaseType();, +	private String getDatabaseType() {, +		try {, +			return DatabaseType.fromMetaData(this.dataSource).toString().toLowerCase();, +		}, +		catch (MetaDataAccessException ex) {, +			throw new IllegalStateException("Unable to detect database type", ex);, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import java.io.IOException;, +	protected void initialize() {, +		List<Resource> resources = getSchemaResources(schema);, +	private List<Resource> getSchemaResources(String schema) {, +		List<Resource> resources = new ArrayList<Resource>();, +		for (String schemaLocation : StringUtils.commaDelimitedListToStringArray(schema)) {, +			try {, +				resources.addAll(Arrays.asList(this.applicationContext, +						.getResources(schemaLocation)));, +			}, +			catch (IOException ex) {, +				throw new IllegalStateException("Unable to load resource from ", +						+ schemaLocation, ex);, +			}, +		}, +		return resources;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +		public void init() {, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +	public void initialize() {, +		try {, +		catch (Exception ex) {, +			throw new IllegalStateException("Unable to initialize Spring Batch", ex);, +		}, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, +import org.springframework.jdbc.support.MetaDataAccessException;, +	protected void initialize() {, +			String platform = getDatabaseType();, +	private String getDatabaseType() {, +		try {, +			return DatabaseType.fromMetaData(this.dataSource).toString().toLowerCase();, +		}, +		catch (MetaDataAccessException ex) {, +			throw new IllegalStateException("Unable to detect database type", ex);, +		}, +	}]