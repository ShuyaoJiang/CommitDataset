[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +import org.apache.tomcat.websocket.WsWebSocketContainer;, +				new WebSocketTransport(, +						new StandardWebSocketClient(new WsWebSocketContainer())),, +		if (!latch.await(30000, TimeUnit.SECONDS)) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +import org.apache.tomcat.websocket.WsWebSocketContainer;, +				new WebSocketTransport(, +						new StandardWebSocketClient(new WsWebSocketContainer())),, +		if (!latch.await(30000, TimeUnit.SECONDS)) {, +++ b/spring-boot-devtools/pom.xml, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +import org.apache.tomcat.websocket.WsWebSocketContainer;, +				new WebSocketTransport(, +						new StandardWebSocketClient(new WsWebSocketContainer())),, +		if (!latch.await(30000, TimeUnit.SECONDS)) {, +++ b/spring-boot-devtools/pom.xml, +			<groupId>org.springframework</groupId>, +			<artifactId>spring-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/LiveReloadServerTests.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import org.apache.tomcat.websocket.WsWebSocketContainer;, +import org.junit.Ignore;, +import org.springframework.web.socket.CloseStatus;, +import org.springframework.web.socket.PingMessage;, +import org.springframework.web.socket.PongMessage;, +import org.springframework.web.socket.TextMessage;, +import org.springframework.web.socket.WebSocketMessage;, +import org.springframework.web.socket.WebSocketSession;, +import org.springframework.web.socket.client.WebSocketClient;, +import org.springframework.web.socket.client.standard.StandardWebSocketClient;, +import org.springframework.web.socket.handler.TextWebSocketHandler;, +	@Ignore, +		LiveReloadWebSocketHandler handler = connect();, +		handler.setExpectedMessageCount(1);, +		handler.awaitMessages();, +		assertThat(handler.getMessages().get(0)), +		assertThat(handler.getMessages().get(1)).contains("command\":\"reload\"");, +		LiveReloadWebSocketHandler handler = connect();, +		handler.sendMessage(new PingMessage());, +		assertThat(handler.getPongCount()).isEqualTo(1);, +		LiveReloadWebSocketHandler handler = connect();, +		handler.close();, +		LiveReloadWebSocketHandler handler = connect();, +		assertThat(handler.getCloseStatus().getCode()).isEqualTo(1006);, +	private LiveReloadWebSocketHandler connect() throws Exception {, +		WebSocketClient client = new StandardWebSocketClient(new WsWebSocketContainer());, +		LiveReloadWebSocketHandler handler = new LiveReloadWebSocketHandler();, +		client.doHandshake(handler, "ws://localhost:" + this.port + "/livereload");, +		handler.awaitHello();, +		return handler;, +					ex.printStackTrace();, +	private static class LiveReloadWebSocketHandler extends TextWebSocketHandler {, +, +		private WebSocketSession session;, +, +		private final CountDownLatch helloLatch = new CountDownLatch(2);, +, +		private CountDownLatch messagesLatch;, +, +		private final List<String> messages = new ArrayList<String>();, +, +		private int pongCount;, +, +		private CloseStatus closeStatus;, +, +		@Override, +		public void afterConnectionEstablished(WebSocketSession session), +				throws Exception {, +			this.session = session;, +			session.sendMessage(new TextMessage(HANDSHAKE));, +			this.helloLatch.countDown();, +		}, +, +		public void awaitHello() throws InterruptedException {, +			this.helloLatch.await(1, TimeUnit.MINUTES);, +			Thread.sleep(200);, +		}, +, +		public void setExpectedMessageCount(int count) {, +			this.messagesLatch = new CountDownLatch(count);]