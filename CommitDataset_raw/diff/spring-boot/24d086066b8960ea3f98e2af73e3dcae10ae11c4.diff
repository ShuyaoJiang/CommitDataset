[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/AbstractApplicationContextTester.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.context;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.function.Supplier;, +, +import org.springframework.boot.context.annotation.Configurations;, +import org.springframework.boot.context.annotation.UserConfigurations;, +import org.springframework.boot.test.util.TestPropertyValues;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigRegistry;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * Tester utility design to manage the lifecycle of an {@link ApplicationContext} and, + * provide AssertJ style assertions. The test is best used as a field of a test class,, + * describing the shared configuration required for the test:, + *, + * <pre class="code">, + * public class MyContextTests {, + *     private final ApplicationContextTester context = new ApplicationContextTester(), + *             .withPropertyValues("spring.foo=bar"), + *             .withUserConfiguration(MyConfiguration.class);, + * }</pre>, + *, + * <p>, + * The initialization above makes sure to register {@code MyConfiguration} for all tests, + * and set the {@code spring.foo} property to {@code bar} unless specified otherwise., + * <p>, + * Based on the configuration above, a specific test can simulate what will happen when, + * the context runs, perhaps with overridden property values:, + *, + * <pre class="code">, + * &#064;Test, + * public someTest() {, + *     this.contex.withPropertyValues("spring.foo=biz").run((loaded) -&gt; {, + *         assertThat(loaded).containsSingleBean(MyBean.class);, + *         // other assertions, + *     });, + * }</pre>, + * <p>, + * The test above has changed the {@code spring.foo} property to {@code biz} and is, + * asserting that the context contains a single {@code MyBean} bean. The, + * {@link #run(ContextConsumer) run} method takes a {@link ContextConsumer} that can apply, + * assertions to the context. Upon completion, the context is automatically closed., + * <p>, + * If the application context fails to start the {@code #run(ContextConsumer)} method is, + * called with a "failed" application context. Calls to the context will throw an, + * {@link IllegalStateException} and assertions that expect a running context will fail., + * The {@link ApplicationContextAssert#getFailure() getFailure()} assertion can be used if, + * further checks are required on the cause of the failure: <pre class="code">, + * &#064;Test, + * public someTest() {, + *     this.contex.withPropertyValues("spring.foo=fails").run((loaded) -&gt; {, + *         assertThat(loaded).getFailure().hasCauseInstanceOf(BadPropertyExcepton.class);, + *         // other assertions, + *     });, + * }</pre>, + * <p>, + *, + * @param <SELF> The "self" type for this tester, + * @param <C> The context type, + * @param <A> The application context assertion provider, + * @author Stephane Nicoll, + * @author Andy Wilkinson, + * @author Phillip Webb, + * @since 2.0.0, + * @see ApplicationContextTester, + * @see WebApplicationContextTester, + * @see ReactiveWebApplicationContextTester, + * @see ApplicationContextAssert, + */, +abstract class AbstractApplicationContextTester<SELF extends AbstractApplicationContextTester<SELF, C, A>, C extends ConfigurableApplicationContext, A extends AssertProviderApplicationContext<C>> {, +, +	private final Supplier<C> contextFactory;, +, +	private final TestPropertyValues environmentProperties;]