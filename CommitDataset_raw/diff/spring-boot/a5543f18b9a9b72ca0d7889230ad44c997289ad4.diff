[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/EntityManagerFactoryBuilder.java, +import java.util.HashMap;, +	private EntityManagerFactoryBeanCallback callback;, +, +	 * An optional callback for new entity manager factory beans., +	 * , +	 * @author Dave Syer, +	 */, +	public void setCallback(EntityManagerFactoryBeanCallback callback) {, +		this.callback = callback;, +	}, +, +	/**, +		private Map<String, Object> properties = new HashMap<String, Object>();, +, +			this.properties.putAll(properties);, +			entityManagerFactoryBean.getJpaPropertyMap().putAll(this.properties);, +			if (EntityManagerFactoryBuilder.this.callback != null) {, +				EntityManagerFactoryBuilder.this.callback, +						.execute(entityManagerFactoryBean);, +			}, +	/**, +	 * A callback for new entity manager factory beans created by a Builder., +	 * , +	 * @author Dave Syer, +	 */, +	public static interface EntityManagerFactoryBeanCallback {, +, +		void execute(LocalContainerEntityManagerFactoryBean factory);, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/EntityManagerFactoryBuilder.java, +import java.util.HashMap;, +	private EntityManagerFactoryBeanCallback callback;, +, +	 * An optional callback for new entity manager factory beans., +	 * , +	 * @author Dave Syer, +	 */, +	public void setCallback(EntityManagerFactoryBeanCallback callback) {, +		this.callback = callback;, +	}, +, +	/**, +		private Map<String, Object> properties = new HashMap<String, Object>();, +, +			this.properties.putAll(properties);, +			entityManagerFactoryBean.getJpaPropertyMap().putAll(this.properties);, +			if (EntityManagerFactoryBuilder.this.callback != null) {, +				EntityManagerFactoryBuilder.this.callback, +						.execute(entityManagerFactoryBean);, +			}, +	/**, +	 * A callback for new entity manager factory beans created by a Builder., +	 * , +	 * @author Dave Syer, +	 */, +	public static interface EntityManagerFactoryBeanCallback {, +, +		void execute(LocalContainerEntityManagerFactoryBean factory);, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.orm.jpa.EntityManagerFactoryBuilder.EntityManagerFactoryBeanCallback;, +import org.springframework.context.ConfigurableApplicationContext;, +public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration {, +	private ConfigurableApplicationContext applicationContext;, +	protected EntityManagerFactoryBeanCallback getVendorCallback() {, +		final Map<String, Object> map = this.properties, +				.getHibernateProperties(this.dataSource);, +		return new EntityManagerFactoryBeanCallback() {, +			@Override, +			public void execute(, +					LocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {, +				HibernateJpaAutoConfiguration.this.applicationContext, +						.addApplicationListener(new DeferredSchemaAction(, +								entityManagerFactoryBean, map));, +			}, +		};, +	}, +, +	private static class DeferredSchemaAction implements, +			ApplicationListener<ContextRefreshedEvent> {, +, +		private Map<String, Object> map;, +		private LocalContainerEntityManagerFactoryBean factory;, +, +		public DeferredSchemaAction(LocalContainerEntityManagerFactoryBean factory,, +				Map<String, Object> map) {, +			this.factory = factory;, +			this.map = map;, +		}, +, +		@Override, +			String ddlAuto = (String) this.map.get("hibernate.hbm2ddl.auto");, +			if (ddlAuto == null || "none".equals(ddlAuto)) {, +			Bootstrap.getEntityManagerFactoryBuilder(, +					this.factory.getPersistenceUnitInfo(), this.map).generateSchema();]