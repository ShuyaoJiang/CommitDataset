[+++ b/docs/howto.md, +Generally you can follow the advice [here](#discover.options) about, +`@ConfigurationProperties` (`ServerProperties` is the main one here),, +but also look at `EmbeddedServletContainerCustomizer` and various, +Tomcat specific `*Customizers` that you can add in one of those. The, +Tomcat APIs are quite rich so once you have access to the, +`TomcatEmbeddedServletContainerFactory` you can modify it in a number, +of ways. Or the nuclear option is to add your own, +`TomcatEmbeddedServletContainerFactory`., +, +Generally you can follow the advice [here](#discover.options) about, +`@ConfigurationProperties` (`ServerProperties` is the main one here),, +but also look at `EmbeddedServletContainerCustomizer`. The Jetty APIs, +are quite rich so once you have access to the, +`JettyEmbeddedServletContainerFactory` you can modify it in a number, +of ways. Or the nuclear option is to add your own, +`JettyEmbeddedServletContainerFactory`., +, +## Reload Static Content (E.g. Thymeleaf Templates) Without Restarting the Container, +, +If you are using Thymeleaf, then set, +`spring.thymeleaf.cache=false`. See `ThymeleafAutoConfiguration` for, +other template customization options., +, +# Reload Java Classes Without Restarting the Container, +, +Modern IDEs (Eclipse, IDEA etc.) all support hot swapping of bytecode,, +so if you make a change that doesn't affect class or method signatures, +it should reload cleanly with no side effects., +, +[Spring Loaded](https://github.com/spring-projects/spring-loaded) goes, +a little further in that it can reload class definitions with changes, +in the method signatures. With some customization it can force an, +`ApplicationContext` to refresh itself (but there is no general, +mechanism to ensure that would be safe for a running application, +anyway, so it would only ever be a development time trick probably)., +, +<span id="discover.options"/>, +++ b/docs/howto.md, +Generally you can follow the advice [here](#discover.options) about, +`@ConfigurationProperties` (`ServerProperties` is the main one here),, +but also look at `EmbeddedServletContainerCustomizer` and various, +Tomcat specific `*Customizers` that you can add in one of those. The, +Tomcat APIs are quite rich so once you have access to the, +`TomcatEmbeddedServletContainerFactory` you can modify it in a number, +of ways. Or the nuclear option is to add your own, +`TomcatEmbeddedServletContainerFactory`., +, +Generally you can follow the advice [here](#discover.options) about, +`@ConfigurationProperties` (`ServerProperties` is the main one here),, +but also look at `EmbeddedServletContainerCustomizer`. The Jetty APIs, +are quite rich so once you have access to the, +`JettyEmbeddedServletContainerFactory` you can modify it in a number, +of ways. Or the nuclear option is to add your own, +`JettyEmbeddedServletContainerFactory`., +, +## Reload Static Content (E.g. Thymeleaf Templates) Without Restarting the Container, +, +If you are using Thymeleaf, then set, +`spring.thymeleaf.cache=false`. See `ThymeleafAutoConfiguration` for, +other template customization options., +, +# Reload Java Classes Without Restarting the Container, +, +Modern IDEs (Eclipse, IDEA etc.) all support hot swapping of bytecode,, +so if you make a change that doesn't affect class or method signatures, +it should reload cleanly with no side effects., +, +[Spring Loaded](https://github.com/spring-projects/spring-loaded) goes, +a little further in that it can reload class definitions with changes, +in the method signatures. With some customization it can force an, +`ApplicationContext` to refresh itself (but there is no general, +mechanism to ensure that would be safe for a running application, +anyway, so it would only ever be a development time trick probably)., +, +<span id="discover.options"/>, +++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/resources/application.properties, +spring.thymeleaf.cache: false]