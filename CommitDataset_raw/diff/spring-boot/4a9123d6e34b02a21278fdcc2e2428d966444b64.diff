[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration;, +, +			CacheManagerCustomizers customizerInvoker,, +			ObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration) {, +		this.redisCacheConfiguration = redisCacheConfiguration.getIfAvailable();, +				.builder(redisConnectionFactory).cacheDefaults(determineConfiguration());, +	private org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration() {, +		if (this.redisCacheConfiguration != null) {, +			return this.redisCacheConfiguration;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration;, +, +			CacheManagerCustomizers customizerInvoker,, +			ObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration) {, +		this.redisCacheConfiguration = redisCacheConfiguration.getIfAvailable();, +				.builder(redisConnectionFactory).cacheDefaults(determineConfiguration());, +	private org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration() {, +		if (this.redisCacheConfiguration != null) {, +			return this.redisCacheConfiguration;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +		this.contextRunner.withUserConfiguration(RedisConfiguration.class), +	public void redisCacheWithRedisCacheConfiguration() {, +		this.contextRunner, +				.withUserConfiguration(RedisWithCacheConfigurationConfiguration.class), +				.withPropertyValues("spring.cache.type=redis",, +						"spring.cache.redis.time-to-live=15000",, +						"spring.cache.redis.keyPrefix=foo"), +				.run((context) -> {, +					RedisCacheManager cacheManager = getCacheManager(context,, +							RedisCacheManager.class);, +					assertThat(cacheManager.getCacheNames()).isEmpty();, +					org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration = (org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +							cacheManager).getPropertyValue("defaultCacheConfig");, +					assertThat(redisCacheConfiguration.getTtl()), +							.isEqualTo(java.time.Duration.ofSeconds(30));, +					assertThat(redisCacheConfiguration.getKeyPrefix()).contains("bar");, +				});, +	}, +, +	@Test, +				.withUserConfiguration(RedisWithCustomizersConfiguration.class), +		this.contextRunner.withUserConfiguration(RedisConfiguration.class), +	static class RedisConfiguration {, +	@Import(RedisConfiguration.class), +	static class RedisWithCacheConfigurationConfiguration {, +, +		@Bean, +		public org.springframework.data.redis.cache.RedisCacheConfiguration customRedisCacheConfiguration() {, +			return org.springframework.data.redis.cache.RedisCacheConfiguration, +					.defaultCacheConfig(), +					.entryTtl(java.time.Duration.ofSeconds(30)), +					.prefixKeysWith("bar");, +		}, +, +	}, +, +	@Configuration, +	@Import({ RedisConfiguration.class, CacheManagerCustomizersConfiguration.class }), +	static class RedisWithCustomizersConfiguration {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.beans.factory.ObjectProvider;, +	private final org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration;, +, +			CacheManagerCustomizers customizerInvoker,, +			ObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration) {, +		this.redisCacheConfiguration = redisCacheConfiguration.getIfAvailable();, +				.builder(redisConnectionFactory).cacheDefaults(determineConfiguration());, +	private org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration() {, +		if (this.redisCacheConfiguration != null) {, +			return this.redisCacheConfiguration;, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +		this.contextRunner.withUserConfiguration(RedisConfiguration.class), +	public void redisCacheWithRedisCacheConfiguration() {, +		this.contextRunner, +				.withUserConfiguration(RedisWithCacheConfigurationConfiguration.class), +				.withPropertyValues("spring.cache.type=redis",, +						"spring.cache.redis.time-to-live=15000",, +						"spring.cache.redis.keyPrefix=foo"), +				.run((context) -> {, +					RedisCacheManager cacheManager = getCacheManager(context,, +							RedisCacheManager.class);, +					assertThat(cacheManager.getCacheNames()).isEmpty();, +					org.springframework.data.redis.cache.RedisCacheConfiguration redisCacheConfiguration = (org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +							cacheManager).getPropertyValue("defaultCacheConfig");, +					assertThat(redisCacheConfiguration.getTtl()), +							.isEqualTo(java.time.Duration.ofSeconds(30));, +					assertThat(redisCacheConfiguration.getKeyPrefix()).contains("bar");, +				});, +	}]