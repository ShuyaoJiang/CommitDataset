[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/EhCache2CacheMeterBinderProvider.java, +		return new EhCache2Metrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/EhCache2CacheMeterBinderProvider.java, +		return new EhCache2Metrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/HazelcastCacheMeterBinderProvider.java, +				tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/EhCache2CacheMeterBinderProvider.java, +		return new EhCache2Metrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/HazelcastCacheMeterBinderProvider.java, +				tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/JCacheCacheMeterBinderProvider.java, +		return new JCacheMetrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/EhCache2CacheMeterBinderProvider.java, +		return new EhCache2Metrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/HazelcastCacheMeterBinderProvider.java, +				tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/JCacheCacheMeterBinderProvider.java, +		return new JCacheMetrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrarTests.java, +		assertThat(this.meterRegistry.get("cache.gets").tags("name", "test").meter()), +		assertThat(this.meterRegistry.find("cache.gets").tags("name", "test").meter()), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/EhCache2CacheMeterBinderProvider.java, +		return new EhCache2Metrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/HazelcastCacheMeterBinderProvider.java, +				tags);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/JCacheCacheMeterBinderProvider.java, +		return new JCacheMetrics(cache.getNativeCache(), tags);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrarTests.java, +		assertThat(this.meterRegistry.get("cache.gets").tags("name", "test").meter()), +		assertThat(this.meterRegistry.find("cache.gets").tags("name", "test").meter()), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/cache/HazelcastCacheMeterBinderProviderTests.java, +import org.mockito.Mockito;, +	@SuppressWarnings("unchecked"), +		IMap<Object, Object> nativeCache = Mockito.mock(IMap.class);, +, +		// It is not possible to create a real Hazelcast cache with a null name,, +		// so Micrometer's Hazelcast binder uses the name from the cache for its tag value., +		Mockito.when(nativeCache.getName()).thenReturn("test");, +, +		HazelcastCache cache = new HazelcastCache(nativeCache);, +]