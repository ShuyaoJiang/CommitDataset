[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Artsiom Yudovin, +		 * Maximum number of idle processors that will be retained in the cache and reused, +		 * with a subsequent request., +		 */, +		private int processorCache = 200;, +, +		/**, +		public int getProcessorCache() {, +			return this.processorCache;, +		}, +, +		public void setProcessorCache(int processorCache) {, +			this.processorCache = processorCache;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Artsiom Yudovin, +		 * Maximum number of idle processors that will be retained in the cache and reused, +		 * with a subsequent request., +		 */, +		private int processorCache = 200;, +, +		/**, +		public int getProcessorCache() {, +			return this.processorCache;, +		}, +, +		public void setProcessorCache(int processorCache) {, +			this.processorCache = processorCache;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(tomcatProperties::getProcessorCache).when(this::isPositive), +				.to((processorCache) -> customizeProcessorCache(factory, processorCache));, +	private void customizeProcessorCache(ConfigurableTomcatWebServerFactory factory,, +			int processorCache) {, +		factory.addConnectorCustomizers((, +				connector) -> ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()), +						.setProcessorCache(processorCache));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Artsiom Yudovin, +		 * Maximum number of idle processors that will be retained in the cache and reused, +		 * with a subsequent request., +		 */, +		private int processorCache = 200;, +, +		/**, +		public int getProcessorCache() {, +			return this.processorCache;, +		}, +, +		public void setProcessorCache(int processorCache) {, +			this.processorCache = processorCache;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(tomcatProperties::getProcessorCache).when(this::isPositive), +				.to((processorCache) -> customizeProcessorCache(factory, processorCache));, +	private void customizeProcessorCache(ConfigurableTomcatWebServerFactory factory,, +			int processorCache) {, +		factory.addConnectorCustomizers((, +				connector) -> ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()), +						.setProcessorCache(processorCache));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizerTests.java, +	public void customProcessorCache() {, +		bind("server.tomcat.processor-cache=100");, +		assertThat(this.serverProperties.getTomcat().getProcessorCache()).isEqualTo(100);, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Artsiom Yudovin, +		 * Maximum number of idle processors that will be retained in the cache and reused, +		 * with a subsequent request., +		 */, +		private int processorCache = 200;, +, +		/**, +		public int getProcessorCache() {, +			return this.processorCache;, +		}, +, +		public void setProcessorCache(int processorCache) {, +			this.processorCache = processorCache;, +		}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, +		propertyMapper.from(tomcatProperties::getProcessorCache).when(this::isPositive), +				.to((processorCache) -> customizeProcessorCache(factory, processorCache));, +	private void customizeProcessorCache(ConfigurableTomcatWebServerFactory factory,, +			int processorCache) {, +		factory.addConnectorCustomizers((, +				connector) -> ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()), +						.setProcessorCache(processorCache));, +	}]