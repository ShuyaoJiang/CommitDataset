[+++ b/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashSet;, +		"org.springframework.boot.autoconfigure.condition.ConditionalOnBean",, +		"org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate",, +	private final Map<String, String> annotations;, +, +	private final Map<String, ValueExtractor> valueExtractors;, +		Map<String, ValueExtractor> valueExtractors = new LinkedHashMap<>();, +		addValueExtractors(valueExtractors);, +		this.valueExtractors = Collections.unmodifiableMap(valueExtractors);, +		annotations.put("ConditionalOnBean",, +				"org.springframework.boot.autoconfigure.condition.ConditionalOnBean");, +		annotations.put("ConditionalOnSingleCandidate",, +				"org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate");, +	private void addValueExtractors(Map<String, ValueExtractor> attributes) {, +		attributes.put("Configuration", ValueExtractor.allFrom("value"));, +		attributes.put("ConditionalOnClass", ValueExtractor.allFrom("value", "name"));, +		attributes.put("ConditionalOnBean", new OnBeanConditionValueExtractor());, +		attributes.put("ConditionalOnSingleCandidate",, +				new OnBeanConditionValueExtractor());, +		attributes.put("AutoConfigureBefore", ValueExtractor.allFrom("value", "name"));, +		attributes.put("AutoConfigureAfter", ValueExtractor.allFrom("value", "name"));, +		attributes.put("AutoConfigureOrder", ValueExtractor.allFrom("value"));, +	}, +, +			String qualifiedName = Elements.getQualifiedName(element);, +				List<Object> values = getValues(propertyKey, annotation);, +	private List<Object> getValues(String propertyKey, AnnotationMirror annotation) {, +		ValueExtractor extractor = this.valueExtractors.get(propertyKey);, +		if (extractor == null) {, +			return Collections.emptyList();, +		return extractor.getValues(annotation);, +	@FunctionalInterface, +	private interface ValueExtractor {, +, +		List<Object> getValues(AnnotationMirror annotation);, +, +		static ValueExtractor allFrom(String... attributes) {, +			Set<String> names = new HashSet<>(Arrays.asList(attributes));, +			return new AbstractValueExtractor() {, +, +				@Override, +				public List<Object> getValues(AnnotationMirror annotation) {, +					List<Object> result = new ArrayList<>();, +					annotation.getElementValues().forEach((key, value) -> {, +						if (names.contains(key.getSimpleName().toString())) {, +							extractValues(value).forEach(result::add);, +						}, +					});, +					return result;, +				}, +, +			};, +		}, +, +	}, +, +	private abstract static class AbstractValueExtractor implements ValueExtractor {, +, +		@SuppressWarnings("unchecked"), +		protected Stream<Object> extractValues(AnnotationValue annotationValue) {, +			if (annotationValue == null) {, +				return Stream.empty();, +			}, +			Object value = annotationValue.getValue();, +			if (value instanceof List) {, +				return ((List<AnnotationValue>) value).stream(), +						.map((annotation) -> extractValue(annotation.getValue()));, +			}, +			return Stream.of(extractValue(value));, +		}, +, +		private Object extractValue(Object value) {, +			if (value instanceof DeclaredType) {, +				return Elements.getQualifiedName(((DeclaredType) value).asElement());, +			}, +			return value;, +		}, +, +	}, +, +	private static class OnBeanConditionValueExtractor extends AbstractValueExtractor {, +, +		@Override, +		public List<Object> getValues(AnnotationMirror annotation) {, +			Map<String, AnnotationValue> attributes = new LinkedHashMap<>();, +			annotation.getElementValues().forEach((key, value) -> attributes, +					.put(key.getSimpleName().toString(), value));, +			if (attributes.containsKey("name")) {, +				return Collections.emptyList();, +			}, +			List<Object> result = new ArrayList<>();, +			extractValues(attributes.get("value")).forEach(result::add);, +			extractValues(attributes.get("type")).forEach(result::add);, +			return result;, +		}, +, +	}]