[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +		for (Container container : webServer.getTomcat().getHost().findChildren()) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +		for (Container container : webServer.getTomcat().getHost().findChildren()) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +		assertThat(getCurieHref("http://localhost:" + port + "/application")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +		assertThat(getCurieHref("http://localhost:" + port, +				+ "/context/servlet/application")).isEqualTo("http://localhost:" + port, +		assertThat(getCurieHref("http://localhost:" + port + "/application/")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +		for (Container container : webServer.getTomcat().getHost().findChildren()) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +		assertThat(getCurieHref("http://localhost:" + port + "/application")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +		assertThat(getCurieHref("http://localhost:" + port, +				+ "/context/servlet/application")).isEqualTo("http://localhost:" + port, +		assertThat(getCurieHref("http://localhost:" + port + "/application/")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +		TestPropertyValues.of("spring.info.git.location:classpath:nonexistent"), +				.applyTo(this.context);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AutoConfigurationReportEndpoint.java, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/TomcatPublicMetrics.java, +		for (Container container : webServer.getTomcat().getHost().findChildren()) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/BootCuriesHrefIntegrationTests.java, +		assertThat(getCurieHref("http://localhost:" + port + "/application")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +		assertThat(getCurieHref("http://localhost:" + port, +				+ "/context/servlet/application")).isEqualTo("http://localhost:" + port, +		assertThat(getCurieHref("http://localhost:" + port + "/application/")), +				.isEqualTo("http://localhost:" + port, +						+ "/application/docs/#spring_boot_actuator__{rel}");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfigurationTests.java, +		TestPropertyValues.of("spring.info.git.location:classpath:nonexistent"), +				.applyTo(this.context);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +		TestPropertyValues, +				.of("management.context-path=", "management.security.enabled=false",, +						"server.servlet.context-path=",, +						"server.port=" + ports.get().server), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.security.enabled=false"), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.add-application-context-header:true"), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);, +		TestPropertyValues, +				.of("management.port=" + ports.get().management,, +						"management.context-path=/admin"), +				.applyTo(this.applicationContext);, +		TestPropertyValues, +				.of("server.servlet.context-path=/spring",, +						"management.context-path=/admin"), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=0", "management.security.enabled=false"), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);, +		TestPropertyValues, +				.of("server.port:" + ports.get().server,, +						"management.security.enabled:false"), +				.applyTo(this.applicationContext);, +			TestPropertyValues, +					.of("server.port:" + ports.get().server,, +							"management.port:" + ports.get().management), +					.applyTo(this.applicationContext);, +		TestPropertyValues, +				.of("management.context-path:/test", "management.security.enabled:false"), +				.applyTo(this.applicationContext);, +		TestPropertyValues.of("server.displayName:foo").applyTo(this.applicationContext);, +		TestPropertyValues.of("management.port=" + ports.get().management), +				.applyTo(this.applicationContext);]