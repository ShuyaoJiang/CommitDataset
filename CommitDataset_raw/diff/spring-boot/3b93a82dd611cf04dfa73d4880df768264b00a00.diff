[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import org.springframework.boot.bind.RelaxedNames;, +		HttpStatus status = getStatus(health);, +	private HttpStatus getStatus(Health health) {, +		String code = health.getStatus().getCode();, +		if (code != null) {, +			code = code.toLowerCase().replace("_", "-");, +			for (String candidate : RelaxedNames.forCamelCase(code)) {, +				HttpStatus status = this.statusMapping.get(candidate);, +				if (status != null) {, +					return status;, +				}, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +import org.springframework.boot.bind.RelaxedNames;, +		HttpStatus status = getStatus(health);, +	private HttpStatus getStatus(Health health) {, +		String code = health.getStatus().getCode();, +		if (code != null) {, +			code = code.toLowerCase().replace("_", "-");, +			for (String candidate : RelaxedNames.forCamelCase(code)) {, +				HttpStatus status = this.statusMapping.get(candidate);, +				if (status != null) {, +					return status;, +				}, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +	public void customMappingWithRelaxedName() {, +		given(this.endpoint.invoke()).willReturn(, +				new Health.Builder().outOfService().build());, +		this.mvc.setStatusMapping(Collections.singletonMap("out-of-service",, +				HttpStatus.INTERNAL_SERVER_ERROR));, +		Object result = this.mvc.invoke(null);, +		assertTrue(result instanceof ResponseEntity);, +		ResponseEntity<Health> response = (ResponseEntity<Health>) result;, +		assertTrue(response.getBody().getStatus().equals(Status.OUT_OF_SERVICE));, +		assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());, +	}, +, +	@Test]