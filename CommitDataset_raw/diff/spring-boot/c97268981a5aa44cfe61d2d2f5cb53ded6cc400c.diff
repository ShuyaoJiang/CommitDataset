[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java, +			LogLevel logLevel = getLogLevel(configuration);, +			this.delegate.setLogLevel(name, logLevel);, +			return ResponseEntity.ok().build();, +	}, +	private LogLevel getLogLevel(Map<String, String> configuration) {, +		String level = configuration.get("configuredLevel");, +		return (level == null ? null : LogLevel.valueOf(level.toUpperCase()));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java, +			LogLevel logLevel = getLogLevel(configuration);, +			this.delegate.setLogLevel(name, logLevel);, +			return ResponseEntity.ok().build();, +	}, +	private LogLevel getLogLevel(Map<String, String> configuration) {, +		String level = configuration.get("configuredLevel");, +		return (level == null ? null : LogLevel.valueOf(level.toUpperCase()));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(context, environment);, +			context.register(config);, +		context.register(PropertyPlaceholderAutoConfiguration.class,, +		context.refresh();, +		this.context = context;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java, +			LogLevel logLevel = getLogLevel(configuration);, +			this.delegate.setLogLevel(name, logLevel);, +			return ResponseEntity.ok().build();, +	}, +	private LogLevel getLogLevel(Map<String, String> configuration) {, +		String level = configuration.get("configuredLevel");, +		return (level == null ? null : LogLevel.valueOf(level.toUpperCase()));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(context, environment);, +			context.register(config);, +		context.register(PropertyPlaceholderAutoConfiguration.class,, +		context.refresh();, +		this.context = context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +				"spring.aop.");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java, +			LogLevel logLevel = getLogLevel(configuration);, +			this.delegate.setLogLevel(name, logLevel);, +			return ResponseEntity.ok().build();, +	}, +	private LogLevel getLogLevel(Map<String, String> configuration) {, +		String level = configuration.get("configuredLevel");, +		return (level == null ? null : LogLevel.valueOf(level.toUpperCase()));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(context, environment);, +			context.register(config);, +		context.register(PropertyPlaceholderAutoConfiguration.class,, +		context.refresh();, +		this.context = context;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java, +		RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +				"spring.aop.");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfigurationTests.java, +		load(AnotherSampleServiceConfiguration.class,, +				"spring.aop.proxy-target-class=false");, +		AnotherSampleService service = this.context.getBean(AnotherSampleService.class);]