[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/AbstractTemplateResolverConfiguration.java, +	protected final ThymeleafProperties properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/AbstractTemplateResolverConfiguration.java, +	protected final ThymeleafProperties properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver;, +			@Bean, +			@Override, +			public SpringResourceTemplateResolver defaultTemplateResolver() {, +				SpringResourceTemplateResolver resolver = super.defaultTemplateResolver();, +				Method setCheckExistence = ReflectionUtils, +						.findMethod(resolver.getClass(), "setCheckExistence", boolean.class);, +				ReflectionUtils.invokeMethod(setCheckExistence, resolver, this.properties.isCheckTemplate());, +				return resolver;, +			}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/AbstractTemplateResolverConfiguration.java, +	protected final ThymeleafProperties properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver;, +			@Bean, +			@Override, +			public SpringResourceTemplateResolver defaultTemplateResolver() {, +				SpringResourceTemplateResolver resolver = super.defaultTemplateResolver();, +				Method setCheckExistence = ReflectionUtils, +						.findMethod(resolver.getClass(), "setCheckExistence", boolean.class);, +				ReflectionUtils.invokeMethod(setCheckExistence, resolver, this.properties.isCheckTemplate());, +				return resolver;, +			}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Check that the template exists before rendering it (Thymeleaf 3+)., +	 */, +	private boolean checkTemplate = true;, +, +	/**, +	public boolean isCheckTemplate() {, +		return checkTemplate;, +	}, +, +	public void setCheckTemplate(boolean checkTemplate) {, +		this.checkTemplate = checkTemplate;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/AbstractTemplateResolverConfiguration.java, +	protected final ThymeleafProperties properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java, +import org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver;, +			@Bean, +			@Override, +			public SpringResourceTemplateResolver defaultTemplateResolver() {, +				SpringResourceTemplateResolver resolver = super.defaultTemplateResolver();, +				Method setCheckExistence = ReflectionUtils, +						.findMethod(resolver.getClass(), "setCheckExistence", boolean.class);, +				ReflectionUtils.invokeMethod(setCheckExistence, resolver, this.properties.isCheckTemplate());, +				return resolver;, +			}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java, + * Copyright 2012-2016 the original author or authors., +	 * Check that the template exists before rendering it (Thymeleaf 3+)., +	 */, +	private boolean checkTemplate = true;, +, +	/**, +	public boolean isCheckTemplate() {, +		return checkTemplate;, +	}, +, +	public void setCheckTemplate(boolean checkTemplate) {, +		this.checkTemplate = checkTemplate;, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.thymeleaf.check-template=true # Check that the template exists before rendering it.]