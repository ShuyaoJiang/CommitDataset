[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * <li>{@link Class} - A Java class to be loaded by {@link AnnotatedBeanDefinitionReader}, + * </li>, +		setInitializers((Collection) getSpringFactoriesInstances(, +				ApplicationContextInitializer.class));, +				new StartupInfoLogger(this.mainApplicationClass), +						.logStarted(getApplicationLog(), stopWatch);, +		environment = resetEnvironment(environment);, +	private ConfigurableEnvironment resetEnvironment(, +			ConfigurableEnvironment environment) {, +		if (this.environment != null && environment != this.environment) {, +			environment = this.environment;, +		}, +		if (environment instanceof StandardServletEnvironment && !this.webEnvironment) {, +			Set<String> servletSources = new HashSet<>(Arrays.asList(, +					StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,, +					StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,, +					StandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME));, +			ConfigurableEnvironment copy = environment;, +			environment = new StandardEnvironment();, +			environment.setActiveProfiles(copy.getActiveProfiles());, +			String current = null;, +			MutablePropertySources sources = environment.getPropertySources();, +			for (PropertySource<?> source : copy.getPropertySources()) {, +				if (!servletSources.contains(source.getName())) {, +					String name = source.getName();, +					if (sources.contains(name)) {, +						sources.replace(name, source);, +					}, +					else if (current == null) {, +						sources.addFirst(source);, +					}, +					else {, +						sources.addAfter(current, source);, +					}, +					current = name;, +				}, +			}, +		}, +		return environment;, +	}, +, +		System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, System.getProperty(, +				SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(this.headless)));, +				throw new IllegalArgumentException(, +						"Cannot instantiate " + type + " : " + name, ex);, +	protected void configureEnvironment(ConfigurableEnvironment environment,, +			String[] args) {, +			sources.addLast(, +					new MapPropertySource("defaultProperties", this.defaultProperties));, +				composite.addPropertySource(new SimpleCommandLinePropertySource(, +						name + "-" + args.hashCode(), args));, +				contextClass = Class.forName(this.webEnvironment, +						? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);, +								+ "please specify an ApplicationContextClass",, +						ex);, +				((DefaultResourceLoader) context), +						.setClassLoader(this.resourceLoader.getClassLoader());, +			this.log.debug(, +					"Loading source " + StringUtils.arrayToCommaDelimitedString(sources));, +				generators, +						.addAll(context.getBeansOfType(ExitCodeGenerator.class).values());, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * <li>{@link Class} - A Java class to be loaded by {@link AnnotatedBeanDefinitionReader}, + * </li>, +		setInitializers((Collection) getSpringFactoriesInstances(, +				ApplicationContextInitializer.class));, +				new StartupInfoLogger(this.mainApplicationClass), +						.logStarted(getApplicationLog(), stopWatch);, +		environment = resetEnvironment(environment);, +	private ConfigurableEnvironment resetEnvironment(, +			ConfigurableEnvironment environment) {, +		if (this.environment != null && environment != this.environment) {, +			environment = this.environment;, +		}, +		if (environment instanceof StandardServletEnvironment && !this.webEnvironment) {, +			Set<String> servletSources = new HashSet<>(Arrays.asList(, +					StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME,, +					StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME,, +					StandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME));, +			ConfigurableEnvironment copy = environment;, +			environment = new StandardEnvironment();, +			environment.setActiveProfiles(copy.getActiveProfiles());, +			String current = null;, +			MutablePropertySources sources = environment.getPropertySources();, +			for (PropertySource<?> source : copy.getPropertySources()) {, +				if (!servletSources.contains(source.getName())) {, +					String name = source.getName();, +					if (sources.contains(name)) {, +						sources.replace(name, source);, +					}, +					else if (current == null) {, +						sources.addFirst(source);, +					}, +					else {, +						sources.addAfter(current, source);, +					}, +					current = name;, +				}, +			}]