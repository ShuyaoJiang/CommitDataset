[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * Set the search locations that will be considered as a comma-separated list. Each, +	 * search location should be a directory path (ending in "/") and it will be prefixed, +	 * by the file names constructed from {@link #setSearchNames(String) search names} and, +	 * profiles (if any) plus file extensions supported by the properties loaders., +			if (this.environment.containsProperty(ACTIVE_PROFILES_PROPERTY)) {, +				// Any pre-existing active profiles set via property sources (e.g. System, +				// properties) take precedence over those added in config files (unless, +				// latter are prefixed with "+")., +				addActiveProfiles(this.environment.getProperty(ACTIVE_PROFILES_PROPERTY));, +			}, +			else {, +				// Pre-existing active profiles set via Environment.setActiveProfiles(), +				// are additional profiles and config files are allowed to add more if, +				// they want to, so don't call addActiveProfiles() here., +				this.profiles.addAll(Arrays.asList(this.environment.getActiveProfiles()));, +			}, +					if (!this.environment.acceptsProfiles(profile)) {, +						// If it's already accepted we assume the order was set, +						// intentionally, +					}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * Set the search locations that will be considered as a comma-separated list. Each, +	 * search location should be a directory path (ending in "/") and it will be prefixed, +	 * by the file names constructed from {@link #setSearchNames(String) search names} and, +	 * profiles (if any) plus file extensions supported by the properties loaders., +			if (this.environment.containsProperty(ACTIVE_PROFILES_PROPERTY)) {, +				// Any pre-existing active profiles set via property sources (e.g. System, +				// properties) take precedence over those added in config files (unless, +				// latter are prefixed with "+")., +				addActiveProfiles(this.environment.getProperty(ACTIVE_PROFILES_PROPERTY));, +			}, +			else {, +				// Pre-existing active profiles set via Environment.setActiveProfiles(), +				// are additional profiles and config files are allowed to add more if, +				// they want to, so don't call addActiveProfiles() here., +				this.profiles.addAll(Arrays.asList(this.environment.getActiveProfiles()));, +			}, +					if (!this.environment.acceptsProfiles(profile)) {, +						// If it's already accepted we assume the order was set, +						// intentionally, +					}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import org.springframework.util.StringUtils;, +	public void loadTwoPropertiesFilesWithProfiles() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:", +				+ "classpath:enableprofile.properties,", +				+ "classpath:enableother.properties");, +		this.initializer.onApplicationEvent(this.event);, +		assertEquals("other", StringUtils.arrayToCommaDelimitedString(this.environment, +				.getActiveProfiles()));, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("fromotherpropertiesfile"));, +	}, +, +	@Test, +		// The "myprofile" profile is activated in enableprofile.properties so its value, +		// should show up here, +		assertThat(property, equalTo("fromprofilepropertiesfile"));, +	}, +, +	@Test, +	public void loadPropertiesThenProfilePropertiesWithOverride() throws Exception {, +		this.environment.setActiveProfiles("other");, +		// EnvironmentTestUtils.addEnvironment(this.environment,, +		// "spring.profiles.active:other");, +		this.initializer.setSearchNames("enableprofile");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("other.property");, +		// The "other" profile is activated before any processing starts, +		assertThat(property, equalTo("fromotherpropertiesfile"));, +		property = this.environment.getProperty("my.property");, +		// The "myprofile" profile is activated in enableprofile.properties and "other", +		// was not activated by setting spring.profiles.active so "myprofile" should still, +		// be activated, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * Set the search locations that will be considered as a comma-separated list. Each, +	 * search location should be a directory path (ending in "/") and it will be prefixed, +	 * by the file names constructed from {@link #setSearchNames(String) search names} and, +	 * profiles (if any) plus file extensions supported by the properties loaders., +			if (this.environment.containsProperty(ACTIVE_PROFILES_PROPERTY)) {, +				// Any pre-existing active profiles set via property sources (e.g. System, +				// properties) take precedence over those added in config files (unless, +				// latter are prefixed with "+")., +				addActiveProfiles(this.environment.getProperty(ACTIVE_PROFILES_PROPERTY));, +			}, +			else {, +				// Pre-existing active profiles set via Environment.setActiveProfiles(), +				// are additional profiles and config files are allowed to add more if, +				// they want to, so don't call addActiveProfiles() here., +				this.profiles.addAll(Arrays.asList(this.environment.getActiveProfiles()));, +			}, +					if (!this.environment.acceptsProfiles(profile)) {, +						// If it's already accepted we assume the order was set, +						// intentionally, +					}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import org.springframework.util.StringUtils;, +	public void loadTwoPropertiesFilesWithProfiles() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.environment, "spring.config.location:"]