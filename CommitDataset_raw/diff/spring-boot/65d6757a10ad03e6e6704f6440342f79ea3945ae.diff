[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import java.util.Properties;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, +	private RelaxedPropertyResolver environment;, +, +	@Autowired, +	public void setEnvironment(Environment environment) {, +		this.environment = new RelaxedPropertyResolver(environment);, +	}, +, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +, +		String domain = this.environment.getProperty("endpoints.jmx.domain");, +		if (StringUtils.hasText(domain)) {, +			mbeanExporter.setDomain(domain);, +		}, +, +		Boolean ensureUnique = this.environment.getProperty("endpoints.jmx.unique_names",, +				Boolean.class, Boolean.FALSE);, +		mbeanExporter.setEnsureUniqueRuntimeObjectNames(ensureUnique);, +, +		mbeanExporter.setObjectNameStaticProperties(getObjectNameStaticProperties());, +, +		return mbeanExporter;, +	}, +, +	private Properties getObjectNameStaticProperties() {, +		String staticNames = this.environment.getProperty("endpoints.jmx.static_names");, +		if (StringUtils.hasText(staticNames)) {, +			return StringUtils.splitArrayElementsIntoProperties(, +					StringUtils.commaDelimitedListToStringArray(staticNames), "=");, +		}, +		return new Properties();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import java.util.Properties;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, +	private RelaxedPropertyResolver environment;, +, +	@Autowired, +	public void setEnvironment(Environment environment) {, +		this.environment = new RelaxedPropertyResolver(environment);, +	}, +, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +, +		String domain = this.environment.getProperty("endpoints.jmx.domain");, +		if (StringUtils.hasText(domain)) {, +			mbeanExporter.setDomain(domain);, +		}, +, +		Boolean ensureUnique = this.environment.getProperty("endpoints.jmx.unique_names",, +				Boolean.class, Boolean.FALSE);, +		mbeanExporter.setEnsureUniqueRuntimeObjectNames(ensureUnique);, +, +		mbeanExporter.setObjectNameStaticProperties(getObjectNameStaticProperties());, +, +		return mbeanExporter;, +	}, +, +	private Properties getObjectNameStaticProperties() {, +		String staticNames = this.environment.getProperty("endpoints.jmx.static_names");, +		if (StringUtils.hasText(staticNames)) {, +			return StringUtils.splitArrayElementsIntoProperties(, +					StringUtils.commaDelimitedListToStringArray(staticNames), "=");, +		}, +		return new Properties();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBean.java, +public class EndpointMBean {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import java.util.Properties;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, +	private RelaxedPropertyResolver environment;, +, +	@Autowired, +	public void setEnvironment(Environment environment) {, +		this.environment = new RelaxedPropertyResolver(environment);, +	}, +, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +, +		String domain = this.environment.getProperty("endpoints.jmx.domain");, +		if (StringUtils.hasText(domain)) {, +			mbeanExporter.setDomain(domain);, +		}, +, +		Boolean ensureUnique = this.environment.getProperty("endpoints.jmx.unique_names",, +				Boolean.class, Boolean.FALSE);, +		mbeanExporter.setEnsureUniqueRuntimeObjectNames(ensureUnique);]