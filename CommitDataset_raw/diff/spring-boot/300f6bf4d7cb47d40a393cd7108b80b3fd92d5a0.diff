[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +	public LocalHostUriTemplateHandler(Environment environment, String scheme,, +			UriTemplateHandler handler) {, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +	public LocalHostUriTemplateHandler(Environment environment, String scheme,, +			UriTemplateHandler handler) {, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandlerTests.java, + * Copyright 2012-2018 the original author or authors., +import java.net.URI;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.web.util.UriTemplateHandler;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	@Test, +	public void expandShouldUseCustomHandler() {, +		MockEnvironment environment = new MockEnvironment();, +		UriTemplateHandler uriTemplateHandler = mock(UriTemplateHandler.class);, +		Map<String, ?> uriVariables = new HashMap<>();, +		URI uri = URI.create("http://www.example.com");, +		given(uriTemplateHandler.expand("https://localhost:8080/", uriVariables)), +				.willReturn(uri);, +		LocalHostUriTemplateHandler handler = new LocalHostUriTemplateHandler(, +				environment, "https", uriTemplateHandler);, +		assertThat(handler.expand("/", uriVariables)).isEqualTo(uri);, +		verify(uriTemplateHandler).expand("https://localhost:8080/", uriVariables);, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +	public LocalHostUriTemplateHandler(Environment environment, String scheme,, +			UriTemplateHandler handler) {, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandlerTests.java, + * Copyright 2012-2018 the original author or authors., +import java.net.URI;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.web.util.UriTemplateHandler;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +	@Test, +	public void expandShouldUseCustomHandler() {, +		MockEnvironment environment = new MockEnvironment();, +		UriTemplateHandler uriTemplateHandler = mock(UriTemplateHandler.class);, +		Map<String, ?> uriVariables = new HashMap<>();, +		URI uri = URI.create("http://www.example.com");, +		given(uriTemplateHandler.expand("https://localhost:8080/", uriVariables)), +				.willReturn(uri);, +		LocalHostUriTemplateHandler handler = new LocalHostUriTemplateHandler(, +				environment, "https", uriTemplateHandler);, +		assertThat(handler.expand("/", uriVariables)).isEqualTo(uri);, +		verify(uriTemplateHandler).expand("https://localhost:8080/", uriVariables);, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RootUriTemplateHandler.java, + * Copyright 2012-2018 the original author or authors., +		Assert.notNull(handler, "Handler must not be null");]