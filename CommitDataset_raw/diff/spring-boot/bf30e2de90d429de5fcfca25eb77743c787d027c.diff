[+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionHandler.java, +import groovy.lang.Closure;, +, +public class OptionHandler {, +	private Closure<Void> closure;, +	public OptionParser getParser() {, +	protected void options() {, +		if (this.closure != null) {, +			this.closure.call();, +		}, +	}, +, +	public void setOptions(Closure<Void> closure) {, +		this.closure = closure;, +	}, +	protected void run(OptionSet options) throws Exception {, +	}, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionHandler.java, +import groovy.lang.Closure;, +, +public class OptionHandler {, +	private Closure<Void> closure;, +	public OptionParser getParser() {, +	protected void options() {, +		if (this.closure != null) {, +			this.closure.call();, +		}, +	}, +, +	public void setOptions(Closure<Void> closure) {, +		this.closure = closure;, +	}, +	protected void run(OptionSet options) throws Exception {, +	}, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionParsingCommand.java, + * Base class for a {@link Command} that uses an {@link OptionHandler}., +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionHandler.java, +import groovy.lang.Closure;, +, +public class OptionHandler {, +	private Closure<Void> closure;, +	public OptionParser getParser() {, +	protected void options() {, +		if (this.closure != null) {, +			this.closure.call();, +		}, +	}, +, +	public void setOptions(Closure<Void> closure) {, +		this.closure = closure;, +	}, +	protected void run(OptionSet options) throws Exception {, +	}, +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/OptionParsingCommand.java, + * Base class for a {@link Command} that uses an {@link OptionHandler}., +++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/command/ScriptCommand.java, +import groovy.lang.Closure;, +import groovy.lang.GroovyObjectSupport;, +import groovy.lang.MetaClass;, +import groovy.lang.MetaMethod;, +import joptsimple.OptionParser;, +, +		run(getMain(), args);, +	}, +, +	private void run(Object main, String[] args) throws Exception {, +		if (main instanceof Command) {, +			((Command) main).run(args);, +		} else if (main instanceof OptionHandler) {, +		} else if (main instanceof Closure) {, +			((Closure<?>) main).call((Object[]) args);, +		} else if (main instanceof Runnable) {, +			((Runnable) main).run();, +		} else if (main instanceof Script) {, +			if (this.main instanceof GroovyObjectSupport) {, +				GroovyObjectSupport object = (GroovyObjectSupport) this.main;, +				if (object.getMetaClass().hasProperty(object, "parser") != null) {, +					OptionParser parser = (OptionParser) object.getProperty("parser");, +					if (parser != null) {, +						script.setProperty("options", parser.parse(args));, +					}, +				}, +			}, +			Object result = script.run();, +			run(result, args);, +			if (this.main instanceof OptionHandler) {, +				((OptionHandler) this.main).options();, +			} else if (this.main instanceof GroovyObjectSupport) {, +				GroovyObjectSupport object = (GroovyObjectSupport) this.main;, +				MetaClass metaClass = object.getMetaClass();, +				MetaMethod options = metaClass.getMetaMethod("options", null);, +				if (options != null) {, +					options.doMethodInvoke(this.main, null);, +				}, +			}, +		String resource = name;, +		if (!name.endsWith(".groovy")) {, +			resource = "commands/" + name + ".groovy";, +		}, +			if (url.toString().startsWith("file:")) {]