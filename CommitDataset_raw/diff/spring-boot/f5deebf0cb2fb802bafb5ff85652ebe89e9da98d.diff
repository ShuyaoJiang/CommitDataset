[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +import java.util.HashMap;, +	private static final Bindable<Map<String, OAuth2ClientProperties.LoginClientRegistration>> STRING_LOGIN_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.LoginClientRegistration.class);, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.AuthorizationCodeClientRegistration>> STRING_AUTHORIZATIONCODE_REGISTRATION_MAP = Bindable, +			.mapOf(String.class,, +					OAuth2ClientProperties.AuthorizationCodeClientRegistration.class);, +		Map<String, OAuth2ClientProperties.BaseClientRegistration> registrations = getRegistrations(, +			return ConditionOutcome.match(message.foundExactly(, +					"registered clients " + registrations.values().stream().map(, +							OAuth2ClientProperties.BaseClientRegistration::getClientId), +	private Map<String, OAuth2ClientProperties.BaseClientRegistration> getRegistrations(, +		Map<String, OAuth2ClientProperties.BaseClientRegistration> registrations = new HashMap();, +		Map<String, OAuth2ClientProperties.LoginClientRegistration> loginClientRegistrations = Binder, +				.get(environment).bind("spring.security.oauth2.client.registration.login",, +						STRING_LOGIN_REGISTRATION_MAP), +				.orElse(Collections.emptyMap());, +		Map<String, OAuth2ClientProperties.AuthorizationCodeClientRegistration> authCodeClientRegistrations = Binder, +				.get(environment), +				.bind("spring.security.oauth2.client.registration.authorizationcode",, +						STRING_AUTHORIZATIONCODE_REGISTRATION_MAP), +				.orElse(Collections.emptyMap());, +		registrations.putAll(loginClientRegistrations);, +		registrations.putAll(authCodeClientRegistrations);, +		return registrations;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/ClientsConfiguredCondition.java, +import java.util.HashMap;, +	private static final Bindable<Map<String, OAuth2ClientProperties.LoginClientRegistration>> STRING_LOGIN_REGISTRATION_MAP = Bindable, +			.mapOf(String.class, OAuth2ClientProperties.LoginClientRegistration.class);, +, +	private static final Bindable<Map<String, OAuth2ClientProperties.AuthorizationCodeClientRegistration>> STRING_AUTHORIZATIONCODE_REGISTRATION_MAP = Bindable, +			.mapOf(String.class,, +					OAuth2ClientProperties.AuthorizationCodeClientRegistration.class);, +		Map<String, OAuth2ClientProperties.BaseClientRegistration> registrations = getRegistrations(, +			return ConditionOutcome.match(message.foundExactly(, +					"registered clients " + registrations.values().stream().map(, +							OAuth2ClientProperties.BaseClientRegistration::getClientId), +	private Map<String, OAuth2ClientProperties.BaseClientRegistration> getRegistrations(, +		Map<String, OAuth2ClientProperties.BaseClientRegistration> registrations = new HashMap();, +		Map<String, OAuth2ClientProperties.LoginClientRegistration> loginClientRegistrations = Binder, +				.get(environment).bind("spring.security.oauth2.client.registration.login",, +						STRING_LOGIN_REGISTRATION_MAP), +				.orElse(Collections.emptyMap());, +		Map<String, OAuth2ClientProperties.AuthorizationCodeClientRegistration> authCodeClientRegistrations = Binder, +				.get(environment), +				.bind("spring.security.oauth2.client.registration.authorizationcode",, +						STRING_AUTHORIZATIONCODE_REGISTRATION_MAP), +				.orElse(Collections.emptyMap());, +		registrations.putAll(loginClientRegistrations);, +		registrations.putAll(authCodeClientRegistrations);, +		return registrations;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java, +	private final Registration registration = new Registration();, +	public Registration getRegistration() {, +		this.getRegistration().getLogin().values().forEach(this::validateRegistration);, +		this.getRegistration().getAuthorizationCode().values(), +				.forEach(this::validateRegistration);, +	private void validateRegistration(BaseClientRegistration registration) {, +		 * OpenID Connect client registrations., +		 */, +		private Map<String, LoginClientRegistration> login = new HashMap<>();, +, +		/**, +		 * OAuth2 authorization_code client registrations., +		 */, +		private Map<String, AuthorizationCodeClientRegistration> authorizationCode = new HashMap<>();, +, +		public Map<String, LoginClientRegistration> getLogin() {, +			return this.login;, +		}, +, +		public void setLogin(Map<String, LoginClientRegistration> login) {, +			this.login = login;, +		}, +, +		public Map<String, AuthorizationCodeClientRegistration> getAuthorizationCode() {, +			return this.authorizationCode;, +		}, +, +		public void setAuthorizationCode(, +				Map<String, AuthorizationCodeClientRegistration> authorizationCode) {, +			this.authorizationCode = authorizationCode;, +		}, +, +	}, +, +	/**, +	 * A single client registration for OpenID Connect login., +	 */, +	public static class LoginClientRegistration extends BaseClientRegistration {, +, +		/**, +		 * Redirect URI. May be left blank when using a pre-defined provider., +		 */, +		private String redirectUriTemplate;, +, +		public String getRedirectUriTemplate() {, +			return this.redirectUriTemplate;, +		}]