[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +				WebApplicationContextUtils.registerWebApplicationScopes(getBeanFactory(),, +						getServletContext());, +				WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(),, +						getServletContext());, +		String[] names = getBeanFactory().getBeanNamesForType(type, true, false);, +		Map<String, T> map = new LinkedHashMap<String, T>();, +		for (String name : names) {, +			map.put(name, getBeanFactory().getBean(name, type));, +		}, +		beans.addAll(map.entrySet());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +				WebApplicationContextUtils.registerWebApplicationScopes(getBeanFactory(),, +						getServletContext());, +				WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(),, +						getServletContext());, +		String[] names = getBeanFactory().getBeanNamesForType(type, true, false);, +		Map<String, T> map = new LinkedHashMap<String, T>();, +		for (String name : names) {, +			map.put(name, getBeanFactory().getBean(name, type));, +		}, +		beans.addAll(map.entrySet());, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AnnotationConfigEmbeddedWebApplicationContextTests.java, +import java.io.IOException;, +, +import javax.servlet.GenericServlet;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.stereotype.Component;, +	public void sessionScopeAvailable() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				ExampleEmbeddedWebApplicationConfiguration.class,, +				SessionScopedComponent.class);, +		verifyContext();, +	}, +, +	@Test, +	public void sessionScopeAvailableToServlet() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				ExampleEmbeddedWebApplicationConfiguration.class,, +				ExampleServletWithAutowired.class, SessionScopedComponent.class);, +		Servlet servlet = this.context.getBean(ExampleServletWithAutowired.class);, +		assertNotNull(servlet);, +	}, +, +	@Test, +	@Component, +	protected static class ExampleServletWithAutowired extends GenericServlet {, +, +		@Autowired, +		private SessionScopedComponent component;, +, +		@Override, +		public void service(ServletRequest req, ServletResponse res), +				throws ServletException, IOException {, +			assertNotNull(this.component);, +		}, +, +	}, +, +	@Component, +	@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS), +	protected static class SessionScopedComponent {, +, +	}, +]