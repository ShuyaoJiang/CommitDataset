[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Chentao Qu, +	 * Maximum size of the HTTP message header., +	private DataSize maxHttpHeaderSize = DataSize.ofKiloBytes(8L);, +	public DataSize getMaxHttpHeaderSize() {, +	public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, +		 * @deprecated since 2.1.0 in favor of {@link ServerProperties#maxHttpHeaderSize}, +		@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Chentao Qu, +	 * Maximum size of the HTTP message header., +	private DataSize maxHttpHeaderSize = DataSize.ofKiloBytes(8L);, +	public DataSize getMaxHttpHeaderSize() {, +	public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, +		 * @deprecated since 2.1.0 in favor of {@link ServerProperties#maxHttpHeaderSize}, +		@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import org.springframework.util.unit.DataSize;, +		propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Chentao Qu, +	 * Maximum size of the HTTP message header., +	private DataSize maxHttpHeaderSize = DataSize.ofKiloBytes(8L);, +	public DataSize getMaxHttpHeaderSize() {, +	public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, +		 * @deprecated since 2.1.0 in favor of {@link ServerProperties#maxHttpHeaderSize}, +		@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import org.springframework.util.unit.DataSize;, +		propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/NettyWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.web.embedded.netty.NettyServerCustomizer;, +import org.springframework.util.unit.DataSize;, + * @author Chentao Qu, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(this.serverProperties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +				.to((maxHttpRequestHeaderSize) -> customizeMaxHttpHeaderSize(factory,, +						maxHttpRequestHeaderSize));, +	private void customizeMaxHttpHeaderSize(NettyReactiveWebServerFactory factory,, +			Integer maxHttpHeaderSize) {, +		factory.addServerCustomizers((NettyServerCustomizer) (httpServer) -> httpServer, +				.httpRequestDecoder((httpRequestDecoderSpec) -> httpRequestDecoderSpec, +						.maxHeaderSize(maxHttpHeaderSize)));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Chentao Qu, +	 * Maximum size of the HTTP message header., +	private DataSize maxHttpHeaderSize = DataSize.ofKiloBytes(8L);, +	public DataSize getMaxHttpHeaderSize() {, +	public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, +		 * @deprecated since 2.1.0 in favor of {@link ServerProperties#maxHttpHeaderSize}, +		@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import org.springframework.util.unit.DataSize;, +		propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/NettyWebServerFactoryCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +import org.springframework.boot.web.embedded.netty.NettyServerCustomizer;, +import org.springframework.util.unit.DataSize;, + * @author Chentao Qu, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(this.serverProperties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +				.to((maxHttpRequestHeaderSize) -> customizeMaxHttpHeaderSize(factory,, +						maxHttpRequestHeaderSize));, +	private void customizeMaxHttpHeaderSize(NettyReactiveWebServerFactory factory,, +			Integer maxHttpHeaderSize) {, +		factory.addServerCustomizers((NettyServerCustomizer) (httpServer) -> httpServer, +				.httpRequestDecoder((httpRequestDecoderSpec) -> httpRequestDecoderSpec, +						.maxHeaderSize(maxHttpHeaderSize)));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java, + * @author Chentao Qu, +		propertyMapper.from(this::determineMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +	private DataSize determineMaxHttpHeaderSize() {, +		return isPositive(this.serverProperties.getTomcat().getMaxHttpHeaderSize()), +				? DataSize, +						.ofBytes(this.serverProperties.getTomcat().getMaxHttpHeaderSize()), +				: this.serverProperties.getMaxHttpHeaderSize();, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, + * @author Chentao Qu, +	 * Maximum size of the HTTP message header., +	private DataSize maxHttpHeaderSize = DataSize.ofKiloBytes(8L);, +	public DataSize getMaxHttpHeaderSize() {, +	public void setMaxHttpHeaderSize(DataSize maxHttpHeaderSize) {, +		 * @deprecated since 2.1.0 in favor of {@link ServerProperties#maxHttpHeaderSize}, +		@Deprecated, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java, +import org.springframework.util.unit.DataSize;, +		propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull(), +				.asInt(DataSize::toBytes), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/NettyWebServerFactoryCustomizer.java]