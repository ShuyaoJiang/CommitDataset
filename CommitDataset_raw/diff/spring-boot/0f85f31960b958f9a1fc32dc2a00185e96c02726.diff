[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.crsh.vfs.spi.FSDriver;, +import org.springframework.boot.actuate.properties.ShellProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.AuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.JaasAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.KeyAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.SimpleAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.SpringAuthenticationProperties;, +import org.springframework.util.ObjectUtils;, +@EnableConfigurationProperties({ ShellProperties.class }), +	private ShellProperties properties;, +		CrshBootstrapBean bootstrapBean = new CrshBootstrapBean();, +		bootstrapBean.setConfig(this.properties.asCrashShellConfig());, +		return bootstrapBean;, +	/**, +	 * Spring Bean used to bootstrap the CRaSH shell., +	 */, +	public static class CrshBootstrapBean extends PluginLifeCycle {, +		private ShellProperties properties;, +			FS configurationFileSystem = createFileSystem(this.properties, +					.getConfigPathPatterns());, +					createPluginContextAttributes(), commandFileSystem,, +					configurationFileSystem, this.resourceLoader.getClassLoader());, +			Assert.notNull(pathPatterns, "PathPatterns must not be null");, +			FS fileSystem = new FS();, +				fileSystem.mount(new SimpleFileSystemDriver(new DirectoryHandle(, +						pathPattern, this.resourceLoader)));, +			return fileSystem;, +	/**, +	 * Adapts a Spring Security {@link AuthenticationManager} for use with CRaSH., +	 */, +		@Autowired(required = false), +		private AccessDecisionManager accessDecisionManager;, +, +				// Authenticate first to make credentials are valid, +	/**, +	 * {@link ServiceLoaderDiscovery} to expose {@link CRaSHPlugin} Beans from Spring and, +	 * deal with filtering disabled plugins., +	 */, +			Collection<CRaSHPlugin> pluginBeans = this.beanFactory.getBeansOfType(, +			for (CRaSHPlugin<?> pluginBean : pluginBeans) {, +				if (!shouldFilter(pluginBean)) {, +					plugins.add(pluginBean);, +			if (ObjectUtils.isEmpty(this.disabledPlugins)) {, +			Set<Class> pluginClasses = ClassUtils.getAllInterfacesAsSet(plugin);, +			pluginClasses.add(plugin.getClass());, +			for (Class<?> pluginClass : pluginClasses) {, +				if (isDisabled(pluginClass)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		private boolean isDisabled(Class<?> pluginClass) {, +				if (ClassUtils.getShortName(pluginClass).equalsIgnoreCase(disabledPlugin), +						|| ClassUtils.getQualifiedName(pluginClass).equalsIgnoreCase(, +	/**, +	 * {@link FSDriver} to expose Spring {@link Resource}s to CRaSH., +	 */, +	/**, +	 * Base for handles to Spring {@link Resource}s., +	 */, +	private abstract static class ResourceHandle {, +, +		private String name;, +, +		public ResourceHandle(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +	}, +, +	/**, +	 * {@link ResourceHandle} for a directory., +	 */, +	/**, +	 * {@link ResourceHandle} for a file., +	 */, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.crsh.vfs.spi.FSDriver;, +import org.springframework.boot.actuate.properties.ShellProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.AuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.JaasAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.KeyAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.SimpleAuthenticationProperties;, +import org.springframework.boot.actuate.properties.ShellProperties.SpringAuthenticationProperties;, +import org.springframework.util.ObjectUtils;, +@EnableConfigurationProperties({ ShellProperties.class }), +	private ShellProperties properties;, +		CrshBootstrapBean bootstrapBean = new CrshBootstrapBean();, +		bootstrapBean.setConfig(this.properties.asCrashShellConfig());, +		return bootstrapBean;, +	/**, +	 * Spring Bean used to bootstrap the CRaSH shell., +	 */]