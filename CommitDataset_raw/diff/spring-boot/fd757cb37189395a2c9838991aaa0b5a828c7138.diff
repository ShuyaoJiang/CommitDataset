[+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(),, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy");, +		invocation.await();, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(),, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy");, +		invocation.await();, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.config= # location of config file (default classpath:/logback.xml for logback), +    logging.level.*= # levels for loggers, e.g. "logging.level.org.springframework=DEBUG" (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF), +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(),, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy");, +		invocation.await();, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.config= # location of config file (default classpath:/logback.xml for logback), +    logging.level.*= # levels for loggers, e.g. "logging.level.org.springframework=DEBUG" (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +the content of the classpath. If Logback is available it is the first choice., +, +If the only change you need to make to logging is to set the levels of various loggers, +then you can do that in `application.properties` using the "logging.level" prefix, e.g., +, +[source,properties,indent=0,subs="verbatim,quotes,attributes"], +----, +logging.level.org.springframework.web: DEBUG, +logging.level.org.hibernate: ERROR, +----, +, +You can also set the location of a file to log to (in addition to the console) using, +"logging.file". , +, +To configure the more fine grained settings of a logging system you need to use the native configuration, +format supported by the `LoggingSystem` in question. By default Spring Boot picks up the native, +configuration from its default location for the system (e.g. `classpath:/logback.xml` for Logback), but, +you can set the location of the config file using the "logging.config" property., +, +, +[[howto-configure-logback-for-loggin]], +=== Configure Logback for logging, +If you put a `logback.xml` in the root of your classpath it will be, +picked up from there. Spring Boot provides a default base, +configuration that you can include if you just want to set levels,, +e.g., +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(),, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy");, +		invocation.await();, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.config= # location of config file (default classpath:/logback.xml for logback), +    logging.level.*= # levels for loggers, e.g. "logging.level.org.springframework=DEBUG" (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF), +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +the content of the classpath. If Logback is available it is the first choice., +, +If the only change you need to make to logging is to set the levels of various loggers, +then you can do that in `application.properties` using the "logging.level" prefix, e.g., +, +[source,properties,indent=0,subs="verbatim,quotes,attributes"], +----, +logging.level.org.springframework.web: DEBUG, +logging.level.org.hibernate: ERROR, +----, +, +You can also set the location of a file to log to (in addition to the console) using, +"logging.file". , +, +To configure the more fine grained settings of a logging system you need to use the native configuration, +format supported by the `LoggingSystem` in question. By default Spring Boot picks up the native, +configuration from its default location for the system (e.g. `classpath:/logback.xml` for Logback), but, +you can set the location of the config file using the "logging.config" property., +, +, +[[howto-configure-logback-for-loggin]], +=== Configure Logback for logging, +If you put a `logback.xml` in the root of your classpath it will be, +picked up from there. Spring Boot provides a default base, +configuration that you can include if you just want to set levels,, +e.g., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-custom-log-levels]], +=== Log Levels, +, +All the supported logging systems can have the logger levels set in the Spring `Environment`, +(so for example in `application.properties`) using "logging.level.*=LEVEL" where "LEVEL" is one of , +TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF. Example `application.properties`:, +, +[source,properties,indent=0,subs="verbatim,quotes,attributes"], +----, +logging.level.org.springframework.web: DEBUG, +logging.level.org.hibernate: ERROR, +----, +++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/JarCommandIT.java, +		Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(),, +		assertThat(invocation.getErrorOutput(), equalTo(""));, +		invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy");]