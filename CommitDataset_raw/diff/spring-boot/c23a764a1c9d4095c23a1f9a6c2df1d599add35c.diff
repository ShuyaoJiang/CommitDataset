[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	private static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS, +			.toMinutes(30);, +, +	private int sessionTimeout = DEFAULT_SESSION_TIMEOUT;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	private static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS, +			.toMinutes(30);, +, +	private int sessionTimeout = DEFAULT_SESSION_TIMEOUT;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * The session timeout in seconds (default 30 minutes). If 0 or negative then sessions, +	 * never expire., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	private static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS, +			.toMinutes(30);, +, +	private int sessionTimeout = DEFAULT_SESSION_TIMEOUT;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * The session timeout in seconds (default 30 minutes). If 0 or negative then sessions, +	 * never expire., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +import org.eclipse.jetty.server.SessionManager;, +		int sessionTimeout = (getSessionTimeout() > 0 ? getSessionTimeout() : -1);, +		SessionManager sessionManager = context.getSessionHandler().getSessionManager();, +		sessionManager.setMaxInactiveInterval(sessionTimeout);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java, +	private static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS, +			.toMinutes(30);, +, +	private int sessionTimeout = DEFAULT_SESSION_TIMEOUT;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ConfigurableEmbeddedServletContainer.java, +	 * The session timeout in seconds (default 30 minutes). If 0 or negative then sessions, +	 * never expire., +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +import org.eclipse.jetty.server.SessionManager;, +		int sessionTimeout = (getSessionTimeout() > 0 ? getSessionTimeout() : -1);, +		SessionManager sessionManager = context.getSessionHandler().getSessionManager();, +		sessionManager.setMaxInactiveInterval(sessionTimeout);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java, +		long sessionTimeout = getSessionTimeout();, +		if (sessionTimeout > 0) {, +			sessionTimeout = Math.max(TimeUnit.SECONDS.toMinutes(sessionTimeout), 1L);, +		context.setSessionTimeout((int) sessionTimeout);]