[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	private static final Resource[] NO_RESOURCES = {};, +, +				for (Resource resource : getResources(context.getClassLoader(), name)) {, +						return ConditionOutcome.match("Bundle found for ", +								+ "spring.messages.basename: " + name);, +			return ConditionOutcome.noMatch("No bundle found for ", +					+ "spring.messages.basename: " + basename);, +, +		private Resource[] getResources(ClassLoader classLoader, String name) {, +			try {, +				return new PathMatchingResourcePatternResolver(classLoader), +						.getResources("classpath*:" + name + "*.properties");, +			}, +			catch (IOException ex) {, +				return NO_RESOURCES;, +			}, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	private static final Resource[] NO_RESOURCES = {};, +, +				for (Resource resource : getResources(context.getClassLoader(), name)) {, +						return ConditionOutcome.match("Bundle found for ", +								+ "spring.messages.basename: " + name);, +			return ConditionOutcome.noMatch("No bundle found for ", +					+ "spring.messages.basename: " + basename);, +, +		private Resource[] getResources(ClassLoader classLoader, String name) {, +			try {, +				return new PathMatchingResourcePatternResolver(classLoader), +						.getResources("classpath*:" + name + "*.properties");, +			}, +			catch (IOException ex) {, +				return NO_RESOURCES;, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		return (result.isEmpty() ? null : StringUtils, +				.collectionToCommaDelimitedString(result));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	private static final Resource[] NO_RESOURCES = {};, +, +				for (Resource resource : getResources(context.getClassLoader(), name)) {, +						return ConditionOutcome.match("Bundle found for ", +								+ "spring.messages.basename: " + name);, +			return ConditionOutcome.noMatch("No bundle found for ", +					+ "spring.messages.basename: " + basename);, +, +		private Resource[] getResources(ClassLoader classLoader, String name) {, +			try {, +				return new PathMatchingResourcePatternResolver(classLoader), +						.getResources("classpath*:" + name + "*.properties");, +			}, +			catch (IOException ex) {, +				return NO_RESOURCES;, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		return (result.isEmpty() ? null : StringUtils, +				.collectionToCommaDelimitedString(result));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +		if (ClassUtils.isPresent("org.springframework.web.servlet.config.annotation.", +				+ "WebMvcConfigurationSupport", null)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +	private static final Resource[] NO_RESOURCES = {};, +, +				for (Resource resource : getResources(context.getClassLoader(), name)) {, +						return ConditionOutcome.match("Bundle found for ", +								+ "spring.messages.basename: " + name);, +			return ConditionOutcome.noMatch("No bundle found for ", +					+ "spring.messages.basename: " + basename);, +, +		private Resource[] getResources(ClassLoader classLoader, String name) {, +			try {, +				return new PathMatchingResourcePatternResolver(classLoader), +						.getResources("classpath*:" + name + "*.properties");, +			}, +			catch (IOException ex) {, +				return NO_RESOURCES;, +			}, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java, +		return (result.isEmpty() ? null : StringUtils, +				.collectionToCommaDelimitedString(result));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java]