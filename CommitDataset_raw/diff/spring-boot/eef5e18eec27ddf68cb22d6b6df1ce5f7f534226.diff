[+++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationTemp.java, + * Provides access to an application specific temporary directory. Generally speaking, +	private volatile File dir;, +		return getDir().getAbsolutePath();, +	 * Return a sub-directory of the application temp., +	 * @param subDir the sub-directory name, +	 * @return a sub-directory, +	public File getDir(String subDir) {, +		File dir = new File(getDir(), subDir);, +		dir.mkdirs();, +		return dir;, +	 * Return the directory to be used for application specific temp files., +	 * @return the application temp directory, +	public File getDir() {, +		if (this.dir == null) {, +				this.dir = new File(getTempDirectory(), toHexString(hash));, +				this.dir.mkdirs();, +				Assert.state(this.dir.exists(),, +						"Unable to create temp directory " + this.dir);, +		return this.dir;, +		Assert.state(file.exists(), "Temp directory" + file + " does not exist");, +		Assert.state(file.isDirectory(), "Temp location " + file + " is not a directory");, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationTemp.java, + * Provides access to an application specific temporary directory. Generally speaking, +	private volatile File dir;, +		return getDir().getAbsolutePath();, +	 * Return a sub-directory of the application temp., +	 * @param subDir the sub-directory name, +	 * @return a sub-directory, +	public File getDir(String subDir) {, +		File dir = new File(getDir(), subDir);, +		dir.mkdirs();, +		return dir;, +	 * Return the directory to be used for application specific temp files., +	 * @return the application temp directory, +	public File getDir() {, +		if (this.dir == null) {, +				this.dir = new File(getTempDirectory(), toHexString(hash));, +				this.dir.mkdirs();, +				Assert.state(this.dir.exists(),, +						"Unable to create temp directory " + this.dir);, +		return this.dir;, +		Assert.state(file.exists(), "Temp directory" + file + " does not exist");, +		Assert.state(file.isDirectory(), "Temp location " + file + " is not a directory");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +			return new ApplicationTemp().getDir("servlet-sessions");, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationTemp.java, + * Provides access to an application specific temporary directory. Generally speaking, +	private volatile File dir;, +		return getDir().getAbsolutePath();, +	 * Return a sub-directory of the application temp., +	 * @param subDir the sub-directory name, +	 * @return a sub-directory, +	public File getDir(String subDir) {, +		File dir = new File(getDir(), subDir);, +		dir.mkdirs();, +		return dir;, +	 * Return the directory to be used for application specific temp files., +	 * @return the application temp directory, +	public File getDir() {, +		if (this.dir == null) {, +				this.dir = new File(getTempDirectory(), toHexString(hash));, +				this.dir.mkdirs();, +				Assert.state(this.dir.exists(),, +						"Unable to create temp directory " + this.dir);, +		return this.dir;, +		Assert.state(file.exists(), "Temp directory" + file + " does not exist");, +		Assert.state(file.isDirectory(), "Temp location " + file + " is not a directory");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +			return new ApplicationTemp().getDir("servlet-sessions");, +++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java, +		assertThat(t1.getDir(), notNullValue());, +		assertThat(t1.getDir(), equalTo(t2.getDir()));, +			File t1 = new ApplicationTemp().getDir();, +			File t2 = new ApplicationTemp().getDir();, +		assertThat(temp.getDir("abc"), equalTo(new File(temp.getDir(), "abc")));, +++ b/spring-boot/src/main/java/org/springframework/boot/ApplicationTemp.java, + * Provides access to an application specific temporary directory. Generally speaking, +	private volatile File dir;, +		return getDir().getAbsolutePath();, +	 * Return a sub-directory of the application temp., +	 * @param subDir the sub-directory name, +	 * @return a sub-directory, +	public File getDir(String subDir) {, +		File dir = new File(getDir(), subDir);, +		dir.mkdirs();, +		return dir;, +	 * Return the directory to be used for application specific temp files., +	 * @return the application temp directory, +	public File getDir() {, +		if (this.dir == null) {, +				this.dir = new File(getTempDirectory(), toHexString(hash));, +				this.dir.mkdirs();, +				Assert.state(this.dir.exists(),, +						"Unable to create temp directory " + this.dir);, +		return this.dir;, +		Assert.state(file.exists(), "Temp directory" + file + " does not exist");, +		Assert.state(file.isDirectory(), "Temp location " + file + " is not a directory");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java, +			return new ApplicationTemp().getDir("servlet-sessions");]