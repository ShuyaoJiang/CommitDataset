[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpoint.java, +	@Pattern(regexp = "/[^?#]*", message = "Path must start with /"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpoint.java, +	@Pattern(regexp = "/[^?#]*", message = "Path must start with /"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfigurationTests.java, +import java.util.Collection;, +, +import org.hamcrest.Matchers;, +import org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping;, +import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;, +import org.springframework.test.web.servlet.MockMvc;, +import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;, +import org.springframework.test.web.servlet.result.MockMvcResultMatchers;, +import org.springframework.test.web.servlet.setup.MockMvcBuilders;, +	public void agentServletWithCustomPath() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"endpoints.jolokia.path=/foo/bar");, +		this.context.register(EndpointsConfig.class, WebMvcAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				JolokiaAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(1, this.context.getBeanNamesForType(JolokiaMvcEndpoint.class).length);, +		MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(this.context).build();, +		mockMvc.perform(MockMvcRequestBuilders.get("/foo/bar")).andExpect(, +				MockMvcResultMatchers.content().string(, +						Matchers.containsString("\"request\":{\"type\"")));, +	}, +, +	@Test, +	protected static class EndpointsConfig extends Config {, +		@Bean, +		public EndpointHandlerMapping endpointHandlerMapping(, +				Collection<? extends MvcEndpoint> endpoints) {, +			return new EndpointHandlerMapping(endpoints);, +		}, +	}, +, +	@Configuration]