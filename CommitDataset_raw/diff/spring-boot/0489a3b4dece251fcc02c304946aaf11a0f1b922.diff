[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +			if (this.server == null) {, +				return;, +			}, +			RequestMatcher requestMatcher = getRequestMatcher();, +, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return null;, +			}, +			return LazyEndpointPathRequestMatcher.getRequestMatcher(this.contextResolver);, +			RequestMatcher matcher = getRequestMatcher();, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return LazyEndpointPathRequestMatcher, +						.getRequestMatcher(this.contextResolver);, +			}, +			return null;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +			if (this.server == null) {, +				return;, +			}, +			RequestMatcher requestMatcher = getRequestMatcher();, +, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return null;, +			}, +			return LazyEndpointPathRequestMatcher.getRequestMatcher(this.contextResolver);, +			RequestMatcher matcher = getRequestMatcher();, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return LazyEndpointPathRequestMatcher, +						.getRequestMatcher(this.contextResolver);, +			}, +			return null;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java, +		Runtime runtime = Runtime.getRuntime();, +		result.add(newMemoryMetric("mem",, +				runtime.totalMemory() + getTotalNonHeapMemoryIfPossible()));, +		result.add(newMemoryMetric("mem.free", runtime.freeMemory()));, +		result.add(new Metric<Integer>("processors", runtime.availableProcessors()));, +	private long getTotalNonHeapMemoryIfPossible() {, +		try {, +			return ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().getUsed();, +		}, +		catch (Throwable ex) {, +			return 0;, +		}, +	}, +, +			addNonHeapMetrics(result);, +		result.add(newMemoryMetric("heap.committed", memoryUsage.getCommitted()));, +		result.add(newMemoryMetric("heap.init", memoryUsage.getInit()));, +		result.add(newMemoryMetric("heap.used", memoryUsage.getUsed()));, +		result.add(newMemoryMetric("heap", memoryUsage.getMax()));, +	/**, +	 * Add JVM non-heap metrics., +	 * @param result the result, +	 */, +	private void addNonHeapMetrics(Collection<Metric<?>> result) {, +		MemoryUsage memoryUsage = ManagementFactory.getMemoryMXBean(), +				.getNonHeapMemoryUsage();, +		result.add(newMemoryMetric("nonheap.committed", memoryUsage.getCommitted()));, +		result.add(newMemoryMetric("nonheap.init", memoryUsage.getInit()));, +		result.add(newMemoryMetric("nonheap.used", memoryUsage.getUsed()));, +		result.add(newMemoryMetric("nonheap", memoryUsage.getMax()));, +, +	private Metric<Long> newMemoryMetric(String name, long bytes) {, +		return new Metric<Long>(name, bytes / 1024);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java, +			if (this.server == null) {, +				return;, +			}, +			RequestMatcher requestMatcher = getRequestMatcher();, +, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return null;, +			}, +			return LazyEndpointPathRequestMatcher.getRequestMatcher(this.contextResolver);, +			RequestMatcher matcher = getRequestMatcher();, +		private RequestMatcher getRequestMatcher() {, +			if (this.management.getSecurity().isEnabled()) {, +				return LazyEndpointPathRequestMatcher, +						.getRequestMatcher(this.contextResolver);, +			}, +			return null;, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SystemPublicMetrics.java, +		Runtime runtime = Runtime.getRuntime();, +		result.add(newMemoryMetric("mem",, +				runtime.totalMemory() + getTotalNonHeapMemoryIfPossible()));, +		result.add(newMemoryMetric("mem.free", runtime.freeMemory()));, +		result.add(new Metric<Integer>("processors", runtime.availableProcessors()));]