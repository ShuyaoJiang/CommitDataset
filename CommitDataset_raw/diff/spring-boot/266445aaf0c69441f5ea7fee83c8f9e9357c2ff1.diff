[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverFactory.java, + * A factory for {@link LiteDeviceDelegatingViewResolver} that applies customizations of, + * {@link DeviceDelegatingViewResolverProperties}., +	public DeviceDelegatingViewResolverFactory(, +			DeviceDelegatingViewResolverProperties properties) {, +	public LiteDeviceDelegatingViewResolver createViewResolver(ViewResolver delegate,, +			int delegatingOrder) {, +			throw new IllegalStateException("ViewResolver " + delegate, +					+ "should implement " + Ordered.class.getName());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverFactory.java, + * A factory for {@link LiteDeviceDelegatingViewResolver} that applies customizations of, + * {@link DeviceDelegatingViewResolverProperties}., +	public DeviceDelegatingViewResolverFactory(, +			DeviceDelegatingViewResolverProperties properties) {, +	public LiteDeviceDelegatingViewResolver createViewResolver(ViewResolver delegate,, +			int delegatingOrder) {, +			throw new IllegalStateException("ViewResolver " + delegate, +					+ "should implement " + Ordered.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/AuthorizationServerProperties.java, +	 * Spring Security access rule for the check token endpoint (e.g. a SpEL expression, +	 * Spring Security access rule for the token key endpoint (e.g. a SpEL expression like, +	 * "isAuthenticated()"). Default is empty, which is interpreted as "denyAll()" (no, +	 * access)., +	 * Realm name for client authentication. If an unauthenticated request comes in to the, +	 * token endpoint, it will respond with a challenge including this name., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverFactory.java, + * A factory for {@link LiteDeviceDelegatingViewResolver} that applies customizations of, + * {@link DeviceDelegatingViewResolverProperties}., +	public DeviceDelegatingViewResolverFactory(, +			DeviceDelegatingViewResolverProperties properties) {, +	public LiteDeviceDelegatingViewResolver createViewResolver(ViewResolver delegate,, +			int delegatingOrder) {, +			throw new IllegalStateException("ViewResolver " + delegate, +					+ "should implement " + Ordered.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/AuthorizationServerProperties.java, +	 * Spring Security access rule for the check token endpoint (e.g. a SpEL expression, +	 * Spring Security access rule for the token key endpoint (e.g. a SpEL expression like, +	 * "isAuthenticated()"). Default is empty, which is interpreted as "denyAll()" (no, +	 * access)., +	 * Realm name for client authentication. If an unauthenticated request comes in to the, +	 * token endpoint, it will respond with a challenge including this name., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +								.setWarnLogCategory(resolver.getClass().getName());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, +	 * Items to be included in the trace. Defaults to request/response headers (including, +	 * cookies) and errors., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +		this.propertyResolver = new RelaxedPropertyResolver(environment,, +				"spring.data.cassandra.");, +		SchemaAction schemaAction = this.propertyResolver.getProperty("schemaAction",, +				SchemaAction.class, SchemaAction.NONE);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverFactory.java]