[+++ b/spring-boot-parent/pom.xml, +				<groupId>org.apache.commons</groupId>, +				<artifactId>commons-compress</artifactId>, +				<version>1.14</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.apache.commons</groupId>, +				<artifactId>commons-compress</artifactId>, +				<version>1.14</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.apache.commons</groupId>, +				<artifactId>commons-compress</artifactId>, +				<version>1.14</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-tools/spring-boot-gradle-plugin/pom.xml, +		<dependency>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-compress</artifactId>, +		</dependency>, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.apache.commons</groupId>, +				<artifactId>commons-compress</artifactId>, +				<version>1.14</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-tools/spring-boot-gradle-plugin/pom.xml, +		<dependency>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-compress</artifactId>, +		</dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootArchiveSupport.java, +				this.launchScript, this.compressionResolver, jar.getMetadataCharset());, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.apache.commons</groupId>, +				<artifactId>commons-compress</artifactId>, +				<version>1.14</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-tools/spring-boot-gradle-plugin/pom.xml, +		<dependency>, +			<groupId>org.apache.commons</groupId>, +			<artifactId>commons-compress</artifactId>, +		</dependency>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootArchiveSupport.java, +				this.launchScript, this.compressionResolver, jar.getMetadataCharset());, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootZipCopyAction.java, +import org.apache.commons.compress.archivers.zip.UnixStat;, +import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;, +import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;, +	private final String encoding;, +, +			Function<FileCopyDetails, ZipCompression> compressionResolver,, +			String encoding) {, +		this.encoding = encoding;, +		ZipArchiveOutputStream zipStream;, +			zipStream = new ZipArchiveOutputStream(fileStream);, +			if (this.encoding != null) {, +				zipStream.setEncoding(this.encoding);, +			}, +	private Spec<FileTreeElement> writeLoaderClassesIfNecessary(, +			ZipArchiveOutputStream out) {, +	private Spec<FileTreeElement> writeLoaderClasses(ZipArchiveOutputStream out) {, +			java.util.zip.ZipEntry entry;, +					writeDirectory(new ZipArchiveEntry(entry), out);, +					writeClass(new ZipArchiveEntry(entry), in, out);, +	private void writeDirectory(ZipArchiveEntry entry, ZipArchiveOutputStream out), +		entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM);, +		out.putArchiveEntry(entry);, +		out.closeArchiveEntry();, +	}, +, +	private void writeClass(ZipArchiveEntry entry, ZipInputStream in,, +			ZipArchiveOutputStream out) throws IOException {, +		if (!this.preserveFileTimestamps) {, +			entry.setTime(GUtil.CONSTANT_TIME_FOR_ZIP_ENTRIES);, +		}, +		entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM);, +		out.putArchiveEntry(entry);, +		out.closeArchiveEntry();, +		private final ZipArchiveOutputStream zipStream;, +		private ZipStreamAction(ZipArchiveOutputStream zipStream, File output,, +			ZipArchiveEntry archiveEntry = new ZipArchiveEntry(, +			archiveEntry.setUnixMode(UnixStat.DIR_FLAG | details.getMode());, +			this.zipStream.putArchiveEntry(archiveEntry);, +			this.zipStream.closeArchiveEntry();, +			ZipArchiveEntry archiveEntry = new ZipArchiveEntry(relativePath);, +			archiveEntry.setUnixMode(UnixStat.FILE_FLAG | details.getMode());, +			this.zipStream.putArchiveEntry(archiveEntry);, +			this.zipStream.closeArchiveEntry();, +				ZipArchiveEntry archiveEntry) throws IOException {, +			archiveEntry.setMethod(java.util.zip.ZipEntry.STORED);, +++ b/spring-boot-parent/pom.xml]