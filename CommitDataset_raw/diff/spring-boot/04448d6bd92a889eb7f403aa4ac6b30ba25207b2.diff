[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(AnnotatedElement element, String name, ResolvableType typeToMock,, +			Class<?>[] extraInterfaces, Answers answer, boolean serializable,, +			MockReset reset) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(AnnotatedElement element, String name, ResolvableType typeToMock,, +			Class<?>[] extraInterfaces, Answers answer, boolean serializable,, +			MockReset reset) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(AnnotatedElement element, String name, ResolvableType typeToMock,, +			Class<?>[] extraInterfaces, Answers answer, boolean serializable,, +			MockReset reset) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/DefinitionsParserTests.java, +		assertThat(classDefinition.getElement()).isEqualTo(MockBeanOnClassAndField.class);, +		assertThat(classDefinition.getElement()).isEqualTo(SpyBeanOnClassAndField.class);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(AnnotatedElement element, String name, ResolvableType typeToMock,, +			Class<?>[] extraInterfaces, Answers answer, boolean serializable,, +			MockReset reset) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/DefinitionsParserTests.java, +		assertThat(classDefinition.getElement()).isEqualTo(MockBeanOnClassAndField.class);, +		assertThat(classDefinition.getElement()).isEqualTo(SpyBeanOnClassAndField.class);, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.java, + * Test {@link MockBean} on a test class field can be used to replace existing bean while, + * preserving qualifiers., +		ExampleService anotherService = this.applicationContext.getBean("anotherService",, +				ExampleService.class);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/Definition.java, +	Definition(AnnotatedElement element, String name, MockReset reset,, +			boolean proxyTargetAware) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/DefinitionsParser.java, +	private void addDefinition(Definition definition, String type) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java, +	MockDefinition(AnnotatedElement element, String name, ResolvableType typeToMock,, +			Class<?>[] extraInterfaces, Answers answer, boolean serializable,, +			MockReset reset) {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpyBean.java, + * </pre> If there is more than one bean of the requested type, qualifier metadata must be, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/DefinitionsParserTests.java, +		assertThat(classDefinition.getElement()).isEqualTo(MockBeanOnClassAndField.class);, +		assertThat(classDefinition.getElement()).isEqualTo(SpyBeanOnClassAndField.class);, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockBeanOnTestFieldForExistingBeanWithQualifierIntegrationTests.java, + * Test {@link MockBean} on a test class field can be used to replace existing bean while, + * preserving qualifiers., +		ExampleService anotherService = this.applicationContext.getBean("anotherService",, +				ExampleService.class);, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/MockDefinitionTests.java, +				EXAMPLE_SERVICE_TYPE, new Class<?>[] { ExampleExtraInterface.class },, +		MockDefinition definition = new MockDefinition(null, "name", EXAMPLE_SERVICE_TYPE,]