[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, + * Copyright 2012-2018 the original author or authors., +	/**, +	 * Whether read-only operations should use an anonymous environment., +	 */, +	private boolean anonymousReadOnly;, +, +	public boolean getAnonymousReadOnly() {, +		return this.anonymousReadOnly;, +	}, +, +	public void setAnonymousReadOnly(boolean anonymousReadOnly) {, +		this.anonymousReadOnly = anonymousReadOnly;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, + * Copyright 2012-2018 the original author or authors., +	/**, +	 * Whether read-only operations should use an anonymous environment., +	 */, +	private boolean anonymousReadOnly;, +, +	public boolean getAnonymousReadOnly() {, +		return this.anonymousReadOnly;, +	}, +, +	public void setAnonymousReadOnly(boolean anonymousReadOnly) {, +		this.anonymousReadOnly = anonymousReadOnly;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java, +	@Test, +	public void testContextSourceWithDefaultAnonymousReadOnly() {, +		this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123"), +				.run(context -> {, +					LdapContextSource contextSource = context.getBean(LdapContextSource.class);, +					assertThat(contextSource.isAnonymousReadOnly()).isFalse();, +				});, +	}, +]