[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +import org.junit.Before;, +import org.mockito.Mockito;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationEventPublisher;, +import org.springframework.security.authentication.BadCredentialsException;, +import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;, +import org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent;, +import org.springframework.security.authentication.event.AuthenticationSuccessEvent;, +import org.springframework.security.core.authority.AuthorityUtils;, +import org.springframework.security.core.userdetails.User;, +import org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Mockito.verify;, +	private AuthenticationAuditListener listener = new AuthenticationAuditListener();, +, +	private ApplicationEventPublisher publisher = Mockito, +			.mock(ApplicationEventPublisher.class);, +, +	@Before, +	public void init() {, +		this.listener.setApplicationEventPublisher(this.publisher);, +	}, +	public void testAuthenticationSuccess() {, +		this.listener.onApplicationEvent(new AuthenticationSuccessEvent(, +				new UsernamePasswordAuthenticationToken("user", "password")));, +		verify(this.publisher).publishEvent((ApplicationEvent) anyObject());, +	}, +, +	@Test, +	public void testAuthenticationFailed() {, +		this.listener.onApplicationEvent(new AuthenticationFailureExpiredEvent(, +				new UsernamePasswordAuthenticationToken("user", "password"),, +				new BadCredentialsException("Bad user")));, +		verify(this.publisher).publishEvent((ApplicationEvent) anyObject());, +	}, +, +	@Test, +	public void testAuthenticationSwitch() {, +		this.listener.onApplicationEvent(new AuthenticationSwitchUserEvent(, +				new UsernamePasswordAuthenticationToken("user", "password"), new User(, +						"user", "password", AuthorityUtils, +								.commaSeparatedStringToAuthorityList("USER"))));, +		verify(this.publisher).publishEvent((ApplicationEvent) anyObject());]