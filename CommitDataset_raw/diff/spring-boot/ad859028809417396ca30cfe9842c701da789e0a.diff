[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +	@Configuration, +	static class JdbcTemplateConfiguration {, +, +		JdbcTemplateConfiguration(DataSource dataSource) {, +	}, +, +	@Configuration, +	@Import(JdbcTemplateConfiguration.class), +	static class NamedParameterJdbcTemplateConfiguration {, +, +		@ConditionalOnSingleCandidate(JdbcTemplate.class), +		public NamedParameterJdbcTemplate namedParameterJdbcTemplate(JdbcTemplate jdbcTemplate) {, +			return new NamedParameterJdbcTemplate(jdbcTemplate);, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +	@Configuration, +	static class JdbcTemplateConfiguration {, +, +		JdbcTemplateConfiguration(DataSource dataSource) {, +	}, +, +	@Configuration, +	@Import(JdbcTemplateConfiguration.class), +	static class NamedParameterJdbcTemplateConfiguration {, +, +		@ConditionalOnSingleCandidate(JdbcTemplate.class), +		public NamedParameterJdbcTemplate namedParameterJdbcTemplate(JdbcTemplate jdbcTemplate) {, +			return new NamedParameterJdbcTemplate(jdbcTemplate);, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfigurationTests.java, +import org.springframework.context.annotation.Primary;, +import static org.mockito.Mockito.mock;, +		assertThat(this.context.getBeansOfType(JdbcOperations.class)).hasSize(1);, +		assertThat(this.context.getBeansOfType(JdbcOperations.class)).hasSize(1);, +		NamedParameterJdbcTemplate namedParameterJdbcTemplate = this.context.getBean(, +				NamedParameterJdbcTemplate.class);, +		assertThat(namedParameterJdbcTemplate.getJdbcOperations()).isEqualTo(, +				this.context.getBean(JdbcOperations.class));, +	public void testMultiJdbcTemplate() {, +		load(MultiJdbcTemplateConfiguration.class);, +		assertThat(this.context.getBeansOfType(NamedParameterJdbcOperations.class)), +				.isEmpty();, +	}, +, +	@Test, +	public void testMultiJdbcTemplateUsingPrimary() {, +		load(MultiJdbcTemplateUsingPrimaryConfiguration.class);, +		assertThat(this.context.getBeansOfType(NamedParameterJdbcOperations.class)), +				.hasSize(1);, +		assertThat(this.context.getBean(NamedParameterJdbcTemplate.class), +				.getJdbcOperations()).isEqualTo(this.context.getBean("test1Template"));, +	}, +, +	@Test, +	@Configuration, +	static class MultiJdbcTemplateConfiguration {, +, +		@Bean, +		public JdbcTemplate test1Template() {, +			return mock(JdbcTemplate.class);, +		}, +, +		@Bean, +		public JdbcTemplate test2Template() {, +			return mock(JdbcTemplate.class);, +		}, +, +	}, +, +	@Configuration, +	static class MultiJdbcTemplateUsingPrimaryConfiguration {, +, +		@Bean, +		@Primary, +		public JdbcTemplate test1Template() {, +			return mock(JdbcTemplate.class);, +		}, +, +		@Bean, +		public JdbcTemplate test2Template() {, +			return mock(JdbcTemplate.class);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +	@Configuration, +	static class JdbcTemplateConfiguration {, +, +		JdbcTemplateConfiguration(DataSource dataSource) {, +	}, +, +	@Configuration, +	@Import(JdbcTemplateConfiguration.class)]