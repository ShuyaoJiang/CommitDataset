[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitializer.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.atomic.AtomicLong;, +, + * {@link ApplicationContextInitializer} that sets the Spring, + * {@link ApplicationContext#getId() ApplicationContext ID}. The, + * {@code spring.application.name} property is used to create the ID. If the property is, + * not set {@code application} is used., + * @author Andy Wilkinson, +		ContextId contextId = getContextId(applicationContext);, +		applicationContext.setId(contextId.getId());, +		applicationContext.getBeanFactory().registerSingleton(ContextId.class.getName(),, +				contextId);, +	}, +, +	private ContextId getContextId(ConfigurableApplicationContext applicationContext) {, +		ApplicationContext parent = applicationContext.getParent();, +		if (parent != null && parent.containsBean(ContextId.class.getName())) {, +			return parent.getBean(ContextId.class).createChildId();, +		}, +		return new ContextId(getApplicationId(applicationContext.getEnvironment()));, +		String name = environment.getProperty("spring.application.name");, +		return StringUtils.hasText(name) ? name : "application";, +, +	/**, +	 * The ID of a context., +	 */, +	class ContextId {, +, +		private final AtomicLong children = new AtomicLong(0);, +, +		private final String id;, +, +		ContextId(String id) {, +			this.id = id;, +, +		ContextId createChildId() {, +			return new ContextId(this.id + "-" + this.children.incrementAndGet());, +		}, +, +		String getId() {, +			return this.id;, +		}, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitializer.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.atomic.AtomicLong;, +, + * {@link ApplicationContextInitializer} that sets the Spring, + * {@link ApplicationContext#getId() ApplicationContext ID}. The, + * {@code spring.application.name} property is used to create the ID. If the property is, + * not set {@code application} is used., + * @author Andy Wilkinson, +		ContextId contextId = getContextId(applicationContext);, +		applicationContext.setId(contextId.getId());, +		applicationContext.getBeanFactory().registerSingleton(ContextId.class.getName(),, +				contextId);, +	}, +, +	private ContextId getContextId(ConfigurableApplicationContext applicationContext) {, +		ApplicationContext parent = applicationContext.getParent();, +		if (parent != null && parent.containsBean(ContextId.class.getName())) {, +			return parent.getBean(ContextId.class).createChildId();, +		}, +		return new ContextId(getApplicationId(applicationContext.getEnvironment()));, +		String name = environment.getProperty("spring.application.name");, +		return StringUtils.hasText(name) ? name : "application";, +, +	/**, +	 * The ID of a context., +	 */, +	class ContextId {, +, +		private final AtomicLong children = new AtomicLong(0);, +, +		private final String id;, +, +		ContextId(String id) {, +			this.id = id;, +, +		ContextId createChildId() {, +			return new ContextId(this.id + "-" + this.children.incrementAndGet());, +		}, +, +		String getId() {, +			return this.id;, +		}, +, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitializer.java, + * Copyright 2012-2018 the original author or authors., +import java.util.concurrent.atomic.AtomicLong;, +, + * {@link ApplicationContextInitializer} that sets the Spring, + * {@link ApplicationContext#getId() ApplicationContext ID}. The, + * {@code spring.application.name} property is used to create the ID. If the property is]