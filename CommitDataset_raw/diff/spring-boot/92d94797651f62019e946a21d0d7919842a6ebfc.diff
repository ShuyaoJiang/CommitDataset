[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, LiquibaseProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, LiquibaseProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +	public void flywayDataSourceWithoutDataSourceAutoConfiguration() {, +		this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Flyway.class);, +					assertThat(context.getBean(Flyway.class).getDataSource()), +							.isEqualTo(context.getBean("flywayDataSource"));, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, LiquibaseProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +	public void flywayDataSourceWithoutDataSourceAutoConfiguration() {, +		this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Flyway.class);, +					assertThat(context.getBean(Flyway.class).getDataSource()), +							.isEqualTo(context.getBean("flywayDataSource"));, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +	@Test, +	public void liquibaseDataSourceWithoutDataSourceAutoConfiguration() {, +		this.contextRunner, +				.withUserConfiguration(LiquibaseDataSourceConfiguration.class), +				.run((context) -> {, +					SpringLiquibase liquibase = context.getBean(SpringLiquibase.class);, +					assertThat(liquibase.getDataSource()), +							.isEqualTo(context.getBean("liquibaseDataSource"));, +				});, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, FlywayProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +	@EnableConfigurationProperties({ DataSourceProperties.class, LiquibaseProperties.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java, +	public void flywayDataSourceWithoutDataSourceAutoConfiguration() {, +		this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Flyway.class);, +					assertThat(context.getBean(Flyway.class).getDataSource()), +							.isEqualTo(context.getBean("flywayDataSource"));, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +	@Test, +	public void liquibaseDataSourceWithoutDataSourceAutoConfiguration() {, +		this.contextRunner, +				.withUserConfiguration(LiquibaseDataSourceConfiguration.class), +				.run((context) -> {, +					SpringLiquibase liquibase = context.getBean(SpringLiquibase.class);, +					assertThat(liquibase.getDataSource()), +							.isEqualTo(context.getBean("liquibaseDataSource"));, +				});, +	}, +, +++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/AbstractDevToolsDataSourceAutoConfigurationTests.java]