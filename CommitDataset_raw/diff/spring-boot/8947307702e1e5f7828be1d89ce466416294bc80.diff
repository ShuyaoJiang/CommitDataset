[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a, + * Runner will be created and all jobs in the context will be executed on startup., + * Alternatively, discrete Job names to execute on startup can be supplied by the User, + * with a comma-delimited list: <code>spring.batch.job.names=job1,job2</code>. In this, + * case the Runner will first find jobs registered as Beans, then those in the existing, + * JobRegistry., +	public JobLauncherCommandLineRunner jobLauncherCommandLineRunner(, +			JobLauncher jobLauncher, JobExplorer jobExplorer) {, +		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(, +				jobLauncher, jobExplorer);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default a, + * Runner will be created and all jobs in the context will be executed on startup., + * Alternatively, discrete Job names to execute on startup can be supplied by the User, + * with a comma-delimited list: <code>spring.batch.job.names=job1,job2</code>. In this, + * case the Runner will first find jobs registered as Beans, then those in the existing, + * JobRegistry., +	public JobLauncherCommandLineRunner jobLauncherCommandLineRunner(, +			JobLauncher jobLauncher, JobExplorer jobExplorer) {, +		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(, +				jobLauncher, jobExplorer);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import org.springframework.batch.core.BatchStatus;, +import org.springframework.batch.core.JobInstance;, +import org.springframework.batch.core.JobParameter;, +import org.springframework.batch.core.JobParametersIncrementer;, +import org.springframework.batch.core.explore.JobExplorer;, +import org.springframework.batch.core.launch.JobParametersNotFoundException;, +	private JobParametersConverter converter = new DefaultJobParametersConverter();, +	private JobExplorer jobExplorer;, +	private Collection<Job> jobs = Collections.emptySet();, +	public JobLauncherCommandLineRunner(JobLauncher jobLauncher, JobExplorer jobExplorer) {, +		this.jobLauncher = jobLauncher;, +		this.jobExplorer = jobExplorer;, +	}, +, +	@Autowired(required = false), +	public void setJobRegistry(JobRegistry jobRegistry) {, +		this.jobRegistry = jobRegistry;, +	}, +, +	@Autowired(required = false), +	public void setJobParametersConverter(JobParametersConverter converter) {, +		this.converter = converter;, +	}, +, +	@Autowired(required = false), +	public void setJobs(Collection<Job> jobs) {, +		this.jobs = jobs;, +	}, +, +	private JobParameters getNextJobParameters(Job job, JobParameters additionalParameters) {, +, +		String jobIdentifier = job.getName();, +		JobParameters jobParameters = new JobParameters();, +		List<JobInstance> lastInstances = this.jobExplorer.getJobInstances(jobIdentifier,, +				0, 1);, +, +		JobParametersIncrementer incrementer = job.getJobParametersIncrementer();, +, +		Map<String, JobParameter> additionals = additionalParameters.getParameters();, +		if (lastInstances.isEmpty()) {, +			// Start from a completely clean sheet, +			if (incrementer != null) {, +				jobParameters = incrementer.getNext(new JobParameters());, +			}, +		}, +		else {, +			List<JobExecution> lastExecutions = this.jobExplorer, +					.getJobExecutions(lastInstances.get(0));, +			JobExecution previousExecution = lastExecutions.get(0);, +			if (previousExecution == null) {, +				// Normally this will not happen - an instance exists with no executions, +				if (incrementer != null) {, +					jobParameters = incrementer.getNext(new JobParameters());, +				}, +			}, +			else if (previousExecution.getStatus() == BatchStatus.STOPPED, +					|| previousExecution.getStatus() == BatchStatus.FAILED) {, +				// Retry a failed or stopped execution, +				jobParameters = previousExecution.getJobParameters();, +				for (Entry<String, JobParameter> parameter : additionals.entrySet()) {, +					// Non-identifying additional parameters can be added to a retry, +					if (!parameter.getValue().isIdentifying()) {, +						additionals.remove(parameter.getKey());, +					}, +				}, +			}, +			else if (incrementer != null) {, +				// New instance so increment the parameters if we can, +				if (incrementer != null) {, +					jobParameters = incrementer.getNext(previousExecution, +							.getJobParameters());, +				}, +			}]