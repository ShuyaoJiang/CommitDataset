[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.util.StringUtils;, +public class MetricExportProperties extends Trigger {, +	private Map<String, SpecificTrigger> triggers = new LinkedHashMap<String, SpecificTrigger>();, +	private Redis redis = new Redis();, +	public Trigger getDefault() {, +		return this;, +	public Map<String, SpecificTrigger> getTriggers() {, +		return this.triggers;, +	}, +, +	public Redis getRedis() {, +		return redis;, +	}, +, +	public void setRedis(Redis redis) {, +		this.redis = redis;, +		Trigger defaults = this;, +		for (Entry<String, SpecificTrigger> entry : this.triggers.entrySet()) {, +			SpecificTrigger value = entry.getValue();, +		for (Trigger value : this.triggers.values()) {, +	/**, +	 * Find a matching trigger configuration., +	 * @param name the bean name to match, +	 * @return a matching configuration if there is one, +	 */, +	public Trigger findTrigger(String name) {, +		for (SpecificTrigger value : this.triggers.values()) {, +			if (PatternMatchUtils.simpleMatch(value.getNames(), name)) {, +				return value;, +			}, +		}, +		return this;, +	}, +	, +	/**, +	 * Trigger for specific bean names., +	 */, +	public static class SpecificTrigger extends Trigger {, +, +, +		public String[] getNames() {, +			return this.names;, +		}, +, +		public void setNames(String[] names) {, +			this.names = names;, +		}, +, +	}, +, +	public static class Redis {, +, +		/**, +		 * Prefix for redis repository if active. Should be unique for this JVM, but most, +		 * useful if it also has the form "x.y.a.b" where "x.y" is globally unique across, +		 * all processes sharing the same repository, "a" is unique to this physical, +		 * process and "b" is unique to this logical process (this application). If you, +		 * set spring.application.name elsewhere, then the default will be in the right, +		 * form., +		 */, +		@Value("spring.metrics.${random.value:0000}.${spring.application.name:application}"), +		private String prefix = "spring.metrics";, +, +		/**, +		 * Key for redis repository export (if active). Should be globally unique for a, +		 * system sharing a redis repository., +		 */, +		private String key = "keys.spring.metrics";, +, +		public String getPrefix() {, +			return prefix;, +		}, +, +		public void setPrefix(String prefix) {, +			this.prefix = prefix;, +		}, +, +		public String getKey() {, +			return key;, +		}, +, +		public void setKey(String key) {, +			this.key = key;, +		}, +, +		public String getAggregatePrefix() {, +			String[] tokens = StringUtils.delimitedListToStringArray(this.prefix, ".");, +			if (tokens.length > 1) {, +				if (StringUtils.hasText(tokens[1])) {, +					// If the prefix has 2 or more non-trivial parts, use the first 1, +					return tokens[0];, +				}, +			}, +			return this.prefix;, +		}, +, +	}, +]