[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, +	private static final String ENABLED_PROPERTY = "spring.devtools.restart.enabled";, +, +			onApplicationStartedEvent((ApplicationStartedEvent) event);, +	private void onApplicationStartedEvent(ApplicationStartedEvent event) {, +		// It's too early to use the Spring environment but we should still allow, +		// users to disable restart using a System property., +		String enabled = System.getProperty(ENABLED_PROPERTY);, +		if (enabled == null || Boolean.parseBoolean(enabled)) {, +			Restarter.initialize(event.getArgs());, +		}, +		else {, +			Restarter.disable();, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, +	private static final String ENABLED_PROPERTY = "spring.devtools.restart.enabled";, +, +			onApplicationStartedEvent((ApplicationStartedEvent) event);, +	private void onApplicationStartedEvent(ApplicationStartedEvent event) {, +		// It's too early to use the Spring environment but we should still allow, +		// users to disable restart using a System property., +		String enabled = System.getProperty(ENABLED_PROPERTY);, +		if (enabled == null || Boolean.parseBoolean(enabled)) {, +			Restarter.initialize(event.getArgs());, +		}, +		else {, +			Restarter.disable();, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +	private static final String[] NO_ARGS = {};, +, +	private boolean enabled = true;, +, +	 * Set if restart support is enabled., +	 * @param enabled if restart support is enabled, +	 */, +	private void setEnabled(boolean enabled) {, +		this.enabled = false;, +	}, +, +	/**, +		if (!this.enabled) {, +			this.logger.debug("Application restart is disabled");, +			return;, +		}, +	 * Initialize and disable restart support., +	 */, +	public static void disable() {, +		initialize(NO_ARGS, false, RestartInitializer.NONE);, +		getInstance().setEnabled(false);, +	}, +, +	/**, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/RestartApplicationListener.java, +	private static final String ENABLED_PROPERTY = "spring.devtools.restart.enabled";, +, +			onApplicationStartedEvent((ApplicationStartedEvent) event);, +	private void onApplicationStartedEvent(ApplicationStartedEvent event) {, +		// It's too early to use the Spring environment but we should still allow, +		// users to disable restart using a System property., +		String enabled = System.getProperty(ENABLED_PROPERTY);, +		if (enabled == null || Boolean.parseBoolean(enabled)) {, +			Restarter.initialize(event.getArgs());, +		}, +		else {, +			Restarter.disable();, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +	private static final String[] NO_ARGS = {};, +, +	private boolean enabled = true;, +, +	 * Set if restart support is enabled., +	 * @param enabled if restart support is enabled, +	 */, +	private void setEnabled(boolean enabled) {, +		this.enabled = false;, +	}, +, +	/**, +		if (!this.enabled) {, +			this.logger.debug("Application restart is disabled");, +			return;, +		}, +	 * Initialize and disable restart support., +	 */, +	public static void disable() {, +		initialize(NO_ARGS, false, RestartInitializer.NONE);, +		getInstance().setEnabled(false);, +	}, +, +	/**, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestartApplicationListenerTests.java, +	private static final String ENABLED_PROPERTY = "spring.devtools.restart.enabled";]