[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.util.StringUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default all, + * jobs in the context will be executed on startup (disable this behaviour with, + * <code>spring.boot.exec.enabled=false</code>). User can supply a job name to execute on, + * startup with <code>spring.batch.exec.name=...</code>., +	@Value("${spring.batch.job.name:}"), +	private String jobName;, +, +	@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class), +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();, +		if (StringUtils.hasText(this.jobName)) {, +			runner.setJobName(this.jobName);, +		}, +		return runner;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.util.StringUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default all, + * jobs in the context will be executed on startup (disable this behaviour with, + * <code>spring.boot.exec.enabled=false</code>). User can supply a job name to execute on, + * startup with <code>spring.batch.exec.name=...</code>., +	@Value("${spring.batch.job.name:}"), +	private String jobName;, +, +	@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class), +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();, +		if (StringUtils.hasText(this.jobName)) {, +			runner.setJobName(this.jobName);, +		}, +		return runner;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import org.springframework.batch.core.JobParameters;, +import org.springframework.batch.core.configuration.JobRegistry;, +import org.springframework.util.PatternMatchUtils;, + * {@link CommandLineRunner} to {@link JobLauncher launch} Spring Batch jobs. Runs all, + * jobs in the surrounding context by default. Can also be used to launch a specific job, + * by providing a jobName, +	private JobRegistry jobRegistry;, +, +	private String jobName;, +, +	@Autowired(required = false), +	public void setJobName(String jobName) {, +		this.jobName = jobName;, +	}, +, +		JobParameters jobParameters = this.converter.getJobParameters(properties);, +		executeRegisteredJobs(jobParameters);, +		executeLocalJobs(jobParameters);, +	}, +, +	private void executeRegisteredJobs(JobParameters jobParameters), +			throws JobExecutionException {, +		if (this.jobRegistry != null && StringUtils.hasText(this.jobName)) {, +			Job job = this.jobRegistry.getJob(this.jobName);, +			JobExecution execution = this.jobLauncher.run(job, jobParameters);, +, +	private void executeLocalJobs(JobParameters jobParameters), +			throws JobExecutionException {, +		for (Job job : this.jobs) {, +			if (StringUtils.hasText(this.jobName)) {, +				if (!PatternMatchUtils.simpleMatch(this.jobName, job.getName())) {, +					logger.debug("Skipped job: " + job.getName());, +					continue;, +				}, +			}, +			JobExecution execution = this.jobLauncher.run(job, jobParameters);, +			if (this.publisher != null) {, +				this.publisher.publishEvent(new JobExecutionEvent(execution));, +			}, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;, +import org.springframework.util.StringUtils;, + * {@link EnableAutoConfiguration Auto-configuration} for Spring Batch. By default all, + * jobs in the context will be executed on startup (disable this behaviour with, + * <code>spring.boot.exec.enabled=false</code>). User can supply a job name to execute on, + * startup with <code>spring.batch.exec.name=...</code>., +	@Value("${spring.batch.job.name:}"), +	private String jobName;, +, +	@ConditionalOnMissingBean(JobLauncherCommandLineRunner.class), +	@ConditionalOnExpression("${spring.batch.job.enabled:true}"), +		JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner();, +		if (StringUtils.hasText(this.jobName)) {, +			runner.setJobName(this.jobName);, +		}, +		return runner;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +import org.springframework.batch.core.JobParameters;, +import org.springframework.batch.core.configuration.JobRegistry;]