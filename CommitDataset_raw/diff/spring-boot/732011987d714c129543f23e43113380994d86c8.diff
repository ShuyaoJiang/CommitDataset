[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextConfigurationsImportSelector.java, + * Copyright 2012-2017 the original author or authors., +import java.util.Set;, +import org.springframework.util.ClassUtils;, +		List<String> names = loadFactoryNames();, +		Set<Class<?>> classes = new LinkedHashSet<Class<?>>();, +		for (String factoryName : names) {, +			classes.add(ClassUtils.resolveClassName(factoryName, this.classLoader));, +		}, +		return getSortedClassNames(new ArrayList<Class<?>>(classes));, +	}, +, +	protected List<String> loadFactoryNames() {, +		return SpringFactoriesLoader, +				.loadFactoryNames(ManagementContextConfiguration.class, this.classLoader);, +	}, +, +	private String[] getSortedClassNames(List<Class<?>> classes) {, +		AnnotationAwareOrderComparator.sort(classes);, +		List<String> names = new ArrayList<String>();, +		for (Class<?> sourceClass : classes) {, +			names.add(sourceClass.getName());, +		}, +		return names.toArray(new String[names.size()]);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementContextConfigurationsImportSelector.java, + * Copyright 2012-2017 the original author or authors., +import java.util.Set;, +import org.springframework.util.ClassUtils;, +		List<String> names = loadFactoryNames();, +		Set<Class<?>> classes = new LinkedHashSet<Class<?>>();, +		for (String factoryName : names) {, +			classes.add(ClassUtils.resolveClassName(factoryName, this.classLoader));, +		}, +		return getSortedClassNames(new ArrayList<Class<?>>(classes));, +	}, +, +	protected List<String> loadFactoryNames() {, +		return SpringFactoriesLoader, +				.loadFactoryNames(ManagementContextConfiguration.class, this.classLoader);, +	}, +, +	private String[] getSortedClassNames(List<Class<?>> classes) {, +		AnnotationAwareOrderComparator.sort(classes);, +		List<String> names = new ArrayList<String>();, +		for (Class<?> sourceClass : classes) {, +			names.add(sourceClass.getName());, +		}, +		return names.toArray(new String[names.size()]);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementContextConfigurationsImportSelectorTests.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure;, +, +import java.util.Arrays;, +import java.util.List;, +, +import org.junit.Test;, +, +import org.springframework.core.annotation.Order;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link ManagementContextConfigurationsImportSelector}., + *, + * @author Phillip Webb, + */, +public class ManagementContextConfigurationsImportSelectorTests {, +, +	@Test, +	public void selectImportsShouldOrderResult() throws Exception {, +		String[] imports = new TestManagementContextConfigurationsImportSelector(), +				.selectImports(null);, +		assertThat(imports).containsExactly(A.class.getName(), B.class.getName(),, +				C.class.getName());, +	}, +, +	private static class TestManagementContextConfigurationsImportSelector, +			extends ManagementContextConfigurationsImportSelector {, +, +		@Override, +		protected List<String> loadFactoryNames() {, +			return Arrays.asList(C.class.getName(), A.class.getName(), B.class.getName());, +		}, +, +	}]