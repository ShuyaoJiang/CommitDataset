[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +import java.util.Iterator;, +			PropertySources propertySources = configurer.getAppliedPropertySources();, +			// Flatten the sources into a single list so they can be iterated, +			return new FlatPropertySources(propertySources);, +			MutablePropertySources propertySources = ((ConfigurableEnvironment) this.environment), +					.getPropertySources();, +			return new FlatPropertySources(propertySources);, +	/**, +	 * Convenience class to flatten out a tree of property sources without losing the, +	 * reference to the backing data (which can therefore be updated in the background)., +	 * , +	 * @param propertySources some PropertySources, possibly containing environment, +	 * properties, +	 * @return another PropertySources containing the same properties, +	 */, +	private static class FlatPropertySources implements PropertySources {, +, +		private PropertySources propertySources;, +, +		public FlatPropertySources(PropertySources propertySources) {, +			this.propertySources = propertySources;, +		}, +, +		@Override, +		public Iterator<PropertySource<?>> iterator() {, +			MutablePropertySources result = getFlattened();, +			return result.iterator();, +		}, +, +		@Override, +		public boolean contains(String name) {, +			return get(name) != null;, +		}, +, +		@Override, +		public PropertySource<?> get(String name) {, +			return getFlattened().get(name);, +		}, +, +		private MutablePropertySources getFlattened() {, +			MutablePropertySources result = new MutablePropertySources();, +			for (PropertySource<?> propertySource : propertySources) {, +				flattenPropertySources(propertySource, result);, +			}, +			return result;, +		}, +, +		private void flattenPropertySources(PropertySource<?> propertySource,, +				MutablePropertySources result) {, +			Object source = propertySource.getSource();, +			if (source instanceof ConfigurableEnvironment) {, +				ConfigurableEnvironment environment = (ConfigurableEnvironment) source;, +				for (PropertySource<?> childSource : environment.getPropertySources()) {, +					flattenPropertySources(childSource, result);, +				}, +			}, +			else {, +				result.addLast(propertySource);, +			}, +		}, +, +	}, +]