[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +			configureEnvironment(environment, args);, +	 * Template method delegating to, +	 * {@link #configurePropertySources(ConfigurableEnvironment, String[])} and, +	 * {@link #configureProfiles(ConfigurableEnvironment, String[])} in that order. Override, +	 * this method for complete control over Environment customization, or one of the above, +	 * for fine-grained control over property sources or profiles, respectively., +	 * @param environment this application's environment, +	 * @param args arguments passed to the {@code run} method, +	 * @see #configurePropertySources(ConfigurableEnvironment, String[]), +	 * @see #configureProfiles(ConfigurableEnvironment, String[]), +	protected void configureEnvironment(ConfigurableEnvironment environment, String[] args) {, +		configurePropertySources(environment, args);, +		configureProfiles(environment, args);, +	}, +, +	/**, +	 * Add, remove or re-order any {@link PropertySource}s in this application's environment., +	 * @param environment this application's environment, +	 * @param args arguments passed to the {@code run} method, +	 * @see #configureEnvironment(ConfigurableEnvironment, String[]), +	 */, +	protected void configurePropertySources(ConfigurableEnvironment environment, String[] args) {, +	 * Configure which profiles are active (or active by default) for this application environment., +	 * Consider overriding this method to programmatically enforce profile rules and semantics,, +	 * such as ensuring mutual exclusivity of profiles (e.g. 'dev' OR 'prod', but never both)., +	 * @param environment this application's environment, +	 * @param args arguments passed to the {@code run} method, +	 * @see #configureEnvironment(ConfigurableEnvironment, String[]), +	protected void configureProfiles(ConfigurableEnvironment environment, String[] args) {]