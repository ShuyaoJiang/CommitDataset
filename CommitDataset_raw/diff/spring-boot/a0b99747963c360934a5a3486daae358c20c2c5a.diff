[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/AbstractCouchbaseAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/AbstractCouchbaseAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationIntegrationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +public class CouchbaseAutoConfigurationIntegrationTests {, +, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +					CouchbaseAutoConfiguration.class));, +		this.contextRunner, +				.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Cluster.class), +							.hasSingleBean(ClusterInfo.class), +							.hasSingleBean(CouchbaseEnvironment.class), +							.hasSingleBean(Bucket.class);, +				});, +		this.contextRunner, +				.withUserConfiguration(CustomConfiguration.class), +				.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> {, +					assertThat(context.getBeansOfType(Cluster.class)).hasSize(2);, +					assertThat(context.getBeansOfType(ClusterInfo.class)).hasSize(1);, +					assertThat(context.getBeansOfType(CouchbaseEnvironment.class)).hasSize(1);, +					assertThat(context.getBeansOfType(Bucket.class)).hasSize(2);, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/AbstractCouchbaseAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationIntegrationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +public class CouchbaseAutoConfigurationIntegrationTests {, +, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +					CouchbaseAutoConfiguration.class));, +		this.contextRunner, +				.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(Cluster.class), +							.hasSingleBean(ClusterInfo.class), +							.hasSingleBean(CouchbaseEnvironment.class), +							.hasSingleBean(Bucket.class);, +				});, +		this.contextRunner, +				.withUserConfiguration(CustomConfiguration.class), +				.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> {, +					assertThat(context.getBeansOfType(Cluster.class)).hasSize(2);, +					assertThat(context.getBeansOfType(ClusterInfo.class)).hasSize(1);, +					assertThat(context.getBeansOfType(CouchbaseEnvironment.class)).hasSize(1);, +					assertThat(context.getBeansOfType(Bucket.class)).hasSize(2);, +				});, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.function.Consumer;, +, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +public class CouchbaseAutoConfigurationTests {, +, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(PropertyPlaceholderAutoConfiguration.class,, +					CouchbaseAutoConfiguration.class));, +		this.contextRunner.run((context) -> {, +			assertNoCouchbaseBeans(context);, +		});, +		this.contextRunner.withUserConfiguration(CouchbaseTestConfigurer.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(CouchbaseTestConfigurer.class);, +					assertNoCouchbaseBeans(context);, +				});, +		this.contextRunner.withUserConfiguration(CouchbaseTestConfigurer.class), +				.withPropertyValues("spring.couchbase.bootstrapHosts=localhost"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(CouchbaseTestConfigurer.class);, +					assertNoCouchbaseBeans(context);, +				});, +	private void assertNoCouchbaseBeans(AssertableApplicationContext context) {, +		assertThat(context).doesNotHaveBean(CouchbaseEnvironment.class), +				.doesNotHaveBean(ClusterInfo.class), +				.doesNotHaveBean(Cluster.class), +				.doesNotHaveBean(Bucket.class);, +	public void customizeEnvEndpoints() {, +		testCouchbaseEnv(env -> {, +				},, +				"spring.couchbase.env.endpoints.keyValue=4",, +				"spring.couchbase.env.endpoints.query=5",, +				"spring.couchbase.env.endpoints.view=6");, +	public void customizeEnvTimeouts() {, +		testCouchbaseEnv(env -> {]