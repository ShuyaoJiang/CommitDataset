[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitialization.java, + * @since 1.1, +	private static Log logger = LogFactory.getLog(DataSourceInitialization.class);, +	@Autowired(required=false), +	public ApplicationListener<DataSourceInitializedEvent> dataSourceInitializedListener() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitialization.java, + * @since 1.1, +	private static Log logger = LogFactory.getLog(DataSourceInitialization.class);, +	@Autowired(required=false), +	public ApplicationListener<DataSourceInitializedEvent> dataSourceInitializedListener() {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +		if (context!=null) {, +			context.close();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitialization.java, + * @since 1.1, +	private static Log logger = LogFactory.getLog(DataSourceInitialization.class);, +	@Autowired(required=false), +	public ApplicationListener<DataSourceInitializedEvent> dataSourceInitializedListener() {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +		if (context!=null) {, +			context.close();, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializationTests.java, +/*, + * Copyright 2013-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.boot.autoconfigure.jdbc;, +, +import static org.junit.Assert.*;, +, +import java.util.Random;, +, +import javax.sql.DataSource;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.jdbc.core.JdbcOperations;, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.util.ClassUtils;, +, +/**, + * @author Dave Syer, + *, + */, +public class DataSourceInitializationTests {, +, +	private final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +, +	@Before, +	public void init() {, +		EmbeddedDatabaseConnection.override = null;, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.initialize:false",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt());, +	}, +, +	@After, +	public void restore() {, +		EmbeddedDatabaseConnection.override = null;, +		if (context!=null) {, +			context.close();, +		}, +	}, +, +	@Test, +	public void testDefaultDataSourceDoesNotExists() throws Exception {, +		this.context.register(DataSourceInitialization.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(0, this.context.getBeanNamesForType(DataSource.class).length);, +	}, +, +	@Test]