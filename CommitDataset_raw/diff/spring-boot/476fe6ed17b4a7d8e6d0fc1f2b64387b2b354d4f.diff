[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java, +import org.hibernate.SessionFactory;, +@ConditionalOnClass({ EntityManagerFactory.class, SessionFactory.class,, +		MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfiguration.java, +import org.hibernate.SessionFactory;, +@ConditionalOnClass({ EntityManagerFactory.class, SessionFactory.class,, +		MeterRegistry.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/orm/jpa/HibernateMetricsAutoConfigurationTests.java, +import org.springframework.boot.test.context.FilteredClassLoader;, + * @author Stephane Nicoll, +	@Test, +	public void entityManagerFactoryInstrumentationIsDisabledIfHibernateIsNotAvailable() {, +		this.contextRunner.withClassLoader(new FilteredClassLoader(SessionFactory.class)), +				.withUserConfiguration(, +						NonHibernateEntityManagerFactoryConfiguration.class), +				.run((context) -> {, +					assertThat(context), +							.doesNotHaveBean(HibernateMetricsAutoConfiguration.class);, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					assertThat(registry.find("hibernate.statements").meter()).isNull();, +				});, +	}, +]