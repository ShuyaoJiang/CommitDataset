[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, + * @author Toshiaki Maki, +		StandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();, +		multipartResolver.setResolveLazily(multipartProperties.isResolveLazily());, +		return multipartResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, + * @author Toshiaki Maki, +		StandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();, +		multipartResolver.setResolveLazily(multipartProperties.isResolveLazily());, +		return multipartResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * @author Toshiaki Maki, +	/**, +	 * Whether to resolve the multipart request lazily at the time of file or parameter, +	 * access., +	 */, +	private boolean resolveLazily = false;, +, +	public boolean isResolveLazily() {, +		return resolveLazily;, +	}, +, +	public void setResolveLazily(boolean resolveLazily) {, +		this.resolveLazily = resolveLazily;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, + * @author Toshiaki Maki, +		StandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();, +		multipartResolver.setResolveLazily(multipartProperties.isResolveLazily());, +		return multipartResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * @author Toshiaki Maki, +	/**, +	 * Whether to resolve the multipart request lazily at the time of file or parameter, +	 * access., +	 */, +	private boolean resolveLazily = false;, +, +	public boolean isResolveLazily() {, +		return resolveLazily;, +	}, +, +	public void setResolveLazily(boolean resolveLazily) {, +		this.resolveLazily = resolveLazily;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfigurationTests.java, +import org.springframework.test.util.ReflectionTestUtils;, + * @author Toshiaki Maki, +	@Test, +	public void configureResolveLazily() {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.http.multipart.resolve-lazily=true");, +		this.context.register(ContainerWithNothing.class, BaseConfiguration.class);, +		this.context.refresh();, +		StandardServletMultipartResolver multipartResolver = this.context, +				.getBean(StandardServletMultipartResolver.class);, +		boolean resolveLazily = (Boolean) ReflectionTestUtils.getField(multipartResolver,, +				"resolveLazily");, +		assertThat(resolveLazily).isTrue();, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, + * @author Toshiaki Maki, +		StandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();, +		multipartResolver.setResolveLazily(multipartProperties.isResolveLazily());, +		return multipartResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProperties.java, + * @author Toshiaki Maki, +	/**, +	 * Whether to resolve the multipart request lazily at the time of file or parameter, +	 * access., +	 */, +	private boolean resolveLazily = false;, +, +	public boolean isResolveLazily() {, +		return resolveLazily;, +	}, +, +	public void setResolveLazily(boolean resolveLazily) {, +		this.resolveLazily = resolveLazily;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfigurationTests.java, +import org.springframework.test.util.ReflectionTestUtils;, + * @author Toshiaki Maki, +	@Test, +	public void configureResolveLazily() {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.http.multipart.resolve-lazily=true");, +		this.context.register(ContainerWithNothing.class, BaseConfiguration.class);, +		this.context.refresh();, +		StandardServletMultipartResolver multipartResolver = this.context, +				.getBean(StandardServletMultipartResolver.class);, +		boolean resolveLazily = (Boolean) ReflectionTestUtils.getField(multipartResolver,, +				"resolveLazily");, +		assertThat(resolveLazily).isTrue();]