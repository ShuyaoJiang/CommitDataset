[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValuePropertySource` that only has properties in `random.*`., +The `RandomValuePropertySource` is useful for injecting random values, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValuePropertySource` that only has properties in `random.*`., +The `RandomValuePropertySource` is useful for injecting random values, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * {@code @PropertySource} items added by the {@link ConfigurationClassPostProcessor}., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValuePropertySource` that only has properties in `random.*`., +The `RandomValuePropertySource` is useful for injecting random values, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * {@code @PropertySource} items added by the {@link ConfigurationClassPostProcessor}., +++ b/spring-boot/src/main/resources/META-INF/spring.factories, +# PropertySource Loaders, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValuePropertySource` that only has properties in `random.*`., +The `RandomValuePropertySource` is useful for injecting random values, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +	 * {@code @PropertySource} items added by the {@link ConfigurationClassPostProcessor}., +++ b/spring-boot/src/main/resources/META-INF/spring.factories, +# PropertySource Loaders, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +		assertThat(this.environment, containsPropertySource("applicationConfig: ", +		assertThat(this.environment, containsPropertySource("applicationConfig: ", +		assertThat(this.environment, containsPropertySource("applicationConfig: [", +		assertThat(this.environment, containsPropertySource("applicationConfig: [file:", +		assertThat(context.getEnvironment(), containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(), containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(), containsPropertySource("foo"));, +		assertThat(context.getEnvironment(), containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(), not(containsPropertySource("classpath:/", +		assertThat(context.getEnvironment(), not(containsPropertySource("classpath:", +		assertThat(context.getEnvironment(), containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(), containsPropertySource("foo"));, +	private static Matcher<? super ConfigurableEnvironment> containsPropertySource(]