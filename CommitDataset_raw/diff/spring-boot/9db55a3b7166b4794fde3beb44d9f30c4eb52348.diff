[+++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(PropertiesPropertySourceLoader.class);, +, +			// N.B. this is off by default unless user has supplied logback config in, +			// standard location, +			if (logger.isDebugEnabled()) {, +				logger.debug("Properties loaded from " + resource + ": " + properties);, +			}, +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(PropertiesPropertySourceLoader.class);, +, +			// N.B. this is off by default unless user has supplied logback config in, +			// standard location, +			if (logger.isDebugEnabled()) {, +				logger.debug("Properties loaded from " + resource + ": " + properties);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		super(classLoader, "logback-test.groovy", "logback-test.xml", "logback.groovy",, +				"logback.xml");, +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(PropertiesPropertySourceLoader.class);, +, +			// N.B. this is off by default unless user has supplied logback config in, +			// standard location, +			if (logger.isDebugEnabled()) {, +				logger.debug("Properties loaded from " + resource + ": " + properties);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		super(classLoader, "logback-test.groovy", "logback-test.xml", "logback.groovy",, +				"logback.xml");, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void proprtiesFileEnhancesEnvironment() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		application.run();, +		assertEquals("bucket", environment.getProperty("foo"));, +	}, +, +	@Test, +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(PropertiesPropertySourceLoader.class);, +, +			// N.B. this is off by default unless user has supplied logback config in, +			// standard location, +			if (logger.isDebugEnabled()) {, +				logger.debug("Properties loaded from " + resource + ": " + properties);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		super(classLoader, "logback-test.groovy", "logback-test.xml", "logback.groovy",, +				"logback.xml");, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void proprtiesFileEnhancesEnvironment() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		application.run();, +		assertEquals("bucket", environment.getProperty("foo"));, +	}, +, +	@Test, +++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializerTests.java, +		TestUtils.addEnviroment(this.context, "debug");, +++ b/spring-boot-samples/spring-boot-sample-xml/src/main/java/org/springframework/boot/sample/xml/SampleSpringXmlApplication.java, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(PropertiesPropertySourceLoader.class);, +, +			// N.B. this is off by default unless user has supplied logback config in, +			// standard location, +			if (logger.isDebugEnabled()) {, +				logger.debug("Properties loaded from " + resource + ": " + properties);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java, +		super(classLoader, "logback-test.groovy", "logback-test.xml", "logback.groovy",, +				"logback.xml");, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +	public void proprtiesFileEnhancesEnvironment() throws Exception {, +		SpringApplication application = new SpringApplication(ExampleConfig.class);, +		application.setWebEnvironment(false);, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		application.setEnvironment(environment);, +		application.run();, +		assertEquals("bucket", environment.getProperty("foo"));]