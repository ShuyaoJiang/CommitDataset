[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * Copyright 2012-2016 the original author or authors., + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or, + * if {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * Copyright 2012-2016 the original author or authors., + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or, + * if {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +	public static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +, +		if (match == null) {, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(, +					WEBJAR_ASSERT_LOCATOR, getClass().getClassLoader());, +			return new ConditionOutcome(webJarsLocatorPresent,, +					"Webjars locator (" + WEBJAR_ASSERT_LOCATOR + ") is ", +							+ (webJarsLocatorPresent ? "present" : "absent"));, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * Copyright 2012-2016 the original author or authors., + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or, + * if {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +	public static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +, +		if (match == null) {, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(, +					WEBJAR_ASSERT_LOCATOR, getClass().getClassLoader());, +			return new ConditionOutcome(webJarsLocatorPresent,, +					"Webjars locator (" + WEBJAR_ASSERT_LOCATOR + ") is ", +							+ (webJarsLocatorPresent ? "present" : "absent"));, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +		/**, +		 * Return whether the resource chain is enabled. Return {@code null} if no, +		 * specific settings are present., +		 */, +			// Check if at least one of the available strategy has been enabled, +			Boolean strategyEnabled = getStrategy().getFixed().isEnabled(), +			return (strategyEnabled ? Boolean.TRUE : this.enabled);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * Copyright 2012-2016 the original author or authors., + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or, + * if {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, + * Copyright 2012-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +	public static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +, +		if (match == null) {, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(, +					WEBJAR_ASSERT_LOCATOR, getClass().getClassLoader());, +			return new ConditionOutcome(webJarsLocatorPresent,, +					"Webjars locator (" + WEBJAR_ASSERT_LOCATOR + ") is ", +							+ (webJarsLocatorPresent ? "present" : "absent"));, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +		/**, +		 * Return whether the resource chain is enabled. Return {@code null} if no, +		 * specific settings are present., +		 */, +			// Check if at least one of the available strategy has been enabled, +			Boolean strategyEnabled = getStrategy().getFixed().isEnabled(), +			return (strategyEnabled ? Boolean.TRUE : this.enabled);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +		@Autowired(required = false), +		ResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer;, +, +				customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**"), +				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern), +		private void customizeResourceHandlerRegistration(ResourceHandlerRegistration registration) {, +			if (this.resourceHandlerRegistrationCustomizer != null) {, +				this.resourceHandlerRegistrationCustomizer.customize(registration);, +	@Configuration, +	@ConditionalOnEnabledResourceChain, +	static class ResourceChainCustomizerConfiguration {, +, +		@Bean, +		public ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {, +			return new ResourceChainResourceHandlerRegistrationCustomizer();, +		}, +, +	}, +, +	interface ResourceHandlerRegistrationCustomizer {, +, +		void customize(ResourceHandlerRegistration registration);, +, +	}, +, +	private static class ResourceChainResourceHandlerRegistrationCustomizer, +			implements ResourceHandlerRegistrationCustomizer {, +, +		@Autowired, +		private ResourceProperties resourceProperties = new ResourceProperties();, +]