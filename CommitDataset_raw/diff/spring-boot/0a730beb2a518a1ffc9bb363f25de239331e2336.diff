[+++ b/spring-bootstrap-service/README.md, +|Audit                      | Spring Security and Spring ApplicationEvent |Flexible abstraction with sensible defaults for security events |, +|Management endpoints       | Spring MVC | Health, basic metrics, request tracing, shutdown, thread dumps |, +below, but you are more than welcome to use gradle).  These can be, +customize it.  You can also try `/trace` and `/dump` to get some, +interesting information about how and what your app is doing., +, +What about the home page?, +That's OK, we haven't added any business content yet.  But it shows, +that there are sensible defaults built in for rendering HTTP and, +server-side errors., +# Adding security, +, +If you add Spring Security java config to your runtime classpath you, +will enable HTTP basic authentication by default on all the endpoints., +In the `pom.xml` it would look like this:, +, +        <dependency>, +          <groupId>org.springframework.security</groupId>, +          <artifactId>spring-security-javaconfig</artifactId>, +          <version>1.0.0.BUILD-SNAPSHOT</version>, +        </dependency>, +, +(Spring Security java config is still work in progress so we have used, +a snapshot.  Beware of sudden changes.  FIXME: update to full, +release.), +, +Try it out:, +, +    $ curl localhost:8080/, +    {"status": 403, "error": "Forbidden", "message": "Access Denied"}, +    $ curl user:password@localhost:8080/, +    {"message": "Hello World"}, +, +The default auto configuration has an in-memory user database with one, +entry.  If you want to extend or expand that, or point to a database, +or directory server, you only need to provide a `@Bean` definition for, +an `AuthenticationManager`, e.g. in your `SampleController`:, +, +    @Bean, +    public AuthenticationManager authenticationManager() throws Exception {, +      return new AuthenticationBuilder().inMemoryAuthentication().withUser("client"), +          .password("secret").roles("USER").and().and().build();, +    }, +, +Try it out:, +, +    $ curl user:password@localhost:8080/, +    {"status": 403, "error": "Forbidden", "message": "Access Denied"}, +    $ curl client:secret@localhost:8080/, +    {"message": "Hello World"}, +, +# Adding a database, +++ b/spring-bootstrap-service/README.md, +|Audit                      | Spring Security and Spring ApplicationEvent |Flexible abstraction with sensible defaults for security events |, +|Management endpoints       | Spring MVC | Health, basic metrics, request tracing, shutdown, thread dumps |, +below, but you are more than welcome to use gradle).  These can be, +customize it.  You can also try `/trace` and `/dump` to get some, +interesting information about how and what your app is doing., +, +What about the home page?, +That's OK, we haven't added any business content yet.  But it shows, +that there are sensible defaults built in for rendering HTTP and, +server-side errors., +# Adding security, +, +If you add Spring Security java config to your runtime classpath you, +will enable HTTP basic authentication by default on all the endpoints., +In the `pom.xml` it would look like this:, +, +        <dependency>, +          <groupId>org.springframework.security</groupId>, +          <artifactId>spring-security-javaconfig</artifactId>, +          <version>1.0.0.BUILD-SNAPSHOT</version>, +        </dependency>, +, +(Spring Security java config is still work in progress so we have used, +a snapshot.  Beware of sudden changes.  FIXME: update to full, +release.), +, +Try it out:, +, +    $ curl localhost:8080/, +    {"status": 403, "error": "Forbidden", "message": "Access Denied"}, +    $ curl user:password@localhost:8080/, +    {"message": "Hello World"}, +, +The default auto configuration has an in-memory user database with one, +entry.  If you want to extend or expand that, or point to a database, +or directory server, you only need to provide a `@Bean` definition for, +an `AuthenticationManager`, e.g. in your `SampleController`:, +, +    @Bean, +    public AuthenticationManager authenticationManager() throws Exception {, +      return new AuthenticationBuilder().inMemoryAuthentication().withUser("client"), +          .password("secret").roles("USER").and().and().build();, +    }, +, +Try it out:, +]