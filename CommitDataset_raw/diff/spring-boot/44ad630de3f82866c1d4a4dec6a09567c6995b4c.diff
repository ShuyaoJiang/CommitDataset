[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfigurationTests.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(, +					AutoConfigurations.of(EmbeddedLdapAutoConfiguration.class));, +		this.contextRunner.withPropertyValues("spring.ldap.embedded.port:1234",, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +					InMemoryDirectoryServer server = context, +				});, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +					assertThat(server.getListenPort()).isEqualTo(context.getEnvironment(), +				});, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +				.applyTo(context);, +		context.register(EmbeddedLdapAutoConfiguration.class,, +		context.refresh();, +		LDAPConnection connection = context.getBean(LDAPConnection.class);, +		assertThat(connection.getConnectedPort()).isEqualTo(, +				context.getEnvironment().getProperty("local.ldap.port", Integer.class));, +	public void testSetCredentials() {, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org",, +						"spring.ldap.embedded.credential.password:boot"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +				});, +	public void testSetPartitionSuffix() {, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +					assertThat(server.getBaseDNs()), +							.containsExactly(new DN("dc=spring,dc=org"));, +				});, +	public void testSetLdifFile() {, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +					assertThat(server, +							.countEntriesBelow("ou=company1,c=Sweden,dc=spring,dc=org")), +				});, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.withConfiguration(AutoConfigurations.of(LdapAutoConfiguration.class,, +						LdapDataAutoConfiguration.class)), +				.run(context -> {, +					assertThat(context.getBeanNamesForType(LdapTemplate.class).length), +					LdapTemplate ldapTemplate = context.getBean(LdapTemplate.class);, +					assertThat(ldapTemplate.list("ou=company1,c=Sweden,dc=spring,dc=org")), +							.hasSize(4);, +				});, +	public void testDisableSchemaValidation() {, +		this.contextRunner, +				.withPropertyValues("spring.ldap.embedded.validation.enabled:false",, +						"spring.ldap.embedded.base-dn:dc=spring,dc=org"), +				.run(context -> {, +					InMemoryDirectoryServer server = context, +				});, +	public void testCustomSchemaValidation() {, +		this.contextRunner.withPropertyValues(, +				"spring.ldap.embedded.validation.schema:classpath:custom-schema.ldif",, +				"spring.ldap.embedded.base-dn:dc=spring,dc=org").run(context -> {, +					InMemoryDirectoryServer server = context, +					assertThat(, +							server.getSchema().getAttributeType("exampleAttributeName")), +				});]