[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +				this.argumentResolvers.forEach(configurer::addCustomResolver);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration.java, +				this.argumentResolvers.forEach(configurer::addCustomResolver);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web.reactive.error;, +, +import java.util.Collections;, +import java.util.Date;, +import java.util.List;, +import java.util.Map;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;, +import org.springframework.boot.autoconfigure.web.ResourceProperties;, +import org.springframework.context.ApplicationContext;, +import org.springframework.core.io.Resource;, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.reactive.function.BodyInserters;, +import org.springframework.web.reactive.function.server.RouterFunction;, +import org.springframework.web.reactive.function.server.ServerRequest;, +import org.springframework.web.reactive.function.server.ServerResponse;, +import org.springframework.web.reactive.result.view.ViewResolver;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Abstract base class for {@link ErrorWebExceptionHandler} implementations., + *, + * @author Brian Clozel, + * @since 2.0.0, + * @see ErrorAttributes, + */, +public abstract class AbstractErrorWebExceptionHandler implements ErrorWebExceptionHandler, InitializingBean {, +, +	private final ApplicationContext applicationContext;, +, +	private final ErrorAttributes errorAttributes;, +, +	private final ResourceProperties resourceProperties;, +, +	private final TemplateAvailabilityProviders templateAvailabilityProviders;, +, +	private List<HttpMessageReader<?>> messageReaders = Collections.emptyList();, +, +	private List<HttpMessageWriter<?>> messageWriters = Collections.emptyList();, +, +	private List<ViewResolver> viewResolvers = Collections.emptyList();, +, +	public AbstractErrorWebExceptionHandler(ErrorAttributes errorAttributes,, +			ResourceProperties resourceProperties,, +			ApplicationContext applicationContext) {, +		Assert.notNull(errorAttributes, "ErrorAttributes must not be null");, +		Assert.notNull(resourceProperties, "ResourceProperties must not be null");, +		Assert.notNull(applicationContext, "ApplicationContext must not be null");, +		this.errorAttributes = errorAttributes;, +		this.resourceProperties = resourceProperties;, +		this.applicationContext = applicationContext;, +		this.templateAvailabilityProviders = new TemplateAvailabilityProviders(applicationContext);, +	}, +, +	/**, +	 * Configure HTTP message writers to serialize the response body with., +	 * @param messageWriters the {@link HttpMessageWriter}s to use, +	 */, +	public void setMessageWriters(List<HttpMessageWriter<?>> messageWriters) {, +		Assert.notNull(messageWriters, "'messageWriters' must not be null");, +		this.messageWriters = messageWriters;, +	}, +, +	/**, +	 * Configure HTTP message readers to deserialize the request body with., +	 * @param messageReaders the {@link HttpMessageReader}s to use, +	 */, +	public void setMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		Assert.notNull(messageReaders, "'messageReaders' must not be null");, +		this.messageReaders = messageReaders;, +	}, +, +	/**]