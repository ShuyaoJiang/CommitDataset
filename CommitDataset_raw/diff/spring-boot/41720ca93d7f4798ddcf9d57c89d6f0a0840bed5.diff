[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +import org.neo4j.ogm.session.Session;, +import org.springframework.boot.actuate.health.Health;, +import static org.assertj.core.api.Assertions.entry;, + * @author Stephane Nicoll, +			.withUserConfiguration(Neo4jConfiguration.class), +			.withConfiguration(AutoConfigurations.of(, +	@Test, +	public void defaultIndicatorCanBeReplaced() {, +		this.contextRunner, +				.withUserConfiguration(CustomIndicatorConfiguration.class).run(, +				(context) -> {, +					assertThat(context).hasSingleBean(Neo4jHealthIndicator.class);, +					assertThat(context).doesNotHaveBean(ApplicationHealthIndicator.class);, +					Health health = context.getBean(Neo4jHealthIndicator.class).health();, +					assertThat(health.getDetails()).containsOnly(entry("test", true));, +				});, +	}, +, +	@Configuration, +	protected static class CustomIndicatorConfiguration {, +, +		@Bean, +		public Neo4jHealthIndicator neo4jHealthIndicator(SessionFactory sessionFactory) {, +			return new Neo4jHealthIndicator(sessionFactory) {, +				@Override, +				protected void extractResult(Session session, Health.Builder builder) {, +					builder.up().withDetail("test", true);, +				}, +			};, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/neo4j/Neo4jHealthIndicatorAutoConfigurationTests.java, +import org.neo4j.ogm.session.Session;, +import org.springframework.boot.actuate.health.Health;, +import static org.assertj.core.api.Assertions.entry;, + * @author Stephane Nicoll, +			.withUserConfiguration(Neo4jConfiguration.class), +			.withConfiguration(AutoConfigurations.of(, +	@Test, +	public void defaultIndicatorCanBeReplaced() {, +		this.contextRunner, +				.withUserConfiguration(CustomIndicatorConfiguration.class).run(, +				(context) -> {, +					assertThat(context).hasSingleBean(Neo4jHealthIndicator.class);, +					assertThat(context).doesNotHaveBean(ApplicationHealthIndicator.class);, +					Health health = context.getBean(Neo4jHealthIndicator.class).health();, +					assertThat(health.getDetails()).containsOnly(entry("test", true));, +				});, +	}, +, +	@Configuration, +	protected static class CustomIndicatorConfiguration {, +, +		@Bean, +		public Neo4jHealthIndicator neo4jHealthIndicator(SessionFactory sessionFactory) {, +			return new Neo4jHealthIndicator(sessionFactory) {, +				@Override, +				protected void extractResult(Session session, Health.Builder builder) {, +					builder.up().withDetail("test", true);, +				}, +			};, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, +		extractResult(session, builder);, +	}, +, +	/**, +	 * Provide health details using the specified {@link Session} and, +	 * {@link Health.Builder Builder}., +	 * @param session the session to use to execute a cypher statement, +	 * @param builder the builder to add details to, +	 */, +	protected void extractResult(Session session, Health.Builder builder) {]