[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/ReactiveManagementWebSecurityAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class), +					assertThat(getLocationHeader(context, "/actuator/health").toString()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/ReactiveManagementWebSecurityAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class), +					assertThat(getLocationHeader(context, "/actuator/health").toString()), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java, +import io.micrometer.core.instrument.Timer;, +		Timer timer = this.registry.get("http.client.requests").tags("method", "GET",, +				"uri", "/projects/spring-boot", "status", "CLIENT_ERROR").timer();, +		assertThat(timer.count()).isEqualTo(2);, +		assertThat(timer.max(TimeUnit.MILLISECONDS)).isLessThan(600);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/ReactiveManagementWebSecurityAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class), +					assertThat(getLocationHeader(context, "/actuator/health").toString()), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java, +import io.micrometer.core.instrument.Timer;, +		Timer timer = this.registry.get("http.client.requests").tags("method", "GET",, +				"uri", "/projects/spring-boot", "status", "CLIENT_ERROR").timer();, +		assertThat(timer.count()).isEqualTo(2);, +		assertThat(timer.max(TimeUnit.MILLISECONDS)).isLessThan(600);, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +				<groupId>javax.persistence</groupId>, +				<artifactId>javax.persistence-api</artifactId>, +				<version>${javax-persistence.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/ReactiveManagementWebSecurityAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class), +					assertThat(getLocationHeader(context, "/actuator/health").toString()), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java, +import io.micrometer.core.instrument.Timer;, +		Timer timer = this.registry.get("http.client.requests").tags("method", "GET",, +				"uri", "/projects/spring-boot", "status", "CLIENT_ERROR").timer();, +		assertThat(timer.count()).isEqualTo(2);, +		assertThat(timer.max(TimeUnit.MILLISECONDS)).isLessThan(600);, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +				<groupId>javax.persistence</groupId>, +				<artifactId>javax.persistence-api</artifactId>, +				<version>${javax-persistence.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +present, all actuators other than `/health` and `/info` are secured by Spring Boot auto-configuration., +If you define a custom `WebSecurityConfigurerAdapter`, Spring Boot auto-configuration will back off and you will be in, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories, +org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration,\, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/security/reactive/ReactiveManagementWebSecurityAutoConfigurationTests.java, +		this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class), +					assertThat(getLocationHeader(context, "/actuator/health").toString()), +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/web/reactive/client/MetricsWebClientFilterFunctionTests.java, +import io.micrometer.core.instrument.Timer;, +		Timer timer = this.registry.get("http.client.requests").tags("method", "GET",, +				"uri", "/projects/spring-boot", "status", "CLIENT_ERROR").timer();, +		assertThat(timer.count()).isEqualTo(2);, +		assertThat(timer.max(TimeUnit.MILLISECONDS)).isLessThan(600);, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +				<groupId>javax.persistence</groupId>, +				<artifactId>javax.persistence-api</artifactId>, +				<version>${javax-persistence.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +present, all actuators other than `/health` and `/info` are secured by Spring Boot auto-configuration., +If you define a custom `WebSecurityConfigurerAdapter`, Spring Boot auto-configuration will back off and you will be in, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java, +import java.util.Objects;, +		return this.propertySources.stream(), +				.anyMatch((sources) -> sources.contains(name));, +		return this.propertySources.stream().map((sources) -> sources.get(name)), +				.filter(Objects::nonNull).findFirst().orElse(null);]