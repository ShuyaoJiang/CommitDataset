[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;, +			AssertableWebApplicationContext context,, +		assertThat(context).hasSingleBean(SessionRepository.class);, +		SessionRepository<?> repository = context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;, +			AssertableWebApplicationContext context,, +		assertThat(context).hasSingleBean(SessionRepository.class);, +		SessionRepository<?> repository = context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(SessionAutoConfiguration.class)), +			.withUserConfiguration(HazelcastConfiguration.class);, +, +, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast"), +				.run((context) -> {, +					validateSessionRepository(context, HazelcastSessionRepository.class);, +					HazelcastInstance hazelcastInstance = context, +				});, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast",, +				"spring.session.hazelcast.map-name=foo:bar:biz").run((context) -> {, +			validateSessionRepository(context, HazelcastSessionRepository.class);, +			HazelcastInstance hazelcastInstance = context, +		});, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast",, +				"spring.session.hazelcast.flush-mode=immediate").run((context) -> {, +			HazelcastSessionRepository repository = validateSessionRepository(context,, +		});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;, +			AssertableWebApplicationContext context,, +		assertThat(context).hasSingleBean(SessionRepository.class);, +		SessionRepository<?> repository = context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(SessionAutoConfiguration.class)), +			.withUserConfiguration(HazelcastConfiguration.class);, +, +, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast"), +				.run((context) -> {, +					validateSessionRepository(context, HazelcastSessionRepository.class);, +					HazelcastInstance hazelcastInstance = context, +				});, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast",, +				"spring.session.hazelcast.map-name=foo:bar:biz").run((context) -> {, +			validateSessionRepository(context, HazelcastSessionRepository.class);, +			HazelcastInstance hazelcastInstance = context, +		});, +		this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast",, +				"spring.session.hazelcast.flush-mode=immediate").run((context) -> {, +			HazelcastSessionRepository repository = validateSessionRepository(context,, +		});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.test.context.runner.WebApplicationContextRunner;, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +					DataSourceTransactionManagerAutoConfiguration.class,, +					SessionAutoConfiguration.class)), +			.withPropertyValues("spring.datasource.generate-unique-name=true");, +, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				JdbcTemplateAutoConfiguration.class)), +				.withPropertyValues("spring.session.store-type=jdbc").run((context) -> {, +			JdbcOperationsSessionRepository repository = validateSessionRepository(context,, +			assertThat(context.getBean(JdbcSessionProperties.class).getInitializeSchema()), +			assertThat(context.getBean(JdbcOperations.class), +		});, +		this.contextRunner.withPropertyValues(, +				"spring.session.jdbc.initialize-schema=never").run((context) -> {, +			JdbcOperationsSessionRepository repository = validateSessionRepository(context,, +			assertThat(context.getBean(JdbcSessionProperties.class).getInitializeSchema()), +			context.getBean(JdbcOperations.class).queryForList(, +					"select * from SPRING_SESSION");, +		});, +		this.contextRunner.withPropertyValues(, +				"spring.session.jdbc.schema=classpath:session/custom-schema-h2.sql"), +				.run((context) -> {, +					JdbcOperationsSessionRepository repository = validateSessionRepository(context,, +					assertThat(context.getBean(JdbcSessionProperties.class).getInitializeSchema()), +					assertThat(context.getBean(JdbcOperations.class), +				});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/AbstractSessionAutoConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;, +			AssertableWebApplicationContext context,, +		assertThat(context).hasSingleBean(SessionRepository.class);, +		SessionRepository<?> repository = context.getBean(SessionRepository.class);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationHazelcastTests.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.boot.autoconfigure.AutoConfigurations;]