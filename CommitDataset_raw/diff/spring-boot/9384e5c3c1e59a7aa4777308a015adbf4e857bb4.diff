[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		if (result == null || value == null) {, +		return merge(value, (T) result);, +	 * @param existing the supplier for the existing value, +	protected abstract T merge(Supplier<?> existing, T additional);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		if (result == null || value == null) {, +		return merge(value, (T) result);, +	 * @param existing the supplier for the existing value, +	protected abstract T merge(Supplier<?> existing, T additional);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/ArrayBinder.java, +import java.util.function.Supplier;, +	protected Object merge(Supplier<?> existing, Object additional) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		if (result == null || value == null) {, +		return merge(value, (T) result);, +	 * @param existing the supplier for the existing value, +	protected abstract T merge(Supplier<?> existing, T additional);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/ArrayBinder.java, +import java.util.function.Supplier;, +	protected Object merge(Supplier<?> existing, Object additional) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.function.Supplier;, +	@SuppressWarnings("unchecked"), +	protected Collection<Object> merge(Supplier<?> existing,, +		Collection<Object> existingCollection = (Collection<Object>) existing.get();, +		if (existingCollection == null) {, +			return additional;, +		}, +			existingCollection.clear();, +			existingCollection.addAll(additional);, +			return existingCollection;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		if (result == null || value == null) {, +		return merge(value, (T) result);, +	 * @param existing the supplier for the existing value, +	protected abstract T merge(Supplier<?> existing, T additional);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/ArrayBinder.java, +import java.util.function.Supplier;, +	protected Object merge(Supplier<?> existing, Object additional) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.function.Supplier;, +	@SuppressWarnings("unchecked"), +	protected Collection<Object> merge(Supplier<?> existing,, +		Collection<Object> existingCollection = (Collection<Object>) existing.get();, +		if (existingCollection == null) {, +			return additional;, +		}, +			existingCollection.clear();, +			existingCollection.addAll(additional);, +			return existingCollection;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.function.Supplier;, +	@SuppressWarnings("unchecked"), +	protected Map<Object, Object> merge(Supplier<?> existing,, +		Map<Object, Object> existingMap = (Map<Object, Object>) existing.get();, +		if (existingMap == null) {, +			return additional;, +		}, +		existingMap.putAll(additional);, +		return existingMap;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +		if (result == null || value == null) {, +		return merge(value, (T) result);, +	 * @param existing the supplier for the existing value, +	protected abstract T merge(Supplier<?> existing, T additional);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/ArrayBinder.java, +import java.util.function.Supplier;, +	protected Object merge(Supplier<?> existing, Object additional) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/CollectionBinder.java, +import java.util.function.Supplier;, +	@SuppressWarnings("unchecked"), +	protected Collection<Object> merge(Supplier<?> existing,, +		Collection<Object> existingCollection = (Collection<Object>) existing.get();, +		if (existingCollection == null) {, +			return additional;, +		}, +			existingCollection.clear();, +			existingCollection.addAll(additional);, +			return existingCollection;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.function.Supplier;, +	@SuppressWarnings("unchecked"), +	protected Map<Object, Object> merge(Supplier<?> existing,, +		Map<Object, Object> existingMap = (Map<Object, Object>) existing.get();, +		if (existingMap == null) {, +			return additional;, +		}, +		existingMap.putAll(additional);, +		return existingMap;, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java, +	@Test, +	public void bindToBeanWithClonedArray() {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.bar[0]", "hello");, +		this.sources.add(source);, +		Bindable<ClonedArrayBean> target = Bindable, +				.of(ClonedArrayBean.class);, +		ClonedArrayBean bean = this.binder.bind("foo", target).get();, +		assertThat(bean.getBar()).contains("hello");]