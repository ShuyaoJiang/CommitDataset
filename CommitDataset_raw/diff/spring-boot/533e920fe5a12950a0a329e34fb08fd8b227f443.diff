[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		if (!isEnabled()) {, +			logger.info("Filter " + name + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		if (!isEnabled()) {, +			logger.info("Filter " + name + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java, +	private boolean enabled = true;, +, +	 * Flag to indicate that the registration is enabled., +	 * , +	 * @param enabled the enabled to set, +	 */, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +, +	/**, +	 * @return the enabled flag (default true), +	 */, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		if (!isEnabled()) {, +			logger.info("Filter " + name + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java, +	private boolean enabled = true;, +, +	 * Flag to indicate that the registration is enabled., +	 * , +	 * @param enabled the enabled to set, +	 */, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +, +	/**, +	 * @return the enabled flag (default true), +	 */, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletListenerRegistrationBean.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ServletListenerRegistrationBean.class);, +, +		if (!isEnabled()) {, +			logger.info("Listener " + this.listener + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java, +		if (!isEnabled()) {, +			logger.info("Filter " + name + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java, +	private boolean enabled = true;, +, +	 * Flag to indicate that the registration is enabled., +	 * , +	 * @param enabled the enabled to set, +	 */, +	public void setEnabled(boolean enabled) {, +		this.enabled = enabled;, +	}, +, +	/**, +	 * @return the enabled flag (default true), +	 */, +	public boolean isEnabled() {, +		return this.enabled;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletListenerRegistrationBean.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ServletListenerRegistrationBean.class);, +, +		if (!isEnabled()) {, +			logger.info("Listener " + this.listener + " was not registered (disabled)");, +			return;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/ServletRegistrationBean.java, +		if (!isEnabled()) {, +			logger.info("Filter " + name + " was not registered (disabled)");, +			return;, +		}]