[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		if (!isAbsolutePath(root)) {, +	private boolean isAbsolutePath(String root) {, +		// Windows contains ":" others start with "/", +		return root.contains(":") || root.startsWith("/");, +	}, +, +		// No need for current dir path, +		if (path.startsWith("./")) {, +			path = path.substring(2);, +		}, +			if (!path.endsWith("/") && !path.equals(".")) {, +			return entry.getName().endsWith(DOT_JAR) || entry.getName().endsWith(DOT_ZIP);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		if (!isAbsolutePath(root)) {, +	private boolean isAbsolutePath(String root) {, +		// Windows contains ":" others start with "/", +		return root.contains(":") || root.startsWith("/");, +	}, +, +		// No need for current dir path, +		if (path.startsWith("./")) {, +			path = path.substring(2);, +		}, +			if (!path.endsWith("/") && !path.equals(".")) {, +			return entry.getName().endsWith(DOT_JAR) || entry.getName().endsWith(DOT_ZIP);, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +	public void testUserSpecifiedJarPathWithDot() throws Exception {, +		System.setProperty("loader.path", "./jars/app.jar");, +		System.setProperty("loader.main", "demo.Application");, +		PropertiesLauncher launcher = new PropertiesLauncher();, +		assertEquals("[jars/app.jar]", ReflectionTestUtils.getField(launcher, "paths"), +				.toString());, +		launcher.launch(new String[0]);, +		waitFor("Hello World");, +	}, +, +	@Test]