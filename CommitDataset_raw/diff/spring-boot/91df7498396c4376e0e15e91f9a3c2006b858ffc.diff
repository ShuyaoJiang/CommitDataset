[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +	private final Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +	private final Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +		String cached = this.names.get(metricName);, +		if (cached != null) {, +			return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +	private final Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +		String cached = this.names.get(metricName);, +		if (cached != null) {, +			return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jmx/JmxMetricWriter.java, +		if (value == null) {, +			value = new MetricValue();, +			MetricValue oldValue = this.values.putIfAbsent(name, value);, +			if (oldValue != null) {, +				value = oldValue;, +			}, +		return value;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +	private final Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +		String cached = this.names.get(metricName);, +		if (cached != null) {, +			return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jmx/JmxMetricWriter.java, +		if (value == null) {, +			value = new MetricValue();, +			MetricValue oldValue = this.values.putIfAbsent(name, value);, +			if (oldValue != null) {, +				value = oldValue;, +			}, +		return value;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/util/SimpleInMemoryRepository.java, +		this.values.put(name, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +		private final Map<MediaType, HttpMessageConverter<?>> converterCache = new ConcurrentHashMap<MediaType, HttpMessageConverter<?>>();, +			HttpMessageConverter<Object> cached = (HttpMessageConverter<Object>) this.converterCache, +					.get(mediaType);, +			if (cached != null) {, +				return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/AbstractJmxCacheStatisticsProvider.java, +	private final Map<String, ObjectNameWrapper> caches = new ConcurrentHashMap<String, ObjectNameWrapper>();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/buffer/BufferGaugeService.java, +		String cached = this.names.get(metricName);, +		if (cached != null) {, +			return cached;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/jmx/JmxMetricWriter.java, +		if (value == null) {, +			value = new MetricValue();, +			MetricValue oldValue = this.values.putIfAbsent(name, value);, +			if (oldValue != null) {, +				value = oldValue;, +			}, +		return value;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/util/SimpleInMemoryRepository.java, +		this.values.put(name, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/DefaultGaugeService.java, +		String cached = this.names.get(metricName);, +		if (cached != null) {, +			return cached;]