[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +				AuthenticationEntryPoint entryPoint = entryPoint();, +				http.exceptionHandling().authenticationEntryPoint(entryPoint);, +				http.httpBasic().authenticationEntryPoint(entryPoint);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +				AuthenticationEntryPoint entryPoint = entryPoint();, +				http.exceptionHandling().authenticationEntryPoint(entryPoint);, +				http.httpBasic().authenticationEntryPoint(entryPoint);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java, +import javax.servlet.Filter;, +, +import org.hamcrest.Matchers;, +import org.springframework.test.web.servlet.MockMvc;, +import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;, +import org.springframework.test.web.servlet.result.MockMvcResultMatchers;, +import org.springframework.test.web.servlet.setup.MockMvcBuilders;, +import org.springframework.web.context.WebApplicationContext;, +				"--server.port=0");, +	public void testWebConfigurationFilterChainUnauthenticated() throws Exception {, +		this.context = SpringApplication.run(VanillaWebConfiguration.class,, +				"--server.port=0");, +		MockMvc mockMvc = MockMvcBuilders, +				.webAppContextSetup((WebApplicationContext) this.context), +				.addFilters(, +						this.context.getBean("springSecurityFilterChain", Filter.class)), +				.build();, +		mockMvc.perform(MockMvcRequestBuilders.get("/")), +				.andExpect(MockMvcResultMatchers.status().isUnauthorized()), +				.andExpect(, +						MockMvcResultMatchers.header().string("www-authenticate",, +								Matchers.containsString("realm=\"Spring\"")));, +	}, +, +	@Test, +	public void testWebConfigurationFilterChainBadCredentials() throws Exception {, +		this.context = SpringApplication.run(VanillaWebConfiguration.class,, +				"--server.port=0");, +		MockMvc mockMvc = MockMvcBuilders, +				.webAppContextSetup((WebApplicationContext) this.context), +				.addFilters(, +						this.context.getBean("springSecurityFilterChain", Filter.class)), +				.build();, +		mockMvc.perform(, +				MockMvcRequestBuilders.get("/").header("authorization", "Basic xxx")), +				.andExpect(MockMvcResultMatchers.status().isUnauthorized()), +				.andExpect(, +						MockMvcResultMatchers.header().string("www-authenticate",, +								Matchers.containsString("realm=\"Spring\"")));, +	}, +, +	@Test, +				"--server.port=0");, +	protected static class VanillaWebConfiguration {, +	}, +, +	@MinimalWebConfiguration, +	@Import(SecurityAutoConfiguration.class), +	@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)]