[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskProperties.java, +		 * Queue capacity. An unbounded capacity does not increase the pool and therefore, +		 * ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskProperties.java, +		 * Queue capacity. An unbounded capacity does not increase the pool and therefore, +		 * ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfigurationTests.java, +	public void taskExecutorWhenHasCustomTaskExecutorShouldBackOff() {, +							.isSameAs(context.getBean("customTaskExecutor"));, +		this.contextRunner.withUserConfiguration(TaskExecutorCustomizerConfig.class), +				.run((context) -> {, +					String text = bean.echo("something").get();, +					assertThat(text).contains("executor-test-").contains("something");, +		public Executor customTaskExecutor() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskProperties.java, +		 * Queue capacity. An unbounded capacity does not increase the pool and therefore, +		 * ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfigurationTests.java, +	public void taskExecutorWhenHasCustomTaskExecutorShouldBackOff() {, +							.isSameAs(context.getBean("customTaskExecutor"));, +		this.contextRunner.withUserConfiguration(TaskExecutorCustomizerConfig.class), +				.run((context) -> {, +					String text = bean.echo("something").get();, +					assertThat(text).contains("executor-test-").contains("something");, +		public Executor customTaskExecutor() {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.task.pool.queue-capacity= # Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskProperties.java, +		 * Queue capacity. An unbounded capacity does not increase the pool and therefore, +		 * ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfigurationTests.java, +	public void taskExecutorWhenHasCustomTaskExecutorShouldBackOff() {, +							.isSameAs(context.getBean("customTaskExecutor"));, +		this.contextRunner.withUserConfiguration(TaskExecutorCustomizerConfig.class), +				.run((context) -> {, +					String text = bean.echo("something").get();, +					assertThat(text).contains("executor-test-").contains("something");, +		public Executor customTaskExecutor() {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.task.pool.queue-capacity= # Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +An `LdapContextSource` is auto-configured based on these settings. If you need to customize, +aggressive as threads are reclaimed when they are idle for 10 seconds (rather than, +`application.properties`) or on the default port of `8080`., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfiguration.java, +		return new TaskExecutorBuilder().queueCapacity(pool.getQueueCapacity()), +				.keepAlive(pool.getKeepAlive()), +				.threadNamePrefix(this.properties.getThreadNamePrefix()), +				.customizers(this.taskExecutorCustomizers.stream(), +						.collect(Collectors.toList())), +				.taskDecorator(this.taskDecorator.getIfUnique());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskProperties.java, +		 * Queue capacity. An unbounded capacity does not increase the pool and therefore, +		 * ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/task/TaskExecutorAutoConfigurationTests.java, +	public void taskExecutorWhenHasCustomTaskExecutorShouldBackOff() {, +							.isSameAs(context.getBean("customTaskExecutor"));, +		this.contextRunner.withUserConfiguration(TaskExecutorCustomizerConfig.class), +				.run((context) -> {, +					String text = bean.echo("something").get();, +					assertThat(text).contains("executor-test-").contains("something");, +		public Executor customTaskExecutor() {, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.task.pool.queue-capacity= # Queue capacity. An unbounded capacity does not increase the pool and therefore ignores the "max-size" property., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc]