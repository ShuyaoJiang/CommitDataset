[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, +import io.micrometer.graphite.GraphiteHierarchicalNameMapper;, +	public HierarchicalNameMapper hierarchicalNameMapper(GraphiteConfig graphiteConfig) {, +		return new GraphiteHierarchicalNameMapper(graphiteConfig.tagsAsPrefix());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfiguration.java, +import io.micrometer.graphite.GraphiteHierarchicalNameMapper;, +	public HierarchicalNameMapper hierarchicalNameMapper(GraphiteConfig graphiteConfig) {, +		return new GraphiteHierarchicalNameMapper(graphiteConfig.tagsAsPrefix());, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/graphite/GraphiteMetricsExportAutoConfigurationTests.java, +import io.micrometer.core.instrument.Tags;, + * @author Stephane Nicoll, +	public void autoConfiguresUseTagsAsPrefix() {, +		this.contextRunner.withUserConfiguration(BaseConfiguration.class), +				.withPropertyValues("management.metrics.export.graphite.tags-as-prefix=app"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(GraphiteMeterRegistry.class);, +					GraphiteMeterRegistry registry = context.getBean(, +							GraphiteMeterRegistry.class);, +					registry.counter("test.count", Tags.of("app", "myapp"));, +					assertThat(registry.getDropwizardRegistry().getMeters()), +							.containsOnlyKeys("myapp.testCount");, +				});, +	}, +, +	@Test]