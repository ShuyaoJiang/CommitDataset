[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java, +		return this.controller.extract(attributes, false, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java, +		return this.controller.extract(attributes, false, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import org.springframework.web.context.request.ServletRequestAttributes;, +				trace.put("error", this.errorController.extract(, +						new ServletRequestAttributes(request), true, false));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java, +		return this.controller.extract(attributes, false, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import org.springframework.web.context.request.ServletRequestAttributes;, +				trace.put("error", this.errorController.extract(, +						new ServletRequestAttributes(request), true, false));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java, +		return extract(attributes, trace != null && !"false".equals(trace.toLowerCase()),, +				true);, +	public Map<String, Object> extract(RequestAttributes attributes, boolean trace,, +			boolean log) {, +				if (log) {, +			}, +			if (log) {, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java, +		return this.controller.extract(attributes, false, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import org.springframework.web.context.request.ServletRequestAttributes;, +				trace.put("error", this.errorController.extract(, +						new ServletRequestAttributes(request), true, false));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java, +		return extract(attributes, trace != null && !"false".equals(trace.toLowerCase()),, +				true);, +	public Map<String, Object> extract(RequestAttributes attributes, boolean trace,, +			boolean log) {, +				if (log) {, +			}, +			if (log) {, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/ErrorController.java, +	 * @param log flag to indicate that an error should be logged, +	public Map<String, Object> extract(RequestAttributes attributes, boolean trace,, +			boolean log);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java, +		return this.controller.extract(attributes, false, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +import org.springframework.web.context.request.ServletRequestAttributes;, +				trace.put("error", this.errorController.extract(, +						new ServletRequestAttributes(request), true, false));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java, +		return extract(attributes, trace != null && !"false".equals(trace.toLowerCase()),, +				true);, +	public Map<String, Object> extract(RequestAttributes attributes, boolean trace,, +			boolean log) {, +				if (log) {, +			}, +			if (log) {, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/ErrorController.java, +	 * @param log flag to indicate that an error should be logged, +	public Map<String, Object> extract(RequestAttributes attributes, boolean trace,, +			boolean log);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorWrapperEmbeddedServletContainerFactory.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.web;, +, +import java.io.IOException;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.FilterConfig;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import javax.servlet.http.HttpServletResponseWrapper;, +, +import org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory;, +import org.springframework.boot.context.embedded.EmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerException;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;, +import org.springframework.boot.context.embedded.ErrorPage;]