[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		public FlywayEndpoint flywayEndpoint(Map<String, Flyway> flyways) {, +			return new FlywayEndpoint(flyways);, +		public LiquibaseEndpoint liquibaseEndpoint(, +				Map<String, SpringLiquibase> liquibases) {, +			return new LiquibaseEndpoint(liquibases);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		public FlywayEndpoint flywayEndpoint(Map<String, Flyway> flyways) {, +			return new FlywayEndpoint(flyways);, +		public LiquibaseEndpoint liquibaseEndpoint(, +				Map<String, SpringLiquibase> liquibases) {, +			return new LiquibaseEndpoint(liquibases);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/FlywayEndpoint.java, +import org.springframework.boot.actuate.endpoint.FlywayEndpoint.FlywayReport;, +public class FlywayEndpoint extends AbstractEndpoint<List<FlywayReport>> {, +	private final Map<String, Flyway> flyways;, +		this(Collections.singletonMap("default", flyway));, +	public FlywayEndpoint(Map<String, Flyway> flyways) {, +		Assert.notEmpty(flyways, "Flyways must be specified");, +		this.flyways = flyways;, +	public List<FlywayReport> invoke() {, +		List<FlywayReport> reports = new ArrayList<FlywayReport>();, +		for (Map.Entry<String, Flyway> entry : this.flyways.entrySet()) {, +			List<FlywayMigration> migrations = new ArrayList<FlywayMigration>();, +			for (MigrationInfo info : entry.getValue().info().all()) {, +				migrations.add(new FlywayMigration(info));, +			}, +			reports.add(new FlywayReport(entry.getKey(), migrations));, +		}, +		return reports;, +	}, +	/**, +	 * Flyway report for one datasource., +	 */, +	public static class FlywayReport {, +, +		private final String name;, +		private final List<FlywayMigration> migrations;, +, +		public FlywayReport(String name, List<FlywayMigration> migrations) {, +			this.name = name;, +			this.migrations = migrations;, +, +		public String getName() {, +			return this.name;, +, +		public List<FlywayMigration> getMigrations() {, +			return this.migrations;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		public FlywayEndpoint flywayEndpoint(Map<String, Flyway> flyways) {, +			return new FlywayEndpoint(flyways);, +		public LiquibaseEndpoint liquibaseEndpoint(, +				Map<String, SpringLiquibase> liquibases) {, +			return new LiquibaseEndpoint(liquibases);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/FlywayEndpoint.java, +import org.springframework.boot.actuate.endpoint.FlywayEndpoint.FlywayReport;, +public class FlywayEndpoint extends AbstractEndpoint<List<FlywayReport>> {, +	private final Map<String, Flyway> flyways;, +		this(Collections.singletonMap("default", flyway));, +	public FlywayEndpoint(Map<String, Flyway> flyways) {, +		Assert.notEmpty(flyways, "Flyways must be specified");, +		this.flyways = flyways;, +	public List<FlywayReport> invoke() {, +		List<FlywayReport> reports = new ArrayList<FlywayReport>();, +		for (Map.Entry<String, Flyway> entry : this.flyways.entrySet()) {, +			List<FlywayMigration> migrations = new ArrayList<FlywayMigration>();, +			for (MigrationInfo info : entry.getValue().info().all()) {, +				migrations.add(new FlywayMigration(info));, +			}, +			reports.add(new FlywayReport(entry.getKey(), migrations));, +		}, +		return reports;, +	}, +	/**, +	 * Flyway report for one datasource., +	 */, +	public static class FlywayReport {, +, +		private final String name;, +		private final List<FlywayMigration> migrations;, +, +		public FlywayReport(String name, List<FlywayMigration> migrations) {, +			this.name = name;, +			this.migrations = migrations;, +, +		public String getName() {, +			return this.name;, +, +		public List<FlywayMigration> getMigrations() {, +			return this.migrations;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java, +import java.util.ArrayList;, +import org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport;, +public class LiquibaseEndpoint extends AbstractEndpoint<List<LiquibaseReport>> {, +	private final Map<String, SpringLiquibase> liquibases;, +		this(Collections.singletonMap("default", liquibase));, +	public LiquibaseEndpoint(Map<String, SpringLiquibase> liquibase) {, +		Assert.notEmpty(liquibase, "Liquibase must be specified");]