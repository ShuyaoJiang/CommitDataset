[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			AnnotatedMethod setter = findSetter(beanDesc, writer);, +, +		private AnnotatedMethod findSetter(BeanDescription beanDesc,, +				BeanPropertyWriter writer) {, +			String name = "set" + StringUtils.capitalize(writer.getName());, +			Class<?> type = writer.getPropertyType();, +			AnnotatedMethod setter = beanDesc.findMethod(name, new Class<?>[] { type });, +			// The enabled property of endpoints returns a boolean primitive but is set, +			// using a Boolean class, +			if (setter == null && type.equals(Boolean.TYPE)) {, +				setter = beanDesc.findMethod(name, new Class<?>[] { Boolean.class });, +			}, +			return setter;, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +			AnnotatedMethod setter = findSetter(beanDesc, writer);, +, +		private AnnotatedMethod findSetter(BeanDescription beanDesc,, +				BeanPropertyWriter writer) {, +			String name = "set" + StringUtils.capitalize(writer.getName());, +			Class<?> type = writer.getPropertyType();, +			AnnotatedMethod setter = beanDesc.findMethod(name, new Class<?>[] { type });, +			// The enabled property of endpoints returns a boolean primitive but is set, +			// using a Boolean class, +			if (setter == null && type.equals(Boolean.TYPE)) {, +				setter = beanDesc.findMethod(name, new Class<?>[] { Boolean.class });, +			}, +			return setter;, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointTests.java, +import static org.hamcrest.Matchers.equalTo;, +	@Test, +	@SuppressWarnings("unchecked"), +	public void mixedBoolean() throws Exception {, +		ConfigurationPropertiesReportEndpoint report = getEndpointBean();, +		Map<String, Object> properties = report.invoke();, +		Map<String, Object> nestedProperties = (Map<String, Object>) ((Map<String, Object>) properties, +				.get("testProperties")).get("properties");, +		System.out.println(nestedProperties);, +		assertThat(nestedProperties.get("mixedBoolean"), equalTo((Object) true));, +	}, +, +		private Boolean mixedBoolean = true;, +, +		public boolean isMixedBoolean() {, +			return (this.mixedBoolean == null ? false : this.mixedBoolean);, +		}, +, +		public void setMixedBoolean(Boolean mixedBoolean) {, +			this.mixedBoolean = mixedBoolean;, +		}, +]