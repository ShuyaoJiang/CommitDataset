[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering, +can also be automatically applied to your application., +The {github-code}/spring-boot-project/spring-boot-actuator[`spring-boot-actuator`] module, +provides all of Spring Boot's production-ready features. The simplest way to enable the, +features is to add a dependency to the `spring-boot-starter-actuator` '`Starter`'., +To add the actuator to a Maven based project, add the following '`Starter`' dependency:, +The way that endpoints are exposed depends on the type of technology that you choose. Most, +applications choose HTTP monitoring, where the ID of the endpoint along with a prefix of, +`/application` is mapped to a URL. For example, by default, the `health` endpoint is, +mapped to `/application/health`., +|Shows application status information (that is, `health` status with no additional, + details)., +endpoints can be accessed without requiring authentication. You can do so by changing the, +`management.security.enabled` property, as follows:, +If you deploy applications publicly, you may want to add '`Spring Security`' to handle, +user authentication. When '`Spring Security`' is added, by default, '`basic`', +TIP: Generated passwords are logged as the application starts. To find the password in the, +console, search for '`Using default security password`'., +security role(s) required to access the endpoints. For example, you might set the, +following properties in your `application.properties`:, +in your security configuration. Also, you need to change the `management.security.enabled`, +property to `false`., +TIP: If you do not have a use case for exposing basic health information to, +unauthenticated users and you have secured the actuator endpoints with custom security,, +you can set `management.security.enabled` to `false`. This tells Spring Boot to skip the, +Endpoints can be customized by using Spring properties. You can change whether an endpoint, +is `enabled` and its `id`., +For example, the following `application.properties` changes the id of the `beans` endpoint, +and also enables `shutdown`:, +By default, all endpoints except for `shutdown` are enabled. If you prefer to specifically, +"`opt-in`" endpoint enablement, you can use the `endpoints.default.enabled` property. For, +example, the following settings disables _all_ endpoints except for `info`:, +When a custom management context path is configured, the "`discovery page`" automatically, +moves from `/application` to the root of the management context. For example, if the, +management context path is `/management`, then the discovery page is available from, +`/management`. When the management context path is set to `/`, the discovery page is, +disabled to prevent the possibility of a clash with other mappings., +flexible way what kind of cross domain requests are authorized. If you use Spring MVC or, +Spring WebFlux, Actuator's web endpoints can be configured to support such scenarios., +`management.endpoints.cors.allowed-origins` property has been set. The following, +configuration permits `GET` and `POST` calls from the `example.com` domain:, +TIP: See {sc-spring-boot-actuator-autoconfigure}/endpoint/web/servlet/CorsEndpointProperties.{sc-ext}[CorsEndpointProperties] for a complete list of options., +TIP: If you do this as a library feature, consider adding a configuration class annotated, +with `@ManagementContextConfiguration` to `/META-INF/spring.factories` under the key,, +`org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration`. If you do, +so and if your users ask for a separate management port or address, the endpoint moves to, +a child context with all the other web endpoints., +often used by monitoring software to alert someone when a production system goes down. The, +default information exposed by the `health` endpoint depends on how it is accessed. For an, +unauthenticated connection in a secure application, a simple '`status`' message is, +types, it is also possible for `Health` to return a custom `Status` that represents a new, +system state. In such cases, a custom implementation of the, +{sc-spring-boot-actuator}/health/HealthAggregator.{sc-ext}[`HealthAggregator`] interface, +also needs to be provided, or the default implementation has to be configured by using the, +`management.health.status.order` configuration property., +maps to 200, while `OUT_OF_SERVICE` and `DOWN` map to 503). You might also want to, +register custom status mappings if you access the health endpoint over HTTP. For example,, +the following property maps `FATAL` to 503 (service unavailable):, +properties. All `Environment` properties under the info key are automatically exposed. For, +example, you could add the following settings to your `application.properties` file:, +Another useful feature of the `info` endpoint is its ability to publish information about, +the state of your `git` source code repository when the project was built. If a, +`GitProperties` bean is available, the `git.branch`, `git.commit.id` and `git.commit.time`, +properties are exposed., +TIP: A `GitProperties` bean is auto-configured if a `git.properties` file is available at, +the root of the classpath. See, +If a `BuildProperties` bean is available, the `info` endpoint can also publish information, +about your build. This happens if a `META-INF/build-info.properties` file is available in, +the classpath., +If you are developing a Spring MVC application, Spring Boot Actuator auto-configures all, +enabled endpoints to be exposed over HTTP. The default convention is to use the `id` of, +the endpoint with a prefix of `/application` as the URL path. For example, `health` is, +exposed as `/application/health`., +Sometimes, it is useful to customize the prefix for the management endpoints. For example,, +your application might already use `/application` for another purpose. You can use the, +`management.endpoints.web.base-path` property to change the prefix for your management, +endpoint, as shown in the following example:, +The preceding `application.properties` example changes the endpoint from, +`/application/{id}` to `/manage/{id}` (e.g. `/manage/info`)., +HTTP port>>, `management.endpoints.web.base-path` is relative to `server.context-path`., +If `management.server.port` is configured, `management.endpoints.web.base-path` is, +relative to `management.server.servlet.context-path`., +Exposing management endpoints by using the default HTTP port is a sensible choice for, +cloud based deployments. If, however, your application runs inside your own data center,, +you may prefer to expose endpoints by using a different HTTP port., +You can set the `management.server.port` property to change the HTTP port, as shown in the, +following example:, +secure. In that case, you should have Spring Security on the classpath, and you can, +disable management security as follows:, +its own SSL by using the various `management.server.ssl.*` properties. For example, doing, +so lets a management server be available via HTTP while the main application uses HTTPS,, +as shown in the following property settings:, +You can customize the address that the management endpoints are available on by setting, +the `management.server.address` property. Doing so can be useful if you want to listen, +only on an internal or ops-facing network or to listen only for connections from, +NOTE: You can only listen on a different address if the port is different from the main, +server port., +The information exposed by the health endpoint varies, depending on whether it is accessed, +anonymously and whether the enclosing application is secure. By default, when accessed]