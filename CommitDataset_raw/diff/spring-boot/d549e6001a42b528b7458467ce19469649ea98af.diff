[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, +import java.util.Arrays;, +import java.util.List;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.AnySyncMongoClientAvailable;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.data.mongodb.core.SimpleMongoClientDbFactory;, + * @author Christoph Strobl, +@Conditional(AnySyncMongoClientAvailable.class), +	private final MongoDbFactoryFactory dbFactoryFactory;, +, +	public MongoDataAutoConfiguration(ObjectProvider<MongoClient> mongoClientProvider,, +			ObjectProvider<com.mongodb.client.MongoClient> mongoClientClientProvider,, +			MongoProperties properties) {, +, +		this.dbFactoryFactory = new MongoDbFactoryFactory(mongoClientProvider,, +				mongoClientClientProvider);, +	@Conditional(AnySyncMongoClientAvailable.class), +	public MongoDbFactory mongoDbFactory() {, +		return this.dbFactoryFactory.getFor(this.properties.getMongoClientDatabase());, +	/**, +	 * Check if either {@link com.mongodb.MongoClient} or, +	 * {@link com.mongodb.client.MongoClient} is already defined in the, +	 * {@link org.springframework.context.ApplicationContext}., +	 *, +	 * @author Christoph Strobl, +	 * @since 2.1, +	 */, +	static class AnySyncMongoClientAvailable extends AnyNestedCondition {, +, +		AnySyncMongoClientAvailable() {, +			super(ConfigurationPhase.REGISTER_BEAN);, +		}, +, +		@ConditionalOnBean(com.mongodb.MongoClient.class), +		static class MongoClientPreferred {, +, +		}, +, +		@ConditionalOnBean(com.mongodb.client.MongoClient.class), +		static class MongoClientClientPreferred {, +, +		}, +, +	}, +, +	/**, +	 * Encapsulation of {@link MongoDbFactory} creation depending on available beans, +	 * {@link com.mongodb.MongoClient} or {@link com.mongodb.client.MongoClient} expressed, +	 * via the given {@link ObjectProvider ObjectProviders}. Prefers the first available, +	 * MongoDB client creating a suitable instance of {@link MongoDbFactory} for it., +	 *, +	 * @author Christoph Strobl, +	 * @since 2.1, +	 */, +	static class MongoDbFactoryFactory {, +, +		private final List<ObjectProvider<?>> clientProviders;, +, +		/**, +		 * Create new instance of {@link MongoDbFactoryFactory}., +		 * @param clientProviders order matters here, as we choose the first available, +		 * one., +		 */, +		MongoDbFactoryFactory(ObjectProvider<?>... clientProviders) {, +			this.clientProviders = Arrays.asList(clientProviders);, +		}, +, +		/**, +		 * Get the {@link MongoDbFactory} suitable for the first available MongoDB client., +		 * @param database the name of the default database to return on, +		 * {@link MongoDbFactory#getDb()}., +		 * @return new instance of {@link MongoDbFactory} suitable for the first available, +		 * MongoDB client., +		 */, +		MongoDbFactory getFor(String database) {, +, +			Object client = findAvailableClientProvider();, +, +			if (client instanceof MongoClient) {, +				return new SimpleMongoDbFactory(MongoClient.class.cast(client), database);, +			}, +, +			if (client instanceof com.mongodb.client.MongoClient) {, +				return new SimpleMongoClientDbFactory(, +						com.mongodb.client.MongoClient.class.cast(client), database);, +			}, +, +			return null;, +		}, +, +		private Object findAvailableClientProvider() {, +, +			for (ObjectProvider<?> provider : this.clientProviders) {, +				Object client = provider.getIfAvailable();, +				if (client != null) {, +					return client;, +				}]