[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.freemarker</groupId>, +			<artifactId>freemarker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.freemarker</groupId>, +			<artifactId>freemarker</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.freemarker;, +, +import java.util.Map;, +import java.util.Properties;, +, +import javax.annotation.PostConstruct;, +import javax.servlet.Servlet;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.Ordered;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.DefaultResourceLoader;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;, +import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for FreeMarker., + *, + * @author Andy Wilkinson, + */, +@Configuration, +@ConditionalOnClass(freemarker.template.Configuration.class), +@ConditionalOnWebApplication, +@AutoConfigureAfter(WebMvcAutoConfiguration.class), +public class FreeMarkerAutoConfiguration {, +, +	public static final String DEFAULT_TEMPLATE_LOADER_PATH = "classpath:/templates/";, +, +	public static final String DEFAULT_PREFIX = "";, +, +	public static final String DEFAULT_SUFFIX = ".ftl";, +, +	@Configuration, +	public static class FreemarkerConfigurerConfiguration implements EnvironmentAware {, +, +		@Autowired, +		private final ResourceLoader resourceLoader = new DefaultResourceLoader();, +, +		private RelaxedPropertyResolver environment;, +, +		@Override, +		public void setEnvironment(Environment environment) {, +			this.environment = new RelaxedPropertyResolver(environment,, +					"spring.freeMarker.");, +		}, +, +		@PostConstruct, +		public void checkTemplateLocationExists() {, +			Boolean checkTemplateLocation = this.environment.getProperty(, +					"checkTemplateLocation", Boolean.class, true);, +			if (checkTemplateLocation) {, +				Resource resource = this.resourceLoader.getResource(this.environment, +						.getProperty("templateLoaderPath", DEFAULT_TEMPLATE_LOADER_PATH));, +				Assert.state(resource.exists(), "Cannot find template location: ", +						+ resource + " (please add some templates ", +						+ "or check your FreeMarker configuration)");, +			}, +		}]