[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		try {, +, +		}, +		catch (RuntimeException e) {, +			handle(e, args);, +			throw e;, +		}, +		catch (Error e) {, +			handle(e, args);, +			throw e;, +		}, +	private void handle(Throwable e, String... args) {, +		List<ApplicationContextInitializer<?>> initializers = new ArrayList<ApplicationContextInitializer<?>>(, +				getInitializers());, +		Collections.reverse(initializers);, +		for (ApplicationContextInitializer<?> initializer : initializers) {, +			if (initializer instanceof SpringApplicationErrorHandler) {, +				((SpringApplicationErrorHandler) initializer).handle(this, args, e);, +			}, +		}, +	}, +, +				getSpringFactoriesApplicationContextInitializers());, +		initializers.addAll(this.initializers);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		try {, +, +		}, +		catch (RuntimeException e) {, +			handle(e, args);, +			throw e;, +		}, +		catch (Error e) {, +			handle(e, args);, +			throw e;, +		}, +	private void handle(Throwable e, String... args) {, +		List<ApplicationContextInitializer<?>> initializers = new ArrayList<ApplicationContextInitializer<?>>(, +				getInitializers());, +		Collections.reverse(initializers);, +		for (ApplicationContextInitializer<?> initializer : initializers) {, +			if (initializer instanceof SpringApplicationErrorHandler) {, +				((SpringApplicationErrorHandler) initializer).handle(this, args, e);, +			}, +		}, +	}, +, +				getSpringFactoriesApplicationContextInitializers());, +		initializers.addAll(this.initializers);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationErrorHandler.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot;, +, +/**, + * Strategy interface that can be used to capture errors in a {@link SpringApplication}, + * after it fails to start up., + * , + * @author Dave Syer, + */, +public interface SpringApplicationErrorHandler {, +, +	/**, +	 * Finalize the application., +	 * , +	 * @param springApplication the spring application., +	 * @param args the run arguments, +	 * @param e an exception thrown during startup (or null if none), +	 */, +	void handle(SpringApplication springApplication, String[] args, Throwable e);, +, +}]