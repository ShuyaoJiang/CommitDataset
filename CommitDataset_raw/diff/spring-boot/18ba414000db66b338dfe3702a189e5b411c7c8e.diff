[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +import org.springframework.boot.test.context.ContextLoader;, +import org.springframework.context.ConfigurableApplicationContext;, +	private final ContextLoader contextLoader = new ContextLoader().autoConfig(, +			CacheAutoConfiguration.class);, +		this.contextLoader.config(EmptyConfiguration.class).load(context -> {, +			context.getBean(CacheManager.class);, +		});, +		this.contextLoader.config(CustomCacheManagerConfiguration.class).load(context -> {, +			ConcurrentMapCacheManager cacheManager = validateCacheManager(context,, +		});, +		this.contextLoader.config(CustomCacheManagerFromSupportConfiguration.class), +				.load(context -> {, +					ConcurrentMapCacheManager cacheManager = validateCacheManager(context,, +				});, +		this.contextLoader.config(CustomCacheResolverFromSupportConfiguration.class), +				.load(context -> {, +					context.getBean(CacheManager.class);, +				});, +		this.contextLoader.config(SpecificCacheResolverConfiguration.class), +				.env("spring.cache.type=simple").load(context -> {, +			validateCacheManager(context, ConcurrentMapCacheManager.class);, +			assertThat(context.getBeansOfType(CacheResolver.class)).hasSize(1);, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=foobar").loadAndFail(BeanCreationException.class,, +				ex -> assertThat(ex.getMessage()).contains(, +						"Failed to bind properties under 'spring.cache.type'"));, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=simple").load(context -> {, +			ConcurrentMapCacheManager cacheManager = validateCacheManager(context,, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=simple", "spring.cache.cacheNames[0]=foo",, +						"spring.cache.cacheNames[1]=bar").load(context -> {, +			ConcurrentMapCacheManager cacheManager = validateCacheManager(context,, +		});, +		this.contextLoader.config(GenericCacheConfiguration.class).load(context -> {, +			SimpleCacheManager cacheManager = validateCacheManager(context,, +					SimpleCacheManager.class);, +					.isEqualTo(context.getBean("firstCache"));, +					.isEqualTo(context.getBean("secondCache"));, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=generic").loadAndFail(BeanCreationException.class,, +				ex -> assertThat(ex.getMessage()).contains(, +						"No cache manager could be auto-configured", "GENERIC"));, +		this.contextLoader.config(GenericCacheConfiguration.class), +				.env("spring.cache.type=generic").load(context -> {, +			SimpleCacheManager cacheManager = validateCacheManager(context,, +					SimpleCacheManager.class);, +					.isEqualTo(context.getBean("firstCache"));, +					.isEqualTo(context.getBean("secondCache"));, +		});, +		this.contextLoader.config(CouchbaseCacheConfiguration.class), +				.env("spring.cache.type=couchbase").load(context -> {, +			CouchbaseCacheManager cacheManager = validateCacheManager(context,, +		});, +		this.contextLoader.config(CouchbaseCacheConfiguration.class), +				.env("spring.cache.type=couchbase", "spring.cache.cacheNames[0]=foo",, +						"spring.cache.cacheNames[1]=bar").load(context -> {, +			CouchbaseCacheManager cacheManager = validateCacheManager(context,, +					.isEqualTo(context.getBean("bucket"));, +		});, +		this.contextLoader.config(CouchbaseCacheConfiguration.class), +				.env("spring.cache.type=couchbase", "spring.cache.cacheNames=foo,bar",, +						"spring.cache.couchbase.expiration=2000").load(context -> {, +			CouchbaseCacheManager cacheManager = validateCacheManager(context,, +					.isEqualTo(context.getBean("bucket"));, +		});, +		this.contextLoader.config(RedisCacheConfiguration.class), +				.env("spring.cache.type=redis").load(context -> {, +			RedisCacheManager cacheManager = validateCacheManager(context,, +					RedisCacheManager.class);, +		});, +		this.contextLoader.config(RedisCacheConfiguration.class), +				.env("spring.cache.type=redis", "spring.cache.cacheNames[0]=foo",, +						"spring.cache.cacheNames[1]=bar").load(context -> {, +			RedisCacheManager cacheManager = validateCacheManager(context,, +					RedisCacheManager.class);, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=none").load(context -> {, +			NoOpCacheManager cacheManager = validateCacheManager(context,, +					NoOpCacheManager.class);, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=jcache").loadAndFail(ex -> {, +			assertThat(ex).isInstanceOf(BeanCreationException.class);, +			assertThat(ex.getMessage()).contains(, +					"No cache manager could be auto-configured", "JCACHE");, +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class), +				.env("spring.cache.type=jcache", "spring.cache.jcache.provider=", +						+ cachingProviderFqn).load(context -> {, +			JCacheCacheManager cacheManager = validateCacheManager(context,, +					JCacheCacheManager.class);, +			assertThat(context.getBean(javax.cache.CacheManager.class)), +		});, +		this.contextLoader.config(DefaultCacheConfiguration.class)]