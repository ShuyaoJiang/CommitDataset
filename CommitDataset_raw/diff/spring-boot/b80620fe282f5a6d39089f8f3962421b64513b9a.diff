[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import java.io.IOException;, +		try {, +			configurations = sort(configurations, autoConfigurationMetadata);, +		catch (IOException ex) {, +			throw new IllegalStateException(ex);, +		}, +	private List<String> sort(List<String> configurations,, +			AutoConfigurationMetadata autoConfigurationMetadata) throws IOException {, +		configurations = new AutoConfigurationSorter(getMetadataReaderFactory(),, +				autoConfigurationMetadata).getInPriorityOrder(configurations);, +		return configurations;, +	}, +, +	private MetadataReaderFactory getMetadataReaderFactory() {, +		try {, +			return getBeanFactory().getBean(, +					SharedMetadataReaderFactoryContextInitializer.BEAN_NAME,, +					MetadataReaderFactory.class);, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			return new CachingMetadataReaderFactory(this.resourceLoader);, +		}, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java, +import java.io.IOException;, +		try {, +			configurations = sort(configurations, autoConfigurationMetadata);, +		catch (IOException ex) {, +			throw new IllegalStateException(ex);, +		}, +	private List<String> sort(List<String> configurations,, +			AutoConfigurationMetadata autoConfigurationMetadata) throws IOException {, +		configurations = new AutoConfigurationSorter(getMetadataReaderFactory(),, +				autoConfigurationMetadata).getInPriorityOrder(configurations);, +		return configurations;, +	}, +, +	private MetadataReaderFactory getMetadataReaderFactory() {, +		try {, +			return getBeanFactory().getBean(, +					SharedMetadataReaderFactoryContextInitializer.BEAN_NAME,, +					MetadataReaderFactory.class);, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			return new CachingMetadataReaderFactory(this.resourceLoader);, +		}, +	}, +, +++ /dev/null]