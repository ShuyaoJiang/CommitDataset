[+++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +	protected JedisConnectionFactory resource;, +	protected JedisConnectionFactory obtainResource() throws Exception {, +		JedisConnectionFactory resource = new JedisConnectionFactory();, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +	protected JedisConnectionFactory resource;, +	protected JedisConnectionFactory obtainResource() throws Exception {, +		JedisConnectionFactory resource = new JedisConnectionFactory();, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +	protected JedisConnectionFactory resource;, +	protected JedisConnectionFactory obtainResource() throws Exception {, +		JedisConnectionFactory resource = new JedisConnectionFactory();, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import org.springframework.data.redis.connection.jedis.JedisConnection;, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +import redis.clients.jedis.Jedis;, +import redis.clients.jedis.JedisPoolConfig;, + * @author Andy Wilkinson, +@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class }), +			JedisConnectionFactory factory = new JedisConnectionFactory();, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +				JedisConnectionFactory factory = new JedisConnectionFactory(, +						jedisPoolConfig());, +			JedisConnectionFactory factory = new JedisConnectionFactory();, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +		private JedisPoolConfig jedisPoolConfig() {, +			JedisPoolConfig config = new JedisPoolConfig();, +			config.setMaxActive(props.getMaxActive());, +			config.setMaxIdle(props.getMaxIdle());, +			config.setMinIdle(props.getMinIdle());, +			config.setMaxWait(props.getMaxWait());, +			return config;, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +			<optional>true</optional>, +		</dependency>, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/repository/redis/RedisServer.java, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +	protected JedisConnectionFactory resource;, +	protected JedisConnectionFactory obtainResource() throws Exception {, +		JedisConnectionFactory resource = new JedisConnectionFactory();, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>redis.clients</groupId>, +			<artifactId>jedis</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java, +import org.springframework.data.redis.connection.jedis.JedisConnection;, +import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;, +import redis.clients.jedis.Jedis;, +import redis.clients.jedis.JedisPoolConfig;, + * @author Andy Wilkinson, +@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class }), +			JedisConnectionFactory factory = new JedisConnectionFactory();, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +				JedisConnectionFactory factory = new JedisConnectionFactory(, +						jedisPoolConfig());, +			JedisConnectionFactory factory = new JedisConnectionFactory();, +			factory.setHostName(this.properties.getHost());, +			factory.setPort(this.properties.getPort());, +		private JedisPoolConfig jedisPoolConfig() {, +			JedisPoolConfig config = new JedisPoolConfig();, +			config.setMaxActive(props.getMaxActive());, +			config.setMaxIdle(props.getMaxIdle());]