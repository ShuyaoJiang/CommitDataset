[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		HYPHEN_TO_UNDERSCORE {, +		PERIOD_TO_UNDERSCORE {, +			@Override, +			public String apply(String value) {, +				return value.replace(".", "_");, +			}, +		},, +		CAMELCASE_TO_UNDERSCORE {, +		UNDERSCORE_TO_CAMELCASE {, +				for (String field : value.split("[_\\-.]")) {, +				for (String suffix : new String[] { "_", "-", "." }), +					if (value.endsWith(suffix)) {, +						builder.append(suffix);, +					}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		HYPHEN_TO_UNDERSCORE {, +		PERIOD_TO_UNDERSCORE {, +			@Override, +			public String apply(String value) {, +				return value.replace(".", "_");, +			}, +		},, +		CAMELCASE_TO_UNDERSCORE {, +		UNDERSCORE_TO_CAMELCASE {, +				for (String field : value.split("[_\\-.]")) {, +				for (String suffix : new String[] { "_", "-", "." }), +					if (value.endsWith(suffix)) {, +						builder.append(suffix);, +					}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +				return this.resolver.getProperty(relaxedKey, targetType, defaultValue);, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +				return this.resolver.getPropertyAsClass(relaxedKey, targetType);, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +	 * specified key. NOTE: this method can only be used if the underlying resolver is a, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		HYPHEN_TO_UNDERSCORE {, +		PERIOD_TO_UNDERSCORE {, +			@Override, +			public String apply(String value) {, +				return value.replace(".", "_");, +			}, +		},, +		CAMELCASE_TO_UNDERSCORE {, +		UNDERSCORE_TO_CAMELCASE {, +				for (String field : value.split("[_\\-.]")) {, +				for (String suffix : new String[] { "_", "-", "." }), +					if (value.endsWith(suffix)) {, +						builder.append(suffix);, +					}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +				return this.resolver.getProperty(relaxedKey, targetType, defaultValue);, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +				return this.resolver.getPropertyAsClass(relaxedKey, targetType);, +		for (String relaxedKey : new RelaxedNames(this.prefix + key)) {, +			if (this.resolver.containsProperty(relaxedKey)) {, +	 * specified key. NOTE: this method can only be used if the underlying resolver is a, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, +	@Test, +	public void fromPeriods() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("spring.value").iterator();, +		assertThat(iterator.next(), equalTo("spring.value"));, +		assertThat(iterator.next(), equalTo("spring_value"));, +		assertThat(iterator.next(), equalTo("springValue"));, +		assertThat(iterator.next(), equalTo("springvalue"));, +		assertThat(iterator.next(), equalTo("SPRING.VALUE"));, +		assertThat(iterator.next(), equalTo("SPRING_VALUE"));, +		assertThat(iterator.next(), equalTo("SPRINGVALUE"));, +		assertThat(iterator.hasNext(), equalTo(false));, +	}, +, +	@Test, +	public void fromPrefixEndingInPeriod() throws Exception {, +		Iterator<String> iterator = new RelaxedNames("spring.").iterator();, +		assertThat(iterator.next(), equalTo("spring."));, +		assertThat(iterator.next(), equalTo("spring_"));, +		assertThat(iterator.next(), equalTo("SPRING."));, +		assertThat(iterator.next(), equalTo("SPRING_"));, +		assertThat(iterator.hasNext(), equalTo(false));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		HYPHEN_TO_UNDERSCORE {, +		PERIOD_TO_UNDERSCORE {, +			@Override, +			public String apply(String value) {, +				return value.replace(".", "_");, +			}, +		},, +		CAMELCASE_TO_UNDERSCORE {, +		UNDERSCORE_TO_CAMELCASE {, +				for (String field : value.split("[_\\-.]")) {]