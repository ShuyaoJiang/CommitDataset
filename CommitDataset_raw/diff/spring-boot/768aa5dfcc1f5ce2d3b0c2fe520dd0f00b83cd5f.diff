[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java, +import javax.validation.ValidationException;, +, +		try {, +			validator, +					.setMessageInterpolator(new MessageInterpolatorFactory().getObject());, +		}, +		catch (ValidationException ex) {, +			// Ignore, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapter.java, +import javax.validation.ValidationException;, +, +		try {, +			validator, +					.setMessageInterpolator(new MessageInterpolatorFactory().getObject());, +		}, +		catch (ValidationException ex) {, +			// Ignore, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/validation/ValidatorAdapterTests.java, +import org.springframework.boot.test.context.FilteredClassLoader;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.core.io.ClassPathResource;, + * @author Madhura Bhave, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner();, +		this.contextRunner.withUserConfiguration(LocalValidatorFactoryBeanConfig.class), +				.run((context) -> {, +					ValidatorAdapter wrapper = context.getBean(ValidatorAdapter.class);, +					MapBindingResult errors = new MapBindingResult(, +							new HashMap<String, Object>(), "test");, +				});, +		this.contextRunner.withUserConfiguration(NonManagedBeanConfig.class), +				.run((context) -> {, +					LocalValidatorFactoryBean validator = context, +					verify(validator, times(1)), +							.setApplicationContext(any(ApplicationContext.class));, +					context.close();, +				});, +		this.contextRunner.withUserConfiguration(ManagedBeanConfig.class), +				.run((context) -> {, +					LocalValidatorFactoryBean validator = context, +					verify(validator, never()), +							.setApplicationContext(any(ApplicationContext.class));, +					context.close();, +				});, +	@Test, +	public void wrapperWhenValidationProviderNotPresentShouldNotThrowException() {, +		ClassPathResource hibernateValidator = new ClassPathResource(, +				"META-INF/services/javax.validation.spi.ValidationProvider");, +		this.contextRunner, +				.withClassLoader(new FilteredClassLoader(, +						FilteredClassLoader.ClassPathResourceFilter, +								.of(hibernateValidator),, +						FilteredClassLoader.PackageFilter.of("org.hibernate.validator"))), +				.run((context) -> ValidatorAdapter.get(context, null));]