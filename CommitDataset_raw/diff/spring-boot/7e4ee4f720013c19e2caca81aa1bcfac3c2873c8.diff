[+++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +		if (!(object instanceof Map)) {, +			// A document can be a text literal, +			result.put("document", object);, +			return result;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +		if (!(object instanceof Map)) {, +			// A document can be a text literal, +			result.put("document", object);, +			return result;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +		if (resource == null || !resource.exists()) {, +			return null;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/config/YamlProcessor.java, +		if (!(object instanceof Map)) {, +			// A document can be a text literal, +			result.put("document", object);, +			return result;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +		if (resource == null || !resource.exists()) {, +			return null;, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/config/YamlProcessorTests.java, +import org.yaml.snakeyaml.parser.ParserException;, +	public void testStringResource() throws Exception {, +		this.processor.setResources(new Resource[] { new ByteArrayResource(, +				"foo # a document that is a literal".getBytes()) });, +		this.processor.process(new MatchCallback() {, +			@Override, +			public void process(Properties properties, Map<String, Object> map) {, +				assertEquals("foo", map.get("document"));, +			}, +		});, +	}, +, +	@Test, +	public void testBadDocumentStart() throws Exception {, +		this.processor.setResources(new Resource[] { new ByteArrayResource(, +				"foo # a document\nbar: baz".getBytes()) });, +		this.exception.expect(ParserException.class);, +		this.exception.expectMessage("line 2, column 1");, +		this.processor.process(new MatchCallback() {, +			@Override, +			public void process(Properties properties, Map<String, Object> map) {, +			}, +		});, +	}, +, +	@Test]