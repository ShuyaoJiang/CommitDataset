[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +						(session) -> session.createTextMessage(messageId))), +				.run((context) -> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +						(session) -> session.createTextMessage(messageId))), +				.run((context) -> {, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfigurationTests.java, +					this.contextRunner, +							.withUserConfiguration(ExistingDataSourceConfiguration.class), +							.run((secondContext) -> {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +						(session) -> session.createTextMessage(messageId))), +				.run((context) -> {, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfigurationTests.java, +					this.contextRunner, +							.withUserConfiguration(ExistingDataSourceConfiguration.class), +							.run((secondContext) -> {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +import java.util.Collections;, +	private final TestPropertyValues environmentProperties;, +	private final TestPropertyValues systemProperties;, +	private final ClassLoader classLoader;, +	private final ApplicationContext parent;, +	private final List<Configurations> configurations;, +		this(contextFactory, TestPropertyValues.empty(), TestPropertyValues.empty(), null,, +				null, Collections.emptyList());, +	}, +, +	/**, +	 * Create a new {@link AbstractApplicationContextRunner} instance., +	 * @param contextFactory the factory used to create the actual context, +	 * @param environmentProperties the environment properties, +	 * @param systemProperties the system properties, +	 * @param classLoader the class loader, +	 * @param parent the parent, +	 * @param configurations the configuration, +	 */, +	protected AbstractApplicationContextRunner(Supplier<C> contextFactory,, +			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,, +			ClassLoader classLoader, ApplicationContext parent,, +			List<Configurations> configurations) {, +		Assert.notNull(environmentProperties, "EnvironmentProperties must not be null");, +		Assert.notNull(systemProperties, "SystemProperties must not be null");, +		Assert.notNull(configurations, "Configurations must not be null");, +		this.environmentProperties = environmentProperties;, +		this.systemProperties = systemProperties;, +		this.classLoader = classLoader;, +		this.parent = parent;, +		this.configurations = Collections.unmodifiableList(configurations);, +	 * @return a new instance with the updated property values, +		return newInstance(this.contextFactory, this.environmentProperties.and(pairs),, +				this.systemProperties, this.classLoader, this.parent,, +				this.configurations);, +	 * @return a new instance with the updated system properties, +		return newInstance(this.contextFactory, this.environmentProperties,, +				this.systemProperties.and(pairs), this.classLoader, this.parent,, +				this.configurations);, +	 * @return a new instance with the updated class loader, +		return newInstance(this.contextFactory, this.environmentProperties,, +				this.systemProperties, classLoader, this.parent, this.configurations);, +	 * @return a new instance with the updated parent, +		return newInstance(this.contextFactory, this.environmentProperties,, +				this.systemProperties, this.classLoader, parent, this.configurations);, +	 * @return a new instance with the updated configuration, +	 * @return a new instance with the updated configuration, +		return newInstance(this.contextFactory, this.environmentProperties,, +				this.systemProperties, this.classLoader, this.parent,, +				add(this.configurations, configurations));, +	private <T> List<T> add(List<T> list, T element) {, +		List<T> result = new ArrayList<>(list);, +		result.add(element);, +		return result;, +	protected abstract SELF newInstance(Supplier<C> contextFactory,, +			TestPropertyValues environmentProperties, TestPropertyValues systemProperties,, +			ClassLoader classLoader, ApplicationContext parent,, +			List<Configurations> configurations);, +, +	 * @return this instance, +	@SuppressWarnings("unchecked"), +	public SELF run(ContextConsumer<? super A> consumer) {, +		return (SELF) this;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java, +						(session) -> session.createTextMessage(messageId))), +				.run((context) -> {, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfigurationTests.java, +					this.contextRunner, +							.withUserConfiguration(ExistingDataSourceConfiguration.class), +							.run((secondContext) -> {, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java, +import java.util.Collections;, +	private final TestPropertyValues environmentProperties;, +	private final TestPropertyValues systemProperties;, +	private final ClassLoader classLoader;, +	private final ApplicationContext parent;, +	private final List<Configurations> configurations;, +		this(contextFactory, TestPropertyValues.empty(), TestPropertyValues.empty(), null,, +				null, Collections.emptyList());, +	}, +, +	/**]