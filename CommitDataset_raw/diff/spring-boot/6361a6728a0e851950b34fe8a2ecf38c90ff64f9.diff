[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, + * @author Andy Wilkinson, +	 * @throws RestClientException on client-side HTTP error on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * Update a resource by PATCHing the given object to the URI template, and returns the, +	 * representation found in the response., +	 * <p>, +	 * URI Template variables are expanded using the given URI variables, if any., +	 * <p>, +	 * The {@code request} parameter can be a {@link HttpEntity} in order to add, +	 * additional HTTP headers to the request., +	 * @param url the URL, +	 * @param request the Object to be PATCHed, may be {@code null}, +	 * @param responseType the type of the return value, +	 * @param uriVariables the variables to expand the template, +	 * @param <T> the type of the return value, +	 * @return the converted object, +	 * @throws RestClientException on client-side HTTP error, +	 * @see HttpEntity, +	 * @since 2.0, +	 */, +	<T> T patchForObject(String url, Object request, Class<T> responseType,, +			Object... uriVariables) throws RestClientException {, +		return this.restTemplate.patchForObject(url, request, responseType, uriVariables);, +	}, +, +	/**, +	 * Update a resource by PATCHing the given object to the URI template, and returns the, +	 * representation found in the response., +	 * <p>, +	 * URI Template variables are expanded using the given map., +	 * <p>, +	 * The {@code request} parameter can be a {@link HttpEntity} in order to add, +	 * additional HTTP headers to the request., +	 * @param url the URL, +	 * @param request the Object to be PATCHed, may be {@code null}, +	 * @param responseType the type of the return value, +	 * @param uriVariables the variables to expand the template, +	 * @param <T> the type of the return value, +	 * @return the converted object, +	 * @throws RestClientException on client-side HTTP error, +	 * @see HttpEntity, +	 * @since 2.0, +	 */, +	<T> T patchForObject(String url, Object request, Class<T> responseType,, +			Map<String, ?> uriVariables) throws RestClientException {, +		return this.restTemplate.patchForObject(url, request, responseType, uriVariables);, +	}, +, +	/**, +	 * Update a resource by PATCHing the given object to the URL, and returns the, +	 * representation found in the response., +	 * <p>, +	 * The {@code request} parameter can be a {@link HttpEntity} in order to add, +	 * additional HTTP headers to the request., +	 * @param url the URL, +	 * @param request the Object to be POSTed, may be {@code null}, +	 * @param responseType the type of the return value, +	 * @param <T> the type of the return value, +	 * @return the converted object, +	 * @throws RestClientException on client-side HTTP error, +	 * @see HttpEntity, +	 * @since 2.0, +	 */, +	<T> T patchForObject(URI url, Object request, Class<T> responseType), +			throws RestClientException {, +		return this.restTemplate.patchForObject(url, request, responseType);, +, +	}, +, +	/**, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error, +	 * @throws RestClientException on client-side HTTP error]