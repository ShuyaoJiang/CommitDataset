[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java, + * Copyright 2012-2018 the original author or authors., +	private final Binder binder;, +, +		this.binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				this.conversionService);, +, +			this.binder.bind(annotation.prefix(), bindable, handler);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java, + * Copyright 2012-2018 the original author or authors., +	private final Binder binder;, +, +		this.binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				this.conversionService);, +, +			this.binder.bind(annotation.prefix(), bindable, handler);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinderBuilder.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinder.java, + * Copyright 2012-2018 the original author or authors., +	private final Binder binder;, +, +		this.binder = new Binder(this.configurationSources,, +				new PropertySourcesPlaceholdersResolver(this.propertySources),, +				this.conversionService);, +, +			this.binder.bind(annotation.prefix(), bindable, handler);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinderBuilder.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinderBuilderTests.java, + * Copyright 2012-2018 the original author or authors., +		ConfigurationPropertiesBinder binder = builderWithSources().build();, +		ConfigurationPropertiesBinder binder = builderWithSources().build();, +		this.applicationContext.registerSingleton(, +				ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME,, +		ConfigurationPropertiesBinder binder = builderWithSources().build();, +		assertThat(ReflectionTestUtils.getField(binder, "validator")), +				.isSameAs(this.applicationContext.getBean(, +						ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME));, +		ConfigurationPropertiesBinder binder = builderWithSources().build();, +		ConfigurationPropertiesBinder binder = builderWithSources().build();, +	private ConfigurationPropertiesBinderBuilder builderWithSources() {, +		return this.builder.withPropertySources(this.environment.getPropertySources());, +	}, +]