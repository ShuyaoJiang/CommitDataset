[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.util.ArrayList;, +import java.util.Arrays;, +import org.springframework.util.FileCopyUtils;, + * @author Andy Wilkinson, +				new InstallFileProcessorFactory());, +				new UninstallFileProcessorFactory());, +	private InstallCommand(String name, String description, FileProcessorFactory visitor) {, +		private FileProcessorFactory factory;, +		public InstallOptionHandler(FileProcessorFactory factory) {, +					List<URL> initialUrls = getClassPathUrls(groovyCompiler);, +					List<URL> urlsToProcessor = getClassPathUrls(groovyCompiler);, +					urlsToProcessor.removeAll(initialUrls);, +, +					processJars(urlsToProcessor);, +		private List<URL> getClassPathUrls(GroovyCompiler compiler) {, +			return new ArrayList<URL>(Arrays.asList(compiler.getLoader().getURLs()));, +		}, +, +		private void processJars(List<URL> urlsToProcess) throws IOException {, +, +			FileProcessor processor = this.factory.processor(lib);, +, +			for (URL url : urlsToProcess) {, +				File file = toFile(url);, +				if (file.getName().endsWith(".jar")) {, +					processor.processFile(file);, +				}, +			}, +		}, +, +		private File toFile(URL url) {, +			try {, +				return new File(url.toURI());, +			}, +			catch (URISyntaxException ex) {, +				return new File(url.getPath());, +			}, +			File[] filesInLib = lib.listFiles();, +			if (filesInLib != null) {, +				FileProcessor processor = new DeleteNotTheCliProcessor();, +				for (File file : filesInLib) {, +					processor.processFile(file);, +				}, +			}, +	private interface FileProcessorFactory {, +		FileProcessor processor(File lib);, +	private interface FileProcessor {, +		void processFile(File file) throws IOException;, +	}, +, +	private static class DeleteNotTheCliProcessor implements FileProcessor {, +		public void processFile(File file) throws IOException {, +			if (!file.getName().startsWith("spring-boot-cli")) {, +				file.delete();, +	}, +, +	private static class InstallFileProcessorFactory implements FileProcessorFactory {, +		public FileProcessor processor(final File lib) {, +			return new FileProcessor() {, +				public void processFile(File file) throws IOException {, +					FileCopyUtils.copy(file, new File(lib, file.getName()));, +	private static class UninstallFileProcessorFactory implements FileProcessorFactory {, +		public FileProcessor processor(final File lib) {, +			return new FileProcessor() {, +				public void processFile(File file) throws IOException {, +					new File(lib, file.getName()).delete();]