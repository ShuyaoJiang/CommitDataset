[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		for (ConfigurationPropertyName from : getAliases()) {, +			for (ConfigurationPropertyName alias : getAliases().getAliases(from)) {, +				if (name.isAncestorOf(alias)) {, +					if (this.source.getConfigurationProperty(from) != null) {, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		for (ConfigurationPropertyName from : getAliases()) {, +			for (ConfigurationPropertyName alias : getAliases().getAliases(from)) {, +				if (name.isAncestorOf(alias)) {, +					if (this.source.getConfigurationProperty(from) != null) {, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameAliases.java, +import java.util.Iterator;, +public final class ConfigurationPropertyNameAliases, +		implements Iterable<ConfigurationPropertyName> {, +	@Override, +	public Iterator<ConfigurationPropertyName> iterator() {, +		return this.aliases.keySet().iterator();, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			ConfigurationPropertyState aliasResult = this.source, +					.containsDescendantOf(alias);, +			if (aliasResult != ConfigurationPropertyState.ABSENT) {, +				return aliasResult;, +			}, +		}, +		for (ConfigurationPropertyName from : getAliases()) {, +			for (ConfigurationPropertyName alias : getAliases().getAliases(from)) {, +				if (name.isAncestorOf(alias)) {, +					if (this.source.getConfigurationProperty(from) != null) {, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameAliases.java, +import java.util.Iterator;, +public final class ConfigurationPropertyNameAliases, +		implements Iterable<ConfigurationPropertyName> {, +	@Override, +	public Iterator<ConfigurationPropertyName> iterator() {, +		return this.aliases.keySet().iterator();, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySourceTests.java, +import java.util.Collections;, +, +				.withAliases(new ConfigurationPropertyNameAliases("foo", "bar"));, +		ConfigurationPropertySource source = new MapConfigurationPropertySource(, +				Collections.singletonMap("foo.bar", "foobar"));, +				.withAliases(new ConfigurationPropertyNameAliases("foo.bar", "baz.foo"));, +		assertThat(aliased.containsDescendantOf(ConfigurationPropertyName.of("baz")))]