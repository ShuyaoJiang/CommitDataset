[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.StatusEndpoint;, +import org.springframework.boot.actuate.health.HealthIndicatorFactory;, +	static class HealthEndpointConfiguration {, +, +		private final HealthIndicator healthIndicator;, +, +		HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +				ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +			this.healthIndicator = new HealthIndicatorFactory().createHealthIndicator(, +					healthAggregator.getIfAvailable(OrderedHealthAggregator::new),, +					healthIndicators.getIfAvailable(Collections::emptyMap));, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		@ConditionalOnEnabledEndpoint, +		public HealthEndpoint healthEndpoint() {, +			return new HealthEndpoint(this.healthIndicator);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		@ConditionalOnEnabledEndpoint, +		public StatusEndpoint statusEndpoint() {, +			return new StatusEndpoint(this.healthIndicator);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.StatusEndpoint;, +import org.springframework.boot.actuate.health.HealthIndicatorFactory;, +	static class HealthEndpointConfiguration {, +, +		private final HealthIndicator healthIndicator;, +, +		HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +				ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +			this.healthIndicator = new HealthIndicatorFactory().createHealthIndicator(, +					healthAggregator.getIfAvailable(OrderedHealthAggregator::new),, +					healthIndicators.getIfAvailable(Collections::emptyMap));, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		@ConditionalOnEnabledEndpoint, +		public HealthEndpoint healthEndpoint() {, +			return new HealthEndpoint(this.healthIndicator);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		@ConditionalOnEnabledEndpoint, +		public StatusEndpoint statusEndpoint() {, +			return new StatusEndpoint(this.healthIndicator);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.endpoint.StatusEndpoint;, +import org.springframework.boot.actuate.endpoint.web.HealthStatusHttpMapper;, +import org.springframework.boot.actuate.endpoint.web.StatusWebEndpointExtension;, +		return new HealthWebEndpointExtension(delegate,, +				createHealthStatusHttpMapper(extensionProperties));, +, +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint, +	@ConditionalOnBean(value = StatusEndpoint.class, search = SearchStrategy.CURRENT), +	public StatusWebEndpointExtension statusWebEndpointExtension(StatusEndpoint delegate,, +			HealthWebEndpointExtensionProperties extensionProperties) {, +		return new StatusWebEndpointExtension(delegate,, +				createHealthStatusHttpMapper(extensionProperties));, +	}, +, +	private HealthStatusHttpMapper createHealthStatusHttpMapper(, +			HealthWebEndpointExtensionProperties extensionProperties) {, +		HealthStatusHttpMapper statusHttpMapper = new HealthStatusHttpMapper();, +		if (extensionProperties.getMapping() != null) {, +			statusHttpMapper.addStatusMapping(extensionProperties.getMapping());, +		}, +		return statusHttpMapper;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.StatusEndpoint;, +import org.springframework.boot.actuate.health.HealthIndicatorFactory;, +	static class HealthEndpointConfiguration {, +, +		private final HealthIndicator healthIndicator;, +, +		HealthEndpointConfiguration(ObjectProvider<HealthAggregator> healthAggregator,, +				ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +			this.healthIndicator = new HealthIndicatorFactory().createHealthIndicator(, +					healthAggregator.getIfAvailable(OrderedHealthAggregator::new),, +					healthIndicators.getIfAvailable(Collections::emptyMap));, +		}, +]