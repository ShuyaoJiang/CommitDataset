[+++ /dev/null, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java, +import org.springframework.boot.origin.Origin;, +import org.springframework.boot.origin.OriginLookup;, + * {@link OriginAwareSystemEnvironmentPropertySource} that can track the, +			SystemEnvironmentPropertySource source = new OriginAwareSystemEnvironmentPropertySource(sourceName, originalSource);, +	/**, +	 * {@link SystemEnvironmentPropertySource} that also tracks {@link Origin}., +	 */, +	protected static class OriginAwareSystemEnvironmentPropertySource extends SystemEnvironmentPropertySource, +			implements OriginLookup<String> {, +, +		OriginAwareSystemEnvironmentPropertySource(String name, Map<String, Object> source) {, +			super(name, source);, +		}, +, +		@Override, +		public Origin getOrigin(String key) {, +			String property = resolvePropertyName(key);, +			if (super.containsProperty(property)) {, +				return new SystemEnvironmentOrigin(property);, +			}, +			return null;, +		}, +	}, +, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java, +import org.springframework.boot.origin.Origin;, +import org.springframework.boot.origin.OriginLookup;, + * {@link OriginAwareSystemEnvironmentPropertySource} that can track the, +			SystemEnvironmentPropertySource source = new OriginAwareSystemEnvironmentPropertySource(sourceName, originalSource);, +	/**, +	 * {@link SystemEnvironmentPropertySource} that also tracks {@link Origin}., +	 */, +	protected static class OriginAwareSystemEnvironmentPropertySource extends SystemEnvironmentPropertySource, +			implements OriginLookup<String> {, +, +		OriginAwareSystemEnvironmentPropertySource(String name, Map<String, Object> source) {, +			super(name, source);, +		}, +, +		@Override, +		public Origin getOrigin(String key) {, +			String property = resolvePropertyName(key);, +			if (super.containsProperty(property)) {, +				return new SystemEnvironmentOrigin(property);, +			}, +			return null;, +		}, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/env/SystemEnvironmentPropertySourceEnvironmentPostProcessor.java, +import org.springframework.boot.origin.Origin;, +import org.springframework.boot.origin.OriginLookup;, + * {@link OriginAwareSystemEnvironmentPropertySource} that can track the, +			SystemEnvironmentPropertySource source = new OriginAwareSystemEnvironmentPropertySource(sourceName, originalSource);, +	/**, +	 * {@link SystemEnvironmentPropertySource} that also tracks {@link Origin}., +	 */, +	protected static class OriginAwareSystemEnvironmentPropertySource extends SystemEnvironmentPropertySource, +			implements OriginLookup<String> {, +, +		OriginAwareSystemEnvironmentPropertySource(String name, Map<String, Object> source) {, +			super(name, source);, +		}, +, +		@Override, +		public Origin getOrigin(String key) {, +			String property = resolvePropertyName(key);, +			if (super.containsProperty(property)) {, +				return new SystemEnvironmentOrigin(property);, +			}, +			return null;, +		}, +	}, +, +++ /dev/null, +++ b/spring-boot/src/test/java/org/springframework/boot/env/SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.java, +import java.util.Collections;, +import org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor.OriginAwareSystemEnvironmentPropertySource;, +import org.springframework.core.env.SystemEnvironmentPropertySource;, +		assertThat(replaced).isInstanceOf(OriginAwareSystemEnvironmentPropertySource.class);, +	public void replacedPropertySourceShouldBeOriginAware() throws Exception {, +		OriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment.getPropertySources(), +		Map<String, Object> replacedMap = replaced, +			Object actual = replacedMap.get(entry.getKey());, +			assertThat(actual).isEqualTo(entry.getValue());, +			assertThat(replaced.getOrigin(entry.getKey())).isInstanceOf(SystemEnvironmentOrigin.class);, +	@Test, +	public void replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin() throws Exception {, +		SystemEnvironmentPropertySourceEnvironmentPostProcessor postProcessor = new SystemEnvironmentPropertySourceEnvironmentPostProcessor();, +		postProcessor.postProcessEnvironment(this.environment, null);, +		OriginAwareSystemEnvironmentPropertySource replaced = (OriginAwareSystemEnvironmentPropertySource) this.environment.getPropertySources(), +				.get("systemEnvironment");, +		assertThat(replaced.getOrigin("NON_EXISTENT")).isNull();, +	}]