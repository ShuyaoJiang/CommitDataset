[+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.java, +	 * on the classpath. Also determines if, +	 * {@link org.springframework.security.config.annotation.web.WebSecurityConfigurer}, +	 * classes should be included in the application context. Defaults to {@code true}., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.java, +	 * on the classpath. Also determines if, +	 * {@link org.springframework.security.config.annotation.web.WebSecurityConfigurer}, +	 * classes should be included in the application context. Defaults to {@code true}., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilter.java, +import org.springframework.util.ClassUtils;, + * @author Madhura Bhave, +	private static final String SECURITY_CONFIGURER = "org.springframework.security.config.annotation.web.WebSecurityConfigurer";, +, +	private static final Set<Class<?>> DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER;, +, +	static {, +		Set<Class<?>> includes = new LinkedHashSet<>(DEFAULT_INCLUDES);, +		try {, +			includes.add(ClassUtils.forName(SECURITY_CONFIGURER, null));, +		}, +		catch (Exception ex) {, +		}, +		DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER = Collections.unmodifiableSet(includes);, +	}, +, +	private static final Set<Class<?>> DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER;, +, +	static {, +		Set<Class<?>> includes = new LinkedHashSet<>(, +				DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER);, +		includes.add(Controller.class);, +		DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER = Collections, +				.unmodifiableSet(includes);, +	}, +, +		if (this.annotation.secure()) {, +			if (ObjectUtils.isEmpty(this.annotation.controllers())) {, +				return DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER;, +			}, +			return DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER;, +		}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.java, +	 * on the classpath. Also determines if, +	 * {@link org.springframework.security.config.annotation.web.WebSecurityConfigurer}, +	 * classes should be included in the application context. Defaults to {@code true}., +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilter.java, +import org.springframework.util.ClassUtils;, + * @author Madhura Bhave, +	private static final String SECURITY_CONFIGURER = "org.springframework.security.config.annotation.web.WebSecurityConfigurer";, +, +	private static final Set<Class<?>> DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER;, +, +	static {, +		Set<Class<?>> includes = new LinkedHashSet<>(DEFAULT_INCLUDES);, +		try {, +			includes.add(ClassUtils.forName(SECURITY_CONFIGURER, null));, +		}, +		catch (Exception ex) {, +		}, +		DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER = Collections.unmodifiableSet(includes);, +	}, +, +	private static final Set<Class<?>> DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER;, +, +	static {, +		Set<Class<?>> includes = new LinkedHashSet<>(, +				DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER);, +		includes.add(Controller.class);, +		DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER = Collections, +				.unmodifiableSet(includes);, +	}, +, +		if (this.annotation.secure()) {, +			if (ObjectUtils.isEmpty(this.annotation.controllers())) {, +				return DEFAULT_INCLUDES_SECURITY_CONFIGURER_AND_CONTROLLER;, +			}, +			return DEFAULT_INCLUDES_AND_SECURITY_CONFIGURER;, +		}, +++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTypeExcludeFilterTests.java, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;, +		assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();, +		assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();, +		assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isTrue();, +		assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isFalse();, +	}, +, +	@Test, +	public void matchWhenSecureFalse() throws Exception {, +		WebMvcTypeExcludeFilter filter = new WebMvcTypeExcludeFilter(, +				WithSecureFalse.class);, +		assertThat(excludes(filter, Controller1.class)).isFalse();, +		assertThat(excludes(filter, Controller2.class)).isFalse();, +		assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse();, +		assertThat(excludes(filter, ExampleWeb.class)).isFalse();, +		assertThat(excludes(filter, ExampleMessageConverter.class)).isFalse();, +		assertThat(excludes(filter, ExampleService.class)).isTrue();, +		assertThat(excludes(filter, ExampleRepository.class)).isTrue();, +		assertThat(excludes(filter, ExampleWebSecurityConfigurer.class)).isTrue();, +	@WebMvcTest(secure = false), +	static class WithSecureFalse {]