[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GenericBomAstTransformation.java, + * Copyright 2012-2015 the original author or authors., + * dependencies in the BOM (and it's transitives) will be added to the dependency, + * {@code @Grab}. To install, implement the missing methods and list the class in, + * {@code META-INF/services/org.springframework.boot.cli.compiler.SpringBootAstTransformation}, + * @since 1.3.0, +	 * {@code @Grab})., +	 * @return the maven co-ordinates of the BOM to add, +	protected abstract String getBomModule();, +		if (!annotations.isEmpty()) {, +			return annotations.get(0);, +		}, +		AnnotationNode annotation = new AnnotationNode(BOM);, +		PackageNode packageNode = node.getPackage();, +		if (packageNode != null && !packageNode.getAnnotations(BOM).isEmpty()) {, +			return packageNode;, +			return node.getClasses().get(0);, +		return packageNode;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GenericBomAstTransformation.java, + * Copyright 2012-2015 the original author or authors., + * dependencies in the BOM (and it's transitives) will be added to the dependency, + * {@code @Grab}. To install, implement the missing methods and list the class in, + * {@code META-INF/services/org.springframework.boot.cli.compiler.SpringBootAstTransformation}, + * @since 1.3.0, +	 * {@code @Grab})., +	 * @return the maven co-ordinates of the BOM to add, +	protected abstract String getBomModule();, +		if (!annotations.isEmpty()) {, +			return annotations.get(0);, +		}, +		AnnotationNode annotation = new AnnotationNode(BOM);, +		PackageNode packageNode = node.getPackage();, +		if (packageNode != null && !packageNode.getAnnotations(BOM).isEmpty()) {, +			return packageNode;, +			return node.getClasses().get(0);, +		return packageNode;, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/GenericBomAstTransformationTests.java, + * @author Dave Syer, +, +		PackageNode packageNode = this.moduleNode.getPackage();, +		if (packageNode != null) {, +			if (!packageNode.getAnnotations(bom).isEmpty()) {, +				return packageNode.getAnnotations(bom).get(0);, +			return this.moduleNode.getClasses().get(0).getAnnotations(bom).get(0);]