[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java, + * Copyright 2012-2018 the original author or authors., +import io.netty.handler.ssl.ClientAuth;, +		if (this.ssl.getClientAuth() == Ssl.ClientAuth.NEED) {, +			sslBuilder = sslBuilder.clientAuth(ClientAuth.REQUIRE);, +		}, +		else if (this.ssl.getClientAuth() == Ssl.ClientAuth.WANT) {, +			sslBuilder = sslBuilder.clientAuth(ClientAuth.OPTIONAL);, +		}, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java, + * Copyright 2012-2018 the original author or authors., +import io.netty.handler.ssl.ClientAuth;, +		if (this.ssl.getClientAuth() == Ssl.ClientAuth.NEED) {, +			sslBuilder = sslBuilder.clientAuth(ClientAuth.REQUIRE);, +		}, +		else if (this.ssl.getClientAuth() == Ssl.ClientAuth.WANT) {, +			sslBuilder = sslBuilder.clientAuth(ClientAuth.OPTIONAL);, +		}, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java, + * Copyright 2012-2018 the original author or authors., +import java.io.File;, +import java.io.FileInputStream;, +import java.security.KeyStore;, +import java.time.Duration;, +, +import javax.net.ssl.KeyManagerFactory;, +import javax.net.ssl.SSLException;, +, +import org.assertj.core.api.Assumptions;, +import reactor.test.StepVerifier;, +import org.springframework.boot.web.embedded.undertow.UndertowReactiveWebServerFactory;, +		testBasicSslWithKeyStore("classpath:test.jks", "password");, +		testBasicSslWithKeyStore("src/test/resources/test.jks", "password");, +	protected final void testBasicSslWithKeyStore(String keyStore, String keyPassword) {, +		ssl.setKeyPassword(keyPassword);, +	@Test, +	public void sslWantsClientAuthenticationSucceedsWithClientCertificate() throws Exception {, +		Ssl ssl = new Ssl();, +		ssl.setClientAuth(Ssl.ClientAuth.WANT);, +		ssl.setKeyStore("classpath:test.jks");, +		ssl.setKeyPassword("password");, +		ssl.setTrustStore("classpath:test.jks");, +, +		testClientAuthSuccess(ssl, buildTrustAllSslWithClientKeyConnector());, +	}, +, +, +	@Test, +	public void sslWantsClientAuthenticationSucceedsWithoutClientCertificate() throws Exception {, +		Ssl ssl = new Ssl();, +		ssl.setClientAuth(Ssl.ClientAuth.WANT);, +		ssl.setKeyStore("classpath:test.jks");, +		ssl.setKeyPassword("password");, +		ssl.setTrustStore("classpath:test.jks");, +, +		testClientAuthSuccess(ssl, buildTrustAllSslConnector());, +	}, +, +	protected ReactorClientHttpConnector buildTrustAllSslWithClientKeyConnector() throws Exception {, +		KeyStore clientKeyStore = KeyStore.getInstance(KeyStore.getDefaultType());, +		clientKeyStore.load(new FileInputStream(new File("src/test/resources/test.jks")),, +				"secret".toCharArray());, +		KeyManagerFactory clientKeyManagerFactory =, +				KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());, +		clientKeyManagerFactory.init(clientKeyStore, "password".toCharArray());, +		return new ReactorClientHttpConnector(, +				(options) -> options.sslSupport(sslContextBuilder -> {, +					sslContextBuilder.sslProvider(SslProvider.JDK), +							.trustManager(InsecureTrustManagerFactory.INSTANCE), +							.keyManager(clientKeyManagerFactory);, +				}));, +	}, +, +	protected void testClientAuthSuccess(Ssl sslConfiguration, ReactorClientHttpConnector clientConnector) {, +		AbstractReactiveWebServerFactory factory = getFactory();, +		factory.setSsl(sslConfiguration);, +, +		this.webServer = factory.getWebServer(new EchoHandler());, +		this.webServer.start();, +, +		WebClient client = WebClient.builder(), +				.baseUrl("https://localhost:" + this.webServer.getPort()), +				.clientConnector(clientConnector).build();, +		Mono<String> result = client.post().uri("/test").contentType(MediaType.TEXT_PLAIN), +				.body(BodyInserters.fromObject("Hello World")).exchange(), +				.flatMap((response) -> response.bodyToMono(String.class));, +		assertThat(result.block()).isEqualTo("Hello World");, +	}, +, +	@Test, +	public void sslNeedsClientAuthenticationSucceedsWithClientCertificate() throws Exception {, +		Ssl ssl = new Ssl();, +		ssl.setClientAuth(Ssl.ClientAuth.NEED);, +		ssl.setKeyStore("classpath:test.jks");, +		ssl.setKeyPassword("password");, +		ssl.setTrustStore("classpath:test.jks");, +, +		testClientAuthSuccess(ssl, buildTrustAllSslWithClientKeyConnector());, +	}, +]