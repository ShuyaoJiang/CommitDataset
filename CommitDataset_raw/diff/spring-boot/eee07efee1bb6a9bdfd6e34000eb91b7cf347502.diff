[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +import org.springframework.util.unit.DataSize;, +	private static final DataSize MAX_FILE_SIZE = DataSize.ofMegabytes(10);, +				getDataSize("logging.file.max-size", MAX_FILE_SIZE));, +		DataSize totalSizeCap = getDataSize("logging.file.total-size-cap",, +				DataSize.ofBytes(CoreConstants.UNBOUNDED_TOTAL_SIZE_CAP));, +		rollingPolicy.setTotalSizeCap(new FileSize(totalSizeCap.toBytes()));, +			DataSize maxFileSize) {, +			rollingPolicy.setMaxFileSize(new FileSize(maxFileSize.toBytes()));, +			ReflectionUtils.invokeMethod(method, rollingPolicy,, +					String.valueOf(maxFileSize.toBytes()));, +		}, +	}, +, +	private DataSize getDataSize(String property, DataSize defaultSize) {, +		String value = this.patterns.getProperty(property);, +		if (value != null) {, +			try {, +				return DataSize.parse(value);, +			}, +			catch (IllegalArgumentException ex) {, +				FileSize fileSize = FileSize.valueOf(value);, +				return DataSize.ofBytes(fileSize.getSize());, +			}, +		}, +		else {, +			return defaultSize;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +import org.springframework.util.unit.DataSize;, +	private static final DataSize MAX_FILE_SIZE = DataSize.ofMegabytes(10);, +				getDataSize("logging.file.max-size", MAX_FILE_SIZE));, +		DataSize totalSizeCap = getDataSize("logging.file.total-size-cap",, +				DataSize.ofBytes(CoreConstants.UNBOUNDED_TOTAL_SIZE_CAP));, +		rollingPolicy.setTotalSizeCap(new FileSize(totalSizeCap.toBytes()));, +			DataSize maxFileSize) {, +			rollingPolicy.setMaxFileSize(new FileSize(maxFileSize.toBytes()));, +			ReflectionUtils.invokeMethod(method, rollingPolicy,, +					String.valueOf(maxFileSize.toBytes()));, +		}, +	}, +, +	private DataSize getDataSize(String property, DataSize defaultSize) {, +		String value = this.patterns.getProperty(property);, +		if (value != null) {, +			try {, +				return DataSize.parse(value);, +			}, +			catch (IllegalArgumentException ex) {, +				FileSize fileSize = FileSize.valueOf(value);, +				return DataSize.ofBytes(fileSize.getSize());, +			}, +		}, +		else {, +			return defaultSize;, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "type": "org.springframework.util.unit.DataSize",, +      "type": "org.springframework.util.unit.DataSize",, +      "defaultValue": "0B", +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java, +import org.springframework.util.unit.DataSize;, +	private static final DataSize MAX_FILE_SIZE = DataSize.ofMegabytes(10);, +				getDataSize("logging.file.max-size", MAX_FILE_SIZE));, +		DataSize totalSizeCap = getDataSize("logging.file.total-size-cap",, +				DataSize.ofBytes(CoreConstants.UNBOUNDED_TOTAL_SIZE_CAP));, +		rollingPolicy.setTotalSizeCap(new FileSize(totalSizeCap.toBytes()));, +			DataSize maxFileSize) {, +			rollingPolicy.setMaxFileSize(new FileSize(maxFileSize.toBytes()));, +			ReflectionUtils.invokeMethod(method, rollingPolicy,, +					String.valueOf(maxFileSize.toBytes()));, +		}, +	}, +, +	private DataSize getDataSize(String property, DataSize defaultSize) {, +		String value = this.patterns.getProperty(property);, +		if (value != null) {, +			try {, +				return DataSize.parse(value);, +			}, +			catch (IllegalArgumentException ex) {, +				FileSize fileSize = FileSize.valueOf(value);, +				return DataSize.ofBytes(fileSize.getSize());, +			}, +		}, +		else {, +			return defaultSize;, +++ b/spring-boot-project/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "type": "org.springframework.util.unit.DataSize",, +      "type": "org.springframework.util.unit.DataSize",, +      "defaultValue": "0B", +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java, +	public void testMaxFileSizePropertyWithLogbackFileSize() {, +		testMaxFileSizeProperty("100 MB", "100 MB");, +	}, +, +	@Test, +	public void testMaxFileSizePropertyWithDataSize() {, +		testMaxFileSizeProperty("15MB", "15 MB");, +	}, +, +	@Test]