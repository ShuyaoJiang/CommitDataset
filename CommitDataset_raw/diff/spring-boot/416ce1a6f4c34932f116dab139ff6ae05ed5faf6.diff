[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/FixedAuthoritiesExtractor.java, +import java.util.ArrayList;, +		List<Object> authorities = new ArrayList<>();, +			Collection<?> collection = (Collection<?>) object;, +			object = collection.toArray(new Object[0]);, +			Object[] array = (Object[]) object;, +			for (Object value : array) {, +				if (value instanceof String) {, +					authorities.add(value);, +				}, +				else if (value instanceof Map) {, +					Map<?, ?> map = (Map<?, ?>) value;, +					if (map.size() == 1) {, +						authorities.add(map.values().iterator().next());, +					}, +					else if (map.containsKey("authority")) {, +						authorities.add(map.get("authority"));, +					}, +					else if (map.containsKey("role")) {, +						authorities.add(map.get("role"));, +					}, +					else if (map.containsKey("value")) {, +						authorities.add(map.get("value"));, +					}, +					else {, +						authorities.add(map);, +					}, +				}, +				else {, +					authorities.add(value);, +				}, +			}, +			return StringUtils.collectionToCommaDelimitedString(authorities);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/FixedAuthoritiesExtractor.java, +import java.util.ArrayList;, +		List<Object> authorities = new ArrayList<>();, +			Collection<?> collection = (Collection<?>) object;, +			object = collection.toArray(new Object[0]);, +			Object[] array = (Object[]) object;, +			for (Object value : array) {, +				if (value instanceof String) {, +					authorities.add(value);, +				}, +				else if (value instanceof Map) {, +					Map<?, ?> map = (Map<?, ?>) value;, +					if (map.size() == 1) {, +						authorities.add(map.values().iterator().next());, +					}, +					else if (map.containsKey("authority")) {, +						authorities.add(map.get("authority"));, +					}, +					else if (map.containsKey("role")) {, +						authorities.add(map.get("role"));, +					}, +					else if (map.containsKey("value")) {, +						authorities.add(map.get("value"));, +					}, +					else {, +						authorities.add(map);, +					}, +				}, +				else {, +					authorities.add(value);, +				}, +			}, +			return StringUtils.collectionToCommaDelimitedString(authorities);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/FixedAuthoritiesExtractorTests.java, +import java.util.Collections;, +import java.util.HashMap;, +	@Test, +	public void authoritiesAsListOfMaps() {, +		this.map.put("authorities",, +				Arrays.asList(Collections.singletonMap("authority", "ROLE_ADMIN")));, +		assertThat(this.extractor.extractAuthorities(this.map).toString()), +				.isEqualTo("[ROLE_ADMIN]");, +	}, +, +	@Test, +	public void authoritiesAsListOfMapsWithStandardKey() {, +		this.map.put("authorities",, +				Arrays.asList(Collections.singletonMap("role", "ROLE_ADMIN")));, +		assertThat(this.extractor.extractAuthorities(this.map).toString()), +				.isEqualTo("[ROLE_ADMIN]");, +	}, +, +	@Test, +	public void authoritiesAsListOfMapsWithNonStandardKey() {, +		this.map.put("authorities",, +				Arrays.asList(Collections.singletonMap("any", "ROLE_ADMIN")));, +		assertThat(this.extractor.extractAuthorities(this.map).toString()), +				.isEqualTo("[ROLE_ADMIN]");, +	}, +, +	@Test, +	public void authoritiesAsListOfMapsWithMultipleNonStandardKeys() {, +		Map<String, String> map = new HashMap<>();, +		map.put("any", "ROLE_ADMIN");, +		map.put("foo", "bar");, +		this.map.put("authorities", Arrays.asList(map));, +		assertThat(this.extractor.extractAuthorities(this.map).toString())]