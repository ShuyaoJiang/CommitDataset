[+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/EnvironmentDelegateApplicationContextInitializer.java, +	public void initialize(ConfigurableApplicationContext context) {, +		ConfigurableEnvironment environment = context.getEnvironment();, +		List<Class<?>> initializerClasses = getInitializerClasses(environment);, +		if (initializerClasses.size() > 0) {, +			applyInitializerClasses(context, initializerClasses);, +	private List<Class<?>> getInitializerClasses(ConfigurableEnvironment env) {, +		List<Class<?>> classes = new ArrayList<Class<?>>();, +				classes.add(getInitializerClass(className));, +	private Class<?> getInitializerClass(String className) throws LinkageError {, +		try {, +			Class<?> initializerClass = ClassUtils.forName(className,, +					ClassUtils.getDefaultClassLoader());, +			Assert.isAssignable(ApplicationContextInitializer.class, initializerClass);, +			return initializerClass;, +		}, +		catch (ClassNotFoundException ex) {, +			throw new ApplicationContextException(, +					"Failed to load context initializer class [" + className + "]", ex);, +		}, +	}, +, +	private void applyInitializerClasses(ConfigurableApplicationContext context,, +			List<Class<?>> initializerClasses) {, +		Class<?> contextClass = context.getClass();, +		List<ApplicationContextInitializer<?>> initializers = new ArrayList<ApplicationContextInitializer<?>>();, +		for (Class<?> initializerClass : initializerClasses) {, +			initializers.add(instantiateInitializer(contextClass, initializerClass));, +		}, +		applyInitializers(context, initializers);, +	}, +, +	private ApplicationContextInitializer<?> instantiateInitializer(, +			Class<?> contextClass, Class<?> initializerClass) {, +		Class<?> requireContextClass = GenericTypeResolver.resolveTypeArgument(, +				initializerClass, ApplicationContextInitializer.class);, +		Assert.isAssignable(requireContextClass, contextClass, String.format(, +				"Could not add context initializer [%s]", +						+ " as its generic parameter [%s] is not assignable ", +						+ "from the type of application context used by this ", +						+ "context loader [%s]: ", initializerClass.getName(),, +				requireContextClass.getName(), contextClass.getName()));, +		return (ApplicationContextInitializer<?>) BeanUtils, +				.instantiateClass(initializerClass);, +	}, +, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	private void applyInitializers(ConfigurableApplicationContext context,, +			List<ApplicationContextInitializer<?>> initializers) {, +		Collections.sort(initializers, new AnnotationAwareOrderComparator());, +		for (ApplicationContextInitializer initializer : initializers) {, +			initializer.initialize(context);, +		}, +	}, +]