[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import org.springframework.beans.factory.config.Scope;, +	private static final Log logger = LogFactory, +			.getLog(EmbeddedWebApplicationContext.class);, +, +				selfInitialize(servletContext);, +			}, +		};, +	}, +, +	private void selfInitialize(ServletContext servletContext) throws ServletException {, +		ConfigurableListableBeanFactory beanFactory = getBeanFactory();, +		ExistingWebApplicationScopes existingScopes = new ExistingWebApplicationScopes(, +				beanFactory);, +		WebApplicationContextUtils.registerWebApplicationScopes(beanFactory,, +		existingScopes.restore();, +		WebApplicationContextUtils.registerEnvironmentBeans(beanFactory,, +	/**, +	 * Utility class to store and restore any user defined scopes. This allow scopes to be, +	 * registered in an ApplicationContextInitializer in the same way as they would in a, +	 * classic non-embedded web application context., +	 */, +	public static class ExistingWebApplicationScopes {, +, +		private static final Set<String> SCOPES;, +		static {, +			Set<String> scopes = new LinkedHashSet<String>();, +			scopes.add(WebApplicationContext.SCOPE_REQUEST);, +			scopes.add(WebApplicationContext.SCOPE_SESSION);, +			scopes.add(WebApplicationContext.SCOPE_GLOBAL_SESSION);, +			SCOPES = Collections.unmodifiableSet(scopes);, +		}, +, +		private final ConfigurableListableBeanFactory beanFactory;, +, +		private final Map<String, Scope> scopes = new HashMap<String, Scope>();, +, +		public ExistingWebApplicationScopes(ConfigurableListableBeanFactory beanFactory) {, +			this.beanFactory = beanFactory;, +			for (String scopeName : SCOPES) {, +				Scope scope = beanFactory.getRegisteredScope(scopeName);, +				if (scope != null) {, +					this.scopes.put(scopeName, scope);, +				}, +			}, +		}, +, +		public void restore() {, +			for (Map.Entry<String, Scope> entry : this.scopes.entrySet()) {, +				if (logger.isInfoEnabled()) {, +					logger.info("Restoring user defined scope " + entry.getKey());, +				}, +				this.beanFactory.registerScope(entry.getKey(), entry.getValue());, +			}, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedWebApplicationContext.java, + * Copyright 2012-2015 the original author or authors., +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import org.springframework.beans.factory.config.Scope;, +	private static final Log logger = LogFactory, +			.getLog(EmbeddedWebApplicationContext.class);, +, +				selfInitialize(servletContext);, +			}, +		};, +	}, +, +	private void selfInitialize(ServletContext servletContext) throws ServletException {, +		ConfigurableListableBeanFactory beanFactory = getBeanFactory();, +		ExistingWebApplicationScopes existingScopes = new ExistingWebApplicationScopes(, +				beanFactory);, +		WebApplicationContextUtils.registerWebApplicationScopes(beanFactory,, +		existingScopes.restore();, +		WebApplicationContextUtils.registerEnvironmentBeans(beanFactory,, +	/**, +	 * Utility class to store and restore any user defined scopes. This allow scopes to be, +	 * registered in an ApplicationContextInitializer in the same way as they would in a, +	 * classic non-embedded web application context., +	 */, +	public static class ExistingWebApplicationScopes {, +, +		private static final Set<String> SCOPES;, +		static {, +			Set<String> scopes = new LinkedHashSet<String>();, +			scopes.add(WebApplicationContext.SCOPE_REQUEST);, +			scopes.add(WebApplicationContext.SCOPE_SESSION);, +			scopes.add(WebApplicationContext.SCOPE_GLOBAL_SESSION);]