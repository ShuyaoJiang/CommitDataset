[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +import java.util.Optional;, +, +	@Override, +	public Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name) {, +		Assert.notNull(name, "Name must not be null");, +		Optional<Boolean> result = this.source.containsDescendantOf(name);, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			Optional<Boolean> aliasResult = this.source.containsDescendantOf(alias);, +			result = result.flatMap((r) -> aliasResult.flatMap(a -> Optional.of(r || a)));, +		}, +		return result;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +import java.util.Optional;, +, +	@Override, +	public Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name) {, +		Assert.notNull(name, "Name must not be null");, +		Optional<Boolean> result = this.source.containsDescendantOf(name);, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			Optional<Boolean> aliasResult = this.source.containsDescendantOf(alias);, +			result = result.flatMap((r) -> aliasResult.flatMap(a -> Optional.of(r || a)));, +		}, +		return result;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java, +import java.util.Optional;, +	 * Optionally returns if the source contains any descendants of the specified name., +	 * <ul>, +	 * <li>A result of {@code true} means that there is at least on property in the source, +	 * with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}.</li>, +	 * <li>A result of {@code false} means that that there are no properties in the source, +	 * with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}.</li>, +	 * <li>A result of {@code empty} means it is not possible to determine up determine if, +	 * there's a property in the source with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}., +	 * </ul>, +	 * @param name the name to check, +	 * @return an optional boolean determining if a descendant is contained in the source, +	 */, +	Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name);, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/AliasedConfigurationPropertySource.java, +import java.util.Optional;, +, +	@Override, +	public Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name) {, +		Assert.notNull(name, "Name must not be null");, +		Optional<Boolean> result = this.source.containsDescendantOf(name);, +		for (ConfigurationPropertyName alias : getAliases().getAliases(name)) {, +			Optional<Boolean> aliasResult = this.source.containsDescendantOf(alias);, +			result = result.flatMap((r) -> aliasResult.flatMap(a -> Optional.of(r || a)));, +		}, +		return result;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java, +import java.util.Optional;, +	 * Optionally returns if the source contains any descendants of the specified name., +	 * <ul>, +	 * <li>A result of {@code true} means that there is at least on property in the source, +	 * with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}.</li>, +	 * <li>A result of {@code false} means that that there are no properties in the source, +	 * with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}.</li>, +	 * <li>A result of {@code empty} means it is not possible to determine up determine if, +	 * there's a property in the source with a name that's an, +	 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}, +	 * of {@code name}., +	 * </ul>, +	 * @param name the name to check, +	 * @return an optional boolean determining if a descendant is contained in the source, +	 */, +	Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name);, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +import java.util.Optional;, +import java.util.function.Function;, +import org.springframework.boot.env.RandomValuePropertySource;, +import org.springframework.core.env.PropertySource.StubPropertySource;, +	private static final ConfigurationPropertyName RANDOM = ConfigurationPropertyName, +			.of("random");, +, +		return StreamSupport.stream(sources.spliterator(), false).flatMap(this::flatten), +				.filter(this::notStubSource);, +	private boolean notStubSource(PropertySource<?> source) {, +		return !(source instanceof StubPropertySource);]