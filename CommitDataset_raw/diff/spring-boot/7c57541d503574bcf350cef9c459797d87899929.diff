[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import java.util.LinkedHashSet;, +			// Find all possible auto configuration classes, filtering duplicates, +			List<String> factories = new ArrayList<String>(new LinkedHashSet<String>(, +							this.beanClassLoader)));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +import java.util.LinkedHashSet;, +			// Find all possible auto configuration classes, filtering duplicates, +			List<String> factories = new ArrayList<String>(new LinkedHashSet<String>(, +							this.beanClassLoader)));, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.core.OrderComparator;, +		ClassLoader classLoader = SpringApplication.class.getClassLoader();, +, +		// Use names and ensure unique to protect against duplicates, +		Set<String> names = new LinkedHashSet<String>(, +				SpringFactoriesLoader.loadFactoryNames(, +						ApplicationContextInitializer.class, classLoader));, +		List<ApplicationContextInitializer<?>> factories = new ArrayList<ApplicationContextInitializer<?>>(, +				names.size());, +, +		// Create instances from the names, +		for (String name : names) {, +			try {, +				Class<?> instanceClass = ClassUtils.forName(name, classLoader);, +				Assert.isAssignable(ApplicationContextInitializer.class, instanceClass);, +				factories.add((ApplicationContextInitializer<?>) instanceClass, +						.newInstance());, +			}, +			catch (Throwable ex) {, +				throw new IllegalArgumentException(, +						"Cannot instantiate ApplicationContextInitializer : " + name, ex);, +			}, +		}, +, +		OrderComparator.sort(factories);, +		return factories;]