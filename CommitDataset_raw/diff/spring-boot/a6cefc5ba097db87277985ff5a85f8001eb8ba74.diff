[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +		this.contextRunner.withUserConfiguration(TestWebSecurityConfigurerConfig.class,, +				OAuth2WebSecurityConfiguration.class).run((context) -> {, +					assertThat(context).getBean(OAuth2AuthorizedClientService.class), +							.isNotNull();, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +		this.contextRunner.withUserConfiguration(TestWebSecurityConfigurerConfig.class,, +				OAuth2WebSecurityConfiguration.class).run((context) -> {, +					assertThat(context).getBean(OAuth2AuthorizedClientService.class), +							.isNotNull();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/pom.xml, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +		this.contextRunner.withUserConfiguration(TestWebSecurityConfigurerConfig.class,, +				OAuth2WebSecurityConfiguration.class).run((context) -> {, +					assertThat(context).getBean(OAuth2AuthorizedClientService.class), +							.isNotNull();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/pom.xml, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingException.java, +	ConfigurationPropertiesBindingException(String message, Throwable cause) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointPropertiesTests.java, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java, +	static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapterTests.java, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("http://example.com/redirect");, +		assertThat(adapted.getRedirectUriTemplate()), +				.isEqualTo("{baseUrl}/login/oauth2/code/{registrationId}");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +		this.contextRunner.withUserConfiguration(TestWebSecurityConfigurerConfig.class,, +				OAuth2WebSecurityConfiguration.class).run((context) -> {, +					assertThat(context).getBean(OAuth2AuthorizedClientService.class), +							.isNotNull();, +++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/pom.xml, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingException.java, +	ConfigurationPropertiesBindingException(String message, Throwable cause) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinderBuilderTests.java, +		binder.bind(target, AnnotationUtils.findAnnotation(target.getClass(),]