[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.transaction.support.AbstractPlatformTransactionManager;, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {, +		this(properties, dataSource, null);, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +		AbstractPlatformTransactionManager transactionManager = createAppropriateTransactionManager();, +		this.properties.getTransaction().applyTo(transactionManager);, +		return transactionManager;, +	}, +, +	private AbstractPlatformTransactionManager createAppropriateTransactionManager() {, +			return new JpaTransactionManager(this.entityManagerFactory);, +		return new DataSourceTransactionManager(this.dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.transaction.support.AbstractPlatformTransactionManager;, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {, +		this(properties, dataSource, null);, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +		AbstractPlatformTransactionManager transactionManager = createAppropriateTransactionManager();, +		this.properties.getTransaction().applyTo(transactionManager);, +		return transactionManager;, +	}, +, +	private AbstractPlatformTransactionManager createAppropriateTransactionManager() {, +			return new JpaTransactionManager(this.entityManagerFactory);, +		return new DataSourceTransactionManager(this.dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@EnableConfigurationProperties(BatchProperties.class), +		protected JpaBatchConfiguration(BatchProperties properties) {, +			return new BasicBatchConfigurer(this.properties, dataSource,, +			return new BasicBatchConfigurer(this.properties, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.transaction.support.AbstractPlatformTransactionManager;, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {, +		this(properties, dataSource, null);, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +		AbstractPlatformTransactionManager transactionManager = createAppropriateTransactionManager();, +		this.properties.getTransaction().applyTo(transactionManager);, +		return transactionManager;, +	}, +, +	private AbstractPlatformTransactionManager createAppropriateTransactionManager() {, +			return new JpaTransactionManager(this.entityManagerFactory);, +		return new DataSourceTransactionManager(this.dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@EnableConfigurationProperties(BatchProperties.class), +		protected JpaBatchConfiguration(BatchProperties properties) {, +			return new BasicBatchConfigurer(this.properties, dataSource,, +			return new BasicBatchConfigurer(this.properties, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +	private final TransactionProperties transaction = new TransactionProperties();, +, +	public String getTablePrefix() {, +		return this.tablePrefix;, +	}, +, +	public void setTablePrefix(String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +	}, +, +	public TransactionProperties getTransaction() {, +		return this.transaction;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.transaction.support.AbstractPlatformTransactionManager;, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {, +		this(properties, dataSource, null);, +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +		AbstractPlatformTransactionManager transactionManager = createAppropriateTransactionManager();, +		this.properties.getTransaction().applyTo(transactionManager);, +		return transactionManager;, +	}, +, +	private AbstractPlatformTransactionManager createAppropriateTransactionManager() {, +			return new JpaTransactionManager(this.entityManagerFactory);, +		return new DataSourceTransactionManager(this.dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@EnableConfigurationProperties(BatchProperties.class), +		protected JpaBatchConfiguration(BatchProperties properties) {, +			return new BasicBatchConfigurer(this.properties, dataSource,, +			return new BasicBatchConfigurer(this.properties, dataSource);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java, +import org.springframework.boot.autoconfigure.transaction.TransactionProperties;, +import org.springframework.boot.context.properties.NestedConfigurationProperty;, +	@NestedConfigurationProperty, +	private final TransactionProperties transaction = new TransactionProperties();, +, +	public String getTablePrefix() {, +		return this.tablePrefix;, +	}, +, +	public void setTablePrefix(String tablePrefix) {, +		this.tablePrefix = tablePrefix;, +	}, +, +	public TransactionProperties getTransaction() {, +		return this.transaction;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java]