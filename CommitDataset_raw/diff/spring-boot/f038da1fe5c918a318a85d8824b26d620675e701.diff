[+++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +	private PropertySourceLoaderFactory propertySourceLoaderFactory = new DefaultPropertySourceLoaderFactory();, +, +		List<PropertySourceLoader> loaders = this.propertySourceLoaderFactory, +				.getLoaders(environment);, +		boolean satisfied = true;, +			if (resource != null && resource.exists()) {, +				if (loader.supports(resource)) {, +				else {, +					satisfied = false;, +				}, +			}, +		}, +		if (!satisfied) {, +			throw new IllegalStateException(, +					"No supported loader found for configuration resource: " + resource);, +	/**, +	 * @param propertySourceLoaderFactory the factory to set, +	 */, +	public void setPropertySourceLoaderFactory(, +			PropertySourceLoaderFactory propertySourceLoaderFactory) {, +		this.propertySourceLoaderFactory = propertySourceLoaderFactory;, +	}, +, +	public static interface PropertySourceLoaderFactory {, +		List<PropertySourceLoader> getLoaders(Environment environment);, +	}, +, +	private static class DefaultPropertySourceLoaderFactory implements, +			PropertySourceLoaderFactory {, +, +		@Override, +		public List<PropertySourceLoader> getLoaders(Environment environment) {, +			ArrayList<PropertySourceLoader> loaders = new ArrayList<PropertySourceLoader>();, +			loaders.add(new PropertiesPropertySourceLoader());, +			if (ClassUtils.isPresent("org.yaml.snakeyaml.Yaml", null)) {, +				loaders.add(YamlPropertySourceLoader.springProfileAwareLoader(environment, +						.getActiveProfiles()));, +			}, +			return loaders;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/ConfigFileApplicationListener.java, +	private PropertySourceLoaderFactory propertySourceLoaderFactory = new DefaultPropertySourceLoaderFactory();, +, +		List<PropertySourceLoader> loaders = this.propertySourceLoaderFactory, +				.getLoaders(environment);, +		boolean satisfied = true;, +			if (resource != null && resource.exists()) {, +				if (loader.supports(resource)) {, +				else {, +					satisfied = false;, +				}, +			}, +		}, +		if (!satisfied) {, +			throw new IllegalStateException(, +					"No supported loader found for configuration resource: " + resource);, +	/**, +	 * @param propertySourceLoaderFactory the factory to set, +	 */, +	public void setPropertySourceLoaderFactory(, +			PropertySourceLoaderFactory propertySourceLoaderFactory) {, +		this.propertySourceLoaderFactory = propertySourceLoaderFactory;, +	}, +, +	public static interface PropertySourceLoaderFactory {, +		List<PropertySourceLoader> getLoaders(Environment environment);, +	}, +, +	private static class DefaultPropertySourceLoaderFactory implements, +			PropertySourceLoaderFactory {, +, +		@Override, +		public List<PropertySourceLoader> getLoaders(Environment environment) {, +			ArrayList<PropertySourceLoader> loaders = new ArrayList<PropertySourceLoader>();, +			loaders.add(new PropertiesPropertySourceLoader());, +			if (ClassUtils.isPresent("org.yaml.snakeyaml.Yaml", null)) {, +				loaders.add(YamlPropertySourceLoader.springProfileAwareLoader(environment, +						.getActiveProfiles()));, +			}, +			return loaders;, +		}, +, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/listener/ConfigFileApplicationListenerTests.java, +import java.util.List;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.boot.config.PropertySourceLoader;, +import org.springframework.boot.context.listener.ConfigFileApplicationListener.PropertySourceLoaderFactory;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.Resource;, +	@Rule, +	public ExpectedException expected = ExpectedException.none();, +, +	public void unsupportedResource() throws Exception {]