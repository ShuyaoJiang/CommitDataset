[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +			else if (isStoppedOrFailed(previousExecution) && job.isRestartable()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java, +			else if (isStoppedOrFailed(previousExecution) && job.isRestartable()) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunnerTests.java, +import static org.junit.Assert.assertEquals;, +, +	public void retryFailedExecutionOnNonRestartableJob() throws Exception {, +		this.job = this.jobs.get("job").preventRestart(), +				.start(this.steps.get("step").tasklet(new Tasklet() {, +					@Override, +					public RepeatStatus execute(StepContribution contribution,, +							ChunkContext chunkContext) throws Exception {, +						throw new RuntimeException("Planned");, +					}, +				}).build()).incrementer(new RunIdIncrementer()).build();, +		this.runner.execute(this.job, new JobParameters());, +		this.runner.execute(this.job, new JobParameters());, +		/* A failed job that is not restartable does not re-use the job params of, +		 * the last execution, but creates a new job instance when running it again., +		 */, +		assertEquals(2, this.jobExplorer.getJobInstances("job", 0, 100).size());, +	}, +, +	@Test]