[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.reactive.DefaultReactiveWebServerFactoryCustomizer;, +			super(beanFactory, DefaultReactiveWebServerFactoryCustomizer.class);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.web.reactive.DefaultReactiveWebServerFactoryCustomizer;, +			super(beanFactory, DefaultReactiveWebServerFactoryCustomizer.class);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/tomcat/TomcatCustomizer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web.embedded.tomcat;, +, +import java.time.Duration;, +, +import org.apache.catalina.Lifecycle;, +import org.apache.catalina.valves.AccessLogValve;, +import org.apache.catalina.valves.RemoteIpValve;, +import org.apache.coyote.AbstractProtocol;, +import org.apache.coyote.ProtocolHandler;, +import org.apache.coyote.http11.AbstractHttp11Protocol;, +, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.cloud.CloudPlatform;, +import org.springframework.boot.web.embedded.tomcat.ConfigurableTomcatWebServerFactory;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, +, +/**, + * Customization for Tomcat-specific features common, + * for both Servlet and Reactive servers., + *, + * @author Brian Clozel, + * @since 2.0.0, + */, +public final class TomcatCustomizer {, +, +	private TomcatCustomizer() {, +	}, +, +	public static void customizeTomcat(ServerProperties serverProperties,, +			Environment environment, ConfigurableTomcatWebServerFactory factory) {, +		ServerProperties.Tomcat tomcatProperties = serverProperties.getTomcat();, +		if (tomcatProperties.getBasedir() != null) {, +			factory.setBaseDirectory(tomcatProperties.getBasedir());, +		}, +		if (tomcatProperties.getBackgroundProcessorDelay() != null) {, +			factory.setBackgroundProcessorDelay((int) tomcatProperties, +					.getBackgroundProcessorDelay().getSeconds());, +		}, +		customizeRemoteIpValve(serverProperties, environment, factory);, +		if (tomcatProperties.getMaxThreads() > 0) {, +			customizeMaxThreads(factory, tomcatProperties.getMaxThreads());, +		}, +		if (tomcatProperties.getMinSpareThreads() > 0) {, +			customizeMinThreads(factory, tomcatProperties.getMinSpareThreads());, +		}, +		int maxHttpHeaderSize = (serverProperties.getMaxHttpHeaderSize() > 0, +				? serverProperties.getMaxHttpHeaderSize(), +				: tomcatProperties.getMaxHttpHeaderSize());, +		if (maxHttpHeaderSize > 0) {, +			customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize);, +		}, +		if (tomcatProperties.getMaxHttpPostSize() != 0) {, +			customizeMaxHttpPostSize(factory, tomcatProperties.getMaxHttpPostSize());, +		}, +		if (tomcatProperties.getAccesslog().isEnabled()) {, +			customizeAccessLog(tomcatProperties, factory);, +		}, +		if (tomcatProperties.getUriEncoding() != null) {, +			factory.setUriEncoding(tomcatProperties.getUriEncoding());, +		}, +		if (serverProperties.getConnectionTimeout() != null) {, +			customizeConnectionTimeout(factory,, +					serverProperties.getConnectionTimeout());, +		}, +		if (tomcatProperties.getMaxConnections() > 0) {, +			customizeMaxConnections(factory, tomcatProperties.getMaxConnections());, +		}, +		if (tomcatProperties.getAcceptCount() > 0) {, +			customizeAcceptCount(factory, tomcatProperties.getAcceptCount());, +		}, +		customizeStaticResources(serverProperties.getTomcat().getResource(), factory);, +	}, +, +	private static void customizeAcceptCount(ConfigurableTomcatWebServerFactory factory,, +			int acceptCount) {, +		factory.addConnectorCustomizers((connector) -> {]