[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.lang.reflect.Constructor;, +import org.springframework.util.ReflectionUtils;, +		Collection<SpringApplicationRunParticipant> participants = createRunParticipants(args);, +		for (SpringApplicationRunParticipant participant : participants) {, +			participant.started();, +		}, +		try {, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.environmentPrepared(environment);, +			}, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.contextPrepared(context);, +			}, +			// Load the sources, +			Set<Object> sources = getSources();, +			Assert.notEmpty(sources, "Sources must not be empty");, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.contextLoaded(context);, +			}, +			// Refresh the context, +			afterRefresh(context, args);, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.finished(context, null);, +			}, +		catch (Exception ex) {, +			for (SpringApplicationRunParticipant participant : participants) {, +				finishWithException(participant, context, ex);, +			if (context != null) {, +				context.close();, +			}, +			ReflectionUtils.rethrowRuntimeException(ex);, +			return context;, +		}, +		finally {, +		}, +	private Collection<SpringApplicationRunParticipant> createRunParticipants(, +			String[] args) {, +		List<SpringApplicationRunParticipant> participants = new ArrayList<SpringApplicationRunParticipant>();, +		participants.addAll(getSpringFactoriesInstances(, +				SpringApplicationRunParticipant.class, new Class<?>[] {, +						SpringApplication.class, String[].class }, this, args));, +		return participants;, +	private <T> Collection<? extends T> getSpringFactoriesInstances(Class<T> type) {, +		return getSpringFactoriesInstances(type, new Class<?>[] {});, +, +	@SuppressWarnings("unchecked"), +	private <T> Collection<? extends T> getSpringFactoriesInstances(Class<T> type,, +			Class<?>[] parameterTypes, Object... args) {, +		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();, +, +		// Use names and ensure unique to protect against duplicates, +		Set<String> names = new LinkedHashSet<String>(, +				SpringFactoriesLoader.loadFactoryNames(type, classLoader));, +		List<T> instances = new ArrayList<T>(names.size());, +, +		// Create instances from the names, +		for (String name : names) {, +			try {, +				Class<?> instanceClass = ClassUtils.forName(name, classLoader);, +				Assert.isAssignable(type, instanceClass);, +				Constructor<?> constructor = instanceClass.getConstructor(parameterTypes);, +				T instance = (T) constructor.newInstance(args);, +				instances.add(instance);, +			}, +			catch (Throwable ex) {, +				throw new IllegalArgumentException("Cannot instantiate " + type + " : ", +						+ name, ex);, +			}, +		}, +, +		AnnotationAwareOrderComparator.sort(instances);, +		return instances;, +	protected void afterRefresh(ConfigurableApplicationContext context, String[] args) {, +	private void finishWithException(SpringApplicationRunParticipant participant,, +			ConfigurableApplicationContext context, Exception exception) {, +			participant.finished(context, exception);, +				String message = ex.getMessage();, +				message = (message == null ? "no error message" : message);, +				this.log.warn("Error handling failed (" + message + ")");, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.lang.reflect.Constructor;, +import org.springframework.util.ReflectionUtils;, +		Collection<SpringApplicationRunParticipant> participants = createRunParticipants(args);, +		for (SpringApplicationRunParticipant participant : participants) {, +			participant.started();, +		}, +		try {, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.environmentPrepared(environment);, +			}, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.contextPrepared(context);, +			}, +			// Load the sources, +			Set<Object> sources = getSources();, +			Assert.notEmpty(sources, "Sources must not be empty");, +			for (SpringApplicationRunParticipant participant : participants) {, +				participant.contextLoaded(context);, +			}]