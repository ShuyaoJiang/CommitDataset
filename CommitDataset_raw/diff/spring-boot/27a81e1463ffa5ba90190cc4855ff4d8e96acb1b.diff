[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +		private static final Log logger = LogFactory, +				.getLog(JodaDateTimeJacksonConfiguration.class);, +					if (logger.isWarnEnabled()) {, +						logger.warn("spring.jackson.date-format could not be used to ", +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +		private static final Log logger = LogFactory, +				.getLog(JodaDateTimeJacksonConfiguration.class);, +					if (logger.isWarnEnabled()) {, +						logger.warn("spring.jackson.date-format could not be used to ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java, + * Copyright 2012-2016 the original author or authors., +	private static final Log logger = LogFactory, +			.getLog(ArtemisEmbeddedConfigurationFactory.class);, +			logger.debug("Using default Artemis cluster password: ", +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +		private static final Log logger = LogFactory, +				.getLog(JodaDateTimeJacksonConfiguration.class);, +					if (logger.isWarnEnabled()) {, +						logger.warn("spring.jackson.date-format could not be used to ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java, + * Copyright 2012-2016 the original author or authors., +	private static final Log logger = LogFactory, +			.getLog(ArtemisEmbeddedConfigurationFactory.class);, +			logger.debug("Using default Artemis cluster password: ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, + * Copyright 2012-2016 the original author or authors., +	private static final Log logger = LogFactory, +			.getLog(HornetQEmbeddedConfigurationFactory.class);, +			logger.debug("Using default HornetQ cluster password: ", +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +		private static final Log logger = LogFactory, +				.getLog(JodaDateTimeJacksonConfiguration.class);, +					if (logger.isWarnEnabled()) {, +						logger.warn("spring.jackson.date-format could not be used to ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java, + * Copyright 2012-2016 the original author or authors., +	private static final Log logger = LogFactory, +			.getLog(ArtemisEmbeddedConfigurationFactory.class);, +			logger.debug("Using default Artemis cluster password: ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQEmbeddedConfigurationFactory.java, + * Copyright 2012-2016 the original author or authors., +	private static final Log logger = LogFactory, +			.getLog(HornetQEmbeddedConfigurationFactory.class);, +			logger.debug("Using default HornetQ cluster password: ", +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, + * Copyright 2012-2016 the original author or authors., +			logger.setLevel(Level.SEVERE);, +			logger.info("Found: " + config);, +				logger.info("Adding resolved properties to System properties");, +			logger.info("Not found: " + config);, +		logger.fine("Trying classpath: " + config);, +		logger.fine("Trying file: " + config);, +		logger.info("Nested archive paths: " + this.paths);, +			logger.info("Using custom class loader: " + customLoaderClassName);, +			logger.fine("Property '" + propertyKey + "' from environment: " + value);, +			logger.fine("Property '" + propertyKey + "' from properties: " + value);, +				logger.fine("Property '" + manifestKey, +				logger.fine(, +			logger.info("Adding classpath entries from " + file);, +			logger.info(, +			logger.info("Adding classpath entries from nested " + nested.getUrl() + root);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * Copyright 2012-2016 the original author or authors., +		if (logger.isTraceEnabled()) {, +			logger.trace("Processing request " + request.getMethod() + " ", +				logger.trace("Headers: " + trace.get("headers"));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, + * Copyright 2012-2016 the original author or authors., +		private static final Log logger = LogFactory, +				.getLog(JodaDateTimeJacksonConfiguration.class);]