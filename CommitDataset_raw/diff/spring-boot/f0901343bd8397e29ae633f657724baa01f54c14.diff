[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-cli.adoc, +The Spring Boot CLI is a command line tool that you can use if you want to quickly, +develop a Spring application. It lets you run Groovy scripts, which means that you have a, +familiar Java-like syntax without so much boilerplate code. You can also bootstrap, +The Spring Boot CLI (Command-Line Interface) can be installed manually by using SDKMAN!, +(the SDK Manager) or by using Homebrew or MacPorts if you are an OSX user. See, +Once you have installed the CLI, you can run it by typing `spring` and pressing Enter at, +the command line. If you run `spring` without any arguments, a simple help screen is, +displayed, as follows:, +You can type `spring help` to get more details about any of the supported commands, as, +shown in the following example:, +using, as follows:, +=== Running Applications with the CLI, +You can compile and run Groovy source code by using the `run` command. The Spring Boot CLI, +is completely self-contained, so you don't need any external Groovy installation., +The following example shows a "`hello world`" web application written in Groovy:, +To compile and run the application type the following command:, +To pass command-line arguments to the application, use a `--` to separate, +the commands from the "`spring`" command arguments, as shown in the following example:, +To set JVM command line arguments, you can use the `JAVA_OPTS` environment variable, as, +shown in the following example:, +instruction, such as `set "JAVA_OPTS=-Xms256m -Xmx2048m"`. Doing so ensures the values, +are properly passed to the process., +==== Deduced "`grab`" Dependencies, +Standard Groovy includes a `@Grab` annotation, which lets you declare dependencies, +on third-party libraries. This useful technique lets Groovy download jars in the, +same way as Maven or Gradle would but without requiring you to use a build tool., +Spring Boot extends this technique further and tries to deduce which libraries to, +"`grab`" based on your code. For example, since the `WebApplication` code shown, +previously uses `@RestController` annotations, Spring Boot grabs"`Tomcat`" and, +"`Spring MVC`"., +==== Deduced "`grab`" Coordinates, +Spring Boot extends Groovy's standard `@Grab` support by letting you specify a dependency, +without a group or version (for example, `@Grab('freemarker')`). Doing so consults Spring Boot's, +metadata is tied to the version of the CLI that you use â€“ it changes only when you move, +==== Default Import Statements, +automatically included. Notice how the preceding example refers to `@Component`,, +`@RestController`, and `@RequestMapping` without needing to use, +TIP: Many Spring annotations work without using `import` statements. Try running, +==== Automatic Main Method, +==== Custom Dependency Management, +when resolving `@Grab` dependencies. Additional dependency management, which overrides, +the default dependency management, can be configured by using the `@DependencyManagementBom`, +For example, consider the following declaration:, +The preceding declaration picks up `custom-bom-1.0.0.pom` in a Maven repository under, +When you specify multiple BOMs, they are applied in the order in which you declare them,, +as shown in the following example:, +The preceding example indicates that dependency management in `another-bom` overrides the, +dependency management in `custom-bom`., +You can use `@DependencyManagementBom` anywhere that you can use `@Grab`. However, to, +ensure consistent ordering of the dependency management, you can use, +dependency management (which is a superset of Spring Boot's dependency management) is the, +http://platform.spring.io/[Spring IO Platform], which you might include with the, +following line:, +[source,java,indent=0], +----, +`@DependencyManagementBom('io.spring.platform:platform-bom:1.1.2.RELEASE')`., +----, +=== Applications with Multiple Source Files, +You can use "`shell globbing`" with all commands that accept file input. Doing so lets, +you use multiple files from a single directory, as shown in the following example:, +=== Packaging Your Application, +executable jar file, as shown in the following example:, +The resulting jar contains the classes produced by compiling the application and all, +of the application's dependencies so that it can then be run by using `java -jar`. The jar, +file also contains entries from the application's classpath. You can add explicit, +paths to the jar by using `--include` and `--exclude`. Both are comma-separated, and both, +accept prefixes, in the form of "`+`" and "`-`", to signify that they should be removed from, +the defaults. The default includes are as follows:, +The default excludes are as follows:, +Type `spring help jar` on the command line for more information., +=== Initialize a New Project, +The `init` command lets you create a new project by using https://start.spring.io, +without leaving the shell, as shown in the following example:, +The preceding example creates a `my-project` directory with a Maven-based project that, +uses `spring-boot-starter-web` and `spring-boot-starter-data-jpa`. You can list the, +capabilities of the service by using the `--list` flag, as shown in the following example:, +The `init` command supports many options. See the `help` output for more details. For, +instance, the following command creates a Gradle project that uses Java 8 and `war` packaging:, +=== Using the Embedded Shell, +Spring Boot includes command-line completion scripts for the BASH and zsh shells. If you, +do not use either of these shells (perhaps you are a Windows user), you can use the, +`shell` command to launch an integrated shell, as shown in the following example:, +From inside the embedded shell, you can run other commands directly:, +to run a native command, you can use the `!` prefix. To exit the embedded shell, press, +`ctrl-c`., +=== Adding Extensions to the CLI, +You can add extensions to the CLI by using the `install` command. The command takes one, +or more sets of artifact coordinates in the format `group:artifact:version`, as shown in, +the following example:, +the artifacts' dependencies are also installed., +To uninstall a dependency, use the `uninstall` command. As with the `install` command, it, +takes one or more sets of artifact coordinates in the format `group:artifact:version`, as, +shown in the following example:, +It uninstalls the artifacts identified by the coordinates you supply and their, +To uninstall all additional dependencies, you can use the `--all` option, as shown in the, +following example:, +== Developing Applications with the Groovy Beans DSL, +application scripts by using the same format. This is sometimes a good way to include, +external features like middleware declarations, as shown in the following example:]