[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.ResolvableType;, + * @author Phillip Webb, +	/**, +	 * Base class for configurations that can combine source beans using a, +	 * {@link CompositeHealthIndicator}., +	 * @param <H> The health indicator type, +	 * @param <S> The bean source type, +	 */, +	protected static abstract class CompositeHealthIndicatorConfiguration<H extends HealthIndicator, S> {, +		protected HealthIndicator createHealthIndicator(Map<String, S> beans) {, +			if (beans.size() == 1) {, +				return createHealthIndicator(beans.values().iterator().next());, +			}, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, S> entry : beans.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(),, +						createHealthIndicator(entry.getValue()));, +			}, +			return composite;, +		}, +, +		@SuppressWarnings("unchecked"), +		protected H createHealthIndicator(S source) {, +			Class<?>[] generics = ResolvableType.forClass(, +					CompositeHealthIndicatorConfiguration.class, getClass()), +					.resolveGenerics();, +			Class<H> indicatorClass = (Class<H>) generics[0];, +			Class<S> sourceClass = (Class<S>) generics[1];, +			try {, +				return indicatorClass.getConstructor(sourceClass).newInstance(source);, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException("Unable to create indicator ", +						+ indicatorClass + " for source " + sourceClass, ex);, +			}, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnBean(DataSource.class), +	@ConditionalOnProperty(prefix = "management.health.db", name = "enabled", matchIfMissing = true), +	public static class DataSourcesHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>, +			implements InitializingBean {, +, +		private Collection<DataSourcePoolMetadataProvider> metadataProviders;, +, +		private DataSourcePoolMetadataProvider poolMetadataProvider;, +, +		@Override, +		public void afterPropertiesSet() throws Exception {, +			this.poolMetadataProvider = new DataSourcePoolMetadataProviders(, +					this.metadataProviders);, +		}, +			return createHealthIndicator(this.dataSources);, +		@Override, +		protected DataSourceHealthIndicator createHealthIndicator(DataSource source) {, +			return new DataSourceHealthIndicator(source, getValidationQuery(source));, +, +		private String getValidationQuery(DataSource source) {, +			DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider, +					.getDataSourcePoolMetadata(source);, +			return (poolMetadata == null ? null : poolMetadata.getValidationQuery());, +, +	public static class MongoHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {, +			return createHealthIndicator(this.mongoTemplates);, +, +	public static class RedisHealthIndicatorConfiguration, +			extends, +			CompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {, +			return createHealthIndicator(this.redisConnectionFactories);, +	public static class RabbitHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {, +			return createHealthIndicator(this.rabbitTemplates);, +, +	public static class SolrHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {, +			return createHealthIndicator(this.solrServers);, +, +	public static class MailHealthIndicatorConfiguration, +			extends, +			CompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {, +			return createHealthIndicator(this.mailSenders);, +, +	public static class JmsHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {, +			return createHealthIndicator(this.connectionFactories);, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.ResolvableType;, + * @author Phillip Webb, +	/**, +	 * Base class for configurations that can combine source beans using a, +	 * {@link CompositeHealthIndicator}.]