[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2017 the original author or authors., +	public HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate,, +			ManagementServerProperties managementServerProperties) {, +				isHealthSecure(), managementServerProperties.getSecurity().getRoles());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2017 the original author or authors., +	public HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate,, +			ManagementServerProperties managementServerProperties) {, +				isHealthSecure(), managementServerProperties.getSecurity().getRoles());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, + * Copyright 2012-2017 the original author or authors., +	private final List<String> roles;, +, +		this(delegate, true, null);, +		this(delegate, secure, null);, +	}, +, +	public HealthMvcEndpoint(HealthEndpoint delegate, boolean secure,, +			List<String> roles) {, +		this.roles = roles;, +				for (String role : getRoles()) {, +	private List<String> getRoles() {, +		if (this.roles != null) {, +			return this.roles;, +		}, +		return Arrays.asList(, +				StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +						this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2017 the original author or authors., +	public HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate,, +			ManagementServerProperties managementServerProperties) {, +				isHealthSecure(), managementServerProperties.getSecurity().getRoles());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, + * Copyright 2012-2017 the original author or authors., +	private final List<String> roles;, +, +		this(delegate, true, null);, +		this(delegate, secure, null);, +	}, +, +	public HealthMvcEndpoint(HealthEndpoint delegate, boolean secure,, +			List<String> roles) {, +		this.roles = roles;, +				for (String role : getRoles()) {, +	private List<String> getRoles() {, +		if (this.roles != null) {, +			return this.roles;, +		}, +		return Arrays.asList(, +				StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +						this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, + * Copyright 2012-2017 the original author or authors., +import java.util.Arrays;, +, +import org.springframework.test.util.ReflectionTestUtils;, +	@Test, +	public void testSetRoles() throws Exception {, +		// gh-8314, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(TestConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"management.security.roles[0]=super");, +		this.context.refresh();, +		HealthMvcEndpoint health = this.context.getBean(HealthMvcEndpoint.class);, +		assertThat(ReflectionTestUtils.getField(health, "roles")), +				.isEqualTo(Arrays.asList("super"));, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * Copyright 2012-2017 the original author or authors., +	public HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate,, +			ManagementServerProperties managementServerProperties) {, +				isHealthSecure(), managementServerProperties.getSecurity().getRoles());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, + * Copyright 2012-2017 the original author or authors., +	private final List<String> roles;, +, +		this(delegate, true, null);, +		this(delegate, secure, null);, +	}, +, +	public HealthMvcEndpoint(HealthEndpoint delegate, boolean secure,, +			List<String> roles) {, +		this.roles = roles;, +				for (String role : getRoles()) {, +	private List<String> getRoles() {, +		if (this.roles != null) {, +			return this.roles;, +		}, +		return Arrays.asList(, +				StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +						this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));]