[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "jaas"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "key"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "spring", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "jaas"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "key"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "spring", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "jaas"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "key"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "spring", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "endpoints.env", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.health", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.metrics", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.shutdown", name = "enabled", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "jaas"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "key"), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "shell", name = "auth", havingValue = "spring", matchIfMissing = true), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(prefix = "endpoints.env", name = "enabled", matchIfMissing = true), +	@ConditionalOnProperty(prefix = "endpoints.health", name = "enabled", matchIfMissing = true)]