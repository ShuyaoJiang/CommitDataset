[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfiguration.java, +import org.springframework.boot.context.web.OrderedCharacterEncodingFilter;, +	@ConditionalOnMissingBean(CharacterEncodingFilter.class), +		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfiguration.java, +import org.springframework.boot.context.web.OrderedCharacterEncodingFilter;, +	@ConditionalOnMissingBean(CharacterEncodingFilter.class), +		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java, +import java.util.ArrayList;, +import java.util.List;, +, +import javax.servlet.Filter;, +, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.web.filter.HiddenHttpMethodFilter;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void filterIsOrderedHighest() throws Exception {, +		load(OrderedConfiguration.class);, +		List<Filter> beans = new ArrayList<Filter>(this.context.getBeansOfType(, +				Filter.class).values());, +		AnnotationAwareOrderComparator.sort(beans);, +		assertThat(beans.get(0), instanceOf(CharacterEncodingFilter.class));, +		assertThat(beans.get(1), instanceOf(HiddenHttpMethodFilter.class));, +	}, +, +	@Configuration, +	static class OrderedConfiguration {, +, +		@Bean, +		public HiddenHttpMethodFilter hiddenHttpMethodFilter() {, +			return new HiddenHttpMethodFilter();, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfiguration.java, +import org.springframework.boot.context.web.OrderedCharacterEncodingFilter;, +	@ConditionalOnMissingBean(CharacterEncodingFilter.class), +		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java, +import java.util.ArrayList;, +import java.util.List;, +, +import javax.servlet.Filter;, +, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.web.filter.HiddenHttpMethodFilter;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void filterIsOrderedHighest() throws Exception {, +		load(OrderedConfiguration.class);, +		List<Filter> beans = new ArrayList<Filter>(this.context.getBeansOfType(, +				Filter.class).values());, +		AnnotationAwareOrderComparator.sort(beans);, +		assertThat(beans.get(0), instanceOf(CharacterEncodingFilter.class));, +		assertThat(beans.get(1), instanceOf(HiddenHttpMethodFilter.class));, +	}, +, +	@Configuration, +	static class OrderedConfiguration {, +, +		@Bean, +		public HiddenHttpMethodFilter hiddenHttpMethodFilter() {, +			return new HiddenHttpMethodFilter();, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/OrderedCharacterEncodingFilter.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.web;, +, +import org.springframework.core.Ordered;, +import org.springframework.web.filter.CharacterEncodingFilter;, +, +/**, + * {@link CharacterEncodingFilter} that also implements {@link Ordered}., + *, + * @author Phillip Webb, + * @since 1.2.1, + */]