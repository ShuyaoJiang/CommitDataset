[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +			if (!LifecycleState.STARTED.equals(container.getState())) {, +				throw new IllegalStateException(container + " failed to start");, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +			if (!LifecycleState.STARTED.equals(container.getState())) {, +				throw new IllegalStateException(container + " failed to start");, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.FilterConfig;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerException;, +import org.springframework.boot.web.servlet.ServletContextInitializer;, +	@Test, +	public void faultyFilterCausesStartFailure() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();, +		factory.addInitializers(new ServletContextInitializer() {, +, +			@Override, +			public void onStartup(ServletContext servletContext) throws ServletException {, +				servletContext.addFilter("faulty", new Filter() {, +, +					@Override, +					public void init(FilterConfig filterConfig) throws ServletException {, +						throw new ServletException("Faulty filter");, +					}, +, +					@Override, +					public void doFilter(ServletRequest request, ServletResponse response,, +							FilterChain chain) throws IOException, ServletException {, +						chain.doFilter(request, response);, +					}, +, +					@Override, +					public void destroy() {, +					}, +, +				});, +			}, +, +		});, +		this.thrown.expect(EmbeddedServletContainerException.class);, +		factory.getEmbeddedServletContainer().start();, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +			if (!LifecycleState.STARTED.equals(container.getState())) {, +				throw new IllegalStateException(container + " failed to start");, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java, +import javax.servlet.Filter;, +import javax.servlet.FilterChain;, +import javax.servlet.FilterConfig;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerException;, +import org.springframework.boot.web.servlet.ServletContextInitializer;, +	@Test, +	public void faultyFilterCausesStartFailure() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();, +		factory.addInitializers(new ServletContextInitializer() {, +, +			@Override, +			public void onStartup(ServletContext servletContext) throws ServletException {, +				servletContext.addFilter("faulty", new Filter() {, +, +					@Override, +					public void init(FilterConfig filterConfig) throws ServletException {, +						throw new ServletException("Faulty filter");, +					}, +, +					@Override, +					public void doFilter(ServletRequest request, ServletResponse response,, +							FilterChain chain) throws IOException, ServletException {, +						chain.doFilter(request, response);, +					}, +, +					@Override, +					public void destroy() {, +					}, +, +				});, +			}, +, +		});, +		this.thrown.expect(EmbeddedServletContainerException.class);, +		factory.getEmbeddedServletContainer().start();, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java, +import javax.servlet.ServletContext;, +import org.springframework.boot.web.servlet.ServletContextInitializer;, +	@Test, +	public void faultyFilterCausesStartFailure() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();]