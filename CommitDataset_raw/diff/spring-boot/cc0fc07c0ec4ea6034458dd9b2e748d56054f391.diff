[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using {@code management.shell.auth.simple.username} and, + * {@code management.shell.auth.simple.password}., + * Security. This authentication method will get enabled if {@code management.shell.auth.type}, + * is set to {@code spring} or if no explicit {@code management.shell.auth} is provided, + * and a {@link AuthenticationManager} is available. In the latter case shell access will, + * be restricted to users having roles that match those configured in, + * {@code management.shell.auth.spring.roles}., + * {@code management.shell.command-path-patterns} in your application configuration., +	public static final String AUTH_PREFIX = ShellProperties.SHELL_PREFIX + ".auth";, +, +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "jaas"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "key"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "spring", matchIfMissing = true), +			// In case no management.shell.auth.type property is provided fall back to, +			// Spring Security based authentication and get role to access shell from, +			// In case management.shell.auth.type is set to spring and roles are, +			// configured using shell.auth.spring.roles the below default role will be, +			// overridden by ConfigurationProperties., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using {@code management.shell.auth.simple.username} and, + * {@code management.shell.auth.simple.password}., + * Security. This authentication method will get enabled if {@code management.shell.auth.type}, + * is set to {@code spring} or if no explicit {@code management.shell.auth} is provided, + * and a {@link AuthenticationManager} is available. In the latter case shell access will, + * be restricted to users having roles that match those configured in, + * {@code management.shell.auth.spring.roles}., + * {@code management.shell.command-path-patterns} in your application configuration., +	public static final String AUTH_PREFIX = ShellProperties.SHELL_PREFIX + ".auth";, +, +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "jaas"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "key"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "spring", matchIfMissing = true), +			// In case no management.shell.auth.type property is provided fall back to, +			// Spring Security based authentication and get role to access shell from, +			// In case management.shell.auth.type is set to spring and roles are, +			// configured using shell.auth.spring.roles the below default role will be, +			// overridden by ConfigurationProperties., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, + * @author Stephane Nicoll, +@ConfigurationProperties(prefix = ShellProperties.SHELL_PREFIX, ignoreUnknownFields = true), +	public static final String SHELL_PREFIX = "management.shell";, +, +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.jaas", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.key", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.simple", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.spring", ignoreUnknownFields = false), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using {@code management.shell.auth.simple.username} and, + * {@code management.shell.auth.simple.password}., + * Security. This authentication method will get enabled if {@code management.shell.auth.type}, + * is set to {@code spring} or if no explicit {@code management.shell.auth} is provided, + * and a {@link AuthenticationManager} is available. In the latter case shell access will, + * be restricted to users having roles that match those configured in, + * {@code management.shell.auth.spring.roles}., + * {@code management.shell.command-path-patterns} in your application configuration., +	public static final String AUTH_PREFIX = ShellProperties.SHELL_PREFIX + ".auth";, +, +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "jaas"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "key"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "spring", matchIfMissing = true), +			// In case no management.shell.auth.type property is provided fall back to, +			// Spring Security based authentication and get role to access shell from, +			// In case management.shell.auth.type is set to spring and roles are, +			// configured using shell.auth.spring.roles the below default role will be, +			// overridden by ConfigurationProperties., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, + * @author Stephane Nicoll, +@ConfigurationProperties(prefix = ShellProperties.SHELL_PREFIX, ignoreUnknownFields = true), +	public static final String SHELL_PREFIX = "management.shell";, +, +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.jaas", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.key", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.simple", ignoreUnknownFields = false), +	@ConfigurationProperties(prefix = SHELL_PREFIX + ".auth.spring", ignoreUnknownFields = false), +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "management.shell.auth.type",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * by using {@code management.shell.auth.simple.username} and, + * {@code management.shell.auth.simple.password}., + * Security. This authentication method will get enabled if {@code management.shell.auth.type}, + * is set to {@code spring} or if no explicit {@code management.shell.auth} is provided, + * and a {@link AuthenticationManager} is available. In the latter case shell access will, + * be restricted to users having roles that match those configured in, + * {@code management.shell.auth.spring.roles}., + * {@code management.shell.command-path-patterns} in your application configuration., +	public static final String AUTH_PREFIX = ShellProperties.SHELL_PREFIX + ".auth";, +, +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "jaas"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "key"), +		@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "simple", matchIfMissing = true), +	@ConditionalOnProperty(prefix = AUTH_PREFIX, name = "type", havingValue = "spring", matchIfMissing = true), +			// In case no management.shell.auth.type property is provided fall back to, +			// Spring Security based authentication and get role to access shell from, +			// In case management.shell.auth.type is set to spring and roles are, +			// configured using shell.auth.spring.roles the below default role will be, +			// overridden by ConfigurationProperties.]