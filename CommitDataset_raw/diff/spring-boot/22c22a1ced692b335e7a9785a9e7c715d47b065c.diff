[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		Session session = (properties == null ? null : properties.getServlet().getSession());, +	 * @see ServerProperties.Servlet#getSession(), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		Session session = (properties == null ? null : properties.getServlet().getSession());, +	 * @see ServerProperties.Servlet#getSession(), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		private final Session session = new Session();, +, +		public Session getSession() {, +			return this.session;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		Session session = (properties == null ? null : properties.getServlet().getSession());, +	 * @see ServerProperties.Servlet#getSession(), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		private final Session session = new Session();, +, +		public Session getSession() {, +			return this.session;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		if (this.serverProperties.getServlet().getSession().getTimeout() != null) {, +			factory.setSessionTimeout(this.serverProperties.getServlet().getSession().getTimeout());, +		factory.setPersistSession(this.serverProperties.getServlet().getSession().isPersistent());, +		factory.setSessionStoreDir(this.serverProperties.getServlet().getSession().getStoreDir());, +				new SessionConfiguringInitializer(this.serverProperties.getServlet().getSession()));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		Session session = (properties == null ? null : properties.getServlet().getSession());, +	 * @see ServerProperties.Servlet#getSession(), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		private final Session session = new Session();, +, +		public Session getSession() {, +			return this.session;, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/DefaultServletWebServerFactoryCustomizer.java, +import org.springframework.boot.autoconfigure.web.ServerProperties.Servlet.Session;, +		if (this.serverProperties.getServlet().getSession().getTimeout() != null) {, +			factory.setSessionTimeout(this.serverProperties.getServlet().getSession().getTimeout());, +		factory.setPersistSession(this.serverProperties.getServlet().getSession().isPersistent());, +		factory.setSessionStoreDir(this.serverProperties.getServlet().getSession().getStoreDir());, +				new SessionConfiguringInitializer(this.serverProperties.getServlet().getSession()));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +      "name" : "server.session.cookie.comment",, +      "type" : "java.lang.String",, +      "description" : "Comment for the session cookie.",, +      "deprecation" : {, +        "replacement" : "server.servlet.session.cookie.comment",, +        "level" : "error", +      }, +    }, {, +      "name" : "server.session.cookie.domain",, +      "type" : "java.lang.String",, +      "description" : "Domain for the session cookie.",, +      "deprecation" : {, +        "replacement" : "server.servlet.session.cookie.domain",, +        "level" : "error", +      }, +    }, {, +      "name" : "server.session.cookie.http-only",, +      "type" : "java.lang.Boolean",, +      "description" : "\"HttpOnly\" flag for the session cookie.",, +      "deprecation" : {, +        "replacement" : "server.servlet.session.cookie.http-only",, +        "level" : "error", +      }, +    }, {, +      "name" : "server.session.cookie.max-age",, +      "type" : "java.time.Duration",, +      "description" : "Maximum age of the session cookie.",, +      "deprecation" : {, +        "replacement" : "server.servlet.session.cookie.max-age",, +        "level" : "error", +      }, +    }, {, +      "name" : "server.session.cookie.name",, +      "type" : "java.lang.String",, +      "description" : "Session cookie name.",, +      "deprecation" : {, +        "replacement" : "server.servlet.session.cookie.name",, +        "level" : "error", +      }, +    }, {, +      "name" : "server.session.cookie.path",, +      "type" : "java.lang.String",]