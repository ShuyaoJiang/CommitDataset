[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +@EnableConfigurationProperties(GsonProperties.class), +	@Bean, +	public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {, +		GsonBuilder builder = new GsonBuilder();, +		customizers.forEach(c -> c.customize(builder));, +		return builder;, +	}, +		public void customize(GsonBuilder builder) {, +			GsonProperties properties = this.properties;, +			PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +			map.from(properties::getGenerateNonExecutableJson), +					.toCall(builder::generateNonExecutableJson);, +			map.from(properties::getExcludeFieldsWithoutExposeAnnotation), +					.toCall(builder::excludeFieldsWithoutExposeAnnotation);, +			map.from(properties::getSerializeNulls).toCall(builder::serializeNulls);, +			map.from(properties::getEnableComplexMapKeySerialization), +					.toCall(builder::enableComplexMapKeySerialization);, +			map.from(properties::getDisableInnerClassSerialization), +					.toCall(builder::disableInnerClassSerialization);, +			map.from(properties::getLongSerializationPolicy), +					.to(builder::setLongSerializationPolicy);, +			map.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);, +			map.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);, +			map.from(properties::getLenient).toCall(builder::setLenient);, +			map.from(properties::getDisableHtmlEscaping), +					.toCall(builder::disableHtmlEscaping);, +			map.from(properties::getDateFormat).to(builder::setDateFormat);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +@EnableConfigurationProperties(GsonProperties.class), +	@Bean, +	public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {, +		GsonBuilder builder = new GsonBuilder();, +		customizers.forEach(c -> c.customize(builder));, +		return builder;, +	}, +		public void customize(GsonBuilder builder) {, +			GsonProperties properties = this.properties;, +			PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +			map.from(properties::getGenerateNonExecutableJson), +					.toCall(builder::generateNonExecutableJson);, +			map.from(properties::getExcludeFieldsWithoutExposeAnnotation), +					.toCall(builder::excludeFieldsWithoutExposeAnnotation);, +			map.from(properties::getSerializeNulls).toCall(builder::serializeNulls);, +			map.from(properties::getEnableComplexMapKeySerialization), +					.toCall(builder::enableComplexMapKeySerialization);, +			map.from(properties::getDisableInnerClassSerialization), +					.toCall(builder::disableInnerClassSerialization);, +			map.from(properties::getLongSerializationPolicy), +					.to(builder::setLongSerializationPolicy);, +			map.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);, +			map.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);, +			map.from(properties::getLenient).toCall(builder::setLenient);, +			map.from(properties::getDisableHtmlEscaping), +					.toCall(builder::disableHtmlEscaping);, +			map.from(properties::getDateFormat).to(builder::setDateFormat);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonBuilderCustomizer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.context.properties.PropertyMapper;, +@EnableConfigurationProperties(GsonProperties.class), +	@Bean, +	public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {, +		GsonBuilder builder = new GsonBuilder();, +		customizers.forEach(c -> c.customize(builder));, +		return builder;, +	}, +		public void customize(GsonBuilder builder) {, +			GsonProperties properties = this.properties;, +			PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();, +			map.from(properties::getGenerateNonExecutableJson), +					.toCall(builder::generateNonExecutableJson);, +			map.from(properties::getExcludeFieldsWithoutExposeAnnotation), +					.toCall(builder::excludeFieldsWithoutExposeAnnotation);, +			map.from(properties::getSerializeNulls).toCall(builder::serializeNulls);, +			map.from(properties::getEnableComplexMapKeySerialization), +					.toCall(builder::enableComplexMapKeySerialization);, +			map.from(properties::getDisableInnerClassSerialization), +					.toCall(builder::disableInnerClassSerialization);, +			map.from(properties::getLongSerializationPolicy), +					.to(builder::setLongSerializationPolicy);, +			map.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy);, +			map.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting);, +			map.from(properties::getLenient).toCall(builder::setLenient);, +			map.from(properties::getDisableHtmlEscaping), +					.toCall(builder::disableHtmlEscaping);, +			map.from(properties::getDateFormat).to(builder::setDateFormat);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonBuilderCustomizer.java, + * Copyright 2012-2018 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonProperties.java, + * Copyright 2012-2018 the original author or authors., +	 * Whether to generate non executable JSON by prefixing the output with some special, +	 * text., +	private Boolean generateNonExecutableJson;, +	 * Whether to exclude all fields from consideration for serialization or]