[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationPortTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationPortTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationPortTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/org/springframework/boot/sample/ops/EndpointsPropertiesSampleActuatorApplicationTests.java, +		this.context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationPortTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/org/springframework/boot/sample/ops/EndpointsPropertiesSampleActuatorApplicationTests.java, +		this.context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/org/springframework/boot/sample/ops/ManagementAddressSampleActuatorApplicationTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java, +				String[] paths = getEndpointPaths(true);, +				if (paths.length > 0) {, +				paths = getSecureApplicationPaths();, +				if (paths.length > 0) {, +					authorizeUrls.antMatchers(getSecureApplicationPaths()).hasRole(, +							this.security.getBasic().getRole());, +				}, +				authorizeUrls.and().httpBasic();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/AbstractDataSourceConfiguration.java, +	private int maxActive = 100;, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationPortTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator-ui/src/test/java/org/springframework/boot/sample/ops/ui/SampleActuatorUiApplicationTests.java, +		context = future.get(60, TimeUnit.SECONDS);, +++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/org/springframework/boot/sample/ops/EndpointsPropertiesSampleActuatorApplicationTests.java]