[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java, +	 * Test that the mail server is available on startup., +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java, +	 * Test that the mail server is available on startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import javax.naming.NamingException;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.jndi.JndiLocatorDelegate;, +	@Configuration, +	@ConditionalOnClass(Session.class), +	@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name"), +	@ConditionalOnJndi, +	static class JndiSessionConfiguration {, +		@ConditionalOnMissingBean, +		public Session session() {, +			String jndiName = this.properties.getJndiName();, +			try {, +				return new JndiLocatorDelegate().lookup(jndiName, Session.class);, +			}, +			catch (NamingException ex) {, +				throw new IllegalStateException(String.format(, +						"Unable to find Session in JNDI location %s", jndiName), ex);, +			}, +		}, +, +	}, +, +	@ConditionalOnMissingBean(MailSender.class), +	@Conditional(MailSenderConfiguration.MailSenderCondition.class), +	static class MailSenderConfiguration {, +, +		@Autowired, +		private MailProperties properties;, +, +		@Autowired(required = false), +		private Session session;, +, +		@Bean, +	}, +, +	@Configuration, +	@ConditionalOnSingleCandidate(JavaMailSenderImpl.class), +	static class MailSenderValidator {, +, +		@Autowired, +		private MailProperties properties;, +, +		@Autowired, +		private JavaMailSenderImpl mailSender;, +, +		@PostConstruct, +		public void validateConnection() {, +			if (this.properties.isTestConnection()) {, +				try {, +					this.mailSender.testConnection();, +				}, +				catch (MessagingException ex) {, +					throw new IllegalStateException("Mail server is not unavailable", ex);, +				}, +			}, +		}, +	}, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java, +	 * Test that the mail server is available on startup., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderAutoConfiguration.java, +import javax.annotation.PostConstruct;, +import javax.naming.NamingException;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnJndi;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.jndi.JndiLocatorDelegate;, +	@Configuration, +	@ConditionalOnClass(Session.class), +	@ConditionalOnProperty(prefix = "spring.mail", name = "jndi-name"), +	@ConditionalOnJndi, +	static class JndiSessionConfiguration {, +		@ConditionalOnMissingBean, +		public Session session() {, +			String jndiName = this.properties.getJndiName();, +			try {, +				return new JndiLocatorDelegate().lookup(jndiName, Session.class);, +			}, +			catch (NamingException ex) {, +				throw new IllegalStateException(String.format(, +						"Unable to find Session in JNDI location %s", jndiName), ex);, +			}, +		}, +, +	}, +, +	@ConditionalOnMissingBean(MailSender.class), +	@Conditional(MailSenderConfiguration.MailSenderCondition.class), +	static class MailSenderConfiguration {, +, +		@Autowired]