[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +	private ManagementServerProperties management;, +, +	@Autowired(required = false), +	private Map<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();, +		// The default sensitivity depends on whether all the endpoints by default are, +		// secure or not. User can always override with endpoints.health.sensitive., +		boolean secure = this.management != null && this.management.getSecurity() != null, +				&& this.management.getSecurity().isEnabled();, +		HealthEndpoint endpoint = new HealthEndpoint(this.healthAggregator,, +				this.healthIndicators);, +		endpoint.setSensitive(secure);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +	private ManagementServerProperties management;, +, +	@Autowired(required = false), +	private Map<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();, +		// The default sensitivity depends on whether all the endpoints by default are, +		// secure or not. User can always override with endpoints.health.sensitive., +		boolean secure = this.management != null && this.management.getSecurity() != null, +				&& this.management.getSecurity().isEnabled();, +		HealthEndpoint endpoint = new HealthEndpoint(this.healthAggregator,, +				this.healthIndicators);, +		endpoint.setSensitive(secure);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +	private ManagementServerProperties management;, +, +	@Autowired(required = false), +	private Map<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();, +		// The default sensitivity depends on whether all the endpoints by default are, +		// secure or not. User can always override with endpoints.health.sensitive., +		boolean secure = this.management != null && this.management.getSecurity() != null, +				&& this.management.getSecurity().isEnabled();, +		HealthEndpoint endpoint = new HealthEndpoint(this.healthAggregator,, +				this.healthIndicators);, +		endpoint.setSensitive(secure);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.actuate.autoconfigure.ManagementSecurityAutoConfiguration.ManagementWebSecurityConfigurerAdapter;, +	private static Log logger = LogFactory, +			.getLog(EndpointWebMvcChildContextConfiguration.class);, +, +		injectIntoSecurityFilter(beanFactory, mapping);, +	private void injectIntoSecurityFilter(ListableBeanFactory beanFactory,, +			EndpointHandlerMapping mapping) {, +		// The parent context has the security filter, so we need to get it injected with, +		// our EndpointHandlerMapping if we can., +		if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,, +				ManagementWebSecurityConfigurerAdapter.class).length == 1) {, +			ManagementWebSecurityConfigurerAdapter bean = beanFactory, +					.getBean(ManagementWebSecurityConfigurerAdapter.class);, +			bean.setEndpointHandlerMapping(mapping);, +		}, +		else {, +			logger.warn("No single bean of type ", +					+ ManagementWebSecurityConfigurerAdapter.class.getSimpleName(), +					+ " found (this might make some endpoints inaccessible without authentication)");, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +	private ManagementServerProperties management;, +, +	@Autowired(required = false), +	private Map<String, HealthIndicator> healthIndicators = new HashMap<String, HealthIndicator>();, +		// The default sensitivity depends on whether all the endpoints by default are, +		// secure or not. User can always override with endpoints.health.sensitive., +		boolean secure = this.management != null && this.management.getSecurity() != null, +				&& this.management.getSecurity().isEnabled();, +		HealthEndpoint endpoint = new HealthEndpoint(this.healthAggregator,, +				this.healthIndicators);, +		endpoint.setSensitive(secure);, +		return endpoint;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.actuate.autoconfigure.ManagementSecurityAutoConfiguration.ManagementWebSecurityConfigurerAdapter;, +	private static Log logger = LogFactory, +			.getLog(EndpointWebMvcChildContextConfiguration.class);, +, +		injectIntoSecurityFilter(beanFactory, mapping);, +	private void injectIntoSecurityFilter(ListableBeanFactory beanFactory,, +			EndpointHandlerMapping mapping) {, +		// The parent context has the security filter, so we need to get it injected with, +		// our EndpointHandlerMapping if we can., +		if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,, +				ManagementWebSecurityConfigurerAdapter.class).length == 1) {, +			ManagementWebSecurityConfigurerAdapter bean = beanFactory, +					.getBean(ManagementWebSecurityConfigurerAdapter.class);, +			bean.setEndpointHandlerMapping(mapping);, +		}, +		else {, +			logger.warn("No single bean of type "]