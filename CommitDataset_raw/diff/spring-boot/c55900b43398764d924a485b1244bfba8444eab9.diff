[+++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-rest-webmvc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-rest-webmvc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration;, +import org.springframework.hateoas.LinkDiscoverer;, +import org.springframework.hateoas.config.EnableHypermediaSupport;, + * @author Andy Wilkinson, +	@Configuration, +	@ConditionalOnClass({ LinkDiscoverer.class }), +	@Import(HypermediaHttpMessageConverterConfiguration.class), +	@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL), +	static class HypermediaConfiguration {, +, +	}, +, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-rest-webmvc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration;, +import org.springframework.hateoas.LinkDiscoverer;, +import org.springframework.hateoas.config.EnableHypermediaSupport;, + * @author Andy Wilkinson, +	@Configuration, +	@ConditionalOnClass({ LinkDiscoverer.class }), +	@Import(HypermediaHttpMessageConverterConfiguration.class), +	@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL), +	static class HypermediaConfiguration {, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import java.util.List;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +		private List<RequestMappingHandlerAdapter> handlerAdapters;, +			for (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {, +				for (HttpMessageConverter<?> converter : handlerAdapter, +						.getMessageConverters()) {, +			}, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-rest-webmvc</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +import org.springframework.boot.autoconfigure.hateoas.HypermediaHttpMessageConverterConfiguration;, +import org.springframework.hateoas.LinkDiscoverer;, +import org.springframework.hateoas.config.EnableHypermediaSupport;, + * @author Andy Wilkinson, +	@Configuration, +	@ConditionalOnClass({ LinkDiscoverer.class }), +	@Import(HypermediaHttpMessageConverterConfiguration.class), +	@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL), +	static class HypermediaConfiguration {, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java, +import java.util.List;, +import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;, +		private List<RequestMappingHandlerAdapter> handlerAdapters;, +			for (RequestMappingHandlerAdapter handlerAdapter : this.handlerAdapters) {, +				for (HttpMessageConverter<?> converter : handlerAdapter, +						.getMessageConverters()) {, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthMvcEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.test.ImportAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, + * @author Andy Wilkinson, +		this.context.register(TestConfiguration.class);, +		this.context.register(TestConfiguration.class);, +		Health map = (Health) health.getDetails().get("test");, +	@Configuration, +	@ImportAutoConfiguration({ SecurityAutoConfiguration.class,, +			JacksonAutoConfiguration.class, WebMvcAutoConfiguration.class,, +			HttpMessageConvertersAutoConfiguration.class,, +			ManagementServerPropertiesAutoConfiguration.class,, +			EndpointAutoConfiguration.class, EndpointWebMvcAutoConfiguration.class }), +	static class TestConfiguration {, +, +		@Bean, +		public TestHealthIndicator testHealthIndicator() {, +			return new TestHealthIndicator();, +		}]