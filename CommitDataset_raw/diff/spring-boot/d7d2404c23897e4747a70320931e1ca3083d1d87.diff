[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +		awaitThread.setContextClassLoader(getClass().getClassLoader());, +			stopTomcat();, +	private void stopTomcat() throws LifecycleException {, +		if (Thread.currentThread(), +				.getContextClassLoader() instanceof TomcatEmbeddedWebappClassLoader) {, +			Thread.currentThread().setContextClassLoader(getClass().getClassLoader());, +		}, +		this.tomcat.stop();, +	}, +, +				stopTomcat();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +		awaitThread.setContextClassLoader(getClass().getClassLoader());, +			stopTomcat();, +	private void stopTomcat() throws LifecycleException {, +		if (Thread.currentThread(), +				.getContextClassLoader() instanceof TomcatEmbeddedWebappClassLoader) {, +			Thread.currentThread().setContextClassLoader(getClass().getClassLoader());, +		}, +		this.tomcat.stop();, +	}, +, +				stopTomcat();, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactoryTests.java, +import org.junit.Rule;, +import org.springframework.boot.testutil.OutputCapture;, +	@Rule, +	public OutputCapture outputCapture = new OutputCapture();, +, +	@Test, +	public void startupFailureDoesNotResultInUnstoppedThreadsBeingReported(), +			throws IOException {, +		super.portClashOfPrimaryConnectorResultsInPortInUseException();, +, +		String string = this.outputCapture.toString();, +		assertThat(string), +				.doesNotContain("appears to have started a thread named [main]");, +	}, +]