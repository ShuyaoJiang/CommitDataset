[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +				if (!loader.getResource(context.getEnvironment().resolvePlaceholders(location)).exists()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java, +				if (!loader.getResource(context.getEnvironment().resolvePlaceholders(location)).exists()) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java, +import org.junit.Test;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +	public void testResourceExistsWithPlaceholder() {, +		EnvironmentTestUtils.addEnvironment(this.context, "schema=schema.sql");, +		this.context.register(PlaceholderConfiguration.class);, +		this.context.refresh();, +		assertTrue(this.context.containsBean("foo"));, +		assertEquals("foo", this.context.getBean("foo"));, +	}, +, +	@Test, +, +	@Configuration, +	@ConditionalOnResource(resources = "${schema}"), +	protected static class PlaceholderConfiguration {, +		@Bean, +		public String foo() {, +			return "foo";, +		}, +	}]