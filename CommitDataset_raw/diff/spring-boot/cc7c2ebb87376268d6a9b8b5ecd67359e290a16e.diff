[+++ b/spring-boot-cli/pom.xml, +			<groupId>com.vaadin.external.google</groupId>, +			<artifactId>android-json</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/pom.xml, +			<groupId>com.vaadin.external.google</groupId>, +			<artifactId>android-json</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	private JSONObject getContentAsJson(HttpEntity entity), +			throws IOException, JSONException {, +++ b/spring-boot-cli/pom.xml, +			<groupId>com.vaadin.external.google</groupId>, +			<artifactId>android-json</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	private JSONObject getContentAsJson(HttpEntity entity), +			throws IOException, JSONException {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import org.json.JSONException;, +	 * @throws JSONException on JSON parsing failure, +	InitializrServiceMetadata(JSONObject root) throws JSONException {, +	private Map<String, Dependency> parseDependencies(JSONObject root), +			throws JSONException {, +	private MetadataHolder<String, ProjectType> parseProjectTypes(JSONObject root), +			throws JSONException {, +	private Map<String, String> parseDefaults(JSONObject root) throws JSONException {, +	private void parseGroup(JSONObject group, Map<String, Dependency> dependencies), +			throws JSONException {, +	private Dependency parseDependency(JSONObject object) throws JSONException {, +	private ProjectType parseType(JSONObject object, String defaultId), +			throws JSONException {, +	private String getStringValue(JSONObject object, String name, String defaultValue), +			throws JSONException {, +	private Map<String, String> parseStringItems(JSONObject json) throws JSONException {, +		for (Iterator<?> iterator = json.keys(); iterator.hasNext();) {, +			String key = (String) iterator.next();, +++ b/spring-boot-cli/pom.xml, +			<groupId>com.vaadin.external.google</groupId>, +			<artifactId>android-json</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	private JSONObject getContentAsJson(HttpEntity entity), +			throws IOException, JSONException {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import org.json.JSONException;, +	 * @throws JSONException on JSON parsing failure, +	InitializrServiceMetadata(JSONObject root) throws JSONException {, +	private Map<String, Dependency> parseDependencies(JSONObject root), +			throws JSONException {, +	private MetadataHolder<String, ProjectType> parseProjectTypes(JSONObject root), +			throws JSONException {, +	private Map<String, String> parseDefaults(JSONObject root) throws JSONException {, +	private void parseGroup(JSONObject group, Map<String, Dependency> dependencies), +			throws JSONException {, +	private Dependency parseDependency(JSONObject object) throws JSONException {, +	private ProjectType parseType(JSONObject object, String defaultId), +			throws JSONException {, +	private String getStringValue(JSONObject object, String name, String defaultValue), +			throws JSONException {, +	private Map<String, String> parseStringItems(JSONObject json) throws JSONException {, +		for (Iterator<?> iterator = json.keys(); iterator.hasNext();) {, +			String key = (String) iterator.next();, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/AbstractHttpClientMockTests.java, +import org.json.JSONException;, +			throws IOException, JSONException {, +	protected void mockMetadataGetError(int status, String message), +			throws IOException, JSONException {, +	private String createJsonError(int status, String message) throws JSONException {, +++ b/spring-boot-cli/pom.xml, +			<groupId>com.vaadin.external.google</groupId>, +			<artifactId>android-json</artifactId>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	private JSONObject getContentAsJson(HttpEntity entity), +			throws IOException, JSONException {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrServiceMetadata.java, +import org.json.JSONException;, +	 * @throws JSONException on JSON parsing failure, +	InitializrServiceMetadata(JSONObject root) throws JSONException {, +	private Map<String, Dependency> parseDependencies(JSONObject root), +			throws JSONException {, +	private MetadataHolder<String, ProjectType> parseProjectTypes(JSONObject root), +			throws JSONException {, +	private Map<String, String> parseDefaults(JSONObject root) throws JSONException {, +	private void parseGroup(JSONObject group, Map<String, Dependency> dependencies), +			throws JSONException {, +	private Dependency parseDependency(JSONObject object) throws JSONException {, +	private ProjectType parseType(JSONObject object, String defaultId), +			throws JSONException {, +	private String getStringValue(JSONObject object, String name, String defaultValue), +			throws JSONException {, +	private Map<String, String> parseStringItems(JSONObject json) throws JSONException {, +		for (Iterator<?> iterator = json.keys(); iterator.hasNext();) {, +			String key = (String) iterator.next();]