[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		// Just the management endpoints (one filter) and ignores now plus the backup, +		// filter on app endpoints, +		assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		// Just the management endpoints (one filter) and ignores now plus the backup, +		// filter on app endpoints, +		assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.ProviderManager;, +	@Autowired, +	private AuthenticationEventPublisher authenticationEventPublisher;, +, +		AuthenticationManager manager = this.configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		if (manager instanceof ProviderManager) {, +			((ProviderManager) manager), +					.setAuthenticationEventPublisher(this.authenticationEventPublisher);, +		}, +		return manager;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		// Just the management endpoints (one filter) and ignores now plus the backup, +		// filter on app endpoints, +		assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.ProviderManager;, +	@Autowired, +	private AuthenticationEventPublisher authenticationEventPublisher;, +, +		AuthenticationManager manager = this.configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		if (manager instanceof ProviderManager) {, +			((ProviderManager) manager), +					.setAuthenticationEventPublisher(this.authenticationEventPublisher);, +		}, +		return manager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.context.ApplicationEventPublisher;, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;, +	public AuthenticationEventPublisher authenticationEventPublisher(, +			ApplicationEventPublisher publisher) {, +		return new DefaultAuthenticationEventPublisher(publisher);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		// Just the management endpoints (one filter) and ignores now plus the backup, +		// filter on app endpoints, +		assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.ProviderManager;, +	@Autowired, +	private AuthenticationEventPublisher authenticationEventPublisher;, +, +		AuthenticationManager manager = this.configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		if (manager instanceof ProviderManager) {, +			((ProviderManager) manager), +					.setAuthenticationEventPublisher(this.authenticationEventPublisher);, +		}, +		return manager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.context.ApplicationEventPublisher;, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;, +	public AuthenticationEventPublisher authenticationEventPublisher(, +			ApplicationEventPublisher publisher) {, +		return new DefaultAuthenticationEventPublisher(publisher);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +	public static final int ACCESS_OVERRIDE_ORDER = SecurityProperties.BASIC_AUTH_ORDER - 2;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		// Just the management endpoints (one filter) and ignores now plus the backup, +		// filter on app endpoints, +		assertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains(), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.ProviderManager;, +	@Autowired, +	private AuthenticationEventPublisher authenticationEventPublisher;, +, +		AuthenticationManager manager = this.configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		if (manager instanceof ProviderManager) {, +			((ProviderManager) manager), +					.setAuthenticationEventPublisher(this.authenticationEventPublisher);, +		}, +		return manager;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.context.ApplicationEventPublisher;, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;]