[+++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, +@TestExecutionListeners(listeners = { IntegrationTestPropertiesListener.class,, +		DependencyInjectionTestExecutionListener.class,, +	String[] value() default {};, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, +@TestExecutionListeners(listeners = { IntegrationTestPropertiesListener.class,, +		DependencyInjectionTestExecutionListener.class,, +	String[] value() default {};, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, + * Manipulate the TestContext to merge properties from {@code @IntegrationTest}., + * @author Phillip Webb, + * @since 1.2.0, +class IntegrationTestPropertiesListener extends AbstractTestExecutionListener {, +	private static final String ANNOTATION_TYPE = IntegrationTest.class.getName();, +		Class<?> testClass = testContext.getTestClass();, +		if (AnnotatedElementUtils.isAnnotated(testClass, ANNOTATION_TYPE)) {, +			AnnotationAttributes annotationAttributes = AnnotatedElementUtils, +					.getAnnotationAttributes(testClass, ANNOTATION_TYPE);, +			addPropertySourceProperties(testContext,, +					annotationAttributes.getStringArray("value"));, +		}, +	}, +, +	private void addPropertySourceProperties(TestContext testContext, String[] properties) {, +			addPropertySourcePropertiesUsingReflection(testContext, properties);, +		catch (RuntimeException ex) {, +			throw ex;, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +	private void addPropertySourcePropertiesUsingReflection(TestContext testContext,, +			String[] properties) throws Exception {, +		if (properties.length == 0) {, +			return;, +		MergedContextConfiguration configuration = (MergedContextConfiguration) ReflectionTestUtils, +				.getField(testContext, "mergedContextConfiguration");, +		Set<String> merged = new LinkedHashSet<String>((Arrays.asList(configuration, +				.getPropertySourceProperties())));, +		merged.addAll(Arrays.asList(properties));, +		ReflectionTestUtils.setField(configuration, "propertySourceProperties",, +				merged.toArray(new String[merged.size()]));, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java, +@TestExecutionListeners(listeners = { IntegrationTestPropertiesListener.class,, +		DependencyInjectionTestExecutionListener.class,, +	String[] value() default {};, +++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, + * Manipulate the TestContext to merge properties from {@code @IntegrationTest}., + * @author Phillip Webb, + * @since 1.2.0, +class IntegrationTestPropertiesListener extends AbstractTestExecutionListener {, +	private static final String ANNOTATION_TYPE = IntegrationTest.class.getName();, +		Class<?> testClass = testContext.getTestClass();, +		if (AnnotatedElementUtils.isAnnotated(testClass, ANNOTATION_TYPE)) {, +			AnnotationAttributes annotationAttributes = AnnotatedElementUtils, +					.getAnnotationAttributes(testClass, ANNOTATION_TYPE);, +			addPropertySourceProperties(testContext,, +					annotationAttributes.getStringArray("value"));, +		}, +	}, +, +	private void addPropertySourceProperties(TestContext testContext, String[] properties) {, +			addPropertySourcePropertiesUsingReflection(testContext, properties);, +		catch (RuntimeException ex) {, +			throw ex;, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +	private void addPropertySourcePropertiesUsingReflection(TestContext testContext,, +			String[] properties) throws Exception {, +		if (properties.length == 0) {, +			return;, +		MergedContextConfiguration configuration = (MergedContextConfiguration) ReflectionTestUtils, +				.getField(testContext, "mergedContextConfiguration");, +		Set<String> merged = new LinkedHashSet<String>((Arrays.asList(configuration, +				.getPropertySourceProperties())));, +		merged.addAll(Arrays.asList(properties));, +		ReflectionTestUtils.setField(configuration, "propertySourceProperties",, +				merged.toArray(new String[merged.size()]));, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +								getEnvironmentProperties(config)));, +	protected Map<String, Object> getEnvironmentProperties(, +			MergedContextConfiguration config) {, +		Map<String, Object> properties = new LinkedHashMap<String, Object>();, +		// JMX bean names will clash if the same bean is used in multiple contexts, +		disableJmx(properties);, +		properties.putAll(extractEnvironmentProperties(config, +				.getPropertySourceProperties()));, +		if (AnnotationUtils.findAnnotation(config.getTestClass(), IntegrationTest.class) == null) {, +			properties.putAll(getDefaultEnvironmentProperties());, +		}, +		return properties;, +	}, +	private void disableJmx(Map<String, Object> properties) {, +		properties.put("spring.jmx.enabled", "false");, +	}, +]