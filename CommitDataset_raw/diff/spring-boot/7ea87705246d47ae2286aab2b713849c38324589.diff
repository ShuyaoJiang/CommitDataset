[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +	 * {@code username} and {@code password}. The request factory used is a new instance, +	 * of the underlying {@link RestTemplate}'s request factory type (when possible)., +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java, +	 * {@code username} and {@code password}. The request factory used is a new instance, +	 * of the underlying {@link RestTemplate}'s request factory type (when possible)., +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/TestRestTemplateTests.java, +import org.springframework.http.client.ClientHttpRequest;, +				.requestFactory(() -> customFactory);, +	public void withBasicAuthWhenRequestFactoryTypeCannotBeInstantiatedShouldFallback() {, +		TestClientHttpRequestFactory customFactory = new TestClientHttpRequestFactory(, +				"my-request-factory");, +		RestTemplateBuilder builder = new RestTemplateBuilder(), +				.requestFactory(() -> customFactory);, +		TestRestTemplate testRestTemplate = new TestRestTemplate(builder), +				.withBasicAuth("test", "test");, +		RestTemplate restTemplate = testRestTemplate.getRestTemplate();, +		Object requestFactory = ReflectionTestUtils, +				.getField(restTemplate.getRequestFactory(), "requestFactory");, +		assertThat(requestFactory).isNotEqualTo(customFactory), +				.isInstanceOf(CustomHttpComponentsClientHttpRequestFactory.class);, +	}, +, +	@Test, +	static class TestClientHttpRequestFactory implements ClientHttpRequestFactory {, +, +		TestClientHttpRequestFactory(String value) {, +		}, +, +		@Override, +		public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod), +				throws IOException {, +			return null;, +		}, +, +	}, +]