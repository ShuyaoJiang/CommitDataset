[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.flywaydb.core.internal.util.ClassUtils;, + * @author Andy Wilkinson, +		 * Java 1.9., +		NINE(9, "1.9", "java.security.cert.URICertStoreParameters"),, +		EIGHT(8, "1.8", "java.util.function.Function"),, +		 * Java 1.7., +		SEVEN(7, "1.7", "java.nio.file.Files"),, +, +		/**, +		 * Java 1.6., +		 */, +		SIX(6, "1.6", "java.util.ServiceLoader");, +		private final boolean available;, +, +		JavaVersion(int value, String name, String className) {, +			this.available = ClassUtils.isPresent(className, getClass().getClassLoader());, +				if (candidate.available) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java, +import org.flywaydb.core.internal.util.ClassUtils;, + * @author Andy Wilkinson, +		 * Java 1.9., +		NINE(9, "1.9", "java.security.cert.URICertStoreParameters"),, +		EIGHT(8, "1.8", "java.util.function.Function"),, +		 * Java 1.7., +		SEVEN(7, "1.7", "java.nio.file.Files"),, +, +		/**, +		 * Java 1.6., +		 */, +		SIX(6, "1.6", "java.util.ServiceLoader");, +		private final boolean available;, +, +		JavaVersion(int value, String name, String className) {, +			this.available = ClassUtils.isPresent(className, getClass().getClassLoader());, +				if (candidate.available) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJavaTests.java, +import java.lang.reflect.Method;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.nio.file.Files;, +import java.util.Arrays;, +import java.util.List;, +import java.util.ServiceLoader;, +import java.util.function.Function;, +, +import org.springframework.util.ReflectionUtils;, +	@Test, +	public void java8IsDetected() throws Exception {, +		assertThat(getJavaVersion(), is("1.8"));, +	}, +, +	@Test, +	public void java7IsDetected() throws Exception {, +		assertThat(getJavaVersion(Function.class), is("1.7"));, +	}, +, +	@Test, +	public void java6IsDetected() throws Exception {, +		assertThat(getJavaVersion(Function.class, Files.class), is("1.6"));, +	}, +, +	@Test, +	public void java6IsTheFallback() throws Exception {, +		assertThat(getJavaVersion(Function.class, Files.class, ServiceLoader.class),, +				is("1.6"));, +	}, +, +	private String getJavaVersion(Class<?>... hiddenClasses) throws Exception {, +		URL[] urls = ((URLClassLoader) getClass().getClassLoader()).getURLs();, +		URLClassLoader classLoader = new ClassHidingClassLoader(urls, hiddenClasses);, +, +		Class<?> javaVersionClass = classLoader, +				.loadClass(ConditionalOnJava.JavaVersion.class.getName());, +, +		Method getJavaVersionMethod = ReflectionUtils.findMethod(javaVersionClass,, +				"getJavaVersion");, +		Object javaVersion = ReflectionUtils.invokeMethod(getJavaVersionMethod, null);, +		classLoader.close();, +		return javaVersion.toString();, +	}, +, +	private final class ClassHidingClassLoader extends URLClassLoader {, +, +		private final List<Class<?>> hiddenClasses;, +, +		private ClassHidingClassLoader(URL[] urls, Class<?>... hiddenClasses) {, +			super(urls, null);, +			this.hiddenClasses = Arrays.asList(hiddenClasses);, +		}, +, +		@Override, +		public Class<?> loadClass(String name) throws ClassNotFoundException {, +			if (isHidden(name)) {, +				throw new ClassNotFoundException();, +			}, +			return super.loadClass(name);, +		}, +, +		private boolean isHidden(String name) {]