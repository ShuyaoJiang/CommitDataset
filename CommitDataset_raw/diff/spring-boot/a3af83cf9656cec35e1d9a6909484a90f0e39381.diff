[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +import java.util.Collections;, +	 * Properties key for classpath entries (directories possibly containing jars)., +	 * Defaults to "lib/" (relative to {@link #HOME loader home directory})., +	/**, +	 * Properties key for home directory. This is the location of external configuration, +	 * if not on classpath, and also the base path for any relative paths in the, +	 * {@link #PATH loader path}. Defaults to current working directory (, +	 * <code>${user.home}</code>)., +	 */, +	/**, +	 * Properties key for name of external configuration file (excluding suffix). Defaults, +	 * to "application". Ignored if {@link #CONFIG_LOCATION loader config location} is, +	 * provided instead., +	 */, +	/**, +	 * Properties key for config file location (including optional classpath:, file: or, +	 * URL prefix), +	 */, +			for (Object key : Collections.list(this.properties.propertyNames())) {, +				String text = this.properties.getProperty((String) key);, +				String value = SystemPropertyUtils.resolvePlaceholders(this.properties,, +						text);, +				if (value != null) {, +					this.properties.put(key, value);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +import java.util.Collections;, +	 * Properties key for classpath entries (directories possibly containing jars)., +	 * Defaults to "lib/" (relative to {@link #HOME loader home directory})., +	/**, +	 * Properties key for home directory. This is the location of external configuration, +	 * if not on classpath, and also the base path for any relative paths in the, +	 * {@link #PATH loader path}. Defaults to current working directory (, +	 * <code>${user.home}</code>)., +	 */, +	/**, +	 * Properties key for name of external configuration file (excluding suffix). Defaults, +	 * to "application". Ignored if {@link #CONFIG_LOCATION loader config location} is, +	 * provided instead., +	 */, +	/**, +	 * Properties key for config file location (including optional classpath:, file: or, +	 * URL prefix), +	 */, +			for (Object key : Collections.list(this.properties.propertyNames())) {, +				String text = this.properties.getProperty((String) key);, +				String value = SystemPropertyUtils.resolvePlaceholders(this.properties,, +						text);, +				if (value != null) {, +					this.properties.put(key, value);, +				}, +			}, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +import java.util.Properties;, +			return text;, +		return parseStringValue(null, text, text, new HashSet<String>());, +	/**, +	 * Resolve ${...} placeholders in the given text, replacing them with corresponding, +	 * system property values., +	 * @param properties a properties instance to use in addition to System, +	 * @param text the String to resolve, +	 * @return the resolved String, +	 * @see #PLACEHOLDER_PREFIX, +	 * @see #PLACEHOLDER_SUFFIX, +	 * @throws IllegalArgumentException if there is an unresolvable placeholder, +	 */, +	public static String resolvePlaceholders(Properties properties, String text) {, +		if (text == null) {, +			return text;, +		}, +		return parseStringValue(properties, text, text, new HashSet<String>());, +	}, +, +	private static String parseStringValue(Properties properties, String value,, +			String current, Set<String> visitedPlaceholders) {, +				placeholder = parseStringValue(properties, value, placeholder,, +						visitedPlaceholders);, +				String propVal = resolvePlaceholder(properties, value, placeholder);, +						propVal = resolvePlaceholder(properties, value, actualPlaceholder);, +					propVal = parseStringValue(properties, value, propVal,, +							visitedPlaceholders);, +	private static String resolvePlaceholder(Properties properties, String text,, +			String placeholderName) {, +			if (propVal != null) {, +		}, +		return properties.getProperty(placeholderName);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +import java.util.Collections;, +	 * Properties key for classpath entries (directories possibly containing jars)., +	 * Defaults to "lib/" (relative to {@link #HOME loader home directory})., +	/**, +	 * Properties key for home directory. This is the location of external configuration, +	 * if not on classpath, and also the base path for any relative paths in the, +	 * {@link #PATH loader path}. Defaults to current working directory (, +	 * <code>${user.home}</code>)., +	 */, +	/**, +	 * Properties key for name of external configuration file (excluding suffix). Defaults]