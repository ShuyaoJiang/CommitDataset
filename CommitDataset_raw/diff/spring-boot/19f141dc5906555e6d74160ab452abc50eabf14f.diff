[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			addConfigurationProperties(, +					new ConfigurationPropertySources(reorderedSources));, +		}, +, +		private void addConfigurationProperties(, +				ConfigurationPropertySources configurationSources) {, +			MutablePropertySources existingSources = this.environment, +					.getPropertySources();, +			if (existingSources.contains(DEFAULT_PROPERTIES)) {, +				existingSources.addBefore(DEFAULT_PROPERTIES, configurationSources);, +			}, +			else {, +				existingSources.addLast(configurationSources);, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			addConfigurationProperties(, +					new ConfigurationPropertySources(reorderedSources));, +		}, +, +		private void addConfigurationProperties(, +				ConfigurationPropertySources configurationSources) {, +			MutablePropertySources existingSources = this.environment, +					.getPropertySources();, +			if (existingSources.contains(DEFAULT_PROPERTIES)) {, +				existingSources.addBefore(DEFAULT_PROPERTIES, configurationSources);, +			}, +			else {, +				existingSources.addLast(configurationSources);, +			}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	@Test, +	public void addBeforeDefaultProperties() throws Exception {, +		MapPropertySource defaultSource = new MapPropertySource("defaultProperties",, +				Collections.<String, Object>singletonMap("the.property",, +						"fromdefaultproperties"));, +		this.environment.getPropertySources().addFirst(defaultSource);, +		this.initializer.setSearchNames("testproperties");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		String property = this.environment.getProperty("the.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +	}, +]