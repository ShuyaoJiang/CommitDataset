[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.context.annotation.Primary;, +	@Primary, +	@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" }), +	@Bean, +	public ConnectionFactory nonXaJmsConnectionFactory(ActiveMQProperties properties) {, +		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(, +				properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		if (properties.isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		}, +		return connectionFactory;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.context.annotation.Primary;, +	@Primary, +	@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" }), +	@Bean, +	public ConnectionFactory nonXaJmsConnectionFactory(ActiveMQProperties properties) {, +		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(, +				properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		if (properties.isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		}, +		return connectionFactory;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQXAConnectionFactoryConfiguration.java, +import org.hornetq.jms.client.HornetQConnectionFactory;, +import org.springframework.context.annotation.Primary;, +	@Primary, +	@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" }), +	@Bean, +	public ConnectionFactory nonXaJmsConnectionFactory(ListableBeanFactory beanFactory,, +			HornetQProperties properties) {, +		return new HornetQConnectionFactoryFactory(beanFactory, properties), +				.createConnectionFactory(HornetQConnectionFactory.class);, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.java, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.context.annotation.Primary;, +	@Primary, +	@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" }), +	@Bean, +	public ConnectionFactory nonXaJmsConnectionFactory(ActiveMQProperties properties) {, +		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(, +				properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		if (properties.isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		}, +		return connectionFactory;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/hornetq/HornetQXAConnectionFactoryConfiguration.java, +import org.hornetq.jms.client.HornetQConnectionFactory;, +import org.springframework.context.annotation.Primary;, +	@Primary, +	@Bean(name = { "jmsConnectionFactory", "xaJmsConnectionFactory" }), +	@Bean, +	public ConnectionFactory nonXaJmsConnectionFactory(ListableBeanFactory beanFactory,, +			HornetQProperties properties) {, +		return new HornetQConnectionFactoryFactory(beanFactory, properties), +				.createConnectionFactory(HornetQConnectionFactory.class);, +	}, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +=== Mixing XA and non-XA JMS connections, +When using JTA, the primary JMS `ConnectionFactory` bean will be XA aware and participate, +in distributed transactions. In some situations you might want to process certain JMS, +messages using a non-XA `ConnectionFactory`. For example, your JMS processing logic might, +take longer than the XA timeout., +, +If you want to use a non-XA `ConnectionFactory` you can inject the, +`nonXaJmsConnectionFactory` bean rather than the `@Primary` `jmsConnectionFactory` bean., +For consistency the `jmsConnectionFactory` bean is also provided using the bean alias, +`xaJmsConnectionFactory`., +, +For example:, +, +[source,java,indent=0,subs="verbatim,quotes,attributes"], +----, +	// Inject the primary (XA aware) ConnectionFactory, +	@Autowired, +	private ConnectionFactory defaultConnectionFactory;, +, +	// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above), +	@Autowired, +	@Qualifier("xaJmsConnectionFactory"), +	private ConnectionFactory xaConnectionFactory;]