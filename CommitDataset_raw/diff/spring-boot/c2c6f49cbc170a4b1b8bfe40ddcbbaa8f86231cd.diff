[+++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.env.EnvironmentEndpoint.PropertySourceDescriptor;, +import org.springframework.boot.actuate.env.EnvironmentEndpoint.PropertyValueDescriptor;, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/env/EnvironmentEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.env.EnvironmentEndpoint.PropertySourceDescriptor;, +import org.springframework.boot.actuate.env.EnvironmentEndpoint.PropertyValueDescriptor;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +import com.fasterxml.jackson.annotation.JsonInclude;, +, +import org.springframework.boot.context.properties.source.ConfigurationPropertySources;, + * @author Stephane Nicoll, +	public EnvironmentEntryDescriptor environmentEntry(@Selector String toMatch) {, +		return getEnvironmentEntryDescriptor(toMatch);, +	private EnvironmentEntryDescriptor getEnvironmentEntryDescriptor(, +			String propertyName) {, +		Map<String, PropertyValueDescriptor> descriptors = getPropertySourceDescriptors(, +				propertyName);, +		PropertySummaryDescriptor summary = getPropertySummaryDescriptor(descriptors);, +		return new EnvironmentEntryDescriptor(summary,, +				Arrays.asList(this.environment.getActiveProfiles()),, +				toPropertySourceDescriptors(descriptors));, +	}, +, +	private List<PropertySourceEntryDescriptor> toPropertySourceDescriptors(, +			Map<String, PropertyValueDescriptor> descriptors) {, +		List<PropertySourceEntryDescriptor> result = new ArrayList<>();, +		for (Map.Entry<String, PropertyValueDescriptor> entry : descriptors.entrySet()) {, +			result.add(new PropertySourceEntryDescriptor(entry.getKey(), entry.getValue()));, +		}, +		return result;, +	}, +, +	private PropertySummaryDescriptor getPropertySummaryDescriptor(, +			Map<String, PropertyValueDescriptor> descriptors) {, +		for (Map.Entry<String, PropertyValueDescriptor> entry : descriptors.entrySet()) {, +			if (entry.getValue() != null) {, +				return new PropertySummaryDescriptor(entry.getKey(),, +						entry.getValue().getValue());, +			}, +		}, +		return null;, +	}, +, +	private Map<String, PropertyValueDescriptor> getPropertySourceDescriptors(, +			String propertyName) {, +		Map<String, PropertyValueDescriptor> propertySources = new LinkedHashMap<>();, +		PlaceholdersResolver resolver = getResolver();, +		getPropertySourcesAsMap().forEach((sourceName, source) ->, +				propertySources.put(sourceName, source.containsProperty(propertyName) ?, +						describeValueOf(propertyName, source, resolver) : null));, +		return propertySources;, +	}, +, +			PropertySource<?> source, PlaceholdersResolver resolver) {, +			if (!ConfigurationPropertySources.isMainConfigurationPropertySource(source)) {, +		}, +	}, +, +	/**, +	 * A description of an entry of the {@link Environment}., +	 */, +	@JsonInclude(JsonInclude.Include.NON_NULL), +	public static final class EnvironmentEntryDescriptor {, +, +		private final PropertySummaryDescriptor property;, +, +		private final List<String> activeProfiles;, +, +		private final List<PropertySourceEntryDescriptor> propertySources;, +, +		private EnvironmentEntryDescriptor(PropertySummaryDescriptor property,, +				List<String> activeProfiles,, +				List<PropertySourceEntryDescriptor> propertySources) {, +			this.property = property;, +			this.activeProfiles = activeProfiles;, +			this.propertySources = propertySources;, +		}, +, +		public PropertySummaryDescriptor getProperty() {, +			return this.property;, +		}, +, +		public List<String> getActiveProfiles() {, +			return this.activeProfiles;, +		}, +, +		public List<PropertySourceEntryDescriptor> getPropertySources() {, +			return this.propertySources;, +		}, +, +	}, +, +	/**, +	 * A summary of a particular entry of the {@link Environment}., +	 */, +	@JsonInclude(JsonInclude.Include.NON_NULL), +	public static final class PropertySummaryDescriptor {, +, +		private final String source;, +]