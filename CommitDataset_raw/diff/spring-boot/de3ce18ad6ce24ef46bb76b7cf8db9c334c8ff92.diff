[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, +import org.springframework.aop.support.AopUtils;, +				if (AopUtils.isCglibProxy(mapping)) {, +					// The getHandlerMap() method is final so it cannot be cglibbed, +					continue;, +				}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, +import org.springframework.aop.support.AopUtils;, +				if (AopUtils.isCglibProxy(mapping)) {, +					// The getHandlerMap() method is final so it cannot be cglibbed, +					continue;, +				}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpointTests.java, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Lazy;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +	public void beanUrlMappingsProxy() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				MappingConfiguration.class);, +		this.endpoint.setApplicationContext(context);, +		Map<String, Object> result = this.endpoint.invoke();, +		assertEquals(1, result.size());, +		@SuppressWarnings("unchecked"), +		Map<String, Object> map = (Map<String, Object>) result.get("/foo");, +		assertEquals("scopedTarget.mapping", map.get("bean"));, +	}, +, +	@Test, +	@Configuration, +	protected static class MappingConfiguration {, +		@Bean, +		@Lazy, +		@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS), +		public AbstractUrlHandlerMapping mapping() {, +			SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();, +			mapping.setUrlMap(Collections.singletonMap("/foo", new Object()));, +			return mapping;, +		}, +	}]