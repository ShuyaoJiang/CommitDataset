[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		TypeElementMembers members = new TypeElementMembers(this.processingEnv,, +				this.fieldValuesParser, element);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		TypeElementMembers members = new TypeElementMembers(this.processingEnv,, +				this.fieldValuesParser, element);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, +		try {, +			Map<String, Object> fieldValues = this.fieldValuesParser, +					.getFieldValues(element);, +			for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {, +				if (!this.fieldValues.containsKey(entry.getKey())) {, +					this.fieldValues.put(entry.getKey(), entry.getValue());, +				}, +			}, +		}, +		catch (Exception ex) {, +			// continue, +		}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +		TypeElementMembers members = new TypeElementMembers(this.processingEnv,, +				this.fieldValuesParser, element);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java, +		try {, +			Map<String, Object> fieldValues = this.fieldValuesParser, +					.getFieldValues(element);, +			for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {, +				if (!this.fieldValues.containsKey(entry.getKey())) {, +					this.fieldValues.put(entry.getKey(), entry.getValue());, +				}, +			}, +		}, +		catch (Exception ex) {, +			// continue, +		}, +, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +	public void nestedClassChildProperties() throws Exception {, +		ConfigurationMetadata metadata = compile(ClassWithNestedProperties.class);, +		assertThat(metadata).has(Metadata.withGroup("nestedChildProps"), +				.fromSource(ClassWithNestedProperties.NestedChildClass.class));, +		assertThat(metadata).has(Metadata.withProperty("nestedChildProps.child-class-property", Integer.class), +				.fromSource(ClassWithNestedProperties.NestedChildClass.class).withDefaultValue(20));, +		assertThat(metadata).has(Metadata.withProperty("nestedChildProps.parent-class-property", Integer.class), +				.fromSource(ClassWithNestedProperties.NestedChildClass.class).withDefaultValue(10));, +	}, +, +	@Test]