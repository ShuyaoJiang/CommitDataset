[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.actuate.health.Health.Builder;, +	 * Provide health details using the specified {@link Session} and {@link Builder, +	 * Builder}., +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.actuate.health.Health.Builder;, +	 * Provide health details using the specified {@link Session} and {@link Builder, +	 * Builder}., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +		assertThat(response.getAvailableTags().stream(), +				.filter((t) -> t.getTag().equals("region")), +				.flatMap((t) -> t.getValues().stream())).containsExactly("east");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.actuate.health.Health.Builder;, +	 * Provide health details using the specified {@link Session} and {@link Builder, +	 * Builder}., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +		assertThat(response.getAvailableTags().stream(), +				.filter((t) -> t.getTag().equals("region")), +				.flatMap((t) -> t.getValues().stream())).containsExactly("east");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, + * Copyright 2012-2018 the original author or authors., +				options);, +			MongoCredential credentials = getCredentials(properties);, +			return credentials == null ? new MongoClient(seeds, options), +					: new MongoClient(seeds, credentials, options);, +	private MongoCredential getCredentials(MongoProperties properties) {, +			return null;, +		return MongoCredential.createCredential(username, database, password);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.actuate.health.Health.Builder;, +	 * Provide health details using the specified {@link Session} and {@link Builder, +	 * Builder}., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +		assertThat(response.getAvailableTags().stream(), +				.filter((t) -> t.getTag().equals("region")), +				.flatMap((t) -> t.getValues().stream())).containsExactly("east");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, + * Copyright 2012-2018 the original author or authors., +				options);, +			MongoCredential credentials = getCredentials(properties);, +			return credentials == null ? new MongoClient(seeds, options), +					: new MongoClient(seeds, credentials, options);, +	private MongoCredential getCredentials(MongoProperties properties) {, +			return null;, +		return MongoCredential.createCredential(username, database, password);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java, + * Copyright 2012-2018 the original author or authors., +		builder.credential((MongoCredential.createCredential(, +				this.properties.getUsername(), database, this.properties.getPassword())));, +, +		builder.credential(connection.getCredential());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.boot.actuate.health.Health.Builder;, +	 * Provide health details using the specified {@link Session} and {@link Builder, +	 * Builder}., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointTests.java, +		assertThat(response.getAvailableTags().stream(), +				.filter((t) -> t.getTag().equals("region")), +				.flatMap((t) -> t.getValues().stream())).containsExactly("east");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, + * Copyright 2012-2018 the original author or authors., +				options);, +			MongoCredential credentials = getCredentials(properties);, +			return credentials == null ? new MongoClient(seeds, options), +					: new MongoClient(seeds, credentials, options);, +	private MongoCredential getCredentials(MongoProperties properties) {, +			return null;, +		return MongoCredential.createCredential(username, database, password);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java, + * Copyright 2012-2018 the original author or authors., +		builder.credential((MongoCredential.createCredential(, +				this.properties.getUsername(), database, this.properties.getPassword())));, +, +		builder.credential(connection.getCredential());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +				.getIfAvailable(() -> Collections.emptyList());, +						.hibernatePropertiesCustomizers(, +								this.hibernatePropertiesCustomizers)));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.java, +@FunctionalInterface, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java, + * Copyright 2012-2018 the original author or authors.]