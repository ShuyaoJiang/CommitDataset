[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * @author Aurélien Leboulanger, +	@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true), +		@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true", matchIfMissing = false), +		public PooledConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties) {, +			PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(, +, +			ActiveMQProperties.Pool pool = properties.getPool();, +			pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());, +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeMillis());, +			pooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaxSessionsPerConnection());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeMillis());, +			pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenEvictionRunsMillis());, +, +			return pooledConnectionFactory;, +		@Bean, +		@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true), +, +		public ActiveMQConnectionFactory jmsConnectionFactory(ActiveMQProperties properties) {, +			return new ActiveMQConnectionFactoryFactory(properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, + * @author Aurélien Leboulanger, +	@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true), +		@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true", matchIfMissing = false), +		public PooledConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties) {, +			PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory(, +, +			ActiveMQProperties.Pool pool = properties.getPool();, +			pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());, +			pooledConnectionFactory.setIdleTimeout(pool.getIdleTimeMillis());, +			pooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaxSessionsPerConnection());, +			pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeMillis());, +			pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenEvictionRunsMillis());, +, +			return pooledConnectionFactory;, +		@Bean, +		@ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "false", matchIfMissing = true), +, +		public ActiveMQConnectionFactory jmsConnectionFactory(ActiveMQProperties properties) {, +			return new ActiveMQConnectionFactoryFactory(properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java, + * @author Aurélien Leboulanger, +	private Pool pool = new Pool();, +, +	public Pool getPool() {, +		return this.pool;, +	}, +, +	public void setPool(Pool pool) {, +		this.pool = pool;, +	}, +, +	protected static class Pool {, +, +		/**, +		 * Specify if a PooledConnectionFactory should be created instead of a regular, +		 * ConnectionFactory., +		 */, +		private boolean enabled;, +, +		/**, +		 * Sets the maximum number of pooled Connections., +		 */, +		private int maxConnections = 1;, +, +		/**, +		 * Sets the idle timeout value for Connection's that are created by this pool in Milliseconds., +		 */, +		private int idleTimeMillis = 30 * 1000;, +, +		/**, +		 * Allow connections to expire, irrespective of load or idle time., +		 */, +		private long expiryTimeMillis = 0L;, +, +		/**, +		 * Sets the maximum number of active sessions per connection., +		 */, +		private int maxSessionsPerConnection = 500;, +, +		/**, +		 * Sets the number of milliseconds to sleep between runs of the idle Connection eviction thread., +		 */, +		private long timeBetweenEvictionRunsMillis = -1L;, +, +		public boolean isEnabled() {, +			return this.enabled;, +		}, +, +		public void setEnabled(boolean enabled) {, +			this.enabled = enabled;, +		}, +, +		public int getMaxConnections() {, +			return this.maxConnections;, +		}, +, +		public void setMaxConnections(int maxConnections) {]