[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import java.lang.reflect.Field;, +import java.util.Map.Entry;, +import java.util.Set;, +import org.springframework.core.env.CompositePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.util.ReflectionUtils;, +		for (Entry<String, PropertySource<?>> entry : getPropertySources().entrySet()) {, +			PropertySource<?> source = entry.getValue();, +			String sourceName = entry.getKey();, +				result.put(sourceName, map);, +	private Map<String, PropertySource<?>> getPropertySources() {, +		Map<String, PropertySource<?>> map = new LinkedHashMap<String, PropertySource<?>>();, +		MutablePropertySources sources = null;, +			sources = ((ConfigurableEnvironment) this.environment).getPropertySources();, +		else {, +			sources = new StandardEnvironment().getPropertySources();, +		}, +		for (PropertySource<?> source : sources) {, +			extract("", map, source);, +		}, +		return map;, +	}, +, +	private void extract(String root, Map<String, PropertySource<?>> map,, +			PropertySource<?> source) {, +		if (source instanceof CompositePropertySource) {, +			try {, +				Field field = ReflectionUtils.findField(CompositePropertySource.class,, +						"propertySources");, +				field.setAccessible(true);, +				@SuppressWarnings("unchecked"), +				Set<PropertySource<?>> nested = (Set<PropertySource<?>>) field, +						.get(source);, +				for (PropertySource<?> nest : nested) {, +					extract(source.getName() + ":", map, nest);, +				}, +			}, +			catch (Exception e) {, +				// ignore, +			}, +		}, +		else {, +			map.put(root + source.getName(), source);, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +import java.lang.reflect.Field;, +import java.util.Map.Entry;, +import java.util.Set;, +import org.springframework.core.env.CompositePropertySource;, +import org.springframework.core.env.MutablePropertySources;, +import org.springframework.util.ReflectionUtils;, +		for (Entry<String, PropertySource<?>> entry : getPropertySources().entrySet()) {, +			PropertySource<?> source = entry.getValue();, +			String sourceName = entry.getKey();, +				result.put(sourceName, map);, +	private Map<String, PropertySource<?>> getPropertySources() {, +		Map<String, PropertySource<?>> map = new LinkedHashMap<String, PropertySource<?>>();, +		MutablePropertySources sources = null;, +			sources = ((ConfigurableEnvironment) this.environment).getPropertySources();, +		else {, +			sources = new StandardEnvironment().getPropertySources();, +		}, +		for (PropertySource<?> source : sources) {, +			extract("", map, source);, +		}, +		return map;, +	}, +, +	private void extract(String root, Map<String, PropertySource<?>> map,, +			PropertySource<?> source) {, +		if (source instanceof CompositePropertySource) {, +			try {, +				Field field = ReflectionUtils.findField(CompositePropertySource.class,, +						"propertySources");, +				field.setAccessible(true);, +				@SuppressWarnings("unchecked"), +				Set<PropertySource<?>> nested = (Set<PropertySource<?>>) field, +						.get(source);, +				for (PropertySource<?> nest : nested) {, +					extract(source.getName() + ":", map, nest);, +				}, +			}, +			catch (Exception e) {, +				// ignore, +			}, +		}, +		else {, +			map.put(root + source.getName(), source);, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java, +import java.util.Collections;, +import org.springframework.core.env.CompositePropertySource;, +import org.springframework.core.env.MapPropertySource;, +	public void testCompositeSource() throws Exception {, +		EnvironmentEndpoint report = getEndpointBean();, +		CompositePropertySource source = new CompositePropertySource("composite");, +		source.addPropertySource(new MapPropertySource("one", Collections.singletonMap(, +				"foo", (Object) "bar")));, +		source.addPropertySource(new MapPropertySource("two", Collections.singletonMap(]