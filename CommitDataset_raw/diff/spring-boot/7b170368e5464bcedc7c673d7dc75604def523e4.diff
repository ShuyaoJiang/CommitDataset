[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ComputeMain.java, +			String mainClass = MainClassFinder.findSingleMainClass(main.getOutput(), +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ComputeMain.java, +			String mainClass = MainClassFinder.findSingleMainClass(main.getOutput(), +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/RunApp.java, +			return MainClassFinder.findSingleMainClass(main.getOutput().getClassesDir());, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ComputeMain.java, +			String mainClass = MainClassFinder.findSingleMainClass(main.getOutput(), +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/RunApp.java, +			return MainClassFinder.findSingleMainClass(main.getOutput().getClassesDir());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +	 * Find a single main class from a given folder., +	 * @param rootFolder the root folder to search, +	 * @return the main class or {@code null}, +	 * @throws IOException, +	 */, +	public static String findSingleMainClass(File rootFolder) throws IOException {, +		MainClassesCallback callback = new MainClassesCallback();, +		MainClassFinder.doWithMainClasses(rootFolder, callback);, +		return callback.getMainClass();, +	}, +, +	/**, +	static <T> T doWithMainClasses(File rootFolder, ClassNameCallback<T> callback), +	 * Find a single main class in a given jar file., +	 * @param jarFile the jar file to search, +	 * @param classesLocation the location within the jar containing classes, +	 * @return the main class or {@code null}, +	 * @throws IOException, +	 */, +	public static String findSingleMainClass(JarFile jarFile, String classesLocation), +			throws IOException {, +		MainClassesCallback callback = new MainClassesCallback();, +		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback);, +		return callback.getMainClass();, +	}, +, +	/**, +	static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,, +, +	/**, +	 * Find a single main class, throwing an {@link IllegalStateException} if multiple, +	 * candidates exist., +	 */, +	private static class MainClassesCallback implements ClassNameCallback<Object> {, +, +		private final Set<String> classNames = new LinkedHashSet<String>();, +, +		@Override, +		public Object doWith(String className) {, +			this.classNames.add(className);, +			return null;, +		}, +, +		public String getMainClass() {, +			if (this.classNames.size() > 1) {, +				throw new IllegalStateException(, +						"Unable to find a single main class from the following candidates ", +								+ this.classNames);, +			}, +			return this.classNames.isEmpty() ? null : this.classNames.iterator().next();, +		}, +, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ComputeMain.java, +			String mainClass = MainClassFinder.findSingleMainClass(main.getOutput(), +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/RunApp.java, +			return MainClassFinder.findSingleMainClass(main.getOutput().getClassesDir());, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +	 * Find a single main class from a given folder., +	 * @param rootFolder the root folder to search, +	 * @return the main class or {@code null}, +	 * @throws IOException, +	 */, +	public static String findSingleMainClass(File rootFolder) throws IOException {, +		MainClassesCallback callback = new MainClassesCallback();, +		MainClassFinder.doWithMainClasses(rootFolder, callback);, +		return callback.getMainClass();, +	}, +, +	/**, +	static <T> T doWithMainClasses(File rootFolder, ClassNameCallback<T> callback), +	 * Find a single main class in a given jar file., +	 * @param jarFile the jar file to search, +	 * @param classesLocation the location within the jar containing classes, +	 * @return the main class or {@code null}, +	 * @throws IOException, +	 */, +	public static String findSingleMainClass(JarFile jarFile, String classesLocation), +			throws IOException {, +		MainClassesCallback callback = new MainClassesCallback();, +		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback);, +		return callback.getMainClass();, +	}, +]