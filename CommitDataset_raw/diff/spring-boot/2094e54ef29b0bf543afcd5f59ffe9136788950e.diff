[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinding.java, +@Qualifier(ConfigurationPropertiesBinding.VALUE), +	/**, +	 * Concrete value for the <code>@Qualifier</code>., +	 */, +	String VALUE = "org.springframework.boot.context.properties.ConfigurationPropertiesBinding";, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBinding.java, +@Qualifier(ConfigurationPropertiesBinding.VALUE), +	/**, +	 * Concrete value for the <code>@Qualifier</code>., +	 */, +	String VALUE = "org.springframework.boot.context.properties.ConfigurationPropertiesBinding";, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConversionServiceDeducer.java, +import java.util.ArrayList;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.annotation.BeanFactoryAnnotationUtils;, +			return new Factory(this.applicationContext.getAutowireCapableBeanFactory()), +					.create();, +		/**, +		 * A list of custom converters (in addition to the defaults) to use when, +		 * converting properties for binding., +		 */, +		@SuppressWarnings("rawtypes"), +		private List<Converter> converters;, +		private List<GenericConverter> genericConverters;, +, +		Factory(BeanFactory beanFactory) {, +			this.converters = beans(beanFactory, Converter.class,, +					ConfigurationPropertiesBinding.VALUE);, +			this.genericConverters = beans(beanFactory, GenericConverter.class,, +					ConfigurationPropertiesBinding.VALUE);, +		private static <T> List<T> beans(BeanFactory beanFactory, Class<T> type,, +				String qualifier) {, +			List<T> list = new ArrayList<>();, +			if (!(beanFactory instanceof ListableBeanFactory)) {, +				return list;, +			}, +			ListableBeanFactory listable = (ListableBeanFactory) beanFactory;, +			list.addAll(BeanFactoryAnnotationUtils, +					.qualifiedBeansOfType(listable, type, qualifier).values());, +			return list;]