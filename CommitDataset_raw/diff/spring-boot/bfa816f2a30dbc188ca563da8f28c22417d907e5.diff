[+++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/src/main/java/org/springframework/launcher/it/props/SpringConfiguration.java, +import java.util.Properties;, +import org.springframework.core.io.ClassPathResource;, +		Properties props = new Properties();, +		props.load(new ClassPathResource("application.properties").getInputStream());, +		String value = props.getProperty("message");, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/src/main/java/org/springframework/launcher/it/props/SpringConfiguration.java, +import java.util.Properties;, +import org.springframework.core.io.ClassPathResource;, +		Properties props = new Properties();, +		props.load(new ClassPathResource("application.properties").getInputStream());, +		String value = props.getProperty("message");, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/verify.groovy, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/src/main/java/org/springframework/launcher/it/props/SpringConfiguration.java, +import java.util.Properties;, +import org.springframework.core.io.ClassPathResource;, +		Properties props = new Properties();, +		props.load(new ClassPathResource("application.properties").getInputStream());, +		String value = props.getProperty("message");, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/verify.groovy, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/src/main/java/org/springframework/launcher/it/props/SpringConfiguration.java, +import java.util.Properties;, +import org.springframework.core.io.ClassPathResource;, +		Properties props = new Properties();, +		props.load(new ClassPathResource("application.properties").getInputStream());, +		String value = props.getProperty("message");, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/verify.groovy, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +|Comma-separated Classpath, e.g. `lib,${HOME}/app/lib`. Earlier entries take precedence, just like a regular `-classpath` on the `javac` command line., +* `loader.path` (if empty) defaults to `lib` (meaning a local directory or a nested one if running from an archive). Because of this `PropertiesLauncher` behaves the same as `JarLauncher` when no additional configuration is provided., +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/src/main/java/org/springframework/launcher/it/props/SpringConfiguration.java, +import java.util.Properties;, +import org.springframework.core.io.ClassPathResource;, +		Properties props = new Properties();, +		props.load(new ClassPathResource("application.properties").getInputStream());, +		String value = props.getProperty("message");, +++ b/spring-boot-tools/spring-boot-loader/src/it/executable-props/verify.groovy, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +	public void testUserSpecifiedClassPathOrder() throws Exception {, +		System.setProperty("loader.path", "more-jars/app.jar,jars/app.jar");, +		System.setProperty("loader.classLoader", URLClassLoader.class.getName());, +		PropertiesLauncher launcher = new PropertiesLauncher();, +		assertEquals("[more-jars/app.jar, jars/app.jar]",, +				ReflectionTestUtils.getField(launcher, "paths").toString());, +		launcher.launch(new String[0]);, +		waitFor("Hello Other World");, +	}, +, +	@Test]