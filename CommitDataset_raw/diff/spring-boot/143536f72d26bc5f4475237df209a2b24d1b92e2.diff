[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +import org.springframework.http.converter.FormHttpMessageConverter;, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			FormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(FormHttpMessageConverter.class,, +				"partConverters");, +		ReflectionUtils.makeAccessible(field);, +		return (List<HttpMessageConverter<?>>) ReflectionUtils.getField(field,, +				formConverter);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +import org.springframework.http.converter.FormHttpMessageConverter;, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			FormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(FormHttpMessageConverter.class,, +				"partConverters");, +		ReflectionUtils.makeAccessible(field);, +		return (List<HttpMessageConverter<?>>) ReflectionUtils.getField(field,, +				formConverter);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +		RequestEntity request = RequestEntity, +				.post(URI.create(createUrl("/bodyValidation"))), +		assertThat(resp, containsString(, +				"org.springframework.web.bind.MethodArgumentNotValidException"));, +			static class DummyBody {, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +import org.springframework.http.converter.FormHttpMessageConverter;, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			FormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(FormHttpMessageConverter.class,, +				"partConverters");, +		ReflectionUtils.makeAccessible(field);, +		return (List<HttpMessageConverter<?>>) ReflectionUtils.getField(field,, +				formConverter);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +		RequestEntity request = RequestEntity, +				.post(URI.create(createUrl("/bodyValidation"))), +		assertThat(resp, containsString(, +				"org.springframework.web.bind.MethodArgumentNotValidException"));, +			static class DummyBody {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributesTests.java, +	public void extractMethodArgumentNotValidExceptionBindingResultErrors(), +			throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConverters.java, +import org.springframework.http.converter.FormHttpMessageConverter;, +	private List<HttpMessageConverter<?>> extractPartConverters(, +			FormHttpMessageConverter formConverter) {, +		Field field = ReflectionUtils.findField(FormHttpMessageConverter.class,, +				"partConverters");, +		ReflectionUtils.makeAccessible(field);, +		return (List<HttpMessageConverter<?>>) ReflectionUtils.getField(field,, +				formConverter);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +		RequestEntity request = RequestEntity, +				.post(URI.create(createUrl("/bodyValidation"))), +		assertThat(resp, containsString(, +				"org.springframework.web.bind.MethodArgumentNotValidException"));, +			static class DummyBody {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributesTests.java, +	public void extractMethodArgumentNotValidExceptionBindingResultErrors(), +			throws Exception {, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +NOTE: Contrary to `@Value`, SpEL expressions are not evaluated prior to injecting a value, +in the relevant `@ConfigurationProperties` bean., +"`debug`" mode by starting your application with a `--debug` flag., +and Spring) are configured to output more information. Enabling the debug mode does _not_, +configure your application log all messages with `DEBUG` level., +In the example above, if `YourException` is thrown by a controller defined in the same, +package as `FooController`, a json representation of the `CustomerErrorType` POJO will be, +used instead of the `ErrorAttributes` representation.]