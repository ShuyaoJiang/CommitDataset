[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String prefix;, +	public CacheConfigFileCondition(String name, String prefix,, +		this.prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +				context.getEnvironment(), this.prefix);, +			return ConditionOutcome.match("A '" + this.prefix + ".config' ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String prefix;, +	public CacheConfigFileCondition(String name, String prefix,, +		this.prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +				context.getEnvironment(), this.prefix);, +			return ConditionOutcome.match("A '" + this.prefix + ".config' ", +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileConditionTests.java, +	private void load(Class<?> config, String... environment) {, +	private static class CacheConfigFileDefaultFileCondition extends, +			CacheConfigFileCondition {, +	private static class CacheConfigFileNoDefaultFileCondition extends, +			CacheConfigFileCondition {, +			super("test", "spring.cache.test",, +					"classpath:/this-cache-file-does-not-exist.xml");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String prefix;, +	public CacheConfigFileCondition(String name, String prefix,, +		this.prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +				context.getEnvironment(), this.prefix);, +			return ConditionOutcome.match("A '" + this.prefix + ".config' ", +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileConditionTests.java, +	private void load(Class<?> config, String... environment) {, +	private static class CacheConfigFileDefaultFileCondition extends, +			CacheConfigFileCondition {, +	private static class CacheConfigFileNoDefaultFileCondition extends, +			CacheConfigFileCondition {, +			super("test", "spring.cache.test",, +					"classpath:/this-cache-file-does-not-exist.xml");, +++ b/spring-boot-cli/samples/retry.groovy, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileCondition.java, +	private final String prefix;, +	public CacheConfigFileCondition(String name, String prefix,, +		this.prefix = (prefix.endsWith(".") ? prefix : prefix + ".");, +				context.getEnvironment(), this.prefix);, +			return ConditionOutcome.match("A '" + this.prefix + ".config' ", +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheConfigFileConditionTests.java, +	private void load(Class<?> config, String... environment) {, +	private static class CacheConfigFileDefaultFileCondition extends, +			CacheConfigFileCondition {, +	private static class CacheConfigFileNoDefaultFileCondition extends, +			CacheConfigFileCondition {, +			super("test", "spring.cache.test",, +					"classpath:/this-cache-file-does-not-exist.xml");, +++ b/spring-boot-cli/samples/retry.groovy, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringRetryCompilerAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., + * @since 1.3.0]