[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionProperties.java, +@ConfigurationProperties(prefix = "spring.session.mongo"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionProperties.java, +@ConfigurationProperties(prefix = "spring.session.mongo"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +		mappings.put(StoreType.MONGO, MongoSessionConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionProperties.java, +@ConfigurationProperties(prefix = "spring.session.mongo"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +		mappings.put(StoreType.MONGO, MongoSessionConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Mongo backed sessions., +	MONGO,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionProperties.java, +@ConfigurationProperties(prefix = "spring.session.mongo"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionStoreMappings.java, +		mappings.put(StoreType.MONGO, MongoSessionConfiguration.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java, +	 * Mongo backed sessions., +	MONGO,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +import java.io.IOException;, +import java.util.function.Consumer;, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, + * @author Stephane Nicoll, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(LiquibaseAutoConfiguration.class)), +			.withPropertyValues("spring.datasource.generate-unique-name=true");, +, +	@Test, +	public void noDataSource() {, +		this.contextRunner.run((context) ->, +				assertThat(context).doesNotHaveBean(SpringLiquibase.class));, +	public void defaultSpringLiquibase() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.run(assertLiquibase((liquibase) -> {, +					assertThat(liquibase.getChangeLog()).isEqualTo(, +							"classpath:/db/changelog/db.changelog-master.yaml");, +				}));, +	public void changelogXml() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.xml"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.getChangeLog()).isEqualTo(, +								"classpath:/db/changelog/db.changelog-override.xml")));, +	public void changelogJson() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.json"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.getChangeLog()).isEqualTo(, +								"classpath:/db/changelog/db.changelog-override.json")));, +	public void changelogSql() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues(, +						"spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.getChangeLog()).isEqualTo(, +								"classpath:/db/changelog/db.changelog-override.sql")));, +	public void overrideContexts() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.contexts:test, production"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.getContexts()).isEqualTo("test, production")));, +	public void overrideDefaultSchema() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.default-schema:public"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.getDefaultSchema()).isEqualTo("public")));, +	public void overrideDropFirst() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.drop-first:true"), +				.run(assertLiquibase((liquibase) ->, +						assertThat(liquibase.isDropFirst()).isTrue()));, +	public void overrideDataSource() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.url:jdbc:hsqldb:mem:liquibase",, +						"spring.liquibase.user:sa").run(assertLiquibase((liquibase) -> {, +		}));, +	public void changeLogDoesNotExist() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.change-log:classpath:/no-such-changelog.yaml"), +				.run((context) -> {, +					assertThat(context).hasFailed();, +					assertThat(context).getFailure().isInstanceOf(, +							BeanCreationException.class);, +				});, +	}, +, +	@Test, +	public void logging() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.run(assertLiquibase((liquibase) -> {, +				}));, +	public void overrideLabels() {, +		this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class), +				.withPropertyValues("spring.liquibase.labels:test, production"), +				.run(assertLiquibase((liquibase) ->]