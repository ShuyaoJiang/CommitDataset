[+++ b/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java, +import org.springframework.core.env.Environment;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.context.ConfigurableWebEnvironment;, + * Utility class for converting one type of {@link Environment} to another., + * @author Andy Wilkinson, +	private static final String CONFIGURABLE_WEB_ENVIRONMENT_CLASS = "org.springframework.web.context.ConfigurableWebEnvironment";, +, +	private final ClassLoader classLoader;, +	/**, +	 * Creates a new {@link EnvironmentConverter} that will use the given, +	 * {@code classLoader} during conversion., +	 * @param classLoader the class loader to use, +	 */, +	EnvironmentConverter(ClassLoader classLoader) {, +		this.classLoader = classLoader;, +	 * Converts the given {@code environment} to a {@link StandardEnvironment}. If the, +	 * environment is already a {@code StandardEnvironment} and is not a, +	 * {@link ConfigurableWebEnvironment} no conversion is performed and it is returned, +	 * unchanged., +	 * @param environment The Environment to convert, +	 * @return The converted Environment, +	StandardEnvironment convertToStandardEnvironmentIfNecessary(, +		if (environment instanceof StandardEnvironment, +				&& !isWebEnvironment(environment, this.classLoader)) {, +			return (StandardEnvironment) environment;, +		}, +		return convertToStandardEnvironment(environment);, +	}, +	private boolean isWebEnvironment(ConfigurableEnvironment environment,, +			ClassLoader classLoader) {, +		try {, +			Class<?> webEnvironmentClass = ClassUtils, +					.forName(CONFIGURABLE_WEB_ENVIRONMENT_CLASS, classLoader);, +			return (webEnvironmentClass.isInstance(environment));, +		}, +		catch (Throwable ex) {, +			return false;, +		}, +	}, +, +	private StandardEnvironment convertToStandardEnvironment(, +			ConfigurableEnvironment environment) {, +		StandardEnvironment result = new StandardEnvironment();, +		copyNonServletPropertySources(environment, result);, +	private void copyNonServletPropertySources(ConfigurableEnvironment source,, +			StandardEnvironment target) {, +		removeAllPropertySources(target.getPropertySources());, +		for (PropertySource<?> propertySource : source.getPropertySources()) {, +			if (!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())) {, +				target.getPropertySources().addLast(propertySource);, +			}, +		}, +	}, +, +	private void removeAllPropertySources(MutablePropertySources propertySources) {, +		Set<String> names = new HashSet<String>();, +++ b/spring-boot/src/main/java/org/springframework/boot/EnvironmentConverter.java, +import org.springframework.core.env.Environment;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.context.ConfigurableWebEnvironment;, + * Utility class for converting one type of {@link Environment} to another., + * @author Andy Wilkinson, +	private static final String CONFIGURABLE_WEB_ENVIRONMENT_CLASS = "org.springframework.web.context.ConfigurableWebEnvironment";, +, +	private final ClassLoader classLoader;, +	/**, +	 * Creates a new {@link EnvironmentConverter} that will use the given, +	 * {@code classLoader} during conversion., +	 * @param classLoader the class loader to use, +	 */, +	EnvironmentConverter(ClassLoader classLoader) {, +		this.classLoader = classLoader;, +	 * Converts the given {@code environment} to a {@link StandardEnvironment}. If the, +	 * environment is already a {@code StandardEnvironment} and is not a, +	 * {@link ConfigurableWebEnvironment} no conversion is performed and it is returned, +	 * unchanged., +	 * @param environment The Environment to convert, +	 * @return The converted Environment, +	StandardEnvironment convertToStandardEnvironmentIfNecessary(, +		if (environment instanceof StandardEnvironment, +				&& !isWebEnvironment(environment, this.classLoader)) {, +			return (StandardEnvironment) environment;, +		}, +		return convertToStandardEnvironment(environment);, +	}, +	private boolean isWebEnvironment(ConfigurableEnvironment environment,, +			ClassLoader classLoader) {, +		try {, +			Class<?> webEnvironmentClass = ClassUtils, +					.forName(CONFIGURABLE_WEB_ENVIRONMENT_CLASS, classLoader);, +			return (webEnvironmentClass.isInstance(environment));, +		}, +		catch (Throwable ex) {, +			return false;, +		}, +	}, +, +	private StandardEnvironment convertToStandardEnvironment(, +			ConfigurableEnvironment environment) {]