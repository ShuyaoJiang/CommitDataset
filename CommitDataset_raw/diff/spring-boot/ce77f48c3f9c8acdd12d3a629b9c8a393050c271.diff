[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java, +import java.lang.management.ManagementFactory;, +import java.util.stream.Stream;, +	public static ChangeableUrls fromClassLoader(ClassLoader classLoader) {, +		for (URL url : urlsFromClassLoader(classLoader)) {, +	private static URL[] urlsFromClassLoader(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return Stream, +				.of(ManagementFactory.getRuntimeMXBean().getClassPath(), +						.split(File.pathSeparator)), +				.map(ChangeableUrls::toURL).toArray(URL[]::new);, +	}, +, +	private static URL toURL(String classPathEntry) {, +		try {, +			return new File(classPathEntry).toURI().toURL();, +		}, +		catch (MalformedURLException ex) {, +			throw new IllegalArgumentException(, +					"URL could not be created from '" + classPathEntry + "'", ex);, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java, +import java.lang.management.ManagementFactory;, +import java.util.stream.Stream;, +	public static ChangeableUrls fromClassLoader(ClassLoader classLoader) {, +		for (URL url : urlsFromClassLoader(classLoader)) {, +	private static URL[] urlsFromClassLoader(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return Stream, +				.of(ManagementFactory.getRuntimeMXBean().getClassPath(), +						.split(File.pathSeparator)), +				.map(ChangeableUrls::toURL).toArray(URL[]::new);, +	}, +, +	private static URL toURL(String classPathEntry) {, +		try {, +			return new File(classPathEntry).toURI().toURL();, +		}, +		catch (MalformedURLException ex) {, +			throw new IllegalArgumentException(, +					"URL could not be created from '" + classPathEntry + "'", ex);, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java, +import java.util.stream.Stream;, +		URL[] urls = getUrls(thread);, +		Stream.of(urls).forEach(System.out::println);, +		return urls;, +		return ChangeableUrls.fromClassLoader(thread.getContextClassLoader()).toArray();, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java, +import java.lang.management.ManagementFactory;, +import java.util.stream.Stream;, +	public static ChangeableUrls fromClassLoader(ClassLoader classLoader) {, +		for (URL url : urlsFromClassLoader(classLoader)) {, +	private static URL[] urlsFromClassLoader(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return Stream, +				.of(ManagementFactory.getRuntimeMXBean().getClassPath(), +						.split(File.pathSeparator)), +				.map(ChangeableUrls::toURL).toArray(URL[]::new);, +	}, +, +	private static URL toURL(String classPathEntry) {, +		try {, +			return new File(classPathEntry).toURI().toURL();, +		}, +		catch (MalformedURLException ex) {, +			throw new IllegalArgumentException(, +					"URL could not be created from '" + classPathEntry + "'", ex);, +		}, +	}, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java, +import java.util.stream.Stream;, +		URL[] urls = getUrls(thread);, +		Stream.of(urls).forEach(System.out::println);, +		return urls;, +		return ChangeableUrls.fromClassLoader(thread.getContextClassLoader()).toArray();, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/ChangeableUrlsTests.java, +				.fromClassLoader(new URLClassLoader(new URL[] {, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java, +import java.lang.management.ManagementFactory;, +import java.util.stream.Stream;, +	public static ChangeableUrls fromClassLoader(ClassLoader classLoader) {, +		for (URL url : urlsFromClassLoader(classLoader)) {, +	private static URL[] urlsFromClassLoader(ClassLoader classLoader) {, +		if (classLoader instanceof URLClassLoader) {, +			return ((URLClassLoader) classLoader).getURLs();, +		}, +		return Stream, +				.of(ManagementFactory.getRuntimeMXBean().getClassPath()]