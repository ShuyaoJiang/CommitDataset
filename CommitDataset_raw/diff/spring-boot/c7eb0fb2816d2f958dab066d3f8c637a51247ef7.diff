[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.Import;, +	private ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withUserConfiguration(BasicConfiguration.class), +			.withPropertyValues("spring.datasource.initialize=false",, +					"spring.datasource.url:jdbc:hsqldb:mem:testdb-", +							+ new Random().nextInt());, +	@Test, +	public void defaultDataSourceDoesNotExists() {, +		this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(, +				DataSource.class));, +	public void twoDataSources() {, +		this.contextRunner.withUserConfiguration(TwoDataSources.class), +				.withPropertyValues("datasource.one.url=jdbc:hsqldb:mem:/one",, +						"datasource.two.url=jdbc:hsqldb:mem:/two").run((context) ->, +				assertThat(context.getBeanNamesForType(DataSource.class)).hasSize(2));, +	public void dataSourceInitialized() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues("spring.datasource.initialize:true").run((context) -> {, +			DataSource dataSource = context.getBean(DataSource.class);, +		});, +	public void dataSourceInitializedWithExplicitScript() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues(, +				"spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("schema.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("data.sql"), +		).run((context) -> {, +			DataSource dataSource = context.getBean(DataSource.class);, +		});, +	public void dataSourceInitializedWithMultipleScripts() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues(, +				"spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("schema.sql") + ",", +						+ getRelativeLocationFor("another.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("data.sql"), +		).run((context) -> {, +			DataSource dataSource = context.getBean(DataSource.class);, +		});, +, +	public void dataSourceInitializedWithExplicitSqlScriptEncoding() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues("spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql"), +		).run((context) -> {, +			DataSource dataSource = context.getBean(DataSource.class);, +			assertThat(template.queryForObject(, +					"SELECT name from BAR WHERE id=1", String.class)).isEqualTo("bar");, +			assertThat(template.queryForObject(, +					"SELECT name from BAR WHERE id=2", String.class)).isEqualTo("ばー");, +		});, +	public void initializationDisabled() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class)).run((context) -> {, +			DataSource dataSource = context.getBean(DataSource.class);, +			context.publishEvent(new DataSourceInitializedEvent(dataSource));, +		});, +	public void dataSourceInitializedWithSchemaCredentials() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues("spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql"),, +				"spring.datasource.schema-password:admin").run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class);, +		});, +	public void dataSourceInitializedWithDataCredentials() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class), +		).withPropertyValues("spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql"),, +				"spring.datasource.data-password:admin").run((context) -> {, +			assertThat(context).hasFailed();, +			assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class);, +		});, +	public void multipleScriptsAppliedInLexicalOrder() {, +		new ApplicationContextRunner(() -> {, +			AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +			context.setResourceLoader(new ReverseOrderResourceLoader(new DefaultResourceLoader()));, +			return context;, +		}, +		).withUserConfiguration(BasicConfiguration.class).withConfiguration(, +				AutoConfigurations.of(DataSourceAutoConfiguration.class), +		).withPropertyValues("spring.datasource.initialize=false",, +				"spring.datasource.url:jdbc:hsqldb:mem:testdb-", +						+ new Random().nextInt(),, +				"spring.datasource.initialize:true",, +				"spring.datasource.schema:" + getRelativeLocationFor("lexical-schema-*.sql"),, +				"spring.datasource.data:" + getRelativeLocationFor("data.sql"), +		).run((context) -> {]