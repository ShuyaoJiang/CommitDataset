[+++ b/docs/howto.md, +By default properties from different sources are added to the Spring, +`application.properties`, 3) classpath `application.properties`., +, +A nice way to augment and modify this is to add `@PropertySource`, +annotations to your application sources. Classes passed to the, +`SpringApplication` static convenience methods, and those added using, +`setSources()` are inspected to see if they have `@PropertySources`, +and if they do those properties are added to the `Environment` early, +enough to be used in all phases of the `ApplicationContext`, +lifecycle. Properties added in this way have precendence over any, +added using the default locations, but have lower priority than system, +properties, environment variables or the command line., +, +You can also provide System properties (or environment variables) to, +change the default behaviour:, +++ b/docs/howto.md, +By default properties from different sources are added to the Spring, +`application.properties`, 3) classpath `application.properties`., +, +A nice way to augment and modify this is to add `@PropertySource`, +annotations to your application sources. Classes passed to the, +`SpringApplication` static convenience methods, and those added using, +`setSources()` are inspected to see if they have `@PropertySources`, +and if they do those properties are added to the `Environment` early, +enough to be used in all phases of the `ApplicationContext`, +lifecycle. Properties added in this way have precendence over any, +added using the default locations, but have lower priority than system, +properties, environment variables or the command line., +, +You can also provide System properties (or environment variables) to, +change the default behaviour:, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +	public PropertySource<?> load(String name, Resource resource) {, +			return new PropertiesPropertySource(name, properties);, +++ b/docs/howto.md, +By default properties from different sources are added to the Spring, +`application.properties`, 3) classpath `application.properties`., +, +A nice way to augment and modify this is to add `@PropertySource`, +annotations to your application sources. Classes passed to the, +`SpringApplication` static convenience methods, and those added using, +`setSources()` are inspected to see if they have `@PropertySources`, +and if they do those properties are added to the `Environment` early, +enough to be used in all phases of the `ApplicationContext`, +lifecycle. Properties added in this way have precendence over any, +added using the default locations, but have lower priority than system, +properties, environment variables or the command line., +, +You can also provide System properties (or environment variables) to, +change the default behaviour:, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +	public PropertySource<?> load(String name, Resource resource) {, +			return new PropertiesPropertySource(name, properties);, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertySourceLoader.java, +	 * @param name TODO, +	PropertySource<?> load(String name, Resource resource);, +++ b/docs/howto.md, +By default properties from different sources are added to the Spring, +`application.properties`, 3) classpath `application.properties`., +, +A nice way to augment and modify this is to add `@PropertySource`, +annotations to your application sources. Classes passed to the, +`SpringApplication` static convenience methods, and those added using, +`setSources()` are inspected to see if they have `@PropertySources`, +and if they do those properties are added to the `Environment` early, +enough to be used in all phases of the `ApplicationContext`, +lifecycle. Properties added in this way have precendence over any, +added using the default locations, but have lower priority than system, +properties, environment variables or the command line., +, +You can also provide System properties (or environment variables) to, +change the default behaviour:, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertiesPropertySourceLoader.java, +	public PropertySource<?> load(String name, Resource resource) {, +			return new PropertiesPropertySource(name, properties);, +++ b/spring-boot/src/main/java/org/springframework/boot/config/PropertySourceLoader.java, +	 * @param name TODO, +	PropertySource<?> load(String name, Resource resource);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import org.springframework.context.annotation.PropertySources;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +	private PropertySourceAnnotations propertySourceAnnotations = new PropertySourceAnnotations();, +, +			extractPropertySources(springApplication.getSources());, +			int before = springApplication.getSources().size();, +			int after = springApplication.getSources().size();, +			if (after > before) {, +				// Do it again in case there are new @PropertySources, +				initialize(springApplication, args);, +			}, +	private void extractPropertySources(Set<Object> sources) {, +		for (Object source : sources) {, +			if (source instanceof Class) {, +				Class<?> type = (Class<?>) source;]