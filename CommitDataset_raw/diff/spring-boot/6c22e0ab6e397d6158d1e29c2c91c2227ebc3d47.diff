[+++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ActuatorAutoConfiguration.java, +	@EnableConfigurationProperties, +		@ConditionalOnMissingBean(ManagementServerProperties.class), +		@Bean(name = "org.springframework.bootstrap.actuate.properties.ManagementServerProperties"), +		public ManagementServerProperties managementServerProperties() {, +			return new ManagementServerProperties();, +		}, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ActuatorAutoConfiguration.java, +	@EnableConfigurationProperties, +		@ConditionalOnMissingBean(ManagementServerProperties.class), +		@Bean(name = "org.springframework.bootstrap.actuate.properties.ManagementServerProperties"), +		public ManagementServerProperties managementServerProperties() {, +			return new ManagementServerProperties();, +		}, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java, +@EnableConfigurationProperties, +	@ConditionalOnMissingBean(SecurityProperties.class), +	@Bean(name = "org.springframework.bootstrap.actuate.properties.SecurityProperties"), +	public SecurityProperties securityProperties() {, +		return new SecurityProperties();, +	}, +, +				HttpConfiguration matcher = http.antMatcher(this.security.getBasic(), +						.getPath());, +				matcher.authenticationEntryPoint(entryPoint()).antMatcher("/**"), +						.httpBasic().authenticationEntryPoint(entryPoint()).and(), +						.anonymous().disable();, +				matcher.authorizeUrls().antMatchers("/**"), +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/ActuatorAutoConfiguration.java, +	@EnableConfigurationProperties, +		@ConditionalOnMissingBean(ManagementServerProperties.class), +		@Bean(name = "org.springframework.bootstrap.actuate.properties.ManagementServerProperties"), +		public ManagementServerProperties managementServerProperties() {, +			return new ManagementServerProperties();, +		}, +, +++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java, +@EnableConfigurationProperties, +	@ConditionalOnMissingBean(SecurityProperties.class), +	@Bean(name = "org.springframework.bootstrap.actuate.properties.SecurityProperties"), +	public SecurityProperties securityProperties() {, +		return new SecurityProperties();, +	}, +, +				HttpConfiguration matcher = http.antMatcher(this.security.getBasic(), +						.getPath());, +				matcher.authenticationEntryPoint(entryPoint()).antMatcher("/**"), +						.httpBasic().authenticationEntryPoint(entryPoint()).and(), +						.anonymous().disable();, +				matcher.authorizeUrls().antMatchers("/**"), +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/ServerPropertiesConfiguration.java, +import org.springframework.bootstrap.context.annotation.ConditionalOnMissingBean;, +import org.springframework.context.annotation.Bean;, +@EnableConfigurationProperties, +	@ConditionalOnMissingBean(ServerProperties.class), +	@Bean(name = "org.springframework.bootstrap.properties.ServerProperties"), +	public ServerProperties serverProperties() {, +		return new ServerProperties();, +	}, +]