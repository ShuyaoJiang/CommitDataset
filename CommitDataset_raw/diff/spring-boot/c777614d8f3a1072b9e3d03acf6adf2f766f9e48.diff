[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +import java.util.Collection;, +			BeanDefinition existing = registry.getBeanDefinition(transformedBeanName);, +			copyBeanDefinitionDetails(existing, beanDefinition);, +	private void copyBeanDefinitionDetails(BeanDefinition from, RootBeanDefinition to) {, +		to.setPrimary(from.isPrimary());, +	}, +, +		Set<String> existingBeans = findCandidateBeans(beanFactory,, +				mockDefinition.getTypeToMock(), mockDefinition.getQualifier());, +		String primaryCandidate = determinePrimaryCandidate(registry, existingBeans,, +				mockDefinition.getTypeToMock());, +		if (primaryCandidate != null) {, +			return primaryCandidate;, +		}, +			BeanDefinitionRegistry registry, SpyDefinition spyDefinition, Field field) {, +		Set<String> existingBeans = findCandidateBeans(beanFactory,, +				spyDefinition.getTypeToSpy(), spyDefinition.getQualifier());, +			createSpy(registry, spyDefinition, field);, +			registerSpies(registry, spyDefinition, field, existingBeans);, +			ResolvableType type, QualifierDefinition qualifier) {, +		for (String candidate : getExistingBeans(beanFactory, type)) {, +	private Set<String> getExistingBeans(ConfigurableListableBeanFactory beanFactory,, +		return beans;, +	private void createSpy(BeanDefinitionRegistry registry, SpyDefinition spyDefinition,, +				spyDefinition.getTypeToSpy().resolve());, +		registerSpy(spyDefinition, field, beanName);, +	private void registerSpies(BeanDefinitionRegistry registry,, +			SpyDefinition spyDefinition, Field field, Collection<String> existingBeans) {, +			String beanName = determineBeanName(existingBeans, spyDefinition, registry);, +			registerSpy(spyDefinition, field, beanName);, +					"Unable to register spy bean " + spyDefinition.getTypeToSpy(), ex);, +	private String determineBeanName(Collection<String> existingBeans,, +			SpyDefinition definition, BeanDefinitionRegistry registry) {, +		if (existingBeans.size() == 1) {, +			return existingBeans.iterator().next();, +			Collection<String> candidateBeanNames, ResolvableType type) {, +							candidateBeanNames.size(),]