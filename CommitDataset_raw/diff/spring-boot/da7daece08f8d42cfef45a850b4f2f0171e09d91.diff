[+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.ClassUtils;, +		if (source == null, +				|| isTestServerPortFixed(source, environment.getConversionService()), +		Integer managementPort = getPropertyAsInteger(environment,, +				MANAGEMENT_PORT_PROPERTY, null);, +		if (managementPort == null || managementPort.equals(-1)) {, +		Integer serverPort = getPropertyAsInteger(environment, SERVER_PORT_PROPERTY,, +				8080);, +	private boolean isTestServerPortFixed(MapPropertySource source,, +			ConversionService conversionService) {, +		return !Integer.valueOf(0).equals(, +				getPropertyAsInteger(source, SERVER_PORT_PROPERTY, conversionService));, +	private Integer getPropertyAsInteger(ConfigurableEnvironment environment,, +			String property, Integer defaultValue) {, +				.map((source) -> getPropertyAsInteger(source, property,, +						environment.getConversionService())), +	private Integer getPropertyAsInteger(PropertySource<?> source, String property,, +			ConversionService conversionService) {, +		Object value = source.getProperty(property);, +		if (value == null) {, +			return null;, +		}, +		if (ClassUtils.isAssignableValue(Integer.class, value)) {, +			return (Integer) value;, +		}, +		return conversionService.convert(value, Integer.class);, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessor.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.ClassUtils;, +		if (source == null, +				|| isTestServerPortFixed(source, environment.getConversionService()), +		Integer managementPort = getPropertyAsInteger(environment,, +				MANAGEMENT_PORT_PROPERTY, null);, +		if (managementPort == null || managementPort.equals(-1)) {, +		Integer serverPort = getPropertyAsInteger(environment, SERVER_PORT_PROPERTY,, +				8080);, +	private boolean isTestServerPortFixed(MapPropertySource source,, +			ConversionService conversionService) {, +		return !Integer.valueOf(0).equals(, +				getPropertyAsInteger(source, SERVER_PORT_PROPERTY, conversionService));, +	private Integer getPropertyAsInteger(ConfigurableEnvironment environment,, +			String property, Integer defaultValue) {, +				.map((source) -> getPropertyAsInteger(source, property,, +						environment.getConversionService())), +	private Integer getPropertyAsInteger(PropertySource<?> source, String property,, +			ConversionService conversionService) {, +		Object value = source.getProperty(property);, +		if (value == null) {, +			return null;, +		}, +		if (ClassUtils.isAssignableValue(Integer.class, value)) {, +			return (Integer) value;, +		}, +		return conversionService.convert(value, Integer.class);, +	}, +, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/SpringBootTestRandomPortEnvironmentPostProcessorTests.java, + * @author Andy Wilkinson, +	@Test, +	public void postProcessWhenTestServerPortIsZeroAndManagementPortIsAnInteger() {, +		addTestPropertySource("0", null);, +		this.propertySources.addLast(new MapPropertySource("other",, +				Collections.singletonMap("management.server.port", 8081)));, +		this.postProcessor.postProcessEnvironment(this.environment, null);, +		assertThat(this.environment.getProperty("server.port")).isEqualTo("0");, +		assertThat(this.environment.getProperty("management.server.port")).isEqualTo("0");, +	}, +]