[+++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +<Configuration status="WARN" monitorInterval="30">, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +<Configuration status="WARN" monitorInterval="30">, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +import java.io.IOException;, +import java.io.InputStream;, + * @author Alexander Heusingfeld, +			ConfigurationSource source = getConfigurationSource(url);, +	private ConfigurationSource getConfigurationSource(URL url) throws IOException {, +		InputStream stream = url.openStream();, +		if (ResourceUtils.isFileURL(url)) {, +			return new ConfigurationSource(stream,, +						ResourceUtils.getFile(url));, +		} else {, +			return new ConfigurationSource(stream, url);, +		}, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +<Configuration status="WARN" monitorInterval="30">, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +import java.io.IOException;, +import java.io.InputStream;, + * @author Alexander Heusingfeld, +			ConfigurationSource source = getConfigurationSource(url);, +	private ConfigurationSource getConfigurationSource(URL url) throws IOException {, +		InputStream stream = url.openStream();, +		if (ResourceUtils.isFileURL(url)) {, +			return new ConfigurationSource(stream,, +						ResourceUtils.getFile(url));, +		} else {, +			return new ConfigurationSource(stream, url);, +		}, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java, +import com.fasterxml.jackson.databind.ObjectMapper;, +import org.apache.logging.log4j.core.config.Configuration;, +import org.apache.logging.log4j.core.config.FileConfigurationMonitor;, +, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.core.StringContains.containsString;, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile(), is(notNullValue()));, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile(), is(notNullValue()));, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile().getAbsolutePath(), containsString("log4j2-nondefault.xml"));, +		// we assume that "log4j2-nondefault.xml" contains the 'monitorInterval', +		// attribute, so we check that a monitor is created, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationMonitor(),, +				is(instanceOf(FileConfigurationMonitor.class)));, +		public Configuration getConfiguration() {, +			return ((org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(false)).getConfiguration();, +		}, +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j2/src/main/resources/log4j2.xml, +<Configuration status="WARN" monitorInterval="30">, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java, +import java.io.IOException;, +import java.io.InputStream;, + * @author Alexander Heusingfeld, +			ConfigurationSource source = getConfigurationSource(url);, +	private ConfigurationSource getConfigurationSource(URL url) throws IOException {, +		InputStream stream = url.openStream();, +		if (ResourceUtils.isFileURL(url)) {, +			return new ConfigurationSource(stream,, +						ResourceUtils.getFile(url));, +		} else {, +			return new ConfigurationSource(stream, url);, +		}, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java, +import com.fasterxml.jackson.databind.ObjectMapper;, +import org.apache.logging.log4j.core.config.Configuration;, +import org.apache.logging.log4j.core.config.FileConfigurationMonitor;, +, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.core.StringContains.containsString;, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile(), is(notNullValue()));, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile(), is(notNullValue()));, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationSource(), +				.getFile().getAbsolutePath(), containsString("log4j2-nondefault.xml"));, +		// we assume that "log4j2-nondefault.xml" contains the 'monitorInterval', +		// attribute, so we check that a monitor is created, +		assertThat(this.loggingSystem.getConfiguration().getConfigurationMonitor(),, +				is(instanceOf(FileConfigurationMonitor.class)));, +		public Configuration getConfiguration() {, +			return ((org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(false)).getConfiguration();, +		}, +, +++ b/spring-boot/src/test/resources/log4j2-nondefault.xml, +<Configuration status="WARN" monitorInterval="30">]