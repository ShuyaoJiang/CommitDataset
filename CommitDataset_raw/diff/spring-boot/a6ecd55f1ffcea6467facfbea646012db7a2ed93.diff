[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.java, +import java.util.Set;, +, +import org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;, +import org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;, + * @author Andy Wilkinson, +	@Bean, +	public ExposeExcludePropertyEndpointFilter<ExposableServletEndpoint> servletExposeExcludePropertyEndpointFilter(, +			WebEndpointProperties properties) {, +		Set<String> expose = properties.getExpose();, +		Set<String> exclude = properties.getExclude();, +		return new ExposeExcludePropertyEndpointFilter<>(ExposableServletEndpoint.class,, +				expose, exclude);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.java, +import java.util.Set;, +, +import org.springframework.boot.actuate.autoconfigure.endpoint.ExposeExcludePropertyEndpointFilter;, +import org.springframework.boot.actuate.endpoint.web.ExposableServletEndpoint;, + * @author Andy Wilkinson, +	@Bean, +	public ExposeExcludePropertyEndpointFilter<ExposableServletEndpoint> servletExposeExcludePropertyEndpointFilter(, +			WebEndpointProperties properties) {, +		Set<String> expose = properties.getExpose();, +		Set<String> exclude = properties.getExclude();, +		return new ExposeExcludePropertyEndpointFilter<>(ExposableServletEndpoint.class,, +				expose, exclude);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java, +import java.io.IOException;, +import java.util.function.Supplier;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServlet;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.boot.actuate.endpoint.web.EndpointServlet;, +import org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpoint;, +import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;, +import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;, +import org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext;, +import org.springframework.test.web.reactive.server.EntityExchangeResult;, +import org.springframework.test.web.reactive.server.WebTestClient;, +	private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner(, +			AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(, +					AutoConfigurations.of(ServletWebServerFactoryAutoConfiguration.class,, +							WebMvcAutoConfiguration.class,, +							EndpointAutoConfiguration.class,, +					.withUserConfiguration(CustomMvcEndpoint.class,, +							CustomServletEndpoint.class), +					.withPropertyValues("server.port:0");, +			WebTestClient client = createClient(context);, +			assertThat(isExposed(client, HttpMethod.GET, "beans")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "conditions")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "configprops")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "env")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "health")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "info")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "mappings")).isFalse();, +			assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isFalse();, +			WebTestClient client = createClient(context);, +			assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "conditions")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "configprops")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "env")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "health")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "info")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "mappings")).isTrue();, +			assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isTrue();, +			WebTestClient client = createClient(context);, +			assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "conditions")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "configprops")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "env")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "health")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "info")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "mappings")).isFalse();, +			assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isFalse();, +			assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isFalse();, +			WebTestClient client = createClient(context);, +			assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "conditions")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "configprops")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isTrue();, +			assertThat(isExposed(client, HttpMethod.GET, "env")).isTrue();]