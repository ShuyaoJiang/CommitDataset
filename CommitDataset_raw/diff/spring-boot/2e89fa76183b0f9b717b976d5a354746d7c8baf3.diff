[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +features that you may want to use and customize. If you have not already done so, you might want, +to read the "<<getting-started.adoc#getting-started>>" and, +"<<using-spring-boot.adoc#using-boot>>" sections so that you have a good grounding, +that is started from a `main()` method. In many situations, you can delegate to, +the static `SpringApplication.run` method, as shown in the following example:, +When your application starts, you should see something similar to the following output:, +By default, `INFO` logging messages are shown, including some relevant startup details,, +=== Startup Failure, +a dedicated error message and a concrete action to fix the problem. For instance, if you, +something similar to the following message:, +NOTE: Spring Boot provides numerous `FailureAnalyzer` implementations, and you can, +<<howto.adoc#howto-failure-analyzer,add your own>>., +auto-configuration report to better understand what went wrong. To do so, you need to, +For instance, if you are running your application by using `java -jar`, you can enable the, +to your classpath or by setting the `banner.location` property to the location of such a file., +If the file has an encoding other than UTF-8, you can set `banner.charset`., +In addition to a text file, you can also add a `banner.gif`, `banner.jpg`, or `banner.png`, +image file to your classpath or set the `banner.image.location` property. Images are, +Inside your `banner.txt` file, you can use any of the following placeholders:, +|The version number of your application, as declared in `MANIFEST.MF`. For example,, +|The version number of your application, as declared in `MANIFEST.MF` and formatted for, +|The Spring Boot version that you are using, formatted for display (surrounded with, +|The title of your application, as declared in `MANIFEST.MF`. For example, +to be printed on `System.out` (`console`), sent to the configured logger (`log`), or not, +produced at all (`off`)., +The printed banner is registered as a singleton bean under the following name:, +YAML maps `off` to `false`, so be sure to add quotes if you want to disable the, +If the `SpringApplication` defaults are not to your taste, you can instead create a local, +instance and customize it. For example, to turn off the banner, you could write:, +for spring beans. In most cases, these are references to `@Configuration` classes, but, +It is also possible to configure the `SpringApplication` by using an `application.properties`, +=== Fluent Builder API, +parent/child relationship) or if you just prefer using a '`fluent`' builder API, you, +The `SpringApplicationBuilder` lets you chain together multiple method calls and, +includes `parent` and `child` methods that let you create a hierarchy, as shown in the following example:, +NOTE: There are some restrictions when creating an `ApplicationContext` hierarchy. For example,, +is used for both parent and child contexts. See the, +=== Application Events and Listeners, +Some events are actually triggered before the `ApplicationContext` is created, so you, +cannot register a listener on those as a `@Bean`. You can register them with the, +If you want those listeners to be registered automatically, regardless of the way the, +application is created, you can add a `META-INF/spring.factories` file to your project, +and reference your listener(s) by using the `org.springframework.context.ApplicationListener`, +. An `ApplicationStartingEvent` is sent at the start of a run but before any, +  the context is known but before the context is created., +. An `ApplicationPreparedEvent` is sent just before the refresh is started but after bean, +  been processed, to indicate that the application is ready to service requests., +TIP: You often need not use application events, but it can be handy to know that they, +Application events are sent by using Spring Framework's event publishing mechanism. Part of, +then compare the injected context with the context of the event. The context can be injected, +by implementing `ApplicationContextAware` or, if the listener is a bean, by using `@Autowired`., +=== Web Environment, +A `SpringApplication` attempts to create the right type of `ApplicationContext` on, +`AnnotationConfigServletWebServerApplicationContext` is used, depending on whether you, +The algorithm used to determine a '`web environment`' is fairly simplistic (it is based on the, +It is also possible to take complete control of the `ApplicationContext` type that is, +used by calling `setApplicationContextClass(...)`., +=== Accessing Application Arguments, +`SpringApplication.run(...)`, you can inject a, +`non-option` arguments, as shown in the following example:, +TIP: Spring Boot also registers a `CommandLinePropertySource` with the Spring, +`Environment`. This allows you to also inject single application arguments by using the, +in the same way and offer a single `run` method, which is called just before, +discussed earlier., +=== Application Exit, +Each `SpringApplication` registers a shutdown hook with the JVM to ensure that the, +`ApplicationContext` closes gracefully on exit. All the standard Spring lifecycle, +callbacks (such as the `DisposableBean` interface or the `@PreDestroy` annotation) can, +code, as shown in the following example:, +exception is encountered, Spring Boot returns the exit code provided by the, +=== Admin Features, +application remotely. This feature could also be useful for any service wrapper implementation., +with a key of `local.server.port`., +CAUTION: Take care when enabling this feature, as the MBean exposes a method to shutdown the, +Spring Boot lets you externalize your configuration so that you can work with the same, +environment variables, and command-line arguments to externalize configuration. Property, +values can be injected directly into your beans by using the `@Value` annotation, accessed, +through Spring's `Environment` abstraction or, +through `@ConfigurationProperties`., +  variable or system property)., +  (`application-{profile}.properties` and YAML variants)., +  and YAML variants)., +`name` property, as shown in the following example:, +On your application classpath (for example, inside your jar) you can have an, +`application.properties` file that provides a sensible default property value for `name`. When, +running in a new environment, an `application.properties` file can be provided outside of your, +jar that overrides the `name`. For one-off testing, you can launch with a specific, +command line switch (for example, `java -jar app.jar --name="Spring"`)., +command line with an environment variable. For example, you could use the following line in a, +In the preceding example, you end up with `foo.bar=spam` in the Spring, +`spring.application.json` in a System property, as shown in the following example:, +You can also supply the JSON by using a command line argument, as shown in the following example:, +You can also supply the JSON as a JNDI variable, as follows: `java:comp/env/spring.application.json`., +=== Configuring Random Values, +The `RandomValuePropertySource` is useful for injecting random values (for example, into secrets, +or test cases). It can produce integers, longs, uuids or strings, as shown in the following example:, +character and `value,max` are integers. If `max` is provided, then `value` is the minimum, +value and `max` is the maximum value (exclusive)., +=== Accessing Command Line Properties]