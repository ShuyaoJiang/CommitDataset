[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		endpoint.setSensitive(isHealthEndpointSensitive());, +	/**, +	 * The default health endpoint sensitivity depends on whether all the endpoints by, +	 * default are secure or not. User can always override with, +	 * {@literal endpoints.health.sensitive}., +	 */, +	private boolean isHealthEndpointSensitive() {, +		return (this.management != null) && (this.management.getSecurity() != null), +				&& this.management.getSecurity().isEnabled();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		endpoint.setSensitive(isHealthEndpointSensitive());, +	/**, +	 * The default health endpoint sensitivity depends on whether all the endpoints by, +	 * default are secure or not. User can always override with, +	 * {@literal endpoints.health.sensitive}., +	 */, +	private boolean isHealthEndpointSensitive() {, +		return (this.management != null) && (this.management.getSecurity() != null), +				&& this.management.getSecurity().isEnabled();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				configureAuthorizeRequests(endpointPaths, http.authorizeRequests());, +		private void configureAuthorizeRequests(, +				String[] endpointPaths,, +				ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry requests) {, +			requests.antMatchers(endpointPaths).permitAll();, +			if (this.endpointHandlerMapping != null) {, +				requests.requestMatchers(new PrincipalHandlerRequestMatcher()), +						.permitAll();, +			}, +			requests.anyRequest().hasRole(this.management.getSecurity().getRole());, +		}, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		endpoint.setSensitive(isHealthEndpointSensitive());, +	/**, +	 * The default health endpoint sensitivity depends on whether all the endpoints by, +	 * default are secure or not. User can always override with, +	 * {@literal endpoints.health.sensitive}., +	 */, +	private boolean isHealthEndpointSensitive() {, +		return (this.management != null) && (this.management.getSecurity() != null), +				&& this.management.getSecurity().isEnabled();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +				configureAuthorizeRequests(endpointPaths, http.authorizeRequests());, +		private void configureAuthorizeRequests(, +				String[] endpointPaths,, +				ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry requests) {, +			requests.antMatchers(endpointPaths).permitAll();, +			if (this.endpointHandlerMapping != null) {, +				requests.requestMatchers(new PrincipalHandlerRequestMatcher()), +						.permitAll();, +			}, +			requests.anyRequest().hasRole(this.management.getSecurity().getRole());, +		}, +, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +		return extract(context, mapper);, +	}, +	private Map<String, Object> extract(ApplicationContext context, ObjectMapper mapper) {, +		Map<String, Object> result = new HashMap<String, Object>();, +		ConfigurationBeanFactoryMetaData beanFactoryMetaData = getBeanFactoryMetaData(context);, +		Map<String, Object> beans = getConfigurationPropertiesBeans(context,, +				beanFactoryMetaData);, +			result.put("parent", extract(context.getParent(), mapper));, +		}, +		return result;, +	private ConfigurationBeanFactoryMetaData getBeanFactoryMetaData(, +			ApplicationContext context) {, +		Map<String, ConfigurationBeanFactoryMetaData> beans = context, +				.getBeansOfType(ConfigurationBeanFactoryMetaData.class);, +		if (beans.size() == 1) {, +			return beans.values().iterator().next();, +		}, +		return null;, +	}, +, +	private Map<String, Object> getConfigurationPropertiesBeans(, +			ApplicationContext context,, +			ConfigurationBeanFactoryMetaData beanFactoryMetaData) {, +		Map<String, Object> beans = new HashMap<String, Object>();, +		beans.putAll(context.getBeansWithAnnotation(ConfigurationProperties.class));, +		if (beanFactoryMetaData != null) {, +			beans.putAll(beanFactoryMetaData, +					.getBeansWithFactoryAnnotation(ConfigurationProperties.class));, +		}, +		return beans;, +		catch (Exception ex) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +		endpoint.setSensitive(isHealthEndpointSensitive());]