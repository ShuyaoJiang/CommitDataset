[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Comma-separated list of additional patterns that match jars to ignore for TLD, +		 * scanning. The special '?' and '*' characters can be used in the pattern to, +		 * match one and only one character and zero or more characters respectively., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Comma-separated list of additional patterns that match jars to ignore for TLD, +		 * scanning. The special '?' and '*' characters can be used in the pattern to, +		 * match one and only one character and zero or more characters respectively., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +		assertThat(container.getTldSkipPatterns()).contains("junit-*.jar",, +				"spring-boot-*.jar");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Comma-separated list of additional patterns that match jars to ignore for TLD, +		 * scanning. The special '?' and '*' characters can be used in the pattern to, +		 * match one and only one character and zero or more characters respectively., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +		assertThat(container.getTldSkipPatterns()).contains("junit-*.jar",, +				"spring-boot-*.jar");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java, +	private final Set<String> patterns;, +		Assert.notNull(jarScanner, "Patterns must not be null");, +		this.patterns = patterns;, +		setPatternToTomcat8SkipFilter();, +	private void setPatternToTomcat8SkipFilter() {, +			new Tomcat8TldSkipSetter(this).setSkipPattern(this.patterns);, +					(jarsToSkip == null ? this.patterns : jarsToSkip));, +		public void setSkipPattern(Set<String> patterns) {, +			filter.setTldSkip(StringUtils.collectionToCommaDelimitedString(patterns));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +		 * Comma-separated list of additional patterns that match jars to ignore for TLD, +		 * scanning. The special '?' and '*' characters can be used in the pattern to, +		 * match one and only one character and zero or more characters respectively., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +		assertThat(container.getTldSkipPatterns()).contains("junit-*.jar",, +				"spring-boot-*.jar");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java, +	private final Set<String> patterns;, +		Assert.notNull(jarScanner, "Patterns must not be null");, +		this.patterns = patterns;, +		setPatternToTomcat8SkipFilter();, +	private void setPatternToTomcat8SkipFilter() {, +			new Tomcat8TldSkipSetter(this).setSkipPattern(this.patterns);, +					(jarsToSkip == null ? this.patterns : jarsToSkip));, +		public void setSkipPattern(Set<String> patterns) {, +			filter.setTldSkip(StringUtils.collectionToCommaDelimitedString(patterns));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.embedded.tomcat;, +, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +, +/**, + * TLD Skip Patterns used by Spring Boot., + *, + * @author Phillip Webb, + */, +final class TldSkipPatterns {, +, +	private static final Set<String> TOMCAT;, +, +	static {, +		// Same as Tomcat, +		Set<String> patterns = new LinkedHashSet<String>();, +		patterns.add("ant-*.jar");, +		patterns.add("aspectj*.jar");, +		patterns.add("commons-beanutils*.jar");, +		patterns.add("commons-codec*.jar");, +		patterns.add("commons-collections*.jar");, +		patterns.add("commons-dbcp*.jar");, +		patterns.add("commons-digester*.jar");, +		patterns.add("commons-fileupload*.jar");, +		patterns.add("commons-httpclient*.jar");, +		patterns.add("commons-io*.jar");, +		patterns.add("commons-lang*.jar");, +		patterns.add("commons-logging*.jar");, +		patterns.add("commons-math*.jar");, +		patterns.add("commons-pool*.jar");, +		patterns.add("geronimo-spec-jaxrpc*.jar");, +		patterns.add("h2*.jar");, +		patterns.add("hamcrest*.jar");, +		patterns.add("hibernate*.jar");, +		patterns.add("jmx*.jar");, +		patterns.add("jmx-tools-*.jar");]