[+++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +			// in Spring and it's hard to change that (so the property source gets added, +			// again in last position by Spring later in the cycle)., +			addLoadCandidatesFromAnnotations(environment, resourceLoader, candidates);, +		private void addLoadCandidatesFromAnnotations(, +				ConfigurableEnvironment environment, ResourceLoader resourceLoader,, +				Resource resource = resourceLoader.getResource(environment, +						.resolvePlaceholders(location));, +++ b/spring-boot/src/main/java/org/springframework/boot/config/ConfigFileApplicationListener.java, +			// in Spring and it's hard to change that (so the property source gets added, +			// again in last position by Spring later in the cycle)., +			addLoadCandidatesFromAnnotations(environment, resourceLoader, candidates);, +		private void addLoadCandidatesFromAnnotations(, +				ConfigurableEnvironment environment, ResourceLoader resourceLoader,, +				Resource resource = resourceLoader.getResource(environment, +						.resolvePlaceholders(location));, +++ b/spring-boot/src/test/java/org/springframework/boot/config/ConfigFileApplicationListenerTests.java, +	public void propertySourceAnnotationWithPlaceholder() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.environment,, +				"source.location:specificlocation");, +		SpringApplication application = new SpringApplication(, +				WithPropertySourcePlaceholders.class);, +		application.setEnvironment(this.environment);, +		application.setWebEnvironment(false);, +		ConfigurableApplicationContext context = application.run();, +		String property = context.getEnvironment().getProperty("my.property");, +		assertThat(property, equalTo("fromspecificlocation"));, +		assertNotNull(context.getEnvironment().getPropertySources(), +				.get("classpath:/specificlocation.properties"));, +		context.close();, +	}, +, +	@Test, +	@PropertySource("classpath:/${source.location}.properties"), +	protected static class WithPropertySourcePlaceholders {, +, +	}, +, +	@Configuration]