[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		private static final String DEFAULT_IMPLICIT_STRATEGY = "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy";, +, +					"hibernate.implicit_naming_strategy", this.implicitStrategy,, +					DEFAULT_IMPLICIT_STRATEGY);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		private static final String DEFAULT_IMPLICIT_STRATEGY = "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy";, +, +					"hibernate.implicit_naming_strategy", this.implicitStrategy,, +					DEFAULT_IMPLICIT_STRATEGY);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy;, +		assertThat(hibernateProperties), +				.doesNotContainKeys("hibernate.ejb.naming_strategy");, +		assertThat(hibernateProperties).containsEntry(, +				"hibernate.implicit_naming_strategy",, +				SpringImplicitNamingStrategy.class.getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		private static final String DEFAULT_IMPLICIT_STRATEGY = "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy";, +, +					"hibernate.implicit_naming_strategy", this.implicitStrategy,, +					DEFAULT_IMPLICIT_STRATEGY);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy;, +		assertThat(hibernateProperties), +				.doesNotContainKeys("hibernate.ejb.naming_strategy");, +		assertThat(hibernateProperties).containsEntry(, +				"hibernate.implicit_naming_strategy",, +				SpringImplicitNamingStrategy.class.getName());, +++ b/spring-boot-samples/spring-boot-sample-jpa/pom.xml, +			<groupId>com.h2database</groupId>, +			<artifactId>h2</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		private static final String DEFAULT_IMPLICIT_STRATEGY = "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy";, +, +					"hibernate.implicit_naming_strategy", this.implicitStrategy,, +					DEFAULT_IMPLICIT_STRATEGY);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy;, +		assertThat(hibernateProperties), +				.doesNotContainKeys("hibernate.ejb.naming_strategy");, +		assertThat(hibernateProperties).containsEntry(, +				"hibernate.implicit_naming_strategy",, +				SpringImplicitNamingStrategy.class.getName());, +++ b/spring-boot-samples/spring-boot-sample-jpa/pom.xml, +			<groupId>com.h2database</groupId>, +			<artifactId>h2</artifactId>, +++ b/spring-boot-samples/spring-boot-sample-jpa/src/main/resources/import.sql, +insert into note_tags(notes_id, tags_id) values (1, 1), +insert into note_tags(notes_id, tags_id) values (2, 1), +insert into note_tags(notes_id, tags_id) values (3, 1), +insert into note_tags(notes_id, tags_id) values (1, 3), +insert into note_tags(notes_id, tags_id) values (2, 3), +insert into note_tags(notes_id, tags_id) values (3, 3), +insert into note_tags(notes_id, tags_id) values (4, 2), +insert into note_tags(notes_id, tags_id) values (4, 3), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +		private static final String DEFAULT_IMPLICIT_STRATEGY = "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy";, +, +					"hibernate.implicit_naming_strategy", this.implicitStrategy,, +					DEFAULT_IMPLICIT_STRATEGY);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy;, +		assertThat(hibernateProperties), +				.doesNotContainKeys("hibernate.ejb.naming_strategy");, +		assertThat(hibernateProperties).containsEntry(, +				"hibernate.implicit_naming_strategy",, +				SpringImplicitNamingStrategy.class.getName());, +++ b/spring-boot-samples/spring-boot-sample-jpa/pom.xml, +			<groupId>com.h2database</groupId>, +			<artifactId>h2</artifactId>, +++ b/spring-boot-samples/spring-boot-sample-jpa/src/main/resources/import.sql, +insert into note_tags(notes_id, tags_id) values (1, 1), +insert into note_tags(notes_id, tags_id) values (2, 1), +insert into note_tags(notes_id, tags_id) values (3, 1), +insert into note_tags(notes_id, tags_id) values (1, 3), +insert into note_tags(notes_id, tags_id) values (2, 3), +insert into note_tags(notes_id, tags_id) values (3, 3), +insert into note_tags(notes_id, tags_id) values (4, 2), +insert into note_tags(notes_id, tags_id) values (4, 3), +++ b/spring-boot/src/main/java/org/springframework/boot/orm/jpa/hibernate/SpringImplicitNamingStrategy.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.orm.jpa.hibernate;, +, +import org.hibernate.boot.model.naming.Identifier;]