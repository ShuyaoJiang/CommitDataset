[+++ b/spring-boot-cli/pom.xml, +			<groupId>org.codehaus.plexus</groupId>, +			<artifactId>plexus-component-api</artifactId>, +			<exclusions>, +				<exclusion>, +					<groupId>*</groupId>, +					<artifactId>*</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/pom.xml, +			<groupId>org.codehaus.plexus</groupId>, +			<artifactId>plexus-component-api</artifactId>, +			<exclusions>, +				<exclusion>, +					<groupId>*</groupId>, +					<artifactId>*</artifactId>, +				</exclusion>, +			</exclusions>, +		</dependency>, +		<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java, +import java.lang.reflect.Field;, +import java.util.List;, +import org.apache.maven.settings.crypto.DefaultSettingsDecrypter;, +import org.apache.maven.settings.crypto.DefaultSettingsDecryptionRequest;, +import org.apache.maven.settings.crypto.SettingsDecrypter;, +import org.apache.maven.settings.crypto.SettingsDecryptionResult;, +import org.sonatype.plexus.components.cipher.DefaultPlexusCipher;, +import org.sonatype.plexus.components.cipher.PlexusCipherException;, +import org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher;, +	private static final String DEFAULT_HOME_DIR = System.getProperty("user.home");, +, +	private final String homeDir;, +, +	public SettingsXmlRepositorySystemSessionAutoConfiguration() {, +		this(DEFAULT_HOME_DIR);, +	}, +, +	SettingsXmlRepositorySystemSessionAutoConfiguration(String homeDir) {, +		this.homeDir = homeDir;, +	}, +		SettingsDecryptionResult decryptionResult = decryptSettings(settings);, +		if (!decryptionResult.getProblems().isEmpty()) {, +			throw new IllegalStateException("Settings decryption failed: ", +					+ decryptionResult.getProblems());, +		}, +		session.setAuthenticationSelector(createAuthenticationSelector(decryptionResult, +				.getServers()));, +		session.setProxySelector(createProxySelector(decryptionResult.getProxies()));, +		File settingsFile = new File(this.homeDir, ".m2/settings.xml");, +	private SettingsDecryptionResult decryptSettings(Settings settings) {, +		DefaultSettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(, +				settings);, +, +		return createSettingsDecrypter().decrypt(request);, +	}, +, +	private SettingsDecrypter createSettingsDecrypter() {, +		SettingsDecrypter settingsDecrypter = new DefaultSettingsDecrypter();, +		setField(DefaultSettingsDecrypter.class, "securityDispatcher", settingsDecrypter,, +				new SpringBootSecDispatcher());, +		return settingsDecrypter;, +	}, +, +	private void setField(Class<?> clazz, String fieldName, Object target, Object value) {, +		try {, +			Field field = clazz.getDeclaredField(fieldName);, +			field.setAccessible(true);, +			field.set(target, value);, +		}, +		catch (Exception e) {, +			throw new IllegalStateException("Failed to set field '" + fieldName, +					+ "' on '" + target + "'", e);, +		}, +	}, +, +	private AuthenticationSelector createAuthenticationSelector(List<Server> servers) {, +		for (Server server : servers) {, +	private ProxySelector createProxySelector(List<Proxy> proxies) {, +		for (Proxy proxy : proxies) {, +, +	private class SpringBootSecDispatcher extends DefaultSecDispatcher {, +, +		public SpringBootSecDispatcher() {, +			this._configurationFile = new File(, +					SettingsXmlRepositorySystemSessionAutoConfiguration.this.homeDir,, +					".m2/settings-security.xml").getAbsolutePath();, +			try {, +				this._cipher = new DefaultPlexusCipher();, +			}, +			catch (PlexusCipherException e) {, +				throw new IllegalStateException(e);, +			}, +		}, +	}, +++ b/spring-boot-cli/pom.xml, +			<groupId>org.codehaus.plexus</groupId>, +			<artifactId>plexus-component-api</artifactId>]