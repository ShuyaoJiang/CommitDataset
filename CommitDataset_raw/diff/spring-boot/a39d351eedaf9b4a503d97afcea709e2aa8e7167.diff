[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be negated, +using the {@code !} character. If both negated and non-negated profiles are specified for, +a single document, at least one non-negated profile must match and no negated profiles, +may match., +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be negated, +using the {@code !} character. If both negated and non-negated profiles are specified for, +a single document, at least one non-negated profile must match and no negated profiles, +may match., +, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, + * Copyright 2012-2016 the original author or authors., + * @author Phillip Webb, +, +		DocumentMatcher activeProfilesMatcher = getActiveProfilesDocumentMatcher();, +		String profiles = properties.getProperty(SPRING_PROFILES);, +		String negative = extractProfiles(profiles, ProfileType.NEGATIVE);, +		String positive = extractProfiles(profiles, ProfileType.POSITIVE);, +		if (StringUtils.hasLength(negative)) {, +			properties.setProperty(SPRING_PROFILES, negative);, +			switch (activeProfilesMatcher.matches(properties)) {, +			properties.setProperty(SPRING_PROFILES, positive);, +		return activeProfilesMatcher.matches(properties);, +	private DocumentMatcher getActiveProfilesDocumentMatcher() {, +		String[] profiles = this.activeProfiles;, +		if (profiles.length == 0) {, +			profiles = DEFAULT_PROFILES;, +		return new ArrayDocumentMatcher(SPRING_PROFILES, profiles);, +	}, +, +	private String extractProfiles(String profiles, ProfileType type) {, +		if (profiles == null) {, +			return null;, +		}, +		StringBuilder result = new StringBuilder();, +		for (String candidate : StringUtils.commaDelimitedListToSet(profiles)) {, +			ProfileType candidateType = ProfileType.POSITIVE;, +			if (candidate.startsWith("!")) {, +				candidateType = ProfileType.NEGATIVE;, +			}, +			if (candidateType == type) {, +				result.append(result.length() > 0 ? "," : "");, +				result.append(candidate.substring(type == ProfileType.POSITIVE ? 0 : 1));, +		return result.toString();, +, +	enum ProfileType {, +		POSITIVE, NEGATIVE, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +Spring profiles designated using the "spring.profiles" element may optionally be negated, +using the {@code !} character. If both negated and non-negated profiles are specified for, +a single document, at least one non-negated profile must match and no negated profiles, +may match., +, +++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java, + * Copyright 2012-2016 the original author or authors., + * @author Phillip Webb, +, +		DocumentMatcher activeProfilesMatcher = getActiveProfilesDocumentMatcher();, +		String profiles = properties.getProperty(SPRING_PROFILES);, +		String negative = extractProfiles(profiles, ProfileType.NEGATIVE);, +		String positive = extractProfiles(profiles, ProfileType.POSITIVE);, +		if (StringUtils.hasLength(negative)) {, +			properties.setProperty(SPRING_PROFILES, negative);, +			switch (activeProfilesMatcher.matches(properties)) {, +			properties.setProperty(SPRING_PROFILES, positive);, +		return activeProfilesMatcher.matches(properties);, +	private DocumentMatcher getActiveProfilesDocumentMatcher() {, +		String[] profiles = this.activeProfiles;, +		if (profiles.length == 0) {, +			profiles = DEFAULT_PROFILES;, +		return new ArrayDocumentMatcher(SPRING_PROFILES, profiles);, +	}, +, +	private String extractProfiles(String profiles, ProfileType type) {, +		if (profiles == null) {, +			return null;, +		}, +		StringBuilder result = new StringBuilder();, +		for (String candidate : StringUtils.commaDelimitedListToSet(profiles)) {, +			ProfileType candidateType = ProfileType.POSITIVE;, +			if (candidate.startsWith("!")) {, +				candidateType = ProfileType.NEGATIVE;, +			}, +			if (candidateType == type) {, +				result.append(result.length() > 0 ? "," : "");, +				result.append(candidate.substring(type == ProfileType.POSITIVE ? 0 : 1));, +		return result.toString();, +, +	enum ProfileType {, +		POSITIVE, NEGATIVE, +++ b/spring-boot/src/test/java/org/springframework/boot/yaml/SpringProfileDocumentMatcherTests.java, +import org.springframework.beans.factory.config.YamlProcessor.DocumentMatcher;, +import static org.assertj.core.api.Assertions.assertThat;, +, +	public void matchesSingleProfile() throws IOException {, +		DocumentMatcher matcher = new SpringProfileDocumentMatcher("foo", "bar");, +		Properties properties = getProperties("spring.profiles: foo");, +		assertThat(matcher.matches(properties)).isEqualTo(MatchStatus.FOUND);]