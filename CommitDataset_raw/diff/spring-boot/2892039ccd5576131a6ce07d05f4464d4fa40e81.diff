[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jdbc.core.JdbcTemplate;, +	@Test, +	public void testDataSourceIsInitializedEarly() {, +		load(TestInitializedDataSourceConfiguration.class,, +				"spring.datasource.initialize=true");, +		assertThat(this.context.getBean(, +				TestInitializedDataSourceConfiguration.class).called).isTrue();, +	}, +, +	@Configuration, +	static class TestInitializedDataSourceConfiguration {, +, +		private boolean called;, +, +		@Autowired, +		public void validateDataSourceIsInitialized(DataSource dataSource) {, +			// Inject the datasource to validate it is initialized at the injection point, +			JdbcTemplate template = new JdbcTemplate(dataSource);, +			assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)), +					.isEqualTo(1);, +			this.called = true;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jdbc.core.JdbcTemplate;, +	@Test, +	public void testDataSourceIsInitializedEarly() {, +		load(TestInitializedDataSourceConfiguration.class,, +				"spring.datasource.initialize=true");, +		assertThat(this.context.getBean(, +				TestInitializedDataSourceConfiguration.class).called).isTrue();, +	}, +, +	@Configuration, +	static class TestInitializedDataSourceConfiguration {, +, +		private boolean called;, +, +		@Autowired, +		public void validateDataSourceIsInitialized(DataSource dataSource) {, +			// Inject the datasource to validate it is initialized at the injection point, +			JdbcTemplate template = new JdbcTemplate(dataSource);, +			assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)), +					.isEqualTo(1);, +			this.called = true;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +		load(configs, autoConfigs, null, environment);, +	}, +, +	protected void load(Class<?>[] configs, Class<?>[] autoConfigs,, +			ClassLoader classLoader, String... environment) {, +		if (classLoader != null) {, +			ctx.setClassLoader(classLoader);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jdbc.core.JdbcTemplate;, +	@Test, +	public void testDataSourceIsInitializedEarly() {, +		load(TestInitializedDataSourceConfiguration.class,, +				"spring.datasource.initialize=true");, +		assertThat(this.context.getBean(, +				TestInitializedDataSourceConfiguration.class).called).isTrue();, +	}, +, +	@Configuration, +	static class TestInitializedDataSourceConfiguration {, +, +		private boolean called;, +, +		@Autowired, +		public void validateDataSourceIsInitialized(DataSource dataSource) {, +			// Inject the datasource to validate it is initialized at the injection point, +			JdbcTemplate template = new JdbcTemplate(dataSource);, +			assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)), +					.isEqualTo(1);, +			this.called = true;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/AbstractJpaAutoConfigurationTests.java, +		load(configs, autoConfigs, null, environment);, +	}, +, +	protected void load(Class<?>[] configs, Class<?>[] autoConfigs,, +			ClassLoader classLoader, String... environment) {, +		if (classLoader != null) {, +			ctx.setClassLoader(classLoader);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java]