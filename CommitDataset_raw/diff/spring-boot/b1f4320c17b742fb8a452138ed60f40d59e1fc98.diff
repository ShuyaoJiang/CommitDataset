[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/bind/RelaxedDataBinder.java, +import java.util.ArrayList;, +import org.springframework.core.convert.TypeDescriptor;, +		String oldName = propertyValue.getName();, +		String name = normalizePath(target, oldName);, +		if (!name.equals(oldName)) {, +					new PropertyValue(name, propertyValue.getValue()), index);, +	}, +	protected String normalizePath(BeanWrapper wrapper, String path) {, +		return initializePath(wrapper, new BeanPath(path), 0);, +	}, +, +	private static class BeanPath {, +, +		private List<PathNode> nodes;, +, +		public BeanPath(String path) {, +			this.nodes = splitPath(path);, +		}, +, +		public void mapIndex(int index) {, +			PathNode node = this.nodes.get(index);, +			if (node instanceof PropertyNode) {, +				node = ((PropertyNode) node).mapIndex();, +			}, +			this.nodes.set(index, node);, +		}, +, +		public String prefix(int index) {, +			return range(0, index);, +		}, +, +		public void rename(int index, String name) {, +			this.nodes.get(index).name = name;, +		}, +, +		public String name(int index) {, +			if (index < this.nodes.size()) {, +				return this.nodes.get(index).name;, +			}, +			return null;, +		}, +, +		public int length() {, +			return this.nodes.size();, +		}, +, +		private String range(int start, int end) {, +			StringBuilder builder = new StringBuilder();, +			for (int i = start; i < end; i++) {, +				PathNode node = this.nodes.get(i);, +				builder.append(node);, +			}, +			if (builder.toString().startsWith(("."))) {, +				builder.replace(0, 1, "");, +			}, +			return builder.toString();, +		}, +, +		public boolean isArrayIndex(int index) {, +			return this.nodes.get(index) instanceof ArrayIndexNode;, +		}, +, +		public boolean isProperty(int index) {, +			return this.nodes.get(index) instanceof PropertyNode;, +		}, +, +		@Override, +		public String toString() {, +			return prefix(this.nodes.size());, +		}, +, +		private static class PathNode {, +, +			protected String name;, +, +			public PathNode(String name) {, +				this.name = name;, +			}, +, +		}, +, +		private static class ArrayIndexNode extends PathNode {, +, +			public ArrayIndexNode(String name) {, +				super(name);, +			}, +, +			@Override, +			public String toString() {, +				return "[" + this.name + "]";, +			}, +, +		}, +, +		private static class MapIndexNode extends PathNode {, +, +			public MapIndexNode(String name) {, +				super(name);, +			}]