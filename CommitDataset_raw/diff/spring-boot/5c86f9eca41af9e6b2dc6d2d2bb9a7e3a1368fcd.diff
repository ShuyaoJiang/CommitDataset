[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2018 the original author or authors., + * @author Michael Pratt, +		 * Add details from the given {@code details} map into existing details. Keys from, +		 * the given map will replace any existing keys if there are duplicates., +		 * @param details map of details, +		 * @return this {@link Builder} instance, +		 */, +		public Builder withDetails(Map<String, ?> details) {, +			Assert.notNull(details, "Details must not be null");, +			this.details.putAll(details);, +			return this;, +		}, +, +		/**, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2018 the original author or authors., + * @author Michael Pratt, +		 * Add details from the given {@code details} map into existing details. Keys from, +		 * the given map will replace any existing keys if there are duplicates., +		 * @param details map of details, +		 * @return this {@link Builder} instance, +		 */, +		public Builder withDetails(Map<String, ?> details) {, +			Assert.notNull(details, "Details must not be null");, +			this.details.putAll(details);, +			return this;, +		}, +, +		/**, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/HealthTests.java, + * Copyright 2012-2018 the original author or authors., +import java.util.LinkedHashMap;, +import java.util.Map;, + * @author Michael Pratt, +	public void withDetailsMap() {, +		Map<String, Object> details = new LinkedHashMap<>();, +		details.put("a", "b");, +		details.put("c", "d");, +, +		Health.Builder builder = Health.up();, +		builder.withDetails(details);, +, +		Health health = builder.build();, +		assertThat(health.getDetails().get("a")).isEqualTo("b");, +		assertThat(health.getDetails().get("c")).isEqualTo("d");, +	}, +, +	@Test, +	public void withDetailsMapDuplicateKeys() {, +		Map<String, Object> details = new LinkedHashMap<>();, +		details.put("a", "b");, +		details.put("c", "d");, +		details.put("a", "e");, +, +		Health.Builder builder = Health.up();, +		builder.withDetails(details);, +, +		Health health = builder.build();, +		assertThat(health.getDetails().get("a")).isEqualTo("e");, +		assertThat(health.getDetails().get("c")).isEqualTo("d");, +	}, +, +	@Test, +	public void withMultipleDetailsMaps() {, +		Map<String, Object> details1 = new LinkedHashMap<>();, +		details1.put("a", "b");, +		details1.put("c", "d");, +, +		Map<String, Object> details2 = new LinkedHashMap<>();, +		details2.put("1", "2");, +, +		Health.Builder builder = Health.up();, +		builder.withDetails(details1);, +		builder.withDetails(details2);, +, +		Health health = builder.build();, +		assertThat(health.getDetails().get("a")).isEqualTo("b");, +		assertThat(health.getDetails().get("c")).isEqualTo("d");, +		assertThat(health.getDetails().get("1")).isEqualTo("2");, +	}, +, +	@Test, +	public void mixWithDetailsUsage() {, +		Map<String, Object> details = new LinkedHashMap<>();, +		details.put("a", "b");, +, +		Health.Builder builder = Health.up().withDetails(details).withDetail("c", "d");, +, +		Health health = builder.build();, +		assertThat(health.getDetails().get("a")).isEqualTo("b");, +		assertThat(health.getDetails().get("c")).isEqualTo("d");, +	}, +, +	@Test]