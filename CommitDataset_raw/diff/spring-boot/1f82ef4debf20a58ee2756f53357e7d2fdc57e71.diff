[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +	 * Determine if the auto-configuration base packages for the given bean factory are, +	 * available, +	 * @param beanFactory the source bean factory, +	 * @return true if there are auto-config packages available, +	 */, +	public static boolean has(BeanFactory beanFactory) {, +		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty();, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +	 * Determine if the auto-configuration base packages for the given bean factory are, +	 * available, +	 * @param beanFactory the source bean factory, +	 * @return true if there are auto-config packages available, +	 */, +	public static boolean has(BeanFactory beanFactory) {, +		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty();, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (AutoConfigurationPackages.has(this.beanFactory)) {, +		return new String[0];, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +	 * Determine if the auto-configuration base packages for the given bean factory are, +	 * available, +	 * @param beanFactory the source bean factory, +	 * @return true if there are auto-config packages available, +	 */, +	public static boolean has(BeanFactory beanFactory) {, +		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty();, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (AutoConfigurationPackages.has(this.beanFactory)) {, +		return new String[0];, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/jpa/JpaUserDetailsTests.java, +package org.springframework.boot.autoconfigure.security.jpa;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.test.SpringApplicationConfiguration;, +import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;, +, +/**, + * The EntityScanRegistrar can cause problems with Spring security and its eager, + * instantiation needs. This test is designed to fail if the Entities can't be scanned, + * because the registrar doesn't get a callback with the right beans (essentially because, + * their instantiation order was accelerated by Security)., + * , + * @author Dave Syer, + * , + * @since 1.1, + */, +@RunWith(SpringJUnit4ClassRunner.class), +@SpringApplicationConfiguration(classes = Main.class), +public class JpaUserDetailsTests {, +, +	@Test, +	public void contextLoads() throws Exception {, +	}, +, +	public static void main(String[] args) throws Exception {, +		SpringApplication.run(Main.class, args);, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationPackages.java, +	 * Determine if the auto-configuration base packages for the given bean factory are, +	 * available, +	 * @param beanFactory the source bean factory, +	 * @return true if there are auto-config packages available, +	 */, +	public static boolean has(BeanFactory beanFactory) {, +		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty();, +	}, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		if (AutoConfigurationPackages.has(this.beanFactory)) {, +		return new String[0];, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/jpa/JpaUserDetailsTests.java, +package org.springframework.boot.autoconfigure.security.jpa;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.springframework.boot.SpringApplication;, +import org.springframework.boot.test.SpringApplicationConfiguration;, +import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;, +, +/**, + * The EntityScanRegistrar can cause problems with Spring security and its eager, + * instantiation needs. This test is designed to fail if the Entities can't be scanned]