[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Function;, +import java.util.function.Predicate;, + * @author Andy Wilkinson, +		this.conversionService = new CompositeConversionService(, +				new TypeConverterConversionService(propertyEditorInitializer),, +				conversionService);, +		return this.conversionService.canConvert(sourceType, targetType);, +	private static final class CompositeConversionService implements ConversionService {, +, +		private final List<ConversionService> delegates;, +, +		private CompositeConversionService(, +				TypeConverterConversionService typeConverterConversionService,, +				ConversionService conversionService) {, +			List<ConversionService> delegates = new ArrayList<ConversionService>();, +			delegates.add(typeConverterConversionService);, +			delegates.add(conversionService);, +			if (!(conversionService instanceof ApplicationConversionService)) {, +				delegates.add(ApplicationConversionService.getSharedInstance());, +			}, +			this.delegates = delegates;, +		}, +, +		@Override, +		public boolean canConvert(Class<?> sourceType, Class<?> targetType) {, +			return canConvert((delegate) -> delegate.canConvert(sourceType, targetType));, +		}, +, +		@Override, +		public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return canConvert((delegate) -> delegate.canConvert(sourceType, targetType));, +		}, +, +		private boolean canConvert(Predicate<ConversionService> canConvert) {, +			for (ConversionService delegate : this.delegates) {, +				if (canConvert.test(delegate)) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		@Override, +		public <T> T convert(Object source, Class<T> targetType) {, +			Class<?> sourceType = source.getClass();, +			return convert((delegate) -> delegate.canConvert(sourceType, targetType),, +					(delegate) -> delegate.convert(source, targetType));, +		}, +, +		@Override, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +			return convert((delegate) -> delegate.canConvert(sourceType, targetType),, +					(delegate) -> delegate.convert(source, sourceType, targetType));, +		}, +, +		public <T> T convert(Predicate<ConversionService> canConvert,, +				Function<ConversionService, T> convert) {, +			for (int i = 0; i < this.delegates.size() - 1; i++) {, +				ConversionService delegate = this.delegates.get(i);, +				if (canConvert.test(delegate)) {, +					return convert.apply(delegate);, +				}, +			}, +			return convert.apply(this.delegates.get(this.delegates.size() - 1));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Function;, +import java.util.function.Predicate;, + * @author Andy Wilkinson, +		this.conversionService = new CompositeConversionService(, +				new TypeConverterConversionService(propertyEditorInitializer),, +				conversionService);, +		return this.conversionService.canConvert(sourceType, targetType);, +	private static final class CompositeConversionService implements ConversionService {, +, +		private final List<ConversionService> delegates;, +, +		private CompositeConversionService(, +				TypeConverterConversionService typeConverterConversionService,, +				ConversionService conversionService) {, +			List<ConversionService> delegates = new ArrayList<ConversionService>();, +			delegates.add(typeConverterConversionService);, +			delegates.add(conversionService);, +			if (!(conversionService instanceof ApplicationConversionService)) {, +				delegates.add(ApplicationConversionService.getSharedInstance());, +			}, +			this.delegates = delegates;, +		}, +, +		@Override, +		public boolean canConvert(Class<?> sourceType, Class<?> targetType) {]