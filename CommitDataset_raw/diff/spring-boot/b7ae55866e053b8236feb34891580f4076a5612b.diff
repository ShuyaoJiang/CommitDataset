[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +	void setTransactionManager(, +	void setErrorHandler(ErrorHandler errorHandler) {, +	void setAfterRollbackProcessor(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +	void setTransactionManager(, +	void setErrorHandler(ErrorHandler errorHandler) {, +	void setAfterRollbackProcessor(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		configurer.setErrorHandler(this.errorHandler);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +	void setTransactionManager(, +	void setErrorHandler(ErrorHandler errorHandler) {, +	void setAfterRollbackProcessor(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		configurer.setErrorHandler(this.errorHandler);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +import org.springframework.kafka.transaction.KafkaAwareTransactionManager;, +		this.contextRunner.withPropertyValues("spring.kafka.bootstrap-servers=foo:1234",, +				"spring.kafka.properties.foo=bar", "spring.kafka.properties.baz=qux",, +		this.contextRunner.withPropertyValues("spring.kafka.clientId=cid",, +				"spring.kafka.producer.acks=all", "spring.kafka.producer.batch-size=20",, +		this.contextRunner, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryWithCustomErrorHandler() {, +		this.contextRunner.withUserConfiguration(ErrorHandlerConfiguration.class), +				.run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> factory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					assertThat(KafkaTestUtils.getPropertyValue(factory, "errorHandler")), +							.isSameAs(context.getBean("errorHandler"));, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryWithDefaultTransactionManager() {, +		this.contextRunner, +				.withPropertyValues("spring.kafka.producer.transaction-id-prefix=test"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(KafkaAwareTransactionManager.class);, +					ConcurrentKafkaListenerContainerFactory<?, ?> factory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					assertThat(factory.getContainerProperties().getTransactionManager()), +							.isSameAs(, +									context.getBean(KafkaAwareTransactionManager.class));, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryWithCustomTransactionManager() {, +		this.contextRunner.withUserConfiguration(TransactionManagerConfiguration.class), +				.withPropertyValues("spring.kafka.producer.transaction-id-prefix=test"), +				.run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> factory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					assertThat(factory.getContainerProperties().getTransactionManager()), +							.isSameAs(context.getBean("chainedTransactionManager"));, +				});, +	}, +, +	@Test, +	public void testConcurrentKafkaListenerContainerFactoryWithCustomAfterRollbackProcessor() {, +		this.contextRunner, +				.withUserConfiguration(AfterRollbackProcessorConfiguration.class), +				.run((context) -> {, +					ConcurrentKafkaListenerContainerFactory<?, ?> factory = context, +							.getBean(ConcurrentKafkaListenerContainerFactory.class);, +					DirectFieldAccessor dfa = new DirectFieldAccessor(factory);, +							.isSameAs(context.getBean("afterRollbackProcessor"));, +	protected static class MessageConverterConfiguration {, +, +		@Bean, +		public RecordMessageConverter myMessageConverter() {, +			return mock(RecordMessageConverter.class);, +		}, +, +	}, +, +	@Configuration, +	protected static class ErrorHandlerConfiguration {, +	protected static class TransactionManagerConfiguration {, +	}, +, +	@Configuration, +	protected static class AfterRollbackProcessorConfiguration {, +, +		public AfterRollbackProcessor<Object, Object> afterRollbackProcessor() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/ConcurrentKafkaListenerContainerFactoryConfigurer.java, +	void setTransactionManager(, +	void setErrorHandler(ErrorHandler errorHandler) {, +	void setAfterRollbackProcessor(, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaAnnotationDrivenConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		configurer.setErrorHandler(this.errorHandler);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java]