[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +				"spring.datasource.test.validation-query:SELECT from FOOBAR",, +		@ConfigurationProperties(prefix = "spring.datasource.test"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +				"spring.datasource.test.validation-query:SELECT from FOOBAR",, +		@ConfigurationProperties(prefix = "spring.datasource.test"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import com.zaxxer.hikari.HikariDataSource;, +	@Configuration, +		@SuppressWarnings("unchecked"), +		private static <T> T createDataSource(DataSourceProperties properties, Class<? extends DataSource> type) {, +			return (T) DataSourceBuilder, +					.create(properties.getClassLoader()), +					.type(type), +					.driverClassName(properties.determineDriverClassName()), +					.url(properties.determineUrl()), +					.username(properties.determineUsername()), +					.password(properties.determinePassword()), +					.build();, +		}, +, +, +		@Configuration, +		@Import({TomcatDataSourceConfiguration.class, HikariDataSourceConfiguration.class,, +				DbcpDataSourceConfiguration.class, Dbcp2DataSourceConfiguration.class}), +		protected static class AllDataSourceConfiguration {, +		}, +, +, +		@ConditionalOnClass(org.apache.tomcat.jdbc.pool.DataSource.class), +		@ConditionalOnProperty(name = "spring.datasource.type",, +				havingValue = "org.apache.tomcat.jdbc.pool.DataSource", matchIfMissing = true), +		protected static class TomcatDataSourceConfiguration {, +			@ConfigurationProperties("spring.datasource.tomcat"), +			public org.apache.tomcat.jdbc.pool.DataSource dataSource(DataSourceProperties properties) {, +				return createDataSource(properties, org.apache.tomcat.jdbc.pool.DataSource.class);, +, +		}, +, +		@ConditionalOnClass(HikariDataSource.class), +		@ConditionalOnProperty(name = "spring.datasource.type",, +				havingValue = "com.zaxxer.hikari.HikariDataSource", matchIfMissing = true), +		protected static class HikariDataSourceConfiguration {, +, +			@Bean, +			@ConfigurationProperties("spring.datasource.hikari"), +			public HikariDataSource dataSource(DataSourceProperties properties) {, +				return createDataSource(properties, HikariDataSource.class);, +			}, +		}, +, +		@ConditionalOnClass(org.apache.commons.dbcp.BasicDataSource.class), +		@ConditionalOnProperty(name = "spring.datasource.type",, +				havingValue = "org.apache.commons.dbcp.BasicDataSource", matchIfMissing = true), +		protected static class DbcpDataSourceConfiguration {, +, +			@Bean, +			@ConfigurationProperties("spring.datasource.dbcp"), +			public org.apache.commons.dbcp.BasicDataSource dataSource(DataSourceProperties properties) {, +				return createDataSource(properties, org.apache.commons.dbcp.BasicDataSource.class);, +			}, +		}, +, +		@ConditionalOnClass(org.apache.commons.dbcp2.BasicDataSource.class), +		@ConditionalOnProperty(name = "spring.datasource.type",, +				havingValue = "org.apache.commons.dbcp2.BasicDataSource", matchIfMissing = true), +		protected static class Dbcp2DataSourceConfiguration {, +, +			@Bean, +			@ConfigurationProperties("spring.datasource.dbcp2"), +			public org.apache.commons.dbcp2.BasicDataSource dataSource(DataSourceProperties properties) {, +				return createDataSource(properties, org.apache.commons.dbcp2.BasicDataSource.class);, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, + * Copyright 2012-2016 the original author or authors., +				"spring.datasource.test.validation-query:SELECT from FOOBAR",, +		@ConfigurationProperties(prefix = "spring.datasource.test"), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +import com.zaxxer.hikari.HikariDataSource;, +	@Configuration, +		@SuppressWarnings("unchecked"), +		private static <T> T createDataSource(DataSourceProperties properties, Class<? extends DataSource> type) {, +			return (T) DataSourceBuilder, +					.create(properties.getClassLoader()), +					.type(type), +					.driverClassName(properties.determineDriverClassName()), +					.url(properties.determineUrl()), +					.username(properties.determineUsername()), +					.password(properties.determinePassword()), +					.build();, +		}, +, +, +		@Configuration, +		@Import({TomcatDataSourceConfiguration.class, HikariDataSourceConfiguration.class,, +				DbcpDataSourceConfiguration.class, Dbcp2DataSourceConfiguration.class}), +		protected static class AllDataSourceConfiguration {, +		}]