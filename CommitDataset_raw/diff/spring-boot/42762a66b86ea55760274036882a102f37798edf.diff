[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import java.io.Closeable;, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.elasticsearch.node.InternalSettingsPreparer;, +import org.elasticsearch.plugins.Plugin;, +import org.springframework.util.ClassUtils;, +		defaults.put("transport.type", "local");, +	private static final Set<String> TRANSPORT_PLUGINS;, +, +	static {, +		Set<String> plugins = new LinkedHashSet<>();, +		plugins.add("org.elasticsearch.transport.Netty4Plugin");, +		plugins.add("org.elasticsearch.transport.Netty3Plugin");, +		TRANSPORT_PLUGINS = Collections.unmodifiableSet(plugins);, +	}, +, +	private Closeable closeable;, +		Settings.Builder settings = Settings.builder();, +		settings.put("cluster.name", this.properties.getClusterName());, +		Node node = createNode(settings.build());, +		this.closeable = node;, +		node.start();, +	private Node createNode(Settings settings) {, +		Collection<Class<? extends Plugin>> plugins = findPlugins();, +		if (plugins.isEmpty()) {, +			return new Node(settings);, +		}, +		return new PluggableNode(settings, plugins);, +	}, +, +	@SuppressWarnings("unchecked"), +	private Collection<Class<? extends Plugin>> findPlugins() {, +		for (String candidate : TRANSPORT_PLUGINS) {, +			if (ClassUtils.isPresent(candidate, null)) {, +				Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) ClassUtils, +						.resolveClassName(candidate, null);, +				return Collections.singleton(pluginClass);, +			}, +		}, +		return Collections.emptySet();, +	}, +, +		this.closeable = client;, +		if (this.closeable != null) {, +				this.closeable.close();, +	/**, +	 * {@link Node} subclass to support {@link Plugin Plugins}., +	 */, +	private static class PluggableNode extends Node {, +, +		PluggableNode(Settings preparedSettings,, +				Collection<Class<? extends Plugin>> classpathPlugins) {, +			super(InternalSettingsPreparer.prepareEnvironment(preparedSettings, null),, +					classpathPlugins);, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import java.io.Closeable;, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.elasticsearch.node.InternalSettingsPreparer;, +import org.elasticsearch.plugins.Plugin;, +import org.springframework.util.ClassUtils;, +		defaults.put("transport.type", "local");, +	private static final Set<String> TRANSPORT_PLUGINS;, +, +	static {, +		Set<String> plugins = new LinkedHashSet<>();, +		plugins.add("org.elasticsearch.transport.Netty4Plugin");, +		plugins.add("org.elasticsearch.transport.Netty3Plugin");, +		TRANSPORT_PLUGINS = Collections.unmodifiableSet(plugins);, +	}, +, +	private Closeable closeable;, +		Settings.Builder settings = Settings.builder();, +		settings.put("cluster.name", this.properties.getClusterName());, +		Node node = createNode(settings.build());, +		this.closeable = node;, +		node.start();, +	private Node createNode(Settings settings) {, +		Collection<Class<? extends Plugin>> plugins = findPlugins();, +		if (plugins.isEmpty()) {, +			return new Node(settings);, +		}, +		return new PluggableNode(settings, plugins);, +	}, +, +	@SuppressWarnings("unchecked"), +	private Collection<Class<? extends Plugin>> findPlugins() {, +		for (String candidate : TRANSPORT_PLUGINS) {, +			if (ClassUtils.isPresent(candidate, null)) {, +				Class<? extends Plugin> pluginClass = (Class<? extends Plugin>) ClassUtils, +						.resolveClassName(candidate, null);, +				return Collections.singleton(pluginClass);, +			}]