[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			boolean isExcluded = this.elementExcludeFilter.isExcluded(getter, +					.getReturnType());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			boolean isExcluded = this.elementExcludeFilter.isExcluded(getter, +					.getReturnType());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ElementExcludeFilter.java, +import javax.lang.model.type.TypeMirror;, +		add("java.util.concurrent.ThreadFactory");, +		add("javax.sql.DataSource");, +		add("com.zaxxer.hikari.IConnectionCustomizer");, +		add("groovy.text.markup.MarkupTemplateEngine");, +		add("org.apache.tomcat.jdbc.pool.PoolConfiguration");, +		add("org.apache.tomcat.jdbc.pool.Validator");, +		add("org.flywaydb.core.api.MigrationVersion");, +		add("org.flywaydb.core.api.callback.FlywayCallback");, +		add("org.flywaydb.core.api.resolver.MigrationResolver");, +		add("org.springframework.http.MediaType");, +	public boolean isExcluded(TypeMirror type) {, +		if (type == null) {, +		String typeName = type.toString();, +		if (typeName.endsWith("[]")) {, +			typeName = typeName.substring(0, typeName.length() - 2);, +		}, +		return this.excludes.contains(typeName);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			boolean isExcluded = this.elementExcludeFilter.isExcluded(getter, +					.getReturnType());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ElementExcludeFilter.java, +import javax.lang.model.type.TypeMirror;, +		add("java.util.concurrent.ThreadFactory");, +		add("javax.sql.DataSource");, +		add("com.zaxxer.hikari.IConnectionCustomizer");, +		add("groovy.text.markup.MarkupTemplateEngine");, +		add("org.apache.tomcat.jdbc.pool.PoolConfiguration");, +		add("org.apache.tomcat.jdbc.pool.Validator");, +		add("org.flywaydb.core.api.MigrationVersion");, +		add("org.flywaydb.core.api.callback.FlywayCallback");, +		add("org.flywaydb.core.api.resolver.MigrationResolver");, +		add("org.springframework.http.MediaType");, +	public boolean isExcluded(TypeMirror type) {, +		if (type == null) {, +		String typeName = type.toString();, +		if (typeName.endsWith("[]")) {, +			typeName = typeName.substring(0, typeName.length() - 2);, +		}, +		return this.excludes.contains(typeName);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +		assertThat(metadata, not(containsProperty("excluded.writer-array")));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			boolean isExcluded = this.elementExcludeFilter.isExcluded(getter, +					.getReturnType());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ElementExcludeFilter.java, +import javax.lang.model.type.TypeMirror;, +		add("java.util.concurrent.ThreadFactory");, +		add("javax.sql.DataSource");, +		add("com.zaxxer.hikari.IConnectionCustomizer");, +		add("groovy.text.markup.MarkupTemplateEngine");, +		add("org.apache.tomcat.jdbc.pool.PoolConfiguration");, +		add("org.apache.tomcat.jdbc.pool.Validator");, +		add("org.flywaydb.core.api.MigrationVersion");, +		add("org.flywaydb.core.api.callback.FlywayCallback");, +		add("org.flywaydb.core.api.resolver.MigrationResolver");, +		add("org.springframework.http.MediaType");, +	public boolean isExcluded(TypeMirror type) {, +		if (type == null) {, +		String typeName = type.toString();, +		if (typeName.endsWith("[]")) {, +			typeName = typeName.substring(0, typeName.length() - 2);, +		}, +		return this.excludes.contains(typeName);, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +		assertThat(metadata, not(containsProperty("excluded.writer-array")));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationsample/specific/ExcludedTypesPojo.java, +	private Writer[] writerArray;, +, +	public Writer[] getWriterArray() {, +		return this.writerArray;, +	}, +, +	public void setWriterArray(Writer[] writerArray) {, +		this.writerArray = writerArray;, +	}, +]