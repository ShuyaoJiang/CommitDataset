[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java, + * Copyright 2012-2014 the original author or authors., +import java.util.concurrent.TimeUnit;, +	private static final long FIND_WARNING_TIMEOUT = TimeUnit.SECONDS.toMillis(10);, +, +						Repackager repackager = new Repackager(file) {, +							protected String findMainMethod(java.util.jar.JarFile source) throws IOException {, +								long startTime = System.currentTimeMillis();, +								try {, +									return super.findMainMethod(source);, +								}, +								finally {, +									long duration = System.currentTimeMillis() - startTime;, +									if (duration > FIND_WARNING_TIMEOUT) {, +										getLogger().warn(, +												"Searching for the main-class is taking some time, ", +														+ "consider using setting 'springBoot.mainClass'");, +									}, +								}, +							};, +						};, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java, + * Copyright 2012-2014 the original author or authors., +import java.util.concurrent.TimeUnit;, +	private static final long FIND_WARNING_TIMEOUT = TimeUnit.SECONDS.toMillis(10);, +, +						Repackager repackager = new Repackager(file) {, +							protected String findMainMethod(java.util.jar.JarFile source) throws IOException {, +								long startTime = System.currentTimeMillis();, +								try {, +									return super.findMainMethod(source);, +								}, +								finally {, +									long duration = System.currentTimeMillis() - startTime;, +									if (duration > FIND_WARNING_TIMEOUT) {, +										getLogger().warn(, +												"Searching for the main-class is taking some time, ", +														+ "consider using setting 'springBoot.mainClass'");, +									}, +								}, +							};, +						};, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java, + * Copyright 2012-2014 the original author or authors., +		return doWithMainClasses(rootFolder, new ClassNameCallback<String>() {, +			@Override, +			public String doWith(String className) {, +				return className;, +			}, +		});, +	}, +, +	/**, +	 * Perform the given callback operation on all main classes from the given root, +	 * folder., +	 * @param rootFolder the root folder, +	 * @param callback the callback, +	 * @return the first callback result or {@code null}, +	 * @throws IOException, +	 */, +	public static <T> T doWithMainClasses(File rootFolder, ClassNameCallback<T> callback), +			throws IOException {, +		String prefix = rootFolder.getAbsolutePath() + "/";, +		stack.push(rootFolder);, +						String className = convertToClassName(file.getAbsolutePath(),, +								prefix);, +						T result = callback.doWith(className);, +						if (result != null) {, +							return result;, +						}, +		return doWithMainClasses(jarFile, classesLocation,, +				new ClassNameCallback<String>() {, +					@Override, +					public String doWith(String className) {, +						return className;, +					}, +				});, +	}, +, +	/**, +	 * Perform the given callback operation on all main classes from the given jar., +	 * @param jarFile the jar file to search, +	 * @param classesLocation the location within the jar containing classes, +	 * @return the first callback result or {@code null}, +	 * @throws IOException, +	 */, +	public static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,, +			ClassNameCallback<T> callback) throws IOException {, +					String className = convertToClassName(entry.getName(),, +							classesLocation);, +					T result = callback.doWith(className);, +					if (result != null) {, +						return result;, +					}, +, +	/**, +	 * Callback interface used to receive class names., +	 */, +	public static interface ClassNameCallback<T> {, +]