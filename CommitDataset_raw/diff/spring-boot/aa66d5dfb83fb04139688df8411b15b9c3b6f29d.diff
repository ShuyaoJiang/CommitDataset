[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	private static final int[] EXCESS = { 0x0, 0x1080, 0x96, 0x1c82080 };, +, +			this.string = new String(this.bytes, this.offset, this.length,, +					StandardCharsets.UTF_8);, +	public boolean matches(CharSequence name, char suffix) {, +		int charIndex = 0;, +		int nameLen = name.length();, +		int totalLen = (nameLen + (suffix == 0 ? 0 : 1));, +		for (int i = this.offset; i < this.offset + this.length; i++) {, +			int b = this.bytes[i];, +			if (b < 0) {, +				b = b & 0x7F;, +				int limit = getRemainingUtfBytes(b);, +				for (int j = 0; j < limit; j++) {, +					b = (b << 6) + (this.bytes[++i] & 0xFF);, +				}, +				b -= EXCESS[limit];, +			}, +			char c = getChar(name, suffix, charIndex++);, +			if (b <= 0xFFFF) {, +				if (c != b) {, +					return false;, +				}, +			}, +			else {, +				if (c != ((b >> 0xA) + 0xD7C0)) {, +					return false;, +				}, +				c = getChar(name, suffix, charIndex++);, +				if (c != ((b & 0x3FF) + 0xDC00)) {, +					return false;, +				}, +			}, +		}, +		return charIndex == totalLen;, +	}, +, +	private char getChar(CharSequence name, char suffix, int index) {, +		if (index < name.length()) {, +			return name.charAt(index);, +		}, +		if (index == name.length()) {, +			return suffix;, +		}, +		return 0;, +	}, +, +					int limit = getRemainingUtfBytes(b);, +					b -= EXCESS[limit];, +	private int getRemainingUtfBytes(int b) {, +		return (b < 96 ? 1 : (b < 112 ? 2 : 3));, +	}, +, +	public static int hashCode(CharSequence charSequence) {, +		// We're compatible with String's hashCode(), +		if (charSequence instanceof StringSequence) {, +			// ... but save making an unnecessary String for StringSequence, +			return charSequence.hashCode();, +		}, +		return charSequence.toString().hashCode();, +	public static int hashCode(int hash, char suffix) {, +		return (suffix == 0 ? hash : (31 * hash + suffix));, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	private static final int[] EXCESS = { 0x0, 0x1080, 0x96, 0x1c82080 };, +, +			this.string = new String(this.bytes, this.offset, this.length,, +					StandardCharsets.UTF_8);, +	public boolean matches(CharSequence name, char suffix) {, +		int charIndex = 0;, +		int nameLen = name.length();, +		int totalLen = (nameLen + (suffix == 0 ? 0 : 1));, +		for (int i = this.offset; i < this.offset + this.length; i++) {, +			int b = this.bytes[i];, +			if (b < 0) {, +				b = b & 0x7F;, +				int limit = getRemainingUtfBytes(b);, +				for (int j = 0; j < limit; j++) {, +					b = (b << 6) + (this.bytes[++i] & 0xFF);, +				}, +				b -= EXCESS[limit];, +			}, +			char c = getChar(name, suffix, charIndex++);, +			if (b <= 0xFFFF) {, +				if (c != b) {, +					return false;, +				}, +			}, +			else {, +				if (c != ((b >> 0xA) + 0xD7C0)) {, +					return false;, +				}, +				c = getChar(name, suffix, charIndex++);, +				if (c != ((b & 0x3FF) + 0xDC00)) {, +					return false;, +				}, +			}, +		}, +		return charIndex == totalLen;, +	}]