[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * @author Madhura Bhave, +		Environment environment = this.applicationContext.getEnvironment();, +			managementPort = ManagementServerPort.get(environment);, +			if (environment.getProperty("management.ssl.enabled") != null) {, +			if (environment instanceof ConfigurableEnvironment) {, +						(ConfigurableEnvironment) environment);, +			return environment.getProperty(prefix + "port", Integer.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * @author Madhura Bhave, +		Environment environment = this.applicationContext.getEnvironment();, +			managementPort = ManagementServerPort.get(environment);, +			if (environment.getProperty("management.ssl.enabled") != null) {, +			if (environment instanceof ConfigurableEnvironment) {, +						(ConfigurableEnvironment) environment);, +			return environment.getProperty(prefix + "port", Integer.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * @author Madhura Bhave, +			config = environment.getProperty("endpoints.logfile.external-file");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * @author Madhura Bhave, +		Environment environment = this.applicationContext.getEnvironment();, +			managementPort = ManagementServerPort.get(environment);, +			if (environment.getProperty("management.ssl.enabled") != null) {, +			if (environment instanceof ConfigurableEnvironment) {, +						(ConfigurableEnvironment) environment);, +			return environment.getProperty(prefix + "port", Integer.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * @author Madhura Bhave, +			config = environment.getProperty("endpoints.logfile.external-file");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * @author Madhura Bhave, +			return context.getEnvironment().getProperty(prefix + "enabled", Boolean.class,, +					defaultValue);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * @author Madhura Bhave, +		Environment environment = this.applicationContext.getEnvironment();, +			managementPort = ManagementServerPort.get(environment);, +			if (environment.getProperty("management.ssl.enabled") != null) {, +			if (environment instanceof ConfigurableEnvironment) {, +						(ConfigurableEnvironment) environment);, +			return environment.getProperty(prefix + "port", Integer.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, + * @author Madhura Bhave, +			config = environment.getProperty("endpoints.logfile.external-file");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * @author Madhura Bhave, +			return context.getEnvironment().getProperty(prefix + "enabled", Boolean.class,, +					defaultValue);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.core.env.Environment;, + * @author Madhura Bhave, +		Environment environment = context.getEnvironment();, +		String enabledProperty = this.prefix + endpointName + ".enabled";, +		if (environment.containsProperty(enabledProperty)) {, +			boolean match = environment.getProperty(enabledProperty, Boolean.class, true);, +		boolean match = Boolean.valueOf(context.getEnvironment(), +				.getProperty(this.prefix + "defaults.enabled", "true"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * @author Madhura Bhave, +			boolean jmxEnabled = context.getEnvironment(), +					.getProperty("spring.jmx.enabled", Boolean.class, true);, +			boolean jmxEndpointsEnabled = context.getEnvironment(), +					.getProperty("endpoints.jmx.enabled", Boolean.class, true);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * @author Madhura Bhave, +		Environment environment = this.applicationContext.getEnvironment();, +			managementPort = ManagementServerPort.get(environment);, +			if (environment.getProperty("management.ssl.enabled") != null) {]