[+++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Properties;, +		if (Properties.class.isAssignableFrom(descriptor.getObjectType())) {, +			// Properties is declared as Map<Object,Object> but we know it's really Map<String,String>, +			return true;, +		}, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +import java.util.Properties;, +		if (Properties.class.isAssignableFrom(descriptor.getObjectType())) {, +			// Properties is declared as Map<Object,Object> but we know it's really Map<String,String>, +			return true;, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +, +	public void testBindNestedProperties() throws Exception {, +		TargetWithNestedProperties target = new TargetWithNestedProperties();, +		bind(target, "nested.foo: bar\n" + "nested.value.foo: 123");, +		assertEquals("bar", target.getNested().get("foo"));, +		assertEquals("123", target.getNested().get("value.foo"));, +	}, +, +	@Test, +	public static class TargetWithNestedProperties {, +, +		private Properties nested;, +, +		public Properties getNested() {, +			return this.nested;, +		}, +, +		public void setNested(Properties nested) {, +			this.nested = nested;, +		}, +, +	}, +]