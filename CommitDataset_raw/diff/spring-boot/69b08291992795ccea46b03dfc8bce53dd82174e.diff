[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +	protected String[] getInlinedProperties(MergedContextConfiguration config) {, +		ArrayList<String> properties = new ArrayList<String>();, +		properties.addAll(Arrays.asList(config.getPropertySourceProperties()));, +			properties.add("server.port=-1");, +		return properties.toArray(new String[properties.size()]);, +	private void disableJmx(List<String> properties) {, +		properties.add("spring.jmx.enabled=false");, +		initializers.add(new TestPropertySourcesInitializer(, +				config.getPropertySourceLocations(), getInlinedProperties(config)));, +	 * {@link ApplicationContextInitializer} to set up test property sources., +	private static class TestPropertySourcesInitializer, +		private final String[] inlinedProperties;, +, +		TestPropertySourcesInitializer(String[] propertySourceLocations,, +				String[] inlinedProperties) {, +			this.inlinedProperties = inlinedProperties;, +			TestPropertySourceUtils.addInlinedPropertiesToEnvironment(applicationContext,, +					this.inlinedProperties);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +	protected String[] getInlinedProperties(MergedContextConfiguration config) {, +		ArrayList<String> properties = new ArrayList<String>();, +		properties.addAll(Arrays.asList(config.getPropertySourceProperties()));, +			properties.add("server.port=-1");, +		return properties.toArray(new String[properties.size()]);, +	private void disableJmx(List<String> properties) {, +		properties.add("spring.jmx.enabled=false");, +		initializers.add(new TestPropertySourcesInitializer(, +				config.getPropertySourceLocations(), getInlinedProperties(config)));, +	 * {@link ApplicationContextInitializer} to set up test property sources., +	private static class TestPropertySourcesInitializer, +		private final String[] inlinedProperties;, +, +		TestPropertySourcesInitializer(String[] propertySourceLocations,, +				String[] inlinedProperties) {, +			this.inlinedProperties = inlinedProperties;, +			TestPropertySourceUtils.addInlinedPropertiesToEnvironment(applicationContext,, +					this.inlinedProperties);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +			// Added first so that inlined properties from @TestPropertySource take, +			// precedence, +			propertySourceProperties.addAll(0, Arrays.asList(properties));, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +	protected String[] getInlinedProperties(MergedContextConfiguration config) {, +		ArrayList<String> properties = new ArrayList<String>();, +		properties.addAll(Arrays.asList(config.getPropertySourceProperties()));, +			properties.add("server.port=-1");, +		return properties.toArray(new String[properties.size()]);, +	private void disableJmx(List<String> properties) {, +		properties.add("spring.jmx.enabled=false");, +		initializers.add(new TestPropertySourcesInitializer(, +				config.getPropertySourceLocations(), getInlinedProperties(config)));, +	 * {@link ApplicationContextInitializer} to set up test property sources., +	private static class TestPropertySourcesInitializer, +		private final String[] inlinedProperties;, +, +		TestPropertySourcesInitializer(String[] propertySourceLocations,, +				String[] inlinedProperties) {, +			this.inlinedProperties = inlinedProperties;, +			TestPropertySourceUtils.addInlinedPropertiesToEnvironment(applicationContext,, +					this.inlinedProperties);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +			// Added first so that inlined properties from @TestPropertySource take, +			// precedence, +			propertySourceProperties.addAll(0, Arrays.asList(properties));, +++ /dev/null, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java, +	protected String[] getInlinedProperties(MergedContextConfiguration config) {, +		ArrayList<String> properties = new ArrayList<String>();, +		properties.addAll(Arrays.asList(config.getPropertySourceProperties()));, +			properties.add("server.port=-1");, +		return properties.toArray(new String[properties.size()]);, +	private void disableJmx(List<String> properties) {, +		properties.add("spring.jmx.enabled=false");, +		initializers.add(new TestPropertySourcesInitializer(, +				config.getPropertySourceLocations(), getInlinedProperties(config)));, +	 * {@link ApplicationContextInitializer} to set up test property sources., +	private static class TestPropertySourcesInitializer, +		private final String[] inlinedProperties;, +, +		TestPropertySourcesInitializer(String[] propertySourceLocations,, +				String[] inlinedProperties) {, +			this.inlinedProperties = inlinedProperties;, +			TestPropertySourceUtils.addInlinedPropertiesToEnvironment(applicationContext,, +					this.inlinedProperties);, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootTestContextBootstrapper.java, +			// Added first so that inlined properties from @TestPropertySource take, +			// precedence, +			propertySourceProperties.addAll(0, Arrays.asList(properties));, +++ /dev/null, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWithTestPropertySourceTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]