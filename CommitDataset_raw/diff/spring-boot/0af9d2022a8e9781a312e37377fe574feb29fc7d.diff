[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.context.annotation.Condition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	/*, +	 * The bean name for a DispatcherServlet that will be mapped to the root URL "/", +	 */, +	public static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";, +, +		@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME), +		@Conditional(DefaultServletCondition.class), +, +, +	private static class DefaultServletCondition implements Condition {, +, +		@Override, +		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {, +			ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +			String[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,, +					false, false);, +			if (beans.length == 0) {, +				// No dispatcher servlet so no need to ask further questions, +				return true;, +			}, +			if (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +				// An existing bean with the default name, +				return false;, +			}, +			return true;, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java, +import java.util.Arrays;, +, +import org.springframework.context.annotation.Condition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	/*, +	 * The bean name for a DispatcherServlet that will be mapped to the root URL "/", +	 */, +	public static final String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME = "dispatcherServlet";, +, +		@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME), +		@Conditional(DefaultServletCondition.class), +, +, +	private static class DefaultServletCondition implements Condition {, +, +		@Override, +		public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {, +			ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();, +			String[] beans = beanFactory.getBeanNamesForType(DispatcherServlet.class,, +					false, false);, +			if (beans.length == 0) {, +				// No dispatcher servlet so no need to ask further questions, +				return true;, +			}, +			if (Arrays.asList(beans).contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {, +				// An existing bean with the default name, +				return false;, +			}, +			return true;, +		}, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java, +import org.springframework.web.servlet.DispatcherServlet;, +	public void contextAlreadyHasDispatcherServletWithDefaultName() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				DispatcherServletConfiguration.class,, +				EmbeddedContainerConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class);, +		verifyContext();, +	}, +, +	@Test, +	public void contextAlreadyHasDispatcherServlet() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext(, +				SpringServletConfiguration.class, EmbeddedContainerConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class);, +		verifyContext();, +		assertEquals(2, this.context.getBeanNamesForType(DispatcherServlet.class).length);, +	}, +, +	@Test, +		Servlet servlet = this.context, +				.getBean(, +						EmbeddedServletContainerAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME,, +						Servlet.class);, +	@Configuration, +	public static class DispatcherServletConfiguration {, +, +		@Bean, +		public DispatcherServlet dispatcherServlet() {, +			return new DispatcherServlet();]