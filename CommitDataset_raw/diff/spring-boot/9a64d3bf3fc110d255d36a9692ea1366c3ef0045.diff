[+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	private static final int[] INITIAL_BYTE_BITMASK = { 0x7F, 0x1F, 0x0F, 0x07 };, +, +	private static final int SUBSEQUENT_BYTE_BITMASK = 0x3F;, +			int remainingUtfBytes = getNumberOfUtfBytes(b) - 1;, +			b &= INITIAL_BYTE_BITMASK[remainingUtfBytes];, +			for (int j = 0; j < remainingUtfBytes; j++) {, +				b = (b << 6) + (this.bytes[++i] & SUBSEQUENT_BYTE_BITMASK);, +				int remainingUtfBytes = getNumberOfUtfBytes(b) - 1;, +				b &= INITIAL_BYTE_BITMASK[remainingUtfBytes];, +				for (int j = 0; j < remainingUtfBytes; j++) {, +					b = (b << 6) + (this.bytes[++i] & SUBSEQUENT_BYTE_BITMASK);, +	private int getNumberOfUtfBytes(int b) {, +		if ((b & 0x80) == 0) {, +			return 1;, +		}, +		int numberOfUtfBytes = 0;, +		while ((b & 0x80) != 0) {, +			b <<= 1;, +			numberOfUtfBytes++;, +		}, +		return numberOfUtfBytes;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java, +	private static final int[] INITIAL_BYTE_BITMASK = { 0x7F, 0x1F, 0x0F, 0x07 };, +, +	private static final int SUBSEQUENT_BYTE_BITMASK = 0x3F;, +			int remainingUtfBytes = getNumberOfUtfBytes(b) - 1;, +			b &= INITIAL_BYTE_BITMASK[remainingUtfBytes];, +			for (int j = 0; j < remainingUtfBytes; j++) {, +				b = (b << 6) + (this.bytes[++i] & SUBSEQUENT_BYTE_BITMASK);, +				int remainingUtfBytes = getNumberOfUtfBytes(b) - 1;, +				b &= INITIAL_BYTE_BITMASK[remainingUtfBytes];, +				for (int j = 0; j < remainingUtfBytes; j++) {, +					b = (b << 6) + (this.bytes[++i] & SUBSEQUENT_BYTE_BITMASK);, +	private int getNumberOfUtfBytes(int b) {, +		if ((b & 0x80) == 0) {, +			return 1;, +		}, +		int numberOfUtfBytes = 0;, +		while ((b & 0x80) != 0) {, +			b <<= 1;, +			numberOfUtfBytes++;, +		}, +		return numberOfUtfBytes;, +++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/AsciiBytesTests.java, + * Copyright 2012-2018 the original author or authors., +	@Test, +	public void hashCodeFromInstanceMatchesHashCodeFromString() {, +		String name = "fonts/宋体/simsun.ttf";, +		assertThat(new AsciiBytes(name).hashCode()).isEqualTo(AsciiBytes.hashCode(name));, +	}, +, +	@Test, +	public void instanceCreatedFromCharSequenceMatchesSameCharSequence() {, +		String name = "fonts/宋体/simsun.ttf";, +		assertThat(new AsciiBytes(name).matches(name, NO_SUFFIX)).isTrue();, +	}, +]