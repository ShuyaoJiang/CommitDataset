[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.logging.DeferredLog;, +	private final DeferredLog logger = new DeferredLog();, +, +		this.logger.replayTo(ConfigFileApplicationListener.class);, +		addPostProcessors(event.getApplicationContext());, +		private final Log logger = ConfigFileApplicationListener.this.logger;, +, +				this.logger.trace(msg);, +			}, +			else {, +				this.logger.debug(msg);, +					this.logger.debug("Profiles already activated, '" + value, +							+ "' will not be applied");, +				this.logger.debug("Activated profiles ", +						+ StringUtils.collectionToCommaDelimitedString(profiles));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.logging.DeferredLog;, +	private final DeferredLog logger = new DeferredLog();, +, +		this.logger.replayTo(ConfigFileApplicationListener.class);, +		addPostProcessors(event.getApplicationContext());, +		private final Log logger = ConfigFileApplicationListener.this.logger;, +, +				this.logger.trace(msg);, +			}, +			else {, +				this.logger.debug(msg);, +					this.logger.debug("Profiles already activated, '" + value, +							+ "' will not be applied");, +				this.logger.debug("Activated profiles ", +						+ StringUtils.collectionToCommaDelimitedString(profiles));, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/DeferredLog.java, +import org.apache.commons.logging.LogFactory;, +	public void replayTo(Class<?> destination) {, +		replayTo(LogFactory.getLog(destination));, +	}, +, +	public void replayTo(Log destination) {, +			line.replayTo(destination);, +	public static Log replay(Log source, Class<?> destination) {, +		return replay(source, LogFactory.getLog(destination));, +	}, +]