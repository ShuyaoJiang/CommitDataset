[+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.util.Assert;, +	private List<JettyServerCustomizer> jettyServerCustomizers = new ArrayList<>();, +, +		for (JettyServerCustomizer customizer : getServerCustomizers()) {, +			customizer.customize(server);, +		}, +	 * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started. Calling this method will replace any existing customizers., +	 * @param customizers the Jetty customizers to apply, +	 */, +	public void setServerCustomizers(, +			Collection<? extends JettyServerCustomizer> customizers) {, +		Assert.notNull(customizers, "Customizers must not be null");, +		this.jettyServerCustomizers = new ArrayList<>(customizers);, +	}, +, +	/**, +	 * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be applied, +	 * to the {@link Server} before it is created., +	 * @return the Jetty customizers, +	 */, +	public Collection<JettyServerCustomizer> getServerCustomizers() {, +		return this.jettyServerCustomizers;, +	}, +, +	/**, +	 * Add {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started., +	 * @param customizers the customizers to add, +	 */, +	public void addServerCustomizers(JettyServerCustomizer... customizers) {, +		Assert.notNull(customizers, "Customizers must not be null");, +		this.jettyServerCustomizers.addAll(Arrays.asList(customizers));, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import org.springframework.util.Assert;, +	private List<JettyServerCustomizer> jettyServerCustomizers = new ArrayList<>();, +, +		for (JettyServerCustomizer customizer : getServerCustomizers()) {, +			customizer.customize(server);, +		}, +	 * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started. Calling this method will replace any existing customizers., +	 * @param customizers the Jetty customizers to apply, +	 */, +	public void setServerCustomizers(, +			Collection<? extends JettyServerCustomizer> customizers) {, +		Assert.notNull(customizers, "Customizers must not be null");, +		this.jettyServerCustomizers = new ArrayList<>(customizers);, +	}, +, +	/**, +	 * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be applied, +	 * to the {@link Server} before it is created., +	 * @return the Jetty customizers, +	 */, +	public Collection<JettyServerCustomizer> getServerCustomizers() {, +		return this.jettyServerCustomizers;, +	}, +, +	/**, +	 * Add {@link JettyServerCustomizer}s that will be applied to the {@link Server}, +	 * before it is started., +	 * @param customizers the customizers to add, +	 */, +	public void addServerCustomizers(JettyServerCustomizer... customizers) {, +		Assert.notNull(customizers, "Customizers must not be null");, +		this.jettyServerCustomizers.addAll(Arrays.asList(customizers));, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatReactiveWebServerFactory.java, +	private List<TomcatConnectorCustomizer> tomcatConnectorCustomizers = new ArrayList<>();, +, +		for (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {, +			customizer.customize(connector);, +		}, +	 * Set {@link TomcatConnectorCustomizer}s that should be applied to the Tomcat, +	 * {@link Connector} . Calling this method will replace any existing customizers., +	 * @param tomcatConnectorCustomizers the customizers to set, +	 */, +	public void setTomcatConnectorCustomizers(, +			Collection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {, +		Assert.notNull(tomcatConnectorCustomizers,, +				"TomcatConnectorCustomizers must not be null");, +		this.tomcatConnectorCustomizers = new ArrayList<>(tomcatConnectorCustomizers);, +	}, +, +	/**]