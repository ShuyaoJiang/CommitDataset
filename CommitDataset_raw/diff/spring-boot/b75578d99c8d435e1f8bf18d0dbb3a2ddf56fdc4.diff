[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. `@PropertySource` annotations on your `@Configuration` classes., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. `@PropertySource` annotations on your `@Configuration` classes., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +					.get(ConfigurationPropertySources.NAME);, +			String name = ConfigurationPropertySources.NAME;, +							propertySources.addAfter(name, nested);, +							name = nested.getName();, +						propertySources.addAfter(name, propertySource);, +				propertySources.remove(ConfigurationPropertySources.NAME);, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. `@PropertySource` annotations on your `@Configuration` classes., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +					.get(ConfigurationPropertySources.NAME);, +			String name = ConfigurationPropertySources.NAME;, +							propertySources.addAfter(name, nested);, +							name = nested.getName();, +						propertySources.addAfter(name, propertySource);, +				propertySources.remove(ConfigurationPropertySources.NAME);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertySourcesBindingTests.java, +	public void overridingOfPropertiesOrderOfAtPropertySources() {, +		assertThat(this.properties.getBar(), is("override"));, +	}, +, +	@Test, +	public void overridingOfPropertiesAndBindToAtValue() {, +	@Test, +	public void overridingOfPropertiesOrderOfApplicationProperties() {, +		assertThat(this.properties.getFoo(), is("bucket"));, +	}, +, +	@PropertySources({ @PropertySource("classpath:/some.properties"),, +			@PropertySource("classpath:/override.properties") }), +		private String bar;, +, +		public String getBar() {, +			return this.bar;, +		}, +, +		public void setBar(String bar) {, +			this.bar = bar;, +		}, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. `@PropertySource` annotations on your `@Configuration` classes., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +					.get(ConfigurationPropertySources.NAME);, +			String name = ConfigurationPropertySources.NAME;, +							propertySources.addAfter(name, nested);, +							name = nested.getName();, +						propertySources.addAfter(name, propertySource);, +				propertySources.remove(ConfigurationPropertySources.NAME);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertySourcesBindingTests.java, +	public void overridingOfPropertiesOrderOfAtPropertySources() {, +		assertThat(this.properties.getBar(), is("override"));, +	}, +, +	@Test, +	public void overridingOfPropertiesAndBindToAtValue() {, +	@Test, +	public void overridingOfPropertiesOrderOfApplicationProperties() {, +		assertThat(this.properties.getFoo(), is("bucket"));, +	}, +, +	@PropertySources({ @PropertySource("classpath:/some.properties"),, +			@PropertySource("classpath:/override.properties") }), +		private String bar;, +, +		public String getBar() {, +			return this.bar;, +		}, +, +		public void setBar(String bar) {, +			this.bar = bar;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +		System.clearProperty("the.property");, +					return new ByteArrayResource("the.property: fromcustom".getBytes(),, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +			properties.put("the.property", "fromlocalfile");, +			String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +				new SimpleCommandLinePropertySource("--the.property=fromcommandline"));, +		String property = this.environment.getProperty("the.property");, +		System.setProperty("the.property", "fromsystem");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		property = this.environment.getProperty("the.property");, +		String property = this.environment.getProperty("the.property");, +		String property = context.getEnvironment().getProperty("the.property");, +		String property = context.getEnvironment().getProperty("the.property");, +		String property = context.getEnvironment().getProperty("the.property");]