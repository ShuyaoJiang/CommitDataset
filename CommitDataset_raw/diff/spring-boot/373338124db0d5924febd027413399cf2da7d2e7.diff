[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		configureHeadlessProperty();, +		SpringApplicationRunListeners listeners = getRunListeners(args);, +		listeners.started();, +		try {, +			context = doRun(listeners, args);, +			stopWatch.stop();, +			if (this.logStartupInfo) {, +				new StartupInfoLogger(this.mainApplicationClass).logStarted(, +						getApplicationLog(), stopWatch);, +			}, +			return context;, +		}, +		catch (Throwable ex) {, +			try {, +				listeners.finished(context, ex);, +				this.log.error("Application startup failed", ex);, +			}, +			finally {, +				if (context != null) {, +					context.close();, +				}, +			}, +			ReflectionUtils.rethrowRuntimeException(ex);, +			return context;, +		}, +	/**, +	 * @param listeners, +	 * @param args, +	 * @return, +	 */, +	private ConfigurableApplicationContext doRun(SpringApplicationRunListeners listeners,, +			String... args) {, +		ConfigurableApplicationContext context;, +		listeners.environmentPrepared(environment);, +		listeners.contextPrepared(context);, +		listeners.contextLoaded(context);, +		listeners.finished(context, null);, +, +	private void configureHeadlessProperty() {, +		System.setProperty(, +				SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,, +				System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,, +						Boolean.toString(this.headless)));, +	private SpringApplicationRunListeners getRunListeners(String[] args) {, +		Class<?>[] types = new Class<?>[] { SpringApplication.class, String[].class };, +		return new SpringApplicationRunListeners(this.log, getSpringFactoriesInstances(, +				SpringApplicationRunListener.class, types, this, args));, +	 * Defaults to {@code true}., +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		configureHeadlessProperty();, +		SpringApplicationRunListeners listeners = getRunListeners(args);, +		listeners.started();, +		try {, +			context = doRun(listeners, args);, +			stopWatch.stop();, +			if (this.logStartupInfo) {, +				new StartupInfoLogger(this.mainApplicationClass).logStarted(, +						getApplicationLog(), stopWatch);, +			}, +			return context;, +		}, +		catch (Throwable ex) {, +			try {, +				listeners.finished(context, ex);, +				this.log.error("Application startup failed", ex);, +			}, +			finally {, +				if (context != null) {, +					context.close();, +				}, +			}, +			ReflectionUtils.rethrowRuntimeException(ex);, +			return context;, +		}, +	/**, +	 * @param listeners, +	 * @param args, +	 * @return, +	 */, +	private ConfigurableApplicationContext doRun(SpringApplicationRunListeners listeners,, +			String... args) {, +		ConfigurableApplicationContext context;, +		listeners.environmentPrepared(environment);, +		listeners.contextPrepared(context);, +		listeners.contextLoaded(context);, +		listeners.finished(context, null);, +, +	private void configureHeadlessProperty() {, +		System.setProperty(, +				SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,, +				System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,, +						Boolean.toString(this.headless)));, +	private SpringApplicationRunListeners getRunListeners(String[] args) {, +		Class<?>[] types = new Class<?>[] { SpringApplication.class, String[].class };, +		return new SpringApplicationRunListeners(this.log, getSpringFactoriesInstances(, +				SpringApplicationRunListener.class, types, this, args));, +	 * Defaults to {@code true}., +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationRunListeners.java, +/*]