[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			port = scanForPort(port);, +	private Integer scanForPort(Integer port) {, +		boolean found = false;, +		int delta = 1;, +		port = port == null ? 8080 : port;, +		while (!found) {, +			try {, +				port = SocketUtils.findAvailableTcpPort(port, port + delta);, +				found = true;, +			}, +			catch (IllegalStateException e) {, +				if (delta > 65536) {, +					throw e;, +				}, +				delta = delta > 5 ? delta > 100 ? delta * 4 : delta * 3 : delta * 2;, +			}, +			port = port + delta;, +		}, +		return port;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			port = scanForPort(port);, +	private Integer scanForPort(Integer port) {, +		boolean found = false;, +		int delta = 1;, +		port = port == null ? 8080 : port;, +		while (!found) {, +			try {, +				port = SocketUtils.findAvailableTcpPort(port, port + delta);, +				found = true;, +			}, +			catch (IllegalStateException e) {, +				if (delta > 65536) {, +					throw e;, +				}, +				delta = delta > 5 ? delta > 100 ? delta * 4 : delta * 3 : delta * 2;, +			}, +			port = port + delta;, +		}, +		return port;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, +	@Test, +	public void testPortScanFromHigher() throws Exception {, +		this.properties.setScan(true);, +		this.properties.setPort(5678);, +		ConfigurableEmbeddedServletContainerFactory factory = new MockEmbeddedServletContainerFactory();, +		this.properties.customize(factory);, +		assertTrue(factory.getPort() < 6000);, +	}, +]