[+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +import org.junit.Ignore;, +	@Ignore, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +import org.junit.Ignore;, +	@Ignore, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java, +		YamlConfigurationFactory<Foo> factory = new YamlConfigurationFactory<Foo>(, +				Foo.class);, +		factory.setYaml(yaml);, +		factory.setExceptionIfInvalid(true);, +		factory.setPropertyAliases(this.aliases);, +		factory.setValidator(this.validator);, +		factory.setMessageSource(new StaticMessageSource());, +		factory.afterPropertiesSet();, +		return factory.getObject();, +	}, +, +	private Jee createJee(final String yaml) throws Exception {, +		YamlConfigurationFactory<Jee> factory = new YamlConfigurationFactory<Jee>(, +				Jee.class);, +		factory.setYaml(yaml);, +		factory.setExceptionIfInvalid(true);, +		factory.setPropertyAliases(this.aliases);, +		factory.setValidator(this.validator);, +		factory.setMessageSource(new StaticMessageSource());, +		factory.afterPropertiesSet();, +		return factory.getObject();, +	@Test, +	public void testWithPeriodInKey() throws Exception {, +		Jee jee = createJee("mymap:\n  ? key1.key2\n  : value");, +		assertEquals("value", jee.mymap.get("key1.key2"));, +	}, +, +	private static class Jee {, +		public Map<Object, Object> mymap;, +	}, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +import org.junit.Ignore;, +	@Ignore, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java, +		YamlConfigurationFactory<Foo> factory = new YamlConfigurationFactory<Foo>(, +				Foo.class);, +		factory.setYaml(yaml);, +		factory.setExceptionIfInvalid(true);, +		factory.setPropertyAliases(this.aliases);, +		factory.setValidator(this.validator);, +		factory.setMessageSource(new StaticMessageSource());, +		factory.afterPropertiesSet();, +		return factory.getObject();, +	}, +, +	private Jee createJee(final String yaml) throws Exception {, +		YamlConfigurationFactory<Jee> factory = new YamlConfigurationFactory<Jee>(, +				Jee.class);, +		factory.setYaml(yaml);, +		factory.setExceptionIfInvalid(true);, +		factory.setPropertyAliases(this.aliases);, +		factory.setValidator(this.validator);, +		factory.setMessageSource(new StaticMessageSource());, +		factory.afterPropertiesSet();, +		return factory.getObject();, +	@Test, +	public void testWithPeriodInKey() throws Exception {, +		Jee jee = createJee("mymap:\n  ? key1.key2\n  : value");, +		assertEquals("value", jee.mymap.get("key1.key2"));, +	}, +, +	private static class Jee {, +		public Map<Object, Object> mymap;, +	}, +++ b/spring-boot/src/test/java/org/springframework/boot/config/YamlMapFactoryBeanTests.java, +import java.util.LinkedHashMap;, +import static org.junit.Assert.assertTrue;, +	@Test, +	public void testMapWithPeriodsInKey() throws Exception {, +		this.factory.setResources(new ByteArrayResource[] { new ByteArrayResource(, +				"foo:\n  ? key1.key2\n  : value".getBytes()) });, +		Map<String, Object> map = this.factory.getObject();, +		assertEquals(1, map.size());, +		assertTrue(map.containsKey("foo"));, +		Object object = map.get("foo");, +		assertTrue(object instanceof LinkedHashMap);, +		@SuppressWarnings("unchecked"), +		Map<String, Object> sub = (Map<String, Object>) object;, +		assertTrue(sub.containsKey("key1.key2"));, +		assertTrue(sub.get("key1.key2").equals("value"));, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +import org.junit.Ignore;, +	@Ignore, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java, +		YamlConfigurationFactory<Foo> factory = new YamlConfigurationFactory<Foo>(, +				Foo.class);, +		factory.setYaml(yaml);, +		factory.setExceptionIfInvalid(true);, +		factory.setPropertyAliases(this.aliases);, +		factory.setValidator(this.validator);, +		factory.setMessageSource(new StaticMessageSource());]