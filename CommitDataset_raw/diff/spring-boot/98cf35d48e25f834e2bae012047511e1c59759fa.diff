[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java, + * Copyright 2012-2017 the original author or authors., +			return annotation.annotationType().getName().startsWith("org.spockframework."), +					|| annotation.annotationType().getName().startsWith("spock.");, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java, + * Copyright 2012-2017 the original author or authors., +			return annotation.annotationType().getName().startsWith("org.spockframework."), +					|| annotation.annotationType().getName().startsWith("spock.");, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/ImportsContextCustomizerTests.java, + * Copyright 2012-2017 the original author or authors., +import spock.lang.Issue;, +import spock.lang.Stepwise;, +	public void customizersForTestClassesWithDifferentSpockFrameworkAnnotationsAreEqual() {, +		assertThat(, +				new ImportsContextCustomizer(FirstSpockFrameworkAnnotatedTestClass.class)), +								SecondSpockFrameworkAnnotatedTestClass.class));, +	}, +, +	@Test, +	public void customizersForTestClassesWithDifferentSpockLangAnnotationsAreEqual() {, +		assertThat(new ImportsContextCustomizer(FirstSpockLangAnnotatedTestClass.class)), +				.isEqualTo(new ImportsContextCustomizer(, +						SecondSpockLangAnnotatedTestClass.class));, +	static class FirstSpockFrameworkAnnotatedTestClass {, +	static class SecondSpockFrameworkAnnotatedTestClass {, +, +	}, +, +	@Stepwise, +	static class FirstSpockLangAnnotatedTestClass {, +, +	}, +, +	@Issue("1234"), +	static class SecondSpockLangAnnotatedTestClass {]