[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContext;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.web.ConnectInterceptor;, +import org.springframework.social.connect.web.DisconnectInterceptor;, +import org.springframework.social.connect.web.ProviderSignInController;, +import org.springframework.social.connect.web.ProviderSignInInterceptor;, +import org.springframework.social.connect.web.SignInAdapter;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +		@Autowired(required = false), +		private List<ConnectInterceptor<?>> connectInterceptors;, +, +		@Autowired(required = false), +		private List<DisconnectInterceptor<?>> disconnectInterceptors;, +, +		@Autowired(required = false), +		private List<ProviderSignInInterceptor<?>> signInInterceptors;, +, +				ConnectionFactoryLocator factoryLocator, ConnectionRepository repository) {, +			ConnectController controller = new ConnectController(factoryLocator,, +					repository);, +			if (!CollectionUtils.isEmpty(this.connectInterceptors)) {, +				controller.setConnectInterceptors(this.connectInterceptors);, +			}, +			if (!CollectionUtils.isEmpty(this.disconnectInterceptors)) {, +				controller.setDisconnectInterceptors(this.disconnectInterceptors);, +			}, +			return controller;, +			BeanNameViewResolver viewResolver = new BeanNameViewResolver();, +			viewResolver.setOrder(Integer.MIN_VALUE);, +			return viewResolver;, +		@Bean, +		@ConditionalOnBean(SignInAdapter.class), +		@ConditionalOnMissingBean(ProviderSignInController.class), +		public ProviderSignInController signInController(, +				ConnectionFactoryLocator factoryLocator,, +				UsersConnectionRepository usersRepository, SignInAdapter signInAdapter) {, +			ProviderSignInController controller = new ProviderSignInController(, +					factoryLocator, usersRepository, signInAdapter);, +			if (!CollectionUtils.isEmpty(this.signInInterceptors)) {, +				controller.setSignInInterceptors(this.signInInterceptors);, +			}, +			return controller;, +		}, +, +	}, +, +	@Configuration, +	@EnableSocial, +	@ConditionalOnWebApplication, +	@ConditionalOnMissingClass(SecurityContextHolder.class), +	protected static class AnonymousUserIdSourceConfig extends SocialConfigurerAdapter {, +, +	@Configuration, +	@EnableSocial, +	@ConditionalOnWebApplication, +	@ConditionalOnClass(SecurityContextHolder.class), +	protected static class AuthenticationUserIdSourceConfig extends, +			SocialConfigurerAdapter {, +, +		@Override, +		public UserIdSource getUserIdSource() {, +			return new SecurityContextUserIdSource();, +		}, +, +	}, +, +	private static class SecurityContextUserIdSource implements UserIdSource {, +, +		@Override, +		public String getUserId() {, +			SecurityContext context = SecurityContextHolder.getContext();, +			Authentication authentication = context.getAuthentication();, +			Assert.state(authentication != null, "Unable to get a ", +					+ "ConnectionRepository: no user signed in");, +			return authentication.getName();, +		}, +, +	}]