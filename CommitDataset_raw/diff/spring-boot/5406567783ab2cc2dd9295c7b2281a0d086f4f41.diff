[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		if (context.isProcessingName(name)) {, +		return context.withName(name, () -> {, +		private final Deque<ConfigurationPropertyName> names = new ArrayDeque<>();, +		public <T> T withName(ConfigurationPropertyName name, Supplier<T> supplier) {, +			this.names.push(name);, +				this.names.pop();, +		public boolean isProcessingName(ConfigurationPropertyName name) {, +			return this.names.contains(name);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		if (context.isProcessingName(name)) {, +		return context.withName(name, () -> {, +		private final Deque<ConfigurationPropertyName> names = new ArrayDeque<>();, +		public <T> T withName(ConfigurationPropertyName name, Supplier<T> supplier) {, +			this.names.push(name);, +				this.names.pop();, +		public boolean isProcessingName(ConfigurationPropertyName name) {, +			return this.names.contains(name);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +	@Test, +	public void nestedMapsShouldNotBindToNull() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.value", "one");, +		source.put("foo.foos.foo1.value", "two");, +		source.put("foo.foos.foo2.value", "three");, +		this.sources.add(source);, +		BindResult<Foo> foo = this.binder.bind("foo", Foo.class);, +		assertThat(foo.get().getValue()).isNotNull();, +		assertThat(foo.get().getFoos().get("foo1").getValue()).isEqualTo("two");, +		assertThat(foo.get().getFoos().get("foo2").getValue()).isEqualTo("three");, +	}, +, +	static class Foo {, +, +		private String value;, +, +		private Map<String, Foo> foos = new LinkedHashMap<>();, +, +		public Map<String, Foo> getFoos() {, +			return this.foos;, +		}, +, +		public String getValue() {, +			return this.value;, +		}, +, +		public void setValue(String value) {, +			this.value = value;, +		}, +, +	}, +]