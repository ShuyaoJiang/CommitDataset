[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. The current directory, +. The classpath root, +to an explicit location using the `spring.config.location` environment property (comma-, +separated list of directory locations, or file paths)., +or, +, +[indent=0], +----, +	$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties, +----, +, +If `spring.config.location` contains directories (as opposed to files), +they should end in "/" (and will be appended with the names generated, +from `spring.config.name` before being loaded). The default search, +path `classpath:,classpath:/config,file:,file:config/` is always used,, +irrespective of the value of `spring.config.location`. In that way you, +can set up default values for your app in `application.properties` (or, +whatever other basename you choose with `spring.config.name`) and, +override it at runtime with a different file, keeping the defaults., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. The current directory, +. The classpath root, +to an explicit location using the `spring.config.location` environment property (comma-, +separated list of directory locations, or file paths)., +or, +, +[indent=0], +----, +	$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties, +----, +, +If `spring.config.location` contains directories (as opposed to files), +they should end in "/" (and will be appended with the names generated, +from `spring.config.name` before being loaded). The default search, +path `classpath:,classpath:/config,file:,file:config/` is always used,, +irrespective of the value of `spring.config.location`. In that way you, +can set up default values for your app in `application.properties` (or, +whatever other basename you choose with `spring.config.name`) and, +override it at runtime with a different file, keeping the defaults., +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.env.EnumerableCompositePropertySource;, +	// Note the order is from least to most specific (last one wins), +	private static final String DEFAULT_SEARCH_LOCATIONS = "classpath:/,classpath:/config/,file:./,file:./config/";, +	 * Locations are considered in the order specified, with later items taking precedence, +	 * (like a map merge)., +			// last so that it is first out of the queue (active profiles will then, +			// override any settings in the defaults when the list is reversed later)., +					if (!location.endsWith("/")) {, +						// location is a filename already, so don't search for more, +						// filenames, +						load(location, null, profile);, +					}, +					else {, +			}, +			String group = "profile=" + (profile == null ? "" : profile);, +			if (!StringUtils.hasText(name)) {, +				// Try to load directly from the location, +				loadIntoGroup(group, location, profile);, +			}, +			else {, +				// Search for a file with the given name, +						loadIntoGroup(group, location + name + "-" + profile + "." + ext,, +								null);, +						// Sometimes people put "spring.profiles: dev" in, +						// application-dev.yml (gh-340). Arguably we should try and error, +						// out on that, but we can be kind and load it anyway., +						loadIntoGroup(group, location + name + "-" + profile + "." + ext,, +								profile);, +					// Also try the profile specific section (if any) of the normal file, +					loadIntoGroup(group, location + name + "." + ext, profile);, +		private PropertySource<?> loadIntoGroup(String identifier, String location,, +				String profile) throws IOException {, +			Resource resource = this.resourceLoader.getResource(location);, +				String name = "applicationConfig: [" + location + "]";, +				String group = "applicationConfig: [" + identifier + "]";, +						group, name, profile);, +		private Set<String> getSearchLocations() {, +			// User-configured settings take precedence, so we do them first, +			locations.addAll(asResolvedSet(, +					ConfigFileApplicationListener.this.searchLocations,, +					DEFAULT_SEARCH_LOCATIONS));, +		private Set<String> getSearchNames() {, +					if (propertySource instanceof EnumerableCompositePropertySource) {, +						EnumerableCompositePropertySource composite = (EnumerableCompositePropertySource) propertySource;, +						for (PropertySource<?> nested : composite.getSource()) {, +							propertySources.addLast(nested);, +						}, +					}, +					else {, +		}, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. The current directory, +. The classpath root, +to an explicit location using the `spring.config.location` environment property (comma-, +separated list of directory locations, or file paths)., +or, +, +[indent=0], +----]