[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		return ResolvableTypeDescriptor.forBindable(target), +				.convert(this.conversionService, value);, +		result = convert(result, target);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		return ResolvableTypeDescriptor.forBindable(target), +				.convert(this.conversionService, value);, +		result = convert(result, target);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +		return ResolvableTypeDescriptor.forType(type).convert(conversionService, value);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		return ResolvableTypeDescriptor.forBindable(target), +				.convert(this.conversionService, value);, +		result = convert(result, target);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +		return ResolvableTypeDescriptor.forType(type).convert(conversionService, value);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +					Object key = convert(getKeyName(entryName), this.keyType);, +			return canConvert(value, this.valueType);, +		}, +, +		private boolean canConvert(Object source, ResolvableType targetType) {, +			return ResolvableTypeDescriptor.forType(targetType), +					.canConvert(getContext().getConversionService(), source);, +		}, +, +		private Object convert(Object source, ResolvableType targetType) {, +			return ResolvableTypeDescriptor.forType(targetType), +					.convert(getContext().getConversionService(), source);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java, +		return ResolvableTypeDescriptor.forBindable(target), +				.convert(this.conversionService, value);, +		result = convert(result, target);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +		return ResolvableTypeDescriptor.forType(type).convert(conversionService, value);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +					Object key = convert(getKeyName(entryName), this.keyType);, +			return canConvert(value, this.valueType);, +		}, +, +		private boolean canConvert(Object source, ResolvableType targetType) {, +			return ResolvableTypeDescriptor.forType(targetType), +					.canConvert(getContext().getConversionService(), source);, +		}, +, +		private Object convert(Object source, ResolvableType targetType) {, +			return ResolvableTypeDescriptor.forType(targetType), +					.convert(getContext().getConversionService(), source);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/ResolvableTypeDescriptor.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties.bind;, +, +import java.lang.annotation.Annotation;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +, +/**, + * A {@link TypeDescriptor} backed by a {@link ResolvableType}., + *, + * @author Phillip Webb, + */, +@SuppressWarnings("serial"), +final class ResolvableTypeDescriptor extends TypeDescriptor {, +, +	private ResolvableTypeDescriptor(ResolvableType resolvableType,, +			Annotation[] annotations) {, +		super(resolvableType, null, annotations);, +	}, +, +	/**, +	 * Determine if the specified source object can be converted to this type., +	 * @param conversionService the backing conversion service, +	 * @param source the source to check, +	 * @return {@code true} if conversion can be performed, +	 */, +	public boolean canConvert(ConversionService conversionService, Object source) {, +		TypeDescriptor sourceType = TypeDescriptor.forObject(source);, +		return conversionService.canConvert(sourceType, this);, +	}, +, +	/**, +	 * Convert the given source object into this type.]