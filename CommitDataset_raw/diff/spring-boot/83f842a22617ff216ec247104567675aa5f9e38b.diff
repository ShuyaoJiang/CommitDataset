[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/.travis.yml, +++ b/pom.xml, +	<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.4.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	EndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter();, +	static class JmxCondition extends SpringBootCondition {, +, +		@Override, +		public ConditionOutcome getMatchOutcome(ConditionContext context,, +				AnnotatedTypeMetadata metadata) {, +			String endpointEnabled = context.getEnvironment().getProperty(, +					"endpoints.jmx.enabled", "true");, +			String jmxEnabled = context.getEnvironment().getProperty(, +					"spring.jmx.enabled", "true");, +			return new ConditionOutcome("true".equalsIgnoreCase(endpointEnabled), +					&& "true".equalsIgnoreCase(jmxEnabled),, +					"JMX endpoint and JMX enabled");, +, +		}, +, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.boot.autoconfigure.condition.SpringBootCondition;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.context.annotation.ConditionContext;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +	@ConditionalOnEnabledEndpoint("env"), +	@ConditionalOnEnabledEndpoint("health"), +	@ConditionalOnEnabledEndpoint("metrics"), +	@ConditionalOnEnabledEndpoint(value = "shutdown", enabledByDefault = false), +	/**, +	 * {@link Conditional} that checks whether or not an endpoint is enabled. Matches if, +	 * the value of the {@code endpoints.<name>.enabled} property is {@code true}. Does, +	 * not match if the property's value or {@code enabledByDefault} is {@code false}., +	 * Otherwise, matches if the value of the {@code endpoints.enabled} property is, +	 * {@code true} or if the property is not configured., +	 *, +	 * @since 1.2.4, +	 */, +	@Conditional(OnEnabledEndpointCondition.class), +	@Retention(RetentionPolicy.RUNTIME), +	@Target(ElementType.METHOD), +	public static @interface ConditionalOnEnabledEndpoint {, +, +		/**, +		 * The name of the endpoint., +		 * @return The name of the endpoint]