[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +	}, +, +	private static ConditionOutcome checkServlets(, +			ConfigurableListableBeanFactory beanFactory) {, +	private static ConditionOutcome checkServletRegistrations(, +			return ConditionOutcome.noMatch("found non-ServletRegistrationBean named ", +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration.java, +	}, +, +	private static ConditionOutcome checkServlets(, +			ConfigurableListableBeanFactory beanFactory) {, +	private static ConditionOutcome checkServletRegistrations(, +			return ConditionOutcome.noMatch("found non-ServletRegistrationBean named ", +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfigurationTests.java, +import org.springframework.beans.factory.UnsatisfiedDependencyException;, +	// If you override either the dispatcherServlet or its registration you have to, +	// provide both..., +	@Test(expected = UnsatisfiedDependencyException.class), +	public void registrationOverrideWithAutowiredServlet() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(CustomAutowiredRegistration.class,, +				ServerPropertiesAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class);, +		this.context.setServletContext(new MockServletContext());, +		this.context.refresh();, +		ServletRegistrationBean registration = this.context, +				.getBean(ServletRegistrationBean.class);, +		assertEquals("[/foo]", registration.getUrlMappings().toString());, +		assertEquals("customDispatcher", registration.getServletName());, +		assertEquals(1, this.context.getBeanNamesForType(DispatcherServlet.class).length);, +	}, +, +	@Configuration, +	protected static class CustomAutowiredRegistration {, +		@Bean, +		public ServletRegistrationBean dispatcherServletRegistration(, +				DispatcherServlet dispatcherServlet) {, +			ServletRegistrationBean registration = new ServletRegistrationBean(, +					dispatcherServlet, "/foo");, +			registration.setName("customDispatcher");, +			return registration;, +		}, +	}, +]