[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +import java.util.Date;, +, +	public void testNameAndTypeOnBeanCondition() {, +		this.context.register(FooConfiguration.class,, +				OnBeanNameAndTypeConfiguration.class);, +		this.context.refresh();, +		/*, +		 * Arguably this should be true, but as things are implemented the conditions, +		 * specified in the different attributes of @ConditionalOnBean are combined with, +		 * logical OR (not AND) so if any of them match the condition is true., +		 */, +		assertFalse(this.context.containsBean("bar"));, +	}, +, +	@Test, +	@ConditionalOnMissingBean(name = "foo", value = Date.class), +	protected static class OnBeanNameAndTypeConfiguration {, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +import java.util.Date;, +, +	public void testNameAndTypeOnBeanCondition() {, +		this.context.register(FooConfiguration.class,, +				OnBeanNameAndTypeConfiguration.class);, +		this.context.refresh();, +		/*, +		 * Arguably this should be true, but as things are implemented the conditions, +		 * specified in the different attributes of @ConditionalOnBean are combined with, +		 * logical OR (not AND) so if any of them match the condition is true., +		 */, +		assertFalse(this.context.containsBean("bar"));, +	}, +, +	@Test, +	@ConditionalOnMissingBean(name = "foo", value = Date.class), +	protected static class OnBeanNameAndTypeConfiguration {, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClassTests.java, +	@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml"), +	@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml"), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +import java.util.Date;, +, +	public void testNameAndTypeOnBeanCondition() {, +		this.context.register(FooConfiguration.class,, +				OnBeanNameAndTypeConfiguration.class);, +		this.context.refresh();, +		/*, +		 * Arguably this should be true, but as things are implemented the conditions, +		 * specified in the different attributes of @ConditionalOnBean are combined with, +		 * logical OR (not AND) so if any of them match the condition is true., +		 */, +		assertFalse(this.context.containsBean("bar"));, +	}, +, +	@Test, +	@ConditionalOnMissingBean(name = "foo", value = Date.class), +	protected static class OnBeanNameAndTypeConfiguration {, +		@Bean, +		public String bar() {, +			return "bar";, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnClassTests.java, +	@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml"), +	@ImportResource("org/springframework/boot/autoconfigure/condition/foo.xml"), +++ b/spring-boot-autoconfigure/src/test/resources/org/springframework/boot/autoconfigure/condition/foo.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">, +, +	<bean id="foo" class="java.lang.String">, +		<constructor-arg value="foo" />, +	</bean>, +, +</beans>, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java, +import java.util.Date;, +, +	public void testNameAndTypeOnBeanCondition() {, +		this.context.register(FooConfiguration.class,, +				OnBeanNameAndTypeConfiguration.class);, +		this.context.refresh();, +		/*]