[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +import java.util.Collections;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.Assert;, +public class DataSourceHealthIndicator extends AbstractHealthIndicator implements, +		InitializingBean {, +	private static final Map<String, String> PRODUCT_SPECIFIC_QUERIES;, +		Map<String, String> queries = new HashMap<String, String>();, +		PRODUCT_SPECIFIC_QUERIES = Collections.unmodifiableMap(queries);, +	private DataSource dataSource;, +, +	private String query;, +, +	private JdbcTemplate jdbcTemplate;, +	 * Create a new {@link DataSourceHealthIndicator} using the specified, +	 * {@link DataSource}., +	 * @param dataSource the data source, +	 */, +	public DataSourceHealthIndicator(DataSource dataSource) {, +		this(dataSource, null);, +	}, +, +	/**, +	 * Create a new {@link DataSourceHealthIndicator} using the specified, +	 * {@link DataSource} and validation query., +	@Override, +	public void afterPropertiesSet() throws Exception {, +		Assert.state(this.dataSource != null,, +				"DataSource for DataSourceHealthIndicator must be specified");, +		String validationQuery = getValidationQuery(product);, +		if (StringUtils.hasText(validationQuery)) {, +				List<Object> results = this.jdbcTemplate.query(validationQuery,, +	protected String getValidationQuery(String product) {, +			query = PRODUCT_SPECIFIC_QUERIES.get(product);, +	 * Set a specific validation query to use to validate a connection. If none is set, a, +	 * default validation query is used., +	 * Return the validation query or {@code null}., +		return this.query;, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java, +import java.util.Collections;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.Assert;, +public class DataSourceHealthIndicator extends AbstractHealthIndicator implements, +		InitializingBean {, +	private static final Map<String, String> PRODUCT_SPECIFIC_QUERIES;, +		Map<String, String> queries = new HashMap<String, String>();, +		PRODUCT_SPECIFIC_QUERIES = Collections.unmodifiableMap(queries);, +	private DataSource dataSource;, +, +	private String query;, +, +	private JdbcTemplate jdbcTemplate;, +	 * Create a new {@link DataSourceHealthIndicator} using the specified, +	 * {@link DataSource}., +	 * @param dataSource the data source, +	 */, +	public DataSourceHealthIndicator(DataSource dataSource) {, +		this(dataSource, null);, +	}, +, +	/**, +	 * Create a new {@link DataSourceHealthIndicator} using the specified, +	 * {@link DataSource} and validation query., +	@Override, +	public void afterPropertiesSet() throws Exception {, +		Assert.state(this.dataSource != null,, +				"DataSource for DataSourceHealthIndicator must be specified");, +		String validationQuery = getValidationQuery(product);, +		if (StringUtils.hasText(validationQuery)) {, +				List<Object> results = this.jdbcTemplate.query(validationQuery,, +	protected String getValidationQuery(String product) {, +			query = PRODUCT_SPECIFIC_QUERIES.get(product);, +	 * Set a specific validation query to use to validate a connection. If none is set, a, +	 * default validation query is used., +	 * Return the validation query or {@code null}., +		return this.query;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.ApplicationHealthIndicator;, +		this.context.register(PropertyPlaceholderAutoConfiguration.class,, +				DataSourceProperties.class, DataSourceConfig.class,, +				DataSourcePoolMetadataProvidersConfiguration.class,, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.datasource.validation-query:SELECT from FOOBAR");, +		Map<String, HealthIndicator> beans = this.context, +				.getBeansOfType(HealthIndicator.class);, +					.url("jdbc:hsqldb:mem:test").username("sa").build();, +, +]