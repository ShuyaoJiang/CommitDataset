[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		PropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);, +		if (attached != null && attached.getSource() != sources) {, +			sources.remove(ATTACHED_PROPERTY_SOURCE_NAME);, +			attached = null;, +		}, +		if (attached == null) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, + * Copyright 2012-2018 the original author or authors., +		PropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);, +		if (attached != null && attached.getSource() != sources) {, +			sources.remove(ATTACHED_PROPERTY_SOURCE_NAME);, +			attached = null;, +		}, +		if (attached == null) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertySourcesTests.java, + * Copyright 2012-2018 the original author or authors., +	public void attachShouldReAttachInMergedSetup() {, +		ConfigurableEnvironment parent = new StandardEnvironment();, +		ConfigurationPropertySources.attach(parent);, +		parent.getProperty("my.example-property");, +		ConfigurableEnvironment child = new StandardEnvironment();, +		child.merge(parent);, +		child.getPropertySources().addLast(new MapPropertySource("config",, +				Collections.singletonMap("my.example_property", "1234")));, +		ConfigurationPropertySources.attach(child);, +		assertThat(child.getProperty("my.example-property")).isEqualTo("1234");, +	}, +, +	@Test]