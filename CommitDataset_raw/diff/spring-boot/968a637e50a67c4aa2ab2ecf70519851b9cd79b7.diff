[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/reactive/ReactiveOAuth2ClientAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +, +import reactor.core.publisher.Flux;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;, +import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;, +import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;, +import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;, +import org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;, +import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;, +@EnableConfigurationProperties(OAuth2ClientProperties.class), +@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, ClientRegistration.class }), +	private final OAuth2ClientProperties properties;, +, +	public ReactiveOAuth2ClientAutoConfiguration(OAuth2ClientProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@Conditional(ClientsConfiguredCondition.class), +	@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class), +	public InMemoryReactiveClientRegistrationRepository clientRegistrationRepository() {, +		List<ClientRegistration> registrations = new ArrayList<>(, +				OAuth2ClientPropertiesRegistrationAdapter, +						.getClientRegistrations(this.properties).values());, +		return new InMemoryReactiveClientRegistrationRepository(registrations);, +	}, +, +	@Bean, +	@ConditionalOnBean(ReactiveClientRegistrationRepository.class), +	@ConditionalOnMissingBean, +	public ReactiveOAuth2AuthorizedClientService authorizedClientService(, +			ReactiveClientRegistrationRepository clientRegistrationRepository) {, +		return new InMemoryReactiveOAuth2AuthorizedClientService(, +				clientRegistrationRepository);, +	}, +, +	@Bean, +	@ConditionalOnBean(ReactiveOAuth2AuthorizedClientService.class), +	@ConditionalOnMissingBean, +	public ServerOAuth2AuthorizedClientRepository authorizedClientRepository(, +			ReactiveOAuth2AuthorizedClientService authorizedClientService) {, +		return new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(, +				authorizedClientService);, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/reactive/ReactiveOAuth2ClientAutoConfiguration.java, +import java.util.ArrayList;, +import java.util.List;, +, +import reactor.core.publisher.Flux;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.security.oauth2.client.ClientsConfiguredCondition;, +import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;, +import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientPropertiesRegistrationAdapter;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;, +import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;, +import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;, +import org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;, +import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;, +@EnableConfigurationProperties(OAuth2ClientProperties.class), +@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, ClientRegistration.class }), +	private final OAuth2ClientProperties properties;, +, +	public ReactiveOAuth2ClientAutoConfiguration(OAuth2ClientProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@Conditional(ClientsConfiguredCondition.class), +	@ConditionalOnMissingBean(ReactiveClientRegistrationRepository.class), +	public InMemoryReactiveClientRegistrationRepository clientRegistrationRepository() {, +		List<ClientRegistration> registrations = new ArrayList<>(, +				OAuth2ClientPropertiesRegistrationAdapter, +						.getClientRegistrations(this.properties).values());, +		return new InMemoryReactiveClientRegistrationRepository(registrations);, +	}, +, +	@Bean, +	@ConditionalOnBean(ReactiveClientRegistrationRepository.class), +	@ConditionalOnMissingBean, +	public ReactiveOAuth2AuthorizedClientService authorizedClientService(, +			ReactiveClientRegistrationRepository clientRegistrationRepository) {, +		return new InMemoryReactiveOAuth2AuthorizedClientService(]