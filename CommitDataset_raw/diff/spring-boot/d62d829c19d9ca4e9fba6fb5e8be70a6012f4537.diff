[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +		MongoProperties properties = this.properties;, +		if (properties.getUri() != null) {, +			return createMongoClient(properties.getUri(), options);, +			List<MongoCredential> credentials = getCredentials(properties);, +			String host = getValue(properties.getHost(), "localhost");, +			int port = getValue(properties.getPort(), MongoProperties.DEFAULT_PORT);, +			List<ServerAddress> seeds = Collections, +					.singletonList(new ServerAddress(host, port));, +			return new MongoClient(seeds, credentials, options);, +		return createMongoClient(MongoProperties.DEFAULT_URI, options);, +, +	private MongoClient createMongoClient(String uri, MongoClientOptions options) {, +		return new MongoClient(new MongoClientURI(uri, builder(options)));, +	}, +, +	private <T> T getValue(T value, T fallback) {, +		return (value == null ? fallback : value);, +	private List<MongoCredential> getCredentials(MongoProperties properties) {, +		if (!hasCustomCredentials()) {, +			return Collections.emptyList();, +		}, +		String username = properties.getUsername();, +		String database = getValue(properties.getAuthenticationDatabase(),, +				properties.getMongoClientDatabase());, +		char[] password = properties.getPassword();, +		return Collections.singletonList(, +				MongoCredential.createCredential(username, database, password));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +		MongoProperties properties = this.properties;, +		if (properties.getUri() != null) {, +			return createMongoClient(properties.getUri(), options);, +			List<MongoCredential> credentials = getCredentials(properties);, +			String host = getValue(properties.getHost(), "localhost");, +			int port = getValue(properties.getPort(), MongoProperties.DEFAULT_PORT);, +			List<ServerAddress> seeds = Collections, +					.singletonList(new ServerAddress(host, port));, +			return new MongoClient(seeds, credentials, options);, +		return createMongoClient(MongoProperties.DEFAULT_URI, options);, +, +	private MongoClient createMongoClient(String uri, MongoClientOptions options) {, +		return new MongoClient(new MongoClientURI(uri, builder(options)));, +	}, +, +	private <T> T getValue(T value, T fallback) {, +		return (value == null ? fallback : value);, +	private List<MongoCredential> getCredentials(MongoProperties properties) {, +		if (!hasCustomCredentials()) {, +			return Collections.emptyList();, +		}, +		String username = properties.getUsername();, +		String database = getValue(properties.getAuthenticationDatabase(),, +				properties.getMongoClientDatabase());, +		char[] password = properties.getPassword();, +		return Collections.singletonList(, +				MongoCredential.createCredential(username, database, password));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfigurationTests.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoClientFactory.java, +		MongoProperties properties = this.properties;, +		if (properties.getUri() != null) {, +			return createMongoClient(properties.getUri(), options);, +			List<MongoCredential> credentials = getCredentials(properties);, +			String host = getValue(properties.getHost(), "localhost");, +			int port = getValue(properties.getPort(), MongoProperties.DEFAULT_PORT);, +			List<ServerAddress> seeds = Collections, +					.singletonList(new ServerAddress(host, port));, +			return new MongoClient(seeds, credentials, options);, +		return createMongoClient(MongoProperties.DEFAULT_URI, options);, +, +	private MongoClient createMongoClient(String uri, MongoClientOptions options) {, +		return new MongoClient(new MongoClientURI(uri, builder(options)));, +	}, +, +	private <T> T getValue(T value, T fallback) {, +		return (value == null ? fallback : value);, +	private List<MongoCredential> getCredentials(MongoProperties properties) {, +		if (!hasCustomCredentials()) {, +			return Collections.emptyList();, +		}, +		String username = properties.getUsername();, +		String database = getValue(properties.getAuthenticationDatabase(),, +				properties.getMongoClientDatabase());, +		char[] password = properties.getPassword();, +		return Collections.singletonList(, +				MongoCredential.createCredential(username, database, password));, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfigurationTests.java, +++ b/spring-boot-samples/spring-boot-sample-custom-layout/pom.xml]