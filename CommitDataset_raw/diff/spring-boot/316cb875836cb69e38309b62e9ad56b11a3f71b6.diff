[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java, +import org.springframework.boot.ApplicationPid;, +import org.springframework.util.Assert;, + * into file. This application listener will be triggered exactly once per JVM., + * @author Phillip Webb, + * @since 1.0.2, +	private static final Log logger = LogFactory.getLog(ApplicationPidListener.class);, +	private static final String DEFAULT_FILE_NAME = "application.pid";, +, +	private static final AtomicBoolean created = new AtomicBoolean(false);, +	private final File file;, +	 * Create a new {@link ApplicationPidListener} instance using the filename, +	 * 'application.pid'., +	public ApplicationPidListener() {, +		this.file = new File(DEFAULT_FILE_NAME);, +	/**, +	 * Create a new {@link ApplicationPidListener} instance with a specified filename., +	 * @param filename the name of file containing pid, +	 */, +	public ApplicationPidListener(String filename) {, +		Assert.notNull(filename, "Filename must not be null");, +		this.file = new File(filename);, +	}, +, +	/**, +	 * Create a new {@link ApplicationPidListener} instance with a specified file., +	 * @param file the file containing pid, +	 */, +	public ApplicationPidListener(File file) {, +		Assert.notNull(file, "File must not be null");, +		this.file = file;, +		if (created.compareAndSet(false, true)) {, +				new ApplicationPid().write(this.file);, +			catch (Exception ex) {, +				logger.warn(String.format("Cannot create pid file %s", this.file));, +	/**, +	 * Reset the created flag for testing purposes., +	 */, +	static void reset() {, +		created.set(false);, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java, +import org.springframework.boot.ApplicationPid;, +import org.springframework.util.Assert;, + * into file. This application listener will be triggered exactly once per JVM., + * @author Phillip Webb, + * @since 1.0.2, +	private static final Log logger = LogFactory.getLog(ApplicationPidListener.class);, +	private static final String DEFAULT_FILE_NAME = "application.pid";, +, +	private static final AtomicBoolean created = new AtomicBoolean(false);, +	private final File file;, +	 * Create a new {@link ApplicationPidListener} instance using the filename, +	 * 'application.pid'., +	public ApplicationPidListener() {, +		this.file = new File(DEFAULT_FILE_NAME);, +	/**, +	 * Create a new {@link ApplicationPidListener} instance with a specified filename., +	 * @param filename the name of file containing pid, +	 */, +	public ApplicationPidListener(String filename) {, +		Assert.notNull(filename, "Filename must not be null");, +		this.file = new File(filename);, +	}, +, +	/**, +	 * Create a new {@link ApplicationPidListener} instance with a specified file., +	 * @param file the file containing pid, +	 */, +	public ApplicationPidListener(File file) {, +		Assert.notNull(file, "File must not be null");, +		this.file = file;, +		if (created.compareAndSet(false, true)) {, +				new ApplicationPid().write(this.file);, +			catch (Exception ex) {, +				logger.warn(String.format("Cannot create pid file %s", this.file));, +	/**, +	 * Reset the created flag for testing purposes., +	 */, +	static void reset() {, +		created.set(false);, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/system/ApplicationPidListenerTest.java, +import java.io.FileReader;, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.rules.TemporaryFolder;, +import org.springframework.util.FileCopyUtils;, +import static org.hamcrest.Matchers.isEmptyString;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertThat;, + * Tests fpr {@link ApplicationPidListener}., + * , +	private static final ApplicationStartedEvent EVENT = new ApplicationStartedEvent(, +			new SpringApplication(), new String[] {});, +	@Rule, +	public TemporaryFolder temporaryFolder = new TemporaryFolder();, +, +	@Before, +	public void resetListener() {]