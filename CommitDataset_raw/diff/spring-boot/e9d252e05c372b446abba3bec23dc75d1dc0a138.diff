[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.DeprecatedConfigurationProperty";, +, +	protected String deprecatedConfigurationPropertyAnnotation() {, +		return DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +				boolean deprecated = isDeprecated(getter) || isDeprecated(setter), +						|| isDeprecated(element);, +						(deprecated ? getItemDeprecation(getter) : null)));, +	private ItemDeprecation getItemDeprecation(ExecutableElement getter) {, +		AnnotationMirror annotation = getAnnotation(getter,, +				deprecatedConfigurationPropertyAnnotation());, +		String reason = null;, +		String replacement = null;, +		if (annotation != null) {, +			Map<String, Object> elementValues = getAnnotationElementValues(annotation);, +			reason = (String) elementValues.get("reason");, +			replacement = (String) elementValues.get("replacement");, +		}, +		return new ItemDeprecation(("".equals(reason) ? null : reason),, +				("".equals(replacement) ? null : replacement));, +	}, +, +				boolean deprecated = isDeprecated(field) || isDeprecated(element);, +	private boolean isDeprecated(Element element) {, +		return hasAnnotation(element, "java.lang.Deprecated"), +				|| hasAnnotation(element, deprecatedConfigurationPropertyAnnotation());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.DeprecatedConfigurationProperty";, +, +	protected String deprecatedConfigurationPropertyAnnotation() {, +		return DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +				boolean deprecated = isDeprecated(getter) || isDeprecated(setter), +						|| isDeprecated(element);, +						(deprecated ? getItemDeprecation(getter) : null)));, +	private ItemDeprecation getItemDeprecation(ExecutableElement getter) {, +		AnnotationMirror annotation = getAnnotation(getter,, +				deprecatedConfigurationPropertyAnnotation());, +		String reason = null;, +		String replacement = null;, +		if (annotation != null) {, +			Map<String, Object> elementValues = getAnnotationElementValues(annotation);, +			reason = (String) elementValues.get("reason");, +			replacement = (String) elementValues.get("replacement");, +		}, +		return new ItemDeprecation(("".equals(reason) ? null : reason),, +				("".equals(replacement) ? null : replacement));, +	}, +, +				boolean deprecated = isDeprecated(field) || isDeprecated(element);, +	private boolean isDeprecated(Element element) {, +		return hasAnnotation(element, "java.lang.Deprecated"), +				|| hasAnnotation(element, deprecatedConfigurationPropertyAnnotation());, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +import org.springframework.boot.configurationsample.simple.DeprecatedSingleProperty;, +	public void singleDeprecatedProprety() throws Exception {, +		Class<?> type = DeprecatedSingleProperty.class;, +		ConfigurationMetadata metadata = compile(type);, +		assertThat(metadata, containsGroup("singledeprecated").fromSource(type));, +		assertThat(metadata, containsProperty("singledeprecated.new-name", String.class), +				.fromSource(type));, +		assertThat(metadata, containsProperty("singledeprecated.name", String.class), +				.fromSource(type).withDeprecation("renamed", "singledeprecated.new-name"));, +	}, +, +	@Test, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +	static final String DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION = "org.springframework.boot.", +			+ "context.properties.DeprecatedConfigurationProperty";, +, +	protected String deprecatedConfigurationPropertyAnnotation() {, +		return DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION;, +	}, +, +				boolean deprecated = isDeprecated(getter) || isDeprecated(setter), +						|| isDeprecated(element);, +						(deprecated ? getItemDeprecation(getter) : null)));, +	private ItemDeprecation getItemDeprecation(ExecutableElement getter) {, +		AnnotationMirror annotation = getAnnotation(getter,, +				deprecatedConfigurationPropertyAnnotation());, +		String reason = null;, +		String replacement = null;, +		if (annotation != null) {, +			Map<String, Object> elementValues = getAnnotationElementValues(annotation);, +			reason = (String) elementValues.get("reason");, +			replacement = (String) elementValues.get("replacement");, +		}, +		return new ItemDeprecation(("".equals(reason) ? null : reason),, +				("".equals(replacement) ? null : replacement));, +	}, +, +				boolean deprecated = isDeprecated(field) || isDeprecated(element);, +	private boolean isDeprecated(Element element) {, +		return hasAnnotation(element, "java.lang.Deprecated"), +				|| hasAnnotation(element, deprecatedConfigurationPropertyAnnotation());]