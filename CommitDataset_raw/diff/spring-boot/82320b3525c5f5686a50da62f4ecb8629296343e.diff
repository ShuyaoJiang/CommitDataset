[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplication.java, +@Conditional(OnWebApplicationCondition.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplication.java, +@Conditional(OnWebApplicationCondition.class), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplication.java, +@Conditional(OnWebApplicationCondition.class), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.context.WebApplicationContext;, + * {@link Condition} that checks for a the presence or absence of, + * {@link WebApplicationContext}., + * @see ConditionalOnNotWebApplication, +	private static final String WEB_CONTEXT_CLASS = "org.springframework.web.context.support.GenericWebApplicationContext";, +, +		boolean webContextRequired = metadata, +				.isAnnotated(ConditionalOnWebApplication.class.getName());, +		boolean webApplication = isWebApplication(context, metadata);, +		return (webContextRequired ? webApplication : !webApplication);, +	}, +	private boolean isWebApplication(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		if (!ClassUtils.isPresent(WEB_CONTEXT_CLASS, context.getClassLoader())) {, +				logger.debug(checking + "web application classes not found");, +, +		if (context.getBeanFactory() != null) {, +			String[] scopes = context.getBeanFactory().getRegisteredScopeNames();, +			if (ObjectUtils.containsElement(scopes, "session")) {, +					logger.debug(checking + "found web application scope");, +				return true;, +			}, +		if (context.getEnvironment() instanceof StandardServletEnvironment) {, +			if (logger.isDebugEnabled()) {, +				logger.debug(checking + "found web application environment");, +			}, +			return true;, +		}, +, +		if (logger.isDebugEnabled()) {, +			logger.debug(checking + "is not a web application");, +		}, +		return false;, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnNotWebApplication.java, +@Conditional(OnWebApplicationCondition.class), +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java, +import org.springframework.util.ObjectUtils;, +import org.springframework.web.context.WebApplicationContext;, + * {@link Condition} that checks for a the presence or absence of, + * {@link WebApplicationContext}., + * @see ConditionalOnNotWebApplication, +	private static final String WEB_CONTEXT_CLASS = "org.springframework.web.context.support.GenericWebApplicationContext";, +, +		boolean webContextRequired = metadata, +				.isAnnotated(ConditionalOnWebApplication.class.getName());, +		boolean webApplication = isWebApplication(context, metadata);, +		return (webContextRequired ? webApplication : !webApplication);, +	}, +	private boolean isWebApplication(ConditionContext context,, +			AnnotatedTypeMetadata metadata) {, +		if (!ClassUtils.isPresent(WEB_CONTEXT_CLASS, context.getClassLoader())) {, +				logger.debug(checking + "web application classes not found");, +, +		if (context.getBeanFactory() != null) {, +			String[] scopes = context.getBeanFactory().getRegisteredScopeNames();, +			if (ObjectUtils.containsElement(scopes, "session")) {, +					logger.debug(checking + "found web application scope");, +				return true;, +			}, +		if (context.getEnvironment() instanceof StandardServletEnvironment) {, +			if (logger.isDebugEnabled()) {, +				logger.debug(checking + "found web application environment");, +			}, +			return true;, +		}, +, +		if (logger.isDebugEnabled()) {, +			logger.debug(checking + "is not a web application");, +		}, +		return false;, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnNotWebApplicationConditionTests.java, + * Tests for {@link ConditionalOnNotWebApplication}.]