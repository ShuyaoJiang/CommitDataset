[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.util.AntPathMatcher;, +			FS commandFileSystem = createFileSystem(, +					this.properties.getCommandPathPatterns(),, +					this.properties.getDisabledCommands());, +			FS configurationFileSystem = createFileSystem(, +					this.properties.getConfigPathPatterns(), new String[0]);, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns), +				throws IOException, URISyntaxException {, +			Assert.notNull(filterPatterns, "FilterPatterns must not be null");, +						pathPattern, this.resourceLoader, filterPatterns)));, +		private final String[] filterPatterns;, +, +		private final AntPathMatcher matcher = new AntPathMatcher();, +, +		public DirectoryHandle(String name, ResourcePatternResolver resourceLoader,, +				String[] filterPatterns) {, +			this.filterPatterns = filterPatterns;, +				if (!resource.getURL().getPath().endsWith("/") && !shouldFilter(resource)) {, +		private boolean shouldFilter(Resource resource) {, +			for (String filterPattern : this.filterPatterns) {, +				if (this.matcher.match(filterPattern, resource.getFilename())) {, +					return true;, +				}, +			}, +			return false;, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.util.AntPathMatcher;, +			FS commandFileSystem = createFileSystem(, +					this.properties.getCommandPathPatterns(),, +					this.properties.getDisabledCommands());, +			FS configurationFileSystem = createFileSystem(, +					this.properties.getConfigPathPatterns(), new String[0]);, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns), +				throws IOException, URISyntaxException {, +			Assert.notNull(filterPatterns, "FilterPatterns must not be null");, +						pathPattern, this.resourceLoader, filterPatterns)));, +		private final String[] filterPatterns;, +, +		private final AntPathMatcher matcher = new AntPathMatcher();, +, +		public DirectoryHandle(String name, ResourcePatternResolver resourceLoader,, +				String[] filterPatterns) {, +			this.filterPatterns = filterPatterns;, +				if (!resource.getURL().getPath().endsWith("/") && !shouldFilter(resource)) {, +		private boolean shouldFilter(Resource resource) {, +			for (String filterPattern : this.filterPatterns) {, +				if (this.matcher.match(filterPattern, resource.getFilename())) {, +					return true;, +				}, +			}, +			return false;, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, +	private String[] disabledCommands = new String[] { "jpa*", "jdbc*", "jndi*" };, +, +	public void setDisabledCommands(String[] disabledCommands) {, +		Assert.notEmpty(disabledCommands);, +		this.disabledCommands = disabledCommands;, +	}, +, +	public String[] getDisabledCommands() {, +		return this.disabledCommands;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import org.springframework.util.AntPathMatcher;, +			FS commandFileSystem = createFileSystem(, +					this.properties.getCommandPathPatterns(),, +					this.properties.getDisabledCommands());, +			FS configurationFileSystem = createFileSystem(, +					this.properties.getConfigPathPatterns(), new String[0]);, +		protected FS createFileSystem(String[] pathPatterns, String[] filterPatterns), +				throws IOException, URISyntaxException {, +			Assert.notNull(filterPatterns, "FilterPatterns must not be null");, +						pathPattern, this.resourceLoader, filterPatterns)));, +		private final String[] filterPatterns;, +, +		private final AntPathMatcher matcher = new AntPathMatcher();, +, +		public DirectoryHandle(String name, ResourcePatternResolver resourceLoader,, +				String[] filterPatterns) {, +			this.filterPatterns = filterPatterns;, +				if (!resource.getURL().getPath().endsWith("/") && !shouldFilter(resource)) {, +		private boolean shouldFilter(Resource resource) {, +			for (String filterPattern : this.filterPatterns) {, +				if (this.matcher.match(filterPattern, resource.getFilename())) {, +					return true;, +				}, +			}, +			return false;, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java, +	private String[] disabledCommands = new String[] { "jpa*", "jdbc*", "jndi*" };, +, +	public void setDisabledCommands(String[] disabledCommands) {]