[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +				getBeanDefinitionRegistry(context), sources);, +	 * @param context the application context, +	 * @return the BeanDefinitionRegistry if it can be determined, +	 */, +	private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {, +		if (context instanceof BeanDefinitionRegistry) {, +			return (BeanDefinitionRegistry) context;, +		}, +		throw new IllegalStateException("Could not locate BeanDefinitionRegistry");, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +				getBeanDefinitionRegistry(context), sources);, +	 * @param context the application context, +	 * @return the BeanDefinitionRegistry if it can be determined, +	 */, +	private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {, +		if (context instanceof BeanDefinitionRegistry) {, +			return (BeanDefinitionRegistry) context;, +		}, +		throw new IllegalStateException("Could not locate BeanDefinitionRegistry");, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +		if (this.embeddedServletContainer == null && getServletContext() == null) {, +		} else if (getServletContext() != null) {, +			for (ServletContextInitializer initializer : getServletContextInitializers()) {, +				try {, +					initializer.onStartup(getServletContext());, +				} catch (ServletException e) {, +					throw new ApplicationContextException(, +							"Cannot initialize servlet context", e);, +				}, +			}, +		}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +				getBeanDefinitionRegistry(context), sources);, +	 * @param context the application context, +	 * @return the BeanDefinitionRegistry if it can be determined, +	 */, +	private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {, +		if (context instanceof BeanDefinitionRegistry) {, +			return (BeanDefinitionRegistry) context;, +		}, +		throw new IllegalStateException("Could not locate BeanDefinitionRegistry");, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +		if (this.embeddedServletContainer == null && getServletContext() == null) {, +		} else if (getServletContext() != null) {, +			for (ServletContextInitializer initializer : getServletContextInitializers()) {, +				try {, +					initializer.onStartup(getServletContext());, +				} catch (ServletException e) {, +					throw new ApplicationContextException(, +							"Cannot initialize servlet context", e);, +				}, +			}, +		}, +, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/SpringApplication.java, +				getBeanDefinitionRegistry(context), sources);, +	 * @param context the application context, +	 * @return the BeanDefinitionRegistry if it can be determined, +	 */, +	private BeanDefinitionRegistry getBeanDefinitionRegistry(ApplicationContext context) {, +		if (context instanceof BeanDefinitionRegistry) {, +			return (BeanDefinitionRegistry) context;, +		}, +		throw new IllegalStateException("Could not locate BeanDefinitionRegistry");, +	}, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/EmbeddedWebApplicationContext.java, +		if (this.embeddedServletContainer == null && getServletContext() == null) {, +		} else if (getServletContext() != null) {, +			for (ServletContextInitializer initializer : getServletContextInitializers()) {, +				try {, +					initializer.onStartup(getServletContext());, +				} catch (ServletException e) {, +					throw new ApplicationContextException(, +							"Cannot initialize servlet context", e);, +				}, +			}, +		}, +, +++ /dev/null, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/web/SpringServletInitializer.java, +package org.springframework.bootstrap.web;, +, +import javax.servlet.ServletContext;, +import javax.servlet.ServletContextEvent;, +import javax.servlet.ServletException;, +]