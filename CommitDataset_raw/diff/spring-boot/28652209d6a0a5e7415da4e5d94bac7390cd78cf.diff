[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +features that you may want to use and customize. If you have not already done so, you, +might want to read the "<<getting-started.adoc#getting-started>>" and, +The banner that is printed on start up can be changed by adding a `banner.txt` file to, +your classpath or by setting the `banner.location` property to the location of such a, +file. If the file has an encoding other than UTF-8, you can set `banner.charset`. In, +addition to a text file, you can also add a `banner.gif`, `banner.jpg`, or `banner.png`, +YAML maps `off` to `false`, so be sure to add quotes if you want to disable the banner in, +your application., +It is also possible to configure the `SpringApplication` by using an, +`application.properties` file. See _<<boot-features-external-config>>_ for details., +parent/child relationship) or if you just prefer using a '`fluent`' builder API, you can, +use the `SpringApplicationBuilder`., +The `SpringApplicationBuilder` lets you chain together multiple method calls and includes, +`parent` and `child` methods that let you create a hierarchy, as shown in the following, +example:, +NOTE: There are some restrictions when creating an `ApplicationContext` hierarchy. For, +example, Web components *must* be contained within the child context, and the same, +`Environment` is used for both parent and child contexts. See the, +application is created, you can add a `META-INF/spring.factories` file to your project and, +reference your listener(s) by using the `org.springframework.context.ApplicationListener`, +. An `ApplicationStartingEvent` is sent at the start of a run but before any processing, +  except the registration of listeners and initializers., +Application events are sent by using Spring Framework's event publishing mechanism. Part, +of this mechanism ensures that an event published to the listeners in a child context is, +also published to the listeners in any ancestors contexts. As a result of this, if your, +application uses a hierarchy of `SpringApplication` instances, a listener may receive, +multiple instances of the same type of application event., +a descendant context, it should request that its application context is injected and then, +compare the injected context with the context of the event. The context can be injected by, +implementing `ApplicationContextAware` or, if the listener is a bean, by using `@Autowired`., +A `SpringApplication` attempts to create the right type of `ApplicationContext` on your, +behalf. By default, an `AnnotationConfigApplicationContext` or, +`AnnotationConfigServletWebServerApplicationContext` is used, depending on whether you are, +developing a web application or not., +The algorithm used to determine a '`web environment`' is fairly simplistic (it is based on, +the presence of a few classes). You can use `setWebEnvironment(boolean webEnvironment)` if, +It is also possible to take complete control of the `ApplicationContext` type that is used, +by calling `setApplicationContextClass(...)`., +exception is encountered, Spring Boot returns the exit code provided by the implemented, +`getExitCode()` method., +application remotely. This feature could also be useful for any service wrapper, +implementation., +CAUTION: Take care when enabling this feature, as the MBean exposes a method to shutdown, +the application., +<<boot-features-external-config-typesafe-configuration-properties,bound to structured, +objects>> through `@ConfigurationProperties`., +To provide a concrete example, suppose you develop a `@Component` that uses a `name`, +property, as shown in the following example:, +`application.properties` file that provides a sensible default property value for `name`., +When running in a new environment, an `application.properties` file can be provided, +outside of your jar that overrides the `name`. For one-off testing, you can launch with a, +specific command line switch (for example, `java -jar app.jar --name="Spring"`)., +The `SPRING_APPLICATION_JSON` properties can be supplied on the command line with an, +environment variable. For example, you could use the following line in a UN{asterisk}X, +shell:, +In the preceding example, you end up with `foo.bar=spam` in the Spring `Environment`. You, +can also supply the JSON as `spring.application.json` in a System property, as shown in, +the following example:, +You can also supply the JSON by using a command line argument, as shown in the following, +example:, +You can also supply the JSON as a JNDI variable, as follows:, +`java:comp/env/spring.application.json`., +, +The `RandomValuePropertySource` is useful for injecting random values (for example, into, +secrets or test cases). It can produce integers, longs, uuids or strings, as shown in the, +following example:, +By default, `SpringApplication` converts any command line option arguments (that is,, +arguments starting with '`--`', such as `--server.port=9000`) to a `property` and add it, +to the Spring `Environment`. As mentioned previously, command line properties always take, +precedence over other property sources., +If you do not want command line properties to be added to the `Environment`, you can, +disable them by using `SpringApplication.setAddCommandLineProperties(false)`., +`SpringApplication` loads properties from `application.properties` files in the following, +locations and adds them to the Spring `Environment`:, +NOTE: You can also <<boot-features-external-config-yaml, use YAML ('.yml') files>> as an, +alternative to '.properties'., +to another file name by specifying a `spring.config.name` environment property. You can, +also refer to an explicit location by using the `spring.config.location` environment, +property (a comma-separated list of directory locations or file paths). The following, +example shows how to specify a different file name:, +property (typically an OS environment variable, a system property, or a command line, +argument)., +If `spring.config.location` contains directories (as opposed to files), they should end in, +`/` (and, at runtime, be appended with the names generated from `spring.config.name`, +before being loaded, including profile-specific file names). Files specified in, +locations. Custom locations are searched before the default locations. For example, if, +custom locations of `classpath:/custom-config/,file:./custom-config/` are configured, the, +search order becomes:, +This search ordering lets you specify default values in one configuration file and then, +selectively override those values in another. You can provide default values for your, +application in `application.properties` (or whatever other basename you choose with, +`spring.config.name`) in one of the default locations. These default values can then be, +overriden at runtime with a different file located in one of the custom locations., +systems disallow period-separated key names, but you can use underscores instead (for, +example, `SPRING_CONFIG_NAME` instead of `spring.config.name`)., +NOTE: If your application runs in a container, then JNDI properties (in `java:comp/env`), +or servlet context initialization parameters can be used instead of, or as well as,, +`Environment` has a set of default profiles (by default `[default]`) that are used if no, +active profiles are set. In other words, if no profiles are explicitly activated, then]