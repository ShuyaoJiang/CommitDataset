[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull().to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull().to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize).when(maxHttpHeaderSize -> maxHttpHeaderSize > 0), +				.to(maxHttpHeaderSize -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize).when(maxHttpPostSize -> maxHttpPostSize > 0), +				.to(maxHttpPostSize -> customizeMaxHttpPostSize(factory, maxHttpPostSize));, +		propertyMapper.from(serverProperties::getConnectionTimeout).whenNonNull(), +				.to(connectionTimeout -> customizeConnectionTimeout(factory, connectionTimeout));, +		propertyMapper.from(jettyProperties::getAccesslog).when(ServerProperties.Jetty.Accesslog::isEnabled), +				.to(accesslog -> customizeAccessLog(factory, accesslog));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull().to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull().to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize).when(maxHttpHeaderSize -> maxHttpHeaderSize > 0), +				.to(maxHttpHeaderSize -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize).when(maxHttpPostSize -> maxHttpPostSize > 0), +				.to(maxHttpPostSize -> customizeMaxHttpPostSize(factory, maxHttpPostSize));, +		propertyMapper.from(serverProperties::getConnectionTimeout).whenNonNull(), +				.to(connectionTimeout -> customizeConnectionTimeout(factory, connectionTimeout));, +		propertyMapper.from(jettyProperties::getAccesslog).when(ServerProperties.Jetty.Accesslog::isEnabled), +				.to(accesslog -> customizeAccessLog(factory, accesslog));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/tomcat/TomcatCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yulin Qin, +, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(tomcatProperties::getBasedir).whenNonNull().to(factory::setBaseDirectory);, +		propertyMapper.from(tomcatProperties::getBackgroundProcessorDelay).whenNonNull(), +				.to((backgroundProcessorDelay) -> factory.setBackgroundProcessorDelay((int) backgroundProcessorDelay.getSeconds()));, +		propertyMapper.from(tomcatProperties::getMaxThreads).when(maxThreads -> maxThreads > 0), +				.to(maxThreads -> customizeMaxThreads(factory, tomcatProperties.getMaxThreads()));, +		propertyMapper.from(tomcatProperties::getMinSpareThreads).when(minSpareThreads -> minSpareThreads > 0), +				.to(minSpareThreads -> customizeMinThreads(factory, minSpareThreads));, +		propertyMapper.from(() -> (serverProperties.getMaxHttpHeaderSize() > 0, +				: tomcatProperties.getMaxHttpHeaderSize())), +				.when(maxHttpHeaderSize -> maxHttpHeaderSize > 0), +				.to(maxHttpHeaderSize -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(tomcatProperties::getMaxHttpPostSize).when(maxHttpPostSize -> maxHttpPostSize != 0), +				.to(maxHttpPostSize -> customizeMaxHttpPostSize(factory, maxHttpPostSize));, +		propertyMapper.from(tomcatProperties::getAccesslog).when(ServerProperties.Tomcat.Accesslog::isEnabled), +				.to(enabled -> customizeAccessLog(tomcatProperties, factory));, +		propertyMapper.from(tomcatProperties::getUriEncoding).whenNonNull().to(factory::setUriEncoding);, +		propertyMapper.from(serverProperties::getConnectionTimeout).whenNonNull(), +				.to(connectionTimeout -> customizeConnectionTimeout(factory, connectionTimeout));, +		propertyMapper.from(tomcatProperties::getMaxConnections).when(maxConnections -> maxConnections > 0), +				.to(maxConnections -> customizeMaxConnections(factory, maxConnections));, +		propertyMapper.from(tomcatProperties::getAcceptCount).when(acceptCount -> acceptCount > 0), +				.to(acceptCount -> customizeAcceptCount(factory, acceptCount));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(jettyProperties::getAcceptors).whenNonNull().to(factory::setAcceptors);, +		propertyMapper.from(jettyProperties::getSelectors).whenNonNull().to(factory::setSelectors);, +		propertyMapper.from(serverProperties::getMaxHttpHeaderSize).when(maxHttpHeaderSize -> maxHttpHeaderSize > 0), +				.to(maxHttpHeaderSize -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(jettyProperties::getMaxHttpPostSize).when(maxHttpPostSize -> maxHttpPostSize > 0), +				.to(maxHttpPostSize -> customizeMaxHttpPostSize(factory, maxHttpPostSize));, +		propertyMapper.from(serverProperties::getConnectionTimeout).whenNonNull(), +				.to(connectionTimeout -> customizeConnectionTimeout(factory, connectionTimeout));, +		propertyMapper.from(jettyProperties::getAccesslog).when(ServerProperties.Jetty.Accesslog::isEnabled), +				.to(accesslog -> customizeAccessLog(factory, accesslog));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/tomcat/TomcatCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yulin Qin, +, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(tomcatProperties::getBasedir).whenNonNull().to(factory::setBaseDirectory);, +		propertyMapper.from(tomcatProperties::getBackgroundProcessorDelay).whenNonNull(), +				.to((backgroundProcessorDelay) -> factory.setBackgroundProcessorDelay((int) backgroundProcessorDelay.getSeconds()));, +		propertyMapper.from(tomcatProperties::getMaxThreads).when(maxThreads -> maxThreads > 0), +				.to(maxThreads -> customizeMaxThreads(factory, tomcatProperties.getMaxThreads()));, +		propertyMapper.from(tomcatProperties::getMinSpareThreads).when(minSpareThreads -> minSpareThreads > 0), +				.to(minSpareThreads -> customizeMinThreads(factory, minSpareThreads));, +		propertyMapper.from(() -> (serverProperties.getMaxHttpHeaderSize() > 0, +				: tomcatProperties.getMaxHttpHeaderSize())), +				.when(maxHttpHeaderSize -> maxHttpHeaderSize > 0), +				.to(maxHttpHeaderSize -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize));, +		propertyMapper.from(tomcatProperties::getMaxHttpPostSize).when(maxHttpPostSize -> maxHttpPostSize != 0), +				.to(maxHttpPostSize -> customizeMaxHttpPostSize(factory, maxHttpPostSize));, +		propertyMapper.from(tomcatProperties::getAccesslog).when(ServerProperties.Tomcat.Accesslog::isEnabled), +				.to(enabled -> customizeAccessLog(tomcatProperties, factory));, +		propertyMapper.from(tomcatProperties::getUriEncoding).whenNonNull().to(factory::setUriEncoding);, +		propertyMapper.from(serverProperties::getConnectionTimeout).whenNonNull(), +				.to(connectionTimeout -> customizeConnectionTimeout(factory, connectionTimeout));, +		propertyMapper.from(tomcatProperties::getMaxConnections).when(maxConnections -> maxConnections > 0), +				.to(maxConnections -> customizeMaxConnections(factory, maxConnections));, +		propertyMapper.from(tomcatProperties::getAcceptCount).when(acceptCount -> acceptCount > 0), +				.to(acceptCount -> customizeAcceptCount(factory, acceptCount));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/undertow/UndertowCustomizer.java, +import org.springframework.boot.context.properties.PropertyMapper;, + * @author Yulin Qin, +, +		PropertyMapper propertyMapper = PropertyMapper.get();, +		propertyMapper.from(undertowProperties::getBufferSize).whenNonNull().to(factory::setBufferSize);, +		propertyMapper.from(undertowProperties::getIoThreads).whenNonNull().to(factory::setIoThreads);]