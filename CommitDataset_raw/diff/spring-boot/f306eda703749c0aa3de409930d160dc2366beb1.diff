[+++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java, +import java.util.concurrent.CopyOnWriteArrayList;, +        Collection<Snake> snakes = new CopyOnWriteArrayList<>(SnakeTimer.getSnakes());, +        for (Snake snake : snakes) {, +                // if Snake#sendMessage fails the client is removed, +                removeSnake(snake);, +++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java, +import java.util.concurrent.CopyOnWriteArrayList;, +        Collection<Snake> snakes = new CopyOnWriteArrayList<>(SnakeTimer.getSnakes());, +        for (Snake snake : snakes) {, +                // if Snake#sendMessage fails the client is removed, +                removeSnake(snake);, +++ b/spring-boot-samples/spring-boot-sample-websocket/src/test/java/org/springframework/boot/samples/websocket/snake/SnakeTimerTests.java, +package org.springframework.boot.samples.websocket.snake;, +, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.hamcrest.CoreMatchers.is;, +import static org.junit.Assert.assertThat;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.doThrow;, +import static org.mockito.Mockito.mock;, +, +public class SnakeTimerTests {, +, +    @Test, +    public void removeDysfunctionalSnakes() throws Exception {, +        Snake snake = mock(Snake.class);, +        doThrow(new IOException()).when(snake).sendMessage(anyString());, +        SnakeTimer.addSnake(snake);, +, +        SnakeTimer.broadcast("");, +        assertThat(SnakeTimer.getSnakes().size(), is(0));, +    }, +}]