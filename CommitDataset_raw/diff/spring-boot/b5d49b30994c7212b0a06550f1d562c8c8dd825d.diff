[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	private ConfigurableApplicationContext context;, +	@SuppressWarnings("unchecked"), +	@Test, +	public void registerWithSimpleWebApp() throws Exception {, +		this.context = new SpringApplicationBuilder(), +				.sources(, +						EmbeddedServletContainerAutoConfiguration.class,, +						ServerPropertiesAutoConfiguration.class, DispatcherServletAutoConfiguration.class,, +						JmxAutoConfiguration.class, SpringApplicationAdminJmxAutoConfiguration.class), +				.run("--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertTrue(this.context instanceof EmbeddedWebApplicationContext);, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(), "EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context).getEmbeddedServletContainer().getPort();, +		String actual = getProperty(createDefaultObjectName(), "local.server.port");, +		assertEquals(String.valueOf(expected), actual);, +	}, +, +	private String getProperty(ObjectName objectName, String key) throws Exception {, +		return (String) this.mBeanServer.invoke(objectName, "getProperty",, +				new Object[]{key}, new String[]{String.class.getName()});, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	private ConfigurableApplicationContext context;, +	@SuppressWarnings("unchecked"), +	@Test, +	public void registerWithSimpleWebApp() throws Exception {, +		this.context = new SpringApplicationBuilder(), +				.sources(, +						EmbeddedServletContainerAutoConfiguration.class,, +						ServerPropertiesAutoConfiguration.class, DispatcherServletAutoConfiguration.class,, +						JmxAutoConfiguration.class, SpringApplicationAdminJmxAutoConfiguration.class), +				.run("--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertTrue(this.context instanceof EmbeddedWebApplicationContext);, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(), "EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context).getEmbeddedServletContainer().getPort();, +		String actual = getProperty(createDefaultObjectName(), "local.server.port");, +		assertEquals(String.valueOf(expected), actual);, +	}, +, +	private String getProperty(ObjectName objectName, String key) throws Exception {, +		return (String) this.mBeanServer.invoke(objectName, "getProperty",, +				new Object[]{key}, new String[]{String.class.getName()});, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: If you want to know on which HTTP port the application is running, get the property, +with key `local.server.port`., +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;, +import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;, +import org.springframework.boot.builder.SpringApplicationBuilder;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	private ConfigurableApplicationContext context;, +	@SuppressWarnings("unchecked"), +	@Test, +	public void registerWithSimpleWebApp() throws Exception {, +		this.context = new SpringApplicationBuilder(), +				.sources(, +						EmbeddedServletContainerAutoConfiguration.class,, +						ServerPropertiesAutoConfiguration.class, DispatcherServletAutoConfiguration.class,, +						JmxAutoConfiguration.class, SpringApplicationAdminJmxAutoConfiguration.class), +				.run("--" + ENABLE_ADMIN_PROP, "--server.port=0");, +		assertTrue(this.context instanceof EmbeddedWebApplicationContext);, +		assertEquals(true, this.mBeanServer.getAttribute(createDefaultObjectName(), "EmbeddedWebApplication"));, +		int expected = ((EmbeddedWebApplicationContext) this.context).getEmbeddedServletContainer().getPort();, +		String actual = getProperty(createDefaultObjectName(), "local.server.port");, +		assertEquals(String.valueOf(expected), actual);, +	}, +, +	private String getProperty(ObjectName objectName, String key) throws Exception {, +		return (String) this.mBeanServer.invoke(objectName, "getProperty",, +				new Object[]{key}, new String[]{String.class.getName()});, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +TIP: If you want to know on which HTTP port the application is running, get the property, +with key `local.server.port`.]