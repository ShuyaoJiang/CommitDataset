[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +			return getEnvironmentDescriptor(Pattern.compile(pattern).asPredicate());, +		return getEnvironmentDescriptor((name) -> true);, +	public EnvironmentDescriptor environmentEntry(@Selector String toMatch) {, +		return getEnvironmentDescriptor(toMatch::equals);, +	private EnvironmentDescriptor getEnvironmentDescriptor(, +			Predicate<String> propertyNamePredicate) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java, +			return getEnvironmentDescriptor(Pattern.compile(pattern).asPredicate());, +		return getEnvironmentDescriptor((name) -> true);, +	public EnvironmentDescriptor environmentEntry(@Selector String toMatch) {, +		return getEnvironmentDescriptor(toMatch::equals);, +	private EnvironmentDescriptor getEnvironmentDescriptor(, +			Predicate<String> propertyNamePredicate) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java, +				Collections.singletonMap("foo", "bar")));, +				Collections.singletonMap("foo", "spam")));, +	@Test, +	public void propertyEntry() {, +		StandardEnvironment environment = new StandardEnvironment();, +		TestPropertyValues.of("my.foo=bar", "my.foo2=bar2"), +				.applyTo(environment);, +		EnvironmentDescriptor env = new EnvironmentEndpoint(environment), +				.environmentEntry("my.foo");, +		assertThat(env).isNotNull();, +		assertThat(getSource("test", env).getProperties().get("my.foo").getValue()), +				.isEqualTo("bar");, +	}, +, +	@Test, +	public void propertyEntryNoMatchReturnNull() {, +		EnvironmentDescriptor env = new EnvironmentEndpoint(new StandardEnvironment()), +				.environmentEntry("this.property.does-not-exist");, +		assertThat(env).isNull();, +	}, +]