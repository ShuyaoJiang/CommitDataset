[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;, +		public void configurePathMatch(PathMatchConfigurer configurer) {, +			configurer.setUseSuffixPatternMatch(this.mvcProperties, +					.getPathMatch().isUseSuffixPattern());, +			configurer.setUseRegisteredSuffixPatternMatch(this.mvcProperties, +					.getPathMatch().isUseRegisteredSuffixPattern());, +		}, +, +		@Override, +			WebMvcProperties.ContentNegotiation contentNegotiation, +					= this.mvcProperties.getContentNegotiation();, +			configurer.favorPathExtension(contentNegotiation.isFavorPathExtension());, +			configurer.favorParameter(contentNegotiation.isFavorParameter());, +			if (contentNegotiation.getParameterName() != null) {, +				configurer.parameterName(contentNegotiation.getParameterName());, +			}, +			adapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null, +					|| this.mvcProperties.isIgnoreDefaultModelOnRedirect());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;, +		public void configurePathMatch(PathMatchConfigurer configurer) {, +			configurer.setUseSuffixPatternMatch(this.mvcProperties, +					.getPathMatch().isUseSuffixPattern());, +			configurer.setUseRegisteredSuffixPatternMatch(this.mvcProperties, +					.getPathMatch().isUseRegisteredSuffixPattern());, +		}, +, +		@Override, +			WebMvcProperties.ContentNegotiation contentNegotiation, +					= this.mvcProperties.getContentNegotiation();, +			configurer.favorPathExtension(contentNegotiation.isFavorPathExtension());, +			configurer.favorParameter(contentNegotiation.isFavorParameter());, +			if (contentNegotiation.getParameterName() != null) {, +				configurer.parameterName(contentNegotiation.getParameterName());, +			}, +			adapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null, +					|| this.mvcProperties.isIgnoreDefaultModelOnRedirect());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcProperties.java, + * Copyright 2012-2018 the original author or authors., + * @author Brian Clozel, +	private final ContentNegotiation contentNegotiation = new ContentNegotiation();, +, +	private final PathMatch pathMatch = new PathMatch();, +, +	public ContentNegotiation getContentNegotiation() {, +		return this.contentNegotiation;, +	}, +, +	public PathMatch getPathMatch() {, +		return this.pathMatch;, +	}, +, +	public static class ContentNegotiation {, +, +		/**, +		 * Whether the path extension in the URL path should be used to determine, +		 * the requested media type. If enabled a request "/users.pdf" will be, +		 * interpreted as a request for "application/pdf" regardless of the 'Accept' header., +		 */, +		private boolean favorPathExtension = false;, +, +		/**, +		 * Whether a request parameter ("format" by default) should be used to, +		 * determine the requested media type., +		 */, +		private boolean favorParameter = false;, +, +		/**, +		 * Query parameter name to use when "favor-parameter" is enabled., +		 */, +		private String parameterName;, +, +		public boolean isFavorPathExtension() {, +			return this.favorPathExtension;, +		}, +, +		public void setFavorPathExtension(boolean favorPathExtension) {, +			this.favorPathExtension = favorPathExtension;, +		}, +, +		public boolean isFavorParameter() {, +			return this.favorParameter;, +		}, +, +		public void setFavorParameter(boolean favorParameter) {, +			this.favorParameter = favorParameter;, +		}, +, +		public String getParameterName() {, +			return this.parameterName;, +		}, +, +		public void setParameterName(String parameterName) {, +			this.parameterName = parameterName;, +		}, +	}, +]