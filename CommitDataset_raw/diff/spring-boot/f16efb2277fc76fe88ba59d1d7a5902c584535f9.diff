[+++ b/spring-boot-parent/pom.xml, +				<artifactId>gradle-maven</artifactId>, +				<version>${gradle.version}</version>, +			</dependency>, +			<dependency>, +				<groupId>org.gradle</groupId>, +++ b/spring-boot-parent/pom.xml, +				<artifactId>gradle-maven</artifactId>, +				<version>${gradle.version}</version>, +			</dependency>, +			<dependency>, +				<groupId>org.gradle</groupId>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import org.gradle.api.artifacts.maven.MavenResolver;, +import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact;, +import org.gradle.api.tasks.Upload;, +	private SinglePublishedArtifact singlePublishedArtifact;, +, +		this.singlePublishedArtifact = new SinglePublishedArtifact(, +				project.getConfigurations().create("bootArchives").getArtifacts());, +		project.afterEvaluate(this::configureBootArchivesUpload);, +		this.singlePublishedArtifact.addCandidate(new ArchivePublishArtifact(bootWar));, +		this.singlePublishedArtifact.addCandidate(new ArchivePublishArtifact(bootJar));, +	}, +, +	private void configureBootArchivesUpload(Project project) {, +		Upload upload = project.getTasks().withType(Upload.class), +				.findByName("uploadBootArchives");, +		if (upload == null) {, +			return;, +		}, +		clearConfigurationMappings(upload);, +	}, +, +	private void clearConfigurationMappings(Upload upload) {, +		upload.getRepositories().withType(MavenResolver.class, (resolver) -> {, +			resolver.getPom().getScopeMappings().getMappings().clear();, +		});, +++ b/spring-boot-parent/pom.xml, +				<artifactId>gradle-maven</artifactId>, +				<version>${gradle.version}</version>, +			</dependency>, +			<dependency>, +				<groupId>org.gradle</groupId>, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BundlingPluginFeatures.java, +import org.gradle.api.artifacts.maven.MavenResolver;, +import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact;, +import org.gradle.api.tasks.Upload;, +	private SinglePublishedArtifact singlePublishedArtifact;, +, +		this.singlePublishedArtifact = new SinglePublishedArtifact(, +				project.getConfigurations().create("bootArchives").getArtifacts());, +		project.afterEvaluate(this::configureBootArchivesUpload);, +		this.singlePublishedArtifact.addCandidate(new ArchivePublishArtifact(bootWar));, +		this.singlePublishedArtifact.addCandidate(new ArchivePublishArtifact(bootJar));, +	}, +, +	private void configureBootArchivesUpload(Project project) {, +		Upload upload = project.getTasks().withType(Upload.class), +				.findByName("uploadBootArchives");, +		if (upload == null) {, +			return;, +		}, +		clearConfigurationMappings(upload);, +	}, +, +	private void clearConfigurationMappings(Upload upload) {, +		upload.getRepositories().withType(MavenResolver.class, (resolver) -> {, +			resolver.getPom().getScopeMappings().getMappings().clear();, +		});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/SinglePublishedArtifact.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.gradle.bundling;, +, +import org.gradle.api.artifacts.PublishArtifact;, +import org.gradle.api.artifacts.PublishArtifactSet;, +, +/**, + * A wrapper for a {@PublishArtifactSet} that ensures that only a single artifact is, + * published, with a war file taking precedence over a jar file., + *, + * @author Andy Wilkinson, + */, +class SinglePublishedArtifact {, +]