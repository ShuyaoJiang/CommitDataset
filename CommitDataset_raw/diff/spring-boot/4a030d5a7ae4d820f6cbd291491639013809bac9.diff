[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class }), +@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false), +public class ElasticsearchAutoConfiguration {, +	public TransportClient elasticsearchClient() throws Exception {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class }), +@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false), +public class ElasticsearchAutoConfiguration {, +	public TransportClient elasticsearchClient() throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java, +	 * Comma-separated list of cluster node addresses., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class }), +@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false), +public class ElasticsearchAutoConfiguration {, +	public TransportClient elasticsearchClient() throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java, +	 * Comma-separated list of cluster node addresses., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +			http.authorizeRequests(), +					.requestMatchers(, +							(request) -> request.getHeader("Host").equals("whatever")), +					.permitAll();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class }), +@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false), +public class ElasticsearchAutoConfiguration {, +	public TransportClient elasticsearchClient() throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java, +	 * Comma-separated list of cluster node addresses., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +			http.authorizeRequests(), +					.requestMatchers(, +							(request) -> request.getHeader("Host").equals("whatever")), +					.permitAll();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +import java.util.List;, +, +import org.assertj.core.api.Assertions;, +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.cluster.node.DiscoveryNode;, + * @author Andy Wilkinson, +		Assertions.assertThat(this.context.getBeanNamesForType(Client.class).length), +				.isEqualTo(1);, +		Assertions.assertThat(this.context.getBean("myClient")), +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +					.of("spring.data.elasticsearch.cluster-nodes:localhost:", +							+ node.getTcpPort(),, +					"spring.data.elasticsearch.properties.path.home:target/es/client"), +			List<DiscoveryNode> connectedNodes = this.context, +					.getBean(TransportClient.class).connectedNodes();, +			assertThat(connectedNodes).hasSize(1);, +		});, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java, +				.of("spring.data.elasticsearch.cluster-nodes:localhost:0",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +@ConditionalOnClass({ Client.class, TransportClientFactoryBean.class }), +@ConditionalOnProperty(prefix = "spring.data.elasticsearch", name = "cluster-nodes", matchIfMissing = false), +public class ElasticsearchAutoConfiguration {, +	public TransportClient elasticsearchClient() throws Exception {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchProperties.java, +	 * Comma-separated list of cluster node addresses., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +			http.authorizeRequests(), +					.requestMatchers(, +							(request) -> request.getHeader("Host").equals("whatever")), +					.permitAll();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java, +import java.util.List;, +, +import org.assertj.core.api.Assertions;, +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.cluster.node.DiscoveryNode;, + * @author Andy Wilkinson, +		Assertions.assertThat(this.context.getBeanNamesForType(Client.class).length), +				.isEqualTo(1);, +		Assertions.assertThat(this.context.getBean("myClient")), +		new ElasticsearchNodeTemplate().doWithNode((node) -> {, +					.of("spring.data.elasticsearch.cluster-nodes:localhost:", +							+ node.getTcpPort(),, +					"spring.data.elasticsearch.properties.path.home:target/es/client"), +			List<DiscoveryNode> connectedNodes = this.context, +					.getBean(TransportClient.class).connectedNodes();, +			assertThat(connectedNodes).hasSize(1);]