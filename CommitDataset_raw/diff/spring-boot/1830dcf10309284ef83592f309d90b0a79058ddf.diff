[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.condition;, +, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import com.fasterxml.jackson.annotation.JsonInclude;, +import com.fasterxml.jackson.annotation.JsonInclude.Include;, +import com.fasterxml.jackson.annotation.JsonPropertyOrder;, +, +import org.springframework.boot.actuate.endpoint.annotation.Endpoint;, +import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcome;, +import org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport.ConditionAndOutcomes;, +import org.springframework.boot.autoconfigure.condition.ConditionOutcome;, +import org.springframework.context.annotation.Condition;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link Endpoint} to expose the {@link ConditionEvaluationReport}., + *, + * @author Greg Turnquist, + * @author Phillip Webb, + * @author Dave Syer, + * @author Andy Wilkinson, + * @since 2.0.0, + */, +@Endpoint(id = "conditions"), +public class ConditionsReportEndpoint {, +, +	private final ConditionEvaluationReport conditionEvaluationReport;, +, +	public ConditionsReportEndpoint(, +			ConditionEvaluationReport conditionEvaluationReport) {, +		this.conditionEvaluationReport = conditionEvaluationReport;, +	}, +, +	@ReadOperation, +	public Report getEvaluationReport() {, +		return new Report(this.conditionEvaluationReport);, +	}, +, +	/**, +	 * Adapts {@link ConditionEvaluationReport} to a JSON friendly structure., +	 */, +	@JsonPropertyOrder({ "positiveMatches", "negativeMatches", "exclusions",, +			"unconditionalClasses" }), +	@JsonInclude(Include.NON_EMPTY), +	public static class Report {, +, +		private final MultiValueMap<String, MessageAndCondition> positiveMatches;, +, +		private final Map<String, MessageAndConditions> negativeMatches;, +, +		private final List<String> exclusions;, +, +		private final Set<String> unconditionalClasses;, +, +		private final Report parent;, +, +		public Report(ConditionEvaluationReport report) {, +			this.positiveMatches = new LinkedMultiValueMap<>();, +			this.negativeMatches = new LinkedHashMap<>();, +			this.exclusions = report.getExclusions();, +			this.unconditionalClasses = report.getUnconditionalClasses();, +			for (Map.Entry<String, ConditionAndOutcomes> entry : report, +					.getConditionAndOutcomesBySource().entrySet()) {, +				if (entry.getValue().isFullMatch()) {, +					add(this.positiveMatches, entry.getKey(), entry.getValue());, +				}, +				else {, +					add(this.negativeMatches, entry.getKey(), entry.getValue());]