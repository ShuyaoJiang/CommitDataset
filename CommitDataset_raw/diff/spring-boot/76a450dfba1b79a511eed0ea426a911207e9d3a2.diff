[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(, +				lookup(distribution.getPercentilesHistogram(), id, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(, +				lookup(distribution.getPercentilesHistogram(), id, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +		private AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {, +			factory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(, +				lookup(distribution.getPercentilesHistogram(), id, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +		private AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {, +			factory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class, (client) -> client.options(), +				.uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON), +				.header("Origin", "http://example.com").exchange().expectStatus().isOk(), +				.valueEquals("Access-Control-Allow-Origin", "http://example.com"), +				.expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST"));, +		load(TestEndpointConfiguration.class, (client) -> client.get(), +				.uri("/cfApplication").accept(MediaType.APPLICATION_JSON), +				.jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated"), +				.isEqualTo(false).jsonPath("_links.test.href").isNotEmpty(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(, +				lookup(distribution.getPercentilesHistogram(), id, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +		private AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {, +			factory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class, (client) -> client.options(), +				.uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON), +				.header("Origin", "http://example.com").exchange().expectStatus().isOk(), +				.valueEquals("Access-Control-Allow-Origin", "http://example.com"), +				.expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST"));, +		load(TestEndpointConfiguration.class, (client) -> client.get(), +				.uri("/cfApplication").accept(MediaType.APPLICATION_JSON), +				.jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated"), +				.isEqualTo(false).jsonPath("_links.test.href").isNotEmpty(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith(, +				(ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()), +		StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith(, +				(ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(, +				lookup(distribution.getPercentilesHistogram(), id, null));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java, +		private AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {, +			factory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix()));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class, (client) -> client.options(), +				.uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON), +				.header("Origin", "http://example.com").exchange().expectStatus().isOk(), +				.valueEquals("Access-Control-Allow-Origin", "http://example.com"), +				.expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST"));, +		load(TestEndpointConfiguration.class, (client) -> client.get(), +				.uri("/cfApplication").accept(MediaType.APPLICATION_JSON), +				.jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated"), +				.isEqualTo(false).jsonPath("_links.test.href").isNotEmpty(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveCloudFoundrySecurityInterceptorTests.java, +		StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith(, +				(ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()), +		StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith(, +				(ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryMvcWebEndpointIntegrationTests.java, +		load(TestEndpointConfiguration.class, (client) -> client.options(), +				.uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON), +				.header("Origin", "http://example.com").exchange().expectStatus().isOk(), +				.valueEquals("Access-Control-Allow-Origin", "http://example.com"), +				.expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST"));, +		load(TestEndpointConfiguration.class, (client) -> client.get(), +				.uri("/cfApplication").accept(MediaType.APPLICATION_JSON), +				.jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated"), +				.isEqualTo(false).jsonPath("_links.test.href").isNotEmpty(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryActuatorAutoConfiguration.java, +		return (cloudControllerUrl == null ? null : new CloudFoundrySecurityService(, +				restTemplateBuilder, cloudControllerUrl, skipSslValidation));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +		builder.percentilesHistogram(]