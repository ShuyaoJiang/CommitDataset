[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			initializeWithSpecificConfig(configLocation, logFile);, +			return;, +		}, +		initializeWithConventions(logFile);, +	}, +, +	private void initializeWithSpecificConfig(String configLocation, LogFile logFile) {, +, +	private void initializeWithConventions(LogFile logFile) {, +		String config = getSelfInitializationConfig();, +		if (config != null && logFile == null) {, +			// self initialization has occurred, reinitialize in case of property changes, +			return;, +		if (config == null) {, +			config = getSpringInitializationConfig();, +		if (config != null) {, +			loadConfiguration(config, logFile);, +			return;, +		}, +		loadDefaults(logFile);, +	 * @return the self initialization configor {@code null}, +		return findConfig(getStandardConfigLocations());, +	}, +, +	/**, +	 * Return any spring specific initialization config that should be applied. By default, +	 * this method checks {@link #getSpringConfigLocations()}., +	 * @return the spring initialization config or {@code null}, +	 */, +	protected String getSpringInitializationConfig() {, +		return findConfig(getSpringConfigLocations());, +	}, +, +	private String findConfig(String[] locations) {, +		for (String location : locations) {, +	 * Return the spring config locations for this system. By default this method returns, +	 * a set of locations based on {@link #getStandardConfigLocations()}., +	 * @return the standard config locations, +	 * @see #getSpringInitializationConfig(), +	 */, +	protected String[] getSpringConfigLocations() {, +		String[] locations = getStandardConfigLocations();, +		for (int i = 0; i < locations.length; i++) {, +			String extension = StringUtils.getFilenameExtension(locations[i]);, +			locations[i] = locations[i].substring(0,, +					locations[i].length() - extension.length() - 1), +					+ "-spring." + extension;, +		}, +		return locations;, +	}, +, +	/**, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +			initializeWithSpecificConfig(configLocation, logFile);, +			return;, +		}, +		initializeWithConventions(logFile);, +	}, +, +	private void initializeWithSpecificConfig(String configLocation, LogFile logFile) {, +, +	private void initializeWithConventions(LogFile logFile) {, +		String config = getSelfInitializationConfig();, +		if (config != null && logFile == null) {, +			// self initialization has occurred, reinitialize in case of property changes, +			return;, +		if (config == null) {, +			config = getSpringInitializationConfig();, +		if (config != null) {, +			loadConfiguration(config, logFile);, +			return;, +		}, +		loadDefaults(logFile);, +	 * @return the self initialization configor {@code null}, +		return findConfig(getStandardConfigLocations());, +	}, +, +	/**, +	 * Return any spring specific initialization config that should be applied. By default, +	 * this method checks {@link #getSpringConfigLocations()}., +	 * @return the spring initialization config or {@code null}, +	 */, +	protected String getSpringInitializationConfig() {, +		return findConfig(getSpringConfigLocations());, +	}, +, +	private String findConfig(String[] locations) {, +		for (String location : locations) {, +	 * Return the spring config locations for this system. By default this method returns, +	 * a set of locations based on {@link #getStandardConfigLocations()}., +	 * @return the standard config locations, +	 * @see #getSpringInitializationConfig(), +	 */, +	protected String[] getSpringConfigLocations() {, +		String[] locations = getStandardConfigLocations();, +		for (int i = 0; i < locations.length; i++) {, +			String extension = StringUtils.getFilenameExtension(locations[i]);, +			locations[i] = locations[i].substring(0,, +					locations[i].length() - extension.length() - 1)]