[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.Collection;, +			Class<?> resolved = this.valueType.resolve();, +			if (Collection.class.isAssignableFrom(resolved), +					|| this.valueType.isArray()) {, +				return chopNameAtNumericIndex(name);, +			}, +		private ConfigurationPropertyName chopNameAtNumericIndex(ConfigurationPropertyName name) {, +			int start = this.root.getNumberOfElements() + 1;, +			int size = name.getNumberOfElements();, +			for (int i = start; i < size; i++) {, +				if (name.IsNumericIndex(i)) {, +					return name.chop(i);, +				}, +			}, +			return name;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.Collection;, +			Class<?> resolved = this.valueType.resolve();, +			if (Collection.class.isAssignableFrom(resolved), +					|| this.valueType.isArray()) {, +				return chopNameAtNumericIndex(name);, +			}, +		private ConfigurationPropertyName chopNameAtNumericIndex(ConfigurationPropertyName name) {, +			int start = this.root.getNumberOfElements() + 1;, +			int size = name.getNumberOfElements();, +			for (int i = start; i < size; i++) {, +				if (name.IsNumericIndex(i)) {, +					return name.chop(i);, +				}, +			}, +			return name;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +	 * @return {@code true} if the element is indexed, +	 * Return if the an element in the name is indexed and numeric., +	 * @param elementIndex the index of the element, +	 * @return {@code true} if the element is indexed and numeric, +	 */, +	public boolean IsNumericIndex(int elementIndex) {, +		return isIndexed(elementIndex) && isNumeric(getElement(elementIndex, Form.ORIGINAL));, +	}, +, +	/**, +	private static boolean isNumeric(CharSequence element) {, +		int length = element.length();, +		for (int i = 0; i < length; i++) {, +			if (!Character.isDigit(element.charAt(i))) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import java.util.Collection;, +			Class<?> resolved = this.valueType.resolve();, +			if (Collection.class.isAssignableFrom(resolved), +					|| this.valueType.isArray()) {, +				return chopNameAtNumericIndex(name);, +			}, +		private ConfigurationPropertyName chopNameAtNumericIndex(ConfigurationPropertyName name) {, +			int start = this.root.getNumberOfElements() + 1;, +			int size = name.getNumberOfElements();, +			for (int i = start; i < size; i++) {, +				if (name.IsNumericIndex(i)) {, +					return name.chop(i);, +				}, +			}, +			return name;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +	 * @return {@code true} if the element is indexed, +	 * Return if the an element in the name is indexed and numeric., +	 * @param elementIndex the index of the element, +	 * @return {@code true} if the element is indexed and numeric, +	 */, +	public boolean IsNumericIndex(int elementIndex) {, +		return isIndexed(elementIndex) && isNumeric(getElement(elementIndex, Form.ORIGINAL));, +	}, +, +	/**, +	private static boolean isNumeric(CharSequence element) {, +		int length = element.length();, +		for (int i = 0; i < length; i++) {, +			if (!Character.isDigit(element.charAt(i))) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +import java.util.stream.Collectors;, +	@Test, +	public void bindToMapStringArrayWithDotKeysShouldPreserveDot() throws Exception {]