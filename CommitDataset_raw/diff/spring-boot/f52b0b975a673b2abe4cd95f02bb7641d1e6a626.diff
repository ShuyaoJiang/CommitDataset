[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, + * @author Andy Wilkinson, +		public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +				this.argumentResolvers.stream().forEach(configurer::addCustomResolver);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfiguration.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, + * @author Andy Wilkinson, +		public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +				this.argumentResolvers.stream().forEach(configurer::addCustomResolver);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java, +import java.util.List;, +import org.springframework.test.util.ReflectionTestUtils;, + * @author Andy Wilkinson, +	@SuppressWarnings("unchecked"), +		assertThat((List<HandlerMethodArgumentResolver>) ReflectionTestUtils, +				.getField(adapter.getArgumentResolverConfigurer(), "customResolvers")), +						.contains(]