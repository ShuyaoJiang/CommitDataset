[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Set;, +import java.util.stream.Collectors;, +import liquibase.changelog.ChangeLogHistoryService;, +import liquibase.changelog.ChangeSet.ExecType;, +import liquibase.changelog.RanChangeSet;, +public class LiquibaseEndpoint extends AbstractEndpoint<Map<String, LiquibaseReport>> {, +	public Map<String, LiquibaseReport> invoke() {, +		Map<String, LiquibaseReport> reports = new HashMap<>();, +			reports.put(entry.getKey(), createReport(entry.getValue(), service, factory));, +		}, +		return reports;, +	}, +, +	private LiquibaseReport createReport(SpringLiquibase liquibase,, +			ChangeLogHistoryService service, DatabaseFactory factory) {, +			DataSource dataSource = liquibase.getDataSource();, +			JdbcConnection connection = new JdbcConnection(dataSource.getConnection());, +				Database database = factory.findCorrectDatabaseImplementation(connection);, +				String defaultSchema = liquibase.getDefaultSchema();, +				service.setDatabase(database);, +				return new LiquibaseReport(service.getRanChangeSets().stream(), +						.map(ChangeSet::new).collect(Collectors.toList()));, +			throw new IllegalStateException("Unable to get Liquibase change sets", ex);, +	 * Report for a single {@link SpringLiquibase} instance., +		private final List<ChangeSet> changeSets;, +		public LiquibaseReport(List<ChangeSet> changeSets) {, +			this.changeSets = changeSets;, +		public List<ChangeSet> getChangeSets() {, +			return this.changeSets;, +	}, +, +	/**, +	 * A Liquibase change set., +	 */, +	public static class ChangeSet {, +, +		private final String author;, +, +		private final String changeLog;, +, +		private final String comments;, +, +		private final ContextExpression contextExpression;, +, +		private final Date dateExecuted;, +, +		private final String deploymentId;, +, +		private final String description;, +, +		private final ExecType execType;, +, +		private final String id;, +, +		private final Set<String> labels;, +, +		private final String checksum;, +, +		private final Integer orderExecuted;, +, +		private final String tag;, +, +		public ChangeSet(RanChangeSet ranChangeSet) {, +			this.author = ranChangeSet.getAuthor();, +			this.changeLog = ranChangeSet.getChangeLog();, +			this.comments = ranChangeSet.getComments();, +			this.contextExpression = new ContextExpression(, +					ranChangeSet.getContextExpression().getContexts());, +			this.dateExecuted = ranChangeSet.getDateExecuted();, +			this.deploymentId = ranChangeSet.getDeploymentId();, +			this.description = ranChangeSet.getDescription();, +			this.execType = ranChangeSet.getExecType();, +			this.id = ranChangeSet.getId();, +			this.labels = ranChangeSet.getLabels().getLabels();, +			this.checksum = ranChangeSet.getLastCheckSum() == null ? null, +					: ranChangeSet.getLastCheckSum().toString();, +			this.orderExecuted = ranChangeSet.getOrderExecuted();, +			this.tag = ranChangeSet.getTag();, +		}, +, +		public String getAuthor() {, +			return this.author;, +		}, +, +		public String getChangeLog() {, +			return this.changeLog;, +		}, +, +		public String getComments() {, +			return this.comments;, +		}, +, +		public ContextExpression getContextExpression() {, +			return this.contextExpression;, +		}, +, +		public Date getDateExecuted() {]