[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, +	 * Optionally provide explicit resource locations to bind to. By default the, +	 * configuration at these specified locations will be merged with the default, +	 * configuration., +	 * @see #merge(), +	/**, +	 * Flag to indicate that configuration loaded from the specified locations should be, +	 * merged with the default configuration., +	 * @return the flag value (default true), +	 * @see #locations(), +	 */, +	boolean merge() default true;, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, +	 * Optionally provide explicit resource locations to bind to. By default the, +	 * configuration at these specified locations will be merged with the default, +	 * configuration., +	 * @see #merge(), +	/**, +	 * Flag to indicate that configuration loaded from the specified locations should be, +	 * merged with the default configuration., +	 * @return the flag value (default true), +	 * @see #locations(), +	 */, +	boolean merge() default true;, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +			factory.setPropertySources(loadPropertySources(annotation.locations(),, +					annotation.merge()));, +	private PropertySources loadPropertySources(String[] locations,, +			boolean mergeDefaultSources) {, +, +			MutablePropertySources loaded = loader.getPropertySources();, +			if (mergeDefaultSources) {, +				for (PropertySource<?> propertySource : this.propertySources) {, +					loaded.addLast(propertySource);, +				}, +			}, +			return loaded;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationProperties.java, +	 * Optionally provide explicit resource locations to bind to. By default the, +	 * configuration at these specified locations will be merged with the default, +	 * configuration., +	 * @see #merge(), +	/**, +	 * Flag to indicate that configuration loaded from the specified locations should be, +	 * merged with the default configuration., +	 * @return the flag value (default true), +	 * @see #locations(), +	 */, +	boolean merge() default true;, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java, +			factory.setPropertySources(loadPropertySources(annotation.locations(),, +					annotation.merge()));, +	private PropertySources loadPropertySources(String[] locations,, +			boolean mergeDefaultSources) {, +, +			MutablePropertySources loaded = loader.getPropertySources();, +			if (mergeDefaultSources) {, +				for (PropertySource<?> propertySource : this.propertySources) {, +					loaded.addLast(propertySource);, +				}, +			}, +			return loaded;, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +	@Test, +	public void placeholderResolutionWithCustomLocation() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "fooValue:bar");, +		this.context.register(CustomConfigurationLocation.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(CustomConfigurationLocation.class).getFoo(),, +				equalTo("bar"));, +	}, +, +	@Test, +	public void placeholderResolutionWithUnmergedCustomLocation() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context, "fooValue:bar");, +		this.context.register(UnmergedCustomConfigurationLocation.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(UnmergedCustomConfigurationLocation.class), +				.getFoo(), equalTo("${fooValue}"));, +	}, +, +	@EnableConfigurationProperties, +	@ConfigurationProperties(locations = "custom-location.yml"), +	public static class CustomConfigurationLocation {, +, +		private String foo;, +, +		public String getFoo() {, +			return this.foo;, +		}, +, +		public void setFoo(String foo) {, +			this.foo = foo;, +		}, +]