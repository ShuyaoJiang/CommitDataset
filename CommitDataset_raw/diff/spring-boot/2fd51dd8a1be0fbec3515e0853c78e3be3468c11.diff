[+++ b/spring-boot-dependencies/pom.xml, +		<spring-restdocs.version>1.2.0.RC1</spring-restdocs.version>, +++ b/spring-boot-dependencies/pom.xml, +		<spring-restdocs.version>1.2.0.RC1</spring-restdocs.version>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +	@AutoConfigureRestDocs, +`@AutoConfigureRestDocs` can be used to override the default output directory, +(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you, +are using Gradle). It can also be used to configure the host, scheme, and port that will, +appear in any documented URIs. If you require more control over Spring REST Docs', +configuration a `RestDocsMockMvcConfigurationCustomizer` bean can be used:, +++ b/spring-boot-dependencies/pom.xml, +		<spring-restdocs.version>1.2.0.RC1</spring-restdocs.version>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +	@AutoConfigureRestDocs, +`@AutoConfigureRestDocs` can be used to override the default output directory, +(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you, +are using Gradle). It can also be used to configure the host, scheme, and port that will, +appear in any documented URIs. If you require more control over Spring REST Docs', +configuration a `RestDocsMockMvcConfigurationCustomizer` bean can be used:, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocumentationContextProviderRegistrar.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.util.StringUtils;, +		BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(ManualRestDocumentation.class);, +		if (StringUtils.hasText(outputDir)) {, +			definitionBuilder.addConstructorArgValue(outputDir);, +		}, +				definitionBuilder.getBeanDefinition());, +++ b/spring-boot-dependencies/pom.xml, +		<spring-restdocs.version>1.2.0.RC1</spring-restdocs.version>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +	@AutoConfigureRestDocs, +`@AutoConfigureRestDocs` can be used to override the default output directory, +(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you, +are using Gradle). It can also be used to configure the host, scheme, and port that will, +appear in any documented URIs. If you require more control over Spring REST Docs', +configuration a `RestDocsMockMvcConfigurationCustomizer` bean can be used:, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocumentationContextProviderRegistrar.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.util.StringUtils;, +		BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(ManualRestDocumentation.class);, +		if (StringUtils.hasText(outputDir)) {, +			definitionBuilder.addConstructorArgValue(outputDir);, +		}, +				definitionBuilder.getBeanDefinition());, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java, + * Copyright 2012-2017 the original author or authors., +@AutoConfigureRestDocs, +++ b/spring-boot-dependencies/pom.xml, +		<spring-restdocs.version>1.2.0.RC1</spring-restdocs.version>, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +	@AutoConfigureRestDocs, +`@AutoConfigureRestDocs` can be used to override the default output directory, +(`target/generated-snippets` if you are using Maven or `build/generated-snippets` if you, +are using Gradle). It can also be used to configure the host, scheme, and port that will, +appear in any documented URIs. If you require more control over Spring REST Docs', +configuration a `RestDocsMockMvcConfigurationCustomizer` bean can be used:, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocumentationContextProviderRegistrar.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.util.StringUtils;, +		BeanDefinitionBuilder definitionBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(ManualRestDocumentation.class);, +		if (StringUtils.hasText(outputDir)) {, +			definitionBuilder.addConstructorArgValue(outputDir);, +		}, +				definitionBuilder.getBeanDefinition());, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java, + * Copyright 2012-2017 the original author or authors., +@AutoConfigureRestDocs, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationIntegrationTests.java, + * Copyright 2012-2017 the original author or authors., +@AutoConfigureRestDocs(uriScheme = "https", uriHost = "api.example.com", uriPort = 443)]