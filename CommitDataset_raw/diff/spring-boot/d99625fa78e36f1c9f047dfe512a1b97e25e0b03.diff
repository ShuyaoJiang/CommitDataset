[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.cassandra.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.cassandra.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.couchbase.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.cassandra.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.couchbase.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.mongodb.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.cassandra.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.couchbase.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.mongodb.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +	private final Cache cache = new Cache();, +, +	public Cache getCache() {, +		return this.cache;, +	}, +, +	 * Cache configuration., +	public static class Cache {, +		 * Cache period for the resources served by the resource handler. If a duration, +		 * suffix is not specified, seconds will be used. Can be overridden by the, +		 * 'spring.resources.cache.control' properties., +		 */, +		@DefaultDurationUnit(ChronoUnit.SECONDS), +		private Duration period;, +, +		/**, +		 * Cache control HTTP headers, only allows valid directive combinations. Overrides, +		 * the 'spring.resources.cache.period' property., +		 */, +		private final Control control = new Control();, +, +		public Duration getPeriod() {, +			return this.period;, +		}, +, +		public void setPeriod(Duration period) {, +			this.period = period;, +		}, +, +		public Control getControl() {, +			return this.control;, +		}, +, +		/**, +		 * Cache Control HTTP header configuration., +		 */, +		public static class Control {, +, +			/**, +			 * Maximum time the response should be cached, in seconds if no duration, +			 * suffix is not specified., +			 * Indicate that the cached response can be reused only if re-validated with, +			 * the server., +			 * Indicate intermediaries (caches and others) that they should not transform, +			 * the response content., +			 * Indicate that the response message is intended for a single user and must, +			 * not be stored by a shared cache., +			 * Same meaning as the "must-revalidate" directive, except that it does not, +			 * apply to private caches., +			 * Maximum time the response can be served after it becomes stale, in seconds, +			 * if no duration suffix is not specified., +			 * Maximum time the response may be used when errors are encountered, in, +			 * seconds if no duration suffix is not specified., +			 * Maximum time the response should be cached by shared caches, in seconds if, +			 * no duration suffix is not specified., +				callIfTrue(this.mustRevalidate, cacheControl,, +						CacheControl::mustRevalidate);, +				callIfTrue(this.proxyRevalidate, cacheControl,, +						CacheControl::proxyRevalidate);, +					cacheControl.staleWhileRevalidate(, +							this.staleWhileRevalidate.getSeconds(), TimeUnit.SECONDS);, +					return CacheControl.maxAge(this.maxAge.getSeconds(),, +							TimeUnit.SECONDS);, +, +}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.cassandra.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.couchbase.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveRepositoriesAutoConfiguration.java, +@ConditionalOnProperty(prefix = "spring.data.mongodb.reactiverepositories", name = "enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, +	private final Cache cache = new Cache();, +, +	public Cache getCache() {, +		return this.cache;, +	}, +, +	 * Cache configuration., +	public static class Cache {, +		 * Cache period for the resources served by the resource handler. If a duration]