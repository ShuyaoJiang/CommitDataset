[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +	@Order(SecurityProperties.IGNORED_ORDER + 1), +	@Order(ManagementServerProperties.BASIC_AUTH_ORDER), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +	@Order(SecurityProperties.IGNORED_ORDER + 1), +	@Order(ManagementServerProperties.BASIC_AUTH_ORDER), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +	/**, +	 * Order applied to the WebSecurityConfigurerAdapter that is used to configure basic, +	 * authentication for management endpoints. If you want to add your own authentication, +	 * for all or some of those endpoints the best thing to do is add your own, +	 * WebSecurityConfigurerAdapter with lower order., +	 */, +	public static final int BASIC_AUTH_ORDER = SecurityProperties.BASIC_AUTH_ORDER - 5;, +, +	/**, +	 * Order after the basic authentication access control provided automatically for the, +	 * management endpoints. This is a useful place to put user-defined access rules if, +	 * you want to override the default access rules., +	 */, +	public static final int ACCESS_OVERRIDE_ORDER = ManagementServerProperties.BASIC_AUTH_ORDER - 1;, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +	@Order(SecurityProperties.IGNORED_ORDER + 1), +	@Order(ManagementServerProperties.BASIC_AUTH_ORDER), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +	/**, +	 * Order applied to the WebSecurityConfigurerAdapter that is used to configure basic, +	 * authentication for management endpoints. If you want to add your own authentication, +	 * for all or some of those endpoints the best thing to do is add your own, +	 * WebSecurityConfigurerAdapter with lower order., +	 */, +	public static final int BASIC_AUTH_ORDER = SecurityProperties.BASIC_AUTH_ORDER - 5;, +, +	/**, +	 * Order after the basic authentication access control provided automatically for the, +	 * management endpoints. This is a useful place to put user-defined access rules if, +	 * you want to override the default access rules., +	 */, +	public static final int ACCESS_OVERRIDE_ORDER = ManagementServerProperties.BASIC_AUTH_ORDER - 1;, +, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>javax.jms</groupId>, +			<artifactId>jms-api</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java, +	@Order(SecurityProperties.IGNORED_ORDER + 1), +	@Order(ManagementServerProperties.BASIC_AUTH_ORDER), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +import org.springframework.boot.autoconfigure.security.SecurityProperties;, +	/**, +	 * Order applied to the WebSecurityConfigurerAdapter that is used to configure basic, +	 * authentication for management endpoints. If you want to add your own authentication, +	 * for all or some of those endpoints the best thing to do is add your own, +	 * WebSecurityConfigurerAdapter with lower order., +	 */, +	public static final int BASIC_AUTH_ORDER = SecurityProperties.BASIC_AUTH_ORDER - 5;, +, +	/**, +	 * Order after the basic authentication access control provided automatically for the, +	 * management endpoints. This is a useful place to put user-defined access rules if, +	 * you want to override the default access rules., +	 */, +	public static final int ACCESS_OVERRIDE_ORDER = ManagementServerProperties.BASIC_AUTH_ORDER - 1;, +, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>javax.jms</groupId>, +			<artifactId>jms-api</artifactId>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.condition;, +, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Conditional;, +import org.springframework.core.env.Environment;, +, +/**, + * {@link Conditional} that only matches when the specified properties are defined in, + * {@link Environment}, + * ]