[+++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.developertools.restart.server.DefaultSourceFolderUrlFilter;, +import org.springframework.boot.developertools.restart.server.HttpRestartServer;, +import org.springframework.boot.developertools.restart.server.HttpRestartServerHandler;, +import org.springframework.boot.developertools.restart.server.SourceFolderUrlFilter;, +	private static final Log logger = LogFactory, +			.getLog(RemoteDeveloperToolsAutoConfiguration.class);, +, +	/**, +	 * Configuration for remote update and restarts., +	 */, +	@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true), +	static class RemoteRestartConfiguration {, +, +		@Autowired, +		private DeveloperToolsProperties properties;, +, +		@Bean, +		@ConditionalOnMissingBean, +		public SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {, +			return new DefaultSourceFolderUrlFilter();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public HttpRestartServer remoteRestartHttpRestartServer(, +				SourceFolderUrlFilter sourceFolderUrlFilter) {, +			return new HttpRestartServer(sourceFolderUrlFilter);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteRestartHanderMapper"), +		public UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {, +			String url = this.properties.getRemote().getContextPath() + "/restart";, +			logger.warn("Listening for remote restart updates on " + url);, +			Handler handler = new HttpRestartServerHandler(server);, +			return new UrlHandlerMapper(url, handler);, +		}, +, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsAutoConfiguration.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.developertools.restart.server.DefaultSourceFolderUrlFilter;, +import org.springframework.boot.developertools.restart.server.HttpRestartServer;, +import org.springframework.boot.developertools.restart.server.HttpRestartServerHandler;, +import org.springframework.boot.developertools.restart.server.SourceFolderUrlFilter;, +	private static final Log logger = LogFactory, +			.getLog(RemoteDeveloperToolsAutoConfiguration.class);, +, +	/**, +	 * Configuration for remote update and restarts., +	 */, +	@ConditionalOnProperty(prefix = "spring.developertools.remote.restart", name = "enabled", matchIfMissing = true), +	static class RemoteRestartConfiguration {, +, +		@Autowired, +		private DeveloperToolsProperties properties;, +, +		@Bean, +		@ConditionalOnMissingBean, +		public SourceFolderUrlFilter remoteRestartSourceFolderUrlFilter() {, +			return new DefaultSourceFolderUrlFilter();, +		}, +, +		@Bean, +		@ConditionalOnMissingBean, +		public HttpRestartServer remoteRestartHttpRestartServer(, +				SourceFolderUrlFilter sourceFolderUrlFilter) {, +			return new HttpRestartServer(sourceFolderUrlFilter);, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "remoteRestartHanderMapper"), +		public UrlHandlerMapper remoteRestartHanderMapper(HttpRestartServer server) {, +			String url = this.properties.getRemote().getContextPath() + "/restart";, +			logger.warn("Listening for remote restart updates on " + url);, +			Handler handler = new HttpRestartServerHandler(server);, +			return new UrlHandlerMapper(url, handler);, +		}, +, +	}, +, +++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/autoconfigure/RemoteDeveloperToolsProperties.java, +	private Restart restart = new Restart();, +, +	public Restart getRestart() {, +		return this.restart;, +	}, +, +	public static class Restart {, +, +		/**, +		 * Enable remote restart, +		 */, +		private boolean enabled = true;, +]