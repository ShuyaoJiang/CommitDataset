[+++ b/docs/howto.md, +for you as long as those `@Repositories` are included in the same, +package (or a sub-package) of your `@EnableAutoConfiguration` class., +"spring-boot-starter-data-jpa" for JPA and for Mongodb you only need, +to add "spring-datamongodb"), create some repository interfaces to, +handle your `@Entity` objects. Examples are in the, +Spring Boot tries to guess the location of your `@Repository`, +definitions, based on the `@EnableAutoConfiguration` it finds. To get, +more control, use the `@EnableJpaRepositories` annotation (from Spring, +Data JPA)., +, +## Separate @Entity Definitions from Spring Configuration, +, +Spring Boot tries to guess the location of your `@Entity` definitions,, +based on the `@EnableAutoConfiguration` it finds. To get more control,, +you can use the `@EntityScan` annotation, e.g., +, +```java, +@Configuration, +@EnableAutoConfiguration, +@EntityScan(basePackageClasses=City.class), +public class Application {, +..., +}, +```, +, +## Use a Traditional persistence.xml, +, +Spring doesn't require the use of XML to configure the JPA provider,, +and Spring Boot assumes you want to take advantage of that feature. If, +you prefer to use `persistence.xml` then you need to define your own, +`@Bean` of type `LocalEntityManagerFactoryBean`, and set the, +persistence unit name there., +, +See, +[`JpaBaseConfiguration`](https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java), +for the default settings., +]