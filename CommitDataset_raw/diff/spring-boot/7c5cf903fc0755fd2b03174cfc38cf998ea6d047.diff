[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +sensitive URL. If Spring Security is present, endpoints are secured by default using Spring Security’s, +content-negotiation strategy. If you wish to configure custom security for HTTP endpoints, for example, only allow users, +with a certain role to access them, Spring Boot provides some convenient `RequestMatcher` objects that can be used in combination with, +Additionally, if Spring Security is present, you would need to add custom security configuration, +that allows unauthenticated access to the endpoints. For example,, +, +[source,java,indent=0], +----, +	@Configuration, +	public class ActuatorSecurity extends WebSecurityConfigurerAdapter {, +, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests(), +				.anyRequest().permitAll(), +		}, +, +	}, +----, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +sensitive URL. If Spring Security is present, endpoints are secured by default using Spring Security’s, +content-negotiation strategy. If you wish to configure custom security for HTTP endpoints, for example, only allow users, +with a certain role to access them, Spring Boot provides some convenient `RequestMatcher` objects that can be used in combination with, +Additionally, if Spring Security is present, you would need to add custom security configuration, +that allows unauthenticated access to the endpoints. For example,, +, +[source,java,indent=0], +----, +	@Configuration, +	public class ActuatorSecurity extends WebSecurityConfigurerAdapter {, +, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests(), +				.anyRequest().permitAll(), +		}, +, +	}, +----, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +For security purposes, all actuators other than `/health` and `/info` are disabled by default., +The `management.endpoints.web.expose` flag can be used to enable the actuators., +If Spring Security is on the classpath and no other WebSecurityConfigurerAdapter is present,, +the actuators are secured by Spring Boot auto-config. If you define a custom `WebSecurityConfigurerAdapter`,, +Spring Boot auto-config will back off and you will be in full control of actuator access rules., +NOTE: Before setting the `management.endpoints.web.expose`, ensure that the exposed actuators, +do not contain sensitive information and/or are secured by placing them behind a firewall or by, +something like Spring Security.]