[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +The way that endpoints are exposed depends on the type of technology that you choose., +Most applications choose HTTP monitoring, where the ID of the endpoint along with a, +prefix of `/application` is mapped to a URL. For example, by default, the `health`, +endpoint is mapped to `/application/health`., +TIP: Generated passwords are logged as the application starts. To find the password in, +the console, search for '`Using default security password`'., +in your security configuration. Also, you need to change the, +`management.security.enabled` property to `false`., +Endpoints can be customized by using Spring properties. You can change whether an, +endpoint is `enabled` and its `id`., +For example, the following `application.properties` changes the id of the `beans`, +endpoint and also enables `shutdown`:, +By default, all endpoints except for `shutdown` are enabled. If you prefer to, +specifically "`opt-in`" endpoint enablement, you can use the `endpoints.default.enabled`, +property. For example, the following settings disables _all_ endpoints except for `info`:, +`org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration`. If you, +do so and if your users ask for a separate management port or address, the endpoint moves, +to a child context with all the other web endpoints., +often used by monitoring software to alert someone when a production system goes down., +The default information exposed by the `health` endpoint depends on how it is accessed., +For an unauthenticated connection in a secure application, a simple '`status`' message is, +{sc-spring-boot-actuator}/health/HealthIndicator.{sc-ext}[`HealthIndicator`] beans, +defined in your `ApplicationContext`. Spring Boot includes a number of auto-configured, +`HealthIndicators`, and you can also write your own. By default, the final system state, +is derived by the `HealthAggregator`, which sorts the statuses from each, +`HealthIndicator` based on an ordered list of statuses. The first status in the sorted, +list is used as the overall health status. If no `HealthIndicator` returns a status that, +is known to the `HealthAggregator`, an `UNKNOWN` status is used., +In addition to Spring Boot's predefined, +{sc-spring-boot-actuator}/health/Status.{sc-ext}[`Status`] types, it is also possible for, +`Health` to return a custom `Status` that represents a new system state. In such cases, a, +custom implementation of the, +also needs to be provided, or the default implementation has to be configured by using, +the `management.health.status.order` configuration property., +The HTTP status code in the response reflects the overall health status (for example,, +`UP` maps to 200, while `OUT_OF_SERVICE` and `DOWN` map to 503). You might also want to, +properties. All `Environment` properties under the info key are automatically exposed., +For example, you could add the following settings to your `application.properties` file:, +`GitProperties` bean is available, the `git.branch`, `git.commit.id` and, +`git.commit.time` properties are exposed., +If a `BuildProperties` bean is available, the `info` endpoint can also publish, +information about your build. This happens if a `META-INF/build-info.properties` file is, +available in the classpath., +Sometimes, it is useful to customize the prefix for the management endpoints. For, +example, your application might already use `/application` for another purpose. You can, +use the `management.endpoints.web.base-path` property to change the prefix for your, +management endpoint, as shown in the following example:, +You can set the `management.server.port` property to change the HTTP port, as shown in, +the following example:, +Since your management port is often protected by a firewall and not exposed to the, +public, you might not need security on the management endpoints, even if your main, +application is secure. In that case, you should have Spring Security on the classpath,, +and you can disable management security as follows:, +The information exposed by the health endpoint varies, depending on whether it is, +accessed anonymously and whether the enclosing application is secure. By default, when, +accessed anonymously in a secure application, any details about the server's health are, +hidden and the endpoint indicates whether the server is up or down., +applications. By default, Spring Boot exposes management endpoints as JMX MBeans under, +the `org.springframework.boot` domain., +configuration, which is made up of both the explicitly configured logging level as well, +as the effective logging level given to it by the logging framework.  These levels can be, +one of:, +one (or more) of these modules is sufficient to get started with Micrometer in your, +Spring Boot application. To learn more about Micrometer's capabilities, please refer to, +its https://micrometer.io/docs[reference documentation]., +all requests. Alternatively, when set to `false`, you can enable instrumentation by, +adding `@Timed` to a request-handling method., +metric named `data.source`. Data source instrumentation results in gauges representing, +the currently active, maximum allowed, and minimum allowed connections in the pool. Each, +of these gauges has a name which is prefixed by `data.source` by default. The prefix can, +be customized by using the `spring.metrics.jdbc.datasource-metric-name` property., +`InMemoryTraceRepository` bean. You can also create your own alternative, +`TraceRepository` implementation., +* `ApplicationPidFileWriter` creates a file containing the application PID (by default,, +in the application directory with the file name, `application.pid`).]