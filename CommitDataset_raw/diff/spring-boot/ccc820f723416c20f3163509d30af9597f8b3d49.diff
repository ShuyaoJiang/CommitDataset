[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +			MetricsProperties metricsProperties,, +		CompositeMeterRegistry composite = metricsProperties.isUseGlobalRegistry() ?, +				Metrics.globalRegistry : new CompositeMeterRegistry();, +, +		if (configurers.getIfAvailable() != null) {, +		}, +, +		if (exporters.getIfAvailable() != null) {, +			exporters.getIfAvailable().forEach(exporter -> {, +				final MeterRegistry childRegistry = exporter.registry();, +				if (composite == childRegistry) {, +					throw new IllegalStateException("cannot add a CompositeMeterRegistry to itself");, +				}, +				composite.add(childRegistry);, +			});, +		}, +			if (config.isUseGlobalRegistry() && registry != Metrics.globalRegistry) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +			MetricsProperties metricsProperties,, +		CompositeMeterRegistry composite = metricsProperties.isUseGlobalRegistry() ?, +				Metrics.globalRegistry : new CompositeMeterRegistry();, +, +		if (configurers.getIfAvailable() != null) {, +		}, +, +		if (exporters.getIfAvailable() != null) {, +			exporters.getIfAvailable().forEach(exporter -> {, +				final MeterRegistry childRegistry = exporter.registry();, +				if (composite == childRegistry) {, +					throw new IllegalStateException("cannot add a CompositeMeterRegistry to itself");, +				}, +				composite.add(childRegistry);, +			});, +		}, +			if (config.isUseGlobalRegistry() && registry != Metrics.globalRegistry) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, +	 * Datadog application key. Not strictly required, but improves the Datadog, +	 * experience by sending meter descriptions, types, and base units to Datadog., +	 */, +	private String applicationKey;, +, +	/**, +	 * Enable publishing descriptions metadata to Datadog. Turn, +	 * this off to minimize the amount of metadata sent., +	 */, +	private Boolean descriptions;, +, +	/**, +	public String getApplicationKey() {, +		return this.applicationKey;, +	}, +, +	public void setApplicationKey(String applicationKey) {, +		this.applicationKey = applicationKey;, +	}, +, +	public Boolean getDescriptions() {, +		return this.descriptions;, +	}, +, +	public void setDescriptions(Boolean descriptions) {, +		this.descriptions = descriptions;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java, +			MetricsProperties metricsProperties,, +		CompositeMeterRegistry composite = metricsProperties.isUseGlobalRegistry() ?, +				Metrics.globalRegistry : new CompositeMeterRegistry();, +, +		if (configurers.getIfAvailable() != null) {, +		}, +, +		if (exporters.getIfAvailable() != null) {, +			exporters.getIfAvailable().forEach(exporter -> {, +				final MeterRegistry childRegistry = exporter.registry();, +				if (composite == childRegistry) {, +					throw new IllegalStateException("cannot add a CompositeMeterRegistry to itself");, +				}, +				composite.add(childRegistry);, +			});, +		}, +			if (config.isUseGlobalRegistry() && registry != Metrics.globalRegistry) {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogProperties.java, +	 * Datadog application key. Not strictly required, but improves the Datadog, +	 * experience by sending meter descriptions, types, and base units to Datadog., +	 */, +	private String applicationKey;, +, +	/**, +	 * Enable publishing descriptions metadata to Datadog. Turn, +	 * this off to minimize the amount of metadata sent., +	 */, +	private Boolean descriptions;, +, +	/**, +	public String getApplicationKey() {, +		return this.applicationKey;, +	}, +]