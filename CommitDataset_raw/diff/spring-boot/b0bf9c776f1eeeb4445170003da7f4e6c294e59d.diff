[+++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/sample/jsp/WelcomeController.java, +	@RequestMapping("/foo"), +	public String foo(Map<String, Object> model) {, +		throw new RuntimeException("Foo");, +	}, +, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/sample/jsp/WelcomeController.java, +	@RequestMapping("/foo"), +	public String foo(Map<String, Object> model) {, +		throw new RuntimeException("Foo");, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java, +			HttpServletResponse response, Throwable ex) throws ServletException,, +			IOException {, +		if (response.isCommitted()) {, +		response.sendError(500, ex.getMessage());, +++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/sample/jsp/WelcomeController.java, +	@RequestMapping("/foo"), +	public String foo(Map<String, Object> model) {, +		throw new RuntimeException("Foo");, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java, +			HttpServletResponse response, Throwable ex) throws ServletException,, +			IOException {, +		if (response.isCommitted()) {, +		response.sendError(500, ex.getMessage());, +++ b/spring-boot/src/test/java/org/springframework/boot/context/web/ErrorPageFilterTests.java, +	public void responseCommitted() throws Exception {, +		this.filter.addErrorPages(new ErrorPage("/error"));, +		this.response.setCommitted(true);, +		this.chain = new MockFilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +				((HttpServletResponse) response).sendError(400, "BAD");, +				super.doFilter(request, response);, +			}, +		};, +		this.filter.doFilter(this.request, this.response, this.chain);, +		assertThat(this.chain.getRequest(), equalTo((ServletRequest) this.request));, +		assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse(),, +				equalTo((ServletResponse) this.response));, +		assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus(),, +				equalTo(400));, +	}, +, +	@Test, +	public void responseUncommitted() throws Exception {, +		this.chain = new MockFilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +				((HttpServletResponse) response).sendError(400, "BAD");, +				super.doFilter(request, response);, +			}, +		};, +		this.filter.doFilter(this.request, this.response, this.chain);, +		assertThat(this.chain.getRequest(), equalTo((ServletRequest) this.request));, +		assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getResponse(),, +				equalTo((ServletResponse) this.response));, +		assertThat(((HttpServletResponseWrapper) this.chain.getResponse()).getStatus(),, +				equalTo(400));, +	}, +, +	@Test]