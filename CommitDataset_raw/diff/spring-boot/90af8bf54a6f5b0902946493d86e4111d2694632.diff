[+++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty.websocket</groupId>, +			<artifactId>javax-websocket-server-impl</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty.websocket</groupId>, +			<artifactId>javax-websocket-server-impl</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.apache.tomcat.embed</groupId>, +			<artifactId>tomcat-embed-websocket</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java, +import org.eclipse.jetty.webapp.AbstractConfiguration;, +import org.eclipse.jetty.webapp.WebAppContext;, +import org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer;, +import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory;, + * Auto configuration for websocket server in embedded Tomcat or Jetty. Requires, + * <code>spring-websocket</code> and either Tomcat or Jetty with their WebSocket modules, + * to be on the classpath., + * <p/>, + * If Tomcat's WebSocket support is detected on the classpath we add a listener that, + * <p/>, + * If Jetty's WebSocket support is detected on the classpath we add a configuration that, + * configures the context with WebSocket support. In a non-embedded container it should, + * already be there., + * @author Andy Wilkinson, +@ConditionalOnClass({ Servlet.class, WebSocketHandler.class }), +	@Configuration, +	@ConditionalOnClass(name = "org.apache.tomcat.websocket.server.WsSci", value = Tomcat.class), +	static class TomcatWebSocketConfiguration {, +, +			return new WebSocketContainerCustomizer<TomcatEmbeddedServletContainerFactory>(, +					TomcatEmbeddedServletContainerFactory.class) {, +				public void doCustomize(, +						TomcatEmbeddedServletContainerFactory tomcatContainer) {, +		 * Instead of registering the WsSci directly as a ServletContainerInitializer, we, +		 * use the ApplicationListener provided by Tomcat. Unfortunately the, +		 * ApplicationListener class moved packages in Tomcat 8 and been deleted in 8.0.8, +		 * so we have to use reflection., +				Object instance = BeanUtils.instantiateClass(ClassUtils, +						.getConstructorIfAvailable(listenerType, String.class,, +, +	@Configuration, +	@ConditionalOnClass(WebSocketServerContainerInitializer.class), +	static class JettyWebSocketConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean(name = "websocketContainerCustomizer"), +		public EmbeddedServletContainerCustomizer websocketContainerCustomizer() {, +			return new WebSocketContainerCustomizer<JettyEmbeddedServletContainerFactory>(, +					JettyEmbeddedServletContainerFactory.class) {, +, +				@Override, +				protected void doCustomize(JettyEmbeddedServletContainerFactory container) {, +					container.addConfigurations(new AbstractConfiguration() {, +, +						@Override, +						public void configure(WebAppContext context) throws Exception {, +							WebSocketServerContainerInitializer.configureContext(context);, +						}, +, +					});, +				}, +, +			};, +		}, +, +	}, +, +	abstract static class WebSocketContainerCustomizer<T extends ConfigurableEmbeddedServletContainer>, +			implements EmbeddedServletContainerCustomizer {, +, +		private Log logger = LogFactory.getLog(getClass());, +, +		private final Class<T> containerType;, +, +		protected WebSocketContainerCustomizer(Class<T> containerType) {, +			this.containerType = containerType;, +		}, +, +		@SuppressWarnings("unchecked"), +		@Override, +		public void customize(ConfigurableEmbeddedServletContainer container) {, +			if (container instanceof NonEmbeddedServletContainerFactory) {, +				this.logger, +						.info("NonEmbeddedServletContainerFactory detected. Websockets ", +								+ "support should be native so this normally is not a problem.");, +				return;, +			}]