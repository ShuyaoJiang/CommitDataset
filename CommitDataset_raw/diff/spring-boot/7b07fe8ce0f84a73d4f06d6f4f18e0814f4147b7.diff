[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	// In case server auto configuration hasn't been included, +	@Bean, +	@ConditionalOnMissingBean, +	public ServerProperties serverProperties() {, +		return new ServerProperties();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	// In case server auto configuration hasn't been included, +	@Bean, +	@ConditionalOnMissingBean, +	public ServerProperties serverProperties() {, +		return new ServerProperties();, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +A really useful thing to do in is to use `@IntegrationTest` to set `server.port=0`, +and then inject the actual ("local") port as a `@Value`. Example:, +	@IntegrationTest("server.port:0"), +        @Value("${local.server.port}"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	// In case server auto configuration hasn't been included, +	@Bean, +	@ConditionalOnMissingBean, +	public ServerProperties serverProperties() {, +		return new ServerProperties();, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +A really useful thing to do in is to use `@IntegrationTest` to set `server.port=0`, +and then inject the actual ("local") port as a `@Value`. Example:, +	@IntegrationTest("server.port:0"), +        @Value("${local.server.port}"), +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValueProperySource` that only has properties in `random.*`., +The `RandomValueProperySource` is useful for injecting random values, +(e.g. into secrets or test cases). It can produce integers, longs or, +strings, e.g., +[source,properties,indent=0], +----, +my.secret=${random.value}, +my.number=${random.int}, +my.bignumber=${random.long}, +my.number.less.than.ten=${random.int(10)}, +my.number.in.range=${random.int[1024,65536]}, +----, +, +The `random.int*` syntax is `OPEN value (,max) CLOSE` where the, +`OPEN,CLOSE` are any character and `value,max` are integers. If, +`max` is provided then `value` is the minimum value and `max` is the, +maximum (exclusive)., +, +To change the port you can add environment properties to, +`@IntegrationTest` as colon- or equals-separated name-value pairs,, +e.g. `@IntegrationTest("server.port:9000")`., +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +	// In case server auto configuration hasn't been included, +	@Bean, +	@ConditionalOnMissingBean, +	public ServerProperties serverProperties() {, +		return new ServerProperties();, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +A really useful thing to do in is to use `@IntegrationTest` to set `server.port=0`, +and then inject the actual ("local") port as a `@Value`. Example:, +	@IntegrationTest("server.port:0"), +        @Value("${local.server.port}"), +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValueProperySource` that only has properties in `random.*`., +The `RandomValueProperySource` is useful for injecting random values, +(e.g. into secrets or test cases). It can produce integers, longs or, +strings, e.g., +[source,properties,indent=0], +----, +my.secret=${random.value}, +my.number=${random.int}, +my.bignumber=${random.long}, +my.number.less.than.ten=${random.int(10)}, +my.number.in.range=${random.int[1024,65536]}, +----, +, +The `random.int*` syntax is `OPEN value (,max) CLOSE` where the, +`OPEN,CLOSE` are any character and `value,max` are integers. If, +`max` is provided then `value` is the minimum value and `max` is the, +maximum (exclusive)., +, +To change the port you can add environment properties to, +`@IntegrationTest` as colon- or equals-separated name-value pairs,, +e.g. `@IntegrationTest("server.port:9000")`., +, +++ b/spring-boot-samples/spring-boot-sample-actuator-log4j/src/test/java/sample/actuator/log4j/SampleActuatorApplicationTests.java, +import org.springframework.beans.factory.annotation.Value;, +@IntegrationTest("server.port=0")]