[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		SEPARATED_TO_CAMELCASE {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		SEPARATED_TO_CAMELCASE {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +					return this.resolver.getProperty(prefix + relaxedKey, targetType);, +				}, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +					return this.resolver.getPropertyAsClass(prefix + relaxedKey,, +							targetType);, +				}, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +		}, +	 * @see #getSubProperties(PropertySources, String), +	 * @see #getSubProperties(PropertySources, String, String), +		return getSubProperties(env.getPropertySources(), this.prefix, keyPrefix);, +	 * @see #getSubProperties(PropertySources, String, String), +			String keyPrefix) {, +	 * @see #getSubProperties(PropertySources, String, String), +			String rootPrefix, String keyPrefix) {, +		RelaxedNames keyPrefixes = new RelaxedNames(keyPrefix);, +					String key = getSubKey(name, rootPrefix, keyPrefixes);, +	private static String getSubKey(String name, String rootPrefixes,, +			RelaxedNames keyPrefix) {, +		rootPrefixes = (rootPrefixes == null ? "" : rootPrefixes);, +		for (String rootPrefix : new RelaxedNames(rootPrefixes)) {, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		SEPARATED_TO_CAMELCASE {, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedPropertyResolver.java, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +					return this.resolver.getProperty(prefix + relaxedKey, targetType);, +				}, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +					return this.resolver.getPropertyAsClass(prefix + relaxedKey,, +							targetType);, +				}, +		RelaxedNames prefixes = new RelaxedNames(this.prefix);, +		RelaxedNames keys = new RelaxedNames(key);, +		for (String prefix : prefixes) {, +			for (String relaxedKey : keys) {, +				if (this.resolver.containsProperty(prefix + relaxedKey)) {, +		}, +	 * @see #getSubProperties(PropertySources, String), +	 * @see #getSubProperties(PropertySources, String, String), +		return getSubProperties(env.getPropertySources(), this.prefix, keyPrefix);, +	 * @see #getSubProperties(PropertySources, String, String), +			String keyPrefix) {, +	 * @see #getSubProperties(PropertySources, String, String), +			String rootPrefix, String keyPrefix) {, +		RelaxedNames keyPrefixes = new RelaxedNames(keyPrefix);, +					String key = getSubKey(name, rootPrefix, keyPrefixes);, +	private static String getSubKey(String name, String rootPrefixes,, +			RelaxedNames keyPrefix) {, +		rootPrefixes = (rootPrefixes == null ? "" : rootPrefixes);, +		for (String rootPrefix : new RelaxedNames(rootPrefixes)) {, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedPropertyResolverTests.java, +		this.source.put("myobject", "object");, +	public void getPropertyNoSeparator() throws Exception {, +		assertThat(this.resolver.getProperty("myobject"), equalTo("object"));, +		assertThat(this.resolver.getProperty("my-object"), equalTo("object"));, +	}, +, +	@Test, +		this.source.put("a.foobar", "spam");, +		assertThat(this.resolver.getProperty("foo-bar"), equalTo("spam"));]