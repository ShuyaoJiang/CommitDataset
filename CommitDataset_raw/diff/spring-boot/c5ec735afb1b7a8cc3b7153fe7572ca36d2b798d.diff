[+++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + * @author Chiristian Dupuis, +	public HealthEndpoint healthEndpoint() {, +		return new HealthEndpoint();, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, + * @author Chiristian Dupuis, +	public HealthEndpoint healthEndpoint() {, +		return new HealthEndpoint();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +/*, + * Copyright 2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure;, +, +import java.util.Map;, +, +import javax.sql.DataSource;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.actuate.health.CompositeHealthIndicator;, +import org.springframework.boot.actuate.health.HealthIndicator;, +import org.springframework.boot.actuate.health.MongoHealthIndicator;, +import org.springframework.boot.actuate.health.RedisHealthIndicator;, +import org.springframework.boot.actuate.health.SimpleHealthIndicator;, +import org.springframework.boot.actuate.health.VanillaHealthIndicator;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.autoconfigure.jdbc.CommonsDataSourceConfiguration;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.autoconfigure.jdbc.EmbeddedDataSourceConfiguration;, +import org.springframework.boot.autoconfigure.jdbc.HikariDataSourceConfiguration;, +import org.springframework.boot.autoconfigure.jdbc.TomcatDataSourceConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;, +import org.springframework.boot.autoconfigure.mongo.MongoDataAutoConfiguration;, +import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.data.mongodb.core.MongoTemplate;, +import org.springframework.data.redis.connection.RedisConnectionFactory;, +, +/**, + * @author Christian Dupuis, + * @since 1.1.0, + */, +@Configuration, +@AutoConfigureAfter({ DataSourceAutoConfiguration.class,, +		EmbeddedDataSourceConfiguration.class, CommonsDataSourceConfiguration.class,, +		HikariDataSourceConfiguration.class, TomcatDataSourceConfiguration.class,, +		MongoAutoConfiguration.class, MongoDataAutoConfiguration.class,, +		RedisAutoConfiguration.class }), +public class HealthIndicatorAutoConfiguration {, +, +	@Bean, +	@ConditionalOnMissingBean(HealthIndicator.class), +	public HealthIndicator<?> statusHealthIndicator() {, +		return new VanillaHealthIndicator();, +	}, +, +	@Configuration, +	@ConditionalOnBean(DataSource.class), +	public static class DataSourcesHealthIndicatorConfiguration {, +, +		@Autowired(required = false), +		private Map<String, DataSource> dataSources;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "dbHealthIndicator"), +		public HealthIndicator<? extends Object> dbHealthIndicator() {]