[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, +	 * A prefix that should be applied to each property., +	 */, +	String prefix() default "";, +, +	/**, +	 * One or more properties that must be present. If you are checking relaxed names you, +	 * should specify the property in its dashed form., +	/**, +	 * If relaxed names should be checked. Defaults to {@code true}., +	 */, +	boolean relaxedNames() default true;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, +	 * A prefix that should be applied to each property., +	 */, +	String prefix() default "";, +, +	/**, +	 * One or more properties that must be present. If you are checking relaxed names you, +	 * should specify the property in its dashed form., +	/**, +	 * If relaxed names should be checked. Defaults to {@code true}., +	 */, +	boolean relaxedNames() default true;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.PropertyResolver;, + * @author Phillip Webb, +		String prefix = (String) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("prefix");, +		String[] names = (String[]) metadata.getAnnotationAttributes(, +		Boolean relaxedNames = (Boolean) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("relaxedNames");, +		PropertyResolver resolver = context.getEnvironment();, +		if (relaxedNames) {, +			resolver = new RelaxedPropertyResolver(resolver, prefix);, +			prefix = "";, +		}, +, +		for (String name : names) {, +			name = prefix + name;, +			if (!resolver.containsProperty(name), +					|| "false".equalsIgnoreCase(resolver.getProperty(name))) {, +				missingProperties.add(name);, +, +		return ConditionOutcome.noMatch("@ConditionalOnProperty ", +				+ "missing required properties: ", +				+ StringUtils.arrayToCommaDelimitedString(missingProperties.toArray()), +				+ " not found");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnProperty.java, +	 * A prefix that should be applied to each property., +	 */, +	String prefix() default "";, +, +	/**, +	 * One or more properties that must be present. If you are checking relaxed names you, +	 * should specify the property in its dashed form., +	/**, +	 * If relaxed names should be checked. Defaults to {@code true}., +	 */, +	boolean relaxedNames() default true;, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +import org.springframework.core.env.PropertyResolver;, + * @author Phillip Webb, +		String prefix = (String) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("prefix");, +		String[] names = (String[]) metadata.getAnnotationAttributes(, +		Boolean relaxedNames = (Boolean) metadata.getAnnotationAttributes(, +				ConditionalOnProperty.class.getName()).get("relaxedNames");, +		PropertyResolver resolver = context.getEnvironment();, +		if (relaxedNames) {, +			resolver = new RelaxedPropertyResolver(resolver, prefix);, +			prefix = "";, +		}, +, +		for (String name : names) {, +			name = prefix + name;, +			if (!resolver.containsProperty(name), +					|| "false".equalsIgnoreCase(resolver.getProperty(name))) {, +				missingProperties.add(name);, +, +		return ConditionOutcome.noMatch("@ConditionalOnProperty ", +				+ "missing required properties: ", +				+ StringUtils.arrayToCommaDelimitedString(missingProperties.toArray()), +				+ " not found");, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java, +	public void allPropertiesAreDefined() {, +		assertTrue(this.context.containsBean("foo"));, +	}, +, +	@Test, +	public void notAllPropertiesAreDefined() {, +		EnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),, +				"property1=value1");, +		this.context.register(MultiplePropertiesRequiredConfiguration.class);, +		this.context.refresh();]