[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMapping.java, + * Copyright 2012-2017 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.web.accept.PathExtensionContentNegotiationStrategy;, +import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;, +	@Override, +	protected void extendInterceptors(List<Object> interceptors) {, +		interceptors.add(new SkipPathExtensionContentNegotiation());, +	}, +, +	/**, +	 * {@link HandlerInterceptorAdapter} to ensure that, +	 * {@link PathExtensionContentNegotiationStrategy} is skipped for actuator endpoints., +	 */, +	private static final class SkipPathExtensionContentNegotiation, +			extends HandlerInterceptorAdapter {, +, +		@Override, +		public boolean preHandle(HttpServletRequest request, HttpServletResponse response,, +				Object handler) throws Exception {, +			request.setAttribute(, +					WebMvcAutoConfiguration.SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE,, +					Boolean.TRUE);, +			return true;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMapping.java, + * Copyright 2012-2017 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.web.accept.PathExtensionContentNegotiationStrategy;, +import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;, +	@Override, +	protected void extendInterceptors(List<Object> interceptors) {, +		interceptors.add(new SkipPathExtensionContentNegotiation());, +	}, +, +	/**, +	 * {@link HandlerInterceptorAdapter} to ensure that, +	 * {@link PathExtensionContentNegotiationStrategy} is skipped for actuator endpoints., +	 */, +	private static final class SkipPathExtensionContentNegotiation, +			extends HandlerInterceptorAdapter {, +, +		@Override, +		public boolean preHandle(HttpServletRequest request, HttpServletResponse response,, +				Object handler) throws Exception {, +			request.setAttribute(, +					WebMvcAutoConfiguration.SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE,, +					Boolean.TRUE);, +			return true;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMapping.java, + * Copyright 2012-2017 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;, +import org.springframework.web.accept.PathExtensionContentNegotiationStrategy;, +import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;, +	@Override, +	protected void extendInterceptors(List<Object> interceptors) {, +		interceptors.add(new SkipPathExtensionContentNegotiation());, +	}, +, +	/**, +	 * {@link HandlerInterceptorAdapter} to ensure that, +	 * {@link PathExtensionContentNegotiationStrategy} is skipped for actuator endpoints., +	 */, +	private static final class SkipPathExtensionContentNegotiation, +			extends HandlerInterceptorAdapter {, +, +		@Override, +		public boolean preHandle(HttpServletRequest request, HttpServletResponse response,, +				Object handler) throws Exception {, +			request.setAttribute(, +					WebMvcAutoConfiguration.SKIP_PATH_EXTENSION_CONTENT_NEGOTIATION_ATTRIBUTE,, +					Boolean.TRUE);, +			return true;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +		assertThat(interceptors).hasSize(2);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMappingTests.java, +		assertThat(mapping.getHandler(request("POST", "/a")).getInterceptors()), +				.hasSize(1);]