[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +, +		doThrow(new MessagingException("A test exception")).when(this.mailSender), +				.testConnection();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +, +		doThrow(new MessagingException("A test exception")).when(this.mailSender), +				.testConnection();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java, +			if (type == null) {, +				return false;, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +, +		doThrow(new MessagingException("A test exception")).when(this.mailSender), +				.testConnection();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java, +			if (type == null) {, +				return false;, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/ClasspathLoggingApplicationListener.java, +		if (type == null) {, +			return false;, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MailHealthIndicatorTests.java, +, +		doThrow(new MessagingException("A test exception")).when(this.mailSender), +				.testConnection();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java, +			if (type == null) {, +				return false;, +			}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/ClasspathLoggingApplicationListener.java, +		if (type == null) {, +			return false;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +		return isAssignableFrom(resolvableType.getRawClass(), EVENT_TYPES);, +		if (type != null) {, +		}]