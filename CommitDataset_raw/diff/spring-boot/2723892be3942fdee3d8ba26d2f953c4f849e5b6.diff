[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/beans/BeansEndpoint.java, +		private final String contextId;, +		private ApplicationContextDescriptor(String contextId,, +				Map<String, BeanDescriptor> beans, ApplicationContextDescriptor parent) {, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/beans/BeansEndpoint.java, +		private final String contextId;, +		private ApplicationContextDescriptor(String contextId,, +				Map<String, BeanDescriptor> beans, ApplicationContextDescriptor parent) {, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		return new ConfigurationPropertiesDescriptor(context.getId(), beanDescriptors,, +		private final String contextId;, +, +		private ConfigurationPropertiesDescriptor(String contextId,, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/beans/BeansEndpoint.java, +		private final String contextId;, +		private ApplicationContextDescriptor(String contextId,, +				Map<String, BeanDescriptor> beans, ApplicationContextDescriptor parent) {, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		return new ConfigurationPropertiesDescriptor(context.getId(), beanDescriptors,, +		private final String contextId;, +, +		private ConfigurationPropertiesDescriptor(String contextId,, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/beans/BeansEndpointTests.java, +			assertThat(result.getContextId()).isEqualTo(context.getId());, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/beans/BeansEndpoint.java, +		private final String contextId;, +		private ApplicationContextDescriptor(String contextId,, +				Map<String, BeanDescriptor> beans, ApplicationContextDescriptor parent) {, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +		return new ConfigurationPropertiesDescriptor(context.getId(), beanDescriptors,, +		private final String contextId;, +, +		private ConfigurationPropertiesDescriptor(String contextId,, +			this.contextId = contextId;, +		public String getContextId() {, +			return this.contextId;, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/beans/BeansEndpointTests.java, +			assertThat(result.getContextId()).isEqualTo(context.getId());, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpointTests.java, +import java.util.function.BiConsumer;, +import org.springframework.context.ApplicationContext;, +		load((context, properties) -> {, +			assertThat(properties.getContextId()).isEqualTo(context.getId());, +		load((context, properties) -> {, +		load((context, properties) -> {, +		load("property", (context, properties) -> {, +		load(".*pass.*", (context, properties) -> {, +		load(Arrays.asList(".*\\.secrets\\..*", ".*\\.hidden\\..*"),, +				(context, properties) -> {, +		load((context, properties) -> {, +		load((context, properties) -> {, +		load((context, properties) -> {, +	private void load(, +			BiConsumer<ApplicationContext, ConfigurationPropertiesDescriptor> properties) {, +			BiConsumer<ApplicationContext, ConfigurationPropertiesDescriptor> properties) {, +			BiConsumer<ApplicationContext, ConfigurationPropertiesDescriptor> properties) {, +			properties.accept(context, endpoint.configurationProperties());]