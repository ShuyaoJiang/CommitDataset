[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public Jetty getJetty() {, +	public static class Jetty {, +, +		/**, +		 * Number of acceptor threads to use., +		 */, +		private Integer acceptors;, +, +		/**, +		 * Number of selector threads to use., +		 */, +		private Integer selectors;, +, +		public Integer getAcceptors() {, +			return this.acceptors;, +		}, +, +		public void setAcceptors(Integer acceptors) {, +			this.acceptors = acceptors;, +		}, +, +		public Integer getSelectors() {, +			return this.selectors;, +		}, +, +		public void setSelectors(Integer selectors) {, +			this.selectors = selectors;, +		}, +			if (this.acceptors != null) {, +				factory.setAcceptors(this.acceptors);, +			}, +			if (this.selectors != null) {, +				factory.setSelectors(this.selectors);, +			}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public Jetty getJetty() {, +	public static class Jetty {, +, +		/**, +		 * Number of acceptor threads to use., +		 */, +		private Integer acceptors;, +, +		/**, +		 * Number of selector threads to use., +		 */, +		private Integer selectors;, +, +		public Integer getAcceptors() {, +			return this.acceptors;, +		}, +, +		public void setAcceptors(Integer acceptors) {, +			this.acceptors = acceptors;, +		}, +, +		public Integer getSelectors() {, +			return this.selectors;, +		}, +, +		public void setSelectors(Integer selectors) {, +			this.selectors = selectors;, +		}, +			if (this.acceptors != null) {, +				factory.setAcceptors(this.acceptors);, +			}, +			if (this.selectors != null) {, +				factory.setSelectors(this.selectors);, +			}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java, + * @author Venil Noronha, +	public void testCustomizePostSize() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.maxHttpPostSize", "9999");, +		bindProperties(map);, +		assertThat(this.properties.getMaxHttpPostSize()).isEqualTo(9999);, +	}, +, +	@Test, +	public void testCustomizeJettyAcceptors() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.jetty.acceptors", "10");, +		bindProperties(map);, +		assertThat(this.properties.getJetty().getAcceptors()).isEqualTo(10);, +	}, +, +	@Test, +	public void testCustomizeJettySelectors() throws Exception {, +		Map<String, String> map = new HashMap<String, String>();, +		map.put("server.jetty.selectors", "10");, +		bindProperties(map);, +		assertThat(this.properties.getJetty().getSelectors()).isEqualTo(10);, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +	public Jetty getJetty() {, +	public static class Jetty {, +]