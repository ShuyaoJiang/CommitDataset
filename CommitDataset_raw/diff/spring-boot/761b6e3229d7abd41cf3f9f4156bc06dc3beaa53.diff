[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.junit.Assert.assertThat;, +	public void setupContext() {, +		this.context.setServletContext(new MockServletContext());, +		registerAndRefreshContext();, +		assertThat(this.context.getBean(FreeMarkerViewResolver.class), notNullValue());, +		assertThat(this.context.getBean(FreeMarkerConfigurer.class), notNullValue());, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/");, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/templates/empty-directory/");, +		registerAndRefreshContext();, +		assertThat(result, containsString("home"));, +		assertThat(response.getContentType(), equalTo("text/html"));, +		registerAndRefreshContext("spring.freemarker.contentType:application/json");, +		assertThat(result, containsString("home"));, +		assertThat(response.getContentType(), equalTo("application/json"));, +		registerAndRefreshContext("spring.freemarker.prefix:prefix/");, +		assertThat(result, containsString("prefixed"));, +		registerAndRefreshContext("spring.freemarker.suffix:.freemarker");, +		assertThat(result, containsString("suffixed"));, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:classpath:/custom-templates/");, +		assertThat(result, containsString("custom"));, +		registerAndRefreshContext("spring.freemarker.cache:false");, +		assertThat(this.context.getBean(FreeMarkerViewResolver.class).getCacheLimit(),, +				equalTo(0));, +		registerAndRefreshContext("spring.freemarker.settings.boolean_format:yup,nope");, +		assertThat(this.context.getBean(FreeMarkerConfigurer.class).getConfiguration(), +				.getSetting("boolean_format"), equalTo("yup,nope"));, +		registerAndRefreshContext();, +		assertThat(writer.toString(), containsString("Hello World"));, +	}, +, +	@Test, +	public void renderNonWebAppTemplate() throws Exception {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(, +				FreeMarkerAutoConfiguration.class);, +		try {, +			freemarker.template.Configuration freemarker = context, +					.getBean(freemarker.template.Configuration.class);, +			StringWriter writer = new StringWriter();, +			freemarker.getTemplate("message.ftl").process(this, writer);, +			assertThat(writer.toString(), containsString("Hello World"));, +		}, +		finally {, +			context.close();, +		}, +	}, +, +	private void registerAndRefreshContext(String... env) {, +		EnvironmentTestUtils.addEnvironment(this.context, env);, +		this.context.register(FreeMarkerAutoConfiguration.class);, +		this.context.refresh();, +		FreeMarkerViewResolver resolver = this.context, +				.getBean(FreeMarkerViewResolver.class);, +		View view = resolver.resolveViewName(viewName, Locale.UK);, +		assertThat(view, notNullValue());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationTests.java, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.junit.Assert.assertThat;, +	public void setupContext() {, +		this.context.setServletContext(new MockServletContext());, +		registerAndRefreshContext();, +		assertThat(this.context.getBean(FreeMarkerViewResolver.class), notNullValue());, +		assertThat(this.context.getBean(FreeMarkerConfigurer.class), notNullValue());, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/does-not-exist/");, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:", +				+ "classpath:/templates/empty-directory/");, +		registerAndRefreshContext();, +		assertThat(result, containsString("home"));, +		assertThat(response.getContentType(), equalTo("text/html"));, +		registerAndRefreshContext("spring.freemarker.contentType:application/json");, +		assertThat(result, containsString("home"));, +		assertThat(response.getContentType(), equalTo("application/json"));, +		registerAndRefreshContext("spring.freemarker.prefix:prefix/");, +		assertThat(result, containsString("prefixed"));, +		registerAndRefreshContext("spring.freemarker.suffix:.freemarker");, +		assertThat(result, containsString("suffixed"));, +		registerAndRefreshContext("spring.freemarker.templateLoaderPath:classpath:/custom-templates/");, +		assertThat(result, containsString("custom"));, +		registerAndRefreshContext("spring.freemarker.cache:false");, +		assertThat(this.context.getBean(FreeMarkerViewResolver.class).getCacheLimit(),, +				equalTo(0));, +		registerAndRefreshContext("spring.freemarker.settings.boolean_format:yup,nope");, +		assertThat(this.context.getBean(FreeMarkerConfigurer.class).getConfiguration(), +				.getSetting("boolean_format"), equalTo("yup,nope"));, +		registerAndRefreshContext();, +		assertThat(writer.toString(), containsString("Hello World"));, +	}, +, +	@Test, +	public void renderNonWebAppTemplate() throws Exception {]