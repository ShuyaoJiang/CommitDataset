[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2016 the original author or authors., +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			Assert.notNull(value, "Value must not be null");, +			this.details.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2016 the original author or authors., +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			Assert.notNull(value, "Value must not be null");, +			this.details.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/Info.java, + * Each detail element can be singular or a hierarchical object such as a POJO or a nested, +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			this.content.put(key, value);, +		 * Create a new {@link Info} instance based on the state of this builder., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2016 the original author or authors., +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			Assert.notNull(value, "Value must not be null");, +			this.details.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/Info.java, + * Each detail element can be singular or a hierarchical object such as a POJO or a nested, +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			this.content.put(key, value);, +		 * Create a new {@link Info} instance based on the state of this builder., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		load(CustomInfoContributorConfiguration.class,, +		load(CustomGitInfoContributorConfiguration.class);, +		load(CustomBuildInfoContributorConfiguration.class);, +	static class CustomInfoContributorConfiguration {, +	static class CustomGitInfoContributorConfiguration {, +	static class CustomBuildInfoContributorConfiguration {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2016 the original author or authors., +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			Assert.notNull(value, "Value must not be null");, +			this.details.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/Info.java, + * Each detail element can be singular or a hierarchical object such as a POJO or a nested, +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			this.content.put(key, value);, +		 * Create a new {@link Info} instance based on the state of this builder., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/InfoContributorAutoConfigurationTests.java, +		load(CustomInfoContributorConfiguration.class,, +		load(CustomGitInfoContributorConfiguration.class);, +		load(CustomBuildInfoContributorConfiguration.class);, +	static class CustomInfoContributorConfiguration {, +	static class CustomGitInfoContributorConfiguration {, +	static class CustomBuildInfoContributorConfiguration {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/InfoEndpointTests.java, +		public InfoContributor infoContributor() {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledEndpointElementCondition.java, + * Base endpoint element condition. An element can be disabled globally via the {@code defaults}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/OnEnabledInfoContributorCondition.java, + * {@link Condition} that checks if an info indicator is enabled., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Health.java, + * Copyright 2012-2016 the original author or authors., +		 * Record detail using given {@code key} and {@code value}., +		 * @param value the detail value, +		public Builder withDetail(String key, Object value) {, +			Assert.notNull(value, "Value must not be null");, +			this.details.put(key, value);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/Info.java, + * Each detail element can be singular or a hierarchical object such as a POJO or a nested]