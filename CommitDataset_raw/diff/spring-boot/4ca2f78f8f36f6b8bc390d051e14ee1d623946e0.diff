[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +import org.springframework.boot.loader.tools.Libraries;, +import org.springframework.boot.loader.tools.LibraryCallback;, +import org.springframework.boot.loader.tools.Repackager;, +			final List<Library> libraries;, +				libraries = addClasspathEntries(writer, classpathEntries);, +			libraries.addAll(createLibraries(dependencies));, +			Repackager repackager = new Repackager(file);, +			repackager.setMainClass(PackagedSpringApplicationLauncher.class.getName());, +			repackager.repackage(new Libraries() {, +, +				@Override, +				public void doWithLibraries(LibraryCallback callback) throws IOException {, +					for (Library library : libraries) {, +						callback.library(library);, +					}, +				}, +			});, +		}, +, +		private List<Library> createLibraries(List<URL> dependencies), +				throws URISyntaxException {, +			List<Library> libraries = new ArrayList<Library>();, +			for (URL dependency : dependencies) {, +				File file = new File(dependency.toURI());, +				libraries.add(new Library(file, LibraryScope.COMPILE));, +			}, +			return libraries;, +		private List<Library> addClasspathEntries(JarWriter writer,, +				List<MatchedResource> entries) throws IOException {, +			List<Library> libraries = new ArrayList<Library>();, +					libraries.add(new Library(entry.getFile(), LibraryScope.COMPILE));, +			return libraries;]