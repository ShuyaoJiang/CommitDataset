[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Map;, +import java.util.TreeMap;, +import org.gradle.api.file.RelativePath;, +import org.gradle.api.internal.file.copy.CopyActionProcessingStream;, +import org.gradle.api.internal.file.copy.FileCopyDetailsInternal;, +import org.gradle.api.tasks.WorkResult;, +		CopyAction copyAction = new BootZipCopyAction(jar.getArchivePath(),, +				jar.isPreserveFileTimestamps(), this::requiresUnpacking,, +		if (!jar.isReproducibleFileOrder()) {, +			return copyAction;, +		}, +		return new ReproducibleOrderingCopyAction(copyAction);, +	private static final class ReproducibleOrderingCopyAction implements CopyAction {, +, +		private final CopyAction delegate;, +, +		private ReproducibleOrderingCopyAction(CopyAction delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public WorkResult execute(CopyActionProcessingStream stream) {, +			return this.delegate.execute((action) -> {, +				Map<RelativePath, FileCopyDetailsInternal> detailsByPath = new TreeMap<>();, +				stream.process((details) -> {, +					detailsByPath.put(details.getRelativePath(), details);, +				});, +				detailsByPath.values().stream().forEach(action::processFile);, +			});, +		}, +, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Map;, +import java.util.TreeMap;, +import org.gradle.api.file.RelativePath;, +import org.gradle.api.internal.file.copy.CopyActionProcessingStream;, +import org.gradle.api.internal.file.copy.FileCopyDetailsInternal;, +import org.gradle.api.tasks.WorkResult;, +		CopyAction copyAction = new BootZipCopyAction(jar.getArchivePath(),, +				jar.isPreserveFileTimestamps(), this::requiresUnpacking,, +		if (!jar.isReproducibleFileOrder()) {, +			return copyAction;, +		}, +		return new ReproducibleOrderingCopyAction(copyAction);, +	private static final class ReproducibleOrderingCopyAction implements CopyAction {, +, +		private final CopyAction delegate;, +, +		private ReproducibleOrderingCopyAction(CopyAction delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public WorkResult execute(CopyActionProcessingStream stream) {, +			return this.delegate.execute((action) -> {, +				Map<RelativePath, FileCopyDetailsInternal> detailsByPath = new TreeMap<>();, +				stream.process((details) -> {, +					detailsByPath.put(details.getRelativePath(), details);, +				});, +				detailsByPath.values().stream().forEach(action::processFile);, +			});, +		}, +, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootZipCopyAction.java, +import org.gradle.api.file.FileCopyDetails;, +import org.gradle.util.GUtil;, +	private final boolean preserveFileTimestamps;, +, +	BootZipCopyAction(File output, boolean preserveFileTimestamps,, +			Spec<FileTreeElement> requiresUnpack, LaunchScriptConfiguration launchScript,, +			Set<String> storedPathPrefixes) {, +		this.preserveFileTimestamps = preserveFileTimestamps;, +					this.preserveFileTimestamps, this.requiresUnpack,, +					this.storedPathPrefixes));, +					if (!this.preserveFileTimestamps) {, +						entry.setTime(GUtil.CONSTANT_TIME_FOR_ZIP_ENTRIES);, +					}, +		private final boolean preserveFileTimestamps;, +, +				boolean preserveFileTimestamps, Spec<FileTreeElement> requiresUnpack,, +				Set<String> storedPathPrefixes) {, +			this.preserveFileTimestamps = preserveFileTimestamps;, +			archiveEntry.setTime(getTime(details));, +			archiveEntry.setTime(getTime(details));, +		private long getTime(FileCopyDetails details) {, +			return this.preserveFileTimestamps ? details.getLastModified(), +					: GUtil.CONSTANT_TIME_FOR_ZIP_ENTRIES;, +		}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/bundling/BootArchiveSupport.java, +import java.util.Map;, +import java.util.TreeMap;, +import org.gradle.api.file.RelativePath;, +import org.gradle.api.internal.file.copy.CopyActionProcessingStream;, +import org.gradle.api.internal.file.copy.FileCopyDetailsInternal;]