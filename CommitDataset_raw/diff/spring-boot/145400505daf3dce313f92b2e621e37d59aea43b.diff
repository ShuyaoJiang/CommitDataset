[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/ValidationBindHandler.java, +		validate(name, target, context, result);, +			BindContext context, Object result) {, +		Object validationTarget = getValidationTarget(target, context, result);, +	private Object getValidationTarget(Bindable<?> target, BindContext context,, +			Object result) {, +		if (context.getDepth() == 0 && target.getValue() != null) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/ValidationBindHandler.java, +		validate(name, target, context, result);, +			BindContext context, Object result) {, +		Object validationTarget = getValidationTarget(target, context, result);, +	private Object getValidationTarget(Bindable<?> target, BindContext context,, +			Object result) {, +		if (context.getDepth() == 0 && target.getValue() != null) {, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/validation/ValidationBindHandlerTests.java, +	@Test, +	public void bindShouldNotValidateDepthGreaterThanZero() {, +		// gh-12227, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo.bar", "baz");, +		this.sources.add(source);, +		ExampleValidatedBeanWithGetterException existingValue = new ExampleValidatedBeanWithGetterException();, +		this.binder.bind(ConfigurationPropertyName.of("foo"),, +				Bindable.of(ExampleValidatedBeanWithGetterException.class), +						.withExistingValue(existingValue),, +				this.handler);, +	}, +, +, +	}, +, +	@Validated, +	public static class ExampleValidatedBeanWithGetterException {, +, +		public int getAge() {, +			throw new RuntimeException();, +		}, +]