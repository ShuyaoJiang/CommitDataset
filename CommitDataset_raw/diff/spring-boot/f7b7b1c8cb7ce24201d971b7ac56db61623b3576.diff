[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/ServletContextInitializerLifecycleListener.java, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java, +			addInstanceIdToEngineName();, +			removeServiceConnectors();, +			// We can re-throw failure exception directly in the main thread, +			rethrowDeferredStartupExceptions();, +			startDaemonAwaitThread();, +, +	private void addInstanceIdToEngineName() {, +		int instanceId = containerCounter.incrementAndGet();, +		if (instanceId > 0) {, +			Engine engine = this.tomcat.getEngine();, +			engine.setName(engine.getName() + "-" + instanceId);, +		}, +	}, +, +	private void removeServiceConnectors() {, +		for (Service service : this.tomcat.getServer().findServices()) {, +			Connector[] connectors = service.findConnectors().clone();, +			this.serviceConnectors.put(service, connectors);, +			for (Connector connector : connectors) {, +				service.removeConnector(connector);, +			}, +		}, +	}, +, +	private void rethrowDeferredStartupExceptions() throws Exception {, +		Container[] children = this.tomcat.getHost().findChildren();, +		for (Container container : children) {, +			if (container instanceof TomcatEmbeddedContext) {, +				Exception exception = ((TomcatEmbeddedContext) container).getStarter(), +						.getStartUpException();, +				if (exception != null) {, +					throw exception;, +				}, +			}, +		}, +	}, +, +	private void startDaemonAwaitThread() {, +		Thread awaitThread = new Thread("container-" + (containerCounter.get())) {, +			@Override, +			public void run() {, +				TomcatEmbeddedServletContainer.this.tomcat.getServer().await();, +			};, +		};, +		awaitThread.setDaemon(false);, +		awaitThread.start();, +	}, +, +		addPreviouslyRemovedConnectors();, +		Connector connector = this.tomcat.getConnector();, +		if (connector != null && this.autoStart) {, +			startConnector(connector);, +		}, +	}, +, +	private void addPreviouslyRemovedConnectors() {, +						stopProtocolHandler(connector);, +	}, +, +	private void stopProtocolHandler(Connector connector) {, +		try {, +			connector.getProtocolHandler().stop();, +		}, +		catch (Exception ex) {, +			this.logger.error("Cannot pause connector: ", ex);, +		}, +	}, +, +	private void startConnector(Connector connector) {]