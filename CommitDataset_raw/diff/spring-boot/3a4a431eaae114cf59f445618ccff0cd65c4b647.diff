[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	spring.main.lazy-initialization=false # Whether initialization should be performed lazily., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	spring.main.lazy-initialization=false # Whether initialization should be performed lazily., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-lazy-initialization]], +=== Lazy Initialization, +`SpringApplication` allows an application to be initialized lazily. When lazy, +initialization is enabled, beans are created as they are needed rather than during, +application startup. As a result, enabling lazy initialization can reduce the time that, +it takes your application to start. In a web application, enabling lazy initialization, +will result in many web-related beans not being initialized until an HTTP request is, +received., +, +A downside of lazy initialization is that it can delay the discovery of a problem with, +the application. If a misconfigured bean is initialized lazily, a failure will no longer, +occur during startup and the problem will only become apparent when the bean is, +initialized. Care must also be taken to ensure that the JVM has sufficient memory to, +accommodate all of the application's beans and not just those that are initialized during, +startup. For these reasons, lazy initialization is not enabled by default and it is, +recommended that fine-tuning of the JVM's heap size is done before enabling lazy, +initialization., +, +Lazy initialization can be enabled programatically using the `lazyInitialization` method, +on `SpringApplicationBuilder` or the `setLazyInitialization` method on, +`SpringApplication`. Alternatively, it can be enabled using the, +`spring.main.lazy-initialization` property as shown in the following example:, +, +[source,properties,indent=0], +----, +	spring.main.lazy-initialization=true, +----, +, +, +, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix/application-properties.adoc, +	spring.main.lazy-initialization=false # Whether initialization should be performed lazily., +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-lazy-initialization]], +=== Lazy Initialization, +`SpringApplication` allows an application to be initialized lazily. When lazy, +initialization is enabled, beans are created as they are needed rather than during, +application startup. As a result, enabling lazy initialization can reduce the time that, +it takes your application to start. In a web application, enabling lazy initialization, +will result in many web-related beans not being initialized until an HTTP request is, +received., +, +A downside of lazy initialization is that it can delay the discovery of a problem with, +the application. If a misconfigured bean is initialized lazily, a failure will no longer, +occur during startup and the problem will only become apparent when the bean is, +initialized. Care must also be taken to ensure that the JVM has sufficient memory to, +accommodate all of the application's beans and not just those that are initialized during, +startup. For these reasons, lazy initialization is not enabled by default and it is, +recommended that fine-tuning of the JVM's heap size is done before enabling lazy, +initialization., +, +Lazy initialization can be enabled programatically using the `lazyInitialization` method, +on `SpringApplicationBuilder` or the `setLazyInitialization` method on, +`SpringApplication`. Alternatively, it can be enabled using the, +`spring.main.lazy-initialization` property as shown in the following example:, +, +[source,properties,indent=0], +----, +	spring.main.lazy-initialization=true, +----, +, +, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.core.Ordered;, +	private boolean lazyInitialization = false;, +, +		if (this.lazyInitialization) {, +			context.addBeanFactoryPostProcessor(, +					new LazyInitializationBeanFactoryPostProcessor());, +		}, +	 * Sets if beans should be initialized lazily. Defaults to {@code false}., +	 * @param lazyInitialization if initialization should be lazy, +	 * @since 2.2, +	 * @see BeanDefinition#setLazyInit(boolean), +	 */, +	public void setLazyInitialization(boolean lazyInitialization) {, +		this.lazyInitialization = lazyInitialization;, +	}, +, +	/**, +	private static final class LazyInitializationBeanFactoryPostProcessor, +			implements BeanFactoryPostProcessor, Ordered {, +, +		@Override, +		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory), +				throws BeansException {, +			for (String name : beanFactory.getBeanDefinitionNames()) {, +				beanFactory.getBeanDefinition(name).setLazyInit(true);, +			}, +		}, +]