[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		if (context == null) {, +			return 0;, +		}, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +		if (context == null) {, +			return 0;, +		}, +++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java, +import javax.annotation.PostConstruct;, +, +import static org.hamcrest.Matchers.not;, +import static org.mockito.Matchers.any;, +	public void exceptionFromRefreshIsHandledGracefully() throws Exception {, +		final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class);, +		SpringApplication application = new SpringApplication(, +				RefreshFailureConfig.class) {, +, +			@Override, +			SpringBootExceptionHandler getSpringBootExceptionHandler() {, +				return handler;, +			}, +, +		};, +		ExitCodeListener listener = new ExitCodeListener();, +		application.addListeners(listener);, +		application.setWebEnvironment(false);, +		try {, +			application.run();, +			fail("Did not throw");, +		}, +		catch (RuntimeException ex) {, +		}, +		verify(handler).registerLoggedException(any(RefreshFailureException.class));, +		assertThat(this.output.toString(), not(containsString("NullPointerException")));, +	}, +, +	@Test, +	@Configuration, +	static class RefreshFailureConfig {, +, +		@PostConstruct, +		public void fail() {, +			throw new RefreshFailureException();, +		}, +	}, +, +	static class RefreshFailureException extends RuntimeException {, +, +	}, +]