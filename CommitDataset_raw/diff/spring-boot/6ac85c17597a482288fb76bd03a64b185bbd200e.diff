[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java, +import com.mongodb.MongoClientOptions;, +	@Autowired(required = false), +	private MongoClientOptions options;, +, +		this.mongo = this.properties.createMongoClient(this.options);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java, +import com.mongodb.MongoClientOptions;, +	@Autowired(required = false), +	private MongoClientOptions options;, +, +		this.mongo = this.properties.createMongoClient(this.options);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +	public MongoDbFactory mongoDbFactory(Mongo mongo) throws Exception {, +		String db = this.properties.getMongoClientDatabase();, +		return new SimpleMongoDbFactory(mongo, db);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public GridFsTemplate gridFsTemplate(Mongo mongo, MongoTemplate mongoTemplate) {, +		return new GridFsTemplate(new SimpleMongoDbFactory(mongo, db),, +				mongoTemplate.getConverter());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java, +import com.mongodb.MongoClientOptions;, +	@Autowired(required = false), +	private MongoClientOptions options;, +, +		this.mongo = this.properties.createMongoClient(this.options);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +	public MongoDbFactory mongoDbFactory(Mongo mongo) throws Exception {, +		String db = this.properties.getMongoClientDatabase();, +		return new SimpleMongoDbFactory(mongo, db);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public GridFsTemplate gridFsTemplate(Mongo mongo, MongoTemplate mongoTemplate) {, +		return new GridFsTemplate(new SimpleMongoDbFactory(mongo, db),, +				mongoTemplate.getConverter());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java, +import java.util.Arrays;, +import java.util.List;, +import com.mongodb.MongoClientOptions;, +import com.mongodb.MongoClientOptions.Builder;, +import com.mongodb.MongoCredential;, +import com.mongodb.ServerAddress;, +	private String username;, +, +	private char[] password;, +, +	public String getUsername() {, +		return this.username;, +	}, +, +	public void setUsername(String username) {, +		this.username = username;, +	}, +, +	public char[] getPassword() {, +		return this.password;, +	}, +, +	public void setPassword(char[] password) {, +		this.password = password;, +	}, +, +	public void clearPassword() {, +		if (this.password == null) {, +			return;, +		}, +		for (int i = 0; i < this.password.length; i++) {, +			this.password[i] = 0;, +		}, +	}, +, +	public MongoClient createMongoClient(MongoClientOptions options), +			throws UnknownHostException {, +		try {, +				if (options == null) {, +					options = MongoClientOptions.builder().build();, +				List<MongoCredential> credentials = null;, +				if (this.password != null && this.username != null) {, +					credentials = Arrays.asList(MongoCredential.createMongoCRCredential(, +							this.username, getMongoClientDatabase(), this.password));, +				}, +				return new MongoClient(Arrays.asList(new ServerAddress(this.host,, +						this.port)), credentials, options);, +			}, +			// The options and credentials are in the URI, +			return new MongoClient(new MongoClientURI(this.uri, builder(options)));, +		}, +		finally {, +			clearPassword();, +		}, +	}, +, +	private Builder builder(MongoClientOptions options) {, +		Builder builder = MongoClientOptions.builder();, +		if (options != null) {]