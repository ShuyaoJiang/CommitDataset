[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +	private static Map<String, String> ALIASES;, +, +	static {, +		Map<String, String> aliases = new HashMap<String, String>();, +		aliases.put("hsql", "hsqldb");, +		aliases.put("postgres", "postgresql");, +		ALIASES = Collections.unmodifiableMap(aliases);, +	}, +, +			schemaLocation = schemaLocation.replace("@@platform@@", getPlatform());, +	private String getPlatform() {, +		String databaseName = getDatabaseName();, +		if (ALIASES.containsKey(databaseName)) {, +			return ALIASES.get(databaseName);, +		}, +		return databaseName;, +	}, +, +	private String getDatabaseName() {, +			String databaseProductName = JdbcUtils, +					.extractDatabaseMetaData(this.dataSource, "getDatabaseProductName"), +					.toString();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +	private static Map<String, String> ALIASES;, +, +	static {, +		Map<String, String> aliases = new HashMap<String, String>();, +		aliases.put("hsql", "hsqldb");, +		aliases.put("postgres", "postgresql");, +		ALIASES = Collections.unmodifiableMap(aliases);, +	}, +, +			schemaLocation = schemaLocation.replace("@@platform@@", getPlatform());, +	private String getPlatform() {, +		String databaseName = getDatabaseName();, +		if (ALIASES.containsKey(databaseName)) {, +			return ALIASES.get(databaseName);, +		}, +		return databaseName;, +	}, +, +	private String getDatabaseName() {, +			String databaseProductName = JdbcUtils, +					.extractDatabaseMetaData(this.dataSource, "getDatabaseProductName"), +					.toString();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +			return this.initializer;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +	private static Map<String, String> ALIASES;, +, +	static {, +		Map<String, String> aliases = new HashMap<String, String>();, +		aliases.put("hsql", "hsqldb");, +		aliases.put("postgres", "postgresql");, +		ALIASES = Collections.unmodifiableMap(aliases);, +	}, +, +			schemaLocation = schemaLocation.replace("@@platform@@", getPlatform());, +	private String getPlatform() {, +		String databaseName = getDatabaseName();, +		if (ALIASES.containsKey(databaseName)) {, +			return ALIASES.get(databaseName);, +		}, +		return databaseName;, +	}, +, +	private String getDatabaseName() {, +			String databaseProductName = JdbcUtils, +					.extractDatabaseMetaData(this.dataSource, "getDatabaseProductName"), +					.toString();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProperties.java, +			return this.initializer;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java, +public class SessionAutoConfigurationJdbcTests, +		extends AbstractSessionAutoConfigurationTests {]