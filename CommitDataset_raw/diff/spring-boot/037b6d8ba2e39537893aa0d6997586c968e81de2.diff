[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>micrometer-registry-new-relic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>io.micrometer</groupId>, +			<artifactId>micrometer-registry-signalfx</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>io.micrometer</groupId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>micrometer-registry-new-relic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>io.micrometer</groupId>, +			<artifactId>micrometer-registry-signalfx</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>io.micrometer</groupId>, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/newrelic/NewRelicMetricsExportAutoConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics.export.newrelic;, +, +import io.micrometer.core.instrument.Clock;, +import io.micrometer.newrelic.NewRelicConfig;, +import io.micrometer.newrelic.NewRelicMeterRegistry;, +, +import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;, +import org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.AutoConfigureBefore;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +, +/**, + * {@link EnableAutoConfiguration Auto-configuration} for exporting metrics to New Relic., + *, + * @author Jon Schneider, + * @author Andy Wilkinson, + * @since 2.0.0, + */, +@Configuration, +@AutoConfigureBefore(SimpleMetricsExportAutoConfiguration.class), +@AutoConfigureAfter(MetricsAutoConfiguration.class), +@ConditionalOnBean(Clock.class), +@ConditionalOnClass(NewRelicMeterRegistry.class), +@EnableConfigurationProperties(NewRelicProperties.class), +public class NewRelicMetricsExportAutoConfiguration {, +, +	@Bean, +	@ConditionalOnMissingBean, +	public Clock micrometerClock() {, +		return Clock.SYSTEM;, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public NewRelicConfig newRelicConfig(NewRelicProperties props) {, +		return new NewRelicPropertiesConfigAdapter(props);, +	}, +, +	@Bean, +	@ConditionalOnMissingBean, +	public NewRelicMeterRegistry newRelicMeterRegistry(NewRelicConfig config,, +			Clock clock) {, +		return new NewRelicMeterRegistry(config, clock);, +	}, +, +}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/pom.xml, +			<artifactId>micrometer-registry-new-relic</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>io.micrometer</groupId>, +			<artifactId>micrometer-registry-signalfx</artifactId>, +			<optional>true</optional>]