[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Andy Wilkinson, +	@SuppressWarnings("rawtypes"), +			for (Entry<String, AbstractHandlerMethodMapping> bean : applicationContext, +					.getBeansOfType(AbstractHandlerMethodMapping.class).entrySet()) {, +				Map<?, HandlerMethod> methods = bean.getValue().getHandlerMethods();, +					map.put("bean", bean.getKey());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Andy Wilkinson, +	@SuppressWarnings("rawtypes"), +			for (Entry<String, AbstractHandlerMethodMapping> bean : applicationContext, +					.getBeansOfType(AbstractHandlerMethodMapping.class).entrySet()) {, +				Map<?, HandlerMethod> methods = bean.getValue().getHandlerMethods();, +					map.put("bean", bean.getKey());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Map.Entry;, +import java.util.SortedSet;, +import java.util.TreeSet;, + * @author Andy Wilkinson, +		SortedSet<Entry<String, ProjectType>> entries = new TreeSet<Entry<String, ProjectType>>(, +				new Comparator<Entry<String, ProjectType>>() {, +, +					@Override, +					public int compare(Entry<String, ProjectType> o1,, +							Entry<String, ProjectType> o2) {, +						return o1.getKey().compareTo(o2.getKey());, +					}, +, +				});, +		entries.addAll(metadata.getProjectTypes().entrySet());, +		for (Entry<String, ProjectType> entry : entries) {, +			ProjectType type = entry.getValue();, +			report.append(entry.getKey() + " -  " + type.getName());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, + * Copyright 2012-2016 the original author or authors., + * @author Andy Wilkinson, +	@SuppressWarnings("rawtypes"), +			for (Entry<String, AbstractHandlerMethodMapping> bean : applicationContext, +					.getBeansOfType(AbstractHandlerMethodMapping.class).entrySet()) {, +				Map<?, HandlerMethod> methods = bean.getValue().getHandlerMethods();, +					map.put("bean", bean.getKey());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Map.Entry;, +import java.util.SortedSet;, +import java.util.TreeSet;, + * @author Andy Wilkinson, +		SortedSet<Entry<String, ProjectType>> entries = new TreeSet<Entry<String, ProjectType>>(, +				new Comparator<Entry<String, ProjectType>>() {, +, +					@Override, +					public int compare(Entry<String, ProjectType> o1,, +							Entry<String, ProjectType> o2) {, +						return o1.getKey().compareTo(o2.getKey());, +					}, +, +				});, +		entries.addAll(metadata.getProjectTypes().entrySet());, +		for (Entry<String, ProjectType> entry : entries) {, +			ProjectType type = entry.getValue();, +			report.append(entry.getKey() + " -  " + type.getName());, +++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/PropertiesMergingResourceTransformer.java, + * Copyright 2012-2016 the original author or authors., +import java.util.Map.Entry;, + * @author Andy Wilkinson, +		for (Entry<Object, Object> entry : properties.entrySet()) {, +			String name = (String) entry.getKey();, +			String value = (String) entry.getValue();]