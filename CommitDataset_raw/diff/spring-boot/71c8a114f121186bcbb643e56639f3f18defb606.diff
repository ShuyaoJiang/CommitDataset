[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		if (isIncluded(Include.RESPONSE_HEADERS)) {, +	}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, +		if (isIncluded(Include.RESPONSE_HEADERS)) {, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, +import java.util.Collections;, +import static org.junit.Assert.assertTrue;, +	@SuppressWarnings({ "unchecked" }), +	public void filterDoesNotAddResponseHeadersWithoutResponseHeadersInclude(), +			throws ServletException, IOException {, +		this.properties.setInclude(Collections.singleton(Include.REQUEST_HEADERS));, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		response.addHeader("Content-Type", "application/json");, +		this.filter.doFilterInternal(request, response, new FilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response), +					throws IOException, ServletException {, +			}, +		});, +		Map<String, Object> info = this.repository.findAll().iterator().next().getInfo();, +		Map<String, Object> headers = (Map<String, Object>) info.get("headers");, +		assertTrue(headers.get("response") == null);, +	}, +, +	@Test, +]