[+++ b/pom.xml, +				<module>spring-boot-maven-settings</module>, +++ b/pom.xml, +				<module>spring-boot-maven-settings</module>, +++ b/spring-boot-cli/pom.xml, +				<groupId>${project.groupId}</groupId>, +				<artifactId>spring-boot-maven-settings</artifactId>, +				<version>${project.version}</version>, +			</dependency>, +			<dependency>, +++ b/pom.xml, +				<module>spring-boot-maven-settings</module>, +++ b/spring-boot-cli/pom.xml, +				<groupId>${project.groupId}</groupId>, +				<artifactId>spring-boot-maven-settings</artifactId>, +				<version>${project.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +import java.net.URL;, +import org.springframework.boot.cli.compiler.grape.AetherGrapeEngineFactory;, +, +		AetherGrapeEngine grapeEngine = AetherGrapeEngineFactory.create(this.loader,, +				configuration.getRepositoryConfiguration());, +, +		GrapeEngineInstaller.install(grapeEngine);, +			this.compilerAutoConfigurations = ServiceLoader, +					.load(CompilerAutoConfiguration.class);, +, +, +		for (URL url : getExistingUrls()) {, +			loader.addURL(url);, +		}, +, +, +	private URL[] getExistingUrls() {, +		ClassLoader tccl = Thread.currentThread().getContextClassLoader();, +		if (tccl instanceof ExtendedGroovyClassLoader) {, +			return ((ExtendedGroovyClassLoader) tccl).getURLs();, +		else {, +			return new URL[0];, +++ b/pom.xml, +				<module>spring-boot-maven-settings</module>, +++ b/spring-boot-cli/pom.xml, +				<groupId>${project.groupId}</groupId>, +				<artifactId>spring-boot-maven-settings</artifactId>, +				<version>${project.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +import java.net.URL;, +import org.springframework.boot.cli.compiler.grape.AetherGrapeEngineFactory;, +, +		AetherGrapeEngine grapeEngine = AetherGrapeEngineFactory.create(this.loader,, +				configuration.getRepositoryConfiguration());, +, +		GrapeEngineInstaller.install(grapeEngine);, +			this.compilerAutoConfigurations = ServiceLoader, +					.load(CompilerAutoConfiguration.class);, +, +, +		for (URL url : getExistingUrls()) {, +			loader.addURL(url);, +		}, +, +, +	private URL[] getExistingUrls() {, +		ClassLoader tccl = Thread.currentThread().getContextClassLoader();, +		if (tccl instanceof ExtendedGroovyClassLoader) {, +			return ((ExtendedGroovyClassLoader) tccl).getURLs();, +		else {, +			return new URL[0];, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +	private final DefaultRepositorySystemSession session;, +			RepositorySystem repositorySystem,, +			DefaultRepositorySystemSession repositorySystemSession,, +		this.repositorySystem = repositorySystem;, +		this.session = repositorySystemSession;, +, +		this.progressReporter = getProgressReporter(this.session);, +			builder.setProxy(this.session.getProxySelector().getProxy(repository));, +++ b/pom.xml, +				<module>spring-boot-maven-settings</module>, +++ b/spring-boot-cli/pom.xml, +				<groupId>${project.groupId}</groupId>, +				<artifactId>spring-boot-maven-settings</artifactId>, +				<version>${project.version}</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GroovyCompiler.java, +import java.net.URL;, +import org.springframework.boot.cli.compiler.grape.AetherGrapeEngineFactory;, +, +		AetherGrapeEngine grapeEngine = AetherGrapeEngineFactory.create(this.loader,, +				configuration.getRepositoryConfiguration());, +, +		GrapeEngineInstaller.install(grapeEngine);, +			this.compilerAutoConfigurations = ServiceLoader, +					.load(CompilerAutoConfiguration.class);, +]