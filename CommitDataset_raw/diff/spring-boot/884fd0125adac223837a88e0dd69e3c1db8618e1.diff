[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerAdapter.java, + * , +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerAdapter.java, + * , +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerAdapterTests.java, +import java.util.Collections;, +import java.util.Map;, +import org.junit.Test;, +import org.springframework.boot.actuate.endpoint.AbstractEndpoint;, +import org.springframework.boot.actuate.endpoint.Endpoint;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +, +import static org.junit.Assert.assertEquals;, +	private MockHttpServletRequest request = new MockHttpServletRequest();, +	private MockHttpServletResponse response = new MockHttpServletResponse();, +	@Test, +	public void rendersJson() throws Exception {, +		this.adapter.handle(this.request, this.response,, +				new AbstractEndpoint<Map<String, String>>("/foo") {, +					@Override, +					protected Map<String, String> doInvoke() {, +						return Collections.singletonMap("hello", "world");, +					}, +				});, +		assertEquals("{\"hello\":\"world\"}", this.response.getContentAsString());, +	}, +	@Test, +	public void rendersString() throws Exception {, +		this.request.addHeader("Accept", "text/plain");, +		this.adapter.handle(this.request, this.response, new AbstractEndpoint<String>(, +				"/foo") {, +			@Override, +			protected String doInvoke() {, +				return "hello world";, +			}, +		});, +		assertEquals("hello world", this.response.getContentAsString());, +	}]