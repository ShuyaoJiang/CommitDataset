[+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +		this.urls.addAll(urls);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +		this.urls.addAll(urls);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/DefaultSourceFolderUrlFilter.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<String> SKIPPED_PROJECTS = new HashSet<String>(, +			Arrays.asList("spring-boot", "spring-boot-devtools",, +					"spring-boot-autoconfigure", "spring-boot-actuator",, +					"spring-boot-starter"));, +, +		if (!jarName.startsWith(folder) || SKIPPED_PROJECTS.contains(folder)) {, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +		this.urls.addAll(urls);, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/server/DefaultSourceFolderUrlFilter.java, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +	private static final Set<String> SKIPPED_PROJECTS = new HashSet<String>(, +			Arrays.asList("spring-boot", "spring-boot-devtools",, +					"spring-boot-autoconfigure", "spring-boot-actuator",, +					"spring-boot-starter"));, +, +		if (!jarName.startsWith(folder) || SKIPPED_PROJECTS.contains(folder)) {, +++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/server/DefaultSourceFolderUrlFilterTests.java, +	@Test, +	public void skippedProjects() throws Exception {, +		String sourceFolder = "/Users/me/code/spring-boot-samples/", +				+ "spring-boot-sample-devtools";, +		URL jarUrl = new URL("jar:file:/Users/me/tmp/", +				+ "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar!/");, +		assertThat(this.filter.isMatch(sourceFolder, jarUrl), equalTo(true));, +		URL nestedJarUrl = new URL("jar:file:/Users/me/tmp/", +				+ "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar!/", +				+ "lib/spring-boot-1.3.0.BUILD-SNAPSHOT.jar!/");, +		assertThat(this.filter.isMatch(sourceFolder, nestedJarUrl), equalTo(false));, +		URL fileUrl = new URL("file:/Users/me/tmp/", +				+ "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar");, +		assertThat(this.filter.isMatch(sourceFolder, fileUrl), equalTo(true));, +	}, +]