[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +	private static final Collection<Exclusion> WILDCARD_EXCLUSION;, +	static {, +		List<Exclusion> exclusions = new ArrayList<Exclusion>();, +		exclusions.add(new Exclusion("*", "*", "*", "*"));, +		WILDCARD_EXCLUSION = Collections.unmodifiableList(exclusions);, +	}, +		catch (Exception ex) {, +			throw new DependencyResolutionFailedException(ex);, +	private List<File> resolve(List<Dependency> dependencies), +			throws ArtifactResolutionException {, +		try {, +			CollectRequest collectRequest = getCollectRequest(dependencies);, +			DependencyRequest dependencyRequest = getDependencyRequest(collectRequest);, +			DependencyResult result = this.repositorySystem.resolveDependencies(, +					this.session, dependencyRequest);, +			addManagedDependencies(result);, +			return getFiles(result);, +		}, +		catch (Exception ex) {, +			throw new DependencyResolutionFailedException(ex);, +		}, +		finally {, +			this.progressReporter.finished();, +		}, +	}, +, +	private CollectRequest getCollectRequest(List<Dependency> dependencies) {, +		CollectRequest collectRequest = new CollectRequest((Dependency) null,, +				dependencies, new ArrayList<RemoteRepository>(this.repositories));, +		collectRequest.setManagedDependencies(this.resolutionContext, +				.getManagedDependencies());, +		return collectRequest;, +	}, +, +	private DependencyRequest getDependencyRequest(CollectRequest collectRequest) {, +		DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,, +				DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,, +						JavaScopes.RUNTIME));, +		return dependencyRequest;, +	}, +, +	private void addManagedDependencies(DependencyResult result) {, +		this.resolutionContext.getManagedDependencies().addAll(getDependencies(result));, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +	private static final Collection<Exclusion> WILDCARD_EXCLUSION;, +	static {, +		List<Exclusion> exclusions = new ArrayList<Exclusion>();, +		exclusions.add(new Exclusion("*", "*", "*", "*"));, +		WILDCARD_EXCLUSION = Collections.unmodifiableList(exclusions);, +	}, +		catch (Exception ex) {, +			throw new DependencyResolutionFailedException(ex);, +	private List<File> resolve(List<Dependency> dependencies), +			throws ArtifactResolutionException {, +		try {, +			CollectRequest collectRequest = getCollectRequest(dependencies);, +			DependencyRequest dependencyRequest = getDependencyRequest(collectRequest);, +			DependencyResult result = this.repositorySystem.resolveDependencies(, +					this.session, dependencyRequest);, +			addManagedDependencies(result);, +			return getFiles(result);, +		}, +		catch (Exception ex) {, +			throw new DependencyResolutionFailedException(ex);, +		}, +		finally {, +			this.progressReporter.finished();, +		}, +	}, +, +	private CollectRequest getCollectRequest(List<Dependency> dependencies) {, +		CollectRequest collectRequest = new CollectRequest((Dependency) null,, +				dependencies, new ArrayList<RemoteRepository>(this.repositories));, +		collectRequest.setManagedDependencies(this.resolutionContext, +				.getManagedDependencies());, +		return collectRequest;, +	}, +, +	private DependencyRequest getDependencyRequest(CollectRequest collectRequest) {, +		DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,, +				DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,, +						JavaScopes.RUNTIME));, +		return dependencyRequest;, +	}, +, +	private void addManagedDependencies(DependencyResult result) {, +		this.resolutionContext.getManagedDependencies().addAll(getDependencies(result));, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/ProjectLibraries.java, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java, +	private static final Collection<Exclusion> WILDCARD_EXCLUSION;, +	static {, +		List<Exclusion> exclusions = new ArrayList<Exclusion>();, +		exclusions.add(new Exclusion("*", "*", "*", "*"));, +		WILDCARD_EXCLUSION = Collections.unmodifiableList(exclusions);, +	}]