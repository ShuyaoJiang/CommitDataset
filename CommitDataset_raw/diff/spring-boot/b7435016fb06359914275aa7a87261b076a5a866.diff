[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java, +import com.couchbase.client.java.bucket.BucketInfo;, + * @author Stephane Nicoll, +		BucketInfo bucketInfo = this.couchbaseOperations.getCouchbaseBucket(), +				.bucketManager().info();, +		builder.up(), +				.withDetail("versions", StringUtils.collectionToCommaDelimitedString(, +						versions)), +				.withDetail("nodes", StringUtils.collectionToCommaDelimitedString(, +						bucketInfo.nodeList()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java, +import com.couchbase.client.java.bucket.BucketInfo;, + * @author Stephane Nicoll, +		BucketInfo bucketInfo = this.couchbaseOperations.getCouchbaseBucket(), +				.bucketManager().info();, +		builder.up(), +				.withDetail("versions", StringUtils.collectionToCommaDelimitedString(, +						versions)), +				.withDetail("nodes", StringUtils.collectionToCommaDelimitedString(, +						bucketInfo.nodeList()));, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicatorTests.java, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.Collections;, +import com.couchbase.client.java.Bucket;, +import com.couchbase.client.java.bucket.BucketInfo;, +import com.couchbase.client.java.bucket.BucketManager;, +import static org.assertj.core.api.Assertions.entry;, + * @author Stephane Nicoll, +	public void couchbaseIsUp() throws UnknownHostException {, +		BucketInfo bucketInfo = mock(BucketInfo.class);, +		given(bucketInfo.nodeList()).willReturn(Collections.singletonList(, +				InetAddress.getByName("127.0.0.1")));, +		BucketManager bucketManager = mock(BucketManager.class);, +		given(bucketManager.info()).willReturn(bucketInfo);, +		Bucket bucket = mock(Bucket.class);, +		given(bucket.bucketManager()).willReturn(bucketManager);, +				.willReturn(Collections.singletonList(new Version(1, 2, 3)));, +		CouchbaseOperations couchbaseOperations = mock(CouchbaseOperations.class);, +		given(couchbaseOperations.getCouchbaseBucket()).willReturn(bucket);, +		assertThat(health.getDetails()).containsOnly(entry("versions", "1.2.3"),, +				entry("nodes", "/127.0.0.1"));, +		verify(bucketInfo).nodeList();]