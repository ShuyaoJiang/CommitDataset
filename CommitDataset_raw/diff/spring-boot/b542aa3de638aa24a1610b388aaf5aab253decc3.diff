[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	/**, +	 * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate, +	 * versions., +	 */, +	private static final String WEBSHERE_JTA_PLATFORM_CLASSES[] = {, +			"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform",, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform", };, +, +			if (runningOnWebSphere()) {, +				// We can never use SpringJtaPlatform on WebSphere as, +				// WebSphereUowTransactionManger has a null TransactionManager, +				// which will cause Hibernate to NPE, +				configureWebSphereTransactionPlatform(vendorProperties);, +			}, +			else {, +				configureSpringJtaPlatform(vendorProperties, jtaTransactionManager);, +			}, +		}, +		else {, +			vendorProperties.put(JTA_PLATFORM, getNoJtaPlatformManager());, +		}, +	}, +, +	private boolean runningOnWebSphere() {, +		return ClassUtils.isPresent(, +				"com.ibm.websphere.jtaextensions.ExtendedJTATransaction", getClass(), +						.getClassLoader());, +	}, +, +	private void configureWebSphereTransactionPlatform(, +			Map<String, Object> vendorProperties) {, +		vendorProperties.put(JTA_PLATFORM, getWebSphereJtaPlatformManager());, +	}, +, +	private Object getWebSphereJtaPlatformManager() {, +		return getJtaPlatformManager(WEBSHERE_JTA_PLATFORM_CLASSES);, +	}, +, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();, +			}, +			catch (Exception ex) {, +				// Continue searching, +			}, +		}, +		throw new IllegalStateException("Could not configure JTA platform");, +	}, +, +	private void configureSpringJtaPlatform(Map<String, Object> vendorProperties,, +			JtaTransactionManager jtaTransactionManager) {, +			// Can happen if Hibernate 4.2 is used, +				// Assume that Hibernate will use JNDI, +						+ "version of Hibernate?", ex);, +		return getJtaPlatformManager(NO_JTA_PLATFORM_CLASSES);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	/**, +	 * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate, +	 * versions., +	 */, +	private static final String WEBSHERE_JTA_PLATFORM_CLASSES[] = {, +			"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform",, +			"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform", };, +, +			if (runningOnWebSphere()) {, +				// We can never use SpringJtaPlatform on WebSphere as, +				// WebSphereUowTransactionManger has a null TransactionManager, +				// which will cause Hibernate to NPE, +				configureWebSphereTransactionPlatform(vendorProperties);, +			}, +			else {, +				configureSpringJtaPlatform(vendorProperties, jtaTransactionManager);, +			}, +		}, +		else {, +			vendorProperties.put(JTA_PLATFORM, getNoJtaPlatformManager());, +		}, +	}, +, +	private boolean runningOnWebSphere() {, +		return ClassUtils.isPresent(, +				"com.ibm.websphere.jtaextensions.ExtendedJTATransaction", getClass(), +						.getClassLoader());, +	}, +, +	private void configureWebSphereTransactionPlatform(, +			Map<String, Object> vendorProperties) {, +		vendorProperties.put(JTA_PLATFORM, getWebSphereJtaPlatformManager());, +	}, +, +	private Object getWebSphereJtaPlatformManager() {, +		return getJtaPlatformManager(WEBSHERE_JTA_PLATFORM_CLASSES);, +	}, +, +	private Object getJtaPlatformManager(String[] candidates) {, +		for (String candidate : candidates) {, +			try {, +				return Class.forName(candidate).newInstance();]