[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		private static final Set<ConvertiblePair> CONVERTIBLE_TYPES;, +, +		static {, +			Set<ConvertiblePair> types = new HashSet<ConvertiblePair>(2);, +			types.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			types.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			CONVERTIBLE_TYPES = Collections.unmodifiableSet(types);, +		}, +			return CONVERTIBLE_TYPES;, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		private static final Set<ConvertiblePair> CONVERTIBLE_TYPES;, +, +		static {, +			Set<ConvertiblePair> types = new HashSet<ConvertiblePair>(2);, +			types.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			types.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			CONVERTIBLE_TYPES = Collections.unmodifiableSet(types);, +		}, +			return CONVERTIBLE_TYPES;, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or if, + * {@code webjars-locator} is on the classpath., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		private static final Set<ConvertiblePair> CONVERTIBLE_TYPES;, +, +		static {, +			Set<ConvertiblePair> types = new HashSet<ConvertiblePair>(2);, +			types.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			types.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			CONVERTIBLE_TYPES = Collections.unmodifiableSet(types);, +		}, +			return CONVERTIBLE_TYPES;, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or if, + * {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, +	private static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(WEBJAR_ASSERT_LOCATOR,, +					getClass().getClassLoader());, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		private static final Set<ConvertiblePair> CONVERTIBLE_TYPES;, +, +		static {, +			Set<ConvertiblePair> types = new HashSet<ConvertiblePair>(2);, +			types.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			types.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			CONVERTIBLE_TYPES = Collections.unmodifiableSet(types);, +		}, +			return CONVERTIBLE_TYPES;, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or if, + * {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, +	private static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(WEBJAR_ASSERT_LOCATOR,, +					getClass().getClassLoader());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java, + * Copyright 2012-2016 the original author or authors., +		 * @return whether the resource chain is enabled or {@code null} if no specified, +		 * settings are present., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java, +		private static final Set<ConvertiblePair> CONVERTIBLE_TYPES;, +, +		static {, +			Set<ConvertiblePair> types = new HashSet<ConvertiblePair>(2);, +			types.add(new ConvertiblePair(String.class, MigrationVersion.class));, +			types.add(new ConvertiblePair(Number.class, MigrationVersion.class));, +			CONVERTIBLE_TYPES = Collections.unmodifiableSet(types);, +		}, +			return CONVERTIBLE_TYPES;, +		public Object convert(Object source, TypeDescriptor sourceType,, +				TypeDescriptor targetType) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ConditionalOnEnabledResourceChain.java, + * enabled. Matches if {@link ResourceProperties.Chain#getEnabled()} is {@code true} or if, + * {@code webjars-locator} is on the classpath., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/OnEnabledResourceChainCondition.java, +	private static final String WEBJAR_ASSERT_LOCATOR = "org.webjars.WebJarAssetLocator";, +			boolean webJarsLocatorPresent = ClassUtils.isPresent(WEBJAR_ASSERT_LOCATOR,, +					getClass().getClassLoader());]