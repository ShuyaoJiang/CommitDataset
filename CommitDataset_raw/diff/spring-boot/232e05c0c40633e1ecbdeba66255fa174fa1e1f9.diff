[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import java.lang.reflect.Method;, +, +import liquibase.exception.LiquibaseException;, +import org.springframework.util.ReflectionUtils;, +			SpringLiquibase liquibase = createSpringLiquibase();, +		private SpringLiquibase createSpringLiquibase() {, +			SpringLiquibase liquibase;, +			DataSource dataSourceToUse = getDataSource();, +			if (dataSourceToUse == null) {, +				dataSourceToUse = DataSourceBuilder.create().url(this.properties.getUrl()), +						.username(this.properties.getUser()), +						.password(this.properties.getPassword()).build();, +				liquibase = new DataSourceClosingSpringLiquibase();, +			}, +			else {, +				liquibase = new SpringLiquibase();, +			}, +			liquibase.setDataSource(dataSourceToUse);, +			return liquibase;, +		}, +, +			return null;, +	/**, +	 * A custom {@link SpringLiquibase} extension that close the underlying, +	 * {@link DataSource} once the database has been migrated., +	 */, +	private static final class DataSourceClosingSpringLiquibase extends SpringLiquibase {, +, +		@Override, +		public void afterPropertiesSet() throws LiquibaseException {, +			super.afterPropertiesSet();, +			closeDataSource();, +		}, +, +		private void closeDataSource() {, +			Method closeMethod = ReflectionUtils.findMethod(getDataSource().getClass(),, +					"close");, +			if (closeMethod != null) {, +				ReflectionUtils.invokeMethod(closeMethod, getDataSource());, +			}, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import java.lang.reflect.Method;, +, +import liquibase.exception.LiquibaseException;, +import org.springframework.util.ReflectionUtils;, +			SpringLiquibase liquibase = createSpringLiquibase();, +		private SpringLiquibase createSpringLiquibase() {, +			SpringLiquibase liquibase;, +			DataSource dataSourceToUse = getDataSource();, +			if (dataSourceToUse == null) {, +				dataSourceToUse = DataSourceBuilder.create().url(this.properties.getUrl()), +						.username(this.properties.getUser()), +						.password(this.properties.getPassword()).build();, +				liquibase = new DataSourceClosingSpringLiquibase();, +			}, +			else {, +				liquibase = new SpringLiquibase();, +			}, +			liquibase.setDataSource(dataSourceToUse);, +			return liquibase;, +		}, +, +			return null;, +	/**, +	 * A custom {@link SpringLiquibase} extension that close the underlying, +	 * {@link DataSource} once the database has been migrated., +	 */, +	private static final class DataSourceClosingSpringLiquibase extends SpringLiquibase {, +, +		@Override, +		public void afterPropertiesSet() throws LiquibaseException {, +			super.afterPropertiesSet();, +			closeDataSource();, +		}, +, +		private void closeDataSource() {, +			Method closeMethod = ReflectionUtils.findMethod(getDataSource().getClass(),, +					"close");, +			if (closeMethod != null) {, +				ReflectionUtils.invokeMethod(closeMethod, getDataSource());, +			}, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +		DataSource dataSource = liquibase.getDataSource();, +		assertThat(ReflectionTestUtils.getField(dataSource, "pool")).isNull();, +		assertThat(dataSource.getConnection().getMetaData().getURL())]