[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfigurationTests.java, +import org.springframework.boot.test.context.ContextLoader;, + * @author Andy Wilkinson, +	private final ContextLoader contextLoader = new ContextLoader().webReactive(), +			.autoConfig(HttpHandlerAutoConfiguration.class);, +		this.contextLoader.config(CustomHttpHandler.class).load(context -> {, +			assertThat(context.getBeansOfType(HttpHandler.class)).hasSize(1);, +			assertThat(context.getBean(HttpHandler.class)), +					.isSameAs(context.getBean("customHttpHandler"));, +		});, +		this.contextLoader.autoConfig(WebFluxAutoConfiguration.class).load(context -> {, +			assertThat(context.getBeansOfType(HttpHandler.class).size()).isEqualTo(1);, +		});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfigurationTests.java, +import org.springframework.boot.test.context.ContextLoader;, + * @author Andy Wilkinson, +	private final ContextLoader contextLoader = new ContextLoader().webReactive(), +			.autoConfig(HttpHandlerAutoConfiguration.class);, +		this.contextLoader.config(CustomHttpHandler.class).load(context -> {, +			assertThat(context.getBeansOfType(HttpHandler.class)).hasSize(1);, +			assertThat(context.getBean(HttpHandler.class)), +					.isSameAs(context.getBean("customHttpHandler"));, +		});, +		this.contextLoader.autoConfig(WebFluxAutoConfiguration.class).load(context -> {, +			assertThat(context.getBeansOfType(HttpHandler.class).size()).isEqualTo(1);, +		});, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java, +import java.util.function.Consumer;, +import org.springframework.boot.test.context.ContextLoader;, +import org.springframework.context.ApplicationContext;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver;, +import org.springframework.web.servlet.resource.VersionStrategy;, +	private final ContextLoader contextLoader = new ContextLoader(), +			.autoConfig(WebMvcAutoConfiguration.class,, +					HttpMessageConvertersAutoConfiguration.class,, +					PropertyPlaceholderAutoConfiguration.class), +			.config(Config.class).webServlet();, +	public void handlerAdaptersCreated() {, +		this.contextLoader.load(context -> {, +			assertThat(context.getBeanNamesForType(HandlerAdapter.class).length), +			assertThat(context.getBean(RequestMappingHandlerAdapter.class), +					.getMessageConverters()).isNotEmpty().isEqualTo(, +							context.getBean(HttpMessageConverters.class).getConverters());, +		});, +	public void handlerMappingsCreated() {, +		this.contextLoader.load(context -> {, +			assertThat(context.getBeanNamesForType(HandlerMapping.class).length), +		});, +	public void resourceHandlerMapping() {, +		this.contextLoader.load(context -> {, +			Map<String, List<Resource>> mappingLocations = getResourceMappingLocations(, +					context);, +			assertThat(getResourceResolvers(context, "/webjars/**")).hasSize(1);, +			assertThat(getResourceTransformers(context, "/webjars/**")).hasSize(0);, +			assertThat(getResourceResolvers(context, "/**")).hasSize(1);, +			assertThat(getResourceTransformers(context, "/**")).hasSize(0);, +		});, +	public void customResourceHandlerMapping() {, +		this.contextLoader.env("spring.mvc.static-path-pattern:/static/**"), +				.load(context -> {, +					Map<String, List<Resource>> mappingLocations = getResourceMappingLocations(, +							context);, +					assertThat(getResourceResolvers(context, "/static/**")).hasSize(1);, +				});, +		this.contextLoader.config(WebJars.class).load(context -> {, +			Map<String, List<Resource>> mappingLocations = getResourceMappingLocations(, +					context);, +		});, +		this.contextLoader.config(AllResources.class).load(context -> {, +			Map<String, List<Resource>> mappingLocations = getResourceMappingLocations(, +					context);, +		});, +		this.contextLoader.env("spring.resources.add-mappings:false").load(context -> {, +			Map<String, List<Resource>> mappingLocations = getResourceMappingLocations(, +					context);, +		});, +		this.contextLoader.env("spring.resources.chain.enabled:true").load(context -> {, +			assertThat(getResourceResolvers(context, "/webjars/**")).hasSize(2);, +			assertThat(getResourceTransformers(context, "/webjars/**")).hasSize(1);, +			assertThat(getResourceResolvers(context, "/**")), +					.extractingResultOf("getClass").containsOnly(, +							CachingResourceResolver.class, PathResourceResolver.class);, +			assertThat(getResourceTransformers(context, "/**")), +					.extractingResultOf("getClass"), +		});, +		this.contextLoader, +				.env("spring.resources.chain.strategy.fixed.enabled:true",, +						"spring.resources.chain.strategy.fixed.paths:/**/*.js"), +				.load(context -> {, +					assertThat(getResourceResolvers(context, "/webjars/**")).hasSize(3);, +					assertThat(getResourceTransformers(context, "/webjars/**")), +							.hasSize(2);, +					assertThat(getResourceResolvers(context, "/**")), +							.extractingResultOf("getClass"), +									VersionResourceResolver.class,, +									PathResourceResolver.class);, +					assertThat(getResourceTransformers(context, "/**")), +							.extractingResultOf("getClass"), +							context, "/**").get(1);]