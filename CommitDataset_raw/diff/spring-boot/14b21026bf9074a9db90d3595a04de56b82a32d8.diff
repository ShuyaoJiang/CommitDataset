[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +* https://sourceforge.net/projects/one-jar/[OneJar], +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +* https://sourceforge.net/projects/one-jar/[OneJar], +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +	Waiting for AWS to boot Instance i-92ef9f53 and Payload to start at https://52.28.235.61/ ..., +	Payload started in 00:29.266s -> https://52.28.235.61/, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +* https://sourceforge.net/projects/one-jar/[OneJar], +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +	Waiting for AWS to boot Instance i-92ef9f53 and Payload to start at https://52.28.235.61/ ..., +	Payload started in 00:29.266s -> https://52.28.235.61/, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +https://www.eclipse.org/jetty/[Jetty], and, +https://github.com/undertow-io/undertow[Undertow] servers. Most developers use the, +appropriate "`Starter`" to obtain a fully configured instance. By default, the embedded, +server listens for HTTP requests on port `8080`., +https://github.com/jbosstm/narayana[Narayana] is a popular open source JTA transaction, +manager implementation supported by JBoss. You can use the, +`spring-boot-starter-jta-narayana` starter to add the appropriate Narayana dependencies, +to your project. As with Atomikos and Bitronix, Spring Boot automatically configures, +Narayana and post-processes your beans to ensure that startup and shutdown ordering is, +correct., +* https://github.com/hamcrest/JavaHamcrest[Hamcrest]: A library of matcher objects (also, +known as constraints or predicates)., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +* https://sourceforge.net/projects/one-jar/[OneJar], +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +	Waiting for AWS to boot Instance i-92ef9f53 and Payload to start at https://52.28.235.61/ ..., +	Payload started in 00:29.266s -> https://52.28.235.61/, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +https://www.eclipse.org/jetty/[Jetty], and, +https://github.com/undertow-io/undertow[Undertow] servers. Most developers use the, +appropriate "`Starter`" to obtain a fully configured instance. By default, the embedded, +server listens for HTTP requests on port `8080`., +https://github.com/jbosstm/narayana[Narayana] is a popular open source JTA transaction, +manager implementation supported by JBoss. You can use the, +`spring-boot-starter-jta-narayana` starter to add the appropriate Narayana dependencies, +to your project. As with Atomikos and Bitronix, Spring Boot automatically configures, +Narayana and post-processes your beans to ensure that startup and shutdown ordering is, +correct., +* https://github.com/hamcrest/JavaHamcrest[Hamcrest]: A library of matcher objects (also, +known as constraints or predicates)., +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedYamlLoaderTests.java, +		assertThat(url.toString()).isEqualTo("https://springboot.example.com/");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/AutowireCapableBeanJobFactory.java, + * Copyright 2012-2019 the original author or authors., +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfigurationTests.java, +			registrations, +					.add(getClientRegistration("first", "https://user-info-uri.com"));, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +* https://sourceforge.net/projects/one-jar/[OneJar], +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/deployment.adoc, +	Waiting for AWS to boot Instance i-92ef9f53 and Payload to start at https://52.28.235.61/ ..., +	Payload started in 00:29.266s -> https://52.28.235.61/, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +https://www.eclipse.org/jetty/[Jetty], and, +https://github.com/undertow-io/undertow[Undertow] servers. Most developers use the, +appropriate "`Starter`" to obtain a fully configured instance. By default, the embedded, +server listens for HTTP requests on port `8080`., +https://github.com/jbosstm/narayana[Narayana] is a popular open source JTA transaction, +manager implementation supported by JBoss. You can use the, +`spring-boot-starter-jta-narayana` starter to add the appropriate Narayana dependencies, +to your project. As with Atomikos and Bitronix, Spring Boot automatically configures, +Narayana and post-processes your beans to ensure that startup and shutdown ordering is, +correct., +* https://github.com/hamcrest/JavaHamcrest[Hamcrest]: A library of matcher objects (also, +known as constraints or predicates)., +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedYamlLoaderTests.java, +		assertThat(url.toString()).isEqualTo("https://springboot.example.com/");, +++ b/spring-boot-project/spring-boot/src/test/resources/org/springframework/boot/env/test-yaml.yml, +        url: https://springboot.example.com/]