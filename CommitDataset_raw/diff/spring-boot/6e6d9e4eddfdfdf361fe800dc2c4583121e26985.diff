[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.env.RandomValuePropertySource;, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.env.RandomValuePropertySource;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.boot.env.RandomValuePropertySource;, +++ /dev/null, +++ b/spring-boot/src/main/java/org/springframework/boot/env/RandomValuePropertySource.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.env;, +, +import java.util.Random;, +import java.util.UUID;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.PropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.util.DigestUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * {@link PropertySource} that returns a random value for any property that starts with, + * {@literal "random."}. Where the "unqualified property name" is the portion of the, + * requested property name beyond the "random." prefix, this {@link PropertySource}, + * returns:, + * <ul>, + * <li>When {@literal "int"}, a random {@link Integer} value, restricted by an optionally, + * specified range.</li>, + * <li>When {@literal "long"}, a random {@link Long} value, restricted by an optionally, + * specified range.</li>, + * <li>Otherwise, a {@code byte[]}.</li>, + * </ul>, + * The {@literal "random.int"} and {@literal "random.long"} properties supports a range, + * suffix whose syntax is:, + * <p>, + * {@code OPEN value (,max) CLOSE} where the {@code OPEN,CLOSE} are any character and, + * {@code value,max} are integers. If {@code max} is provided then {@code value} is the, + * minimum value and {@code max} is the maximum (exclusive)., + *, + * @author Dave Syer, + * @author Matt Benson, + */, +public class RandomValuePropertySource extends PropertySource<Random> {, +, +	/**, +	 * Name of the random {@link PropertySource}., +	 */, +	public static final String RANDOM_PROPERTY_SOURCE_NAME = "random";, +, +	private static final String PREFIX = "random.";, +, +	private static final Log logger = LogFactory.getLog(RandomValuePropertySource.class);, +, +	public RandomValuePropertySource(String name) {, +		super(name, new Random());, +	}, +, +	public RandomValuePropertySource() {, +		this(RANDOM_PROPERTY_SOURCE_NAME);, +	}, +, +	@Override, +	public Object getProperty(String name) {, +		if (!name.startsWith(PREFIX)) {, +			return null;, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("Generating random property for '" + name + "'");, +		}, +		return getRandomValue(name.substring(PREFIX.length()));, +	}, +, +	private Object getRandomValue(String type) {, +		if (type.equals("int")) {, +			return getSource().nextInt();, +		}, +		if (type.equals("long")) {, +			return getSource().nextLong();, +		}, +		String range = getRange(type, "int");, +		if (range != null) {]