[+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			final String endpointPath = StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/";, +				this.mockMvc.perform(get(endpointPath).accept(MediaType.APPLICATION_JSON)), +								EndpointDoc endpoint = new EndpointDoc(docs,, +										endpointPath);, +			Template template = this.templates.createTemplate(, +					new File("src/restdoc/resources/templates/endpoints.adoc.tpl"));, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			final String endpointPath = StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/";, +				this.mockMvc.perform(get(endpointPath).accept(MediaType.APPLICATION_JSON)), +								EndpointDoc endpoint = new EndpointDoc(docs,, +										endpointPath);, +			Template template = this.templates.createTemplate(, +					new File("src/restdoc/resources/templates/endpoints.adoc.tpl"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Additional shell commands can be implemented using the guide and documentation at, + * <a href="http://www.crashub.org">crashub.org</a>. By default Boot will search for, + * commands using the following classpath scanning pattern {@code classpath*:/commands/**}, + * . To add different locations or override the default use, + * {@code shell.command_path_patterns} in your application configuration., +				authenticationProperties.setRoles(, +						new String[] { this.management.getSecurity().getRole() });, +					throw new IllegalStateException(, +							"Failed to mount file system for '" + pathPattern + "'", ex);, +		private static final PropertyDescriptor<String> ROLES = PropertyDescriptor.create(, +				"auth.spring.roles", "ADMIN",, +	private static class BeanFactoryFilteringPluginDiscovery, +			extends ServiceLoaderDiscovery {, +			Collection<CRaSHPlugin> pluginBeans = this.beanFactory, +					.getBeansOfType(CRaSHPlugin.class).values();, +						|| ClassUtils.getQualifiedName(pluginClass), +								.equalsIgnoreCase(disabledPlugin)) {, +				if (!resource.getURL().getPath().endsWith("/"), +						&& !shouldFilter(resource)) {, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			final String endpointPath = StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/";, +				this.mockMvc.perform(get(endpointPath).accept(MediaType.APPLICATION_JSON)), +								EndpointDoc endpoint = new EndpointDoc(docs,, +										endpointPath);, +			Template template = this.templates.createTemplate(, +					new File("src/restdoc/resources/templates/endpoints.adoc.tpl"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Additional shell commands can be implemented using the guide and documentation at, + * <a href="http://www.crashub.org">crashub.org</a>. By default Boot will search for, + * commands using the following classpath scanning pattern {@code classpath*:/commands/**}, + * . To add different locations or override the default use, + * {@code shell.command_path_patterns} in your application configuration., +				authenticationProperties.setRoles(, +						new String[] { this.management.getSecurity().getRole() });, +					throw new IllegalStateException(, +							"Failed to mount file system for '" + pathPattern + "'", ex);, +		private static final PropertyDescriptor<String> ROLES = PropertyDescriptor.create(, +				"auth.spring.roles", "ADMIN",, +	private static class BeanFactoryFilteringPluginDiscovery, +			extends ServiceLoaderDiscovery {, +			Collection<CRaSHPlugin> pluginBeans = this.beanFactory, +					.getBeansOfType(CRaSHPlugin.class).values();, +						|| ClassUtils.getQualifiedName(pluginClass), +								.equalsIgnoreCase(disabledPlugin)) {, +				if (!resource.getURL().getPath().endsWith("/"), +						&& !shouldFilter(resource)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter(, +				this.objectMapper);, +++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java, +			final String endpointPath = StringUtils.hasText(endpoint.getPath()), +					? endpoint.getPath() : "/";, +				this.mockMvc.perform(get(endpointPath).accept(MediaType.APPLICATION_JSON)), +								EndpointDoc endpoint = new EndpointDoc(docs,, +										endpointPath);, +			Template template = this.templates.createTemplate(, +					new File("src/restdoc/resources/templates/endpoints.adoc.tpl"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java, + * Additional shell commands can be implemented using the guide and documentation at, + * <a href="http://www.crashub.org">crashub.org</a>. By default Boot will search for, + * commands using the following classpath scanning pattern {@code classpath*:/commands/**}, + * . To add different locations or override the default use, + * {@code shell.command_path_patterns} in your application configuration., +				authenticationProperties.setRoles(, +						new String[] { this.management.getSecurity().getRole() });, +					throw new IllegalStateException(, +							"Failed to mount file system for '" + pathPattern + "'", ex);, +		private static final PropertyDescriptor<String> ROLES = PropertyDescriptor.create(, +				"auth.spring.roles", "ADMIN",, +	private static class BeanFactoryFilteringPluginDiscovery, +			extends ServiceLoaderDiscovery {, +			Collection<CRaSHPlugin> pluginBeans = this.beanFactory, +					.getBeansOfType(CRaSHPlugin.class).values();, +						|| ClassUtils.getQualifiedName(pluginClass), +								.equalsIgnoreCase(disabledPlugin)) {, +				if (!resource.getURL().getPath().endsWith("/"), +						&& !shouldFilter(resource)) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +		EndpointMBeanExporter mbeanExporter = new EndpointMBeanExporter(, +				this.objectMapper);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +public class EndpointWebMvcAutoConfiguration]