[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, +import java.util.ArrayList;, +import org.springframework.beans.BeanUtils;, +import org.springframework.core.KotlinDetector;, +	private static boolean KOTLIN_PRESENT = KotlinDetector.isKotlinPresent();, +, +			List<Constructor<?>> constructors = determineConstructors(type);, +			boolean autowiredPresent = constructors.stream().anyMatch(, +			return (constructors.size() == 1, +					&& constructors.get(0).getParameterCount() > 0);, +		}, +, +		private List<Constructor<?>> determineConstructors(Class<?> type) {, +			List<Constructor<?>> constructors = new ArrayList<>();, +			if (KOTLIN_PRESENT && KotlinDetector.isKotlinType(type)) {, +				Constructor<?> primaryConstructor = BeanUtils, +						.findPrimaryConstructor(type);, +				if (primaryConstructor != null) {, +					constructors.add(primaryConstructor);, +				}, +			}, +			else {, +				constructors.addAll(Arrays.asList(type.getDeclaredConstructors()));, +			}, +			return constructors;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, +import java.util.ArrayList;, +import org.springframework.beans.BeanUtils;, +import org.springframework.core.KotlinDetector;, +	private static boolean KOTLIN_PRESENT = KotlinDetector.isKotlinPresent();, +, +			List<Constructor<?>> constructors = determineConstructors(type);, +			boolean autowiredPresent = constructors.stream().anyMatch(, +			return (constructors.size() == 1, +					&& constructors.get(0).getParameterCount() > 0);, +		}, +, +		private List<Constructor<?>> determineConstructors(Class<?> type) {, +			List<Constructor<?>> constructors = new ArrayList<>();, +			if (KOTLIN_PRESENT && KotlinDetector.isKotlinType(type)) {, +				Constructor<?> primaryConstructor = BeanUtils, +						.findPrimaryConstructor(type);, +				if (primaryConstructor != null) {, +					constructors.add(primaryConstructor);, +				}, +			}, +			else {, +				constructors.addAll(Arrays.asList(type.getDeclaredConstructors()));, +			}, +			return constructors;, +++ b/spring-boot-project/spring-boot/src/test/kotlin/org/springframework/boot/context/properties/KotlinEnableConfigurationPropertiesImportSelectorTests.kt, +package org.springframework.boot.context.properties, +, +import org.assertj.core.api.Assertions.assertThat, +import org.junit.Test, +import org.springframework.beans.factory.annotation.Autowired, +import org.springframework.beans.factory.support.DefaultListableBeanFactory, +import org.springframework.beans.factory.support.GenericBeanDefinition, +import org.springframework.core.type.AnnotationMetadata, +import org.springframework.core.type.classreading.SimpleMetadataReaderFactory, +, +/**, + * Tests for `EnableConfigurationPropertiesImportSelector`., + *, + * @author Stephane Nicoll, + */, +@Suppress("unused"), +class KotlinEnableConfigurationPropertiesImportSelectorTests {, +, +	private val registrar = EnableConfigurationPropertiesImportSelector.ConfigurationPropertiesBeanRegistrar(), +, +	private val beanFactory = DefaultListableBeanFactory(), +, +, +	@Test, +	fun `type with default constructor should register generic bean definition`() {, +		this.registrar.registerBeanDefinitions(, +				getAnnotationMetadata(TestConfiguration::class.java), this.beanFactory), +		val beanDefinition = this.beanFactory.getBeanDefinition(, +				"foo-org.springframework.boot.context.properties.KotlinEnableConfigurationPropertiesImportSelectorTests\$FooProperties"), +		assertThat(beanDefinition).isExactlyInstanceOf(GenericBeanDefinition::class.java), +	}, +, +	@Test, +	fun `type with autowired on constructor should register generic bean definition`() {, +		this.registrar.registerBeanDefinitions(, +				getAnnotationMetadata(TestConfiguration::class.java), this.beanFactory), +		val beanDefinition = this.beanFactory.getBeanDefinition(, +				"bar-org.springframework.boot.context.properties.KotlinEnableConfigurationPropertiesImportSelectorTests\$BarProperties"), +		assertThat(beanDefinition).isExactlyInstanceOf(GenericBeanDefinition::class.java), +	}, +, +	@Test, +	fun `type with primary constructor and no autowired should register configuration properties bean definition`() {, +		this.registrar.registerBeanDefinitions(, +				getAnnotationMetadata(TestConfiguration::class.java), this.beanFactory), +		val beanDefinition = this.beanFactory.getBeanDefinition(, +				"baz-org.springframework.boot.context.properties.KotlinEnableConfigurationPropertiesImportSelectorTests\$BazProperties"), +		assertThat(beanDefinition).isExactlyInstanceOf(ConfigurationPropertiesBeanDefinition::class.java), +	}]