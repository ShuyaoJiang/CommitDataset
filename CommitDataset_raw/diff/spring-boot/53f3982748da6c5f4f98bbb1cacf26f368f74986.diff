[+++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty</groupId>, +			<artifactId>jetty-reactive-httpclient</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty</groupId>, +			<artifactId>jetty-reactive-httpclient</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorAutoConfiguration.java, +@Import({ ClientHttpConnectorConfiguration.ReactorNetty.class,, +		ClientHttpConnectorConfiguration.JettyClient.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty</groupId>, +			<artifactId>jetty-reactive-httpclient</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorAutoConfiguration.java, +@Import({ ClientHttpConnectorConfiguration.ReactorNetty.class,, +		ClientHttpConnectorConfiguration.JettyClient.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java, +import org.springframework.http.client.reactive.JettyClientHttpConnector;, +import org.springframework.http.client.reactive.JettyResourceFactory;, +	@Configuration, +	@ConditionalOnClass(org.eclipse.jetty.reactive.client.ReactiveRequest.class), +	@ConditionalOnMissingBean(ClientHttpConnector.class), +	public static class JettyClient {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public JettyResourceFactory jettyResourceFactory() {, +			return new JettyResourceFactory();, +		}, +, +		@Bean, +		public JettyClientHttpConnector jettyClientHttpConnector(, +				JettyResourceFactory jettyResourceFactory) {, +			return new JettyClientHttpConnector(jettyResourceFactory, (httpClient) -> {, +			});, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/pom.xml, +			<groupId>org.eclipse.jetty</groupId>, +			<artifactId>jetty-reactive-httpclient</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorAutoConfiguration.java, +@Import({ ClientHttpConnectorConfiguration.ReactorNetty.class,, +		ClientHttpConnectorConfiguration.JettyClient.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java, +import org.springframework.http.client.reactive.JettyClientHttpConnector;, +import org.springframework.http.client.reactive.JettyResourceFactory;, +	@Configuration, +	@ConditionalOnClass(org.eclipse.jetty.reactive.client.ReactiveRequest.class), +	@ConditionalOnMissingBean(ClientHttpConnector.class), +	public static class JettyClient {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public JettyResourceFactory jettyResourceFactory() {, +			return new JettyResourceFactory();, +		}, +, +		@Bean, +		public JettyClientHttpConnector jettyClientHttpConnector(, +				JettyResourceFactory jettyResourceFactory) {, +			return new JettyClientHttpConnector(jettyResourceFactory, (httpClient) -> {, +			});, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorAutoConfigurationTests.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.http.client.reactive.ClientHttpConnector;, +	@Test, +	public void shouldNotOverrideCustomClientConnector() {, +		this.contextRunner.withUserConfiguration(CustomClientHttpConnectorConfig.class), +				.run((context) -> {, +					assertThat(context).hasSingleBean(ClientHttpConnector.class), +							.hasBean("customConnector"), +							.doesNotHaveBean(ReactorResourceFactory.class);, +					WebClientCustomizer clientCustomizer = context, +							.getBean(WebClientCustomizer.class);, +					WebClient.Builder builder = mock(WebClient.Builder.class);, +					clientCustomizer.customize(builder);, +					verify(builder, times(1)), +							.clientConnector(any(ClientHttpConnector.class));, +				});, +	}, +, +	@Test]