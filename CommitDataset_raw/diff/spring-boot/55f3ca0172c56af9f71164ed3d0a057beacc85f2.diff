[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// Maybe we should add before the DEFAULT_PROPERTIES if it exists?, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// Maybe we should add before the DEFAULT_PROPERTIES if it exists?, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.util.Collections;, +import org.springframework.core.env.MapPropertySource;, +	public void defaultPropertyAsFallback() throws Exception {, +		this.event, +				.getEnvironment(), +				.getPropertySources(), +				.addLast(, +						new MapPropertySource("defaultProperties", Collections, +								.singletonMap("my.fallback", (Object) "foo")));, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.fallback");, +		assertThat(property, equalTo("foo"));, +	}, +, +	@Test, +	public void defaultPropertyAsFallbackDuringFileParsing() throws Exception {, +		this.event, +				.getEnvironment(), +				.getPropertySources(), +				.addLast(, +						new MapPropertySource("defaultProperties", Collections, +								.singletonMap("spring.config.name",, +										(Object) "testproperties")));, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +	}, +, +	@Test, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +			// Maybe we should add before the DEFAULT_PROPERTIES if it exists?, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import java.util.Collections;, +import org.springframework.core.env.MapPropertySource;, +	public void defaultPropertyAsFallback() throws Exception {, +		this.event, +				.getEnvironment(), +				.getPropertySources(), +				.addLast(, +						new MapPropertySource("defaultProperties", Collections, +								.singletonMap("my.fallback", (Object) "foo")));, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.fallback");, +		assertThat(property, equalTo("foo"));, +	}, +, +	@Test, +	public void defaultPropertyAsFallbackDuringFileParsing() throws Exception {, +		this.event, +				.getEnvironment(), +				.getPropertySources(), +				.addLast(, +						new MapPropertySource("defaultProperties", Collections, +								.singletonMap("spring.config.name",, +										(Object) "testproperties")));, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		assertThat(property, equalTo("frompropertiesfile"));, +	}, +, +	@Test, +++ b/spring-boot/src/test/resources/application.properties, +my.placeholder: ${my.fallback}]