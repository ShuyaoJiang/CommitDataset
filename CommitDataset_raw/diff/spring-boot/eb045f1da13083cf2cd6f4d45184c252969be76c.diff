[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +import org.springframework.boot.context.properties.bind.PlaceholdersResolver;, +import org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolver;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.SystemPropertyUtils;, +		PlaceholdersResolver resolver = getResolver();, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver,, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver) {, +		Object resolved = resolver.resolvePlaceholders(source.getProperty(name));, +	private PlaceholdersResolver getResolver() {, +		return new PropertySourcesPlaceholdersSanitizingResolver(, +	 * {@link PropertySourcesPlaceholdersResolver} that sanitizes sensitive placeholders, +	 * if present., +	private static class PropertySourcesPlaceholdersSanitizingResolver, +			extends PropertySourcesPlaceholdersResolver {, +		public PropertySourcesPlaceholdersSanitizingResolver(, +				Iterable<PropertySource<?>> sources, Sanitizer sanitizer) {, +			super(sources, new PropertyPlaceholderHelper(, +					SystemPropertyUtils.PLACEHOLDER_PREFIX,, +					SystemPropertyUtils.PLACEHOLDER_SUFFIX,, +					SystemPropertyUtils.VALUE_SEPARATOR, true));, +		protected String resolvePlaceholder(String placeholder) {, +			String value = super.resolvePlaceholder(placeholder);, +			return (value != null ?, +					(String) this.sanitizer.sanitize(placeholder, value) : null);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +import org.springframework.boot.context.properties.bind.PlaceholdersResolver;, +import org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolver;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.SystemPropertyUtils;, +		PlaceholdersResolver resolver = getResolver();, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver,, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver) {, +		Object resolved = resolver.resolvePlaceholders(source.getProperty(name));, +	private PlaceholdersResolver getResolver() {, +		return new PropertySourcesPlaceholdersSanitizingResolver(, +	 * {@link PropertySourcesPlaceholdersResolver} that sanitizes sensitive placeholders, +	 * if present., +	private static class PropertySourcesPlaceholdersSanitizingResolver, +			extends PropertySourcesPlaceholdersResolver {, +		public PropertySourcesPlaceholdersSanitizingResolver(, +				Iterable<PropertySource<?>> sources, Sanitizer sanitizer) {, +			super(sources, new PropertyPlaceholderHelper(, +					SystemPropertyUtils.PLACEHOLDER_PREFIX,, +					SystemPropertyUtils.PLACEHOLDER_SUFFIX,, +					SystemPropertyUtils.VALUE_SEPARATOR, true));, +		protected String resolvePlaceholder(String placeholder) {, +			String value = super.resolvePlaceholder(placeholder);, +			return (value != null ?, +					(String) this.sanitizer.sanitize(placeholder, value) : null);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java, +		assertThat(getSource("composite:two", env).getProperties().get("foo").getValue()), +				.isEqualTo("spam");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +import org.springframework.boot.context.properties.bind.PlaceholdersResolver;, +import org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolver;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.SystemPropertyUtils;, +		PlaceholdersResolver resolver = getResolver();, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver,, +			EnumerablePropertySource<?> source, PlaceholdersResolver resolver) {, +		Object resolved = resolver.resolvePlaceholders(source.getProperty(name));, +	private PlaceholdersResolver getResolver() {, +		return new PropertySourcesPlaceholdersSanitizingResolver(, +	 * {@link PropertySourcesPlaceholdersResolver} that sanitizes sensitive placeholders, +	 * if present., +	private static class PropertySourcesPlaceholdersSanitizingResolver, +			extends PropertySourcesPlaceholdersResolver {, +		public PropertySourcesPlaceholdersSanitizingResolver(, +				Iterable<PropertySource<?>> sources, Sanitizer sanitizer) {, +			super(sources, new PropertyPlaceholderHelper(, +					SystemPropertyUtils.PLACEHOLDER_PREFIX,, +					SystemPropertyUtils.PLACEHOLDER_SUFFIX,, +					SystemPropertyUtils.VALUE_SEPARATOR, true));, +		protected String resolvePlaceholder(String placeholder) {, +			String value = super.resolvePlaceholder(placeholder);, +			return (value != null ?, +					(String) this.sanitizer.sanitize(placeholder, value) : null);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/env/EnvironmentEndpointTests.java, +		assertThat(getSource("composite:two", env).getProperties().get("foo").getValue()), +				.isEqualTo("spam");, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/PropertySourcesPlaceholdersResolver.java, +	protected String resolvePlaceholder(String placeholder) {]