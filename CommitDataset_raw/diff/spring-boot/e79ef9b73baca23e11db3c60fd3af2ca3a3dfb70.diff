[+++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +, +|`excludeDevtools`, +|Boolean flag to indicate if the devtools jar should be excluded from the repackaged, +archives. Defaults to `false`., +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +, +|`excludeDevtools`, +|Boolean flag to indicate if the devtools jar should be excluded from the repackaged, +archives. Defaults to `false`., +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +TIP: If you want to ensure that devtools is never included in a production build, you can, +use set the `excludeDevtools` build property to completely remove the JAR. The property is, +supported with both the Maven and Gradle plugins., +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +, +|`excludeDevtools`, +|Boolean flag to indicate if the devtools jar should be excluded from the repackaged, +archives. Defaults to `false`., +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +TIP: If you want to ensure that devtools is never included in a production build, you can, +use set the `excludeDevtools` build property to completely remove the JAR. The property is, +supported with both the Maven and Gradle plugins., +, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/RepackagingTests.java, +	public void repackagingEnabled() throws IOException {, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false"), +				.run();, +		File repackageFile = new File(buildLibs, "repackage.jar");, +		assertTrue(repackageFile.exists());, +		assertTrue(isDevToolsJarIncluded(repackageFile));, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false"), +				.run();, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false"), +				.run();, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false"), +				.run();, +, +	@Test, +	public void repackagingEnabledExcludeDevtools() throws IOException {, +		project.newBuild().forTasks("clean", "build"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=true"), +				.run();, +		File buildLibs = new File("target/repackage/build/libs");, +		File repackageFile = new File(buildLibs, "repackage.jar");, +		assertTrue(repackageFile.exists());, +		assertTrue(new File(buildLibs, "repackage.jar.original").exists());, +		assertFalse(new File(buildLibs, "repackage-sources.jar.original").exists());, +		assertFalse(isDevToolsJarIncluded(repackageFile));, +	}, +, +	private boolean isDevToolsJarIncluded(File repackageFile) throws IOException {, +		JarFile jarFile = new JarFile(repackageFile);, +		try {, +			String name = "lib/spring-boot-devtools-" + BOOT_VERSION + ".jar";, +			return jarFile.getEntry(name) != null;, +		}, +		finally {, +			jarFile.close();, +		}, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +, +|`excludeDevtools`, +|Boolean flag to indicate if the devtools jar should be excluded from the repackaged, +archives. Defaults to `false`., +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +TIP: If you want to ensure that devtools is never included in a production build, you can, +use set the `excludeDevtools` build property to completely remove the JAR. The property is, +supported with both the Maven and Gradle plugins., +, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/RepackagingTests.java, +	public void repackagingEnabled() throws IOException {, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false"), +				.run();, +		File repackageFile = new File(buildLibs, "repackage.jar");, +		assertTrue(repackageFile.exists());, +		assertTrue(isDevToolsJarIncluded(repackageFile));, +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=false",, +						"-PexcludeDevtools=false"), +				.withArguments("-PbootVersion=" + BOOT_VERSION, "-Prepackage=true",, +						"-PexcludeDevtools=false")]