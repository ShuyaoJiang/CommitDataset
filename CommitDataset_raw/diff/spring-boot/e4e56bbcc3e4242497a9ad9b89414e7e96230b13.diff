[+++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/pom.xml, +		<revision>2.0.2.BUILD-SNAPSHOT</revision>, +++ b/ci/README.adoc, +$ fly -t spring set-pipeline -p spring-boot-2.0.x -c ci/pipeline.yml -l ci/parameters.yml, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-milestone, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-rc, +$ fly -t spring trigger-job -j spring-boot-2.0.x/stage-release, +$ fly -t spring trigger-job -j spring-boot-2.0.x/promote-release, +++ b/ci/parameters.yml, +branch: "2.0.x", +pipeline-name: "spring-boot-2.0.x", +++ b/ci/pipeline.yml, +++ b/pom.xml, +		<revision>2.0.2.BUILD-SNAPSHOT</revision>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withPropertyValues("spring.datasource.generate-unique-name=true"), +			.withConfiguration(AutoConfigurations.of(QuartzAutoConfiguration.class));, +	public void withNoDataSource() {, +		this.contextRunner.run((context) -> {, +			assertThat(context).hasSingleBean(Scheduler.class);, +			Scheduler scheduler = context.getBean(Scheduler.class);, +		});, +	public void withDataSourceUseMemoryByDefault() {, +		this.contextRunner.withConfiguration(AutoConfigurations.of(, +				DataSourceAutoConfiguration.class,, +				DataSourceTransactionManagerAutoConfiguration.class)).run((context) -> {, +			assertThat(context).hasSingleBean(Scheduler.class);, +			Scheduler scheduler = context.getBean(Scheduler.class);, +		});, +	public void withDataSource() {, +		this.contextRunner.withUserConfiguration(QuartzJobsConfiguration.class), +				.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,, +						DataSourceTransactionManagerAutoConfiguration.class)), +				.withPropertyValues("spring.quartz.job-store-type=jdbc"), +				.run(assertDataSourceJobStore("dataSource"));, +	public void withDataSourceNoTransactionManager() {, +		this.contextRunner.withUserConfiguration(QuartzJobsConfiguration.class), +				.withConfiguration(AutoConfigurations.of(, +						DataSourceAutoConfiguration.class)), +				.withPropertyValues("spring.quartz.job-store-type=jdbc"), +				.run(assertDataSourceJobStore("dataSource"));, +		this.contextRunner, +				.withUserConfiguration(QuartzJobsConfiguration.class,, +						MultipleDataSourceConfiguration.class), +				.withPropertyValues("spring.quartz.job-store-type=jdbc"), +				.run(assertDataSourceJobStore("quartzDataSource"));, +	private ContextConsumer<AssertableApplicationContext> assertDataSourceJobStore(, +			String datasourceName) {]