[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties.java, +import io.micrometer.core.instrument.simple.CountingMode;, +	private CountingMode mode = CountingMode.Cumulative;, +, +, +	public CountingMode getMode() {, +		return mode;, +	}, +, +	public void setMode(CountingMode mode) {, +		this.mode = mode;, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties.java, +import io.micrometer.core.instrument.simple.CountingMode;, +	private CountingMode mode = CountingMode.Cumulative;, +, +, +	public CountingMode getMode() {, +		return mode;, +	}, +, +	public void setMode(CountingMode mode) {, +		this.mode = mode;, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimplePropertiesConfigAdapter.java, +import io.micrometer.core.instrument.simple.CountingMode;, +, +	@Override, +	public CountingMode mode() {, +		return get(SimpleProperties::getMode, SimpleConfig.super::mode);, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties.java, +import io.micrometer.core.instrument.simple.CountingMode;, +	private CountingMode mode = CountingMode.Cumulative;, +, +, +	public CountingMode getMode() {, +		return mode;, +	}, +, +	public void setMode(CountingMode mode) {, +		this.mode = mode;, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimplePropertiesConfigAdapter.java, +import io.micrometer.core.instrument.simple.CountingMode;, +, +	@Override, +	public CountingMode mode() {, +		return get(SimpleProperties::getMode, SimpleConfig.super::mode);, +	}, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java, +					throws IOException, ServletException {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +	@ConditionalOnProperty(value = "spring.metrics.binders.jvmmemory.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.logback.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.uptime.enabled", havingValue = "true", matchIfMissing = true), +	@ConditionalOnProperty(value = "spring.metrics.binders.processor.enabled", havingValue = "true", matchIfMissing = true), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleProperties.java, +import io.micrometer.core.instrument.simple.CountingMode;, +	private CountingMode mode = CountingMode.Cumulative;, +, +, +	public CountingMode getMode() {, +		return mode;, +	}, +, +	public void setMode(CountingMode mode) {, +		this.mode = mode;, +	}, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimplePropertiesConfigAdapter.java, +import io.micrometer.core.instrument.simple.CountingMode;, +, +	@Override, +	public CountingMode mode() {, +		return get(SimpleProperties::getMode, SimpleConfig.super::mode);]