[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +, +[[boot-features-kotlin]], +platforms) which allows writing concise and elegant code while providing, +{kotlin-documentation}java-interop.html[interoperability] with existing libraries written, +in Java., +Spring Boot provides Kotlin support by leveraging the support in other Spring projects, +such as Spring Framework, Spring Data, and Reactor. See the, +{spring-reference}languages.html#kotlin[Spring Framework Kotlin support documentation], +The easiest way to start with Spring Boot and Kotlin is to create a project via, +and `kotlin` tags on https://stackoverflow.com/questions/tagged/spring+kotlin[Stack, +Overflow] if you need support., +, +[[boot-features-kotlin-requirements]], +Spring Boot supports Kotlin 1.2.x. To use Kotlin, `org.jetbrains.kotlin:kotlin-stdlib` and, +`org.jetbrains.kotlin:kotlin-reflect` must be present on the classpath. The, +`kotlin-stdlib` variants `kotlin-stdlib-jdk7` and `kotlin-stdlib-jdk8` can also be used., +Since https://discuss.kotlinlang.org/t/classes-final-by-default/166[Kotlin classes are, +final by default], you are likely to want to configure, +plugin in order to automatically open Spring-annotated classes so that they can be, +proxied., +https://github.com/FasterXML/jackson-module-kotlin[Jackson's Kotlin module] is required, +for serializing / deserializing JSON data in Kotlin. It is automatically registered when, +found on the classpath. A warning message is logged if Jackson and Kotlin are present but, +the Jackson Kotlin module is not., +TIP: These dependencies and plugins are provided by default if one bootstraps a Kotlin, +project on https://start.spring.io/#!language=kotlin[start.spring.io]., +, +[[boot-features-kotlin-null-safety]], +One of Kotlin's key features is {kotlin-documentation}null-safety.html[null-safety]. It, +deals with `null` values at compile time rather than deferring the problem to runtime and, +encountering a `NullPointerException`. This helps to eliminate a common source of bugs, +without paying the cost of wrappers like `Optional`. Kotlin also allows using functional, +constructs with nullable values as described in this, +http://www.baeldung.com/kotlin-null-safety[comprehensive guide to null-safety in Kotlin]., +Although Java does not allow one to express null-safety in its type system, Spring, +Framework, Spring Data, and Reactor now provide null-safety of their API via, +{kotlin-documentation}java-interop.html#jsr-305-support[Kotlin's support for JSR 305, +annotations] combined with nullability annotations provide null-safety for the related, +Spring API in Kotlin., +following options: `-Xjsr305={strict|warn|ignore}`. The default behavior is the same as, +WARN: Generic type arguments, varargs and array elements nullability are not yet, +supported. See https://jira.spring.io/browse/SPR-15942[SPR-15942] for up-to-date, +information. Also be aware that Spring Boot's own API is {github-issues}10712[not yet, +annotated]., +, +[[boot-features-kotlin-api]], +, +[[boot-features-kotlin-api-runapplication]], +==== runApplication, +Spring Boot provides an idiomatic way to run an application with, +`runApplication<FooApplication>(*args)` as shown in the following example:, +This is a drop-in replacement for, +`SpringApplication.run(FooApplication::class.java, *args)`. It also allows customization, +of the application as shown in the following example:, +, +[[boot-features-kotlin-api-extensions]], +==== Extensions, +use of these extensions to add new Kotlin specific conveniences to existing APIs., +`TestRestTemplate` extensions, similar to those provided by Spring Framework for, +`RestOperations` in Spring Framework, are provided. Among other things, the extensions, +make it possible to take advantage of Kotlin reified type parameters., +, +[[boot-features-kotlin-dependency-management]], +In order to avoid mixing different version of Kotlin dependencies on the classpath,, +dependency management of the following Kotlin dependencies is provided:, +plugin management is provided for `kotlin-maven-plugin`. With Gradle, the Spring Boot, +plugin automatically aligns the `kotlin.version` with the version of the Kotlin plugin., +[[boot-features-kotlin-configuration-properties]], +=== `@ConfigurationProperties`, +`@ConfigurationProperties` currently only works with `lateinit` or nullable `var`, +properties (the former is recommended), since immutable classes initialized by, +constructors are {github-issues}8762[not yet supported]., +@ConfigurationProperties("example.kotlin"), +class KotlinExampleProperties {, +, +, +, +, +, +, +, +[[boot-features-kotlin-testing]], +While it is possible to use JUnit 4 (the default provided by `spring-boot-starter-test`), +to test Kotlin code, JUnit 5 is recommended. JUnit 5 enables a test class to be, +instantiated once and reused for all of the class's tests. This makes it possible to use, +`@BeforeAll` and `@AfterAll` annotations on non-static methods, which is a good fit for, +Kotlin., +To use JUnit 5, exclude `junit:junit` dependency from `spring-boot-starter-test`, add, +JUnit 5 dependencies, and configure the Maven or Gradle plugin accordingly. See the, +, +[[boot-features-kotlin-resources]], +, +, +[[boot-features-kotlin-resources-further-reading]], +==== Further reading, +, +, +[[boot-features-kotlin-resources-examples]], +==== Examples]