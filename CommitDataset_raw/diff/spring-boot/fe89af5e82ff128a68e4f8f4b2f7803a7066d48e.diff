[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabasePlatform.java, +enum DatabasePlatform {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabasePlatform.java, +enum DatabasePlatform {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		adapter.setDatabase(this.properties.determineDatabase(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabasePlatform.java, +enum DatabasePlatform {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		adapter.setDatabase(this.properties.determineDatabase(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +	private static final Log logger = LogFactory.getLog(JpaProperties.class);, +, +	private Database database;, +	 * Determine the {@link Database} to use based on this configuration and the primary, +	 * {@link DataSource}., +	 * @param dataSource the auto-configured data source, +	public Database determineDatabase(DataSource dataSource) {, +		if (this.database != null) {, +			return this.database;, +		}, +		try {, +			String jdbcUrl = (String) JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getURL");, +		}, +		catch (MetaDataAccessException ex) {, +			logger.warn("Unable to determine jdbc url from datasource", ex);, +		}, +		return Database.DEFAULT;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabasePlatform.java, +enum DatabasePlatform {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		adapter.setDatabase(this.properties.determineDatabase(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +	private static final Log logger = LogFactory.getLog(JpaProperties.class);, +, +	private Database database;, +	 * Determine the {@link Database} to use based on this configuration and the primary, +	 * {@link DataSource}., +	 * @param dataSource the auto-configured data source, +	public Database determineDatabase(DataSource dataSource) {, +		if (this.database != null) {, +			return this.database;, +		}, +		try {, +			String jdbcUrl = (String) JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getURL");, +		}, +		catch (MetaDataAccessException ex) {, +			logger.warn("Unable to determine jdbc url from datasource", ex);, +		}, +		return Database.DEFAULT;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, +				"spring.datasource.database:mysql",, +		this.context.register(TestConfiguration.class, DataSourceAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/DatabasePlatform.java, +enum DatabasePlatform {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java, +		adapter.setDatabase(this.properties.determineDatabase(this.dataSource));, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +	private static final Log logger = LogFactory.getLog(JpaProperties.class);, +, +	private Database database;, +	 * Determine the {@link Database} to use based on this configuration and the primary, +	 * {@link DataSource}., +	 * @param dataSource the auto-configured data source, +	public Database determineDatabase(DataSource dataSource) {, +		if (this.database != null) {, +			return this.database;, +		}, +		try {, +			String jdbcUrl = (String) JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getURL");, +		}, +		catch (MetaDataAccessException ex) {, +			logger.warn("Unable to determine jdbc url from datasource", ex);, +		}, +		return Database.DEFAULT;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/CustomHibernateJpaAutoConfigurationTests.java, +				"spring.datasource.database:mysql",, +		this.context.register(TestConfiguration.class, DataSourceAutoConfiguration.class,, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/JpaPropertiesTests.java, +import java.sql.Connection;, +import java.sql.DatabaseMetaData;, +import static org.mockito.Mockito.never;]