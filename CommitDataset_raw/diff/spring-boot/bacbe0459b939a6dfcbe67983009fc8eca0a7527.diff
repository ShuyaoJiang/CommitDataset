[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +			else if (!endpointType.isEnabledByDefault()) {, +				return new EndpointEnablement(false, createDefaultEnablementMessage("all", false,, +						endpointType));, +			}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +			else if (!endpointType.isEnabledByDefault()) {, +				return new EndpointEnablement(false, createDefaultEnablementMessage("all", false,, +						endpointType));, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpointTests.java, +				.withPropertyValues("endpoints.all.web.enabled=true"), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +			else if (!endpointType.isEnabledByDefault()) {, +				return new EndpointEnablement(false, createDefaultEnablementMessage("all", false,, +						endpointType));, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpointTests.java, +				.withPropertyValues("endpoints.all.web.enabled=true"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +	public void webEndpointsAreDisabledByDefault() {, +		this.contextRunner.run(context -> {, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/beans")).isFalse();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/trace")).isFalse();, +		});, +	}, +, +	@Test, +	public void webEndpointsCanBeEnabled() {, +		WebApplicationContextRunner contextRunner = this.contextRunner, +				.withPropertyValues("endpoints.all.web.enabled=true");, +		contextRunner.run(context -> {, +			MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/autoconfig")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/beans")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/configprops")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/env")).isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/health")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/info")).isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/mappings")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/metrics")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.POST, "/application/shutdown")), +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/threaddump")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/trace")), +					.isTrue();, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +			else if (!endpointType.isEnabledByDefault()) {, +				return new EndpointEnablement(false, createDefaultEnablementMessage("all", false,, +						endpointType));, +			}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpointTests.java, +				.withPropertyValues("endpoints.all.web.enabled=true"), +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/WebMvcEndpointInfrastructureAutoConfigurationTests.java, +	public void webEndpointsAreDisabledByDefault() {, +		this.contextRunner.run(context -> {, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/beans")).isFalse();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/trace")).isFalse();, +		});, +	}, +, +	@Test, +	public void webEndpointsCanBeEnabled() {, +		WebApplicationContextRunner contextRunner = this.contextRunner, +				.withPropertyValues("endpoints.all.web.enabled=true");, +		contextRunner.run(context -> {, +			MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/autoconfig")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/beans")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/configprops")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/env")).isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/health")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/info")).isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/mappings")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/metrics")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.POST, "/application/shutdown")), +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/threaddump")), +					.isTrue();, +			assertThat(isExposed(mockMvc, HttpMethod.GET, "/application/trace")), +					.isTrue();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProviderTests.java, +		validate(determineEnablement("foo", true, EndpointType.JMX), true,, +				"endpoint 'foo' (jmx) is enabled by default");, +				determineEnablement("foo", true, EndpointType.JMX,, +						"endpoints.foo.web.enabled=false"),, +				true, "endpoint 'foo' (jmx) is enabled by default");, +				determineEnablement("foo", true, EndpointType.JMX,, +				determineEnablement("foo", true, EndpointType.JMX,]