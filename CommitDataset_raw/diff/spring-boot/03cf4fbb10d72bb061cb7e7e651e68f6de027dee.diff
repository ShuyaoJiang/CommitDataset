[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +The `integrationgraph` endpoint exposes a graph containing all Spring Integration, +components., +The response contains all Spring Integration components used within the application, as, +well as the links between them. More information about the structure can be found in the, +https://docs.spring.io/spring-integration/reference/html/system-management-chapter.html#integration-graph[reference, +documentation]., +To rebuild the exposed graph, make a `POST` request to `/actuator/integrationgraph`, as, +shown in the following curl-based example:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +The `integrationgraph` endpoint exposes a graph containing all Spring Integration, +components., +The response contains all Spring Integration components used within the application, as, +well as the links between them. More information about the structure can be found in the, +https://docs.spring.io/spring-integration/reference/html/system-management-chapter.html#integration-graph[reference, +documentation]., +To rebuild the exposed graph, make a `POST` request to `/actuator/integrationgraph`, as, +shown in the following curl-based example:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;, +import org.springframework.integration.support.channel.HeaderChannelRegistry;, + * @author Stephane Nicoll, +@ConditionalOnBean(HeaderChannelRegistry.class), +@AutoConfigureAfter(IntegrationAutoConfiguration.class), +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint(endpoint = IntegrationGraphEndpoint.class), +	public IntegrationGraphServer integrationGraphServer() {, +		return new IntegrationGraphServer();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +The `integrationgraph` endpoint exposes a graph containing all Spring Integration, +components., +The response contains all Spring Integration components used within the application, as, +well as the links between them. More information about the structure can be found in the, +https://docs.spring.io/spring-integration/reference/html/system-management-chapter.html#integration-graph[reference, +documentation]., +To rebuild the exposed graph, make a `POST` request to `/actuator/integrationgraph`, as, +shown in the following curl-based example:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;, +import org.springframework.integration.support.channel.HeaderChannelRegistry;, + * @author Stephane Nicoll, +@ConditionalOnBean(HeaderChannelRegistry.class), +@AutoConfigureAfter(IntegrationAutoConfiguration.class), +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint(endpoint = IntegrationGraphEndpoint.class), +	public IntegrationGraphServer integrationGraphServer() {, +		return new IntegrationGraphServer();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/IntegrationGraphEndpointDocumentationTests.java, +		this.mockMvc.perform(post("/actuator/integrationgraph")).andExpect(status(), +				.isNoContent()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +The `integrationgraph` endpoint exposes a graph containing all Spring Integration, +components., +The response contains all Spring Integration components used within the application, as, +well as the links between them. More information about the structure can be found in the, +https://docs.spring.io/spring-integration/reference/html/system-management-chapter.html#integration-graph[reference, +documentation]., +To rebuild the exposed graph, make a `POST` request to `/actuator/integrationgraph`, as, +shown in the following curl-based example:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;, +import org.springframework.integration.support.channel.HeaderChannelRegistry;, + * @author Stephane Nicoll, +@ConditionalOnBean(HeaderChannelRegistry.class), +@AutoConfigureAfter(IntegrationAutoConfiguration.class), +	@Bean, +	@ConditionalOnMissingBean, +	@ConditionalOnEnabledEndpoint(endpoint = IntegrationGraphEndpoint.class), +	public IntegrationGraphServer integrationGraphServer() {, +		return new IntegrationGraphServer();, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/IntegrationGraphEndpointDocumentationTests.java, +		this.mockMvc.perform(post("/actuator/integrationgraph")).andExpect(status(), +				.isNoContent()), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integration/IntegrationGraphEndpointAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;, +import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;, + * @author Stephane Nicoll, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(JmxAutoConfiguration.class,, +					IntegrationAutoConfiguration.class,, +					IntegrationGraphEndpointAutoConfiguration.class));, +	public void runShouldHaveEndpointBean() {, +		this.contextRunner.run((context) -> assertThat(context), +				.hasSingleBean(IntegrationGraphEndpoint.class));, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean() {, +		this.contextRunner, +				.withPropertyValues("management.endpoint.integrationgraph.enabled:false"), +				.run((context) -> {, +					assertThat(context).doesNotHaveBean(IntegrationGraphEndpoint.class);]