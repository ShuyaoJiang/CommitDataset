[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +, +public abstract class AbstractEndpoint<T> implements Endpoint<T>, EnvironmentAware {, +, +	private static final String ENDPOINTS_ENABLED_PROPERTY = "endpoints.enabled";, +, +	private Environment environment;, +	 * Mark if the endpoint exposes sensitive information., +	private Boolean enabled;, +	/**, +	 * Create a new sensitive endpoint instance. The enpoint will enabled flag will be, +	 * based on the spring {@link Environment} unless explicitly set., +	 * @param id the endpoint ID, +	 */, +		this(id, true);, +	/**, +	 * Create a new endpoint instance. The enpoint will enabled flag will be based on the, +	 * spring {@link Environment} unless explicitly set., +	 * @param id the endpoint ID, +	 * @param sensitive if the endpoint is sensitive, +	 */, +	public AbstractEndpoint(String id, boolean sensitive) {, +		this.id = id;, +		this.sensitive = sensitive;, +	}, +, +	/**, +	 * Create a new endpoint instance., +	 * @param id the endpoint ID, +	 * @param sensitive if the endpoint is sensitive, +	 * @param enabled if the endpoint is enabled or not., +	 */, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	@Override, +		if (this.enabled != null) {, +		if (this.environment != null) {, +			this.environment.getProperty(ENDPOINTS_ENABLED_PROPERTY, Boolean.class, true);, +		}, +		return true;, +	}, +	public void setEnabled(Boolean enabled) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +, +public abstract class AbstractEndpoint<T> implements Endpoint<T>, EnvironmentAware {, +, +	private static final String ENDPOINTS_ENABLED_PROPERTY = "endpoints.enabled";, +, +	private Environment environment;, +	 * Mark if the endpoint exposes sensitive information., +	private Boolean enabled;, +	/**, +	 * Create a new sensitive endpoint instance. The enpoint will enabled flag will be, +	 * based on the spring {@link Environment} unless explicitly set., +	 * @param id the endpoint ID, +	 */, +		this(id, true);, +	/**, +	 * Create a new endpoint instance. The enpoint will enabled flag will be based on the, +	 * spring {@link Environment} unless explicitly set., +	 * @param id the endpoint ID, +	 * @param sensitive if the endpoint is sensitive, +	 */, +	public AbstractEndpoint(String id, boolean sensitive) {, +		this.id = id;, +		this.sensitive = sensitive;, +	}, +, +	/**, +	 * Create a new endpoint instance., +	 * @param id the endpoint ID, +	 * @param sensitive if the endpoint is sensitive, +	 * @param enabled if the endpoint is enabled or not., +	 */, +	public void setEnvironment(Environment environment) {, +		this.environment = environment;, +	}, +, +	@Override, +		if (this.enabled != null) {, +		if (this.environment != null) {, +			this.environment.getProperty(ENDPOINTS_ENABLED_PROPERTY, Boolean.class, true);, +		}, +		return true;, +	}, +	public void setEnabled(Boolean enabled) {, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Endpoint.java, + * exposed via Spring MVC but could also be exposed using some other technique. Consider, + * extending {@link AbstractEndpoint} if you are developing your own endpoint., + * @see AbstractEndpoint, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java, +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +]