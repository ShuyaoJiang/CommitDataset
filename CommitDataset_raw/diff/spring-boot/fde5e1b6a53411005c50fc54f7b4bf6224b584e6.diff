[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Venil Noronha, +		defaultIncludes.add(Include.COOKIES);, +		 * Include Cookie in request and Set-Cookie in response headers., +		 */, +		COOKIES,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Venil Noronha, +		defaultIncludes.add(Include.COOKIES);, +		 * Include Cookie in request and Set-Cookie in response headers., +		 */, +		COOKIES,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * @author Venil Noronha, +			Map<String, Object> requestHeaders = getRequestHeaders(request);, +			if (!isIncluded(Include.COOKIES)) {, +				requestHeaders.remove("Cookie");, +			}, +			headers.put("request", requestHeaders);, +			Map<String, String> responseHeaders = getResponseHeaders(response);, +			if (!isIncluded(Include.COOKIES)) {, +				responseHeaders.remove("Set-Cookie");, +			}, +			headers.put("response", responseHeaders);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java, + * Copyright 2012-2016 the original author or authors., + * @author Venil Noronha, +		defaultIncludes.add(Include.COOKIES);, +		 * Include Cookie in request and Set-Cookie in response headers., +		 */, +		COOKIES,, +, +		/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java, + * @author Venil Noronha, +			Map<String, Object> requestHeaders = getRequestHeaders(request);, +			if (!isIncluded(Include.COOKIES)) {, +				requestHeaders.remove("Cookie");, +			}, +			headers.put("request", requestHeaders);, +			Map<String, String> responseHeaders = getResponseHeaders(response);, +			if (!isIncluded(Include.COOKIES)) {, +				responseHeaders.remove("Set-Cookie");, +			}, +			headers.put("response", responseHeaders);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java, + * @author Venil Noronha, +	@SuppressWarnings({ "unchecked" }), +	public void filterDoesNotAddRequestCookiesWithCookiesExclude(), +			throws ServletException, IOException {, +		this.properties.setInclude(Collections.singleton(Include.REQUEST_HEADERS));, +		MockHttpServletRequest request = spy(new MockHttpServletRequest("GET", "/foo"));, +		request.addHeader("Accept", "application/json");, +		request.addHeader("Cookie", "testCookie=testValue;");, +		Map<String, Object> map = (Map<String, Object>) this.filter.getTrace(request), +				.get("headers");, +		assertThat(map.get("request").toString()).isEqualTo("{Accept=application/json}");, +	}, +, +	@Test, +	@SuppressWarnings({ "unchecked" }), +	public void filterDoesNotAddResponseCookiesWithCookiesExclude(), +			throws ServletException, IOException {, +		this.properties.setInclude(Collections.singleton(Include.RESPONSE_HEADERS));, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		response.addHeader("Content-Type", "application/json");, +		response.addHeader("Set-Cookie", "testCookie=testValue;");, +		Map<String, Object> trace = this.filter.getTrace(request);, +		this.filter.enhanceTrace(trace, response);, +		Map<String, Object> map = (Map<String, Object>) trace.get("headers");, +		assertThat(map.get("response").toString()), +				.isEqualTo("{Content-Type=application/json, status=200}");, +	}, +, +	@Test]