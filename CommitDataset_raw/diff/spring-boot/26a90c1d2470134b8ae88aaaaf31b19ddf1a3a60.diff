[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean resolvePlaceholders = true;, +, +	/**, +	 * Flag to indicate that placeholders should be replaced during binding. Default is, +	 * true., +	 *, +	 * @param resolvePlaceholders flag value, +	 */, +	public void setResolvePlaceholders(boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	}, +, +		return new PropertySourcesPropertyValues(this.propertySources, names, includes,, +				this.resolvePlaceholders);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean resolvePlaceholders = true;, +, +	/**, +	 * Flag to indicate that placeholders should be replaced during binding. Default is, +	 * true., +	 *, +	 * @param resolvePlaceholders flag value, +	 */, +	public void setResolvePlaceholders(boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	}, +, +		return new PropertySourcesPropertyValues(this.propertySources, names, includes,, +				this.resolvePlaceholders);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +	private boolean resolvePlaceholders = true;, +, +		this(propertySources, (Collection<String>) null, PropertyNamePatternsMatcher.ALL,, +				true);, +				new PatternPropertyNamePatternsMatcher(includePatterns), true);, +	 * @param resolvePlaceholders flag to indicate the placeholders should be resolved, +			PropertyNamePatternsMatcher includes, boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	/**, +	 * Flag to indicate that placeholders should be replaced during binding. Default is, +	 * true., +	 *, +	 * @param resolvePlaceholders flag value, +	 */, +	public void setResolvePlaceholders(boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	}, +, +			if (this.resolvePlaceholders) {, +		}, +		return source.getProperty(propertyName);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java, +	private boolean resolvePlaceholders = true;, +, +	/**, +	 * Flag to indicate that placeholders should be replaced during binding. Default is, +	 * true., +	 *, +	 * @param resolvePlaceholders flag value, +	 */, +	public void setResolvePlaceholders(boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	}, +, +		return new PropertySourcesPropertyValues(this.propertySources, names, includes,, +				this.resolvePlaceholders);, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java, +	private boolean resolvePlaceholders = true;, +, +		this(propertySources, (Collection<String>) null, PropertyNamePatternsMatcher.ALL,, +				true);, +				new PatternPropertyNamePatternsMatcher(includePatterns), true);, +	 * @param resolvePlaceholders flag to indicate the placeholders should be resolved, +			PropertyNamePatternsMatcher includes, boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	/**, +	 * Flag to indicate that placeholders should be replaced during binding. Default is, +	 * true., +	 *, +	 * @param resolvePlaceholders flag value, +	 */, +	public void setResolvePlaceholders(boolean resolvePlaceholders) {, +		this.resolvePlaceholders = resolvePlaceholders;, +	}, +, +			if (this.resolvePlaceholders) {, +		}, +		return source.getProperty(propertyName);, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +	public void systemEnvironmentBindingWithDefaults() throws Exception {, +		setupFactory();, +		MutablePropertySources propertySources = new MutablePropertySources();, +		MockPropertySource propertySource = new MockPropertySource(, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);, +		propertySource.setProperty("name", "${foo.name:bar}");, +		propertySources.addFirst(propertySource);, +		this.factory.setPropertySources(propertySources);, +		this.factory.afterPropertiesSet();, +		Foo foo = this.factory.getObject();]