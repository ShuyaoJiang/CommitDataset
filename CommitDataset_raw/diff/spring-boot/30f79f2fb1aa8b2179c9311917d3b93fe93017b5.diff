[+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +import org.gradle.api.internal.IConventionAware;, +		if (distribution instanceof IConventionAware) {, +			((IConventionAware) distribution).getConventionMapping().map("baseName",, +					() -> applicationConvention.getApplicationName() + "-boot");, +		}, +				applicationConvention::getApplicationName);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +import org.gradle.api.internal.IConventionAware;, +		if (distribution instanceof IConventionAware) {, +			((IConventionAware) distribution).getConventionMapping().map("baseName",, +					() -> applicationConvention.getApplicationName() + "-boot");, +		}, +				applicationConvention::getApplicationName);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests.java, +	@Test, +	public void applicationNameCanBeUsedToCustomizeDistributionName() throws IOException {, +		assertThat(, +				this.gradleBuild.build("bootDistTar").task(":bootDistTar").getOutcome()), +						.isEqualTo(TaskOutcome.SUCCESS);, +		File distribution = new File(this.gradleBuild.getProjectDir(),, +				"build/distributions/custom-boot.tar");, +		assertThat(distribution).isFile();, +		String name = this.gradleBuild.getProjectDir().getName();, +		assertThat(tarEntryNames(distribution)).containsExactlyInAnyOrder("custom-boot/",, +				"custom-boot/lib/", "custom-boot/lib/" + name + ".jar",, +				"custom-boot/bin/", "custom-boot/bin/custom",, +				"custom-boot/bin/custom.bat");, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/ApplicationPluginAction.java, +import org.gradle.api.internal.IConventionAware;, +		if (distribution instanceof IConventionAware) {, +			((IConventionAware) distribution).getConventionMapping().map("baseName",, +					() -> applicationConvention.getApplicationName() + "-boot");, +		}, +				applicationConvention::getApplicationName);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests.java, +	@Test, +	public void applicationNameCanBeUsedToCustomizeDistributionName() throws IOException {, +		assertThat(, +				this.gradleBuild.build("bootDistTar").task(":bootDistTar").getOutcome()), +						.isEqualTo(TaskOutcome.SUCCESS);, +		File distribution = new File(this.gradleBuild.getProjectDir(),, +				"build/distributions/custom-boot.tar");, +		assertThat(distribution).isFile();, +		String name = this.gradleBuild.getProjectDir().getName();, +		assertThat(tarEntryNames(distribution)).containsExactlyInAnyOrder("custom-boot/",, +				"custom-boot/lib/", "custom-boot/lib/" + name + ".jar",, +				"custom-boot/bin/", "custom-boot/bin/custom",, +				"custom-boot/bin/custom.bat");, +	}, +, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/resources/org/springframework/boot/gradle/plugin/ApplicationPluginActionIntegrationTests-applicationNameCanBeUsedToCustomizeDistributionName.gradle, +buildscript {, +	dependencies {, +		classpath files(pluginClasspath.split(',')), +	}, +}, +, +apply plugin: 'org.springframework.boot', +apply plugin: 'application', +apply plugin: 'java', +, +applicationName = 'custom', +, +bootJar {, +	mainClassName = 'com.example.ExampleApplication', +}]