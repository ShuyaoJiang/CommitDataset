[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +		for (String node : sentinel.getNodes()) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +		for (String node : sentinel.getNodes()) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		 * Nodes as host:port pairs., +		private String[] nodes;, +		public String[] getNodes() {, +		public void setNodes(String[] nodes) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +		for (String node : sentinel.getNodes()) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		 * Nodes as host:port pairs., +		private String[] nodes;, +		public String[] getNodes() {, +		public void setNodes(String[] nodes) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +import java.util.Set;, +import java.util.stream.Collectors;, +import org.springframework.data.redis.connection.RedisNode;, +				"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380");, +		LettuceConnectionFactory connectionFactory = this.context, +				.getBean(LettuceConnectionFactory.class);, +		assertThat(connectionFactory.getPassword()).isEqualTo("password");, +		Set<RedisNode> sentinels = connectionFactory.getSentinelConfiguration(), +				.getSentinels();, +		assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())), +				.contains("127.0.0.1:26379", "127.0.0.1:26380");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +		for (String node : sentinel.getNodes()) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java, +		 * Nodes as host:port pairs., +		private String[] nodes;, +		public String[] getNodes() {, +		public void setNodes(String[] nodes) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +import java.util.Set;, +import java.util.stream.Collectors;, +import org.springframework.data.redis.connection.RedisNode;, +				"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380");, +		LettuceConnectionFactory connectionFactory = this.context, +				.getBean(LettuceConnectionFactory.class);, +		assertThat(connectionFactory.getPassword()).isEqualTo("password");, +		Set<RedisNode> sentinels = connectionFactory.getSentinelConfiguration(), +				.getSentinels();, +		assertThat(sentinels.stream().map(Object::toString).collect(Collectors.toSet())), +				.contains("127.0.0.1:26379", "127.0.0.1:26380");, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/ArrayBinderTests.java, +	@Test, +	public void bindToArrayWhenHasSpacesShouldTrim() throws Exception {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo", "1,  2,3");, +		this.sources.add(source);, +		String[] result = this.binder.bind("foo", Bindable.of(String[].class)).get();, +		assertThat(result).containsExactly("1", "2", "3");, +	}, +]