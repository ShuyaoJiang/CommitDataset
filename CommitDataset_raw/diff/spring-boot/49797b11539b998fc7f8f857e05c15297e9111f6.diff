[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +	public CassandraMappingContext cassandraMapping(, +			CassandraCustomConversions conversions) throws ClassNotFoundException {, +			CassandraCustomConversions conversions) {, +	public CassandraCustomConversions cassandraCustomConversions() {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +	public CassandraMappingContext cassandraMapping(, +			CassandraCustomConversions conversions) throws ClassNotFoundException {, +			CassandraCustomConversions conversions) {, +	public CassandraCustomConversions cassandraCustomConversions() {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationTests.java, +import java.util.Collections;, +	public void defaultConversions() {, +		this.context = new AnnotationConfigApplicationContext();, +		TestPropertyValues.of("spring.data.cassandra.keyspaceName:boot_test"), +				.applyTo(this.context);, +		this.context.register(TestConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				CassandraAutoConfiguration.class, CassandraDataAutoConfiguration.class);, +		this.context.refresh();, +		CassandraTemplate template = this.context.getBean(CassandraTemplate.class);, +		assertThat(template.getConverter().getConversionService().canConvert(Person.class,, +				String.class)).isFalse();, +	}, +, +	@Test, +		TestPropertyValues.of("spring.data.cassandra.keyspaceName:boot_test"), +				.applyTo(this.context);, +		public CassandraCustomConversions myCassandraCustomConversions() {, +			return new CassandraCustomConversions(Collections.singletonList(, +					new MyConverter()));]