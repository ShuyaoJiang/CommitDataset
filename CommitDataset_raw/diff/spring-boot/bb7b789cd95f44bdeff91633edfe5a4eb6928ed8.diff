[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +	static final String BOLT_DRIVER = "org.neo4j.ogm.drivers.bolt.driver.BoltDriver";, +, +	static final String DEFAULT_BOLT_URI = "bolt://localhost:7687";, +, +			if ("bolt".equals(scheme)) {, +				return BOLT_DRIVER;, +			}, +		if (ClassUtils.isPresent(BOLT_DRIVER, this.classLoader)) {, +			driverConfiguration.setDriverClassName(BOLT_DRIVER);, +			driverConfiguration.setURI( DEFAULT_BOLT_URI );, +			return;, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jProperties.java, +	static final String BOLT_DRIVER = "org.neo4j.ogm.drivers.bolt.driver.BoltDriver";, +, +	static final String DEFAULT_BOLT_URI = "bolt://localhost:7687";, +, +			if ("bolt".equals(scheme)) {, +				return BOLT_DRIVER;, +			}, +		if (ClassUtils.isPresent(BOLT_DRIVER, this.classLoader)) {, +			driverConfiguration.setDriverClassName(BOLT_DRIVER);, +			driverConfiguration.setURI( DEFAULT_BOLT_URI );, +			return;, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java, +import java.util.EnumSet;, +import java.util.Set;, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ));, +	public void defaultUseBoltIfAvailableAndEmbeddedNot() {, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.BOLT ));, +		Configuration configuration = properties.createConfiguration();, +		assertDriver(configuration, Neo4jProperties.BOLT_DRIVER, "bolt://localhost:7687");, +	}, +, +	@Test, +	public void defaultUseHttpIfEmbeddedAndBoltIsNotAvailable() {, +		Neo4jProperties properties = load(EnumSet.noneOf( AvailableDriver.class ));, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +	public void boltUriUseBolt() {, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED, AvailableDriver.BOLT ),, +				"spring.data.neo4j.uri=bolt://localhost:7687");, +		Configuration configuration = properties.createConfiguration();, +		assertDriver(configuration, Neo4jProperties.BOLT_DRIVER, "bolt://localhost:7687");, +	}, +, +	@Test, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +		Neo4jProperties properties = load(EnumSet.of( AvailableDriver.EMBEDDED ),, +	public Neo4jProperties load( final Set<AvailableDriver> availableDrivers, String... environment) {, +				if ( AvailableDriver.shouldLoad( availableDrivers, name )) {, +					return AvailableDriver.loadClass( name );, +	private enum AvailableDriver {, +		EMBEDDED( Neo4jProperties.EMBEDDED_DRIVER, TestEmbeddedDriver.class ),, +		BOLT( Neo4jProperties.BOLT_DRIVER, TestBoltDriver.class );, +, +		private final String driverName;, +		private final Class<?> driverStub;, +, +		AvailableDriver( final String driverName, final Class<?> driverStub ) {, +			this.driverName = driverName;, +			this.driverStub = driverStub;, +		}, +, +		public static boolean shouldLoad( Set<AvailableDriver> availableDrivers, String name ) {, +			for ( AvailableDriver driver : availableDrivers ) {, +				if ( driver.driverName.equals( name ) ) {, +					return true;, +				}, +			}, +			return false;, +		}, +, +		public static Class<?> loadClass( String className ) throws ClassNotFoundException {, +			for ( AvailableDriver driver : AvailableDriver.values() ) {, +				if ( driver.driverName.equals( className ) ) {, +					return driver.driverStub;, +				}, +			}, +			throw new ClassNotFoundException();, +		}, +	}, +, +	private static class TestBoltDriver {, +	}, +]