[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	public void setJndiName(String jndiName) {, +		this.jndiName = jndiName;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	public void setJndiName(String jndiName) {, +		this.jndiName = jndiName;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.util.StringUtils;, +@Conditional(JndiOrPropertyCondition.class), +	// Keep these in sync with the condition below, +	private static String[] JNDI_LOCATIONS = { "java:/JmsXA", "java:/XAConnectionFactory" };, +, +	@Autowired, +	private JmsProperties properties;, +, +		if (StringUtils.hasLength(this.properties.getJndiName())) {, +			return new JndiLocatorDelegate().lookup(this.properties.getJndiName(),, +					ConnectionFactory.class);, +		}, +		return findJndiConnectionFactory();, +	}, +, +	private ConnectionFactory findJndiConnectionFactory() {, +		for (String name : JNDI_LOCATIONS) {, +						+ Arrays.asList(JNDI_LOCATIONS));, +	/**, +	 * Condition for JNDI name or a specific property, +	 */, +	static class JndiOrPropertyCondition extends AnyNestedCondition {, +, +		public JndiOrPropertyCondition() {, +			super(ConfigurationPhase.PARSE_CONFIGURATION);, +		}, +, +		@ConditionalOnJndi({ "java:/JmsXA", "java:/XAConnectionFactory" }), +		static class Jndi {, +		}, +, +		@ConditionalOnProperty(prefix = "spring.jms", name = "jndi-name"), +		static class Property {, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.java, +	private String jndiName;, +, +	public String getJndiName() {, +		return this.jndiName;, +	}, +, +	public void setJndiName(String jndiName) {, +		this.jndiName = jndiName;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JndiConnectionFactoryAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration.JndiOrPropertyCondition;, +import org.springframework.context.annotation.Conditional;, +import org.springframework.util.StringUtils;, +@Conditional(JndiOrPropertyCondition.class), +	// Keep these in sync with the condition below, +	private static String[] JNDI_LOCATIONS = { "java:/JmsXA", "java:/XAConnectionFactory" };, +, +	@Autowired, +	private JmsProperties properties;, +, +		if (StringUtils.hasLength(this.properties.getJndiName())) {, +			return new JndiLocatorDelegate().lookup(this.properties.getJndiName(),, +					ConnectionFactory.class);, +		}, +		return findJndiConnectionFactory();, +	}, +, +	private ConnectionFactory findJndiConnectionFactory() {, +		for (String name : JNDI_LOCATIONS) {, +						+ Arrays.asList(JNDI_LOCATIONS));, +	/**, +	 * Condition for JNDI name or a specific property]