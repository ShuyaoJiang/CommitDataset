[+++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +	public void testAllowedFields() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		RelaxedDataBinder binder = getBinder(target, null);, +		binder.setAllowedFields("foo");, +		binder.setIgnoreUnknownFields(false);, +		BindingResult result = bind(binder, target, "foo: bar\n" + "value: 123\n", +				+ "bar: spam");, +		assertEquals(0, target.getValue());, +		assertEquals("bar", target.getFoo());, +		assertEquals(0, result.getErrorCount());, +	}, +, +	@Test, +	public void testDisallowedFields() throws Exception {, +		VanillaTarget target = new VanillaTarget();, +		RelaxedDataBinder binder = getBinder(target, null);, +		// Disallowed fields are not unknown..., +		binder.setDisallowedFields("foo", "bar");, +		binder.setIgnoreUnknownFields(false);, +		BindingResult result = bind(binder, target, "foo: bar\n" + "value: 123\n", +				+ "bar: spam");, +		assertEquals(123, target.getValue());, +		assertEquals(null, target.getFoo());, +		assertEquals(0, result.getErrorCount());, +	}, +, +	@Test, +	private BindingResult bind(DataBinder binder, Object target, String values), +		binder.bind(new MutablePropertyValues(properties));, +		binder.validate();, +, +		return binder.getBindingResult();, +	}, +, +	private BindingResult bind(Object target, String values, String namePrefix), +			throws Exception {, +		return bind(getBinder(target, namePrefix), target, values);, +	}, +, +	private RelaxedDataBinder getBinder(Object target, String namePrefix) {, +		RelaxedDataBinder binder = new RelaxedDataBinder(target, namePrefix);, +		return binder;]