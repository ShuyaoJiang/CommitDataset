[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/metrics.adoc, +value of `nonheap` and the `id` attribute has a value of `Compressed Class Space`. The, +resulting response is similar to the following:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/metrics.adoc, +value of `nonheap` and the `id` attribute has a value of `Compressed Class Space`. The, +resulting response is similar to the following:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java, +						.param("tag", "area:nonheap"), +						.param("tag", "id:Compressed Class Space")), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/metrics.adoc, +value of `nonheap` and the `id` attribute has a value of `Compressed Class Space`. The, +resulting response is similar to the following:, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java, +						.param("tag", "area:nonheap"), +						.param("tag", "id:Compressed Class Space")), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ThreadDumpEndpointDocumentationTests.java, +								fieldWithPath("threads.[].blockedCount").description(, +										"Total number of times that the thread has been ", +												+ "blocked."),, +								fieldWithPath("threads.[].daemon"), +										.description("Whether the thread is a daemon ", +												+ "thread. Only available on Java 9 or ", +												+ "later."), +										.optional().type(JsonFieldType.BOOLEAN),, +								fieldWithPath("threads.[].inNative").description(, +										"Whether the thread is executing native code."),, +								fieldWithPath("threads.[].lockInfo").description(, +										"Object for which the thread is blocked ", +												+ "waiting."), +								fieldWithPath("threads.[].lockInfo.className"), +												"Fully qualified class name of the lock", +														+ " object."), +										.optional(),, +								fieldWithPath("threads.[].lockInfo.identityHashCode"), +												"Identity hash code of the lock object."), +										.optional(),, +								fieldWithPath("threads.[].lockOwnerId").description(, +										"ID of the thread that owns the object on which ", +												+ "the thread is blocked. `-1` if the ", +												+ "thread is not blocked."),, +								fieldWithPath("threads.[].lockOwnerName"), +										.description("Name of the thread that owns the ", +												+ "object on which the thread is ", +												+ "blocked."), +								fieldWithPath("threads.[].priority"), +										.description("Priority of the thread. Only ", +												+ "available on Java 9 or later."), +										.optional().type(JsonFieldType.NUMBER),, +								fieldWithPath("threads.[].stackTrace"), +										.description("Stack trace of the thread."),, +								fieldWithPath("threads.[].stackTrace.[].classLoaderName"), +										.description("Name of the class loader of the ", +												+ "class that contains the execution ", +												+ "point identified by this entry, if ", +												+ "any. Only available on Java 9 or ", +												+ "later."), +										.optional().type(JsonFieldType.STRING),, +								fieldWithPath("threads.[].stackTrace.[].className"), +												"Name of the class that contains the ", +														+ "execution point identified ", +														+ "by this entry."),, +								fieldWithPath("threads.[].stackTrace.[].fileName"), +										.description("Name of the source file that ", +												+ "contains the execution point ", +												+ "identified by this entry, if any."), +										.optional().type(JsonFieldType.STRING),, +								fieldWithPath("threads.[].stackTrace.[].lineNumber"), +										.description("Line number of the execution ", +												+ "point identified by this entry. ", +												+ "Negative if unknown."),, +								fieldWithPath("threads.[].stackTrace.[].methodName"), +										.description("Name of the method."),, +								fieldWithPath("threads.[].stackTrace.[].moduleName"), +										.description("Name of the module that contains ", +												+ "the execution point identified by ", +												+ "this entry, if any. Only available ", +												+ "on Java 9 or later."), +										.optional().type(JsonFieldType.STRING),, +								fieldWithPath("threads.[].stackTrace.[].moduleVersion"), +										.description("Version of the module that ", +												+ "contains the execution point ", +												+ "identified by this entry, if any. ", +												+ "Only available on Java 9 or later."), +										.optional().type(JsonFieldType.STRING),, +								fieldWithPath("threads.[].stackTrace.[].nativeMethod"), +												"Whether the execution point is a native ", +														+ "method."),, +								fieldWithPath("threads.[].suspended"), +										.description("Whether the thread is suspended."),, +								fieldWithPath("threads.[].threadId"), +										.description("ID of the thread."),, +								fieldWithPath("threads.[].threadName"), +										.description("Name of the thread."),, +								fieldWithPath("threads.[].threadState"), +										.description("State of the thread (", +												+ describeEnumValues(Thread.State.class), +												+ ")."),, +								fieldWithPath("threads.[].waitedCount").description(, +										"Total number of times that the thread has waited", +												+ " for notification."),]