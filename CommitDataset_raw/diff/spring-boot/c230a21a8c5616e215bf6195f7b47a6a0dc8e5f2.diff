[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.ObjectProvider;, +@Import(CacheConfigurationImportSelector.class), +	@ConditionalOnMissingBean, +	public CacheManagerCustomizers cacheManagerCustomizers(, +			ObjectProvider<List<CacheManagerCustomizer<?>>> customizers) {, +		return new CacheManagerCustomizers(customizers.getIfAvailable());, +	}, +, +	@Bean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.ObjectProvider;, +@Import(CacheConfigurationImportSelector.class), +	@ConditionalOnMissingBean, +	public CacheManagerCustomizers cacheManagerCustomizers(, +			ObjectProvider<List<CacheManagerCustomizer<?>>> customizers) {, +		return new CacheManagerCustomizers(customizers.getIfAvailable());, +	}, +, +	@Bean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java, +import org.springframework.core.ResolvableType;, + * @since 1.5.0, +public class CacheManagerCustomizers {, +	private final List<CacheManagerCustomizer<?>> customizers;, +, +	public CacheManagerCustomizers(, +			List<? extends CacheManagerCustomizer<?>> customizers) {, +		this.customizers = (customizers != null ?, +				new ArrayList<CacheManagerCustomizer<?>>(customizers) :, +				Collections.<CacheManagerCustomizer<?>>emptyList());, +	}, +		for (CacheManagerCustomizer<?> customizer : this.customizers) {, +			Class<?> generic = ResolvableType, +					.forClass(CacheManagerCustomizer.class,, +							customizer.getClass()), +					.resolveGeneric();, +			if (generic.isInstance(cacheManager)) {, +		}, +	private void customize(CacheManager cacheManager, CacheManagerCustomizer customizer) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +import java.util.List;, +, +import org.springframework.beans.factory.ObjectProvider;, +@Import(CacheConfigurationImportSelector.class), +	@ConditionalOnMissingBean, +	public CacheManagerCustomizers cacheManagerCustomizers(, +			ObjectProvider<List<CacheManagerCustomizer<?>>> customizers) {, +		return new CacheManagerCustomizers(customizers.getIfAvailable());, +	}, +, +	@Bean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizers.java, +import org.springframework.core.ResolvableType;, + * @since 1.5.0, +public class CacheManagerCustomizers {, +	private final List<CacheManagerCustomizer<?>> customizers;, +, +	public CacheManagerCustomizers(, +			List<? extends CacheManagerCustomizer<?>> customizers) {, +		this.customizers = (customizers != null ?, +				new ArrayList<CacheManagerCustomizer<?>>(customizers) :, +				Collections.<CacheManagerCustomizer<?>>emptyList());, +	}, +		for (CacheManagerCustomizer<?> customizer : this.customizers) {, +			Class<?> generic = ResolvableType, +					.forClass(CacheManagerCustomizer.class,, +							customizer.getClass()), +					.resolveGeneric();, +			if (generic.isInstance(cacheManager)) {, +		}, +	private void customize(CacheManager cacheManager, CacheManagerCustomizer customizer) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheManagerCustomizersTests.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.cache.caffeine.CaffeineCacheManager;, +	@Test, +	public void customizeWithNullCustomizersShouldDoNothing() {, +		new CacheManagerCustomizers(null), +				.customize(mock(CacheManager.class));, +		CacheManagerCustomizers customizers = new CacheManagerCustomizers(, +				Collections.singletonList(new CacheNamesCacheManagerCustomizer()));, +		ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager();, +		customizers.customize(cacheManager);, +	public void customizeShouldCheckGeneric() throws Exception {, +		List<TestCustomizer<?>> list = new ArrayList<TestCustomizer<?>>();, +		list.add(new TestCustomizer<CacheManager>());, +		list.add(new TestConcurrentMapCacheManagerCustomizer());, +		CacheManagerCustomizers customizers = new CacheManagerCustomizers(list);, +		customizers.customize(mock(CacheManager.class));, +		assertThat(list.get(0).getCount()).isEqualTo(1);, +		assertThat(list.get(1).getCount()).isEqualTo(0);, +		customizers.customize(mock(ConcurrentMapCacheManager.class));, +		assertThat(list.get(0).getCount()).isEqualTo(2);, +		assertThat(list.get(1).getCount()).isEqualTo(1);]