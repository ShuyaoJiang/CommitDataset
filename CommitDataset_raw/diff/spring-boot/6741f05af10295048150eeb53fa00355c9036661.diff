[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +	@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class }), +	static class CaffeineCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public CaffeineCacheStatisticsProvider caffeineCacheStatisticsProvider() {, +			return new CaffeineCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +	@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class }), +	static class CaffeineCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public CaffeineCacheStatisticsProvider caffeineCacheStatisticsProvider() {, +			return new CaffeineCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java, +	public void baseCaffeineCacheStatistics() {, +		load(CaffeineCacheConfig.class);, +		CacheStatisticsProvider provider = this.context, +				.getBean("caffeineCacheStatisticsProvider", CacheStatisticsProvider.class);, +		doTestCoreStatistics(provider, true);, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +	@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class }), +	static class CaffeineCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public CaffeineCacheStatisticsProvider caffeineCacheStatisticsProvider() {, +			return new CaffeineCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java, +	public void baseCaffeineCacheStatistics() {, +		load(CaffeineCacheConfig.class);, +		CacheStatisticsProvider provider = this.context, +				.getBean("caffeineCacheStatisticsProvider", CacheStatisticsProvider.class);, +		doTestCoreStatistics(provider, true);, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java, +import java.util.List;, +, +import org.springframework.cache.CacheManager;, +import org.springframework.util.CollectionUtils;, +@ConditionalOnMissingBean(CacheManager.class), +	@Autowired, +	private CacheManagerCustomizers customizers;, +, +		CaffeineCacheManager cacheManager = createCacheManager();, +		List<String> cacheNames = this.cacheProperties.getCacheNames();, +		if (!CollectionUtils.isEmpty(cacheNames)) {, +			cacheManager.setCacheNames(cacheNames);, +		return this.customizers.customize(cacheManager);, +	private CaffeineCacheManager createCacheManager() {, +		CaffeineCacheManager cacheManager = new CaffeineCacheManager();, +		setCacheBuilder(cacheManager);, +		if (this.cacheLoader != null) {, +			cacheManager.setCacheLoader(this.cacheLoader);, +		}, +		return cacheManager;, +	}, +, +	private void setCacheBuilder(CaffeineCacheManager cacheManager) {, +			cacheManager.setCacheSpecification(specification);, +			cacheManager.setCaffeineSpec(this.caffeineSpec);, +			cacheManager.setCaffeine(this.caffeine);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java, +	@ConditionalOnClass({ Caffeine.class, CaffeineCacheManager.class }), +	static class CaffeineCacheStatisticsProviderConfiguration {, +, +		@Bean, +		public CaffeineCacheStatisticsProvider caffeineCacheStatisticsProvider() {, +			return new CaffeineCacheStatisticsProvider();, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java, +	public void baseCaffeineCacheStatistics() {, +		load(CaffeineCacheConfig.class);, +		CacheStatisticsProvider provider = this.context, +				.getBean("caffeineCacheStatisticsProvider", CacheStatisticsProvider.class);, +		doTestCoreStatistics(provider, true);, +	}]