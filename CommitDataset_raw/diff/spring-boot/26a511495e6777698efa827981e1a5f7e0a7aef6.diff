[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, + * @author Andy Wilkinson, +	private boolean restrictAnonymousAccess = true;, +	 * Time to live for cached result. If accessed anonymously, we might need to cache the, +	 * result of this endpoint to prevent a DOS attack., +	 * @return time to live in milliseconds (default 1000), +	 */, +	public long getTimeToLive() {, +		return this.timeToLive;, +	}, +, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +	}, +, +	public boolean isRestrictAnonymousAccess() {, +		return this.restrictAnonymousAccess;, +	}, +, +	public void setRestrictAnonymousAccess(boolean restrictAnonymousAccess) {, +		this.restrictAnonymousAccess = restrictAnonymousAccess;, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, + * @author Andy Wilkinson, +	private boolean restrictAnonymousAccess = true;, +	 * Time to live for cached result. If accessed anonymously, we might need to cache the, +	 * result of this endpoint to prevent a DOS attack., +	 * @return time to live in milliseconds (default 1000), +	 */, +	public long getTimeToLive() {, +		return this.timeToLive;, +	}, +, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +	}, +, +	public boolean isRestrictAnonymousAccess() {, +		return this.restrictAnonymousAccess;, +	}, +, +	public void setRestrictAnonymousAccess(boolean restrictAnonymousAccess) {, +		this.restrictAnonymousAccess = restrictAnonymousAccess;, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, + * @author Andy Wilkinson, +		if (this.delegate.isRestrictAnonymousAccess() && !secure(principal)) {, +		long accessTime = System.currentTimeMillis();, +		if (cacheIsStale(accessTime) || secure(principal), +				|| !this.delegate.isRestrictAnonymousAccess()) {, +			this.lastAccess = accessTime;, +	private boolean cacheIsStale(long accessTime) {, +		return this.cached == null, +				|| (accessTime - this.lastAccess) > this.delegate.getTimeToLive();, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/HealthEndpoint.java, + * @author Andy Wilkinson, +	private boolean restrictAnonymousAccess = true;, +	 * Time to live for cached result. If accessed anonymously, we might need to cache the, +	 * result of this endpoint to prevent a DOS attack., +	 * @return time to live in milliseconds (default 1000), +	 */, +	public long getTimeToLive() {, +		return this.timeToLive;, +	}, +, +	public void setTimeToLive(long ttl) {, +		this.timeToLive = ttl;, +	}, +, +	public boolean isRestrictAnonymousAccess() {, +		return this.restrictAnonymousAccess;, +	}, +, +	public void setRestrictAnonymousAccess(boolean restrictAnonymousAccess) {, +		this.restrictAnonymousAccess = restrictAnonymousAccess;, +	}, +, +	/**, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, + * @author Andy Wilkinson, +		if (this.delegate.isRestrictAnonymousAccess() && !secure(principal)) {, +		long accessTime = System.currentTimeMillis();, +		if (cacheIsStale(accessTime) || secure(principal), +				|| !this.delegate.isRestrictAnonymousAccess()) {, +			this.lastAccess = accessTime;, +	private boolean cacheIsStale(long accessTime) {, +		return this.cached == null, +				|| (accessTime - this.lastAccess) > this.delegate.getTimeToLive();, +	}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertThat;]