[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	public HibernateJpaAutoConfiguration() {, +		System.err.println("Init");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	public HibernateJpaAutoConfiguration() {, +		System.err.println("Init");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +@ConditionalOnMissingBean(WebSecurityConfiguration.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java, +	public HibernateJpaAutoConfiguration() {, +		System.err.println("Init");, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfiguration.java, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;, +@ConditionalOnMissingBean(WebSecurityConfiguration.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.ComponentScanDetector;, +import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;, +import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;, +import org.springframework.boot.autoconfigure.orm.jpa.test.City;, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.context.annotation.Import;, +import org.springframework.orm.jpa.JpaTransactionManager;, +	@Test, +	public void testJpaCoexistsHappily() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(EntityConfiguration.class, TestConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class,, +				SecurityAutoConfiguration.class);, +		// This can fail if security @Conditionals force early instantiation of the, +		// HibernateJpaAutoConfiguration, +		this.context.refresh();, +		assertNotNull(this.context.getBean(JpaTransactionManager.class));, +	}, +, +	@ComponentScan(basePackageClasses = { City.class }), +	@Import(ComponentScanDetector.class), +	protected static class EntityConfiguration {, +, +	}, +, +	@Configuration]