[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/security/AuthenticationAuditListener.java, +		if (event.getAuthentication().getDetails() != null) {, +			data.put("details", event.getAuthentication().getDetails());, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/security/AuthenticationAuditListener.java, +		if (event.getAuthentication().getDetails() != null) {, +			data.put("details", event.getAuthentication().getDetails());, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/security/AuthenticationAuditListenerTests.java, +import java.util.Map;, +, +import org.mockito.ArgumentCaptor;, +import org.springframework.boot.actuate.audit.listener.AuditApplicationEvent;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.junit.Assert.assertThat;, +	@Test, +	public void shouldPassDetailsToAuditEventOnAuthenticationFailureEvent(), +		throws Exception {, +		// given, +		final Object details = new Object();, +		final AuthenticationFailureExpiredEvent event =, +			createAuthenticationFailureEvent(details);, +, +		// when, +		this.listener.onApplicationEvent(event);, +, +		// then, +		final ArgumentCaptor<AuditApplicationEvent> applicationEventArgumentCaptor =, +			ArgumentCaptor.forClass(AuditApplicationEvent.class);, +		verify(this.publisher).publishEvent(applicationEventArgumentCaptor.capture());, +		final Map<String, Object> eventData =, +			applicationEventArgumentCaptor.getValue().getAuditEvent().getData();, +		assertThat(eventData, hasEntry("details", details));, +	}, +, +	private AuthenticationFailureExpiredEvent createAuthenticationFailureEvent(, +		final Object details) {, +		final UsernamePasswordAuthenticationToken authentication =, +			new UsernamePasswordAuthenticationToken("user", "password");, +		authentication.setDetails(details);, +		final BadCredentialsException exception = new BadCredentialsException("Bad user");, +		return new AuthenticationFailureExpiredEvent(authentication, exception);, +	}]