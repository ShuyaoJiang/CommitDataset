[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +import com.fasterxml.jackson.databind.ObjectMapper;, +, + * @author Andy Wilkinson, +@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class }), +, +		@ConditionalOnClass({ Jackson2ObjectMapperBuilder.class, ObjectMapper.class }), +		protected static class HalObjectMapperConfiguration {, +, +			@Autowired(required = false), +			private Jackson2ObjectMapperBuilder objectMapperBuilder;, +, +			@Bean, +			public BeanPostProcessor halObjectMapperConfigurer() {, +				return new BeanPostProcessor() {, +, +					@Override, +					public Object postProcessAfterInitialization(Object bean,, +							String beanName) throws BeansException {, +						if (HalObjectMapperConfiguration.this.objectMapperBuilder != null, +								&& bean instanceof ObjectMapper, +								&& "_halObjectMapper".equals(beanName)) {, +							HalObjectMapperConfiguration.this.objectMapperBuilder, +									.configure((ObjectMapper) bean);, +						}, +						return bean;, +					}, +, +					@Override, +					public Object postProcessBeforeInitialization(Object bean,, +							String beanName) throws BeansException {, +						return bean;, +					}, +, +				};, +			}, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;, +import org.springframework.context.annotation.Bean;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +import com.fasterxml.jackson.databind.ObjectMapper;, +, + * @author Andy Wilkinson, +@AutoConfigureAfter({ WebMvcAutoConfiguration.class, JacksonAutoConfiguration.class }), +, +		@ConditionalOnClass({ Jackson2ObjectMapperBuilder.class, ObjectMapper.class }), +		protected static class HalObjectMapperConfiguration {, +, +			@Autowired(required = false), +			private Jackson2ObjectMapperBuilder objectMapperBuilder;, +, +			@Bean, +			public BeanPostProcessor halObjectMapperConfigurer() {, +				return new BeanPostProcessor() {, +, +					@Override, +					public Object postProcessAfterInitialization(Object bean,, +							String beanName) throws BeansException {, +						if (HalObjectMapperConfiguration.this.objectMapperBuilder != null, +								&& bean instanceof ObjectMapper, +								&& "_halObjectMapper".equals(beanName)) {, +							HalObjectMapperConfiguration.this.objectMapperBuilder, +									.configure((ObjectMapper) bean);, +						}, +						return bean;, +					}, +, +					@Override, +					public Object postProcessBeforeInitialization(Object bean,, +							String beanName) throws BeansException {, +						return bean;, +					}, +, +				};, +			}, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import com.fasterxml.jackson.databind.SerializationFeature;, +, +	@Test, +	public void jacksonConfigurationIsAppliedToTheHalObjectMapper() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(HypermediaAutoConfiguration.class,, +				JacksonAutoConfiguration.class);, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.jackson.serialization.INDENT_OUTPUT:true");, +		this.context.refresh();]