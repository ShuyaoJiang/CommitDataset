[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document result = this.mongoTemplate.executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document result = this.mongoTemplate.executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document commandResult = mock(Document.class);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document result = this.mongoTemplate.executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document commandResult = mock(Document.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import com.mongodb.client.MongoDatabase;, +		public MongoDatabase getDb() throws DataAccessException {, +		public MongoDatabase getDb(String dbName) throws DataAccessException {, +		@Override, +		public DB getLegacyDb() {, +			return this.mongoDbFactory.getLegacyDb();, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document result = this.mongoTemplate.executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document commandResult = mock(Document.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import com.mongodb.client.MongoDatabase;, +		public MongoDatabase getDb() throws DataAccessException {, +		public MongoDatabase getDb(String dbName) throws DataAccessException {, +		@Override, +		public DB getLegacyDb() {, +			return this.mongoDbFactory.getLegacyDb();, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfigurationTests.java, +import org.bson.Document;, +		Integer mongoPort = Integer, +				.valueOf(this.context.getEnvironment().getProperty("local.mongo.port"));, +		Integer mongoPort = Integer, +				.valueOf(this.context.getEnvironment().getProperty("local.mongo.port"));, +		Integer mongoPort = Integer, +				.valueOf(this.context.getEnvironment().getProperty("local.mongo.port"));, +		Document buildInfo = mongo.executeCommand("{ buildInfo: 1 }");, +		ctx.register(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class,, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +			ResultSet results = this.cassandraOperations.getCqlOperations(), +					.queryForResultSet(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/MongoHealthIndicator.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document result = this.mongoTemplate.executeCommand("{ buildInfo: 1 }");, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/MongoHealthIndicatorTests.java, + * Copyright 2012-2017 the original author or authors., +import org.bson.Document;, +		Document commandResult = mock(Document.class);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java, + * Copyright 2012-2017 the original author or authors., +import com.mongodb.client.MongoDatabase;, +		public MongoDatabase getDb() throws DataAccessException {, +		public MongoDatabase getDb(String dbName) throws DataAccessException {, +		@Override, +		public DB getLegacyDb() {, +			return this.mongoDbFactory.getLegacyDb();, +		}, +]