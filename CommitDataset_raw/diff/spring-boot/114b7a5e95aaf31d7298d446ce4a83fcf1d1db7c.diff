[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		String config = "classpath:", +				+ SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils, +						.getProperty(CONFIG_NAME, "application")) + ".properties";, +		config = SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils.getProperty(, +		InputStream resource = getResource(config);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		String config = "classpath:", +				+ SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils, +						.getProperty(CONFIG_NAME, "application")) + ".properties";, +		config = SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils.getProperty(, +		InputStream resource = getResource(config);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +		String propVal = getProperty(placeholderName, null, text);, +		if (propVal != null) {, +			return propVal;, +		}, +		return properties == null ? null : properties.getProperty(placeholderName);, +	}, +, +	public static String getProperty(String key) {, +		return getProperty(key, null, "");, +	}, +, +	public static String getProperty(String key, String defaultValue) {, +		return getProperty(key, defaultValue, "");, +	}, +, +	/**, +	 * Search the System properties and environment variables for a value with the, +	 * provided key. Environment variables in <code>UPPER_CASE</code> style are allowed, +	 * where System properties would normally be <code>lower.case</code>., +	 * , +	 * @param key the key to resolve, +	 * @param text optional extra context for an error message if the key resolution fails, +	 * (e.g. if System properties are not accessible), +	 * @return a static property value or null of not found, +	 */, +	public static String getProperty(String key, String defaultValue, String text) {, +			String propVal = System.getProperty(key);, +				propVal = System.getenv(key);, +			}, +			if (propVal == null) {, +				// Try with underscores., +				propVal = System.getenv(key.replace(".", "_"));, +			}, +			if (propVal == null) {, +				// Try uppercase with underscores as well., +				propVal = System.getenv(key.toUpperCase().replace(".", "_"));, +			System.err.println("Could not resolve key '" + key + "' in '" + text, +					+ "' as system property or in environment: " + ex);, +		return defaultValue;, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java, +		String config = "classpath:", +				+ SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils, +						.getProperty(CONFIG_NAME, "application")) + ".properties";, +		config = SystemPropertyUtils.resolvePlaceholders(SystemPropertyUtils.getProperty(, +		InputStream resource = getResource(config);, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/util/SystemPropertyUtils.java, +		String propVal = getProperty(placeholderName, null, text);, +		if (propVal != null) {, +			return propVal;, +		}, +		return properties == null ? null : properties.getProperty(placeholderName);, +	}, +, +	public static String getProperty(String key) {, +		return getProperty(key, null, "");, +	}, +, +	public static String getProperty(String key, String defaultValue) {, +		return getProperty(key, defaultValue, "");, +	}, +, +	/**, +	 * Search the System properties and environment variables for a value with the, +	 * provided key. Environment variables in <code>UPPER_CASE</code> style are allowed, +	 * where System properties would normally be <code>lower.case</code>., +	 * , +	 * @param key the key to resolve, +	 * @param text optional extra context for an error message if the key resolution fails, +	 * (e.g. if System properties are not accessible), +	 * @return a static property value or null of not found, +	 */, +	public static String getProperty(String key, String defaultValue, String text) {, +			String propVal = System.getProperty(key);, +				propVal = System.getenv(key);, +			}, +			if (propVal == null) {, +				// Try with underscores., +				propVal = System.getenv(key.replace(".", "_"));, +			}, +			if (propVal == null) {, +				// Try uppercase with underscores as well., +				propVal = System.getenv(key.toUpperCase().replace(".", "_"));, +			System.err.println("Could not resolve key '" + key + "' in '" + text, +					+ "' as system property or in environment: " + ex);, +		return defaultValue;, +++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/PropertiesLauncherTests.java, +	public void testUserSpecifiedConfigPathWins() throws Exception {]