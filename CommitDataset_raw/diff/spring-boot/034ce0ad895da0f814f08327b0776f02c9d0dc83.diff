[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.type.filter.AnnotationTypeFilter;, +import org.springframework.data.annotation.Persistent;, +import org.springframework.data.mongodb.core.mapping.Document;, +import org.springframework.util.ClassUtils;, +	@Autowired, +	private Environment environment;, +, +	@Autowired, +	private ResourceLoader resourceLoader;, +, +	public MongoMappingContext mongoMappingContext(BeanFactory beanFactory), +			throws ClassNotFoundException {, +		MongoMappingContext context = new MongoMappingContext();, +		context.setInitialEntitySet(getInitialEntitySet(beanFactory));, +		return context;, +	}, +, +	private Set<Class<?>> getInitialEntitySet(BeanFactory beanFactory), +			throws ClassNotFoundException {, +		Set<Class<?>> entitySet = new HashSet<Class<?>>();, +		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(, +				false);, +		scanner.setEnvironment(this.environment);, +		scanner.setResourceLoader(this.resourceLoader);, +		scanner.addIncludeFilter(new AnnotationTypeFilter(Document.class));, +		scanner.addIncludeFilter(new AnnotationTypeFilter(Persistent.class));, +		for (String basePackage : getMappingBasePackages(beanFactory)) {, +			if (StringUtils.hasText(basePackage)) {, +				for (BeanDefinition candidate : scanner, +						.findCandidateComponents(basePackage)) {, +					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),, +							MongoDataAutoConfiguration.class.getClassLoader()));, +				}, +			}, +		}, +		return entitySet;, +	}, +, +	private static Collection<String> getMappingBasePackages(BeanFactory beanFactory) {, +		try {, +			return AutoConfigurationPackages.get(beanFactory);, +		}, +		catch (IllegalStateException ex) {, +			// no auto-configuration package registered yet, +			return Collections.emptyList();, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.boot.autoconfigure.AutoConfigurationPackages;, +import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.type.filter.AnnotationTypeFilter;, +import org.springframework.data.annotation.Persistent;, +import org.springframework.data.mongodb.core.mapping.Document;, +import org.springframework.util.ClassUtils;, +	@Autowired, +	private Environment environment;, +, +	@Autowired, +	private ResourceLoader resourceLoader;, +, +	public MongoMappingContext mongoMappingContext(BeanFactory beanFactory), +			throws ClassNotFoundException {, +		MongoMappingContext context = new MongoMappingContext();, +		context.setInitialEntitySet(getInitialEntitySet(beanFactory));, +		return context;, +	}, +, +	private Set<Class<?>> getInitialEntitySet(BeanFactory beanFactory), +			throws ClassNotFoundException {, +		Set<Class<?>> entitySet = new HashSet<Class<?>>();, +		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(, +				false);, +		scanner.setEnvironment(this.environment);, +		scanner.setResourceLoader(this.resourceLoader);, +		scanner.addIncludeFilter(new AnnotationTypeFilter(Document.class));, +		scanner.addIncludeFilter(new AnnotationTypeFilter(Persistent.class));, +		for (String basePackage : getMappingBasePackages(beanFactory)) {, +			if (StringUtils.hasText(basePackage)) {, +				for (BeanDefinition candidate : scanner, +						.findCandidateComponents(basePackage)) {, +					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),, +							MongoDataAutoConfiguration.class.getClassLoader()));, +				}, +			}]