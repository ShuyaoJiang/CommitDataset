[+++ b/spring-boot-dependencies/pom.xml, +		<log4j2.version>2.8.2</log4j2.version>, +++ b/spring-boot-dependencies/pom.xml, +		<log4j2.version>2.8.2</log4j2.version>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private ExtendedWhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceExtendedThrowable", "throwable", options, configuration);, +		this.delegate = ExtendedThrowablePatternConverter.newInstance(configuration,, +				options);, +	 * @param configuration current configuration, +			Configuration configuration, String[] options) {, +		return new ExtendedWhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot-dependencies/pom.xml, +		<log4j2.version>2.8.2</log4j2.version>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private ExtendedWhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceExtendedThrowable", "throwable", options, configuration);, +		this.delegate = ExtendedThrowablePatternConverter.newInstance(configuration,, +				options);, +	 * @param configuration current configuration, +			Configuration configuration, String[] options) {, +		return new ExtendedWhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/WhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private WhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceThrowable", "throwable", options, configuration);, +	 * @param configuration current configuration, +	public static WhitespaceThrowablePatternConverter newInstance(, +			Configuration configuration, String[] options) {, +		return new WhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot-dependencies/pom.xml, +		<log4j2.version>2.8.2</log4j2.version>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private ExtendedWhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceExtendedThrowable", "throwable", options, configuration);, +		this.delegate = ExtendedThrowablePatternConverter.newInstance(configuration,, +				options);, +	 * @param configuration current configuration, +			Configuration configuration, String[] options) {, +		return new ExtendedWhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/WhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private WhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceThrowable", "throwable", options, configuration);, +	 * @param configuration current configuration, +	public static WhitespaceThrowablePatternConverter newInstance(, +			Configuration configuration, String[] options) {, +		return new WhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverterTests.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.DefaultConfiguration;, +			.newInstance(new DefaultConfiguration(), new String[] {});, +++ b/spring-boot-dependencies/pom.xml, +		<log4j2.version>2.8.2</log4j2.version>, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private ExtendedWhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceExtendedThrowable", "throwable", options, configuration);, +		this.delegate = ExtendedThrowablePatternConverter.newInstance(configuration,, +				options);, +	 * @param configuration current configuration, +			Configuration configuration, String[] options) {, +		return new ExtendedWhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/WhitespaceThrowablePatternConverter.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.Configuration;, +	private WhitespaceThrowablePatternConverter(Configuration configuration,, +			String[] options) {, +		super("WhitespaceThrowable", "throwable", options, configuration);, +	 * @param configuration current configuration, +	public static WhitespaceThrowablePatternConverter newInstance(, +			Configuration configuration, String[] options) {, +		return new WhitespaceThrowablePatternConverter(configuration, options);, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverterTests.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.DefaultConfiguration;, +			.newInstance(new DefaultConfiguration(), new String[] {});, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/WhitespaceThrowablePatternConverterTests.java, + * Copyright 2012-2017 the original author or authors., +import org.apache.logging.log4j.core.config.DefaultConfiguration;, +			.newInstance(new DefaultConfiguration(), new String[] {});]