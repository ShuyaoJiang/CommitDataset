[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +your application., +, +TIP: See also the <<boot-features-external-config-vs-value,differences between `@Value`, +and type-safe configuration properties>>., +, +, +, +[[boot-features-external-config-java-bean-binding]], +==== JavaBean properties binding, +It is possible to bind a bean declaring standard JavaBean properties as shown in the, +following example:, +* `acme.security.roles`, with a collection of `String` that defaults to `USER`., +Such arrangement relies on a default empty constructor and getters and setters are usually, +mandatory, since binding is through standard Java Beans property descriptors, just like in, +Spring MVC. A setter may be omitted in the following cases:, +, +[[boot-features-external-config-constructor-binding]], +==== Constructor binding, +The example in the previous section can be rewritten in an immutable fashion as shown in, +the following example:, +, +[source,java,indent=0], +----, +	package com.example;, +, +	import java.net.InetAddress;, +	import java.util.List;, +, +	import org.springframework.boot.context.properties.ConfigurationProperties;, +	import org.springframework.boot.context.properties.ConfigurationPropertyDefaultValue;, +, +	@ConfigurationProperties("acme"), +	public class AcmeProperties {, +, +		private final boolean enabled;, +, +		private final InetAddress remoteAddress;, +, +		private final Security security;, +, +		public AcmeProperties(boolean enabled, InetAddress remoteAddress, Security security) {, +			this.enabled = enabled;, +			this.remoteAddress = remoteAddress;, +			this.security = security;, +		}, +, +		public boolean isEnabled() { ... }, +, +		public InetAddress getRemoteAddress() { ... }, +, +		public Security getSecurity() { ... }, +, +		public static class Security {, +, +			private final String username;, +, +			private final String password;, +, +			private final List<String> roles;, +, +			public Security(String username, String password,, +					@ConfigurationPropertyDefaultValue("USER") List<String> roles) {, +				this.username = username;, +				this.password = password;, +				this.roles = roles;, +			}, +, +			public String getUsername() { ... }, +, +			public String getPassword() { ... }, +, +			public List<String> getRoles() { ... }, +, +		}, +, +	}, +----, +, +In this setup one, and only one constructor must be defined with the list of properties, +that you wish to bind and not other properties than the ones in the constructor are bound., +, +Default values can be specified using `@ConfigurationPropertyDefaultValue` and the same, +conversion service will be applied to coerce the `String` value to the target type of a, +missing property., +, +, +, +[[boot-features-external-config-enabling]], +==== Enabling `@ConfigurationProperties`-annotated types, +Spring Boot provides an infrastructure to bind such types and register them as beans, +automatically. Any `@Configuration` class can specify the list of types to process as, +shown in the following example:, +The bean name in the examples above is `acme-com.example.AcmeProperties`., +We recommend that `@ConfigurationProperties` only deal with the environment and, in, +particular, does not inject other beans from the context. In particular, it is not, +possible to inject other beans using the constructor as this would trigger the constructor, +binder that only deals with the environment., +, +For corner cases, setter injection can be used or any of the `*Aware` interfaces provided]