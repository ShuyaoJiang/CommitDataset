[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.core.convert.ConverterNotFoundException;, +				Object converted = convertIfFound(name, source, resolvedTarget);, +				if (converted != null) {, +					return converted;, +				}, +	private Object convertIfFound(ConfigurationPropertyName name, ConfigurationPropertySource source, Bindable<?> target) {, +		ConfigurationProperty configurationProperty = source.getConfigurationProperty(name);, +		if (configurationProperty != null) {, +			try {, +				return ResolvableTypeDescriptor.forType(target.getType()), +						.convert(getContext().getConversionService(), configurationProperty.getValue());, +			}, +			catch (ConverterNotFoundException ex) {, +, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +import org.springframework.core.convert.ConverterNotFoundException;, +				Object converted = convertIfFound(name, source, resolvedTarget);, +				if (converted != null) {, +					return converted;, +				}, +	private Object convertIfFound(ConfigurationPropertyName name, ConfigurationPropertySource source, Bindable<?> target) {, +		ConfigurationProperty configurationProperty = source.getConfigurationProperty(name);, +		if (configurationProperty != null) {, +			try {, +				return ResolvableTypeDescriptor.forType(target.getType()), +						.convert(getContext().getConversionService(), configurationProperty.getValue());, +			}, +			catch (ConverterNotFoundException ex) {, +, +			}, +		}, +		return null;, +	}, +, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/MapBinderTests.java, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.util.StringUtils;, +	@Test, +	public void bindToMapWithCustomConverter() {, +		DefaultConversionService conversionService = new DefaultConversionService();, +		conversionService.addConverter(new MapConverter());, +		Binder binder = new Binder(this.sources, null, conversionService);, +, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo", "a,b");, +		this.sources.add(source);, +		Map<String, String> map = binder.bind("foo", STRING_STRING_MAP).get();, +		assertThat(map.get("a")).isNotNull();, +		assertThat(map.get("b")).isNotNull();, +	}, +, +	@Test, +	public void bindToMapWithNoConverterForValue() {, +		MockConfigurationPropertySource source = new MockConfigurationPropertySource();, +		source.put("foo", "a,b");, +		this.sources.add(source);, +		BindResult<Map<String, String>> result = this.binder.bind("foo", STRING_STRING_MAP);, +		assertThat(result.isBound()).isFalse();, +	}, +, +	static class MapConverter implements Converter<String, Map<String, String>> {, +		@Override, +		public Map<String, String> convert(String s) {, +			Map<String, String> map = new HashMap<>();, +			StringUtils.commaDelimitedListToSet(s).forEach(k -> map.put(k, ""));, +			return map;, +		}, +	}, +]