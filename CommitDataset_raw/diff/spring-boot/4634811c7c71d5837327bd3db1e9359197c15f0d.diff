[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfigurationTests.java, +			RestTemplateBuilder builder = context.getBean(RestTemplateBuilder.class);, +			validateRestTemplate(builder, registry);, +			RestTemplateBuilder customBuilder = new RestTemplateBuilder(), +					.customizers(context.getBean(MetricsRestTemplateCustomizer.class));, +			validateRestTemplate(customBuilder, registry);, +					assertThat(this.out.toString()), +							.doesNotContain("Are you using 'uriVariables'?");, +	private void validateRestTemplate(RestTemplateBuilder builder,, +			MeterRegistry registry) {, +		RestTemplate restTemplate = mockRestTemplate(builder);, +		assertThat(restTemplate, +				.getForEntity("/projects/{project}", Void.class, "spring-boot"), +				.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(registry.get("http.client.requests").tags("uri", "/projects/{project}"), +				.meter()).isNotNull();, +	}, +, +	private RestTemplate mockRestTemplate(RestTemplateBuilder builder) {, +		RestTemplate restTemplate = builder.build();, +		MockRestServiceServer server = MockRestServiceServer.createServer(restTemplate);, +		server.expect(requestTo("/projects/spring-boot")), +				.andRespond(withStatus(HttpStatus.OK));, +		return restTemplate;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/RestTemplateMetricsConfigurationTests.java, +			RestTemplateBuilder builder = context.getBean(RestTemplateBuilder.class);, +			validateRestTemplate(builder, registry);, +			RestTemplateBuilder customBuilder = new RestTemplateBuilder(), +					.customizers(context.getBean(MetricsRestTemplateCustomizer.class));, +			validateRestTemplate(customBuilder, registry);, +					assertThat(this.out.toString()), +							.doesNotContain("Are you using 'uriVariables'?");, +	private void validateRestTemplate(RestTemplateBuilder builder,, +			MeterRegistry registry) {, +		RestTemplate restTemplate = mockRestTemplate(builder);, +		assertThat(restTemplate, +				.getForEntity("/projects/{project}", Void.class, "spring-boot"), +				.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(registry.get("http.client.requests").tags("uri", "/projects/{project}"), +				.meter()).isNotNull();, +	}, +, +	private RestTemplate mockRestTemplate(RestTemplateBuilder builder) {, +		RestTemplate restTemplate = builder.build();, +		MockRestServiceServer server = MockRestServiceServer.createServer(restTemplate);, +		server.expect(requestTo("/projects/spring-boot")), +				.andRespond(withStatus(HttpStatus.OK));, +		return restTemplate;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/web/client/WebClientMetricsConfigurationTests.java, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, + * @author Stephane Nicoll, +	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner(), +			WebClient.Builder builder = context.getBean(WebClient.Builder.class);, +			validateWebClient(builder, registry);, +				.withPropertyValues("management.metrics.web.client.max-uri-tags=2"), +					MeterRegistry registry = getInitializedMeterRegistry(context);, +					assertThat(registry.get("http.client.requests").meters()).hasSize(2);, +	@Test, +	public void shouldNotDenyNorLogIfMaxUrisIsNotReached() {, +		this.contextRunner, +				.withPropertyValues("management.metrics.web.client.max-uri-tags=5"), +				.run((context) -> {, +					MeterRegistry registry = getInitializedMeterRegistry(context);, +					assertThat(registry.get("http.client.requests").meters()).hasSize(3);, +					assertThat(this.out.toString()).doesNotContain(, +							"Reached the maximum number of URI tags for 'http.client.requests'.");, +					assertThat(this.out.toString()), +							.doesNotContain("Are you using 'uriVariables'?");, +				});, +	}, +, +	private MeterRegistry getInitializedMeterRegistry(, +			AssertableApplicationContext context) {, +		WebClient webClient = mockWebClient(context.getBean(WebClient.Builder.class));, +		MeterRegistry registry = context.getBean(MeterRegistry.class);, +		for (int i = 0; i < 3; i++) {, +			webClient.get().uri("http://example.org/projects/" + i).exchange().block();, +		}, +		return registry;, +	}, +, +	private void validateWebClient(WebClient.Builder builder, MeterRegistry registry) {, +		WebClient webClient = mockWebClient(builder);, +		assertThat(registry.find("http.client.requests").meter()).isNull();, +		webClient.get().uri("http://example.org/projects/{project}", "spring-boot"), +				.exchange().block();, +		assertThat(registry.find("http.client.requests"), +				.tags("uri", "/projects/{project}").meter()).isNotNull();, +	}, +, +	private WebClient mockWebClient(WebClient.Builder builder) {, +		ClientHttpConnector connector = mock(ClientHttpConnector.class);, +		given(connector.connect(any(), any(), any())), +				.willReturn(Mono.just(new MockClientHttpResponse(HttpStatus.OK)));, +		return builder.clientConnector(connector).build();, +	}, +, +	static class CustomTagsProviderConfig {]