[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/jetty/JettyCustomizer.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.web.embedded.jetty;, +, +import java.time.Duration;, +, +import org.eclipse.jetty.server.AbstractConnector;, +import org.eclipse.jetty.server.ConnectionFactory;, +import org.eclipse.jetty.server.Handler;, +import org.eclipse.jetty.server.HttpConfiguration;, +import org.eclipse.jetty.server.NCSARequestLog;, +import org.eclipse.jetty.server.Server;, +import org.eclipse.jetty.server.handler.ContextHandler;, +import org.eclipse.jetty.server.handler.HandlerCollection;, +import org.eclipse.jetty.server.handler.HandlerWrapper;, +, +import org.springframework.boot.autoconfigure.web.ServerProperties;, +import org.springframework.boot.cloud.CloudPlatform;, +import org.springframework.boot.web.embedded.jetty.ConfigurableJettyWebServerFactory;, +import org.springframework.boot.web.embedded.jetty.JettyServerCustomizer;, +import org.springframework.core.env.Environment;, +, +/**, + * Customization for Jetty-specific features common, + * for both Servlet and Reactive servers., + *, + * @author Brian Clozel, + * @since 2.0.0, + */, +public final class JettyCustomizer {, +, +	private JettyCustomizer() {, +	}, +, +	public static void customizeJetty(ServerProperties serverProperties,, +			Environment environment, ConfigurableJettyWebServerFactory factory) {, +		ServerProperties.Jetty jettyProperties = serverProperties.getJetty();, +		factory.setUseForwardHeaders(, +				getOrDeduceUseForwardHeaders(serverProperties, environment));, +		if (jettyProperties.getAcceptors() != null) {, +			factory.setAcceptors(jettyProperties.getAcceptors());, +		}, +		if (jettyProperties.getSelectors() != null) {, +			factory.setSelectors(jettyProperties.getSelectors());, +		}, +		if (serverProperties.getMaxHttpHeaderSize() > 0) {, +			customizeMaxHttpHeaderSize(factory,, +					serverProperties.getMaxHttpHeaderSize());, +		}, +		if (jettyProperties.getMaxHttpPostSize() > 0) {, +			customizeMaxHttpPostSize(factory, jettyProperties.getMaxHttpPostSize());, +		}, +, +		if (serverProperties.getConnectionTimeout() != null) {, +			customizeConnectionTimeout(factory,, +					serverProperties.getConnectionTimeout());, +		}, +		if (jettyProperties.getAccesslog().isEnabled()) {, +			customizeAccessLog(factory, jettyProperties.getAccesslog());, +		}, +	}, +, +	private static boolean getOrDeduceUseForwardHeaders(ServerProperties serverProperties,, +			Environment environment) {, +		if (serverProperties.isUseForwardHeaders() != null) {, +			return serverProperties.isUseForwardHeaders();, +		}, +		CloudPlatform platform = CloudPlatform.getActive(environment);, +		return platform != null && platform.isUsingForwardHeaders();, +	}, +, +	private static void customizeConnectionTimeout(, +			ConfigurableJettyWebServerFactory factory, Duration connectionTimeout) {, +		factory.addServerCustomizers((server) -> {, +			for (org.eclipse.jetty.server.Connector connector : server, +					.getConnectors()) {, +				if (connector instanceof AbstractConnector) {, +					((AbstractConnector) connector), +							.setIdleTimeout(connectionTimeout.toMillis());, +				}, +			}, +		});, +	}, +, +	private static void customizeMaxHttpHeaderSize(]