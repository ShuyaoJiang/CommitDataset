[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/assertj/ApplicationContextAssert.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringReader;, +import java.io.StringWriter;, +, + * @author Andy Wilkinson, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to have bean named:%n <%s>", name));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to have a single bean of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"not to have any beans of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"not to have any beans of name:%n <%s>", name));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to get beans names with type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to contain bean of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to contain a bean of name:%n <%s>", name));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to contain a bean of name:%n <%s> (%s)", name, type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to get beans of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"));, +	private ContextFailedToStart<C> contextFailedToStartWhenExpecting(, +			String expectationFormat, Object... arguments) {, +		return new ContextFailedToStart<C>(getApplicationContext(), this.startupFailure,, +				expectationFormat, arguments);, +	}, +, +	private static final class ContextFailedToStart<C extends ApplicationContext>, +			extends BasicErrorMessageFactory {, +, +		private ContextFailedToStart(C context, Throwable ex, String expectationFormat,, +				Object... arguments) {, +			super("%nExpecting:%n <%s>%n" + expectationFormat, +					+ ":%nbut context failed to start:%n%s",, +					combineArguments(context.toString(), ex, arguments));, +		}, +, +		private static Object[] combineArguments(String context, Throwable ex,, +				Object[] arguments) {, +			Object[] combinedArguments = new Object[arguments.length + 2];, +			combinedArguments[0] = unquotedString(context);, +			System.arraycopy(arguments, 0, combinedArguments, 1, arguments.length);, +			combinedArguments[combinedArguments.length - 1] = unquotedString(, +					getIndentedStackTraceAsString(ex));, +			return combinedArguments;, +		}, +, +		private static String getIndentedStackTraceAsString(Throwable ex) {, +			String stackTrace = getStackTraceAsString(ex);, +			return indent(stackTrace);, +		}, +, +		private static String getStackTraceAsString(Throwable ex) {, +			StringWriter writer = new StringWriter();, +			PrintWriter printer = new PrintWriter(writer);, +			ex.printStackTrace(printer);, +			return writer.toString();, +		}, +, +		private static String indent(String input) {, +			BufferedReader reader = new BufferedReader(new StringReader(input));, +			StringWriter writer = new StringWriter();, +			PrintWriter printer = new PrintWriter(writer);, +			try {, +				String line;, +				while ((line = reader.readLine()) != null) {, +					printer.print(" ");, +					printer.println(line);, +				}, +				return writer.toString();, +			}, +			catch (IOException ex) {, +				return input;, +			}, +		}, +, +	}, +, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/assertj/ApplicationContextAssert.java, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringReader;, +import java.io.StringWriter;, +, + * @author Andy Wilkinson, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to have bean named:%n <%s>", name));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"to have a single bean of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"not to have any beans of type:%n <%s>", type));, +			throwAssertionError(contextFailedToStartWhenExpecting(, +					"not to have any beans of name:%n <%s>", name));]