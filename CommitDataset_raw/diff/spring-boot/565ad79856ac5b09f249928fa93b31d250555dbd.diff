[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfigurationTests.java, + * Tests for {@link EndpointWebMvcHypermediaManagementContextConfiguration}., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfigurationTests.java, + * Tests for {@link EndpointWebMvcHypermediaManagementContextConfiguration}., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken user = createAuthenticationToken(, +			"ROLE_USER");, +	private UsernamePasswordAuthenticationToken admin = createAuthenticationToken(, +			"ROLE_ADMIN");, +	private UsernamePasswordAuthenticationToken hero = createAuthenticationToken(, +			"ROLE_HERO");, +	private UsernamePasswordAuthenticationToken createAuthenticationToken(, +			String authority) {, +		return new UsernamePasswordAuthenticationToken("user", "password",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfigurationTests.java, + * Tests for {@link EndpointWebMvcHypermediaManagementContextConfiguration}., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken user = createAuthenticationToken(, +			"ROLE_USER");, +	private UsernamePasswordAuthenticationToken admin = createAuthenticationToken(, +			"ROLE_ADMIN");, +	private UsernamePasswordAuthenticationToken hero = createAuthenticationToken(, +			"ROLE_HERO");, +	private UsernamePasswordAuthenticationToken createAuthenticationToken(, +			String authority) {, +		return new UsernamePasswordAuthenticationToken("user", "password",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/rest/SpringBootRepositoryRestConfigurer.java, + * A {@code RepositoryRestConfigurer} that applies that applies configuration items from, + * the {@code spring.data.rest} namespace to Spring Data REST. Also, if a, + * {@link Jackson2ObjectMapperBuilder} is available, it is used to configure Spring Data, + * REST's {@link ObjectMapper ObjectMappers}., +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfigurationTests.java, + * Tests for {@link EndpointWebMvcHypermediaManagementContextConfiguration}., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken user = createAuthenticationToken(, +			"ROLE_USER");, +	private UsernamePasswordAuthenticationToken admin = createAuthenticationToken(, +			"ROLE_ADMIN");, +	private UsernamePasswordAuthenticationToken hero = createAuthenticationToken(, +			"ROLE_HERO");, +	private UsernamePasswordAuthenticationToken createAuthenticationToken(, +			String authority) {, +		return new UsernamePasswordAuthenticationToken("user", "password",, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/rest/SpringBootRepositoryRestConfigurer.java, + * A {@code RepositoryRestConfigurer} that applies that applies configuration items from, + * the {@code spring.data.rest} namespace to Spring Data REST. Also, if a, + * {@link Jackson2ObjectMapperBuilder} is available, it is used to configure Spring Data, + * REST's {@link ObjectMapper ObjectMappers}., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java, +		static class ExplicitType {, +		}, +		static class PooledDataSourceAvailable {, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java, +			List<String> roles = Arrays.asList(StringUtils, +					.trimArrayElements(StringUtils.commaDelimitedListToStringArray(, +							this.roleResolver.getProperty("roles", "ROLE_ADMIN"))));, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfigurationTests.java, + * Tests for {@link EndpointWebMvcHypermediaManagementContextConfiguration}., +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java, +	private UsernamePasswordAuthenticationToken user = createAuthenticationToken(, +			"ROLE_USER");, +	private UsernamePasswordAuthenticationToken admin = createAuthenticationToken(, +			"ROLE_ADMIN");, +	private UsernamePasswordAuthenticationToken hero = createAuthenticationToken(, +			"ROLE_HERO");]