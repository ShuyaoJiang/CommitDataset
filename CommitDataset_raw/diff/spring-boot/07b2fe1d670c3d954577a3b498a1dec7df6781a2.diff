[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		StringBuffer result = new StringBuffer();, +		for (char c : name.toCharArray()) {, +			result.append(Character.isUpperCase(c) && result.length() > 0, +					&& result.charAt(result.length() - 1) != '-', +							? "-" + Character.toLowerCase(c) : c);, +		}, +		return new RelaxedNames(result.toString());, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		StringBuffer result = new StringBuffer();, +		for (char c : name.toCharArray()) {, +			result.append(Character.isUpperCase(c) && result.length() > 0, +					&& result.charAt(result.length() - 1) != '-', +							? "-" + Character.toLowerCase(c) : c);, +		}, +		return new RelaxedNames(result.toString());, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +	@Test, +	public void testMixedWithUpperCaseWord() throws Exception {, +		// gh-6803, +		VanillaTarget target = new VanillaTarget();, +		RelaxedDataBinder binder = getBinder(target, "test");, +		MutablePropertyValues values = new MutablePropertyValues();, +		values.add("test.mixed-u-p-p-e-r", "foo");, +		binder.bind(values);, +		assertThat(target.getMixedUPPER()).isEqualTo("foo");, +	}, +, +		private String mixedUPPER;, +, +		public String getMixedUPPER() {, +			return this.mixedUPPER;, +		}, +, +		public void setMixedUPPER(String mixedUPPER) {, +			this.mixedUPPER = mixedUPPER;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		StringBuffer result = new StringBuffer();, +		for (char c : name.toCharArray()) {, +			result.append(Character.isUpperCase(c) && result.length() > 0, +					&& result.charAt(result.length() - 1) != '-', +							? "-" + Character.toLowerCase(c) : c);, +		}, +		return new RelaxedNames(result.toString());, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java, +	@Test, +	public void testMixedWithUpperCaseWord() throws Exception {, +		// gh-6803, +		VanillaTarget target = new VanillaTarget();, +		RelaxedDataBinder binder = getBinder(target, "test");, +		MutablePropertyValues values = new MutablePropertyValues();, +		values.add("test.mixed-u-p-p-e-r", "foo");, +		binder.bind(values);, +		assertThat(target.getMixedUPPER()).isEqualTo("foo");, +	}, +, +		private String mixedUPPER;, +, +		public String getMixedUPPER() {, +			return this.mixedUPPER;, +		}, +, +		public void setMixedUPPER(String mixedUPPER) {, +			this.mixedUPPER = mixedUPPER;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedNamesTests.java, +	@Test, +	public void forCamelCase() throws Exception {, +		Iterator<String> iterator = RelaxedNames.forCamelCase("camelCase").iterator();, +		assertThat(iterator.next()).isEqualTo("camel-case");, +		assertThat(iterator.next()).isEqualTo("camel_case");, +		assertThat(iterator.next()).isEqualTo("camelCase");, +		assertThat(iterator.next()).isEqualTo("camelcase");, +		assertThat(iterator.next()).isEqualTo("CAMEL-CASE");, +		assertThat(iterator.next()).isEqualTo("CAMEL_CASE");, +		assertThat(iterator.next()).isEqualTo("CAMELCASE");, +	}, +, +	@Test, +	public void forCamelCaseWithCaps() throws Exception {, +		Iterator<String> iterator = RelaxedNames.forCamelCase("camelCASE").iterator();, +		assertThat(iterator.next()).isEqualTo("camel-c-a-s-e");, +		assertThat(iterator.next()).isEqualTo("camel_c_a_s_e");, +		assertThat(iterator.next()).isEqualTo("camelCASE");, +		assertThat(iterator.next()).isEqualTo("camelcase");, +		assertThat(iterator.next()).isEqualTo("CAMEL-C-A-S-E");, +		assertThat(iterator.next()).isEqualTo("CAMEL_C_A_S_E");, +		assertThat(iterator.next()).isEqualTo("CAMELCASE");, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java, +		StringBuffer result = new StringBuffer();, +		for (char c : name.toCharArray()) {, +			result.append(Character.isUpperCase(c) && result.length() > 0, +					&& result.charAt(result.length() - 1) != '-', +							? "-" + Character.toLowerCase(c) : c);, +		}]