[+++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.StatusEndpoint;, +	@Test, +	public void runShouldHaveStatusEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(StatusEndpoint.class));, +	}, +, +	@Test, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(), +			throws Exception {, +		this.contextRunner.withPropertyValues("endpoints.status.enabled:false").run(, +				(context) -> assertThat(context).doesNotHaveBean(StatusEndpoint.class));, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.StatusEndpoint;, +	@Test, +	public void runShouldHaveStatusEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(StatusEndpoint.class));, +	}, +, +	@Test, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(), +			throws Exception {, +		this.contextRunner.withPropertyValues("endpoints.status.enabled:false").run(, +				(context) -> assertThat(context).doesNotHaveBean(StatusEndpoint.class));, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/info/InfoEndpointAutoConfigurationTests.java, +	public void runShouldHaveEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(InfoEndpoint.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.StatusEndpoint;, +	@Test, +	public void runShouldHaveStatusEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(StatusEndpoint.class));, +	}, +, +	@Test, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(), +			throws Exception {, +		this.contextRunner.withPropertyValues("endpoints.status.enabled:false").run(, +				(context) -> assertThat(context).doesNotHaveBean(StatusEndpoint.class));, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/info/InfoEndpointAutoConfigurationTests.java, +	public void runShouldHaveEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(InfoEndpoint.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +							"info", "mappings", "metrics", "status", "threaddump",, +							"trace" },, +									"health", "mappings", "metrics", "shutdown",, +									"mappings", "metrics", "shutdown",, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.StatusEndpoint;, +	@Test, +	public void runShouldHaveStatusEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(StatusEndpoint.class));, +	}, +, +	@Test, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean(), +			throws Exception {, +		this.contextRunner.withPropertyValues("endpoints.status.enabled:false").run(, +				(context) -> assertThat(context).doesNotHaveBean(StatusEndpoint.class));, +	}, +, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/info/InfoEndpointAutoConfigurationTests.java, +	public void runShouldHaveEndpointBeanEvenIfDefaultIsDisabled() {, +		this.contextRunner.withPropertyValues("endpoints.default.enabled:false"), +				.run((context) -> assertThat(context).hasSingleBean(InfoEndpoint.class));, +	}, +, +	@Test, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JmxEndpointIntegrationTests.java, +							"info", "mappings", "metrics", "status", "threaddump",, +							"trace" },, +									"health", "mappings", "metrics", "shutdown",, +									"mappings", "metrics", "shutdown",, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebMvcEndpointExposureIntegrationTests.java, +			assertThat(isExposed(mvc, HttpMethod.GET, "info")).isTrue();, +			assertThat(isExposed(mvc, HttpMethod.GET, "status")).isTrue();, +			assertThat(isExposed(mvc, HttpMethod.GET, "status")).isTrue();, +			assertThat(isExposed(mvc, HttpMethod.GET, "info")).isTrue();, +			assertThat(isExposed(mvc, HttpMethod.GET, "status")).isTrue();, +++ b/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +import org.springframework.boot.actuate.health.StatusEndpoint;, +	@Test]