[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java, +@Import({ CouchbaseReactiveHealthIndicatorConfiguration.class,, +		CouchbaseHealthIndicatorConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java, +@Import({ CouchbaseReactiveHealthIndicatorConfiguration.class,, +		CouchbaseHealthIndicatorConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorConfiguration.java, + * @author Eddú Meléndez, + * @author Stephane Nicoll, + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java, +@Import({ CouchbaseReactiveHealthIndicatorConfiguration.class,, +		CouchbaseHealthIndicatorConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorConfiguration.java, + * @author Eddú Meléndez, + * @author Stephane Nicoll, + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorConfiguration.java, +import reactor.core.publisher.Flux;, +, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * Configuration for {@link CouchbaseReactiveHealthIndicator}., + * @author Stephane Nicoll, +@ConditionalOnClass({ RxJavaCouchbaseOperations.class, Flux.class }), +@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class), +	private final CouchbaseHealthIndicatorProperties properties;, +, +			Map<String, RxJavaCouchbaseOperations> couchbaseOperations,, +			CouchbaseHealthIndicatorProperties properties) {, +		this.properties = properties;, +	@Override, +	protected CouchbaseReactiveHealthIndicator createHealthIndicator(, +			RxJavaCouchbaseOperations couchbaseOperations) {, +		return new CouchbaseReactiveHealthIndicator(couchbaseOperations,, +				this.properties.getTimeout());, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java, +@Import({ CouchbaseReactiveHealthIndicatorConfiguration.class,, +		CouchbaseHealthIndicatorConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorConfiguration.java, + * @author Eddú Meléndez, + * @author Stephane Nicoll, + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorConfiguration.java, +import reactor.core.publisher.Flux;, +, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * Configuration for {@link CouchbaseReactiveHealthIndicator}., + * @author Stephane Nicoll, +@ConditionalOnClass({ RxJavaCouchbaseOperations.class, Flux.class }), +@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class), +	private final CouchbaseHealthIndicatorProperties properties;, +, +			Map<String, RxJavaCouchbaseOperations> couchbaseOperations,, +			CouchbaseHealthIndicatorProperties properties) {, +		this.properties = properties;, +	@Override, +	protected CouchbaseReactiveHealthIndicator createHealthIndicator(, +			RxJavaCouchbaseOperations couchbaseOperations) {, +		return new CouchbaseReactiveHealthIndicator(couchbaseOperations,, +				this.properties.getTimeout());, +	}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorAutoConfiguration.java, +@Import({ CouchbaseReactiveHealthIndicatorConfiguration.class,, +		CouchbaseHealthIndicatorConfiguration.class }), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorConfiguration.java, + * @author Eddú Meléndez, + * @author Stephane Nicoll, + * @since 2.0.0, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorConfiguration.java, +import reactor.core.publisher.Flux;, +, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * Configuration for {@link CouchbaseReactiveHealthIndicator}., + * @author Stephane Nicoll, +@ConditionalOnClass({ RxJavaCouchbaseOperations.class, Flux.class }), +@EnableConfigurationProperties(CouchbaseHealthIndicatorProperties.class), +	private final CouchbaseHealthIndicatorProperties properties;, +, +			Map<String, RxJavaCouchbaseOperations> couchbaseOperations,, +			CouchbaseHealthIndicatorProperties properties) {, +		this.properties = properties;, +	@Override, +	protected CouchbaseReactiveHealthIndicator createHealthIndicator(, +			RxJavaCouchbaseOperations couchbaseOperations) {, +		return new CouchbaseReactiveHealthIndicator(couchbaseOperations,, +				this.properties.getTimeout());, +	}, +, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseHealthIndicatorConfigurationTests.java, +import org.springframework.test.util.ReflectionTestUtils;, + * @author Phillip Webb, + * @author Stephane Nicoll, +	public void runWithCustomTimeoutShouldCreateIndicator() {, +		this.contextRunner.withPropertyValues("management.health.couchbase.timeout=2s"), +				.run((context) -> {]