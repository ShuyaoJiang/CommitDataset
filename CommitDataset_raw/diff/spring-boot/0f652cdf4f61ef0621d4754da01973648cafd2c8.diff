[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	@ConditionalOnSingleCandidate(DataSource.class), +		private final DataSource dataSource;, +		Hikari(DataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {, +			HikariDataSource hikariDataSource = unwrapHikariDataSource();, +			if (hikariDataSource != null && hikariDataSource.isRegisterMbeans()) {, +				this.mBeanExporter.ifUnique((exporter) ->, +						exporter.addExcludedBean("dataSource"));, +			}, +		}, +, +		private HikariDataSource unwrapHikariDataSource() {, +			try {, +				return this.dataSource.unwrap(HikariDataSource.class);, +			}, +			catch (SQLException ex) {, +				return null;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfiguration.java, + * Copyright 2012-2018 the original author or authors., +	@ConditionalOnSingleCandidate(DataSource.class), +		private final DataSource dataSource;, +		Hikari(DataSource dataSource, ObjectProvider<MBeanExporter> mBeanExporter) {, +			HikariDataSource hikariDataSource = unwrapHikariDataSource();, +			if (hikariDataSource != null && hikariDataSource.isRegisterMbeans()) {, +				this.mBeanExporter.ifUnique((exporter) ->, +						exporter.addExcludedBean("dataSource"));, +			}, +		}, +, +		private HikariDataSource unwrapHikariDataSource() {, +			try {, +				return this.dataSource.unwrap(HikariDataSource.class);, +			}, +			catch (SQLException ex) {, +				return null;, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceJmxConfigurationTests.java, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +	@Test, +	public void hikariProxiedCanUseRegisterMBeans() {, +		String poolName = UUID.randomUUID().toString();, +		this.contextRunner.withUserConfiguration(DataSourceProxyConfiguration.class), +				.withPropertyValues(, +						"spring.datasource.type=" + HikariDataSource.class.getName(),, +						"spring.datasource.name=" + poolName,, +						"spring.datasource.hikari.register-mbeans=true"), +				.run((context) -> {, +					assertThat(context).hasSingleBean(javax.sql.DataSource.class);, +					HikariDataSource hikariDataSource = context.getBean(, +							javax.sql.DataSource.class).unwrap(HikariDataSource.class);, +					assertThat(hikariDataSource.isRegisterMbeans()).isTrue();, +					MBeanServer mBeanServer = context.getBean(MBeanServer.class);, +					validateHikariMBeansRegistration(mBeanServer, poolName, true);, +				});, +	}, +, +	@Configuration, +	static class DataSourceProxyConfiguration {, +, +		@Bean, +		public static DataSourceBeanPostProcessor dataSourceBeanPostProcessor() {, +			return new DataSourceBeanPostProcessor();, +		}, +, +	}, +, +, +	private static class DataSourceBeanPostProcessor implements BeanPostProcessor {, +, +		@Override, +		public Object postProcessAfterInitialization(Object bean, String beanName) {, +			if (bean instanceof javax.sql.DataSource) {, +				return wrap((javax.sql.DataSource) bean);, +			}, +			return bean;, +		}, +, +		private static javax.sql.DataSource wrap(javax.sql.DataSource dataSource) {, +			return (javax.sql.DataSource) new ProxyFactory(dataSource).getProxy();, +		}, +, +	}, +]