[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicator.java, +import java.util.Map;, +, +import org.springframework.boot.json.JsonParser;, +import org.springframework.boot.json.JsonParserFactory;, +	private final JsonParser jsonParser = JsonParserFactory.getJsonParser();, +			builder.withDetail("statusCode", healthResult.getResponseCode());, +			Map<String, Object> response = this.jsonParser, +					.parseMap(healthResult.getJsonString());, +			String status = (String) response.get("status");, +			if (status.equals(io.searchbox.cluster.Health.Status.RED.getKey())) {, +			builder.withDetails(response);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicator.java, +import java.util.Map;, +, +import org.springframework.boot.json.JsonParser;, +import org.springframework.boot.json.JsonParserFactory;, +	private final JsonParser jsonParser = JsonParserFactory.getJsonParser();, +			builder.withDetail("statusCode", healthResult.getResponseCode());, +			Map<String, Object> response = this.jsonParser, +					.parseMap(healthResult.getJsonString());, +			String status = (String) response.get("status");, +			if (status.equals(io.searchbox.cluster.Health.Status.RED.getKey())) {, +			builder.withDetails(response);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicatorTests.java, +import java.util.Map;, +import static org.assertj.core.api.Assertions.entry;, +		assertHealthDetailsWithStatus(health.getDetails(), "green");, +	}, +, +	@Test, +	public void elasticsearchWithYellowStatusIsUp() throws IOException {, +		given(this.jestClient.execute(any(Action.class))), +				.willReturn(createJestResult(200, true, "yellow"));, +		Health health = this.healthIndicator.health();, +		assertThat(health.getStatus()).isEqualTo(Status.UP);, +		assertHealthDetailsWithStatus(health.getDetails(), "yellow");, +		assertThat(health.getDetails()).contains(entry("statusCode", 500));, +		assertHealthDetailsWithStatus(health.getDetails(), "red");, +	}, +, +	private void assertHealthDetailsWithStatus(Map<String, Object> details,, +			String status) {, +		assertThat(details).contains(entry("cluster_name", "elasticsearch"),, +				entry("status", status), entry("timed_out", false),, +				entry("number_of_nodes", 1), entry("number_of_data_nodes", 1),, +				entry("active_primary_shards", 0), entry("active_shards", 0),, +				entry("relocating_shards", 0), entry("initializing_shards", 0),, +				entry("unassigned_shards", 0), entry("delayed_unassigned_shards", 0),, +				entry("number_of_pending_tasks", 0),, +				entry("number_of_in_flight_fetch", 0),, +				entry("task_max_waiting_in_queue_millis", 0),, +				entry("active_shards_percent_as_number", 100.0));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicator.java, +import java.util.Map;, +, +import org.springframework.boot.json.JsonParser;, +import org.springframework.boot.json.JsonParserFactory;, +	private final JsonParser jsonParser = JsonParserFactory.getJsonParser();, +			builder.withDetail("statusCode", healthResult.getResponseCode());, +			Map<String, Object> response = this.jsonParser, +					.parseMap(healthResult.getJsonString());, +			String status = (String) response.get("status");, +			if (status.equals(io.searchbox.cluster.Health.Status.RED.getKey())) {, +			builder.withDetails(response);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchJestHealthIndicatorTests.java, +import java.util.Map;, +import static org.assertj.core.api.Assertions.entry;, +		assertHealthDetailsWithStatus(health.getDetails(), "green");, +	}, +, +	@Test, +	public void elasticsearchWithYellowStatusIsUp() throws IOException {, +		given(this.jestClient.execute(any(Action.class))), +				.willReturn(createJestResult(200, true, "yellow"));, +		Health health = this.healthIndicator.health();, +		assertThat(health.getStatus()).isEqualTo(Status.UP);, +		assertHealthDetailsWithStatus(health.getDetails(), "yellow");, +		assertThat(health.getDetails()).contains(entry("statusCode", 500));, +		assertHealthDetailsWithStatus(health.getDetails(), "red");, +	}, +, +	private void assertHealthDetailsWithStatus(Map<String, Object> details,, +			String status) {, +		assertThat(details).contains(entry("cluster_name", "elasticsearch"),, +				entry("status", status), entry("timed_out", false),, +				entry("number_of_nodes", 1), entry("number_of_data_nodes", 1),, +				entry("active_primary_shards", 0), entry("active_shards", 0),, +				entry("relocating_shards", 0), entry("initializing_shards", 0),, +				entry("unassigned_shards", 0), entry("delayed_unassigned_shards", 0),, +				entry("number_of_pending_tasks", 0),, +				entry("number_of_in_flight_fetch", 0),, +				entry("task_max_waiting_in_queue_millis", 0),, +				entry("active_shards_percent_as_number", 100.0));, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicatorTest.java, +import java.util.Map;, +		assertHealthDetailsWithStatus(health.getDetails(), "green");, +		assertHealthDetailsWithStatus(health.getDetails(), "yellow");, +		assertHealthDetailsWithStatus(health.getDetails(), "red");, +	}]