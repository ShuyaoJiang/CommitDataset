[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +			if (this.properties.getPassword() != null) {, +				config.setPassword(RedisPassword.of(this.properties.getPassword()));, +			}, +		if (this.properties.getPassword() != null) {, +			config.setPassword(RedisPassword.of(this.properties.getPassword()));, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +			if (this.properties.getPassword() != null) {, +				config.setPassword(RedisPassword.of(this.properties.getPassword()));, +			}, +		if (this.properties.getPassword() != null) {, +			config.setPassword(RedisPassword.of(this.properties.getPassword()));, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java, +	public void testRedisConfigurationWithSentinelAndPassword() {, +		List<String> sentinels = Arrays.asList("127.0.0.1:26379", "127.0.0.1:26380");, +		load("spring.redis.password=password", "spring.redis.sentinel.master:mymaster",, +				"spring.redis.sentinel.nodes:" + StringUtils, +						.collectionToCommaDelimitedString(sentinels));, +		assertThat(this.context.getBean(JedisConnectionFactory.class), +				.getPassword()).isEqualTo("password");, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisConnectionConfiguration.java, +			if (this.properties.getPassword() != null) {, +				config.setPassword(RedisPassword.of(this.properties.getPassword()));, +			}, +		if (this.properties.getPassword() != null) {, +			config.setPassword(RedisPassword.of(this.properties.getPassword()));, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java, +	public void testRedisConfigurationWithSentinelAndPassword() {, +		List<String> sentinels = Arrays.asList("127.0.0.1:26379", "127.0.0.1:26380");, +		load("spring.redis.password=password", "spring.redis.sentinel.master:mymaster",, +				"spring.redis.sentinel.nodes:" + StringUtils, +						.collectionToCommaDelimitedString(sentinels));, +		assertThat(this.context.getBean(JedisConnectionFactory.class), +				.getPassword()).isEqualTo("password");, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java, +	public void testRedisConfigurationWithSentinelAndPassword() throws Exception {, +		List<String> sentinels = Arrays.asList("127.0.0.1:26379", "127.0.0.1:26380");, +		load("spring.redis.password=password", "spring.redis.sentinel.master:mymaster",, +				"spring.redis.sentinel.nodes:", +						+ StringUtils.collectionToCommaDelimitedString(sentinels));, +		assertThat(this.context.getBean(LettuceConnectionFactory.class), +				.getPassword()).isEqualTo("password");, +	}, +, +	@Test, +	@Test, +	public void testRedisConfigurationWithClusterAndPassword() throws Exception {, +		List<String> clusterNodes = Arrays.asList("127.0.0.1:27379", "127.0.0.1:27380");, +		load("spring.redis.password=password",, +				"spring.redis.cluster.nodes[0]:" + clusterNodes.get(0),, +				"spring.redis.cluster.nodes[1]:" + clusterNodes.get(1));, +		assertThat(this.context.getBean(LettuceConnectionFactory.class), +				.getPassword()).isEqualTo("password");, +	}, +]