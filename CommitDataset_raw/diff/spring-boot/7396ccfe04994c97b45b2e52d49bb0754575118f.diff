[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			if (jmxEnabled && jmxEndpointsEnabled) {, +				return ConditionOutcome.match(, +						ConditionMessage.forCondition("JMX Enabled").found("properties"), +								.items("spring.jmx.enabled", "endpoints.jmx.enabled"));, +			}, +			return ConditionOutcome.noMatch(ConditionMessage.forCondition("JMX Enabled"), +					.because("spring.jmx.enabled or endpoints.jmx.enabled is not set"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			if (jmxEnabled && jmxEndpointsEnabled) {, +				return ConditionOutcome.match(, +						ConditionMessage.forCondition("JMX Enabled").found("properties"), +								.items("spring.jmx.enabled", "endpoints.jmx.enabled"));, +			}, +			return ConditionOutcome.noMatch(ConditionMessage.forCondition("JMX Enabled"), +					.because("spring.jmx.enabled or endpoints.jmx.enabled is not set"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Management Server MVC");, +				return ConditionOutcome, +						.noMatch(message.because("non WebApplicationContext"));, +			if (port == ManagementServerPort.SAME) {, +				return ConditionOutcome.match(message.because("port is same"));, +			}, +			return ConditionOutcome.noMatch(message.because("port is not same"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			if (jmxEnabled && jmxEndpointsEnabled) {, +				return ConditionOutcome.match(, +						ConditionMessage.forCondition("JMX Enabled").found("properties"), +								.items("spring.jmx.enabled", "endpoints.jmx.enabled"));, +			}, +			return ConditionOutcome.noMatch(ConditionMessage.forCondition("JMX Enabled"), +					.because("spring.jmx.enabled or endpoints.jmx.enabled is not set"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Management Server MVC");, +				return ConditionOutcome, +						.noMatch(message.because("non WebApplicationContext"));, +			if (port == ManagementServerPort.SAME) {, +				return ConditionOutcome.match(message.because("port is same"));, +			}, +			return ConditionOutcome.noMatch(message.because("port is not same"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Log File");, +				return ConditionOutcome.match(message.found("logging.file").items(config));, +				return ConditionOutcome.match(message.found("logging.path").items(config));, +				return ConditionOutcome.match(, +						message.found("endpoints.logfile.external-file").items(config));, +			return ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			if (jmxEnabled && jmxEndpointsEnabled) {, +				return ConditionOutcome.match(, +						ConditionMessage.forCondition("JMX Enabled").found("properties"), +								.items("spring.jmx.enabled", "endpoints.jmx.enabled"));, +			}, +			return ConditionOutcome.noMatch(ConditionMessage.forCondition("JMX Enabled"), +					.because("spring.jmx.enabled or endpoints.jmx.enabled is not set"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Management Server MVC");, +				return ConditionOutcome, +						.noMatch(message.because("non WebApplicationContext"));, +			if (port == ManagementServerPort.SAME) {, +				return ConditionOutcome.match(message.because("port is same"));, +			}, +			return ConditionOutcome.noMatch(message.because("port is not same"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Log File");, +				return ConditionOutcome.match(message.found("logging.file").items(config));, +				return ConditionOutcome.match(message.found("logging.path").items(config));, +				return ConditionOutcome.match(, +						message.found("endpoints.logfile.external-file").items(config));, +			return ConditionOutcome.noMatch(message.didNotFind("logging file").atAll());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			ConditionMessage.Builder message = ConditionMessage, +					.forCondition("Jolokia");, +			if (isEnabled(context, "endpoints.jolokia.", endpointsEnabled)) {, +				return ConditionOutcome.match(message.because("enabled"));, +			}, +			return ConditionOutcome.noMatch(message.because("not enabled"));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionMessage;, +			if (jmxEnabled && jmxEndpointsEnabled) {, +				return ConditionOutcome.match(, +						ConditionMessage.forCondition("JMX Enabled").found("properties"), +								.items("spring.jmx.enabled", "endpoints.jmx.enabled"));, +			}, +			return ConditionOutcome.noMatch(ConditionMessage.forCondition("JMX Enabled")]