[+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java, +	private static final String WEB_INF_LIB_PREFIX = "WEB-INF/lib/";, +, +			Arrays.asList("spring-boot-starter-tomcat-", "tomcat-embed-core-",, +					"tomcat-embed-el-", "tomcat-embed-logging-juli-"));, +			Arrays.asList("spring-boot-starter-jetty-", "jetty-util-", "jetty-xml-",, +					"javax.servlet-", "jetty-continuation-", "jetty-io-", "jetty-http-",, +					"jetty-server-", "jetty-security-", "jetty-servlet-",, +					"jetty-webapp-", "javax.servlet.jsp-",, +					"org.apache.jasper.glassfish-", "javax.servlet.jsp.jstl-",, +					"org.apache.taglibs.standard.glassfish-", "javax.el-", "com.sun.el-",, +					"org.eclipse.jdt.core-", "jetty-jsp-"));, +		checkWebInfEntriesForServletContainer("tomcat",, +		checkWebInfEntriesForServletContainer("jetty",, +	private void checkWebInfEntriesForServletContainer(String servletContainer,, +			Set<String> expectedLibProvidedEntries) throws IOException {, +, +		checkWebInfLibProvidedEntries(war, expectedLibProvidedEntries);, +, +		checkWebInfLibEntries(war, expectedLibProvidedEntries);, +	}, +, +	private void checkWebInfLibProvidedEntries(JarFile war, Set<String> expectedEntries), +			throws IOException {, +	private void checkWebInfLibEntries(JarFile war, Set<String> entriesOnlyInLibProvided), +			throws IOException {, +		Set<String> entries = getWebInfLibEntries(war);, +, +		List<String> unexpectedLibEntries = new ArrayList<String>();, +		for (String entry : entries) {, +			if (!isExpectedInWebInfLib(entry, entriesOnlyInLibProvided)) {, +				unexpectedLibEntries.add(entry);, +			}, +		}, +, +		assertTrue("Found unexpected entries in WEB-INF/lib: " + unexpectedLibEntries,, +				unexpectedLibEntries.isEmpty());, +	}, +, +	private Set<String> getWebInfLibEntries(JarFile war) throws IOException {, +		Set<String> webInfLibEntries = new HashSet<String>();, +		Enumeration<JarEntry> entries = war.entries();, +		while (entries.hasMoreElements()) {, +			String name = entries.nextElement().getName();, +			if (isWebInfLibEntry(name)) {, +				webInfLibEntries.add(name);, +			}, +		}, +		return webInfLibEntries;, +	}, +, +	private boolean isWebInfLibEntry(String name) {, +		return name.startsWith(WEB_INF_LIB_PREFIX) && !name.equals(WEB_INF_LIB_PREFIX);, +	}, +, +			if (name.startsWith(WEB_INF_LIB_PROVIDED_PREFIX + expected)) {, +, +	private boolean isExpectedInWebInfLib(String name, Set<String> unexpectedEntries) {, +		for (String unexpected : unexpectedEntries) {, +			if (name.startsWith(WEB_INF_LIB_PREFIX + unexpected)) {, +				return false;, +			}, +		}, +		return true;, +	}, +++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java, +	private static final String WEB_INF_LIB_PREFIX = "WEB-INF/lib/";, +, +			Arrays.asList("spring-boot-starter-tomcat-", "tomcat-embed-core-",, +					"tomcat-embed-el-", "tomcat-embed-logging-juli-"));, +			Arrays.asList("spring-boot-starter-jetty-", "jetty-util-", "jetty-xml-",, +					"javax.servlet-", "jetty-continuation-", "jetty-io-", "jetty-http-",, +					"jetty-server-", "jetty-security-", "jetty-servlet-",, +					"jetty-webapp-", "javax.servlet.jsp-",, +					"org.apache.jasper.glassfish-", "javax.servlet.jsp.jstl-",, +					"org.apache.taglibs.standard.glassfish-", "javax.el-", "com.sun.el-",, +					"org.eclipse.jdt.core-", "jetty-jsp-"));, +		checkWebInfEntriesForServletContainer("tomcat",, +		checkWebInfEntriesForServletContainer("jetty",, +	private void checkWebInfEntriesForServletContainer(String servletContainer,, +			Set<String> expectedLibProvidedEntries) throws IOException {, +, +		checkWebInfLibProvidedEntries(war, expectedLibProvidedEntries);, +, +		checkWebInfLibEntries(war, expectedLibProvidedEntries);, +	}, +, +	private void checkWebInfLibProvidedEntries(JarFile war, Set<String> expectedEntries), +			throws IOException {, +	private void checkWebInfLibEntries(JarFile war, Set<String> entriesOnlyInLibProvided), +			throws IOException {, +		Set<String> entries = getWebInfLibEntries(war);, +, +		List<String> unexpectedLibEntries = new ArrayList<String>();, +		for (String entry : entries) {, +			if (!isExpectedInWebInfLib(entry, entriesOnlyInLibProvided)) {, +				unexpectedLibEntries.add(entry);, +			}, +		}, +]