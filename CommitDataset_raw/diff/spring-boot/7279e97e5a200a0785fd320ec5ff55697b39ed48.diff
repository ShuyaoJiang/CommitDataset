[+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.web.context.support.StandardServletEnvironment;, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		if (config instanceof WebMergedContextConfiguration) {, +			environment = new StandardServletEnvironment();, +		}, +		// Ensure @IntegrationTest properties go before external config and after system, +		environment.getPropertySources(), +				.addAfter(, +						StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +						new MapPropertySource("integrationTest",, +								getEnvironmentProperties(config)));, +		application.setEnvironment(environment);, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.web.context.support.StandardServletEnvironment;, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		if (config instanceof WebMergedContextConfiguration) {, +			environment = new StandardServletEnvironment();, +		}, +		// Ensure @IntegrationTest properties go before external config and after system, +		environment.getPropertySources(), +				.addAfter(, +						StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +						new MapPropertySource("integrationTest",, +								getEnvironmentProperties(config)));, +		application.setEnvironment(environment);, +++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationIntegrationTestTests.java, +@IntegrationTest({ "server.port=0", "value=123" }), +	@Value("${value}"), +	private int value = 0;, +, +	@Test, +	public void annotationAttributesOverridePropertiesFile() throws Exception {, +		assertEquals(123, this.value);, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.MapPropertySource;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.web.context.support.StandardServletEnvironment;, +		ConfigurableEnvironment environment = new StandardEnvironment();, +		if (config instanceof WebMergedContextConfiguration) {, +			environment = new StandardServletEnvironment();, +		}, +		// Ensure @IntegrationTest properties go before external config and after system, +		environment.getPropertySources(), +				.addAfter(, +						StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME,, +						new MapPropertySource("integrationTest",, +								getEnvironmentProperties(config)));, +		application.setEnvironment(environment);, +++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationIntegrationTestTests.java, +@IntegrationTest({ "server.port=0", "value=123" }), +	@Value("${value}"), +	private int value = 0;, +, +	@Test, +	public void annotationAttributesOverridePropertiesFile() throws Exception {, +		assertEquals(123, this.value);, +	}, +, +++ b/spring-boot/src/test/resources/application.properties, +value: 1234]