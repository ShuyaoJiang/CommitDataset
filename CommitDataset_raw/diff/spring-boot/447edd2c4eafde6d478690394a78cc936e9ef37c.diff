[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +import io.undertow.util.Headers;, +		predicates.add(new MaxSizePredicate(compression.getMinResponseSize()));, +	/**, +	 * Predicate that returns true if the Content-Size of a request is above a given value, +	 * or is missing., +	 */, +	private static class MaxSizePredicate implements Predicate {, +, +		private final Predicate maxContentSize;, +, +		public MaxSizePredicate(int size) {, +			this.maxContentSize = Predicates.maxContentSize(size);, +		}, +, +		@Override, +		public boolean resolve(HttpServerExchange value) {, +			if (value.getResponseHeaders().contains(Headers.CONTENT_LENGTH)) {, +				return this.maxContentSize.resolve(value);, +			}, +			return true;, +		}, +, +	}, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +import io.undertow.util.Headers;, +		predicates.add(new MaxSizePredicate(compression.getMinResponseSize()));, +	/**, +	 * Predicate that returns true if the Content-Size of a request is above a given value, +	 * or is missing., +	 */, +	private static class MaxSizePredicate implements Predicate {, +, +		private final Predicate maxContentSize;, +, +		public MaxSizePredicate(int size) {, +			this.maxContentSize = Predicates.maxContentSize(size);, +		}, +, +		@Override, +		public boolean resolve(HttpServerExchange value) {, +			if (value.getResponseHeaders().contains(Headers.CONTENT_LENGTH)) {, +				return this.maxContentSize.resolve(value);, +			}, +			return true;, +		}, +, +	}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +				new ServletRegistrationBean(new ExampleServlet(true, false), "/hello"));, +				new ServletRegistrationBean(new ExampleServlet(true, false), "/hello"));, +	public void compressionWithoutContentSizeHeader() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();, +		Compression compression = new Compression();, +		compression.setEnabled(true);, +		factory.setCompression(compression);, +		this.container = factory.getEmbeddedServletContainer(, +				new ServletRegistrationBean(new ExampleServlet(false, true), "/hello"));, +		this.container.start();, +		TestGzipInputStreamFactory inputStreamFactory = new TestGzipInputStreamFactory();, +		Map<String, InputStreamFactory> contentDecoderMap = Collections, +				.singletonMap("gzip", (InputStreamFactory) inputStreamFactory);, +		getResponse(getLocalUrl("/hello"),, +				new HttpComponentsClientHttpRequestFactory(HttpClientBuilder.create(), +						.setContentDecoderRegistry(contentDecoderMap).build()));, +		assertThat(inputStreamFactory.wasCompressionUsed(), equalTo(true));, +	}, +, +	@Test, +				new ServletRegistrationBean(new ExampleServlet(true, false), "/hello"));, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java, +import io.undertow.util.Headers;, +		predicates.add(new MaxSizePredicate(compression.getMinResponseSize()));, +	/**, +	 * Predicate that returns true if the Content-Size of a request is above a given value, +	 * or is missing., +	 */, +	private static class MaxSizePredicate implements Predicate {, +, +		private final Predicate maxContentSize;, +, +		public MaxSizePredicate(int size) {, +			this.maxContentSize = Predicates.maxContentSize(size);, +		}, +, +		@Override, +		public boolean resolve(HttpServerExchange value) {, +			if (value.getResponseHeaders().contains(Headers.CONTENT_LENGTH)) {, +				return this.maxContentSize.resolve(value);, +			}, +			return true;, +		}, +, +	}, +++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java, +				new ServletRegistrationBean(new ExampleServlet(true, false), "/hello"));, +				new ServletRegistrationBean(new ExampleServlet(true, false), "/hello"));, +	public void compressionWithoutContentSizeHeader() throws Exception {, +		AbstractEmbeddedServletContainerFactory factory = getFactory();, +		Compression compression = new Compression();]