[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +			],, +			"providers": [, +				{, +					"name": "any", +				}, +, +|`providers`, +| ProviderHint[], +| A list of providers as defined by the `ValueHint` object (see below). Each entry defines, +  the name of the provider and its parameters, if any., +, +The JSON object contained in the `providers` array of each `hint` element can contain the, +following attributes:, +, +[cols="1,1,4"], +|===, +|Name | Type |Purpose, +, +|`name`, +| String, +| The name of the provider to use to offer additional content assistance for the element, +  to which the hint refers to., +, +|`parameters`, +| JSON object, +| Any additional parameter that the provider supports (check the documentation of the, +  provider for more details)., +|===, +, +property, you can provide additional meta-data that:, +, +1. Describes the list of potential values for a property., +2. Associates a provider to attach a well-defined semantic to a property so that a tool, +   can discover the list of potential values based on the project's context., +, +, +==== Value hints, +Let's assume a `foo.contexts` that maps magic String values to an integer:, +[source,java,indent=0], +----, +	@ConfigurationProperties("foo"), +	public class FooProperties {, +, +		private Map<String,Integer> contexts;, +		// getters and setters, +	}, +----, +, +The magic values are foo and bar for instance. In order to offer additional content, +assistance for the keys, you could add the following to, +<<configuration-metadata-additional-metadata,the manual meta-data of the module>>:, +, +[source,json,indent=0], +----, +	{"hints": [, +		{, +			"name": "foo.contexts.keys",, +			"values": [, +				{, +					"value": "foo", +				},, +				{, +					"value": "bar", +				}, +			], +		}, +	]}, +----, +, +NOTE: Of course, you should have an `Enum` for those two values instead. This is by far, +the most effective approach to auto-completion if your IDE supports it., +, +==== Provider hints, +, +Providers are a powerful way of attaching semantics to a property. We define in the section, +below the official providers that you can use for your own hints. Bare in mind however that, +your favorite IDE may implement some of these or none of them. It could eventually provide, +its own as well., +, +NOTE: As this is a new feature, IDE vendors will have to catch up with this new feature., +, +The table below summarizes the list of supported providers:, +, +[cols="2,4"], +|===, +|Name | Description, +, +|`any`, +|Permit any additional values to be provided., +, +|`class-reference`, +|Auto-complete the classes available in the project. Usually constrained by a base, + class that is specified via the `target` parameter., +, +|`enum`, +|Auto-complete the values of an enum given by the mandatory `target` parameter., +, +|`logger-name`, +|Auto-complete valid logger names. Typically, package and class names available in]