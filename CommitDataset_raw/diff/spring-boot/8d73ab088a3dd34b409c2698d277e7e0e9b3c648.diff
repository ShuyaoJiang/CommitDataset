[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +NOTE: When making an authenticated HTTP request, the `Principal` is considered as input to, +the endpoint and, therefore, the response will not be cached., +, +[[production-ready-endpoints-hypermedia]], +[[production-ready-endpoints-custom-mapping]], +[[production-ready-endpoints-cors]], +[[production-ready-endpoints-custom]], +=== Implementing Custom Endpoints, +JMX and, in a web application, over HTTP as well. Endpoints can be exposed over HTTP using, +Jersey, Spring MVC, or Spring WebFlux., +`@WebEndpoint`. These endpoints are restricted to their respective technologies. For, +You can write technology-specific extensions by using `@EndpointWebExtension` and, +Finally, if you need access to web-framework-specific functionality, you can implement, +Servlet or Spring `@Controller` and `@RestController` endpoints at the cost of them not, +being available over JMX or when using a different web framework., +, +you do so, and if your users ask for a separate management port or address, the endpoint, +[[production-ready-endpoints-custom-input]], +==== Receiving Input, +Operations on an endpoint receive input via their parameters. When exposed via the web,, +the values for these parameters are taken from the URL's query parameters and from the, +JSON request body. When exposed via JMX, the parameters are mapped to the parameters of, +the MBean's operations. Parameters are required by default. They can be made optional, +by annotating them with `@org.springframework.lang.Nullable`., +, +NOTE: To allow the input to be mapped to the operation method's parameters, code, +implementing an endpoint should be compiled with `-parameters`. This will happen, +automatically if you are using Spring Boot's Gradle plugin or if you are using Maven, +and `spring-boot-starter-parent`., +, +, +, +[[production-ready-endpoints-custom-input-conversion]], +===== Input type conversion, +The parameters passed to endpoint operation methods are, if necessary, automatically, +converted to the required type. Before calling an operation method, the input received via, +JMX or an HTTP request is converted to the required types using an instance of, +`ApplicationConversionService`., +, +, +, +[[production-ready-endpoints-custom-web]], +==== Custom Web Endpoints, +Operations on a `@Endpoint`, `@WebEndpoint`, or `@WebEndpointExtension` are automatically, +exposed over HTTP using Jersey, Spring MVC, or Spring WebFlux., +, +, +, +[[production-ready-endpoints-custom-web-predicate]], +===== Web Endpoint Request Predicates, +A request predicate is automatically generated for each operation on a web-exposed, +endpoint., +, +, +, +[[production-ready-endpoints-custom-web-predicate-path]], +===== Path, +, +The path of the predicate is determined by the ID of the endpoint and the base path of, +web-exposed endpoints. The default base path is `/actuator`. For example, an endpoint with, +the ID `sessions` will use `/actuator/sessions` as its path in the predicate., +, +The path can be further customized by annotating one or more parameters of the operation, +method with `@Selector`. Such a parameter is added to the path predicate as a path, +variable. The variable's value is passed into the operation method when the endpoint, +operation is invoked., +, +, +, +[[production-ready-endpoints-custom-web-predicate-http-method]], +===== HTTP method, +, +The HTTP method of the predicate is determined by the operation type, as shown in, +the following table:, +, +[cols="3, 1"], +|===, +|Operation |HTTP method, +, +|`@ReadOperation`, +|`GET`, +, +|`@WriteOperation`, +|`POST`, +, +|`@DeleteOperation`, +|`DELETE`, +|===, +, +, +, +[[production-ready-endpoints-custom-web-predicate-consumes]], +===== Consumes, +For a `@WriteOperation` (HTTP `POST`) that uses the request body, the consumes clause of, +the predicate is `application/vnd.spring-boot.actuator.v2+json, application/json`. For, +all other operations the consumes clause is empty., +, +, +]