[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/ldap/LdapRepositoriesRegistrar.java, +class LdapRepositoriesRegistrar extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/ldap/LdapRepositoriesRegistrar.java, +class LdapRepositoriesRegistrar extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +	private final LdapProperties properties;, +	private final Environment environment;, +	public LdapAutoConfiguration(LdapProperties properties, Environment environment) {, +	public ContextSource ldapContextSource() {, +		LdapContextSource source = new LdapContextSource();, +		source.setUserDn(this.properties.getUsername());, +		source.setPassword(this.properties.getPassword());, +		source.setBase(this.properties.getBase());, +		source.setUrls(this.properties.determineUrls(this.environment));, +		source.setBaseEnvironmentProperties(Collections, +		return source;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/ldap/LdapRepositoriesRegistrar.java, +class LdapRepositoriesRegistrar extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +	private final LdapProperties properties;, +	private final Environment environment;, +	public LdapAutoConfiguration(LdapProperties properties, Environment environment) {, +	public ContextSource ldapContextSource() {, +		LdapContextSource source = new LdapContextSource();, +		source.setUserDn(this.properties.getUsername());, +		source.setPassword(this.properties.getPassword());, +		source.setBase(this.properties.getBase());, +		source.setUrls(this.properties.determineUrls(this.environment));, +		source.setBaseEnvironmentProperties(Collections, +		return source;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +	private String[] urls;, +		if (ObjectUtils.isEmpty(this.urls)) {, +			return new String[] { "ldap://localhost:" + determinePort(environment) };, +		Assert.state(environment != null, "No local LDAP port configured");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/ldap/LdapRepositoriesRegistrar.java, +class LdapRepositoriesRegistrar extends AbstractRepositoryConfigurationSourceSupport {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +	private final LdapProperties properties;, +	private final Environment environment;, +	public LdapAutoConfiguration(LdapProperties properties, Environment environment) {, +	public ContextSource ldapContextSource() {, +		LdapContextSource source = new LdapContextSource();, +		source.setUserDn(this.properties.getUsername());, +		source.setPassword(this.properties.getPassword());, +		source.setBase(this.properties.getBase());, +		source.setUrls(this.properties.determineUrls(this.environment));, +		source.setBaseEnvironmentProperties(Collections, +		return source;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +	private String[] urls;, +		if (ObjectUtils.isEmpty(this.urls)) {, +			return new String[] { "ldap://localhost:" + determinePort(environment) };, +		Assert.state(environment != null, "No local LDAP port configured");, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/embedded/EmbeddedLdapAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;, +import org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties.Credential;, +@ConditionalOnProperty(prefix = "spring.ldap.embedded", name = "base-dn"), +	private static final String PROPERTY_SOURCE_NAME = "ldap.ports";, +, +	private final EmbeddedLdapProperties embeddedProperties;, +, +	private final LdapProperties properties;, +, +	private final ConfigurableApplicationContext applicationContext;, +, +	private final Environment environment;, +, +			LdapProperties properties, ConfigurableApplicationContext applicationContext,, +	public ContextSource ldapContextSource() {, +		LdapContextSource source = new LdapContextSource();, +		if (hasCredentials(this.embeddedProperties.getCredential())) {, +			source.setUserDn(this.embeddedProperties.getCredential().getUsername());, +			source.setPassword(this.embeddedProperties.getCredential().getPassword());, +		source.setUrls(this.properties.determineUrls(this.environment));, +		return source;, +		InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(, +				this.embeddedProperties.getBaseDn());, +		if (hasCredentials(this.embeddedProperties.getCredential())) {, +			config.addAdditionalBindCredentials(, +					this.embeddedProperties.getCredential().getUsername(),, +					this.embeddedProperties.getCredential().getPassword());, +		InMemoryListenerConfig listenerConfig = InMemoryListenerConfig, +				.createLDAPConfig("LDAP", this.embeddedProperties.getPort());, +		config.setListenerConfigs(listenerConfig);, +		importLdif();, +		setPortProperty(this.applicationContext, this.server.getListenPort());, +	private boolean hasCredentials(Credential credential) {, +		return StringUtils.hasText(credential.getUsername()), +				&& StringUtils.hasText(credential.getPassword());, +	private void importLdif() throws LDAPException {, +		String location = this.embeddedProperties.getLdif();, +		if (StringUtils.hasText(location)) {, +			try {]