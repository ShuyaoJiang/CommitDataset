[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java, +import org.springframework.jms.annotation.EnableJms;, +import org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;, +import org.springframework.jms.config.DefaultJmsListenerContainerFactory;, +import org.springframework.jms.core.JmsMessagingTemplate;, + * @author Stephane Nicoll, +	@ConditionalOnClass(JmsMessagingTemplate.class), +	@ConditionalOnMissingBean(JmsMessagingTemplate.class), +	protected static class MessagingTemplateConfiguration {, +, +		@Bean, +		public JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {, +			return new JmsMessagingTemplate(jmsTemplate);, +		}, +, +	}, +, +	@ConditionalOnClass(EnableJms.class), +	@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class), +	protected static class AnnotationDrivenConfiguration {, +, +		@ConditionalOnMissingBean(name = "jmsListenerContainerFactory"), +		@Bean, +		public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(ConnectionFactory connectionFactory) {, +			DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();, +			factory.setConnectionFactory(connectionFactory);, +			return factory;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfiguration.java, +import org.springframework.jms.annotation.EnableJms;, +import org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor;, +import org.springframework.jms.config.DefaultJmsListenerContainerFactory;, +import org.springframework.jms.core.JmsMessagingTemplate;, + * @author Stephane Nicoll, +	@ConditionalOnClass(JmsMessagingTemplate.class), +	@ConditionalOnMissingBean(JmsMessagingTemplate.class), +	protected static class MessagingTemplateConfiguration {, +, +		@Bean, +		public JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {, +			return new JmsMessagingTemplate(jmsTemplate);, +		}, +, +	}, +, +	@ConditionalOnClass(EnableJms.class), +	@ConditionalOnBean(JmsListenerAnnotationBeanPostProcessor.class), +	protected static class AnnotationDrivenConfiguration {, +, +		@ConditionalOnMissingBean(name = "jmsListenerContainerFactory"), +		@Bean, +		public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(ConnectionFactory connectionFactory) {, +			DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();, +			factory.setConnectionFactory(connectionFactory);, +			return factory;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/JmsAutoConfigurationTests.java, +import org.springframework.jms.annotation.EnableJms;, +import org.springframework.jms.config.DefaultJmsListenerContainerFactory;, +import org.springframework.jms.config.JmsListenerContainerFactory;, +import org.springframework.jms.config.SimpleJmsListenerContainerFactory;, +import org.springframework.jms.core.JmsMessagingTemplate;, +	public void testDefaultJmsConfiguration() {, +		JmsTemplate jmsTemplate = this.context.getBean(JmsTemplate.class);, +		JmsMessagingTemplate messagingTemplate = this.context.getBean(JmsMessagingTemplate.class);, +		assertEquals(jmsTemplate, messagingTemplate.getJmsTemplate());, +		assertFalse("No listener container factory should be created by default",, +				context.containsBean("jmsListenerContainerFactory"));, +	public void testConnectionFactoryBackOff() {, +	public void testJmsTemplateBackOff() {, +	public void testJmsMessagingTemplateBackOff() {, +		load(TestConfiguration5.class);, +		JmsMessagingTemplate messagingTemplate = this.context.getBean(JmsMessagingTemplate.class);, +		assertEquals("fooBar", messagingTemplate.getDefaultDestinationName());, +	}, +, +	@Test, +	public void testJmsTemplateBackOffEverything() {, +		this.context = createContext(TestConfiguration2.class, TestConfiguration3.class,  TestConfiguration5.class);, +		JmsMessagingTemplate messagingTemplate = this.context.getBean(JmsMessagingTemplate.class);, +		assertEquals("fooBar", messagingTemplate.getDefaultDestinationName());, +		assertEquals(jmsTemplate, messagingTemplate.getJmsTemplate());, +	}, +, +	@Test, +	public void testEnableJmsCreateDefaultContainerFactory() {, +		load(EnableJmsConfiguration.class);, +		JmsListenerContainerFactory<?> jmsListenerContainerFactory =, +				this.context.getBean("jmsListenerContainerFactory", JmsListenerContainerFactory.class);, +		assertEquals(DefaultJmsListenerContainerFactory.class, jmsListenerContainerFactory.getClass());, +, +	}, +, +	@Test]