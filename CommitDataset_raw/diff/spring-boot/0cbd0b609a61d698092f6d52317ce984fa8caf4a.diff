[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer) {, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer,, +			String prefix) {, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer) {, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer,, +			String prefix) {, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java, +	public void set(String group, Collection<Metric<?>> values) {, +	public void increment(String group, Delta<?> delta) {, +		String prefix = group;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +		if (!delta.getName().startsWith(prefix)) {, +			delta = new Delta<Number>(prefix + delta.getName(), delta.getValue(),, +					delta.getTimestamp());, +		}, +		increment(delta);, +		this.groups.add(group);, +	}, +, +	@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer) {, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer,, +			String prefix) {, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java, +	public void set(String group, Collection<Metric<?>> values) {, +	public void increment(String group, Delta<?> delta) {, +		String prefix = group;, +		if (!prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +		if (!delta.getName().startsWith(prefix)) {, +			delta = new Delta<Number>(prefix + delta.getName(), delta.getValue(),, +					delta.getTimestamp());, +		}, +		increment(delta);, +		this.groups.add(group);, +	}, +, +	@Override, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMultiMetricRepository.java, +import org.springframework.boot.actuate.metrics.writer.Delta;, +	public Iterable<Metric<?>> findAll(String group) {, +				.boundZSetOps(keyFor(group));, +			String key = keysIt.next();, +			result.add(deserialize(group, key, v, zSetOperations.score(key)));, +	public void set(String group, Collection<Metric<?>> values) {, +			zSetOperations.add(key, metric.getValue().doubleValue());, +	public void increment(String group, Delta<?> delta) {, +		String groupKey = keyFor(group);, +		trackMembership(groupKey);, +		BoundZSetOperations<String, String> zSetOperations = this.redisOperations, +				.boundZSetOps(groupKey);, +		String key = keyFor(delta.getName());, +		double value = zSetOperations.incrementScore(key, delta.getValue().doubleValue());, +		String raw = serialize(new Metric<Double>(delta.getName(), value,, +				delta.getTimestamp()));, +		this.redisOperations.opsForValue().set(key, raw);, +	}, +, +	@Override, +	private Metric<?> deserialize(String group, String redisKey, String v, Double value) {, +		String prefix = group;, +		if (!group.endsWith(".")) {, +			prefix = group + ".";, +		}, +		Date timestamp = new Date(Long.valueOf(v));, +		return new Metric<Double>(prefix + nameFor(redisKey), value, timestamp);, +		return String.valueOf(entity.getTimestamp().getTime());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/PrefixMetricGroupExporter.java, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/RichGaugeExporter.java, +import org.springframework.boot.actuate.metrics.writer.PrefixMetricWriter;, +	private final PrefixMetricWriter writer;, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer) {, +	public RichGaugeExporter(RichGaugeReader reader, PrefixMetricWriter writer,, +			String prefix) {, +		this.writer.set(group, values);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/InMemoryMetricRepository.java]