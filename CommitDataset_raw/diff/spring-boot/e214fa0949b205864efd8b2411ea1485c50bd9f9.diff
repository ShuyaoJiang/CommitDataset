[+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/ClassifierTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jar.getManifest()).isNotNull();, +		assertThat(jar.getManifest()).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/ClassifierTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jar.getManifest()).isNotNull();, +		assertThat(jar.getManifest()).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(isFullyExecutable(executableJar)).isFalse();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__extension__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +		assertThat(containsLine("Custom extension script", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/ClassifierTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jar.getManifest()).isNotNull();, +		assertThat(jar.getManifest()).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(isFullyExecutable(executableJar)).isFalse();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__extension__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +		assertThat(containsLine("Custom extension script", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jarFile.getEntry("lib/commons-logging-1.1.3.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/projectB.jar")).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/ClassifierTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jar.getManifest()).isNotNull();, +		assertThat(jar.getManifest()).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(isFullyExecutable(executableJar)).isFalse();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__extension__", executableJar)).isTrue();, +		assertThat(isFullyExecutable(executableJar)).isTrue();, +		assertThat(containsLine("# Provides:.*__task__", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +		assertThat(containsLine("Custom extension script", executableJar)).isTrue();, +		assertThat(containsLine("Custom task script", executableJar)).isTrue();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(jarFile.getEntry("lib/commons-logging-1.1.3.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/foo.jar")).isNotNull();, +		assertThat(jarFile.getEntry("lib/projectB.jar")).isNotNull();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/NoJarTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(new File("target/nojar/build/libs")).doesNotExist();, +++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/BootRunResourceTests.java, +import static org.assertj.core.api.Assertions.assertThat;, +		assertThat(this.output.toString()).contains("src/main/resources/test.txt");, +		assertThat(this.output.toString()).contains("build/resources/main/test.txt");]