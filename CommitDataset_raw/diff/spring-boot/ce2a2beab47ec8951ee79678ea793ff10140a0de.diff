[+++ b/spring-bootstrap-samples/spring-bootstrap-service-sample/src/main/resources/application.properties, +management.port: 8080, +management.allow_shutdown: true, +server.port: 8080, +server.tomcat.basedir: target/tomcat, +server.tomcat.access_log_pattern: %h %t "%r" %s %b, +++ b/spring-bootstrap-samples/spring-bootstrap-service-sample/src/main/resources/application.properties, +management.port: 8080, +management.allow_shutdown: true, +server.port: 8080, +server.tomcat.basedir: target/tomcat, +server.tomcat.access_log_pattern: %h %t "%r" %s %b, +++ b/spring-bootstrap-samples/spring-bootstrap-service-sample/src/test/java/org/springframework/bootstrap/sample/service/NoVarzContextServiceBootstrapApplicationTests.java, +package org.springframework.bootstrap.sample.service;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +import org.springframework.bootstrap.SpringApplication;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.http.client.InterceptingClientHttpRequestFactory;, +import org.springframework.http.client.SimpleClientHttpRequestFactory;, +import org.springframework.security.crypto.codec.Base64;, +import org.springframework.web.client.DefaultResponseErrorHandler;, +import org.springframework.web.client.ResourceAccessException;, +import org.springframework.web.client.RestTemplate;, +, +import static org.junit.Assert.assertEquals;, +, +/**, + * Integration tests for switching off management endpoints., + * , + * @author Dave Syer, + * , + */, +public class NoVarzContextServiceBootstrapApplicationTests {, +, +	private static ConfigurableApplicationContext context;, +, +	private static int managementPort = 0;, +, +	@BeforeClass, +	public static void start() throws Exception {, +		final String[] args = new String[] { "--management.port=" + managementPort };, +		Future<ConfigurableApplicationContext> future = Executors, +				.newSingleThreadExecutor().submit(, +						new Callable<ConfigurableApplicationContext>() {, +							@Override, +							public ConfigurableApplicationContext call() throws Exception {, +								return (ConfigurableApplicationContext) SpringApplication, +										.run(ServiceBootstrapApplication.class, args);, +							}, +						});, +		context = future.get(10, TimeUnit.SECONDS);, +	}, +, +	@AfterClass, +	public static void stop() {, +		if (context != null) {, +			context.close();, +		}, +	}, +, +	@Test, +	public void testHome() throws Exception {, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<Map> entity = getRestTemplate("user", "password").getForEntity(, +				"http://localhost:8080", Map.class);, +		assertEquals(HttpStatus.OK, entity.getStatusCode());, +		@SuppressWarnings("unchecked"), +		Map<String, Object> body = entity.getBody();, +		assertEquals("Hello Phil", body.get("message"));, +	}, +, +	@Test(expected = ResourceAccessException.class), +	public void testVarzNotAvailable() throws Exception {, +		testHome(); // makes sure some requests have been made, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<Map> entity = getRestTemplate("user", "password").getForEntity(, +				"http://localhost:" + managementPort + "/varz", Map.class);, +		assertEquals(HttpStatus.NOT_FOUND, entity.getStatusCode());, +	}, +, +	private RestTemplate getRestTemplate(final String username, final String password) {, +]