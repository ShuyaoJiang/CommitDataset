[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootExtension.java, +import java.io.File;, +import java.util.concurrent.Callable;, +, +import org.gradle.api.plugins.JavaPluginConvention;, +import org.gradle.api.tasks.SourceSet;, +import org.gradle.api.tasks.bundling.Jar;, +	 * Java plugin's {@code classes} task to depend upon it., +	 * <p>, +	 * By default, the task's destination dir will be a directory named {@code META-INF}, +	 * beneath the main source set's resources output directory, and the task's project, +	 * artifact will be the base name of the {@code bootWar} or {@code bootJar} task., +	 * Java plugin's {@code classes} task to depend upon it. The task is passed to the, +	 * given {@code configurer} for further configuration., +	 * <p>, +	 * By default, the task's destination dir will be a directory named {@code META-INF}, +	 * beneath the main source set's resources output directory, and the task's project, +	 * artifact will be the base name of the {@code bootWar} or {@code bootJar} task., +		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {, +			bootBuildInfo.getConventionMapping().map("projectArtifact",, +					(Callable<String>) () -> {, +				Jar artifactTask = (Jar) this.project.getTasks().findByName("bootWar");, +				if (artifactTask == null) {, +					artifactTask = (Jar) this.project.getTasks().findByName("bootJar");, +				}, +				String result = artifactTask == null ? null : artifactTask.getBaseName();, +				return result;, +			});, +			bootBuildInfo.getConventionMapping().map("destinationDir",, +					(Callable<File>) () -> {, +				return new File(, +						this.project.getConvention().getPlugin(JavaPluginConvention.class), +								.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME), +								.getOutput().getResourcesDir(),, +						"META-INF");, +			});, +		});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootExtension.java, +import java.io.File;, +import java.util.concurrent.Callable;, +, +import org.gradle.api.plugins.JavaPluginConvention;, +import org.gradle.api.tasks.SourceSet;, +import org.gradle.api.tasks.bundling.Jar;, +	 * Java plugin's {@code classes} task to depend upon it., +	 * <p>, +	 * By default, the task's destination dir will be a directory named {@code META-INF}, +	 * beneath the main source set's resources output directory, and the task's project, +	 * artifact will be the base name of the {@code bootWar} or {@code bootJar} task., +	 * Java plugin's {@code classes} task to depend upon it. The task is passed to the, +	 * given {@code configurer} for further configuration., +	 * <p>, +	 * By default, the task's destination dir will be a directory named {@code META-INF}, +	 * beneath the main source set's resources output directory, and the task's project, +	 * artifact will be the base name of the {@code bootWar} or {@code bootJar} task., +		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {, +			bootBuildInfo.getConventionMapping().map("projectArtifact",, +					(Callable<String>) () -> {, +				Jar artifactTask = (Jar) this.project.getTasks().findByName("bootWar");, +				if (artifactTask == null) {, +					artifactTask = (Jar) this.project.getTasks().findByName("bootJar");, +				}, +				String result = artifactTask == null ? null : artifactTask.getBaseName();, +				return result;, +			});, +			bootBuildInfo.getConventionMapping().map("destinationDir",, +					(Callable<File>) () -> {, +				return new File(, +						this.project.getConvention().getPlugin(JavaPluginConvention.class), +								.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME), +								.getOutput().getResourcesDir(),, +						"META-INF");, +			});, +		});, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java, +import org.gradle.api.Task;, +import org.gradle.api.internal.ConventionTask;, +import org.gradle.api.tasks.OutputDirectory;, + * {@link Task} for generating a {@code build-info.properties} file from a, + * {@code Project}. The {@link #setDestinationDir destination dir} and, + * {@link #setProjectArtifact project artifact} must be configured before execution., +public class BuildInfo extends ConventionTask {, +	private File destinationDir;, +	private String projectArtifact;, +			new BuildPropertiesWriter(, +					new File(getDestinationDir(), "build-info.properties")), +									getProjectArtifact(), this.projectVersion,, +									this.projectName,, +	@Input, +	@Input, +	@Input, +	@Input, +	@OutputDirectory, +	public File getDestinationDir() {, +		return this.destinationDir;, +	public void setDestinationDir(File destinationDir) {, +		this.destinationDir = destinationDir;, +	@Input, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootExtension.java, +import java.io.File;]