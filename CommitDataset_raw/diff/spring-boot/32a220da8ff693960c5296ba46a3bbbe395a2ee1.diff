[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +import org.junit.Ignore;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.PropertySource;, +	@Test, +	@Ignore("Expected to fail per gh-1075"), +	public void testMessageSourceFromPropertySourceAnnotation() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(Config.class, MessageSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals("bar",, +				this.context.getMessage("foo", null, "Foo message", Locale.UK));, +	}, +, +	@Configuration, +	@PropertySource("classpath:/switch-messages.properties"), +	protected static class Config {, +, +	}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +import org.junit.Ignore;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.PropertySource;, +	@Test, +	@Ignore("Expected to fail per gh-1075"), +	public void testMessageSourceFromPropertySourceAnnotation() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(Config.class, MessageSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals("bar",, +				this.context.getMessage("foo", null, "Foo message", Locale.UK));, +	}, +, +	@Configuration, +	@PropertySource("classpath:/switch-messages.properties"), +	protected static class Config {, +, +	}, +++ b/spring-boot-autoconfigure/src/test/resources/switch-messages.properties, +spring.messages.basename:test/messages]