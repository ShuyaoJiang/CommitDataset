[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, + * If no specific {@code endpoints.<id>.*} or {@code endpoints.default.*} properties are, + * For instance if {@code endpoints.default.enabled} is {@code false} but, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, + * If no specific {@code endpoints.<id>.*} or {@code endpoints.default.*} properties are, + * For instance if {@code endpoints.default.enabled} is {@code false} but, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +		if (endpointId.equals("default")) {, +			throw new IllegalArgumentException("Endpoint id 'default' is a reserved ", +					+ "value and cannot be used by an endpoint");, +			String defaultTypeKey = createTechSpecificKey("default", endpointType);, +			EndpointEnablement globalTypeOutcome = getEnablementFor(defaultTypeKey);, +				return defaultEndpointEnablement("default", false, endpointType);, +					"default");, +		String defaultKey = createKey("default", "enabled");, +		EndpointEnablement globalOutCome = getEnablementFor(defaultKey);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, + * If no specific {@code endpoints.<id>.*} or {@code endpoints.default.*} properties are, + * For instance if {@code endpoints.default.enabled} is {@code false} but, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +		if (endpointId.equals("default")) {, +			throw new IllegalArgumentException("Endpoint id 'default' is a reserved ", +					+ "value and cannot be used by an endpoint");, +			String defaultTypeKey = createTechSpecificKey("default", endpointType);, +			EndpointEnablement globalTypeOutcome = getEnablementFor(defaultTypeKey);, +				return defaultEndpointEnablement("default", false, endpointType);, +					"default");, +		String defaultKey = createKey("default", "enabled");, +		EndpointEnablement globalOutCome = getEnablementFor(defaultKey);, +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "endpoints.default.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints by default.",, +    "defaultValue": true, +  },, +  {, +    "name": "endpoints.default.jmx.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints as JMX MBeans by default.",, +    "defaultValue": true, +  },, +  {, +    "name": "endpoints.default.web.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints as Web endpoints by default.",, +    "defaultValue": false, +  },, +  {, +      "replacement": "endpoints.default.enabled",, +      "replacement": "endpoints.default.jmx.enabled",, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpoint.java, + * If no specific {@code endpoints.<id>.*} or {@code endpoints.default.*} properties are, + * For instance if {@code endpoints.default.enabled} is {@code false} but, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/support/EndpointEnablementProvider.java, +		if (endpointId.equals("default")) {, +			throw new IllegalArgumentException("Endpoint id 'default' is a reserved ", +					+ "value and cannot be used by an endpoint");, +			String defaultTypeKey = createTechSpecificKey("default", endpointType);, +			EndpointEnablement globalTypeOutcome = getEnablementFor(defaultTypeKey);, +				return defaultEndpointEnablement("default", false, endpointType);, +					"default");, +		String defaultKey = createKey("default", "enabled");, +		EndpointEnablement globalOutCome = getEnablementFor(defaultKey);, +++ b/spring-boot-actuator/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "endpoints.default.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints by default.",, +    "defaultValue": true, +  },, +  {, +    "name": "endpoints.default.jmx.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints as JMX MBeans by default.",, +    "defaultValue": true, +  },, +  {, +    "name": "endpoints.default.web.enabled",, +    "type": "java.lang.Boolean",, +    "description": "Enable all endpoints as Web endpoints by default.",, +    "defaultValue": false, +  },, +  {, +      "replacement": "endpoints.default.enabled",, +      "replacement": "endpoints.default.jmx.enabled",, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/ConditionalOnEnabledEndpointTests.java, +				.withPropertyValues("endpoints.default.enabled=false"), +				.withPropertyValues("endpoints.default.enabled=false",, +				.withPropertyValues("endpoints.default.enabled=false",, +						"endpoints.default.web.enabled=true"), +				.withPropertyValues("endpoints.default.enabled=false",, +						"endpoints.default.jmx.enabled=true"), +				.withPropertyValues("endpoints.default.enabled=false",, +						"endpoints.default.web.enabled=false",, +						"endpoints.default.jmx.enabled=true"), +				.withPropertyValues("endpoints.default.enabled=true",, +						"endpoints.default.web.enabled=true",, +						"endpoints.default.jmx.enabled=true", "endpoints.foo.enabled=false"), +				.withPropertyValues("endpoints.default.enabled=true"), +				.withPropertyValues("endpoints.default.web.enabled=true"), +				.withPropertyValues("endpoints.default.jmx.enabled=true")]