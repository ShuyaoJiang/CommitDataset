[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +import java.util.List;, +	private static final String PARAMETERS_COMPILER_ARG = "-parameters";, +		configureParametersCompilerArg(project);, +	private void configureParametersCompilerArg(Project project) {, +		project.getTasks().withType(JavaCompile.class, compile -> {, +			final List<String> compilerArgs = compile.getOptions().getCompilerArgs();, +			if (!compilerArgs.contains(PARAMETERS_COMPILER_ARG)) {, +				compilerArgs.add(PARAMETERS_COMPILER_ARG);, +			}, +		});, +	}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +import java.util.List;, +	private static final String PARAMETERS_COMPILER_ARG = "-parameters";, +		configureParametersCompilerArg(project);, +	private void configureParametersCompilerArg(Project project) {, +		project.getTasks().withType(JavaCompile.class, compile -> {, +			final List<String> compilerArgs = compile.getOptions().getCompilerArgs();, +			if (!compilerArgs.contains(PARAMETERS_COMPILER_ARG)) {, +				compilerArgs.add(PARAMETERS_COMPILER_ARG);, +			}, +		});, +	}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java, +	public void javaCompileTasksUseParametersCompilerFlagByDefault() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin"), +				.getOutput()).contains("compileJava has -parameters by default = true"), +				.contains("compileTestJava has -parameters by default = true");, +	}, +, +	// -parameters and an additional compiler arg, +	@Test, +	public void javaCompileTasksUseParametersCompilerFlagWhenOtherAdded() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersAddOther"), +				.getOutput()).contains("compileJava has -parameters when another arg has been added = true"), +				.contains("compileTestJava has -parameters when another arg has been added = true");, +	}, +, +	// -parameters removed, +	@Test, +	public void javaCompileTasksDoesNotUseParametersWhenParametersRemoved() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersRemove"), +				.getOutput()).contains("compileJava has -parameters when removed = false"), +				.contains("compileTestJava has -parameters when removed = false");, +	}, +, +	// compiler args cleared, +	@Test, +	public void javaCompileTasksDoesNotUseParametersWhenArgsCleared() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersClear"), +				.getOutput()).contains("compileJava has -parameters when cleared = false"), +				.contains("compileTestJava has -parameters when cleared = false");, +	}, +, +	@Test, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java, +import java.util.List;, +	private static final String PARAMETERS_COMPILER_ARG = "-parameters";, +		configureParametersCompilerArg(project);, +	private void configureParametersCompilerArg(Project project) {, +		project.getTasks().withType(JavaCompile.class, compile -> {, +			final List<String> compilerArgs = compile.getOptions().getCompilerArgs();, +			if (!compilerArgs.contains(PARAMETERS_COMPILER_ARG)) {, +				compilerArgs.add(PARAMETERS_COMPILER_ARG);, +			}, +		});, +	}, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java, +	public void javaCompileTasksUseParametersCompilerFlagByDefault() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin"), +				.getOutput()).contains("compileJava has -parameters by default = true"), +				.contains("compileTestJava has -parameters by default = true");, +	}, +, +	// -parameters and an additional compiler arg, +	@Test, +	public void javaCompileTasksUseParametersCompilerFlagWhenOtherAdded() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersAddOther"), +				.getOutput()).contains("compileJava has -parameters when another arg has been added = true"), +				.contains("compileTestJava has -parameters when another arg has been added = true");, +	}, +, +	// -parameters removed, +	@Test, +	public void javaCompileTasksDoesNotUseParametersWhenParametersRemoved() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersRemove"), +				.getOutput()).contains("compileJava has -parameters when removed = false"), +				.contains("compileTestJava has -parameters when removed = false");, +	}, +, +	// compiler args cleared, +	@Test, +	public void javaCompileTasksDoesNotUseParametersWhenArgsCleared() {, +		assertThat(this.gradleBuild.build("javaParametersCompilerArg", "-PapplyJavaPlugin", "-PparametersClear"), +				.getOutput()).contains("compileJava has -parameters when cleared = false"), +				.contains("compileTestJava has -parameters when cleared = false");, +	}, +, +	@Test]