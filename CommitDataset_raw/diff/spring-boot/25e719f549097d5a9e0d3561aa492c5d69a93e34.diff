[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, + * @author Andy Wilkinson, +		private boolean xss = true;, +		private boolean cache = true;, +		private boolean frame = true;, +		private boolean contentType = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, + * @author Andy Wilkinson, +		private boolean xss = true;, +		private boolean cache = true;, +		private boolean frame = true;, +		private boolean contentType = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, + * @author Andy Wilkinson, +		if (!headers.isContentType()) {, +			configurer.contentTypeOptions().disable();, +		if (!headers.isXss()) {, +			configurer.xssProtection().disable();, +		if (!headers.isCache()) {, +			configurer.cacheControl().disable();, +		if (!headers.isFrame()) {, +			configurer.frameOptions().disable();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, + * @author Andy Wilkinson, +		private boolean xss = true;, +		private boolean cache = true;, +		private boolean frame = true;, +		private boolean contentType = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, + * @author Andy Wilkinson, +		if (!headers.isContentType()) {, +			configurer.contentTypeOptions().disable();, +		if (!headers.isXss()) {, +			configurer.xssProtection().disable();, +		if (!headers.isCache()) {, +			configurer.cacheControl().disable();, +		if (!headers.isFrame()) {, +			configurer.frameOptions().disable();, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java, +import org.springframework.security.web.FilterChainProxy;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, + * @author Andy Wilkinson, +	@Test, +	public void defaultHeaderConfiguration() throws Exception {, +		this.context = SpringApplication.run(VanillaWebConfiguration.class,, +				"--server.port=0");, +		MockMvc mockMvc = MockMvcBuilders, +				.webAppContextSetup((WebApplicationContext) this.context), +				.addFilters((FilterChainProxy) this.context, +						.getBean("springSecurityFilterChain", Filter.class)), +				.build();, +		mockMvc.perform(MockMvcRequestBuilders.get("/")), +				.andExpect(MockMvcResultMatchers.header().string("X-Content-Type-Options",, +						is(notNullValue()))), +				.andExpect(MockMvcResultMatchers.header().string("X-XSS-Protection",, +						is(notNullValue()))), +				.andExpect(MockMvcResultMatchers.header().string("Cache-Control",, +						is(notNullValue()))), +				.andExpect(MockMvcResultMatchers.header().string("X-Frame-Options",, +						is(notNullValue())));, +	}, +, +	@Test, +	public void securityHeadersCanBeDisabled() throws Exception {, +		this.context = SpringApplication.run(VanillaWebConfiguration.class,, +				"--server.port=0", "--security.headers.content-type=false",, +				"--security.headers.xss=false", "--security.headers.cache=false",, +				"--security.headers.frame=false");, +, +		MockMvc mockMvc = MockMvcBuilders, +				.webAppContextSetup((WebApplicationContext) this.context), +				.addFilters(, +						this.context.getBean("springSecurityFilterChain", Filter.class)), +				.build();, +		mockMvc.perform(MockMvcRequestBuilders.get("/")), +				.andExpect(MockMvcResultMatchers.status().isUnauthorized()), +				.andExpect(MockMvcResultMatchers.header(), +						.doesNotExist("X-Content-Type-Options")), +				.andExpect(, +						MockMvcResultMatchers.header().doesNotExist("X-XSS-Protection")), +				.andExpect(MockMvcResultMatchers.header().doesNotExist("Cache-Control")), +				.andExpect(, +						MockMvcResultMatchers.header().doesNotExist("X-Frame-Options"));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, + * @author Andy Wilkinson, +		private boolean xss = true;, +		private boolean cache = true;, +		private boolean frame = true;, +		private boolean contentType = true;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, + * @author Andy Wilkinson, +		if (!headers.isContentType()) {, +			configurer.contentTypeOptions().disable();, +		if (!headers.isXss()) {, +			configurer.xssProtection().disable();, +		if (!headers.isCache()) {, +			configurer.cacheControl().disable();]