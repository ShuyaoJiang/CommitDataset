[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java, +import org.hamcrest.Matchers;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.context.annotation.Import;, +	private AnnotationConfigReactiveWebServerApplicationContext context;, +, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class);, +		assertThat(this.context.getBeansOfType(ReactiveWebServerFactory.class)), +		assertThat(this.context.getBeansOfType(WebServerFactoryCustomizer.class)), +		assertThat(this.context, +				.getBeansOfType(ReactiveWebServerFactoryCustomizer.class)), +		this.thrown.expect(ApplicationContextException.class);, +		this.thrown.expectMessage(Matchers.containsString("missing HttpHandler bean"));, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				MissingHttpHandlerConfiguration.class);, +		this.thrown.expect(ApplicationContextException.class);, +		this.thrown.expectMessage(Matchers.containsString(, +				"multiple HttpHandler beans : httpHandler,additionalHttpHandler"));, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class, TooManyHttpHandlers.class);, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class, ReactiveWebServerCustomization.class);, +		MockReactiveWebServerFactory factory = this.context, +				.getBean(MockReactiveWebServerFactory.class);, +		assertThat(factory.getPort()).isEqualTo(9000);, +	@Import({ MockWebServerAutoConfiguration.class,, +			ReactiveWebServerFactoryAutoConfiguration.class }), +	protected static class BaseConfiguration {, +	@Import({ MockWebServerAutoConfiguration.class,, +			ReactiveWebServerFactoryAutoConfiguration.class }), +	protected static class MissingHttpHandlerConfiguration {, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java, +import org.hamcrest.Matchers;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.context.annotation.Import;, +	private AnnotationConfigReactiveWebServerApplicationContext context;, +, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class);, +		assertThat(this.context.getBeansOfType(ReactiveWebServerFactory.class)), +		assertThat(this.context.getBeansOfType(WebServerFactoryCustomizer.class)), +		assertThat(this.context, +				.getBeansOfType(ReactiveWebServerFactoryCustomizer.class)), +		this.thrown.expect(ApplicationContextException.class);, +		this.thrown.expectMessage(Matchers.containsString("missing HttpHandler bean"));, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				MissingHttpHandlerConfiguration.class);, +		this.thrown.expect(ApplicationContextException.class);, +		this.thrown.expectMessage(Matchers.containsString(, +				"multiple HttpHandler beans : httpHandler,additionalHttpHandler"));, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class, TooManyHttpHandlers.class);, +		this.context = new AnnotationConfigReactiveWebServerApplicationContext(, +				BaseConfiguration.class, ReactiveWebServerCustomization.class);, +		MockReactiveWebServerFactory factory = this.context, +				.getBean(MockReactiveWebServerFactory.class);, +		assertThat(factory.getPort()).isEqualTo(9000);, +	@Import({ MockWebServerAutoConfiguration.class,, +			ReactiveWebServerFactoryAutoConfiguration.class }), +	protected static class BaseConfiguration {, +	@Import({ MockWebServerAutoConfiguration.class,, +			ReactiveWebServerFactoryAutoConfiguration.class }), +	protected static class MissingHttpHandlerConfiguration {, +, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-dependencies/pom.xml, +		<junit-platform.version>1.1.0</junit-platform.version>, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java, +import org.hamcrest.Matchers;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.context.annotation.Import;, +	private AnnotationConfigReactiveWebServerApplicationContext context;, +, +	@Rule]