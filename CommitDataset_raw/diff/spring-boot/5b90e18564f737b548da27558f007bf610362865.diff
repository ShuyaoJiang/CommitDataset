[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import java.util.HashMap;, +import java.util.Map;, +	private Map<String, Command> commandMap = new HashMap<String, Command>();, +, +		addBaseCommands();, +		this.commandMap.clear();, +		for (Command command : commands) {, +			this.commandMap.put(command.getName(), command);, +		}, +		addBaseCommands();, +	}, +, +	protected void addBaseCommands() {, +		HelpCommand help = new HelpCommand();, +		this.commands.add(0, help);, +		this.commandMap.put(help.getName(), help);, +		HintCommand hint = new HintCommand();, +		this.commands.add(hint);, +		this.commandMap.put(hint.getName(), hint);, +		return this.commandMap.get(name);, +		String name = command.getName();, +		Command existing = find(name);, +		int index = this.commands.size() - 1;, +			this.commands.set(index, command);, +		else {, +		this.commandMap.put(name, command);, +	}, +		int index = 0;, +		String arg = args[0];, +			if (arg.contains("=") || args.length < 2) {, +				index = 1;, +			}, +			else {, +				init[0] = arg + "=" + args[1];, +				index = 2;, +		if (index > 0) {, +			String[] newargs = new String[args.length - index];, +			System.arraycopy(args, index, newargs, 0, newargs.length);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import java.util.HashMap;, +import java.util.Map;, +	private Map<String, Command> commandMap = new HashMap<String, Command>();, +, +		addBaseCommands();, +		this.commandMap.clear();, +		for (Command command : commands) {, +			this.commandMap.put(command.getName(), command);, +		}, +		addBaseCommands();, +	}, +, +	protected void addBaseCommands() {, +		HelpCommand help = new HelpCommand();, +		this.commands.add(0, help);, +		this.commandMap.put(help.getName(), help);, +		HintCommand hint = new HintCommand();, +		this.commands.add(hint);, +		this.commandMap.put(hint.getName(), hint);, +		return this.commandMap.get(name);, +		String name = command.getName();, +		Command existing = find(name);, +		int index = this.commands.size() - 1;, +			this.commands.set(index, command);, +		else {, +		this.commandMap.put(name, command);, +	}, +		int index = 0;, +		String arg = args[0];, +			if (arg.contains("=") || args.length < 2) {, +				index = 1;, +			}, +			else {, +				init[0] = arg + "=" + args[1];, +				index = 2;, +		if (index > 0) {, +			String[] newargs = new String[args.length - index];, +			System.arraycopy(args, index, newargs, 0, newargs.length);, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SpringCliTests.java, +		assertEquals(before - 1, this.cli.getCommands().indexOf(this.cli.find("another")));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java, +import java.util.HashMap;, +import java.util.Map;, +	private Map<String, Command> commandMap = new HashMap<String, Command>();, +, +		addBaseCommands();, +		this.commandMap.clear();, +		for (Command command : commands) {, +			this.commandMap.put(command.getName(), command);, +		}, +		addBaseCommands();, +	}, +, +	protected void addBaseCommands() {, +		HelpCommand help = new HelpCommand();, +		this.commands.add(0, help);, +		this.commandMap.put(help.getName(), help);, +		HintCommand hint = new HintCommand();, +		this.commands.add(hint);, +		this.commandMap.put(hint.getName(), hint);]