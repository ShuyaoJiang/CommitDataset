[+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +			verify(context.getBean(CounterService.class)), +					.increment("status.200.test.path");, +		}, +		finally {, +	}, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +		}, +		finally {, +	}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +			verify(context.getBean(CounterService.class)), +					.increment("status.200.test.path");, +		}, +		finally {, +	}, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +		}, +		finally {, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +public abstract class PathBasedTemplateAvailabilityProvider, +	private final Class<TemplateAvailabilityProperties> propertiesClass;, +	@SuppressWarnings("unchecked"), +			Class<? extends TemplateAvailabilityProperties> propertiesClass,, +			String propertyPrefix) {, +		this.propertiesClass = (Class<TemplateAvailabilityProperties>) propertiesClass;, +			TemplateAvailabilityProperties properties1 = binder, +			TemplateAvailabilityProperties properties = properties1;, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +			verify(context.getBean(CounterService.class)), +					.increment("status.200.test.path");, +		}, +		finally {, +	}, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +		}, +		finally {, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +public abstract class PathBasedTemplateAvailabilityProvider, +	private final Class<TemplateAvailabilityProperties> propertiesClass;, +	@SuppressWarnings("unchecked"), +			Class<? extends TemplateAvailabilityProperties> propertiesClass,, +			String propertyPrefix) {, +		this.propertiesClass = (Class<TemplateAvailabilityProperties>) propertiesClass;, +			TemplateAvailabilityProperties properties1 = binder, +			TemplateAvailabilityProperties properties = properties1;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java, +				ResourceConfiguration.class).environment(this.environment), +						.web(WebApplicationType.NONE).run();, +				ResourceConfiguration.class).environment(this.environment), +						.web(WebApplicationType.NONE).run();, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +			verify(context.getBean(CounterService.class)), +					.increment("status.200.test.path");, +		}, +		finally {, +	}, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/test/path");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET",, +			MockHttpServletResponse response = new MockHttpServletResponse();, +		}, +		finally {, +	}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java]