[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			return new ApplicationContextHeaderFilter(context);, +		}, +, +	}, +, +	/**, +	 * {@link OncePerRequestFilter} to add the {@literal X-Application-Context} if, +	 * required., +	 */, +	private static class ApplicationContextHeaderFilter extends OncePerRequestFilter {, +, +		private final ApplicationContext applicationContext;, +, +		private ManagementServerProperties properties;, +, +		public ApplicationContextHeaderFilter(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +			if (this.properties == null) {, +				this.properties = this.applicationContext, +						.getBean(ManagementServerProperties.class);, +			}, +			if (this.properties.getAddApplicationContextHeader()) {, +				response.addHeader("X-Application-Context",, +						this.applicationContext.getId());, +			}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			return new ApplicationContextHeaderFilter(context);, +		}, +, +	}, +, +	/**, +	 * {@link OncePerRequestFilter} to add the {@literal X-Application-Context} if, +	 * required., +	 */, +	private static class ApplicationContextHeaderFilter extends OncePerRequestFilter {, +, +		private final ApplicationContext applicationContext;, +, +		private ManagementServerProperties properties;, +, +		public ApplicationContextHeaderFilter(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +			if (this.properties == null) {, +				this.properties = this.applicationContext, +						.getBean(ManagementServerProperties.class);, +			}, +			if (this.properties.getAddApplicationContextHeader()) {, +				response.addHeader("X-Application-Context",, +						this.applicationContext.getId());, +			}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +	private boolean addApplicationContextHeader = true;, +, +	public boolean getAddApplicationContextHeader() {, +		return this.addApplicationContextHeader;, +	}, +, +	public void setAddApplicationContextHeader(boolean addApplicationContextHeader) {, +		this.addApplicationContextHeader = addApplicationContextHeader;, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +			return new ApplicationContextHeaderFilter(context);, +		}, +, +	}, +, +	/**, +	 * {@link OncePerRequestFilter} to add the {@literal X-Application-Context} if, +	 * required., +	 */, +	private static class ApplicationContextHeaderFilter extends OncePerRequestFilter {, +, +		private final ApplicationContext applicationContext;, +, +		private ManagementServerProperties properties;, +, +		public ApplicationContextHeaderFilter(ApplicationContext applicationContext) {, +			this.applicationContext = applicationContext;, +		}, +			if (this.properties == null) {, +				this.properties = this.applicationContext, +						.getBean(ManagementServerProperties.class);, +			}, +			if (this.properties.getAddApplicationContextHeader()) {, +				response.addHeader("X-Application-Context",, +						this.applicationContext.getId());, +			}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerProperties.java, +	private boolean addApplicationContextHeader = true;, +, +	public boolean getAddApplicationContextHeader() {, +		return this.addApplicationContextHeader;]