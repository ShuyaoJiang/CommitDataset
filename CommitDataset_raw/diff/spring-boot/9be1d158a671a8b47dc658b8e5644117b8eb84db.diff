[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.servlet.HandlerInterceptor;, +import static org.hamcrest.Matchers.hasItemInArray;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +		this.context.refresh();, +		RequestMappingHandlerMapping mapping = this.context, +				.getBean(RequestMappingHandlerMapping.class);, +		HandlerInterceptor[] interceptors = mapping.getHandler(, +				new MockHttpServletRequest()).getInterceptors();, +		assertThat(interceptors,, +				hasItemInArray(instanceOf(DeviceResolverHandlerInterceptor.class)));, +		public MyController controller() {, +			return new MyController();, +	}, +, +	@Controller, +	protected static class MyController {, +, +		@RequestMapping("/"), +		public void test() {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.servlet.HandlerInterceptor;, +import static org.hamcrest.Matchers.hasItemInArray;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +		this.context.refresh();, +		RequestMappingHandlerMapping mapping = this.context, +				.getBean(RequestMappingHandlerMapping.class);, +		HandlerInterceptor[] interceptors = mapping.getHandler(, +				new MockHttpServletRequest()).getInterceptors();, +		assertThat(interceptors,, +				hasItemInArray(instanceOf(DeviceResolverHandlerInterceptor.class)));, +		public MyController controller() {, +			return new MyController();, +	}, +, +	@Controller, +	protected static class MyController {, +, +		@RequestMapping("/"), +		public void test() {, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/SitePreferenceAutoConfigurationTests.java, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.stereotype.Controller;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.servlet.HandlerInterceptor;, +import static org.hamcrest.Matchers.hasItemInArray;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, + * @author Andy Wilkinson, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(Config.class, WebMvcAutoConfiguration.class,, +		this.context.refresh();, +		RequestMappingHandlerMapping mapping = this.context, +				.getBean(RequestMappingHandlerMapping.class);, +		HandlerInterceptor[] interceptors = mapping.getHandler(, +				new MockHttpServletRequest()).getInterceptors();, +		assertThat(interceptors,, +				hasItemInArray(instanceOf(SitePreferenceHandlerInterceptor.class)));, +		public MyController controller() {, +			return new MyController();, +	}, +, +	@Controller, +	protected static class MyController {, +, +		@RequestMapping("/"), +		public void test() {, +]