[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationJedisTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +	private final ApplicationContextRunner runner = new ApplicationContextRunner(), +			.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class));, +		this.runner.withPropertyValues("spring.redis.host:foo", "spring.redis.database:1"), +				.run((context) -> {, +					JedisConnectionFactory cf = context, +							.getBean(JedisConnectionFactory.class);, +				});, +		this.runner.withUserConfiguration(CustomConfiguration.class).run((context) -> {, +			JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class);, +		});, +		this.runner, +				.withPropertyValues("spring.redis.host:foo",, +						"spring.redis.url:redis://user:password@example:33"), +				.run((context) -> {, +					JedisConnectionFactory cf = context, +							.getBean(JedisConnectionFactory.class);, +				});, +		this.runner, +				.withPropertyValues("spring.redis.host:foo", "spring.redis.password:xyz",, +						"spring.redis.url:rediss://user:password@example:33"), +				.run((context) -> {, +					JedisConnectionFactory cf = context, +							.getBean(JedisConnectionFactory.class);, +				});, +		this.runner.withPropertyValues("spring.redis.url:redis://:pass:word@example:33"), +				.run((context) -> {, +					assertThat(, +							context.getBean(JedisConnectionFactory.class).getHostName()), +					assertThat(context.getBean(JedisConnectionFactory.class).getPort()), +					assertThat(, +							context.getBean(JedisConnectionFactory.class).getPassword()), +				});, +		this.runner, +				.withPropertyValues("spring.redis.url:redis://user::pass:word@example:33"), +				.run((context) -> {, +					assertThat(, +							context.getBean(JedisConnectionFactory.class).getHostName()), +					assertThat(context.getBean(JedisConnectionFactory.class).getPort()), +					assertThat(, +							context.getBean(JedisConnectionFactory.class).getPassword()), +				});, +		this.runner.withPropertyValues("spring.redis.host:foo",, +				"spring.redis.jedis.pool.min-idle:1",, +				"spring.redis.jedis.pool.max-wait:2000").run((context) -> {, +					JedisConnectionFactory cf = context, +							.getBean(JedisConnectionFactory.class);, +				});, +		this.runner, +				.withPropertyValues("spring.redis.host:foo", "spring.redis.timeout:100"), +				.run((context) -> {, +					JedisConnectionFactory cf = context, +							.getBean(JedisConnectionFactory.class);, +				});, +		this.runner, +				.withPropertyValues("spring.redis.sentinel.master:mymaster",, +						"spring.redis.sentinel.nodes:127.0.0.1:26379,127.0.0.1:26380"), +				.run((context) -> assertThat(context.getBean(JedisConnectionFactory.class), +						.isRedisSentinelAware()).isTrue());, +		this.runner, +				.withPropertyValues("spring.redis.password=password",, +						"spring.redis.sentinel.master:mymaster",, +						"spring.redis.sentinel.nodes:127.0.0.1:26379,127.0.0.1:26380"), +				.run((context) -> assertThat(, +						context.getBean(JedisConnectionFactory.class).getPassword()), +								.isEqualTo("password"));, +		this.runner, +				.withPropertyValues(, +						"spring.redis.cluster.nodes=127.0.0.1:27379,127.0.0.1:27380"), +				.run((context) -> assertThat(context.getBean(JedisConnectionFactory.class), +						.getClusterConnection()).isNotNull());]