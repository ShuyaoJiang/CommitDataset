[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +@ConditionalOnBean(Clock.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +@ConditionalOnBean(Clock.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;, +			JestAutoConfiguration.class, JmxMetricsExportAutoConfiguration.class,, +			DatadogMetricsExportAutoConfiguration.class }, excludeName = {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +@ConditionalOnBean(Clock.class), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java, +import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;, +			JestAutoConfiguration.class, JmxMetricsExportAutoConfiguration.class,, +			DatadogMetricsExportAutoConfiguration.class }, excludeName = {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogMetricsExportAutoConfigurationTests.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.autoconfigure.metrics.export.datadog;, +, +import io.micrometer.core.instrument.Clock;, +import io.micrometer.datadog.DatadogConfig;, +import io.micrometer.datadog.DatadogMeterRegistry;, +import org.junit.Test;, +, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ApplicationContextRunner;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, +/**, + * Tests for {@link DatadogMetricsExportAutoConfiguration}, + *, + * @author Andy Wilkinson, + */, +public class DatadogMetricsExportAutoConfigurationTests {, +, +	private final ApplicationContextRunner runner = new ApplicationContextRunner(), +			.withConfiguration(, +					AutoConfigurations.of(DatadogMetricsExportAutoConfiguration.class));, +, +	@Test, +	public void backsOffWithoutAClock() {, +		this.runner.run((context) -> assertThat(context), +				.doesNotHaveBean(DatadogMeterRegistry.class));, +	}, +, +	@Test, +	public void failsWithoutAnApiKey() {, +		this.runner.withUserConfiguration(BaseConfiguration.class), +				.run((context) -> assertThat(context).hasFailed());, +	}, +, +	@Test, +	public void autoConfiguresItsConfigAndMeterRegistry() {, +		this.runner.withUserConfiguration(BaseConfiguration.class), +				.withPropertyValues("management.metrics.export.datadog.api-key=abcde"), +				.run((context) -> assertThat(context), +						.hasSingleBean(DatadogMeterRegistry.class), +						.hasSingleBean(DatadogConfig.class));, +	}, +, +	@Test, +	public void allowsCustomConfigToBeUsed() {, +		this.runner.withUserConfiguration(CustomConfigConfiguration.class), +				.run((context) -> assertThat(context), +						.hasSingleBean(DatadogMeterRegistry.class), +						.hasSingleBean(DatadogConfig.class).hasBean("customConfig"));, +	}, +, +	@Test, +	public void allowsCustomRegistryToBeUsed() {, +		this.runner.withUserConfiguration(CustomRegistryConfiguration.class), +				.withPropertyValues("management.metrics.export.datadog.api-key=abcde"), +				.run((context) -> assertThat(context), +						.hasSingleBean(DatadogMeterRegistry.class), +						.hasBean("customRegistry").hasSingleBean(DatadogConfig.class));, +	}, +, +	@Configuration, +	static class BaseConfiguration {]