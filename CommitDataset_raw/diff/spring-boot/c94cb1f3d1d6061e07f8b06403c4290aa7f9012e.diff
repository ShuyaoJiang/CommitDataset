[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING CORE, +	spring.beaninfo.ignore=true # Skip search of BeanInfo classes., +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING CORE, +	spring.beaninfo.ignore=true # Skip search of BeanInfo classes., +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +		configureIgnoreBeanInfo(environment);, +	private void configureIgnoreBeanInfo(ConfigurableEnvironment environment) {, +		if (System.getProperty(, +				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == null) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					"spring.beaninfo.");, +			Boolean ignore = resolver.getProperty("ignore", Boolean.class, Boolean.TRUE);, +			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,, +					ignore.toString());, +		}, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING CORE, +	spring.beaninfo.ignore=true # Skip search of BeanInfo classes., +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +		configureIgnoreBeanInfo(environment);, +	private void configureIgnoreBeanInfo(ConfigurableEnvironment environment) {, +		if (System.getProperty(, +				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == null) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					"spring.beaninfo.");, +			Boolean ignore = resolver.getProperty("ignore", Boolean.class, Boolean.TRUE);, +			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,, +					ignore.toString());, +		}, +	}, +, +++ b/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.beaninfo.ignore",, +    "type": "java.lang.Boolean",, +    "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",, +    "description": "Skip search of BeanInfo classes.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	# SPRING CORE, +	spring.beaninfo.ignore=true # Skip search of BeanInfo classes., +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +import org.springframework.beans.CachedIntrospectionResults;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, +		configureIgnoreBeanInfo(environment);, +	private void configureIgnoreBeanInfo(ConfigurableEnvironment environment) {, +		if (System.getProperty(, +				CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME) == null) {, +			RelaxedPropertyResolver resolver = new RelaxedPropertyResolver(environment,, +					"spring.beaninfo.");, +			Boolean ignore = resolver.getProperty("ignore", Boolean.class, Boolean.TRUE);, +			System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME,, +					ignore.toString());, +		}, +	}, +, +++ b/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +    "name": "spring.beaninfo.ignore",, +    "type": "java.lang.Boolean",, +    "sourceType": "org.springframework.boot.context.config.ConfigFileApplicationListener",, +    "description": "Skip search of BeanInfo classes.",, +    "defaultValue": true, +  },, +  {, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +import org.springframework.beans.CachedIntrospectionResults;, +		System.clearProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);, +	@Test, +	public void setIgnoreBeanInfoPropertyByDefault() throws Exception {, +		this.initializer.setSearchNames("testproperties");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		String property = System, +				.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);, +		assertThat(property, equalTo("true"));, +	}, +, +	@Test, +	public void disableIgnoreBeanInfoProperty() throws Exception {, +		this.initializer.setSearchNames("testproperties");, +		EnvironmentTestUtils.addEnvironment(this.environment,, +				"spring.beaninfo.ignore=false");, +		this.initializer.postProcessEnvironment(this.environment, this.application);, +		String property = System, +				.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME);, +		assertThat(property, equalTo("false"));, +	}, +]