[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata;, +		ConfigurationBeanFactoryMetadata beanFactoryMetadata = getBeanFactoryMetadata(, +				beanFactoryMetadata);, +			String prefix = extractPrefix(context, beanFactoryMetadata, beanName);, +	private ConfigurationBeanFactoryMetadata getBeanFactoryMetadata(, +		Map<String, ConfigurationBeanFactoryMetadata> beans = context, +				.getBeansOfType(ConfigurationBeanFactoryMetadata.class);, +			ConfigurationBeanFactoryMetadata beanFactoryMetadata) {, +		if (beanFactoryMetadata != null) {, +			beans.putAll(beanFactoryMetadata, +			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata;, +		ConfigurationBeanFactoryMetadata beanFactoryMetadata = getBeanFactoryMetadata(, +				beanFactoryMetadata);, +			String prefix = extractPrefix(context, beanFactoryMetadata, beanName);, +	private ConfigurationBeanFactoryMetadata getBeanFactoryMetadata(, +		Map<String, ConfigurationBeanFactoryMetadata> beans = context, +				.getBeansOfType(ConfigurationBeanFactoryMetadata.class);, +			ConfigurationBeanFactoryMetadata beanFactoryMetadata) {, +		if (beanFactoryMetadata != null) {, +			beans.putAll(beanFactoryMetadata, +			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {, +++ /dev/null, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/context/properties/ConfigurationPropertiesReportEndpoint.java, +import org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata;, +		ConfigurationBeanFactoryMetadata beanFactoryMetadata = getBeanFactoryMetadata(, +				beanFactoryMetadata);, +			String prefix = extractPrefix(context, beanFactoryMetadata, beanName);, +	private ConfigurationBeanFactoryMetadata getBeanFactoryMetadata(, +		Map<String, ConfigurationBeanFactoryMetadata> beans = context, +				.getBeansOfType(ConfigurationBeanFactoryMetadata.class);, +			ConfigurationBeanFactoryMetadata beanFactoryMetadata) {, +		if (beanFactoryMetadata != null) {, +			beans.putAll(beanFactoryMetadata, +			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {, +++ /dev/null, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationBeanFactoryMetadata.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.context.properties;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicReference;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * Utility class to memorize {@code @Bean} definition meta data during initialization of, + * the bean factory., + *, + * @author Dave Syer, + * @since 1.1.0, + */, +public class ConfigurationBeanFactoryMetadata implements BeanFactoryPostProcessor {, +, +	private ConfigurableListableBeanFactory beanFactory;, +, +	private final Map<String, FactoryMetadata> beansFactoryMetadata = new HashMap<>();, +, +	@Override, +	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory), +			throws BeansException {, +		this.beanFactory = beanFactory;, +		for (String name : beanFactory.getBeanDefinitionNames()) {, +			BeanDefinition definition = beanFactory.getBeanDefinition(name);, +			String method = definition.getFactoryMethodName();, +			String bean = definition.getFactoryBeanName();, +			if (method != null && bean != null) {, +				this.beansFactoryMetadata.put(name, new FactoryMetadata(bean, method));, +			}, +		}, +	}, +, +	public <A extends Annotation> Map<String, Object> getBeansWithFactoryAnnotation(, +			Class<A> type) {]