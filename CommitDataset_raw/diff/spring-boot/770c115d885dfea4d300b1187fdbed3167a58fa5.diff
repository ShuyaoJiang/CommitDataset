[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@ConditionalOnBean(DataSource.class), +	@ConditionalOnBean(DataSource.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +	@ConditionalOnBean(DataSource.class), +	@ConditionalOnBean(DataSource.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfigurationTests.java, +import org.springframework.batch.core.configuration.annotation.BatchConfigurer;, +import org.springframework.batch.core.explore.support.MapJobExplorerFactoryBean;, +import org.springframework.batch.core.launch.support.SimpleJobLauncher;, +import org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean;, +import org.springframework.batch.support.transaction.ResourcelessTransactionManager;, +		this.context.register(TestConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +	public void testNoDatabase() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		this.context.register(TestCustomConfiguration.class,, +				BatchAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertNotNull(this.context.getBean(JobLauncher.class));, +		JobExplorer explorer = this.context.getBean(JobExplorer.class);, +		assertNotNull(explorer);, +		assertEquals(0, explorer.getJobInstances("job", 0, 100).size());, +	}, +, +	@Test, +		this.context.register(JobConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +		this.context.register(JobConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +		this.context.register(TestConfiguration.class,, +				EmbeddedDataSourceConfiguration.class, BatchAutoConfiguration.class,, +	@TestAutoConfigurationPackage(City.class), +	protected static class TestCustomConfiguration implements BatchConfigurer {, +, +		private JobRepository jobRepository;, +		private MapJobRepositoryFactoryBean factory = new MapJobRepositoryFactoryBean();, +, +		@Override, +		public JobRepository getJobRepository() throws Exception {, +			if (this.jobRepository == null) {, +				this.factory.afterPropertiesSet();, +				this.jobRepository = (JobRepository) this.factory.getObject();, +			}, +			return this.jobRepository;, +		}, +, +		@Override, +		public PlatformTransactionManager getTransactionManager() throws Exception {, +			return new ResourcelessTransactionManager();, +		}, +, +		@Override, +		public JobLauncher getJobLauncher() throws Exception {, +			SimpleJobLauncher launcher = new SimpleJobLauncher();, +			launcher.setJobRepository(this.jobRepository);, +			return launcher;, +		}, +, +		@Bean, +		public JobExplorer jobExplorer() throws Exception {, +			MapJobExplorerFactoryBean explorer = new MapJobExplorerFactoryBean(, +					this.factory);, +			explorer.afterPropertiesSet();, +			return (JobExplorer) explorer.getObject();, +		}, +	}, +, +	@EnableBatchProcessing]