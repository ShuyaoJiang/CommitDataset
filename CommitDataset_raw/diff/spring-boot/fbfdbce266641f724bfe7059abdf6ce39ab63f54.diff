[+++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +[[production-ready-datasource-cache]], +=== Cache metrics, +The following metrics are exposed for each supported cache defined in your application:, +, +* The current size of the cache (`cache.xxx.size`), +* Hit ratio (`cache.xxx.hit.ratio`), +* Miss ratio (`cache.xxx.miss.ratio`), +, +NOTE: Cache providers do not expose the hit/miss ratio in a consistent way. While some, +expose an **aggregated** value (i.e. the hit ratio since the last time the stats were, +cleared), others expose a **temporal** value (i.e. the hit ratio of the last second)., +Check your caching provider documentation for more details., +, +If two different cache managers happen to define the same cache, the name of the cache, +is prefixed by the name of the `CacheManager` bean., +, +It is possible to override part or all of those defaults by registering a bean with a, +customized version of `CachePublicMetrics`. By default, Spring Boot provides cache, +statistics for EhCache, Hazelcast, Infinispan, JCache and Guava. You can add additional, +`CacheStatisticsProvider` beans if your favorite caching library isn't supported out of, +the box. See `CacheStatisticsAutoConfiguration` for examples., +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +[[production-ready-datasource-cache]], +=== Cache metrics, +The following metrics are exposed for each supported cache defined in your application:, +, +* The current size of the cache (`cache.xxx.size`), +* Hit ratio (`cache.xxx.hit.ratio`), +* Miss ratio (`cache.xxx.miss.ratio`), +, +NOTE: Cache providers do not expose the hit/miss ratio in a consistent way. While some, +expose an **aggregated** value (i.e. the hit ratio since the last time the stats were, +cleared), others expose a **temporal** value (i.e. the hit ratio of the last second)., +Check your caching provider documentation for more details., +, +If two different cache managers happen to define the same cache, the name of the cache, +is prefixed by the name of the `CacheManager` bean., +, +It is possible to override part or all of those defaults by registering a bean with a, +customized version of `CachePublicMetrics`. By default, Spring Boot provides cache, +statistics for EhCache, Hazelcast, Infinispan, JCache and Guava. You can add additional, +`CacheStatisticsProvider` beans if your favorite caching library isn't supported out of, +the box. See `CacheStatisticsAutoConfiguration` for examples., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +[[boot-features-caching]], +== Caching, +, +The Spring Framework provides support for transparently adding caching into an, +application. At its core, the abstraction applies caching to methods, reducing thus the, +number of executions based on the information available in the cache. The caching logic, +is applied transparently without any interference to the invoker., +, +NOTE: Check the {spring-reference}/#cache[relevant section] of the Spring Framework, +reference for more details., +, +In a nutshell, adding caching to an operation of your service is as easy as adding the, +relevant annotation to its method:, +, +[source,java,indent=0], +----, +	import javax.cache.annotation.CacheResult;, +, +	import org.springframework.stereotype.Component;, +, +	@Component, +	public class MathService {, +, +		@CacheResult, +		public int computePiDecimal(int i) { ... }, +, +	}, +----, +, +NOTE: You can either use the standard JSR-107 (JCache) annotations or Spring's own, +caching annotations transparently. We strongly advice you however to not mix and match, +them., +, +TIP: It is also possible to {spring-reference}/#cache-annotations-put[update] or, +{spring-reference}/#cache-annotations-evict[evict] data from the cache transparently., +, +=== Supported cache providers, +, +The cache abstraction does not provide an actual store and relies on a abstraction, +materialized by the `org.springframework.cache.Cache` and, +`org.springframework.cache.CacheManager` interfaces. Spring Boot auto-configures a, +suitable `CacheManager` according to the implementation as long as the caching support is, +enabled via the `@EnableCaching` annotation., +, +Spring Boot tries to detect the following providers (in that order):, +, +* <<boot-features-caching-provider-generic,Generic>>, +* <<boot-features-caching-provider-ehcache2,EhCache 2.x>>, +* <<boot-features-caching-provider-hazelcast,Hazelcast>>, +* <<boot-features-caching-provider-infinispan,Infinispan>>, +* <<boot-features-caching-provider-jcache,JCache (JSR-107)>>, +* <<boot-features-caching-provider-redis,Redis>>, +* <<boot-features-caching-provider-guava,Guava>>, +* <<boot-features-caching-provider-simple,Simple>>, +]