[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +instead of your application's primary configuration, a nested `@TestConfiguration` class, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +instead of your application's primary configuration, a nested `@TestConfiguration` class, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, + * An MBean contract to control and monitor a running {@code SpringApplication} via JMX., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +instead of your application's primary configuration, a nested `@TestConfiguration` class, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, + * An MBean contract to control and monitor a running {@code SpringApplication} via JMX., +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +				if (name.isNumericIndex(i)) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +instead of your application's primary configuration, a nested `@TestConfiguration` class, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, + * An MBean contract to control and monitor a running {@code SpringApplication} via JMX., +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +				if (name.isNumericIndex(i)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +	 * Return if the element in the name is indexed., +	 * Return if the element in the name is indexed and numeric., +	public boolean isNumericIndex(int elementIndex) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JpaBatchConfigurer.java, +	 * @param entityManagerFactory the entity manager factory (or {@code null}), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java, +		private ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses,, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +instead of your application's primary configuration, a nested `@TestConfiguration` class, +++ b/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java, + * An MBean contract to control and monitor a running {@code SpringApplication} via JMX., +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +				if (name.isNumericIndex(i)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +	 * Return if the element in the name is indexed., +	 * Return if the element in the name is indexed and numeric., +	public boolean isNumericIndex(int elementIndex) {, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySources.java, +	 * @return an {@link Iterable} containing newly adapted, +	 * @return an {@link Iterable} containing newly adapted]