[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import liquibase.servicelocator.ServiceLocator;, +import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;, +			ServiceLocator serviceLocator = ServiceLocator.getInstance();, +			serviceLocator.addPackageToScan(CommonsLoggingLiquibaseLogger.class, +					.getPackage().getName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import liquibase.servicelocator.ServiceLocator;, +import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;, +			ServiceLocator serviceLocator = ServiceLocator.getInstance();, +			serviceLocator.addPackageToScan(CommonsLoggingLiquibaseLogger.class, +					.getPackage().getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;, +import org.springframework.test.util.ReflectionTestUtils;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +, +	@Test, +	public void testLogger() throws Exception {, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				LiquibaseAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		SpringLiquibase liquibase = this.context.getBean(SpringLiquibase.class);, +		Object log = ReflectionTestUtils.getField(liquibase, "log");, +		assertThat(log, instanceOf(CommonsLoggingLiquibaseLogger.class));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java, +import liquibase.servicelocator.ServiceLocator;, +import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;, +			ServiceLocator serviceLocator = ServiceLocator.getInstance();, +			serviceLocator.addPackageToScan(CommonsLoggingLiquibaseLogger.class, +					.getPackage().getName());, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java, +import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;, +import org.springframework.test.util.ReflectionTestUtils;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertThat;, +, +	@Test, +	public void testLogger() throws Exception {, +		this.context.register(EmbeddedDataSourceConfiguration.class,, +				LiquibaseAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		SpringLiquibase liquibase = this.context.getBean(SpringLiquibase.class);, +		Object log = ReflectionTestUtils.getField(liquibase, "log");, +		assertThat(log, instanceOf(CommonsLoggingLiquibaseLogger.class));, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/liquibase/CommonsLoggingLiquibaseLogger.java, +package org.springframework.boot.liquibase;, +, +import liquibase.configuration.LiquibaseConfiguration;, +import liquibase.logging.LogLevel;, +import liquibase.logging.Logger;, +import liquibase.logging.core.AbstractLogger;, +import liquibase.logging.core.DefaultLoggerConfiguration;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +/**, + * Liqubase {@link Logger} that that delegates to an Apache Commons {@link Log}., + *, + * @author Michael Cramer, + * @author Phillip Webb, + * @since 1.2.0, + */, +public class CommonsLoggingLiquibaseLogger extends AbstractLogger {, +, +	public static final int PRIORITY = 10;, +, +	private Log logger;, +, +	@Override, +	public void setName(String name) {, +		this.logger = createLogger(name);, +	}, +, +	/**, +	 * Factory method used to create the logger., +	 * @param name the name of the logger, +	 * @return a {@link Log} instance, +	 */, +	protected Log createLogger(String name) {, +		return LogFactory.getLog(name);, +	}, +, +	@Override, +	public void setLogLevel(String logLevel, String logFile) {, +		super.setLogLevel(logLevel);, +	}, +, +	@Override, +	public void severe(String message) {, +		if (isEnabled(LogLevel.SEVERE)) {, +			this.logger.error(buildMessage(message));]