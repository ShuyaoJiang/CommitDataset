[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jmx.export.MBeanExporter;, +import org.springframework.jmx.support.JmxUtils;, + * @author Andy Wilkinson, +	@Autowired(required = false), +	private MBeanExporter mbeanExporter;, +, +		DataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());, +		excludeMBeanIfNecessary(dataSource, "dataSource");, +		return dataSource;, +	}, +, +	private void excludeMBeanIfNecessary(Object candidate, String beanName) {, +		if (this.mbeanExporter != null && JmxUtils.isMBean(candidate.getClass())) {, +			this.mbeanExporter.addExcludedBean(beanName);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java, + * Copyright 2012-2015 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.jmx.export.MBeanExporter;, +import org.springframework.jmx.support.JmxUtils;, + * @author Andy Wilkinson, +	@Autowired(required = false), +	private MBeanExporter mbeanExporter;, +, +		DataSource dataSource = dataSourceLookup.getDataSource(properties.getJndiName());, +		excludeMBeanIfNecessary(dataSource, "dataSource");, +		return dataSource;, +	}, +, +	private void excludeMBeanIfNecessary(Object candidate, String beanName) {, +		if (this.mbeanExporter != null && JmxUtils.isMBean(candidate.getClass())) {, +			this.mbeanExporter.addExcludedBean(beanName);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfigurationTests.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jdbc;, +, +import java.util.Set;, +, +import javax.naming.NamingException;, +import javax.sql.DataSource;, +, +import org.apache.commons.dbcp2.BasicDataSource;, +import org.junit.After;, +import org.junit.Test;, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.boot.test.EnvironmentTestUtils;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.jmx.export.MBeanExporter;, +import org.springframework.mock.jndi.SimpleNamingContextBuilder;, +, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasSize;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +, +/**, + * Tests for {@link JndiDataSourceAutoConfiguration}, + *, + * @author Andy Wilkinson, + */, +public class JndiDataSourceAutoConfigurationTests {, +, +	private AnnotationConfigApplicationContext context;, +, +	private SimpleNamingContextBuilder jndi;, +, +	@After, +	public void cleanup() {, +		if (this.jndi != null) {, +			this.jndi.clear();, +		}, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +	@Test, +	public void dataSourceIsAvailableFromJndi() throws IllegalStateException,, +			NamingException {, +		DataSource dataSource = new BasicDataSource();]