[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, +	/**, +	 * LDAP specification settings., +	 */, +	private final Map<String, String> baseEnvironment = new HashMap<>();, +, +	public Map<String, String> getBaseEnvironment() {, +		return this.baseEnvironment;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, +	/**, +	 * LDAP specification settings., +	 */, +	private final Map<String, String> baseEnvironment = new HashMap<>();, +, +	public Map<String, String> getBaseEnvironment() {, +		return this.baseEnvironment;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java, + * @author Stephane Nicoll, +	public void contextSourceWithDefaultUrl() {, +			LdapContextSource contextSource = context.getBean(LdapContextSource.class);, +			assertThat(contextSource.isAnonymousReadOnly()).isFalse();, +	public void contextSourceWithSingleUrl() {, +	public void contextSourceWithSeveralUrls() {, +	public void contextSourceWithExtraCustomization() {, +						"spring.ldap.password:secret",, +						"spring.ldap.anonymous-read-only:true",, +					LdapContextSource contextSource = context.getBean(, +							LdapContextSource.class);, +					assertThat(contextSource.getUserDn()).isEqualTo("root");, +					assertThat(contextSource.getPassword()).isEqualTo("secret");, +					assertThat(contextSource.isAnonymousReadOnly()).isTrue();, +					assertThat(contextSource.getBaseLdapPathAsString()).isEqualTo(, +							"cn=SpringDevelopers");, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfiguration.java, +		source.setAnonymousReadOnly(this.properties.getAnonymousReadOnly());, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/ldap/LdapProperties.java, +	/**, +	 * LDAP specification settings., +	 */, +	private final Map<String, String> baseEnvironment = new HashMap<>();, +, +	public Map<String, String> getBaseEnvironment() {, +		return this.baseEnvironment;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java, + * @author Stephane Nicoll, +	public void contextSourceWithDefaultUrl() {, +			LdapContextSource contextSource = context.getBean(LdapContextSource.class);, +			assertThat(contextSource.isAnonymousReadOnly()).isFalse();, +	public void contextSourceWithSingleUrl() {, +	public void contextSourceWithSeveralUrls() {, +	public void contextSourceWithExtraCustomization() {, +						"spring.ldap.password:secret",, +						"spring.ldap.anonymous-read-only:true",, +					LdapContextSource contextSource = context.getBean(, +							LdapContextSource.class);, +					assertThat(contextSource.getUserDn()).isEqualTo("root");, +					assertThat(contextSource.getPassword()).isEqualTo("secret");, +					assertThat(contextSource.isAnonymousReadOnly()).isTrue();, +					assertThat(contextSource.getBaseLdapPathAsString()).isEqualTo(, +							"cn=SpringDevelopers");, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	spring.ldap.anonymous-read-only=false # Whether read-only operations should use an anonymous environment., +	spring.ldap.password= # Login password of the server., +	spring.ldap.urls= # LDAP URLs of the server., +	spring.ldap.username= # Login username of the server.]