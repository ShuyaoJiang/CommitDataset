[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.data.couchbase.repository.config.RepositoryOperationsMapping;, + * @author Stephane Nicoll, +@ConditionalOnBean(RepositoryOperationsMapping.class), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.data.couchbase.repository.config.RepositoryOperationsMapping;, + * @author Stephane Nicoll, +@ConditionalOnBean(RepositoryOperationsMapping.class), +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseRepositoriesAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;, +import org.springframework.boot.test.EnvironmentTestUtils;, + * @author Stephane Nicoll, +		if (this.context != null) {, +	public void couchbaseNotAvailable() throws Exception {, +		load(CouchbaseNotAvailableConfiguration.class);, +		assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0);, +	@Test, +	public void defaultRepository() throws Exception {, +		load(DefaultConfiguration.class);, +		assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(1);, +	}, +, +	@Test, +	public void disableRepository() {, +		load(DefaultConfiguration.class, "spring.data.couchbase.repositories.enabled=false");, +		assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0);, +	}, +, +	@Test, +	public void noRepositoryAvailable() throws Exception {, +		load(NoRepositoryConfiguration.class);, +		assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0);, +	}, +, +	private void load(Class<?> config, String... environment) {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(context, environment);, +		if (config != null) {, +			context.register(config);, +		}, +		context.register(PropertyPlaceholderAutoConfiguration.class,, +				CouchbaseAutoConfiguration.class,, +				CouchbaseRepositoriesAutoConfiguration.class);, +		context.refresh();, +		this.context = context;, +	}, +, +, +	static class CouchbaseNotAvailableConfiguration {, +, +	}, +, +, +	@Configuration, +	@TestAutoConfigurationPackage(City.class), +	@Import(CouchbaseTestConfiguration.class), +	static class DefaultConfiguration {, +	@Import(CouchbaseTestConfiguration.class), +	protected static class NoRepositoryConfiguration {]