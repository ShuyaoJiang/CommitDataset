[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {, +			if (conditionAndOutcomes.isFullMatch()) {, +				conditionAndOutcomes.forEach((conditionAndOutcome) -> this.positiveMatches, +						.add(name, new MessageAndCondition(conditionAndOutcome)));, +			else {, +				this.negativeMatches.put(name,, +						new MessageAndConditions(conditionAndOutcomes));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {, +			if (conditionAndOutcomes.isFullMatch()) {, +				conditionAndOutcomes.forEach((conditionAndOutcome) -> this.positiveMatches, +						.add(name, new MessageAndCondition(conditionAndOutcome)));, +			else {, +				this.negativeMatches.put(name,, +						new MessageAndConditions(conditionAndOutcomes));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {, +			if (conditionAndOutcomes.isFullMatch()) {, +				conditionAndOutcomes.forEach((conditionAndOutcome) -> this.positiveMatches, +						.add(name, new MessageAndCondition(conditionAndOutcome)));, +			else {, +				this.negativeMatches.put(name,, +						new MessageAndConditions(conditionAndOutcomes));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {, +			if (conditionAndOutcomes.isFullMatch()) {, +				conditionAndOutcomes.forEach((conditionAndOutcome) -> this.positiveMatches, +						.add(name, new MessageAndCondition(conditionAndOutcome)));, +			else {, +				this.negativeMatches.put(name,, +						new MessageAndConditions(conditionAndOutcomes));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		candidates.forEach((name, dataSource) -> {, +			if (!(dataSource instanceof AbstractRoutingDataSource)) {, +				dataSources.put(name, dataSource);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {, +			if (conditionAndOutcomes.isFullMatch()) {, +				conditionAndOutcomes.forEach((conditionAndOutcome) -> this.positiveMatches, +						.add(name, new MessageAndCondition(conditionAndOutcome)));, +			else {, +				this.negativeMatches.put(name,, +						new MessageAndConditions(conditionAndOutcomes));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		beans.forEach((name, source) -> composite.addHealthIndicator(name,, +				createHealthIndicator(source)));, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/jdbc/DataSourceHealthIndicatorAutoConfiguration.java, + * Copyright 2012-2018 the original author or authors., +		candidates.forEach((name, dataSource) -> {, +			if (!(dataSource instanceof AbstractRoutingDataSource)) {, +				dataSources.put(name, dataSource);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java, +		for (Map.Entry<String, PropertyValueDescriptor> entry : descriptors.entrySet()) {, +			if (entry.getValue() != null) {, +				return new PropertySummaryDescriptor(entry.getKey(),, +						entry.getValue().getValue());, +			}, +		}, +		return null;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/condition/ConditionsReportEndpoint.java, +			report.getConditionAndOutcomesBySource().forEach(, +					(source, conditionAndOutcomes) -> add(source, conditionAndOutcomes));, +		private void add(String source, ConditionAndOutcomes conditionAndOutcomes) {]