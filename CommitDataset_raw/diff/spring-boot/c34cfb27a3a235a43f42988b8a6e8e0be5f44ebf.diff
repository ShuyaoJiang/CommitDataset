[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import java.io.InputStream;, +	/**, +	 * {@link BeanSerializerModifier} to return only relevant configuration properties., +	 */, +			String parentType = beanDesc.getType().getRawClass().getName();, +			return (setter != null), +					|| ClassUtils.getPackageName(parentType).equals(, +		private final String metadataLocations;, +, +		private final Map<String, Set<String>> matched = new HashMap<String, Set<String>>();, +, +			return this.matched.get(prefix) != null;, +			HashSet<String> keys = new HashSet<String>();, +			for (String key : getKeys()) {, +				if (key.length() > prefix.length(), +						&& key.startsWith(prefix), +						&& ".".equals(key.substring(prefix.length(), prefix.length() + 1))) {, +					keys.add(key.substring(prefix.length() + 1));, +				}, +			}, +			return (keys.isEmpty() ? null : keys);, +		}, +		private Set<String> getKeys() {, +			if (this.keys != null) {, +				return this.keys;, +			}, +			try {, +			catch (IOException ex) {, +				logger.warn("Could not deserialize config properties metadata", ex);, +			return this.keys;, +		@SuppressWarnings("unchecked"), +			InputStream inputStream = resource.getInputStream();, +			Map<String, Object> map = mapper.readValue(inputStream, Map.class);, +				catch (Exception ex) {, +					logger.warn("Could not parse config properties metadata", ex);, +		@SuppressWarnings("unchecked"), +			String prefix = (key.contains(".") ? StringUtils.split(key, ".")[0] : key);, +			String suffix = (key.length() > prefix.length() ? key.substring(prefix, +					.length() + 1) : null);, +			catch (Exception ex) {, +						+ ex.getMessage());, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import java.io.InputStream;, +	/**, +	 * {@link BeanSerializerModifier} to return only relevant configuration properties., +	 */, +			String parentType = beanDesc.getType().getRawClass().getName();, +			return (setter != null), +					|| ClassUtils.getPackageName(parentType).equals(, +		private final String metadataLocations;, +, +		private final Map<String, Set<String>> matched = new HashMap<String, Set<String>>();, +, +			return this.matched.get(prefix) != null;, +			HashSet<String> keys = new HashSet<String>();, +			for (String key : getKeys()) {, +				if (key.length() > prefix.length(), +						&& key.startsWith(prefix), +						&& ".".equals(key.substring(prefix.length(), prefix.length() + 1))) {, +					keys.add(key.substring(prefix.length() + 1));, +				}, +			}, +			return (keys.isEmpty() ? null : keys);, +		}, +		private Set<String> getKeys() {, +			if (this.keys != null) {, +				return this.keys;, +			}, +			try {, +			catch (IOException ex) {, +				logger.warn("Could not deserialize config properties metadata", ex);, +			return this.keys;, +		@SuppressWarnings("unchecked"), +			InputStream inputStream = resource.getInputStream();, +			Map<String, Object> map = mapper.readValue(inputStream, Map.class);, +				catch (Exception ex) {, +					logger.warn("Could not parse config properties metadata", ex);, +		@SuppressWarnings("unchecked"), +			String prefix = (key.contains(".") ? StringUtils.split(key, ".")[0] : key);, +			String suffix = (key.length() > prefix.length() ? key.substring(prefix, +					.length() + 1) : null);, +			catch (Exception ex) {, +						+ ex.getMessage());, +, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMappingCustomizer.java, + * @since 1.2.0, +	/**, +	 * Customize the specified {@link EndpointHandlerMapping}, +	 * @param mapping the {@link EndpointHandlerMapping} to customize, +	 */, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import java.io.InputStream;, +	/**, +	 * {@link BeanSerializerModifier} to return only relevant configuration properties., +	 */, +			String parentType = beanDesc.getType().getRawClass().getName();]