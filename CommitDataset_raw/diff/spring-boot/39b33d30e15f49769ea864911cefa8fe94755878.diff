[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * Class that can be used to bootstrap and launch a Spring application from a Java main, + *   SpringApplication application = new SpringApplication(MyApplication.class);, + *   // ... customize application settings here, + *   application.run(args), + * possible to set {@link SpringApplication} properties dynamically, like additional, + * sources ("spring.main.sources" - a CSV list) the flag to indicate a web environment, +	private final Object[] primarySources;, +, +	private Set<Object> additionalSources = new LinkedHashSet<>();, +	 * beans from the specified primary sources (see {@link SpringApplication class-level}, +	 * @param primarySources the primary bean sources, +	 * @see #setSources(Set), +	public SpringApplication(Object... primarySources) {, +		initialize(primarySources);, +		this.primarySources = primarySources;, +	 * beans from the specified primary sources (see {@link SpringApplication class-level}, +	 * @param primarySources the primary bean sources, +	 * @see #setSources(Set), +	public SpringApplication(ResourceLoader resourceLoader, Object... primarySources) {, +		this.primarySources = primarySources;, +		initialize(primarySources);, +		Set<Object> sources = getAllSources();, +	 * <p>, +	 * Sources set here will be used in addition to any primary sources set in the, +	 * constructor., +	 * @see #getAllSources(), +		return this.additionalSources;, +	 * Set additional sources that will be used to create an ApplicationContext. A source, +	 * can be: a class, class name, package, package name, or an XML resource location., +	 * Sources set here will be used in addition to any primary sources set in the, +	 * constructor., +	 * @see #getAllSources(), +		this.additionalSources = new LinkedHashSet<>(sources);, +	}, +, +	/**, +	 * Return an immutable set of all the sources that will be added to an, +	 * ApplicationContext when {@link #run(String...)} is called. This method combines any, +	 * primary sources specified in the constructor with any additional ones that have, +	 * been {@link #setSources(Set) explicitly set}., +	 * @return an immutable set of all sources, +	 */, +	public Set<Object> getAllSources() {, +		Set<Object> allSources = new LinkedHashSet<>();, +		if (!ObjectUtils.isEmpty(this.primarySources)) {, +			allSources.addAll(Arrays.asList(this.primarySources));, +		}, +		allSources.addAll(this.additionalSources);, +		return Collections.unmodifiableSet(allSources);, +	 * @param primarySource the primary source to load, +	public static ConfigurableApplicationContext run(Object primarySource,, +			String... args) {, +		return run(new Object[] { primarySource }, args);, +	 * @param primarySources the primary sources to load, +	public static ConfigurableApplicationContext run(Object[] primarySources,, +			String[] args) {, +		return new SpringApplication(primarySources).run(args);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, + * Class that can be used to bootstrap and launch a Spring application from a Java main, + *   SpringApplication application = new SpringApplication(MyApplication.class);, + *   // ... customize application settings here, + *   application.run(args), + * possible to set {@link SpringApplication} properties dynamically, like additional, + * sources ("spring.main.sources" - a CSV list) the flag to indicate a web environment, +	private final Object[] primarySources;, +, +	private Set<Object> additionalSources = new LinkedHashSet<>();, +	 * beans from the specified primary sources (see {@link SpringApplication class-level}, +	 * @param primarySources the primary bean sources, +	 * @see #setSources(Set), +	public SpringApplication(Object... primarySources) {, +		initialize(primarySources);, +		this.primarySources = primarySources;, +	 * beans from the specified primary sources (see {@link SpringApplication class-level}, +	 * @param primarySources the primary bean sources, +	 * @see #setSources(Set), +	public SpringApplication(ResourceLoader resourceLoader, Object... primarySources) {, +		this.primarySources = primarySources;, +		initialize(primarySources);, +		Set<Object> sources = getAllSources();, +	 * <p>, +	 * Sources set here will be used in addition to any primary sources set in the, +	 * constructor., +	 * @see #getAllSources(), +		return this.additionalSources;, +	 * Set additional sources that will be used to create an ApplicationContext. A source, +	 * can be: a class, class name, package, package name, or an XML resource location., +	 * Sources set here will be used in addition to any primary sources set in the, +	 * constructor., +	 * @see #getAllSources(), +		this.additionalSources = new LinkedHashSet<>(sources);, +	}, +, +	/**, +	 * Return an immutable set of all the sources that will be added to an, +	 * ApplicationContext when {@link #run(String...)} is called. This method combines any, +	 * primary sources specified in the constructor with any additional ones that have, +	 * been {@link #setSources(Set) explicitly set}., +	 * @return an immutable set of all sources]