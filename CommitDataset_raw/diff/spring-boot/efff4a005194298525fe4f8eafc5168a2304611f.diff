[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +	 * @param initializrService the initializr service, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +	 * @param initializrService the initializr service, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java, + * Simple utility class to build an ANSI string when supported by the {@link Terminal}., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +	 * @param initializrService the initializr service, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java, + * Simple utility class to build an ANSI string when supported by the {@link Terminal}., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/CommandCompleter.java, +			AggregateCompleter argumentCompleters = new AggregateCompleter(, +					argumentCompleters);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +	 * @param initializrService the initializr service, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java, + * Simple utility class to build an ANSI string when supported by the {@link Terminal}., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/CommandCompleter.java, +			AggregateCompleter argumentCompleters = new AggregateCompleter(, +					argumentCompleters);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java, +	 * Final handle an interrupt signal (CTRL-C)., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfigurationTests.java, +	public void propertyPlaceholders() throws Exception {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfigurationTests.java, +		this.context.register(Config.class, MultiServerPropertiesBeanConfig.class,, +	protected static class MultiServerPropertiesBeanConfig {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfigurationTests.java, +		public TomcatWebSocketContainerCustomizer tomcatCustomizer() {, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java, +				"Initialize a new project using Spring " + "Initializr (start.spring.io)",, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +	 * @param initializrService the initializr service, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/AnsiString.java, + * Simple utility class to build an ANSI string when supported by the {@link Terminal}., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/CommandCompleter.java, +			AggregateCompleter argumentCompleters = new AggregateCompleter(, +					argumentCompleters);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java, +	 * Final handle an interrupt signal (CTRL-C)., +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java]