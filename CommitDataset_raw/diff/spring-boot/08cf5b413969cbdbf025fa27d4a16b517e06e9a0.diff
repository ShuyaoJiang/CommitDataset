[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Properties;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.MapPropertySource;, +	private Map<String, Object> defaultProperties;, +, +	private Set<String> profiles = new HashSet<String>();, +		for (String profile : this.profiles) {, +			environment.addActiveProfile(profile);, +		}, +		if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {, +			environment.getPropertySources().addLast(, +					new MapPropertySource("defaultProperties", this.defaultProperties));, +		if (this.addCommandLineProperties) {, +	 * Set default environment properties which will be used in addition to those in the, +	 * existing {@link Environment}., +	 * @param defaultProperties the additional properties to set, +	public void setDefaultProperties(Map<String, Object> defaultProperties) {, +		this.defaultProperties = defaultProperties;, +	}, +, +	/**, +	 * Convenient alternative to {@link #setDefaultProperties(Map)}., +	 * , +	 * @param defaultProperties some {@link Properties}, +	 */, +	public void setDefaultProperties(Properties defaultProperties) {, +		this.defaultProperties = new HashMap<String, Object>();, +		for (Object key : Collections.list(defaultProperties.propertyNames())) {, +			this.defaultProperties.put((String) key, defaultProperties.get(key));, +		}, +	}, +, +	/**, +	 * Set additional profile values to use (on top of those set in system or command line, +	 * properties)., +	 * , +	 * @param profiles the additional profiles to set, +	 */, +	public void setAdditionalProfiles(Collection<String> profiles) {, +		this.profiles = new LinkedHashSet<String>(profiles);, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Properties;, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.MapPropertySource;, +	private Map<String, Object> defaultProperties;, +, +	private Set<String> profiles = new HashSet<String>();, +		for (String profile : this.profiles) {, +			environment.addActiveProfile(profile);, +		}, +		if (this.defaultProperties != null && !this.defaultProperties.isEmpty()) {, +			environment.getPropertySources().addLast(, +					new MapPropertySource("defaultProperties", this.defaultProperties));, +		if (this.addCommandLineProperties) {, +	 * Set default environment properties which will be used in addition to those in the, +	 * existing {@link Environment}., +	 * @param defaultProperties the additional properties to set, +	public void setDefaultProperties(Map<String, Object> defaultProperties) {, +		this.defaultProperties = defaultProperties;, +	}, +, +	/**, +	 * Convenient alternative to {@link #setDefaultProperties(Map)}., +	 * , +	 * @param defaultProperties some {@link Properties}, +	 */, +	public void setDefaultProperties(Properties defaultProperties) {, +		this.defaultProperties = new HashMap<String, Object>();, +		for (Object key : Collections.list(defaultProperties.propertyNames())) {, +			this.defaultProperties.put((String) key, defaultProperties.get(key));, +		}, +	}, +, +	/**, +	 * Set additional profile values to use (on top of those set in system or command line, +	 * properties)., +	 * , +	 * @param profiles the additional profiles to set, +	 */, +	public void setAdditionalProfiles(Collection<String> profiles) {, +		this.profiles = new LinkedHashSet<String>(profiles);, +++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.Map;, +	private Map<String, Object> defaultProperties = new LinkedHashMap<String, Object>();, +	private Set<String> additionalProfiles = new LinkedHashSet<String>();, +		child.properties(this.defaultProperties).environment(this.environment), +				.additionalProfiles(this.additionalProfiles);, +					.properties(this.defaultProperties).environment(this.environment);]