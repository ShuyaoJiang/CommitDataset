[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +	@Import(CouchbaseConfiguration.class), +	static class DefaultCouchbaseConfiguration {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +import org.springframework.context.annotation.Import;, +	@Import(CouchbaseConfiguration.class), +	static class DefaultCouchbaseConfiguration {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseConfiguration.java, +/*, + * Copyright 2012-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.couchbase;, +, +import java.util.List;, +import java.util.function.BiFunction;, +, +import com.couchbase.client.core.env.KeyValueServiceConfig;, +import com.couchbase.client.core.env.QueryServiceConfig;, +import com.couchbase.client.core.env.ViewServiceConfig;, +import com.couchbase.client.java.Bucket;, +import com.couchbase.client.java.Cluster;, +import com.couchbase.client.java.CouchbaseCluster;, +import com.couchbase.client.java.cluster.ClusterInfo;, +import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;, +, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties.Endpoints.CouchbaseService;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.DependsOn;, +import org.springframework.context.annotation.Primary;, +, +/**, + * Support class to configure Couchbase based on {@link CouchbaseProperties}., + *, + * @author Stephane Nicoll, + * @since 2.1.0, + */, +@Configuration, +public class CouchbaseConfiguration {, +, +	private final CouchbaseProperties properties;, +, +	public CouchbaseConfiguration(CouchbaseProperties properties) {, +		this.properties = properties;, +	}, +, +	@Bean, +	@Primary, +	public DefaultCouchbaseEnvironment couchbaseEnvironment() {, +		return initializeEnvironmentBuilder(this.properties).build();, +	}, +, +	@Bean, +	@Primary, +	public Cluster couchbaseCluster() {, +		return CouchbaseCluster.create(couchbaseEnvironment(),, +				determineBootstrapHosts());, +	}, +, +	/**, +	 * Determine the Couchbase nodes to bootstrap from., +	 * @return the Couchbase nodes to bootstrap from, +	 */, +	protected List<String> determineBootstrapHosts() {, +		return this.properties.getBootstrapHosts();, +	}, +, +	@Bean, +	@Primary, +	@DependsOn("couchbaseClient"), +	public ClusterInfo couchbaseClusterInfo() {, +		return couchbaseCluster(), +				.clusterManager(this.properties.getBucket().getName(),, +						this.properties.getBucket().getPassword()), +				.info();, +	}, +, +	@Bean, +	@Primary, +	public Bucket couchbaseClient() {, +		return couchbaseCluster().openBucket(this.properties.getBucket().getName(),, +				this.properties.getBucket().getPassword());, +	}, +, +	/**]