[+++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +|`level`, +|String, +|The level of deprecation, can be either `warning` (default) or `error`. When a property, + has a `warning` deprecation level it should still be bound in the environment. When it, + has an `error` deprecation level however, the property is no longer managed and will not, + be bound., +, +NOTE: Prior to Spring Boot 1.3, a single `deprecated` boolean attribute can be used, +instead of the `deprecation` element. This is still supported in a deprecated fashion and, +should no longer be used. If no reason and replacement are available, an empty, +`deprecation` object should be set., +NOTE: There is no way to set a `level` as `warning` is always assumed since code is still, +handling the property., +, +meta-data will go away as well. If you want to keep a hint, adding manual meta-data with, +an `error` deprecation level ensures that users are still informed about that property and, +is particularly useful when a `replacement` is provided., +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +|`level`, +|String, +|The level of deprecation, can be either `warning` (default) or `error`. When a property, + has a `warning` deprecation level it should still be bound in the environment. When it, + has an `error` deprecation level however, the property is no longer managed and will not, + be bound., +, +NOTE: Prior to Spring Boot 1.3, a single `deprecated` boolean attribute can be used, +instead of the `deprecation` element. This is still supported in a deprecated fashion and, +should no longer be used. If no reason and replacement are available, an empty, +`deprecation` object should be set., +NOTE: There is no way to set a `level` as `warning` is always assumed since code is still, +handling the property., +, +meta-data will go away as well. If you want to keep a hint, adding manual meta-data with, +an `error` deprecation level ensures that users are still informed about that property and, +is particularly useful when a `replacement` is provided., +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/Deprecation.java, + * Copyright 2012-2017 the original author or authors., +	private Level level = Level.WARNING;, +, +	 * Define the {@link Level} of deprecation., +	 * @return the deprecation level, +	 */, +	public Level getLevel() {, +		return this.level;, +	}, +, +	public void setLevel(Level level) {, +		this.level = level;, +	}, +, +	/**, +		return "Deprecation{" + "level='" + this.level + '\'' + ", reason='", +				+ this.reason + '\'' + ", replacement='" + this.replacement + '\'' + '}';, +	}, +, +	/**, +	 * Define the deprecation level., +	 */, +	public enum Level {, +, +		/**, +		 * The property is still bound., +		 */, +		WARNING,, +, +		/**, +		 * The property has been removed and is no longer bound., +		 */, +		ERROR, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +|`level`, +|String, +|The level of deprecation, can be either `warning` (default) or `error`. When a property, + has a `warning` deprecation level it should still be bound in the environment. When it, + has an `error` deprecation level however, the property is no longer managed and will not, + be bound., +, +NOTE: Prior to Spring Boot 1.3, a single `deprecated` boolean attribute can be used, +instead of the `deprecation` element. This is still supported in a deprecated fashion and, +should no longer be used. If no reason and replacement are available, an empty, +`deprecation` object should be set., +NOTE: There is no way to set a `level` as `warning` is always assumed since code is still, +handling the property., +, +meta-data will go away as well. If you want to keep a hint, adding manual meta-data with, +an `error` deprecation level ensures that users are still informed about that property and, +is particularly useful when a `replacement` is provided., +++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/Deprecation.java, + * Copyright 2012-2017 the original author or authors., +	private Level level = Level.WARNING;, +, +	 * Define the {@link Level} of deprecation., +	 * @return the deprecation level, +	 */, +	public Level getLevel() {, +		return this.level;, +	}, +]