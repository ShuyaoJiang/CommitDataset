[+++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, + * Copyright 2013-2015 the original author or authors., + * @author Andy Wilkinson, +	private static final Map<Class<?>, Set<String>> NUMBER_KEYS = new ConcurrentHashMap<Class<?>, Set<String>>();, +	private final MetricRegistry registry;, +	private final Map<String, String> names = new HashMap<String, String>();, +	private final MultiValueMap<String, String> reverse = new LinkedMultiValueMap<String, String>();, +		if (!this.names.containsKey(metricName)) {, +		com.codahale.metrics.Metric metric = this.registry.getMetrics().get(, +				this.names.get(metricName));, +		return this.names.size();, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +		for (String key : this.reverse.get(name)) {, +			this.names.remove(name + "." + key);, +		this.reverse.remove(name);, +			return this.iterator.hasNext();, +			String name = this.iterator.next();, +		Set<String> result = NUMBER_KEYS.containsKey(metric.getClass()) ? NUMBER_KEYS, +			NUMBER_KEYS.put(metric.getClass(), result);, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, + * Copyright 2013-2015 the original author or authors., + * @author Andy Wilkinson, +	private static final Map<Class<?>, Set<String>> NUMBER_KEYS = new ConcurrentHashMap<Class<?>, Set<String>>();, +	private final MetricRegistry registry;, +	private final Map<String, String> names = new HashMap<String, String>();, +	private final MultiValueMap<String, String> reverse = new LinkedMultiValueMap<String, String>();, +		if (!this.names.containsKey(metricName)) {, +		com.codahale.metrics.Metric metric = this.registry.getMetrics().get(, +				this.names.get(metricName));, +		return this.names.size();, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +			this.names.put(metricName, name);, +			this.reverse.add(name, metricName);, +		for (String key : this.reverse.get(name)) {, +			this.names.remove(name + "." + key);, +		this.reverse.remove(name);, +			return this.iterator.hasNext();, +			String name = this.iterator.next();, +		Set<String> result = NUMBER_KEYS.containsKey(metric.getClass()) ? NUMBER_KEYS, +			NUMBER_KEYS.put(metric.getClass(), result);, +++ b/spring-boot-autoconfigure/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/pom.xml, +	<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/pom.xml, +		<version>1.2.3.BUILD-SNAPSHOT</version>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java, + * Copyright 2013-2015 the original author or authors., + * @author Andy Wilkinson, +	private static final Map<Class<?>, Set<String>> NUMBER_KEYS = new ConcurrentHashMap<Class<?>, Set<String>>();, +	private final MetricRegistry registry;, +	private final Map<String, String> names = new HashMap<String, String>();, +	private final MultiValueMap<String, String> reverse = new LinkedMultiValueMap<String, String>();, +		if (!this.names.containsKey(metricName)) {, +		com.codahale.metrics.Metric metric = this.registry.getMetrics().get(, +				this.names.get(metricName));, +		return this.names.size();, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +		this.names.put(name, name);, +		this.reverse.add(name, name);, +			this.names.put(metricName, name);]