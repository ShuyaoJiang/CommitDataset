[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			 * Set request attributes for IP address, Hostname, protocol and port used for, +			 * the request., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			 * Set request attributes for IP address, Hostname, protocol and port used for, +			 * the request., +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +	private static final String[] LOCATION_PATTERN_PREFIXES = { CLASSPATH_ALL_URL_PREFIX,, +			CLASSPATH_URL_PREFIX };, +	public ClassLoader getClassLoader() {, +		return this.delegate.getClassLoader();, +	public Resource getResource(String location) {, +		Resource candidate = this.delegate.getResource(location);, +		if (isDeleted(candidate)) {, +			return new DeletedClassLoaderFileResource(location);, +		}, +		return candidate;, +			if (!isDeleted(candidate)) {, +				String name = entry.getKey();, +				ClassLoaderFile file = entry.getValue();, +				if (file.getKind() == Kind.ADDED, +						&& this.antPathMatcher.match(trimmedLocationPattern, name)) {, +					URL url = new URL("reloaded", null, -1, "/" + name,, +							new ClassLoaderFileURLStreamHandler(file));, +					UrlResource resource = new UrlResource(url);, +					additionalResources.add(resource);, +	private String trimLocationPattern(String pattern) {, +		for (String prefix : LOCATION_PATTERN_PREFIXES) {, +			if (pattern.startsWith(prefix)) {, +				return pattern.substring(prefix.length());, +			}, +		}, +		return pattern;, +	}, +, +	private boolean isDeleted(Resource resource) {, +					String name = entry.getKey();, +					ClassLoaderFile file = entry.getValue();, +					if (file.getKind() == Kind.DELETED && resource.exists(), +							&& resource.getURI().toString().endsWith(name)) {, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			 * Set request attributes for IP address, Hostname, protocol and port used for, +			 * the request., +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +	private static final String[] LOCATION_PATTERN_PREFIXES = { CLASSPATH_ALL_URL_PREFIX,, +			CLASSPATH_URL_PREFIX };, +	public ClassLoader getClassLoader() {, +		return this.delegate.getClassLoader();, +	public Resource getResource(String location) {, +		Resource candidate = this.delegate.getResource(location);, +		if (isDeleted(candidate)) {, +			return new DeletedClassLoaderFileResource(location);, +		}, +		return candidate;, +			if (!isDeleted(candidate)) {, +				String name = entry.getKey();, +				ClassLoaderFile file = entry.getValue();, +				if (file.getKind() == Kind.ADDED, +						&& this.antPathMatcher.match(trimmedLocationPattern, name)) {, +					URL url = new URL("reloaded", null, -1, "/" + name,, +							new ClassLoaderFileURLStreamHandler(file));, +					UrlResource resource = new UrlResource(url);, +					additionalResources.add(resource);, +	private String trimLocationPattern(String pattern) {, +		for (String prefix : LOCATION_PATTERN_PREFIXES) {, +			if (pattern.startsWith(prefix)) {, +				return pattern.substring(prefix.length());, +			}, +		}, +		return pattern;, +	}, +, +	private boolean isDeleted(Resource resource) {, +					String name = entry.getKey();, +					ClassLoaderFile file = entry.getValue();, +					if (file.getKind() == Kind.DELETED && resource.exists(), +							&& resource.getURI().toString().endsWith(name)) {, +, +, +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java, +			prepare((GenericApplicationContext) applicationContext);, +	private void prepare(GenericApplicationContext applicationContext) {, +		applicationContext.setResourceLoader(, +				new ClassLoaderFilesResourcePatternResolver(this.classLoaderFiles));, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java, +			 * Set request attributes for IP address, Hostname, protocol and port used for, +			 * the request., +++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +	private static final String[] LOCATION_PATTERN_PREFIXES = { CLASSPATH_ALL_URL_PREFIX,, +			CLASSPATH_URL_PREFIX };, +	public ClassLoader getClassLoader() {, +		return this.delegate.getClassLoader();, +	public Resource getResource(String location) {, +		Resource candidate = this.delegate.getResource(location);, +		if (isDeleted(candidate)) {, +			return new DeletedClassLoaderFileResource(location);]