[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, +		this(new VersionManagedDependencies());, +						this.dependencies.getSpringBootVersion());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, +		this(new VersionManagedDependencies());, +						this.dependencies.getSpringBootVersion());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomManagedDependencies;, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, + * {@link PomManagedDependencies}., +		this(new VersionManagedDependencies());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, +		this(new VersionManagedDependencies());, +						this.dependencies.getSpringBootVersion());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomManagedDependencies;, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, + * {@link PomManagedDependencies}., +		this(new VersionManagedDependencies());, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolverTests.java, +		given(this.dependencies.getSpringBootVersion()).willReturn("1");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, +		this(new VersionManagedDependencies());, +						this.dependencies.getSpringBootVersion());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomManagedDependencies;, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, + * {@link PomManagedDependencies}., +		this(new VersionManagedDependencies());, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolverTests.java, +		given(this.dependencies.getSpringBootVersion()).willReturn("1");, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +[[build-tool-plugins-gradle-custom-version-management]], +==== Custom version management, +If is possible to customize the versions used by the `ResolutionStrategy` if you need, +to deviate from Spring Boot's ``blessed'' dependencies. Alternative version meta-data, +is consulted using the `versionManagement` configuration. For example:, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +	dependencies {, +		versionManagement("com.mycorp:mycorp-versions:1.0.0.RELEASE@properties"), +		compile("org.springframework.data:spring-data-hadoop"), +	}, +----, +, +Version information needs to be published to a repository as a `.properties` file. For, +the above example `mycorp-versions.properties` file might contain the following:, +, +[source,properties,indent=0,subs="verbatim,attributes"], +----, +	org.springframework.data\:spring-data-hadoop=2.0.0.RELEASE, +----, +, +The properties file takes precedence over Spring Boot's defaults, and can be used, +to override version numbers if necessary., +, +, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolver.java, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, +		this(new VersionManagedDependencies());, +						this.dependencies.getSpringBootVersion());, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/ManagedDependenciesFactory.java, +import org.springframework.boot.dependency.tools.PomManagedDependencies;, +import org.springframework.boot.dependency.tools.VersionManagedDependencies;, + * {@link PomManagedDependencies}., +		this(new VersionManagedDependencies());, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/dependencies/ManagedDependenciesArtifactCoordinatesResolverTests.java, +		given(this.dependencies.getSpringBootVersion()).willReturn("1");, +++ b/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +[[build-tool-plugins-gradle-custom-version-management]], +==== Custom version management, +If is possible to customize the versions used by the `ResolutionStrategy` if you need, +to deviate from Spring Boot's ``blessed'' dependencies. Alternative version meta-data, +is consulted using the `versionManagement` configuration. For example:, +, +[source,groovy,indent=0,subs="verbatim,attributes"], +----, +	dependencies {, +		versionManagement("com.mycorp:mycorp-versions:1.0.0.RELEASE@properties"), +		compile("org.springframework.data:spring-data-hadoop"), +	}, +----, +, +Version information needs to be published to a repository as a `.properties` file. For, +the above example `mycorp-versions.properties` file might contain the following:, +, +[source,properties,indent=0,subs="verbatim,attributes"], +----, +	org.springframework.data\:spring-data-hadoop=2.0.0.RELEASE, +----, +, +The properties file takes precedence over Spring Boot's defaults, and can be used, +to override version numbers if necessary., +]