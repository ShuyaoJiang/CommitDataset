[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +@AutoConfigureAfter({ EndpointAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +@AutoConfigureAfter({ EndpointAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import java.util.HashMap;, +import org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@ConditionalOnExpression("${endpoints.jolokia.enabled:true}"), +@EnableConfigurationProperties(JolokiaProperties.class), +	JolokiaProperties properties = new JolokiaProperties();, +		Properties initParameters = new Properties();, +		initParameters.putAll(this.properties.getConfig());, +		return initParameters;, +, +	@ConfigurationProperties(name = "jolokia"), +	public static class JolokiaProperties {, +, +		private Map<String, String> config = new HashMap<String, String>();, +, +		public Map<String, String> getConfig() {, +			return this.config;, +		}, +, +		public void setConfig(Map<String, String> config) {, +			this.config = config;, +		}, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +@AutoConfigureAfter({ EndpointAutoConfiguration.class }), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java, + * Copyright 2013-2014 the original author or authors., +import java.util.HashMap;, +import org.springframework.boot.actuate.autoconfigure.JolokiaAutoConfiguration.JolokiaProperties;, +import org.springframework.boot.context.properties.ConfigurationProperties;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +@ConditionalOnExpression("${endpoints.jolokia.enabled:true}"), +@EnableConfigurationProperties(JolokiaProperties.class), +	JolokiaProperties properties = new JolokiaProperties();, +		Properties initParameters = new Properties();, +		initParameters.putAll(this.properties.getConfig());, +		return initParameters;, +, +	@ConfigurationProperties(name = "jolokia"), +	public static class JolokiaProperties {, +, +		private Map<String, String> config = new HashMap<String, String>();, +, +		public Map<String, String> getConfig() {, +			return this.config;, +		}, +, +		public void setConfig(Map<String, String> config) {, +			this.config = config;, +		}, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfigurationTests.java, +		EnvironmentTestUtils.addEnvironment(this.context, "jolokia.config[key1]:value1",, +				"jolokia.config[key2]:value2");, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"endpoints.jolokia.enabled:false");]