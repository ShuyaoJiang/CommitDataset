[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorAutoConfiguration.java, +import com.couchbase.client.java.Cluster;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;, +@ConditionalOnClass({ Cluster.class, Flux.class }), +@ConditionalOnBean(Cluster.class), +@AutoConfigureAfter(CouchbaseAutoConfiguration.class), +		CompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, Cluster> {, +	private final Map<String, Cluster> clusters;, +			Map<String, Cluster> clusters) {, +		this.clusters = clusters;, +		return createHealthIndicator(this.clusters);, +	protected CouchbaseReactiveHealthIndicator createHealthIndicator(Cluster cluster) {, +		return new CouchbaseReactiveHealthIndicator(cluster);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorAutoConfiguration.java, +import com.couchbase.client.java.Cluster;, +import org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration;, +@ConditionalOnClass({ Cluster.class, Flux.class }), +@ConditionalOnBean(Cluster.class), +@AutoConfigureAfter(CouchbaseAutoConfiguration.class), +		CompositeReactiveHealthIndicatorConfiguration<CouchbaseReactiveHealthIndicator, Cluster> {, +	private final Map<String, Cluster> clusters;, +			Map<String, Cluster> clusters) {, +		this.clusters = clusters;, +		return createHealthIndicator(this.clusters);, +	protected CouchbaseReactiveHealthIndicator createHealthIndicator(Cluster cluster) {, +		return new CouchbaseReactiveHealthIndicator(cluster);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/couchbase/CouchbaseReactiveHealthIndicatorAutoConfigurationTests.java, +import com.couchbase.client.java.Cluster;, +		public Cluster couchbaseCluster() {, +			return mock(Cluster.class);]