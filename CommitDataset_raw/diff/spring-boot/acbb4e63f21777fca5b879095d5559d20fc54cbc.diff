[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.net.JarURLConnection;, +import java.net.URLConnection;, +	/**, +	 * Clear URL caches., +	 */, +	public void clearCache() {, +		for (URL url : getURLs()) {, +			try {, +				URLConnection connection = url.openConnection();, +				if (connection instanceof JarURLConnection) {, +					clearCache(connection);, +				}, +			}, +			catch (IOException ex) {, +			}, +		}, +, +	}, +, +	private void clearCache(URLConnection connection) throws IOException {, +		Object jarFile = ((JarURLConnection) connection).getJarFile();, +		if (jarFile instanceof JarFile) {, +			((JarFile) jarFile).clearCache();, +		}, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.net.JarURLConnection;, +import java.net.URLConnection;, +	/**, +	 * Clear URL caches., +	 */, +	public void clearCache() {, +		for (URL url : getURLs()) {, +			try {, +				URLConnection connection = url.openConnection();, +				if (connection instanceof JarURLConnection) {, +					clearCache(connection);, +				}, +			}, +			catch (IOException ex) {, +			}, +		}, +, +	}, +, +	private void clearCache(URLConnection connection) throws IOException {, +		Object jarFile = ((JarURLConnection) connection).getJarFile();, +		if (jarFile instanceof JarFile) {, +			((JarFile) jarFile).clearCache();, +		}, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	public void clearCache() {, +		this.entries.clearCache();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.net.JarURLConnection;, +import java.net.URLConnection;, +	/**, +	 * Clear URL caches., +	 */, +	public void clearCache() {, +		for (URL url : getURLs()) {, +			try {, +				URLConnection connection = url.openConnection();, +				if (connection instanceof JarURLConnection) {, +					clearCache(connection);, +				}, +			}, +			catch (IOException ex) {, +			}, +		}, +, +	}, +, +	private void clearCache(URLConnection connection) throws IOException {, +		Object jarFile = ((JarURLConnection) connection).getJarFile();, +		if (jarFile instanceof JarFile) {, +			((JarFile) jarFile).clearCache();, +		}, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java, +	public void clearCache() {, +		this.entries.clearCache();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java, +	public void clearCache() {, +		this.entriesCache.clear();, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +import java.net.JarURLConnection;, +import java.net.URLConnection;, +	/**]