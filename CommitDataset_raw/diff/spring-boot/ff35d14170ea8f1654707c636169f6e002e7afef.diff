[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +import org.springframework.core.annotation.Order;, +		@Order(0), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java, +import org.springframework.core.annotation.Order;, +		@Order(0), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfigurationTests.java, +import java.lang.reflect.Method;, +, +import org.springframework.boot.autoconfigure.http.HttpProperties;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.util.ReflectionUtils;, +		this.contextRunner.run((context) -> {, +			assertThat(configurer.defaultCodecs()), +					.hasFieldOrPropertyWithValue("enableLoggingRequestDetails", false);, +	public void loggingRequestDetailsCustomizerShouldUseHttpProperties() {, +		this.contextRunner.withPropertyValues("spring.http.log-request-details=true"), +				.run((context) -> {, +					CodecCustomizer customizer = context.getBean(CodecCustomizer.class);, +					CodecConfigurer configurer = new DefaultClientCodecConfigurer();, +					customizer.customize(configurer);, +					assertThat(configurer.defaultCodecs()).hasFieldOrPropertyWithValue(, +							"enableLoggingRequestDetails", true);, +				});, +	}, +, +	@Test, +	public void loggingRequestDetailsBeanShouldHaveOrderZero() {, +		this.contextRunner.run((context) -> {, +			Method customizerMethod = ReflectionUtils.findMethod(, +					CodecsAutoConfiguration.LoggingCodecConfiguration.class,, +					"loggingCodecCustomizer", HttpProperties.class);, +			Integer order = new TestAnnotationAwareOrderComparator(), +					.findOrder(customizerMethod);, +			assertThat(order).isEqualTo(0);, +		});, +	}, +, +	static class TestAnnotationAwareOrderComparator, +			extends AnnotationAwareOrderComparator {, +, +		@Override, +		public Integer findOrder(Object obj) {, +			return super.findOrder(obj);, +		}, +]