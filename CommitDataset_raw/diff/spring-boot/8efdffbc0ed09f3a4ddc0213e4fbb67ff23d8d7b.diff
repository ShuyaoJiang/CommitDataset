[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java, +		if (shouldExtract(request, response)) {, +	/**, +	 * Detect if the project should be extracted., +	 */, +	private boolean shouldExtract(ProjectGenerationRequest request, ProjectGenerationResponse response) {, +		if (request.isExtract()) {, +			return true;, +		}, +		// An explicit name has been provided for an archive and there is no extension in it, +		if (isZipArchive(response) && request.getOutput() != null && !request.getOutput().contains(".")) {, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java, +		if (shouldExtract(request, response)) {, +	/**, +	 * Detect if the project should be extracted., +	 */, +	private boolean shouldExtract(ProjectGenerationRequest request, ProjectGenerationResponse response) {, +		if (request.isExtract()) {, +			return true;, +		}, +		// An explicit name has been provided for an archive and there is no extension in it, +		if (isZipArchive(response) && request.getOutput() != null && !request.getOutput().contains(".")) {, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/init/InitCommandTests.java, +		assertTrue("Archive not extracted properly " + archiveFile.getAbsolutePath(), +		assertTrue("Archive not extracted properly " + archiveFile.getAbsolutePath(), +	public void generateProjectArchiveExtractedByDefault() throws Exception {, +		String fileName = UUID.randomUUID().toString();, +		assertFalse("No dot in filename", fileName.contains("."));, +		byte[] archive = createFakeZipArchive("test.txt", "Fake content");, +		MockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(, +				"application/zip", "demo.zip", archive);, +		mockSuccessfulProjectGeneration(request);, +		File file = new File(fileName);, +		File archiveFile = new File(file, "test.txt");, +		try {, +			assertEquals(ExitStatus.OK, this.command.run(fileName));, +			assertTrue("Archive not extracted properly " + archiveFile.getAbsolutePath(), +					+ " not found", archiveFile.exists());, +		}, +		finally {, +			archiveFile.delete();, +			file.delete();, +		}, +	}, +, +	@Test, +	public void generateProjectFileSavedAsFileByDefault() throws Exception {, +		String fileName = UUID.randomUUID().toString();, +		String content = "Fake Content";, +		byte[] archive = content.getBytes();, +		MockHttpProjectGenerationRequest request = new MockHttpProjectGenerationRequest(, +				"application/octet-stream", "pom.xml", archive);, +		mockSuccessfulProjectGeneration(request);, +		File file = new File(fileName);, +		try {, +			assertEquals(ExitStatus.OK, this.command.run(fileName));, +			assertTrue("File not saved properly", file.exists());, +			assertTrue("Should not be a directory", file.isFile());, +		}, +		finally {, +			file.delete();, +		}, +	}, +, +	@Test]