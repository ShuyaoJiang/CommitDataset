[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +	/**, +	 * Bean definition attribute name for factory beans to signal their product type (if, +	 * known and it can't be deduced from the factory bean class)., +	 */, +	public static final String FACTORY_BEAN_OBJECT_TYPE = "factoryBeanObjectType";, +, +			Class<?> generic = getFactoryBeanGeneric(beanFactory, beanDefinition, name);, +			BeanDefinition definition, String name) {, +				return getConfigurationClassFactoryBeanGeneric(beanFactory, definition,, +						name);, +				return getDirectFactoryBeanGeneric(beanFactory, definition, name);, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition,, +			String name) throws Exception {, +		Class<?> generic = ResolvableType.forMethodReturnType(method), +				.as(FactoryBean.class).resolveGeneric();, +		if ((generic == null || generic.equals(Object.class)), +				&& definition.hasAttribute(FACTORY_BEAN_OBJECT_TYPE)) {, +			generic = (Class<?>) definition.getAttribute(FACTORY_BEAN_OBJECT_TYPE);, +		}, +		return generic;, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition,, +			String name) throws ClassNotFoundException, LinkageError {, +		Class<?> generic = ResolvableType.forClass(factoryBeanClass), +				.as(FactoryBean.class).resolveGeneric();, +		if ((generic == null || generic.equals(Object.class)), +				&& definition.hasAttribute(FACTORY_BEAN_OBJECT_TYPE)) {, +			generic = (Class<?>) definition.getAttribute(FACTORY_BEAN_OBJECT_TYPE);, +		}, +		return generic;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java, +	/**, +	 * Bean definition attribute name for factory beans to signal their product type (if, +	 * known and it can't be deduced from the factory bean class)., +	 */, +	public static final String FACTORY_BEAN_OBJECT_TYPE = "factoryBeanObjectType";, +, +			Class<?> generic = getFactoryBeanGeneric(beanFactory, beanDefinition, name);, +			BeanDefinition definition, String name) {, +				return getConfigurationClassFactoryBeanGeneric(beanFactory, definition,, +						name);, +				return getDirectFactoryBeanGeneric(beanFactory, definition, name);, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition,, +			String name) throws Exception {, +		Class<?> generic = ResolvableType.forMethodReturnType(method), +				.as(FactoryBean.class).resolveGeneric();, +		if ((generic == null || generic.equals(Object.class)), +				&& definition.hasAttribute(FACTORY_BEAN_OBJECT_TYPE)) {, +			generic = (Class<?>) definition.getAttribute(FACTORY_BEAN_OBJECT_TYPE);, +		}, +		return generic;, +			ConfigurableListableBeanFactory beanFactory, BeanDefinition definition,, +			String name) throws ClassNotFoundException, LinkageError {, +		Class<?> generic = ResolvableType.forClass(factoryBeanClass), +				.as(FactoryBean.class).resolveGeneric();, +		if ((generic == null || generic.equals(Object.class)), +				&& definition.hasAttribute(FACTORY_BEAN_OBJECT_TYPE)) {, +			generic = (Class<?>) definition.getAttribute(FACTORY_BEAN_OBJECT_TYPE);, +		}, +		return generic;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.context.annotation.Import;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;, +import org.springframework.core.type.AnnotationMetadata;, +	public void testOnMissingBeanConditionWithRegisteredFactoryBean() {, +		this.context.register(RegisteredFactoryBeanConfiguration.class,, +				ConditionalOnFactoryBean.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(ExampleBean.class).toString(),, +				equalTo("fromFactory"));, +	}, +, +	@Test, +	public void testOnMissingBeanConditionWithNonspecificFactoryBean() {, +		this.context.register(NonspecificFactoryBeanConfiguration.class,, +				ConditionalOnFactoryBean.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(ExampleBean.class).toString(),, +				equalTo("fromFactory"));, +	}, +, +	@Test, +	@Import(NonspecificFactoryBeanRegistrar.class), +	protected static class NonspecificFactoryBeanConfiguration {, +	}, +, +	protected static class NonspecificFactoryBeanRegistrar implements, +			ImportBeanDefinitionRegistrar {, +, +		@Override, +		public void registerBeanDefinitions(AnnotationMetadata meta,, +				BeanDefinitionRegistry registry) {, +			BeanDefinitionBuilder builder = BeanDefinitionBuilder, +					.genericBeanDefinition(NonspecificFactoryBean.class);, +			builder.addConstructorArgValue("foo");, +			builder.getBeanDefinition().setAttribute(]