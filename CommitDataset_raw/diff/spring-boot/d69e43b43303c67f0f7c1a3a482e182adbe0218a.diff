[+++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.SearchStrategy;, +import org.springframework.integration.config.EnableIntegrationManagement;, +import org.springframework.integration.support.management.IntegrationManagementConfigurer;, + * @author Artem Bilan, +	@ConditionalOnClass(EnableIntegrationManagement.class), +		@Bean(name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME), +		@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class,, +				name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME,, +				search = SearchStrategy.CURRENT), +		public IntegrationManagementConfigurer managementConfigurer() {, +			IntegrationManagementConfigurer configurer = new IntegrationManagementConfigurer();, +			configurer.setDefaultCountsEnabled(true);, +			configurer.setDefaultStatsEnabled(true);, +			return configurer;, +		}, +, +				IntegrationManagementConfigurer managementConfigurer) {, +					new SpringIntegrationMetricReader(managementConfigurer));, +++ b/spring-boot-actuator/pom.xml, +		<dependency>, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +import org.springframework.boot.autoconfigure.condition.SearchStrategy;, +import org.springframework.integration.config.EnableIntegrationManagement;, +import org.springframework.integration.support.management.IntegrationManagementConfigurer;, + * @author Artem Bilan, +	@ConditionalOnClass(EnableIntegrationManagement.class), +		@Bean(name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME), +		@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class,, +				name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME,, +				search = SearchStrategy.CURRENT), +		public IntegrationManagementConfigurer managementConfigurer() {, +			IntegrationManagementConfigurer configurer = new IntegrationManagementConfigurer();, +			configurer.setDefaultCountsEnabled(true);, +			configurer.setDefaultStatsEnabled(true);, +			return configurer;, +		}, +, +				IntegrationManagementConfigurer managementConfigurer) {, +					new SpringIntegrationMetricReader(managementConfigurer));, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java, +import org.springframework.integration.support.management.IntegrationManagementConfigurer;, +import org.springframework.integration.support.management.MessageChannelMetrics;, +import org.springframework.integration.support.management.MessageHandlerMetrics;, +import org.springframework.integration.support.management.MessageSourceMetrics;, +import org.springframework.integration.support.management.PollableChannelManagement;, + * {@link IntegrationManagementConfigurer})., + * @author Artem Bilan, +	private final IntegrationManagementConfigurer managementConfigurer;, +	public SpringIntegrationMetricReader(IntegrationManagementConfigurer managementConfigurer) {, +		this.managementConfigurer = managementConfigurer;, +, +		for (String name : this.managementConfigurer.getChannelNames()) {, +			MessageChannelMetrics channelMetrics = this.managementConfigurer.getChannelMetrics(name);, +			metrics.addAll(getStatistics(prefix + ".errorRate", channelMetrics.getErrorRate()));, +			metrics.add(new Metric<Long>(prefix + ".sendCount", channelMetrics.getSendCountLong()));, +			metrics.addAll(getStatistics(prefix + ".sendRate", channelMetrics.getSendRate()));, +			if (channelMetrics instanceof PollableChannelManagement) {, +						((PollableChannelManagement) channelMetrics).getReceiveCountLong()));, +, +		for (String name : this.managementConfigurer.getHandlerNames()) {, +			MessageHandlerMetrics handlerMetrics = this.managementConfigurer.getHandlerMetrics(name);, +			String prefix = "integration.handler." + name;, +			metrics.addAll(getStatistics(prefix + ".duration", handlerMetrics.getDuration()));, +			metrics.add(new Metric<Long>(prefix + ".activeCount", handlerMetrics.getActiveCountLong()));, +		}, +, +		for (String name : this.managementConfigurer.getSourceNames()) {, +			MessageSourceMetrics sourceMetrics = this.managementConfigurer.getSourceMetrics(name);, +			String prefix = "integration.source." + name;, +			metrics.add(new Metric<Long>(prefix + ".messageCount", sourceMetrics.getMessageCountLong()));, +		}, +, +				this.managementConfigurer.getHandlerNames().length));, +				this.managementConfigurer.getChannelNames().length));, +		metrics.add(new Metric<Integer>("integration.sourceCount",, +				this.managementConfigurer.getSourceNames().length));, +, +		int totalChannelCount = this.managementConfigurer.getChannelNames().length;, +		int totalHandlerCount = this.managementConfigurer.getHandlerNames().length;, +		int totalSourceCount = this.managementConfigurer.getSourceNames().length;, +		return totalChannelCount + totalHandlerCount + totalSourceCount;, +++ b/spring-boot-actuator/pom.xml, +		<dependency>]