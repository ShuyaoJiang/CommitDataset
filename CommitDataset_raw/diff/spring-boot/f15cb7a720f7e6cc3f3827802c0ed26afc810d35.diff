[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +import org.junit.Ignore;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;, +import org.springframework.security.config.annotation.web.builders.HttpSecurity;, +import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;, +import org.springframework.security.core.authority.AuthorityUtils;, +	public void testOverrideAuthenticationManagerAndInjectIntoSecurityFilter(), +			throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(TestAuthenticationConfiguration.class,, +				SecurityCustomizer.class, SecurityAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(, +				this.context.getBean(TestAuthenticationConfiguration.class).authenticationManager,, +				this.context.getBean(AuthenticationManager.class));, +	}, +, +	@Test, +	@Ignore("gh-1801"), +	public void testOverrideAuthenticationManagerWithBuilderAndInjectIntoSecurityFilter(), +			throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(AuthenticationManagerCustomizer.class,, +				SecurityCustomizer.class, SecurityAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		UsernamePasswordAuthenticationToken user = new UsernamePasswordAuthenticationToken(, +				"foo", "bar",, +				AuthorityUtils.commaSeparatedStringToAuthorityList("ROLE_USER"));, +		assertNotNull(this.context.getBean(AuthenticationManager.class), +				.authenticate(user));, +	}, +, +	@Test, +	public void testOverrideAuthenticationManagerWithBuilderAndInjectBuilderIntoSecurityFilter(), +			throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(AuthenticationManagerCustomizer.class,, +				WorkaroundSecurityCustomizer.class, SecurityAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		UsernamePasswordAuthenticationToken user = new UsernamePasswordAuthenticationToken(, +				"foo", "bar",, +				AuthorityUtils.commaSeparatedStringToAuthorityList("ROLE_USER"));, +		assertNotNull(this.context.getBean(AuthenticationManager.class), +				.authenticate(user));, +	}, +, +	@Test, +	@Configuration, +	protected static class SecurityCustomizer extends WebSecurityConfigurerAdapter {, +, +		@Autowired, +		private AuthenticationManager authenticationManager;, +, +	}, +, +	@Configuration, +	protected static class WorkaroundSecurityCustomizer extends WebSecurityConfigurerAdapter {, +, +		@Autowired, +		private AuthenticationManagerBuilder builder;, +		, +		@SuppressWarnings("unused"), +		private AuthenticationManager authenticationManager;, +		, +		@Override, +		protected void configure(HttpSecurity http) throws Exception {, +			authenticationManager = new AuthenticationManager() {			, +				@Override, +				public Authentication authenticate(Authentication authentication), +						throws AuthenticationException {, +					return builder.getOrBuild().authenticate(authentication);, +				}, +			};, +		}, +, +	}, +, +	@Configuration, +	protected static class AuthenticationManagerCustomizer extends, +			GlobalAuthenticationConfigurerAdapter {, +, +		@Override, +		public void init(AuthenticationManagerBuilder auth) throws Exception {, +			auth.inMemoryAuthentication().withUser("foo").password("bar").roles("USER");, +		}]