[+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalysis;, +import org.springframework.boot.diagnostics.FailureAnalysisReporter;, +import org.springframework.boot.diagnostics.FailureAnalyzer;, +				reportFailure(exception);, +	private void reportFailure(Throwable failure) {, +		try {, +			FailureAnalysis failureAnalysis = analyzeFailure(failure);, +			if (failureAnalysis != null && reportFailureAnalysis(failureAnalysis)) {, +				registerLoggedException(failure);, +				return;, +			}, +		}, +		catch (Throwable ex) {, +			// Continue with normal handling of the original failure, +		}, +		if (logger.isErrorEnabled()) {, +			logger.error("Application startup failed", failure);, +			registerLoggedException(failure);, +		}, +	}, +, +	private FailureAnalysis analyzeFailure(Throwable failure) {, +		List<FailureAnalyzer> analyzers = SpringFactoriesLoader, +				.loadFactories(FailureAnalyzer.class, getClass().getClassLoader());, +		for (FailureAnalyzer analyzer : analyzers) {, +			FailureAnalysis analysis = analyzer.analyze(failure);, +			if (analysis != null) {, +				return analysis;, +			}, +		}, +		return null;, +	}, +, +	private boolean reportFailureAnalysis(FailureAnalysis failureAnalysis) {, +		List<FailureAnalysisReporter> reporters = SpringFactoriesLoader.loadFactories(, +				FailureAnalysisReporter.class, getClass().getClassLoader());, +		if (!reporters.isEmpty()) {, +			for (FailureAnalysisReporter reporter : reporters) {, +				reporter.report(failureAnalysis);, +			}, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java, +import org.springframework.boot.diagnostics.FailureAnalysis;, +import org.springframework.boot.diagnostics.FailureAnalysisReporter;, +import org.springframework.boot.diagnostics.FailureAnalyzer;, +				reportFailure(exception);, +	private void reportFailure(Throwable failure) {, +		try {, +			FailureAnalysis failureAnalysis = analyzeFailure(failure);, +			if (failureAnalysis != null && reportFailureAnalysis(failureAnalysis)) {, +				registerLoggedException(failure);, +				return;, +			}, +		}, +		catch (Throwable ex) {, +			// Continue with normal handling of the original failure, +		}, +		if (logger.isErrorEnabled()) {, +			logger.error("Application startup failed", failure);, +			registerLoggedException(failure);, +		}, +	}, +, +	private FailureAnalysis analyzeFailure(Throwable failure) {, +		List<FailureAnalyzer> analyzers = SpringFactoriesLoader, +				.loadFactories(FailureAnalyzer.class, getClass().getClassLoader());, +		for (FailureAnalyzer analyzer : analyzers) {, +			FailureAnalysis analysis = analyzer.analyze(failure);, +			if (analysis != null) {, +				return analysis;, +			}, +		}, +		return null;, +	}, +, +	private boolean reportFailureAnalysis(FailureAnalysis failureAnalysis) {, +		List<FailureAnalysisReporter> reporters = SpringFactoriesLoader.loadFactories(, +				FailureAnalysisReporter.class, getClass().getClassLoader());, +		if (!reporters.isEmpty()) {, +			for (FailureAnalysisReporter reporter : reporters) {, +				reporter.report(failureAnalysis);, +			}, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/PortInUseException.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]