[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.boot.context.embedded.MultipartConfigFactory;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.StringUtils;, +import org.springframework.web.multipart.support.StandardServletMultipartResolver;, +, + * {@link StandardServletMultipartResolver} if none is present, and adds a, + * {@link javax.servlet.MultipartConfigElement multipartConfigElement} if none is otherwise defined., + * The {@link EmbeddedWebApplicationContext} will associate the, + * <p/>, + * The {@link javax.servlet.MultipartConfigElement} is a Servlet API that's used to configure how the container handles, + * file uploads. By default, + * @author Josh Long, +@EnableConfigurationProperties(MultipartProperties.class), +    @Autowired, +    private MultipartProperties multipartProperties = new MultipartProperties();, +, +    @ConditionalOnMissingBean, +    public MultipartConfigElement multipartConfigElement() {, +        MultipartConfigFactory factory = new MultipartConfigFactory();, +, +        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {, +            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getLocation())) {, +            factory.setLocation(this.multipartProperties.getLocation());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {, +            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {, +            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());, +        }, +, +        return factory.createMultipartConfig();, +    }, +, +, +    @Bean, +    @ConditionalOnMissingBean, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.autoconfigure.EnableAutoConfiguration;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, +import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext;, +import org.springframework.boot.context.embedded.MultipartConfigFactory;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.StringUtils;, +import org.springframework.web.multipart.support.StandardServletMultipartResolver;, +, + * {@link StandardServletMultipartResolver} if none is present, and adds a, + * {@link javax.servlet.MultipartConfigElement multipartConfigElement} if none is otherwise defined., + * The {@link EmbeddedWebApplicationContext} will associate the, + * <p/>, + * The {@link javax.servlet.MultipartConfigElement} is a Servlet API that's used to configure how the container handles, + * file uploads. By default, + * @author Josh Long, +@EnableConfigurationProperties(MultipartProperties.class), +    @Autowired, +    private MultipartProperties multipartProperties = new MultipartProperties();, +, +    @ConditionalOnMissingBean, +    public MultipartConfigElement multipartConfigElement() {, +        MultipartConfigFactory factory = new MultipartConfigFactory();, +, +        if (StringUtils.hasText(this.multipartProperties.getFileSizeThreshold())) {, +            factory.setFileSizeThreshold(this.multipartProperties.getFileSizeThreshold());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getLocation())) {, +            factory.setLocation(this.multipartProperties.getLocation());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getMaxRequestSize())) {, +            factory.setMaxRequestSize(this.multipartProperties.getMaxRequestSize());, +        }, +, +        if (StringUtils.hasText(this.multipartProperties.getMaxFileSize())) {, +            factory.setMaxFileSize(this.multipartProperties.getMaxFileSize());, +        }, +, +        return factory.createMultipartConfig();, +    }, +, +, +    @Bean, +    @ConditionalOnMissingBean]