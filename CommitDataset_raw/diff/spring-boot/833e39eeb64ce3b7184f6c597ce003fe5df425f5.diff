[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Arrays;, +		// Make sure Hibernate doesn't attempt to auto-detect a JTA platform, +		if (jtaTransactionManager == null) {, +		// As of Hibernate 5.2, Hibernate can fully integrate with the WebSphere, +		// transaction manager on its own., +		else if (!runningOnWebSphere()) {, +			configureSpringJtaPlatform(vendorProperties, jtaTransactionManager);, +		}, +		for (String candidate : NO_JTA_PLATFORM_CLASSES) {, +		throw new IllegalStateException("No available JtaPlatform candidates amongst", +				+ Arrays.toString(NO_JTA_PLATFORM_CLASSES));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.java, +import java.util.Arrays;, +		// Make sure Hibernate doesn't attempt to auto-detect a JTA platform, +		if (jtaTransactionManager == null) {, +		// As of Hibernate 5.2, Hibernate can fully integrate with the WebSphere, +		// transaction manager on its own., +		else if (!runningOnWebSphere()) {, +			configureSpringJtaPlatform(vendorProperties, jtaTransactionManager);, +		}, +		for (String candidate : NO_JTA_PLATFORM_CLASSES) {, +		throw new IllegalStateException("No available JtaPlatform candidates amongst", +				+ Arrays.toString(NO_JTA_PLATFORM_CLASSES));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfigurationTests.java, +import org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform;, +import org.hibernate.internal.SessionFactoryImpl;, +import org.springframework.boot.test.context.assertj.AssertableApplicationContext;, +import org.springframework.boot.test.context.runner.ContextConsumer;, +				.run(assertJtaPlatform(SpringJtaPlatform.class));, +				.run(assertJtaPlatform(TestJtaPlatform.class));, +	}, +, +	@Test, +	public void jtaNotUsedByTheApplication() {, +		contextRunner().run(assertJtaPlatform(NoJtaPlatform.class));, +	}, +, +	private ContextConsumer<AssertableApplicationContext> assertJtaPlatform(, +			Class<? extends JtaPlatform> expectedType) {, +		return (context) -> {, +			SessionFactoryImpl sessionFactory = context, +					.getNativeEntityManagerFactory().unwrap(SessionFactoryImpl.class);, +			assertThat(sessionFactory.getServiceRegistry().getService(JtaPlatform.class)), +					.isInstanceOf(expectedType);, +		};]