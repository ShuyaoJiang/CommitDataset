[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +import java.io.IOException;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +				Resource[] resources;, +					resources = new PathMatchingResourcePatternResolver(, +							context.getClassLoader()).getResources("classpath*:" + name, +							+ "*.properties");, +				catch (IOException e) {, +					continue;, +				for (Resource resource : resources) {, +					if (resource.exists()) {, +						return ConditionOutcome, +								.match("Bundle found for spring.messages.basename: ", +										+ name);, +					}, +				}, +			}, +			return ConditionOutcome, +					.noMatch("No bundle found for spring.messages.basename: " + basename);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +import java.io.IOException;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +				Resource[] resources;, +					resources = new PathMatchingResourcePatternResolver(, +							context.getClassLoader()).getResources("classpath*:" + name, +							+ "*.properties");, +				catch (IOException e) {, +					continue;, +				for (Resource resource : resources) {, +					if (resource.exists()) {, +						return ConditionOutcome, +								.match("Bundle found for spring.messages.basename: ", +										+ name);, +					}, +				}, +			}, +			return ConditionOutcome, +					.noMatch("No bundle found for spring.messages.basename: " + basename);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +	public void testEncodingWorks() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.messages.basename:test/swedish");, +		this.context.register(MessageSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals("Some text with some swedish öäå!",, +				this.context.getMessage("foo", null, "Foo message", Locale.UK));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java, +import java.io.IOException;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.support.PathMatchingResourcePatternResolver;, +				Resource[] resources;, +					resources = new PathMatchingResourcePatternResolver(, +							context.getClassLoader()).getResources("classpath*:" + name, +							+ "*.properties");, +				catch (IOException e) {, +					continue;, +				for (Resource resource : resources) {, +					if (resource.exists()) {, +						return ConditionOutcome, +								.match("Bundle found for spring.messages.basename: ", +										+ name);, +					}, +				}, +			}, +			return ConditionOutcome, +					.noMatch("No bundle found for spring.messages.basename: " + basename);, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java, +	public void testEncodingWorks() throws Exception {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.messages.basename:test/swedish");, +		this.context.register(MessageSourceAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals("Some text with some swedish öäå!",, +				this.context.getMessage("foo", null, "Foo message", Locale.UK));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/test/resources/test/swedish.properties, +foo=Some text with some swedish öäå!]