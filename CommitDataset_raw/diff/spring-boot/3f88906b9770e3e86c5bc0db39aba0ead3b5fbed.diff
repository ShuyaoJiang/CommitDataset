[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributes.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.bind.support.WebExchangeBindException;, + * @author Stephane Nicoll, +		HttpStatus errorStatus = determineHttpStatus(error);, +		errorAttributes.put("message", determineMessage(error));, +		handleException(errorAttributes, determineException(error), includeStackTrace);, +	private HttpStatus determineHttpStatus(Throwable error) {, +		if (error instanceof ResponseStatusException) {, +			return ((ResponseStatusException) error).getStatus();, +		}, +		return HttpStatus.INTERNAL_SERVER_ERROR;, +	}, +, +	private String determineMessage(Throwable error) {, +		if (error instanceof WebExchangeBindException) {, +			return error.getMessage();, +		}, +		if (error instanceof ResponseStatusException) {, +			return ((ResponseStatusException) error).getReason();, +		}, +		return error.getMessage();, +	}, +, +	private Throwable determineException(Throwable error) {, +		if (error instanceof ResponseStatusException) {, +			return error.getCause() != null ? error.getCause() : error;, +		}, +		return error;, +	}, +, +	private void handleException(Map<String, Object> errorAttributes,, +			Throwable error, boolean includeStackTrace) {, +		if (this.includeException) {, +			errorAttributes.put("exception", error.getClass().getName());, +		}, +		if (includeStackTrace) {, +			addStackTrace(errorAttributes, error);, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributes.java, + * Copyright 2012-2018 the original author or authors., +import org.springframework.web.bind.support.WebExchangeBindException;, + * @author Stephane Nicoll, +		HttpStatus errorStatus = determineHttpStatus(error);, +		errorAttributes.put("message", determineMessage(error));, +		handleException(errorAttributes, determineException(error), includeStackTrace);, +	private HttpStatus determineHttpStatus(Throwable error) {, +		if (error instanceof ResponseStatusException) {, +			return ((ResponseStatusException) error).getStatus();, +		}, +		return HttpStatus.INTERNAL_SERVER_ERROR;, +	}, +, +	private String determineMessage(Throwable error) {, +		if (error instanceof WebExchangeBindException) {, +			return error.getMessage();, +		}, +		if (error instanceof ResponseStatusException) {, +			return ((ResponseStatusException) error).getReason();, +		}, +		return error.getMessage();, +	}, +, +	private Throwable determineException(Throwable error) {, +		if (error instanceof ResponseStatusException) {, +			return error.getCause() != null ? error.getCause() : error;, +		}, +		return error;, +	}, +, +	private void handleException(Map<String, Object> errorAttributes,, +			Throwable error, boolean includeStackTrace) {, +		if (this.includeException) {, +			errorAttributes.put("exception", error.getClass().getName());, +		}, +		if (includeStackTrace) {, +			addStackTrace(errorAttributes, error);, +		}, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributesTests.java, + * Copyright 2012-2018 the original author or authors., + * @author Stephane Nicoll, +	public void processResponseStatusException() {, +		RuntimeException nested = new RuntimeException("Test");, +		ResponseStatusException error = new ResponseStatusException(, +				HttpStatus.BAD_REQUEST, "invalid request", nested);, +		this.errorAttributes = new DefaultErrorAttributes(true);, +		MockServerHttpRequest request = MockServerHttpRequest.get("/test").build();, +		ServerRequest serverRequest = buildServerRequest(request, error);, +		Map<String, Object> attributes = this.errorAttributes, +				.getErrorAttributes(serverRequest, false);, +		assertThat(attributes.get("status")).isEqualTo(400);, +		assertThat(attributes.get("message")).isEqualTo("invalid request");, +		assertThat(attributes.get("exception")), +				.isEqualTo(RuntimeException.class.getName());, +		assertThat(this.errorAttributes.getError(serverRequest)).isSameAs(error);, +	}, +, +	@Test, +	public void processResponseStatusExceptionWithNoNestedCause() {, +		ResponseStatusException error = new ResponseStatusException(]