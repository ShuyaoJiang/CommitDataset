[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	 * Accept header to use to retrieve the json meta-data., +	 */, +	public static final String ACCEPT_META_DATA =, +			"application/vnd.initializr.v2.1+json,application/vnd.initializr.v2+json";, +, +	/**, +	 * Accept header to use to retrieve the service capabilities of the service. If the, +	 * service does not offer such feature, the json meta-data are retrieved instead., +	 */, +	public static final String ACCEPT_SERVICE_CAPABILITIES =, +			"text/plain," + ACCEPT_META_DATA;, +, +	/**, +		validateResponse(httpResponse, request.getServiceUrl());, +		validateResponse(httpResponse, serviceUrl);, +		return parseJsonMetadata(httpResponse.getEntity());, +	}, +, +	/**, +	 * Loads the service capabilities of the service at the specified url., +	 * <p>If the service supports generating a textual representation of the, +	 * capabilities, it is returned. Otherwhise the json meta-data as a, +	 * {@link JSONObject} is returned., +	 * @param serviceUrl to url of the initializer service, +	 * @return the service capabilities (as a String) or the metadata describing the service, +	 * @throws IOException if the service capabilities cannot be loaded, +	 */, +	public Object loadServiceCapabilities(String serviceUrl) throws IOException  {, +		CloseableHttpResponse httpResponse = executeServiceCapabilitiesRetrieval(serviceUrl);, +		validateResponse(httpResponse, serviceUrl);, +		HttpEntity httpEntity = httpResponse.getEntity();, +		ContentType contentType = ContentType.getOrDefault(httpEntity);, +		if (contentType.getMimeType().equals("text/plain")) {, +			return  getContent(httpEntity);, +		} else {, +			return parseJsonMetadata(httpEntity);, +		}, +	}, +, +	private InitializrServiceMetadata parseJsonMetadata(HttpEntity httpEntity) throws IOException {, +		try {, +			return new InitializrServiceMetadata(getContentAsJson(httpEntity));, +		}, +		catch (JSONException ex) {, +			throw new ReportableException("Invalid content received from server (", +					+ ex.getMessage() + ")", ex);, +		}, +	}, +, +	private void validateResponse(CloseableHttpResponse httpResponse, String serviceUrl) {, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_META_DATA));, +	/**, +	 * Retrieves the service capabilities of the service at the specified URL, +	 */, +	private CloseableHttpResponse executeServiceCapabilitiesRetrieval(String url) {, +		HttpGet request = new HttpGet(url);, +		request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES));, +		return execute(request, url, "retrieve help");, +	}, +, +		return new JSONObject(getContent(entity));, +	}, +, +	private String getContent(HttpEntity entity) throws IOException {, +		return new String(content, charset);, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java, +	 * Accept header to use to retrieve the json meta-data., +	 */, +	public static final String ACCEPT_META_DATA =, +			"application/vnd.initializr.v2.1+json,application/vnd.initializr.v2+json";, +, +	/**, +	 * Accept header to use to retrieve the service capabilities of the service. If the, +	 * service does not offer such feature, the json meta-data are retrieved instead., +	 */, +	public static final String ACCEPT_SERVICE_CAPABILITIES =, +			"text/plain," + ACCEPT_META_DATA;, +, +	/**, +		validateResponse(httpResponse, request.getServiceUrl());, +		validateResponse(httpResponse, serviceUrl);, +		return parseJsonMetadata(httpResponse.getEntity());, +	}, +, +	/**, +	 * Loads the service capabilities of the service at the specified url., +	 * <p>If the service supports generating a textual representation of the, +	 * capabilities, it is returned. Otherwhise the json meta-data as a, +	 * {@link JSONObject} is returned., +	 * @param serviceUrl to url of the initializer service, +	 * @return the service capabilities (as a String) or the metadata describing the service, +	 * @throws IOException if the service capabilities cannot be loaded, +	 */, +	public Object loadServiceCapabilities(String serviceUrl) throws IOException  {, +		CloseableHttpResponse httpResponse = executeServiceCapabilitiesRetrieval(serviceUrl);, +		validateResponse(httpResponse, serviceUrl);, +		HttpEntity httpEntity = httpResponse.getEntity();, +		ContentType contentType = ContentType.getOrDefault(httpEntity);, +		if (contentType.getMimeType().equals("text/plain")) {]