[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java, +		this.logger.info("Server initialized with port: " + port);, +		SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(port,, +				getSsl(), getSslStoreProvider());, +		sslServerCustomizer.customize(server);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java, +		this.logger.info("Server initialized with port: " + port);, +		SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(port,, +				getSsl(), getSslStoreProvider());, +		sslServerCustomizer.customize(server);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(port,, +				getSsl(), getSslStoreProvider());, +		sslServerCustomizer.customize(server);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyReactiveWebServerFactory.java, +		this.logger.info("Server initialized with port: " + port);, +		SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(port,, +				getSsl(), getSslStoreProvider());, +		sslServerCustomizer.customize(server);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(port,, +				getSsl(), getSslStoreProvider());, +		sslServerCustomizer.customize(server);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/SslServerCustomizer.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.web.embedded.jetty;, +, +import java.io.IOException;, +import java.net.URL;, +, +import org.eclipse.jetty.http.HttpVersion;, +import org.eclipse.jetty.server.AbstractConnector;, +import org.eclipse.jetty.server.Connector;, +import org.eclipse.jetty.server.HttpConfiguration;, +import org.eclipse.jetty.server.HttpConnectionFactory;, +import org.eclipse.jetty.server.SecureRequestCustomizer;, +import org.eclipse.jetty.server.Server;, +import org.eclipse.jetty.server.ServerConnector;, +import org.eclipse.jetty.server.SslConnectionFactory;, +import org.eclipse.jetty.util.resource.Resource;, +import org.eclipse.jetty.util.ssl.SslContextFactory;, +, +import org.springframework.boot.web.server.Ssl;, +import org.springframework.boot.web.server.SslStoreProvider;, +import org.springframework.boot.web.server.WebServerException;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.ResourceUtils;, +, +/**, + * {@link JettyServerCustomizer} that configures SSL on the, + * given Jetty server instance., + *, + * @author Brian Clozel, + */, +class SslServerCustomizer implements JettyServerCustomizer {, +, +	private final int port;, +, +	private final Ssl ssl;, +, +	private final SslStoreProvider sslStoreProvider;, +, +	SslServerCustomizer(int port, Ssl ssl, SslStoreProvider sslStoreProvider) {, +		this.port = port;, +		this.ssl = ssl;, +		this.sslStoreProvider = sslStoreProvider;, +	}, +, +	@Override, +	public void customize(Server server) {, +		if (this.ssl != null && this.ssl.isEnabled()) {, +			SslContextFactory sslContextFactory = new SslContextFactory();, +			configureSsl(sslContextFactory, this.ssl, this.sslStoreProvider);, +			AbstractConnector connector = createSslConnector(server, sslContextFactory,, +					this.port);, +			server.setConnectors(new Connector[] { connector });, +		}, +	}, +, +	private AbstractConnector createSslConnector(Server server,, +			SslContextFactory sslContextFactory, int port) {, +		HttpConfiguration config = new HttpConfiguration();, +		config.setSendServerVersion(false);, +		config.addCustomizer(new SecureRequestCustomizer());, +		HttpConnectionFactory connectionFactory = new HttpConnectionFactory(config);]