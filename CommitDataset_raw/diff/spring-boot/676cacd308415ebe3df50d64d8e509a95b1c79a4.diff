[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., +			Integer port = managementServerProperties.getPort();, +			if (port != null && port < 0) {, +			return ((port == null), +					|| (serverProperties.getPort() == null && port.equals(8080)), +					|| (port != 0 && port.equals(serverProperties.getPort())) ? SAME, +					: DIFFERENT);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., +			Integer port = managementServerProperties.getPort();, +			if (port != null && port < 0) {, +			return ((port == null), +					|| (serverProperties.getPort() == null && port.equals(8080)), +					|| (port != 0 && port.equals(serverProperties.getPort())) ? SAME, +					: DIFFERENT);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.EmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerInitializedEvent;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationListener;, +import static org.hamcrest.Matchers.not;, +	public void onRandomPort() throws Exception {, +		this.applicationContext.register(RootConfig.class, RandomPortConfig.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);, +		GrabManagementPort grabManagementPort = new GrabManagementPort(, +				this.applicationContext);, +		this.applicationContext.addApplicationListener(grabManagementPort);, +		this.applicationContext.refresh();, +		int managementPort = grabManagementPort.getServletContainer().getPort();, +		assertThat(managementPort, not(equalTo(8080)));, +		assertContent("/controller", 8080, "controlleroutput");, +		assertContent("/endpoint", 8080, null);, +		assertContent("/controller", managementPort, null);, +		assertContent("/endpoint", managementPort, "endpointoutput");, +	}, +, +	@Test, +	public static class RandomPortConfig {, +	@Configuration, +	public static class DisableConfig {, +, +		@Bean, +		public ManagementServerProperties managementServerProperties() {, +			ManagementServerProperties properties = new ManagementServerProperties();, +			properties.setPort(-1);, +			return properties;, +		}, +, +	}, +, +	private static class GrabManagementPort implements, +			ApplicationListener<EmbeddedServletContainerInitializedEvent> {, +, +		private ApplicationContext rootContext;, +, +		private EmbeddedServletContainer servletContainer;, +, +		public GrabManagementPort(ApplicationContext rootContext) {, +			this.rootContext = rootContext;, +		}, +, +		@Override, +		public void onApplicationEvent(EmbeddedServletContainerInitializedEvent event) {, +			if (event.getApplicationContext() != this.rootContext) {, +				this.servletContainer = event.getEmbeddedServletContainer();, +			}, +		}, +, +		public EmbeddedServletContainer getServletContainer() {, +			return this.servletContainer;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, + * Copyright 2012-2014 the original author or authors., +			Integer port = managementServerProperties.getPort();, +			if (port != null && port < 0) {, +			return ((port == null), +					|| (serverProperties.getPort() == null && port.equals(8080)), +					|| (port != 0 && port.equals(serverProperties.getPort())) ? SAME, +					: DIFFERENT);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.EmbeddedServletContainer;, +import org.springframework.boot.context.embedded.EmbeddedServletContainerInitializedEvent;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationListener;, +import static org.hamcrest.Matchers.not;, +	public void onRandomPort() throws Exception {, +		this.applicationContext.register(RootConfig.class, RandomPortConfig.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,]