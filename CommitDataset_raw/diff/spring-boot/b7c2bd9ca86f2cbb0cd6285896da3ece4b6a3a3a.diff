[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +property. For instance, assume that the `app.acme.target` property was confusing and, +was renamed to `app.acme.name`. The following example shows how to handle that situation:, +	@ConfigurationProperties("app.acme"), +	public class AcmeProperties {, +		@DeprecatedConfigurationProperty(replacement = "app.acme.name"), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +property. For instance, assume that the `app.acme.target` property was confusing and, +was renamed to `app.acme.name`. The following example shows how to handle that situation:, +	@ConfigurationProperties("app.acme"), +	public class AcmeProperties {, +		@DeprecatedConfigurationProperty(replacement = "app.acme.name"), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +			classes="target/classes" start-class="com.example.MyApplication">, +	<findmainclass mainclass="com.example.MainClass" property="main-class" />, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +property. For instance, assume that the `app.acme.target` property was confusing and, +was renamed to `app.acme.name`. The following example shows how to handle that situation:, +	@ConfigurationProperties("app.acme"), +	public class AcmeProperties {, +		@DeprecatedConfigurationProperty(replacement = "app.acme.name"), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +			classes="target/classes" start-class="com.example.MyApplication">, +	<findmainclass mainclass="com.example.MainClass" property="main-class" />, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +TIP: `firstDataSourceProperties` has to be flagged as `@Primary` so that the database, +	app.datasource.first.type=com.zaxxer.hikari.HikariDataSource, +	app.datasource.first.maximum-pool-size=30, +	app.datasource.second.url=jdbc:mysql://localhost/test, +	app.datasource.second.username=dbuser, +	app.datasource.second.password=dbpass, +	app.datasource.second.max-total=30, +				'acme': 'test', +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/appendix-configuration-metadata.adoc, +property. For instance, assume that the `app.acme.target` property was confusing and, +was renamed to `app.acme.name`. The following example shows how to handle that situation:, +	@ConfigurationProperties("app.acme"), +	public class AcmeProperties {, +		@DeprecatedConfigurationProperty(replacement = "app.acme.name"), +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/build-tool-plugins.adoc, +			classes="target/classes" start-class="com.example.MyApplication">, +	<findmainclass mainclass="com.example.MainClass" property="main-class" />, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/howto.adoc, +TIP: `firstDataSourceProperties` has to be flagged as `@Primary` so that the database, +	app.datasource.first.type=com.zaxxer.hikari.HikariDataSource, +	app.datasource.first.maximum-pool-size=30, +	app.datasource.second.url=jdbc:mysql://localhost/test, +	app.datasource.second.username=dbuser, +	app.datasource.second.password=dbpass, +	app.datasource.second.max-total=30, +				'acme': 'test', +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +$ SPRING_APPLICATION_JSON='{"acme":{"name":"test"}}' java -jar myapp.jar, +In the preceding example, you end up with `acme.name=test` in the Spring `Environment`., +You can also supply the JSON as `spring.application.json` in a System property, as shown, +in the following example:, +$ java -Dspring.application.json='{"name":"test"}' -jar myapp.jar, +$ java -jar myapp.jar --spring.application.json='{"name":"test"}', +			url: http://dev.example.com, +			url: http://another.example.com, +	environments.dev.url=http://dev.example.com, +	environments.prod.url=http://another.example.com, +			- dev.example.com, +			- another.example.com, +	my.servers[0]=dev.example.com, +	my.servers[1]=another.example.com, +`null` by default. The following example exposes a list of `MyPojo` from `AcmeProperties`:, +	@ConfigurationProperties("acme"), +	public class AcmeProperties {, +	acme:, +	acme:, +If the `dev` profile is not active, `AcmeProperties.list` contains one `MyPojo` entry, +	acme:, +	acme:, +In the preceding example, if the `dev` profile is active, `AcmeProperties.list` contains, +	@ConfigurationProperties("acme"), +	public class AcmeProperties {, +* `acme.enabled`, `false` by default., +* `acme.remote-address`, with a type that can be coerced from `String`., +* `acme.security.username`, with a nested "security" object whose name is determined by, +* `acme.security.password`., +* `acme.security.roles`, with a collection of `String`., +	@EnableConfigurationProperties(AcmeProperties.class), +The bean name in the example above is `acme-com.example.AcmeProperties`., +Even if the preceding configuration creates a regular bean for `AcmeProperties`, we, +`AcmeProperties` is already a bean, as shown in the following example:, +	@ConfigurationProperties(prefix="acme"), +	public class AcmeProperties {, +	acme:, +			username: admin, +		private final AcmeProperties properties;, +		public MyService(AcmeProperties properties) {, +	@ConfigurationProperties(prefix = "another"), +	public AnotherComponent anotherComponent() {, +Any property defined with the `another` prefix is mapped onto that `AnotherComponent` bean, +in a similar manner as the preceding `AcmeProperties` example., +|Numeric values surrounded by underscores, such as `MY_ACME_1_OTHER = my.acme[1].other`, +such as `my.property-name=acme`., +	@ConfigurationProperties(prefix="acme"), +	public class AcmeProperties {]