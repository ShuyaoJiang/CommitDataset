[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import java.util.Collections;, +import org.springframework.data.cassandra.core.convert.CassandraCustomConversions;, +import org.springframework.data.convert.CustomConversions;, +	public CassandraMappingContext cassandraMapping(CustomConversions conversions) throws ClassNotFoundException {, +		context.setCustomConversions(conversions);, +	public CassandraConverter cassandraConverter(CassandraMappingContext mapping,, +			CustomConversions conversions) {, +		MappingCassandraConverter converter = new MappingCassandraConverter(mapping);, +		converter.setCustomConversions(conversions);, +		return converter;, +	@Bean, +	@ConditionalOnMissingBean, +	public CustomConversions cassandraCustomConversions() {, +		return new CassandraCustomConversions(Collections.emptyList());, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfiguration.java, +import java.util.Collections;, +import org.springframework.data.cassandra.core.convert.CassandraCustomConversions;, +import org.springframework.data.convert.CustomConversions;, +	public CassandraMappingContext cassandraMapping(CustomConversions conversions) throws ClassNotFoundException {, +		context.setCustomConversions(conversions);, +	public CassandraConverter cassandraConverter(CassandraMappingContext mapping,, +			CustomConversions conversions) {, +		MappingCassandraConverter converter = new MappingCassandraConverter(mapping);, +		converter.setCustomConversions(conversions);, +		return converter;, +	@Bean, +	@ConditionalOnMissingBean, +	public CustomConversions cassandraCustomConversions() {, +		return new CassandraCustomConversions(Collections.emptyList());, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationTests.java, +import java.util.Arrays;, +import org.springframework.boot.test.util.EnvironmentTestUtils;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.data.cassandra.core.convert.CassandraCustomConversions;, +	@Test, +	public void customConversions() {, +		this.context = new AnnotationConfigApplicationContext();, +		EnvironmentTestUtils.addEnvironment(this.context,, +				"spring.data.cassandra.keyspaceName:boot_test");, +		this.context.register(CustomConversionConfig.class,, +				TestConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class,, +				CassandraAutoConfiguration.class, CassandraDataAutoConfiguration.class);, +		this.context.refresh();, +		CassandraTemplate template = this.context.getBean(CassandraTemplate.class);, +		assertThat(template.getConverter().getConversionService().canConvert(Person.class,, +				String.class)).isTrue();, +, +	}, +, +	@Configuration, +	static class CustomConversionConfig {, +, +		@Bean, +		public CassandraCustomConversions cassandraCustomConversions() {, +			return new CassandraCustomConversions(Arrays.asList(new MyConverter()));, +		}, +, +	}, +, +	private static class MyConverter implements Converter<Person, String> {, +, +		@Override, +		public String convert(Person o) {, +			return null;, +		}, +	}, +, +	private static class Person {, +, +	}, +]