[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, + * Copyright 2013-2014 the original author or authors., +import com.fasterxml.jackson.databind.SerializationFeature;, +import com.fasterxml.jackson.databind.introspect.Annotated;, +import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;, +import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;, +import com.fasterxml.jackson.databind.ser.PropertyWriter;, +import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;, +import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;, +	private static final String CGLIB_FILTER_ID = "cglibFilter";, +, +	protected Map<String, Object> extract(ApplicationContext context) {, +		configureObjectMapper(mapper);, +, +	protected void configureObjectMapper(ObjectMapper mapper) {, +		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);, +, +		// configure PropertyFiler to make sure Jackson doesn't process CGLIB generated, +		// bean properties, +		mapper.setAnnotationIntrospector(new CglibAnnotationIntrospector());, +		mapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,, +				new CglibBeanPropertyFilter()));, +	}, +, +	/**, +	 * Extension to {@link JacksonAnnotationIntrospector} to supporess CGLIB generated, +	 * bean properties., +	 */, +	private static class CglibAnnotationIntrospector extends, +			JacksonAnnotationIntrospector {, +, +		@Override, +		public Object findFilterId(Annotated a) {, +			Object id = super.findFilterId(a);, +			if (id == null) {, +				id = CGLIB_FILTER_ID;, +			}, +			return id;, +		}, +	}, +, +	/**, +	 * {@link SimpleBeanPropertyFilter} to filter out all bean properties whose names, +	 * start with '$$'., +	 */, +	private static class CglibBeanPropertyFilter extends SimpleBeanPropertyFilter {, +, +		@Override, +		protected boolean include(BeanPropertyWriter writer) {, +			return include(writer.getFullName().getSimpleName());, +		}, +, +		@Override, +		protected boolean include(PropertyWriter writer) {, +			return include(writer.getFullName().getSimpleName());, +		}, +, +		private boolean include(String name) {, +			return !name.startsWith("$$");, +		}, +	}, +]