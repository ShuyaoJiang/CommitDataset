[+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.AuthenticationException;, +	public void defaultAuthenticationEventPublisherRegistered() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(SecurityAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(AuthenticationEventPublisher.class)), +				.isInstanceOf(DefaultAuthenticationEventPublisher.class);, +	}, +, +	@Test, +	public void defaultAuthenticationEventPublisherIsConditionalOnMissingBean() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(AuthenticationEventPublisherConfiguration.class,, +				SecurityAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(AuthenticationEventPublisher.class)), +				.isInstanceOf(AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class);, +	}, +, +	@Test, +	static class AuthenticationEventPublisherConfiguration {, +, +		@Bean, +		public AuthenticationEventPublisher authenticationEventPublisher() {, +			return new TestAuthenticationEventPublisher();, +		}, +, +		class TestAuthenticationEventPublisher implements AuthenticationEventPublisher {, +, +			@Override, +			public void publishAuthenticationSuccess(Authentication authentication) {, +, +			}, +, +			@Override, +			public void publishAuthenticationFailure(AuthenticationException exception, Authentication authentication) {, +, +			}, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/SecurityAutoConfigurationTests.java, +import org.springframework.security.authentication.AuthenticationEventPublisher;, +import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.AuthenticationException;, +	public void defaultAuthenticationEventPublisherRegistered() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(SecurityAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(AuthenticationEventPublisher.class)), +				.isInstanceOf(DefaultAuthenticationEventPublisher.class);, +	}, +, +	@Test, +	public void defaultAuthenticationEventPublisherIsConditionalOnMissingBean() {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(AuthenticationEventPublisherConfiguration.class,, +				SecurityAutoConfiguration.class);, +		this.context.refresh();, +		assertThat(this.context.getBean(AuthenticationEventPublisher.class)), +				.isInstanceOf(AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class);, +	}, +, +	@Test, +	static class AuthenticationEventPublisherConfiguration {, +, +		@Bean, +		public AuthenticationEventPublisher authenticationEventPublisher() {, +			return new TestAuthenticationEventPublisher();, +		}, +, +		class TestAuthenticationEventPublisher implements AuthenticationEventPublisher {, +, +			@Override, +			public void publishAuthenticationSuccess(Authentication authentication) {, +, +			}, +, +			@Override, +			public void publishAuthenticationFailure(AuthenticationException exception, Authentication authentication) {, +, +			}, +		}, +	}, +, +	@Configuration, +++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +* A `DefaultAuthenticationEventPublisher` for publishing authentication events., +You can provide a different `AuthenticationEventPublisher` by adding a bean for it.]