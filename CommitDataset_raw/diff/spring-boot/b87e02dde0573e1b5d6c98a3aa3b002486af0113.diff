[+++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +		@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT), +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +		@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java, +	private final IntegrationManagementConfigurer configurer;, +	public SpringIntegrationMetricReader(IntegrationManagementConfigurer configurer) {, +		this.configurer = configurer;, +		List<Metric<?>> result = new ArrayList<Metric<?>>();, +		String[] channelNames = this.configurer.getChannelNames();, +		String[] handlerNames = this.configurer.getHandlerNames();, +		String[] sourceNames = this.configurer.getSourceNames();, +		addChannelMetrics(result, channelNames);, +		addHandlerMetrics(result, handlerNames);, +		addSourceMetrics(result, sourceNames);, +		result.add(new Metric<Integer>("integration.handlerCount", handlerNames.length));, +		result.add(new Metric<Integer>("integration.channelCount", channelNames.length));, +		result.add(new Metric<Integer>("integration.sourceCount", sourceNames.length));, +		return result;, +	}, +	private void addChannelMetrics(List<Metric<?>> result, String[] names) {, +		for (String name : names) {, +			addChannelMetrics(result, name, this.configurer.getChannelMetrics(name));, +		}, +	}, +, +	private void addChannelMetrics(List<Metric<?>> result, String name,, +			MessageChannelMetrics metrics) {, +		result.addAll(getStatistics(prefix + ".errorRate", metrics.getErrorRate()));, +		result.add(new Metric<Long>(prefix + ".sendCount", metrics.getSendCountLong()));, +		result.addAll(getStatistics(prefix + ".sendRate", metrics.getSendRate()));, +		if (metrics instanceof PollableChannelManagement) {, +			result.add(new Metric<Long>(prefix + ".receiveCount",, +					((PollableChannelManagement) metrics).getReceiveCountLong()));, +	private void addHandlerMetrics(List<Metric<?>> result, String[] names) {, +		for (String name : names) {, +			addHandlerMetrics(result, name, this.configurer.getHandlerMetrics(name));, +		}, +	}, +, +	private void addHandlerMetrics(List<Metric<?>> result, String name,, +			MessageHandlerMetrics metrics) {, +		result.addAll(getStatistics(prefix + ".duration", metrics.getDuration()));, +		long activeCount = metrics.getActiveCountLong();, +		result.add(new Metric<Long>(prefix + ".activeCount", activeCount));, +	private void addSourceMetrics(List<Metric<?>> result, String[] names) {, +		for (String name : names) {, +			addSourceMetrics(result, name, this.configurer.getSourceMetrics(name));, +		}, +	}, +, +	private void addSourceMetrics(List<Metric<?>> result, String name,, +			MessageSourceMetrics sourceMetrics) {, +		result.add(new Metric<Long>(prefix + ".messageCount",, +				sourceMetrics.getMessageCountLong()));, +	private Collection<? extends Metric<?>> getStatistics(String name, Statistics stats) {, +		metrics.add(new Metric<Double>(name + ".mean", stats.getMean()));, +		metrics.add(new Metric<Double>(name + ".max", stats.getMax()));, +		metrics.add(new Metric<Double>(name + ".min", stats.getMin()));, +		metrics.add(new Metric<Double>(name + ".stdev", stats.getStandardDeviation()));, +		metrics.add(new Metric<Long>(name + ".count", stats.getCountLong()));, +		int totalChannelCount = this.configurer.getChannelNames().length;, +		int totalHandlerCount = this.configurer.getHandlerNames().length;, +		int totalSourceCount = this.configurer.getSourceNames().length;, +++ b/spring-boot-actuator/pom.xml, +			<groupId>org.springframework.integration</groupId>, +			<artifactId>spring-integration-jmx</artifactId>, +			<scope>test</scope>, +		</dependency>, +		<dependency>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java, +		@ConditionalOnMissingBean(value = IntegrationManagementConfigurer.class, name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME, search = SearchStrategy.CURRENT), +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java, +	private final IntegrationManagementConfigurer configurer;, +	public SpringIntegrationMetricReader(IntegrationManagementConfigurer configurer) {, +		this.configurer = configurer;, +		List<Metric<?>> result = new ArrayList<Metric<?>>();, +		String[] channelNames = this.configurer.getChannelNames();, +		String[] handlerNames = this.configurer.getHandlerNames();, +		String[] sourceNames = this.configurer.getSourceNames();, +		addChannelMetrics(result, channelNames);, +		addHandlerMetrics(result, handlerNames);]