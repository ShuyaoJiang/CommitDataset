[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportMessage.java, +import java.util.Set;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<String, String> map = mapShortNameToFullyQualifiedNames(outcomes.keySet());, +		List<String> shortNames = new ArrayList<>(map.keySet());, +		Collections.sort(shortNames);, +		for (String shortName : shortNames) {, +			List<String> fullyQualifiedNames = map.get(shortName);, +			if (fullyQualifiedNames.size() > 1) {, +				fullyQualifiedNames.forEach(k -> result.put(k, outcomes.get(k)));, +			}, +			else {, +				result.put(shortName, outcomes.get(fullyQualifiedNames.get(0)));, +			}, +	private MultiValueMap<String, String> mapShortNameToFullyQualifiedNames(Set<String> keySet) {, +		LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();, +		keySet.forEach(k -> map.add(ClassUtils.getShortName(k), k));, +		return map;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportMessage.java, +import java.util.Set;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<String, String> map = mapShortNameToFullyQualifiedNames(outcomes.keySet());, +		List<String> shortNames = new ArrayList<>(map.keySet());, +		Collections.sort(shortNames);, +		for (String shortName : shortNames) {, +			List<String> fullyQualifiedNames = map.get(shortName);, +			if (fullyQualifiedNames.size() > 1) {, +				fullyQualifiedNames.forEach(k -> result.put(k, outcomes.get(k)));, +			}, +			else {, +				result.put(shortName, outcomes.get(fullyQualifiedNames.get(0)));, +			}, +	private MultiValueMap<String, String> mapShortNameToFullyQualifiedNames(Set<String> keySet) {, +		LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();, +		keySet.forEach(k -> map.add(ClassUtils.getShortName(k), k));, +		return map;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReportTests.java, +import org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportMessage;, +	@Test, +	public void reportWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(WebMvcAutoConfiguration.class,, +				org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,, +				org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);, +		context.refresh();, +		ConditionEvaluationReport report = ConditionEvaluationReport, +				.get(context.getBeanFactory());, +		assertThat(report.getConditionAndOutcomesBySource()), +				.containsKeys("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration",, +						"org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",, +						"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");, +	}, +, +	@Test, +	public void reportMessageWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(WebMvcAutoConfiguration.class,, +				org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class,, +				org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class);, +		context.refresh();, +		ConditionEvaluationReport report = ConditionEvaluationReport, +				.get(context.getBeanFactory());, +		String reportMessage = new ConditionEvaluationReportMessage(report).toString();, +		assertThat(reportMessage), +				.contains("WebMvcAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration",, +						"org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration");, +		assertThat(reportMessage).doesNotContain("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration");, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/ConditionEvaluationReportMessage.java, +import java.util.Set;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<String, String> map = mapShortNameToFullyQualifiedNames(outcomes.keySet());, +		List<String> shortNames = new ArrayList<>(map.keySet());, +		Collections.sort(shortNames);, +		for (String shortName : shortNames) {, +			List<String> fullyQualifiedNames = map.get(shortName);, +			if (fullyQualifiedNames.size() > 1) {, +				fullyQualifiedNames.forEach(k -> result.put(k, outcomes.get(k)));, +			}, +			else {, +				result.put(shortName, outcomes.get(fullyQualifiedNames.get(0)));, +			}, +	private MultiValueMap<String, String> mapShortNameToFullyQualifiedNames(Set<String> keySet) {, +		LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();, +		keySet.forEach(k -> map.add(ClassUtils.getShortName(k), k));, +		return map;, +	}, +, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionEvaluationReportTests.java, +import org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportMessage;, +	@Test, +	public void reportWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {]