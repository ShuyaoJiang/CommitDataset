[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +				imports[i] = CacheConfigurations.getConfigurationClass(types[i]);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +				imports[i] = CacheConfigurations.getConfigurationClass(types[i]);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +		CacheType cacheType = CacheConfigurations.getType(((AnnotationMetadata) metadata), +				.getClassName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +				imports[i] = CacheConfigurations.getConfigurationClass(types[i]);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +		CacheType cacheType = CacheConfigurations.getType(((AnnotationMetadata) metadata), +				.getClassName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigurations.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.cache;, +, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +, +/**, + * Mappings between {@link CacheType} and {@code @Configuration}., + *, + * @author Phillip Webb, + */, +class CacheConfigurations {, +, +	private static final Map<CacheType, Class<?>> MAPPINGS;, +	static {, +		Map<CacheType, Class<?>> mappings = new HashMap<CacheType, Class<?>>();, +		mappings.put(CacheType.GENERIC, GenericCacheConfiguration.class);, +		mappings.put(CacheType.EHCACHE, EhCacheCacheConfiguration.class);, +		mappings.put(CacheType.HAZELCAST, HazelcastCacheConfiguration.class);, +		mappings.put(CacheType.INFINISPAN, InfinispanCacheConfiguration.class);, +		mappings.put(CacheType.JCACHE, JCacheCacheConfiguration.class);, +		mappings.put(CacheType.REDIS, RedisCacheConfiguration.class);, +		mappings.put(CacheType.GUAVA, GuavaCacheConfiguration.class);, +		mappings.put(CacheType.SIMPLE, SimpleCacheConfiguration.class);, +		mappings.put(CacheType.NONE, NoOpCacheConfiguration.class);, +		MAPPINGS = Collections.unmodifiableMap(mappings);, +	}, +, +	public static String getConfigurationClass(CacheType cacheType) {, +		Class<?> configurationClass = MAPPINGS.get(cacheType);, +		Assert.state(configurationClass != null, "Unknown cache type " + cacheType);, +		return configurationClass.getName();, +	}, +, +	public static CacheType getType(String configurationClassName) {, +		for (Map.Entry<CacheType, Class<?>> entry : MAPPINGS.entrySet()) {, +			if (entry.getValue().getName().equals(configurationClassName)) {, +				return entry.getKey();, +			}, +		}, +		throw new IllegalStateException("Unknown configuration class ", +				+ configurationClassName);, +	}, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java, +				imports[i] = CacheConfigurations.getConfigurationClass(types[i]);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheCondition.java, +		CacheType cacheType = CacheConfigurations.getType(((AnnotationMetadata) metadata), +				.getClassName());, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheConfigurations.java, +/*, + * Copyright 2012-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.cache;, +]