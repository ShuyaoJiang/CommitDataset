[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +public class InvalidConfigurationPropertyValueException extends RuntimeException {, +		super("Property " + name + " with value '" + value + "' is invalid: " + reason);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +public class InvalidConfigurationPropertyValueException extends RuntimeException {, +		super("Property " + name + " with value '" + value + "' is invalid: " + reason);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +import java.util.Collections;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +import java.util.stream.StreamSupport;, +import org.springframework.boot.origin.Origin;, + *, +		List<Descriptor> descriptors = getDescriptors(cause.getName());, +		StringBuilder description = new StringBuilder();, +		appendDetails(description, cause, descriptors);, +		appendReason(description, cause);, +		appendAdditionalProperties(description, descriptors);, +		return new FailureAnalysis(description.toString(), getAction(cause), cause);, +, +	private List<Descriptor> getDescriptors(String propertyName) {, +		return getPropertySources(), +				.filter((source) -> source.containsProperty(propertyName)), +				.map((source) -> Descriptor.get(source, propertyName)), +				.collect(Collectors.toList());, +	}, +, +	private Stream<PropertySource<?>> getPropertySources() {, +		Iterable<PropertySource<?>> sources = (this.environment == null, +				? Collections.emptyList() : this.environment.getPropertySources());, +		return StreamSupport.stream(sources.spliterator(), false), +				.filter((source) -> !ConfigurationPropertySources, +						.isAttachedConfigurationPropertySource(source));, +	}, +, +	private void appendDetails(StringBuilder message,, +			InvalidConfigurationPropertyValueException cause,, +			List<Descriptor> descriptors) {, +		Descriptor mainDescriptor = descriptors.get(0);, +		message.append("Invalid value '" + mainDescriptor.getValue(), +				+ "' for configuration property '" + cause.getName() + "'");, +		mainDescriptor.appendOrigin(message);, +		message.append(".");, +	}, +, +	private void appendReason(StringBuilder message,, +			InvalidConfigurationPropertyValueException cause) {, +			message.append(" Validation failed for the following reason\n\n");, +	}, +, +	private void appendAdditionalProperties(StringBuilder message,, +			List<Descriptor> descriptors) {, +		List<Descriptor> others = descriptors.subList(1, descriptors.size());, +			for (Descriptor other : others) {, +				message.append("\t- In '" + other.getPropertySource() + "'");, +				message.append(" with the value '" + other.getValue() + "'");, +				other.appendOrigin(message);, +				message.append(".\n");, +	}, +, +	private String getAction(InvalidConfigurationPropertyValueException cause) {, +		return action.toString();, +	private static final class Descriptor {, +		private final Origin origin;, +		private Descriptor(String propertySource, Object value, Origin origin) {, +		public String getPropertySource() {, +			return this.propertySource;, +		}, +, +		public Object getValue() {, +			return this.value;, +		}, +, +		public void appendOrigin(StringBuilder message) {, +			if (this.origin != null) {, +				message.append(" (originating from '" + this.origin + "')");, +			}, +		}, +, +		static Descriptor get(PropertySource<?> source, String propertyName) {, +			Object value = source.getProperty(propertyName);, +			Origin origin = OriginLookup.getOrigin(source, propertyName);, +			return new Descriptor(source.getName(), value, origin);, +		}, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/InvalidConfigurationPropertyValueException.java, +public class InvalidConfigurationPropertyValueException extends RuntimeException {, +		super("Property " + name + " with value '" + value + "' is invalid: " + reason);, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java, +import java.util.Collections;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +import java.util.stream.StreamSupport;, +import org.springframework.boot.origin.Origin;, + *, +		List<Descriptor> descriptors = getDescriptors(cause.getName());, +		StringBuilder description = new StringBuilder();, +		appendDetails(description, cause, descriptors);, +		appendReason(description, cause);, +		appendAdditionalProperties(description, descriptors);]