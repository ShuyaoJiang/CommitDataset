[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +				ServerProperties bean = getBean(beanFactory, ServerProperties.class);, +				ManagementServerProperties bean = getBean(beanFactory,, +						ManagementServerProperties.class);, +		private static <T> T getBean(BeanFactory beanFactory, Class<T> type) {, +			if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {, +				return null;, +			}, +			ConfigurableListableBeanFactory listable = (ConfigurableListableBeanFactory) beanFactory;, +			String[] names = listable.getBeanNamesForType(type, true, false);, +			if (names == null || names.length != 1) {, +				return null;, +			}, +			// Use a temporary child bean factory to avoid instantiating the bean in the, +			// parent (it won't be bound to the environment yet), +			BeanDefinition definition = listable.getBeanDefinition(names[0]);, +			DefaultListableBeanFactory temp = new DefaultListableBeanFactory(listable);, +			temp.registerBeanDefinition(type.getName(), definition);, +			return temp.getBean(type);, +		}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +				ServerProperties bean = getBean(beanFactory, ServerProperties.class);, +				ManagementServerProperties bean = getBean(beanFactory,, +						ManagementServerProperties.class);, +		private static <T> T getBean(BeanFactory beanFactory, Class<T> type) {, +			if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {, +				return null;, +			}, +			ConfigurableListableBeanFactory listable = (ConfigurableListableBeanFactory) beanFactory;, +			String[] names = listable.getBeanNamesForType(type, true, false);, +			if (names == null || names.length != 1) {, +				return null;, +			}, +			// Use a temporary child bean factory to avoid instantiating the bean in the, +			// parent (it won't be bound to the environment yet), +			BeanDefinition definition = listable.getBeanDefinition(names[0]);, +			DefaultListableBeanFactory temp = new DefaultListableBeanFactory(listable);, +			temp.registerBeanDefinition(type.getName(), definition);, +			return temp.getBean(type);, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	public void overrideServerProperties() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.applicationContext,, +				"server.displayName:foo");, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				ServerPortConfig.class, PropertyPlaceholderAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class, JacksonAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class);, +		this.applicationContext.refresh();, +		assertContent("/controller", ports.get().server, "controlleroutput");, +		assertEquals("foo",, +				this.applicationContext.getBean(ServerProperties.class).getDisplayName());, +		this.applicationContext.close();, +		assertAllClosed();, +	}, +, +	@Test, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +				ServerProperties bean = getBean(beanFactory, ServerProperties.class);, +				ManagementServerProperties bean = getBean(beanFactory,, +						ManagementServerProperties.class);, +		private static <T> T getBean(BeanFactory beanFactory, Class<T> type) {, +			if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {, +				return null;, +			}, +			ConfigurableListableBeanFactory listable = (ConfigurableListableBeanFactory) beanFactory;, +			String[] names = listable.getBeanNamesForType(type, true, false);, +			if (names == null || names.length != 1) {, +				return null;, +			}, +			// Use a temporary child bean factory to avoid instantiating the bean in the, +			// parent (it won't be bound to the environment yet), +			BeanDefinition definition = listable.getBeanDefinition(names[0]);, +			DefaultListableBeanFactory temp = new DefaultListableBeanFactory(listable);, +			temp.registerBeanDefinition(type.getName(), definition);, +			return temp.getBean(type);, +		}, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java, +	public void overrideServerProperties() throws Exception {, +		EnvironmentTestUtils.addEnvironment(this.applicationContext,, +				"server.displayName:foo");, +		this.applicationContext.register(RootConfig.class, EndpointConfig.class,, +				ServerPortConfig.class, PropertyPlaceholderAutoConfiguration.class,, +				ManagementServerPropertiesAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class, JacksonAutoConfiguration.class,, +				EmbeddedServletContainerAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				DispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,, +				EndpointWebMvcAutoConfiguration.class);, +		this.applicationContext.refresh();]