[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +	/**, +	 * The default order of Spring Security's Filter, +	 */, +	public static final int DEFAULT_FILTER_ORDER = 0;, +, +	private int filterOrder = DEFAULT_FILTER_ORDER;, +, +	public int getFilterOrder() {, +		return this.filterOrder;, +	}, +, +	public void setFilterOrder(int filterOrder) {, +		this.filterOrder = filterOrder;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +	/**, +	 * The default order of Spring Security's Filter, +	 */, +	public static final int DEFAULT_FILTER_ORDER = 0;, +, +	private int filterOrder = DEFAULT_FILTER_ORDER;, +, +	public int getFilterOrder() {, +		return this.filterOrder;, +	}, +, +	public void setFilterOrder(int filterOrder) {, +		this.filterOrder = filterOrder;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +import javax.servlet.Filter;, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.context.embedded.FilterRegistrationBean;, +import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;, +	@Bean, +	@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME), +	public FilterRegistrationBean securityFilterChainRegistration(, +			@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,, +			SecurityProperties securityProperties) {, +		FilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);, +		registration.setOrder(securityProperties.getFilterOrder());, +		registration, +				.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);, +		return registration;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java, +	/**, +	 * The default order of Spring Security's Filter, +	 */, +	public static final int DEFAULT_FILTER_ORDER = 0;, +, +	private int filterOrder = DEFAULT_FILTER_ORDER;, +, +	public int getFilterOrder() {, +		return this.filterOrder;, +	}, +, +	public void setFilterOrder(int filterOrder) {, +		this.filterOrder = filterOrder;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java, +import javax.servlet.Filter;, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;, +import org.springframework.boot.context.embedded.FilterRegistrationBean;, +import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;, +	@Bean, +	@ConditionalOnBean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME), +	public FilterRegistrationBean securityFilterChainRegistration(, +			@Qualifier(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) Filter securityFilter,, +			SecurityProperties securityProperties) {, +		FilterRegistrationBean registration = new FilterRegistrationBean(securityFilter);, +		registration.setOrder(securityProperties.getFilterOrder());, +		registration, +				.setName(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME);, +		return registration;, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java, +import org.springframework.boot.context.embedded.FilterRegistrationBean;, +	public void testDefaultFilterOrder() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.setServletContext(new MockServletContext());, +		this.context.register(SecurityAutoConfiguration.class,, +				ServerPropertiesAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		assertEquals(, +				0,, +				this.context.getBean("securityFilterChainRegistration",, +						FilterRegistrationBean.class).getOrder());, +	}, +, +	@Test]