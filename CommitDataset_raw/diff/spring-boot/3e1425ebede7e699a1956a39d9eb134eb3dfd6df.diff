[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, + * Base class used for database initialization., + * @author Stephane Nicoll, +	private final DataSource dataSource;, +	private final ResourceLoader resourceLoader;, +	protected AbstractDatabaseInitializer(DataSource dataSource, ResourceLoader resourceLoader) {, +				String platform = getDatabaseName();, +	protected String getDatabaseName() {, +			return databaseDriver.getId();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, + * Base class used for database initialization., + * @author Stephane Nicoll, +	private final DataSource dataSource;, +	private final ResourceLoader resourceLoader;, +	protected AbstractDatabaseInitializer(DataSource dataSource, ResourceLoader resourceLoader) {, +				String platform = getDatabaseName();, +	protected String getDatabaseName() {, +			return databaseDriver.getId();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, + * Copyright 2012-2016 the original author or authors., +	private final BatchProperties properties;, +	protected String getDatabaseName() {, +		String databaseName = super.getDatabaseName();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, + * Base class used for database initialization., + * @author Stephane Nicoll, +	private final DataSource dataSource;, +	private final ResourceLoader resourceLoader;, +	protected AbstractDatabaseInitializer(DataSource dataSource, ResourceLoader resourceLoader) {, +				String platform = getDatabaseName();, +	protected String getDatabaseName() {, +			return databaseDriver.getId();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, + * Copyright 2012-2016 the original author or authors., +	private final BatchProperties properties;, +	protected String getDatabaseName() {, +		String databaseName = super.getDatabaseName();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java, +	private final SessionProperties.Jdbc properties;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AbstractDatabaseInitializer.java, + * Base class used for database initialization., + * @author Stephane Nicoll, +	private final DataSource dataSource;, +	private final ResourceLoader resourceLoader;, +	protected AbstractDatabaseInitializer(DataSource dataSource, ResourceLoader resourceLoader) {, +				String platform = getDatabaseName();, +	protected String getDatabaseName() {, +			return databaseDriver.getId();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java, + * Copyright 2012-2016 the original author or authors., +	private final BatchProperties properties;, +	protected String getDatabaseName() {, +		String databaseName = super.getDatabaseName();, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java, +	private final SessionProperties.Jdbc properties;, +++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java, +	UNKNOWN("unknown", null, null),, +	DERBY("derby", "Apache Derby", "org.apache.derby.jdbc.EmbeddedDriver",, +	H2("h2", "H2", "org.h2.Driver", "org.h2.jdbcx.JdbcDataSource", "SELECT 1"),, +	HSQLDB("hsqldb", "HSQL Database Engine", "org.hsqldb.jdbc.JDBCDriver",, +	SQLITE("sqlite", "SQLite", "org.sqlite.JDBC"),, +	MYSQL("mysql", "MySQL", "com.mysql.jdbc.Driver",, +	MARIADB("maridb", "MySQL", "org.mariadb.jdbc.Driver",, +			"org.mariadb.jdbc.MariaDbDataSource", "SELECT 1"),, +	GAE("gae", null, "com.google.appengine.api.rdbms.AppEngineDriver"),, +	ORACLE("oracle", "Oracle", "oracle.jdbc.OracleDriver",, +	POSTGRESQL("postgresql", "PostgreSQL", "org.postgresql.Driver",, +			"org.postgresql.xa.PGXADataSource", "SELECT 1"),, +	JTDS("jtds", null, "net.sourceforge.jtds.jdbc.Driver"),, +	SQLSERVER("sqlserver", "SQL SERVER", "com.microsoft.sqlserver.jdbc.SQLServerDriver",, +	FIREBIRD("firebird", "Firebird", "org.firebirdsql.jdbc.FBDriver",, +	DB2("db2", "DB2", "com.ibm.db2.jcc.DB2Driver", "com.ibm.db2.jcc.DB2XADataSource",, +	DB2_AS400("db2", "DB2 UDB for AS/400", "com.ibm.as400.access.AS400JDBCDriver",, +	TERADATA("teradata", "Teradata", "com.teradata.jdbc.TeraDriver"),, +	INFORMIX("informix", "Informix Dynamic Server", "com.informix.jdbc.IfxDriver", null,, +	private final String id;, +, +	DatabaseDriver(String id, String name, String driverClassName) {, +		this(id, name, driverClassName, null);, +	DatabaseDriver(String id, String name, String driverClassName,, +			String xaDataSourceClassName) {, +		this(id, name, driverClassName, xaDataSourceClassName, null);, +	DatabaseDriver(String id, String productName, String driverClassName,, +		this.id = id;, +	/**, +	 * Return the identifier of this driver., +	 * @return the identifier, +	 */, +	public String getId() {, +		return this.id;, +	}, +]