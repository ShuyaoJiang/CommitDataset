[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +	private final TransactionManagerCustomizers transactionManagerCustomizers;, +, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this(properties, dataSource, null, transactionManagerCustomizers);, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +			EntityManagerFactory entityManagerFactory,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this.transactionManagerCustomizers = transactionManagerCustomizers, +				.getIfAvailable();, +		if (this.transactionManagerCustomizers != null) {, +			this.transactionManagerCustomizers.customize(transactionManager);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +	private final TransactionManagerCustomizers transactionManagerCustomizers;, +, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this(properties, dataSource, null, transactionManagerCustomizers);, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +			EntityManagerFactory entityManagerFactory,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this.transactionManagerCustomizers = transactionManagerCustomizers, +				.getIfAvailable();, +		if (this.transactionManagerCustomizers != null) {, +			this.transactionManagerCustomizers.customize(transactionManager);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +				EntityManagerFactory entityManagerFactory,, +				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +					entityManagerFactory, transactionManagerCustomizers);, +		public BasicBatchConfigurer basicBatchConfigurer(DataSource dataSource,, +				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +			return new BasicBatchConfigurer(this.properties, dataSource,, +					transactionManagerCustomizers);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +	private final TransactionManagerCustomizers transactionManagerCustomizers;, +, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this(properties, dataSource, null, transactionManagerCustomizers);, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +			EntityManagerFactory entityManagerFactory,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this.transactionManagerCustomizers = transactionManagerCustomizers, +				.getIfAvailable();, +		if (this.transactionManagerCustomizers != null) {, +			this.transactionManagerCustomizers.customize(transactionManager);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +				EntityManagerFactory entityManagerFactory,, +				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +					entityManagerFactory, transactionManagerCustomizers);, +		public BasicBatchConfigurer basicBatchConfigurer(DataSource dataSource,, +				ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +			return new BasicBatchConfigurer(this.properties, dataSource,, +					transactionManagerCustomizers);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfiguration.java, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +			Neo4jProperties properties,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		return customize(new Neo4jTransactionManager(sessionFactory),, +				transactionManagerCustomizers.getIfAvailable());, +	}, +, +	private Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager,, +			TransactionManagerCustomizers customizers) {, +		if (customizers != null) {, +			customizers.customize(transactionManager);, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;, +	private final TransactionManagerCustomizers transactionManagerCustomizers;, +, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null}), +	protected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,, +			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {, +		this(properties, dataSource, null, transactionManagerCustomizers);, +	 * @param transactionManagerCustomizers transaction manager customizers (or, +	 * {@code null})]