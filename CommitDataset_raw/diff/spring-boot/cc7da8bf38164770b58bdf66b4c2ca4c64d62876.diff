[+++ b/spring-boot-project/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +We then walk you through building your first Spring Boot application, discussing some core, +principles as we go., +platform and third-party libraries, so that you can get started with minimum fuss. Most, +Spring Boot applications need very little Spring configuration., +You can use Spring Boot to create Java applications that can be started by using, +`java -jar` or more traditional war deployments. We also provide a command line tool that, +runs "`spring scripts`"., +(such as embedded servers, security, metrics, health checks, and externalized, +configuration)., +you might want to try the <<getting-started-installing-the-cli, Spring Boot CLI>> (Command, +Line Interface) first, otherwise, read on for "`classic`" installation instructions., +You can use Spring Boot in the same way as any standard Java library. To do so, include, +the appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not, +require any special tools integration, so you can use any IDE or text editor. Also, there, +is nothing special about a Spring Boot application, so you can run and debug a Spring Boot, +application as you would any other Java program., +provides a useful <<build-tool-plugins.adoc#build-tool-plugins-gradle-plugin, Gradle, +plugin>> that can be used to simplify dependency declarations and to create executable, +jars., +The Spring Boot CLI (Command Line Interface) is a command line tool that you can use to, +quickly prototype with Spring. It lets you run http://groovy-lang.org/[Groovy] scripts,, +Cutting edge http://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/[snapshot, +distributions] are also available., +initialization. On a Debian system, the system-wide scripts are in, +`/shell-completion/bash` and all scripts in that directory are executed when a new shell, +starts. For example, to run the script manually if you have installed using SDKMAN!, use, +the following commands:, +This section describes how to develop a simple "`Hello World!`" web application that, +highlights some of Spring Boot's key features. We use Maven to build this project, since, +most IDEs support it., +right away>>. Check the https://github.com/spring-io/initializr[Spring Initializr, +documentation] for more details., +Before we begin, open a terminal and run the following commands to ensure that you have, +valid versions of Java and Maven installed:, +The preceding listing should give you a working build. You can test it by running, +`mvn package` (for now, you can ignore the "`jar will be empty - no content was marked for, +inclusion!`" warning)., +The `mvn dependency:tree` command prints a tree representation of your project, +dependencies. You can see that `spring-boot-starter-parent` provides no, +dependencies by itself. To add the necessary dependencies, edit your `pom.xml` and add the, +`spring-boot-starter-web` dependency immediately below the `parent` section:, +To finish our application, we need to create a single Java file. By default, Maven, +compiles sources from `src/main/java`, so you need to create that folder structure and, +then add a file named `src/main/java/Example.java` to contain the following code:, +(They are not specific to Spring Boot.) See the {spring-reference}web.html#mvc[MVC, +section] in the Spring Reference Documentation for more details., +all the classes from all the application's dependencies into a single archive. The problem, +with this approach is that it becomes hard to see which libraries are in your application., +It can also be problematic if the same filename is used (but with different content) in, +file should be around 10 MB in size. If you want to peek inside, you can use `jar tvf`, as, +follows:]