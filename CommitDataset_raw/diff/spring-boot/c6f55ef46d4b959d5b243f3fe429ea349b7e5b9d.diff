[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +import java.io.Closeable;, +import java.util.LinkedHashMap;, +import java.util.concurrent.Callable;, +, +import com.google.common.collect.Streams;, +import org.springframework.core.env.Environment;, +import org.springframework.util.StringUtils;, + * Test utilities for adding properties. Properties can be applied to a Spring, + * {@link Environment} or to the {@link System#getProperties() system environment}., + * @author Phillip Webb, +	private final Map<String, Object> properties = new LinkedHashMap<>();, +			and(pair);, +		}, +	}, +, +	/**, +	 * Builder method to append another property pair the underlying map of properties., +	 * @param pair The property pair to add, +	 * @return the existing instance of {@link TestPropertyValues}, +	 */, +	public TestPropertyValues and(String pair) {, +		and(key.trim(), value.trim());, +		return this;, +	 * @param name The property name, +	public TestPropertyValues and(String name, String value) {, +		if (StringUtils.isEmpty(name) && StringUtils.isEmpty(value)) {, +			return this;, +		}, +		Assert.hasLength(name, "Name must not be empty");, +		this.properties.put(name, value);, +	/**, +	 * Add the properties to the {@link System#getProperties() system properties} for the, +	 * duration of the {@code call}, restoring previous values then the call completes., +	 * @param <T> the result type, +	 * @param call the call to make, +	 * @return the result of the call, +	 */, +	public <T> T applyToSystemProperties(Callable<T> call) {, +		try (SystemPropertiesHandler handler = new SystemPropertiesHandler()) {, +			return call.call();, +		}, +		catch (RuntimeException ex) {, +			throw ex;, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	 * Return a new empty {@link TestPropertyValues} instance., +	 * @return an empty instance, +	 */, +	public static TestPropertyValues empty() {, +		return of();, +	}, +, +	/**, +	 * Return a new {@link TestPropertyValues} with the underlying map populated with the, +	 * given property pair., +	 * @param name the property name, +	 * @param value the property value, +	 * @return the new instance, +	 */, +, +	public static TestPropertyValues ofPair(String name, String value) {, +		return of().and(name, value);, +	}, +, +	/**, +	 * Return a new {@link TestPropertyValues} with the underlying map populated with the, +	 * given property pairs. Name-value pairs can be specified with colon (":") or equals, +	 * ("=") separators., +	 * @param pairs The key value pairs for properties that need to be added to the, +	 * environment, +	 * @return the new instance, +	 */, +	public static TestPropertyValues of(Iterable<String> pairs) {, +		if (pairs == null) {, +			return of();, +		}, +		return of(Streams.stream(pairs).toArray(String[]::new));, +	}, +, +	/**, +	/**, +	 * Handler to apply and restore system properties., +	 */, +	private class SystemPropertiesHandler implements Closeable {, +, +		private final Map<String, Object> properties;, +, +		private final Map<String, String> previous;, +, +		SystemPropertiesHandler() {, +			this.properties = new LinkedHashMap<>(TestPropertyValues.this.properties);, +			this.previous = apply(this.properties);, +		}, +, +		private Map<String, String> apply(Map<String, ?> properties) {]