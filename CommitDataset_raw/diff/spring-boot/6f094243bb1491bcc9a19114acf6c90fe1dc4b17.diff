[+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +import org.eclipse.jetty.util.thread.ThreadPool;, + * @author Henri Kerola, +	private ThreadPool threadPool;, +, +		Server server;, +		if (ClassUtils.hasConstructor(Server.class, ThreadPool.class)) {, +			server = new Jetty9ServerFactory().createServer(getThreadPool());, +		}, +		else {, +			server = new Jetty8ServerFactory().createServer(getThreadPool());, +		}, +	/**, +	 * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}., +	 * @return a Jetty {@link ThreadPool} or {@code null}, +	 */, +	public ThreadPool getThreadPool() {, +		return this.threadPool;, +	}, +, +	/**, +	 * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}., +	 * If set to {@code null} (default), the {@link Server} creates, +	 * a {@link ThreadPool} implicitly., +	 * @param threadPool a Jetty ThreadPool to be used, +	 */, +	public void setThreadPool(ThreadPool threadPool) {, +		this.threadPool = threadPool;, +	}, +, +	private interface ServerFactory {, +, +		Server createServer(ThreadPool threadPool);, +, +	}, +, +	private static class Jetty8ServerFactory implements ServerFactory {, +, +		@Override, +		public Server createServer(ThreadPool threadPool) {, +			Server server = new Server();, +			try {, +				ReflectionUtils.findMethod(Server.class, "setThreadPool", ThreadPool.class), +						.invoke(server, threadPool);, +			}, +			catch (Exception e) {, +				throw new RuntimeException("Failed to configure Jetty 8 ThreadPool", e);, +			}, +			return server;, +		}, +, +	}, +, +	private static class Jetty9ServerFactory implements ServerFactory {, +, +		@Override, +		public Server createServer(ThreadPool threadPool) {, +			Server server = new Server(threadPool);, +			return server;, +		}, +, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java, +import org.eclipse.jetty.util.thread.ThreadPool;, + * @author Henri Kerola, +	private ThreadPool threadPool;, +, +		Server server;, +		if (ClassUtils.hasConstructor(Server.class, ThreadPool.class)) {, +			server = new Jetty9ServerFactory().createServer(getThreadPool());, +		}, +		else {, +			server = new Jetty8ServerFactory().createServer(getThreadPool());, +		}, +	/**, +	 * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}., +	 * @return a Jetty {@link ThreadPool} or {@code null}, +	 */, +	public ThreadPool getThreadPool() {, +		return this.threadPool;, +	}, +, +	/**, +	 * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}., +	 * If set to {@code null} (default), the {@link Server} creates, +	 * a {@link ThreadPool} implicitly., +	 * @param threadPool a Jetty ThreadPool to be used, +	 */, +	public void setThreadPool(ThreadPool threadPool) {, +		this.threadPool = threadPool;, +	}, +, +	private interface ServerFactory {, +, +		Server createServer(ThreadPool threadPool);, +, +	}, +, +	private static class Jetty8ServerFactory implements ServerFactory {]