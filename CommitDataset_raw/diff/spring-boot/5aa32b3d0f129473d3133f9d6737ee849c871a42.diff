[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean(), +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointHandlerMapping.java, +	 * @param endpointMapping the base mapping for all endpoints, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointHandlerMapping.java, +	 * @param endpointMapping the base mapping for all endpoints, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscovererTests.java, +	public void endpointInParentContextIsDiscovered() {, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointHandlerMapping.java, +	 * @param endpointMapping the base mapping for all endpoints, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscovererTests.java, +	public void endpointInParentContextIsDiscovered() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java, +	private final Map<String, Provider> provider = new HashMap<>();, +	private final Map<String, Registration> registration = new HashMap<>();, +		 * Client authentication method. May be left blank then using a pre-defined, +		 * Authorization grant type. May be left blank then using a pre-defined provider., +		 * Redirect URI. May be left blank then using a pre-defined provider., +		 * Authorization scopes. May be left blank then using a pre-defined provider., +		 * Client name. May be left blank then using a pre-defined provider., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean(), +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/WebFluxEndpointHandlerMapping.java, +	 * @param endpointMapping the base mapping for all endpoints, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/annotation/AnnotationEndpointDiscovererTests.java, +	public void endpointInParentContextIsDiscovered() {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientProperties.java, +	private final Map<String, Provider> provider = new HashMap<>();, +	private final Map<String, Registration> registration = new HashMap<>();, +		 * Client authentication method. May be left blank then using a pre-defined, +		 * Authorization grant type. May be left blank then using a pre-defined provider., +		 * Redirect URI. May be left blank then using a pre-defined provider., +		 * Authorization scopes. May be left blank then using a pre-defined provider., +		 * Client name. May be left blank then using a pre-defined provider., +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/NonUniqueSessionRepositoryFailureAnalyzer.java, + * An {@link AbstractFailureAnalyzer} for {@link NonUniqueSessionRepositoryException}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/EndpointEnablementProviderTests.java, +	public void defaultEnablementNeutralJmxWithTechDisablement() {, +	public void defaultEnablementNeutralJmxWithUnrelatedTechDisablement() {, +			DefaultEnablement defaultEnablement, String... environment) {, +		return getEndpointEnablement(id, defaultEnablement, null, environment);, +			DefaultEnablement defaultEnablement, EndpointExposure exposure,, +			return provider.getEndpointEnablement(id, defaultEnablement, exposure);, +		return provider.getEndpointEnablement(id, defaultEnablement);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointAutoConfigurationTests.java, +	public void runWhenEnabledPropertyIsFalseShouldNotHaveStatusEndpointBean()]