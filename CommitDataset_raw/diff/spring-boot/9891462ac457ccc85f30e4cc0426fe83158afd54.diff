[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.WebApplicationContextTester;, +	private WebApplicationContextTester context = new WebApplicationContextTester(), +			.withUserConfiguration(TestConfiguration.class), +			.withConfiguration(AutoConfigurations.of(Neo4jDataAutoConfiguration.class,, +					TransactionAutoConfiguration.class));, +		this.context.withPropertyValues("spring.data.neo4j.uri=http://localhost:8989"), +				.run((loaded) -> {, +					assertThat(loaded).hasSingleBean(, +							org.neo4j.ogm.config.Configuration.class);, +					assertThat(loaded).hasSingleBean(SessionFactory.class);, +					assertThat(loaded).hasSingleBean(Neo4jTransactionManager.class);, +					assertThat(loaded).hasSingleBean(OpenSessionInViewInterceptor.class);, +				});, +		this.context.withPropertyValues("spring.transaction.default-timeout=30",, +				"spring.transaction.rollback-on-commit-failure:true").run((loaded) -> {, +			Neo4jTransactionManager transactionManager = loaded, +		});, +		this.context.withUserConfiguration(CustomSessionFactory.class).run((loaded) -> {, +			assertThat(loaded).doesNotHaveBean(org.neo4j.ogm.config.Configuration.class);, +			assertThat(loaded).hasSingleBean(SessionFactory.class);, +		});, +		this.context.withUserConfiguration(CustomConfiguration.class).run((loaded) -> {, +			assertThat(loaded.getBean(org.neo4j.ogm.config.Configuration.class)), +					.isSameAs(loaded.getBean("myConfiguration"));, +			assertThat(loaded).hasSingleBean(SessionFactory.class);, +			assertThat(loaded).hasSingleBean(org.neo4j.ogm.config.Configuration.class);, +		});, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		AutoConfigurationPackages.register(context, cityPackage);, +		context.register(Neo4jDataAutoConfiguration.class,, +		try {, +			context.refresh();, +			assertDomainTypesDiscovered(context.getBean(Neo4jMappingContext.class),, +		finally {, +			context.close();, +		}, +	}, +		this.context.withPropertyValues("spring.data.neo4j.open-in-view:false"), +				.run((loaded) -> assertThat(loaded).doesNotHaveBean(, +						OpenSessionInViewInterceptor.class));, +		this.context.withUserConfiguration(EventListenerConfiguration.class), +				.run((loaded) -> {, +					Session session = loaded.getBean(SessionFactory.class).openSession();, +					verify(loaded.getBean("eventListenerOne", EventListener.class)), +					verify(loaded.getBean("eventListenerTwo", EventListener.class)), +				});]