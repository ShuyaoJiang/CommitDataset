[+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java, + * Copyright 2012-2017 the original author or authors., +			outputConditionEvaluationReport(testContext);, +			throw ex;, +		}, +	}, +, +	private void outputConditionEvaluationReport(TestContext testContext) {, +		catch (Exception ex) {, +			// Allow original failure to be reported, +++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java, + * Copyright 2012-2017 the original author or authors., +			outputConditionEvaluationReport(testContext);, +			throw ex;, +		}, +	}, +, +	private void outputConditionEvaluationReport(TestContext testContext) {, +		catch (Exception ex) {, +			// Allow original failure to be reported, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListenerTests.java, +import org.junit.rules.ExpectedException;, +import static org.hamcrest.CoreMatchers.is;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void originalFailureIsThrownWhenReportGenerationFails() throws Exception {, +		TestContext testContext = mock(TestContext.class);, +		IllegalStateException originalFailure = new IllegalStateException();, +		given(testContext.getTestInstance()).willThrow(originalFailure);, +		SpringApplication application = new SpringApplication(Config.class);, +		application.setWebEnvironment(false);, +		given(testContext.getApplicationContext()).willThrow(new RuntimeException());, +		this.thrown.expect(is(originalFailure));, +		this.reportListener.prepareTestInstance(testContext);, +	}, +]