[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +	 * Include only the specified auto-configuration classes and do not attempt full, +	 * auto-configuration. Using this attribute means that {@code spring.factories} files, +	 * will not be considered. This attribute should not generally be specified in, +	 * production applications, however, it is useful for tests., +	 * @return the classes to include, +	 */, +	Class<?>[] include() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +	 * Include only the specified auto-configuration classes and do not attempt full, +	 * auto-configuration. Using this attribute means that {@code spring.factories} files, +	 * will not be considered. This attribute should not generally be specified in, +	 * production applications, however, it is useful for tests., +	 * @return the classes to include, +	 */, +	Class<?>[] include() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			List<String> factories = getFactories(attributes);, +			excluded.addAll(asList(attributes, "exclude"));, +			excluded.addAll(asList(attributes, "excludeName"));, +	private List<String> getFactories(AnnotationAttributes attributes) {, +		List<String> factories = asList(attributes, "include");, +		if (factories.isEmpty()) {, +			factories = SpringFactoriesLoader.loadFactoryNames(, +					EnableAutoConfiguration.class, this.beanClassLoader);, +		}, +		return new ArrayList<String>(new LinkedHashSet<String>(factories));, +	}, +, +	private List<String> asList(AnnotationAttributes attributes, String name) {, +		String[] value = attributes.getStringArray(name);, +		return Arrays.asList(value == null ? new String[0] : value);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +	 * Include only the specified auto-configuration classes and do not attempt full, +	 * auto-configuration. Using this attribute means that {@code spring.factories} files, +	 * will not be considered. This attribute should not generally be specified in, +	 * production applications, however, it is useful for tests., +	 * @return the classes to include, +	 */, +	Class<?>[] include() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			List<String> factories = getFactories(attributes);, +			excluded.addAll(asList(attributes, "exclude"));, +			excluded.addAll(asList(attributes, "excludeName"));, +	private List<String> getFactories(AnnotationAttributes attributes) {, +		List<String> factories = asList(attributes, "include");, +		if (factories.isEmpty()) {, +			factories = SpringFactoriesLoader.loadFactoryNames(, +					EnableAutoConfiguration.class, this.beanClassLoader);, +		}, +		return new ArrayList<String>(new LinkedHashSet<String>(factories));, +	}, +, +	private List<String> asList(AnnotationAttributes attributes, String name) {, +		String[] value = attributes.getStringArray(name);, +		return Arrays.asList(value == null ? new String[0] : value);, +	}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelectorTests.java, +	@Test, +	public void classIncludesAreApplied() throws Exception {, +		given(, +				this.annotationMetadata.getAnnotationAttributes(, +						EnableAutoConfiguration.class.getName(), true)).willReturn(, +				this.annotationAttributes);, +		given(this.annotationAttributes.getStringArray("include")).willReturn(, +				new String[] { FreeMarkerAutoConfiguration.class.getName() });, +		String[] imports = this.importSelector.selectImports(this.annotationMetadata);, +		assertThat(imports.length, is(equalTo(1)));, +	}, +, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java, +	 * Include only the specified auto-configuration classes and do not attempt full, +	 * auto-configuration. Using this attribute means that {@code spring.factories} files, +	 * will not be considered. This attribute should not generally be specified in, +	 * production applications, however, it is useful for tests., +	 * @return the classes to include, +	 */, +	Class<?>[] include() default {};, +, +	/**, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java, +			List<String> factories = getFactories(attributes);, +			excluded.addAll(asList(attributes, "exclude"));, +			excluded.addAll(asList(attributes, "excludeName"));, +	private List<String> getFactories(AnnotationAttributes attributes) {, +		List<String> factories = asList(attributes, "include");, +		if (factories.isEmpty()) {, +			factories = SpringFactoriesLoader.loadFactoryNames(, +					EnableAutoConfiguration.class, this.beanClassLoader);, +		}]