[+++ b/spring-boot-actuator-docs/pom.xml, +		<!-- Compile -->, +++ b/spring-boot-actuator-docs/pom.xml, +		<!-- Compile -->, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean(value = CouchbaseConfiguration.class, type = "org.springframework.data.couchbase.config.CouchbaseConfigurer"), +	 * <p>, +	 * The reason why we check for the presence of {@code CouchbaseConfigurer} is that it, +	 * might use {@link CouchbaseProperties} for its internal customization., +++ b/spring-boot-actuator-docs/pom.xml, +		<!-- Compile -->, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean(value = CouchbaseConfiguration.class, type = "org.springframework.data.couchbase.config.CouchbaseConfigurer"), +	 * <p>, +	 * The reason why we check for the presence of {@code CouchbaseConfigurer} is that it, +	 * might use {@link CouchbaseProperties} for its internal customization., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanWithFilteredClasspathTests.java, +, +++ b/spring-boot-actuator-docs/pom.xml, +		<!-- Compile -->, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean(value = CouchbaseConfiguration.class, type = "org.springframework.data.couchbase.config.CouchbaseConfigurer"), +	 * <p>, +	 * The reason why we check for the presence of {@code CouchbaseConfigurer} is that it, +	 * might use {@link CouchbaseProperties} for its internal customization., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanWithFilteredClasspathTests.java, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationTests.java, +++ b/spring-boot-actuator-docs/pom.xml, +		<!-- Compile -->, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java, +	@ConditionalOnMissingBean(value = CouchbaseConfiguration.class, type = "org.springframework.data.couchbase.config.CouchbaseConfigurer"), +	 * <p>, +	 * The reason why we check for the presence of {@code CouchbaseConfigurer} is that it, +	 * might use {@link CouchbaseProperties} for its internal customization., +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanWithFilteredClasspathTests.java, +, +++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationTests.java, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java, +		return hashCode(u.getProtocol(), u.getFile());, +, +	private int hashCode(String protocol, String file) {, +		int result = (protocol == null ? 0 : protocol.hashCode());, +		String source = file.substring(0, separatorIndex);, +		String entry = canonicalize(file.substring(separatorIndex + 2));, +			result += new URL(source).hashCode();, +			result += source.hashCode();]