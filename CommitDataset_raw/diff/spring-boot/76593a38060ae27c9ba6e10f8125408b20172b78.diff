[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/PrimaryDefaultValidatorPostProcessor.java, +		BeanDefinition definition = getAutoConfiguredValidator(registry);, +		if (definition != null) {, +			definition.setPrimary(!hasPrimarySpringValidator(registry));, +, +	private BeanDefinition getAutoConfiguredValidator(BeanDefinitionRegistry registry) {, +		if (registry.containsBeanDefinition(VALIDATOR_BEAN_NAME)) {, +			BeanDefinition definition = registry.getBeanDefinition(VALIDATOR_BEAN_NAME);, +			if (definition.getRole() == BeanDefinition.ROLE_INFRASTRUCTURE && isTypeMatch(, +					VALIDATOR_BEAN_NAME, LocalValidatorFactoryBean.class)) {, +				return definition;, +		return null;, +	}, +, +	private boolean isTypeMatch(String name, Class<?> type) {, +		return this.beanFactory != null && this.beanFactory.isTypeMatch(name, type);, +	}, +			BeanDefinition definition = registry.getBeanDefinition(validatorBean);, +			if (definition != null && definition.isPrimary()) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/PrimaryDefaultValidatorPostProcessor.java, +		BeanDefinition definition = getAutoConfiguredValidator(registry);, +		if (definition != null) {, +			definition.setPrimary(!hasPrimarySpringValidator(registry));, +, +	private BeanDefinition getAutoConfiguredValidator(BeanDefinitionRegistry registry) {, +		if (registry.containsBeanDefinition(VALIDATOR_BEAN_NAME)) {, +			BeanDefinition definition = registry.getBeanDefinition(VALIDATOR_BEAN_NAME);, +			if (definition.getRole() == BeanDefinition.ROLE_INFRASTRUCTURE && isTypeMatch(, +					VALIDATOR_BEAN_NAME, LocalValidatorFactoryBean.class)) {, +				return definition;, +		return null;, +	}, +, +	private boolean isTypeMatch(String name, Class<?> type) {, +		return this.beanFactory != null && this.beanFactory.isTypeMatch(name, type);, +	}, +			BeanDefinition definition = registry.getBeanDefinition(validatorBean);, +			if (definition != null && definition.isPrimary()) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfigurationTests.java, +		assertThat(springValidatorNames).containsExactly("customValidator",, +				"anotherCustomValidator", "defaultValidator");, +		assertThat(springValidatorNames).containsExactly("customValidator",, +				"anotherCustomValidator", "defaultValidator");, +		assertThat(springValidator), +				.isEqualTo(this.context.getBean("anotherCustomValidator"));]