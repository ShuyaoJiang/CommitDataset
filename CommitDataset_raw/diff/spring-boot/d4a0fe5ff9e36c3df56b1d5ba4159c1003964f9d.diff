[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import java.util.Collection;, + * @author Stephane Nicoll, +			Class<?> type = writer.getType().getRawClass();, +			// should be kosher. Lists and Maps are also auto-detected by default since, +			// that's what the metadata generator does. This filter is not used if there, +			// is JSON metadata for the property, so it's mainly for user-defined beans., +					|| ClassUtils.getPackageName(parentType).equals(ClassUtils.getPackageName(type)), +					|| Map.class.isAssignableFrom(type), +					|| Collection.class.isAssignableFrom(type);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java, +import java.util.Collection;, + * @author Stephane Nicoll, +			Class<?> type = writer.getType().getRawClass();, +			// should be kosher. Lists and Maps are also auto-detected by default since, +			// that's what the metadata generator does. This filter is not used if there, +			// is JSON metadata for the property, so it's mainly for user-defined beans., +					|| ClassUtils.getPackageName(parentType).equals(ClassUtils.getPackageName(type)), +					|| Map.class.isAssignableFrom(type), +					|| Collection.class.isAssignableFrom(type);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java, +import static org.assertj.core.api.Assertions.entry;, + * @author Stephane Nicoll, +	public void testInitializedMapAndList() throws Exception {, +		this.context.register(InitializedMapAndListPropertiesConfig.class);, +		assertThat(properties).containsKeys("foo");, +		assertThat(nestedProperties).containsOnlyKeys("prefix", "properties");, +		assertThat(propertiesMap).containsOnlyKeys("bar", "name", "map", "list");, +		assertThat(map).containsOnly(entry("entryOne", true));, +		assertThat(list).containsExactly("abc");, +	public static class InitializedMapAndListPropertiesConfig {, +, +		public InitializedMapAndListProperties foo() {, +			return new InitializedMapAndListProperties();, +, +	public static class InitializedMapAndListProperties extends Foo {, +, +		private Map<String, Boolean> map = new HashMap<String, Boolean>();, +, +		private List<String> list = new ArrayList<String>();, +]