[+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	public void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit) {, +		Assert.notNull(timeUnit, "TimeUnit must not be null");, +		this.sessionTimeout = (int) timeUnit.toSeconds(sessionTimeout);, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	public void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit) {, +		Assert.notNull(timeUnit, "TimeUnit must not be null");, +		this.sessionTimeout = (int) timeUnit.toSeconds(sessionTimeout);, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/ConfigurableEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	 * The session timeout in the specified {@link TimeUnit} (default 30 seconds). If 0 or, +	 * negative then sessions never expire., +	 * @param sessionTimeout the session timeout, +	 * @param timeUnit the time unit, +	 */, +	void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit);, +, +	/**, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	public void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit) {, +		Assert.notNull(timeUnit, "TimeUnit must not be null");, +		this.sessionTimeout = (int) timeUnit.toSeconds(sessionTimeout);, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/ConfigurableEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	 * The session timeout in the specified {@link TimeUnit} (default 30 seconds). If 0 or, +	 * negative then sessions never expire., +	 * @param sessionTimeout the session timeout, +	 * @param timeUnit the time unit, +	 */, +	void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit);, +, +	/**, +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java, +import java.util.concurrent.TimeUnit;, +import org.eclipse.jetty.server.Handler;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.mockito.Matchers.anyObject;, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +	@Override, +	protected JettyEmbeddedServletContainerFactory getFactory() {, +		return new JettyEmbeddedServletContainerFactory();, +	}, +, +	@Test, +	public void sessionTimeout() throws Exception {, +		JettyEmbeddedServletContainerFactory factory = getFactory();, +		factory.setSessionTimeout(10);, +		assertTimeout(factory, 10);, +, +	@Test, +	public void sessionTimeoutInMins() throws Exception {, +		JettyEmbeddedServletContainerFactory factory = getFactory();, +		factory.setSessionTimeout(1, TimeUnit.MINUTES);, +		assertTimeout(factory, 60);, +	}, +, +	private void assertTimeout(JettyEmbeddedServletContainerFactory factory, int expected) {, +		this.container = factory.getEmbeddedServletContainer();, +		JettyEmbeddedServletContainer jettyContainer = (JettyEmbeddedServletContainer) this.container;, +		Handler[] handlers = jettyContainer.getServer().getChildHandlersByClass(, +				WebAppContext.class);, +		WebAppContext webAppContext = (WebAppContext) handlers[0];, +		int actual = webAppContext.getSessionHandler().getSessionManager(), +				.getMaxInactiveInterval();, +		assertThat(actual, equalTo(expected));, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	public void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit) {, +		Assert.notNull(timeUnit, "TimeUnit must not be null");, +		this.sessionTimeout = (int) timeUnit.toSeconds(sessionTimeout);, +	}, +, +++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/ConfigurableEmbeddedServletContainerFactory.java, +import java.util.concurrent.TimeUnit;, +	 * The session timeout in the specified {@link TimeUnit} (default 30 seconds). If 0 or, +	 * negative then sessions never expire., +	 * @param sessionTimeout the session timeout, +	 * @param timeUnit the time unit, +	 */, +	void setSessionTimeout(int sessionTimeout, TimeUnit timeUnit);, +, +	/**, +++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java, +import java.util.concurrent.TimeUnit;, +import org.eclipse.jetty.server.Handler;, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertThat;]