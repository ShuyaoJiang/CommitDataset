[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationDecision.java, +, +	public AutoConfigurationDecision(String message, String classOrMethodName,, +			Outcome outcome) {, +		return this.message;, +		return this.classOrMethodName;, +		return this.outcome;, +		return "AutoConfigurationDecision{" + "message='" + this.message + '\'', +				+ ", classOrMethodName='" + this.classOrMethodName + '\'' + ", outcome=", +				+ this.outcome + '}';, +		if (this.message != null ? !this.message.equals(decision.message), +		if (this.outcome != null ? !this.outcome.equals(decision.outcome), +		int result = this.message != null ? this.message.hashCode() : 0;, +		result = 31 * result + (this.outcome != null ? this.outcome.hashCode() : 0);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationDecision.java, +, +	public AutoConfigurationDecision(String message, String classOrMethodName,, +			Outcome outcome) {, +		return this.message;, +		return this.classOrMethodName;, +		return this.outcome;, +		return "AutoConfigurationDecision{" + "message='" + this.message + '\'', +				+ ", classOrMethodName='" + this.classOrMethodName + '\'' + ", outcome=", +				+ this.outcome + '}';, +		if (this.message != null ? !this.message.equals(decision.message), +		if (this.outcome != null ? !this.outcome.equals(decision.outcome), +		int result = this.message != null ? this.message.hashCode() : 0;, +		result = 31 * result + (this.outcome != null ? this.outcome.hashCode() : 0);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java, +import org.springframework.util.ClassUtils;, +	private ConfigurableApplicationContext context;, +					.getBean(AUTO_CONFIGURATION_REPORT, AutoConfigurationReport.class);, +		this.context = (ConfigurableApplicationContext) applicationContext;, +					try {, +					}, +					finally {, +						if (shouldLogReport()) {, +	}, +, +	private boolean shouldLogReport() {, +		return this.context.getEnvironment().getProperty("debug", Boolean.class, false), +				|| !this.context.isActive();, +	}, +					Object bean = null;, +						try {, +							bean = this.context.getBean(beanName);, +											.getName(), method.getReturnType(),, +											this.positive.get(key)));, +								this.beansCreated.add(new CreatedBeanInfo(beanName, bean, +										.getClass(), this.positive.get(key)));, +							}, +						}, +						catch (RuntimeException e) {, +							Class<?> type = null;, +							ConfigurableApplicationContext configurable = this.context;, +							String beanClassName = configurable.getBeanFactory(), +									.getBeanDefinition(beanName).getBeanClassName();, +							if (beanClassName != null) {, +								type = ClassUtils.resolveClassName(beanClassName,, +										configurable.getClassLoader());, +							}, +							this.beansCreated.add(new CreatedBeanInfo(beanName, type,, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationDecision.java, +, +	public AutoConfigurationDecision(String message, String classOrMethodName,, +			Outcome outcome) {, +		return this.message;, +		return this.classOrMethodName;, +		return this.outcome;, +		return "AutoConfigurationDecision{" + "message='" + this.message + '\'', +				+ ", classOrMethodName='" + this.classOrMethodName + '\'' + ", outcome=", +				+ this.outcome + '}';, +		if (this.message != null ? !this.message.equals(decision.message), +		if (this.outcome != null ? !this.outcome.equals(decision.outcome), +		int result = this.message != null ? this.message.hashCode() : 0;, +		result = 31 * result + (this.outcome != null ? this.outcome.hashCode() : 0);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java, +import org.springframework.util.ClassUtils;, +	private ConfigurableApplicationContext context;, +					.getBean(AUTO_CONFIGURATION_REPORT, AutoConfigurationReport.class);, +		this.context = (ConfigurableApplicationContext) applicationContext;, +					try {, +					}, +					finally {, +						if (shouldLogReport()) {, +	}, +, +	private boolean shouldLogReport() {, +		return this.context.getEnvironment().getProperty("debug", Boolean.class, false), +				|| !this.context.isActive();, +	}, +					Object bean = null;, +						try {, +							bean = this.context.getBean(beanName);, +											.getName(), method.getReturnType(),, +											this.positive.get(key)));, +								this.beansCreated.add(new CreatedBeanInfo(beanName, bean, +										.getClass(), this.positive.get(key)));, +							}, +						}]