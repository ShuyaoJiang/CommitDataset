[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperationRequestPredicate.java, +			result.append(" consumes: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.consumes));, +			result.append(" produces: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.produces));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperationRequestPredicate.java, +			result.append(" consumes: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.consumes));, +			result.append(" produces: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.produces));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +				message.append(" ").append(this.singular);, +				message.append(" ").append(this.plural);, +				message.append(" "), +						.append(StringUtils.collectionToDelimitedString(items, ", "));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperationRequestPredicate.java, +			result.append(" consumes: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.consumes));, +			result.append(" produces: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.produces));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +				message.append(" ").append(this.singular);, +				message.append(" ").append(this.plural);, +				message.append(" "), +						.append(StringUtils.collectionToDelimitedString(items, ", "));, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +		report.append(repeat("=", header.length())).append(NEW_LINE);, +		report.append(header).append(NEW_LINE);, +		report.append(repeat("=", header.length())).append(NEW_LINE);, +		report.append("Available dependencies:").append(NEW_LINE);, +		report.append("-----------------------").append(NEW_LINE);, +			report.append(dependency.getId()).append(" - ").append(dependency.getName());, +				report.append(": ").append(dependency.getDescription());, +		report.append("Available project types:").append(NEW_LINE);, +		report.append("------------------------").append(NEW_LINE);, +			report.append(entry.getKey()).append(" -  ").append(type.getName());, +			report.append(entry.getKey()).append(":").append(entry.getValue());, +		report.append("Defaults:").append(NEW_LINE);, +		report.append("---------").append(NEW_LINE);, +			report.append(defaultsKey).append(": ").append(defaultsValue), +					.append(NEW_LINE);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperationRequestPredicate.java, +			result.append(" consumes: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.consumes));, +			result.append(" produces: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.produces));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +				message.append(" ").append(this.singular);, +				message.append(" ").append(this.plural);, +				message.append(" "), +						.append(StringUtils.collectionToDelimitedString(items, ", "));, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java, +		report.append(repeat("=", header.length())).append(NEW_LINE);, +		report.append(header).append(NEW_LINE);, +		report.append(repeat("=", header.length())).append(NEW_LINE);, +		report.append("Available dependencies:").append(NEW_LINE);, +		report.append("-----------------------").append(NEW_LINE);, +			report.append(dependency.getId()).append(" - ").append(dependency.getName());, +				report.append(": ").append(dependency.getDescription());, +		report.append("Available project types:").append(NEW_LINE);, +		report.append("------------------------").append(NEW_LINE);, +			report.append(entry.getKey()).append(" -  ").append(type.getName());, +			report.append(entry.getKey()).append(":").append(entry.getValue());, +		report.append("Defaults:").append(NEW_LINE);, +		report.append("---------").append(NEW_LINE);, +			report.append(defaultsKey).append(": ").append(defaultsValue), +					.append(NEW_LINE);, +++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/Metadata.java, +			description.append("an item named '").append(this.name).append("'");, +			description.append("a hints name '").append(this.name).append("'");, +			description.append("value hint at index '").append(this.index).append("'");, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/annotation/DiscoveredJmxOperation.java, +				result.append(" (").append(this.description).append(")");, +			result.append(":").append(this.type);, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/WebOperationRequestPredicate.java, +			result.append(" consumes: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.consumes));, +			result.append(" produces: "), +					.append(StringUtils.collectionToCommaDelimitedString(this.produces));, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionMessage.java, +				message.append(" ").append(this.singular);, +				message.append(" ").append(this.plural);, +				message.append(" "), +						.append(StringUtils.collectionToDelimitedString(items, ", "));, +++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ServiceCapabilitiesReportGenerator.java]