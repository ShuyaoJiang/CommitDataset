[+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +		 * Return a filtered version of the source that will only map values that are an, +		 * instance of the given type., +		 * @param <R> the target type, +		 * @param target the target type to match, +		 * @return a new filtered source instance, +		 */, +		public <R> Source<R> whenInstanceOf(Class<R> target) {, +			return when(target::isInstance).as(target::cast);, +		}, +, +		/**, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/PropertyMapper.java, +		 * Return a filtered version of the source that will only map values that are an, +		 * instance of the given type., +		 * @param <R> the target type, +		 * @param target the target type to match, +		 * @return a new filtered source instance, +		 */, +		public <R> Source<R> whenInstanceOf(Class<R> target) {, +			return when(target::isInstance).as(target::cast);, +		}, +, +		/**, +++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java, + * Copyright 2012-2018 the original author or authors., +	public void whenInstanceOfToWhenValueIsTargetTypeShouldMatch() {, +		Long result = this.map.from(() -> 123L).whenInstanceOf(Long.class), +				.toInstance((value) -> value + 1);, +		assertThat(result).isEqualTo(124L);, +	}, +, +	@Test, +	public void whenInstanceOfWhenValueIsNotTargetTypeShouldNotMatch() {, +		this.map.from(() -> 123).whenInstanceOf(Double.class).toCall(Assert::fail);, +	}, +, +	@Test]