[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {, +			String cacheName = entry.getName();, +			String cacheManager = entry.getCacheManager();, +			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors, +					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>());, +			cacheManagerDescriptors.put(cacheName,, +					new CacheDescriptor(entry.getTarget()));, +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache);, +	 * @param cacheManager the name of the cacheManager (can be {@code null} to match all), +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		return (!entries.isEmpty() ? entries.get(0) : null);, +		String cacheManager = entry.getCacheManager();, +		Cache cache = this.cacheManagers.get(cacheManager).getCache(cacheName);, +	private Predicate<String> isNameMatch(String name) {, +		return (name != null ? ((requested) -> requested.equals(name)) : matchAll());, +	}, +, +	private Predicate<String> matchAll() {, +		return (name) -> true;, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {, +			String cacheName = entry.getName();, +			String cacheManager = entry.getCacheManager();, +			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors, +					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>());, +			cacheManagerDescriptors.put(cacheName,, +					new CacheDescriptor(entry.getTarget()));, +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache);, +	 * @param cacheManager the name of the cacheManager (can be {@code null} to match all), +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		return (!entries.isEmpty() ? entries.get(0) : null);, +		String cacheManager = entry.getCacheManager();, +		Cache cache = this.cacheManagers.get(cacheManager).getCache(cacheName);, +	private Predicate<String> isNameMatch(String name) {, +		return (name != null ? ((requested) -> requested.equals(name)) : matchAll());, +	}, +, +	private Predicate<String> matchAll() {, +		return (name) -> true;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/integration/IntegrationGraphEndpoint.java, +	 * Create a new {@code IntegrationGraphEndpoint} instance that exposes a graph, +	 * containing all the Spring Integration components in the given, +	 * {@link IntegrationGraphServer}., +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/caches.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/asciidoc/endpoints/integrationgraph.adoc, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/web/reactive/WebClientMetricsAutoConfiguration.java, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/CachesEndpoint.java, +		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {, +			String cacheName = entry.getName();, +			String cacheManager = entry.getCacheManager();, +			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors, +					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>());, +			cacheManagerDescriptors.put(cacheName,, +					new CacheDescriptor(entry.getTarget()));, +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache);, +	 * @param cacheManager the name of the cacheManager (can be {@code null} to match all), +				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)));, +		return (!entries.isEmpty() ? entries.get(0) : null);, +		String cacheManager = entry.getCacheManager();, +		Cache cache = this.cacheManagers.get(cacheManager).getCache(cacheName);, +	private Predicate<String> isNameMatch(String name) {, +		return (name != null ? ((requested) -> requested.equals(name)) : matchAll());, +	}, +, +	private Predicate<String> matchAll() {, +		return (name) -> true;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/integration/IntegrationGraphEndpoint.java, +	 * Create a new {@code IntegrationGraphEndpoint} instance that exposes a graph, +	 * containing all the Spring Integration components in the given, +	 * {@link IntegrationGraphServer}., +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/integration/IntegrationGraphEndpointTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +		given(this.integrationGraphServer.getGraph()).willReturn(mockedGraph);]