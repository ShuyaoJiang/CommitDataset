[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, + * @author Brian Clozel, +	protected LinksHandler getLinksHandler() {, +		return new CloudFoundryLinksHandler();, +	}, +, +	class CloudFoundryLinksHandler implements LinksHandler {, +, +		@Override, +		public Publisher<ResponseEntity<Object>> links(ServerWebExchange exchange) {, +			return CloudFoundryWebFluxEndpointHandlerMapping.this.securityInterceptor, +					.preHandle(exchange, "").map((securityResponse) -> {, +						Map<String, Link> links = CloudFoundryWebFluxEndpointHandlerMapping.this.linksResolver, +		@Override, +		public String toString() {, +			return "Actuator root web endpoint";, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, + * @author Brian Clozel, +	protected LinksHandler getLinksHandler() {, +		return new CloudFoundryLinksHandler();, +	}, +, +	class CloudFoundryLinksHandler implements LinksHandler {, +, +		@Override, +		public Publisher<ResponseEntity<Object>> links(ServerWebExchange exchange) {, +			return CloudFoundryWebFluxEndpointHandlerMapping.this.securityInterceptor, +					.preHandle(exchange, "").map((securityResponse) -> {, +						Map<String, Link> links = CloudFoundryWebFluxEndpointHandlerMapping.this.linksResolver, +		@Override, +		public String toString() {, +			return "Actuator root web endpoint";, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryWebEndpointServletHandlerMapping.java, + * @author Brian Clozel, +	protected LinksHandler getLinksHandler() {, +		return new CloudFoundryLinksHandler();, +	}, +, +	class CloudFoundryLinksHandler implements LinksHandler {, +, +		@Override, +		public Map<String, Map<String, Link>> links(HttpServletRequest request,, +			SecurityResponse securityResponse = CloudFoundryWebEndpointServletHandlerMapping.this.securityInterceptor, +					.preHandle(request, null);, +			Map<String, Link> links = CloudFoundryWebEndpointServletHandlerMapping.this.linksResolver, +		@Override, +		public String toString() {, +			return "Actuator root web endpoint";, +		}, +, +				logger.debug("Failed to send error response", ex);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/CloudFoundryWebFluxEndpointHandlerMapping.java, + * @author Brian Clozel, +	protected LinksHandler getLinksHandler() {, +		return new CloudFoundryLinksHandler();, +	}, +, +	class CloudFoundryLinksHandler implements LinksHandler {, +, +		@Override, +		public Publisher<ResponseEntity<Object>> links(ServerWebExchange exchange) {, +			return CloudFoundryWebFluxEndpointHandlerMapping.this.securityInterceptor, +					.preHandle(exchange, "").map((securityResponse) -> {, +						Map<String, Link> links = CloudFoundryWebFluxEndpointHandlerMapping.this.linksResolver, +		@Override, +		public String toString() {, +			return "Actuator root web endpoint";, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/servlet/CloudFoundryWebEndpointServletHandlerMapping.java, + * @author Brian Clozel, +	protected LinksHandler getLinksHandler() {, +		return new CloudFoundryLinksHandler();, +	}, +, +	class CloudFoundryLinksHandler implements LinksHandler {, +, +		@Override, +		public Map<String, Map<String, Link>> links(HttpServletRequest request,, +			SecurityResponse securityResponse = CloudFoundryWebEndpointServletHandlerMapping.this.securityInterceptor, +					.preHandle(request, null);, +			Map<String, Link> links = CloudFoundryWebEndpointServletHandlerMapping.this.linksResolver, +		@Override, +		public String toString() {, +			return "Actuator root web endpoint";, +		}, +, +				logger.debug("Failed to send error response", ex);]