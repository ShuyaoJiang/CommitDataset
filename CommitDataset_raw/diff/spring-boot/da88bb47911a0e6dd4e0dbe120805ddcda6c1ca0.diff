[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * @author Phillip Webb, +@AutoConfigureAfter(JtaAutoConfiguration.class), +@EnableConfigurationProperties(ActiveMQProperties.class), +@Import({ ActiveMQXAConnectionFactoryConfiguration.class, ActiveMQConnectionFactoryConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * @author Phillip Webb, +@AutoConfigureAfter(JtaAutoConfiguration.class), +@EnableConfigurationProperties(ActiveMQProperties.class), +@Import({ ActiveMQXAConnectionFactoryConfiguration.class, ActiveMQConnectionFactoryConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Configuration for ActiveMQ {@link ConnectionFactory}., + * @author Phillip Webb, +@ConditionalOnMissingBean(ConnectionFactory.class), +	public ConnectionFactory jmsConnectionFactory(ActiveMQProperties properties) {, +		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(, +				properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		if (properties.isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		return connectionFactory;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQAutoConfiguration.java, +import org.springframework.boot.autoconfigure.AutoConfigureAfter;, +import org.springframework.boot.autoconfigure.jta.JtaAutoConfiguration;, +import org.springframework.boot.context.properties.EnableConfigurationProperties;, + * @author Phillip Webb, +@AutoConfigureAfter(JtaAutoConfiguration.class), +@EnableConfigurationProperties(ActiveMQProperties.class), +@Import({ ActiveMQXAConnectionFactoryConfiguration.class, ActiveMQConnectionFactoryConfiguration.class }), +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.apache.activemq.pool.PooledConnectionFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;, + * Configuration for ActiveMQ {@link ConnectionFactory}., + * @author Phillip Webb, +@ConditionalOnMissingBean(ConnectionFactory.class), +	public ConnectionFactory jmsConnectionFactory(ActiveMQProperties properties) {, +		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(, +				properties).createConnectionFactory(ActiveMQConnectionFactory.class);, +		if (properties.isPooled()) {, +			PooledConnectionFactory pool = new PooledConnectionFactory();, +			pool.setConnectionFactory(connectionFactory);, +			return pool;, +		return connectionFactory;, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryFactory.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.jms.activemq;, +, +import org.apache.activemq.ActiveMQConnectionFactory;, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * Factory to create a {@link ActiveMQConnectionFactory} instance from properties defined, + * in {@link ActiveMQProperties}., + *, + * @author Phillip Webb, + * @since 1.2.0, + */, +class ActiveMQConnectionFactoryFactory {, +, +	private static final String DEFAULT_EMBEDDED_BROKER_URL = "vm://localhost?broker.persistent=false";, +, +	private static final String DEFAULT_NETWORK_BROKER_URL = "tcp://localhost:61616";, +, +	private final ActiveMQProperties properties;, +, +	public ActiveMQConnectionFactoryFactory(ActiveMQProperties properties) {, +		Assert.notNull(properties, "Properties must not be null");, +		this.properties = properties;, +	}]