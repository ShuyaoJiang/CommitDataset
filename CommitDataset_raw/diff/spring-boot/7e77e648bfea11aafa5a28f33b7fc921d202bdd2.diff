[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java, +import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;, + * @author Brian Clozel, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	protected static class MustacheReactiveWebConfiguration {, +, +		private final MustacheProperties mustache;, +, +		protected MustacheReactiveWebConfiguration(MustacheProperties mustache) {, +			this.mustache = mustache;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(org.springframework.boot.autoconfigure, +				.mustache.reactive.MustacheViewResolver.class), +		public org.springframework.boot.autoconfigure, +				.mustache.reactive.MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {, +			org.springframework.boot.autoconfigure, +					.mustache.reactive.MustacheViewResolver resolver, +					= new org.springframework.boot.autoconfigure, +					.mustache.reactive.MustacheViewResolver(mustacheCompiler);, +			resolver.setPrefix(this.mustache.getPrefix());, +			resolver.setSuffix(this.mustache.getSuffix());, +			resolver.setViewNames(this.mustache.getViewNames());, +			resolver.setRequestContextAttribute(this.mustache.getRequestContextAttribute());, +			resolver.setCharset(this.mustache.getCharsetName());, +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);, +			return resolver;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelegatingViewResolverAutoConfiguration.java, +import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java, +import org.springframework.boot.autoconfigure.mustache.servlet.MustacheViewResolver;, + * @author Brian Clozel, +	@Configuration, +	@ConditionalOnWebApplication(type = Type.REACTIVE), +	protected static class MustacheReactiveWebConfiguration {, +, +		private final MustacheProperties mustache;, +, +		protected MustacheReactiveWebConfiguration(MustacheProperties mustache) {, +			this.mustache = mustache;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(org.springframework.boot.autoconfigure, +				.mustache.reactive.MustacheViewResolver.class), +		public org.springframework.boot.autoconfigure, +				.mustache.reactive.MustacheViewResolver mustacheViewResolver(Compiler mustacheCompiler) {, +			org.springframework.boot.autoconfigure, +					.mustache.reactive.MustacheViewResolver resolver, +					= new org.springframework.boot.autoconfigure, +					.mustache.reactive.MustacheViewResolver(mustacheCompiler);, +			resolver.setPrefix(this.mustache.getPrefix());, +			resolver.setSuffix(this.mustache.getSuffix());, +			resolver.setViewNames(this.mustache.getViewNames());, +			resolver.setRequestContextAttribute(this.mustache.getRequestContextAttribute());, +			resolver.setCharset(this.mustache.getCharsetName());, +			resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);, +			return resolver;, +		}, +, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/reactive/MustacheView.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.autoconfigure.mustache.reactive;, +, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.OutputStreamWriter;, +import java.io.Reader;, +import java.io.Writer;, +import java.nio.charset.Charset;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Optional;]