[+++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.register-shutdown-hook=false # register a shutdown hook for the logging system when it is initialized, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.register-shutdown-hook=false # register a shutdown hook for the logging system when it is initialized, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import java.util.concurrent.atomic.AtomicBoolean;, +	 * The name of the Spring property that controls the registration of a shutdown hook, +	 * to shut down the logging system when the JVM exits., +	 * @see LoggingSystem#getShutdownHandler, +	 */, +	public static final String REGISTER_SHOW_HOOK_PROPERTY = "logging.register-shutdown-hook";, +, +	/**, +	private static AtomicBoolean shutdownHookRegistered = new AtomicBoolean(false);, +, +		registerShutdownHookIfNecessary(environment, this.loggingSystem);, +	private void registerShutdownHookIfNecessary(Environment environment,, +			LoggingSystem loggingSystem) {, +		boolean registerShutdownHook = new RelaxedPropertyResolver(environment), +				.getProperty(REGISTER_SHOW_HOOK_PROPERTY, Boolean.class, false);, +		if (registerShutdownHook) {, +			Runnable shutdownHandler = loggingSystem.getShutdownHandler();, +			if (shutdownHandler != null, +					&& shutdownHookRegistered.compareAndSet(false, true)) {, +				Runtime.getRuntime().addShutdownHook(new Thread());, +			}, +		}, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.register-shutdown-hook=false # register a shutdown hook for the logging system when it is initialized, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import java.util.concurrent.atomic.AtomicBoolean;, +	 * The name of the Spring property that controls the registration of a shutdown hook, +	 * to shut down the logging system when the JVM exits., +	 * @see LoggingSystem#getShutdownHandler, +	 */, +	public static final String REGISTER_SHOW_HOOK_PROPERTY = "logging.register-shutdown-hook";, +, +	/**, +	private static AtomicBoolean shutdownHookRegistered = new AtomicBoolean(false);, +, +		registerShutdownHookIfNecessary(environment, this.loggingSystem);, +	private void registerShutdownHookIfNecessary(Environment environment,, +			LoggingSystem loggingSystem) {, +		boolean registerShutdownHook = new RelaxedPropertyResolver(environment), +				.getProperty(REGISTER_SHOW_HOOK_PROPERTY, Boolean.class, false);, +		if (registerShutdownHook) {, +			Runnable shutdownHandler = loggingSystem.getShutdownHandler();, +			if (shutdownHandler != null, +					&& shutdownHookRegistered.compareAndSet(false, true)) {, +				Runtime.getRuntime().addShutdownHook(new Thread());, +			}, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	 * Returns a {@link Runnable} that can handle shutdown of this logging system when the, +	 * JVM exits. The default implementation returns {@code null}, indicating that no, +	 * shutdown is required., +	 *, +	 * @return the shutdown handler, or {@code null}, +	 */, +	public Runnable getShutdownHandler() {, +		return null;, +	}, +, +	/**, +++ b/spring-boot-docs/src/main/asciidoc/appendix-application-properties.adoc, +	logging.register-shutdown-hook=false # register a shutdown hook for the logging system when it is initialized, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +import java.util.concurrent.atomic.AtomicBoolean;, +	 * The name of the Spring property that controls the registration of a shutdown hook, +	 * to shut down the logging system when the JVM exits., +	 * @see LoggingSystem#getShutdownHandler, +	 */, +	public static final String REGISTER_SHOW_HOOK_PROPERTY = "logging.register-shutdown-hook";, +, +	/**, +	private static AtomicBoolean shutdownHookRegistered = new AtomicBoolean(false);, +, +		registerShutdownHookIfNecessary(environment, this.loggingSystem);, +	private void registerShutdownHookIfNecessary(Environment environment,, +			LoggingSystem loggingSystem) {, +		boolean registerShutdownHook = new RelaxedPropertyResolver(environment), +				.getProperty(REGISTER_SHOW_HOOK_PROPERTY, Boolean.class, false);, +		if (registerShutdownHook) {, +			Runnable shutdownHandler = loggingSystem.getShutdownHandler();, +			if (shutdownHandler != null, +					&& shutdownHookRegistered.compareAndSet(false, true)) {, +				Runtime.getRuntime().addShutdownHook(new Thread());, +			}, +		}, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	 * Returns a {@link Runnable} that can handle shutdown of this logging system when the, +	 * JVM exits. The default implementation returns {@code null}, indicating that no, +	 * shutdown is required., +	 *]