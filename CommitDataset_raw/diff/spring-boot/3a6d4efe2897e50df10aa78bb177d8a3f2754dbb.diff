[+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				List<String> list = new ArrayList<String>(Arrays.asList(this.environment, +						.getActiveProfiles()));, +				// Reverse them so the order is the same as from getProfilesForValue(), +				// (last one wins when properties are eventually resolved), +				Collections.reverse(list);, +				this.profiles.addAll(list);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				List<String> list = new ArrayList<String>(Arrays.asList(this.environment, +						.getActiveProfiles()));, +				// Reverse them so the order is the same as from getProfilesForValue(), +				// (last one wins when properties are eventually resolved), +				Collections.reverse(list);, +				this.profiles.addAll(list);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void twoProfilesFromProperties() throws Exception {, +		// This should be the effect of calling, +		// SpringApplication.setAdditionalProfiles("other", "dev"), +		this.environment.setActiveProfiles("other", "dev");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		// The "dev" profile is activated in SpringApplication so it should take, +		// precedence over the default profile, +		assertThat(property, equalTo("fromdevpropertiesfile"));, +	}, +, +	@Test, +		assertThat(property, equalTo("fromdevprofile"));, +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				List<String> list = new ArrayList<String>(Arrays.asList(this.environment, +						.getActiveProfiles()));, +				// Reverse them so the order is the same as from getProfilesForValue(), +				// (last one wins when properties are eventually resolved), +				Collections.reverse(list);, +				this.profiles.addAll(list);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void twoProfilesFromProperties() throws Exception {, +		// This should be the effect of calling, +		// SpringApplication.setAdditionalProfiles("other", "dev"), +		this.environment.setActiveProfiles("other", "dev");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		// The "dev" profile is activated in SpringApplication so it should take, +		// precedence over the default profile, +		assertThat(property, equalTo("fromdevpropertiesfile"));, +	}, +, +	@Test, +		assertThat(property, equalTo("fromdevprofile"));, +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java, +				List<String> list = new ArrayList<String>(Arrays.asList(this.environment, +						.getActiveProfiles()));, +				// Reverse them so the order is the same as from getProfilesForValue(), +				// (last one wins when properties are eventually resolved), +				Collections.reverse(list);, +				this.profiles.addAll(list);, +++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java, +	public void twoProfilesFromProperties() throws Exception {, +		// This should be the effect of calling, +		// SpringApplication.setAdditionalProfiles("other", "dev"), +		this.environment.setActiveProfiles("other", "dev");, +		this.initializer.onApplicationEvent(this.event);, +		String property = this.environment.getProperty("my.property");, +		// The "dev" profile is activated in SpringApplication so it should take, +		// precedence over the default profile, +		assertThat(property, equalTo("fromdevpropertiesfile"));, +	}, +, +	@Test, +		assertThat(property, equalTo("fromdevprofile"));, +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +		assertThat(context.getEnvironment(),, +				containsPropertySource("class path resource ", +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java, +++ b/spring-boot/src/test/resources/application-dev.properties, +my.property=fromdevpropertiesfile]