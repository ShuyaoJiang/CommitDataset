[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +				if (!containsBeanDefinition(, +						(ConfigurableListableBeanFactory) registry, name)) {, +		private boolean containsBeanDefinition(, +				ConfigurableListableBeanFactory beanFactory, String name) {, +, +			boolean result = beanFactory.containsBeanDefinition(name);, +			if (result) {, +				return true;, +			}, +			if (beanFactory, +					.getParentBeanFactory() instanceof ConfigurableListableBeanFactory) {, +				return containsBeanDefinition(, +						(ConfigurableListableBeanFactory) beanFactory, +								.getParentBeanFactory(),, +						name);, +			}, +			return false;, +		}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java, + * Copyright 2012-2017 the original author or authors., +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +				if (!containsBeanDefinition(, +						(ConfigurableListableBeanFactory) registry, name)) {, +		private boolean containsBeanDefinition(, +				ConfigurableListableBeanFactory beanFactory, String name) {, +, +			boolean result = beanFactory.containsBeanDefinition(name);, +			if (result) {, +				return true;, +			}, +			if (beanFactory, +					.getParentBeanFactory() instanceof ConfigurableListableBeanFactory) {, +				return containsBeanDefinition(, +						(ConfigurableListableBeanFactory) beanFactory, +								.getParentBeanFactory(),, +						name);, +			}, +			return false;, +		}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java, +		AnnotationConfigApplicationContext parent =, +				new AnnotationConfigApplicationContext();, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(parent,, +				"name=parent");, +		TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context,, +				"name=child");, +				.isEqualTo(0);, +		assertThat(parent.getBeanNamesForType(TestProperties.class).length), +		assertThat(this.context.getBean(TestConsumer.class).getName()), +				.isEqualTo("parent");, +		parent.close();]