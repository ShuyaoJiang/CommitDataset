[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	/**, +	 * Common tags that are applied to every meter., +	 */, +	private final Map<String, String> tags = new LinkedHashMap<>();, +, +	public Map<String, String> getTags() {, +		return this.tags;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	/**, +	 * Common tags that are applied to every meter., +	 */, +	private final Map<String, String> tags = new LinkedHashMap<>();, +, +	public Map<String, String> getTags() {, +		return this.tags;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import java.util.stream.Collectors;, +import io.micrometer.core.instrument.Tag;, +import io.micrometer.core.instrument.Tags;, + * @author Stephane Nicoll, +	private final MetricsProperties properties;, +, +	private final MeterFilter mapFilter;, +		this.mapFilter = createMapFilter(properties.getTags());, +	}, +, +	private static MeterFilter createMapFilter(Map<String, String> tags) {, +		if (tags.isEmpty()) {, +			return new MeterFilter() { };, +		}, +		Tags commonTags = Tags.of(tags.entrySet().stream().map((entry) ->, +				Tag.of(entry.getKey(), entry.getValue())).collect(Collectors.toList()));, +		return MeterFilter.commonTags(commonTags);, +	public Id map(Id id) {, +		return this.mapFilter.map(id);, +	}, +, +	@Override, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	/**, +	 * Common tags that are applied to every meter., +	 */, +	private final Map<String, String> tags = new LinkedHashMap<>();, +, +	public Map<String, String> getTags() {, +		return this.tags;, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java, +import java.util.stream.Collectors;, +import io.micrometer.core.instrument.Tag;, +import io.micrometer.core.instrument.Tags;, + * @author Stephane Nicoll, +	private final MetricsProperties properties;, +, +	private final MeterFilter mapFilter;, +		this.mapFilter = createMapFilter(properties.getTags());, +	}, +, +	private static MeterFilter createMapFilter(Map<String, String> tags) {, +		if (tags.isEmpty()) {, +			return new MeterFilter() { };, +		}, +		Tags commonTags = Tags.of(tags.entrySet().stream().map((entry) ->, +				Tag.of(entry.getKey(), entry.getValue())).collect(Collectors.toList()));, +		return MeterFilter.commonTags(commonTags);, +	public Id map(Id id) {, +		return this.mapFilter.map(id);, +	}, +, +	@Override, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfigurationIntegrationTests.java, +	public void propertyBasedCommonTagsIsAutoConfigured() {, +		this.contextRunner.withPropertyValues("management.metrics.tags.region=test",, +				"management.metrics.tags.origin=local"), +				.run((context) -> {, +					MeterRegistry registry = context.getBean(MeterRegistry.class);, +					registry.counter("my.counter", "env", "qa");, +					assertThat(registry.find("my.counter").tags("env", "qa"), +							.tags("region", "test").tags("origin", "local").counter()), +							.isNotNull();, +				});, +	}, +, +	@Test, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsProperties.java, +	/**, +	 * Common tags that are applied to every meter., +	 */, +	private final Map<String, String> tags = new LinkedHashMap<>();, +, +	public Map<String, String> getTags() {, +		return this.tags;, +	}, +]