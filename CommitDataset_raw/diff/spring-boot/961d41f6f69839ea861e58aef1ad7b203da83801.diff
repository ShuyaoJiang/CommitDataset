[+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +	private static final String INDEX_ZERO = "[0]";, +, +			ConfigurationPropertyName name = root, +					.append(i == 0 ? INDEX_ZERO : "[" + i + "]");, +			knownIndexedChildren.remove(name.getLastElement(Form.UNIFORM));, +			name = name.chop(root.getNumberOfElements() + 1);, +			if (name.isLastElementIndexed()) {, +				String key = name.getLastElement(Form.UNIFORM);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +	private static final String INDEX_ZERO = "[0]";, +, +			ConfigurationPropertyName name = root, +					.append(i == 0 ? INDEX_ZERO : "[" + i + "]");, +			knownIndexedChildren.remove(name.getLastElement(Form.UNIFORM));, +			name = name.chop(root.getNumberOfElements() + 1);, +			if (name.isLastElementIndexed()) {, +				String key = name.getLastElement(Form.UNIFORM);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +			if (!this.root.isParentOf(name) && isValueTreatedAsNestedMap()) {, +			if (!this.root.isParentOf(name), +				return name.chop(this.root.getNumberOfElements() + 1);, +			StringBuilder result = new StringBuilder();, +			for (int i = this.root.getNumberOfElements(); i < name, +					.getNumberOfElements(); i++) {, +				result.append(result.length() == 0 ? "" : ".");, +				result.append(name.getElement(i, Form.ORIGINAL));, +			}, +			return result.toString();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +	private static final String INDEX_ZERO = "[0]";, +, +			ConfigurationPropertyName name = root, +					.append(i == 0 ? INDEX_ZERO : "[" + i + "]");, +			knownIndexedChildren.remove(name.getLastElement(Form.UNIFORM));, +			name = name.chop(root.getNumberOfElements() + 1);, +			if (name.isLastElementIndexed()) {, +				String key = name.getLastElement(Form.UNIFORM);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +			if (!this.root.isParentOf(name) && isValueTreatedAsNestedMap()) {, +			if (!this.root.isParentOf(name), +				return name.chop(this.root.getNumberOfElements() + 1);, +			StringBuilder result = new StringBuilder();, +			for (int i = this.root.getNumberOfElements(); i < name, +					.getNumberOfElements(); i++) {, +				result.append(result.length() == 0 ? "" : ".");, +				result.append(name.getElement(i, Form.ORIGINAL));, +			}, +			return result.toString();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/ValidationErrors.java, +		return name.isParentOf(boundPropertyName), +				&& boundPropertyName.getLastElement(Form.UNIFORM).toString(), +						.equalsIgnoreCase(error.getField());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/AggregateBinder.java, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java, +	private static final String INDEX_ZERO = "[0]";, +, +			ConfigurationPropertyName name = root, +					.append(i == 0 ? INDEX_ZERO : "[" + i + "]");, +			knownIndexedChildren.remove(name.getLastElement(Form.UNIFORM));, +			name = name.chop(root.getNumberOfElements() + 1);, +			if (name.isLastElementIndexed()) {, +				String key = name.getLastElement(Form.UNIFORM);, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/MapBinder.java, +			if (!this.root.isParentOf(name) && isValueTreatedAsNestedMap()) {, +			if (!this.root.isParentOf(name), +				return name.chop(this.root.getNumberOfElements() + 1);, +			StringBuilder result = new StringBuilder();, +			for (int i = this.root.getNumberOfElements(); i < name, +					.getNumberOfElements(); i++) {, +				result.append(result.length() == 0 ? "" : ".");, +				result.append(name.getElement(i, Form.ORIGINAL));, +			}, +			return result.toString();, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/ValidationErrors.java, +		return name.isParentOf(boundPropertyName), +				&& boundPropertyName.getLastElement(Form.UNIFORM).toString(), +						.equalsIgnoreCase(error.getField());, +++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Function;, + * A configuration property name composed of elements separated by dots. User created, + * names may contain the characters "{@code a-z}" "{@code 0-9}") and "{@code -}", they, + * must be lower-case and must start with a letter. The "{@code -}" is used purely for, + * formatting, i.e. "{@code foo-bar}" and "{@code foobar}" are considered equivalent., + * @see #of(CharSequence), +		implements Comparable<ConfigurationPropertyName> {, +, +	private static final String EMPTY_STRING = "";, +			new String[0]);, +	private final CharSequence[] elements;, +	private final CharSequence[] uniformElements;, +	private int[] elementHashCodes;, +	private String string;, +	private ConfigurationPropertyName(CharSequence[] elements) {]