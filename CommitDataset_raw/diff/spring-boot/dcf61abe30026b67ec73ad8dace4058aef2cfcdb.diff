[+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfiguration.java, +		ReactiveWebServerFactoryConfiguration.EmbeddedUndertow.class,, +		ReactiveWebServerFactoryConfiguration.EmbeddedNetty.class }), +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java, +import org.springframework.boot.autoconfigure.AutoConfigurations;, +import org.springframework.boot.test.context.runner.ReactiveWebApplicationContextRunner;, +import org.springframework.boot.web.embedded.tomcat.TomcatReactiveWebServerFactory;, +	private ReactiveWebApplicationContextRunner contextRunner =, +			new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new), +					.withConfiguration(AutoConfigurations.of(ReactiveWebServerFactoryAutoConfiguration.class));, +		this.contextRunner, +				.withUserConfiguration(MockWebServerAutoConfiguration.class,, +						HttpHandlerConfiguration.class), +				.run(context -> {, +					assertThat(context.getBeansOfType(ReactiveWebServerFactory.class)), +					assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)), +					assertThat(context.getBeansOfType(ReactiveWebServerFactoryCustomizer.class)), +				});, +		this.contextRunner, +				.withUserConfiguration(MockWebServerAutoConfiguration.class), +				.run(context -> {, +					assertThat(context.getStartupFailure()), +							.isInstanceOf(ApplicationContextException.class), +							.hasMessageContaining("missing HttpHandler bean");, +				});, +		this.contextRunner, +				.withUserConfiguration(MockWebServerAutoConfiguration.class,, +						HttpHandlerConfiguration.class, TooManyHttpHandlers.class), +				.run(context -> {, +					assertThat(context.getStartupFailure()), +							.isInstanceOf(ApplicationContextException.class), +							.hasMessageContaining("multiple HttpHandler beans : " +, +									"httpHandler,additionalHttpHandler");, +				});, +		this.contextRunner, +				.withUserConfiguration(MockWebServerAutoConfiguration.class,, +						HttpHandlerConfiguration.class, ReactiveWebServerCustomization.class), +				.run(context -> {, +					assertThat(context.getBean(MockReactiveWebServerFactory.class).getPort()), +							.isEqualTo(9000);, +				});, +	}, +, +	@Test, +	public void defaultWebServerIsTomcat() {, +		// Tomcat should be chosen over Netty if the Tomcat library is present., +		this.contextRunner, +				.withUserConfiguration(HttpHandlerConfiguration.class), +				.run(context -> {, +					assertThat(context.getBean(ReactiveWebServerFactory.class)), +							.isInstanceOf(TomcatReactiveWebServerFactory.class);, +				});, +	protected static class HttpHandlerConfiguration {]