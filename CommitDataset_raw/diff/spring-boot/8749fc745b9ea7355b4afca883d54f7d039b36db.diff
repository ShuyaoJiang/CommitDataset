[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +		setUseSuffixPatternMatch(false);, +			return new String[] { prefix, prefix + ".json" };, +		PatternsRequestCondition patterns = new PatternsRequestCondition(patternStrings,, +				null, null, useSuffixPatternMatch(), useTrailingSlashMatch(), null);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java, +		setUseSuffixPatternMatch(false);, +			return new String[] { prefix, prefix + ".json" };, +		PatternsRequestCondition patterns = new PatternsRequestCondition(patternStrings,, +				null, null, useSuffixPatternMatch(), useTrailingSlashMatch(), null);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java, +	public void fileExtensionNotFound() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(DefaultConfiguration.class);, +		MockMvc mockMvc = createMockMvc();, +		mockMvc.perform(get("/beans.cmd")).andExpect(status().isNotFound());, +	}, +, +	@Test, +	public void jsonExtensionProvided() throws Exception {, +		this.context = new AnnotationConfigWebApplicationContext();, +		this.context.register(DefaultConfiguration.class);, +		MockMvc mockMvc = createMockMvc();, +		mockMvc.perform(get("/beans.json")).andExpect(status().isOk());, +	}, +, +	@Test]