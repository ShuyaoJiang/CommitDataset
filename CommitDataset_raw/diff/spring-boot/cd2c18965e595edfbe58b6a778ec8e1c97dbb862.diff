[+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +	/**, +	 * Attempt to load classes from the URLs before delegating to the parent loader., +	 */, +	@Override, +	protected Class<?> loadClass(String name, boolean resolve), +			throws ClassNotFoundException {, +		synchronized (getClassLoadingLock(name)) {, +			Class<?> loadedClass = findLoadedClass(name);, +			if (loadedClass == null) {, +				loadedClass = doLoadClass(name);, +			}, +			if (resolve) {, +				resolveClass(loadedClass);, +			}, +			return loadedClass;, +		}, +	}, +, +	private Class<?> doLoadClass(String name) throws ClassNotFoundException {, +		try {, +			return findClass(name);, +		}, +		catch (ClassNotFoundException e) {, +		}, +		return super.loadClass(name, false);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java, +	/**, +	 * Attempt to load classes from the URLs before delegating to the parent loader., +	 */, +	@Override, +	protected Class<?> loadClass(String name, boolean resolve), +			throws ClassNotFoundException {, +		synchronized (getClassLoadingLock(name)) {, +			Class<?> loadedClass = findLoadedClass(name);, +			if (loadedClass == null) {, +				loadedClass = doLoadClass(name);, +			}, +			if (resolve) {, +				resolveClass(loadedClass);, +			}, +			return loadedClass;, +		}, +	}, +, +	private Class<?> doLoadClass(String name) throws ClassNotFoundException {, +		try {, +			return findClass(name);, +		}, +		catch (ClassNotFoundException e) {, +		}, +		return super.loadClass(name, false);, +	}, +, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java, +		return new LaunchedURLClassLoader(urls, getClass().getClassLoader());]