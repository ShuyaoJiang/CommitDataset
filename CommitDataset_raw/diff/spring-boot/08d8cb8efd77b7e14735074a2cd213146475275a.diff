[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;, +	@Configuration, +	@ConditionalOnClass(AbstractHandlerMethodMapping.class), +	protected static class RequestMappingEndpointConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public RequestMappingEndpoint requestMappingEndpoint() {, +			RequestMappingEndpoint endpoint = new RequestMappingEndpoint();, +			return endpoint;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java, +import org.springframework.boot.actuate.endpoint.RequestMappingEndpoint;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +import org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;, +	@Configuration, +	@ConditionalOnClass(AbstractHandlerMethodMapping.class), +	protected static class RequestMappingEndpointConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public RequestMappingEndpoint requestMappingEndpoint() {, +			RequestMappingEndpoint endpoint = new RequestMappingEndpoint();, +			return endpoint;, +		}, +, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.endpoint;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.web.method.HandlerMethod;, +import org.springframework.web.servlet.handler.AbstractHandlerMethodMapping;, +import org.springframework.web.servlet.handler.AbstractUrlHandlerMapping;, +, +/**, + * @author Dave Syer, + */, +public class RequestMappingEndpoint extends AbstractEndpoint<Map<String, Object>>, +		implements ApplicationContextAware {, +, +	private List<AbstractUrlHandlerMapping> handlerMappings = Collections.emptyList();, +, +	private List<AbstractHandlerMethodMapping<?>> methodMappings = Collections, +			.emptyList();, +, +	private ApplicationContext applicationContext;, +, +	public RequestMappingEndpoint() {, +		super("mappings");, +	}, +, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext), +			throws BeansException {, +		this.applicationContext = applicationContext;, +	}, +, +	/**, +	 * @param handlerMappings the mappings to set, +	 */, +	public void setHandlerMappings(List<AbstractUrlHandlerMapping> handlerMappings) {, +		this.handlerMappings = handlerMappings;, +	}, +, +	/**, +	 * @param methodMappings the method mappings to set, +	 */]