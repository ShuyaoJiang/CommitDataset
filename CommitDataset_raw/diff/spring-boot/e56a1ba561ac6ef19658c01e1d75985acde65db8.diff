[+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			Element returnType = this.processingEnv.getTypeUtils().asElement(, +					getter.getReturnType());, +			boolean isNested = isNested(returnType, field, element);, +			boolean isNested = isNested(returnType, field, element);, +					&& annotation == null && isNested) {, +				String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, name);, +						this.typeUtils.getType(returnType),, +				processTypeElement(nestedPrefix, (TypeElement) returnType);, +, +	private boolean isNested(Element returnType, VariableElement field,, +			TypeElement element) {, +		if (getAnnotation(field, nestedConfigurationPropertyAnnotation()) != null) {, +			return true;, +		}, +		return this.typeUtils.isEnclosedIn(returnType, element), +				&& returnType.getKind() != ElementKind.ENUM;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			Element returnType = this.processingEnv.getTypeUtils().asElement(, +					getter.getReturnType());, +			boolean isNested = isNested(returnType, field, element);, +			boolean isNested = isNested(returnType, field, element);, +					&& annotation == null && isNested) {, +				String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, name);, +						this.typeUtils.getType(returnType),, +				processTypeElement(nestedPrefix, (TypeElement) returnType);, +, +	private boolean isNested(Element returnType, VariableElement field,, +			TypeElement element) {, +		if (getAnnotation(field, nestedConfigurationPropertyAnnotation()) != null) {, +			return true;, +		}, +		return this.typeUtils.isEnclosedIn(returnType, element), +				&& returnType.getKind() != ElementKind.ENUM;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +				containsGroup("config.the-second", InnerClassProperties.Foo.class), +		assertThat(metadata, containsProperty("config.fourth"));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java, +			Element returnType = this.processingEnv.getTypeUtils().asElement(, +					getter.getReturnType());, +			boolean isNested = isNested(returnType, field, element);, +			boolean isNested = isNested(returnType, field, element);, +					&& annotation == null && isNested) {, +				String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, name);, +						this.typeUtils.getType(returnType),, +				processTypeElement(nestedPrefix, (TypeElement) returnType);, +, +	private boolean isNested(Element returnType, VariableElement field,, +			TypeElement element) {, +		if (getAnnotation(field, nestedConfigurationPropertyAnnotation()) != null) {, +			return true;, +		}, +		return this.typeUtils.isEnclosedIn(returnType, element), +				&& returnType.getKind() != ElementKind.ENUM;, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java, +				containsGroup("config.the-second", InnerClassProperties.Foo.class), +		assertThat(metadata, containsProperty("config.fourth"));, +++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java, +				description.appendText("missing ", +						+ this.itemType.toString().toLowerCase() + " " + this.name);, +				description.appendText(, +						"was " + this.itemType.toString().toLowerCase() + " "), +						.appendValue(property);]