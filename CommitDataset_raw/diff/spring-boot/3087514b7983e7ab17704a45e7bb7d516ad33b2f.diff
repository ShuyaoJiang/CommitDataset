[+++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties;, +import org.springframework.boot.actuate.health.HealthStatusHttpMapper;, +@EnableConfigurationProperties(HealthIndicatorProperties.class), +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new HealthWebEndpointExtension(delegate, healthStatusHttpMapper);, +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new StatusWebEndpointExtension(delegate, healthStatusHttpMapper);, +	@Bean, +	@ConditionalOnMissingBean, +	public HealthStatusHttpMapper createHealthStatusHttpMapper(, +			HealthIndicatorProperties healthIndicatorProperties) {, +		if (healthIndicatorProperties.getHttpMapping() != null) {, +			statusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties;, +import org.springframework.boot.actuate.health.HealthStatusHttpMapper;, +@EnableConfigurationProperties(HealthIndicatorProperties.class), +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new HealthWebEndpointExtension(delegate, healthStatusHttpMapper);, +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new StatusWebEndpointExtension(delegate, healthStatusHttpMapper);, +	@Bean, +	@ConditionalOnMissingBean, +	public HealthStatusHttpMapper createHealthStatusHttpMapper(, +			HealthIndicatorProperties healthIndicatorProperties) {, +		if (healthIndicatorProperties.getHttpMapping() != null) {, +			statusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorProperties.java, +import java.util.HashMap;, +import java.util.Map;, +	/**, +	 * Mapping of health statuses to HttpStatus codes. By default, registered health, +	 * statuses map to sensible defaults (i.e. UP maps to 200)., +	 */, +	private final Map<String, Integer> httpMapping = new HashMap<>();, +, +	public Map<String, Integer> getHttpMapping() {, +		return this.httpMapping;, +	}, +, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties;, +import org.springframework.boot.actuate.health.HealthStatusHttpMapper;, +@EnableConfigurationProperties(HealthIndicatorProperties.class), +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new HealthWebEndpointExtension(delegate, healthStatusHttpMapper);, +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new StatusWebEndpointExtension(delegate, healthStatusHttpMapper);, +	@Bean, +	@ConditionalOnMissingBean, +	public HealthStatusHttpMapper createHealthStatusHttpMapper(, +			HealthIndicatorProperties healthIndicatorProperties) {, +		if (healthIndicatorProperties.getHttpMapping() != null) {, +			statusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorProperties.java, +import java.util.HashMap;, +import java.util.Map;, +	/**, +	 * Mapping of health statuses to HttpStatus codes. By default, registered health, +	 * statuses map to sensible defaults (i.e. UP maps to 200)., +	 */, +	private final Map<String, Integer> httpMapping = new HashMap<>();, +, +	public Map<String, Integer> getHttpMapping() {, +		return this.httpMapping;, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointManagementContextConfiguration.java, +import org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties;, +import org.springframework.boot.actuate.health.HealthStatusHttpMapper;, +@EnableConfigurationProperties(HealthIndicatorProperties.class), +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new HealthWebEndpointExtension(delegate, healthStatusHttpMapper);, +			HealthStatusHttpMapper healthStatusHttpMapper) {, +		return new StatusWebEndpointExtension(delegate, healthStatusHttpMapper);, +	@Bean, +	@ConditionalOnMissingBean, +	public HealthStatusHttpMapper createHealthStatusHttpMapper(, +			HealthIndicatorProperties healthIndicatorProperties) {, +		if (healthIndicatorProperties.getHttpMapping() != null) {, +			statusHttpMapper.addStatusMapping(healthIndicatorProperties.getHttpMapping());, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorProperties.java, +import java.util.HashMap;, +import java.util.Map;, +	/**, +	 * Mapping of health statuses to HttpStatus codes. By default, registered health, +	 * statuses map to sensible defaults (i.e. UP maps to 200)., +	 */, +	private final Map<String, Integer> httpMapping = new HashMap<>();, +, +	public Map<String, Integer> getHttpMapping() {, +		return this.httpMapping;, +	}]