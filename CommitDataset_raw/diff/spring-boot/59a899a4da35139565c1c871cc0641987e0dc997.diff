[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +	private ResponseStatusExceptionResolver statuses = new ResponseStatusExceptionResolver();, +, +		if (this.statuses.resolveException(request, response, null, e) == null) {, +		}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/BasicErrorController.java, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +	private ResponseStatusExceptionResolver statuses = new ResponseStatusExceptionResolver();, +, +		if (this.statuses.resolveException(request, response, null, e) == null) {, +		}, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/BasicErrorControllerIntegrationTests.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	public void testErrorWithResponseStatus() throws Exception {, +		MvcResult result = this.mockMvc.perform(get("/bang")), +				.andExpect(status().isNotFound()).andReturn();, +		MvcResult response = this.mockMvc.perform(new ErrorDispatcher(result, "/error")), +				.andReturn();, +		String content = response.getResponse().getContentAsString();, +		assertTrue("Wrong content: " + content, content.contains("Expected!"));, +	}, +, +	@Test, +			@RequestMapping("/bang"), +			public String bang() {, +				throw new NotFoundException("Expected!");, +			}, +, +	@ResponseStatus(value = HttpStatus.NOT_FOUND), +	private static class NotFoundException extends RuntimeException {, +, +		public NotFoundException(String string) {, +			super(string);, +		}, +, +	}, +]