[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +import org.springframework.core.env.Environment;, +		Environment environment = context.getEnvironment();, +			if (!environment.containsProperty(property), +					|| StringUtils.endsWithIgnoreCase(environment.getProperty(property),, +							"false")) {, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java, +import org.springframework.core.env.Environment;, +		Environment environment = context.getEnvironment();, +			if (!environment.containsProperty(property), +					|| StringUtils.endsWithIgnoreCase(environment.getProperty(property),, +							"false")) {, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java, +	@Test, +	public void testBeanIsNotCreatedWhenPropertyValueEqualsFalse() {, +		EnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),, +				"property1=false", "property2=value2");, +		setupContext();, +		assertFalse(this.context.containsBean("foo"));, +	}, +, +	@Test, +	public void testBeanIsNotCreatedWhenPropertyValueEqualsFALSE() {, +		EnvironmentTestUtils.addEnvironment(this.context.getEnvironment(),, +				"property1=FALSE", "property2=value2");, +		setupContext();, +		assertFalse(this.context.containsBean("foo"));, +	}, +]