[+++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +	private static final String BOOT_VERSION_ATTRIBUTE = "Spring-Boot-Version";, +, +		String bootVersion = getClass().getPackage().getImplementationVersion();, +		manifest.getMainAttributes().putValue(BOOT_VERSION_ATTRIBUTE, bootVersion);, +, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +	private static final String BOOT_VERSION_ATTRIBUTE = "Spring-Boot-Version";, +, +		String bootVersion = getClass().getPackage().getImplementationVersion();, +		manifest.getMainAttributes().putValue(BOOT_VERSION_ATTRIBUTE, bootVersion);, +, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +	private static final String BOOT_VERSION_ATTRIBUTE = "Spring-Boot-Version";, +, +		String bootVersion = getClass().getPackage().getImplementationVersion();, +		manifest.getMainAttributes().putValue(BOOT_VERSION_ATTRIBUTE, bootVersion);, +, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import java.util.jar.Attributes;, +	public void springBootVersion() throws Exception {, +		this.testJarFile.addClass("a/b/C.class", ClassWithMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		repackager.repackage(NO_LIBRARIES);, +		Manifest actualManifest = getManifest(file);, +		assertThat(, +				actualManifest.getMainAttributes().containsKey(, +						new Attributes.Name("Spring-Boot-Version")), equalTo(true));, +	}, +, +	@Test, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +	private static final String BOOT_VERSION_ATTRIBUTE = "Spring-Boot-Version";, +, +		String bootVersion = getClass().getPackage().getImplementationVersion();, +		manifest.getMainAttributes().putValue(BOOT_VERSION_ATTRIBUTE, bootVersion);, +, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import java.util.jar.Attributes;, +	public void springBootVersion() throws Exception {, +		this.testJarFile.addClass("a/b/C.class", ClassWithMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		repackager.repackage(NO_LIBRARIES);, +		Manifest actualManifest = getManifest(file);, +		assertThat(, +				actualManifest.getMainAttributes().containsKey(, +						new Attributes.Name("Spring-Boot-Version")), equalTo(true));, +	}, +, +	@Test, +++ /dev/null, +++ b/spring-boot-dependencies/pom.xml, +++ b/spring-boot-tools/pom.xml, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java, +	private static final String BOOT_VERSION_ATTRIBUTE = "Spring-Boot-Version";, +, +		String bootVersion = getClass().getPackage().getImplementationVersion();, +		manifest.getMainAttributes().putValue(BOOT_VERSION_ATTRIBUTE, bootVersion);, +, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java, +import java.util.jar.Attributes;, +	public void springBootVersion() throws Exception {, +		this.testJarFile.addClass("a/b/C.class", ClassWithMainMethod.class);, +		File file = this.testJarFile.getFile();, +		Repackager repackager = new Repackager(file);, +		repackager.repackage(NO_LIBRARIES);, +		Manifest actualManifest = getManifest(file);, +		assertThat(, +				actualManifest.getMainAttributes().containsKey(, +						new Attributes.Name("Spring-Boot-Version")), equalTo(true));, +	}, +, +	@Test, +++ /dev/null, +++ /dev/null]