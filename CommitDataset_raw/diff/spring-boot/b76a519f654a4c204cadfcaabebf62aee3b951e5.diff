[+++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-solr</artifactId>, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-solr</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.apache.solr.client.solrj.SolrServer;, +import org.springframework.boot.actuate.health.SolrHealthIndicator;, +import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;, + * @author Andy Wilkinson, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +	@Configuration, +	@ConditionalOnBean(SolrServer.class), +	@ConditionalOnExpression("${health.solr.enabled:true}"), +	public static class SolrHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +, +		@Autowired, +		private Map<String, SolrServer> solrServers;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "solrHealthIndicator"), +		public HealthIndicator rabbitHealthIndicator() {, +			if (this.solrServers.size() == 1) {, +				return new SolrHealthIndicator(this.solrServers.entrySet().iterator(), +						.next().getValue());, +			}, +, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, SolrServer> entry : this.solrServers.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new SolrHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	}, +, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>spring-data-mongodb</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.springframework.data</groupId>, +			<artifactId>spring-data-solr</artifactId>, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.apache.solr.client.solrj.SolrServer;, +import org.springframework.boot.actuate.health.SolrHealthIndicator;, +import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;, + * @author Andy Wilkinson, +		RabbitAutoConfiguration.class, SolrAutoConfiguration.class }), +	@Configuration, +	@ConditionalOnBean(SolrServer.class), +	@ConditionalOnExpression("${health.solr.enabled:true}"), +	public static class SolrHealthIndicatorConfiguration {, +, +		@Autowired, +		private HealthAggregator healthAggregator;, +, +		@Autowired, +		private Map<String, SolrServer> solrServers;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "solrHealthIndicator"), +		public HealthIndicator rabbitHealthIndicator() {, +			if (this.solrServers.size() == 1) {, +				return new SolrHealthIndicator(this.solrServers.entrySet().iterator(), +						.next().getValue());, +			}, +, +			CompositeHealthIndicator composite = new CompositeHealthIndicator(, +					this.healthAggregator);, +			for (Map.Entry<String, SolrServer> entry : this.solrServers.entrySet()) {, +				composite.addHealthIndicator(entry.getKey(), new SolrHealthIndicator(, +						entry.getValue()));, +			}, +			return composite;, +		}, +	}, +, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java, +/*, + * Copyright 2012-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0]