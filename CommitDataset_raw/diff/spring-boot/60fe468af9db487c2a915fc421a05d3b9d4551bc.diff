[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +				File file = new File(URI.create(classpathEntry.toString()));, +				roots.add(file);, +			List<MatchedResource> found = matcher.find(roots);, +			return found;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +				File file = new File(URI.create(classpathEntry.toString()));, +				roots.add(file);, +			List<MatchedResource> found = matcher.find(roots);, +			return found;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +			this.root = this.name.endsWith(".jar");, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java, +				File file = new File(URI.create(classpathEntry.toString()));, +				roots.add(file);, +			List<MatchedResource> found = matcher.find(roots);, +			return found;, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +			this.root = this.name.endsWith(".jar");, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/jar/ResourceMatcherTests.java, +import org.hamcrest.Description;, +import org.hamcrest.TypeSafeMatcher;, +import static org.hamcrest.Matchers.hasItem;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertThat;, +	public void excludedWins() throws Exception {, +		ResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList("*"),, +				Arrays.asList("**/*.jar"));, +		List<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(, +				"src/test/resources")));, +		assertThat(found, not(hasItem(new FooJarMatcher(MatchedResource.class))));, +	}, +, +	@Test, +	public void jarFileAlwaysMatches() throws Exception {, +		ResourceMatcher resourceMatcher = new ResourceMatcher(Arrays.asList("*"),, +				Arrays.asList("**/*.jar"));, +		List<MatchedResource> found = resourceMatcher.find(Arrays.asList(new File(, +				"src/test/resources/templates"), new File("src/test/resources/foo.jar")));, +		FooJarMatcher matcher = new FooJarMatcher(MatchedResource.class);, +		assertThat(found, hasItem(matcher));, +		// A jar file is always treated as a dependency (stick it in /lib), +		assertTrue(matcher.getMatched().isRoot());, +	}, +, +	@Test, +, +	private final class FooJarMatcher extends TypeSafeMatcher<MatchedResource> {, +, +		private MatchedResource matched;, +, +		public MatchedResource getMatched() {, +			return this.matched;, +		}, +, +		private FooJarMatcher(Class<?> expectedType) {, +			super(expectedType);, +		}, +, +		@Override, +		public void describeTo(Description description) {, +			description.appendText("foo.jar");, +		}, +, +		@Override, +		protected boolean matchesSafely(MatchedResource item) {, +			boolean matches = item.getFile().getName().equals("foo.jar");, +			if (matches) {, +				this.matched = item;, +			}, +			return matches;, +		}, +	}, +]