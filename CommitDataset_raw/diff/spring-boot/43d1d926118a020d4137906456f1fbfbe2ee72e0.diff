[+++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/application.properties, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/application.properties, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/banner.jpg, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/application.properties, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/banner.jpg, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/banner.txt, +${Ansi.GREEN} :: Sample application build with Spring Boot${spring-boot.formatted-version} ::${Ansi.DEFAULT}, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/application.properties, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/banner.jpg, +++ b/spring-boot-samples/spring-boot-sample-simple/src/main/resources/banner.txt, +${Ansi.GREEN} :: Sample application build with Spring Boot${spring-boot.formatted-version} ::${Ansi.DEFAULT}, +++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java, +import java.io.IOException;, +import java.io.InputStream;, +import org.springframework.boot.ansi.AnsiBackground;, +import org.springframework.boot.ansi.AnsiColor;, +import org.springframework.boot.ansi.AnsiColors;, +import org.springframework.boot.ansi.AnsiElement;, +import org.springframework.boot.ansi.AnsiOutput;, +import org.springframework.boot.bind.RelaxedPropertyResolver;, + * @author Phillip Webb, + * @since 1.4.0, +	private static final double[] RGB_WEIGHT = { 0.2126d, 0.7152d, 0.0722d };, +	private static final char[] PIXEL = { ' ', '.', '*', ':', 'o', '&', '8', '#', '@' };, +	private static final int LUMINANCE_INCREMENT = 10;, +, +	private static final int LUMINANCE_START = LUMINANCE_INCREMENT * PIXEL.length;, +, +	private final Resource image;, +	public void printBanner(Environment environment, Class<?> sourceClass,, +			PrintStream out) {, +		String headless = System.getProperty("java.awt.headless");, +			printBanner(environment, out);, +			if (headless == null) {, +				System.clearProperty("java.awt.headless");, +				System.setProperty("java.awt.headless", headless);, +			}, +		}, +	}, +, +	private void printBanner(Environment environment, PrintStream out), +			throws IOException {, +		PropertyResolver properties = new RelaxedPropertyResolver(environment,, +				"banner.image.");, +		int width = properties.getProperty("width", Integer.class, 76);, +		int heigth = properties.getProperty("height", Integer.class, 0);, +		int margin = properties.getProperty("margin", Integer.class, 2);, +		boolean invert = properties.getProperty("invert", Boolean.class, false);, +		BufferedImage image = readImage(width, heigth);, +		printBanner(image, margin, invert, out);, +	}, +, +	private BufferedImage readImage(int width, int heigth) throws IOException {, +		InputStream inputStream = this.image.getInputStream();, +		try {, +			BufferedImage image = ImageIO.read(inputStream);, +			return resizeImage(image, width, heigth);, +		}, +		finally {, +			inputStream.close();, +		}, +	}, +, +	private BufferedImage resizeImage(BufferedImage image, int width, int height) {, +		if (width < 1) {, +			width = 1;, +		}, +		if (height <= 0) {, +			double aspectRatio = (double) width / image.getWidth() * 0.5;, +			height = (int) Math.ceil(image.getHeight() * aspectRatio);, +		}, +		BufferedImage resized = new BufferedImage(width, height,, +				BufferedImage.TYPE_INT_RGB);, +		Image scaled = image.getScaledInstance(width, height, Image.SCALE_DEFAULT);, +		resized.getGraphics().drawImage(scaled, 0, 0, null);, +		return resized;, +	}, +, +	private void printBanner(BufferedImage image, int margin, boolean invert,, +			PrintStream out) {, +		AnsiElement background = (invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT);, +		out.print(AnsiOutput.encode(AnsiColor.DEFAULT));, +		out.print(AnsiOutput.encode(background));, +		out.println();, +		out.println();, +		AnsiColor lastColor = AnsiColor.DEFAULT;, +		for (int y = 0; y < image.getHeight(); y++) {, +			for (int i = 0; i < margin; i++) {, +				out.print(" ");, +				AnsiColor ansiColor = AnsiColors.getClosest(color);, +				if (ansiColor != lastColor) {, +					out.print(AnsiOutput.encode(ansiColor));, +					lastColor = ansiColor;, +				out.print(getAsciiPixel(color, invert));, +			out.println();, +		}, +		out.print(AnsiOutput.encode(AnsiColor.DEFAULT));, +		out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));, +		out.println();, +	private char getAsciiPixel(Color color, boolean dark) {]