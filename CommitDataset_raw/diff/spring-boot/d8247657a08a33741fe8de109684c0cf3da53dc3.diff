[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import com.datastax.driver.core.Cluster;, +import org.springframework.boot.actuate.health.CassandraHealthIndicator;, +import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;, +import org.springframework.data.cassandra.core.CassandraOperations;, + * @author Tommy Ludwig, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		MongoAutoConfiguration.class, MongoDataAutoConfiguration.class,, +		RedisAutoConfiguration.class, RabbitAutoConfiguration.class,, +		SolrAutoConfiguration.class, MailSenderAutoConfiguration.class,, +		JmsAutoConfiguration.class, ElasticsearchAutoConfiguration.class }), +	@ConditionalOnClass({ CassandraOperations.class, Cluster.class }), +	@ConditionalOnBean(CassandraOperations.class), +	@ConditionalOnEnabledHealthIndicator("cassandra"), +	public static class CassandraHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {, +, +		@Autowired, +		private Map<String, CassandraOperations> cassandraOperations;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "cassandraHealthIndicator"), +		public HealthIndicator cassandraHealthIndicator() {, +			return createHealthIndicator(this.cassandraOperations);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import com.datastax.driver.core.Cluster;, +import org.springframework.boot.actuate.health.CassandraHealthIndicator;, +import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;, +import org.springframework.data.cassandra.core.CassandraOperations;, + * @author Tommy Ludwig, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		MongoAutoConfiguration.class, MongoDataAutoConfiguration.class,, +		RedisAutoConfiguration.class, RabbitAutoConfiguration.class,, +		SolrAutoConfiguration.class, MailSenderAutoConfiguration.class,, +		JmsAutoConfiguration.class, ElasticsearchAutoConfiguration.class }), +	@ConditionalOnClass({ CassandraOperations.class, Cluster.class }), +	@ConditionalOnBean(CassandraOperations.class), +	@ConditionalOnEnabledHealthIndicator("cassandra"), +	public static class CassandraHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {, +, +		@Autowired, +		private Map<String, CassandraOperations> cassandraOperations;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "cassandraHealthIndicator"), +		public HealthIndicator cassandraHealthIndicator() {, +			return createHealthIndicator(this.cassandraOperations);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CassandraHealthIndicator.java, +import org.springframework.data.cassandra.core.CassandraOperations;, +	private CassandraOperations cassandraOperations;, +	 * @param cassandraOperations the Cassandra operations, +	public CassandraHealthIndicator(CassandraOperations cassandraOperations) {, +		Assert.notNull(cassandraOperations, "CassandraOperations must not be null");, +		this.cassandraOperations = cassandraOperations;, +			ResultSet results = this.cassandraOperations.query(select);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import com.datastax.driver.core.Cluster;, +import org.springframework.boot.actuate.health.CassandraHealthIndicator;, +import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;, +import org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration;, +import org.springframework.data.cassandra.core.CassandraOperations;, + * @author Tommy Ludwig, +@AutoConfigureAfter({ CassandraAutoConfiguration.class,, +		CassandraDataAutoConfiguration.class, DataSourceAutoConfiguration.class,, +		MongoAutoConfiguration.class, MongoDataAutoConfiguration.class,, +		RedisAutoConfiguration.class, RabbitAutoConfiguration.class,, +		SolrAutoConfiguration.class, MailSenderAutoConfiguration.class,, +		JmsAutoConfiguration.class, ElasticsearchAutoConfiguration.class }), +	@ConditionalOnClass({ CassandraOperations.class, Cluster.class }), +	@ConditionalOnBean(CassandraOperations.class), +	@ConditionalOnEnabledHealthIndicator("cassandra"), +	public static class CassandraHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<CassandraHealthIndicator, CassandraOperations> {, +, +		@Autowired, +		private Map<String, CassandraOperations> cassandraOperations;, +, +		@Bean, +		@ConditionalOnMissingBean(name = "cassandraHealthIndicator"), +		public HealthIndicator cassandraHealthIndicator() {, +			return createHealthIndicator(this.cassandraOperations);, +		}, +, +	}, +]