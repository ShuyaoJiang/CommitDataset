[+++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +The remote client application is designed to be run from within your IDE. You need to run, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +The remote client application is designed to be run from within your IDE. You need to run, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.sonatype.plexus</groupId>, +				<artifactId>plexus-build-api</artifactId>, +				<version>0.0.7</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +The remote client application is designed to be run from within your IDE. You need to run, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.sonatype.plexus</groupId>, +				<artifactId>plexus-build-api</artifactId>, +				<version>0.0.7</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-samples/spring-boot-sample-data-cassandra/README.adoc, += Spring Boot Sample Data Cassandra, +To run the project, need to run below `cql` commands on Cassandra., +== Keyspace Creation in Cassandra, +[source,indent=0], +----, +----, +== Table Creation in Cassandra, +Run `cql` using the  link:src/test/resources/setup.cql[setup script] located in resources folder., +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +The remote client application is designed to be run from within your IDE. You need to run, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.sonatype.plexus</groupId>, +				<artifactId>plexus-build-api</artifactId>, +				<version>0.0.7</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-samples/spring-boot-sample-data-cassandra/README.adoc, += Spring Boot Sample Data Cassandra, +To run the project, need to run below `cql` commands on Cassandra., +== Keyspace Creation in Cassandra, +[source,indent=0], +----, +----, +== Table Creation in Cassandra, +Run `cql` using the  link:src/test/resources/setup.cql[setup script] located in resources folder., +++ b/spring-boot-samples/spring-boot-sample-devtools/src/main/resources/public/public.txt, +public file, +++ b/spring-boot-docs/src/main/asciidoc/using-spring-boot.adoc, +The remote client application is designed to be run from within your IDE. You need to run, +++ b/spring-boot-parent/pom.xml, +				<groupId>org.sonatype.plexus</groupId>, +				<artifactId>plexus-build-api</artifactId>, +				<version>0.0.7</version>, +			</dependency>, +			<dependency>, +++ b/spring-boot-samples/spring-boot-sample-data-cassandra/README.adoc, += Spring Boot Sample Data Cassandra, +To run the project, need to run below `cql` commands on Cassandra., +== Keyspace Creation in Cassandra, +[source,indent=0], +----, +----, +== Table Creation in Cassandra, +Run `cql` using the  link:src/test/resources/setup.cql[setup script] located in resources folder., +++ b/spring-boot-samples/spring-boot-sample-devtools/src/main/resources/public/public.txt, +public file, +++ b/spring-boot-samples/spring-boot-sample-devtools/src/test/java/sample/devtools/SampleDevToolsApplicationIntegrationTests.java, +import org.junit.Test;, +import org.junit.runner.RunWith;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.boot.test.context.SpringBootTest;, +import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;, +import org.springframework.boot.test.web.client.TestRestTemplate;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.context.junit4.SpringRunner;, +, +import static org.assertj.core.api.Assertions.assertThat;, +, + * @author Phillip Webb, +@RunWith(SpringRunner.class), +@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT), +@DirtiesContext, +	@Autowired, +	private TestRestTemplate restTemplate;, +, +	@Test, +	public void testStaticResource() throws Exception {, +		ResponseEntity<String> entity = this.restTemplate, +				.getForEntity("/css/application.css", String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);, +		assertThat(entity.getBody()).contains("color: green;");, +	}, +, +	@Test, +	public void testPublicResource() throws Exception {, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/public.txt",, +				String.class);, +		assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);]