[+++ b/spring-boot-project/spring-boot-test/src/main/kotlin/org/springframework/boot/test/web/client/TestRestTemplateExtensions.kt, + * Extension for [TestRestTemplate.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.patchForObject(url: String, request: Any? = null,, +															 vararg uriVariables: Any): T? =, + * Extension for [TestRestTemplate.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.patchForObject(url: String, request: Any? = null,, +															 uriVariables: Map<String, *>): T? =, + * Extension for [TestRestTemplate.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.patchForObject(url: URI, request: Any? = null): T? =, + * Extension for [TestRestTemplate.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForObject(url: String, request: Any? = null,, +															vararg uriVariables: Any): T? =, + * Extension for [TestRestTemplate.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForObject(url: String, request: Any? = null,, +															uriVariables: Map<String, *>): T? =, + * Extension for [TestRestTemplate.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForObject(url: URI, request: Any? = null): T? =, + * Extension for [TestRestTemplate.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForEntity(url: String, request: Any? = null,, +															vararg uriVariables: Any): ResponseEntity<T> =, + * Extension for [TestRestTemplate.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForEntity(url: String, request: Any? = null,, +															uriVariables: Map<String, *>): ResponseEntity<T> =, + * Extension for [TestRestTemplate.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., +inline fun <reified T : Any> TestRestTemplate.postForEntity(url: URI, request: Any? = null): ResponseEntity<T> =, + * Extension for [TestRestTemplate.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., +inline fun <reified T : Any> TestRestTemplate.exchange(url: String, method: HttpMethod,, +		requestEntity: HttpEntity<*>? = null, vararg uriVariables: Any): ResponseEntity<T> =, + * Extension for [TestRestTemplate.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., +inline fun <reified T : Any> TestRestTemplate.exchange(url: String, method: HttpMethod,, +		requestEntity: HttpEntity<*>? = null, uriVariables: Map<String, *>): ResponseEntity<T> =, + * Extension for [TestRestTemplate.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., +inline fun <reified T : Any> TestRestTemplate.exchange(url: URI, method: HttpMethod,, +		requestEntity: HttpEntity<*>? = null): ResponseEntity<T> =, + * Extension for [TestRestTemplate.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., +++ b/spring-boot-project/spring-boot-test/src/main/kotlin/org/springframework/boot/test/web/client/TestRestTemplateExtensions.kt, + * Extension for [TestRestTemplate.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [TestRestTemplate.getForObject] providing a `getForObject<Foo>(...)`]