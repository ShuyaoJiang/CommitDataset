[+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GenericBomAstTransformation.java, +/*, + * Copyright 2014-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.cli.compiler;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import org.codehaus.groovy.ast.ASTNode;, +import org.codehaus.groovy.ast.AnnotatedNode;, +import org.codehaus.groovy.ast.AnnotationNode;, +import org.codehaus.groovy.ast.ClassHelper;, +import org.codehaus.groovy.ast.ClassNode;, +import org.codehaus.groovy.ast.ModuleNode;, +import org.codehaus.groovy.ast.PackageNode;, +import org.codehaus.groovy.ast.expr.ConstantExpression;, +import org.codehaus.groovy.ast.expr.Expression;, +import org.codehaus.groovy.ast.expr.ListExpression;, +import org.codehaus.groovy.control.CompilePhase;, +import org.codehaus.groovy.control.SourceUnit;, +import org.codehaus.groovy.transform.GroovyASTTransformation;, +import org.springframework.boot.groovy.DependencyManagementBom;, +import org.springframework.core.Ordered;, +, +/**, + * A base class that lets plugin authors easily add additional BOMs to all apps. All the, + * dependencies in the bom (and it's transitives) will be added to the dependency, + * management lookup, so an app can use just the artifact id (e.g. "spring-jdbc") in a, + * <code>@Grab</code>. To install, implement the missing methods and list the class in, + * <code>META-INF/services/org.springframework.boot.cli.compiler.SpringBootAstTransformation</code>, + * . The {@link #getOrder()} value needs to be before, + * {@link DependencyManagementBomTransformation#ORDER}., + *, + * @author Dave Syer, + *, + */, +@GroovyASTTransformation(phase = CompilePhase.CONVERSION), +public abstract class GenericBomAstTransformation, +		implements SpringBootAstTransformation, Ordered {, +, +	private static ClassNode BOM = ClassHelper.make(DependencyManagementBom.class);, +, +	@Override, +	public void visit(ASTNode[] nodes, SourceUnit source) {, +		for (ASTNode astNode : nodes) {, +			if (astNode instanceof ModuleNode) {, +				visitModule((ModuleNode) astNode, getBomModule());, +			}, +		}, +	}, +, +	/**, +	 * The bom to be added to dependency management in compact form:, +	 * <code>"&lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;"</code> (like in a, +	 * <code>@Grab</code>)., +	 *, +	 * @return the maven co-ordinates of the bom to add, +	 */, +	abstract protected String getBomModule();, +, +	private void visitModule(ModuleNode node, String module) {, +		addDependencyManagementBom(node, module);, +	}, +, +	private void addDependencyManagementBom(ModuleNode node, String module) {, +		AnnotatedNode annotated = getAnnotatedNode(node);, +		if (annotated != null) {, +			AnnotationNode bom = getAnnotation(annotated);, +			List<Expression> expressions = new ArrayList<Expression>(, +					getConstantExpressions(bom.getMember("value")));, +			expressions.add(new ConstantExpression(module));, +			bom.setMember("value", new ListExpression(expressions));, +		}, +	}, +, +	private AnnotationNode getAnnotation(AnnotatedNode annotated) {, +		AnnotationNode annotation;, +		List<AnnotationNode> annotations = annotated.getAnnotations(BOM);, +		if (annotations.isEmpty()) {, +			annotation = new AnnotationNode(BOM);, +			annotated.addAnnotation(annotation);, +		}, +		else {, +			annotation = annotations.get(0);]