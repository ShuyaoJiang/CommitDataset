[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.context.ApplicationContext;, +import org.springframework.stereotype.Component;, + * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Can be, + * disabled by providing a bean of type AuthenticationManager. The value provided by this, + * configuration will become the "global" authentication manager (from Spring Security),, + * or the parent of the global instance. Thus it acts as a fallback when no others are, + * provided, is used by method security if enabled, and as a parent authentication manager, + * for "local" authentication managers in individual filter chains., +		GlobalAuthenticationConfigurerAdapter {, +, +	/*, +	 * Yes, this class is a GlobalAuthenticationConfigurerAdapter, even though none of, +	 * those methods are overridden: we want Spring Security to instantiate us early, so, +	 * we can in turn force the SecurityPrequisites to be instantiated. This will prevent, +	 * ordering issues between Spring Boot modules when they need to influence the default, +	 * security configuration., +	 */, +	private SecurityProperties security;, +	private ObjectPostProcessor<Object> objectPostProcessor;, +, +	@Bean, +	@Primary, +	public AuthenticationManager authenticationManager(AuthenticationManagerBuilder auth), +			throws Exception {, +		/*, +		 * This AuthenticationManagerBuilder is for the global AuthenticationManager, +		 */, +		BootDefaultingAuthenticationConfigurerAdapter configurer = new BootDefaultingAuthenticationConfigurerAdapter();, +		configurer.init(auth);, +		configurer.configure(auth);, +		AuthenticationManager manager = configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		configurer.configureParent(auth);, +		return manager;, +	}, +, +	@Component, +	protected static class AuthenticationManagerConfigurationListener implements, +			ApplicationListener<ContextRefreshedEvent> {, +			ApplicationContext context = event.getApplicationContext();, +			if (context.getBeanNamesForType(AuthenticationManager.class).length == 0) {, +				return;, +			}, +			AuthenticationManager manager = context.getBean(AuthenticationManager.class);, +	}, +, +			// because it makes it "configured" and we are only in the init() phase, +			// here., +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import org.springframework.context.ApplicationContext;, +import org.springframework.stereotype.Component;, + * Configuration for a Spring Security in-memory {@link AuthenticationManager}. Can be, + * disabled by providing a bean of type AuthenticationManager. The value provided by this, + * configuration will become the "global" authentication manager (from Spring Security),, + * or the parent of the global instance. Thus it acts as a fallback when no others are, + * provided, is used by method security if enabled, and as a parent authentication manager, + * for "local" authentication managers in individual filter chains., +		GlobalAuthenticationConfigurerAdapter {, +, +	/*, +	 * Yes, this class is a GlobalAuthenticationConfigurerAdapter, even though none of, +	 * those methods are overridden: we want Spring Security to instantiate us early, so, +	 * we can in turn force the SecurityPrequisites to be instantiated. This will prevent, +	 * ordering issues between Spring Boot modules when they need to influence the default, +	 * security configuration., +	 */, +	private SecurityProperties security;, +	private ObjectPostProcessor<Object> objectPostProcessor;, +, +	@Bean, +	@Primary, +	public AuthenticationManager authenticationManager(AuthenticationManagerBuilder auth), +			throws Exception {, +		/*, +		 * This AuthenticationManagerBuilder is for the global AuthenticationManager, +		 */, +		BootDefaultingAuthenticationConfigurerAdapter configurer = new BootDefaultingAuthenticationConfigurerAdapter();, +		configurer.init(auth);, +		configurer.configure(auth);, +		AuthenticationManager manager = configurer.getAuthenticationManagerBuilder(), +				.getOrBuild();, +		configurer.configureParent(auth);, +		return manager;, +	}, +, +	@Component, +	protected static class AuthenticationManagerConfigurationListener implements, +			ApplicationListener<ContextRefreshedEvent> {, +			ApplicationContext context = event.getApplicationContext();, +			if (context.getBeanNamesForType(AuthenticationManager.class).length == 0) {, +				return;, +			}, +			AuthenticationManager manager = context.getBean(AuthenticationManager.class);, +	}, +, +			// because it makes it "configured" and we are only in the init() phase, +			// here., +++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleWebSecureApplication.java, +]