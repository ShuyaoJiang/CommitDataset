[+++ b/.gitignore, +settings.xml, +++ b/.gitignore, +settings.xml, +++ b/.settings-template.xml, +<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0, +                      http://maven.apache.org/xsd/settings-1.0.0.xsd">, +	<activeProfiles>, +		<activeProfile>@profile@</activeProfile>, +	</activeProfiles>, +</settings>, +++ b/.gitignore, +settings.xml, +++ b/.settings-template.xml, +<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0, +                      http://maven.apache.org/xsd/settings-1.0.0.xsd">, +	<activeProfiles>, +		<activeProfile>@profile@</activeProfile>, +	</activeProfiles>, +</settings>, +++ b/CONTRIBUTING.md, +[Apache Maven](http://maven.apache.org/run-maven/index.html) v3.0 or above., +, +#### Default build, +The project can be build from the root directory using the standard maven command:, +#### Full Build, +Multi-module Maven builds cannot directly include maven plugins that are part of the, +reactor unless they have previously been built. Unfortunately this restriction causes, +some compilations for Spring Boot as we include a maven plugin and use it within the, +samples. The standard build works around this restriction by launching the samples via, +the `maven-invoker-plugin` so that they are not part of the reactor. This works fine, +most of the time, however, sometimes it useful to run a build that includes all modules, +(for example when using `maven-versions-plugin`. We use the full build on our CI servers, +and during the release process., +, +Running a full build is a two phase process., +, +1) Prepare the build, +, +Preparing the build will compile and install the `spring-boot-maven-plugin` so that it, +can be referenced during the full build. It also generates a `settings.xml` file that, +enables a `snapshot`, `milestone` or `release` profiles based on the version being, +build. To prepare the build, from the root directory use:, +, +	$ mvn -P snapshot,prepare install, +, +> **NOTE:** You may notice that preparing the build also changes the, +> `spring-boot-starter-parent` POM. This is required for our release process to work, +> correctly., +, +2) Run the full build, +, +Once the build has been prepared, you can run a full build using the following commands:, +, +	$ cd spring-boot-full-build, +	$ mvn -s ../settings.xml -P full clean install, +, +We generate more artifacts when running the full build (such as Javadoc jars), so you, +may find the process a little slower than the standard build., +, +++ b/.gitignore, +settings.xml, +++ b/.settings-template.xml, +<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0", +	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0, +                      http://maven.apache.org/xsd/settings-1.0.0.xsd">, +	<activeProfiles>, +		<activeProfile>@profile@</activeProfile>, +	</activeProfiles>, +</settings>, +++ b/CONTRIBUTING.md, +[Apache Maven](http://maven.apache.org/run-maven/index.html) v3.0 or above., +, +#### Default build, +The project can be build from the root directory using the standard maven command:, +#### Full Build, +Multi-module Maven builds cannot directly include maven plugins that are part of the, +reactor unless they have previously been built. Unfortunately this restriction causes, +some compilations for Spring Boot as we include a maven plugin and use it within the, +samples. The standard build works around this restriction by launching the samples via, +the `maven-invoker-plugin` so that they are not part of the reactor. This works fine, +most of the time, however, sometimes it useful to run a build that includes all modules, +(for example when using `maven-versions-plugin`. We use the full build on our CI servers, +and during the release process., +, +Running a full build is a two phase process., +, +1) Prepare the build, +, +Preparing the build will compile and install the `spring-boot-maven-plugin` so that it, +can be referenced during the full build. It also generates a `settings.xml` file that, +enables a `snapshot`, `milestone` or `release` profiles based on the version being, +build. To prepare the build, from the root directory use:, +, +	$ mvn -P snapshot,prepare install]