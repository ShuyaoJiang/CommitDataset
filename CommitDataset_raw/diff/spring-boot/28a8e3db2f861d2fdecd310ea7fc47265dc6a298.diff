[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Bean;, +@ConditionalOnSingleCandidate(HazelcastInstance.class), +	private final CacheManagerCustomizers customizers;, +, +	HazelcastCacheConfiguration(CacheManagerCustomizers customizers) {, +		this.customizers = customizers;, +	}, +, +	@Bean, +	public HazelcastCacheManager cacheManager(, +			HazelcastInstance existingHazelcastInstance) throws IOException {, +		HazelcastCacheManager cacheManager = new HazelcastCacheManager(, +				existingHazelcastInstance);, +		return this.customizers.customize(cacheManager);, +	}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Bean;, +@ConditionalOnSingleCandidate(HazelcastInstance.class), +	private final CacheManagerCustomizers customizers;, +, +	HazelcastCacheConfiguration(CacheManagerCustomizers customizers) {, +		this.customizers = customizers;, +	}, +, +	@Bean, +	public HazelcastCacheManager cacheManager(, +			HazelcastInstance existingHazelcastInstance) throws IOException {, +		HazelcastCacheManager cacheManager = new HazelcastCacheManager(, +				existingHazelcastInstance);, +		return this.customizers.customize(cacheManager);, +	}, +, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Bean;, +@ConditionalOnSingleCandidate(HazelcastInstance.class), +	private final CacheManagerCustomizers customizers;, +, +	HazelcastCacheConfiguration(CacheManagerCustomizers customizers) {, +		this.customizers = customizers;, +	}, +, +	@Bean, +	public HazelcastCacheManager cacheManager(, +			HazelcastInstance existingHazelcastInstance) throws IOException {, +		HazelcastCacheManager cacheManager = new HazelcastCacheManager(, +				existingHazelcastInstance);, +		return this.customizers.customize(cacheManager);, +	}, +, +++ /dev/null, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +		String configLocation = "org/springframework/boot/autoconfigure/hazelcast/hazelcast-specific.xml";, +		load(new Class[] { HazelcastAutoConfiguration.class,, +				DefaultCacheConfiguration.class }, "spring.cache.type=hazelcast");, +		testCustomizers(HazelcastCacheAndCustomizersConfiguration.class, "hazelcast",, +	public void hazelcastCacheWithHazelcastAutoConfiguration() throws IOException {, +		String hazelcastConfig = "org/springframework/boot/autoconfigure/hazelcast/hazelcast-specific.xml";, +		load(new Class[] { HazelcastAutoConfiguration.class,, +						DefaultCacheConfiguration.class }, "spring.cache.type=hazelcast",, +				"spring.hazelcast.config=" + hazelcastConfig);, +		assertThat(cacheManager.getHazelcastInstance()).isSameAs(hazelcastInstance);, +				.isEqualTo(new ClassPathResource(hazelcastConfig).getFile());, +		assertThat(cacheManager.getCache("foobar")).isNotNull();, +		assertThat(cacheManager.getCacheNames()).containsOnly("foobar");, +		String configLocation = "org/springframework/boot/autoconfigure/hazelcast/hazelcast-specific.xml";, +		load(new Class[]{config}, environment);, +	}, +, +	private void load(Class<?>[] configs, String... environment) {, +		applicationContext.register(configs);, +	@Import({ HazelcastAutoConfiguration.class,, +			CacheManagerCustomizersConfiguration.class }), +	static class HazelcastCacheAndCustomizersConfiguration {, +, +	}, +, +	@Configuration, +	@EnableCaching, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/HazelcastCacheConfiguration.java, +import java.io.IOException;, +, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +import org.springframework.context.annotation.Bean;]