[+++ b/spring-boot-actuator/README.md, +point to a database or directory server, you can add the `@EnableGlobalAuthentication`, +annotation and configure the global `AuthenticationManagerBuilder` as shown below:, +    @Controller, +    @EnableAutoConfiguration, +    @EnableGlobalAuthentication, +    public class SampleController {, +        ..., +    }, +, +++ b/spring-boot-actuator/README.md, +point to a database or directory server, you can add the `@EnableGlobalAuthentication`, +annotation and configure the global `AuthenticationManagerBuilder` as shown below:, +    @Controller, +    @EnableAutoConfiguration, +    @EnableGlobalAuthentication, +    public class SampleController {, +        ..., +    }, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(, +				manager, "parent");, +		DaoAuthenticationProvider provider = (DaoAuthenticationProvider) parent, +++ b/spring-boot-actuator/README.md, +point to a database or directory server, you can add the `@EnableGlobalAuthentication`, +annotation and configure the global `AuthenticationManagerBuilder` as shown below:, +    @Controller, +    @EnableAutoConfiguration, +    @EnableGlobalAuthentication, +    public class SampleController {, +        ..., +    }, +, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java, +		ProviderManager parent = (ProviderManager) ReflectionTestUtils.getField(, +				manager, "parent");, +		DaoAuthenticationProvider provider = (DaoAuthenticationProvider) parent, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.boot.autoconfigure.security.SecurityProperties.User;, +import org.springframework.security.authentication.AuthenticationProvider;, +import org.springframework.security.config.annotation.SecurityConfigurer;, +import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter;, +public class AuthenticationManagerConfiguration extends GlobalAuthenticationConfigurerAdapter {, +	private static Log logger = LogFactory.getLog(AuthenticationManagerConfiguration.class);, +	@Autowired, +	private ObjectPostProcessor<Object> objectPostProcessor;, +	private SecurityProperties security;, +, +	public void init(AuthenticationManagerBuilder auth) throws Exception {, +		auth.apply(new BootDefaultingAuthenticationConfigurerAdapter());, +	/**, +	 * We must add {@link BootDefaultingAuthenticationConfigurerAdapter} in the, +	 * init phase of the last {@link GlobalAuthenticationConfigurerAdapter}. The, +	 * reason is that the typical flow is something like:, +	 *, +	 * <ul>, +	 * <li>A, +	 * {@link GlobalAuthenticationConfigurerAdapter#init(AuthenticationManagerBuilder)}, +	 * exists that adds a {@link SecurityConfigurer} to the, +	 * {@link AuthenticationManagerBuilder}</li>, +	 * <li>, +	 * {@link AuthenticationManagerConfiguration#init(AuthenticationManagerBuilder)}, +	 * adds BootDefaultingAuthenticationConfigurerAdapter so it is after the, +	 * {@link SecurityConfigurer} in the first step</li>, +	 * <li>We then can default an {@link AuthenticationProvider} if necessary., +	 * Note we can only invoke the, +	 * {@link AuthenticationManagerBuilder#authenticationProvider(AuthenticationProvider)}, +	 * method since all other methods add a {@link SecurityConfigurer} which is, +	 * not allowed in the configure stage. It is not allowed because we, +	 * guarantee all init methods are invoked before configure, which cannot be, +	 * guaranteed at this point.</li>, +	 * </ul>, +	 *, +	 * @author Rob Winch, +	 */, +	private class BootDefaultingAuthenticationConfigurerAdapter extends GlobalAuthenticationConfigurerAdapter {, +, +		@Override, +		public void configure(AuthenticationManagerBuilder auth), +				throws Exception {, +			if(auth.isConfigured()) {, +				return;, +			}, +, +			User user = AuthenticationManagerConfiguration.this.security.getUser();, +			if (user.isDefaultPassword()) {, +				logger.info("\n\nUsing default password for application endpoints: ", +						+ user.getPassword() + "\n\n");, +			}, +, +			AuthenticationManagerBuilder defaultAuth = new AuthenticationManagerBuilder(objectPostProcessor);, +, +			Set<String> roles = new LinkedHashSet<String>(user.getRole());, +, +			AuthenticationManager parent = defaultAuth.]