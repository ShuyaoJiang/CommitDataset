[+++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfigurationComparator.java, +class LoggerConfigurationComparator implements Comparator<LoggerConfiguration> {, +	LoggerConfigurationComparator(String rootLoggerName) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfigurationComparator.java, +class LoggerConfigurationComparator implements Comparator<LoggerConfiguration> {, +	LoggerConfigurationComparator(String rootLoggerName) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfigurationComparator.java, +class LoggerConfigurationComparator implements Comparator<LoggerConfiguration> {, +	LoggerConfigurationComparator(String rootLoggerName) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	/**, +	 * The name used to for the root logger. LoggingSystem implementations should ensure, +	 * that this is the name used to represent the root logger, regardless of the, +	 * underlying implementation., +	 */, +	public static final String ROOT_LOGGER_NAME = "ROOT";, +, +	 * @param loggerName the name of the logger to set ({@code null} can be used for the, +	 * root logger)., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfigurationComparator.java, +class LoggerConfigurationComparator implements Comparator<LoggerConfiguration> {, +	LoggerConfigurationComparator(String rootLoggerName) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	/**, +	 * The name used to for the root logger. LoggingSystem implementations should ensure, +	 * that this is the name used to represent the root logger, regardless of the, +	 * underlying implementation., +	 */, +	public static final String ROOT_LOGGER_NAME = "ROOT";, +, +	 * @param loggerName the name of the logger to set ({@code null} can be used for the, +	 * root logger)., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +		if (loggerName == null || ROOT_LOGGER_NAME.equals(loggerName)) {, +			loggerName = "";, +		}, +		Logger logger = Logger.getLogger(loggerName);, +		Collections.sort(result, CONFIGURATION_COMPARATOR);, +		String name = (StringUtils.hasLength(logger.getName()) ? logger.getName(), +				: ROOT_LOGGER_NAME);, +		return new LoggerConfiguration(name, level, effectiveLevel);, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/AbstractLoggingSystem.java, +import java.util.Comparator;, +	protected static final Comparator<LoggerConfiguration> CONFIGURATION_COMPARATOR = new LoggerConfigurationComparator(, +			ROOT_LOGGER_NAME);, +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggerConfigurationComparator.java, +class LoggerConfigurationComparator implements Comparator<LoggerConfiguration> {, +	LoggerConfigurationComparator(String rootLoggerName) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME)) {, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java, +	/**, +	 * The name used to for the root logger. LoggingSystem implementations should ensure, +	 * that this is the name used to represent the root logger, regardless of the, +	 * underlying implementation., +	 */, +	public static final String ROOT_LOGGER_NAME = "ROOT";, +, +	 * @param loggerName the name of the logger to set ({@code null} can be used for the, +	 * root logger)., +++ b/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java, +		if (loggerName == null || ROOT_LOGGER_NAME.equals(loggerName)) {, +			loggerName = "";, +		}, +		Logger logger = Logger.getLogger(loggerName);, +		Collections.sort(result, CONFIGURATION_COMPARATOR);, +		String name = (StringUtils.hasLength(logger.getName()) ? logger.getName(), +				: ROOT_LOGGER_NAME);]