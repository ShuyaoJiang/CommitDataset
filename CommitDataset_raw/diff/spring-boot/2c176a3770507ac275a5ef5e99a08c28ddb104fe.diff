[+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +import org.springframework.boot.actuate.health.DefaultReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +		ReactiveHealthIndicatorRegistry registry = new DefaultReactiveHealthIndicatorRegistry();, +		beans.forEach((name, source) -> registry.register(name,, +		return new CompositeReactiveHealthIndicator(this.healthAggregator, registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +import org.springframework.boot.actuate.health.DefaultReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +		ReactiveHealthIndicatorRegistry registry = new DefaultReactiveHealthIndicatorRegistry();, +		beans.forEach((name, source) -> registry.register(name,, +		return new CompositeReactiveHealthIndicator(this.healthAggregator, registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration.java, +import org.springframework.boot.actuate.health.CompositeReactiveHealthIndicator;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	@ConditionalOnSingleCandidate(ReactiveHealthIndicatorRegistry.class), +				ReactiveHealthIndicatorRegistry registry) {, +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicator(, +					registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +import org.springframework.boot.actuate.health.DefaultReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +		ReactiveHealthIndicatorRegistry registry = new DefaultReactiveHealthIndicatorRegistry();, +		beans.forEach((name, source) -> registry.register(name,, +		return new CompositeReactiveHealthIndicator(this.healthAggregator, registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration.java, +import org.springframework.boot.actuate.health.CompositeReactiveHealthIndicator;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	@ConditionalOnSingleCandidate(ReactiveHealthIndicatorRegistry.class), +				ReactiveHealthIndicatorRegistry registry) {, +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicator(, +					registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +import java.util.Collections;, +import java.util.Map;, +, +import reactor.core.publisher.Flux;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistryFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +	@Configuration, +	@ConditionalOnClass(Flux.class), +	static class ReactiveHealthIndicatorConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(, +				ObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,, +				ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +			return new ReactiveHealthIndicatorRegistryFactory().createReactiveHealthIndicatorRegistry(, +					reactiveHealthIndicators.getIfAvailable(Collections::emptyMap),, +					healthIndicators.getIfAvailable(Collections::emptyMap));, +		}, +, +	}, +, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/CompositeReactiveHealthIndicatorConfiguration.java, +import org.springframework.boot.actuate.health.DefaultReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +		ReactiveHealthIndicatorRegistry registry = new DefaultReactiveHealthIndicatorRegistry();, +		beans.forEach((name, source) -> registry.register(name,, +		return new CompositeReactiveHealthIndicator(this.healthAggregator, registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthEndpointWebExtensionConfiguration.java, +import org.springframework.boot.actuate.health.CompositeReactiveHealthIndicator;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;, +	@ConditionalOnSingleCandidate(ReactiveHealthIndicatorRegistry.class), +				ReactiveHealthIndicatorRegistry registry) {, +			this.reactiveHealthIndicator = new CompositeReactiveHealthIndicator(, +					registry);, +++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.java, +import java.util.Collections;, +import java.util.Map;, +, +import reactor.core.publisher.Flux;, +, +import org.springframework.beans.factory.ObjectProvider;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistry;, +import org.springframework.boot.actuate.health.ReactiveHealthIndicatorRegistryFactory;, +import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;, +	@Configuration, +	@ConditionalOnClass(Flux.class), +	static class ReactiveHealthIndicatorConfiguration {, +, +		@Bean, +		@ConditionalOnMissingBean, +		public ReactiveHealthIndicatorRegistry reactiveHealthIndicatorRegistry(, +				ObjectProvider<Map<String, ReactiveHealthIndicator>> reactiveHealthIndicators,, +				ObjectProvider<Map<String, HealthIndicator>> healthIndicators) {, +			return new ReactiveHealthIndicatorRegistryFactory().createReactiveHealthIndicatorRegistry(, +					reactiveHealthIndicators.getIfAvailable(Collections::emptyMap),, +					healthIndicators.getIfAvailable(Collections::emptyMap));, +		}, +, +	}, +]