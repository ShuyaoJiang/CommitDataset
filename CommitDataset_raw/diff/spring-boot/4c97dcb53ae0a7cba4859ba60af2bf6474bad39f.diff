[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.neo4j.ogm.session.SessionFactory;, +import org.springframework.boot.actuate.health.Neo4jHealthIndicator;, +import org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;, + * @author Eric Spiegelberg, +		SolrAutoConfiguration.class, Neo4jDataAutoConfiguration.class }), +	@ConditionalOnClass(SessionFactory.class), +	@ConditionalOnBean(SessionFactory.class), +	@ConditionalOnEnabledHealthIndicator("neo4j"), +	public static class Neo4jHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<Neo4jHealthIndicator, SessionFactory> {, +, +		private final Map<String, SessionFactory> sessionFactories;, +, +		public Neo4jHealthIndicatorConfiguration(, +				Map<String, SessionFactory> sessionFactories) {, +			this.sessionFactories = sessionFactories;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "neo4jHealthIndicator"), +		public HealthIndicator neo4jHealthIndicator() {, +			return createHealthIndicator(this.sessionFactories);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java, +import org.neo4j.ogm.session.SessionFactory;, +import org.springframework.boot.actuate.health.Neo4jHealthIndicator;, +import org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration;, + * @author Eric Spiegelberg, +		SolrAutoConfiguration.class, Neo4jDataAutoConfiguration.class }), +	@ConditionalOnClass(SessionFactory.class), +	@ConditionalOnBean(SessionFactory.class), +	@ConditionalOnEnabledHealthIndicator("neo4j"), +	public static class Neo4jHealthIndicatorConfiguration extends, +			CompositeHealthIndicatorConfiguration<Neo4jHealthIndicator, SessionFactory> {, +, +		private final Map<String, SessionFactory> sessionFactories;, +, +		public Neo4jHealthIndicatorConfiguration(, +				Map<String, SessionFactory> sessionFactories) {, +			this.sessionFactories = sessionFactories;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(name = "neo4jHealthIndicator"), +		public HealthIndicator neo4jHealthIndicator() {, +			return createHealthIndicator(this.sessionFactories);, +		}, +, +	}, +, +	@Configuration, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java, +/*, + * Copyright 2012-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.actuate.health;, +, +import java.util.Collections;, +import java.util.Map;, +, +import org.neo4j.ogm.model.Result;, +import org.neo4j.ogm.session.Session;, +import org.neo4j.ogm.session.SessionFactory;, +, +import org.springframework.boot.context.properties.ConfigurationProperties;, +, +/**, + * {@link HealthIndicator} that tests the status of a Neo4j by executing a Cypher, + * statement., + *, + * @author Eric Spiegelberg, + */, +@ConfigurationProperties(prefix = "management.health.neo4j", ignoreUnknownFields = false), +public class Neo4jHealthIndicator extends AbstractHealthIndicator {, +, +	private final SessionFactory sessionFactory;, +, +	/**, +	 * The Cypher statement used to verify Neo4j is up., +	 */, +	public static final String CYPHER = "match (n) return count(n) as nodes";, +]