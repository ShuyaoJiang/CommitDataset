[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/Jackson2ObjectMapperBuilderCustomizer.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/Jackson2ObjectMapperBuilderCustomizer.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Locale;, +import org.springframework.core.Ordered;, +		JacksonObjectMapperBuilderConfiguration(ApplicationContext applicationContext,, +				JacksonProperties jacksonProperties,, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			this.applicationContext = applicationContext;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(Jackson2ObjectMapperBuilder.class), +		public Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();, +			builder.applicationContext(this.applicationContext);, +			customize(builder, customizers);, +			return builder;, +		}, +, +		private void customize(Jackson2ObjectMapperBuilder builder,, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			for (Jackson2ObjectMapperBuilderCustomizer customizer : customizers) {, +				customizer.customize(builder);, +			}, +		}, +, +	}, +, +	@Configuration, +	@ConditionalOnClass({ ObjectMapper.class, Jackson2ObjectMapperBuilder.class }), +	@EnableConfigurationProperties(JacksonProperties.class), +	static class Jackson2ObjectMapperBuilderCustomizerConfiguration {, +, +		@Bean, +		public StandardJackson2ObjectMapperBuilderCustomizer standardJacksonObjectMapperBuilderCustomizer(, +				ApplicationContext applicationContext,, +				JacksonProperties jacksonProperties) {, +			return new StandardJackson2ObjectMapperBuilderCustomizer(applicationContext,, +					jacksonProperties);, +		}, +, +		private static final class StandardJackson2ObjectMapperBuilderCustomizer, +				implements Jackson2ObjectMapperBuilderCustomizer, Ordered {, +, +			private final ApplicationContext applicationContext;, +, +			StandardJackson2ObjectMapperBuilderCustomizer(, +					ApplicationContext applicationContext,, +			@Override, +			public int getOrder() {, +				return 0;, +			}, +, +			@Override, +			public void customize(Jackson2ObjectMapperBuilder builder) {, +, +						SimpleDateFormat simpleDateFormat = new SimpleDateFormat(, +								dateFormat);, +						// Since Jackson 2.6.3 we always need to set a TimeZone (see, +						// gh-4170). If none in our properties fallback to the Jackson's, +						// default, +				// names in PropertyNamingStrategy which hold default provided, +				// implementations, +					builder.propertyNamingStrategy(, +							(PropertyNamingStrategy) field.get(null));, +				builder.modulesToInstall(, +						moduleBeans.toArray(new Module[moduleBeans.size()]));, +, +}, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/Jackson2ObjectMapperBuilderCustomizer.java, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java, +import java.util.Locale;, +import org.springframework.core.Ordered;, +		JacksonObjectMapperBuilderConfiguration(ApplicationContext applicationContext,, +				JacksonProperties jacksonProperties,, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			this.applicationContext = applicationContext;, +		}, +, +		@Bean, +		@ConditionalOnMissingBean(Jackson2ObjectMapperBuilder.class), +		public Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();, +			builder.applicationContext(this.applicationContext);, +			customize(builder, customizers);, +			return builder;, +		}, +, +		private void customize(Jackson2ObjectMapperBuilder builder,, +				List<Jackson2ObjectMapperBuilderCustomizer> customizers) {, +			for (Jackson2ObjectMapperBuilderCustomizer customizer : customizers) {, +				customizer.customize(builder);, +			}, +		}]