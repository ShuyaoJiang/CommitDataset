[+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +			registerSpies(registry, definition, field, existingBeans);, +	private void registerSpies(BeanDefinitionRegistry registry, SpyDefinition definition,, +			Field field, String[] existingBeans) {, +		ResolvableType type = definition.getTypeToSpy();, +		try {, +			if (ObjectUtils.isEmpty(existingBeans)) {, +				throw new NoSuchBeanDefinitionException(type);, +			if (existingBeans.length > 1) {, +				existingBeans = new String[] {, +						determinePrimaryCandidate(registry, existingBeans, type) };, +			}, +			registerSpy(definition, field, existingBeans[0]);, +		}, +		catch (RuntimeException ex) {, +			throw new IllegalStateException(, +					"Unable to register spy bean " + definition.getTypeToSpy(), ex);, +		}, +	}, +, +	private String determinePrimaryCandidate(BeanDefinitionRegistry registry,, +			String[] candidateBeanNames, ResolvableType type) {, +		String primaryBeanName = null;, +		for (String candidateBeanName : candidateBeanNames) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(candidateBeanName);, +			if (beanDefinition.isPrimary()) {, +				if (primaryBeanName != null) {, +					throw new NoUniqueBeanDefinitionException(type.resolve(),, +							candidateBeanNames.length,, +							"more than one 'primary' bean found among candidates: ", +									+ Arrays.asList(candidateBeanNames));, +				}, +				primaryBeanName = candidateBeanName;, +			}, +		}, +		return primaryBeanName;, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +			registerSpies(registry, definition, field, existingBeans);, +	private void registerSpies(BeanDefinitionRegistry registry, SpyDefinition definition,, +			Field field, String[] existingBeans) {, +		ResolvableType type = definition.getTypeToSpy();, +		try {, +			if (ObjectUtils.isEmpty(existingBeans)) {, +				throw new NoSuchBeanDefinitionException(type);, +			if (existingBeans.length > 1) {, +				existingBeans = new String[] {, +						determinePrimaryCandidate(registry, existingBeans, type) };, +			}, +			registerSpy(definition, field, existingBeans[0]);, +		}, +		catch (RuntimeException ex) {, +			throw new IllegalStateException(, +					"Unable to register spy bean " + definition.getTypeToSpy(), ex);, +		}, +	}, +, +	private String determinePrimaryCandidate(BeanDefinitionRegistry registry,, +			String[] candidateBeanNames, ResolvableType type) {, +		String primaryBeanName = null;, +		for (String candidateBeanName : candidateBeanNames) {, +			BeanDefinition beanDefinition = registry.getBeanDefinition(candidateBeanName);, +			if (beanDefinition.isPrimary()) {, +				if (primaryBeanName != null) {, +					throw new NoUniqueBeanDefinitionException(type.resolve(),, +							candidateBeanNames.length,, +							"more than one 'primary' bean found among candidates: ", +									+ Arrays.asList(candidateBeanNames));, +				}, +				primaryBeanName = candidateBeanName;, +			}, +		}, +		return primaryBeanName;, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanOnTestFieldForMultipleExistingBeansIntegrationTests.java, +/*, + * Copyright 2012-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.test.mock.mockito;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.mockito.internal.util.MockUtil;, +, +import org.springframework.beans.factory.annotation.Autowired;]