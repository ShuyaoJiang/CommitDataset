[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +documentation for details). Spring Boot also auto configures the necessary infrastructure, +to send and receive messages., +[[boot-features-using-jms-sending]], +==== Sending a message, +Spring's `JmsTemplate` is auto-configured and you can autowire it directly into your, +NOTE: {spring-javadoc}/jms/core/JmsMessagingTemplate.{dc-ext}[`JmsMessagingTemplate`], +(new in Spring 4.1) can be injected in a similar manner., +[[boot-features-using-jms-receiving]], +==== Receiving a message, +, +When the JMS infrastructure is present, any bean can be annotated with `@JmsListener` to, +create a listener endpoint. If no `JmsListenerContainerFactory` has been defined, a default, +one is configured automatically., +, +The following component creates a listener endpoint on the `someQueue` destination:, +, +[source,java,indent=0], +----, +	@Component, +	public class MyBean {, +, +		@JmsListener(destination = "someQueue"), +		public void processMessage(String content) { ... }, +, +	}, +----, +, +Check {spring-javadoc}/jms/annotation/EnableJms.{dc-ext}[the javadoc of `@EnableJms`], +for more details.]