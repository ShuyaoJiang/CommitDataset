[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import java.util.Date;, +import org.springframework.format.datetime.DateFormatter;, +		@Value("${spring.mvc.date-format:}"), +		private String dateFormat = "";, +, +		@Bean, +		@ConditionalOnExpression("'${spring.mvc.date-format:}' != ''"), +		public Formatter<Date> dateFormatter() {, +			return new DateFormatter(this.dateFormat);, +		}, +, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import java.util.Date;, +import org.springframework.format.datetime.DateFormatter;, +		@Value("${spring.mvc.date-format:}"), +		private String dateFormat = "";, +, +		@Bean, +		@ConditionalOnExpression("'${spring.mvc.date-format:}' != ''"), +		public Formatter<Date> dateFormatter() {, +			return new DateFormatter(this.dateFormat);, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import java.util.Date;, +import org.joda.time.DateTime;, +import org.springframework.format.support.FormattingConversionService;, +	@Test, +	public void noDateFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		FormattingConversionService cs = this.context.getBean(FormattingConversionService.class);, +		Date date = new DateTime(1988, 6, 25, 20, 30).toDate();, +		// formatting cs should use simple toString(), +		assertThat(cs.convert(date, String.class), equalTo(date.toString()));, +	}, +, +	@Test, +	public void overrideDateFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		// set fixed date format, +		EnvironmentTestUtils.addEnvironment(this.context, "spring.mvc.date-format:dd*MM*yyyy");, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		FormattingConversionService cs = this.context.getBean(FormattingConversionService.class);, +		Date date = new DateTime(1988, 6, 25, 20, 30).toDate();, +		assertThat(cs.convert(date, String.class), equalTo("25*06*1988"));, +	}, +, +	@Test, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java, +import java.util.Date;, +import org.springframework.format.datetime.DateFormatter;, +		@Value("${spring.mvc.date-format:}"), +		private String dateFormat = "";, +, +		@Bean, +		@ConditionalOnExpression("'${spring.mvc.date-format:}' != ''"), +		public Formatter<Date> dateFormatter() {, +			return new DateFormatter(this.dateFormat);, +		}, +, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfigurationTests.java, +import java.util.Date;, +import org.joda.time.DateTime;, +import org.springframework.format.support.FormattingConversionService;, +	@Test, +	public void noDateFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		FormattingConversionService cs = this.context.getBean(FormattingConversionService.class);, +		Date date = new DateTime(1988, 6, 25, 20, 30).toDate();, +		// formatting cs should use simple toString(), +		assertThat(cs.convert(date, String.class), equalTo(date.toString()));, +	}, +, +	@Test, +	public void overrideDateFormat() throws Exception {, +		this.context = new AnnotationConfigEmbeddedWebApplicationContext();, +		// set fixed date format, +		EnvironmentTestUtils.addEnvironment(this.context, "spring.mvc.date-format:dd*MM*yyyy");, +		this.context.register(AllResources.class, Config.class,, +				WebMvcAutoConfiguration.class,, +				HttpMessageConvertersAutoConfiguration.class,, +				PropertyPlaceholderAutoConfiguration.class);, +		this.context.refresh();, +		FormattingConversionService cs = this.context.getBean(FormattingConversionService.class);, +		Date date = new DateTime(1988, 6, 25, 20, 30).toDate();]