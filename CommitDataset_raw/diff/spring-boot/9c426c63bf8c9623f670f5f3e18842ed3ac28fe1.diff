[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java, +			return;, +		try (InputStream inputStream = response.getEntity().getContent()) {, +			doHealthCheck(builder,, +					StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));, +		}, +	}, +, +	private void doHealthCheck(Health.Builder builder, String json) {, +		String status = (String) this.jsonParser.parseMap(json).get("status");, +		if (RED_STATUS.equals(status)) {, +			return;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java, +			return;, +		try (InputStream inputStream = response.getEntity().getContent()) {, +			doHealthCheck(builder,, +					StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));, +		}, +	}, +, +	private void doHealthCheck(Health.Builder builder, String json) {, +		String status = (String) this.jsonParser.parseMap(json).get("status");, +		if (RED_STATUS.equals(status)) {, +			return;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java, +	/**, +	 * Return the {@link Filter} to be registered., +	 * @return the filter, +	 */, +	public abstract T getFilter();, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java, +			return;, +		try (InputStream inputStream = response.getEntity().getContent()) {, +			doHealthCheck(builder,, +					StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));, +		}, +	}, +, +	private void doHealthCheck(Health.Builder builder, String json) {, +		String status = (String) this.jsonParser.parseMap(json).get("status");, +		if (RED_STATUS.equals(status)) {, +			return;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java, +	/**, +	 * Return the {@link Filter} to be registered., +	 * @return the filter, +	 */, +	public abstract T getFilter();, +, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java, +		logMappings(this.initializers);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Added existing " + type.getSimpleName() + " initializer bean '", +					+ beanName + "'; order=" + order + ", resource=", +					+ resourceDescription);, +		List<Map.Entry<String, B>> entries = getOrderedBeansOfType(beanFactory, beanType,, +		for (Entry<String, B> entry : entries) {, +			String beanName = entry.getKey();, +			B bean = entry.getValue();, +			if (this.seen.add(bean)) {, +						bean, entries.size());, +				int order = getOrder(bean);, +				if (logger.isTraceEnabled()) {, +					logger.trace(, +		beans.sort((o1, o2) -> AnnotationAwareOrderComparator.INSTANCE, +				.compare(o1.getValue(), o2.getValue()));, +	private void logMappings(, +		if (logger.isDebugEnabled()) {, +			logMappings("filters", initializers, Filter.class,, +					FilterRegistrationBean.class);, +			logMappings("servlets", initializers, Servlet.class,, +					ServletRegistrationBean.class);, +	private void logMappings(String name,, +			MultiValueMap<Class<?>, ServletContextInitializer> initializers,, +			Class<?> type, Class<? extends RegistrationBean> registrationType) {, +		List<ServletContextInitializer> registrations = new ArrayList<>();, +		registrations.addAll(, +				initializers.getOrDefault(registrationType, Collections.emptyList()));, +		registrations.addAll(initializers.getOrDefault(type, Collections.emptyList()));, +		String info = registrations.stream().map(Object::toString), +				.collect(Collectors.joining(", "));, +		logger.debug("Mapping " + name + ": " + info);, +	}, +, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchRestHealthIndicator.java, +			return;, +		try (InputStream inputStream = response.getEntity().getContent()) {, +			doHealthCheck(builder,, +					StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8));, +		}, +	}, +, +	private void doHealthCheck(Health.Builder builder, String json) {, +		String status = (String) this.jsonParser.parseMap(json).get("status");, +		if (RED_STATUS.equals(status)) {, +			return;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java, +	/**, +	 * Return the {@link Filter} to be registered.]