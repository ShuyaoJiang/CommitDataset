[+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +			TemplateAvailabilityProperties properties = binder, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +			TemplateAvailabilityProperties properties = binder, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +				.withPropertyValues("spring.cache.type=redis").run((context) -> {, +					assertThat(, +							((org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +									cacheManager).getPropertyValue("defaultCacheConfig")), +											.usePrefix()).isTrue();, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +			TemplateAvailabilityProperties properties = binder, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +				.withPropertyValues("spring.cache.type=redis").run((context) -> {, +					assertThat(, +							((org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +									cacheManager).getPropertyValue("defaultCacheConfig")), +											.usePrefix()).isTrue();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +import org.springframework.core.env.StandardEnvironment;, +		applyTo(environment, type, type.applySuffix("test"));, +		SYSTEM_ENVIRONMENT(SystemEnvironmentPropertySource.class,, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME),, +		MAP(MapPropertySource.class, null);, +		private final Class<? extends MapPropertySource> sourceClass;, +		private final String suffix;, +, +		Type(Class<? extends MapPropertySource> sourceClass, String suffix) {, +			this.suffix = (suffix == null ? null : "-" + suffix);, +		protected String applySuffix(String name) {, +			return (this.suffix == null ? name : name + "-" + this.suffix);, +		}, +, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +			TemplateAvailabilityProperties properties = binder, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +				.withPropertyValues("spring.cache.type=redis").run((context) -> {, +					assertThat(, +							((org.springframework.data.redis.cache.RedisCacheConfiguration) new DirectFieldAccessor(, +									cacheManager).getPropertyValue("defaultCacheConfig")), +											.usePrefix()).isTrue();, +++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java, +import org.springframework.core.env.StandardEnvironment;, +		applyTo(environment, type, type.applySuffix("test"));, +		SYSTEM_ENVIRONMENT(SystemEnvironmentPropertySource.class,, +				StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME),, +		MAP(MapPropertySource.class, null);, +		private final Class<? extends MapPropertySource> sourceClass;, +		private final String suffix;, +, +		Type(Class<? extends MapPropertySource> sourceClass, String suffix) {, +			this.suffix = (suffix == null ? null : "-" + suffix);, +		protected String applySuffix(String name) {, +			return (this.suffix == null ? name : name + "-" + this.suffix);, +		}, +, +++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java, +		TestPropertyValues.of("FOO_BAR=BAZ").applyTo(this.environment, Type.SYSTEM_ENVIRONMENT);, +		assertThat(this.environment.getPropertySources().contains(, +				"test-" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME));, +		TestPropertyValues.of("FOO_BAR=BAZ").applyTo(this.environment, Type.SYSTEM_ENVIRONMENT,, +++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/info/EnvironmentInfoContributorTests.java, +				Type.SYSTEM_ENVIRONMENT);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java, +				.builder(redisConnectionFactory);, +++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/PathBasedTemplateAvailabilityProvider.java, +			TemplateAvailabilityProperties properties = binder, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfigurationTests.java, +				.withPropertyValues("spring.cache.type=redis").run((context) -> {]