[+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			for (String prefix : new RelaxedNames(stripLastDot(this.namePrefix))) {, +				for (String separator : new String[] { ".", "_" }) {, +					String candidate = (StringUtils.hasLength(prefix) ? prefix, +							+ separator : prefix);, +							rtn.addPropertyValue(new OriginCapablePropertyValue(name,, +									value.getValue(), propertyOrigin));, +						}, +	private String stripLastDot(String string) {, +		if (StringUtils.hasLength(string) && string.endsWith(".")) {, +			string = string.substring(0, string.length() - 1);, +		}, +		return string;, +	}, +, +++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedDataBinder.java, +			for (String prefix : new RelaxedNames(stripLastDot(this.namePrefix))) {, +				for (String separator : new String[] { ".", "_" }) {, +					String candidate = (StringUtils.hasLength(prefix) ? prefix, +							+ separator : prefix);, +							rtn.addPropertyValue(new OriginCapablePropertyValue(name,, +									value.getValue(), propertyOrigin));, +						}, +	private String stripLastDot(String string) {, +		if (StringUtils.hasLength(string) && string.endsWith(".")) {, +			string = string.substring(0, string.length() - 1);, +		}, +		return string;, +	}, +, +++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java, +import java.util.Collections;, +import org.springframework.boot.context.config.RandomValuePropertySource;, +import org.springframework.core.env.SystemEnvironmentPropertySource;, +	@Test, +	public void testBindWithDashPrefix() throws Exception {, +		// gh-4045, +		this.targetName = "foo-bar";, +		MutablePropertySources propertySources = new MutablePropertySources();, +		propertySources.addLast(new SystemEnvironmentPropertySource("systemEnvironment",, +				Collections.<String, Object>singletonMap("FOO_BAR_NAME", "blah")));, +		propertySources.addLast(new RandomValuePropertySource("random"));, +		setupFactory();, +		this.factory.setPropertySources(propertySources);, +		this.factory.afterPropertiesSet();, +		Foo foo = this.factory.getObject();, +		assertEquals("blah", foo.name);, +	}, +]