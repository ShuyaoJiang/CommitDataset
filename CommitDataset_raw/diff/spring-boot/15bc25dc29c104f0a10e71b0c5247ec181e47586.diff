[+++ b/spring-boot-tools/spring-boot-loader/pom.xml, +			<scope>test</scope>, +			<scope>test</scope>, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +			<scope>test</scope>, +			<scope>test</scope>, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +			<scope>test</scope>, +			<scope>test</scope>, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +			<scope>test</scope>, +			<scope>test</scope>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/pom.xml, +			<scope>test</scope>, +			<scope>test</scope>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java, +/*, + * Copyright 2012-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.boot.loader;, +, +import java.io.File;, +import java.net.URI;, +import java.security.CodeSource;, +import java.security.ProtectionDomain;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.jar.JarEntry;, +, +import org.springframework.boot.loader.archive.Archive;, +import org.springframework.boot.loader.archive.Archive.Entry;, +import org.springframework.boot.loader.archive.Archive.EntryFilter;, +import org.springframework.boot.loader.archive.ExplodedArchive;, +import org.springframework.boot.loader.archive.JarFileArchive;, +, +/**, + * Base class for executable archive {@link Launcher}s., + * , + * @author Phillip Webb, + */, +public abstract class ExecutableArchiveLauncher extends Launcher {, +, +	private final Archive archive;, +, +	public ExecutableArchiveLauncher() {, +		try {, +			this.archive = createArchive();, +		}, +		catch (Exception ex) {, +			throw new IllegalStateException(ex);, +		}, +	}, +, +	private Archive createArchive() throws Exception {, +		ProtectionDomain protectionDomain = getClass().getProtectionDomain();, +		CodeSource codeSource = protectionDomain.getCodeSource();, +		URI location = (codeSource == null ? null : codeSource.getLocation().toURI());, +		String path = (location == null ? null : location.getPath());, +		if (path == null) {, +			throw new IllegalStateException("Unable to determine code source archive");, +		}, +		File root = new File(path);, +		if (!root.exists()) {, +			throw new IllegalStateException(, +					"Unable to determine code source archive from " + root);, +		}, +		return (root.isDirectory() ? new ExplodedArchive(root) : new JarFileArchive(root));, +	}, +, +	protected final Archive getArchive() {, +		return this.archive;, +	}, +, +	@Override, +	protected String getMainClass() throws Exception {, +		return this.archive.getMainClass();, +	}, +]