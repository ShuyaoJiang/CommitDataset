[+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReader.java, + * {@code aggregate.count.**} and {@code aggregate.[anything].**}. Counters are summed and, + * anything else (i.e. gauges) are aggregated by choosing the most recent value., +	 * Prefix to apply to all output metrics. A period will be appended if not present in, +	 * the provided value., +		if (StringUtils.hasText(prefix) && !prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +		this.prefix = prefix;, +		for (int i = 0; i < patterns.length; i++) {, +			if ("k".equals(patterns[i])) {, +				builder.append(builder.length() > 0 ? "." : "");, +				builder.append(keys[i]);, +		for (int i = patterns.length; i < keys.length; i++) {, +			builder.append(builder.length() > 0 ? "." : "");, +			builder.append(keys[i]);, +++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReader.java, + * {@code aggregate.count.**} and {@code aggregate.[anything].**}. Counters are summed and, + * anything else (i.e. gauges) are aggregated by choosing the most recent value., +	 * Prefix to apply to all output metrics. A period will be appended if not present in, +	 * the provided value., +		if (StringUtils.hasText(prefix) && !prefix.endsWith(".")) {, +			prefix = prefix + ".";, +		}, +		this.prefix = prefix;, +		for (int i = 0; i < patterns.length; i++) {, +			if ("k".equals(patterns[i])) {, +				builder.append(builder.length() > 0 ? "." : "");, +				builder.append(keys[i]);, +		for (int i = patterns.length; i < keys.length; i++) {, +			builder.append(builder.length() > 0 ? "." : "");, +			builder.append(keys[i]);, +++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/aggregate/AggregateMetricReaderTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +]