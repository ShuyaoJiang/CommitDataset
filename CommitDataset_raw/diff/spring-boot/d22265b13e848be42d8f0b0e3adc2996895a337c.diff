[+++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +and Spring Boot) are configured to output more information. Enabling the debug mode does _not_, +Alternatively, you can enable a "`trace`" mode by starting your application with a `--trace`, +flag (or `trace=true` in your `application.properties`). This will enable trace logging for a, +selection of core loggers (embedded container, Hibernate schema generation and the whole Spring, +portfolio)., +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +and Spring Boot) are configured to output more information. Enabling the debug mode does _not_, +Alternatively, you can enable a "`trace`" mode by starting your application with a `--trace`, +flag (or `trace=true` in your `application.properties`). This will enable trace logging for a, +selection of core loggers (embedded container, Hibernate schema generation and the whole Spring, +portfolio)., +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (isSet(environment, "debug")) {, +			if (isSet(environment, "trace")) {, +	private boolean isSet(ConfigurableEnvironment environment, String property) {, +		String value = environment.getProperty(property);, +		return !(value == null || value.equals("false"));, +	}, +, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +and Spring Boot) are configured to output more information. Enabling the debug mode does _not_, +Alternatively, you can enable a "`trace`" mode by starting your application with a `--trace`, +flag (or `trace=true` in your `application.properties`). This will enable trace logging for a, +selection of core loggers (embedded container, Hibernate schema generation and the whole Spring, +portfolio)., +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (isSet(environment, "debug")) {, +			if (isSet(environment, "trace")) {, +	private boolean isSet(ConfigurableEnvironment environment, String property) {, +		String value = environment.getProperty(property);, +		return !(value == null || value.equals("false"));, +	}, +, +++ b/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +  },, +  {, +    "name": "trace",, +    "type": "java.lang.Boolean",, +    "description": "Enable trace logs.",, +    "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",, +    "defaultValue": false, +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +and Spring Boot) are configured to output more information. Enabling the debug mode does _not_, +Alternatively, you can enable a "`trace`" mode by starting your application with a `--trace`, +flag (or `trace=true` in your `application.properties`). This will enable trace logging for a, +selection of core loggers (embedded container, Hibernate schema generation and the whole Spring, +portfolio)., +, +++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java, +			if (isSet(environment, "debug")) {, +			if (isSet(environment, "trace")) {, +	private boolean isSet(ConfigurableEnvironment environment, String property) {, +		String value = environment.getProperty(property);, +		return !(value == null || value.equals("false"));, +	}, +, +++ b/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json, +  },, +  {, +    "name": "trace",, +    "type": "java.lang.Boolean",, +    "description": "Enable trace logs.",, +    "sourceType": "org.springframework.boot.logging.LoggingApplicationListener",, +    "defaultValue": false, +++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java, + * @author Stephane Nicoll, +	public void disableDebugArg() {, +		disableDebugTraceArg("debug=false");, +	}, +, +	@Test, +	public void disableTraceArg() {, +		disableDebugTraceArg("trace=false");, +	}, +, +	private void disableDebugTraceArg(String... environment) {, +		EnvironmentTestUtils.addEnvironment(this.context, environment);, +		this.initializer.initialize(this.context.getEnvironment(),, +				this.context.getClassLoader());, +		this.logger.debug("testatdebug");, +		this.logger.trace("testattrace");, +		assertThat(this.outputCapture.toString()).doesNotContain("testatdebug");, +		assertThat(this.outputCapture.toString()).doesNotContain("testattrace");, +	}, +, +	@Test]