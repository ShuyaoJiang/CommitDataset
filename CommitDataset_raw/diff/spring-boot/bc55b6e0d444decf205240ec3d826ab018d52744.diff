[+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomFilterContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomFilterContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomServletContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomFilterContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomServletContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, + * @author Eddú Meléndez, +	private RelaxedPropertyResolver serverPropertyResolver;, +, +	 * URIs using the given {@code environment} to determine the context path and port., +	 * given {@code scheme} and use the given {@code environment} to determine the, +	 * context-path and port., +		this.serverPropertyResolver = new RelaxedPropertyResolver(environment, "server.");, +		String contextPath = this.serverPropertyResolver.getProperty("context-path", "");, +		return this.scheme + "://localhost:" + port + contextPath;, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomFilterContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationCustomServletContextPathTests.java, +		ResponseEntity<String> entity = this.restTemplate.getForEntity("/rest/hello",, +++ b/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandler.java, +import org.springframework.boot.bind.RelaxedPropertyResolver;, + * @author Eddú Meléndez, +	private RelaxedPropertyResolver serverPropertyResolver;, +, +	 * URIs using the given {@code environment} to determine the context path and port., +	 * given {@code scheme} and use the given {@code environment} to determine the, +	 * context-path and port., +		this.serverPropertyResolver = new RelaxedPropertyResolver(environment, "server.");, +		String contextPath = this.serverPropertyResolver.getProperty("context-path", "");, +		return this.scheme + "://localhost:" + port + contextPath;, +++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/LocalHostUriTemplateHandlerTests.java, + * @author Eddú Meléndez, +	@Test, +	public void getRootUriShouldUseContextPath() throws Exception {, +		MockEnvironment environment = new MockEnvironment();, +		environment.setProperty("server.contextPath", "/foo");, +		LocalHostUriTemplateHandler handler = new LocalHostUriTemplateHandler(, +				environment);, +		assertThat(handler.getRootUri()).isEqualTo("http://localhost:8080/foo");, +	}, +]