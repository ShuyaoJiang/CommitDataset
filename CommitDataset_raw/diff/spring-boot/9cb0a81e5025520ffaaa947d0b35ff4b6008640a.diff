[+++ b/spring-boot/src/main/java/org/springframework/boot/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +			List<Function<Object, Object>> converters = new ArrayList<>();, +			converters.add(new ResourceBodyConverter());, +				converters.add(new MonoBodyConverter());, +			bodyConverters = Collections.unmodifiableList(converters);, +			for (Function<Object, Object> converter : bodyConverters) {, +				body = converter.apply(body);, +++ b/spring-boot/src/main/java/org/springframework/boot/endpoint/web/jersey/JerseyEndpointResourceFactory.java, +			List<Function<Object, Object>> converters = new ArrayList<>();, +			converters.add(new ResourceBodyConverter());, +				converters.add(new MonoBodyConverter());, +			bodyConverters = Collections.unmodifiableList(converters);, +			for (Function<Object, Object> converter : bodyConverters) {, +				body = converter.apply(body);, +++ b/spring-boot/src/main/java/org/springframework/boot/endpoint/web/reactive/WebEndpointReactiveHandlerMapping.java, +import reactor.core.publisher.MonoSink;, +					.defaultIfEmpty(new ResponseEntity<>(httpMethod == HttpMethod.GET, +				Schedulers.elastic().schedule(() -> invoke(arguments, sink));, +			});, +		}, +, +		private void invoke(Map<String, Object> arguments, MonoSink<Object> sink) {]