[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, + * Copyright 2012-2018 the original author or authors., +		input.forEach((key, value) -> {, +			String name = getPropertyName(path, key);, +				flatten(properties, (Map<String, Object>) value, name);, +				properties.put(name,, +					flatten(properties, Collections.singletonMap(itemKey, item), name);, +				properties.put(name, value);, +				properties.put(name, value.toString());, +				properties.put(name, value.toString());, +				properties.put(name, value == null ? "" : value);, +	private String getPropertyName(String path, String key) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, + * Copyright 2012-2018 the original author or authors., +		input.forEach((key, value) -> {, +			String name = getPropertyName(path, key);, +				flatten(properties, (Map<String, Object>) value, name);, +				properties.put(name,, +					flatten(properties, Collections.singletonMap(itemKey, item), name);, +				properties.put(name, value);, +				properties.put(name, value.toString());, +				properties.put(name, value.toString());, +				properties.put(name, value == null ? "" : value);, +	private String getPropertyName(String path, String key) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) -> context, +				.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, + * Copyright 2012-2018 the original author or authors., +		input.forEach((key, value) -> {, +			String name = getPropertyName(path, key);, +				flatten(properties, (Map<String, Object>) value, name);, +				properties.put(name,, +					flatten(properties, Collections.singletonMap(itemKey, item), name);, +				properties.put(name, value);, +				properties.put(name, value.toString());, +				properties.put(name, value.toString());, +				properties.put(name, value == null ? "" : value);, +	private String getPropertyName(String path, String key) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) -> context, +				.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java, +		getLocaleCharsetMappings(), +				.forEach((locale, charset) -> context.addLocaleEncodingMappingParameter(, +						locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, + * Copyright 2012-2018 the original author or authors., +		input.forEach((key, value) -> {, +			String name = getPropertyName(path, key);, +				flatten(properties, (Map<String, Object>) value, name);, +				properties.put(name,, +					flatten(properties, Collections.singletonMap(itemKey, item), name);, +				properties.put(name, value);, +				properties.put(name, value.toString());, +				properties.put(name, value.toString());, +				properties.put(name, value == null ? "" : value);, +	private String getPropertyName(String path, String key) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java, +		getLocaleCharsetMappings().forEach((locale, charset) -> context, +				.addLocaleEncoding(locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java, +		getLocaleCharsetMappings(), +				.forEach((locale, charset) -> context.addLocaleEncodingMappingParameter(, +						locale.toString(), charset.toString()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/FileSessionPersistence.java, + * Copyright 2012-2018 the original author or authors., +		sessionData.forEach((key, value) -> session.put(key,, +				new SerializablePersistentSession(value)));, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthAggregator.java, + * Copyright 2012-2018 the original author or authors., +		healths.values().forEach((health) -> statusCandidates.add(health.getStatus()));, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.java, + * Copyright 2012-2018 the original author or authors., +		input.forEach((key, value) -> {, +			String name = getPropertyName(path, key);, +				flatten(properties, (Map<String, Object>) value, name);, +				properties.put(name,, +					flatten(properties, Collections.singletonMap(itemKey, item), name);, +				properties.put(name, value);, +				properties.put(name, value.toString());, +				properties.put(name, value.toString());, +				properties.put(name, value == null ? "" : value);, +	private String getPropertyName(String path, String key) {, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java]