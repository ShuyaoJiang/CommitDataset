[+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +				if (file.getKind() != Kind.DELETED, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +				if (file.getKind() != Kind.DELETED, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +				if (file.getKind() != Kind.DELETED, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +	static BindConverter get(ConversionService conversionService,, +			if (sharedInstance == null) {, +				sharedInstance = new BindConverter(conversionService,, +			return sharedInstance;, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +				if (file.getKind() != Kind.DELETED, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +	static BindConverter get(ConversionService conversionService,, +			if (sharedInstance == null) {, +				sharedInstance = new BindConverter(conversionService,, +			return sharedInstance;, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTags.java, +	 * Creates an {@code outcome} tag based on the response status of the given, +	 * @since 2.1.0, +++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcTags.java, +	 * Creates an {@code outcome} tag based on the status of the given {@code response}., +	 * @since 2.1.0, +			if (status < 500) {, +++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jDataAutoConfigurationTests.java, +	public void providesARequestScopedBookmarkManagerIfNecessaryAndPossible() {, +	public void providesASingletonScopedBookmarkManagerIfNecessaryAndPossible() {, +++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java, +				if (file.getKind() != Kind.DELETED, +++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/build.gradle, +++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BindConverter.java, +	static BindConverter get(ConversionService conversionService,, +			if (sharedInstance == null) {, +				sharedInstance = new BindConverter(conversionService,]