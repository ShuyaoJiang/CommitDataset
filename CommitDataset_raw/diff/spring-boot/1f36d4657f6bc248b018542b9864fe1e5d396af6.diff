[+++ b/spring-boot-actuator/pom.xml, +			<artifactId>crash.shell</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +			<artifactId>crash.cli</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>crash.shell</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +			<artifactId>crash.cli</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +import org.springframework.util.StringUtils;, +			this.name = StringUtils.cleanPath(file.getAbsolutePath().substring(, +					rootFolder.getAbsolutePath().length() + 1));, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>crash.shell</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +			<artifactId>crash.cli</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +import org.springframework.util.StringUtils;, +			this.name = StringUtils.cleanPath(file.getAbsolutePath().substring(, +					rootFolder.getAbsolutePath().length() + 1));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +import org.springframework.util.StringUtils;, +			entry = StringUtils.cleanPath(entry);, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>crash.shell</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +			<artifactId>crash.cli</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +import org.springframework.util.StringUtils;, +			this.name = StringUtils.cleanPath(file.getAbsolutePath().substring(, +					rootFolder.getAbsolutePath().length() + 1));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +import org.springframework.util.StringUtils;, +			entry = StringUtils.cleanPath(entry);, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/DetailedProgressReporterTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.endsWith;, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;, +/**, + * Tests for {@link DetailedProgressReporter}., + * , + * @author Andy Wilkinson, + */, +		String message = new String(this.baos.toByteArray()).replace("\\", "/");, +		assertThat(message, startsWith("Downloaded: " + REPOSITORY + ARTIFACT));, +		assertThat(message, containsString("4KB at"));, +		assertThat(message, containsString("KB/sec"));, +		assertThat(message, endsWith("\n"));, +++ b/spring-boot-actuator/pom.xml, +			<artifactId>crash.shell</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +			<artifactId>crash.cli</artifactId>, +			<optional>true</optional>, +		</dependency>, +		<dependency>, +			<groupId>org.crashub</groupId>, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/ResourceMatcher.java, +import org.springframework.util.StringUtils;, +			this.name = StringUtils.cleanPath(file.getAbsolutePath().substring(, +					rootFolder.getAbsolutePath().length() + 1));, +++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java, +import org.springframework.util.StringUtils;, +			entry = StringUtils.cleanPath(entry);, +++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/DetailedProgressReporterTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.endsWith;, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;]