[+++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not require, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not require, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Look for classes called `+*AutoConfiguration+` and read their sources, in particular the, +  `+@Conditional*+` annotations to find out what features they enable and when. Add, +configuration using properties in `+spring.main.*+`. E.g. in `application.properties` you, +default filter token from `+${*}+` since it conflicts with those placeholders., +You can either use `+@*@+` (i.e. `@maven.token@` instead of `${maven.token}`) or you can, +SSL can be configured declaratively by setting the various `+server.ssl.*+` properties,, +`EmbeddedServletContainerCustomizer` and various Tomcat specific `+*Customizers+` that you, +(`none`). In addition all properties in `+spring.jpa.properties.*+` are passed through as, +`+@Enable*Repositories+` and tell it the location of your `Repository` interfaces, +There are also flags `+spring.data.*.repositories.enabled+` that you can use to switch the, +defaults try setting properties in `+security.*+` (see, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not require, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Look for classes called `+*AutoConfiguration+` and read their sources, in particular the, +  `+@Conditional*+` annotations to find out what features they enable and when. Add, +configuration using properties in `+spring.main.*+`. E.g. in `application.properties` you, +default filter token from `+${*}+` since it conflicts with those placeholders., +You can either use `+@*@+` (i.e. `@maven.token@` instead of `${maven.token}`) or you can, +SSL can be configured declaratively by setting the various `+server.ssl.*+` properties,, +`EmbeddedServletContainerCustomizer` and various Tomcat specific `+*Customizers+` that you, +(`none`). In addition all properties in `+spring.jpa.properties.*+` are passed through as, +`+@Enable*Repositories+` and tell it the location of your `Repository` interfaces, +There are also flags `+spring.data.*.repositories.enabled+` that you can use to switch the, +defaults try setting properties in `+security.*+` (see, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +You can customize the data exposed by the `info` endpoint by setting `+info.*+` Spring, +NOTE: In the above example we used `+project.*+` to set some values to be used as, +* `+classpath*:/commands/**+`, +* `+classpath*:/crash/commands/**+`, +comes from a request matched by Spring MVC as `+/**+` (normally a static resource)., +type (e.g. `+histogram.*+`, `+meter.*+`)., +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not require, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Look for classes called `+*AutoConfiguration+` and read their sources, in particular the, +  `+@Conditional*+` annotations to find out what features they enable and when. Add, +configuration using properties in `+spring.main.*+`. E.g. in `application.properties` you, +default filter token from `+${*}+` since it conflicts with those placeholders., +You can either use `+@*@+` (i.e. `@maven.token@` instead of `${maven.token}`) or you can, +SSL can be configured declaratively by setting the various `+server.ssl.*+` properties,, +`EmbeddedServletContainerCustomizer` and various Tomcat specific `+*Customizers+` that you, +(`none`). In addition all properties in `+spring.jpa.properties.*+` are passed through as, +`+@Enable*Repositories+` and tell it the location of your `Repository` interfaces, +There are also flags `+spring.data.*.repositories.enabled+` that you can use to switch the, +defaults try setting properties in `+security.*+` (see, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc, +You can customize the data exposed by the `info` endpoint by setting `+info.*+` Spring, +NOTE: In the above example we used `+project.*+` to set some values to be used as, +* `+classpath*:/commands/**+`, +* `+classpath*:/crash/commands/**+`, +comes from a request matched by Spring MVC as `+/**+` (normally a static resource)., +type (e.g. `+histogram.*+`, `+meter.*+`)., +++ b/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc, +. A `RandomValuePropertySource` that only has properties in `+random.*+`., +The `+random.int*+` syntax is `OPEN value (,max) CLOSE` where the `OPEN,CLOSE` are any, +`Environment` (so for example in `application.properties`) using '`+logging.level.*=LEVEL+`', +http://www.webjars.org/[Webjars content]. Any resources with a path in `+/webjars/**+` will, +will map to `+/*+`., +* Ignored (unsecure) paths for common static resource locations (`+/css/**+`, `+/js/**+`,, +  `+/images/**+` and `+**/favicon.ico+`)., +(`+security.*+`). To override the access rules without changing any other autoconfigured, +(`+management.security.*+`). To override the application access rules, +`+spring.datasource.*+`. For example, you might declare the following section, +`+spring.jpa.*+` properties. For example, to create and drop tables you can add the, +properties, using `+spring.jpa.properties.*+` (the prefix is stripped before adding them, +`+spring.hornetq.*+`. For example, you might declare the following section in, +`+spring.activemq.*+`. For example, you might declare the following section in, +++ b/spring-boot-docs/src/main/asciidoc/appendix-executable-jar-format.adoc, +`[Jar|War]Launcher` the nested paths are fixed (`+lib/*.jar+` and `+lib-provided/*.jar+` for, +++ b/spring-boot-docs/src/main/asciidoc/getting-started.adoc, +appropriate `+spring-boot-*.jar+` files on your classpath. Spring Boot does not require, +++ b/spring-boot-docs/src/main/asciidoc/howto.adoc, +* Look for classes called `+*AutoConfiguration+` and read their sources, in particular the, +  `+@Conditional*+` annotations to find out what features they enable and when. Add, +configuration using properties in `+spring.main.*+`. E.g. in `application.properties` you, +default filter token from `+${*}+` since it conflicts with those placeholders., +You can either use `+@*@+` (i.e. `@maven.token@` instead of `${maven.token}`) or you can, +SSL can be configured declaratively by setting the various `+server.ssl.*+` properties,, +`EmbeddedServletContainerCustomizer` and various Tomcat specific `+*Customizers+` that you, +(`none`). In addition all properties in `+spring.jpa.properties.*+` are passed through as, +`+@Enable*Repositories+` and tell it the location of your `Repository` interfaces, +There are also flags `+spring.data.*.repositories.enabled+` that you can use to switch the, +defaults try setting properties in `+security.*+` (see, +++ b/spring-boot-docs/src/main/asciidoc/production-ready-features.adoc]