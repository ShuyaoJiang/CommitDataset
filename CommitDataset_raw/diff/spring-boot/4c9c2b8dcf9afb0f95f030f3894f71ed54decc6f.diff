[+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java, +	private static final String REPACKAGE_TASK_NAME = "bootRepackage";, +, +		// register BootRepackage so that we can use, +		// task foo(type: BootRepackage) {}, +		project.getExtensions().getExtraProperties(), +				.set("BootRepackage", Repackage.class);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java, +	private static final String REPACKAGE_TASK_NAME = "bootRepackage";, +, +		// register BootRepackage so that we can use, +		// task foo(type: BootRepackage) {}, +		project.getExtensions().getExtraProperties(), +				.set("BootRepackage", Repackage.class);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +	 * The name of the custom configuration to use., +	 */, +	String customConfiguration, +, +	/**, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java, +	private static final String REPACKAGE_TASK_NAME = "bootRepackage";, +, +		// register BootRepackage so that we can use, +		// task foo(type: BootRepackage) {}, +		project.getExtensions().getExtraProperties(), +				.set("BootRepackage", Repackage.class);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +	 * The name of the custom configuration to use., +	 */, +	String customConfiguration, +, +	/**, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +	private String customConfigurationName = null;, +	public void setCustomConfigurationName(String customConfigurationName) {, +		this.customConfigurationName = customConfigurationName;, +	}, +, +		FileCollection custom = this.customConfigurationName != null ? this.project, +				.getConfigurations().findByName(this.customConfigurationName) : null;, +		if (custom != null) {, +			libraries(LibraryScope.CUSTOM, custom, callback);, +		}, +		else {, +			FileCollection compile = this.project.getConfigurations(), +					.getByName("compile");, +, +			FileCollection runtime = this.project.getConfigurations(), +					.getByName("runtime");, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java, +	private static final String REPACKAGE_TASK_NAME = "bootRepackage";, +, +		// register BootRepackage so that we can use, +		// task foo(type: BootRepackage) {}, +		project.getExtensions().getExtraProperties(), +				.set("BootRepackage", Repackage.class);, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPluginExtension.groovy, +	 * The name of the custom configuration to use., +	 */, +	String customConfiguration, +, +	/**, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java, +	private String customConfigurationName = null;, +	public void setCustomConfigurationName(String customConfigurationName) {, +		this.customConfigurationName = customConfigurationName;, +	}, +, +		FileCollection custom = this.customConfigurationName != null ? this.project, +				.getConfigurations().findByName(this.customConfigurationName) : null;, +		if (custom != null) {, +			libraries(LibraryScope.CUSTOM, custom, callback);, +		}, +		else {, +			FileCollection compile = this.project.getConfigurations(), +					.getByName("compile");, +, +			FileCollection runtime = this.project.getConfigurations(), +					.getByName("runtime");, +	}, +, +++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java, +	private String customConfiguration;, +, +	private Object withJarTask;, +, +	public void setCustomConfiguration(String customConfiguration) {, +		this.customConfiguration = customConfiguration;, +	}, +, +	public void setWithJarTask(Object withJarTask) {, +		this.withJarTask = withJarTask;, +	}, +, +		if (this.customConfiguration != null) {, +			libraries.setCustomConfigurationName(this.customConfiguration);, +		}]