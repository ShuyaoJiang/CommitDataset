[+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import org.springframework.util.CollectionUtils;, +	private final Consumer consumer = new Consumer();, +	private final Producer producer = new Producer();, +	private final Listener listener = new Listener();, +	private final Ssl ssl = new Ssl();, +	private final Template template = new Template();, +	public Consumer getConsumer() {, +		return this.consumer;, +	}, +, +	public Producer getProducer() {, +		return this.producer;, +	}, +, +	public Listener getListener() {, +		return this.listener;, +	}, +, +	public Ssl getSsl() {, +		return this.ssl;, +	}, +, +	public Template getTemplate() {, +		return this.template;, +	}, +, +		if (!CollectionUtils.isEmpty(this.properties)) {, +		Map<String, Object> properties = buildCommonProperties();, +		properties.putAll(this.consumer.buildProperties());, +		return properties;, +		Map<String, Object> properties = buildCommonProperties();, +		properties.putAll(this.producer.buildProperties());, +		return properties;, +				properties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,, +						this.maxPollRecords);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import org.springframework.util.CollectionUtils;, +	private final Consumer consumer = new Consumer();, +	private final Producer producer = new Producer();, +	private final Listener listener = new Listener();, +	private final Ssl ssl = new Ssl();, +	private final Template template = new Template();, +	public Consumer getConsumer() {, +		return this.consumer;, +	}, +, +	public Producer getProducer() {, +		return this.producer;, +	}, +, +	public Listener getListener() {, +		return this.listener;, +	}, +, +	public Ssl getSsl() {, +		return this.ssl;, +	}, +, +	public Template getTemplate() {, +		return this.template;, +	}, +, +		if (!CollectionUtils.isEmpty(this.properties)) {, +		Map<String, Object> properties = buildCommonProperties();, +		properties.putAll(this.consumer.buildProperties());, +		return properties;, +		Map<String, Object> properties = buildCommonProperties();, +		properties.putAll(this.producer.buildProperties());, +		return properties;, +				properties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,, +						this.maxPollRecords);, +++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationTests.java, +		load("spring.kafka.bootstrap-servers=foo:1234", "spring.kafka.properties.foo=bar",, +		assertThat(configs.get(ConsumerConfig.MAX_POLL_RECORDS_CONFIG)).isEqualTo(42);, +++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java, +import org.springframework.util.CollectionUtils;, +	private final Consumer consumer = new Consumer();, +	private final Producer producer = new Producer();, +	private final Listener listener = new Listener();, +	private final Ssl ssl = new Ssl();, +	private final Template template = new Template();, +	public Consumer getConsumer() {, +		return this.consumer;, +	}, +, +	public Producer getProducer() {, +		return this.producer;, +	}, +, +	public Listener getListener() {, +		return this.listener;, +	}, +, +	public Ssl getSsl() {, +		return this.ssl;, +	}, +, +	public Template getTemplate() {, +		return this.template;]